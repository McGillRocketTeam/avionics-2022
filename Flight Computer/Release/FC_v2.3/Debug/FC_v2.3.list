
FC_v2.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c1cc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001878  0801c380  0801c380  0002c380  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801dbf8  0801dbf8  000302cc  2**0
                  CONTENTS
  4 .ARM          00000008  0801dbf8  0801dbf8  0002dbf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801dc00  0801dc00  000302cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801dc00  0801dc00  0002dc00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801dc08  0801dc08  0002dc08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  0801dc0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302cc  2**0
                  CONTENTS
 10 .bss          0000ce00  200002cc  200002cc  000302cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  2000d0cc  2000d0cc  000302cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0007208c  00000000  00000000  000302fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a372  00000000  00000000  000a2388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003ad0  00000000  00000000  000ac700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003758  00000000  00000000  000b01d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000383bf  00000000  00000000  000b3928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00047538  00000000  00000000  000ebce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00113f84  00000000  00000000  0013321f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002471a3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00011258  00000000  00000000  002471f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  00258450  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  0025851c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002cc 	.word	0x200002cc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801c364 	.word	0x0801c364

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002d0 	.word	0x200002d0
 80001ec:	0801c364 	.word	0x0801c364

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <println>:

#include <MRT_helpers.h>
#include <MRT_setup.h>
#include <tim.h>

void println(char* s){
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	#if PRINT
	HAL_UART_Transmit(&DEBUGUART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff f8e5 	bl	8000204 <strlen>
 800103a:	4603      	mov	r3, r0
 800103c:	b29a      	uxth	r2, r3
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	4806      	ldr	r0, [pc, #24]	; (8001060 <println+0x34>)
 8001046:	f00d fae4 	bl	800e612 <HAL_UART_Transmit>
	HAL_UART_Transmit(&DEBUGUART, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	2202      	movs	r2, #2
 8001050:	4904      	ldr	r1, [pc, #16]	; (8001064 <println+0x38>)
 8001052:	4803      	ldr	r0, [pc, #12]	; (8001060 <println+0x34>)
 8001054:	f00d fadd 	bl	800e612 <HAL_UART_Transmit>
	#endif
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	2000bd28 	.word	0x2000bd28
 8001064:	0801c380 	.word	0x0801c380

08001068 <print>:

void print(char* s){
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	#if PRINT
	HAL_UART_Transmit(&DEBUGUART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff f8c7 	bl	8000204 <strlen>
 8001076:	4603      	mov	r3, r0
 8001078:	b29a      	uxth	r2, r3
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	4803      	ldr	r0, [pc, #12]	; (8001090 <print+0x28>)
 8001082:	f00d fac6 	bl	800e612 <HAL_UART_Transmit>
	#endif
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	2000bd28 	.word	0x2000bd28

08001094 <tone_freq>:
void no_print(char* s){
	//TODO Buffer function for Iridium
}

// buzz at particular frequency
void tone_freq(uint32_t duration, uint32_t repeats, uint32_t freq) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
	#if !NO_BUZZ
	// TIM2 base frequency is 90 MHz, PSC = 90-1
	// can calculate required ARR value
	TIM2->ARR = 1000000 / freq;
 80010a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010a4:	491c      	ldr	r1, [pc, #112]	; (8001118 <tone_freq+0x84>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80010ac:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->EGR |= TIM_EGR_UG;
 80010ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6153      	str	r3, [r2, #20]

	for (uint32_t i = 0; i < repeats; i++) {
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	e01f      	b.n	8001104 <tone_freq+0x70>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80010c4:	2108      	movs	r1, #8
 80010c6:	4815      	ldr	r0, [pc, #84]	; (800111c <tone_freq+0x88>)
 80010c8:	f00c fac4 	bl	800d654 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(POWER_ON_EXT_LED_GPIO_Port, POWER_ON_EXT_LED_Pin, SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d2:	4813      	ldr	r0, [pc, #76]	; (8001120 <tone_freq+0x8c>)
 80010d4:	f008 fdfa 	bl	8009ccc <HAL_GPIO_WritePin>
		HAL_Delay(duration);
 80010d8:	68f8      	ldr	r0, [r7, #12]
 80010da:	f007 feeb 	bl	8008eb4 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80010de:	2108      	movs	r1, #8
 80010e0:	480e      	ldr	r0, [pc, #56]	; (800111c <tone_freq+0x88>)
 80010e2:	f00c fb7f 	bl	800d7e4 <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(POWER_ON_EXT_LED_GPIO_Port, POWER_ON_EXT_LED_Pin, RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ec:	480c      	ldr	r0, [pc, #48]	; (8001120 <tone_freq+0x8c>)
 80010ee:	f008 fded 	bl	8009ccc <HAL_GPIO_WritePin>
		if (repeats > 1)
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d902      	bls.n	80010fe <tone_freq+0x6a>
			HAL_Delay(duration);
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f007 fedb 	bl	8008eb4 <HAL_Delay>
	for (uint32_t i = 0; i < repeats; i++) {
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	3301      	adds	r3, #1
 8001102:	617b      	str	r3, [r7, #20]
 8001104:	697a      	ldr	r2, [r7, #20]
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	429a      	cmp	r2, r3
 800110a:	d3db      	bcc.n	80010c4 <tone_freq+0x30>
	}
	#endif
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	000f4240 	.word	0x000f4240
 800111c:	2000bc9c 	.word	0x2000bc9c
 8001120:	40020400 	.word	0x40020400

08001124 <buzz_success>:
void buzz_success(void) { tone_freq(BUZZ_SUCCESS_DURATION, BUZZ_SUCCESS_REPEATS, BUZZ_SUCCESS_FREQ); }
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
 8001128:	f240 4216 	movw	r2, #1046	; 0x416
 800112c:	2102      	movs	r1, #2
 800112e:	204b      	movs	r0, #75	; 0x4b
 8001130:	f7ff ffb0 	bl	8001094 <tone_freq>
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}

08001138 <buzz_startup_success>:
void buzz_failure(void) { tone_freq(BUZZ_FAILURE_DURATION, BUZZ_FAILURE_REPEATS, BUZZ_FAILURE_FREQ); }
void buzz_startup_success(void) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 800113e:	2300      	movs	r3, #0
 8001140:	71fb      	strb	r3, [r7, #7]
 8001142:	e008      	b.n	8001156 <buzz_startup_success+0x1e>
		buzz_success();
 8001144:	f7ff ffee 	bl	8001124 <buzz_success>
		HAL_Delay(1000);
 8001148:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800114c:	f007 feb2 	bl	8008eb4 <HAL_Delay>
	for (uint8_t i = 0; i < 3; i++) {
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	3301      	adds	r3, #1
 8001154:	71fb      	strb	r3, [r7, #7]
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	2b02      	cmp	r3, #2
 800115a:	d9f3      	bls.n	8001144 <buzz_startup_success+0xc>
	}
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <MRT_Init>:


//**************************************************//
//PUBLIC FUNCTIONS

void MRT_Init(void){
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	print((char*) "\r\n\r\n/********MRT Init********/\r\n");
 800116c:	480d      	ldr	r0, [pc, #52]	; (80011a4 <MRT_Init+0x3c>)
 800116e:	f7ff ff7b 	bl	8001068 <print>

	MRT_Reinitialize_Peripherals();
 8001172:	f000 f8fb 	bl	800136c <MRT_Reinitialize_Peripherals>

	//Memory
	MRT_MEMORY_Init();
 8001176:	f003 f855 	bl	8004224 <MRT_MEMORY_Init>
	MRT_reset_info();
 800117a:	f000 f829 	bl	80011d0 <MRT_reset_info>

	//IWDG
	#if IWDG_ACTIVE
	print((char*) "IWDG Init...");
 800117e:	480a      	ldr	r0, [pc, #40]	; (80011a8 <MRT_Init+0x40>)
 8001180:	f7ff ff72 	bl	8001068 <print>
	MX_IWDG_Init();
 8001184:	f001 fa74 	bl	8002670 <MX_IWDG_Init>
	print((char*) "OK\r\n");
 8001188:	4808      	ldr	r0, [pc, #32]	; (80011ac <MRT_Init+0x44>)
 800118a:	f7ff ff6d 	bl	8001068 <print>
	#endif

	//RTC
	HAL_IWDG_Refresh(&hiwdg);
 800118e:	4808      	ldr	r0, [pc, #32]	; (80011b0 <MRT_Init+0x48>)
 8001190:	f009 fe80 	bl	800ae94 <HAL_IWDG_Refresh>
	MRT_rtc_Init();
 8001194:	f001 fd6a 	bl	8002c6c <MRT_rtc_Init>
		  checkForI2CDevices(huart8,hi2c1);
		  checkForI2CDevices(huart8,hi2c2);
		  checkForI2CDevices(huart8,hi2c3);
		#endif

		MRT_i2c_sensors_Init();
 8001198:	f004 fbf2 	bl	8005980 <MRT_i2c_sensors_Init>
	#endif


	//Telemetry
	#if TELEMETRY_THREAD
		MRT_TELEMETRY_Init();
 800119c:	f006 fbe6 	bl	800796c <MRT_TELEMETRY_Init>
	#endif

	#if FORCED_EJECTION_STAGE
		   ejection_stage_flag = FORCED_STAGE;
	#endif
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	0801c384 	.word	0x0801c384
 80011a8:	0801c3a8 	.word	0x0801c3a8
 80011ac:	0801c3b8 	.word	0x0801c3b8
 80011b0:	2000bb20 	.word	0x2000bb20

080011b4 <MRT_Deinit>:




void MRT_Deinit(void){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	print((char*) "\r\n\r\n/********MRT Deinit********/\r\n");
 80011b8:	4804      	ldr	r0, [pc, #16]	; (80011cc <MRT_Deinit+0x18>)
 80011ba:	f7ff ff55 	bl	8001068 <print>

	MRT_Reinitialize_Peripherals();
 80011be:	f000 f8d5 	bl	800136c <MRT_Reinitialize_Peripherals>
	#endif


	//Sensors
	#if SENSORS_THREAD
		MRT_i2c_sensors_Deinit();
 80011c2:	f004 fc19 	bl	80059f8 <MRT_i2c_sensors_Deinit>
	#endif

    //TODO
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	0801c3c0 	.word	0x0801c3c0

080011d0 <MRT_reset_info>:

//**************************************************//
//PRIVATE FUNCTIONS


void MRT_reset_info(void){
 80011d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011d2:	b0a9      	sub	sp, #164	; 0xa4
 80011d4:	af06      	add	r7, sp, #24

	  char buffer[100];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\nPrevious RTC time: %i:%i:%i ::%i\r\n",
 80011d6:	4b4e      	ldr	r3, [pc, #312]	; (8001310 <MRT_reset_info+0x140>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	461e      	mov	r6, r3
 80011dc:	4b4d      	ldr	r3, [pc, #308]	; (8001314 <MRT_reset_info+0x144>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	469c      	mov	ip, r3
 80011e2:	4b4d      	ldr	r3, [pc, #308]	; (8001318 <MRT_reset_info+0x148>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	4b4c      	ldr	r3, [pc, #304]	; (800131c <MRT_reset_info+0x14c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4619      	mov	r1, r3
 80011ee:	4b4c      	ldr	r3, [pc, #304]	; (8001320 <MRT_reset_info+0x150>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	461c      	mov	r4, r3
 80011f4:	4b4b      	ldr	r3, [pc, #300]	; (8001324 <MRT_reset_info+0x154>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	461d      	mov	r5, r3
 80011fa:	4b4b      	ldr	r3, [pc, #300]	; (8001328 <MRT_reset_info+0x158>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001202:	9304      	str	r3, [sp, #16]
 8001204:	9503      	str	r5, [sp, #12]
 8001206:	9402      	str	r4, [sp, #8]
 8001208:	9101      	str	r1, [sp, #4]
 800120a:	9200      	str	r2, [sp, #0]
 800120c:	4663      	mov	r3, ip
 800120e:	4632      	mov	r2, r6
 8001210:	4946      	ldr	r1, [pc, #280]	; (800132c <MRT_reset_info+0x15c>)
 8001212:	f017 f861 	bl	80182d8 <siprintf>
			  reset_flag, wu_flag, iwdg_flag, prev_hour, prev_min, prev_sec, prev_subsec);
	  print(buffer);
 8001216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ff24 	bl	8001068 <print>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 8001220:	4b3d      	ldr	r3, [pc, #244]	; (8001318 <MRT_reset_info+0x148>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d119      	bne.n	800125c <MRT_reset_info+0x8c>
		  print((char*) "Deactivating IWDG\r\n");
 8001228:	4841      	ldr	r0, [pc, #260]	; (8001330 <MRT_reset_info+0x160>)
 800122a:	f7ff ff1d 	bl	8001068 <print>

		  iwdg_flag = 0; //Flip flag
 800122e:	4b3a      	ldr	r3, [pc, #232]	; (8001318 <MRT_reset_info+0x148>)
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]

		  //Write new flag to memory
		  rtc_bckp_reg_iwdg = iwdg_flag;
 8001234:	4b38      	ldr	r3, [pc, #224]	; (8001318 <MRT_reset_info+0x148>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	4b3e      	ldr	r3, [pc, #248]	; (8001334 <MRT_reset_info+0x164>)
 800123c:	601a      	str	r2, [r3, #0]
		  ext_flash_iwdg = iwdg_flag;
 800123e:	4b36      	ldr	r3, [pc, #216]	; (8001318 <MRT_reset_info+0x148>)
 8001240:	781a      	ldrb	r2, [r3, #0]
 8001242:	4b3d      	ldr	r3, [pc, #244]	; (8001338 <MRT_reset_info+0x168>)
 8001244:	701a      	strb	r2, [r3, #0]
		  MRT_saveFlagValue(FC_STATE_IWDG);
 8001246:	2002      	movs	r0, #2
 8001248:	f002 fe58 	bl	8003efc <MRT_saveFlagValue>

		  HAL_Delay(500);
 800124c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001250:	f007 fe30 	bl	8008eb4 <HAL_Delay>

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 8001254:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 8001258:	f001 fdae 	bl	8002db8 <MRT_StandByMode>
	  }


	  //Check if we are after waking up (and at which wake up we are at)
	  if (wu_flag > 0){
 800125c:	4b2d      	ldr	r3, [pc, #180]	; (8001314 <MRT_reset_info+0x144>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d00b      	beq.n	800127c <MRT_reset_info+0xac>
		  char buf[30];
		  sprintf(buf, "FC wake up %i\r\n", wu_flag);
 8001264:	4b2b      	ldr	r3, [pc, #172]	; (8001314 <MRT_reset_info+0x144>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	4933      	ldr	r1, [pc, #204]	; (800133c <MRT_reset_info+0x16c>)
 800126e:	4618      	mov	r0, r3
 8001270:	f017 f832 	bl	80182d8 <siprintf>
		  print(buf);
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fef6 	bl	8001068 <print>
	  }


	  //Check if we start from the beginning
	  if (reset_flag == 0){
 800127c:	4b24      	ldr	r3, [pc, #144]	; (8001310 <MRT_reset_info+0x140>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d108      	bne.n	8001296 <MRT_reset_info+0xc6>
		  print((char*) "FC restarted\r\n");
 8001284:	482e      	ldr	r0, [pc, #184]	; (8001340 <MRT_reset_info+0x170>)
 8001286:	f7ff feef 	bl	8001068 <print>

		  reset_flag = 1; //Flip flag
 800128a:	4b21      	ldr	r3, [pc, #132]	; (8001310 <MRT_reset_info+0x140>)
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]

		  MRT_saveFlagValue(FC_STATE_RESET);
 8001290:	2000      	movs	r0, #0
 8001292:	f002 fe33 	bl	8003efc <MRT_saveFlagValue>
	  }


	  //Check if before or after apogee
	  if (apogee_flag == 0){
 8001296:	4b2b      	ldr	r3, [pc, #172]	; (8001344 <MRT_reset_info+0x174>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d103      	bne.n	80012a6 <MRT_reset_info+0xd6>
		  print((char*) "Pre-apogee\r\n");
 800129e:	482a      	ldr	r0, [pc, #168]	; (8001348 <MRT_reset_info+0x178>)
 80012a0:	f7ff fee2 	bl	8001068 <print>
 80012a4:	e006      	b.n	80012b4 <MRT_reset_info+0xe4>
	  }
	  else if(apogee_flag==1){
 80012a6:	4b27      	ldr	r3, [pc, #156]	; (8001344 <MRT_reset_info+0x174>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d102      	bne.n	80012b4 <MRT_reset_info+0xe4>
		  print((char*) "Post-apogee\r\n");
 80012ae:	4827      	ldr	r0, [pc, #156]	; (800134c <MRT_reset_info+0x17c>)
 80012b0:	f7ff feda 	bl	8001068 <print>
	  }


	  //Check ejection stage
	  print((char*)"Ejection Stage: ");
 80012b4:	4826      	ldr	r0, [pc, #152]	; (8001350 <MRT_reset_info+0x180>)
 80012b6:	f7ff fed7 	bl	8001068 <print>
	  if (ejection_stage_flag==PAD){
 80012ba:	4b26      	ldr	r3, [pc, #152]	; (8001354 <MRT_reset_info+0x184>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d103      	bne.n	80012ca <MRT_reset_info+0xfa>
		  print((char*)"Pad\r\n");
 80012c2:	4825      	ldr	r0, [pc, #148]	; (8001358 <MRT_reset_info+0x188>)
 80012c4:	f7ff fed0 	bl	8001068 <print>
		  print((char*)"Main descent\r\n");
	  }
	  else if(ejection_stage_flag==LANDED){
		  print((char*)"Landed\r\n");
	  }
}
 80012c8:	e01e      	b.n	8001308 <MRT_reset_info+0x138>
	  else if(ejection_stage_flag==BOOST){
 80012ca:	4b22      	ldr	r3, [pc, #136]	; (8001354 <MRT_reset_info+0x184>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d103      	bne.n	80012da <MRT_reset_info+0x10a>
		  print((char*)"Boost\r\n");
 80012d2:	4822      	ldr	r0, [pc, #136]	; (800135c <MRT_reset_info+0x18c>)
 80012d4:	f7ff fec8 	bl	8001068 <print>
}
 80012d8:	e016      	b.n	8001308 <MRT_reset_info+0x138>
	  else if(ejection_stage_flag==DROGUE_DESCENT){
 80012da:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <MRT_reset_info+0x184>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d103      	bne.n	80012ea <MRT_reset_info+0x11a>
		  print((char*)"Drogue descent\r\n");
 80012e2:	481f      	ldr	r0, [pc, #124]	; (8001360 <MRT_reset_info+0x190>)
 80012e4:	f7ff fec0 	bl	8001068 <print>
}
 80012e8:	e00e      	b.n	8001308 <MRT_reset_info+0x138>
	  else if(ejection_stage_flag==MAIN_DESCENT){
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <MRT_reset_info+0x184>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b03      	cmp	r3, #3
 80012f0:	d103      	bne.n	80012fa <MRT_reset_info+0x12a>
		  print((char*)"Main descent\r\n");
 80012f2:	481c      	ldr	r0, [pc, #112]	; (8001364 <MRT_reset_info+0x194>)
 80012f4:	f7ff feb8 	bl	8001068 <print>
}
 80012f8:	e006      	b.n	8001308 <MRT_reset_info+0x138>
	  else if(ejection_stage_flag==LANDED){
 80012fa:	4b16      	ldr	r3, [pc, #88]	; (8001354 <MRT_reset_info+0x184>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b04      	cmp	r3, #4
 8001300:	d102      	bne.n	8001308 <MRT_reset_info+0x138>
		  print((char*)"Landed\r\n");
 8001302:	4819      	ldr	r0, [pc, #100]	; (8001368 <MRT_reset_info+0x198>)
 8001304:	f7ff feb0 	bl	8001068 <print>
}
 8001308:	bf00      	nop
 800130a:	378c      	adds	r7, #140	; 0x8c
 800130c:	46bd      	mov	sp, r7
 800130e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001310:	20000390 	.word	0x20000390
 8001314:	20000391 	.word	0x20000391
 8001318:	20000392 	.word	0x20000392
 800131c:	20000395 	.word	0x20000395
 8001320:	20000396 	.word	0x20000396
 8001324:	20000397 	.word	0x20000397
 8001328:	20000398 	.word	0x20000398
 800132c:	0801c3e4 	.word	0x0801c3e4
 8001330:	0801c428 	.word	0x0801c428
 8001334:	20000338 	.word	0x20000338
 8001338:	20000382 	.word	0x20000382
 800133c:	0801c43c 	.word	0x0801c43c
 8001340:	0801c44c 	.word	0x0801c44c
 8001344:	20000393 	.word	0x20000393
 8001348:	0801c45c 	.word	0x0801c45c
 800134c:	0801c46c 	.word	0x0801c46c
 8001350:	0801c47c 	.word	0x0801c47c
 8001354:	20000394 	.word	0x20000394
 8001358:	0801c490 	.word	0x0801c490
 800135c:	0801c498 	.word	0x0801c498
 8001360:	0801c4a0 	.word	0x0801c4a0
 8001364:	0801c4b4 	.word	0x0801c4b4
 8001368:	0801c4c4 	.word	0x0801c4c4

0800136c <MRT_Reinitialize_Peripherals>:


void MRT_Reinitialize_Peripherals(void){
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
	  /*
	   * Reinitialize all peripherals
	   */

	  print((char*)"Reinitializing Peripherals...");
 8001370:	482f      	ldr	r0, [pc, #188]	; (8001430 <MRT_Reinitialize_Peripherals+0xc4>)
 8001372:	f7ff fe79 	bl	8001068 <print>

	  // reset LEDs
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	2102      	movs	r1, #2
 800137a:	482e      	ldr	r0, [pc, #184]	; (8001434 <MRT_Reinitialize_Peripherals+0xc8>)
 800137c:	f008 fca6 	bl	8009ccc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2104      	movs	r1, #4
 8001384:	482b      	ldr	r0, [pc, #172]	; (8001434 <MRT_Reinitialize_Peripherals+0xc8>)
 8001386:	f008 fca1 	bl	8009ccc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	2108      	movs	r1, #8
 800138e:	4829      	ldr	r0, [pc, #164]	; (8001434 <MRT_Reinitialize_Peripherals+0xc8>)
 8001390:	f008 fc9c 	bl	8009ccc <HAL_GPIO_WritePin>

	  // reset recovery pyro pins
	  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 8001394:	2201      	movs	r2, #1
 8001396:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800139a:	4827      	ldr	r0, [pc, #156]	; (8001438 <MRT_Reinitialize_Peripherals+0xcc>)
 800139c:	f008 fc96 	bl	8009ccc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 80013a0:	2200      	movs	r2, #0
 80013a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013a6:	4824      	ldr	r0, [pc, #144]	; (8001438 <MRT_Reinitialize_Peripherals+0xcc>)
 80013a8:	f008 fc90 	bl	8009ccc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 80013ac:	2200      	movs	r2, #0
 80013ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013b2:	4821      	ldr	r0, [pc, #132]	; (8001438 <MRT_Reinitialize_Peripherals+0xcc>)
 80013b4:	f008 fc8a 	bl	8009ccc <HAL_GPIO_WritePin>

	  // reset prop pyro pins
	  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 80013b8:	2201      	movs	r2, #1
 80013ba:	2102      	movs	r1, #2
 80013bc:	481e      	ldr	r0, [pc, #120]	; (8001438 <MRT_Reinitialize_Peripherals+0xcc>)
 80013be:	f008 fc85 	bl	8009ccc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 80013c2:	2200      	movs	r2, #0
 80013c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013c8:	481c      	ldr	r0, [pc, #112]	; (800143c <MRT_Reinitialize_Peripherals+0xd0>)
 80013ca:	f008 fc7f 	bl	8009ccc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 80013ce:	2200      	movs	r2, #0
 80013d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013d4:	4819      	ldr	r0, [pc, #100]	; (800143c <MRT_Reinitialize_Peripherals+0xd0>)
 80013d6:	f008 fc79 	bl	8009ccc <HAL_GPIO_WritePin>

	  // reset 12 V buck converter enable pin (disable converter)
	  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 80013da:	2200      	movs	r2, #0
 80013dc:	2104      	movs	r1, #4
 80013de:	4818      	ldr	r0, [pc, #96]	; (8001440 <MRT_Reinitialize_Peripherals+0xd4>)
 80013e0:	f008 fc74 	bl	8009ccc <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
	  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


	  // reset payload EN signal
	  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 80013e4:	2200      	movs	r2, #0
 80013e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ea:	4815      	ldr	r0, [pc, #84]	; (8001440 <MRT_Reinitialize_Peripherals+0xd4>)
 80013ec:	f008 fc6e 	bl	8009ccc <HAL_GPIO_WritePin>

	  // set CS pin for thermocouple chip high
	  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

	  // set power off for VR
	  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013f6:	4810      	ldr	r0, [pc, #64]	; (8001438 <MRT_Reinitialize_Peripherals+0xcc>)
 80013f8:	f008 fc68 	bl	8009ccc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 80013fc:	2200      	movs	r2, #0
 80013fe:	2180      	movs	r1, #128	; 0x80
 8001400:	4810      	ldr	r0, [pc, #64]	; (8001444 <MRT_Reinitialize_Peripherals+0xd8>)
 8001402:	f008 fc63 	bl	8009ccc <HAL_GPIO_WritePin>

	  // FLASH set CS, WP and IO3 pins high
	  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 8001406:	2201      	movs	r2, #1
 8001408:	2140      	movs	r1, #64	; 0x40
 800140a:	480e      	ldr	r0, [pc, #56]	; (8001444 <MRT_Reinitialize_Peripherals+0xd8>)
 800140c:	f008 fc5e 	bl	8009ccc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 8001410:	2201      	movs	r2, #1
 8001412:	2120      	movs	r1, #32
 8001414:	480b      	ldr	r0, [pc, #44]	; (8001444 <MRT_Reinitialize_Peripherals+0xd8>)
 8001416:	f008 fc59 	bl	8009ccc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 800141a:	2201      	movs	r2, #1
 800141c:	2110      	movs	r1, #16
 800141e:	4809      	ldr	r0, [pc, #36]	; (8001444 <MRT_Reinitialize_Peripherals+0xd8>)
 8001420:	f008 fc54 	bl	8009ccc <HAL_GPIO_WritePin>

	  print((char*)"OK\r\n");
 8001424:	4808      	ldr	r0, [pc, #32]	; (8001448 <MRT_Reinitialize_Peripherals+0xdc>)
 8001426:	f7ff fe1f 	bl	8001068 <print>
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	0801c4d0 	.word	0x0801c4d0
 8001434:	40020800 	.word	0x40020800
 8001438:	40021800 	.word	0x40021800
 800143c:	40021400 	.word	0x40021400
 8001440:	40021000 	.word	0x40021000
 8001444:	40020c00 	.word	0x40020c00
 8001448:	0801c3b8 	.word	0x0801c3b8

0800144c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001452:	463b      	mov	r3, r7
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800145e:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <MX_ADC1_Init+0x98>)
 8001460:	4a21      	ldr	r2, [pc, #132]	; (80014e8 <MX_ADC1_Init+0x9c>)
 8001462:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001464:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <MX_ADC1_Init+0x98>)
 8001466:	2200      	movs	r2, #0
 8001468:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800146a:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <MX_ADC1_Init+0x98>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001470:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <MX_ADC1_Init+0x98>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001476:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <MX_ADC1_Init+0x98>)
 8001478:	2200      	movs	r2, #0
 800147a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800147c:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <MX_ADC1_Init+0x98>)
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001484:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <MX_ADC1_Init+0x98>)
 8001486:	2200      	movs	r2, #0
 8001488:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <MX_ADC1_Init+0x98>)
 800148c:	4a17      	ldr	r2, [pc, #92]	; (80014ec <MX_ADC1_Init+0xa0>)
 800148e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <MX_ADC1_Init+0x98>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <MX_ADC1_Init+0x98>)
 8001498:	2201      	movs	r2, #1
 800149a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <MX_ADC1_Init+0x98>)
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <MX_ADC1_Init+0x98>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014aa:	480e      	ldr	r0, [pc, #56]	; (80014e4 <MX_ADC1_Init+0x98>)
 80014ac:	f007 fd26 	bl	8008efc <HAL_ADC_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80014b6:	f001 faeb 	bl	8002a90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80014ba:	2306      	movs	r3, #6
 80014bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014be:	2301      	movs	r3, #1
 80014c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014c6:	463b      	mov	r3, r7
 80014c8:	4619      	mov	r1, r3
 80014ca:	4806      	ldr	r0, [pc, #24]	; (80014e4 <MX_ADC1_Init+0x98>)
 80014cc:	f007 fef8 	bl	80092c0 <HAL_ADC_ConfigChannel>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80014d6:	f001 fadb 	bl	8002a90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	2000859c 	.word	0x2000859c
 80014e8:	40012000 	.word	0x40012000
 80014ec:	0f000001 	.word	0x0f000001

080014f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a17      	ldr	r2, [pc, #92]	; (800156c <HAL_ADC_MspInit+0x7c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d127      	bne.n	8001562 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <HAL_ADC_MspInit+0x80>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	4a15      	ldr	r2, [pc, #84]	; (8001570 <HAL_ADC_MspInit+0x80>)
 800151c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001520:	6453      	str	r3, [r2, #68]	; 0x44
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <HAL_ADC_MspInit+0x80>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <HAL_ADC_MspInit+0x80>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <HAL_ADC_MspInit+0x80>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <HAL_ADC_MspInit+0x80>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 800154a:	2340      	movs	r3, #64	; 0x40
 800154c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800154e:	2303      	movs	r3, #3
 8001550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	4805      	ldr	r0, [pc, #20]	; (8001574 <HAL_ADC_MspInit+0x84>)
 800155e:	f008 f9f1 	bl	8009944 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001562:	bf00      	nop
 8001564:	3728      	adds	r7, #40	; 0x28
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40012000 	.word	0x40012000
 8001570:	40023800 	.word	0x40023800
 8001574:	40020000 	.word	0x40020000

08001578 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800157c:	f3bf 8f4f 	dsb	sy
}
 8001580:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <__NVIC_SystemReset+0x24>)
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800158a:	4904      	ldr	r1, [pc, #16]	; (800159c <__NVIC_SystemReset+0x24>)
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <__NVIC_SystemReset+0x28>)
 800158e:	4313      	orrs	r3, r2
 8001590:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001592:	f3bf 8f4f 	dsb	sy
}
 8001596:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <__NVIC_SystemReset+0x20>
 800159c:	e000ed00 	.word	0xe000ed00
 80015a0:	05fa0004 	.word	0x05fa0004

080015a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	println("\r\nFREERTOS Init");
 80015a8:	4821      	ldr	r0, [pc, #132]	; (8001630 <MX_FREERTOS_Init+0x8c>)
 80015aa:	f7ff fd3f 	bl	800102c <println>
	print("\tInitializing the kernel...");
 80015ae:	4821      	ldr	r0, [pc, #132]	; (8001634 <MX_FREERTOS_Init+0x90>)
 80015b0:	f7ff fd5a 	bl	8001068 <print>
	osKernelInitialize();
 80015b4:	f010 ffd6 	bl	8012564 <osKernelInitialize>
	println("OK");
 80015b8:	481f      	ldr	r0, [pc, #124]	; (8001638 <MX_FREERTOS_Init+0x94>)
 80015ba:	f7ff fd37 	bl	800102c <println>

	print("\tCreating the threads...");
 80015be:	481f      	ldr	r0, [pc, #124]	; (800163c <MX_FREERTOS_Init+0x98>)
 80015c0:	f7ff fd52 	bl	8001068 <print>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 80015c4:	4a1e      	ldr	r2, [pc, #120]	; (8001640 <MX_FREERTOS_Init+0x9c>)
 80015c6:	2100      	movs	r1, #0
 80015c8:	481e      	ldr	r0, [pc, #120]	; (8001644 <MX_FREERTOS_Init+0xa0>)
 80015ca:	f011 f815 	bl	80125f8 <osThreadNew>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4a1d      	ldr	r2, [pc, #116]	; (8001648 <MX_FREERTOS_Init+0xa4>)
 80015d2:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 80015d4:	4a1d      	ldr	r2, [pc, #116]	; (800164c <MX_FREERTOS_Init+0xa8>)
 80015d6:	2100      	movs	r1, #0
 80015d8:	481d      	ldr	r0, [pc, #116]	; (8001650 <MX_FREERTOS_Init+0xac>)
 80015da:	f011 f80d 	bl	80125f8 <osThreadNew>
 80015de:	4603      	mov	r3, r0
 80015e0:	4a1c      	ldr	r2, [pc, #112]	; (8001654 <MX_FREERTOS_Init+0xb0>)
 80015e2:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 80015e4:	4a1c      	ldr	r2, [pc, #112]	; (8001658 <MX_FREERTOS_Init+0xb4>)
 80015e6:	2100      	movs	r1, #0
 80015e8:	481c      	ldr	r0, [pc, #112]	; (800165c <MX_FREERTOS_Init+0xb8>)
 80015ea:	f011 f805 	bl	80125f8 <osThreadNew>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4a1b      	ldr	r2, [pc, #108]	; (8001660 <MX_FREERTOS_Init+0xbc>)
 80015f2:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 80015f4:	4a1b      	ldr	r2, [pc, #108]	; (8001664 <MX_FREERTOS_Init+0xc0>)
 80015f6:	2100      	movs	r1, #0
 80015f8:	481b      	ldr	r0, [pc, #108]	; (8001668 <MX_FREERTOS_Init+0xc4>)
 80015fa:	f010 fffd 	bl	80125f8 <osThreadNew>
 80015fe:	4603      	mov	r3, r0
 8001600:	4a1a      	ldr	r2, [pc, #104]	; (800166c <MX_FREERTOS_Init+0xc8>)
 8001602:	6013      	str	r3, [r2, #0]

  /* creation of WatchDog */
  WatchDogHandle = osThreadNew(StartWatchDog, NULL, &WatchDog_attributes);
 8001604:	4a1a      	ldr	r2, [pc, #104]	; (8001670 <MX_FREERTOS_Init+0xcc>)
 8001606:	2100      	movs	r1, #0
 8001608:	481a      	ldr	r0, [pc, #104]	; (8001674 <MX_FREERTOS_Init+0xd0>)
 800160a:	f010 fff5 	bl	80125f8 <osThreadNew>
 800160e:	4603      	mov	r3, r0
 8001610:	4a19      	ldr	r2, [pc, #100]	; (8001678 <MX_FREERTOS_Init+0xd4>)
 8001612:	6013      	str	r3, [r2, #0]

  /* creation of Propulsion4 */
  Propulsion4Handle = osThreadNew(StartPropulsion4, NULL, &Propulsion4_attributes);
 8001614:	4a19      	ldr	r2, [pc, #100]	; (800167c <MX_FREERTOS_Init+0xd8>)
 8001616:	2100      	movs	r1, #0
 8001618:	4819      	ldr	r0, [pc, #100]	; (8001680 <MX_FREERTOS_Init+0xdc>)
 800161a:	f010 ffed 	bl	80125f8 <osThreadNew>
 800161e:	4603      	mov	r3, r0
 8001620:	4a18      	ldr	r2, [pc, #96]	; (8001684 <MX_FREERTOS_Init+0xe0>)
 8001622:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  println("OK");
 8001624:	4804      	ldr	r0, [pc, #16]	; (8001638 <MX_FREERTOS_Init+0x94>)
 8001626:	f7ff fd01 	bl	800102c <println>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	0801c534 	.word	0x0801c534
 8001634:	0801c544 	.word	0x0801c544
 8001638:	0801c560 	.word	0x0801c560
 800163c:	0801c564 	.word	0x0801c564
 8001640:	0801d4dc 	.word	0x0801d4dc
 8001644:	08001689 	.word	0x08001689
 8001648:	20008f60 	.word	0x20008f60
 800164c:	0801d500 	.word	0x0801d500
 8001650:	0800175d 	.word	0x0800175d
 8001654:	20009034 	.word	0x20009034
 8001658:	0801d524 	.word	0x0801d524
 800165c:	08001c11 	.word	0x08001c11
 8001660:	200090f4 	.word	0x200090f4
 8001664:	0801d548 	.word	0x0801d548
 8001668:	08001d0d 	.word	0x08001d0d
 800166c:	200091b4 	.word	0x200091b4
 8001670:	0801d56c 	.word	0x0801d56c
 8001674:	08001d85 	.word	0x08001d85
 8001678:	200086a0 	.word	0x200086a0
 800167c:	0801d590 	.word	0x0801d590
 8001680:	08001f95 	.word	0x08001f95
 8001684:	2000b274 	.word	0x2000b274

08001688 <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMemory0 */

	//TODO UNTESTED

	//Add thread id to the list
	threadsID[0]=osThreadGetId();
 8001690:	f011 f845 	bl	801271e <osThreadGetId>
 8001694:	4603      	mov	r3, r0
 8001696:	4a23      	ldr	r2, [pc, #140]	; (8001724 <StartMemory0+0x9c>)
 8001698:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  for(;;)
  {

	 //Get RTC time
	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800169a:	2200      	movs	r2, #0
 800169c:	4922      	ldr	r1, [pc, #136]	; (8001728 <StartMemory0+0xa0>)
 800169e:	4823      	ldr	r0, [pc, #140]	; (800172c <StartMemory0+0xa4>)
 80016a0:	f00a fc46 	bl	800bf30 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80016a4:	2200      	movs	r2, #0
 80016a6:	4922      	ldr	r1, [pc, #136]	; (8001730 <StartMemory0+0xa8>)
 80016a8:	4820      	ldr	r0, [pc, #128]	; (800172c <StartMemory0+0xa4>)
 80016aa:	f00a fd46 	bl	800c13a <HAL_RTC_GetDate>

	 //Update global variables
	 prev_hour = sTime.Hours;
 80016ae:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <StartMemory0+0xa0>)
 80016b0:	781a      	ldrb	r2, [r3, #0]
 80016b2:	4b20      	ldr	r3, [pc, #128]	; (8001734 <StartMemory0+0xac>)
 80016b4:	701a      	strb	r2, [r3, #0]
	 prev_min = sTime.Minutes;
 80016b6:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <StartMemory0+0xa0>)
 80016b8:	785a      	ldrb	r2, [r3, #1]
 80016ba:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <StartMemory0+0xb0>)
 80016bc:	701a      	strb	r2, [r3, #0]
	 prev_sec = sTime.Seconds;
 80016be:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <StartMemory0+0xa0>)
 80016c0:	789a      	ldrb	r2, [r3, #2]
 80016c2:	4b1e      	ldr	r3, [pc, #120]	; (800173c <StartMemory0+0xb4>)
 80016c4:	701a      	strb	r2, [r3, #0]
	 if (__HAL_RTC_SHIFT_GET_FLAG(&hrtc, RTC_FLAG_SHPF)) prev_sec++; //Adjust following the user manual
 80016c6:	4b19      	ldr	r3, [pc, #100]	; (800172c <StartMemory0+0xa4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <StartMemory0+0x58>
 80016d4:	4b19      	ldr	r3, [pc, #100]	; (800173c <StartMemory0+0xb4>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	3301      	adds	r3, #1
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	4b17      	ldr	r3, [pc, #92]	; (800173c <StartMemory0+0xb4>)
 80016de:	701a      	strb	r2, [r3, #0]
	 prev_subsec = sTime.SubSeconds;
 80016e0:	4b11      	ldr	r3, [pc, #68]	; (8001728 <StartMemory0+0xa0>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	4a16      	ldr	r2, [pc, #88]	; (8001740 <StartMemory0+0xb8>)
 80016e6:	6013      	str	r3, [r2, #0]

	// Save to SD card
	#if SD_CARD_
	MRT_formatAvionics();
 80016e8:	f002 fab8 	bl	8003c5c <MRT_formatAvionics>
	fres = sd_open_file(filename);
 80016ec:	4815      	ldr	r0, [pc, #84]	; (8001744 <StartMemory0+0xbc>)
 80016ee:	f002 ff5d 	bl	80045ac <sd_open_file>
 80016f2:	4603      	mov	r3, r0
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b14      	ldr	r3, [pc, #80]	; (8001748 <StartMemory0+0xc0>)
 80016f8:	701a      	strb	r2, [r3, #0]
	sd_write(&fil, msg_buffer_av);
 80016fa:	4914      	ldr	r1, [pc, #80]	; (800174c <StartMemory0+0xc4>)
 80016fc:	4814      	ldr	r0, [pc, #80]	; (8001750 <StartMemory0+0xc8>)
 80016fe:	f002 ff6d 	bl	80045dc <sd_write>
	if (ejection_stage_flag < MAIN_DESCENT){
 8001702:	4b14      	ldr	r3, [pc, #80]	; (8001754 <StartMemory0+0xcc>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d805      	bhi.n	8001716 <StartMemory0+0x8e>
		MRT_formatPropulsion();
 800170a:	f003 ff4b 	bl	80055a4 <MRT_formatPropulsion>
		sd_write(&fil, msg_buffer_pr);
 800170e:	4912      	ldr	r1, [pc, #72]	; (8001758 <StartMemory0+0xd0>)
 8001710:	480f      	ldr	r0, [pc, #60]	; (8001750 <StartMemory0+0xc8>)
 8001712:	f002 ff63 	bl	80045dc <sd_write>
	}
	f_close(&fil);
 8001716:	480e      	ldr	r0, [pc, #56]	; (8001750 <StartMemory0+0xc8>)
 8001718:	f010 fad4 	bl	8011cc4 <f_close>
	#endif

	osDelay(1000/DATA_FREQ);
 800171c:	2064      	movs	r0, #100	; 0x64
 800171e:	f011 f899 	bl	8012854 <osDelay>
	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001722:	e7ba      	b.n	800169a <StartMemory0+0x12>
 8001724:	20008f64 	.word	0x20008f64
 8001728:	200002f0 	.word	0x200002f0
 800172c:	2000bb2c 	.word	0x2000bb2c
 8001730:	20000304 	.word	0x20000304
 8001734:	20000395 	.word	0x20000395
 8001738:	20000396 	.word	0x20000396
 800173c:	20000397 	.word	0x20000397
 8001740:	20000398 	.word	0x20000398
 8001744:	2000c4a8 	.word	0x2000c4a8
 8001748:	2000c8a0 	.word	0x2000c8a0
 800174c:	2000bdb0 	.word	0x2000bdb0
 8001750:	2000c8a4 	.word	0x2000c8a4
 8001754:	20000394 	.word	0x20000394
 8001758:	2000cb00 	.word	0x2000cb00

0800175c <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 800175c:	b5b0      	push	{r4, r5, r7, lr}
 800175e:	b096      	sub	sp, #88	; 0x58
 8001760:	af04      	add	r7, sp, #16
 8001762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEjection1 */

	//Add thread id to the list
	threadsID[1]=osThreadGetId();
 8001764:	f010 ffdb 	bl	801271e <osThreadGetId>
 8001768:	4603      	mov	r3, r0
 800176a:	4ac6      	ldr	r2, [pc, #792]	; (8001a84 <StartEjection1+0x328>)
 800176c:	6053      	str	r3, [r2, #4]
	#if !EJECTION_THREAD
	osThreadExit();
	#endif

	//Double check the state TODO bad? (say wakeup flag is raised but ground isn't reached yet
	if (ejection_stage_flag >= LANDED)  osThreadExit(); //Ground reached
 800176e:	4bc6      	ldr	r3, [pc, #792]	; (8001a88 <StartEjection1+0x32c>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b03      	cmp	r3, #3
 8001774:	d901      	bls.n	800177a <StartEjection1+0x1e>
 8001776:	f011 f83a 	bl	80127ee <osThreadExit>

	osDelay(5000); //Let the LPS "warm up" to have a valid pressure_hPa
 800177a:	f241 3088 	movw	r0, #5000	; 0x1388
 800177e:	f011 f869 	bl	8012854 <osDelay>

	//TODO put in setup.h?
	uint8_t counter = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t COUNTER_THRESHOLD = 500;
 8001788:	23f4      	movs	r3, #244	; 0xf4
 800178a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t ALT_ERROR_MARGIN = 10; //In meters
 800178e:	230a      	movs	r3, #10
 8001790:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	uint8_t prev_alt = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  /* Infinite loop */
  for(;;)
  {
	  altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa);
 800179a:	4bbc      	ldr	r3, [pc, #752]	; (8001a8c <StartEjection1+0x330>)
 800179c:	edd3 7a00 	vldr	s15, [r3]
 80017a0:	eeb0 0a67 	vmov.f32	s0, s15
 80017a4:	f002 f9d8 	bl	8003b58 <MRT_getAltitude>
 80017a8:	eef0 7a40 	vmov.f32	s15, s0
 80017ac:	4bb8      	ldr	r3, [pc, #736]	; (8001a90 <StartEjection1+0x334>)
 80017ae:	edc3 7a00 	vstr	s15, [r3]

	  //TODO UPDATE TRUE APOGEE (TESTING?)
	  if (altitude_m > rtc_bckp_reg_alt_true_apogee){
 80017b2:	4bb8      	ldr	r3, [pc, #736]	; (8001a94 <StartEjection1+0x338>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	ee07 3a90 	vmov	s15, r3
 80017ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017be:	4bb4      	ldr	r3, [pc, #720]	; (8001a90 <StartEjection1+0x334>)
 80017c0:	edd3 7a00 	vldr	s15, [r3]
 80017c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017cc:	d514      	bpl.n	80017f8 <StartEjection1+0x9c>
		  rtc_bckp_reg_alt_true_apogee = altitude_m;
 80017ce:	4bb0      	ldr	r3, [pc, #704]	; (8001a90 <StartEjection1+0x334>)
 80017d0:	edd3 7a00 	vldr	s15, [r3]
 80017d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017d8:	ee17 2a90 	vmov	r2, s15
 80017dc:	4bad      	ldr	r3, [pc, #692]	; (8001a94 <StartEjection1+0x338>)
 80017de:	601a      	str	r2, [r3, #0]
		  rtc_bckp_reg_true_apogee_time = 100*prev_min + prev_sec;
 80017e0:	4bad      	ldr	r3, [pc, #692]	; (8001a98 <StartEjection1+0x33c>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	461a      	mov	r2, r3
 80017e6:	2364      	movs	r3, #100	; 0x64
 80017e8:	fb03 f302 	mul.w	r3, r3, r2
 80017ec:	4aab      	ldr	r2, [pc, #684]	; (8001a9c <StartEjection1+0x340>)
 80017ee:	7812      	ldrb	r2, [r2, #0]
 80017f0:	4413      	add	r3, r2
 80017f2:	461a      	mov	r2, r3
 80017f4:	4baa      	ldr	r3, [pc, #680]	; (8001aa0 <StartEjection1+0x344>)
 80017f6:	601a      	str	r2, [r3, #0]
	  }

	  //TODO check for apogee (starting to go down or stagnating, add to counter)
	  if(altitude_m < prev_alt || MAX(altitude_m - prev_alt, prev_alt - altitude_m) < ALT_ERROR_MARGIN){
 80017f8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80017fc:	ee07 3a90 	vmov	s15, r3
 8001800:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001804:	4ba2      	ldr	r3, [pc, #648]	; (8001a90 <StartEjection1+0x334>)
 8001806:	edd3 7a00 	vldr	s15, [r3]
 800180a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800180e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001812:	dc3c      	bgt.n	800188e <StartEjection1+0x132>
 8001814:	4b9e      	ldr	r3, [pc, #632]	; (8001a90 <StartEjection1+0x334>)
 8001816:	ed93 7a00 	vldr	s14, [r3]
 800181a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800181e:	ee07 3a90 	vmov	s15, r3
 8001822:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001826:	ee37 7a67 	vsub.f32	s14, s14, s15
 800182a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800182e:	ee07 3a90 	vmov	s15, r3
 8001832:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001836:	4b96      	ldr	r3, [pc, #600]	; (8001a90 <StartEjection1+0x334>)
 8001838:	edd3 7a00 	vldr	s15, [r3]
 800183c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001840:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001848:	dd0b      	ble.n	8001862 <StartEjection1+0x106>
 800184a:	4b91      	ldr	r3, [pc, #580]	; (8001a90 <StartEjection1+0x334>)
 800184c:	ed93 7a00 	vldr	s14, [r3]
 8001850:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001854:	ee07 3a90 	vmov	s15, r3
 8001858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800185c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001860:	e00a      	b.n	8001878 <StartEjection1+0x11c>
 8001862:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001866:	ee07 3a90 	vmov	s15, r3
 800186a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800186e:	4b88      	ldr	r3, [pc, #544]	; (8001a90 <StartEjection1+0x334>)
 8001870:	edd3 7a00 	vldr	s15, [r3]
 8001874:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001878:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800187c:	ee07 3a10 	vmov	s14, r3
 8001880:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001884:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188c:	d54f      	bpl.n	800192e <StartEjection1+0x1d2>
		  counter++;
 800188e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001892:	3301      	adds	r3, #1
 8001894:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		  char buff[50];
		  sprintf(buff, "Alt: %i,  MAX:%i, counter: %i", altitude_m, MAX(altitude_m - prev_alt, prev_alt - altitude_m), counter);
 8001898:	4b7d      	ldr	r3, [pc, #500]	; (8001a90 <StartEjection1+0x334>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe fe73 	bl	8000588 <__aeabi_f2d>
 80018a2:	4604      	mov	r4, r0
 80018a4:	460d      	mov	r5, r1
 80018a6:	4b7a      	ldr	r3, [pc, #488]	; (8001a90 <StartEjection1+0x334>)
 80018a8:	ed93 7a00 	vldr	s14, [r3]
 80018ac:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80018b0:	ee07 3a90 	vmov	s15, r3
 80018b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018bc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80018c0:	ee07 3a90 	vmov	s15, r3
 80018c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018c8:	4b71      	ldr	r3, [pc, #452]	; (8001a90 <StartEjection1+0x334>)
 80018ca:	edd3 7a00 	vldr	s15, [r3]
 80018ce:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018da:	dd0b      	ble.n	80018f4 <StartEjection1+0x198>
 80018dc:	4b6c      	ldr	r3, [pc, #432]	; (8001a90 <StartEjection1+0x334>)
 80018de:	ed93 7a00 	vldr	s14, [r3]
 80018e2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80018e6:	ee07 3a90 	vmov	s15, r3
 80018ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f2:	e00a      	b.n	800190a <StartEjection1+0x1ae>
 80018f4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80018f8:	ee07 3a90 	vmov	s15, r3
 80018fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001900:	4b63      	ldr	r3, [pc, #396]	; (8001a90 <StartEjection1+0x334>)
 8001902:	edd3 7a00 	vldr	s15, [r3]
 8001906:	ee77 7a67 	vsub.f32	s15, s14, s15
 800190a:	ee17 0a90 	vmov	r0, s15
 800190e:	f7fe fe3b 	bl	8000588 <__aeabi_f2d>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800191a:	f107 000c 	add.w	r0, r7, #12
 800191e:	9102      	str	r1, [sp, #8]
 8001920:	e9cd 2300 	strd	r2, r3, [sp]
 8001924:	4622      	mov	r2, r4
 8001926:	462b      	mov	r3, r5
 8001928:	495e      	ldr	r1, [pc, #376]	; (8001aa4 <StartEjection1+0x348>)
 800192a:	f016 fcd5 	bl	80182d8 <siprintf>
	  }

	  if (counter >= COUNTER_THRESHOLD || ejection_stage_flag >= DROGUE_DESCENT){
 800192e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001932:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001936:	429a      	cmp	r2, r3
 8001938:	d204      	bcs.n	8001944 <StartEjection1+0x1e8>
 800193a:	4b53      	ldr	r3, [pc, #332]	; (8001a88 <StartEjection1+0x32c>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b01      	cmp	r3, #1
 8001940:	f240 8143 	bls.w	8001bca <StartEjection1+0x46e>

		  if (ejection_stage_flag < DROGUE_DESCENT){
 8001944:	4b50      	ldr	r3, [pc, #320]	; (8001a88 <StartEjection1+0x32c>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d827      	bhi.n	800199c <StartEjection1+0x240>

			  //TODO update value to be saved in rtc bckp registers
			  rtc_bckp_reg_alt_apogee = altitude_m;
 800194c:	4b50      	ldr	r3, [pc, #320]	; (8001a90 <StartEjection1+0x334>)
 800194e:	edd3 7a00 	vldr	s15, [r3]
 8001952:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001956:	ee17 2a90 	vmov	r2, s15
 800195a:	4b53      	ldr	r3, [pc, #332]	; (8001aa8 <StartEjection1+0x34c>)
 800195c:	601a      	str	r2, [r3, #0]
			  rtc_bckp_reg_apogee_time = 100*prev_min + prev_sec;
 800195e:	4b4e      	ldr	r3, [pc, #312]	; (8001a98 <StartEjection1+0x33c>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	2364      	movs	r3, #100	; 0x64
 8001966:	fb03 f302 	mul.w	r3, r3, r2
 800196a:	4a4c      	ldr	r2, [pc, #304]	; (8001a9c <StartEjection1+0x340>)
 800196c:	7812      	ldrb	r2, [r2, #0]
 800196e:	4413      	add	r3, r2
 8001970:	461a      	mov	r2, r3
 8001972:	4b4e      	ldr	r3, [pc, #312]	; (8001aac <StartEjection1+0x350>)
 8001974:	601a      	str	r2, [r3, #0]

			  //Update state (save the state in WatchDog thread)
			  ejection_stage_flag = DROGUE_DESCENT;
 8001976:	4b44      	ldr	r3, [pc, #272]	; (8001a88 <StartEjection1+0x32c>)
 8001978:	2202      	movs	r2, #2
 800197a:	701a      	strb	r2, [r3, #0]
			  apogee_flag = 1; //Apogee reached //TODO is it where we change it???
 800197c:	4b4c      	ldr	r3, [pc, #304]	; (8001ab0 <StartEjection1+0x354>)
 800197e:	2201      	movs	r2, #1
 8001980:	701a      	strb	r2, [r3, #0]
			  wd_ejection_flag = 1; //Raise the flag
 8001982:	4b4c      	ldr	r3, [pc, #304]	; (8001ab4 <StartEjection1+0x358>)
 8001984:	2201      	movs	r2, #1
 8001986:	701a      	strb	r2, [r3, #0]

			  println("Eject Drogue");
 8001988:	484b      	ldr	r0, [pc, #300]	; (8001ab8 <StartEjection1+0x35c>)
 800198a:	f7ff fb4f 	bl	800102c <println>
		  }

		  //Put outside of "if" such that we only need to remember the ejection stage instead if it + arming state
		  //TODO should I put a while loop, a foor loop or just "one time functions"?
		  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 800198e:	e005      	b.n	800199c <StartEjection1+0x240>
			  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 8001990:	2201      	movs	r2, #1
 8001992:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001996:	4849      	ldr	r0, [pc, #292]	; (8001abc <StartEjection1+0x360>)
 8001998:	f008 f998 	bl	8009ccc <HAL_GPIO_WritePin>
		  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 800199c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019a0:	4846      	ldr	r0, [pc, #280]	; (8001abc <StartEjection1+0x360>)
 80019a2:	f008 f97b 	bl	8009c9c <HAL_GPIO_ReadPin>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f1      	beq.n	8001990 <StartEjection1+0x234>
		  }
		  while(!HAL_GPIO_ReadPin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin)){
 80019ac:	e005      	b.n	80019ba <StartEjection1+0x25e>
			  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, SET); //PG12 DROGUE GATE
 80019ae:	2201      	movs	r2, #1
 80019b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019b4:	4841      	ldr	r0, [pc, #260]	; (8001abc <StartEjection1+0x360>)
 80019b6:	f008 f989 	bl	8009ccc <HAL_GPIO_WritePin>
		  while(!HAL_GPIO_ReadPin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin)){
 80019ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019be:	483f      	ldr	r0, [pc, #252]	; (8001abc <StartEjection1+0x360>)
 80019c0:	f008 f96c 	bl	8009c9c <HAL_GPIO_ReadPin>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0f1      	beq.n	80019ae <StartEjection1+0x252>
		  }
		  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 80019ca:	e005      	b.n	80019d8 <StartEjection1+0x27c>
			  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, RESET); //PG14 ARMING RCOV
 80019cc:	2200      	movs	r2, #0
 80019ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019d2:	483a      	ldr	r0, [pc, #232]	; (8001abc <StartEjection1+0x360>)
 80019d4:	f008 f97a 	bl	8009ccc <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 80019d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019dc:	4837      	ldr	r0, [pc, #220]	; (8001abc <StartEjection1+0x360>)
 80019de:	f008 f95d 	bl	8009c9c <HAL_GPIO_ReadPin>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1f1      	bne.n	80019cc <StartEjection1+0x270>
		  }

		  for(;;){

			  altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa);
 80019e8:	4b28      	ldr	r3, [pc, #160]	; (8001a8c <StartEjection1+0x330>)
 80019ea:	edd3 7a00 	vldr	s15, [r3]
 80019ee:	eeb0 0a67 	vmov.f32	s0, s15
 80019f2:	f002 f8b1 	bl	8003b58 <MRT_getAltitude>
 80019f6:	eef0 7a40 	vmov.f32	s15, s0
 80019fa:	4b25      	ldr	r3, [pc, #148]	; (8001a90 <StartEjection1+0x334>)
 80019fc:	edc3 7a00 	vstr	s15, [r3]

			  //We reached main deployment altitude
			  if (altitude_m < DEPLOY_ALT || ejection_stage_flag >= MAIN_DESCENT){
 8001a00:	4b23      	ldr	r3, [pc, #140]	; (8001a90 <StartEjection1+0x334>)
 8001a02:	edd3 7a00 	vldr	s15, [r3]
 8001a06:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001ac0 <StartEjection1+0x364>
 8001a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a12:	d404      	bmi.n	8001a1e <StartEjection1+0x2c2>
 8001a14:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <StartEjection1+0x32c>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	f240 80d2 	bls.w	8001bc2 <StartEjection1+0x466>

				  if (ejection_stage_flag < MAIN_DESCENT){
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <StartEjection1+0x32c>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d824      	bhi.n	8001a70 <StartEjection1+0x314>

					  //TODO update value to be saved in rtc bckp registers
					  rtc_bckp_reg_alt_main = altitude_m;
 8001a26:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <StartEjection1+0x334>)
 8001a28:	edd3 7a00 	vldr	s15, [r3]
 8001a2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a30:	ee17 2a90 	vmov	r2, s15
 8001a34:	4b23      	ldr	r3, [pc, #140]	; (8001ac4 <StartEjection1+0x368>)
 8001a36:	601a      	str	r2, [r3, #0]
					  rtc_bckp_reg_main_time = 100*prev_min + prev_sec;
 8001a38:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <StartEjection1+0x33c>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	2364      	movs	r3, #100	; 0x64
 8001a40:	fb03 f302 	mul.w	r3, r3, r2
 8001a44:	4a15      	ldr	r2, [pc, #84]	; (8001a9c <StartEjection1+0x340>)
 8001a46:	7812      	ldrb	r2, [r2, #0]
 8001a48:	4413      	add	r3, r2
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <StartEjection1+0x36c>)
 8001a4e:	601a      	str	r2, [r3, #0]

					  //Update state (save the state in WatchDog thread)
					  ejection_stage_flag = MAIN_DESCENT;
 8001a50:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <StartEjection1+0x32c>)
 8001a52:	2203      	movs	r2, #3
 8001a54:	701a      	strb	r2, [r3, #0]
					  wd_ejection_flag = 1; //Raise the flag
 8001a56:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <StartEjection1+0x358>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	701a      	strb	r2, [r3, #0]

					  println("Eject Main");
 8001a5c:	481b      	ldr	r0, [pc, #108]	; (8001acc <StartEjection1+0x370>)
 8001a5e:	f7ff fae5 	bl	800102c <println>
				  }

				  //Put outside of "if" such that we only need to remember the ejection stage instead if it + arming state
				  //TODO should I put a while loop, a foor loop or just "one time functions"?
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001a62:	e005      	b.n	8001a70 <StartEjection1+0x314>
					  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 8001a64:	2201      	movs	r2, #1
 8001a66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a6a:	4814      	ldr	r0, [pc, #80]	; (8001abc <StartEjection1+0x360>)
 8001a6c:	f008 f92e 	bl	8009ccc <HAL_GPIO_WritePin>
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001a70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a74:	4811      	ldr	r0, [pc, #68]	; (8001abc <StartEjection1+0x360>)
 8001a76:	f008 f911 	bl	8009c9c <HAL_GPIO_ReadPin>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f1      	beq.n	8001a64 <StartEjection1+0x308>
				  }
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin)){
 8001a80:	e02c      	b.n	8001adc <StartEjection1+0x380>
 8001a82:	bf00      	nop
 8001a84:	20008f64 	.word	0x20008f64
 8001a88:	20000394 	.word	0x20000394
 8001a8c:	200004f0 	.word	0x200004f0
 8001a90:	200002e8 	.word	0x200002e8
 8001a94:	2000035c 	.word	0x2000035c
 8001a98:	20000396 	.word	0x20000396
 8001a9c:	20000397 	.word	0x20000397
 8001aa0:	20000360 	.word	0x20000360
 8001aa4:	0801c580 	.word	0x0801c580
 8001aa8:	20000364 	.word	0x20000364
 8001aac:	20000368 	.word	0x20000368
 8001ab0:	20000393 	.word	0x20000393
 8001ab4:	200002ec 	.word	0x200002ec
 8001ab8:	0801c5a0 	.word	0x0801c5a0
 8001abc:	40021800 	.word	0x40021800
 8001ac0:	44fa0000 	.word	0x44fa0000
 8001ac4:	2000036c 	.word	0x2000036c
 8001ac8:	20000370 	.word	0x20000370
 8001acc:	0801c5b0 	.word	0x0801c5b0
					  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, SET); //PG11 MAIN GATE
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ad6:	4844      	ldr	r0, [pc, #272]	; (8001be8 <StartEjection1+0x48c>)
 8001ad8:	f008 f8f8 	bl	8009ccc <HAL_GPIO_WritePin>
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin)){
 8001adc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ae0:	4841      	ldr	r0, [pc, #260]	; (8001be8 <StartEjection1+0x48c>)
 8001ae2:	f008 f8db 	bl	8009c9c <HAL_GPIO_ReadPin>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0f1      	beq.n	8001ad0 <StartEjection1+0x374>
				  }
				  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001aec:	e005      	b.n	8001afa <StartEjection1+0x39e>
					  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, RESET); //PG14 ARMING RCOV
 8001aee:	2200      	movs	r2, #0
 8001af0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001af4:	483c      	ldr	r0, [pc, #240]	; (8001be8 <StartEjection1+0x48c>)
 8001af6:	f008 f8e9 	bl	8009ccc <HAL_GPIO_WritePin>
				  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001afa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001afe:	483a      	ldr	r0, [pc, #232]	; (8001be8 <StartEjection1+0x48c>)
 8001b00:	f008 f8cc 	bl	8009c9c <HAL_GPIO_ReadPin>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f1      	bne.n	8001aee <StartEjection1+0x392>
				  }

				  uint8_t prev_altitude = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
				  uint8_t cur_altitude = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
				  uint8_t counter = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
				  while(counter < 5){
 8001b1c:	e02d      	b.n	8001b7a <StartEjection1+0x41e>
					  cur_altitude = MRT_getAltitude(hlps22hh.pressure_hPa);
 8001b1e:	4b33      	ldr	r3, [pc, #204]	; (8001bec <StartEjection1+0x490>)
 8001b20:	edd3 7a00 	vldr	s15, [r3]
 8001b24:	eeb0 0a67 	vmov.f32	s0, s15
 8001b28:	f002 f816 	bl	8003b58 <MRT_getAltitude>
 8001b2c:	eef0 7a40 	vmov.f32	s15, s0
 8001b30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b34:	edc7 7a00 	vstr	s15, [r7]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
					  if (cur_altitude - prev_altitude < 1 && cur_altitude - prev_altitude > -1){ //TODO might need a bigger range to account for errors (gotta know what we expect to be our slowest descent speed)
 8001b3e:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8001b42:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	dc0c      	bgt.n	8001b66 <StartEjection1+0x40a>
 8001b4c:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8001b50:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	db05      	blt.n	8001b66 <StartEjection1+0x40a>
						  counter++;
 8001b5a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001b5e:	3301      	adds	r3, #1
 8001b60:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8001b64:	e002      	b.n	8001b6c <StartEjection1+0x410>
					  }
					  else{
						  counter = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					  }
					  prev_altitude = cur_altitude;
 8001b6c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001b70:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
					  osDelay(100);
 8001b74:	2064      	movs	r0, #100	; 0x64
 8001b76:	f010 fe6d 	bl	8012854 <osDelay>
				  while(counter < 5){
 8001b7a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	d9cd      	bls.n	8001b1e <StartEjection1+0x3c2>
				  }

				  //TODO update value to be saved in rtc bckp registers
				  rtc_bckp_reg_alt_landed = altitude_m;
 8001b82:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <StartEjection1+0x494>)
 8001b84:	edd3 7a00 	vldr	s15, [r3]
 8001b88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b8c:	ee17 2a90 	vmov	r2, s15
 8001b90:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <StartEjection1+0x498>)
 8001b92:	601a      	str	r2, [r3, #0]
				  rtc_bckp_reg_landed_time = 100*prev_min + prev_sec;
 8001b94:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <StartEjection1+0x49c>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	2364      	movs	r3, #100	; 0x64
 8001b9c:	fb03 f302 	mul.w	r3, r3, r2
 8001ba0:	4a16      	ldr	r2, [pc, #88]	; (8001bfc <StartEjection1+0x4a0>)
 8001ba2:	7812      	ldrb	r2, [r2, #0]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <StartEjection1+0x4a4>)
 8001baa:	601a      	str	r2, [r3, #0]

				  //Update state (saved state in WatchDog thread)
				  ejection_stage_flag = LANDED;
 8001bac:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <StartEjection1+0x4a8>)
 8001bae:	2204      	movs	r2, #4
 8001bb0:	701a      	strb	r2, [r3, #0]
				  wd_ejection_flag = 1;
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <StartEjection1+0x4ac>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	701a      	strb	r2, [r3, #0]

				  println("Ground Level Reached");
 8001bb8:	4814      	ldr	r0, [pc, #80]	; (8001c0c <StartEjection1+0x4b0>)
 8001bba:	f7ff fa37 	bl	800102c <println>
				  osThreadExit();
 8001bbe:	f010 fe16 	bl	80127ee <osThreadExit>

			  }

			  osDelay(10);
 8001bc2:	200a      	movs	r0, #10
 8001bc4:	f010 fe46 	bl	8012854 <osDelay>
			  altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa);
 8001bc8:	e70e      	b.n	80019e8 <StartEjection1+0x28c>
		  }
	  }


	  //Update previous altitude
	  prev_alt = altitude_m;
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <StartEjection1+0x494>)
 8001bcc:	edd3 7a00 	vldr	s15, [r3]
 8001bd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bd4:	edc7 7a00 	vstr	s15, [r7]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	  osDelay(10);
 8001bde:	200a      	movs	r0, #10
 8001be0:	f010 fe38 	bl	8012854 <osDelay>
	  altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa);
 8001be4:	e5d9      	b.n	800179a <StartEjection1+0x3e>
 8001be6:	bf00      	nop
 8001be8:	40021800 	.word	0x40021800
 8001bec:	200004f0 	.word	0x200004f0
 8001bf0:	200002e8 	.word	0x200002e8
 8001bf4:	20000374 	.word	0x20000374
 8001bf8:	20000396 	.word	0x20000396
 8001bfc:	20000397 	.word	0x20000397
 8001c00:	20000378 	.word	0x20000378
 8001c04:	20000394 	.word	0x20000394
 8001c08:	200002ec 	.word	0x200002ec
 8001c0c:	0801c5bc 	.word	0x0801c5bc

08001c10 <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b0c4      	sub	sp, #272	; 0x110
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartTelemetry2 */

	//Add thread id to the list
	threadsID[2]=osThreadGetId();
 8001c1a:	f010 fd80 	bl	801271e <osThreadGetId>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	4a35      	ldr	r2, [pc, #212]	; (8001cf8 <StartTelemetry2+0xe8>)
 8001c22:	6093      	str	r3, [r2, #8]
	#if !TELEMETRY_THREAD
	osThreadExit();
	#endif

	char radio_buffer[RADIO_BUFFER_SIZE];
	uint8_t counter = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint8_t iridium_counter = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 8001c30:	2201      	movs	r2, #1
 8001c32:	2108      	movs	r1, #8
 8001c34:	4831      	ldr	r0, [pc, #196]	; (8001cfc <StartTelemetry2+0xec>)
 8001c36:	f008 f849 	bl	8009ccc <HAL_GPIO_WritePin>

	  if (apogee_flag){
 8001c3a:	4b31      	ldr	r3, [pc, #196]	; (8001d00 <StartTelemetry2+0xf0>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <StartTelemetry2+0x3a>
		  osDelay(1000/POST_APOGEE_SEND_FREQ);
 8001c42:	200a      	movs	r0, #10
 8001c44:	f010 fe06 	bl	8012854 <osDelay>
 8001c48:	e01b      	b.n	8001c82 <StartTelemetry2+0x72>
	  }
	  else{ //Only send prop data pre-apogee
		  //Send propulsion data
		  memset(radio_buffer, 0, RADIO_BUFFER_SIZE);
 8001c4a:	f107 030c 	add.w	r3, r7, #12
 8001c4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c52:	2100      	movs	r1, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f015 fac1 	bl	80171dc <memset>
		  MRT_formatPropulsion();
 8001c5a:	f003 fca3 	bl	80055a4 <MRT_formatPropulsion>
		  memcpy(radio_buffer, msg_buffer_pr, strlen(msg_buffer_pr));
 8001c5e:	4829      	ldr	r0, [pc, #164]	; (8001d04 <StartTelemetry2+0xf4>)
 8001c60:	f7fe fad0 	bl	8000204 <strlen>
 8001c64:	4602      	mov	r2, r0
 8001c66:	f107 030c 	add.w	r3, r7, #12
 8001c6a:	4926      	ldr	r1, [pc, #152]	; (8001d04 <StartTelemetry2+0xf4>)
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f015 fa8d 	bl	801718c <memcpy>
		  MRT_radio_tx((char*) radio_buffer);
 8001c72:	f107 030c 	add.w	r3, r7, #12
 8001c76:	4618      	mov	r0, r3
 8001c78:	f005 fdce 	bl	8007818 <MRT_radio_tx>

		  osDelay(1000/PRE_APOGEE_SEND_FREQ);
 8001c7c:	2014      	movs	r0, #20
 8001c7e:	f010 fde9 	bl	8012854 <osDelay>
	  }

	  if (counter == SENSORS_SEND_FREQ_DIVIDER){
 8001c82:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c86:	2b0a      	cmp	r3, #10
 8001c88:	d12b      	bne.n	8001ce2 <StartTelemetry2+0xd2>
		  counter = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		  float SEC = (uint8_t) time % 60; sprintf(&SEC,"%.0f",SEC);
		  float SUBSEC = time / 3600.0; sprintf(&SUBSEC,"%.0f",SUBSEC);
		  */

	  	  //Send sensors data
		  memset(radio_buffer, 0, RADIO_BUFFER_SIZE);
 8001c90:	f107 030c 	add.w	r3, r7, #12
 8001c94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f015 fa9e 	bl	80171dc <memset>
		  MRT_formatAvionics();
 8001ca0:	f001 ffdc 	bl	8003c5c <MRT_formatAvionics>
		  memcpy(radio_buffer, msg_buffer_av, strlen(msg_buffer_av));
 8001ca4:	4818      	ldr	r0, [pc, #96]	; (8001d08 <StartTelemetry2+0xf8>)
 8001ca6:	f7fe faad 	bl	8000204 <strlen>
 8001caa:	4602      	mov	r2, r0
 8001cac:	f107 030c 	add.w	r3, r7, #12
 8001cb0:	4915      	ldr	r1, [pc, #84]	; (8001d08 <StartTelemetry2+0xf8>)
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f015 fa6a 	bl	801718c <memcpy>
		  MRT_radio_tx((char*) radio_buffer);
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f005 fdab 	bl	8007818 <MRT_radio_tx>


		  if(apogee_flag && iridium_counter == IRIDIUM_SEND_FREQ_DIVIDER){
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <StartTelemetry2+0xf0>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d006      	beq.n	8001cd8 <StartTelemetry2+0xc8>
 8001cca:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001cce:	2b05      	cmp	r3, #5
 8001cd0:	d102      	bne.n	8001cd8 <StartTelemetry2+0xc8>
			  iridium_counter = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
			  #if IRIDIUM_ //Iridium send
			  hiridium.getTime(); //TODO doesn't cost anything
			  //hiridium.sendMessage(msg); TODO IT COSTS CREDITS WATCH OUT
			  #endif
		  }
		  iridium_counter++;
 8001cd8:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001cdc:	3301      	adds	r3, #1
 8001cde:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	  }
	  counter++;
 8001ce2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f


	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8001cec:	2200      	movs	r2, #0
 8001cee:	2108      	movs	r1, #8
 8001cf0:	4802      	ldr	r0, [pc, #8]	; (8001cfc <StartTelemetry2+0xec>)
 8001cf2:	f007 ffeb 	bl	8009ccc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 8001cf6:	e79b      	b.n	8001c30 <StartTelemetry2+0x20>
 8001cf8:	20008f64 	.word	0x20008f64
 8001cfc:	40020800 	.word	0x40020800
 8001d00:	20000393 	.word	0x20000393
 8001d04:	2000cb00 	.word	0x2000cb00
 8001d08:	2000bdb0 	.word	0x2000bdb0

08001d0c <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	//Add thread id to the list
	threadsID[3]=osThreadGetId();
 8001d14:	f010 fd03 	bl	801271e <osThreadGetId>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	4a13      	ldr	r2, [pc, #76]	; (8001d68 <StartSensors3+0x5c>)
 8001d1c:	60d3      	str	r3, [r2, #12]


  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8001d1e:	2201      	movs	r2, #1
 8001d20:	2102      	movs	r1, #2
 8001d22:	4812      	ldr	r0, [pc, #72]	; (8001d6c <StartSensors3+0x60>)
 8001d24:	f007 ffd2 	bl	8009ccc <HAL_GPIO_WritePin>

	  //GPS
	  hgps.pollAll();
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <StartSensors3+0x64>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	4798      	blx	r3

	  //LSM6DSR
	  hlsm6dsr.pollAll();
 8001d2e:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <StartSensors3+0x68>)
 8001d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d32:	4798      	blx	r3

	  //LPS22HH
	  hlps22hh.pollAll();
 8001d34:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <StartSensors3+0x6c>)
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	4798      	blx	r3

	  //Gates continuity
	  gates_continuity = MRT_getContinuity();
 8001d3a:	f001 ff5b 	bl	8003bf4 <MRT_getContinuity>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	461a      	mov	r2, r3
 8001d42:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <StartSensors3+0x70>)
 8001d44:	701a      	strb	r2, [r3, #0]

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 8001d46:	2200      	movs	r2, #0
 8001d48:	2102      	movs	r1, #2
 8001d4a:	4808      	ldr	r0, [pc, #32]	; (8001d6c <StartSensors3+0x60>)
 8001d4c:	f007 ffbe 	bl	8009ccc <HAL_GPIO_WritePin>

	  if (apogee_flag){
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <StartSensors3+0x74>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <StartSensors3+0x54>
		  osDelay(1000/POST_APOGEE_POLL_FREQ);
 8001d58:	200a      	movs	r0, #10
 8001d5a:	f010 fd7b 	bl	8012854 <osDelay>
 8001d5e:	e7de      	b.n	8001d1e <StartSensors3+0x12>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_POLL_FREQ);
 8001d60:	2014      	movs	r0, #20
 8001d62:	f010 fd77 	bl	8012854 <osDelay>
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8001d66:	e7da      	b.n	8001d1e <StartSensors3+0x12>
 8001d68:	20008f64 	.word	0x20008f64
 8001d6c:	40020800 	.word	0x40020800
 8001d70:	20000504 	.word	0x20000504
 8001d74:	200004c4 	.word	0x200004c4
 8001d78:	200004f0 	.word	0x200004f0
 8001d7c:	2000037f 	.word	0x2000037f
 8001d80:	20000393 	.word	0x20000393

08001d84 <StartWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchDog */
void StartWatchDog(void *argument)
{
 8001d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d88:	b0c6      	sub	sp, #280	; 0x118
 8001d8a:	af04      	add	r7, sp, #16
 8001d8c:	1d3b      	adds	r3, r7, #4
 8001d8e:	6018      	str	r0, [r3, #0]
	char buffer[WD_BUFFER_SIZE];

  /* Infinite loop */
  for(;;)
  {
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8001d90:	2201      	movs	r2, #1
 8001d92:	2104      	movs	r1, #4
 8001d94:	4860      	ldr	r0, [pc, #384]	; (8001f18 <StartWatchDog+0x194>)
 8001d96:	f007 ff99 	bl	8009ccc <HAL_GPIO_WritePin>

	 HAL_IWDG_Refresh(&hiwdg);
 8001d9a:	4860      	ldr	r0, [pc, #384]	; (8001f1c <StartWatchDog+0x198>)
 8001d9c:	f009 f87a 	bl	800ae94 <HAL_IWDG_Refresh>
	 uint64_t* i = 0x20CDCDCD;
	 *i = 10;
	#endif

	 //TODO remove for comp
	 memset(buffer, 0, WD_BUFFER_SIZE);
 8001da0:	f107 0308 	add.w	r3, r7, #8
 8001da4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001da8:	2100      	movs	r1, #0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f015 fa16 	bl	80171dc <memset>
	 sprintf(buffer, "Time: %i:%i:%i ::%lu	Altitude: \r\n %f\r\n", prev_hour,prev_min,prev_sec,prev_subsec , altitude_m);
 8001db0:	4b5b      	ldr	r3, [pc, #364]	; (8001f20 <StartWatchDog+0x19c>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	461e      	mov	r6, r3
 8001db6:	4b5b      	ldr	r3, [pc, #364]	; (8001f24 <StartWatchDog+0x1a0>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	4698      	mov	r8, r3
 8001dbc:	4b5a      	ldr	r3, [pc, #360]	; (8001f28 <StartWatchDog+0x1a4>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	461d      	mov	r5, r3
 8001dc2:	4b5a      	ldr	r3, [pc, #360]	; (8001f2c <StartWatchDog+0x1a8>)
 8001dc4:	681c      	ldr	r4, [r3, #0]
 8001dc6:	4b5a      	ldr	r3, [pc, #360]	; (8001f30 <StartWatchDog+0x1ac>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fbdc 	bl	8000588 <__aeabi_f2d>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	f107 0008 	add.w	r0, r7, #8
 8001dd8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ddc:	9401      	str	r4, [sp, #4]
 8001dde:	9500      	str	r5, [sp, #0]
 8001de0:	4643      	mov	r3, r8
 8001de2:	4632      	mov	r2, r6
 8001de4:	4953      	ldr	r1, [pc, #332]	; (8001f34 <StartWatchDog+0x1b0>)
 8001de6:	f016 fa77 	bl	80182d8 <siprintf>
	 println((char*) buffer);
 8001dea:	f107 0308 	add.w	r3, r7, #8
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff f91c 	bl	800102c <println>


	 //Check if new ejection stage to save in memory
	 if(wd_ejection_flag == 1){
 8001df4:	4b50      	ldr	r3, [pc, #320]	; (8001f38 <StartWatchDog+0x1b4>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d15d      	bne.n	8001eb8 <StartWatchDog+0x134>

		wd_ejection_flag = 0;
 8001dfc:	4b4e      	ldr	r3, [pc, #312]	; (8001f38 <StartWatchDog+0x1b4>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]

		//Update ejection stage flag and save it
		rtc_bckp_reg_ejection_stage = ejection_stage_flag;
 8001e02:	4b4e      	ldr	r3, [pc, #312]	; (8001f3c <StartWatchDog+0x1b8>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	4b4d      	ldr	r3, [pc, #308]	; (8001f40 <StartWatchDog+0x1bc>)
 8001e0a:	601a      	str	r2, [r3, #0]
		ext_flash_ejection_stage = ejection_stage_flag;
 8001e0c:	4b4b      	ldr	r3, [pc, #300]	; (8001f3c <StartWatchDog+0x1b8>)
 8001e0e:	781a      	ldrb	r2, [r3, #0]
 8001e10:	4b4c      	ldr	r3, [pc, #304]	; (8001f44 <StartWatchDog+0x1c0>)
 8001e12:	701a      	strb	r2, [r3, #0]
		MRT_saveFlagValue(FC_STATE_FLIGHT);
 8001e14:	2004      	movs	r0, #4
 8001e16:	f002 f871 	bl	8003efc <MRT_saveFlagValue>

		//If applicable, update apogee flag
		if (ejection_stage_flag >= DROGUE_DESCENT){
 8001e1a:	4b48      	ldr	r3, [pc, #288]	; (8001f3c <StartWatchDog+0x1b8>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d90e      	bls.n	8001e40 <StartWatchDog+0xbc>
			apogee_flag = 1;
 8001e22:	4b49      	ldr	r3, [pc, #292]	; (8001f48 <StartWatchDog+0x1c4>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	701a      	strb	r2, [r3, #0]
			rtc_bckp_reg_apogee = apogee_flag;
 8001e28:	4b47      	ldr	r3, [pc, #284]	; (8001f48 <StartWatchDog+0x1c4>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b47      	ldr	r3, [pc, #284]	; (8001f4c <StartWatchDog+0x1c8>)
 8001e30:	601a      	str	r2, [r3, #0]
			ext_flash_apogee = apogee_flag;
 8001e32:	4b45      	ldr	r3, [pc, #276]	; (8001f48 <StartWatchDog+0x1c4>)
 8001e34:	781a      	ldrb	r2, [r3, #0]
 8001e36:	4b46      	ldr	r3, [pc, #280]	; (8001f50 <StartWatchDog+0x1cc>)
 8001e38:	701a      	strb	r2, [r3, #0]
			MRT_saveFlagValue(FC_STATE_APOGEE);
 8001e3a:	2003      	movs	r0, #3
 8001e3c:	f002 f85e 	bl	8003efc <MRT_saveFlagValue>
		}

		//TODO TESTING SAVE EVERY ALT REGISTERS
		MRT_RTC_setBackupReg(FC_STATE_ALT_PAD, rtc_bckp_reg_alt_pad);
 8001e40:	4b44      	ldr	r3, [pc, #272]	; (8001f54 <StartWatchDog+0x1d0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4619      	mov	r1, r3
 8001e46:	2009      	movs	r0, #9
 8001e48:	f001 f980 	bl	800314c <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_PAD_TIME, rtc_bckp_reg_pad_time);
 8001e4c:	4b42      	ldr	r3, [pc, #264]	; (8001f58 <StartWatchDog+0x1d4>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4619      	mov	r1, r3
 8001e52:	200a      	movs	r0, #10
 8001e54:	f001 f97a 	bl	800314c <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_STATE_TRUE_APOGEE, rtc_bckp_reg_alt_true_apogee);
 8001e58:	4b40      	ldr	r3, [pc, #256]	; (8001f5c <StartWatchDog+0x1d8>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	200b      	movs	r0, #11
 8001e60:	f001 f974 	bl	800314c <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_TRUE_APOGEE_TIME, rtc_bckp_reg_true_apogee_time);
 8001e64:	4b3e      	ldr	r3, [pc, #248]	; (8001f60 <StartWatchDog+0x1dc>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4619      	mov	r1, r3
 8001e6a:	200c      	movs	r0, #12
 8001e6c:	f001 f96e 	bl	800314c <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_STATE_ALT_APOGEE, rtc_bckp_reg_alt_apogee);
 8001e70:	4b3c      	ldr	r3, [pc, #240]	; (8001f64 <StartWatchDog+0x1e0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4619      	mov	r1, r3
 8001e76:	200d      	movs	r0, #13
 8001e78:	f001 f968 	bl	800314c <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_APOGEE_TIME, rtc_bckp_reg_apogee_time);
 8001e7c:	4b3a      	ldr	r3, [pc, #232]	; (8001f68 <StartWatchDog+0x1e4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4619      	mov	r1, r3
 8001e82:	200e      	movs	r0, #14
 8001e84:	f001 f962 	bl	800314c <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_STATE_ALT_MAIN, rtc_bckp_reg_alt_main);
 8001e88:	4b38      	ldr	r3, [pc, #224]	; (8001f6c <StartWatchDog+0x1e8>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	200f      	movs	r0, #15
 8001e90:	f001 f95c 	bl	800314c <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_MAIN_TIME, rtc_bckp_reg_main_time);
 8001e94:	4b36      	ldr	r3, [pc, #216]	; (8001f70 <StartWatchDog+0x1ec>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	2010      	movs	r0, #16
 8001e9c:	f001 f956 	bl	800314c <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_STATE_ALT_LANDED, rtc_bckp_reg_alt_landed);
 8001ea0:	4b34      	ldr	r3, [pc, #208]	; (8001f74 <StartWatchDog+0x1f0>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	2011      	movs	r0, #17
 8001ea8:	f001 f950 	bl	800314c <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_LANDED_TIME, rtc_bckp_reg_landed_time);
 8001eac:	4b32      	ldr	r3, [pc, #200]	; (8001f78 <StartWatchDog+0x1f4>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	2012      	movs	r0, #18
 8001eb4:	f001 f94a 	bl	800314c <MRT_RTC_setBackupReg>
	 }

	  //Check if it's sleep time
	  if (flagA==1 || flagB==1){
 8001eb8:	4b30      	ldr	r3, [pc, #192]	; (8001f7c <StartWatchDog+0x1f8>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d003      	beq.n	8001ec8 <StartWatchDog+0x144>
 8001ec0:	4b2f      	ldr	r3, [pc, #188]	; (8001f80 <StartWatchDog+0x1fc>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d112      	bne.n	8001eee <StartWatchDog+0x16a>
		//Update iwdg_flag
		iwdg_flag = 1;
 8001ec8:	4b2e      	ldr	r3, [pc, #184]	; (8001f84 <StartWatchDog+0x200>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	701a      	strb	r2, [r3, #0]
		rtc_bckp_reg_iwdg = iwdg_flag;
 8001ece:	4b2d      	ldr	r3, [pc, #180]	; (8001f84 <StartWatchDog+0x200>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	4b2c      	ldr	r3, [pc, #176]	; (8001f88 <StartWatchDog+0x204>)
 8001ed6:	601a      	str	r2, [r3, #0]
		ext_flash_iwdg = iwdg_flag;
 8001ed8:	4b2a      	ldr	r3, [pc, #168]	; (8001f84 <StartWatchDog+0x200>)
 8001eda:	781a      	ldrb	r2, [r3, #0]
 8001edc:	4b2b      	ldr	r3, [pc, #172]	; (8001f8c <StartWatchDog+0x208>)
 8001ede:	701a      	strb	r2, [r3, #0]
		MRT_saveFlagValue(FC_STATE_IWDG);
 8001ee0:	2002      	movs	r0, #2
 8001ee2:	f002 f80b 	bl	8003efc <MRT_saveFlagValue>

		//Save the RTC time
		MRT_saveTotalTime();
 8001ee6:	f002 f895 	bl	8004014 <MRT_saveTotalTime>

		//Reset to deactivate IWDG
		NVIC_SystemReset();
 8001eea:	f7ff fb45 	bl	8001578 <__NVIC_SystemReset>
	  }

	  //Save the RTC time
	  MRT_saveTotalTime();
 8001eee:	f002 f891 	bl	8004014 <MRT_saveTotalTime>


	  //Check for complete restart
	  if(restart_flag == 1){
 8001ef2:	4b27      	ldr	r3, [pc, #156]	; (8001f90 <StartWatchDog+0x20c>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d101      	bne.n	8001efe <StartWatchDog+0x17a>
		  MRT_resetFromStart();
 8001efa:	f001 fbe7 	bl	80036cc <MRT_resetFromStart>
	  }

	  MRT_checkThreadStates();
 8001efe:	f000 f86f 	bl	8001fe0 <MRT_checkThreadStates>

	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001f02:	2200      	movs	r2, #0
 8001f04:	2104      	movs	r1, #4
 8001f06:	4804      	ldr	r0, [pc, #16]	; (8001f18 <StartWatchDog+0x194>)
 8001f08:	f007 fee0 	bl	8009ccc <HAL_GPIO_WritePin>

	  osDelay(1000/WD_FREQ);
 8001f0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f10:	f010 fca0 	bl	8012854 <osDelay>
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8001f14:	e73c      	b.n	8001d90 <StartWatchDog+0xc>
 8001f16:	bf00      	nop
 8001f18:	40020800 	.word	0x40020800
 8001f1c:	2000bb20 	.word	0x2000bb20
 8001f20:	20000395 	.word	0x20000395
 8001f24:	20000396 	.word	0x20000396
 8001f28:	20000397 	.word	0x20000397
 8001f2c:	20000398 	.word	0x20000398
 8001f30:	200002e8 	.word	0x200002e8
 8001f34:	0801c5d4 	.word	0x0801c5d4
 8001f38:	200002ec 	.word	0x200002ec
 8001f3c:	20000394 	.word	0x20000394
 8001f40:	20000340 	.word	0x20000340
 8001f44:	20000384 	.word	0x20000384
 8001f48:	20000393 	.word	0x20000393
 8001f4c:	2000033c 	.word	0x2000033c
 8001f50:	20000383 	.word	0x20000383
 8001f54:	20000354 	.word	0x20000354
 8001f58:	20000358 	.word	0x20000358
 8001f5c:	2000035c 	.word	0x2000035c
 8001f60:	20000360 	.word	0x20000360
 8001f64:	20000364 	.word	0x20000364
 8001f68:	20000368 	.word	0x20000368
 8001f6c:	2000036c 	.word	0x2000036c
 8001f70:	20000370 	.word	0x20000370
 8001f74:	20000374 	.word	0x20000374
 8001f78:	20000378 	.word	0x20000378
 8001f7c:	2000037c 	.word	0x2000037c
 8001f80:	2000037d 	.word	0x2000037d
 8001f84:	20000392 	.word	0x20000392
 8001f88:	20000338 	.word	0x20000338
 8001f8c:	20000382 	.word	0x20000382
 8001f90:	2000037e 	.word	0x2000037e

08001f94 <StartPropulsion4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPropulsion4 */
void StartPropulsion4(void *argument)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPropulsion4 */

	//Add thread id to the list
	threadsID[4]=osThreadGetId();
 8001f9c:	f010 fbbf 	bl	801271e <osThreadGetId>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	4a0c      	ldr	r2, [pc, #48]	; (8001fd4 <StartPropulsion4+0x40>)
 8001fa4:	6113      	str	r3, [r2, #16]

	#if !PROPULSION_THREAD
	osThreadExit();
	#endif

	if (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT){
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <StartPropulsion4+0x44>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d103      	bne.n	8001fb6 <StartPropulsion4+0x22>
 8001fae:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <StartPropulsion4+0x48>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d901      	bls.n	8001fba <StartPropulsion4+0x26>
		osThreadExit();
 8001fb6:	f010 fc1a 	bl	80127ee <osThreadExit>

  /* Infinite loop */
  for(;;)
  {
	  //Poll propulsion sensors
	  MRT_pollPropulsion();
 8001fba:	f003 fabb 	bl	8005534 <MRT_pollPropulsion>

	  if (apogee_flag){
 8001fbe:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <StartPropulsion4+0x44>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <StartPropulsion4+0x36>
		  osThreadExit();
 8001fc6:	f010 fc12 	bl	80127ee <osThreadExit>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_POLL_FREQ);
 8001fca:	2014      	movs	r0, #20
 8001fcc:	f010 fc42 	bl	8012854 <osDelay>
	  MRT_pollPropulsion();
 8001fd0:	e7f3      	b.n	8001fba <StartPropulsion4+0x26>
 8001fd2:	bf00      	nop
 8001fd4:	20008f64 	.word	0x20008f64
 8001fd8:	20000393 	.word	0x20000393
 8001fdc:	20000394 	.word	0x20000394

08001fe0 <MRT_checkThreadStates>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

//TODO private functions

void MRT_checkThreadStates(void){
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
	  //Check each thread state
	  #if THREAD_KEEPER

	  osThreadState_t thread_state;

	  for (int i=0; i < NUMBER_OF_THREADS;i++){
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	607b      	str	r3, [r7, #4]
 8001fea:	e055      	b.n	8002098 <MRT_checkThreadStates+0xb8>

		  thread_state = osThreadGetState(threadsID[i]);
 8001fec:	4a2e      	ldr	r2, [pc, #184]	; (80020a8 <MRT_checkThreadStates+0xc8>)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f010 fb9d 	bl	8012734 <osThreadGetState>
 8001ffa:	6038      	str	r0, [r7, #0]

		  if (thread_state == osThreadInactive ||
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d005      	beq.n	800200e <MRT_checkThreadStates+0x2e>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2b03      	cmp	r3, #3
 8002006:	d002      	beq.n	800200e <MRT_checkThreadStates+0x2e>
			  thread_state == osThreadBlocked  ||
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	2b04      	cmp	r3, #4
 800200c:	d128      	bne.n	8002060 <MRT_checkThreadStates+0x80>
			  thread_state == osThreadTerminated){

			  //Ejection thread
			  if (i==1 && ejection_stage_flag < LANDED){
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d10a      	bne.n	800202a <MRT_checkThreadStates+0x4a>
 8002014:	4b25      	ldr	r3, [pc, #148]	; (80020ac <MRT_checkThreadStates+0xcc>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b03      	cmp	r3, #3
 800201a:	d806      	bhi.n	800202a <MRT_checkThreadStates+0x4a>
				 osThreadResume(threadsID[i]);
 800201c:	4a22      	ldr	r2, [pc, #136]	; (80020a8 <MRT_checkThreadStates+0xc8>)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002024:	4618      	mov	r0, r3
 8002026:	f010 fbc1 	bl	80127ac <osThreadResume>
			  }

			  //Propulsion thread
			  if (i==4 && (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT)){
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b04      	cmp	r3, #4
 800202e:	d10f      	bne.n	8002050 <MRT_checkThreadStates+0x70>
 8002030:	4b1f      	ldr	r3, [pc, #124]	; (80020b0 <MRT_checkThreadStates+0xd0>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d103      	bne.n	8002040 <MRT_checkThreadStates+0x60>
 8002038:	4b1c      	ldr	r3, [pc, #112]	; (80020ac <MRT_checkThreadStates+0xcc>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d907      	bls.n	8002050 <MRT_checkThreadStates+0x70>
				  osThreadTerminate(threadsID[i]);
 8002040:	4a19      	ldr	r2, [pc, #100]	; (80020a8 <MRT_checkThreadStates+0xc8>)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002048:	4618      	mov	r0, r3
 800204a:	f010 fbd6 	bl	80127fa <osThreadTerminate>
				  continue;
 800204e:	e020      	b.n	8002092 <MRT_checkThreadStates+0xb2>
			  }
			  else {
				 //Resume otherwise
				 osThreadResume(threadsID[i]);
 8002050:	4a15      	ldr	r2, [pc, #84]	; (80020a8 <MRT_checkThreadStates+0xc8>)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002058:	4618      	mov	r0, r3
 800205a:	f010 fba7 	bl	80127ac <osThreadResume>
			  if (i==4 && (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT)){
 800205e:	e018      	b.n	8002092 <MRT_checkThreadStates+0xb2>
			  }
		  }

		  else if (thread_state == osThreadError){
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002066:	d114      	bne.n	8002092 <MRT_checkThreadStates+0xb2>
			  //If it's the propulsion thread
			  if (i==4 && (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT)){
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b04      	cmp	r3, #4
 800206c:	d10f      	bne.n	800208e <MRT_checkThreadStates+0xae>
 800206e:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <MRT_checkThreadStates+0xd0>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d103      	bne.n	800207e <MRT_checkThreadStates+0x9e>
 8002076:	4b0d      	ldr	r3, [pc, #52]	; (80020ac <MRT_checkThreadStates+0xcc>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d907      	bls.n	800208e <MRT_checkThreadStates+0xae>
				  osThreadTerminate(threadsID[i]);
 800207e:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <MRT_checkThreadStates+0xc8>)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002086:	4618      	mov	r0, r3
 8002088:	f010 fbb7 	bl	80127fa <osThreadTerminate>
				  continue;
 800208c:	e001      	b.n	8002092 <MRT_checkThreadStates+0xb2>
			  }
			  else{
				 //Reset otherwise
				 NVIC_SystemReset();
 800208e:	f7ff fa73 	bl	8001578 <__NVIC_SystemReset>
	  for (int i=0; i < NUMBER_OF_THREADS;i++){
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3301      	adds	r3, #1
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b04      	cmp	r3, #4
 800209c:	dda6      	ble.n	8001fec <MRT_checkThreadStates+0xc>
		  else if (thread_state == osThreadReserved){ TODO not sure what is this state
		  }
		  */
	  }
	  #endif
}
 800209e:	bf00      	nop
 80020a0:	bf00      	nop
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20008f64 	.word	0x20008f64
 80020ac:	20000394 	.word	0x20000394
 80020b0:	20000393 	.word	0x20000393

080020b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08e      	sub	sp, #56	; 0x38
 80020b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	60da      	str	r2, [r3, #12]
 80020c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	623b      	str	r3, [r7, #32]
 80020ce:	4bb5      	ldr	r3, [pc, #724]	; (80023a4 <MX_GPIO_Init+0x2f0>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	4ab4      	ldr	r2, [pc, #720]	; (80023a4 <MX_GPIO_Init+0x2f0>)
 80020d4:	f043 0310 	orr.w	r3, r3, #16
 80020d8:	6313      	str	r3, [r2, #48]	; 0x30
 80020da:	4bb2      	ldr	r3, [pc, #712]	; (80023a4 <MX_GPIO_Init+0x2f0>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	f003 0310 	and.w	r3, r3, #16
 80020e2:	623b      	str	r3, [r7, #32]
 80020e4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
 80020ea:	4bae      	ldr	r3, [pc, #696]	; (80023a4 <MX_GPIO_Init+0x2f0>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	4aad      	ldr	r2, [pc, #692]	; (80023a4 <MX_GPIO_Init+0x2f0>)
 80020f0:	f043 0304 	orr.w	r3, r3, #4
 80020f4:	6313      	str	r3, [r2, #48]	; 0x30
 80020f6:	4bab      	ldr	r3, [pc, #684]	; (80023a4 <MX_GPIO_Init+0x2f0>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f003 0304 	and.w	r3, r3, #4
 80020fe:	61fb      	str	r3, [r7, #28]
 8002100:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	61bb      	str	r3, [r7, #24]
 8002106:	4ba7      	ldr	r3, [pc, #668]	; (80023a4 <MX_GPIO_Init+0x2f0>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	4aa6      	ldr	r2, [pc, #664]	; (80023a4 <MX_GPIO_Init+0x2f0>)
 800210c:	f043 0320 	orr.w	r3, r3, #32
 8002110:	6313      	str	r3, [r2, #48]	; 0x30
 8002112:	4ba4      	ldr	r3, [pc, #656]	; (80023a4 <MX_GPIO_Init+0x2f0>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	f003 0320 	and.w	r3, r3, #32
 800211a:	61bb      	str	r3, [r7, #24]
 800211c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	4ba0      	ldr	r3, [pc, #640]	; (80023a4 <MX_GPIO_Init+0x2f0>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a9f      	ldr	r2, [pc, #636]	; (80023a4 <MX_GPIO_Init+0x2f0>)
 8002128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b9d      	ldr	r3, [pc, #628]	; (80023a4 <MX_GPIO_Init+0x2f0>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	4b99      	ldr	r3, [pc, #612]	; (80023a4 <MX_GPIO_Init+0x2f0>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	4a98      	ldr	r2, [pc, #608]	; (80023a4 <MX_GPIO_Init+0x2f0>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	6313      	str	r3, [r2, #48]	; 0x30
 800214a:	4b96      	ldr	r3, [pc, #600]	; (80023a4 <MX_GPIO_Init+0x2f0>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b92      	ldr	r3, [pc, #584]	; (80023a4 <MX_GPIO_Init+0x2f0>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a91      	ldr	r2, [pc, #580]	; (80023a4 <MX_GPIO_Init+0x2f0>)
 8002160:	f043 0302 	orr.w	r3, r3, #2
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	4b8f      	ldr	r3, [pc, #572]	; (80023a4 <MX_GPIO_Init+0x2f0>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	4b8b      	ldr	r3, [pc, #556]	; (80023a4 <MX_GPIO_Init+0x2f0>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4a8a      	ldr	r2, [pc, #552]	; (80023a4 <MX_GPIO_Init+0x2f0>)
 800217c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
 8002182:	4b88      	ldr	r3, [pc, #544]	; (80023a4 <MX_GPIO_Init+0x2f0>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	607b      	str	r3, [r7, #4]
 8002192:	4b84      	ldr	r3, [pc, #528]	; (80023a4 <MX_GPIO_Init+0x2f0>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a83      	ldr	r2, [pc, #524]	; (80023a4 <MX_GPIO_Init+0x2f0>)
 8002198:	f043 0308 	orr.w	r3, r3, #8
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b81      	ldr	r3, [pc, #516]	; (80023a4 <MX_GPIO_Init+0x2f0>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	607b      	str	r3, [r7, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 80021aa:	2200      	movs	r2, #0
 80021ac:	f248 4184 	movw	r1, #33924	; 0x8484
 80021b0:	487d      	ldr	r0, [pc, #500]	; (80023a8 <MX_GPIO_Init+0x2f4>)
 80021b2:	f007 fd8b 	bl	8009ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80021b6:	2201      	movs	r2, #1
 80021b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021bc:	487b      	ldr	r0, [pc, #492]	; (80023ac <MX_GPIO_Init+0x2f8>)
 80021be:	f007 fd85 	bl	8009ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 80021c2:	2200      	movs	r2, #0
 80021c4:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80021c8:	4879      	ldr	r0, [pc, #484]	; (80023b0 <MX_GPIO_Init+0x2fc>)
 80021ca:	f007 fd7f 	bl	8009ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2108      	movs	r1, #8
 80021d2:	4878      	ldr	r0, [pc, #480]	; (80023b4 <MX_GPIO_Init+0x300>)
 80021d4:	f007 fd7a 	bl	8009ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 80021d8:	2200      	movs	r2, #0
 80021da:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80021de:	4873      	ldr	r0, [pc, #460]	; (80023ac <MX_GPIO_Init+0x2f8>)
 80021e0:	f007 fd74 	bl	8009ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 80021e4:	2200      	movs	r2, #0
 80021e6:	f645 2126 	movw	r1, #23078	; 0x5a26
 80021ea:	4873      	ldr	r0, [pc, #460]	; (80023b8 <MX_GPIO_Init+0x304>)
 80021ec:	f007 fd6e 	bl	8009ccc <HAL_GPIO_WritePin>
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin, GPIO_PIN_RESET);
 80021f0:	2200      	movs	r2, #0
 80021f2:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 80021f6:	4871      	ldr	r0, [pc, #452]	; (80023bc <MX_GPIO_Init+0x308>)
 80021f8:	f007 fd68 	bl	8009ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80021fc:	2200      	movs	r2, #0
 80021fe:	f44f 41f9 	mov.w	r1, #31872	; 0x7c80
 8002202:	486f      	ldr	r0, [pc, #444]	; (80023c0 <MX_GPIO_Init+0x30c>)
 8002204:	f007 fd62 	bl	8009ccc <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin, GPIO_PIN_SET);
 8002208:	2201      	movs	r2, #1
 800220a:	2170      	movs	r1, #112	; 0x70
 800220c:	486c      	ldr	r0, [pc, #432]	; (80023c0 <MX_GPIO_Init+0x30c>)
 800220e:	f007 fd5d 	bl	8009ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 8002212:	f248 4384 	movw	r3, #33924	; 0x8484
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002218:	2301      	movs	r3, #1
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002220:	2300      	movs	r3, #0
 8002222:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002228:	4619      	mov	r1, r3
 800222a:	485f      	ldr	r0, [pc, #380]	; (80023a8 <MX_GPIO_Init+0x2f4>)
 800222c:	f007 fb8a 	bl	8009944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8002230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002236:	2301      	movs	r3, #1
 8002238:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800223a:	2301      	movs	r3, #1
 800223c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223e:	2300      	movs	r3, #0
 8002240:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002246:	4619      	mov	r1, r3
 8002248:	4858      	ldr	r0, [pc, #352]	; (80023ac <MX_GPIO_Init+0x2f8>)
 800224a:	f007 fb7b 	bl	8009944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 800224e:	2301      	movs	r3, #1
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002252:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002256:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 800225c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002260:	4619      	mov	r1, r3
 8002262:	4853      	ldr	r0, [pc, #332]	; (80023b0 <MX_GPIO_Init+0x2fc>)
 8002264:	f007 fb6e 	bl	8009944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 8002268:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226e:	2301      	movs	r3, #1
 8002270:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002276:	2300      	movs	r3, #0
 8002278:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800227a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800227e:	4619      	mov	r1, r3
 8002280:	484b      	ldr	r0, [pc, #300]	; (80023b0 <MX_GPIO_Init+0x2fc>)
 8002282:	f007 fb5f 	bl	8009944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8002286:	2308      	movs	r3, #8
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800228a:	2301      	movs	r3, #1
 800228c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002292:	2300      	movs	r3, #0
 8002294:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 8002296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800229a:	4619      	mov	r1, r3
 800229c:	4845      	ldr	r0, [pc, #276]	; (80023b4 <MX_GPIO_Init+0x300>)
 800229e:	f007 fb51 	bl	8009944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 80022a2:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a8:	2300      	movs	r3, #0
 80022aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b4:	4619      	mov	r1, r3
 80022b6:	483e      	ldr	r0, [pc, #248]	; (80023b0 <MX_GPIO_Init+0x2fc>)
 80022b8:	f007 fb44 	bl	8009944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 80022bc:	2302      	movs	r3, #2
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c0:	2300      	movs	r3, #0
 80022c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 80022c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022cc:	4619      	mov	r1, r3
 80022ce:	483b      	ldr	r0, [pc, #236]	; (80023bc <MX_GPIO_Init+0x308>)
 80022d0:	f007 fb38 	bl	8009944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 80022d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022da:	2300      	movs	r3, #0
 80022dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 80022e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e6:	4619      	mov	r1, r3
 80022e8:	4830      	ldr	r0, [pc, #192]	; (80023ac <MX_GPIO_Init+0x2f8>)
 80022ea:	f007 fb2b 	bl	8009944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 80022ee:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f4:	2301      	movs	r3, #1
 80022f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fc:	2300      	movs	r3, #0
 80022fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002304:	4619      	mov	r1, r3
 8002306:	4829      	ldr	r0, [pc, #164]	; (80023ac <MX_GPIO_Init+0x2f8>)
 8002308:	f007 fb1c 	bl	8009944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|IN_EJ_Main_Cont_Pin
 800230c:	f242 4319 	movw	r3, #9241	; 0x2419
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
                          |IN_EJ_Drogue_Cont_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002312:	2300      	movs	r3, #0
 8002314:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800231a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800231e:	4619      	mov	r1, r3
 8002320:	4825      	ldr	r0, [pc, #148]	; (80023b8 <MX_GPIO_Init+0x304>)
 8002322:	f007 fb0f 	bl	8009944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 8002326:	f645 2326 	movw	r3, #23078	; 0x5a26
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800232c:	2301      	movs	r3, #1
 800232e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002334:	2300      	movs	r3, #0
 8002336:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800233c:	4619      	mov	r1, r3
 800233e:	481e      	ldr	r0, [pc, #120]	; (80023b8 <MX_GPIO_Init+0x304>)
 8002340:	f007 fb00 	bl	8009944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 8002344:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800234a:	2300      	movs	r3, #0
 800234c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002356:	4619      	mov	r1, r3
 8002358:	4813      	ldr	r0, [pc, #76]	; (80023a8 <MX_GPIO_Init+0x2f4>)
 800235a:	f007 faf3 	bl	8009944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB8 PBPin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin;
 800235e:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002364:	2301      	movs	r3, #1
 8002366:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236c:	2300      	movs	r3, #0
 800236e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002374:	4619      	mov	r1, r3
 8002376:	4811      	ldr	r0, [pc, #68]	; (80023bc <MX_GPIO_Init+0x308>)
 8002378:	f007 fae4 	bl	8009944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 800237c:	f44f 43f9 	mov.w	r3, #31872	; 0x7c80
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002382:	2301      	movs	r3, #1
 8002384:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238a:	2300      	movs	r3, #0
 800238c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800238e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002392:	4619      	mov	r1, r3
 8002394:	480a      	ldr	r0, [pc, #40]	; (80023c0 <MX_GPIO_Init+0x30c>)
 8002396:	f007 fad5 	bl	8009944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 800239a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023a0:	2300      	movs	r3, #0
 80023a2:	e00f      	b.n	80023c4 <MX_GPIO_Init+0x310>
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40021400 	.word	0x40021400
 80023b0:	40020800 	.word	0x40020800
 80023b4:	40020000 	.word	0x40020000
 80023b8:	40021800 	.word	0x40021800
 80023bc:	40020400 	.word	0x40020400
 80023c0:	40020c00 	.word	0x40020c00
 80023c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 80023ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ce:	4619      	mov	r1, r3
 80023d0:	4815      	ldr	r0, [pc, #84]	; (8002428 <MX_GPIO_Init+0x374>)
 80023d2:	f007 fab7 	bl	8009944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 80023d6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023dc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80023e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ea:	4619      	mov	r1, r3
 80023ec:	480f      	ldr	r0, [pc, #60]	; (800242c <MX_GPIO_Init+0x378>)
 80023ee:	f007 faa9 	bl	8009944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin;
 80023f2:	2370      	movs	r3, #112	; 0x70
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f6:	2301      	movs	r3, #1
 80023f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023fa:	2301      	movs	r3, #1
 80023fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fe:	2300      	movs	r3, #0
 8002400:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002406:	4619      	mov	r1, r3
 8002408:	4807      	ldr	r0, [pc, #28]	; (8002428 <MX_GPIO_Init+0x374>)
 800240a:	f007 fa9b 	bl	8009944 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 800240e:	2200      	movs	r2, #0
 8002410:	2103      	movs	r1, #3
 8002412:	2006      	movs	r0, #6
 8002414:	f007 fa5e 	bl	80098d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002418:	2006      	movs	r0, #6
 800241a:	f007 fa77 	bl	800990c <HAL_NVIC_EnableIRQ>

}
 800241e:	bf00      	nop
 8002420:	3738      	adds	r7, #56	; 0x38
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40020c00 	.word	0x40020c00
 800242c:	40021800 	.word	0x40021800

08002430 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002434:	4b1b      	ldr	r3, [pc, #108]	; (80024a4 <MX_I2C2_Init+0x74>)
 8002436:	4a1c      	ldr	r2, [pc, #112]	; (80024a8 <MX_I2C2_Init+0x78>)
 8002438:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800243a:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <MX_I2C2_Init+0x74>)
 800243c:	4a1b      	ldr	r2, [pc, #108]	; (80024ac <MX_I2C2_Init+0x7c>)
 800243e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002440:	4b18      	ldr	r3, [pc, #96]	; (80024a4 <MX_I2C2_Init+0x74>)
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002446:	4b17      	ldr	r3, [pc, #92]	; (80024a4 <MX_I2C2_Init+0x74>)
 8002448:	2200      	movs	r2, #0
 800244a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800244c:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <MX_I2C2_Init+0x74>)
 800244e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002452:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002454:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <MX_I2C2_Init+0x74>)
 8002456:	2200      	movs	r2, #0
 8002458:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800245a:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <MX_I2C2_Init+0x74>)
 800245c:	2200      	movs	r2, #0
 800245e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002460:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <MX_I2C2_Init+0x74>)
 8002462:	2200      	movs	r2, #0
 8002464:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002466:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <MX_I2C2_Init+0x74>)
 8002468:	2200      	movs	r2, #0
 800246a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800246c:	480d      	ldr	r0, [pc, #52]	; (80024a4 <MX_I2C2_Init+0x74>)
 800246e:	f007 fc5f 	bl	8009d30 <HAL_I2C_Init>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002478:	f000 fb0a 	bl	8002a90 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800247c:	2100      	movs	r1, #0
 800247e:	4809      	ldr	r0, [pc, #36]	; (80024a4 <MX_I2C2_Init+0x74>)
 8002480:	f008 fc4b 	bl	800ad1a <HAL_I2CEx_ConfigAnalogFilter>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800248a:	f000 fb01 	bl	8002a90 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800248e:	2100      	movs	r1, #0
 8002490:	4804      	ldr	r0, [pc, #16]	; (80024a4 <MX_I2C2_Init+0x74>)
 8002492:	f008 fc7e 	bl	800ad92 <HAL_I2CEx_ConfigDigitalFilter>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800249c:	f000 faf8 	bl	8002a90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80024a0:	bf00      	nop
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	2000bacc 	.word	0x2000bacc
 80024a8:	40005800 	.word	0x40005800
 80024ac:	000186a0 	.word	0x000186a0

080024b0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80024b4:	4b1b      	ldr	r3, [pc, #108]	; (8002524 <MX_I2C3_Init+0x74>)
 80024b6:	4a1c      	ldr	r2, [pc, #112]	; (8002528 <MX_I2C3_Init+0x78>)
 80024b8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80024ba:	4b1a      	ldr	r3, [pc, #104]	; (8002524 <MX_I2C3_Init+0x74>)
 80024bc:	4a1b      	ldr	r2, [pc, #108]	; (800252c <MX_I2C3_Init+0x7c>)
 80024be:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024c0:	4b18      	ldr	r3, [pc, #96]	; (8002524 <MX_I2C3_Init+0x74>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80024c6:	4b17      	ldr	r3, [pc, #92]	; (8002524 <MX_I2C3_Init+0x74>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024cc:	4b15      	ldr	r3, [pc, #84]	; (8002524 <MX_I2C3_Init+0x74>)
 80024ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024d2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024d4:	4b13      	ldr	r3, [pc, #76]	; (8002524 <MX_I2C3_Init+0x74>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80024da:	4b12      	ldr	r3, [pc, #72]	; (8002524 <MX_I2C3_Init+0x74>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024e0:	4b10      	ldr	r3, [pc, #64]	; (8002524 <MX_I2C3_Init+0x74>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024e6:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <MX_I2C3_Init+0x74>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80024ec:	480d      	ldr	r0, [pc, #52]	; (8002524 <MX_I2C3_Init+0x74>)
 80024ee:	f007 fc1f 	bl	8009d30 <HAL_I2C_Init>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80024f8:	f000 faca 	bl	8002a90 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024fc:	2100      	movs	r1, #0
 80024fe:	4809      	ldr	r0, [pc, #36]	; (8002524 <MX_I2C3_Init+0x74>)
 8002500:	f008 fc0b 	bl	800ad1a <HAL_I2CEx_ConfigAnalogFilter>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800250a:	f000 fac1 	bl	8002a90 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800250e:	2100      	movs	r1, #0
 8002510:	4804      	ldr	r0, [pc, #16]	; (8002524 <MX_I2C3_Init+0x74>)
 8002512:	f008 fc3e 	bl	800ad92 <HAL_I2CEx_ConfigDigitalFilter>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800251c:	f000 fab8 	bl	8002a90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002520:	bf00      	nop
 8002522:	bd80      	pop	{r7, pc}
 8002524:	2000ba78 	.word	0x2000ba78
 8002528:	40005c00 	.word	0x40005c00
 800252c:	000186a0 	.word	0x000186a0

08002530 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08c      	sub	sp, #48	; 0x30
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002538:	f107 031c 	add.w	r3, r7, #28
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a42      	ldr	r2, [pc, #264]	; (8002658 <HAL_I2C_MspInit+0x128>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d12d      	bne.n	80025ae <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	61bb      	str	r3, [r7, #24]
 8002556:	4b41      	ldr	r3, [pc, #260]	; (800265c <HAL_I2C_MspInit+0x12c>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	4a40      	ldr	r2, [pc, #256]	; (800265c <HAL_I2C_MspInit+0x12c>)
 800255c:	f043 0302 	orr.w	r3, r3, #2
 8002560:	6313      	str	r3, [r2, #48]	; 0x30
 8002562:	4b3e      	ldr	r3, [pc, #248]	; (800265c <HAL_I2C_MspInit+0x12c>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	61bb      	str	r3, [r7, #24]
 800256c:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800256e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002574:	2312      	movs	r3, #18
 8002576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002578:	2301      	movs	r3, #1
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257c:	2303      	movs	r3, #3
 800257e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002580:	2304      	movs	r3, #4
 8002582:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002584:	f107 031c 	add.w	r3, r7, #28
 8002588:	4619      	mov	r1, r3
 800258a:	4835      	ldr	r0, [pc, #212]	; (8002660 <HAL_I2C_MspInit+0x130>)
 800258c:	f007 f9da 	bl	8009944 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	4b31      	ldr	r3, [pc, #196]	; (800265c <HAL_I2C_MspInit+0x12c>)
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	4a30      	ldr	r2, [pc, #192]	; (800265c <HAL_I2C_MspInit+0x12c>)
 800259a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800259e:	6413      	str	r3, [r2, #64]	; 0x40
 80025a0:	4b2e      	ldr	r3, [pc, #184]	; (800265c <HAL_I2C_MspInit+0x12c>)
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80025ac:	e050      	b.n	8002650 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a2c      	ldr	r2, [pc, #176]	; (8002664 <HAL_I2C_MspInit+0x134>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d14b      	bne.n	8002650 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025b8:	2300      	movs	r3, #0
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	4b27      	ldr	r3, [pc, #156]	; (800265c <HAL_I2C_MspInit+0x12c>)
 80025be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c0:	4a26      	ldr	r2, [pc, #152]	; (800265c <HAL_I2C_MspInit+0x12c>)
 80025c2:	f043 0304 	orr.w	r3, r3, #4
 80025c6:	6313      	str	r3, [r2, #48]	; 0x30
 80025c8:	4b24      	ldr	r3, [pc, #144]	; (800265c <HAL_I2C_MspInit+0x12c>)
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d4:	2300      	movs	r3, #0
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	4b20      	ldr	r3, [pc, #128]	; (800265c <HAL_I2C_MspInit+0x12c>)
 80025da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025dc:	4a1f      	ldr	r2, [pc, #124]	; (800265c <HAL_I2C_MspInit+0x12c>)
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	6313      	str	r3, [r2, #48]	; 0x30
 80025e4:	4b1d      	ldr	r3, [pc, #116]	; (800265c <HAL_I2C_MspInit+0x12c>)
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80025f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025f6:	2312      	movs	r3, #18
 80025f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025fa:	2301      	movs	r3, #1
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fe:	2303      	movs	r3, #3
 8002600:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002602:	2304      	movs	r3, #4
 8002604:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002606:	f107 031c 	add.w	r3, r7, #28
 800260a:	4619      	mov	r1, r3
 800260c:	4816      	ldr	r0, [pc, #88]	; (8002668 <HAL_I2C_MspInit+0x138>)
 800260e:	f007 f999 	bl	8009944 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002612:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002618:	2312      	movs	r3, #18
 800261a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800261c:	2301      	movs	r3, #1
 800261e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002620:	2303      	movs	r3, #3
 8002622:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002624:	2304      	movs	r3, #4
 8002626:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002628:	f107 031c 	add.w	r3, r7, #28
 800262c:	4619      	mov	r1, r3
 800262e:	480f      	ldr	r0, [pc, #60]	; (800266c <HAL_I2C_MspInit+0x13c>)
 8002630:	f007 f988 	bl	8009944 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002634:	2300      	movs	r3, #0
 8002636:	60bb      	str	r3, [r7, #8]
 8002638:	4b08      	ldr	r3, [pc, #32]	; (800265c <HAL_I2C_MspInit+0x12c>)
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	4a07      	ldr	r2, [pc, #28]	; (800265c <HAL_I2C_MspInit+0x12c>)
 800263e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002642:	6413      	str	r3, [r2, #64]	; 0x40
 8002644:	4b05      	ldr	r3, [pc, #20]	; (800265c <HAL_I2C_MspInit+0x12c>)
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	68bb      	ldr	r3, [r7, #8]
}
 8002650:	bf00      	nop
 8002652:	3730      	adds	r7, #48	; 0x30
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40005800 	.word	0x40005800
 800265c:	40023800 	.word	0x40023800
 8002660:	40020400 	.word	0x40020400
 8002664:	40005c00 	.word	0x40005c00
 8002668:	40020800 	.word	0x40020800
 800266c:	40020000 	.word	0x40020000

08002670 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002674:	4b09      	ldr	r3, [pc, #36]	; (800269c <MX_IWDG_Init+0x2c>)
 8002676:	4a0a      	ldr	r2, [pc, #40]	; (80026a0 <MX_IWDG_Init+0x30>)
 8002678:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 800267a:	4b08      	ldr	r3, [pc, #32]	; (800269c <MX_IWDG_Init+0x2c>)
 800267c:	2204      	movs	r2, #4
 800267e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2499;
 8002680:	4b06      	ldr	r3, [pc, #24]	; (800269c <MX_IWDG_Init+0x2c>)
 8002682:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8002686:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002688:	4804      	ldr	r0, [pc, #16]	; (800269c <MX_IWDG_Init+0x2c>)
 800268a:	f008 fbc1 	bl	800ae10 <HAL_IWDG_Init>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8002694:	f000 f9fc 	bl	8002a90 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002698:	bf00      	nop
 800269a:	bd80      	pop	{r7, pc}
 800269c:	2000bb20 	.word	0x2000bb20
 80026a0:	40003000 	.word	0x40003000

080026a4 <main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int main(void){
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
	MRT_STM_Init();
 80026a8:	f000 f8aa 	bl	8002800 <MRT_STM_Init>
	__HAL_DBGMCU_FREEZE_IWDG();	// pause IWDG and RTC during debugging
 80026ac:	4b15      	ldr	r3, [pc, #84]	; (8002704 <main+0x60>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	4a14      	ldr	r2, [pc, #80]	; (8002704 <main+0x60>)
 80026b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026b6:	6093      	str	r3, [r2, #8]
	__HAL_FREEZE_RTC_DBGMCU();
 80026b8:	4b12      	ldr	r3, [pc, #72]	; (8002704 <main+0x60>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	4a11      	ldr	r2, [pc, #68]	; (8002704 <main+0x60>)
 80026be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026c2:	6093      	str	r3, [r2, #8]
	println("\r\n\r\nSTM Init...OK");
 80026c4:	4810      	ldr	r0, [pc, #64]	; (8002708 <main+0x64>)
 80026c6:	f7fe fcb1 	bl	800102c <println>

	MRT_Init();
 80026ca:	f7fe fd4d 	bl	8001168 <MRT_Init>

	println("\r\n\r\n/****Starting FC****/\r\n\r\n");
 80026ce:	480f      	ldr	r0, [pc, #60]	; (800270c <main+0x68>)
 80026d0:	f7fe fcac 	bl	800102c <println>
	HAL_IWDG_Refresh(&hiwdg);
 80026d4:	480e      	ldr	r0, [pc, #56]	; (8002710 <main+0x6c>)
 80026d6:	f008 fbdd 	bl	800ae94 <HAL_IWDG_Refresh>
	buzz_startup_success();
 80026da:	f7fe fd2d 	bl	8001138 <buzz_startup_success>

	MRT_waitForLaunch();
 80026de:	f000 f8b1 	bl	8002844 <MRT_waitForLaunch>

	//TODO I2C SENSORS (lsm and lps) SOMETIMES DON'T WANT TO WORK ANYMORE -> NEED TO RESET THE POWER (Enter quick standByMode?)
	//check hardfault_handler

	//Initialize the os
	MX_FREERTOS_Init();
 80026e2:	f7fe ff5f 	bl	80015a4 <MX_FREERTOS_Init>

	//Starting the os
	println("\r\n/****Starting the OS****/\r\n");
 80026e6:	480b      	ldr	r0, [pc, #44]	; (8002714 <main+0x70>)
 80026e8:	f7fe fca0 	bl	800102c <println>
	osKernelStart();
 80026ec:	f00f ff5e 	bl	80125ac <osKernelStart>

	println("SOMETHING WENT HORRIBLY WRONG, WAITING FOR WATCH DOG RESET");
 80026f0:	4809      	ldr	r0, [pc, #36]	; (8002718 <main+0x74>)
 80026f2:	f7fe fc9b 	bl	800102c <println>
	HAL_IWDG_Refresh(&hiwdg);
 80026f6:	4806      	ldr	r0, [pc, #24]	; (8002710 <main+0x6c>)
 80026f8:	f008 fbcc 	bl	800ae94 <HAL_IWDG_Refresh>
	MRT_Deinit();
 80026fc:	f7fe fd5a 	bl	80011b4 <MRT_Deinit>
	while (1){}
 8002700:	e7fe      	b.n	8002700 <main+0x5c>
 8002702:	bf00      	nop
 8002704:	e0042000 	.word	0xe0042000
 8002708:	0801c5fc 	.word	0x0801c5fc
 800270c:	0801c610 	.word	0x0801c610
 8002710:	2000bb20 	.word	0x2000bb20
 8002714:	0801c630 	.word	0x0801c630
 8002718:	0801c650 	.word	0x0801c650

0800271c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b094      	sub	sp, #80	; 0x50
 8002720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002722:	f107 0320 	add.w	r3, r7, #32
 8002726:	2230      	movs	r2, #48	; 0x30
 8002728:	2100      	movs	r1, #0
 800272a:	4618      	mov	r0, r3
 800272c:	f014 fd56 	bl	80171dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002730:	f107 030c 	add.w	r3, r7, #12
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	60da      	str	r2, [r3, #12]
 800273e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002740:	2300      	movs	r3, #0
 8002742:	60bb      	str	r3, [r7, #8]
 8002744:	4b2c      	ldr	r3, [pc, #176]	; (80027f8 <SystemClock_Config+0xdc>)
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	4a2b      	ldr	r2, [pc, #172]	; (80027f8 <SystemClock_Config+0xdc>)
 800274a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800274e:	6413      	str	r3, [r2, #64]	; 0x40
 8002750:	4b29      	ldr	r3, [pc, #164]	; (80027f8 <SystemClock_Config+0xdc>)
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800275c:	2300      	movs	r3, #0
 800275e:	607b      	str	r3, [r7, #4]
 8002760:	4b26      	ldr	r3, [pc, #152]	; (80027fc <SystemClock_Config+0xe0>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a25      	ldr	r2, [pc, #148]	; (80027fc <SystemClock_Config+0xe0>)
 8002766:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	4b23      	ldr	r3, [pc, #140]	; (80027fc <SystemClock_Config+0xe0>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002774:	607b      	str	r3, [r7, #4]
 8002776:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002778:	2309      	movs	r3, #9
 800277a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800277c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002782:	2301      	movs	r3, #1
 8002784:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002786:	2302      	movs	r3, #2
 8002788:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800278a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800278e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002790:	2308      	movs	r3, #8
 8002792:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002794:	23b4      	movs	r3, #180	; 0xb4
 8002796:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002798:	2302      	movs	r3, #2
 800279a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800279c:	2303      	movs	r3, #3
 800279e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027a0:	f107 0320 	add.w	r3, r7, #32
 80027a4:	4618      	mov	r0, r3
 80027a6:	f008 fc13 	bl	800afd0 <HAL_RCC_OscConfig>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80027b0:	f000 f96e 	bl	8002a90 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80027b4:	f008 fbbc 	bl	800af30 <HAL_PWREx_EnableOverDrive>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80027be:	f000 f967 	bl	8002a90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027c2:	230f      	movs	r3, #15
 80027c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027c6:	2302      	movs	r3, #2
 80027c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80027d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80027da:	f107 030c 	add.w	r3, r7, #12
 80027de:	2105      	movs	r1, #5
 80027e0:	4618      	mov	r0, r3
 80027e2:	f008 fe6d 	bl	800b4c0 <HAL_RCC_ClockConfig>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80027ec:	f000 f950 	bl	8002a90 <Error_Handler>
  }
}
 80027f0:	bf00      	nop
 80027f2:	3750      	adds	r7, #80	; 0x50
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40007000 	.word	0x40007000

08002800 <MRT_STM_Init>:

/* USER CODE BEGIN 4 */

void MRT_STM_Init(void){
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
	HAL_Init();
 8002804:	f006 fb14 	bl	8008e30 <HAL_Init>
	SystemClock_Config();
 8002808:	f7ff ff88 	bl	800271c <SystemClock_Config>

	MX_GPIO_Init();
 800280c:	f7ff fc52 	bl	80020b4 <MX_GPIO_Init>
	MX_ADC1_Init();
 8002810:	f7fe fe1c 	bl	800144c <MX_ADC1_Init>
	MX_I2C2_Init();
 8002814:	f7ff fe0c 	bl	8002430 <MX_I2C2_Init>
	MX_I2C3_Init();
 8002818:	f7ff fe4a 	bl	80024b0 <MX_I2C3_Init>
	MX_SPI2_Init();
 800281c:	f000 fcb4 	bl	8003188 <MX_SPI2_Init>
	MX_SPI4_Init();
 8002820:	f000 fce8 	bl	80031f4 <MX_SPI4_Init>
	MX_SPI5_Init();
 8002824:	f000 fd1c 	bl	8003260 <MX_SPI5_Init>
	MX_TIM2_Init();
 8002828:	f000 ff6a 	bl	8003700 <MX_TIM2_Init>
	MX_UART8_Init();
 800282c:	f001 f836 	bl	800389c <MX_UART8_Init>
	MX_USART3_UART_Init();
 8002830:	f001 f85e 	bl	80038f0 <MX_USART3_UART_Init>
	MX_USART6_UART_Init();
 8002834:	f001 f886 	bl	8003944 <MX_USART6_UART_Init>
	MX_RTC_Init();
 8002838:	f000 f930 	bl	8002a9c <MX_RTC_Init>
	//MX_IWDG_Init(); TODO ADDED IN MRT_Init()
	MX_FATFS_Init();
 800283c:	f00c fa54 	bl	800ece8 <MX_FATFS_Init>
}
 8002840:	bf00      	nop
 8002842:	bd80      	pop	{r7, pc}

08002844 <MRT_waitForLaunch>:

void MRT_waitForLaunch(void){
 8002844:	b5b0      	push	{r4, r5, r7, lr}
 8002846:	b0c6      	sub	sp, #280	; 0x118
 8002848:	af04      	add	r7, sp, #16

	println("Waiting for launch command from ground station\r\n");
 800284a:	486f      	ldr	r0, [pc, #444]	; (8002a08 <MRT_waitForLaunch+0x1c4>)
 800284c:	f7fe fbee 	bl	800102c <println>

	char radio_buffer[RADIO_BUFFER_SIZE];
	radio_command cmd = -1;
 8002850:	23ff      	movs	r3, #255	; 0xff
 8002852:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

	//Poll propulsion until launch command sent
	while((XTEND_ || SRADIO_) && ejection_stage_flag == PAD){
 8002856:	e0a0      	b.n	800299a <MRT_waitForLaunch+0x156>
		HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 8002858:	2201      	movs	r2, #1
 800285a:	2108      	movs	r1, #8
 800285c:	486b      	ldr	r0, [pc, #428]	; (8002a0c <MRT_waitForLaunch+0x1c8>)
 800285e:	f007 fa35 	bl	8009ccc <HAL_GPIO_WritePin>

		HAL_IWDG_Refresh(&hiwdg);
 8002862:	486b      	ldr	r0, [pc, #428]	; (8002a10 <MRT_waitForLaunch+0x1cc>)
 8002864:	f008 fb16 	bl	800ae94 <HAL_IWDG_Refresh>

		//Get RTC time
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002868:	2200      	movs	r2, #0
 800286a:	496a      	ldr	r1, [pc, #424]	; (8002a14 <MRT_waitForLaunch+0x1d0>)
 800286c:	486a      	ldr	r0, [pc, #424]	; (8002a18 <MRT_waitForLaunch+0x1d4>)
 800286e:	f009 fb5f 	bl	800bf30 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002872:	2200      	movs	r2, #0
 8002874:	4969      	ldr	r1, [pc, #420]	; (8002a1c <MRT_waitForLaunch+0x1d8>)
 8002876:	4868      	ldr	r0, [pc, #416]	; (8002a18 <MRT_waitForLaunch+0x1d4>)
 8002878:	f009 fc5f 	bl	800c13a <HAL_RTC_GetDate>

		//Update global variables
		prev_hour = sTime.Hours;
 800287c:	4b65      	ldr	r3, [pc, #404]	; (8002a14 <MRT_waitForLaunch+0x1d0>)
 800287e:	781a      	ldrb	r2, [r3, #0]
 8002880:	4b67      	ldr	r3, [pc, #412]	; (8002a20 <MRT_waitForLaunch+0x1dc>)
 8002882:	701a      	strb	r2, [r3, #0]
		prev_min = sTime.Minutes;
 8002884:	4b63      	ldr	r3, [pc, #396]	; (8002a14 <MRT_waitForLaunch+0x1d0>)
 8002886:	785a      	ldrb	r2, [r3, #1]
 8002888:	4b66      	ldr	r3, [pc, #408]	; (8002a24 <MRT_waitForLaunch+0x1e0>)
 800288a:	701a      	strb	r2, [r3, #0]
		prev_sec = sTime.Seconds;
 800288c:	4b61      	ldr	r3, [pc, #388]	; (8002a14 <MRT_waitForLaunch+0x1d0>)
 800288e:	789a      	ldrb	r2, [r3, #2]
 8002890:	4b65      	ldr	r3, [pc, #404]	; (8002a28 <MRT_waitForLaunch+0x1e4>)
 8002892:	701a      	strb	r2, [r3, #0]
		if (__HAL_RTC_SHIFT_GET_FLAG(&hrtc, RTC_FLAG_SHPF)) prev_sec++; //Adjust following the user manual
 8002894:	4b60      	ldr	r3, [pc, #384]	; (8002a18 <MRT_waitForLaunch+0x1d4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d005      	beq.n	80028ae <MRT_waitForLaunch+0x6a>
 80028a2:	4b61      	ldr	r3, [pc, #388]	; (8002a28 <MRT_waitForLaunch+0x1e4>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	3301      	adds	r3, #1
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	4b5f      	ldr	r3, [pc, #380]	; (8002a28 <MRT_waitForLaunch+0x1e4>)
 80028ac:	701a      	strb	r2, [r3, #0]
		prev_subsec = sTime.SubSeconds;
 80028ae:	4b59      	ldr	r3, [pc, #356]	; (8002a14 <MRT_waitForLaunch+0x1d0>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4a5e      	ldr	r2, [pc, #376]	; (8002a2c <MRT_waitForLaunch+0x1e8>)
 80028b4:	6013      	str	r3, [r2, #0]

		//Save the RTC time
	    MRT_saveTotalTime();
 80028b6:	f001 fbad 	bl	8004014 <MRT_saveTotalTime>

		//Poll propulsion sensors
		MRT_pollPropulsion();
 80028ba:	f002 fe3b 	bl	8005534 <MRT_pollPropulsion>

		//Send propulsion data
		memset(radio_buffer, 0, RADIO_BUFFER_SIZE);
 80028be:	1d3b      	adds	r3, r7, #4
 80028c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028c4:	2100      	movs	r1, #0
 80028c6:	4618      	mov	r0, r3
 80028c8:	f014 fc88 	bl	80171dc <memset>
		sprintf(radio_buffer,"P,%.2f,%.2f, %i,E\r\n",transducer_voltage,thermocouple_temperature,(int) valve_status);
 80028cc:	4b58      	ldr	r3, [pc, #352]	; (8002a30 <MRT_waitForLaunch+0x1ec>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fd fe59 	bl	8000588 <__aeabi_f2d>
 80028d6:	4604      	mov	r4, r0
 80028d8:	460d      	mov	r5, r1
 80028da:	4b56      	ldr	r3, [pc, #344]	; (8002a34 <MRT_waitForLaunch+0x1f0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fd fe52 	bl	8000588 <__aeabi_f2d>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4953      	ldr	r1, [pc, #332]	; (8002a38 <MRT_waitForLaunch+0x1f4>)
 80028ea:	7809      	ldrb	r1, [r1, #0]
 80028ec:	1d38      	adds	r0, r7, #4
 80028ee:	9102      	str	r1, [sp, #8]
 80028f0:	e9cd 2300 	strd	r2, r3, [sp]
 80028f4:	4622      	mov	r2, r4
 80028f6:	462b      	mov	r3, r5
 80028f8:	4950      	ldr	r1, [pc, #320]	; (8002a3c <MRT_waitForLaunch+0x1f8>)
 80028fa:	f015 fced 	bl	80182d8 <siprintf>
		MRT_radio_tx(radio_buffer);
 80028fe:	1d3b      	adds	r3, r7, #4
 8002900:	4618      	mov	r0, r3
 8002902:	f004 ff89 	bl	8007818 <MRT_radio_tx>


		// Save to SD card
		#if SD_CARD_
		fres = sd_open_file(filename);
 8002906:	484e      	ldr	r0, [pc, #312]	; (8002a40 <MRT_waitForLaunch+0x1fc>)
 8002908:	f001 fe50 	bl	80045ac <sd_open_file>
 800290c:	4603      	mov	r3, r0
 800290e:	461a      	mov	r2, r3
 8002910:	4b4c      	ldr	r3, [pc, #304]	; (8002a44 <MRT_waitForLaunch+0x200>)
 8002912:	701a      	strb	r2, [r3, #0]
		MRT_formatPropulsion();
 8002914:	f002 fe46 	bl	80055a4 <MRT_formatPropulsion>
		sd_write(&fil, msg_buffer_pr);
 8002918:	494b      	ldr	r1, [pc, #300]	; (8002a48 <MRT_waitForLaunch+0x204>)
 800291a:	484c      	ldr	r0, [pc, #304]	; (8002a4c <MRT_waitForLaunch+0x208>)
 800291c:	f001 fe5e 	bl	80045dc <sd_write>
		f_close(&fil);
 8002920:	484a      	ldr	r0, [pc, #296]	; (8002a4c <MRT_waitForLaunch+0x208>)
 8002922:	f00f f9cf 	bl	8011cc4 <f_close>
		#endif


		//Check for launch command
		memset(radio_buffer, 0, RADIO_BUFFER_SIZE);
 8002926:	1d3b      	adds	r3, r7, #4
 8002928:	f44f 7280 	mov.w	r2, #256	; 0x100
 800292c:	2100      	movs	r1, #0
 800292e:	4618      	mov	r0, r3
 8002930:	f014 fc54 	bl	80171dc <memset>
		MRT_radio_rx(radio_buffer, 2, 0x500); //Timeout is about 1.2 sec (should be less than 5 sec)
 8002934:	1d3b      	adds	r3, r7, #4
 8002936:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800293a:	2102      	movs	r1, #2
 800293c:	4618      	mov	r0, r3
 800293e:	f004 ff8d 	bl	800785c <MRT_radio_rx>
		cmd = radio_parse_command(radio_buffer);
 8002942:	1d3b      	adds	r3, r7, #4
 8002944:	4618      	mov	r0, r3
 8002946:	f005 f837 	bl	80079b8 <radio_parse_command>
 800294a:	4603      	mov	r3, r0
 800294c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

		if (cmd == LAUNCH){
 8002950:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8002954:	2b01      	cmp	r3, #1
 8002956:	d10b      	bne.n	8002970 <MRT_waitForLaunch+0x12c>
			//Update ejection stage flag and save it
			ejection_stage_flag = BOOST;
 8002958:	4b3d      	ldr	r3, [pc, #244]	; (8002a50 <MRT_waitForLaunch+0x20c>)
 800295a:	2201      	movs	r2, #1
 800295c:	701a      	strb	r2, [r3, #0]
			rtc_bckp_reg_ejection_stage = BOOST;
 800295e:	4b3d      	ldr	r3, [pc, #244]	; (8002a54 <MRT_waitForLaunch+0x210>)
 8002960:	2201      	movs	r2, #1
 8002962:	601a      	str	r2, [r3, #0]
			ext_flash_ejection_stage = BOOST;
 8002964:	4b3c      	ldr	r3, [pc, #240]	; (8002a58 <MRT_waitForLaunch+0x214>)
 8002966:	2201      	movs	r2, #1
 8002968:	701a      	strb	r2, [r3, #0]
			MRT_saveFlagValue(FC_STATE_FLIGHT);
 800296a:	2004      	movs	r0, #4
 800296c:	f001 fac6 	bl	8003efc <MRT_saveFlagValue>
		}
		execute_parsed_command(cmd);
 8002970:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8002974:	4618      	mov	r0, r3
 8002976:	f005 f88b 	bl	8007a90 <execute_parsed_command>
		MRT_radio_send_ack(cmd);
 800297a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800297e:	4618      	mov	r0, r3
 8002980:	f005 f800 	bl	8007984 <MRT_radio_send_ack>

		HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8002984:	2200      	movs	r2, #0
 8002986:	2108      	movs	r1, #8
 8002988:	4820      	ldr	r0, [pc, #128]	; (8002a0c <MRT_waitForLaunch+0x1c8>)
 800298a:	f007 f99f 	bl	8009ccc <HAL_GPIO_WritePin>

		//Reset IWDG timer
		HAL_IWDG_Refresh(&hiwdg);
 800298e:	4820      	ldr	r0, [pc, #128]	; (8002a10 <MRT_waitForLaunch+0x1cc>)
 8002990:	f008 fa80 	bl	800ae94 <HAL_IWDG_Refresh>

		HAL_Delay(1000/PRE_APOGEE_SEND_FREQ);
 8002994:	2014      	movs	r0, #20
 8002996:	f006 fa8d 	bl	8008eb4 <HAL_Delay>
	while((XTEND_ || SRADIO_) && ejection_stage_flag == PAD){
 800299a:	4b2d      	ldr	r3, [pc, #180]	; (8002a50 <MRT_waitForLaunch+0x20c>)
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f43f af5a 	beq.w	8002858 <MRT_waitForLaunch+0x14>
	}


	//Todo to test ejection
	hlps22hh.getPressure();
 80029a4:	4b2d      	ldr	r3, [pc, #180]	; (8002a5c <MRT_waitForLaunch+0x218>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	4798      	blx	r3
	rtc_bckp_reg_alt_pad = MRT_getAltitude(hlps22hh.pressure_hPa);
 80029aa:	4b2c      	ldr	r3, [pc, #176]	; (8002a5c <MRT_waitForLaunch+0x218>)
 80029ac:	edd3 7a00 	vldr	s15, [r3]
 80029b0:	eeb0 0a67 	vmov.f32	s0, s15
 80029b4:	f001 f8d0 	bl	8003b58 <MRT_getAltitude>
 80029b8:	eef0 7a40 	vmov.f32	s15, s0
 80029bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029c0:	ee17 2a90 	vmov	r2, s15
 80029c4:	4b26      	ldr	r3, [pc, #152]	; (8002a60 <MRT_waitForLaunch+0x21c>)
 80029c6:	601a      	str	r2, [r3, #0]
	MRT_RTC_setBackupReg(FC_STATE_ALT_PAD, rtc_bckp_reg_alt_pad);
 80029c8:	4b25      	ldr	r3, [pc, #148]	; (8002a60 <MRT_waitForLaunch+0x21c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4619      	mov	r1, r3
 80029ce:	2009      	movs	r0, #9
 80029d0:	f000 fbbc 	bl	800314c <MRT_RTC_setBackupReg>
	rtc_bckp_reg_pad_time = 100*prev_min + prev_sec;
 80029d4:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <MRT_waitForLaunch+0x1e0>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	461a      	mov	r2, r3
 80029da:	2364      	movs	r3, #100	; 0x64
 80029dc:	fb03 f302 	mul.w	r3, r3, r2
 80029e0:	4a11      	ldr	r2, [pc, #68]	; (8002a28 <MRT_waitForLaunch+0x1e4>)
 80029e2:	7812      	ldrb	r2, [r2, #0]
 80029e4:	4413      	add	r3, r2
 80029e6:	461a      	mov	r2, r3
 80029e8:	4b1e      	ldr	r3, [pc, #120]	; (8002a64 <MRT_waitForLaunch+0x220>)
 80029ea:	601a      	str	r2, [r3, #0]
	MRT_RTC_setBackupReg(FC_PAD_TIME, rtc_bckp_reg_pad_time);
 80029ec:	4b1d      	ldr	r3, [pc, #116]	; (8002a64 <MRT_waitForLaunch+0x220>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4619      	mov	r1, r3
 80029f2:	200a      	movs	r0, #10
 80029f4:	f000 fbaa 	bl	800314c <MRT_RTC_setBackupReg>

	//Send acknowledgement
	MRT_radio_tx((char*) "LAUNCH COMMAND RECEIVED"); //TODO CHECK AT WHAT JASPER DID FOR ACK MESSAGES
 80029f8:	481b      	ldr	r0, [pc, #108]	; (8002a68 <MRT_waitForLaunch+0x224>)
 80029fa:	f004 ff0d 	bl	8007818 <MRT_radio_tx>
}
 80029fe:	bf00      	nop
 8002a00:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bdb0      	pop	{r4, r5, r7, pc}
 8002a08:	0801c68c 	.word	0x0801c68c
 8002a0c:	40020800 	.word	0x40020800
 8002a10:	2000bb20 	.word	0x2000bb20
 8002a14:	200002f0 	.word	0x200002f0
 8002a18:	2000bb2c 	.word	0x2000bb2c
 8002a1c:	20000304 	.word	0x20000304
 8002a20:	20000395 	.word	0x20000395
 8002a24:	20000396 	.word	0x20000396
 8002a28:	20000397 	.word	0x20000397
 8002a2c:	20000398 	.word	0x20000398
 8002a30:	2000cb38 	.word	0x2000cb38
 8002a34:	2000cb34 	.word	0x2000cb34
 8002a38:	2000cb32 	.word	0x2000cb32
 8002a3c:	0801c6c0 	.word	0x0801c6c0
 8002a40:	2000c4a8 	.word	0x2000c4a8
 8002a44:	2000c8a0 	.word	0x2000c8a0
 8002a48:	2000cb00 	.word	0x2000cb00
 8002a4c:	2000c8a4 	.word	0x2000c8a4
 8002a50:	20000394 	.word	0x20000394
 8002a54:	20000340 	.word	0x20000340
 8002a58:	20000384 	.word	0x20000384
 8002a5c:	200004f0 	.word	0x200004f0
 8002a60:	20000354 	.word	0x20000354
 8002a64:	20000358 	.word	0x20000358
 8002a68:	0801c6d4 	.word	0x0801c6d4

08002a6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a04      	ldr	r2, [pc, #16]	; (8002a8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d101      	bne.n	8002a82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002a7e:	f006 f9f9 	bl	8008e74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40001000 	.word	0x40001000

08002a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002a94:	b672      	cpsid	i
}
 8002a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a98:	e7fe      	b.n	8002a98 <Error_Handler+0x8>
	...

08002a9c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b090      	sub	sp, #64	; 0x40
 8002aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002aa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	605a      	str	r2, [r3, #4]
 8002aac:	609a      	str	r2, [r3, #8]
 8002aae:	60da      	str	r2, [r3, #12]
 8002ab0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8002ab6:	463b      	mov	r3, r7
 8002ab8:	2228      	movs	r2, #40	; 0x28
 8002aba:	2100      	movs	r1, #0
 8002abc:	4618      	mov	r0, r3
 8002abe:	f014 fb8d 	bl	80171dc <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002ac2:	4b4b      	ldr	r3, [pc, #300]	; (8002bf0 <MX_RTC_Init+0x154>)
 8002ac4:	4a4b      	ldr	r2, [pc, #300]	; (8002bf4 <MX_RTC_Init+0x158>)
 8002ac6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002ac8:	4b49      	ldr	r3, [pc, #292]	; (8002bf0 <MX_RTC_Init+0x154>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002ace:	4b48      	ldr	r3, [pc, #288]	; (8002bf0 <MX_RTC_Init+0x154>)
 8002ad0:	227f      	movs	r2, #127	; 0x7f
 8002ad2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002ad4:	4b46      	ldr	r3, [pc, #280]	; (8002bf0 <MX_RTC_Init+0x154>)
 8002ad6:	22ff      	movs	r2, #255	; 0xff
 8002ad8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002ada:	4b45      	ldr	r3, [pc, #276]	; (8002bf0 <MX_RTC_Init+0x154>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002ae0:	4b43      	ldr	r3, [pc, #268]	; (8002bf0 <MX_RTC_Init+0x154>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002ae6:	4b42      	ldr	r3, [pc, #264]	; (8002bf0 <MX_RTC_Init+0x154>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002aec:	4840      	ldr	r0, [pc, #256]	; (8002bf0 <MX_RTC_Init+0x154>)
 8002aee:	f009 f8d1 	bl	800bc94 <HAL_RTC_Init>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002af8:	f7ff ffca 	bl	8002a90 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b12:	2300      	movs	r3, #0
 8002b14:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002b16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4834      	ldr	r0, [pc, #208]	; (8002bf0 <MX_RTC_Init+0x154>)
 8002b20:	f009 f949 	bl	800bdb6 <HAL_RTC_SetTime>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8002b2a:	f7ff ffb1 	bl	8002a90 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002b34:	2301      	movs	r3, #1
 8002b36:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8002b40:	2300      	movs	r3, #0
 8002b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002b46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4828      	ldr	r0, [pc, #160]	; (8002bf0 <MX_RTC_Init+0x154>)
 8002b50:	f009 fa4c 	bl	800bfec <HAL_RTC_SetDate>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8002b5a:	f7ff ff99 	bl	8002a90 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002b62:	2300      	movs	r3, #0
 8002b64:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b72:	2300      	movs	r3, #0
 8002b74:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002b82:	2301      	movs	r3, #1
 8002b84:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002b88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002b8e:	463b      	mov	r3, r7
 8002b90:	2201      	movs	r2, #1
 8002b92:	4619      	mov	r1, r3
 8002b94:	4816      	ldr	r0, [pc, #88]	; (8002bf0 <MX_RTC_Init+0x154>)
 8002b96:	f009 fb1f 	bl	800c1d8 <HAL_RTC_SetAlarm_IT>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002ba0:	f7ff ff76 	bl	8002a90 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8002ba4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002baa:	463b      	mov	r3, r7
 8002bac:	2201      	movs	r2, #1
 8002bae:	4619      	mov	r1, r3
 8002bb0:	480f      	ldr	r0, [pc, #60]	; (8002bf0 <MX_RTC_Init+0x154>)
 8002bb2:	f009 fb11 	bl	800c1d8 <HAL_RTC_SetAlarm_IT>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8002bbc:	f7ff ff68 	bl	8002a90 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <MX_RTC_Init+0x154>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <MX_RTC_Init+0x154>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002bd0:	60da      	str	r2, [r3, #12]
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	4806      	ldr	r0, [pc, #24]	; (8002bf0 <MX_RTC_Init+0x154>)
 8002bd8:	f009 fd0c 	bl	800c5f4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <MX_RTC_Init+0x14a>
  {
    Error_Handler();
 8002be2:	f7ff ff55 	bl	8002a90 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002be6:	bf00      	nop
 8002be8:	3740      	adds	r7, #64	; 0x40
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	2000bb2c 	.word	0x2000bb2c
 8002bf4:	40002800 	.word	0x40002800

08002bf8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08e      	sub	sp, #56	; 0x38
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c00:	f107 0308 	add.w	r3, r7, #8
 8002c04:	2230      	movs	r2, #48	; 0x30
 8002c06:	2100      	movs	r1, #0
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f014 fae7 	bl	80171dc <memset>
  if(rtcHandle->Instance==RTC)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a14      	ldr	r2, [pc, #80]	; (8002c64 <HAL_RTC_MspInit+0x6c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d121      	bne.n	8002c5c <HAL_RTC_MspInit+0x64>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002c18:	2320      	movs	r3, #32
 8002c1a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002c1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c20:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c22:	f107 0308 	add.w	r3, r7, #8
 8002c26:	4618      	mov	r0, r3
 8002c28:	f008 fe76 	bl	800b918 <HAL_RCCEx_PeriphCLKConfig>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002c32:	f7ff ff2d 	bl	8002a90 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c36:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <HAL_RTC_MspInit+0x70>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 3, 0);
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2103      	movs	r1, #3
 8002c40:	2003      	movs	r0, #3
 8002c42:	f006 fe47 	bl	80098d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002c46:	2003      	movs	r0, #3
 8002c48:	f006 fe60 	bl	800990c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 3, 0);
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2103      	movs	r1, #3
 8002c50:	2029      	movs	r0, #41	; 0x29
 8002c52:	f006 fe3f 	bl	80098d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002c56:	2029      	movs	r0, #41	; 0x29
 8002c58:	f006 fe58 	bl	800990c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002c5c:	bf00      	nop
 8002c5e:	3738      	adds	r7, #56	; 0x38
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40002800 	.word	0x40002800
 8002c68:	42470e3c 	.word	0x42470e3c

08002c6c <MRT_rtc_Init>:


//**************************************************//
//FUNCTIONS

void MRT_rtc_Init(void){
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
	println("\r\nMRT RTC Init");
 8002c70:	4817      	ldr	r0, [pc, #92]	; (8002cd0 <MRT_rtc_Init+0x64>)
 8002c72:	f7fe f9db 	bl	800102c <println>

	print("\tSetting RTC to previous time...");
 8002c76:	4817      	ldr	r0, [pc, #92]	; (8002cd4 <MRT_rtc_Init+0x68>)
 8002c78:	f7fe f9f6 	bl	8001068 <print>
	MRT_set_rtc(prev_hour,prev_min,prev_sec);
 8002c7c:	4b16      	ldr	r3, [pc, #88]	; (8002cd8 <MRT_rtc_Init+0x6c>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	4a16      	ldr	r2, [pc, #88]	; (8002cdc <MRT_rtc_Init+0x70>)
 8002c82:	7811      	ldrb	r1, [r2, #0]
 8002c84:	4a16      	ldr	r2, [pc, #88]	; (8002ce0 <MRT_rtc_Init+0x74>)
 8002c86:	7812      	ldrb	r2, [r2, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f000 f8df 	bl	8002e4c <MRT_set_rtc>
	println("OK");
 8002c8e:	4815      	ldr	r0, [pc, #84]	; (8002ce4 <MRT_rtc_Init+0x78>)
 8002c90:	f7fe f9cc 	bl	800102c <println>

	HAL_Delay(2000); //To make sure that when you set the Alarm it doesn't go off automatically
 8002c94:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c98:	f006 f90c 	bl	8008eb4 <HAL_Delay>

	//TODO for some reason, both set_alarm need to be uncommented or commented together
	//They can't be used individually (or else we get a hardfault during external flash setup??)
	#if ALARM_A_ACTIVE
		print("\tSetting alarmA...");
 8002c9c:	4812      	ldr	r0, [pc, #72]	; (8002ce8 <MRT_rtc_Init+0x7c>)
 8002c9e:	f7fe f9e3 	bl	8001068 <print>
		MRT_set_alarmA(PRE_WHEN_SLEEP_TIME_HOURS, PRE_WHEN_SLEEP_TIME_MIN, PRE_WHEN_SLEEP_TIME_SEC);
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	211e      	movs	r1, #30
 8002ca6:	2004      	movs	r0, #4
 8002ca8:	f000 f916 	bl	8002ed8 <MRT_set_alarmA>
		println("OK");
 8002cac:	480d      	ldr	r0, [pc, #52]	; (8002ce4 <MRT_rtc_Init+0x78>)
 8002cae:	f7fe f9bd 	bl	800102c <println>
	#endif


	#if ALARM_B_ACTIVE
		print("\tSetting alarmB...");
 8002cb2:	480e      	ldr	r0, [pc, #56]	; (8002cec <MRT_rtc_Init+0x80>)
 8002cb4:	f7fe f9d8 	bl	8001068 <print>
		MRT_set_alarmB(POST_WHEN_SLEEP_TIME_HOURS, POST_WHEN_SLEEP_TIME_MIN, POST_WHEN_SLEEP_TIME_SEC);
 8002cb8:	2200      	movs	r2, #0
 8002cba:	211e      	movs	r1, #30
 8002cbc:	2012      	movs	r0, #18
 8002cbe:	f000 f951 	bl	8002f64 <MRT_set_alarmB>
		println("OK");
 8002cc2:	4808      	ldr	r0, [pc, #32]	; (8002ce4 <MRT_rtc_Init+0x78>)
 8002cc4:	f7fe f9b2 	bl	800102c <println>
	#endif

	MRT_clear_alarms_flags();
 8002cc8:	f000 f812 	bl	8002cf0 <MRT_clear_alarms_flags>
}
 8002ccc:	bf00      	nop
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	0801c6ec 	.word	0x0801c6ec
 8002cd4:	0801c6fc 	.word	0x0801c6fc
 8002cd8:	20000395 	.word	0x20000395
 8002cdc:	20000396 	.word	0x20000396
 8002ce0:	20000397 	.word	0x20000397
 8002ce4:	0801c720 	.word	0x0801c720
 8002ce8:	0801c724 	.word	0x0801c724
 8002cec:	0801c738 	.word	0x0801c738

08002cf0 <MRT_clear_alarms_flags>:



void MRT_clear_alarms_flags(void){
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	print("Clearing the flags\r\n");
 8002cf4:	482c      	ldr	r0, [pc, #176]	; (8002da8 <MRT_clear_alarms_flags+0xb8>)
 8002cf6:	f7fe f9b7 	bl	8001068 <print>

	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002cfa:	4b2c      	ldr	r3, [pc, #176]	; (8002dac <MRT_clear_alarms_flags+0xbc>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	22ca      	movs	r2, #202	; 0xca
 8002d00:	625a      	str	r2, [r3, #36]	; 0x24
 8002d02:	4b2a      	ldr	r3, [pc, #168]	; (8002dac <MRT_clear_alarms_flags+0xbc>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2253      	movs	r2, #83	; 0x53
 8002d08:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8002d0a:	e008      	b.n	8002d1e <MRT_clear_alarms_flags+0x2e>
		//print("Clearing alarm A flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002d0c:	4b27      	ldr	r3, [pc, #156]	; (8002dac <MRT_clear_alarms_flags+0xbc>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	4b25      	ldr	r3, [pc, #148]	; (8002dac <MRT_clear_alarms_flags+0xbc>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002d1c:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8002d1e:	4b23      	ldr	r3, [pc, #140]	; (8002dac <MRT_clear_alarms_flags+0xbc>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1ef      	bne.n	8002d0c <MRT_clear_alarms_flags+0x1c>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002d2c:	4b1f      	ldr	r3, [pc, #124]	; (8002dac <MRT_clear_alarms_flags+0xbc>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	22ff      	movs	r2, #255	; 0xff
 8002d32:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002d34:	4b1e      	ldr	r3, [pc, #120]	; (8002db0 <MRT_clear_alarms_flags+0xc0>)
 8002d36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d3a:	615a      	str	r2, [r3, #20]



  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002d3c:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <MRT_clear_alarms_flags+0xbc>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	22ca      	movs	r2, #202	; 0xca
 8002d42:	625a      	str	r2, [r3, #36]	; 0x24
 8002d44:	4b19      	ldr	r3, [pc, #100]	; (8002dac <MRT_clear_alarms_flags+0xbc>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2253      	movs	r2, #83	; 0x53
 8002d4a:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8002d4c:	e008      	b.n	8002d60 <MRT_clear_alarms_flags+0x70>
		//print("Clearing alarm B flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 8002d4e:	4b17      	ldr	r3, [pc, #92]	; (8002dac <MRT_clear_alarms_flags+0xbc>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	4b15      	ldr	r3, [pc, #84]	; (8002dac <MRT_clear_alarms_flags+0xbc>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002d5e:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8002d60:	4b12      	ldr	r3, [pc, #72]	; (8002dac <MRT_clear_alarms_flags+0xbc>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1ef      	bne.n	8002d4e <MRT_clear_alarms_flags+0x5e>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002d6e:	4b0f      	ldr	r3, [pc, #60]	; (8002dac <MRT_clear_alarms_flags+0xbc>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	22ff      	movs	r2, #255	; 0xff
 8002d74:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002d76:	4b0e      	ldr	r3, [pc, #56]	; (8002db0 <MRT_clear_alarms_flags+0xc0>)
 8002d78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d7c:	615a      	str	r2, [r3, #20]

	/* Clear the WU FLAG */
	//print("Clearing wake up flag\r\n");
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8002d7e:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <MRT_clear_alarms_flags+0xc4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a0c      	ldr	r2, [pc, #48]	; (8002db4 <MRT_clear_alarms_flags+0xc4>)
 8002d84:	f043 0304 	orr.w	r3, r3, #4
 8002d88:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//print("Clearing RTC wake up flag\r\n");
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8002d8a:	4b08      	ldr	r3, [pc, #32]	; (8002dac <MRT_clear_alarms_flags+0xbc>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	4b06      	ldr	r3, [pc, #24]	; (8002dac <MRT_clear_alarms_flags+0xbc>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002d9a:	60da      	str	r2, [r3, #12]
	__HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002d9c:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <MRT_clear_alarms_flags+0xc0>)
 8002d9e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002da2:	615a      	str	r2, [r3, #20]
}
 8002da4:	bf00      	nop
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	0801c74c 	.word	0x0801c74c
 8002dac:	2000bb2c 	.word	0x2000bb2c
 8002db0:	40013c00 	.word	0x40013c00
 8002db4:	40007000 	.word	0x40007000

08002db8 <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode(uint32_t seconds){
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08c      	sub	sp, #48	; 0x30
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
	print("\r\n/*****StandByMode*****/\r\n");
 8002dc0:	481e      	ldr	r0, [pc, #120]	; (8002e3c <MRT_StandByMode+0x84>)
 8002dc2:	f7fe f951 	bl	8001068 <print>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8002dc6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002dca:	f008 f873 	bl	800aeb4 <HAL_PWR_EnableWakeUpPin>


	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002dce:	4b1c      	ldr	r3, [pc, #112]	; (8002e40 <MRT_StandByMode+0x88>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	22ca      	movs	r2, #202	; 0xca
 8002dd4:	625a      	str	r2, [r3, #36]	; 0x24
 8002dd6:	4b1a      	ldr	r3, [pc, #104]	; (8002e40 <MRT_StandByMode+0x88>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2253      	movs	r2, #83	; 0x53
 8002ddc:	625a      	str	r2, [r3, #36]	; 0x24
	//Need this line or else alarm B will wake up the board immediately
	//Weird thing is this is not needed for alarm A
	__HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002dde:	4b18      	ldr	r3, [pc, #96]	; (8002e40 <MRT_StandByMode+0x88>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	4b16      	ldr	r3, [pc, #88]	; (8002e40 <MRT_StandByMode+0x88>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dec:	609a      	str	r2, [r3, #8]
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002dee:	4b14      	ldr	r3, [pc, #80]	; (8002e40 <MRT_StandByMode+0x88>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	22ff      	movs	r2, #255	; 0xff
 8002df4:	625a      	str	r2, [r3, #36]	; 0x24

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_clear_alarms_flags();
 8002df6:	f7ff ff7b 	bl	8002cf0 <MRT_clear_alarms_flags>

	//Setup RTC wake up timer
	println("Setting up RTCW");
 8002dfa:	4812      	ldr	r0, [pc, #72]	; (8002e44 <MRT_StandByMode+0x8c>)
 8002dfc:	f7fe f916 	bl	800102c <println>
	  Error_Handler();
	}
	*/

	char msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds",(int) seconds);
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	f107 030c 	add.w	r3, r7, #12
 8002e06:	4910      	ldr	r1, [pc, #64]	; (8002e48 <MRT_StandByMode+0x90>)
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f015 fa65 	bl	80182d8 <siprintf>
	println(msg);
 8002e0e:	f107 030c 	add.w	r3, r7, #12
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fe f90a 	bl	800102c <println>

	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8002e18:	2204      	movs	r2, #4
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4808      	ldr	r0, [pc, #32]	; (8002e40 <MRT_StandByMode+0x88>)
 8002e1e:	f009 fbe9 	bl	800c5f4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <MRT_StandByMode+0x74>
	{
	  Error_Handler();
 8002e28:	f7ff fe32 	bl	8002a90 <Error_Handler>
	}

	HAL_SuspendTick(); //System tick interrupt disabled (might not be necessary)
 8002e2c:	f000 fb9c 	bl	8003568 <HAL_SuspendTick>

	HAL_PWR_EnterSTANDBYMode();
 8002e30:	f008 f866 	bl	800af00 <HAL_PWR_EnterSTANDBYMode>
}
 8002e34:	bf00      	nop
 8002e36:	3730      	adds	r7, #48	; 0x30
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	0801c764 	.word	0x0801c764
 8002e40:	2000bb2c 	.word	0x2000bb2c
 8002e44:	0801c780 	.word	0x0801c780
 8002e48:	0801c790 	.word	0x0801c790

08002e4c <MRT_set_rtc>:




void MRT_set_rtc(uint8_t h, uint8_t m, uint8_t s){
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b088      	sub	sp, #32
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	71fb      	strb	r3, [r7, #7]
 8002e56:	460b      	mov	r3, r1
 8002e58:	71bb      	strb	r3, [r7, #6]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	717b      	strb	r3, [r7, #5]

	  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 4U, 0U);
	  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
	  */

	  sTime.Hours = int_to_hex_table[h];
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
 8002e60:	4a1a      	ldr	r2, [pc, #104]	; (8002ecc <MRT_set_rtc+0x80>)
 8002e62:	5cd3      	ldrb	r3, [r2, r3]
 8002e64:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = int_to_hex_table[m];
 8002e66:	79bb      	ldrb	r3, [r7, #6]
 8002e68:	4a18      	ldr	r2, [pc, #96]	; (8002ecc <MRT_set_rtc+0x80>)
 8002e6a:	5cd3      	ldrb	r3, [r2, r3]
 8002e6c:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = int_to_hex_table[s];
 8002e6e:	797b      	ldrb	r3, [r7, #5]
 8002e70:	4a16      	ldr	r2, [pc, #88]	; (8002ecc <MRT_set_rtc+0x80>)
 8002e72:	5cd3      	ldrb	r3, [r2, r3]
 8002e74:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002e7e:	f107 030c 	add.w	r3, r7, #12
 8002e82:	2201      	movs	r2, #1
 8002e84:	4619      	mov	r1, r3
 8002e86:	4812      	ldr	r0, [pc, #72]	; (8002ed0 <MRT_set_rtc+0x84>)
 8002e88:	f008 ff95 	bl	800bdb6 <HAL_RTC_SetTime>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <MRT_set_rtc+0x4a>
	  {
	    Error_Handler();
 8002e92:	f7ff fdfd 	bl	8002a90 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002e96:	4b0f      	ldr	r3, [pc, #60]	; (8002ed4 <MRT_set_rtc+0x88>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 8002e9c:	4b0d      	ldr	r3, [pc, #52]	; (8002ed4 <MRT_set_rtc+0x88>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 8002ea2:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <MRT_set_rtc+0x88>)
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 8002ea8:	4b0a      	ldr	r3, [pc, #40]	; (8002ed4 <MRT_set_rtc+0x88>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002eae:	2201      	movs	r2, #1
 8002eb0:	4908      	ldr	r1, [pc, #32]	; (8002ed4 <MRT_set_rtc+0x88>)
 8002eb2:	4807      	ldr	r0, [pc, #28]	; (8002ed0 <MRT_set_rtc+0x84>)
 8002eb4:	f009 f89a 	bl	800bfec <HAL_RTC_SetDate>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <MRT_set_rtc+0x76>
	  {
	    Error_Handler();
 8002ebe:	f7ff fde7 	bl	8002a90 <Error_Handler>
	  }
}
 8002ec2:	bf00      	nop
 8002ec4:	3720      	adds	r7, #32
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000000 	.word	0x20000000
 8002ed0:	2000bb2c 	.word	0x2000bb2c
 8002ed4:	20000304 	.word	0x20000304

08002ed8 <MRT_set_alarmA>:



void MRT_set_alarmA(uint8_t h, uint8_t m, uint8_t s){
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	71fb      	strb	r3, [r7, #7]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	71bb      	strb	r3, [r7, #6]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	4a1a      	ldr	r2, [pc, #104]	; (8002f58 <MRT_set_alarmA+0x80>)
 8002eee:	5cd2      	ldrb	r2, [r2, r3]
 8002ef0:	4b1a      	ldr	r3, [pc, #104]	; (8002f5c <MRT_set_alarmA+0x84>)
 8002ef2:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 8002ef4:	79bb      	ldrb	r3, [r7, #6]
 8002ef6:	4a18      	ldr	r2, [pc, #96]	; (8002f58 <MRT_set_alarmA+0x80>)
 8002ef8:	5cd2      	ldrb	r2, [r2, r3]
 8002efa:	4b18      	ldr	r3, [pc, #96]	; (8002f5c <MRT_set_alarmA+0x84>)
 8002efc:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 8002efe:	797b      	ldrb	r3, [r7, #5]
 8002f00:	4a15      	ldr	r2, [pc, #84]	; (8002f58 <MRT_set_alarmA+0x80>)
 8002f02:	5cd2      	ldrb	r2, [r2, r3]
 8002f04:	4b15      	ldr	r3, [pc, #84]	; (8002f5c <MRT_set_alarmA+0x84>)
 8002f06:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002f08:	4b14      	ldr	r3, [pc, #80]	; (8002f5c <MRT_set_alarmA+0x84>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002f0e:	4b13      	ldr	r3, [pc, #76]	; (8002f5c <MRT_set_alarmA+0x84>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002f14:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <MRT_set_alarmA+0x84>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002f1a:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <MRT_set_alarmA+0x84>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002f20:	4b0e      	ldr	r3, [pc, #56]	; (8002f5c <MRT_set_alarmA+0x84>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002f26:	4b0d      	ldr	r3, [pc, #52]	; (8002f5c <MRT_set_alarmA+0x84>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <MRT_set_alarmA+0x84>)
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 8002f34:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <MRT_set_alarmA+0x84>)
 8002f36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f3a:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	4907      	ldr	r1, [pc, #28]	; (8002f5c <MRT_set_alarmA+0x84>)
 8002f40:	4807      	ldr	r0, [pc, #28]	; (8002f60 <MRT_set_alarmA+0x88>)
 8002f42:	f009 f949 	bl	800c1d8 <HAL_RTC_SetAlarm_IT>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <MRT_set_alarmA+0x78>
	  {
	    Error_Handler();
 8002f4c:	f7ff fda0 	bl	8002a90 <Error_Handler>
	  }
}
 8002f50:	bf00      	nop
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	20000000 	.word	0x20000000
 8002f5c:	20000308 	.word	0x20000308
 8002f60:	2000bb2c 	.word	0x2000bb2c

08002f64 <MRT_set_alarmB>:



void MRT_set_alarmB(uint8_t h, uint8_t m, uint8_t s){
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	71fb      	strb	r3, [r7, #7]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	71bb      	strb	r3, [r7, #6]
 8002f72:	4613      	mov	r3, r2
 8002f74:	717b      	strb	r3, [r7, #5]
	  /** Enable the AlarmB
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 8002f76:	79fb      	ldrb	r3, [r7, #7]
 8002f78:	4a1a      	ldr	r2, [pc, #104]	; (8002fe4 <MRT_set_alarmB+0x80>)
 8002f7a:	5cd2      	ldrb	r2, [r2, r3]
 8002f7c:	4b1a      	ldr	r3, [pc, #104]	; (8002fe8 <MRT_set_alarmB+0x84>)
 8002f7e:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 8002f80:	79bb      	ldrb	r3, [r7, #6]
 8002f82:	4a18      	ldr	r2, [pc, #96]	; (8002fe4 <MRT_set_alarmB+0x80>)
 8002f84:	5cd2      	ldrb	r2, [r2, r3]
 8002f86:	4b18      	ldr	r3, [pc, #96]	; (8002fe8 <MRT_set_alarmB+0x84>)
 8002f88:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 8002f8a:	797b      	ldrb	r3, [r7, #5]
 8002f8c:	4a15      	ldr	r2, [pc, #84]	; (8002fe4 <MRT_set_alarmB+0x80>)
 8002f8e:	5cd2      	ldrb	r2, [r2, r3]
 8002f90:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <MRT_set_alarmB+0x84>)
 8002f92:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002f94:	4b14      	ldr	r3, [pc, #80]	; (8002fe8 <MRT_set_alarmB+0x84>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002f9a:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <MRT_set_alarmB+0x84>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002fa0:	4b11      	ldr	r3, [pc, #68]	; (8002fe8 <MRT_set_alarmB+0x84>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002fa6:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <MRT_set_alarmB+0x84>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002fac:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <MRT_set_alarmB+0x84>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002fb2:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <MRT_set_alarmB+0x84>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <MRT_set_alarmB+0x84>)
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_B;
 8002fc0:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <MRT_set_alarmB+0x84>)
 8002fc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fc6:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	4907      	ldr	r1, [pc, #28]	; (8002fe8 <MRT_set_alarmB+0x84>)
 8002fcc:	4807      	ldr	r0, [pc, #28]	; (8002fec <MRT_set_alarmB+0x88>)
 8002fce:	f009 f903 	bl	800c1d8 <HAL_RTC_SetAlarm_IT>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <MRT_set_alarmB+0x78>
	  {
	    Error_Handler();
 8002fd8:	f7ff fd5a 	bl	8002a90 <Error_Handler>
	  }
}
 8002fdc:	bf00      	nop
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	20000000 	.word	0x20000000
 8002fe8:	20000308 	.word	0x20000308
 8002fec:	2000bb2c 	.word	0x2000bb2c

08002ff0 <MRT_RTC_backup_regs_Init>:
							  &rtc_bckp_reg_alt_apogee, &rtc_bckp_reg_apogee_time, &rtc_bckp_reg_alt_main, &rtc_bckp_reg_main_time,
							  &rtc_bckp_reg_alt_landed, &rtc_bckp_reg_landed_time};


//Get all the backup regs values (initialization)
void MRT_RTC_backup_regs_Init(void){
 8002ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ff2:	b0cf      	sub	sp, #316	; 0x13c
 8002ff4:	af08      	add	r7, sp, #32
	for (int i = 0; i < NB_RTC_BCKP_REGS; i++){
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002ffc:	e011      	b.n	8003022 <MRT_RTC_backup_regs_Init+0x32>
		*rtc_bckp_regs[i] = MRT_RTC_getBackupReg(i);
 8002ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003002:	b2da      	uxtb	r2, r3
 8003004:	4924      	ldr	r1, [pc, #144]	; (8003098 <MRT_RTC_backup_regs_Init+0xa8>)
 8003006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800300a:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 800300e:	4610      	mov	r0, r2
 8003010:	f000 f87e 	bl	8003110 <MRT_RTC_getBackupReg>
 8003014:	4603      	mov	r3, r0
 8003016:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < NB_RTC_BCKP_REGS; i++){
 8003018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800301c:	3301      	adds	r3, #1
 800301e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003026:	2b12      	cmp	r3, #18
 8003028:	dde9      	ble.n	8002ffe <MRT_RTC_backup_regs_Init+0xe>
	}

	//TODO TESTING
	char buffer[256];
	sprintf(buffer, "ALTITUDES:\r\n\tGround: %i \tTime: %i"
 800302a:	4b1c      	ldr	r3, [pc, #112]	; (800309c <MRT_RTC_backup_regs_Init+0xac>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	4b1b      	ldr	r3, [pc, #108]	; (80030a0 <MRT_RTC_backup_regs_Init+0xb0>)
 8003032:	6819      	ldr	r1, [r3, #0]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	4b1b      	ldr	r3, [pc, #108]	; (80030a4 <MRT_RTC_backup_regs_Init+0xb4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a1b      	ldr	r2, [pc, #108]	; (80030a8 <MRT_RTC_backup_regs_Init+0xb8>)
 800303c:	6812      	ldr	r2, [r2, #0]
 800303e:	491b      	ldr	r1, [pc, #108]	; (80030ac <MRT_RTC_backup_regs_Init+0xbc>)
 8003040:	6809      	ldr	r1, [r1, #0]
 8003042:	481b      	ldr	r0, [pc, #108]	; (80030b0 <MRT_RTC_backup_regs_Init+0xc0>)
 8003044:	6800      	ldr	r0, [r0, #0]
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	4c1a      	ldr	r4, [pc, #104]	; (80030b4 <MRT_RTC_backup_regs_Init+0xc4>)
 800304a:	6824      	ldr	r4, [r4, #0]
 800304c:	4d1a      	ldr	r5, [pc, #104]	; (80030b8 <MRT_RTC_backup_regs_Init+0xc8>)
 800304e:	682d      	ldr	r5, [r5, #0]
 8003050:	4e1a      	ldr	r6, [pc, #104]	; (80030bc <MRT_RTC_backup_regs_Init+0xcc>)
 8003052:	6836      	ldr	r6, [r6, #0]
 8003054:	481a      	ldr	r0, [pc, #104]	; (80030c0 <MRT_RTC_backup_regs_Init+0xd0>)
 8003056:	6800      	ldr	r0, [r0, #0]
 8003058:	f107 0c14 	add.w	ip, r7, #20
 800305c:	9007      	str	r0, [sp, #28]
 800305e:	9606      	str	r6, [sp, #24]
 8003060:	9505      	str	r5, [sp, #20]
 8003062:	9404      	str	r4, [sp, #16]
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	9003      	str	r0, [sp, #12]
 8003068:	9102      	str	r1, [sp, #8]
 800306a:	9201      	str	r2, [sp, #4]
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	4914      	ldr	r1, [pc, #80]	; (80030c4 <MRT_RTC_backup_regs_Init+0xd4>)
 8003074:	4660      	mov	r0, ip
 8003076:	f015 f92f 	bl	80182d8 <siprintf>
					"\r\n\tMain: %i \tTime: %i"
					"\r\n\tLanded: %i \tTime: %i\r\n",
			rtc_bckp_reg_alt_pad, rtc_bckp_reg_pad_time,  rtc_bckp_reg_alt_true_apogee, rtc_bckp_reg_true_apogee_time,
			rtc_bckp_reg_alt_apogee, rtc_bckp_reg_apogee_time, rtc_bckp_reg_alt_main, rtc_bckp_reg_main_time,
			rtc_bckp_reg_alt_landed, rtc_bckp_reg_landed_time);
	print(buffer);
 800307a:	f107 0314 	add.w	r3, r7, #20
 800307e:	4618      	mov	r0, r3
 8003080:	f7fd fff2 	bl	8001068 <print>

	HAL_Delay(2000);
 8003084:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003088:	f005 ff14 	bl	8008eb4 <HAL_Delay>
}
 800308c:	bf00      	nop
 800308e:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8003092:	46bd      	mov	sp, r7
 8003094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003096:	bf00      	nop
 8003098:	2000003c 	.word	0x2000003c
 800309c:	20000354 	.word	0x20000354
 80030a0:	20000358 	.word	0x20000358
 80030a4:	2000035c 	.word	0x2000035c
 80030a8:	20000360 	.word	0x20000360
 80030ac:	20000364 	.word	0x20000364
 80030b0:	20000368 	.word	0x20000368
 80030b4:	2000036c 	.word	0x2000036c
 80030b8:	20000370 	.word	0x20000370
 80030bc:	20000374 	.word	0x20000374
 80030c0:	20000378 	.word	0x20000378
 80030c4:	0801c7b0 	.word	0x0801c7b0

080030c8 <MRT_RTC_clearBackupRegs>:

// initializes backup register values to zero
void MRT_RTC_clearBackupRegs(void) {
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 80030ce:	4b0f      	ldr	r3, [pc, #60]	; (800310c <MRT_RTC_clearBackupRegs+0x44>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	22ca      	movs	r2, #202	; 0xca
 80030d4:	625a      	str	r2, [r3, #36]	; 0x24
 80030d6:	4b0d      	ldr	r3, [pc, #52]	; (800310c <MRT_RTC_clearBackupRegs+0x44>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2253      	movs	r2, #83	; 0x53
 80030dc:	625a      	str	r2, [r3, #36]	; 0x24
	for (uint8_t i = 0; i < 20; i++) {
 80030de:	2300      	movs	r3, #0
 80030e0:	71fb      	strb	r3, [r7, #7]
 80030e2:	e008      	b.n	80030f6 <MRT_RTC_clearBackupRegs+0x2e>
		HAL_RTCEx_BKUPWrite(&hrtc, i, 0);	// set all backup register values to zero
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	2200      	movs	r2, #0
 80030e8:	4619      	mov	r1, r3
 80030ea:	4808      	ldr	r0, [pc, #32]	; (800310c <MRT_RTC_clearBackupRegs+0x44>)
 80030ec:	f009 fbbe 	bl	800c86c <HAL_RTCEx_BKUPWrite>
	for (uint8_t i = 0; i < 20; i++) {
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	3301      	adds	r3, #1
 80030f4:	71fb      	strb	r3, [r7, #7]
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	2b13      	cmp	r3, #19
 80030fa:	d9f3      	bls.n	80030e4 <MRT_RTC_clearBackupRegs+0x1c>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 80030fc:	4b03      	ldr	r3, [pc, #12]	; (800310c <MRT_RTC_clearBackupRegs+0x44>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	22ff      	movs	r2, #255	; 0xff
 8003102:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003104:	bf00      	nop
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	2000bb2c 	.word	0x2000bb2c

08003110 <MRT_RTC_getBackupReg>:

// gets the backup register value for the specified state
uint32_t MRT_RTC_getBackupReg(rtc_backup_reg state) {
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	71fb      	strb	r3, [r7, #7]
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 800311a:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <MRT_RTC_getBackupReg+0x38>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	22ca      	movs	r2, #202	; 0xca
 8003120:	625a      	str	r2, [r3, #36]	; 0x24
 8003122:	4b09      	ldr	r3, [pc, #36]	; (8003148 <MRT_RTC_getBackupReg+0x38>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2253      	movs	r2, #83	; 0x53
 8003128:	625a      	str	r2, [r3, #36]	; 0x24
	uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, (uint32_t) state);
 800312a:	79fb      	ldrb	r3, [r7, #7]
 800312c:	4619      	mov	r1, r3
 800312e:	4806      	ldr	r0, [pc, #24]	; (8003148 <MRT_RTC_getBackupReg+0x38>)
 8003130:	f009 fbb6 	bl	800c8a0 <HAL_RTCEx_BKUPRead>
 8003134:	60f8      	str	r0, [r7, #12]
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8003136:	4b04      	ldr	r3, [pc, #16]	; (8003148 <MRT_RTC_getBackupReg+0x38>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	22ff      	movs	r2, #255	; 0xff
 800313c:	625a      	str	r2, [r3, #36]	; 0x24
	return val;
 800313e:	68fb      	ldr	r3, [r7, #12]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	2000bb2c 	.word	0x2000bb2c

0800314c <MRT_RTC_setBackupReg>:

// sets the backup register value for the specified state
void MRT_RTC_setBackupReg(rtc_backup_reg state, uint32_t value) {
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	6039      	str	r1, [r7, #0]
 8003156:	71fb      	strb	r3, [r7, #7]
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8003158:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <MRT_RTC_setBackupReg+0x38>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	22ca      	movs	r2, #202	; 0xca
 800315e:	625a      	str	r2, [r3, #36]	; 0x24
 8003160:	4b08      	ldr	r3, [pc, #32]	; (8003184 <MRT_RTC_setBackupReg+0x38>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2253      	movs	r2, #83	; 0x53
 8003166:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RTCEx_BKUPWrite(&hrtc, (uint32_t) state, value);
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	4619      	mov	r1, r3
 800316e:	4805      	ldr	r0, [pc, #20]	; (8003184 <MRT_RTC_setBackupReg+0x38>)
 8003170:	f009 fb7c 	bl	800c86c <HAL_RTCEx_BKUPWrite>
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8003174:	4b03      	ldr	r3, [pc, #12]	; (8003184 <MRT_RTC_setBackupReg+0x38>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	22ff      	movs	r2, #255	; 0xff
 800317a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800317c:	bf00      	nop
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	2000bb2c 	.word	0x2000bb2c

08003188 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800318c:	4b17      	ldr	r3, [pc, #92]	; (80031ec <MX_SPI2_Init+0x64>)
 800318e:	4a18      	ldr	r2, [pc, #96]	; (80031f0 <MX_SPI2_Init+0x68>)
 8003190:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003192:	4b16      	ldr	r3, [pc, #88]	; (80031ec <MX_SPI2_Init+0x64>)
 8003194:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003198:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800319a:	4b14      	ldr	r3, [pc, #80]	; (80031ec <MX_SPI2_Init+0x64>)
 800319c:	2200      	movs	r2, #0
 800319e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80031a0:	4b12      	ldr	r3, [pc, #72]	; (80031ec <MX_SPI2_Init+0x64>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031a6:	4b11      	ldr	r3, [pc, #68]	; (80031ec <MX_SPI2_Init+0x64>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031ac:	4b0f      	ldr	r3, [pc, #60]	; (80031ec <MX_SPI2_Init+0x64>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80031b2:	4b0e      	ldr	r3, [pc, #56]	; (80031ec <MX_SPI2_Init+0x64>)
 80031b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031ba:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <MX_SPI2_Init+0x64>)
 80031bc:	2200      	movs	r2, #0
 80031be:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031c0:	4b0a      	ldr	r3, [pc, #40]	; (80031ec <MX_SPI2_Init+0x64>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80031c6:	4b09      	ldr	r3, [pc, #36]	; (80031ec <MX_SPI2_Init+0x64>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031cc:	4b07      	ldr	r3, [pc, #28]	; (80031ec <MX_SPI2_Init+0x64>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80031d2:	4b06      	ldr	r3, [pc, #24]	; (80031ec <MX_SPI2_Init+0x64>)
 80031d4:	220a      	movs	r2, #10
 80031d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80031d8:	4804      	ldr	r0, [pc, #16]	; (80031ec <MX_SPI2_Init+0x64>)
 80031da:	f009 fb79 	bl	800c8d0 <HAL_SPI_Init>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80031e4:	f7ff fc54 	bl	8002a90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80031e8:	bf00      	nop
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	2000bb4c 	.word	0x2000bb4c
 80031f0:	40003800 	.word	0x40003800

080031f4 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80031f8:	4b17      	ldr	r3, [pc, #92]	; (8003258 <MX_SPI4_Init+0x64>)
 80031fa:	4a18      	ldr	r2, [pc, #96]	; (800325c <MX_SPI4_Init+0x68>)
 80031fc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80031fe:	4b16      	ldr	r3, [pc, #88]	; (8003258 <MX_SPI4_Init+0x64>)
 8003200:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003204:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003206:	4b14      	ldr	r3, [pc, #80]	; (8003258 <MX_SPI4_Init+0x64>)
 8003208:	2200      	movs	r2, #0
 800320a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800320c:	4b12      	ldr	r3, [pc, #72]	; (8003258 <MX_SPI4_Init+0x64>)
 800320e:	2200      	movs	r2, #0
 8003210:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003212:	4b11      	ldr	r3, [pc, #68]	; (8003258 <MX_SPI4_Init+0x64>)
 8003214:	2200      	movs	r2, #0
 8003216:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003218:	4b0f      	ldr	r3, [pc, #60]	; (8003258 <MX_SPI4_Init+0x64>)
 800321a:	2200      	movs	r2, #0
 800321c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800321e:	4b0e      	ldr	r3, [pc, #56]	; (8003258 <MX_SPI4_Init+0x64>)
 8003220:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003224:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003226:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <MX_SPI4_Init+0x64>)
 8003228:	2200      	movs	r2, #0
 800322a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800322c:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <MX_SPI4_Init+0x64>)
 800322e:	2200      	movs	r2, #0
 8003230:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003232:	4b09      	ldr	r3, [pc, #36]	; (8003258 <MX_SPI4_Init+0x64>)
 8003234:	2200      	movs	r2, #0
 8003236:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003238:	4b07      	ldr	r3, [pc, #28]	; (8003258 <MX_SPI4_Init+0x64>)
 800323a:	2200      	movs	r2, #0
 800323c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 800323e:	4b06      	ldr	r3, [pc, #24]	; (8003258 <MX_SPI4_Init+0x64>)
 8003240:	220a      	movs	r2, #10
 8003242:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003244:	4804      	ldr	r0, [pc, #16]	; (8003258 <MX_SPI4_Init+0x64>)
 8003246:	f009 fb43 	bl	800c8d0 <HAL_SPI_Init>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8003250:	f7ff fc1e 	bl	8002a90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003254:	bf00      	nop
 8003256:	bd80      	pop	{r7, pc}
 8003258:	2000bbfc 	.word	0x2000bbfc
 800325c:	40013400 	.word	0x40013400

08003260 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8003264:	4b17      	ldr	r3, [pc, #92]	; (80032c4 <MX_SPI5_Init+0x64>)
 8003266:	4a18      	ldr	r2, [pc, #96]	; (80032c8 <MX_SPI5_Init+0x68>)
 8003268:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800326a:	4b16      	ldr	r3, [pc, #88]	; (80032c4 <MX_SPI5_Init+0x64>)
 800326c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003270:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003272:	4b14      	ldr	r3, [pc, #80]	; (80032c4 <MX_SPI5_Init+0x64>)
 8003274:	2200      	movs	r2, #0
 8003276:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003278:	4b12      	ldr	r3, [pc, #72]	; (80032c4 <MX_SPI5_Init+0x64>)
 800327a:	2200      	movs	r2, #0
 800327c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800327e:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <MX_SPI5_Init+0x64>)
 8003280:	2200      	movs	r2, #0
 8003282:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003284:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <MX_SPI5_Init+0x64>)
 8003286:	2200      	movs	r2, #0
 8003288:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800328a:	4b0e      	ldr	r3, [pc, #56]	; (80032c4 <MX_SPI5_Init+0x64>)
 800328c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003290:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003292:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <MX_SPI5_Init+0x64>)
 8003294:	2200      	movs	r2, #0
 8003296:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003298:	4b0a      	ldr	r3, [pc, #40]	; (80032c4 <MX_SPI5_Init+0x64>)
 800329a:	2200      	movs	r2, #0
 800329c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800329e:	4b09      	ldr	r3, [pc, #36]	; (80032c4 <MX_SPI5_Init+0x64>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032a4:	4b07      	ldr	r3, [pc, #28]	; (80032c4 <MX_SPI5_Init+0x64>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80032aa:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <MX_SPI5_Init+0x64>)
 80032ac:	220a      	movs	r2, #10
 80032ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80032b0:	4804      	ldr	r0, [pc, #16]	; (80032c4 <MX_SPI5_Init+0x64>)
 80032b2:	f009 fb0d 	bl	800c8d0 <HAL_SPI_Init>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80032bc:	f7ff fbe8 	bl	8002a90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80032c0:	bf00      	nop
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	2000bba4 	.word	0x2000bba4
 80032c8:	40015000 	.word	0x40015000

080032cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08e      	sub	sp, #56	; 0x38
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a4c      	ldr	r2, [pc, #304]	; (800341c <HAL_SPI_MspInit+0x150>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d12d      	bne.n	800334a <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	623b      	str	r3, [r7, #32]
 80032f2:	4b4b      	ldr	r3, [pc, #300]	; (8003420 <HAL_SPI_MspInit+0x154>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	4a4a      	ldr	r2, [pc, #296]	; (8003420 <HAL_SPI_MspInit+0x154>)
 80032f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032fc:	6413      	str	r3, [r2, #64]	; 0x40
 80032fe:	4b48      	ldr	r3, [pc, #288]	; (8003420 <HAL_SPI_MspInit+0x154>)
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003306:	623b      	str	r3, [r7, #32]
 8003308:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800330a:	2300      	movs	r3, #0
 800330c:	61fb      	str	r3, [r7, #28]
 800330e:	4b44      	ldr	r3, [pc, #272]	; (8003420 <HAL_SPI_MspInit+0x154>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	4a43      	ldr	r2, [pc, #268]	; (8003420 <HAL_SPI_MspInit+0x154>)
 8003314:	f043 0302 	orr.w	r3, r3, #2
 8003318:	6313      	str	r3, [r2, #48]	; 0x30
 800331a:	4b41      	ldr	r3, [pc, #260]	; (8003420 <HAL_SPI_MspInit+0x154>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	61fb      	str	r3, [r7, #28]
 8003324:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003326:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800332a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332c:	2302      	movs	r3, #2
 800332e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003330:	2300      	movs	r3, #0
 8003332:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003334:	2303      	movs	r3, #3
 8003336:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003338:	2305      	movs	r3, #5
 800333a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800333c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003340:	4619      	mov	r1, r3
 8003342:	4838      	ldr	r0, [pc, #224]	; (8003424 <HAL_SPI_MspInit+0x158>)
 8003344:	f006 fafe 	bl	8009944 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8003348:	e064      	b.n	8003414 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI4)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a36      	ldr	r2, [pc, #216]	; (8003428 <HAL_SPI_MspInit+0x15c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d12d      	bne.n	80033b0 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003354:	2300      	movs	r3, #0
 8003356:	61bb      	str	r3, [r7, #24]
 8003358:	4b31      	ldr	r3, [pc, #196]	; (8003420 <HAL_SPI_MspInit+0x154>)
 800335a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335c:	4a30      	ldr	r2, [pc, #192]	; (8003420 <HAL_SPI_MspInit+0x154>)
 800335e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003362:	6453      	str	r3, [r2, #68]	; 0x44
 8003364:	4b2e      	ldr	r3, [pc, #184]	; (8003420 <HAL_SPI_MspInit+0x154>)
 8003366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003368:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800336c:	61bb      	str	r3, [r7, #24]
 800336e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	4b2a      	ldr	r3, [pc, #168]	; (8003420 <HAL_SPI_MspInit+0x154>)
 8003376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003378:	4a29      	ldr	r2, [pc, #164]	; (8003420 <HAL_SPI_MspInit+0x154>)
 800337a:	f043 0310 	orr.w	r3, r3, #16
 800337e:	6313      	str	r3, [r2, #48]	; 0x30
 8003380:	4b27      	ldr	r3, [pc, #156]	; (8003420 <HAL_SPI_MspInit+0x154>)
 8003382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800338c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003392:	2302      	movs	r3, #2
 8003394:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003396:	2300      	movs	r3, #0
 8003398:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800339a:	2303      	movs	r3, #3
 800339c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800339e:	2305      	movs	r3, #5
 80033a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033a6:	4619      	mov	r1, r3
 80033a8:	4820      	ldr	r0, [pc, #128]	; (800342c <HAL_SPI_MspInit+0x160>)
 80033aa:	f006 facb 	bl	8009944 <HAL_GPIO_Init>
}
 80033ae:	e031      	b.n	8003414 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI5)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a1e      	ldr	r2, [pc, #120]	; (8003430 <HAL_SPI_MspInit+0x164>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d12c      	bne.n	8003414 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	613b      	str	r3, [r7, #16]
 80033be:	4b18      	ldr	r3, [pc, #96]	; (8003420 <HAL_SPI_MspInit+0x154>)
 80033c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c2:	4a17      	ldr	r2, [pc, #92]	; (8003420 <HAL_SPI_MspInit+0x154>)
 80033c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033c8:	6453      	str	r3, [r2, #68]	; 0x44
 80033ca:	4b15      	ldr	r3, [pc, #84]	; (8003420 <HAL_SPI_MspInit+0x154>)
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033d2:	613b      	str	r3, [r7, #16]
 80033d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	4b11      	ldr	r3, [pc, #68]	; (8003420 <HAL_SPI_MspInit+0x154>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	4a10      	ldr	r2, [pc, #64]	; (8003420 <HAL_SPI_MspInit+0x154>)
 80033e0:	f043 0320 	orr.w	r3, r3, #32
 80033e4:	6313      	str	r3, [r2, #48]	; 0x30
 80033e6:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <HAL_SPI_MspInit+0x154>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	f003 0320 	and.w	r3, r3, #32
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80033f2:	f44f 7360 	mov.w	r3, #896	; 0x380
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f8:	2302      	movs	r3, #2
 80033fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033fc:	2301      	movs	r3, #1
 80033fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003400:	2303      	movs	r3, #3
 8003402:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003404:	2305      	movs	r3, #5
 8003406:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800340c:	4619      	mov	r1, r3
 800340e:	4809      	ldr	r0, [pc, #36]	; (8003434 <HAL_SPI_MspInit+0x168>)
 8003410:	f006 fa98 	bl	8009944 <HAL_GPIO_Init>
}
 8003414:	bf00      	nop
 8003416:	3738      	adds	r7, #56	; 0x38
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40003800 	.word	0x40003800
 8003420:	40023800 	.word	0x40023800
 8003424:	40020400 	.word	0x40020400
 8003428:	40013400 	.word	0x40013400
 800342c:	40021000 	.word	0x40021000
 8003430:	40015000 	.word	0x40015000
 8003434:	40021400 	.word	0x40021400

08003438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800343e:	2300      	movs	r3, #0
 8003440:	607b      	str	r3, [r7, #4]
 8003442:	4b1b      	ldr	r3, [pc, #108]	; (80034b0 <HAL_MspInit+0x78>)
 8003444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003446:	4a1a      	ldr	r2, [pc, #104]	; (80034b0 <HAL_MspInit+0x78>)
 8003448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800344c:	6453      	str	r3, [r2, #68]	; 0x44
 800344e:	4b18      	ldr	r3, [pc, #96]	; (80034b0 <HAL_MspInit+0x78>)
 8003450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003456:	607b      	str	r3, [r7, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800345a:	2300      	movs	r3, #0
 800345c:	603b      	str	r3, [r7, #0]
 800345e:	4b14      	ldr	r3, [pc, #80]	; (80034b0 <HAL_MspInit+0x78>)
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	4a13      	ldr	r2, [pc, #76]	; (80034b0 <HAL_MspInit+0x78>)
 8003464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003468:	6413      	str	r3, [r2, #64]	; 0x40
 800346a:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <HAL_MspInit+0x78>)
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003472:	603b      	str	r3, [r7, #0]
 8003474:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 5, 0);
 8003476:	2200      	movs	r2, #0
 8003478:	2105      	movs	r1, #5
 800347a:	f06f 0009 	mvn.w	r0, #9
 800347e:	f006 fa29 	bl	80098d4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 15, 0);
 8003482:	2200      	movs	r2, #0
 8003484:	210f      	movs	r1, #15
 8003486:	f06f 0004 	mvn.w	r0, #4
 800348a:	f006 fa23 	bl	80098d4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 800348e:	2200      	movs	r2, #0
 8003490:	2105      	movs	r1, #5
 8003492:	f06f 0003 	mvn.w	r0, #3
 8003496:	f006 fa1d 	bl	80098d4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800349a:	2200      	movs	r2, #0
 800349c:	210f      	movs	r1, #15
 800349e:	f06f 0001 	mvn.w	r0, #1
 80034a2:	f006 fa17 	bl	80098d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034a6:	bf00      	nop
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40023800 	.word	0x40023800

080034b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08c      	sub	sp, #48	; 0x30
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80034bc:	2300      	movs	r3, #0
 80034be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80034c0:	2300      	movs	r3, #0
 80034c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80034c4:	2200      	movs	r2, #0
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	2036      	movs	r0, #54	; 0x36
 80034ca:	f006 fa03 	bl	80098d4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80034ce:	2036      	movs	r0, #54	; 0x36
 80034d0:	f006 fa1c 	bl	800990c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80034d4:	2300      	movs	r3, #0
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	4b1f      	ldr	r3, [pc, #124]	; (8003558 <HAL_InitTick+0xa4>)
 80034da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034dc:	4a1e      	ldr	r2, [pc, #120]	; (8003558 <HAL_InitTick+0xa4>)
 80034de:	f043 0310 	orr.w	r3, r3, #16
 80034e2:	6413      	str	r3, [r2, #64]	; 0x40
 80034e4:	4b1c      	ldr	r3, [pc, #112]	; (8003558 <HAL_InitTick+0xa4>)
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	f003 0310 	and.w	r3, r3, #16
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80034f0:	f107 0210 	add.w	r2, r7, #16
 80034f4:	f107 0314 	add.w	r3, r7, #20
 80034f8:	4611      	mov	r1, r2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f008 f9da 	bl	800b8b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003500:	f008 f9b0 	bl	800b864 <HAL_RCC_GetPCLK1Freq>
 8003504:	4603      	mov	r3, r0
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800350a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350c:	4a13      	ldr	r2, [pc, #76]	; (800355c <HAL_InitTick+0xa8>)
 800350e:	fba2 2303 	umull	r2, r3, r2, r3
 8003512:	0c9b      	lsrs	r3, r3, #18
 8003514:	3b01      	subs	r3, #1
 8003516:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003518:	4b11      	ldr	r3, [pc, #68]	; (8003560 <HAL_InitTick+0xac>)
 800351a:	4a12      	ldr	r2, [pc, #72]	; (8003564 <HAL_InitTick+0xb0>)
 800351c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800351e:	4b10      	ldr	r3, [pc, #64]	; (8003560 <HAL_InitTick+0xac>)
 8003520:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003524:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003526:	4a0e      	ldr	r2, [pc, #56]	; (8003560 <HAL_InitTick+0xac>)
 8003528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800352c:	4b0c      	ldr	r3, [pc, #48]	; (8003560 <HAL_InitTick+0xac>)
 800352e:	2200      	movs	r2, #0
 8003530:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003532:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_InitTick+0xac>)
 8003534:	2200      	movs	r2, #0
 8003536:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003538:	4809      	ldr	r0, [pc, #36]	; (8003560 <HAL_InitTick+0xac>)
 800353a:	f009 ff71 	bl	800d420 <HAL_TIM_Base_Init>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d104      	bne.n	800354e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003544:	4806      	ldr	r0, [pc, #24]	; (8003560 <HAL_InitTick+0xac>)
 8003546:	f009 ffbb 	bl	800d4c0 <HAL_TIM_Base_Start_IT>
 800354a:	4603      	mov	r3, r0
 800354c:	e000      	b.n	8003550 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
}
 8003550:	4618      	mov	r0, r3
 8003552:	3730      	adds	r7, #48	; 0x30
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40023800 	.word	0x40023800
 800355c:	431bde83 	.word	0x431bde83
 8003560:	2000bc54 	.word	0x2000bc54
 8003564:	40001000 	.word	0x40001000

08003568 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM6 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  /* Disable TIM6 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim6, TIM_IT_UPDATE);
 800356c:	4b06      	ldr	r3, [pc, #24]	; (8003588 <HAL_SuspendTick+0x20>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	4b05      	ldr	r3, [pc, #20]	; (8003588 <HAL_SuspendTick+0x20>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0201 	bic.w	r2, r2, #1
 800357a:	60da      	str	r2, [r3, #12]
}
 800357c:	bf00      	nop
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	2000bc54 	.word	0x2000bc54

0800358c <__NVIC_SystemReset>:
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003590:	f3bf 8f4f 	dsb	sy
}
 8003594:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003596:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <__NVIC_SystemReset+0x24>)
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800359e:	4904      	ldr	r1, [pc, #16]	; (80035b0 <__NVIC_SystemReset+0x24>)
 80035a0:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <__NVIC_SystemReset+0x28>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80035a6:	f3bf 8f4f 	dsb	sy
}
 80035aa:	bf00      	nop
    __NOP();
 80035ac:	bf00      	nop
 80035ae:	e7fd      	b.n	80035ac <__NVIC_SystemReset+0x20>
 80035b0:	e000ed00 	.word	0xe000ed00
 80035b4:	05fa0004 	.word	0x05fa0004

080035b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035bc:	e7fe      	b.n	80035bc <NMI_Handler+0x4>
	...

080035c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	println((char*) "Hardfault: Going into standByMode and waiting for IWDG reset");
 80035c4:	4804      	ldr	r0, [pc, #16]	; (80035d8 <HardFault_Handler+0x18>)
 80035c6:	f7fd fd31 	bl	800102c <println>
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 80035ca:	f44f 7080 	mov.w	r0, #256	; 0x100
 80035ce:	f007 fc71 	bl	800aeb4 <HAL_PWR_EnableWakeUpPin>
	HAL_PWR_EnterSTANDBYMode();
 80035d2:	f007 fc95 	bl	800af00 <HAL_PWR_EnterSTANDBYMode>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035d6:	e7fe      	b.n	80035d6 <HardFault_Handler+0x16>
 80035d8:	0801c834 	.word	0x0801c834

080035dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035e0:	e7fe      	b.n	80035e0 <MemManage_Handler+0x4>

080035e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035e2:	b480      	push	{r7}
 80035e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035e6:	e7fe      	b.n	80035e6 <BusFault_Handler+0x4>

080035e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035ec:	e7fe      	b.n	80035ec <UsageFault_Handler+0x4>

080035ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035ee:	b480      	push	{r7}
 80035f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035f2:	bf00      	nop
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003600:	4802      	ldr	r0, [pc, #8]	; (800360c <RTC_WKUP_IRQHandler+0x10>)
 8003602:	f009 f90f 	bl	800c824 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003606:	bf00      	nop
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	2000bb2c 	.word	0x2000bb2c

08003610 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003614:	2001      	movs	r0, #1
 8003616:	f006 fb73 	bl	8009d00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800361a:	bf00      	nop
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003624:	4802      	ldr	r0, [pc, #8]	; (8003630 <TIM6_DAC_IRQHandler+0x10>)
 8003626:	f00a f94d 	bl	800d8c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800362a:	bf00      	nop
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	2000bc54 	.word	0x2000bc54

08003634 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == IN_Button_Pin){
 800363e:	88fb      	ldrh	r3, [r7, #6]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d102      	bne.n	800364a <HAL_GPIO_EXTI_Callback+0x16>
		//Manual reset from external button
		restart_flag = 1;
 8003644:	4b04      	ldr	r3, [pc, #16]	; (8003658 <HAL_GPIO_EXTI_Callback+0x24>)
 8003646:	2201      	movs	r2, #1
 8003648:	701a      	strb	r2, [r3, #0]
	}
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	2000037e 	.word	0x2000037e

0800365c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003660:	4802      	ldr	r0, [pc, #8]	; (800366c <RTC_Alarm_IRQHandler+0x10>)
 8003662:	f008 fef1 	bl	800c448 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003666:	bf00      	nop
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	2000bb2c 	.word	0x2000bb2c

08003670 <HAL_RTC_AlarmAEventCallback>:


void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
	println("\r\nAlarmA");
 8003678:	4804      	ldr	r0, [pc, #16]	; (800368c <HAL_RTC_AlarmAEventCallback+0x1c>)
 800367a:	f7fd fcd7 	bl	800102c <println>
	flagA = 1;
 800367e:	4b04      	ldr	r3, [pc, #16]	; (8003690 <HAL_RTC_AlarmAEventCallback+0x20>)
 8003680:	2201      	movs	r2, #1
 8003682:	701a      	strb	r2, [r3, #0]
	return;
 8003684:	bf00      	nop
}
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	0801c874 	.word	0x0801c874
 8003690:	2000037c 	.word	0x2000037c

08003694 <HAL_RTCEx_AlarmBEventCallback>:


void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc){
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
	println("\r\nAlarmB");
 800369c:	4804      	ldr	r0, [pc, #16]	; (80036b0 <HAL_RTCEx_AlarmBEventCallback+0x1c>)
 800369e:	f7fd fcc5 	bl	800102c <println>
	flagB = 1;
 80036a2:	4b04      	ldr	r3, [pc, #16]	; (80036b4 <HAL_RTCEx_AlarmBEventCallback+0x20>)
 80036a4:	2201      	movs	r2, #1
 80036a6:	701a      	strb	r2, [r3, #0]
	return;
 80036a8:	bf00      	nop
}
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	0801c880 	.word	0x0801c880
 80036b4:	2000037d 	.word	0x2000037d

080036b8 <HAL_RTCEx_WakeUpTimerEventCallback>:


void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc){
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
	return;
 80036c0:	bf00      	nop
}
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <MRT_resetFromStart>:



void MRT_resetFromStart(void){
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0

	//Clear memory
	MRT_clearExternalFlash();
 80036d0:	f000 fbfa 	bl	8003ec8 <MRT_clearExternalFlash>
	MRT_RTC_clearBackupRegs();
 80036d4:	f7ff fcf8 	bl	80030c8 <MRT_RTC_clearBackupRegs>
	#if IRIDIUM_
	MRT_Iridium_Deinit();
	#endif

	//Reset function
	NVIC_SystemReset();
 80036d8:	f7ff ff58 	bl	800358c <__NVIC_SystemReset>

080036dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036e0:	4b06      	ldr	r3, [pc, #24]	; (80036fc <SystemInit+0x20>)
 80036e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e6:	4a05      	ldr	r2, [pc, #20]	; (80036fc <SystemInit+0x20>)
 80036e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036f0:	bf00      	nop
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	e000ed00 	.word	0xe000ed00

08003700 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08e      	sub	sp, #56	; 0x38
 8003704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003706:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	605a      	str	r2, [r3, #4]
 8003710:	609a      	str	r2, [r3, #8]
 8003712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003714:	f107 0320 	add.w	r3, r7, #32
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800371e:	1d3b      	adds	r3, r7, #4
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	605a      	str	r2, [r3, #4]
 8003726:	609a      	str	r2, [r3, #8]
 8003728:	60da      	str	r2, [r3, #12]
 800372a:	611a      	str	r2, [r3, #16]
 800372c:	615a      	str	r2, [r3, #20]
 800372e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003730:	4b2d      	ldr	r3, [pc, #180]	; (80037e8 <MX_TIM2_Init+0xe8>)
 8003732:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003736:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8003738:	4b2b      	ldr	r3, [pc, #172]	; (80037e8 <MX_TIM2_Init+0xe8>)
 800373a:	2259      	movs	r2, #89	; 0x59
 800373c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800373e:	4b2a      	ldr	r3, [pc, #168]	; (80037e8 <MX_TIM2_Init+0xe8>)
 8003740:	2200      	movs	r2, #0
 8003742:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 8003744:	4b28      	ldr	r3, [pc, #160]	; (80037e8 <MX_TIM2_Init+0xe8>)
 8003746:	f240 128f 	movw	r2, #399	; 0x18f
 800374a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800374c:	4b26      	ldr	r3, [pc, #152]	; (80037e8 <MX_TIM2_Init+0xe8>)
 800374e:	2200      	movs	r2, #0
 8003750:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003752:	4b25      	ldr	r3, [pc, #148]	; (80037e8 <MX_TIM2_Init+0xe8>)
 8003754:	2200      	movs	r2, #0
 8003756:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003758:	4823      	ldr	r0, [pc, #140]	; (80037e8 <MX_TIM2_Init+0xe8>)
 800375a:	f009 fe61 	bl	800d420 <HAL_TIM_Base_Init>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003764:	f7ff f994 	bl	8002a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800376c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800376e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003772:	4619      	mov	r1, r3
 8003774:	481c      	ldr	r0, [pc, #112]	; (80037e8 <MX_TIM2_Init+0xe8>)
 8003776:	f00a fa6f 	bl	800dc58 <HAL_TIM_ConfigClockSource>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003780:	f7ff f986 	bl	8002a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003784:	4818      	ldr	r0, [pc, #96]	; (80037e8 <MX_TIM2_Init+0xe8>)
 8003786:	f009 ff0b 	bl	800d5a0 <HAL_TIM_PWM_Init>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003790:	f7ff f97e 	bl	8002a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003794:	2320      	movs	r3, #32
 8003796:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003798:	2300      	movs	r3, #0
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800379c:	f107 0320 	add.w	r3, r7, #32
 80037a0:	4619      	mov	r1, r3
 80037a2:	4811      	ldr	r0, [pc, #68]	; (80037e8 <MX_TIM2_Init+0xe8>)
 80037a4:	f00a fe58 	bl	800e458 <HAL_TIMEx_MasterConfigSynchronization>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80037ae:	f7ff f96f 	bl	8002a90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037b2:	2360      	movs	r3, #96	; 0x60
 80037b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 80037b6:	2364      	movs	r3, #100	; 0x64
 80037b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037ba:	2300      	movs	r3, #0
 80037bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037be:	2300      	movs	r3, #0
 80037c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80037c2:	1d3b      	adds	r3, r7, #4
 80037c4:	2208      	movs	r2, #8
 80037c6:	4619      	mov	r1, r3
 80037c8:	4807      	ldr	r0, [pc, #28]	; (80037e8 <MX_TIM2_Init+0xe8>)
 80037ca:	f00a f983 	bl	800dad4 <HAL_TIM_PWM_ConfigChannel>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80037d4:	f7ff f95c 	bl	8002a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80037d8:	4803      	ldr	r0, [pc, #12]	; (80037e8 <MX_TIM2_Init+0xe8>)
 80037da:	f000 f827 	bl	800382c <HAL_TIM_MspPostInit>

}
 80037de:	bf00      	nop
 80037e0:	3738      	adds	r7, #56	; 0x38
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	2000bc9c 	.word	0x2000bc9c

080037ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fc:	d10d      	bne.n	800381a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037fe:	2300      	movs	r3, #0
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	4b09      	ldr	r3, [pc, #36]	; (8003828 <HAL_TIM_Base_MspInit+0x3c>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	4a08      	ldr	r2, [pc, #32]	; (8003828 <HAL_TIM_Base_MspInit+0x3c>)
 8003808:	f043 0301 	orr.w	r3, r3, #1
 800380c:	6413      	str	r3, [r2, #64]	; 0x40
 800380e:	4b06      	ldr	r3, [pc, #24]	; (8003828 <HAL_TIM_Base_MspInit+0x3c>)
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800381a:	bf00      	nop
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40023800 	.word	0x40023800

0800382c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b088      	sub	sp, #32
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003834:	f107 030c 	add.w	r3, r7, #12
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	605a      	str	r2, [r3, #4]
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	60da      	str	r2, [r3, #12]
 8003842:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800384c:	d11d      	bne.n	800388a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800384e:	2300      	movs	r3, #0
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	4b10      	ldr	r3, [pc, #64]	; (8003894 <HAL_TIM_MspPostInit+0x68>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	4a0f      	ldr	r2, [pc, #60]	; (8003894 <HAL_TIM_MspPostInit+0x68>)
 8003858:	f043 0301 	orr.w	r3, r3, #1
 800385c:	6313      	str	r3, [r2, #48]	; 0x30
 800385e:	4b0d      	ldr	r3, [pc, #52]	; (8003894 <HAL_TIM_MspPostInit+0x68>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	60bb      	str	r3, [r7, #8]
 8003868:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 800386a:	2304      	movs	r3, #4
 800386c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800386e:	2302      	movs	r3, #2
 8003870:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003872:	2300      	movs	r3, #0
 8003874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003876:	2300      	movs	r3, #0
 8003878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800387a:	2301      	movs	r3, #1
 800387c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 800387e:	f107 030c 	add.w	r3, r7, #12
 8003882:	4619      	mov	r1, r3
 8003884:	4804      	ldr	r0, [pc, #16]	; (8003898 <HAL_TIM_MspPostInit+0x6c>)
 8003886:	f006 f85d 	bl	8009944 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800388a:	bf00      	nop
 800388c:	3720      	adds	r7, #32
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800
 8003898:	40020000 	.word	0x40020000

0800389c <MX_UART8_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART8 init function */
void MX_UART8_Init(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80038a0:	4b11      	ldr	r3, [pc, #68]	; (80038e8 <MX_UART8_Init+0x4c>)
 80038a2:	4a12      	ldr	r2, [pc, #72]	; (80038ec <MX_UART8_Init+0x50>)
 80038a4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80038a6:	4b10      	ldr	r3, [pc, #64]	; (80038e8 <MX_UART8_Init+0x4c>)
 80038a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80038ac:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80038ae:	4b0e      	ldr	r3, [pc, #56]	; (80038e8 <MX_UART8_Init+0x4c>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80038b4:	4b0c      	ldr	r3, [pc, #48]	; (80038e8 <MX_UART8_Init+0x4c>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80038ba:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <MX_UART8_Init+0x4c>)
 80038bc:	2200      	movs	r2, #0
 80038be:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80038c0:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <MX_UART8_Init+0x4c>)
 80038c2:	220c      	movs	r2, #12
 80038c4:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038c6:	4b08      	ldr	r3, [pc, #32]	; (80038e8 <MX_UART8_Init+0x4c>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80038cc:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <MX_UART8_Init+0x4c>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80038d2:	4805      	ldr	r0, [pc, #20]	; (80038e8 <MX_UART8_Init+0x4c>)
 80038d4:	f00a fe50 	bl	800e578 <HAL_UART_Init>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 80038de:	f7ff f8d7 	bl	8002a90 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80038e2:	bf00      	nop
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	2000bd28 	.word	0x2000bd28
 80038ec:	40007c00 	.word	0x40007c00

080038f0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80038f4:	4b11      	ldr	r3, [pc, #68]	; (800393c <MX_USART3_UART_Init+0x4c>)
 80038f6:	4a12      	ldr	r2, [pc, #72]	; (8003940 <MX_USART3_UART_Init+0x50>)
 80038f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80038fa:	4b10      	ldr	r3, [pc, #64]	; (800393c <MX_USART3_UART_Init+0x4c>)
 80038fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003900:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003902:	4b0e      	ldr	r3, [pc, #56]	; (800393c <MX_USART3_UART_Init+0x4c>)
 8003904:	2200      	movs	r2, #0
 8003906:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003908:	4b0c      	ldr	r3, [pc, #48]	; (800393c <MX_USART3_UART_Init+0x4c>)
 800390a:	2200      	movs	r2, #0
 800390c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800390e:	4b0b      	ldr	r3, [pc, #44]	; (800393c <MX_USART3_UART_Init+0x4c>)
 8003910:	2200      	movs	r2, #0
 8003912:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003914:	4b09      	ldr	r3, [pc, #36]	; (800393c <MX_USART3_UART_Init+0x4c>)
 8003916:	220c      	movs	r2, #12
 8003918:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800391a:	4b08      	ldr	r3, [pc, #32]	; (800393c <MX_USART3_UART_Init+0x4c>)
 800391c:	2200      	movs	r2, #0
 800391e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003920:	4b06      	ldr	r3, [pc, #24]	; (800393c <MX_USART3_UART_Init+0x4c>)
 8003922:	2200      	movs	r2, #0
 8003924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003926:	4805      	ldr	r0, [pc, #20]	; (800393c <MX_USART3_UART_Init+0x4c>)
 8003928:	f00a fe26 	bl	800e578 <HAL_UART_Init>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003932:	f7ff f8ad 	bl	8002a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003936:	bf00      	nop
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	2000bce4 	.word	0x2000bce4
 8003940:	40004800 	.word	0x40004800

08003944 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003948:	4b11      	ldr	r3, [pc, #68]	; (8003990 <MX_USART6_UART_Init+0x4c>)
 800394a:	4a12      	ldr	r2, [pc, #72]	; (8003994 <MX_USART6_UART_Init+0x50>)
 800394c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800394e:	4b10      	ldr	r3, [pc, #64]	; (8003990 <MX_USART6_UART_Init+0x4c>)
 8003950:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003954:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003956:	4b0e      	ldr	r3, [pc, #56]	; (8003990 <MX_USART6_UART_Init+0x4c>)
 8003958:	2200      	movs	r2, #0
 800395a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800395c:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <MX_USART6_UART_Init+0x4c>)
 800395e:	2200      	movs	r2, #0
 8003960:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003962:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <MX_USART6_UART_Init+0x4c>)
 8003964:	2200      	movs	r2, #0
 8003966:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003968:	4b09      	ldr	r3, [pc, #36]	; (8003990 <MX_USART6_UART_Init+0x4c>)
 800396a:	220c      	movs	r2, #12
 800396c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800396e:	4b08      	ldr	r3, [pc, #32]	; (8003990 <MX_USART6_UART_Init+0x4c>)
 8003970:	2200      	movs	r2, #0
 8003972:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003974:	4b06      	ldr	r3, [pc, #24]	; (8003990 <MX_USART6_UART_Init+0x4c>)
 8003976:	2200      	movs	r2, #0
 8003978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800397a:	4805      	ldr	r0, [pc, #20]	; (8003990 <MX_USART6_UART_Init+0x4c>)
 800397c:	f00a fdfc 	bl	800e578 <HAL_UART_Init>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003986:	f7ff f883 	bl	8002a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	2000bd6c 	.word	0x2000bd6c
 8003994:	40011400 	.word	0x40011400

08003998 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08e      	sub	sp, #56	; 0x38
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	605a      	str	r2, [r3, #4]
 80039aa:	609a      	str	r2, [r3, #8]
 80039ac:	60da      	str	r2, [r3, #12]
 80039ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a4b      	ldr	r2, [pc, #300]	; (8003ae4 <HAL_UART_MspInit+0x14c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d12c      	bne.n	8003a14 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80039ba:	2300      	movs	r3, #0
 80039bc:	623b      	str	r3, [r7, #32]
 80039be:	4b4a      	ldr	r3, [pc, #296]	; (8003ae8 <HAL_UART_MspInit+0x150>)
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	4a49      	ldr	r2, [pc, #292]	; (8003ae8 <HAL_UART_MspInit+0x150>)
 80039c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039c8:	6413      	str	r3, [r2, #64]	; 0x40
 80039ca:	4b47      	ldr	r3, [pc, #284]	; (8003ae8 <HAL_UART_MspInit+0x150>)
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039d2:	623b      	str	r3, [r7, #32]
 80039d4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80039d6:	2300      	movs	r3, #0
 80039d8:	61fb      	str	r3, [r7, #28]
 80039da:	4b43      	ldr	r3, [pc, #268]	; (8003ae8 <HAL_UART_MspInit+0x150>)
 80039dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039de:	4a42      	ldr	r2, [pc, #264]	; (8003ae8 <HAL_UART_MspInit+0x150>)
 80039e0:	f043 0310 	orr.w	r3, r3, #16
 80039e4:	6313      	str	r3, [r2, #48]	; 0x30
 80039e6:	4b40      	ldr	r3, [pc, #256]	; (8003ae8 <HAL_UART_MspInit+0x150>)
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	f003 0310 	and.w	r3, r3, #16
 80039ee:	61fb      	str	r3, [r7, #28]
 80039f0:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 80039f2:	2303      	movs	r3, #3
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f6:	2302      	movs	r3, #2
 80039f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039fe:	2303      	movs	r3, #3
 8003a00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8003a02:	2308      	movs	r3, #8
 8003a04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	4837      	ldr	r0, [pc, #220]	; (8003aec <HAL_UART_MspInit+0x154>)
 8003a0e:	f005 ff99 	bl	8009944 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003a12:	e063      	b.n	8003adc <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART3)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a35      	ldr	r2, [pc, #212]	; (8003af0 <HAL_UART_MspInit+0x158>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d12d      	bne.n	8003a7a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61bb      	str	r3, [r7, #24]
 8003a22:	4b31      	ldr	r3, [pc, #196]	; (8003ae8 <HAL_UART_MspInit+0x150>)
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	4a30      	ldr	r2, [pc, #192]	; (8003ae8 <HAL_UART_MspInit+0x150>)
 8003a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a2e:	4b2e      	ldr	r3, [pc, #184]	; (8003ae8 <HAL_UART_MspInit+0x150>)
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a36:	61bb      	str	r3, [r7, #24]
 8003a38:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	4b2a      	ldr	r3, [pc, #168]	; (8003ae8 <HAL_UART_MspInit+0x150>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	4a29      	ldr	r2, [pc, #164]	; (8003ae8 <HAL_UART_MspInit+0x150>)
 8003a44:	f043 0308 	orr.w	r3, r3, #8
 8003a48:	6313      	str	r3, [r2, #48]	; 0x30
 8003a4a:	4b27      	ldr	r3, [pc, #156]	; (8003ae8 <HAL_UART_MspInit+0x150>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	f003 0308 	and.w	r3, r3, #8
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8003a56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a60:	2300      	movs	r3, #0
 8003a62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a64:	2303      	movs	r3, #3
 8003a66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a68:	2307      	movs	r3, #7
 8003a6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a70:	4619      	mov	r1, r3
 8003a72:	4820      	ldr	r0, [pc, #128]	; (8003af4 <HAL_UART_MspInit+0x15c>)
 8003a74:	f005 ff66 	bl	8009944 <HAL_GPIO_Init>
}
 8003a78:	e030      	b.n	8003adc <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART6)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a1e      	ldr	r2, [pc, #120]	; (8003af8 <HAL_UART_MspInit+0x160>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d12b      	bne.n	8003adc <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003a84:	2300      	movs	r3, #0
 8003a86:	613b      	str	r3, [r7, #16]
 8003a88:	4b17      	ldr	r3, [pc, #92]	; (8003ae8 <HAL_UART_MspInit+0x150>)
 8003a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8c:	4a16      	ldr	r2, [pc, #88]	; (8003ae8 <HAL_UART_MspInit+0x150>)
 8003a8e:	f043 0320 	orr.w	r3, r3, #32
 8003a92:	6453      	str	r3, [r2, #68]	; 0x44
 8003a94:	4b14      	ldr	r3, [pc, #80]	; (8003ae8 <HAL_UART_MspInit+0x150>)
 8003a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a98:	f003 0320 	and.w	r3, r3, #32
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	4b10      	ldr	r3, [pc, #64]	; (8003ae8 <HAL_UART_MspInit+0x150>)
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa8:	4a0f      	ldr	r2, [pc, #60]	; (8003ae8 <HAL_UART_MspInit+0x150>)
 8003aaa:	f043 0304 	orr.w	r3, r3, #4
 8003aae:	6313      	str	r3, [r2, #48]	; 0x30
 8003ab0:	4b0d      	ldr	r3, [pc, #52]	; (8003ae8 <HAL_UART_MspInit+0x150>)
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8003abc:	23c0      	movs	r3, #192	; 0xc0
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003acc:	2308      	movs	r3, #8
 8003ace:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4809      	ldr	r0, [pc, #36]	; (8003afc <HAL_UART_MspInit+0x164>)
 8003ad8:	f005 ff34 	bl	8009944 <HAL_GPIO_Init>
}
 8003adc:	bf00      	nop
 8003ade:	3738      	adds	r7, #56	; 0x38
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40007c00 	.word	0x40007c00
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	40021000 	.word	0x40021000
 8003af0:	40004800 	.word	0x40004800
 8003af4:	40020c00 	.word	0x40020c00
 8003af8:	40011400 	.word	0x40011400
 8003afc:	40020800 	.word	0x40020800

08003b00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003b04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003b06:	e003      	b.n	8003b10 <LoopCopyDataInit>

08003b08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003b08:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003b0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003b0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003b0e:	3104      	adds	r1, #4

08003b10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003b10:	480b      	ldr	r0, [pc, #44]	; (8003b40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003b12:	4b0c      	ldr	r3, [pc, #48]	; (8003b44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003b14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003b16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003b18:	d3f6      	bcc.n	8003b08 <CopyDataInit>
  ldr  r2, =_sbss
 8003b1a:	4a0b      	ldr	r2, [pc, #44]	; (8003b48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003b1c:	e002      	b.n	8003b24 <LoopFillZerobss>

08003b1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003b1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003b20:	f842 3b04 	str.w	r3, [r2], #4

08003b24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003b24:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003b26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003b28:	d3f9      	bcc.n	8003b1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003b2a:	f7ff fdd7 	bl	80036dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b2e:	f013 faf5 	bl	801711c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b32:	f7fe fdb7 	bl	80026a4 <main>
  bx  lr    
 8003b36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003b38:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003b3c:	0801dc0c 	.word	0x0801dc0c
  ldr  r0, =_sdata
 8003b40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b44:	200002cc 	.word	0x200002cc
  ldr  r2, =_sbss
 8003b48:	200002cc 	.word	0x200002cc
  ldr  r3, = _ebss
 8003b4c:	2000d0cc 	.word	0x2000d0cc

08003b50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b50:	e7fe      	b.n	8003b50 <ADC_IRQHandler>
 8003b52:	0000      	movs	r0, r0
 8003b54:	0000      	movs	r0, r0
	...

08003b58 <MRT_getAltitude>:

/*
 * Gets the altitude using temperature, pressure and sea-level pressure
 *https://www.mide.com/air-pressure-at-altitude-calculator
 */
float MRT_getAltitude(float pressure){
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	ed87 0a01 	vstr	s0, [r7, #4]
	return BASE_HEIGHT+(SEA_LEVEL_TEMPERATURE/-0.0065)*(pow(pressure/SEA_LEVEL_PRESSURE,0.190263236)-1); //(-R*-0.0065/(go*M)) = 0.190263236
 8003b62:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b66:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003be8 <MRT_getAltitude+0x90>
 8003b6a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003b6e:	ee16 0a90 	vmov	r0, s13
 8003b72:	f7fc fd09 	bl	8000588 <__aeabi_f2d>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8003bd8 <MRT_getAltitude+0x80>
 8003b7e:	ec43 2b10 	vmov	d0, r2, r3
 8003b82:	f012 fa11 	bl	8015fa8 <pow>
 8003b86:	ec51 0b10 	vmov	r0, r1, d0
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	4b17      	ldr	r3, [pc, #92]	; (8003bec <MRT_getAltitude+0x94>)
 8003b90:	f7fc fb9a 	bl	80002c8 <__aeabi_dsub>
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	4610      	mov	r0, r2
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	a310      	add	r3, pc, #64	; (adr r3, 8003be0 <MRT_getAltitude+0x88>)
 8003b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba2:	f7fc fd49 	bl	8000638 <__aeabi_dmul>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	460b      	mov	r3, r1
 8003baa:	4610      	mov	r0, r2
 8003bac:	4619      	mov	r1, r3
 8003bae:	f04f 0200 	mov.w	r2, #0
 8003bb2:	4b0f      	ldr	r3, [pc, #60]	; (8003bf0 <MRT_getAltitude+0x98>)
 8003bb4:	f7fc fb8a 	bl	80002cc <__adddf3>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	f7fd f832 	bl	8000c28 <__aeabi_d2f>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	ee07 3a90 	vmov	s15, r3
}
 8003bca:	eeb0 0a67 	vmov.f32	s0, s15
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	f3af 8000 	nop.w
 8003bd8:	b4202506 	.word	0xb4202506
 8003bdc:	3fc85a8b 	.word	0x3fc85a8b
 8003be0:	76276276 	.word	0x76276276
 8003be4:	c0e481c2 	.word	0xc0e481c2
 8003be8:	447d8000 	.word	0x447d8000
 8003bec:	3ff00000 	.word	0x3ff00000
 8003bf0:	40590000 	.word	0x40590000

08003bf4 <MRT_getContinuity>:
 * Checks the continuity of the gates
 *
 * returns a binary number in its decimal form. Each bit is the state of a gate.
 * bit3 bit2 bit1 bit0 = drogue1 drogue2 prop1 prop2
 */
uint8_t MRT_getContinuity(void){
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
	uint8_t drogue1 = HAL_GPIO_ReadPin(IN_EJ_Drogue_Cont_GPIO_Port, IN_EJ_Drogue_Cont_Pin);
 8003bfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bfe:	4815      	ldr	r0, [pc, #84]	; (8003c54 <MRT_getContinuity+0x60>)
 8003c00:	f006 f84c 	bl	8009c9c <HAL_GPIO_ReadPin>
 8003c04:	4603      	mov	r3, r0
 8003c06:	71fb      	strb	r3, [r7, #7]
	uint8_t drogue2 = HAL_GPIO_ReadPin(IN_EJ_Main_Cont_GPIO_Port, IN_EJ_Main_Cont_Pin);
 8003c08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003c0c:	4811      	ldr	r0, [pc, #68]	; (8003c54 <MRT_getContinuity+0x60>)
 8003c0e:	f006 f845 	bl	8009c9c <HAL_GPIO_ReadPin>
 8003c12:	4603      	mov	r3, r0
 8003c14:	71bb      	strb	r3, [r7, #6]
	uint8_t prop1 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_1_GPIO_Port, IN_PyroValve_Cont_1_Pin);
 8003c16:	2101      	movs	r1, #1
 8003c18:	480e      	ldr	r0, [pc, #56]	; (8003c54 <MRT_getContinuity+0x60>)
 8003c1a:	f006 f83f 	bl	8009c9c <HAL_GPIO_ReadPin>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	717b      	strb	r3, [r7, #5]
	uint8_t prop2 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_2_GPIO_Port, IN_PyroValve_Cont_2_Pin);
 8003c22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c26:	480c      	ldr	r0, [pc, #48]	; (8003c58 <MRT_getContinuity+0x64>)
 8003c28:	f006 f838 	bl	8009c9c <HAL_GPIO_ReadPin>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	713b      	strb	r3, [r7, #4]
	uint8_t continuity = 8*drogue1 + 4*drogue2 + 2*prop1 + prop2;
 8003c30:	79fb      	ldrb	r3, [r7, #7]
 8003c32:	005a      	lsls	r2, r3, #1
 8003c34:	79bb      	ldrb	r3, [r7, #6]
 8003c36:	4413      	add	r3, r2
 8003c38:	005a      	lsls	r2, r3, #1
 8003c3a:	797b      	ldrb	r3, [r7, #5]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	793b      	ldrb	r3, [r7, #4]
 8003c46:	4413      	add	r3, r2
 8003c48:	70fb      	strb	r3, [r7, #3]
	return continuity;
 8003c4a:	78fb      	ldrb	r3, [r7, #3]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40021800 	.word	0x40021800
 8003c58:	40021400 	.word	0x40021400

08003c5c <MRT_formatAvionics>:


// formats avionics telemetry string using sprintf
void MRT_formatAvionics(void) {
 8003c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c60:	b0a3      	sub	sp, #140	; 0x8c
 8003c62:	af16      	add	r7, sp, #88	; 0x58
	memset(msg_buffer_av, 0, 200);
 8003c64:	22c8      	movs	r2, #200	; 0xc8
 8003c66:	2100      	movs	r1, #0
 8003c68:	483c      	ldr	r0, [pc, #240]	; (8003d5c <MRT_formatAvionics+0x100>)
 8003c6a:	f013 fab7 	bl	80171dc <memset>
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 8003c6e:	4b3c      	ldr	r3, [pc, #240]	; (8003d60 <MRT_formatAvionics+0x104>)
 8003c70:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fc fc88 	bl	8000588 <__aeabi_f2d>
 8003c78:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 8003c7c:	4b38      	ldr	r3, [pc, #224]	; (8003d60 <MRT_formatAvionics+0x104>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fc fc81 	bl	8000588 <__aeabi_f2d>
 8003c86:	e9c7 0108 	strd	r0, r1, [r7, #32]
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 8003c8a:	4b35      	ldr	r3, [pc, #212]	; (8003d60 <MRT_formatAvionics+0x104>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fc fc7a 	bl	8000588 <__aeabi_f2d>
 8003c94:	e9c7 0106 	strd	r0, r1, [r7, #24]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 8003c98:	4b31      	ldr	r3, [pc, #196]	; (8003d60 <MRT_formatAvionics+0x104>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7fc fc73 	bl	8000588 <__aeabi_f2d>
 8003ca2:	e9c7 0104 	strd	r0, r1, [r7, #16]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 8003ca6:	4b2e      	ldr	r3, [pc, #184]	; (8003d60 <MRT_formatAvionics+0x104>)
 8003ca8:	691b      	ldr	r3, [r3, #16]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fc fc6c 	bl	8000588 <__aeabi_f2d>
 8003cb0:	e9c7 0102 	strd	r0, r1, [r7, #8]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 8003cb4:	4b2a      	ldr	r3, [pc, #168]	; (8003d60 <MRT_formatAvionics+0x104>)
 8003cb6:	695b      	ldr	r3, [r3, #20]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fc fc65 	bl	8000588 <__aeabi_f2d>
 8003cbe:	e9c7 0100 	strd	r0, r1, [r7]
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 8003cc2:	4b28      	ldr	r3, [pc, #160]	; (8003d64 <MRT_formatAvionics+0x108>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fc fc5e 	bl	8000588 <__aeabi_f2d>
 8003ccc:	4682      	mov	sl, r0
 8003cce:	468b      	mov	fp, r1
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 8003cd0:	4b25      	ldr	r3, [pc, #148]	; (8003d68 <MRT_formatAvionics+0x10c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7fc fc57 	bl	8000588 <__aeabi_f2d>
 8003cda:	4680      	mov	r8, r0
 8003cdc:	4689      	mov	r9, r1
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 8003cde:	4b22      	ldr	r3, [pc, #136]	; (8003d68 <MRT_formatAvionics+0x10c>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fc fc50 	bl	8000588 <__aeabi_f2d>
 8003ce8:	4604      	mov	r4, r0
 8003cea:	460d      	mov	r5, r1
 8003cec:	4b1f      	ldr	r3, [pc, #124]	; (8003d6c <MRT_formatAvionics+0x110>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	461e      	mov	r6, r3
 8003cf2:	4b1f      	ldr	r3, [pc, #124]	; (8003d70 <MRT_formatAvionics+0x114>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	4b1e      	ldr	r3, [pc, #120]	; (8003d74 <MRT_formatAvionics+0x118>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	4b1e      	ldr	r3, [pc, #120]	; (8003d78 <MRT_formatAvionics+0x11c>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	4619      	mov	r1, r3
 8003d02:	4b1e      	ldr	r3, [pc, #120]	; (8003d7c <MRT_formatAvionics+0x120>)
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	9314      	str	r3, [sp, #80]	; 0x50
 8003d08:	9113      	str	r1, [sp, #76]	; 0x4c
 8003d0a:	9212      	str	r2, [sp, #72]	; 0x48
 8003d0c:	9011      	str	r0, [sp, #68]	; 0x44
 8003d0e:	9610      	str	r6, [sp, #64]	; 0x40
 8003d10:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8003d14:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8003d18:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8003d1c:	ed97 7b00 	vldr	d7, [r7]
 8003d20:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003d24:	ed97 7b02 	vldr	d7, [r7, #8]
 8003d28:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003d2c:	ed97 7b04 	vldr	d7, [r7, #16]
 8003d30:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003d34:	ed97 7b06 	vldr	d7, [r7, #24]
 8003d38:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003d3c:	ed97 7b08 	vldr	d7, [r7, #32]
 8003d40:	ed8d 7b00 	vstr	d7, [sp]
 8003d44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d48:	490d      	ldr	r1, [pc, #52]	; (8003d80 <MRT_formatAvionics+0x124>)
 8003d4a:	4804      	ldr	r0, [pc, #16]	; (8003d5c <MRT_formatAvionics+0x100>)
 8003d4c:	f014 fac4 	bl	80182d8 <siprintf>
		prev_min, prev_sec, prev_subsec,
		gates_continuity,	ejection_stage_flag);
}
 8003d50:	bf00      	nop
 8003d52:	3734      	adds	r7, #52	; 0x34
 8003d54:	46bd      	mov	sp, r7
 8003d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d5a:	bf00      	nop
 8003d5c:	2000bdb0 	.word	0x2000bdb0
 8003d60:	200004c4 	.word	0x200004c4
 8003d64:	200004f0 	.word	0x200004f0
 8003d68:	20000504 	.word	0x20000504
 8003d6c:	20000396 	.word	0x20000396
 8003d70:	20000397 	.word	0x20000397
 8003d74:	20000398 	.word	0x20000398
 8003d78:	2000037f 	.word	0x2000037f
 8003d7c:	20000394 	.word	0x20000394
 8003d80:	0801c88c 	.word	0x0801c88c

08003d84 <MRT_external_flash_Init>:


//**************************************************//
//FUNCTIONS

void MRT_external_flash_Init(void){
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0

	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	607b      	str	r3, [r7, #4]
 8003d8e:	e007      	b.n	8003da0 <MRT_external_flash_Init+0x1c>
		FLAGS_NULL_BUFFER[i] = 0; //Setup the flags null buffer for the correct number of values
 8003d90:	4a13      	ldr	r2, [pc, #76]	; (8003de0 <MRT_external_flash_Init+0x5c>)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4413      	add	r3, r2
 8003d96:	2200      	movs	r2, #0
 8003d98:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	607b      	str	r3, [r7, #4]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	ddf4      	ble.n	8003d90 <MRT_external_flash_Init+0xc>
	}

	if (!W25qxx_Init()) {
 8003da6:	f000 feb1 	bl	8004b0c <W25qxx_Init>
 8003daa:	4603      	mov	r3, r0
 8003dac:	f083 0301 	eor.w	r3, r3, #1
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <MRT_external_flash_Init+0x36>
		Error_Handler(); // hangs and blinks LEDF
 8003db6:	f7fe fe6b 	bl	8002a90 <Error_Handler>
	}

	//Retrieve flags
	W25qxx_ReadSector(ext_flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8003dba:	2305      	movs	r3, #5
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	4808      	ldr	r0, [pc, #32]	; (8003de4 <MRT_external_flash_Init+0x60>)
 8003dc2:	f001 fa7d 	bl	80052c0 <W25qxx_ReadSector>

	//Retrieve RTC time (last recorded)
	W25qxx_ReadSector(ext_flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003dc6:	2304      	movs	r3, #4
 8003dc8:	2200      	movs	r2, #0
 8003dca:	2102      	movs	r1, #2
 8003dcc:	4806      	ldr	r0, [pc, #24]	; (8003de8 <MRT_external_flash_Init+0x64>)
 8003dce:	f001 fa77 	bl	80052c0 <W25qxx_ReadSector>

	//Assign each value read to their variable
	MRT_updateExternalFlashValues();
 8003dd2:	f000 f843 	bl	8003e5c <MRT_updateExternalFlashValues>
}
 8003dd6:	bf00      	nop
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	2000be78 	.word	0x2000be78
 8003de4:	2000be84 	.word	0x2000be84
 8003de8:	2000be80 	.word	0x2000be80

08003dec <MRT_updateExternalFlashBuffers>:


void MRT_updateExternalFlashBuffers(void){
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003df2:	2300      	movs	r3, #0
 8003df4:	607b      	str	r3, [r7, #4]
 8003df6:	e00c      	b.n	8003e12 <MRT_updateExternalFlashBuffers+0x26>
		ext_flash_flags_buffer[i] = *ext_flash_flags[i];
 8003df8:	4a14      	ldr	r2, [pc, #80]	; (8003e4c <MRT_updateExternalFlashBuffers+0x60>)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e00:	7819      	ldrb	r1, [r3, #0]
 8003e02:	4a13      	ldr	r2, [pc, #76]	; (8003e50 <MRT_updateExternalFlashBuffers+0x64>)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4413      	add	r3, r2
 8003e08:	460a      	mov	r2, r1
 8003e0a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	607b      	str	r3, [r7, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b04      	cmp	r3, #4
 8003e16:	ddef      	ble.n	8003df8 <MRT_updateExternalFlashBuffers+0xc>
	}
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003e18:	2300      	movs	r3, #0
 8003e1a:	603b      	str	r3, [r7, #0]
 8003e1c:	e00c      	b.n	8003e38 <MRT_updateExternalFlashBuffers+0x4c>
		ext_flash_time_buffer[i] = *ext_flash_time[i];
 8003e1e:	4a0d      	ldr	r2, [pc, #52]	; (8003e54 <MRT_updateExternalFlashBuffers+0x68>)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e26:	7819      	ldrb	r1, [r3, #0]
 8003e28:	4a0b      	ldr	r2, [pc, #44]	; (8003e58 <MRT_updateExternalFlashBuffers+0x6c>)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	460a      	mov	r2, r1
 8003e30:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	3301      	adds	r3, #1
 8003e36:	603b      	str	r3, [r7, #0]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	2b03      	cmp	r3, #3
 8003e3c:	ddef      	ble.n	8003e1e <MRT_updateExternalFlashBuffers+0x32>
	}
}
 8003e3e:	bf00      	nop
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	2000008c 	.word	0x2000008c
 8003e50:	2000be84 	.word	0x2000be84
 8003e54:	200000a0 	.word	0x200000a0
 8003e58:	2000be80 	.word	0x2000be80

08003e5c <MRT_updateExternalFlashValues>:


void MRT_updateExternalFlashValues(void){
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003e62:	2300      	movs	r3, #0
 8003e64:	607b      	str	r3, [r7, #4]
 8003e66:	e00b      	b.n	8003e80 <MRT_updateExternalFlashValues+0x24>
		*ext_flash_flags[i] = ext_flash_flags_buffer[i];
 8003e68:	4a13      	ldr	r2, [pc, #76]	; (8003eb8 <MRT_updateExternalFlashValues+0x5c>)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e70:	4912      	ldr	r1, [pc, #72]	; (8003ebc <MRT_updateExternalFlashValues+0x60>)
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	440a      	add	r2, r1
 8003e76:	7812      	ldrb	r2, [r2, #0]
 8003e78:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	607b      	str	r3, [r7, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	ddf0      	ble.n	8003e68 <MRT_updateExternalFlashValues+0xc>
	}
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003e86:	2300      	movs	r3, #0
 8003e88:	603b      	str	r3, [r7, #0]
 8003e8a:	e00b      	b.n	8003ea4 <MRT_updateExternalFlashValues+0x48>
		*ext_flash_time[i] = ext_flash_time_buffer[i];
 8003e8c:	4a0c      	ldr	r2, [pc, #48]	; (8003ec0 <MRT_updateExternalFlashValues+0x64>)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e94:	490b      	ldr	r1, [pc, #44]	; (8003ec4 <MRT_updateExternalFlashValues+0x68>)
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	440a      	add	r2, r1
 8003e9a:	7812      	ldrb	r2, [r2, #0]
 8003e9c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	603b      	str	r3, [r7, #0]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	2b03      	cmp	r3, #3
 8003ea8:	ddf0      	ble.n	8003e8c <MRT_updateExternalFlashValues+0x30>
	}
}
 8003eaa:	bf00      	nop
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	2000008c 	.word	0x2000008c
 8003ebc:	2000be84 	.word	0x2000be84
 8003ec0:	200000a0 	.word	0x200000a0
 8003ec4:	2000be80 	.word	0x2000be80

08003ec8 <MRT_clearExternalFlash>:


void MRT_clearExternalFlash(void){
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
	//Clear flags
	W25qxx_EraseSector(FLAGS_SECTOR);
 8003ecc:	2001      	movs	r0, #1
 8003ece:	f000 ff6f 	bl	8004db0 <W25qxx_EraseSector>
	W25qxx_WriteSector(FLAGS_NULL_BUFFER, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8003ed2:	2305      	movs	r3, #5
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	4806      	ldr	r0, [pc, #24]	; (8003ef4 <MRT_clearExternalFlash+0x2c>)
 8003eda:	f001 f8b3 	bl	8005044 <W25qxx_WriteSector>

	//Clear RTC time (last recorded)
	W25qxx_EraseSector(RTC_SECTOR);
 8003ede:	2002      	movs	r0, #2
 8003ee0:	f000 ff66 	bl	8004db0 <W25qxx_EraseSector>
	W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003ee4:	2304      	movs	r3, #4
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	2102      	movs	r1, #2
 8003eea:	4803      	ldr	r0, [pc, #12]	; (8003ef8 <MRT_clearExternalFlash+0x30>)
 8003eec:	f001 f8aa 	bl	8005044 <W25qxx_WriteSector>
}
 8003ef0:	bf00      	nop
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	2000be78 	.word	0x2000be78
 8003ef8:	2000038c 	.word	0x2000038c

08003efc <MRT_saveFlagValue>:
//Public functions

/*
 * Save a flag value (value updated outside the function)
 */
void MRT_saveFlagValue(rtc_backup_reg state){
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	4603      	mov	r3, r0
 8003f04:	71fb      	strb	r3, [r7, #7]
	//Write new flags to flash memory
	MRT_updateExternalFlashBuffers();
 8003f06:	f7ff ff71 	bl	8003dec <MRT_updateExternalFlashBuffers>
	W25qxx_EraseSector(FLAGS_SECTOR);
 8003f0a:	2001      	movs	r0, #1
 8003f0c:	f000 ff50 	bl	8004db0 <W25qxx_EraseSector>
	W25qxx_WriteSector(ext_flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8003f10:	2305      	movs	r3, #5
 8003f12:	2200      	movs	r2, #0
 8003f14:	2101      	movs	r1, #1
 8003f16:	4808      	ldr	r0, [pc, #32]	; (8003f38 <MRT_saveFlagValue+0x3c>)
 8003f18:	f001 f894 	bl	8005044 <W25qxx_WriteSector>

	//Write new flag to RTC backup register
	MRT_RTC_setBackupReg(state, *rtc_bckp_regs[state]);
 8003f1c:	79fb      	ldrb	r3, [r7, #7]
 8003f1e:	4a07      	ldr	r2, [pc, #28]	; (8003f3c <MRT_saveFlagValue+0x40>)
 8003f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	79fb      	ldrb	r3, [r7, #7]
 8003f28:	4611      	mov	r1, r2
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff f90e 	bl	800314c <MRT_RTC_setBackupReg>
}
 8003f30:	bf00      	nop
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	2000be84 	.word	0x2000be84
 8003f3c:	2000003c 	.word	0x2000003c

08003f40 <MRT_checkFlagsValues>:


/*
 * Check for memory issues
 */
uint8_t MRT_checkFlagsValues(rtc_backup_reg val_index, uint32_t max_val){
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	6039      	str	r1, [r7, #0]
 8003f4a:	71fb      	strb	r3, [r7, #7]

	uint8_t ret = true;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	73fb      	strb	r3, [r7, #15]

	//Check for a random value (unsigned int so can't be negative)
	if (*rtc_bckp_regs[val_index] > max_val){
 8003f50:	79fb      	ldrb	r3, [r7, #7]
 8003f52:	4a2e      	ldr	r2, [pc, #184]	; (800400c <MRT_checkFlagsValues+0xcc>)
 8003f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d207      	bcs.n	8003f70 <MRT_checkFlagsValues+0x30>
		*rtc_bckp_regs[val_index] = 0;
 8003f60:	79fb      	ldrb	r3, [r7, #7]
 8003f62:	4a2a      	ldr	r2, [pc, #168]	; (800400c <MRT_checkFlagsValues+0xcc>)
 8003f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
		ret = false;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	73fb      	strb	r3, [r7, #15]
	}
	if (*ext_flash_flags[val_index] > max_val){
 8003f70:	79fb      	ldrb	r3, [r7, #7]
 8003f72:	4a27      	ldr	r2, [pc, #156]	; (8004010 <MRT_checkFlagsValues+0xd0>)
 8003f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d207      	bcs.n	8003f92 <MRT_checkFlagsValues+0x52>
		*ext_flash_flags[val_index] = 0;
 8003f82:	79fb      	ldrb	r3, [r7, #7]
 8003f84:	4a22      	ldr	r2, [pc, #136]	; (8004010 <MRT_checkFlagsValues+0xd0>)
 8003f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	701a      	strb	r2, [r3, #0]
		ret = false;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	73fb      	strb	r3, [r7, #15]
	}

	if (*rtc_bckp_regs[val_index] != *ext_flash_flags[val_index]){
 8003f92:	79fb      	ldrb	r3, [r7, #7]
 8003f94:	4a1d      	ldr	r2, [pc, #116]	; (800400c <MRT_checkFlagsValues+0xcc>)
 8003f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	79fa      	ldrb	r2, [r7, #7]
 8003f9e:	491c      	ldr	r1, [pc, #112]	; (8004010 <MRT_checkFlagsValues+0xd0>)
 8003fa0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003fa4:	7812      	ldrb	r2, [r2, #0]
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d028      	beq.n	8003ffc <MRT_checkFlagsValues+0xbc>
		*rtc_bckp_regs[val_index] = MAX(*rtc_bckp_regs[val_index], *ext_flash_flags[val_index]);
 8003faa:	79fb      	ldrb	r3, [r7, #7]
 8003fac:	4a18      	ldr	r2, [pc, #96]	; (8004010 <MRT_checkFlagsValues+0xd0>)
 8003fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	79fb      	ldrb	r3, [r7, #7]
 8003fb8:	4a14      	ldr	r2, [pc, #80]	; (800400c <MRT_checkFlagsValues+0xcc>)
 8003fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	79fb      	ldrb	r3, [r7, #7]
 8003fc2:	4912      	ldr	r1, [pc, #72]	; (800400c <MRT_checkFlagsValues+0xcc>)
 8003fc4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003fc8:	4282      	cmp	r2, r0
 8003fca:	bf38      	it	cc
 8003fcc:	4602      	movcc	r2, r0
 8003fce:	601a      	str	r2, [r3, #0]
		*ext_flash_flags[val_index] = MAX(*rtc_bckp_regs[val_index], *ext_flash_flags[val_index]);
 8003fd0:	79fb      	ldrb	r3, [r7, #7]
 8003fd2:	4a0f      	ldr	r2, [pc, #60]	; (8004010 <MRT_checkFlagsValues+0xd0>)
 8003fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	4619      	mov	r1, r3
 8003fdc:	79fb      	ldrb	r3, [r7, #7]
 8003fde:	4a0b      	ldr	r2, [pc, #44]	; (800400c <MRT_checkFlagsValues+0xcc>)
 8003fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4299      	cmp	r1, r3
 8003fe8:	bf38      	it	cc
 8003fea:	4619      	movcc	r1, r3
 8003fec:	79fb      	ldrb	r3, [r7, #7]
 8003fee:	4a08      	ldr	r2, [pc, #32]	; (8004010 <MRT_checkFlagsValues+0xd0>)
 8003ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ff4:	b2ca      	uxtb	r2, r1
 8003ff6:	701a      	strb	r2, [r3, #0]
		ret = false;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	2000003c 	.word	0x2000003c
 8004010:	2000008c 	.word	0x2000008c

08004014 <MRT_saveTotalTime>:
//Public functions

/*
 * Update every time values in memory
 */
void MRT_saveTotalTime(void){
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0

	//Update variables
	MRT_updateTimeValues();
 8004018:	f000 f852 	bl	80040c0 <MRT_updateTimeValues>

	//Write new RTC time to external flash
	MRT_updateExternalFlashBuffers();
 800401c:	f7ff fee6 	bl	8003dec <MRT_updateExternalFlashBuffers>
	W25qxx_EraseSector(RTC_SECTOR);
 8004020:	2002      	movs	r0, #2
 8004022:	f000 fec5 	bl	8004db0 <W25qxx_EraseSector>
	W25qxx_WriteSector(ext_flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8004026:	2304      	movs	r3, #4
 8004028:	2200      	movs	r2, #0
 800402a:	2102      	movs	r1, #2
 800402c:	480e      	ldr	r0, [pc, #56]	; (8004068 <MRT_saveTotalTime+0x54>)
 800402e:	f001 f809 	bl	8005044 <W25qxx_WriteSector>

	//Write new RTC time to backup registers
	MRT_RTC_setBackupReg(RTC_HOUR, rtc_bckp_reg_hour);
 8004032:	4b0e      	ldr	r3, [pc, #56]	; (800406c <MRT_saveTotalTime+0x58>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4619      	mov	r1, r3
 8004038:	2005      	movs	r0, #5
 800403a:	f7ff f887 	bl	800314c <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_MINUTE, rtc_bckp_reg_min);
 800403e:	4b0c      	ldr	r3, [pc, #48]	; (8004070 <MRT_saveTotalTime+0x5c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4619      	mov	r1, r3
 8004044:	2006      	movs	r0, #6
 8004046:	f7ff f881 	bl	800314c <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_SECOND, rtc_bckp_reg_sec);
 800404a:	4b0a      	ldr	r3, [pc, #40]	; (8004074 <MRT_saveTotalTime+0x60>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4619      	mov	r1, r3
 8004050:	2007      	movs	r0, #7
 8004052:	f7ff f87b 	bl	800314c <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_SUBSEC, rtc_bckp_reg_subsec);
 8004056:	4b08      	ldr	r3, [pc, #32]	; (8004078 <MRT_saveTotalTime+0x64>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4619      	mov	r1, r3
 800405c:	2008      	movs	r0, #8
 800405e:	f7ff f875 	bl	800314c <MRT_RTC_setBackupReg>
}
 8004062:	bf00      	nop
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	2000be80 	.word	0x2000be80
 800406c:	20000344 	.word	0x20000344
 8004070:	20000348 	.word	0x20000348
 8004074:	2000034c 	.word	0x2000034c
 8004078:	20000350 	.word	0x20000350

0800407c <MRT_saveTimeValue>:
//Private functions

/*
 * Save an RTC value (value updated outside the function)
 */
void MRT_saveTimeValue(rtc_backup_reg state){
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	4603      	mov	r3, r0
 8004084:	71fb      	strb	r3, [r7, #7]

	//Write new RTC time to flash memory
	MRT_updateExternalFlashBuffers();
 8004086:	f7ff feb1 	bl	8003dec <MRT_updateExternalFlashBuffers>
	W25qxx_EraseSector(RTC_SECTOR);
 800408a:	2002      	movs	r0, #2
 800408c:	f000 fe90 	bl	8004db0 <W25qxx_EraseSector>
	W25qxx_WriteSector(ext_flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8004090:	2304      	movs	r3, #4
 8004092:	2200      	movs	r2, #0
 8004094:	2102      	movs	r1, #2
 8004096:	4808      	ldr	r0, [pc, #32]	; (80040b8 <MRT_saveTimeValue+0x3c>)
 8004098:	f000 ffd4 	bl	8005044 <W25qxx_WriteSector>

	//Write new RTC time to backup registers
	MRT_RTC_setBackupReg(state, *rtc_bckp_regs[state]);
 800409c:	79fb      	ldrb	r3, [r7, #7]
 800409e:	4a07      	ldr	r2, [pc, #28]	; (80040bc <MRT_saveTimeValue+0x40>)
 80040a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	79fb      	ldrb	r3, [r7, #7]
 80040a8:	4611      	mov	r1, r2
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff f84e 	bl	800314c <MRT_RTC_setBackupReg>
}
 80040b0:	bf00      	nop
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	2000be80 	.word	0x2000be80
 80040bc:	2000003c 	.word	0x2000003c

080040c0 <MRT_updateTimeValues>:


/*
 * Update all time values
 */
void MRT_updateTimeValues(void){
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
	//External Flash
	ext_flash_hour = prev_hour;
 80040c4:	4b13      	ldr	r3, [pc, #76]	; (8004114 <MRT_updateTimeValues+0x54>)
 80040c6:	781a      	ldrb	r2, [r3, #0]
 80040c8:	4b13      	ldr	r3, [pc, #76]	; (8004118 <MRT_updateTimeValues+0x58>)
 80040ca:	701a      	strb	r2, [r3, #0]
	ext_flash_min = prev_min;
 80040cc:	4b13      	ldr	r3, [pc, #76]	; (800411c <MRT_updateTimeValues+0x5c>)
 80040ce:	781a      	ldrb	r2, [r3, #0]
 80040d0:	4b13      	ldr	r3, [pc, #76]	; (8004120 <MRT_updateTimeValues+0x60>)
 80040d2:	701a      	strb	r2, [r3, #0]
	ext_flash_sec = prev_sec;
 80040d4:	4b13      	ldr	r3, [pc, #76]	; (8004124 <MRT_updateTimeValues+0x64>)
 80040d6:	781a      	ldrb	r2, [r3, #0]
 80040d8:	4b13      	ldr	r3, [pc, #76]	; (8004128 <MRT_updateTimeValues+0x68>)
 80040da:	701a      	strb	r2, [r3, #0]
	ext_flash_subsec = prev_subsec;
 80040dc:	4b13      	ldr	r3, [pc, #76]	; (800412c <MRT_updateTimeValues+0x6c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a13      	ldr	r2, [pc, #76]	; (8004130 <MRT_updateTimeValues+0x70>)
 80040e2:	6013      	str	r3, [r2, #0]

	//RTC backup registers
	rtc_bckp_reg_hour = prev_hour;
 80040e4:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <MRT_updateTimeValues+0x54>)
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	461a      	mov	r2, r3
 80040ea:	4b12      	ldr	r3, [pc, #72]	; (8004134 <MRT_updateTimeValues+0x74>)
 80040ec:	601a      	str	r2, [r3, #0]
	rtc_bckp_reg_min = prev_min;
 80040ee:	4b0b      	ldr	r3, [pc, #44]	; (800411c <MRT_updateTimeValues+0x5c>)
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	461a      	mov	r2, r3
 80040f4:	4b10      	ldr	r3, [pc, #64]	; (8004138 <MRT_updateTimeValues+0x78>)
 80040f6:	601a      	str	r2, [r3, #0]
	rtc_bckp_reg_sec = prev_sec;
 80040f8:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <MRT_updateTimeValues+0x64>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	4b0f      	ldr	r3, [pc, #60]	; (800413c <MRT_updateTimeValues+0x7c>)
 8004100:	601a      	str	r2, [r3, #0]
	rtc_bckp_reg_subsec = prev_subsec;
 8004102:	4b0a      	ldr	r3, [pc, #40]	; (800412c <MRT_updateTimeValues+0x6c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a0e      	ldr	r2, [pc, #56]	; (8004140 <MRT_updateTimeValues+0x80>)
 8004108:	6013      	str	r3, [r2, #0]
}
 800410a:	bf00      	nop
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	20000395 	.word	0x20000395
 8004118:	20000385 	.word	0x20000385
 800411c:	20000396 	.word	0x20000396
 8004120:	20000386 	.word	0x20000386
 8004124:	20000397 	.word	0x20000397
 8004128:	20000387 	.word	0x20000387
 800412c:	20000398 	.word	0x20000398
 8004130:	20000388 	.word	0x20000388
 8004134:	20000344 	.word	0x20000344
 8004138:	20000348 	.word	0x20000348
 800413c:	2000034c 	.word	0x2000034c
 8004140:	20000350 	.word	0x20000350

08004144 <MRT_checkTimeValues>:


/*
 * Check for memory issues
 */
uint8_t MRT_checkTimeValues(rtc_backup_reg val_index, uint32_t max_val){
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	4603      	mov	r3, r0
 800414c:	6039      	str	r1, [r7, #0]
 800414e:	71fb      	strb	r3, [r7, #7]

	uint8_t ret = true;
 8004150:	2301      	movs	r3, #1
 8004152:	73fb      	strb	r3, [r7, #15]

	//Check for a random value (unsigned int so can't be negative)
	if (*rtc_bckp_regs[val_index] > max_val){
 8004154:	79fb      	ldrb	r3, [r7, #7]
 8004156:	4a31      	ldr	r2, [pc, #196]	; (800421c <MRT_checkTimeValues+0xd8>)
 8004158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	429a      	cmp	r2, r3
 8004162:	d207      	bcs.n	8004174 <MRT_checkTimeValues+0x30>
		*rtc_bckp_regs[val_index] = 0;
 8004164:	79fb      	ldrb	r3, [r7, #7]
 8004166:	4a2d      	ldr	r2, [pc, #180]	; (800421c <MRT_checkTimeValues+0xd8>)
 8004168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]
		ret = false;
 8004170:	2300      	movs	r3, #0
 8004172:	73fb      	strb	r3, [r7, #15]
	}
	if (*ext_flash_time[val_index - NB_OF_FLAGS] > max_val){
 8004174:	79fb      	ldrb	r3, [r7, #7]
 8004176:	3b05      	subs	r3, #5
 8004178:	4a29      	ldr	r2, [pc, #164]	; (8004220 <MRT_checkTimeValues+0xdc>)
 800417a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	4293      	cmp	r3, r2
 8004186:	d208      	bcs.n	800419a <MRT_checkTimeValues+0x56>
		*ext_flash_time[val_index - NB_OF_FLAGS] = 0;
 8004188:	79fb      	ldrb	r3, [r7, #7]
 800418a:	3b05      	subs	r3, #5
 800418c:	4a24      	ldr	r2, [pc, #144]	; (8004220 <MRT_checkTimeValues+0xdc>)
 800418e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004192:	2200      	movs	r2, #0
 8004194:	701a      	strb	r2, [r3, #0]
		ret = false;
 8004196:	2300      	movs	r3, #0
 8004198:	73fb      	strb	r3, [r7, #15]
	}

	if (*rtc_bckp_regs[val_index] != *ext_flash_time[val_index - NB_OF_FLAGS]){
 800419a:	79fb      	ldrb	r3, [r7, #7]
 800419c:	4a1f      	ldr	r2, [pc, #124]	; (800421c <MRT_checkTimeValues+0xd8>)
 800419e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	79fa      	ldrb	r2, [r7, #7]
 80041a6:	3a05      	subs	r2, #5
 80041a8:	491d      	ldr	r1, [pc, #116]	; (8004220 <MRT_checkTimeValues+0xdc>)
 80041aa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80041ae:	7812      	ldrb	r2, [r2, #0]
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d02b      	beq.n	800420c <MRT_checkTimeValues+0xc8>
		*rtc_bckp_regs[val_index] = MAX(*rtc_bckp_regs[val_index], *ext_flash_time[val_index - NB_OF_FLAGS]);
 80041b4:	79fb      	ldrb	r3, [r7, #7]
 80041b6:	3b05      	subs	r3, #5
 80041b8:	4a19      	ldr	r2, [pc, #100]	; (8004220 <MRT_checkTimeValues+0xdc>)
 80041ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	79fb      	ldrb	r3, [r7, #7]
 80041c4:	4a15      	ldr	r2, [pc, #84]	; (800421c <MRT_checkTimeValues+0xd8>)
 80041c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	79fb      	ldrb	r3, [r7, #7]
 80041ce:	4913      	ldr	r1, [pc, #76]	; (800421c <MRT_checkTimeValues+0xd8>)
 80041d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80041d4:	4282      	cmp	r2, r0
 80041d6:	bf38      	it	cc
 80041d8:	4602      	movcc	r2, r0
 80041da:	601a      	str	r2, [r3, #0]
		*ext_flash_time[val_index - NB_OF_FLAGS] = MAX(*rtc_bckp_regs[val_index], *ext_flash_time[val_index - NB_OF_FLAGS]);
 80041dc:	79fb      	ldrb	r3, [r7, #7]
 80041de:	3b05      	subs	r3, #5
 80041e0:	4a0f      	ldr	r2, [pc, #60]	; (8004220 <MRT_checkTimeValues+0xdc>)
 80041e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	4619      	mov	r1, r3
 80041ea:	79fb      	ldrb	r3, [r7, #7]
 80041ec:	4a0b      	ldr	r2, [pc, #44]	; (800421c <MRT_checkTimeValues+0xd8>)
 80041ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4299      	cmp	r1, r3
 80041f6:	bf38      	it	cc
 80041f8:	4619      	movcc	r1, r3
 80041fa:	79fb      	ldrb	r3, [r7, #7]
 80041fc:	3b05      	subs	r3, #5
 80041fe:	4a08      	ldr	r2, [pc, #32]	; (8004220 <MRT_checkTimeValues+0xdc>)
 8004200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004204:	b2ca      	uxtb	r2, r1
 8004206:	701a      	strb	r2, [r3, #0]
		ret = false;
 8004208:	2300      	movs	r3, #0
 800420a:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 800420c:	7bfb      	ldrb	r3, [r7, #15]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	2000003c 	.word	0x2000003c
 8004220:	200000a0 	.word	0x200000a0

08004224 <MRT_MEMORY_Init>:
//**************************************************//
//MISC


//Public
void MRT_MEMORY_Init(void){
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0

	//External flash
	MRT_external_flash_Init();
 8004228:	f7ff fdac 	bl	8003d84 <MRT_external_flash_Init>

	//Backup registers
	MRT_RTC_backup_regs_Init();
 800422c:	f7fe fee0 	bl	8002ff0 <MRT_RTC_backup_regs_Init>

	//Get the previous flags and rtc time from memory
	MRT_stateRestoration();
 8004230:	f000 f82e 	bl	8004290 <MRT_stateRestoration>
	//TODO SD card (doesn't work)
	#if MEMORY_THREAD

		//SD card
		#if SD_CARD_
			HAL_IWDG_Refresh(&hiwdg);
 8004234:	480f      	ldr	r0, [pc, #60]	; (8004274 <MRT_MEMORY_Init+0x50>)
 8004236:	f006 fe2d 	bl	800ae94 <HAL_IWDG_Refresh>

			// check if SD card is inserted
			if (HAL_GPIO_ReadPin(IN_SD_CARD_DETECT_GPIO_Port, IN_SD_CARD_DETECT_Pin) == GPIO_PIN_RESET) {
 800423a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800423e:	480e      	ldr	r0, [pc, #56]	; (8004278 <MRT_MEMORY_Init+0x54>)
 8004240:	f005 fd2c 	bl	8009c9c <HAL_GPIO_ReadPin>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10f      	bne.n	800426a <MRT_MEMORY_Init+0x46>
			  // init sd card with dynamic filename
			  fres = sd_init_dynamic_filename("AB", sd_file_header, filename);
 800424a:	4a0c      	ldr	r2, [pc, #48]	; (800427c <MRT_MEMORY_Init+0x58>)
 800424c:	490c      	ldr	r1, [pc, #48]	; (8004280 <MRT_MEMORY_Init+0x5c>)
 800424e:	480d      	ldr	r0, [pc, #52]	; (8004284 <MRT_MEMORY_Init+0x60>)
 8004250:	f000 f92e 	bl	80044b0 <sd_init_dynamic_filename>
 8004254:	4603      	mov	r3, r0
 8004256:	461a      	mov	r2, r3
 8004258:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <MRT_MEMORY_Init+0x64>)
 800425a:	701a      	strb	r2, [r3, #0]
			  if (fres != FR_OK) {
 800425c:	4b0a      	ldr	r3, [pc, #40]	; (8004288 <MRT_MEMORY_Init+0x64>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <MRT_MEMORY_Init+0x4c>
					Error_Handler();
 8004264:	f7fe fc14 	bl	8002a90 <Error_Handler>
				println("No SD card inserted");
			  //Error_Handler(); TODO no a good idea if SD card stops working for no reason (will stop the FC)
			}
		#endif
	#endif
}
 8004268:	e002      	b.n	8004270 <MRT_MEMORY_Init+0x4c>
				println("No SD card inserted");
 800426a:	4808      	ldr	r0, [pc, #32]	; (800428c <MRT_MEMORY_Init+0x68>)
 800426c:	f7fc fede 	bl	800102c <println>
}
 8004270:	bf00      	nop
 8004272:	bd80      	pop	{r7, pc}
 8004274:	2000bb20 	.word	0x2000bb20
 8004278:	40020800 	.word	0x40020800
 800427c:	2000c4a8 	.word	0x2000c4a8
 8004280:	0801d5cc 	.word	0x0801d5cc
 8004284:	0801c8e8 	.word	0x0801c8e8
 8004288:	2000c8a0 	.word	0x2000c8a0
 800428c:	0801c8ec 	.word	0x0801c8ec

08004290 <MRT_stateRestoration>:


//Private

//Get the flags values and RTC time
void MRT_stateRestoration(void){
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0

	//Check for a wakeup
	MRT_checkWakeUp();
 8004294:	f000 f8ca 	bl	800442c <MRT_checkWakeUp>

	//If RTC detected a wake up, update the flash memory and the backup registers
	if (wu_flag == 1){
 8004298:	4b51      	ldr	r3, [pc, #324]	; (80043e0 <MRT_stateRestoration+0x150>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d111      	bne.n	80042c4 <MRT_stateRestoration+0x34>

		//Update values
		ext_flash_wu += 1;
 80042a0:	4b50      	ldr	r3, [pc, #320]	; (80043e4 <MRT_stateRestoration+0x154>)
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	3301      	adds	r3, #1
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	4b4e      	ldr	r3, [pc, #312]	; (80043e4 <MRT_stateRestoration+0x154>)
 80042aa:	701a      	strb	r2, [r3, #0]
		rtc_bckp_reg_wu += 1;
 80042ac:	4b4e      	ldr	r3, [pc, #312]	; (80043e8 <MRT_stateRestoration+0x158>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3301      	adds	r3, #1
 80042b2:	4a4d      	ldr	r2, [pc, #308]	; (80043e8 <MRT_stateRestoration+0x158>)
 80042b4:	6013      	str	r3, [r2, #0]

		//Check for memory issues¸
		MRT_checkFlagsValues(FC_STATE_WU, 2);
 80042b6:	2102      	movs	r1, #2
 80042b8:	2001      	movs	r0, #1
 80042ba:	f7ff fe41 	bl	8003f40 <MRT_checkFlagsValues>

		//Update memory
		MRT_saveFlagValue(FC_STATE_WU);
 80042be:	2001      	movs	r0, #1
 80042c0:	f7ff fe1c 	bl	8003efc <MRT_saveFlagValue>
	}
	//Update the wu_flag value
	wu_flag = rtc_bckp_reg_wu;
 80042c4:	4b48      	ldr	r3, [pc, #288]	; (80043e8 <MRT_stateRestoration+0x158>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	4b45      	ldr	r3, [pc, #276]	; (80043e0 <MRT_stateRestoration+0x150>)
 80042cc:	701a      	strb	r2, [r3, #0]


	//Check flags values

	//Reset flag
	if(MRT_checkFlagsValues(FC_STATE_RESET, 1) == false)	MRT_saveFlagValue(FC_STATE_RESET);
 80042ce:	2101      	movs	r1, #1
 80042d0:	2000      	movs	r0, #0
 80042d2:	f7ff fe35 	bl	8003f40 <MRT_checkFlagsValues>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d102      	bne.n	80042e2 <MRT_stateRestoration+0x52>
 80042dc:	2000      	movs	r0, #0
 80042de:	f7ff fe0d 	bl	8003efc <MRT_saveFlagValue>
	reset_flag = rtc_bckp_reg_reset;
 80042e2:	4b42      	ldr	r3, [pc, #264]	; (80043ec <MRT_stateRestoration+0x15c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	4b41      	ldr	r3, [pc, #260]	; (80043f0 <MRT_stateRestoration+0x160>)
 80042ea:	701a      	strb	r2, [r3, #0]

	//Wake up flag (TODO double check??)
	if(MRT_checkFlagsValues(FC_STATE_WU, 1) == false)	MRT_saveFlagValue(FC_STATE_WU);
 80042ec:	2101      	movs	r1, #1
 80042ee:	2001      	movs	r0, #1
 80042f0:	f7ff fe26 	bl	8003f40 <MRT_checkFlagsValues>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d102      	bne.n	8004300 <MRT_stateRestoration+0x70>
 80042fa:	2001      	movs	r0, #1
 80042fc:	f7ff fdfe 	bl	8003efc <MRT_saveFlagValue>
	wu_flag = rtc_bckp_reg_wu;
 8004300:	4b39      	ldr	r3, [pc, #228]	; (80043e8 <MRT_stateRestoration+0x158>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	b2da      	uxtb	r2, r3
 8004306:	4b36      	ldr	r3, [pc, #216]	; (80043e0 <MRT_stateRestoration+0x150>)
 8004308:	701a      	strb	r2, [r3, #0]

	//IWDG flag
	if(MRT_checkFlagsValues(FC_STATE_IWDG, 1) == false)	MRT_saveFlagValue(FC_STATE_IWDG);
 800430a:	2101      	movs	r1, #1
 800430c:	2002      	movs	r0, #2
 800430e:	f7ff fe17 	bl	8003f40 <MRT_checkFlagsValues>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d102      	bne.n	800431e <MRT_stateRestoration+0x8e>
 8004318:	2002      	movs	r0, #2
 800431a:	f7ff fdef 	bl	8003efc <MRT_saveFlagValue>
	iwdg_flag = rtc_bckp_reg_iwdg;
 800431e:	4b35      	ldr	r3, [pc, #212]	; (80043f4 <MRT_stateRestoration+0x164>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	b2da      	uxtb	r2, r3
 8004324:	4b34      	ldr	r3, [pc, #208]	; (80043f8 <MRT_stateRestoration+0x168>)
 8004326:	701a      	strb	r2, [r3, #0]

	//Apogee flag
	if(MRT_checkFlagsValues(FC_STATE_APOGEE, 1) == false)	MRT_saveFlagValue(FC_STATE_APOGEE);
 8004328:	2101      	movs	r1, #1
 800432a:	2003      	movs	r0, #3
 800432c:	f7ff fe08 	bl	8003f40 <MRT_checkFlagsValues>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d102      	bne.n	800433c <MRT_stateRestoration+0xac>
 8004336:	2003      	movs	r0, #3
 8004338:	f7ff fde0 	bl	8003efc <MRT_saveFlagValue>
	apogee_flag = rtc_bckp_reg_apogee;
 800433c:	4b2f      	ldr	r3, [pc, #188]	; (80043fc <MRT_stateRestoration+0x16c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	b2da      	uxtb	r2, r3
 8004342:	4b2f      	ldr	r3, [pc, #188]	; (8004400 <MRT_stateRestoration+0x170>)
 8004344:	701a      	strb	r2, [r3, #0]

	//Ejection state flag
	if(MRT_checkFlagsValues(FC_STATE_FLIGHT, 4) == false)	MRT_saveFlagValue(FC_STATE_FLIGHT);
 8004346:	2104      	movs	r1, #4
 8004348:	2004      	movs	r0, #4
 800434a:	f7ff fdf9 	bl	8003f40 <MRT_checkFlagsValues>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d102      	bne.n	800435a <MRT_stateRestoration+0xca>
 8004354:	2004      	movs	r0, #4
 8004356:	f7ff fdd1 	bl	8003efc <MRT_saveFlagValue>
	ejection_stage_flag = rtc_bckp_reg_ejection_stage;
 800435a:	4b2a      	ldr	r3, [pc, #168]	; (8004404 <MRT_stateRestoration+0x174>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	b2da      	uxtb	r2, r3
 8004360:	4b29      	ldr	r3, [pc, #164]	; (8004408 <MRT_stateRestoration+0x178>)
 8004362:	701a      	strb	r2, [r3, #0]


	//Check RTC time values
	//Hours
	if(MRT_checkTimeValues(RTC_HOUR, 23) == false)	MRT_saveTimeValue(RTC_HOUR);
 8004364:	2117      	movs	r1, #23
 8004366:	2005      	movs	r0, #5
 8004368:	f7ff feec 	bl	8004144 <MRT_checkTimeValues>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d102      	bne.n	8004378 <MRT_stateRestoration+0xe8>
 8004372:	2005      	movs	r0, #5
 8004374:	f7ff fe82 	bl	800407c <MRT_saveTimeValue>
	prev_hour = rtc_bckp_reg_hour;
 8004378:	4b24      	ldr	r3, [pc, #144]	; (800440c <MRT_stateRestoration+0x17c>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	b2da      	uxtb	r2, r3
 800437e:	4b24      	ldr	r3, [pc, #144]	; (8004410 <MRT_stateRestoration+0x180>)
 8004380:	701a      	strb	r2, [r3, #0]

	//Minutes
	if(MRT_checkTimeValues(RTC_MINUTE, 59) == false)	MRT_saveTimeValue(RTC_MINUTE);
 8004382:	213b      	movs	r1, #59	; 0x3b
 8004384:	2006      	movs	r0, #6
 8004386:	f7ff fedd 	bl	8004144 <MRT_checkTimeValues>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d102      	bne.n	8004396 <MRT_stateRestoration+0x106>
 8004390:	2006      	movs	r0, #6
 8004392:	f7ff fe73 	bl	800407c <MRT_saveTimeValue>
	prev_min = rtc_bckp_reg_min;
 8004396:	4b1f      	ldr	r3, [pc, #124]	; (8004414 <MRT_stateRestoration+0x184>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	b2da      	uxtb	r2, r3
 800439c:	4b1e      	ldr	r3, [pc, #120]	; (8004418 <MRT_stateRestoration+0x188>)
 800439e:	701a      	strb	r2, [r3, #0]

	//Seconds
	if(MRT_checkTimeValues(RTC_SECOND, 59) == false)	MRT_saveTimeValue(RTC_SECOND);
 80043a0:	213b      	movs	r1, #59	; 0x3b
 80043a2:	2007      	movs	r0, #7
 80043a4:	f7ff fece 	bl	8004144 <MRT_checkTimeValues>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d102      	bne.n	80043b4 <MRT_stateRestoration+0x124>
 80043ae:	2007      	movs	r0, #7
 80043b0:	f7ff fe64 	bl	800407c <MRT_saveTimeValue>
	prev_sec = rtc_bckp_reg_sec;
 80043b4:	4b19      	ldr	r3, [pc, #100]	; (800441c <MRT_stateRestoration+0x18c>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	4b19      	ldr	r3, [pc, #100]	; (8004420 <MRT_stateRestoration+0x190>)
 80043bc:	701a      	strb	r2, [r3, #0]

	//Sub-Seconds
	if(MRT_checkTimeValues(RTC_SUBSEC, 999) == false)	MRT_saveTimeValue(RTC_SUBSEC);
 80043be:	f240 31e7 	movw	r1, #999	; 0x3e7
 80043c2:	2008      	movs	r0, #8
 80043c4:	f7ff febe 	bl	8004144 <MRT_checkTimeValues>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d102      	bne.n	80043d4 <MRT_stateRestoration+0x144>
 80043ce:	2008      	movs	r0, #8
 80043d0:	f7ff fe54 	bl	800407c <MRT_saveTimeValue>
	prev_subsec = rtc_bckp_reg_subsec;
 80043d4:	4b13      	ldr	r3, [pc, #76]	; (8004424 <MRT_stateRestoration+0x194>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a13      	ldr	r2, [pc, #76]	; (8004428 <MRT_stateRestoration+0x198>)
 80043da:	6013      	str	r3, [r2, #0]
}
 80043dc:	bf00      	nop
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	20000391 	.word	0x20000391
 80043e4:	20000381 	.word	0x20000381
 80043e8:	20000334 	.word	0x20000334
 80043ec:	20000330 	.word	0x20000330
 80043f0:	20000390 	.word	0x20000390
 80043f4:	20000338 	.word	0x20000338
 80043f8:	20000392 	.word	0x20000392
 80043fc:	2000033c 	.word	0x2000033c
 8004400:	20000393 	.word	0x20000393
 8004404:	20000340 	.word	0x20000340
 8004408:	20000394 	.word	0x20000394
 800440c:	20000344 	.word	0x20000344
 8004410:	20000395 	.word	0x20000395
 8004414:	20000348 	.word	0x20000348
 8004418:	20000396 	.word	0x20000396
 800441c:	2000034c 	.word	0x2000034c
 8004420:	20000397 	.word	0x20000397
 8004424:	20000350 	.word	0x20000350
 8004428:	20000398 	.word	0x20000398

0800442c <MRT_checkWakeUp>:


/*
 * Check if FC is back from wakeup
 */
void MRT_checkWakeUp(void){
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8004430:	4b0e      	ldr	r3, [pc, #56]	; (800446c <MRT_checkWakeUp+0x40>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b02      	cmp	r3, #2
 800443a:	d112      	bne.n	8004462 <MRT_checkWakeUp+0x36>
	{

		wu_flag = 1;
 800443c:	4b0c      	ldr	r3, [pc, #48]	; (8004470 <MRT_checkWakeUp+0x44>)
 800443e:	2201      	movs	r2, #1
 8004440:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8004442:	4b0a      	ldr	r3, [pc, #40]	; (800446c <MRT_checkWakeUp+0x40>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a09      	ldr	r2, [pc, #36]	; (800446c <MRT_checkWakeUp+0x40>)
 8004448:	f043 0308 	orr.w	r3, r3, #8
 800444c:	6013      	str	r3, [r2, #0]

		println("Wakeup from STANDBY MODE");
 800444e:	4809      	ldr	r0, [pc, #36]	; (8004474 <MRT_checkWakeUp+0x48>)
 8004450:	f7fc fdec 	bl	800102c <println>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8004454:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004458:	f006 fd3e 	bl	800aed8 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800445c:	4806      	ldr	r0, [pc, #24]	; (8004478 <MRT_checkWakeUp+0x4c>)
 800445e:	f008 f989 	bl	800c774 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_clear_alarms_flags();
 8004462:	f7fe fc45 	bl	8002cf0 <MRT_clear_alarms_flags>
}
 8004466:	bf00      	nop
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	40007000 	.word	0x40007000
 8004470:	20000391 	.word	0x20000391
 8004474:	0801c900 	.word	0x0801c900
 8004478:	2000bb2c 	.word	0x2000bb2c

0800447c <myprintf>:


uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value);
void str2upper(char* string, char* upper);

void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 800447c:	b40f      	push	{r0, r1, r2, r3}
 800447e:	b580      	push	{r7, lr}
 8004480:	b082      	sub	sp, #8
 8004482:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8004484:	f107 0314 	add.w	r3, r7, #20
 8004488:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004492:	4806      	ldr	r0, [pc, #24]	; (80044ac <myprintf+0x30>)
 8004494:	f014 ff32 	bl	80192fc <vsniprintf>
  va_end(args);

  //CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
  //HAL_UART_Transmit(&DEBUGUART, (uint8_t*)buffer, strlen(buffer), -1);
  print(buffer);
 8004498:	4804      	ldr	r0, [pc, #16]	; (80044ac <myprintf+0x30>)
 800449a:	f7fc fde5 	bl	8001068 <print>
}
 800449e:	bf00      	nop
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044a8:	b004      	add	sp, #16
 80044aa:	4770      	bx	lr
 80044ac:	2000039c 	.word	0x2000039c

080044b0 <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b08a      	sub	sp, #40	; 0x28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 80044bc:	2201      	movs	r2, #1
 80044be:	4932      	ldr	r1, [pc, #200]	; (8004588 <sd_init_dynamic_filename+0xd8>)
 80044c0:	4832      	ldr	r0, [pc, #200]	; (800458c <sd_init_dynamic_filename+0xdc>)
 80044c2:	f00c ffa9 	bl	8011418 <f_mount>
 80044c6:	4603      	mov	r3, r0
 80044c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 80044cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d008      	beq.n	80044e6 <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 80044d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044d8:	4619      	mov	r1, r3
 80044da:	482d      	ldr	r0, [pc, #180]	; (8004590 <sd_init_dynamic_filename+0xe0>)
 80044dc:	f7ff ffce 	bl	800447c <myprintf>
		return fres;
 80044e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044e4:	e04b      	b.n	800457e <sd_init_dynamic_filename+0xce>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 80044e6:	2300      	movs	r3, #0
 80044e8:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 80044ea:	f107 0320 	add.w	r3, r7, #32
 80044ee:	461a      	mov	r2, r3
 80044f0:	68f9      	ldr	r1, [r7, #12]
 80044f2:	4825      	ldr	r0, [pc, #148]	; (8004588 <sd_init_dynamic_filename+0xd8>)
 80044f4:	f000 f89c 	bl	8004630 <scan_files>
 80044f8:	4603      	mov	r3, r0
 80044fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "%s%06lu.txt", prefix, max_used_value + 1);
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	3301      	adds	r3, #1
 8004502:	f107 0010 	add.w	r0, r7, #16
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	4922      	ldr	r1, [pc, #136]	; (8004594 <sd_init_dynamic_filename+0xe4>)
 800450a:	f013 fee5 	bl	80182d8 <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 800450e:	f107 0310 	add.w	r3, r7, #16
 8004512:	4619      	mov	r1, r3
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f013 ff70 	bl	80183fa <strcpy>
 800451a:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 800451c:	f107 0310 	add.w	r3, r7, #16
 8004520:	221a      	movs	r2, #26
 8004522:	4619      	mov	r1, r3
 8004524:	481c      	ldr	r0, [pc, #112]	; (8004598 <sd_init_dynamic_filename+0xe8>)
 8004526:	f00c ffdb 	bl	80114e0 <f_open>
 800452a:	4603      	mov	r3, r0
 800452c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 8004530:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004534:	2b00      	cmp	r3, #0
 8004536:	d11a      	bne.n	800456e <sd_init_dynamic_filename+0xbe>
		myprintf("I was able to open filename.txt for writing\r\n");
 8004538:	4818      	ldr	r0, [pc, #96]	; (800459c <sd_init_dynamic_filename+0xec>)
 800453a:	f7ff ff9f 	bl	800447c <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 800453e:	4b16      	ldr	r3, [pc, #88]	; (8004598 <sd_init_dynamic_filename+0xe8>)
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	4619      	mov	r1, r3
 8004544:	4814      	ldr	r0, [pc, #80]	; (8004598 <sd_init_dynamic_filename+0xe8>)
 8004546:	f00d fbec 	bl	8011d22 <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 800454a:	4915      	ldr	r1, [pc, #84]	; (80045a0 <sd_init_dynamic_filename+0xf0>)
 800454c:	4815      	ldr	r0, [pc, #84]	; (80045a4 <sd_init_dynamic_filename+0xf4>)
 800454e:	f013 fec3 	bl	80182d8 <siprintf>
	sd_write(&fil, msg_buffer);
 8004552:	4914      	ldr	r1, [pc, #80]	; (80045a4 <sd_init_dynamic_filename+0xf4>)
 8004554:	4810      	ldr	r0, [pc, #64]	; (8004598 <sd_init_dynamic_filename+0xe8>)
 8004556:	f000 f841 	bl	80045dc <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 800455a:	68b9      	ldr	r1, [r7, #8]
 800455c:	480e      	ldr	r0, [pc, #56]	; (8004598 <sd_init_dynamic_filename+0xe8>)
 800455e:	f000 f83d 	bl	80045dc <sd_write>
	f_close(&fil);
 8004562:	480d      	ldr	r0, [pc, #52]	; (8004598 <sd_init_dynamic_filename+0xe8>)
 8004564:	f00d fbae 	bl	8011cc4 <f_close>

	return fres;
 8004568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800456c:	e007      	b.n	800457e <sd_init_dynamic_filename+0xce>
		myprintf("f_open error (%i)\r\n", fres);
 800456e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004572:	4619      	mov	r1, r3
 8004574:	480c      	ldr	r0, [pc, #48]	; (80045a8 <sd_init_dynamic_filename+0xf8>)
 8004576:	f7ff ff81 	bl	800447c <myprintf>
		return fres;
 800457a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800457e:	4618      	mov	r0, r3
 8004580:	3728      	adds	r7, #40	; 0x28
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	0801c91c 	.word	0x0801c91c
 800458c:	2000be8c 	.word	0x2000be8c
 8004590:	0801c920 	.word	0x0801c920
 8004594:	0801c99c 	.word	0x0801c99c
 8004598:	2000c8a4 	.word	0x2000c8a4
 800459c:	0801c938 	.word	0x0801c938
 80045a0:	0801c97c 	.word	0x0801c97c
 80045a4:	2000c0c0 	.word	0x2000c0c0
 80045a8:	0801c968 	.word	0x0801c968

080045ac <sd_open_file>:

/*
 * always open in mode FA_WRITE | FA_OPEN_ALWAYS and then appends.
 */
FRESULT sd_open_file(char *filename)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
	// write start to SD card
	FRESULT fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS);
 80045b4:	2212      	movs	r2, #18
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	4807      	ldr	r0, [pc, #28]	; (80045d8 <sd_open_file+0x2c>)
 80045ba:	f00c ff91 	bl	80114e0 <f_open>
 80045be:	4603      	mov	r3, r0
 80045c0:	73fb      	strb	r3, [r7, #15]

	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 80045c2:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <sd_open_file+0x2c>)
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	4619      	mov	r1, r3
 80045c8:	4803      	ldr	r0, [pc, #12]	; (80045d8 <sd_open_file+0x2c>)
 80045ca:	f00d fbaa 	bl	8011d22 <f_lseek>

	return fres;
 80045ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	2000c8a4 	.word	0x2000c8a4

080045dc <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 80045e6:	6838      	ldr	r0, [r7, #0]
 80045e8:	f7fb fe0c 	bl	8000204 <strlen>
 80045ec:	4602      	mov	r2, r0
 80045ee:	f107 0308 	add.w	r3, r7, #8
 80045f2:	6839      	ldr	r1, [r7, #0]
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f00d f938 	bl	801186a <f_write>
 80045fa:	4603      	mov	r3, r0
 80045fc:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d107      	bne.n	8004614 <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	4619      	mov	r1, r3
 8004608:	4807      	ldr	r0, [pc, #28]	; (8004628 <sd_write+0x4c>)
 800460a:	f7ff ff37 	bl	800447c <myprintf>
		return bytesWrote;
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	b25b      	sxtb	r3, r3
 8004612:	e004      	b.n	800461e <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 8004614:	4805      	ldr	r0, [pc, #20]	; (800462c <sd_write+0x50>)
 8004616:	f7ff ff31 	bl	800447c <myprintf>
		return -1;
 800461a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800461e:	4618      	mov	r0, r3
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	0801c9a8 	.word	0x0801c9a8
 800462c:	0801c9cc 	.word	0x0801c9cc

08004630 <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 8004630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004632:	b099      	sub	sp, #100	; 0x64
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
 800463c:	466b      	mov	r3, sp
 800463e:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 8004640:	68b8      	ldr	r0, [r7, #8]
 8004642:	f7fb fddf 	bl	8000204 <strlen>
 8004646:	4603      	mov	r3, r0
 8004648:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 800464c:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8004650:	4623      	mov	r3, r4
 8004652:	3b01      	subs	r3, #1
 8004654:	65bb      	str	r3, [r7, #88]	; 0x58
 8004656:	b2e0      	uxtb	r0, r4
 8004658:	f04f 0100 	mov.w	r1, #0
 800465c:	f04f 0200 	mov.w	r2, #0
 8004660:	f04f 0300 	mov.w	r3, #0
 8004664:	00cb      	lsls	r3, r1, #3
 8004666:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800466a:	00c2      	lsls	r2, r0, #3
 800466c:	b2e0      	uxtb	r0, r4
 800466e:	f04f 0100 	mov.w	r1, #0
 8004672:	f04f 0200 	mov.w	r2, #0
 8004676:	f04f 0300 	mov.w	r3, #0
 800467a:	00cb      	lsls	r3, r1, #3
 800467c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004680:	00c2      	lsls	r2, r0, #3
 8004682:	4623      	mov	r3, r4
 8004684:	3307      	adds	r3, #7
 8004686:	08db      	lsrs	r3, r3, #3
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	ebad 0d03 	sub.w	sp, sp, r3
 800468e:	466b      	mov	r3, sp
 8004690:	3300      	adds	r3, #0
 8004692:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 8004694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004696:	4619      	mov	r1, r3
 8004698:	68b8      	ldr	r0, [r7, #8]
 800469a:	f000 f8ff 	bl	800489c <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 80046a4:	2300      	movs	r3, #0
 80046a6:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 80046a8:	f107 0318 	add.w	r3, r7, #24
 80046ac:	68f9      	ldr	r1, [r7, #12]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f00d fd8a 	bl	80121c8 <f_opendir>
 80046b4:	4603      	mov	r3, r0
 80046b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 80046ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d16c      	bne.n	800479c <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80046c2:	f107 0318 	add.w	r3, r7, #24
 80046c6:	4939      	ldr	r1, [pc, #228]	; (80047ac <scan_files+0x17c>)
 80046c8:	4618      	mov	r0, r3
 80046ca:	f00d fe21 	bl	8012310 <f_readdir>
 80046ce:	4603      	mov	r3, r0
 80046d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80046d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d15a      	bne.n	8004792 <scan_files+0x162>
 80046dc:	4b33      	ldr	r3, [pc, #204]	; (80047ac <scan_files+0x17c>)
 80046de:	7a5b      	ldrb	r3, [r3, #9]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d056      	beq.n	8004792 <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 80046e4:	4b31      	ldr	r3, [pc, #196]	; (80047ac <scan_files+0x17c>)
 80046e6:	7a1b      	ldrb	r3, [r3, #8]
 80046e8:	f003 0310 	and.w	r3, r3, #16
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d14e      	bne.n	800478e <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 80046f0:	466b      	mov	r3, sp
 80046f2:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 80046f4:	482e      	ldr	r0, [pc, #184]	; (80047b0 <scan_files+0x180>)
 80046f6:	f7fb fd85 	bl	8000204 <strlen>
 80046fa:	4604      	mov	r4, r0
 80046fc:	4623      	mov	r3, r4
 80046fe:	3b01      	subs	r3, #1
 8004700:	653b      	str	r3, [r7, #80]	; 0x50
 8004702:	4620      	mov	r0, r4
 8004704:	f04f 0100 	mov.w	r1, #0
 8004708:	f04f 0200 	mov.w	r2, #0
 800470c:	f04f 0300 	mov.w	r3, #0
 8004710:	00cb      	lsls	r3, r1, #3
 8004712:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004716:	00c2      	lsls	r2, r0, #3
 8004718:	4620      	mov	r0, r4
 800471a:	f04f 0100 	mov.w	r1, #0
 800471e:	f04f 0200 	mov.w	r2, #0
 8004722:	f04f 0300 	mov.w	r3, #0
 8004726:	00cb      	lsls	r3, r1, #3
 8004728:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800472c:	00c2      	lsls	r2, r0, #3
 800472e:	1de3      	adds	r3, r4, #7
 8004730:	08db      	lsrs	r3, r3, #3
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	ebad 0d03 	sub.w	sp, sp, r3
 8004738:	466b      	mov	r3, sp
 800473a:	3300      	adds	r3, #0
 800473c:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 800473e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004740:	4619      	mov	r1, r3
 8004742:	481b      	ldr	r0, [pc, #108]	; (80047b0 <scan_files+0x180>)
 8004744:	f000 f8aa 	bl	800489c <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 8004748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800474a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800474e:	4619      	mov	r1, r3
 8004750:	4817      	ldr	r0, [pc, #92]	; (80047b0 <scan_files+0x180>)
 8004752:	f013 fe5a 	bl	801840a <strncmp>
 8004756:	4603      	mov	r3, r0
 8004758:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 800475c:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8004760:	2b00      	cmp	r3, #0
 8004762:	d112      	bne.n	800478a <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 8004764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004766:	f107 0214 	add.w	r2, r7, #20
 800476a:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 800476e:	4618      	mov	r0, r3
 8004770:	f000 f820 	bl	80047b4 <extract_filename_suffix>
 8004774:	4603      	mov	r3, r0
 8004776:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	429a      	cmp	r2, r3
 8004782:	d202      	bcs.n	800478a <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	46b5      	mov	sp, r6
 800478c:	e799      	b.n	80046c2 <scan_files+0x92>
            	continue; // don't enter directory
 800478e:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8004790:	e797      	b.n	80046c2 <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 8004792:	f107 0318 	add.w	r3, r7, #24
 8004796:	4618      	mov	r0, r3
 8004798:	f00d fd8f 	bl	80122ba <f_closedir>
    }

    return res;
 800479c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80047a0:	46ad      	mov	sp, r5
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3764      	adds	r7, #100	; 0x64
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047aa:	bf00      	nop
 80047ac:	2000049c 	.word	0x2000049c
 80047b0:	200004a5 	.word	0x200004a5

080047b4 <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 80047b4:	b5b0      	push	{r4, r5, r7, lr}
 80047b6:	b088      	sub	sp, #32
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	460b      	mov	r3, r1
 80047be:	607a      	str	r2, [r7, #4]
 80047c0:	72fb      	strb	r3, [r7, #11]
 80047c2:	466b      	mov	r3, sp
 80047c4:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f7fb fd1c 	bl	8000204 <strlen>
 80047cc:	4603      	mov	r3, r0
 80047ce:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 80047d0:	2308      	movs	r3, #8
 80047d2:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 80047d4:	7f7c      	ldrb	r4, [r7, #29]
 80047d6:	4623      	mov	r3, r4
 80047d8:	3b01      	subs	r3, #1
 80047da:	61bb      	str	r3, [r7, #24]
 80047dc:	b2e0      	uxtb	r0, r4
 80047de:	f04f 0100 	mov.w	r1, #0
 80047e2:	f04f 0200 	mov.w	r2, #0
 80047e6:	f04f 0300 	mov.w	r3, #0
 80047ea:	00cb      	lsls	r3, r1, #3
 80047ec:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80047f0:	00c2      	lsls	r2, r0, #3
 80047f2:	b2e0      	uxtb	r0, r4
 80047f4:	f04f 0100 	mov.w	r1, #0
 80047f8:	f04f 0200 	mov.w	r2, #0
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	00cb      	lsls	r3, r1, #3
 8004802:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004806:	00c2      	lsls	r2, r0, #3
 8004808:	4623      	mov	r3, r4
 800480a:	3307      	adds	r3, #7
 800480c:	08db      	lsrs	r3, r3, #3
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	ebad 0d03 	sub.w	sp, sp, r3
 8004814:	466b      	mov	r3, sp
 8004816:	3300      	adds	r3, #0
 8004818:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 800481a:	2300      	movs	r3, #0
 800481c:	77fb      	strb	r3, [r7, #31]
 800481e:	e014      	b.n	800484a <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 8004820:	7afb      	ldrb	r3, [r7, #11]
 8004822:	1e5a      	subs	r2, r3, #1
 8004824:	7ffb      	ldrb	r3, [r7, #31]
 8004826:	441a      	add	r2, r3
 8004828:	7fbb      	ldrb	r3, [r7, #30]
 800482a:	3b01      	subs	r3, #1
 800482c:	429a      	cmp	r2, r3
 800482e:	da11      	bge.n	8004854 <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 8004830:	7afa      	ldrb	r2, [r7, #11]
 8004832:	7ffb      	ldrb	r3, [r7, #31]
 8004834:	4413      	add	r3, r2
 8004836:	461a      	mov	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	441a      	add	r2, r3
 800483c:	7ffb      	ldrb	r3, [r7, #31]
 800483e:	7811      	ldrb	r1, [r2, #0]
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 8004844:	7ffb      	ldrb	r3, [r7, #31]
 8004846:	3301      	adds	r3, #1
 8004848:	77fb      	strb	r3, [r7, #31]
 800484a:	7ffa      	ldrb	r2, [r7, #31]
 800484c:	7f7b      	ldrb	r3, [r7, #29]
 800484e:	429a      	cmp	r2, r3
 8004850:	d3e6      	bcc.n	8004820 <extract_filename_suffix+0x6c>
 8004852:	e000      	b.n	8004856 <extract_filename_suffix+0xa2>
		}
		else break;
 8004854:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f107 0110 	add.w	r1, r7, #16
 800485c:	220a      	movs	r2, #10
 800485e:	4618      	mov	r0, r3
 8004860:	f014 fc98 	bl	8019194 <strtol>
 8004864:	4603      	mov	r3, r0
 8004866:	461a      	mov	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	429a      	cmp	r2, r3
 8004872:	d00a      	beq.n	800488a <extract_filename_suffix+0xd6>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800487c:	d005      	beq.n	800488a <extract_filename_suffix+0xd6>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004886:	4293      	cmp	r3, r2
 8004888:	d101      	bne.n	800488e <extract_filename_suffix+0xda>
	{
		return 1;
 800488a:	2301      	movs	r3, #1
 800488c:	e000      	b.n	8004890 <extract_filename_suffix+0xdc>
	}

	return 0;
 800488e:	2300      	movs	r3, #0
 8004890:	46ad      	mov	sp, r5
}
 8004892:	4618      	mov	r0, r3
 8004894:	3720      	adds	r7, #32
 8004896:	46bd      	mov	sp, r7
 8004898:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800489c <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 800489c:	b590      	push	{r4, r7, lr}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 80048a6:	2300      	movs	r3, #0
 80048a8:	73fb      	strb	r3, [r7, #15]
 80048aa:	e019      	b.n	80048e0 <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	4413      	add	r3, r2
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	73bb      	strb	r3, [r7, #14]
 80048b6:	7bbb      	ldrb	r3, [r7, #14]
 80048b8:	3301      	adds	r3, #1
 80048ba:	4a0f      	ldr	r2, [pc, #60]	; (80048f8 <str2upper+0x5c>)
 80048bc:	4413      	add	r3, r2
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	f003 0303 	and.w	r3, r3, #3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d102      	bne.n	80048ce <str2upper+0x32>
 80048c8:	7bbb      	ldrb	r3, [r7, #14]
 80048ca:	3b20      	subs	r3, #32
 80048cc:	e000      	b.n	80048d0 <str2upper+0x34>
 80048ce:	7bbb      	ldrb	r3, [r7, #14]
 80048d0:	7bfa      	ldrb	r2, [r7, #15]
 80048d2:	6839      	ldr	r1, [r7, #0]
 80048d4:	440a      	add	r2, r1
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 80048da:	7bfb      	ldrb	r3, [r7, #15]
 80048dc:	3301      	adds	r3, #1
 80048de:	73fb      	strb	r3, [r7, #15]
 80048e0:	7bfc      	ldrb	r4, [r7, #15]
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7fb fc8e 	bl	8000204 <strlen>
 80048e8:	4603      	mov	r3, r0
 80048ea:	429c      	cmp	r4, r3
 80048ec:	d3de      	bcc.n	80048ac <str2upper+0x10>
	}
}
 80048ee:	bf00      	nop
 80048f0:	bf00      	nop
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd90      	pop	{r4, r7, pc}
 80048f8:	0801d730 	.word	0x0801d730

080048fc <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af02      	add	r7, sp, #8
 8004902:	4603      	mov	r3, r0
 8004904:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8004906:	f107 020f 	add.w	r2, r7, #15
 800490a:	1df9      	adds	r1, r7, #7
 800490c:	2364      	movs	r3, #100	; 0x64
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	2301      	movs	r3, #1
 8004912:	4804      	ldr	r0, [pc, #16]	; (8004924 <W25qxx_Spi+0x28>)
 8004914:	f008 fab2 	bl	800ce7c <HAL_SPI_TransmitReceive>
	return ret;
 8004918:	7bfb      	ldrb	r3, [r7, #15]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	2000bba4 	.word	0x2000bba4

08004928 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800492e:	2300      	movs	r3, #0
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	2300      	movs	r3, #0
 8004934:	60bb      	str	r3, [r7, #8]
 8004936:	2300      	movs	r3, #0
 8004938:	607b      	str	r3, [r7, #4]
 800493a:	2300      	movs	r3, #0
 800493c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800493e:	2200      	movs	r2, #0
 8004940:	2140      	movs	r1, #64	; 0x40
 8004942:	4813      	ldr	r0, [pc, #76]	; (8004990 <W25qxx_ReadID+0x68>)
 8004944:	f005 f9c2 	bl	8009ccc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8004948:	209f      	movs	r0, #159	; 0x9f
 800494a:	f7ff ffd7 	bl	80048fc <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800494e:	20a5      	movs	r0, #165	; 0xa5
 8004950:	f7ff ffd4 	bl	80048fc <W25qxx_Spi>
 8004954:	4603      	mov	r3, r0
 8004956:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004958:	20a5      	movs	r0, #165	; 0xa5
 800495a:	f7ff ffcf 	bl	80048fc <W25qxx_Spi>
 800495e:	4603      	mov	r3, r0
 8004960:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004962:	20a5      	movs	r0, #165	; 0xa5
 8004964:	f7ff ffca 	bl	80048fc <W25qxx_Spi>
 8004968:	4603      	mov	r3, r0
 800496a:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800496c:	2201      	movs	r2, #1
 800496e:	2140      	movs	r1, #64	; 0x40
 8004970:	4807      	ldr	r0, [pc, #28]	; (8004990 <W25qxx_ReadID+0x68>)
 8004972:	f005 f9ab 	bl	8009ccc <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	041a      	lsls	r2, r3, #16
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	021b      	lsls	r3, r3, #8
 800497e:	4313      	orrs	r3, r2
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]
	return Temp;
 8004986:	68fb      	ldr	r3, [r7, #12]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40020c00 	.word	0x40020c00

08004994 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8004994:	b590      	push	{r4, r7, lr}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800499a:	2200      	movs	r2, #0
 800499c:	2140      	movs	r1, #64	; 0x40
 800499e:	4816      	ldr	r0, [pc, #88]	; (80049f8 <W25qxx_ReadUniqID+0x64>)
 80049a0:	f005 f994 	bl	8009ccc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 80049a4:	204b      	movs	r0, #75	; 0x4b
 80049a6:	f7ff ffa9 	bl	80048fc <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80049aa:	2300      	movs	r3, #0
 80049ac:	71fb      	strb	r3, [r7, #7]
 80049ae:	e005      	b.n	80049bc <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80049b0:	20a5      	movs	r0, #165	; 0xa5
 80049b2:	f7ff ffa3 	bl	80048fc <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80049b6:	79fb      	ldrb	r3, [r7, #7]
 80049b8:	3301      	adds	r3, #1
 80049ba:	71fb      	strb	r3, [r7, #7]
 80049bc:	79fb      	ldrb	r3, [r7, #7]
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d9f6      	bls.n	80049b0 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 80049c2:	2300      	movs	r3, #0
 80049c4:	71bb      	strb	r3, [r7, #6]
 80049c6:	e00b      	b.n	80049e0 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80049c8:	79bc      	ldrb	r4, [r7, #6]
 80049ca:	20a5      	movs	r0, #165	; 0xa5
 80049cc:	f7ff ff96 	bl	80048fc <W25qxx_Spi>
 80049d0:	4603      	mov	r3, r0
 80049d2:	461a      	mov	r2, r3
 80049d4:	4b09      	ldr	r3, [pc, #36]	; (80049fc <W25qxx_ReadUniqID+0x68>)
 80049d6:	4423      	add	r3, r4
 80049d8:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 80049da:	79bb      	ldrb	r3, [r7, #6]
 80049dc:	3301      	adds	r3, #1
 80049de:	71bb      	strb	r3, [r7, #6]
 80049e0:	79bb      	ldrb	r3, [r7, #6]
 80049e2:	2b07      	cmp	r3, #7
 80049e4:	d9f0      	bls.n	80049c8 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80049e6:	2201      	movs	r2, #1
 80049e8:	2140      	movs	r1, #64	; 0x40
 80049ea:	4803      	ldr	r0, [pc, #12]	; (80049f8 <W25qxx_ReadUniqID+0x64>)
 80049ec:	f005 f96e 	bl	8009ccc <HAL_GPIO_WritePin>
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd90      	pop	{r4, r7, pc}
 80049f8:	40020c00 	.word	0x40020c00
 80049fc:	2000cad4 	.word	0x2000cad4

08004a00 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004a04:	2200      	movs	r2, #0
 8004a06:	2140      	movs	r1, #64	; 0x40
 8004a08:	4807      	ldr	r0, [pc, #28]	; (8004a28 <W25qxx_WriteEnable+0x28>)
 8004a0a:	f005 f95f 	bl	8009ccc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8004a0e:	2006      	movs	r0, #6
 8004a10:	f7ff ff74 	bl	80048fc <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004a14:	2201      	movs	r2, #1
 8004a16:	2140      	movs	r1, #64	; 0x40
 8004a18:	4803      	ldr	r0, [pc, #12]	; (8004a28 <W25qxx_WriteEnable+0x28>)
 8004a1a:	f005 f957 	bl	8009ccc <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8004a1e:	2001      	movs	r0, #1
 8004a20:	f00d ff18 	bl	8012854 <osDelay>
}
 8004a24:	bf00      	nop
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40020c00 	.word	0x40020c00

08004a2c <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	4603      	mov	r3, r0
 8004a34:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8004a36:	2300      	movs	r3, #0
 8004a38:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	2140      	movs	r1, #64	; 0x40
 8004a3e:	481c      	ldr	r0, [pc, #112]	; (8004ab0 <W25qxx_ReadStatusRegister+0x84>)
 8004a40:	f005 f944 	bl	8009ccc <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8004a44:	79fb      	ldrb	r3, [r7, #7]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d10c      	bne.n	8004a64 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8004a4a:	2005      	movs	r0, #5
 8004a4c:	f7ff ff56 	bl	80048fc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004a50:	20a5      	movs	r0, #165	; 0xa5
 8004a52:	f7ff ff53 	bl	80048fc <W25qxx_Spi>
 8004a56:	4603      	mov	r3, r0
 8004a58:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8004a5a:	4a16      	ldr	r2, [pc, #88]	; (8004ab4 <W25qxx_ReadStatusRegister+0x88>)
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
 8004a5e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8004a62:	e01b      	b.n	8004a9c <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8004a64:	79fb      	ldrb	r3, [r7, #7]
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d10c      	bne.n	8004a84 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8004a6a:	2035      	movs	r0, #53	; 0x35
 8004a6c:	f7ff ff46 	bl	80048fc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004a70:	20a5      	movs	r0, #165	; 0xa5
 8004a72:	f7ff ff43 	bl	80048fc <W25qxx_Spi>
 8004a76:	4603      	mov	r3, r0
 8004a78:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8004a7a:	4a0e      	ldr	r2, [pc, #56]	; (8004ab4 <W25qxx_ReadStatusRegister+0x88>)
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
 8004a7e:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8004a82:	e00b      	b.n	8004a9c <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8004a84:	2015      	movs	r0, #21
 8004a86:	f7ff ff39 	bl	80048fc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004a8a:	20a5      	movs	r0, #165	; 0xa5
 8004a8c:	f7ff ff36 	bl	80048fc <W25qxx_Spi>
 8004a90:	4603      	mov	r3, r0
 8004a92:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8004a94:	4a07      	ldr	r2, [pc, #28]	; (8004ab4 <W25qxx_ReadStatusRegister+0x88>)
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
 8004a98:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	2140      	movs	r1, #64	; 0x40
 8004aa0:	4803      	ldr	r0, [pc, #12]	; (8004ab0 <W25qxx_ReadStatusRegister+0x84>)
 8004aa2:	f005 f913 	bl	8009ccc <HAL_GPIO_WritePin>
	return status;
 8004aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	40020c00 	.word	0x40020c00
 8004ab4:	2000cad4 	.word	0x2000cad4

08004ab8 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8004abc:	2001      	movs	r0, #1
 8004abe:	f00d fec9 	bl	8012854 <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	2140      	movs	r1, #64	; 0x40
 8004ac6:	480f      	ldr	r0, [pc, #60]	; (8004b04 <W25qxx_WaitForWriteEnd+0x4c>)
 8004ac8:	f005 f900 	bl	8009ccc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8004acc:	2005      	movs	r0, #5
 8004ace:	f7ff ff15 	bl	80048fc <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004ad2:	20a5      	movs	r0, #165	; 0xa5
 8004ad4:	f7ff ff12 	bl	80048fc <W25qxx_Spi>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	461a      	mov	r2, r3
 8004adc:	4b0a      	ldr	r3, [pc, #40]	; (8004b08 <W25qxx_WaitForWriteEnd+0x50>)
 8004ade:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8004ae2:	2001      	movs	r0, #1
 8004ae4:	f00d feb6 	bl	8012854 <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8004ae8:	4b07      	ldr	r3, [pc, #28]	; (8004b08 <W25qxx_WaitForWriteEnd+0x50>)
 8004aea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1ed      	bne.n	8004ad2 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004af6:	2201      	movs	r2, #1
 8004af8:	2140      	movs	r1, #64	; 0x40
 8004afa:	4802      	ldr	r0, [pc, #8]	; (8004b04 <W25qxx_WaitForWriteEnd+0x4c>)
 8004afc:	f005 f8e6 	bl	8009ccc <HAL_GPIO_WritePin>
}
 8004b00:	bf00      	nop
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	40020c00 	.word	0x40020c00
 8004b08:	2000cad4 	.word	0x2000cad4

08004b0c <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8004b12:	4b90      	ldr	r3, [pc, #576]	; (8004d54 <W25qxx_Init+0x248>)
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8004b1a:	e002      	b.n	8004b22 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8004b1c:	2001      	movs	r0, #1
 8004b1e:	f00d fe99 	bl	8012854 <osDelay>
	while (HAL_GetTick() < 100)
 8004b22:	f004 f9bb 	bl	8008e9c <HAL_GetTick>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b63      	cmp	r3, #99	; 0x63
 8004b2a:	d9f7      	bls.n	8004b1c <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	2140      	movs	r1, #64	; 0x40
 8004b30:	4889      	ldr	r0, [pc, #548]	; (8004d58 <W25qxx_Init+0x24c>)
 8004b32:	f005 f8cb 	bl	8009ccc <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8004b36:	2064      	movs	r0, #100	; 0x64
 8004b38:	f00d fe8c 	bl	8012854 <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 8004b3c:	4887      	ldr	r0, [pc, #540]	; (8004d5c <W25qxx_Init+0x250>)
 8004b3e:	f013 faff 	bl	8018140 <puts>
#endif
	id = W25qxx_ReadID();
 8004b42:	f7ff fef1 	bl	8004928 <W25qxx_ReadID>
 8004b46:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 8004b48:	6879      	ldr	r1, [r7, #4]
 8004b4a:	4885      	ldr	r0, [pc, #532]	; (8004d60 <W25qxx_Init+0x254>)
 8004b4c:	f013 fa72 	bl	8018034 <iprintf>
#endif
	switch (id & 0x000000FF)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	3b11      	subs	r3, #17
 8004b56:	2b0f      	cmp	r3, #15
 8004b58:	f200 808b 	bhi.w	8004c72 <W25qxx_Init+0x166>
 8004b5c:	a201      	add	r2, pc, #4	; (adr r2, 8004b64 <W25qxx_Init+0x58>)
 8004b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b62:	bf00      	nop
 8004b64:	08004c5f 	.word	0x08004c5f
 8004b68:	08004c4b 	.word	0x08004c4b
 8004b6c:	08004c37 	.word	0x08004c37
 8004b70:	08004c23 	.word	0x08004c23
 8004b74:	08004c0f 	.word	0x08004c0f
 8004b78:	08004bfb 	.word	0x08004bfb
 8004b7c:	08004be7 	.word	0x08004be7
 8004b80:	08004bd1 	.word	0x08004bd1
 8004b84:	08004bbb 	.word	0x08004bbb
 8004b88:	08004c73 	.word	0x08004c73
 8004b8c:	08004c73 	.word	0x08004c73
 8004b90:	08004c73 	.word	0x08004c73
 8004b94:	08004c73 	.word	0x08004c73
 8004b98:	08004c73 	.word	0x08004c73
 8004b9c:	08004c73 	.word	0x08004c73
 8004ba0:	08004ba5 	.word	0x08004ba5
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8004ba4:	4b6b      	ldr	r3, [pc, #428]	; (8004d54 <W25qxx_Init+0x248>)
 8004ba6:	220a      	movs	r2, #10
 8004ba8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8004baa:	4b6a      	ldr	r3, [pc, #424]	; (8004d54 <W25qxx_Init+0x248>)
 8004bac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bb0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 8004bb2:	486c      	ldr	r0, [pc, #432]	; (8004d64 <W25qxx_Init+0x258>)
 8004bb4:	f013 fac4 	bl	8018140 <puts>
#endif
		break;
 8004bb8:	e064      	b.n	8004c84 <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8004bba:	4b66      	ldr	r3, [pc, #408]	; (8004d54 <W25qxx_Init+0x248>)
 8004bbc:	2209      	movs	r2, #9
 8004bbe:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8004bc0:	4b64      	ldr	r3, [pc, #400]	; (8004d54 <W25qxx_Init+0x248>)
 8004bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bc6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 8004bc8:	4867      	ldr	r0, [pc, #412]	; (8004d68 <W25qxx_Init+0x25c>)
 8004bca:	f013 fab9 	bl	8018140 <puts>
#endif
		break;
 8004bce:	e059      	b.n	8004c84 <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8004bd0:	4b60      	ldr	r3, [pc, #384]	; (8004d54 <W25qxx_Init+0x248>)
 8004bd2:	2208      	movs	r2, #8
 8004bd4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8004bd6:	4b5f      	ldr	r3, [pc, #380]	; (8004d54 <W25qxx_Init+0x248>)
 8004bd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bdc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 8004bde:	4863      	ldr	r0, [pc, #396]	; (8004d6c <W25qxx_Init+0x260>)
 8004be0:	f013 faae 	bl	8018140 <puts>
#endif
		break;
 8004be4:	e04e      	b.n	8004c84 <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8004be6:	4b5b      	ldr	r3, [pc, #364]	; (8004d54 <W25qxx_Init+0x248>)
 8004be8:	2207      	movs	r2, #7
 8004bea:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8004bec:	4b59      	ldr	r3, [pc, #356]	; (8004d54 <W25qxx_Init+0x248>)
 8004bee:	2280      	movs	r2, #128	; 0x80
 8004bf0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 8004bf2:	485f      	ldr	r0, [pc, #380]	; (8004d70 <W25qxx_Init+0x264>)
 8004bf4:	f013 faa4 	bl	8018140 <puts>
#endif
		break;
 8004bf8:	e044      	b.n	8004c84 <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8004bfa:	4b56      	ldr	r3, [pc, #344]	; (8004d54 <W25qxx_Init+0x248>)
 8004bfc:	2206      	movs	r2, #6
 8004bfe:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8004c00:	4b54      	ldr	r3, [pc, #336]	; (8004d54 <W25qxx_Init+0x248>)
 8004c02:	2240      	movs	r2, #64	; 0x40
 8004c04:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 8004c06:	485b      	ldr	r0, [pc, #364]	; (8004d74 <W25qxx_Init+0x268>)
 8004c08:	f013 fa9a 	bl	8018140 <puts>
#endif
		break;
 8004c0c:	e03a      	b.n	8004c84 <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8004c0e:	4b51      	ldr	r3, [pc, #324]	; (8004d54 <W25qxx_Init+0x248>)
 8004c10:	2205      	movs	r2, #5
 8004c12:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8004c14:	4b4f      	ldr	r3, [pc, #316]	; (8004d54 <W25qxx_Init+0x248>)
 8004c16:	2220      	movs	r2, #32
 8004c18:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 8004c1a:	4857      	ldr	r0, [pc, #348]	; (8004d78 <W25qxx_Init+0x26c>)
 8004c1c:	f013 fa90 	bl	8018140 <puts>
#endif
		break;
 8004c20:	e030      	b.n	8004c84 <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8004c22:	4b4c      	ldr	r3, [pc, #304]	; (8004d54 <W25qxx_Init+0x248>)
 8004c24:	2204      	movs	r2, #4
 8004c26:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8004c28:	4b4a      	ldr	r3, [pc, #296]	; (8004d54 <W25qxx_Init+0x248>)
 8004c2a:	2210      	movs	r2, #16
 8004c2c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 8004c2e:	4853      	ldr	r0, [pc, #332]	; (8004d7c <W25qxx_Init+0x270>)
 8004c30:	f013 fa86 	bl	8018140 <puts>
#endif
		break;
 8004c34:	e026      	b.n	8004c84 <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8004c36:	4b47      	ldr	r3, [pc, #284]	; (8004d54 <W25qxx_Init+0x248>)
 8004c38:	2203      	movs	r2, #3
 8004c3a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8004c3c:	4b45      	ldr	r3, [pc, #276]	; (8004d54 <W25qxx_Init+0x248>)
 8004c3e:	2208      	movs	r2, #8
 8004c40:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 8004c42:	484f      	ldr	r0, [pc, #316]	; (8004d80 <W25qxx_Init+0x274>)
 8004c44:	f013 fa7c 	bl	8018140 <puts>
#endif
		break;
 8004c48:	e01c      	b.n	8004c84 <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8004c4a:	4b42      	ldr	r3, [pc, #264]	; (8004d54 <W25qxx_Init+0x248>)
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8004c50:	4b40      	ldr	r3, [pc, #256]	; (8004d54 <W25qxx_Init+0x248>)
 8004c52:	2204      	movs	r2, #4
 8004c54:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 8004c56:	484b      	ldr	r0, [pc, #300]	; (8004d84 <W25qxx_Init+0x278>)
 8004c58:	f013 fa72 	bl	8018140 <puts>
#endif
		break;
 8004c5c:	e012      	b.n	8004c84 <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8004c5e:	4b3d      	ldr	r3, [pc, #244]	; (8004d54 <W25qxx_Init+0x248>)
 8004c60:	2201      	movs	r2, #1
 8004c62:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8004c64:	4b3b      	ldr	r3, [pc, #236]	; (8004d54 <W25qxx_Init+0x248>)
 8004c66:	2202      	movs	r2, #2
 8004c68:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 8004c6a:	4847      	ldr	r0, [pc, #284]	; (8004d88 <W25qxx_Init+0x27c>)
 8004c6c:	f013 fa68 	bl	8018140 <puts>
#endif
		break;
 8004c70:	e008      	b.n	8004c84 <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 8004c72:	4846      	ldr	r0, [pc, #280]	; (8004d8c <W25qxx_Init+0x280>)
 8004c74:	f013 fa64 	bl	8018140 <puts>
#endif
		w25qxx.Lock = 0;
 8004c78:	4b36      	ldr	r3, [pc, #216]	; (8004d54 <W25qxx_Init+0x248>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8004c80:	2300      	movs	r3, #0
 8004c82:	e063      	b.n	8004d4c <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 8004c84:	4b33      	ldr	r3, [pc, #204]	; (8004d54 <W25qxx_Init+0x248>)
 8004c86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c8a:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8004c8c:	4b31      	ldr	r3, [pc, #196]	; (8004d54 <W25qxx_Init+0x248>)
 8004c8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c92:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8004c94:	4b2f      	ldr	r3, [pc, #188]	; (8004d54 <W25qxx_Init+0x248>)
 8004c96:	69db      	ldr	r3, [r3, #28]
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	4a2e      	ldr	r2, [pc, #184]	; (8004d54 <W25qxx_Init+0x248>)
 8004c9c:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8004c9e:	4b2d      	ldr	r3, [pc, #180]	; (8004d54 <W25qxx_Init+0x248>)
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	4a2c      	ldr	r2, [pc, #176]	; (8004d54 <W25qxx_Init+0x248>)
 8004ca4:	6912      	ldr	r2, [r2, #16]
 8004ca6:	fb02 f303 	mul.w	r3, r2, r3
 8004caa:	4a2a      	ldr	r2, [pc, #168]	; (8004d54 <W25qxx_Init+0x248>)
 8004cac:	8952      	ldrh	r2, [r2, #10]
 8004cae:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cb2:	4a28      	ldr	r2, [pc, #160]	; (8004d54 <W25qxx_Init+0x248>)
 8004cb4:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8004cb6:	4b27      	ldr	r3, [pc, #156]	; (8004d54 <W25qxx_Init+0x248>)
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	4a25      	ldr	r2, [pc, #148]	; (8004d54 <W25qxx_Init+0x248>)
 8004cbe:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8004cc0:	4b24      	ldr	r3, [pc, #144]	; (8004d54 <W25qxx_Init+0x248>)
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	4a23      	ldr	r2, [pc, #140]	; (8004d54 <W25qxx_Init+0x248>)
 8004cc6:	6912      	ldr	r2, [r2, #16]
 8004cc8:	fb02 f303 	mul.w	r3, r2, r3
 8004ccc:	0a9b      	lsrs	r3, r3, #10
 8004cce:	4a21      	ldr	r2, [pc, #132]	; (8004d54 <W25qxx_Init+0x248>)
 8004cd0:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8004cd2:	f7ff fe5f 	bl	8004994 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8004cd6:	2001      	movs	r0, #1
 8004cd8:	f7ff fea8 	bl	8004a2c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8004cdc:	2002      	movs	r0, #2
 8004cde:	f7ff fea5 	bl	8004a2c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8004ce2:	2003      	movs	r0, #3
 8004ce4:	f7ff fea2 	bl	8004a2c <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 8004ce8:	4b1a      	ldr	r3, [pc, #104]	; (8004d54 <W25qxx_Init+0x248>)
 8004cea:	895b      	ldrh	r3, [r3, #10]
 8004cec:	4619      	mov	r1, r3
 8004cee:	4828      	ldr	r0, [pc, #160]	; (8004d90 <W25qxx_Init+0x284>)
 8004cf0:	f013 f9a0 	bl	8018034 <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 8004cf4:	4b17      	ldr	r3, [pc, #92]	; (8004d54 <W25qxx_Init+0x248>)
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	4826      	ldr	r0, [pc, #152]	; (8004d94 <W25qxx_Init+0x288>)
 8004cfc:	f013 f99a 	bl	8018034 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 8004d00:	4b14      	ldr	r3, [pc, #80]	; (8004d54 <W25qxx_Init+0x248>)
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	4619      	mov	r1, r3
 8004d06:	4824      	ldr	r0, [pc, #144]	; (8004d98 <W25qxx_Init+0x28c>)
 8004d08:	f013 f994 	bl	8018034 <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 8004d0c:	4b11      	ldr	r3, [pc, #68]	; (8004d54 <W25qxx_Init+0x248>)
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	4619      	mov	r1, r3
 8004d12:	4822      	ldr	r0, [pc, #136]	; (8004d9c <W25qxx_Init+0x290>)
 8004d14:	f013 f98e 	bl	8018034 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 8004d18:	4b0e      	ldr	r3, [pc, #56]	; (8004d54 <W25qxx_Init+0x248>)
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4820      	ldr	r0, [pc, #128]	; (8004da0 <W25qxx_Init+0x294>)
 8004d20:	f013 f988 	bl	8018034 <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 8004d24:	4b0b      	ldr	r3, [pc, #44]	; (8004d54 <W25qxx_Init+0x248>)
 8004d26:	69db      	ldr	r3, [r3, #28]
 8004d28:	4619      	mov	r1, r3
 8004d2a:	481e      	ldr	r0, [pc, #120]	; (8004da4 <W25qxx_Init+0x298>)
 8004d2c:	f013 f982 	bl	8018034 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 8004d30:	4b08      	ldr	r3, [pc, #32]	; (8004d54 <W25qxx_Init+0x248>)
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	4619      	mov	r1, r3
 8004d36:	481c      	ldr	r0, [pc, #112]	; (8004da8 <W25qxx_Init+0x29c>)
 8004d38:	f013 f97c 	bl	8018034 <iprintf>
	printf("w25qxx Init Done\r\n");
 8004d3c:	481b      	ldr	r0, [pc, #108]	; (8004dac <W25qxx_Init+0x2a0>)
 8004d3e:	f013 f9ff 	bl	8018140 <puts>
#endif
	w25qxx.Lock = 0;
 8004d42:	4b04      	ldr	r3, [pc, #16]	; (8004d54 <W25qxx_Init+0x248>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8004d4a:	2301      	movs	r3, #1
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	2000cad4 	.word	0x2000cad4
 8004d58:	40020c00 	.word	0x40020c00
 8004d5c:	0801c9e4 	.word	0x0801c9e4
 8004d60:	0801c9fc 	.word	0x0801c9fc
 8004d64:	0801ca10 	.word	0x0801ca10
 8004d68:	0801ca28 	.word	0x0801ca28
 8004d6c:	0801ca40 	.word	0x0801ca40
 8004d70:	0801ca58 	.word	0x0801ca58
 8004d74:	0801ca70 	.word	0x0801ca70
 8004d78:	0801ca88 	.word	0x0801ca88
 8004d7c:	0801caa0 	.word	0x0801caa0
 8004d80:	0801cab8 	.word	0x0801cab8
 8004d84:	0801cad0 	.word	0x0801cad0
 8004d88:	0801cae8 	.word	0x0801cae8
 8004d8c:	0801cb00 	.word	0x0801cb00
 8004d90:	0801cb14 	.word	0x0801cb14
 8004d94:	0801cb34 	.word	0x0801cb34
 8004d98:	0801cb4c 	.word	0x0801cb4c
 8004d9c:	0801cb6c 	.word	0x0801cb6c
 8004da0:	0801cb88 	.word	0x0801cb88
 8004da4:	0801cba8 	.word	0x0801cba8
 8004da8:	0801cbc4 	.word	0x0801cbc4
 8004dac:	0801cbe4 	.word	0x0801cbe4

08004db0 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8004db8:	e002      	b.n	8004dc0 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8004dba:	2001      	movs	r0, #1
 8004dbc:	f00d fd4a 	bl	8012854 <osDelay>
	while (w25qxx.Lock == 1)
 8004dc0:	4b2d      	ldr	r3, [pc, #180]	; (8004e78 <W25qxx_EraseSector+0xc8>)
 8004dc2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d0f7      	beq.n	8004dba <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8004dca:	4b2b      	ldr	r3, [pc, #172]	; (8004e78 <W25qxx_EraseSector+0xc8>)
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 8004dd2:	f004 f863 	bl	8008e9c <HAL_GetTick>
 8004dd6:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 8004dd8:	6879      	ldr	r1, [r7, #4]
 8004dda:	4828      	ldr	r0, [pc, #160]	; (8004e7c <W25qxx_EraseSector+0xcc>)
 8004ddc:	f013 f92a 	bl	8018034 <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 8004de0:	f7ff fe6a 	bl	8004ab8 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8004de4:	4b24      	ldr	r3, [pc, #144]	; (8004e78 <W25qxx_EraseSector+0xc8>)
 8004de6:	691a      	ldr	r2, [r3, #16]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	fb02 f303 	mul.w	r3, r2, r3
 8004dee:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8004df0:	f7ff fe06 	bl	8004a00 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004df4:	2200      	movs	r2, #0
 8004df6:	2140      	movs	r1, #64	; 0x40
 8004df8:	4821      	ldr	r0, [pc, #132]	; (8004e80 <W25qxx_EraseSector+0xd0>)
 8004dfa:	f004 ff67 	bl	8009ccc <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004dfe:	4b1e      	ldr	r3, [pc, #120]	; (8004e78 <W25qxx_EraseSector+0xc8>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	2b08      	cmp	r3, #8
 8004e04:	d909      	bls.n	8004e1a <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 8004e06:	2021      	movs	r0, #33	; 0x21
 8004e08:	f7ff fd78 	bl	80048fc <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	0e1b      	lsrs	r3, r3, #24
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7ff fd72 	bl	80048fc <W25qxx_Spi>
 8004e18:	e002      	b.n	8004e20 <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 8004e1a:	2020      	movs	r0, #32
 8004e1c:	f7ff fd6e 	bl	80048fc <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	0c1b      	lsrs	r3, r3, #16
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7ff fd68 	bl	80048fc <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	0a1b      	lsrs	r3, r3, #8
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7ff fd62 	bl	80048fc <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff fd5d 	bl	80048fc <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004e42:	2201      	movs	r2, #1
 8004e44:	2140      	movs	r1, #64	; 0x40
 8004e46:	480e      	ldr	r0, [pc, #56]	; (8004e80 <W25qxx_EraseSector+0xd0>)
 8004e48:	f004 ff40 	bl	8009ccc <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004e4c:	f7ff fe34 	bl	8004ab8 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 8004e50:	f004 f824 	bl	8008e9c <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	4809      	ldr	r0, [pc, #36]	; (8004e84 <W25qxx_EraseSector+0xd4>)
 8004e5e:	f013 f8e9 	bl	8018034 <iprintf>
#endif
	W25qxx_Delay(1);
 8004e62:	2001      	movs	r0, #1
 8004e64:	f00d fcf6 	bl	8012854 <osDelay>
	w25qxx.Lock = 0;
 8004e68:	4b03      	ldr	r3, [pc, #12]	; (8004e78 <W25qxx_EraseSector+0xc8>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004e70:	bf00      	nop
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	2000cad4 	.word	0x2000cad4
 8004e7c:	0801cc3c 	.word	0x0801cc3c
 8004e80:	40020c00 	.word	0x40020c00
 8004e84:	0801cc60 	.word	0x0801cc60

08004e88 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8004e90:	4b07      	ldr	r3, [pc, #28]	; (8004eb0 <W25qxx_SectorToPage+0x28>)
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	fb02 f303 	mul.w	r3, r2, r3
 8004e9a:	4a05      	ldr	r2, [pc, #20]	; (8004eb0 <W25qxx_SectorToPage+0x28>)
 8004e9c:	8952      	ldrh	r2, [r2, #10]
 8004e9e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	2000cad4 	.word	0x2000cad4

08004eb4 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
 8004ec0:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004ec2:	e002      	b.n	8004eca <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8004ec4:	2001      	movs	r0, #1
 8004ec6:	f00d fcc5 	bl	8012854 <osDelay>
	while (w25qxx.Lock == 1)
 8004eca:	4b57      	ldr	r3, [pc, #348]	; (8005028 <W25qxx_WritePage+0x174>)
 8004ecc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d0f7      	beq.n	8004ec4 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8004ed4:	4b54      	ldr	r3, [pc, #336]	; (8005028 <W25qxx_WritePage+0x174>)
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	4a51      	ldr	r2, [pc, #324]	; (8005028 <W25qxx_WritePage+0x174>)
 8004ee4:	8952      	ldrh	r2, [r2, #10]
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d802      	bhi.n	8004ef0 <W25qxx_WritePage+0x3c>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d105      	bne.n	8004efc <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004ef0:	4b4d      	ldr	r3, [pc, #308]	; (8005028 <W25qxx_WritePage+0x174>)
 8004ef2:	895b      	ldrh	r3, [r3, #10]
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	4413      	add	r3, r2
 8004f02:	4a49      	ldr	r2, [pc, #292]	; (8005028 <W25qxx_WritePage+0x174>)
 8004f04:	8952      	ldrh	r2, [r2, #10]
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d905      	bls.n	8004f16 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004f0a:	4b47      	ldr	r3, [pc, #284]	; (8005028 <W25qxx_WritePage+0x174>)
 8004f0c:	895b      	ldrh	r3, [r3, #10]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	68b9      	ldr	r1, [r7, #8]
 8004f1c:	4843      	ldr	r0, [pc, #268]	; (800502c <W25qxx_WritePage+0x178>)
 8004f1e:	f013 f889 	bl	8018034 <iprintf>
	W25qxx_Delay(100);
 8004f22:	2064      	movs	r0, #100	; 0x64
 8004f24:	f00d fc96 	bl	8012854 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8004f28:	f003 ffb8 	bl	8008e9c <HAL_GetTick>
 8004f2c:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 8004f2e:	f7ff fdc3 	bl	8004ab8 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8004f32:	f7ff fd65 	bl	8004a00 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004f36:	2200      	movs	r2, #0
 8004f38:	2140      	movs	r1, #64	; 0x40
 8004f3a:	483d      	ldr	r0, [pc, #244]	; (8005030 <W25qxx_WritePage+0x17c>)
 8004f3c:	f004 fec6 	bl	8009ccc <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8004f40:	4b39      	ldr	r3, [pc, #228]	; (8005028 <W25qxx_WritePage+0x174>)
 8004f42:	895b      	ldrh	r3, [r3, #10]
 8004f44:	461a      	mov	r2, r3
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	fb03 f302 	mul.w	r3, r3, r2
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	4413      	add	r3, r2
 8004f50:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8004f52:	4b35      	ldr	r3, [pc, #212]	; (8005028 <W25qxx_WritePage+0x174>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	2b08      	cmp	r3, #8
 8004f58:	d909      	bls.n	8004f6e <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 8004f5a:	2012      	movs	r0, #18
 8004f5c:	f7ff fcce 	bl	80048fc <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	0e1b      	lsrs	r3, r3, #24
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff fcc8 	bl	80048fc <W25qxx_Spi>
 8004f6c:	e002      	b.n	8004f74 <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 8004f6e:	2002      	movs	r0, #2
 8004f70:	f7ff fcc4 	bl	80048fc <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	0c1b      	lsrs	r3, r3, #16
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7ff fcbe 	bl	80048fc <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	0a1b      	lsrs	r3, r3, #8
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7ff fcb8 	bl	80048fc <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff fcb3 	bl	80048fc <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	2364      	movs	r3, #100	; 0x64
 8004f9c:	68f9      	ldr	r1, [r7, #12]
 8004f9e:	4825      	ldr	r0, [pc, #148]	; (8005034 <W25qxx_WritePage+0x180>)
 8004fa0:	f007 fd1f 	bl	800c9e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	2140      	movs	r1, #64	; 0x40
 8004fa8:	4821      	ldr	r0, [pc, #132]	; (8005030 <W25qxx_WritePage+0x17c>)
 8004faa:	f004 fe8f 	bl	8009ccc <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004fae:	f7ff fd83 	bl	8004ab8 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8004fb2:	f003 ff73 	bl	8008e9c <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	617b      	str	r3, [r7, #20]
 8004fc2:	e018      	b.n	8004ff6 <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d108      	bne.n	8004fe0 <W25qxx_WritePage+0x12c>
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d905      	bls.n	8004fe0 <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 8004fd4:	4818      	ldr	r0, [pc, #96]	; (8005038 <W25qxx_WritePage+0x184>)
 8004fd6:	f013 f8b3 	bl	8018140 <puts>
			W25qxx_Delay(10);
 8004fda:	200a      	movs	r0, #10
 8004fdc:	f00d fc3a 	bl	8012854 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	4619      	mov	r1, r3
 8004fea:	4814      	ldr	r0, [pc, #80]	; (800503c <W25qxx_WritePage+0x188>)
 8004fec:	f013 f822 	bl	8018034 <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	617b      	str	r3, [r7, #20]
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d3e2      	bcc.n	8004fc4 <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 8004ffe:	480e      	ldr	r0, [pc, #56]	; (8005038 <W25qxx_WritePage+0x184>)
 8005000:	f013 f89e 	bl	8018140 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 8005004:	6939      	ldr	r1, [r7, #16]
 8005006:	480e      	ldr	r0, [pc, #56]	; (8005040 <W25qxx_WritePage+0x18c>)
 8005008:	f013 f814 	bl	8018034 <iprintf>
	W25qxx_Delay(100);
 800500c:	2064      	movs	r0, #100	; 0x64
 800500e:	f00d fc21 	bl	8012854 <osDelay>
#endif
	W25qxx_Delay(1);
 8005012:	2001      	movs	r0, #1
 8005014:	f00d fc1e 	bl	8012854 <osDelay>
	w25qxx.Lock = 0;
 8005018:	4b03      	ldr	r3, [pc, #12]	; (8005028 <W25qxx_WritePage+0x174>)
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8005020:	bf00      	nop
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	2000cad4 	.word	0x2000cad4
 800502c:	0801cec4 	.word	0x0801cec4
 8005030:	40020c00 	.word	0x40020c00
 8005034:	2000bba4 	.word	0x2000bba4
 8005038:	0801cf00 	.word	0x0801cf00
 800503c:	0801cf04 	.word	0x0801cf04
 8005040:	0801cf0c 	.word	0x0801cf0c

08005044 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b088      	sub	sp, #32
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
 8005050:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8005052:	4b36      	ldr	r3, [pc, #216]	; (800512c <W25qxx_WriteSector+0xe8>)
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	429a      	cmp	r2, r3
 800505a:	d802      	bhi.n	8005062 <W25qxx_WriteSector+0x1e>
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d102      	bne.n	8005068 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8005062:	4b32      	ldr	r3, [pc, #200]	; (800512c <W25qxx_WriteSector+0xe8>)
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	68b9      	ldr	r1, [r7, #8]
 800506e:	4830      	ldr	r0, [pc, #192]	; (8005130 <W25qxx_WriteSector+0xec>)
 8005070:	f012 ffe0 	bl	8018034 <iprintf>
	W25qxx_Delay(100);
 8005074:	2064      	movs	r0, #100	; 0x64
 8005076:	f00d fbed 	bl	8012854 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 800507a:	4b2c      	ldr	r3, [pc, #176]	; (800512c <W25qxx_WriteSector+0xe8>)
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	429a      	cmp	r2, r3
 8005082:	d306      	bcc.n	8005092 <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 8005084:	482b      	ldr	r0, [pc, #172]	; (8005134 <W25qxx_WriteSector+0xf0>)
 8005086:	f013 f85b 	bl	8018140 <puts>
		W25qxx_Delay(100);
 800508a:	2064      	movs	r0, #100	; 0x64
 800508c:	f00d fbe2 	bl	8012854 <osDelay>
#endif
		return;
 8005090:	e048      	b.n	8005124 <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	441a      	add	r2, r3
 8005098:	4b24      	ldr	r3, [pc, #144]	; (800512c <W25qxx_WriteSector+0xe8>)
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	429a      	cmp	r2, r3
 800509e:	d905      	bls.n	80050ac <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 80050a0:	4b22      	ldr	r3, [pc, #136]	; (800512c <W25qxx_WriteSector+0xe8>)
 80050a2:	691a      	ldr	r2, [r3, #16]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	61bb      	str	r3, [r7, #24]
 80050aa:	e001      	b.n	80050b0 <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80050b0:	68b8      	ldr	r0, [r7, #8]
 80050b2:	f7ff fee9 	bl	8004e88 <W25qxx_SectorToPage>
 80050b6:	4602      	mov	r2, r0
 80050b8:	4b1c      	ldr	r3, [pc, #112]	; (800512c <W25qxx_WriteSector+0xe8>)
 80050ba:	895b      	ldrh	r3, [r3, #10]
 80050bc:	4619      	mov	r1, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80050c4:	4413      	add	r3, r2
 80050c6:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80050c8:	4b18      	ldr	r3, [pc, #96]	; (800512c <W25qxx_WriteSector+0xe8>)
 80050ca:	895b      	ldrh	r3, [r3, #10]
 80050cc:	461a      	mov	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80050d4:	fb02 f201 	mul.w	r2, r2, r1
 80050d8:	1a9b      	subs	r3, r3, r2
 80050da:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	69f9      	ldr	r1, [r7, #28]
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f7ff fee6 	bl	8004eb4 <W25qxx_WritePage>
		StartPage++;
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	3301      	adds	r3, #1
 80050ec:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 80050ee:	4b0f      	ldr	r3, [pc, #60]	; (800512c <W25qxx_WriteSector+0xe8>)
 80050f0:	895b      	ldrh	r3, [r3, #10]
 80050f2:	461a      	mov	r2, r3
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	1a9a      	subs	r2, r3, r2
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	4413      	add	r3, r2
 80050fc:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80050fe:	4b0b      	ldr	r3, [pc, #44]	; (800512c <W25qxx_WriteSector+0xe8>)
 8005100:	895b      	ldrh	r3, [r3, #10]
 8005102:	461a      	mov	r2, r3
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	4413      	add	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800510e:	2300      	movs	r3, #0
 8005110:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	2b00      	cmp	r3, #0
 8005116:	dce1      	bgt.n	80050dc <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 8005118:	4807      	ldr	r0, [pc, #28]	; (8005138 <W25qxx_WriteSector+0xf4>)
 800511a:	f013 f811 	bl	8018140 <puts>
	W25qxx_Delay(100);
 800511e:	2064      	movs	r0, #100	; 0x64
 8005120:	f00d fb98 	bl	8012854 <osDelay>
#endif
}
 8005124:	3720      	adds	r7, #32
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	2000cad4 	.word	0x2000cad4
 8005130:	0801cf30 	.word	0x0801cf30
 8005134:	0801cf70 	.word	0x0801cf70
 8005138:	0801cf90 	.word	0x0801cf90

0800513c <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
 8005148:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800514a:	e002      	b.n	8005152 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 800514c:	2001      	movs	r0, #1
 800514e:	f00d fb81 	bl	8012854 <osDelay>
	while (w25qxx.Lock == 1)
 8005152:	4b54      	ldr	r3, [pc, #336]	; (80052a4 <W25qxx_ReadPage+0x168>)
 8005154:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005158:	2b01      	cmp	r3, #1
 800515a:	d0f7      	beq.n	800514c <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 800515c:	4b51      	ldr	r3, [pc, #324]	; (80052a4 <W25qxx_ReadPage+0x168>)
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8005164:	4b4f      	ldr	r3, [pc, #316]	; (80052a4 <W25qxx_ReadPage+0x168>)
 8005166:	895b      	ldrh	r3, [r3, #10]
 8005168:	461a      	mov	r2, r3
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	4293      	cmp	r3, r2
 800516e:	d802      	bhi.n	8005176 <W25qxx_ReadPage+0x3a>
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d102      	bne.n	800517c <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8005176:	4b4b      	ldr	r3, [pc, #300]	; (80052a4 <W25qxx_ReadPage+0x168>)
 8005178:	895b      	ldrh	r3, [r3, #10]
 800517a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	4413      	add	r3, r2
 8005182:	4a48      	ldr	r2, [pc, #288]	; (80052a4 <W25qxx_ReadPage+0x168>)
 8005184:	8952      	ldrh	r2, [r2, #10]
 8005186:	4293      	cmp	r3, r2
 8005188:	d905      	bls.n	8005196 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800518a:	4b46      	ldr	r3, [pc, #280]	; (80052a4 <W25qxx_ReadPage+0x168>)
 800518c:	895b      	ldrh	r3, [r3, #10]
 800518e:	461a      	mov	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	68b9      	ldr	r1, [r7, #8]
 800519c:	4842      	ldr	r0, [pc, #264]	; (80052a8 <W25qxx_ReadPage+0x16c>)
 800519e:	f012 ff49 	bl	8018034 <iprintf>
	W25qxx_Delay(100);
 80051a2:	2064      	movs	r0, #100	; 0x64
 80051a4:	f00d fb56 	bl	8012854 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 80051a8:	f003 fe78 	bl	8008e9c <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 80051ae:	4b3d      	ldr	r3, [pc, #244]	; (80052a4 <W25qxx_ReadPage+0x168>)
 80051b0:	895b      	ldrh	r3, [r3, #10]
 80051b2:	461a      	mov	r2, r3
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	fb03 f302 	mul.w	r3, r3, r2
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	4413      	add	r3, r2
 80051be:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80051c0:	2200      	movs	r2, #0
 80051c2:	2140      	movs	r1, #64	; 0x40
 80051c4:	4839      	ldr	r0, [pc, #228]	; (80052ac <W25qxx_ReadPage+0x170>)
 80051c6:	f004 fd81 	bl	8009ccc <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80051ca:	4b36      	ldr	r3, [pc, #216]	; (80052a4 <W25qxx_ReadPage+0x168>)
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	2b08      	cmp	r3, #8
 80051d0:	d909      	bls.n	80051e6 <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 80051d2:	200c      	movs	r0, #12
 80051d4:	f7ff fb92 	bl	80048fc <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	0e1b      	lsrs	r3, r3, #24
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	4618      	mov	r0, r3
 80051e0:	f7ff fb8c 	bl	80048fc <W25qxx_Spi>
 80051e4:	e002      	b.n	80051ec <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 80051e6:	200b      	movs	r0, #11
 80051e8:	f7ff fb88 	bl	80048fc <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	0c1b      	lsrs	r3, r3, #16
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7ff fb82 	bl	80048fc <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	0a1b      	lsrs	r3, r3, #8
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	4618      	mov	r0, r3
 8005200:	f7ff fb7c 	bl	80048fc <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	b2db      	uxtb	r3, r3
 8005208:	4618      	mov	r0, r3
 800520a:	f7ff fb77 	bl	80048fc <W25qxx_Spi>
	W25qxx_Spi(0);
 800520e:	2000      	movs	r0, #0
 8005210:	f7ff fb74 	bl	80048fc <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	b29a      	uxth	r2, r3
 8005218:	2364      	movs	r3, #100	; 0x64
 800521a:	68f9      	ldr	r1, [r7, #12]
 800521c:	4824      	ldr	r0, [pc, #144]	; (80052b0 <W25qxx_ReadPage+0x174>)
 800521e:	f007 fd1c 	bl	800cc5a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8005222:	2201      	movs	r2, #1
 8005224:	2140      	movs	r1, #64	; 0x40
 8005226:	4821      	ldr	r0, [pc, #132]	; (80052ac <W25qxx_ReadPage+0x170>)
 8005228:	f004 fd50 	bl	8009ccc <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 800522c:	f003 fe36 	bl	8008e9c <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8005238:	2300      	movs	r3, #0
 800523a:	617b      	str	r3, [r7, #20]
 800523c:	e018      	b.n	8005270 <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	2b00      	cmp	r3, #0
 8005246:	d108      	bne.n	800525a <W25qxx_ReadPage+0x11e>
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	2b02      	cmp	r3, #2
 800524c:	d905      	bls.n	800525a <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 800524e:	4819      	ldr	r0, [pc, #100]	; (80052b4 <W25qxx_ReadPage+0x178>)
 8005250:	f012 ff76 	bl	8018140 <puts>
			W25qxx_Delay(10);
 8005254:	200a      	movs	r0, #10
 8005256:	f00d fafd 	bl	8012854 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	4413      	add	r3, r2
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	4619      	mov	r1, r3
 8005264:	4814      	ldr	r0, [pc, #80]	; (80052b8 <W25qxx_ReadPage+0x17c>)
 8005266:	f012 fee5 	bl	8018034 <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	3301      	adds	r3, #1
 800526e:	617b      	str	r3, [r7, #20]
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	429a      	cmp	r2, r3
 8005276:	d3e2      	bcc.n	800523e <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 8005278:	480e      	ldr	r0, [pc, #56]	; (80052b4 <W25qxx_ReadPage+0x178>)
 800527a:	f012 ff61 	bl	8018140 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 800527e:	6939      	ldr	r1, [r7, #16]
 8005280:	480e      	ldr	r0, [pc, #56]	; (80052bc <W25qxx_ReadPage+0x180>)
 8005282:	f012 fed7 	bl	8018034 <iprintf>
	W25qxx_Delay(100);
 8005286:	2064      	movs	r0, #100	; 0x64
 8005288:	f00d fae4 	bl	8012854 <osDelay>
#endif
	W25qxx_Delay(1);
 800528c:	2001      	movs	r0, #1
 800528e:	f00d fae1 	bl	8012854 <osDelay>
	w25qxx.Lock = 0;
 8005292:	4b04      	ldr	r3, [pc, #16]	; (80052a4 <W25qxx_ReadPage+0x168>)
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800529a:	bf00      	nop
 800529c:	3718      	adds	r7, #24
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	2000cad4 	.word	0x2000cad4
 80052a8:	0801d0dc 	.word	0x0801d0dc
 80052ac:	40020c00 	.word	0x40020c00
 80052b0:	2000bba4 	.word	0x2000bba4
 80052b4:	0801cf00 	.word	0x0801cf00
 80052b8:	0801cf04 	.word	0x0801cf04
 80052bc:	0801d118 	.word	0x0801d118

080052c0 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b088      	sub	sp, #32
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
 80052cc:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 80052ce:	4b36      	ldr	r3, [pc, #216]	; (80053a8 <W25qxx_ReadSector+0xe8>)
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d802      	bhi.n	80052de <W25qxx_ReadSector+0x1e>
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d102      	bne.n	80052e4 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 80052de:	4b32      	ldr	r3, [pc, #200]	; (80053a8 <W25qxx_ReadSector+0xe8>)
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	68b9      	ldr	r1, [r7, #8]
 80052ea:	4830      	ldr	r0, [pc, #192]	; (80053ac <W25qxx_ReadSector+0xec>)
 80052ec:	f012 fea2 	bl	8018034 <iprintf>
	W25qxx_Delay(100);
 80052f0:	2064      	movs	r0, #100	; 0x64
 80052f2:	f00d faaf 	bl	8012854 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80052f6:	4b2c      	ldr	r3, [pc, #176]	; (80053a8 <W25qxx_ReadSector+0xe8>)
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d306      	bcc.n	800530e <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 8005300:	482b      	ldr	r0, [pc, #172]	; (80053b0 <W25qxx_ReadSector+0xf0>)
 8005302:	f012 ff1d 	bl	8018140 <puts>
		W25qxx_Delay(100);
 8005306:	2064      	movs	r0, #100	; 0x64
 8005308:	f00d faa4 	bl	8012854 <osDelay>
#endif
		return;
 800530c:	e048      	b.n	80053a0 <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	441a      	add	r2, r3
 8005314:	4b24      	ldr	r3, [pc, #144]	; (80053a8 <W25qxx_ReadSector+0xe8>)
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	429a      	cmp	r2, r3
 800531a:	d905      	bls.n	8005328 <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 800531c:	4b22      	ldr	r3, [pc, #136]	; (80053a8 <W25qxx_ReadSector+0xe8>)
 800531e:	691a      	ldr	r2, [r3, #16]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	61bb      	str	r3, [r7, #24]
 8005326:	e001      	b.n	800532c <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 800532c:	68b8      	ldr	r0, [r7, #8]
 800532e:	f7ff fdab 	bl	8004e88 <W25qxx_SectorToPage>
 8005332:	4602      	mov	r2, r0
 8005334:	4b1c      	ldr	r3, [pc, #112]	; (80053a8 <W25qxx_ReadSector+0xe8>)
 8005336:	895b      	ldrh	r3, [r3, #10]
 8005338:	4619      	mov	r1, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005340:	4413      	add	r3, r2
 8005342:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8005344:	4b18      	ldr	r3, [pc, #96]	; (80053a8 <W25qxx_ReadSector+0xe8>)
 8005346:	895b      	ldrh	r3, [r3, #10]
 8005348:	461a      	mov	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005350:	fb02 f201 	mul.w	r2, r2, r1
 8005354:	1a9b      	subs	r3, r3, r2
 8005356:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	69f9      	ldr	r1, [r7, #28]
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f7ff feec 	bl	800513c <W25qxx_ReadPage>
		StartPage++;
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	3301      	adds	r3, #1
 8005368:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 800536a:	4b0f      	ldr	r3, [pc, #60]	; (80053a8 <W25qxx_ReadSector+0xe8>)
 800536c:	895b      	ldrh	r3, [r3, #10]
 800536e:	461a      	mov	r2, r3
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	1a9a      	subs	r2, r3, r2
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	4413      	add	r3, r2
 8005378:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800537a:	4b0b      	ldr	r3, [pc, #44]	; (80053a8 <W25qxx_ReadSector+0xe8>)
 800537c:	895b      	ldrh	r3, [r3, #10]
 800537e:	461a      	mov	r2, r3
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4413      	add	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800538a:	2300      	movs	r3, #0
 800538c:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	2b00      	cmp	r3, #0
 8005392:	dce1      	bgt.n	8005358 <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 8005394:	4807      	ldr	r0, [pc, #28]	; (80053b4 <W25qxx_ReadSector+0xf4>)
 8005396:	f012 fed3 	bl	8018140 <puts>
	W25qxx_Delay(100);
 800539a:	2064      	movs	r0, #100	; 0x64
 800539c:	f00d fa5a 	bl	8012854 <osDelay>
#endif
}
 80053a0:	3720      	adds	r7, #32
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	2000cad4 	.word	0x2000cad4
 80053ac:	0801d13c 	.word	0x0801d13c
 80053b0:	0801d17c 	.word	0x0801d17c
 80053b4:	0801d19c 	.word	0x0801d19c

080053b8 <VR_Power_On>:


#include "main.h"


void VR_Power_On(void) {
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, SET);
 80053bc:	2201      	movs	r2, #1
 80053be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053c2:	4804      	ldr	r0, [pc, #16]	; (80053d4 <VR_Power_On+0x1c>)
 80053c4:	f004 fc82 	bl	8009ccc <HAL_GPIO_WritePin>
	// note that runcam needs around 3-5 seconds to fully power on
	HAL_Delay(5000);
 80053c8:	f241 3088 	movw	r0, #5000	; 0x1388
 80053cc:	f003 fd72 	bl	8008eb4 <HAL_Delay>
}
 80053d0:	bf00      	nop
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	40021800 	.word	0x40021800

080053d8 <VR_Power_Off>:

void VR_Power_Off(void) {
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET);
 80053dc:	2200      	movs	r2, #0
 80053de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053e2:	4802      	ldr	r0, [pc, #8]	; (80053ec <VR_Power_Off+0x14>)
 80053e4:	f004 fc72 	bl	8009ccc <HAL_GPIO_WritePin>
}
 80053e8:	bf00      	nop
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	40021800 	.word	0x40021800

080053f0 <VR_Start_Rec>:

void VR_Start_Rec(void) {
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, SET); // HIGH = start record
 80053f4:	2201      	movs	r2, #1
 80053f6:	2180      	movs	r1, #128	; 0x80
 80053f8:	4802      	ldr	r0, [pc, #8]	; (8005404 <VR_Start_Rec+0x14>)
 80053fa:	f004 fc67 	bl	8009ccc <HAL_GPIO_WritePin>
}
 80053fe:	bf00      	nop
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	40020c00 	.word	0x40020c00

08005408 <VR_Stop_Rec>:

void VR_Stop_Rec(void) {
 8005408:	b580      	push	{r7, lr}
 800540a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); // LOW = stop recording
 800540c:	2200      	movs	r2, #0
 800540e:	2180      	movs	r1, #128	; 0x80
 8005410:	4802      	ldr	r0, [pc, #8]	; (800541c <VR_Stop_Rec+0x14>)
 8005412:	f004 fc5b 	bl	8009ccc <HAL_GPIO_WritePin>
}
 8005416:	bf00      	nop
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	40020c00 	.word	0x40020c00

08005420 <Max31855_Read_Temp>:
uint32_t sign=0;									  // Sign bit
uint8_t DATARX[4];                                    // Raw Data from MAX6675
//uint8_t DATATX = {0xFF, 0xFF, 0xFF, 0xFF};                                    // Raw Data from MAX6675

// ------------------- Functions ----------------
float Max31855_Read_Temp(void) {
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
	int Temp = 0;                                        // Temperature Variable
 8005426:	2300      	movs	r3, #0
 8005428:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); // Low State for SPI Communication
 800542a:	2200      	movs	r2, #0
 800542c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005430:	483b      	ldr	r0, [pc, #236]	; (8005520 <Max31855_Read_Temp+0x100>)
 8005432:	f004 fc4b 	bl	8009ccc <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, DATARX, 4, 1000);                // DATA Transfer
 8005436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800543a:	2204      	movs	r2, #4
 800543c:	4939      	ldr	r1, [pc, #228]	; (8005524 <Max31855_Read_Temp+0x104>)
 800543e:	483a      	ldr	r0, [pc, #232]	; (8005528 <Max31855_Read_Temp+0x108>)
 8005440:	f007 fc0b 	bl	800cc5a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET); // High State for SPI Communication
 8005444:	2201      	movs	r2, #1
 8005446:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800544a:	4835      	ldr	r0, [pc, #212]	; (8005520 <Max31855_Read_Temp+0x100>)
 800544c:	f004 fc3e 	bl	8009ccc <HAL_GPIO_WritePin>


	uint32_t v = DATARX[3] | (DATARX[2] << 8) | (DATARX[1] << 16) | (DATARX[0] << 24);
 8005450:	4b34      	ldr	r3, [pc, #208]	; (8005524 <Max31855_Read_Temp+0x104>)
 8005452:	78db      	ldrb	r3, [r3, #3]
 8005454:	461a      	mov	r2, r3
 8005456:	4b33      	ldr	r3, [pc, #204]	; (8005524 <Max31855_Read_Temp+0x104>)
 8005458:	789b      	ldrb	r3, [r3, #2]
 800545a:	021b      	lsls	r3, r3, #8
 800545c:	431a      	orrs	r2, r3
 800545e:	4b31      	ldr	r3, [pc, #196]	; (8005524 <Max31855_Read_Temp+0x104>)
 8005460:	785b      	ldrb	r3, [r3, #1]
 8005462:	041b      	lsls	r3, r3, #16
 8005464:	431a      	orrs	r2, r3
 8005466:	4b2f      	ldr	r3, [pc, #188]	; (8005524 <Max31855_Read_Temp+0x104>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	061b      	lsls	r3, r3, #24
 800546c:	4313      	orrs	r3, r2
 800546e:	603b      	str	r3, [r7, #0]

	Error = v & 0x07;								  // Error Detection
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	b2db      	uxtb	r3, r3
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	b2da      	uxtb	r2, r3
 800547a:	4b2c      	ldr	r3, [pc, #176]	; (800552c <Max31855_Read_Temp+0x10c>)
 800547c:	701a      	strb	r2, [r3, #0]



		sign = (DATARX[0] & (0x80)) >> 7;					// Sign Bit calculation
 800547e:	4b29      	ldr	r3, [pc, #164]	; (8005524 <Max31855_Read_Temp+0x104>)
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	09db      	lsrs	r3, r3, #7
 8005484:	b2db      	uxtb	r3, r3
 8005486:	461a      	mov	r2, r3
 8005488:	4b29      	ldr	r3, [pc, #164]	; (8005530 <Max31855_Read_Temp+0x110>)
 800548a:	601a      	str	r2, [r3, #0]

		if (DATARX[3] & 0x07)								 // Returns Error Number
 800548c:	4b25      	ldr	r3, [pc, #148]	; (8005524 <Max31855_Read_Temp+0x104>)
 800548e:	78db      	ldrb	r3, [r3, #3]
 8005490:	f003 0307 	and.w	r3, r3, #7
 8005494:	2b00      	cmp	r3, #0
 8005496:	d009      	beq.n	80054ac <Max31855_Read_Temp+0x8c>
			return (-1 * (DATARX[3] & 0x07));
 8005498:	4b22      	ldr	r3, [pc, #136]	; (8005524 <Max31855_Read_Temp+0x104>)
 800549a:	78db      	ldrb	r3, [r3, #3]
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	425b      	negs	r3, r3
 80054a2:	ee07 3a90 	vmov	s15, r3
 80054a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054aa:	e033      	b.n	8005514 <Max31855_Read_Temp+0xf4>

		else if (sign == 1) {								// Negative Temperature
 80054ac:	4b20      	ldr	r3, [pc, #128]	; (8005530 <Max31855_Read_Temp+0x110>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d11d      	bne.n	80054f0 <Max31855_Read_Temp+0xd0>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 80054b4:	4b1b      	ldr	r3, [pc, #108]	; (8005524 <Max31855_Read_Temp+0x104>)
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	019b      	lsls	r3, r3, #6
 80054ba:	4a1a      	ldr	r2, [pc, #104]	; (8005524 <Max31855_Read_Temp+0x104>)
 80054bc:	7852      	ldrb	r2, [r2, #1]
 80054be:	0892      	lsrs	r2, r2, #2
 80054c0:	b2d2      	uxtb	r2, r2
 80054c2:	4313      	orrs	r3, r2
 80054c4:	607b      	str	r3, [r7, #4]
			Temp &= 0b01111111111111;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054cc:	607b      	str	r3, [r7, #4]
			Temp ^= 0b01111111111111;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f483 53ff 	eor.w	r3, r3, #8160	; 0x1fe0
 80054d4:	f083 031f 	eor.w	r3, r3, #31
 80054d8:	607b      	str	r3, [r7, #4]
			return ((float) -Temp / 4);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	425b      	negs	r3, r3
 80054de:	ee07 3a90 	vmov	s15, r3
 80054e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054e6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80054ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054ee:	e011      	b.n	8005514 <Max31855_Read_Temp+0xf4>
		}

		else												 // Positive Temperature
		{
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 80054f0:	4b0c      	ldr	r3, [pc, #48]	; (8005524 <Max31855_Read_Temp+0x104>)
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	019b      	lsls	r3, r3, #6
 80054f6:	4a0b      	ldr	r2, [pc, #44]	; (8005524 <Max31855_Read_Temp+0x104>)
 80054f8:	7852      	ldrb	r2, [r2, #1]
 80054fa:	0892      	lsrs	r2, r2, #2
 80054fc:	b2d2      	uxtb	r2, r2
 80054fe:	4313      	orrs	r3, r2
 8005500:	607b      	str	r3, [r7, #4]
			return ((float) Temp / 4.0);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	ee07 3a90 	vmov	s15, r3
 8005508:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800550c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8005510:	eec7 7a26 	vdiv.f32	s15, s14, s13

	// LSB = 0.25 degrees C
	centigrade *= 0.25;
	return centigrade;
	*/
}
 8005514:	eeb0 0a67 	vmov.f32	s0, s15
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	40021000 	.word	0x40021000
 8005524:	2000cafc 	.word	0x2000cafc
 8005528:	2000bbfc 	.word	0x2000bbfc
 800552c:	200004b4 	.word	0x200004b4
 8005530:	200004b8 	.word	0x200004b8

08005534 <MRT_pollPropulsion>:


//**************************************************//
//PUBLIC FUNCTIONS

void MRT_pollPropulsion(void){
 8005534:	b580      	push	{r7, lr}
 8005536:	af00      	add	r7, sp, #0
	MRT_getThermoTemp();
 8005538:	f000 f806 	bl	8005548 <MRT_getThermoTemp>
	MRT_getTransducerVoltage();
 800553c:	f000 f812 	bl	8005564 <MRT_getTransducerVoltage>
	MRT_getValveStatus();
 8005540:	f000 f820 	bl	8005584 <MRT_getValveStatus>
}
 8005544:	bf00      	nop
 8005546:	bd80      	pop	{r7, pc}

08005548 <MRT_getThermoTemp>:

void MRT_getThermoTemp(void){
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
	thermocouple_temperature = Max31855_Read_Temp();
 800554c:	f7ff ff68 	bl	8005420 <Max31855_Read_Temp>
 8005550:	eef0 7a40 	vmov.f32	s15, s0
 8005554:	4b02      	ldr	r3, [pc, #8]	; (8005560 <MRT_getThermoTemp+0x18>)
 8005556:	edc3 7a00 	vstr	s15, [r3]
}
 800555a:	bf00      	nop
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	2000cb34 	.word	0x2000cb34

08005564 <MRT_getTransducerVoltage>:

void MRT_getTransducerVoltage(void){
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
	transducer_voltage = MRT_prop_poll_pressure_transducer(&TRANSDUCER_ADC);
 8005568:	4804      	ldr	r0, [pc, #16]	; (800557c <MRT_getTransducerVoltage+0x18>)
 800556a:	f000 f85d 	bl	8005628 <MRT_prop_poll_pressure_transducer>
 800556e:	eef0 7a40 	vmov.f32	s15, s0
 8005572:	4b03      	ldr	r3, [pc, #12]	; (8005580 <MRT_getTransducerVoltage+0x1c>)
 8005574:	edc3 7a00 	vstr	s15, [r3]
}
 8005578:	bf00      	nop
 800557a:	bd80      	pop	{r7, pc}
 800557c:	2000859c 	.word	0x2000859c
 8005580:	2000cb38 	.word	0x2000cb38

08005584 <MRT_getValveStatus>:

void MRT_getValveStatus(void){
 8005584:	b580      	push	{r7, lr}
 8005586:	af00      	add	r7, sp, #0
	valve_status = HAL_GPIO_ReadPin(IN_Prop_ActuatedVent_Feedback_GPIO_Port,IN_Prop_ActuatedVent_Feedback_Pin);
 8005588:	2102      	movs	r1, #2
 800558a:	4804      	ldr	r0, [pc, #16]	; (800559c <MRT_getValveStatus+0x18>)
 800558c:	f004 fb86 	bl	8009c9c <HAL_GPIO_ReadPin>
 8005590:	4603      	mov	r3, r0
 8005592:	461a      	mov	r2, r3
 8005594:	4b02      	ldr	r3, [pc, #8]	; (80055a0 <MRT_getValveStatus+0x1c>)
 8005596:	701a      	strb	r2, [r3, #0]
}
 8005598:	bf00      	nop
 800559a:	bd80      	pop	{r7, pc}
 800559c:	40020400 	.word	0x40020400
 80055a0:	2000cb32 	.word	0x2000cb32

080055a4 <MRT_formatPropulsion>:

// formats propulsion telemetry string using sprintf
void MRT_formatPropulsion(void) {
 80055a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055a6:	b089      	sub	sp, #36	; 0x24
 80055a8:	af06      	add	r7, sp, #24
	memset(msg_buffer_pr, 0, 50);
 80055aa:	2232      	movs	r2, #50	; 0x32
 80055ac:	2100      	movs	r1, #0
 80055ae:	4816      	ldr	r0, [pc, #88]	; (8005608 <MRT_formatPropulsion+0x64>)
 80055b0:	f011 fe14 	bl	80171dc <memset>
	//tank_pressure = convert_prop_tank_pressure(); // convert buffered readings to voltage TODO??
	sprintf(msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 80055b4:	4b15      	ldr	r3, [pc, #84]	; (800560c <MRT_formatPropulsion+0x68>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7fa ffe5 	bl	8000588 <__aeabi_f2d>
 80055be:	4604      	mov	r4, r0
 80055c0:	460d      	mov	r5, r1
 80055c2:	4b13      	ldr	r3, [pc, #76]	; (8005610 <MRT_formatPropulsion+0x6c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fa ffde 	bl	8000588 <__aeabi_f2d>
 80055cc:	4602      	mov	r2, r0
 80055ce:	460b      	mov	r3, r1
 80055d0:	4910      	ldr	r1, [pc, #64]	; (8005614 <MRT_formatPropulsion+0x70>)
 80055d2:	7809      	ldrb	r1, [r1, #0]
 80055d4:	4608      	mov	r0, r1
 80055d6:	4910      	ldr	r1, [pc, #64]	; (8005618 <MRT_formatPropulsion+0x74>)
 80055d8:	7809      	ldrb	r1, [r1, #0]
 80055da:	460e      	mov	r6, r1
 80055dc:	490f      	ldr	r1, [pc, #60]	; (800561c <MRT_formatPropulsion+0x78>)
 80055de:	7809      	ldrb	r1, [r1, #0]
 80055e0:	6079      	str	r1, [r7, #4]
 80055e2:	490f      	ldr	r1, [pc, #60]	; (8005620 <MRT_formatPropulsion+0x7c>)
 80055e4:	6809      	ldr	r1, [r1, #0]
 80055e6:	9105      	str	r1, [sp, #20]
 80055e8:	6879      	ldr	r1, [r7, #4]
 80055ea:	9104      	str	r1, [sp, #16]
 80055ec:	9603      	str	r6, [sp, #12]
 80055ee:	9002      	str	r0, [sp, #8]
 80055f0:	e9cd 2300 	strd	r2, r3, [sp]
 80055f4:	4622      	mov	r2, r4
 80055f6:	462b      	mov	r3, r5
 80055f8:	490a      	ldr	r1, [pc, #40]	; (8005624 <MRT_formatPropulsion+0x80>)
 80055fa:	4803      	ldr	r0, [pc, #12]	; (8005608 <MRT_formatPropulsion+0x64>)
 80055fc:	f012 fe6c 	bl	80182d8 <siprintf>
			transducer_voltage, thermocouple_temperature, valve_status,
			prev_min, prev_sec, prev_subsec);
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005608:	2000cb00 	.word	0x2000cb00
 800560c:	2000cb38 	.word	0x2000cb38
 8005610:	2000cb34 	.word	0x2000cb34
 8005614:	2000cb32 	.word	0x2000cb32
 8005618:	20000396 	.word	0x20000396
 800561c:	20000397 	.word	0x20000397
 8005620:	20000398 	.word	0x20000398
 8005624:	0801d230 	.word	0x0801d230

08005628 <MRT_prop_poll_pressure_transducer>:
//PRIVATE FUNCTIONS

/*
 * Get the pressure transducer voltage (poll ADC)
 */
float MRT_prop_poll_pressure_transducer(ADC_HandleTypeDef* hadc) {
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
	// reading adc
	HAL_ADC_Start(hadc);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f003 fca7 	bl	8008f84 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1000);
 8005636:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f003 fda7 	bl	800918e <HAL_ADC_PollForConversion>
	uint32_t pressure_sensor_raw = HAL_ADC_GetValue(hadc);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f003 fe2f 	bl	80092a4 <HAL_ADC_GetValue>
 8005646:	60f8      	str	r0, [r7, #12]
	HAL_ADC_Stop(hadc);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f003 fd6d 	bl	8009128 <HAL_ADC_Stop>

	float voltage = (float) (pressure_sensor_raw / 4095.0) * 3.3; // assuming 12 bits
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f7fa ff78 	bl	8000544 <__aeabi_ui2d>
 8005654:	a312      	add	r3, pc, #72	; (adr r3, 80056a0 <MRT_prop_poll_pressure_transducer+0x78>)
 8005656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565a:	f7fb f917 	bl	800088c <__aeabi_ddiv>
 800565e:	4602      	mov	r2, r0
 8005660:	460b      	mov	r3, r1
 8005662:	4610      	mov	r0, r2
 8005664:	4619      	mov	r1, r3
 8005666:	f7fb fadf 	bl	8000c28 <__aeabi_d2f>
 800566a:	4603      	mov	r3, r0
 800566c:	4618      	mov	r0, r3
 800566e:	f7fa ff8b 	bl	8000588 <__aeabi_f2d>
 8005672:	a30d      	add	r3, pc, #52	; (adr r3, 80056a8 <MRT_prop_poll_pressure_transducer+0x80>)
 8005674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005678:	f7fa ffde 	bl	8000638 <__aeabi_dmul>
 800567c:	4602      	mov	r2, r0
 800567e:	460b      	mov	r3, r1
 8005680:	4610      	mov	r0, r2
 8005682:	4619      	mov	r1, r3
 8005684:	f7fb fad0 	bl	8000c28 <__aeabi_d2f>
 8005688:	4603      	mov	r3, r0
 800568a:	60bb      	str	r3, [r7, #8]

	return voltage;
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	ee07 3a90 	vmov	s15, r3
}
 8005692:	eeb0 0a67 	vmov.f32	s0, s15
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	f3af 8000 	nop.w
 80056a0:	00000000 	.word	0x00000000
 80056a4:	40affe00 	.word	0x40affe00
 80056a8:	66666666 	.word	0x66666666
 80056ac:	400a6666 	.word	0x400a6666

080056b0 <MRT_LSM6DSR_Constructor>:


//**************************************************//
/*****LSM6DSR STATIC FUNCTIONS*****/

void MRT_LSM6DSR_Constructor(){
 80056b0:	b598      	push	{r3, r4, r7, lr}
 80056b2:	af00      	add	r7, sp, #0
	if (lsm6dsr==NULL){
 80056b4:	4b08      	ldr	r3, [pc, #32]	; (80056d8 <MRT_LSM6DSR_Constructor+0x28>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10b      	bne.n	80056d4 <MRT_LSM6DSR_Constructor+0x24>
		lsm6dsr = new LSM6DSR(&LSM6DSR_I2C, (uint8_t) MRT_LSM6DSR_ADDRESS);
 80056bc:	203c      	movs	r0, #60	; 0x3c
 80056be:	f010 fc45 	bl	8015f4c <_Znwj>
 80056c2:	4603      	mov	r3, r0
 80056c4:	461c      	mov	r4, r3
 80056c6:	226a      	movs	r2, #106	; 0x6a
 80056c8:	4904      	ldr	r1, [pc, #16]	; (80056dc <MRT_LSM6DSR_Constructor+0x2c>)
 80056ca:	4620      	mov	r0, r4
 80056cc:	f000 f99c 	bl	8005a08 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>
 80056d0:	4b01      	ldr	r3, [pc, #4]	; (80056d8 <MRT_LSM6DSR_Constructor+0x28>)
 80056d2:	601c      	str	r4, [r3, #0]
	}
}
 80056d4:	bf00      	nop
 80056d6:	bd98      	pop	{r3, r4, r7, pc}
 80056d8:	200004bc 	.word	0x200004bc
 80056dc:	2000ba78 	.word	0x2000ba78

080056e0 <MRT_LSM6DSR_Destructor>:

void MRT_LSM6DSR_Destructor(){
 80056e0:	b480      	push	{r7}
 80056e2:	af00      	add	r7, sp, #0
	if (lsm6dsr!=NULL){
 80056e4:	4b05      	ldr	r3, [pc, #20]	; (80056fc <MRT_LSM6DSR_Destructor+0x1c>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d002      	beq.n	80056f2 <MRT_LSM6DSR_Destructor+0x12>
		lsm6dsr = NULL;
 80056ec:	4b03      	ldr	r3, [pc, #12]	; (80056fc <MRT_LSM6DSR_Destructor+0x1c>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	601a      	str	r2, [r3, #0]
	}
}
 80056f2:	bf00      	nop
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	200004bc 	.word	0x200004bc

08005700 <MRT_LSM6DSR_getAcceleration>:

void MRT_LSM6DSR_getAcceleration(void){
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
	float* temp_array = lsm6dsr->getAcceleration();
 8005706:	4b0b      	ldr	r3, [pc, #44]	; (8005734 <MRT_LSM6DSR_getAcceleration+0x34>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4618      	mov	r0, r3
 800570c:	f000 fa22 	bl	8005b54 <_ZN7LSM6DSR15getAccelerationEv>
 8005710:	6078      	str	r0, [r7, #4]
	hlsm6dsr.acceleration_mg[0] = temp_array[0];
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a08      	ldr	r2, [pc, #32]	; (8005738 <MRT_LSM6DSR_getAcceleration+0x38>)
 8005718:	6013      	str	r3, [r2, #0]
	hlsm6dsr.acceleration_mg[1] = temp_array[1];
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	4a06      	ldr	r2, [pc, #24]	; (8005738 <MRT_LSM6DSR_getAcceleration+0x38>)
 8005720:	6053      	str	r3, [r2, #4]
	hlsm6dsr.acceleration_mg[2] = temp_array[2];
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	4a04      	ldr	r2, [pc, #16]	; (8005738 <MRT_LSM6DSR_getAcceleration+0x38>)
 8005728:	6093      	str	r3, [r2, #8]
}
 800572a:	bf00      	nop
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	200004bc 	.word	0x200004bc
 8005738:	200004c4 	.word	0x200004c4

0800573c <MRT_LSM6DSR_getAngularRate>:
void MRT_LSM6DSR_getAngularRate(void){
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
	float* temp_array = lsm6dsr->getAngularRate();
 8005742:	4b0b      	ldr	r3, [pc, #44]	; (8005770 <MRT_LSM6DSR_getAngularRate+0x34>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4618      	mov	r0, r3
 8005748:	f000 fa82 	bl	8005c50 <_ZN7LSM6DSR14getAngularRateEv>
 800574c:	6078      	str	r0, [r7, #4]
	hlsm6dsr.angular_rate_mdps[0] = temp_array[0];
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a08      	ldr	r2, [pc, #32]	; (8005774 <MRT_LSM6DSR_getAngularRate+0x38>)
 8005754:	60d3      	str	r3, [r2, #12]
	hlsm6dsr.angular_rate_mdps[1] = temp_array[1];
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	4a06      	ldr	r2, [pc, #24]	; (8005774 <MRT_LSM6DSR_getAngularRate+0x38>)
 800575c:	6113      	str	r3, [r2, #16]
	hlsm6dsr.angular_rate_mdps[2] = temp_array[2];
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	4a04      	ldr	r2, [pc, #16]	; (8005774 <MRT_LSM6DSR_getAngularRate+0x38>)
 8005764:	6153      	str	r3, [r2, #20]
}
 8005766:	bf00      	nop
 8005768:	3708      	adds	r7, #8
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	200004bc 	.word	0x200004bc
 8005774:	200004c4 	.word	0x200004c4

08005778 <MRT_LSM6DSR_getTemperature>:
void MRT_LSM6DSR_getTemperature(void){
 8005778:	b580      	push	{r7, lr}
 800577a:	af00      	add	r7, sp, #0
	lsm6dsr->getTemperature();
 800577c:	4b05      	ldr	r3, [pc, #20]	; (8005794 <MRT_LSM6DSR_getTemperature+0x1c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4618      	mov	r0, r3
 8005782:	f000 fa2f 	bl	8005be4 <_ZN7LSM6DSR14getTemperatureEv>
	hlsm6dsr.temperature_degC = lsm6dsr->temperature_degC;
 8005786:	4b03      	ldr	r3, [pc, #12]	; (8005794 <MRT_LSM6DSR_getTemperature+0x1c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	4a02      	ldr	r2, [pc, #8]	; (8005798 <MRT_LSM6DSR_getTemperature+0x20>)
 800578e:	6193      	str	r3, [r2, #24]
}
 8005790:	bf00      	nop
 8005792:	bd80      	pop	{r7, pc}
 8005794:	200004bc 	.word	0x200004bc
 8005798:	200004c4 	.word	0x200004c4

0800579c <MRT_LSM6DSR_pollAll>:

void MRT_LSM6DSR_pollAll(void){
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
	MRT_LSM6DSR_getAcceleration();
 80057a0:	f7ff ffae 	bl	8005700 <MRT_LSM6DSR_getAcceleration>
	MRT_LSM6DSR_getAngularRate();
 80057a4:	f7ff ffca 	bl	800573c <MRT_LSM6DSR_getAngularRate>
	MRT_LSM6DSR_getTemperature();
 80057a8:	f7ff ffe6 	bl	8005778 <MRT_LSM6DSR_getTemperature>
}
 80057ac:	bf00      	nop
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <MRT_LPS22HH_Constructor>:


//**************************************************//
/*****LPS22HH STATIC FUNCTIONS*****/

void MRT_LPS22HH_Constructor(){
 80057b0:	b598      	push	{r3, r4, r7, lr}
 80057b2:	af00      	add	r7, sp, #0
	if (lps22hh==NULL){
 80057b4:	4b08      	ldr	r3, [pc, #32]	; (80057d8 <MRT_LPS22HH_Constructor+0x28>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10b      	bne.n	80057d4 <MRT_LPS22HH_Constructor+0x24>
		lps22hh = new LPS22HH(&LPS22HH_I2C, (uint8_t) MRT_LPS22HH_ADDRESS);
 80057bc:	2020      	movs	r0, #32
 80057be:	f010 fbc5 	bl	8015f4c <_Znwj>
 80057c2:	4603      	mov	r3, r0
 80057c4:	461c      	mov	r4, r3
 80057c6:	22b3      	movs	r2, #179	; 0xb3
 80057c8:	4904      	ldr	r1, [pc, #16]	; (80057dc <MRT_LPS22HH_Constructor+0x2c>)
 80057ca:	4620      	mov	r0, r4
 80057cc:	f000 fac4 	bl	8005d58 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>
 80057d0:	4b01      	ldr	r3, [pc, #4]	; (80057d8 <MRT_LPS22HH_Constructor+0x28>)
 80057d2:	601c      	str	r4, [r3, #0]
	}
}
 80057d4:	bf00      	nop
 80057d6:	bd98      	pop	{r3, r4, r7, pc}
 80057d8:	200004c0 	.word	0x200004c0
 80057dc:	2000ba78 	.word	0x2000ba78

080057e0 <MRT_LPS22HH_Destructor>:

void MRT_LPS22HH_Destructor(){
 80057e0:	b480      	push	{r7}
 80057e2:	af00      	add	r7, sp, #0
	if (lps22hh!=NULL){
 80057e4:	4b05      	ldr	r3, [pc, #20]	; (80057fc <MRT_LPS22HH_Destructor+0x1c>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <MRT_LPS22HH_Destructor+0x12>
		lps22hh = NULL;
 80057ec:	4b03      	ldr	r3, [pc, #12]	; (80057fc <MRT_LPS22HH_Destructor+0x1c>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	601a      	str	r2, [r3, #0]
	}
}
 80057f2:	bf00      	nop
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	200004c0 	.word	0x200004c0

08005800 <MRT_LPS22HH_getPressure>:

void MRT_LPS22HH_getPressure(void){
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
	hlps22hh.pressure_hPa = lps22hh->getPressure();
 8005804:	4b05      	ldr	r3, [pc, #20]	; (800581c <MRT_LPS22HH_getPressure+0x1c>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4618      	mov	r0, r3
 800580a:	f000 fb27 	bl	8005e5c <_ZN7LPS22HH11getPressureEv>
 800580e:	eef0 7a40 	vmov.f32	s15, s0
 8005812:	4b03      	ldr	r3, [pc, #12]	; (8005820 <MRT_LPS22HH_getPressure+0x20>)
 8005814:	edc3 7a00 	vstr	s15, [r3]
}
 8005818:	bf00      	nop
 800581a:	bd80      	pop	{r7, pc}
 800581c:	200004c0 	.word	0x200004c0
 8005820:	200004f0 	.word	0x200004f0

08005824 <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(void){
 8005824:	b580      	push	{r7, lr}
 8005826:	af00      	add	r7, sp, #0
	hlps22hh.temperature_degC = lps22hh->getTemperature();
 8005828:	4b05      	ldr	r3, [pc, #20]	; (8005840 <MRT_LPS22HH_getTemperature+0x1c>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4618      	mov	r0, r3
 800582e:	f000 fb49 	bl	8005ec4 <_ZN7LPS22HH14getTemperatureEv>
 8005832:	eef0 7a40 	vmov.f32	s15, s0
 8005836:	4b03      	ldr	r3, [pc, #12]	; (8005844 <MRT_LPS22HH_getTemperature+0x20>)
 8005838:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800583c:	bf00      	nop
 800583e:	bd80      	pop	{r7, pc}
 8005840:	200004c0 	.word	0x200004c0
 8005844:	200004f0 	.word	0x200004f0

08005848 <MRT_LPS22HH_pollAll>:

void MRT_LPS22HH_pollAll(void){
 8005848:	b580      	push	{r7, lr}
 800584a:	af00      	add	r7, sp, #0
	MRT_LPS22HH_getPressure();
 800584c:	f7ff ffd8 	bl	8005800 <MRT_LPS22HH_getPressure>
	MRT_LPS22HH_getTemperature();
 8005850:	f7ff ffe8 	bl	8005824 <MRT_LPS22HH_getTemperature>
}
 8005854:	bf00      	nop
 8005856:	bd80      	pop	{r7, pc}

08005858 <MRT_GPS_pollAll>:


//**************************************************//
/*****GPS STATIC FUNCTIONS*****/

void MRT_GPS_pollAll(void){
 8005858:	b580      	push	{r7, lr}
 800585a:	af00      	add	r7, sp, #0
	GPS_Poll(&hgps.latitude, &hgps.longitude, &hgps.time);
 800585c:	4a03      	ldr	r2, [pc, #12]	; (800586c <MRT_GPS_pollAll+0x14>)
 800585e:	4904      	ldr	r1, [pc, #16]	; (8005870 <MRT_GPS_pollAll+0x18>)
 8005860:	4804      	ldr	r0, [pc, #16]	; (8005874 <MRT_GPS_pollAll+0x1c>)
 8005862:	f000 fb9f 	bl	8005fa4 <GPS_Poll>
}
 8005866:	bf00      	nop
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	2000050c 	.word	0x2000050c
 8005870:	20000508 	.word	0x20000508
 8005874:	20000504 	.word	0x20000504

08005878 <MRT_LSM6DSR_Init>:


//**************************************************//
/*****PUBLIC STATIC FUNCTIONS*****/

HLSM6DSR MRT_LSM6DSR_Init(void){
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
	MRT_LSM6DSR_Constructor();
 8005880:	f7ff ff16 	bl	80056b0 <MRT_LSM6DSR_Constructor>
	HLSM6DSR lsm6dsr_handler;
	lsm6dsr_handler.getAcceleration = &MRT_LSM6DSR_getAcceleration;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a16      	ldr	r2, [pc, #88]	; (80058e0 <MRT_LSM6DSR_Init+0x68>)
 8005888:	61da      	str	r2, [r3, #28]
	lsm6dsr_handler.getAngularRate = &MRT_LSM6DSR_getAngularRate;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a15      	ldr	r2, [pc, #84]	; (80058e4 <MRT_LSM6DSR_Init+0x6c>)
 800588e:	621a      	str	r2, [r3, #32]
	lsm6dsr_handler.getTemperature = &MRT_LSM6DSR_getTemperature;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a15      	ldr	r2, [pc, #84]	; (80058e8 <MRT_LSM6DSR_Init+0x70>)
 8005894:	625a      	str	r2, [r3, #36]	; 0x24
	lsm6dsr_handler.pollAll = &MRT_LSM6DSR_pollAll;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a14      	ldr	r2, [pc, #80]	; (80058ec <MRT_LSM6DSR_Init+0x74>)
 800589a:	629a      	str	r2, [r3, #40]	; 0x28

	lsm6dsr_handler.acceleration_mg[0] = 0;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f04f 0200 	mov.w	r2, #0
 80058a2:	601a      	str	r2, [r3, #0]
	lsm6dsr_handler.acceleration_mg[1] = 0;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f04f 0200 	mov.w	r2, #0
 80058aa:	605a      	str	r2, [r3, #4]
	lsm6dsr_handler.acceleration_mg[2] = 0;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f04f 0200 	mov.w	r2, #0
 80058b2:	609a      	str	r2, [r3, #8]
	lsm6dsr_handler.angular_rate_mdps[0] = 0;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f04f 0200 	mov.w	r2, #0
 80058ba:	60da      	str	r2, [r3, #12]
	lsm6dsr_handler.angular_rate_mdps[1] = 0;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f04f 0200 	mov.w	r2, #0
 80058c2:	611a      	str	r2, [r3, #16]
	lsm6dsr_handler.angular_rate_mdps[2] = 0;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f04f 0200 	mov.w	r2, #0
 80058ca:	615a      	str	r2, [r3, #20]
	lsm6dsr_handler.temperature_degC = 0;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f04f 0200 	mov.w	r2, #0
 80058d2:	619a      	str	r2, [r3, #24]
	return lsm6dsr_handler;
 80058d4:	bf00      	nop
}
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	08005701 	.word	0x08005701
 80058e4:	0800573d 	.word	0x0800573d
 80058e8:	08005779 	.word	0x08005779
 80058ec:	0800579d 	.word	0x0800579d

080058f0 <MRT_LPS22HH_Init>:

struct HLPS22HH MRT_LPS22HH_Init(void){
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
	MRT_LPS22HH_Constructor();
 80058f8:	f7ff ff5a 	bl	80057b0 <MRT_LPS22HH_Constructor>
	struct HLPS22HH lps22hh_handler;
	lps22hh_handler.getPressure = &MRT_LPS22HH_getPressure;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a0a      	ldr	r2, [pc, #40]	; (8005928 <MRT_LPS22HH_Init+0x38>)
 8005900:	609a      	str	r2, [r3, #8]
	lps22hh_handler.getTemperature = &MRT_LPS22HH_getTemperature;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a09      	ldr	r2, [pc, #36]	; (800592c <MRT_LPS22HH_Init+0x3c>)
 8005906:	60da      	str	r2, [r3, #12]
	lps22hh_handler.pollAll = &MRT_LPS22HH_pollAll;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a09      	ldr	r2, [pc, #36]	; (8005930 <MRT_LPS22HH_Init+0x40>)
 800590c:	611a      	str	r2, [r3, #16]

	lps22hh_handler.pressure_hPa = 0;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f04f 0200 	mov.w	r2, #0
 8005914:	601a      	str	r2, [r3, #0]
	lps22hh_handler.temperature_degC = 0;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f04f 0200 	mov.w	r2, #0
 800591c:	605a      	str	r2, [r3, #4]
	return lps22hh_handler;
 800591e:	bf00      	nop
}
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	08005801 	.word	0x08005801
 800592c:	08005825 	.word	0x08005825
 8005930:	08005849 	.word	0x08005849

08005934 <MRT_GPS_Init>:

struct HGPS MRT_GPS_Init(void){
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
	struct HGPS gps_handler;
	gps_handler.pollAll = &MRT_GPS_pollAll;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a0c      	ldr	r2, [pc, #48]	; (8005970 <MRT_GPS_Init+0x3c>)
 8005940:	60da      	str	r2, [r3, #12]
	GPS_Init(&GPS_UART, print, tone_freq);
 8005942:	4a0c      	ldr	r2, [pc, #48]	; (8005974 <MRT_GPS_Init+0x40>)
 8005944:	490c      	ldr	r1, [pc, #48]	; (8005978 <MRT_GPS_Init+0x44>)
 8005946:	480d      	ldr	r0, [pc, #52]	; (800597c <MRT_GPS_Init+0x48>)
 8005948:	f000 fd8c 	bl	8006464 <GPS_Init>
	gps_handler.latitude = 0;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f04f 0200 	mov.w	r2, #0
 8005952:	601a      	str	r2, [r3, #0]
	gps_handler.longitude = 0;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f04f 0200 	mov.w	r2, #0
 800595a:	605a      	str	r2, [r3, #4]
	gps_handler.time = 0;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f04f 0200 	mov.w	r2, #0
 8005962:	609a      	str	r2, [r3, #8]
	return gps_handler;
 8005964:	bf00      	nop
}
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	08005859 	.word	0x08005859
 8005974:	08001095 	.word	0x08001095
 8005978:	08001069 	.word	0x08001069
 800597c:	2000bd6c 	.word	0x2000bd6c

08005980 <MRT_i2c_sensors_Init>:

void MRT_i2c_sensors_Init(void){
 8005980:	b5b0      	push	{r4, r5, r7, lr}
 8005982:	b08c      	sub	sp, #48	; 0x30
 8005984:	af00      	add	r7, sp, #0

	//LSM6DSR
	#if LSM6DSR_
	HAL_IWDG_Refresh(&hiwdg);
 8005986:	4818      	ldr	r0, [pc, #96]	; (80059e8 <MRT_i2c_sensors_Init+0x68>)
 8005988:	f005 fa84 	bl	800ae94 <HAL_IWDG_Refresh>
	hlsm6dsr = MRT_LSM6DSR_Init();
 800598c:	4c17      	ldr	r4, [pc, #92]	; (80059ec <MRT_i2c_sensors_Init+0x6c>)
 800598e:	463b      	mov	r3, r7
 8005990:	4618      	mov	r0, r3
 8005992:	f7ff ff71 	bl	8005878 <MRT_LSM6DSR_Init>
 8005996:	4625      	mov	r5, r4
 8005998:	463c      	mov	r4, r7
 800599a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800599c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800599e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059a2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80059a6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	#endif

	//LPS22HH
	#if LPS22HH_
	HAL_IWDG_Refresh(&hiwdg);
 80059aa:	480f      	ldr	r0, [pc, #60]	; (80059e8 <MRT_i2c_sensors_Init+0x68>)
 80059ac:	f005 fa72 	bl	800ae94 <HAL_IWDG_Refresh>
	hlps22hh = MRT_LPS22HH_Init();
 80059b0:	4c0f      	ldr	r4, [pc, #60]	; (80059f0 <MRT_i2c_sensors_Init+0x70>)
 80059b2:	463b      	mov	r3, r7
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7ff ff9b 	bl	80058f0 <MRT_LPS22HH_Init>
 80059ba:	4625      	mov	r5, r4
 80059bc:	463c      	mov	r4, r7
 80059be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059c2:	6823      	ldr	r3, [r4, #0]
 80059c4:	602b      	str	r3, [r5, #0]
	#endif

	//GPS
	#if GPS_
	HAL_IWDG_Refresh(&hiwdg);
 80059c6:	4808      	ldr	r0, [pc, #32]	; (80059e8 <MRT_i2c_sensors_Init+0x68>)
 80059c8:	f005 fa64 	bl	800ae94 <HAL_IWDG_Refresh>
	hgps = MRT_GPS_Init();
 80059cc:	4c09      	ldr	r4, [pc, #36]	; (80059f4 <MRT_i2c_sensors_Init+0x74>)
 80059ce:	463b      	mov	r3, r7
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7ff ffaf 	bl	8005934 <MRT_GPS_Init>
 80059d6:	463b      	mov	r3, r7
 80059d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80059da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	#endif

}
 80059de:	bf00      	nop
 80059e0:	3730      	adds	r7, #48	; 0x30
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bdb0      	pop	{r4, r5, r7, pc}
 80059e6:	bf00      	nop
 80059e8:	2000bb20 	.word	0x2000bb20
 80059ec:	200004c4 	.word	0x200004c4
 80059f0:	200004f0 	.word	0x200004f0
 80059f4:	20000504 	.word	0x20000504

080059f8 <MRT_i2c_sensors_Deinit>:


void MRT_i2c_sensors_Deinit(void){
 80059f8:	b580      	push	{r7, lr}
 80059fa:	af00      	add	r7, sp, #0

	//LSM6DSR
	#if LSM6DSR_
	MRT_LSM6DSR_Destructor();
 80059fc:	f7ff fe70 	bl	80056e0 <MRT_LSM6DSR_Destructor>
	#endif

	//LPS22HH
	#if LPS22HH_
	MRT_LPS22HH_Destructor();
 8005a00:	f7ff feee 	bl	80057e0 <MRT_LPS22HH_Destructor>
	#endif

	//GPS
	//NO DEINIT NEEDED HERE
}
 8005a04:	bf00      	nop
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>:


//**************************************************//
/*****LSM6DSR*****/

LSM6DSR::LSM6DSR(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b088      	sub	sp, #32
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	4613      	mov	r3, r2
 8005a14:	71fb      	strb	r3, [r7, #7]
	println((char*) "\r\nLSM6DSR Init");
 8005a16:	4846      	ldr	r0, [pc, #280]	; (8005b30 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x128>)
 8005a18:	f7fb fb08 	bl	800102c <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4a45      	ldr	r2, [pc, #276]	; (8005b34 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x12c>)
 8005a20:	61da      	str	r2, [r3, #28]
	ctx.read_reg = read;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	4a44      	ldr	r2, [pc, #272]	; (8005b38 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x130>)
 8005a26:	621a      	str	r2, [r3, #32]
	ctx.handle = i2c_bus;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait sensor boot time */
	HAL_Delay(LSM6DSR_BOOT_TIME);
 8005a2e:	2064      	movs	r0, #100	; 0x64
 8005a30:	f003 fa40 	bl	8008eb4 <HAL_Delay>
	/* Check device ID */
	lsm6dsr_device_id_get(&ctx, &whoamI);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f103 021c 	add.w	r2, r3, #28
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	3338      	adds	r3, #56	; 0x38
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4610      	mov	r0, r2
 8005a42:	f001 fae5 	bl	8007010 <lsm6dsr_device_id_get>

	print((char*) "\tChecking Sensor ID...");
 8005a46:	483d      	ldr	r0, [pc, #244]	; (8005b3c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x134>)
 8005a48:	f7fb fb0e 	bl	8001068 <print>
	if (whoamI != address){
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a52:	79fa      	ldrb	r2, [r7, #7]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d014      	beq.n	8005a82 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x7a>
	  println((char*) "NOT OK");
 8005a58:	4839      	ldr	r0, [pc, #228]	; (8005b40 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x138>)
 8005a5a:	f7fb fae7 	bl	800102c <println>
	  print((char*) "\tThis Device is: ");
 8005a5e:	4839      	ldr	r0, [pc, #228]	; (8005b44 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x13c>)
 8005a60:	f7fb fb02 	bl	8001068 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	f107 0314 	add.w	r3, r7, #20
 8005a70:	4935      	ldr	r1, [pc, #212]	; (8005b48 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x140>)
 8005a72:	4618      	mov	r0, r3
 8005a74:	f012 fc30 	bl	80182d8 <siprintf>
	  print(buffer);
 8005a78:	f107 0314 	add.w	r3, r7, #20
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7fb faf3 	bl	8001068 <print>
		HAL_PWR_EnterSTANDBYMode();
		*/


	}
	println((char*) "OK");
 8005a82:	4832      	ldr	r0, [pc, #200]	; (8005b4c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x144>)
 8005a84:	f7fb fad2 	bl	800102c <println>

	/* Restore default configuration */
	print((char*) "\tRestore default configuration...");
 8005a88:	4831      	ldr	r0, [pc, #196]	; (8005b50 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x148>)
 8005a8a:	f7fb faed 	bl	8001068 <print>
	lsm6dsr_reset_set(&ctx, PROPERTY_ENABLE);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	331c      	adds	r3, #28
 8005a92:	2101      	movs	r1, #1
 8005a94:	4618      	mov	r0, r3
 8005a96:	f001 facc 	bl	8007032 <lsm6dsr_reset_set>
	HAL_Delay(500);
 8005a9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005a9e:	f003 fa09 	bl	8008eb4 <HAL_Delay>
	do {
	lsm6dsr_reset_get(&ctx, &rst);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f103 021c 	add.w	r2, r3, #28
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	3339      	adds	r3, #57	; 0x39
 8005aac:	4619      	mov	r1, r3
 8005aae:	4610      	mov	r0, r2
 8005ab0:	f001 fae5 	bl	800707e <lsm6dsr_reset_get>
	} while (rst);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d000      	beq.n	8005ac0 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0xb8>
	do {
 8005abe:	e7f0      	b.n	8005aa2 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x9a>
	println((char*) "OK");
 8005ac0:	4822      	ldr	r0, [pc, #136]	; (8005b4c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x144>)
 8005ac2:	f7fb fab3 	bl	800102c <println>

	/* Disable I3C interface */
    lsm6dsr_i3c_disable_set(&ctx, LSM6DSR_I3C_DISABLE);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	331c      	adds	r3, #28
 8005aca:	2180      	movs	r1, #128	; 0x80
 8005acc:	4618      	mov	r0, r3
 8005ace:	f001 fb4d 	bl	800716c <lsm6dsr_i3c_disable_set>

	/* Enable Block Data Update */
	lsm6dsr_block_data_update_set(&ctx, PROPERTY_ENABLE);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	331c      	adds	r3, #28
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f001 f949 	bl	8006d70 <lsm6dsr_block_data_update_set>
	/* Set Output Data Rate */
	lsm6dsr_xl_data_rate_set(&ctx, LSM6DSR_XL_ODR_12Hz5);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	331c      	adds	r3, #28
 8005ae2:	2101      	movs	r1, #1
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 ff25 	bl	8006934 <lsm6dsr_xl_data_rate_set>
	lsm6dsr_gy_data_rate_set(&ctx, LSM6DSR_GY_ODR_12Hz5);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	331c      	adds	r3, #28
 8005aee:	2101      	movs	r1, #1
 8005af0:	4618      	mov	r0, r3
 8005af2:	f001 f841 	bl	8006b78 <lsm6dsr_gy_data_rate_set>
	/* Set full scale */
	lsm6dsr_xl_full_scale_set(&ctx, LSM6DSR_2g);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	331c      	adds	r3, #28
 8005afa:	2100      	movs	r1, #0
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 fef3 	bl	80068e8 <lsm6dsr_xl_full_scale_set>
	lsm6dsr_gy_full_scale_set(&ctx, LSM6DSR_2000dps);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	331c      	adds	r3, #28
 8005b06:	210c      	movs	r1, #12
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f001 f80f 	bl	8006b2c <lsm6dsr_gy_full_scale_set>
	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsr_xl_hp_path_on_out_set(&ctx, LSM6DSR_LP_ODR_DIV_100);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	331c      	adds	r3, #28
 8005b12:	2104      	movs	r1, #4
 8005b14:	4618      	mov	r0, r3
 8005b16:	f001 faf1 	bl	80070fc <lsm6dsr_xl_hp_path_on_out_set>
	lsm6dsr_xl_filter_lp2_set(&ctx, PROPERTY_ENABLE);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	331c      	adds	r3, #28
 8005b1e:	2101      	movs	r1, #1
 8005b20:	4618      	mov	r0, r3
 8005b22:	f001 fac5 	bl	80070b0 <lsm6dsr_xl_filter_lp2_set>
}
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3720      	adds	r7, #32
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	0801d258 	.word	0x0801d258
 8005b34:	08005ce3 	.word	0x08005ce3
 8005b38:	08005d1d 	.word	0x08005d1d
 8005b3c:	0801d268 	.word	0x0801d268
 8005b40:	0801d280 	.word	0x0801d280
 8005b44:	0801d288 	.word	0x0801d288
 8005b48:	0801d29c 	.word	0x0801d29c
 8005b4c:	0801d2a4 	.word	0x0801d2a4
 8005b50:	0801d2a8 	.word	0x0801d2a8

08005b54 <_ZN7LSM6DSR15getAccelerationEv>:


float* LSM6DSR::getAcceleration(void){
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
	lsm6dsr_xl_flag_data_ready_get(&ctx, &reg);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f103 021c 	add.w	r2, r3, #28
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	3328      	adds	r3, #40	; 0x28
 8005b66:	4619      	mov	r1, r3
 8005b68:	4610      	mov	r0, r2
 8005b6a:	f001 f927 	bl	8006dbc <lsm6dsr_xl_flag_data_ready_get>

	if (reg){
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d030      	beq.n	8005bda <_ZN7LSM6DSR15getAccelerationEv+0x86>
		// Read magnetic field data
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	332a      	adds	r3, #42	; 0x2a
 8005b7c:	2206      	movs	r2, #6
 8005b7e:	2100      	movs	r1, #0
 8005b80:	4618      	mov	r0, r3
 8005b82:	f011 fb2b 	bl	80171dc <memset>
		lsm6dsr_acceleration_raw_get(&ctx, data_raw_acceleration);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f103 021c 	add.w	r2, r3, #28
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	332a      	adds	r3, #42	; 0x2a
 8005b90:	4619      	mov	r1, r3
 8005b92:	4610      	mov	r0, r2
 8005b94:	f001 f9cb 	bl	8006f2e <lsm6dsr_acceleration_raw_get>
		acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[0]);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 fe56 	bl	8006850 <lsm6dsr_from_fs2g_to_mg>
 8005ba4:	eef0 7a40 	vmov.f32	s15, s0
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	edc3 7a00 	vstr	s15, [r3]
		acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[1]);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 fe4b 	bl	8006850 <lsm6dsr_from_fs2g_to_mg>
 8005bba:	eef0 7a40 	vmov.f32	s15, s0
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	edc3 7a01 	vstr	s15, [r3, #4]
		acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[2]);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 fe40 	bl	8006850 <lsm6dsr_from_fs2g_to_mg>
 8005bd0:	eef0 7a40 	vmov.f32	s15, s0
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	return acceleration_mg;
 8005bda:	687b      	ldr	r3, [r7, #4]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <_ZN7LSM6DSR14getTemperatureEv>:


float LSM6DSR::getTemperature(void){
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
    lsm6dsr_temp_flag_data_ready_get(&ctx, &reg);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f103 021c 	add.w	r2, r3, #28
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	3328      	adds	r3, #40	; 0x28
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	f001 f911 	bl	8006e20 <lsm6dsr_temp_flag_data_ready_get>

    if (reg){
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d01a      	beq.n	8005c3e <_ZN7LSM6DSR14getTemperatureEv+0x5a>
		// Read temperature data
		memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	3336      	adds	r3, #54	; 0x36
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	2100      	movs	r1, #0
 8005c10:	4618      	mov	r0, r3
 8005c12:	f011 fae3 	bl	80171dc <memset>
		lsm6dsr_temperature_raw_get(&ctx, &data_raw_temperature);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f103 021c 	add.w	r2, r3, #28
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3336      	adds	r3, #54	; 0x36
 8005c20:	4619      	mov	r1, r3
 8005c22:	4610      	mov	r0, r2
 8005c24:	f001 f915 	bl	8006e52 <lsm6dsr_temperature_raw_get>
		temperature_degC = lsm6dsr_from_lsb_to_celsius(data_raw_temperature);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 fe3e 	bl	80068b0 <lsm6dsr_from_lsb_to_celsius>
 8005c34:	eef0 7a40 	vmov.f32	s15, s0
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	edc3 7a06 	vstr	s15, [r3, #24]
	}
    return temperature_degC;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	ee07 3a90 	vmov	s15, r3
}
 8005c46:	eeb0 0a67 	vmov.f32	s0, s15
 8005c4a:	3708      	adds	r7, #8
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <_ZN7LSM6DSR14getAngularRateEv>:


float* LSM6DSR::getAngularRate(void){
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
    lsm6dsr_gy_flag_data_ready_get(&ctx, &reg);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f103 021c 	add.w	r2, r3, #28
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	3328      	adds	r3, #40	; 0x28
 8005c62:	4619      	mov	r1, r3
 8005c64:	4610      	mov	r0, r2
 8005c66:	f001 f8c2 	bl	8006dee <lsm6dsr_gy_flag_data_ready_get>

    if (reg){
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d030      	beq.n	8005cd6 <_ZN7LSM6DSR14getAngularRateEv+0x86>
		// Read magnetic field data
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	3330      	adds	r3, #48	; 0x30
 8005c78:	2206      	movs	r2, #6
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f011 faad 	bl	80171dc <memset>
		lsm6dsr_angular_rate_raw_get(&ctx, data_raw_angular_rate);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f103 021c 	add.w	r2, r3, #28
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3330      	adds	r3, #48	; 0x30
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	4610      	mov	r0, r2
 8005c90:	f001 f902 	bl	8006e98 <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 fdf0 	bl	8006880 <lsm6dsr_from_fs2000dps_to_mdps>
 8005ca0:	eef0 7a40 	vmov.f32	s15, s0
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	edc3 7a03 	vstr	s15, [r3, #12]
		angular_rate_mdps[1] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 fde5 	bl	8006880 <lsm6dsr_from_fs2000dps_to_mdps>
 8005cb6:	eef0 7a40 	vmov.f32	s15, s0
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	edc3 7a04 	vstr	s15, [r3, #16]
		angular_rate_mdps[2] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 fdda 	bl	8006880 <lsm6dsr_from_fs2000dps_to_mdps>
 8005ccc:	eef0 7a40 	vmov.f32	s15, s0
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	edc3 7a05 	vstr	s15, [r3, #20]
		fs500dps_to_mdps
		fs1000dps_to_mdps
		fs2000dps_to_mdps
		*/
	}
    return angular_rate_mdps;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	330c      	adds	r3, #12
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <_ZN7LSM6DSR5writeEPvhPKht>:


int32_t LSM6DSR::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b088      	sub	sp, #32
 8005ce6:	af04      	add	r7, sp, #16
 8005ce8:	60f8      	str	r0, [r7, #12]
 8005cea:	607a      	str	r2, [r7, #4]
 8005cec:	461a      	mov	r2, r3
 8005cee:	460b      	mov	r3, r1
 8005cf0:	72fb      	strb	r3, [r7, #11]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8005cf6:	7afb      	ldrb	r3, [r7, #11]
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005cfe:	9302      	str	r3, [sp, #8]
 8005d00:	893b      	ldrh	r3, [r7, #8]
 8005d02:	9301      	str	r3, [sp, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	9300      	str	r3, [sp, #0]
 8005d08:	2301      	movs	r3, #1
 8005d0a:	21d5      	movs	r1, #213	; 0xd5
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f004 f953 	bl	8009fb8 <HAL_I2C_Mem_Write>
  return 0;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <_ZN7LSM6DSR4readEPvhPht>:

int32_t LSM6DSR::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b088      	sub	sp, #32
 8005d20:	af04      	add	r7, sp, #16
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	607a      	str	r2, [r7, #4]
 8005d26:	461a      	mov	r2, r3
 8005d28:	460b      	mov	r3, r1
 8005d2a:	72fb      	strb	r3, [r7, #11]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8005d30:	7afb      	ldrb	r3, [r7, #11]
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d38:	9302      	str	r3, [sp, #8]
 8005d3a:	893b      	ldrh	r3, [r7, #8]
 8005d3c:	9301      	str	r3, [sp, #4]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	2301      	movs	r3, #1
 8005d44:	21d5      	movs	r1, #213	; 0xd5
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f004 fa30 	bl	800a1ac <HAL_I2C_Mem_Read>
  return 0;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
	...

08005d58 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>:

//**************************************************//
/*****LPS22HH*****/


LPS22HH::LPS22HH(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b088      	sub	sp, #32
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	4613      	mov	r3, r2
 8005d64:	71fb      	strb	r3, [r7, #7]
	println((char*) "\r\nLPS22HH Init");
 8005d66:	4834      	ldr	r0, [pc, #208]	; (8005e38 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xe0>)
 8005d68:	f7fb f960 	bl	800102c <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4a33      	ldr	r2, [pc, #204]	; (8005e3c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xe4>)
 8005d70:	609a      	str	r2, [r3, #8]
	ctx.read_reg = read;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	4a32      	ldr	r2, [pc, #200]	; (8005e40 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xe8>)
 8005d76:	60da      	str	r2, [r3, #12]
	ctx.handle = i2c_bus;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	611a      	str	r2, [r3, #16]
	/* Wait sensor boot time */
	HAL_Delay(LPS22HH_BOOT_TIME);
 8005d7e:	2064      	movs	r0, #100	; 0x64
 8005d80:	f003 f898 	bl	8008eb4 <HAL_Delay>
	/* Check device ID */
	whoamI = 0;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	779a      	strb	r2, [r3, #30]
	lps22hh_device_id_get(&ctx, &whoamI);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f103 0208 	add.w	r2, r3, #8
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	331e      	adds	r3, #30
 8005d94:	4619      	mov	r1, r3
 8005d96:	4610      	mov	r0, r2
 8005d98:	f000 fcda 	bl	8006750 <lps22hh_device_id_get>


	print((char*) "\tChecking Sensor ID...");
 8005d9c:	4829      	ldr	r0, [pc, #164]	; (8005e44 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xec>)
 8005d9e:	f7fb f963 	bl	8001068 <print>
	if ( whoamI != address ){
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	7f9b      	ldrb	r3, [r3, #30]
 8005da6:	79fa      	ldrb	r2, [r7, #7]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d013      	beq.n	8005dd4 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x7c>
	  println((char*) "NOT OK");
 8005dac:	4826      	ldr	r0, [pc, #152]	; (8005e48 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf0>)
 8005dae:	f7fb f93d 	bl	800102c <println>
	  print((char*) "\tThis Device is: ");
 8005db2:	4826      	ldr	r0, [pc, #152]	; (8005e4c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf4>)
 8005db4:	f7fb f958 	bl	8001068 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	7f9b      	ldrb	r3, [r3, #30]
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	f107 0314 	add.w	r3, r7, #20
 8005dc2:	4923      	ldr	r1, [pc, #140]	; (8005e50 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf8>)
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f012 fa87 	bl	80182d8 <siprintf>
	  print(buffer);
 8005dca:	f107 0314 	add.w	r3, r7, #20
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7fb f94a 	bl	8001068 <print>
		MRT_clear_alarms_flags();
		HAL_PWR_EnterSTANDBYMode();
		*/

	}
	println((char*) "OK");
 8005dd4:	481f      	ldr	r0, [pc, #124]	; (8005e54 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xfc>)
 8005dd6:	f7fb f929 	bl	800102c <println>

	/* Restore default configuration */
	print((char*) "\tRestore default configuration...");
 8005dda:	481f      	ldr	r0, [pc, #124]	; (8005e58 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x100>)
 8005ddc:	f7fb f944 	bl	8001068 <print>
	lps22hh_reset_set(&ctx, PROPERTY_ENABLE);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	3308      	adds	r3, #8
 8005de4:	2101      	movs	r1, #1
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 fcc3 	bl	8006772 <lps22hh_reset_set>
	HAL_Delay(500);
 8005dec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005df0:	f003 f860 	bl	8008eb4 <HAL_Delay>
	do {
	lps22hh_reset_get(&ctx, &rst);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f103 0208 	add.w	r2, r3, #8
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	331f      	adds	r3, #31
 8005dfe:	4619      	mov	r1, r3
 8005e00:	4610      	mov	r0, r2
 8005e02:	f000 fcdc 	bl	80067be <lps22hh_reset_get>
	} while (rst);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	7fdb      	ldrb	r3, [r3, #31]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d000      	beq.n	8005e10 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xb8>
	do {
 8005e0e:	e7f1      	b.n	8005df4 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x9c>
	println((char*) "OK");
 8005e10:	4810      	ldr	r0, [pc, #64]	; (8005e54 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xfc>)
 8005e12:	f7fb f90b 	bl	800102c <println>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&ctx, PROPERTY_ENABLE);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	3308      	adds	r3, #8
 8005e1a:	2101      	movs	r1, #1
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f000 fba5 	bl	800656c <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&ctx, LPS22HH_75_Hz_LOW_NOISE);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	3308      	adds	r3, #8
 8005e26:	2115      	movs	r1, #21
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f000 fbc5 	bl	80065b8 <lps22hh_data_rate_set>
}
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4618      	mov	r0, r3
 8005e32:	3720      	adds	r7, #32
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	0801d2cc 	.word	0x0801d2cc
 8005e3c:	08005f2f 	.word	0x08005f2f
 8005e40:	08005f69 	.word	0x08005f69
 8005e44:	0801d268 	.word	0x0801d268
 8005e48:	0801d280 	.word	0x0801d280
 8005e4c:	0801d288 	.word	0x0801d288
 8005e50:	0801d29c 	.word	0x0801d29c
 8005e54:	0801d2a4 	.word	0x0801d2a4
 8005e58:	0801d2a8 	.word	0x0801d2a8

08005e5c <_ZN7LPS22HH11getPressureEv>:



float LPS22HH::getPressure(void){
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_press_flag_data_ready_get(&ctx, &reg);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f103 0208 	add.w	r2, r3, #8
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	3314      	adds	r3, #20
 8005e6e:	4619      	mov	r1, r3
 8005e70:	4610      	mov	r0, r2
 8005e72:	f000 fbef 	bl	8006654 <lps22hh_press_flag_data_ready_get>

	if (reg) {
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	7d1b      	ldrb	r3, [r3, #20]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d019      	beq.n	8005eb2 <_ZN7LPS22HH11getPressureEv+0x56>
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	3318      	adds	r3, #24
 8005e82:	2204      	movs	r2, #4
 8005e84:	2100      	movs	r1, #0
 8005e86:	4618      	mov	r0, r3
 8005e88:	f011 f9a8 	bl	80171dc <memset>
	  lps22hh_pressure_raw_get(&ctx, &data_raw_pressure);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f103 0208 	add.w	r2, r3, #8
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	3318      	adds	r3, #24
 8005e96:	4619      	mov	r1, r3
 8005e98:	4610      	mov	r0, r2
 8005e9a:	f000 fc0d 	bl	80066b8 <lps22hh_pressure_raw_get>
	  pressure_hPa = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f000 fb30 	bl	8006508 <lps22hh_from_lsb_to_hpa>
 8005ea8:	eef0 7a40 	vmov.f32	s15, s0
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	edc3 7a00 	vstr	s15, [r3]
	}
	return pressure_hPa;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	ee07 3a90 	vmov	s15, r3
}
 8005eba:	eeb0 0a67 	vmov.f32	s0, s15
 8005ebe:	3708      	adds	r7, #8
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <_ZN7LPS22HH14getTemperatureEv>:


float LPS22HH::getTemperature(void){
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_temp_flag_data_ready_get(&ctx, &reg);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f103 0208 	add.w	r2, r3, #8
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	3314      	adds	r3, #20
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	4610      	mov	r0, r2
 8005eda:	f000 fbd4 	bl	8006686 <lps22hh_temp_flag_data_ready_get>

	if (reg) {
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	7d1b      	ldrb	r3, [r3, #20]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d01a      	beq.n	8005f1c <_ZN7LPS22HH14getTemperatureEv+0x58>
	  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	331c      	adds	r3, #28
 8005eea:	2202      	movs	r2, #2
 8005eec:	2100      	movs	r1, #0
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f011 f974 	bl	80171dc <memset>
	  lps22hh_temperature_raw_get(&ctx, &data_raw_temperature);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f103 0208 	add.w	r2, r3, #8
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	331c      	adds	r3, #28
 8005efe:	4619      	mov	r1, r3
 8005f00:	4610      	mov	r0, r2
 8005f02:	f000 fc02 	bl	800670a <lps22hh_temperature_raw_get>
	  temperature_degC = lps22hh_from_lsb_to_celsius(data_raw_temperature);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f000 fb13 	bl	8006538 <lps22hh_from_lsb_to_celsius>
 8005f12:	eef0 7a40 	vmov.f32	s15, s0
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	return temperature_degC;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	ee07 3a90 	vmov	s15, r3
}
 8005f24:	eeb0 0a67 	vmov.f32	s0, s15
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <_ZN7LPS22HH5writeEPvhPKht>:



int32_t LPS22HH::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b088      	sub	sp, #32
 8005f32:	af04      	add	r7, sp, #16
 8005f34:	60f8      	str	r0, [r7, #12]
 8005f36:	607a      	str	r2, [r7, #4]
 8005f38:	461a      	mov	r2, r3
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	72fb      	strb	r3, [r7, #11]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8005f42:	7afb      	ldrb	r3, [r7, #11]
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f4a:	9302      	str	r3, [sp, #8]
 8005f4c:	893b      	ldrh	r3, [r7, #8]
 8005f4e:	9301      	str	r3, [sp, #4]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	2301      	movs	r3, #1
 8005f56:	21b9      	movs	r1, #185	; 0xb9
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f004 f82d 	bl	8009fb8 <HAL_I2C_Mem_Write>
  return 0;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <_ZN7LPS22HH4readEPvhPht>:

int32_t LPS22HH::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b088      	sub	sp, #32
 8005f6c:	af04      	add	r7, sp, #16
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	607a      	str	r2, [r7, #4]
 8005f72:	461a      	mov	r2, r3
 8005f74:	460b      	mov	r3, r1
 8005f76:	72fb      	strb	r3, [r7, #11]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8005f7c:	7afb      	ldrb	r3, [r7, #11]
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f84:	9302      	str	r3, [sp, #8]
 8005f86:	893b      	ldrh	r3, [r7, #8]
 8005f88:	9301      	str	r3, [sp, #4]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	2301      	movs	r3, #1
 8005f90:	21b9      	movs	r1, #185	; 0xb9
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f004 f90a 	bl	800a1ac <HAL_I2C_Mem_Read>
  return 0;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
	...

08005fa4 <GPS_Poll>:
#define LED3_GPIO_Port	((GPIO_TypeDef *) ((0x40000000UL + 0x00020000UL) + 0x0800UL))//OUT_LED3_GPIO_Port
#define LED3_Pin	(uint16_t)0x0008//OUT_LED3_Pin


void GPS_Poll(float *latitude, float *longitude, float *time)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b08c      	sub	sp, #48	; 0x30
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 8005fb0:	2364      	movs	r3, #100	; 0x64
 8005fb2:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 8005fbc:	e073      	b.n	80060a6 <GPS_Poll+0x102>
		HAL_UART_Receive(GPS.uart, (uint8_t*)&rx_current, 1, 100);
 8005fbe:	4b3f      	ldr	r3, [pc, #252]	; (80060bc <GPS_Poll+0x118>)
 8005fc0:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005fc2:	2364      	movs	r3, #100	; 0x64
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	493e      	ldr	r1, [pc, #248]	; (80060c0 <GPS_Poll+0x11c>)
 8005fc8:	f008 fbb5 	bl	800e736 <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 8005fcc:	4b3c      	ldr	r3, [pc, #240]	; (80060c0 <GPS_Poll+0x11c>)
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	2b0a      	cmp	r3, #10
 8005fd2:	d00f      	beq.n	8005ff4 <GPS_Poll+0x50>
 8005fd4:	4b3b      	ldr	r3, [pc, #236]	; (80060c4 <GPS_Poll+0x120>)
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	2b63      	cmp	r3, #99	; 0x63
 8005fda:	d80b      	bhi.n	8005ff4 <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 8005fdc:	4b39      	ldr	r3, [pc, #228]	; (80060c4 <GPS_Poll+0x120>)
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	1c5a      	adds	r2, r3, #1
 8005fe2:	b2d1      	uxtb	r1, r2
 8005fe4:	4a37      	ldr	r2, [pc, #220]	; (80060c4 <GPS_Poll+0x120>)
 8005fe6:	7011      	strb	r1, [r2, #0]
 8005fe8:	461a      	mov	r2, r3
 8005fea:	4b35      	ldr	r3, [pc, #212]	; (80060c0 <GPS_Poll+0x11c>)
 8005fec:	7819      	ldrb	r1, [r3, #0]
 8005fee:	4b36      	ldr	r3, [pc, #216]	; (80060c8 <GPS_Poll+0x124>)
 8005ff0:	5499      	strb	r1, [r3, r2]
 8005ff2:	e021      	b.n	8006038 <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 8005ff4:	4834      	ldr	r0, [pc, #208]	; (80060c8 <GPS_Poll+0x124>)
 8005ff6:	f000 f869 	bl	80060cc <GPS_validate>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d013      	beq.n	8006028 <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 8006000:	4831      	ldr	r0, [pc, #196]	; (80060c8 <GPS_Poll+0x124>)
 8006002:	f000 f8c5 	bl	8006190 <GPS_parse>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00d      	beq.n	8006028 <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 800600c:	4b2b      	ldr	r3, [pc, #172]	; (80060bc <GPS_Poll+0x118>)
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 8006014:	4b29      	ldr	r3, [pc, #164]	; (80060bc <GPS_Poll+0x118>)
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 800601c:	4b27      	ldr	r3, [pc, #156]	; (80060bc <GPS_Poll+0x118>)
 800601e:	695a      	ldr	r2, [r3, #20]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	601a      	str	r2, [r3, #0]
					done = 1;
 8006024:	2301      	movs	r3, #1
 8006026:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 8006028:	4b26      	ldr	r3, [pc, #152]	; (80060c4 <GPS_Poll+0x120>)
 800602a:	2200      	movs	r2, #0
 800602c:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 800602e:	2264      	movs	r2, #100	; 0x64
 8006030:	2100      	movs	r1, #0
 8006032:	4825      	ldr	r0, [pc, #148]	; (80060c8 <GPS_Poll+0x124>)
 8006034:	f011 f8d2 	bl	80171dc <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS.uart);
 8006038:	2300      	movs	r3, #0
 800603a:	623b      	str	r3, [r7, #32]
 800603c:	4b1f      	ldr	r3, [pc, #124]	; (80060bc <GPS_Poll+0x118>)
 800603e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	623b      	str	r3, [r7, #32]
 8006046:	4b1d      	ldr	r3, [pc, #116]	; (80060bc <GPS_Poll+0x118>)
 8006048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	623b      	str	r3, [r7, #32]
 8006050:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS.uart);
 8006052:	2300      	movs	r3, #0
 8006054:	61fb      	str	r3, [r7, #28]
 8006056:	4b19      	ldr	r3, [pc, #100]	; (80060bc <GPS_Poll+0x118>)
 8006058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	61fb      	str	r3, [r7, #28]
 8006060:	4b16      	ldr	r3, [pc, #88]	; (80060bc <GPS_Poll+0x118>)
 8006062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	61fb      	str	r3, [r7, #28]
 800606a:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS.uart);
 800606c:	2300      	movs	r3, #0
 800606e:	61bb      	str	r3, [r7, #24]
 8006070:	4b12      	ldr	r3, [pc, #72]	; (80060bc <GPS_Poll+0x118>)
 8006072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	61bb      	str	r3, [r7, #24]
 800607a:	4b10      	ldr	r3, [pc, #64]	; (80060bc <GPS_Poll+0x118>)
 800607c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	61bb      	str	r3, [r7, #24]
 8006084:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS.uart);
 8006086:	2300      	movs	r3, #0
 8006088:	617b      	str	r3, [r7, #20]
 800608a:	4b0c      	ldr	r3, [pc, #48]	; (80060bc <GPS_Poll+0x118>)
 800608c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	617b      	str	r3, [r7, #20]
 8006094:	4b09      	ldr	r3, [pc, #36]	; (80060bc <GPS_Poll+0x118>)
 8006096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	617b      	str	r3, [r7, #20]
 800609e:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 80060a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80060a2:	3301      	adds	r3, #1
 80060a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 80060a6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80060a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d202      	bcs.n	80060b4 <GPS_Poll+0x110>
 80060ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d084      	beq.n	8005fbe <GPS_Poll+0x1a>
	}
}
 80060b4:	bf00      	nop
 80060b6:	3730      	adds	r7, #48	; 0x30
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	2000cb3c 	.word	0x2000cb3c
 80060c0:	20000514 	.word	0x20000514
 80060c4:	20000515 	.word	0x20000515
 80060c8:	2000cba0 	.word	0x2000cba0

080060cc <GPS_validate>:

int GPS_validate(char *nmeastr){
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 80060d4:	2300      	movs	r3, #0
 80060d6:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 80060d8:	2300      	movs	r3, #0
 80060da:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	4413      	add	r3, r2
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	2b24      	cmp	r3, #36	; 0x24
 80060e6:	d103      	bne.n	80060f0 <GPS_validate+0x24>
        i++;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	3301      	adds	r3, #1
 80060ec:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80060ee:	e00c      	b.n	800610a <GPS_validate+0x3e>
        return 0;
 80060f0:	2300      	movs	r3, #0
 80060f2:	e047      	b.n	8006184 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	4413      	add	r3, r2
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	461a      	mov	r2, r3
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	4053      	eors	r3, r2
 8006102:	613b      	str	r3, [r7, #16]
        i++;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	3301      	adds	r3, #1
 8006108:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	4413      	add	r3, r2
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d008      	beq.n	8006128 <GPS_validate+0x5c>
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	4413      	add	r3, r2
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	2b2a      	cmp	r3, #42	; 0x2a
 8006120:	d002      	beq.n	8006128 <GPS_validate+0x5c>
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	2b4a      	cmp	r3, #74	; 0x4a
 8006126:	dde5      	ble.n	80060f4 <GPS_validate+0x28>
    }

    if(i >= 75){
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	2b4a      	cmp	r3, #74	; 0x4a
 800612c:	dd01      	ble.n	8006132 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 800612e:	2300      	movs	r3, #0
 8006130:	e028      	b.n	8006184 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	4413      	add	r3, r2
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	2b2a      	cmp	r3, #42	; 0x2a
 800613c:	d119      	bne.n	8006172 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	3301      	adds	r3, #1
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	4413      	add	r3, r2
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	3302      	adds	r3, #2
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	4413      	add	r3, r2
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8006156:	2300      	movs	r3, #0
 8006158:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 800615a:	f107 0308 	add.w	r3, r7, #8
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	490a      	ldr	r1, [pc, #40]	; (800618c <GPS_validate+0xc0>)
 8006162:	4618      	mov	r0, r3
 8006164:	f012 f8b8 	bl	80182d8 <siprintf>
    return((checkcalcstr[0] == check[0])
 8006168:	7a3a      	ldrb	r2, [r7, #8]
 800616a:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800616c:	429a      	cmp	r2, r3
 800616e:	d108      	bne.n	8006182 <GPS_validate+0xb6>
 8006170:	e001      	b.n	8006176 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8006172:	2300      	movs	r3, #0
 8006174:	e006      	b.n	8006184 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8006176:	7a7a      	ldrb	r2, [r7, #9]
 8006178:	7b7b      	ldrb	r3, [r7, #13]
 800617a:	429a      	cmp	r2, r3
 800617c:	d101      	bne.n	8006182 <GPS_validate+0xb6>
 800617e:	2301      	movs	r3, #1
 8006180:	e000      	b.n	8006184 <GPS_validate+0xb8>
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3718      	adds	r7, #24
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	0801d2dc 	.word	0x0801d2dc

08006190 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 8006190:	b580      	push	{r7, lr}
 8006192:	b08a      	sub	sp, #40	; 0x28
 8006194:	af08      	add	r7, sp, #32
 8006196:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 8006198:	2206      	movs	r2, #6
 800619a:	496d      	ldr	r1, [pc, #436]	; (8006350 <GPS_parse+0x1c0>)
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f012 f934 	bl	801840a <strncmp>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d139      	bne.n	800621c <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 80061a8:	4b6a      	ldr	r3, [pc, #424]	; (8006354 <GPS_parse+0x1c4>)
 80061aa:	9307      	str	r3, [sp, #28]
 80061ac:	4b6a      	ldr	r3, [pc, #424]	; (8006358 <GPS_parse+0x1c8>)
 80061ae:	9306      	str	r3, [sp, #24]
 80061b0:	4b6a      	ldr	r3, [pc, #424]	; (800635c <GPS_parse+0x1cc>)
 80061b2:	9305      	str	r3, [sp, #20]
 80061b4:	4b6a      	ldr	r3, [pc, #424]	; (8006360 <GPS_parse+0x1d0>)
 80061b6:	9304      	str	r3, [sp, #16]
 80061b8:	4b6a      	ldr	r3, [pc, #424]	; (8006364 <GPS_parse+0x1d4>)
 80061ba:	9303      	str	r3, [sp, #12]
 80061bc:	4b6a      	ldr	r3, [pc, #424]	; (8006368 <GPS_parse+0x1d8>)
 80061be:	9302      	str	r3, [sp, #8]
 80061c0:	4b6a      	ldr	r3, [pc, #424]	; (800636c <GPS_parse+0x1dc>)
 80061c2:	9301      	str	r3, [sp, #4]
 80061c4:	4b6a      	ldr	r3, [pc, #424]	; (8006370 <GPS_parse+0x1e0>)
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	4b6a      	ldr	r3, [pc, #424]	; (8006374 <GPS_parse+0x1e4>)
 80061ca:	4a6b      	ldr	r2, [pc, #428]	; (8006378 <GPS_parse+0x1e8>)
 80061cc:	496b      	ldr	r1, [pc, #428]	; (800637c <GPS_parse+0x1ec>)
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f012 f8a2 	bl	8018318 <siscanf>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f340 80b5 	ble.w	8006346 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80061dc:	4b68      	ldr	r3, [pc, #416]	; (8006380 <GPS_parse+0x1f0>)
 80061de:	edd3 7a04 	vldr	s15, [r3, #16]
 80061e2:	4b67      	ldr	r3, [pc, #412]	; (8006380 <GPS_parse+0x1f0>)
 80061e4:	7e1b      	ldrb	r3, [r3, #24]
 80061e6:	4618      	mov	r0, r3
 80061e8:	eeb0 0a67 	vmov.f32	s0, s15
 80061ec:	f000 f8ec 	bl	80063c8 <GPS_nmea_to_dec>
 80061f0:	eef0 7a40 	vmov.f32	s15, s0
 80061f4:	4b62      	ldr	r3, [pc, #392]	; (8006380 <GPS_parse+0x1f0>)
 80061f6:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80061fa:	4b61      	ldr	r3, [pc, #388]	; (8006380 <GPS_parse+0x1f0>)
 80061fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8006200:	4b5f      	ldr	r3, [pc, #380]	; (8006380 <GPS_parse+0x1f0>)
 8006202:	7e5b      	ldrb	r3, [r3, #25]
 8006204:	4618      	mov	r0, r3
 8006206:	eeb0 0a67 	vmov.f32	s0, s15
 800620a:	f000 f8dd 	bl	80063c8 <GPS_nmea_to_dec>
 800620e:	eef0 7a40 	vmov.f32	s15, s0
 8006212:	4b5b      	ldr	r3, [pc, #364]	; (8006380 <GPS_parse+0x1f0>)
 8006214:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8006218:	2301      	movs	r3, #1
 800621a:	e095      	b.n	8006348 <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 800621c:	2206      	movs	r2, #6
 800621e:	4959      	ldr	r1, [pc, #356]	; (8006384 <GPS_parse+0x1f4>)
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f012 f8f2 	bl	801840a <strncmp>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d134      	bne.n	8006296 <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 800622c:	4b56      	ldr	r3, [pc, #344]	; (8006388 <GPS_parse+0x1f8>)
 800622e:	9305      	str	r3, [sp, #20]
 8006230:	4b56      	ldr	r3, [pc, #344]	; (800638c <GPS_parse+0x1fc>)
 8006232:	9304      	str	r3, [sp, #16]
 8006234:	4b56      	ldr	r3, [pc, #344]	; (8006390 <GPS_parse+0x200>)
 8006236:	9303      	str	r3, [sp, #12]
 8006238:	4b4b      	ldr	r3, [pc, #300]	; (8006368 <GPS_parse+0x1d8>)
 800623a:	9302      	str	r3, [sp, #8]
 800623c:	4b4b      	ldr	r3, [pc, #300]	; (800636c <GPS_parse+0x1dc>)
 800623e:	9301      	str	r3, [sp, #4]
 8006240:	4b4b      	ldr	r3, [pc, #300]	; (8006370 <GPS_parse+0x1e0>)
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	4b4b      	ldr	r3, [pc, #300]	; (8006374 <GPS_parse+0x1e4>)
 8006246:	4a4c      	ldr	r2, [pc, #304]	; (8006378 <GPS_parse+0x1e8>)
 8006248:	4952      	ldr	r1, [pc, #328]	; (8006394 <GPS_parse+0x204>)
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f012 f864 	bl	8018318 <siscanf>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	dd77      	ble.n	8006346 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8006256:	4b4a      	ldr	r3, [pc, #296]	; (8006380 <GPS_parse+0x1f0>)
 8006258:	edd3 7a04 	vldr	s15, [r3, #16]
 800625c:	4b48      	ldr	r3, [pc, #288]	; (8006380 <GPS_parse+0x1f0>)
 800625e:	7e1b      	ldrb	r3, [r3, #24]
 8006260:	4618      	mov	r0, r3
 8006262:	eeb0 0a67 	vmov.f32	s0, s15
 8006266:	f000 f8af 	bl	80063c8 <GPS_nmea_to_dec>
 800626a:	eef0 7a40 	vmov.f32	s15, s0
 800626e:	4b44      	ldr	r3, [pc, #272]	; (8006380 <GPS_parse+0x1f0>)
 8006270:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8006274:	4b42      	ldr	r3, [pc, #264]	; (8006380 <GPS_parse+0x1f0>)
 8006276:	edd3 7a03 	vldr	s15, [r3, #12]
 800627a:	4b41      	ldr	r3, [pc, #260]	; (8006380 <GPS_parse+0x1f0>)
 800627c:	7e5b      	ldrb	r3, [r3, #25]
 800627e:	4618      	mov	r0, r3
 8006280:	eeb0 0a67 	vmov.f32	s0, s15
 8006284:	f000 f8a0 	bl	80063c8 <GPS_nmea_to_dec>
 8006288:	eef0 7a40 	vmov.f32	s15, s0
 800628c:	4b3c      	ldr	r3, [pc, #240]	; (8006380 <GPS_parse+0x1f0>)
 800628e:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8006292:	2301      	movs	r3, #1
 8006294:	e058      	b.n	8006348 <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 8006296:	2206      	movs	r2, #6
 8006298:	493f      	ldr	r1, [pc, #252]	; (8006398 <GPS_parse+0x208>)
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f012 f8b5 	bl	801840a <strncmp>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d130      	bne.n	8006308 <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 80062a6:	4b3d      	ldr	r3, [pc, #244]	; (800639c <GPS_parse+0x20c>)
 80062a8:	9303      	str	r3, [sp, #12]
 80062aa:	4b33      	ldr	r3, [pc, #204]	; (8006378 <GPS_parse+0x1e8>)
 80062ac:	9302      	str	r3, [sp, #8]
 80062ae:	4b2e      	ldr	r3, [pc, #184]	; (8006368 <GPS_parse+0x1d8>)
 80062b0:	9301      	str	r3, [sp, #4]
 80062b2:	4b2e      	ldr	r3, [pc, #184]	; (800636c <GPS_parse+0x1dc>)
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	4b2e      	ldr	r3, [pc, #184]	; (8006370 <GPS_parse+0x1e0>)
 80062b8:	4a2e      	ldr	r2, [pc, #184]	; (8006374 <GPS_parse+0x1e4>)
 80062ba:	4939      	ldr	r1, [pc, #228]	; (80063a0 <GPS_parse+0x210>)
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f012 f82b 	bl	8018318 <siscanf>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	dd3e      	ble.n	8006346 <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80062c8:	4b2d      	ldr	r3, [pc, #180]	; (8006380 <GPS_parse+0x1f0>)
 80062ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80062ce:	4b2c      	ldr	r3, [pc, #176]	; (8006380 <GPS_parse+0x1f0>)
 80062d0:	7e1b      	ldrb	r3, [r3, #24]
 80062d2:	4618      	mov	r0, r3
 80062d4:	eeb0 0a67 	vmov.f32	s0, s15
 80062d8:	f000 f876 	bl	80063c8 <GPS_nmea_to_dec>
 80062dc:	eef0 7a40 	vmov.f32	s15, s0
 80062e0:	4b27      	ldr	r3, [pc, #156]	; (8006380 <GPS_parse+0x1f0>)
 80062e2:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80062e6:	4b26      	ldr	r3, [pc, #152]	; (8006380 <GPS_parse+0x1f0>)
 80062e8:	edd3 7a03 	vldr	s15, [r3, #12]
 80062ec:	4b24      	ldr	r3, [pc, #144]	; (8006380 <GPS_parse+0x1f0>)
 80062ee:	7e5b      	ldrb	r3, [r3, #25]
 80062f0:	4618      	mov	r0, r3
 80062f2:	eeb0 0a67 	vmov.f32	s0, s15
 80062f6:	f000 f867 	bl	80063c8 <GPS_nmea_to_dec>
 80062fa:	eef0 7a40 	vmov.f32	s15, s0
 80062fe:	4b20      	ldr	r3, [pc, #128]	; (8006380 <GPS_parse+0x1f0>)
 8006300:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 8006304:	2301      	movs	r3, #1
 8006306:	e01f      	b.n	8006348 <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 8006308:	2206      	movs	r2, #6
 800630a:	4926      	ldr	r1, [pc, #152]	; (80063a4 <GPS_parse+0x214>)
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f012 f87c 	bl	801840a <strncmp>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d116      	bne.n	8006346 <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8006318:	4b23      	ldr	r3, [pc, #140]	; (80063a8 <GPS_parse+0x218>)
 800631a:	9305      	str	r3, [sp, #20]
 800631c:	4b23      	ldr	r3, [pc, #140]	; (80063ac <GPS_parse+0x21c>)
 800631e:	9304      	str	r3, [sp, #16]
 8006320:	4b23      	ldr	r3, [pc, #140]	; (80063b0 <GPS_parse+0x220>)
 8006322:	9303      	str	r3, [sp, #12]
 8006324:	4b1a      	ldr	r3, [pc, #104]	; (8006390 <GPS_parse+0x200>)
 8006326:	9302      	str	r3, [sp, #8]
 8006328:	4b22      	ldr	r3, [pc, #136]	; (80063b4 <GPS_parse+0x224>)
 800632a:	9301      	str	r3, [sp, #4]
 800632c:	4b22      	ldr	r3, [pc, #136]	; (80063b8 <GPS_parse+0x228>)
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	4b22      	ldr	r3, [pc, #136]	; (80063bc <GPS_parse+0x22c>)
 8006332:	4a23      	ldr	r2, [pc, #140]	; (80063c0 <GPS_parse+0x230>)
 8006334:	4923      	ldr	r1, [pc, #140]	; (80063c4 <GPS_parse+0x234>)
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f011 ffee 	bl	8018318 <siscanf>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	dd01      	ble.n	8006346 <GPS_parse+0x1b6>
            return 0;
 8006342:	2300      	movs	r3, #0
 8006344:	e000      	b.n	8006348 <GPS_parse+0x1b8>
    }
    return 0;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	0801d2e4 	.word	0x0801d2e4
 8006354:	2000cb68 	.word	0x2000cb68
 8006358:	2000cb64 	.word	0x2000cb64
 800635c:	2000cb60 	.word	0x2000cb60
 8006360:	2000cb5c 	.word	0x2000cb5c
 8006364:	2000cb58 	.word	0x2000cb58
 8006368:	2000cb55 	.word	0x2000cb55
 800636c:	2000cb48 	.word	0x2000cb48
 8006370:	2000cb54 	.word	0x2000cb54
 8006374:	2000cb4c 	.word	0x2000cb4c
 8006378:	2000cb50 	.word	0x2000cb50
 800637c:	0801d2ec 	.word	0x0801d2ec
 8006380:	2000cb3c 	.word	0x2000cb3c
 8006384:	0801d314 	.word	0x0801d314
 8006388:	2000cb74 	.word	0x2000cb74
 800638c:	2000cb70 	.word	0x2000cb70
 8006390:	2000cb6c 	.word	0x2000cb6c
 8006394:	0801d31c 	.word	0x0801d31c
 8006398:	0801d33c 	.word	0x0801d33c
 800639c:	2000cb78 	.word	0x2000cb78
 80063a0:	0801d344 	.word	0x0801d344
 80063a4:	0801d360 	.word	0x0801d360
 80063a8:	2000cb90 	.word	0x2000cb90
 80063ac:	2000cb8c 	.word	0x2000cb8c
 80063b0:	2000cb89 	.word	0x2000cb89
 80063b4:	2000cb88 	.word	0x2000cb88
 80063b8:	2000cb84 	.word	0x2000cb84
 80063bc:	2000cb80 	.word	0x2000cb80
 80063c0:	2000cb7c 	.word	0x2000cb7c
 80063c4:	0801d368 	.word	0x0801d368

080063c8 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 80063c8:	b480      	push	{r7}
 80063ca:	b087      	sub	sp, #28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80063d2:	4603      	mov	r3, r0
 80063d4:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 80063d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80063da:	eddf 6a20 	vldr	s13, [pc, #128]	; 800645c <GPS_nmea_to_dec+0x94>
 80063de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063e6:	ee17 3a90 	vmov	r3, s15
 80063ea:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	2264      	movs	r2, #100	; 0x64
 80063f0:	fb02 f303 	mul.w	r3, r2, r3
 80063f4:	ee07 3a90 	vmov	s15, r3
 80063f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063fc:	ed97 7a01 	vldr	s14, [r7, #4]
 8006400:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006404:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8006408:	ed97 7a03 	vldr	s14, [r7, #12]
 800640c:	eddf 6a14 	vldr	s13, [pc, #80]	; 8006460 <GPS_nmea_to_dec+0x98>
 8006410:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006414:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	ee07 3a90 	vmov	s15, r3
 800641e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006422:	ed97 7a02 	vldr	s14, [r7, #8]
 8006426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800642a:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 800642e:	78fb      	ldrb	r3, [r7, #3]
 8006430:	2b53      	cmp	r3, #83	; 0x53
 8006432:	d002      	beq.n	800643a <GPS_nmea_to_dec+0x72>
 8006434:	78fb      	ldrb	r3, [r7, #3]
 8006436:	2b57      	cmp	r3, #87	; 0x57
 8006438:	d105      	bne.n	8006446 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 800643a:	edd7 7a05 	vldr	s15, [r7, #20]
 800643e:	eef1 7a67 	vneg.f32	s15, s15
 8006442:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	ee07 3a90 	vmov	s15, r3
}
 800644c:	eeb0 0a67 	vmov.f32	s0, s15
 8006450:	371c      	adds	r7, #28
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	42c80000 	.word	0x42c80000
 8006460:	42700000 	.word	0x42700000

08006464 <GPS_Init>:
	}
}


void GPS_Init(UART_HandleTypeDef* data_uart, void (*gps_print)(char*),
		void (*gps_tone_freq)(uint32_t duration, uint32_t repeats, uint32_t freq)){
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
	GPS.print = gps_print;
 8006470:	4a0a      	ldr	r2, [pc, #40]	; (800649c <GPS_Init+0x38>)
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	65d3      	str	r3, [r2, #92]	; 0x5c
	GPS.print((char*) "\r\nGPS Init...");
 8006476:	4b09      	ldr	r3, [pc, #36]	; (800649c <GPS_Init+0x38>)
 8006478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800647a:	4809      	ldr	r0, [pc, #36]	; (80064a0 <GPS_Init+0x3c>)
 800647c:	4798      	blx	r3
	GPS.uart = data_uart;
 800647e:	4a07      	ldr	r2, [pc, #28]	; (800649c <GPS_Init+0x38>)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6593      	str	r3, [r2, #88]	; 0x58
	GPS.tone_freq = gps_tone_freq;
 8006484:	4a05      	ldr	r2, [pc, #20]	; (800649c <GPS_Init+0x38>)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6613      	str	r3, [r2, #96]	; 0x60
	GPS.print((char*) "OK\r\n");
 800648a:	4b04      	ldr	r3, [pc, #16]	; (800649c <GPS_Init+0x38>)
 800648c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800648e:	4805      	ldr	r0, [pc, #20]	; (80064a4 <GPS_Init+0x40>)
 8006490:	4798      	blx	r3
}
 8006492:	bf00      	nop
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	2000cb3c 	.word	0x2000cb3c
 80064a0:	0801d388 	.word	0x0801d388
 80064a4:	0801d398 	.word	0x0801d398

080064a8 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80064a8:	b590      	push	{r4, r7, lr}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	607a      	str	r2, [r7, #4]
 80064b2:	461a      	mov	r2, r3
 80064b4:	460b      	mov	r3, r1
 80064b6:	72fb      	strb	r3, [r7, #11]
 80064b8:	4613      	mov	r3, r2
 80064ba:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	685c      	ldr	r4, [r3, #4]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6898      	ldr	r0, [r3, #8]
 80064c4:	893b      	ldrh	r3, [r7, #8]
 80064c6:	7af9      	ldrb	r1, [r7, #11]
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	47a0      	blx	r4
 80064cc:	6178      	str	r0, [r7, #20]

  return ret;
 80064ce:	697b      	ldr	r3, [r7, #20]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	371c      	adds	r7, #28
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd90      	pop	{r4, r7, pc}

080064d8 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80064d8:	b590      	push	{r4, r7, lr}
 80064da:	b087      	sub	sp, #28
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	607a      	str	r2, [r7, #4]
 80064e2:	461a      	mov	r2, r3
 80064e4:	460b      	mov	r3, r1
 80064e6:	72fb      	strb	r3, [r7, #11]
 80064e8:	4613      	mov	r3, r2
 80064ea:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681c      	ldr	r4, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6898      	ldr	r0, [r3, #8]
 80064f4:	893b      	ldrh	r3, [r7, #8]
 80064f6:	7af9      	ldrb	r1, [r7, #11]
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	47a0      	blx	r4
 80064fc:	6178      	str	r0, [r7, #20]

  return ret;
 80064fe:	697b      	ldr	r3, [r7, #20]
}
 8006500:	4618      	mov	r0, r3
 8006502:	371c      	adds	r7, #28
 8006504:	46bd      	mov	sp, r7
 8006506:	bd90      	pop	{r4, r7, pc}

08006508 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	ee07 3a90 	vmov	s15, r3
 8006516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800651a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006534 <lps22hh_from_lsb_to_hpa+0x2c>
 800651e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006522:	eef0 7a66 	vmov.f32	s15, s13
}
 8006526:	eeb0 0a67 	vmov.f32	s0, s15
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr
 8006534:	49800000 	.word	0x49800000

08006538 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	4603      	mov	r3, r0
 8006540:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8006542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006546:	ee07 3a90 	vmov	s15, r3
 800654a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800654e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006568 <lps22hh_from_lsb_to_celsius+0x30>
 8006552:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006556:	eef0 7a66 	vmov.f32	s15, s13
}
 800655a:	eeb0 0a67 	vmov.f32	s0, s15
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr
 8006568:	42c80000 	.word	0x42c80000

0800656c <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	460b      	mov	r3, r1
 8006576:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006578:	f107 0208 	add.w	r2, r7, #8
 800657c:	2301      	movs	r3, #1
 800657e:	2110      	movs	r1, #16
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f7ff ff91 	bl	80064a8 <lps22hh_read_reg>
 8006586:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10f      	bne.n	80065ae <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800658e:	78fb      	ldrb	r3, [r7, #3]
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	b2da      	uxtb	r2, r3
 8006596:	7a3b      	ldrb	r3, [r7, #8]
 8006598:	f362 0341 	bfi	r3, r2, #1, #1
 800659c:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800659e:	f107 0208 	add.w	r2, r7, #8
 80065a2:	2301      	movs	r3, #1
 80065a4:	2110      	movs	r1, #16
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7ff ff96 	bl	80064d8 <lps22hh_write_reg>
 80065ac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80065ae:	68fb      	ldr	r3, [r7, #12]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	460b      	mov	r3, r1
 80065c2:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80065c4:	f107 0210 	add.w	r2, r7, #16
 80065c8:	2301      	movs	r3, #1
 80065ca:	2110      	movs	r1, #16
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f7ff ff6b 	bl	80064a8 <lps22hh_read_reg>
 80065d2:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d107      	bne.n	80065ea <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80065da:	f107 020c 	add.w	r2, r7, #12
 80065de:	2301      	movs	r3, #1
 80065e0:	2111      	movs	r1, #17
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7ff ff60 	bl	80064a8 <lps22hh_read_reg>
 80065e8:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d10f      	bne.n	8006610 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80065f0:	78fb      	ldrb	r3, [r7, #3]
 80065f2:	f003 0307 	and.w	r3, r3, #7
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	7c3b      	ldrb	r3, [r7, #16]
 80065fa:	f362 1306 	bfi	r3, r2, #4, #3
 80065fe:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006600:	f107 0210 	add.w	r2, r7, #16
 8006604:	2301      	movs	r3, #1
 8006606:	2110      	movs	r1, #16
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f7ff ff65 	bl	80064d8 <lps22hh_write_reg>
 800660e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d119      	bne.n	800664a <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8006616:	78fb      	ldrb	r3, [r7, #3]
 8006618:	091b      	lsrs	r3, r3, #4
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	b2da      	uxtb	r2, r3
 8006620:	7b3b      	ldrb	r3, [r7, #12]
 8006622:	f362 0341 	bfi	r3, r2, #1, #1
 8006626:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8006628:	78fb      	ldrb	r3, [r7, #3]
 800662a:	08db      	lsrs	r3, r3, #3
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	b2da      	uxtb	r2, r3
 8006632:	7b3b      	ldrb	r3, [r7, #12]
 8006634:	f362 0300 	bfi	r3, r2, #0, #1
 8006638:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800663a:	f107 020c 	add.w	r2, r7, #12
 800663e:	2301      	movs	r3, #1
 8006640:	2111      	movs	r1, #17
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f7ff ff48 	bl	80064d8 <lps22hh_write_reg>
 8006648:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800664a:	697b      	ldr	r3, [r7, #20]
}
 800664c:	4618      	mov	r0, r3
 800664e:	3718      	adds	r7, #24
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <lps22hh_press_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_press_flag_data_ready_get(stmdev_ctx_t *ctx,
                                          uint8_t *val)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 800665e:	f107 0208 	add.w	r2, r7, #8
 8006662:	2301      	movs	r3, #1
 8006664:	2127      	movs	r1, #39	; 0x27
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f7ff ff1e 	bl	80064a8 <lps22hh_read_reg>
 800666c:	60f8      	str	r0, [r7, #12]
  *val = reg.p_da;
 800666e:	7a3b      	ldrb	r3, [r7, #8]
 8006670:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006674:	b2db      	uxtb	r3, r3
 8006676:	461a      	mov	r2, r3
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	701a      	strb	r2, [r3, #0]

  return ret;
 800667c:	68fb      	ldr	r3, [r7, #12]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b084      	sub	sp, #16
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
 800668e:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8006690:	f107 0208 	add.w	r2, r7, #8
 8006694:	2301      	movs	r3, #1
 8006696:	2127      	movs	r1, #39	; 0x27
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f7ff ff05 	bl	80064a8 <lps22hh_read_reg>
 800669e:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 80066a0:	7a3b      	ldrb	r3, [r7, #8]
 80066a2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	461a      	mov	r2, r3
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	701a      	strb	r2, [r3, #0]

  return ret;
 80066ae:	68fb      	ldr	r3, [r7, #12]
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 80066c2:	f107 0208 	add.w	r2, r7, #8
 80066c6:	2303      	movs	r3, #3
 80066c8:	2128      	movs	r1, #40	; 0x28
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7ff feec 	bl	80064a8 <lps22hh_read_reg>
 80066d0:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80066d2:	7abb      	ldrb	r3, [r7, #10]
 80066d4:	461a      	mov	r2, r3
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	021b      	lsls	r3, r3, #8
 80066e0:	7a7a      	ldrb	r2, [r7, #9]
 80066e2:	441a      	add	r2, r3
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	021b      	lsls	r3, r3, #8
 80066ee:	7a3a      	ldrb	r2, [r7, #8]
 80066f0:	441a      	add	r2, r3
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	021a      	lsls	r2, r3, #8
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	601a      	str	r2, [r3, #0]

  return ret;
 8006700:	68fb      	ldr	r3, [r7, #12]
}
 8006702:	4618      	mov	r0, r3
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b084      	sub	sp, #16
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
 8006712:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8006714:	f107 0208 	add.w	r2, r7, #8
 8006718:	2302      	movs	r3, #2
 800671a:	212b      	movs	r1, #43	; 0x2b
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f7ff fec3 	bl	80064a8 <lps22hh_read_reg>
 8006722:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8006724:	7a7b      	ldrb	r3, [r7, #9]
 8006726:	b21a      	sxth	r2, r3
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006732:	b29b      	uxth	r3, r3
 8006734:	021b      	lsls	r3, r3, #8
 8006736:	b29a      	uxth	r2, r3
 8006738:	7a3b      	ldrb	r3, [r7, #8]
 800673a:	b29b      	uxth	r3, r3
 800673c:	4413      	add	r3, r2
 800673e:	b29b      	uxth	r3, r3
 8006740:	b21a      	sxth	r2, r3
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	801a      	strh	r2, [r3, #0]

  return ret;
 8006746:	68fb      	ldr	r3, [r7, #12]
}
 8006748:	4618      	mov	r0, r3
 800674a:	3710      	adds	r7, #16
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 800675a:	2301      	movs	r3, #1
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	210f      	movs	r1, #15
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7ff fea1 	bl	80064a8 <lps22hh_read_reg>
 8006766:	60f8      	str	r0, [r7, #12]

  return ret;
 8006768:	68fb      	ldr	r3, [r7, #12]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b084      	sub	sp, #16
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	460b      	mov	r3, r1
 800677c:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800677e:	f107 0208 	add.w	r2, r7, #8
 8006782:	2301      	movs	r3, #1
 8006784:	2111      	movs	r1, #17
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f7ff fe8e 	bl	80064a8 <lps22hh_read_reg>
 800678c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10f      	bne.n	80067b4 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8006794:	78fb      	ldrb	r3, [r7, #3]
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	b2da      	uxtb	r2, r3
 800679c:	7a3b      	ldrb	r3, [r7, #8]
 800679e:	f362 0382 	bfi	r3, r2, #2, #1
 80067a2:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80067a4:	f107 0208 	add.w	r2, r7, #8
 80067a8:	2301      	movs	r3, #1
 80067aa:	2111      	movs	r1, #17
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f7ff fe93 	bl	80064d8 <lps22hh_write_reg>
 80067b2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80067b4:	68fb      	ldr	r3, [r7, #12]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b084      	sub	sp, #16
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
 80067c6:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80067c8:	f107 0208 	add.w	r2, r7, #8
 80067cc:	2301      	movs	r3, #1
 80067ce:	2111      	movs	r1, #17
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f7ff fe69 	bl	80064a8 <lps22hh_read_reg>
 80067d6:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 80067d8:	7a3b      	ldrb	r3, [r7, #8]
 80067da:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	461a      	mov	r2, r3
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	701a      	strb	r2, [r3, #0]

  return ret;
 80067e6:	68fb      	ldr	r3, [r7, #12]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80067f0:	b590      	push	{r4, r7, lr}
 80067f2:	b087      	sub	sp, #28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	607a      	str	r2, [r7, #4]
 80067fa:	461a      	mov	r2, r3
 80067fc:	460b      	mov	r3, r1
 80067fe:	72fb      	strb	r3, [r7, #11]
 8006800:	4613      	mov	r3, r2
 8006802:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	685c      	ldr	r4, [r3, #4]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6898      	ldr	r0, [r3, #8]
 800680c:	893b      	ldrh	r3, [r7, #8]
 800680e:	7af9      	ldrb	r1, [r7, #11]
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	47a0      	blx	r4
 8006814:	6178      	str	r0, [r7, #20]

  return ret;
 8006816:	697b      	ldr	r3, [r7, #20]
}
 8006818:	4618      	mov	r0, r3
 800681a:	371c      	adds	r7, #28
 800681c:	46bd      	mov	sp, r7
 800681e:	bd90      	pop	{r4, r7, pc}

08006820 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8006820:	b590      	push	{r4, r7, lr}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	607a      	str	r2, [r7, #4]
 800682a:	461a      	mov	r2, r3
 800682c:	460b      	mov	r3, r1
 800682e:	72fb      	strb	r3, [r7, #11]
 8006830:	4613      	mov	r3, r2
 8006832:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681c      	ldr	r4, [r3, #0]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6898      	ldr	r0, [r3, #8]
 800683c:	893b      	ldrh	r3, [r7, #8]
 800683e:	7af9      	ldrb	r1, [r7, #11]
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	47a0      	blx	r4
 8006844:	6178      	str	r0, [r7, #20]

  return ret;
 8006846:	697b      	ldr	r3, [r7, #20]
}
 8006848:	4618      	mov	r0, r3
 800684a:	371c      	adds	r7, #28
 800684c:	46bd      	mov	sp, r7
 800684e:	bd90      	pop	{r4, r7, pc}

08006850 <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	4603      	mov	r3, r0
 8006858:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 800685a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800685e:	ee07 3a90 	vmov	s15, r3
 8006862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006866:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800687c <lsm6dsr_from_fs2g_to_mg+0x2c>
 800686a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800686e:	eeb0 0a67 	vmov.f32	s0, s15
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr
 800687c:	3d79db23 	.word	0x3d79db23

08006880 <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	4603      	mov	r3, r0
 8006888:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 800688a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800688e:	ee07 3a90 	vmov	s15, r3
 8006892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006896:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80068ac <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 800689a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800689e:	eeb0 0a67 	vmov.f32	s0, s15
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	428c0000 	.word	0x428c0000

080068b0 <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	4603      	mov	r3, r0
 80068b8:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 80068ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068be:	ee07 3a90 	vmov	s15, r3
 80068c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80068c6:	eddf 6a07 	vldr	s13, [pc, #28]	; 80068e4 <lsm6dsr_from_lsb_to_celsius+0x34>
 80068ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80068ce:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80068d2:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80068d6:	eeb0 0a67 	vmov.f32	s0, s15
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr
 80068e4:	43800000 	.word	0x43800000

080068e8 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	460b      	mov	r3, r1
 80068f2:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80068f4:	f107 0208 	add.w	r2, r7, #8
 80068f8:	2301      	movs	r3, #1
 80068fa:	2110      	movs	r1, #16
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f7ff ff77 	bl	80067f0 <lsm6dsr_read_reg>
 8006902:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10f      	bne.n	800692a <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 800690a:	78fb      	ldrb	r3, [r7, #3]
 800690c:	f003 0303 	and.w	r3, r3, #3
 8006910:	b2da      	uxtb	r2, r3
 8006912:	7a3b      	ldrb	r3, [r7, #8]
 8006914:	f362 0383 	bfi	r3, r2, #2, #2
 8006918:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 800691a:	f107 0208 	add.w	r2, r7, #8
 800691e:	2301      	movs	r3, #1
 8006920:	2110      	movs	r1, #16
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7ff ff7c 	bl	8006820 <lsm6dsr_write_reg>
 8006928:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800692a:	68fb      	ldr	r3, [r7, #12]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	460b      	mov	r3, r1
 800693e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8006940:	78fb      	ldrb	r3, [r7, #3]
 8006942:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8006944:	f107 030c 	add.w	r3, r7, #12
 8006948:	4619      	mov	r1, r3
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fc54 	bl	80071f8 <lsm6dsr_fsm_enable_get>
 8006950:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	2b00      	cmp	r3, #0
 8006956:	f040 80c4 	bne.w	8006ae2 <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800695a:	7b3b      	ldrb	r3, [r7, #12]
 800695c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006960:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006962:	7b3b      	ldrb	r3, [r7, #12]
 8006964:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006968:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800696a:	4313      	orrs	r3, r2
 800696c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800696e:	7b3b      	ldrb	r3, [r7, #12]
 8006970:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006974:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006976:	4313      	orrs	r3, r2
 8006978:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800697a:	7b3b      	ldrb	r3, [r7, #12]
 800697c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006980:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006982:	4313      	orrs	r3, r2
 8006984:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006986:	7b3b      	ldrb	r3, [r7, #12]
 8006988:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800698c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800698e:	4313      	orrs	r3, r2
 8006990:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006992:	7b3b      	ldrb	r3, [r7, #12]
 8006994:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006998:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800699a:	4313      	orrs	r3, r2
 800699c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800699e:	7b3b      	ldrb	r3, [r7, #12]
 80069a0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80069a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80069a6:	4313      	orrs	r3, r2
 80069a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80069aa:	7b3b      	ldrb	r3, [r7, #12]
 80069ac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80069b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80069b2:	4313      	orrs	r3, r2
 80069b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80069b6:	7b7b      	ldrb	r3, [r7, #13]
 80069b8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80069bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80069be:	4313      	orrs	r3, r2
 80069c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80069c2:	7b7b      	ldrb	r3, [r7, #13]
 80069c4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80069c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80069ca:	4313      	orrs	r3, r2
 80069cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80069ce:	7b7b      	ldrb	r3, [r7, #13]
 80069d0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80069d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80069d6:	4313      	orrs	r3, r2
 80069d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80069da:	7b7b      	ldrb	r3, [r7, #13]
 80069dc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80069e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80069e2:	4313      	orrs	r3, r2
 80069e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80069e6:	7b7b      	ldrb	r3, [r7, #13]
 80069e8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80069ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80069ee:	4313      	orrs	r3, r2
 80069f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80069f2:	7b7b      	ldrb	r3, [r7, #13]
 80069f4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80069f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80069fa:	4313      	orrs	r3, r2
 80069fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80069fe:	7b7b      	ldrb	r3, [r7, #13]
 8006a00:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006a04:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006a06:	4313      	orrs	r3, r2
 8006a08:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8006a0a:	7b7b      	ldrb	r3, [r7, #13]
 8006a0c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006a10:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006a12:	4313      	orrs	r3, r2
 8006a14:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d163      	bne.n	8006ae2 <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8006a1a:	f107 030b 	add.w	r3, r7, #11
 8006a1e:	4619      	mov	r1, r3
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 fc15 	bl	8007250 <lsm6dsr_fsm_data_rate_get>
 8006a26:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d159      	bne.n	8006ae2 <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8006a2e:	7afb      	ldrb	r3, [r7, #11]
 8006a30:	2b03      	cmp	r3, #3
 8006a32:	d853      	bhi.n	8006adc <lsm6dsr_xl_data_rate_set+0x1a8>
 8006a34:	a201      	add	r2, pc, #4	; (adr r2, 8006a3c <lsm6dsr_xl_data_rate_set+0x108>)
 8006a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3a:	bf00      	nop
 8006a3c:	08006a4d 	.word	0x08006a4d
 8006a40:	08006a5f 	.word	0x08006a5f
 8006a44:	08006a7d 	.word	0x08006a7d
 8006a48:	08006aa7 	.word	0x08006aa7
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8006a4c:	78fb      	ldrb	r3, [r7, #3]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d102      	bne.n	8006a58 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 8006a52:	2301      	movs	r3, #1
 8006a54:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006a56:	e045      	b.n	8006ae4 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006a58:	78fb      	ldrb	r3, [r7, #3]
 8006a5a:	75fb      	strb	r3, [r7, #23]
            break;
 8006a5c:	e042      	b.n	8006ae4 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8006a5e:	78fb      	ldrb	r3, [r7, #3]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d102      	bne.n	8006a6a <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8006a64:	2302      	movs	r3, #2
 8006a66:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006a68:	e03c      	b.n	8006ae4 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8006a6a:	78fb      	ldrb	r3, [r7, #3]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d102      	bne.n	8006a76 <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8006a70:	2302      	movs	r3, #2
 8006a72:	75fb      	strb	r3, [r7, #23]
            break;
 8006a74:	e036      	b.n	8006ae4 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006a76:	78fb      	ldrb	r3, [r7, #3]
 8006a78:	75fb      	strb	r3, [r7, #23]
            break;
 8006a7a:	e033      	b.n	8006ae4 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8006a7c:	78fb      	ldrb	r3, [r7, #3]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d102      	bne.n	8006a88 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8006a82:	2303      	movs	r3, #3
 8006a84:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006a86:	e02d      	b.n	8006ae4 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8006a88:	78fb      	ldrb	r3, [r7, #3]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d102      	bne.n	8006a94 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	75fb      	strb	r3, [r7, #23]
            break;
 8006a92:	e027      	b.n	8006ae4 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8006a94:	78fb      	ldrb	r3, [r7, #3]
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d102      	bne.n	8006aa0 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	75fb      	strb	r3, [r7, #23]
            break;
 8006a9e:	e021      	b.n	8006ae4 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006aa0:	78fb      	ldrb	r3, [r7, #3]
 8006aa2:	75fb      	strb	r3, [r7, #23]
            break;
 8006aa4:	e01e      	b.n	8006ae4 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8006aa6:	78fb      	ldrb	r3, [r7, #3]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d102      	bne.n	8006ab2 <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006aac:	2304      	movs	r3, #4
 8006aae:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006ab0:	e018      	b.n	8006ae4 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8006ab2:	78fb      	ldrb	r3, [r7, #3]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d102      	bne.n	8006abe <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006ab8:	2304      	movs	r3, #4
 8006aba:	75fb      	strb	r3, [r7, #23]
            break;
 8006abc:	e012      	b.n	8006ae4 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8006abe:	78fb      	ldrb	r3, [r7, #3]
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d102      	bne.n	8006aca <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006ac4:	2304      	movs	r3, #4
 8006ac6:	75fb      	strb	r3, [r7, #23]
            break;
 8006ac8:	e00c      	b.n	8006ae4 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 8006aca:	78fb      	ldrb	r3, [r7, #3]
 8006acc:	2b03      	cmp	r3, #3
 8006ace:	d102      	bne.n	8006ad6 <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006ad0:	2304      	movs	r3, #4
 8006ad2:	75fb      	strb	r3, [r7, #23]
            break;
 8006ad4:	e006      	b.n	8006ae4 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006ad6:	78fb      	ldrb	r3, [r7, #3]
 8006ad8:	75fb      	strb	r3, [r7, #23]
            break;
 8006ada:	e003      	b.n	8006ae4 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8006adc:	78fb      	ldrb	r3, [r7, #3]
 8006ade:	75fb      	strb	r3, [r7, #23]
            break;
 8006ae0:	e000      	b.n	8006ae4 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 8006ae2:	bf00      	nop
    }
  }

  if (ret == 0)
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d107      	bne.n	8006afa <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006aea:	f107 0208 	add.w	r2, r7, #8
 8006aee:	2301      	movs	r3, #1
 8006af0:	2110      	movs	r1, #16
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7ff fe7c 	bl	80067f0 <lsm6dsr_read_reg>
 8006af8:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d10f      	bne.n	8006b20 <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8006b00:	7dfb      	ldrb	r3, [r7, #23]
 8006b02:	f003 030f 	and.w	r3, r3, #15
 8006b06:	b2da      	uxtb	r2, r3
 8006b08:	7a3b      	ldrb	r3, [r7, #8]
 8006b0a:	f362 1307 	bfi	r3, r2, #4, #4
 8006b0e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8006b10:	f107 0208 	add.w	r2, r7, #8
 8006b14:	2301      	movs	r3, #1
 8006b16:	2110      	movs	r1, #16
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f7ff fe81 	bl	8006820 <lsm6dsr_write_reg>
 8006b1e:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8006b20:	693b      	ldr	r3, [r7, #16]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3718      	adds	r7, #24
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop

08006b2c <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	460b      	mov	r3, r1
 8006b36:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006b38:	f107 0208 	add.w	r2, r7, #8
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	2111      	movs	r1, #17
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f7ff fe55 	bl	80067f0 <lsm6dsr_read_reg>
 8006b46:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10f      	bne.n	8006b6e <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8006b4e:	78fb      	ldrb	r3, [r7, #3]
 8006b50:	f003 030f 	and.w	r3, r3, #15
 8006b54:	b2da      	uxtb	r2, r3
 8006b56:	7a3b      	ldrb	r3, [r7, #8]
 8006b58:	f362 0303 	bfi	r3, r2, #0, #4
 8006b5c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006b5e:	f107 0208 	add.w	r2, r7, #8
 8006b62:	2301      	movs	r3, #1
 8006b64:	2111      	movs	r1, #17
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7ff fe5a 	bl	8006820 <lsm6dsr_write_reg>
 8006b6c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	460b      	mov	r3, r1
 8006b82:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 8006b84:	78fb      	ldrb	r3, [r7, #3]
 8006b86:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8006b88:	f107 030c 	add.w	r3, r7, #12
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fb32 	bl	80071f8 <lsm6dsr_fsm_enable_get>
 8006b94:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f040 80c4 	bne.w	8006d26 <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006b9e:	7b3b      	ldrb	r3, [r7, #12]
 8006ba0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006ba4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006ba6:	7b3b      	ldrb	r3, [r7, #12]
 8006ba8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006bac:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006bb2:	7b3b      	ldrb	r3, [r7, #12]
 8006bb4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006bb8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006bbe:	7b3b      	ldrb	r3, [r7, #12]
 8006bc0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006bc4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006bca:	7b3b      	ldrb	r3, [r7, #12]
 8006bcc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006bd0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006bd6:	7b3b      	ldrb	r3, [r7, #12]
 8006bd8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006bdc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006bde:	4313      	orrs	r3, r2
 8006be0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006be2:	7b3b      	ldrb	r3, [r7, #12]
 8006be4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006be8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006bea:	4313      	orrs	r3, r2
 8006bec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006bee:	7b3b      	ldrb	r3, [r7, #12]
 8006bf0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006bf4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006bfa:	7b7b      	ldrb	r3, [r7, #13]
 8006bfc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006c00:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006c02:	4313      	orrs	r3, r2
 8006c04:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006c06:	7b7b      	ldrb	r3, [r7, #13]
 8006c08:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006c0c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006c12:	7b7b      	ldrb	r3, [r7, #13]
 8006c14:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006c18:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006c1e:	7b7b      	ldrb	r3, [r7, #13]
 8006c20:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006c24:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006c26:	4313      	orrs	r3, r2
 8006c28:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006c2a:	7b7b      	ldrb	r3, [r7, #13]
 8006c2c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006c30:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006c32:	4313      	orrs	r3, r2
 8006c34:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006c36:	7b7b      	ldrb	r3, [r7, #13]
 8006c38:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006c3c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006c42:	7b7b      	ldrb	r3, [r7, #13]
 8006c44:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006c48:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8006c4e:	7b7b      	ldrb	r3, [r7, #13]
 8006c50:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006c54:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006c56:	4313      	orrs	r3, r2
 8006c58:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d163      	bne.n	8006d26 <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8006c5e:	f107 030b 	add.w	r3, r7, #11
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 faf3 	bl	8007250 <lsm6dsr_fsm_data_rate_get>
 8006c6a:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d159      	bne.n	8006d26 <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8006c72:	7afb      	ldrb	r3, [r7, #11]
 8006c74:	2b03      	cmp	r3, #3
 8006c76:	d853      	bhi.n	8006d20 <lsm6dsr_gy_data_rate_set+0x1a8>
 8006c78:	a201      	add	r2, pc, #4	; (adr r2, 8006c80 <lsm6dsr_gy_data_rate_set+0x108>)
 8006c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7e:	bf00      	nop
 8006c80:	08006c91 	.word	0x08006c91
 8006c84:	08006ca3 	.word	0x08006ca3
 8006c88:	08006cc1 	.word	0x08006cc1
 8006c8c:	08006ceb 	.word	0x08006ceb
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 8006c90:	78fb      	ldrb	r3, [r7, #3]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d102      	bne.n	8006c9c <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 8006c96:	2301      	movs	r3, #1
 8006c98:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006c9a:	e045      	b.n	8006d28 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006c9c:	78fb      	ldrb	r3, [r7, #3]
 8006c9e:	75fb      	strb	r3, [r7, #23]
            break;
 8006ca0:	e042      	b.n	8006d28 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8006ca2:	78fb      	ldrb	r3, [r7, #3]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d102      	bne.n	8006cae <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8006ca8:	2302      	movs	r3, #2
 8006caa:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006cac:	e03c      	b.n	8006d28 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8006cae:	78fb      	ldrb	r3, [r7, #3]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d102      	bne.n	8006cba <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	75fb      	strb	r3, [r7, #23]
            break;
 8006cb8:	e036      	b.n	8006d28 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006cba:	78fb      	ldrb	r3, [r7, #3]
 8006cbc:	75fb      	strb	r3, [r7, #23]
            break;
 8006cbe:	e033      	b.n	8006d28 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8006cc0:	78fb      	ldrb	r3, [r7, #3]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d102      	bne.n	8006ccc <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006cca:	e02d      	b.n	8006d28 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8006ccc:	78fb      	ldrb	r3, [r7, #3]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d102      	bne.n	8006cd8 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	75fb      	strb	r3, [r7, #23]
            break;
 8006cd6:	e027      	b.n	8006d28 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8006cd8:	78fb      	ldrb	r3, [r7, #3]
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d102      	bne.n	8006ce4 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	75fb      	strb	r3, [r7, #23]
            break;
 8006ce2:	e021      	b.n	8006d28 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006ce4:	78fb      	ldrb	r3, [r7, #3]
 8006ce6:	75fb      	strb	r3, [r7, #23]
            break;
 8006ce8:	e01e      	b.n	8006d28 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8006cea:	78fb      	ldrb	r3, [r7, #3]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d102      	bne.n	8006cf6 <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006cf0:	2304      	movs	r3, #4
 8006cf2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006cf4:	e018      	b.n	8006d28 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8006cf6:	78fb      	ldrb	r3, [r7, #3]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d102      	bne.n	8006d02 <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006cfc:	2304      	movs	r3, #4
 8006cfe:	75fb      	strb	r3, [r7, #23]
            break;
 8006d00:	e012      	b.n	8006d28 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8006d02:	78fb      	ldrb	r3, [r7, #3]
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d102      	bne.n	8006d0e <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006d08:	2304      	movs	r3, #4
 8006d0a:	75fb      	strb	r3, [r7, #23]
            break;
 8006d0c:	e00c      	b.n	8006d28 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 8006d0e:	78fb      	ldrb	r3, [r7, #3]
 8006d10:	2b03      	cmp	r3, #3
 8006d12:	d102      	bne.n	8006d1a <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006d14:	2304      	movs	r3, #4
 8006d16:	75fb      	strb	r3, [r7, #23]
            break;
 8006d18:	e006      	b.n	8006d28 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006d1a:	78fb      	ldrb	r3, [r7, #3]
 8006d1c:	75fb      	strb	r3, [r7, #23]
            break;
 8006d1e:	e003      	b.n	8006d28 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8006d20:	78fb      	ldrb	r3, [r7, #3]
 8006d22:	75fb      	strb	r3, [r7, #23]
            break;
 8006d24:	e000      	b.n	8006d28 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 8006d26:	bf00      	nop
    }
  }

  if (ret == 0)
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d107      	bne.n	8006d3e <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006d2e:	f107 0208 	add.w	r2, r7, #8
 8006d32:	2301      	movs	r3, #1
 8006d34:	2111      	movs	r1, #17
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7ff fd5a 	bl	80067f0 <lsm6dsr_read_reg>
 8006d3c:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10f      	bne.n	8006d64 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8006d44:	7dfb      	ldrb	r3, [r7, #23]
 8006d46:	f003 030f 	and.w	r3, r3, #15
 8006d4a:	b2da      	uxtb	r2, r3
 8006d4c:	7a3b      	ldrb	r3, [r7, #8]
 8006d4e:	f362 1307 	bfi	r3, r2, #4, #4
 8006d52:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006d54:	f107 0208 	add.w	r2, r7, #8
 8006d58:	2301      	movs	r3, #1
 8006d5a:	2111      	movs	r1, #17
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7ff fd5f 	bl	8006820 <lsm6dsr_write_reg>
 8006d62:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8006d64:	693b      	ldr	r3, [r7, #16]
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3718      	adds	r7, #24
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop

08006d70 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	460b      	mov	r3, r1
 8006d7a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006d7c:	f107 0208 	add.w	r2, r7, #8
 8006d80:	2301      	movs	r3, #1
 8006d82:	2112      	movs	r1, #18
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7ff fd33 	bl	80067f0 <lsm6dsr_read_reg>
 8006d8a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10f      	bne.n	8006db2 <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8006d92:	78fb      	ldrb	r3, [r7, #3]
 8006d94:	f003 0301 	and.w	r3, r3, #1
 8006d98:	b2da      	uxtb	r2, r3
 8006d9a:	7a3b      	ldrb	r3, [r7, #8]
 8006d9c:	f362 1386 	bfi	r3, r2, #6, #1
 8006da0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006da2:	f107 0208 	add.w	r2, r7, #8
 8006da6:	2301      	movs	r3, #1
 8006da8:	2112      	movs	r1, #18
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7ff fd38 	bl	8006820 <lsm6dsr_write_reg>
 8006db0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006db2:	68fb      	ldr	r3, [r7, #12]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8006dc6:	f107 0208 	add.w	r2, r7, #8
 8006dca:	2301      	movs	r3, #1
 8006dcc:	211e      	movs	r1, #30
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7ff fd0e 	bl	80067f0 <lsm6dsr_read_reg>
 8006dd4:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 8006dd6:	7a3b      	ldrb	r3, [r7, #8]
 8006dd8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	461a      	mov	r2, r3
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	701a      	strb	r2, [r3, #0]

  return ret;
 8006de4:	68fb      	ldr	r3, [r7, #12]
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b084      	sub	sp, #16
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
 8006df6:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8006df8:	f107 0208 	add.w	r2, r7, #8
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	211e      	movs	r1, #30
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7ff fcf5 	bl	80067f0 <lsm6dsr_read_reg>
 8006e06:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8006e08:	7a3b      	ldrb	r3, [r7, #8]
 8006e0a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	461a      	mov	r2, r3
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	701a      	strb	r2, [r3, #0]

  return ret;
 8006e16:	68fb      	ldr	r3, [r7, #12]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8006e2a:	f107 0208 	add.w	r2, r7, #8
 8006e2e:	2301      	movs	r3, #1
 8006e30:	211e      	movs	r1, #30
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7ff fcdc 	bl	80067f0 <lsm6dsr_read_reg>
 8006e38:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 8006e3a:	7a3b      	ldrb	r3, [r7, #8]
 8006e3c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	461a      	mov	r2, r3
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	701a      	strb	r2, [r3, #0]

  return ret;
 8006e48:	68fb      	ldr	r3, [r7, #12]
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b084      	sub	sp, #16
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 8006e5c:	f107 0208 	add.w	r2, r7, #8
 8006e60:	2302      	movs	r3, #2
 8006e62:	2120      	movs	r1, #32
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7ff fcc3 	bl	80067f0 <lsm6dsr_read_reg>
 8006e6a:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 8006e6c:	7a7b      	ldrb	r3, [r7, #9]
 8006e6e:	b21a      	sxth	r2, r3
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	021b      	lsls	r3, r3, #8
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	7a3b      	ldrb	r3, [r7, #8]
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	4413      	add	r3, r2
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	b21a      	sxth	r2, r3
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	801a      	strh	r2, [r3, #0]

  return ret;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 8006ea2:	f107 020c 	add.w	r2, r7, #12
 8006ea6:	2306      	movs	r3, #6
 8006ea8:	2122      	movs	r1, #34	; 0x22
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f7ff fca0 	bl	80067f0 <lsm6dsr_read_reg>
 8006eb0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006eb2:	7b7b      	ldrb	r3, [r7, #13]
 8006eb4:	b21a      	sxth	r2, r3
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	021b      	lsls	r3, r3, #8
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	7b3b      	ldrb	r3, [r7, #12]
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	4413      	add	r3, r2
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	b21a      	sxth	r2, r3
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006ed4:	7bfa      	ldrb	r2, [r7, #15]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	3302      	adds	r3, #2
 8006eda:	b212      	sxth	r2, r2
 8006edc:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	3302      	adds	r3, #2
 8006ee2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	021b      	lsls	r3, r3, #8
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	7bbb      	ldrb	r3, [r7, #14]
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	4413      	add	r3, r2
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	3302      	adds	r3, #2
 8006ef8:	b212      	sxth	r2, r2
 8006efa:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006efc:	7c7a      	ldrb	r2, [r7, #17]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	3304      	adds	r3, #4
 8006f02:	b212      	sxth	r2, r2
 8006f04:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	3304      	adds	r3, #4
 8006f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	021b      	lsls	r3, r3, #8
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	7c3b      	ldrb	r3, [r7, #16]
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	4413      	add	r3, r2
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	3304      	adds	r3, #4
 8006f20:	b212      	sxth	r2, r2
 8006f22:	801a      	strh	r2, [r3, #0]

  return ret;
 8006f24:	697b      	ldr	r3, [r7, #20]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3718      	adds	r7, #24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b086      	sub	sp, #24
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
 8006f36:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 8006f38:	f107 020c 	add.w	r2, r7, #12
 8006f3c:	2306      	movs	r3, #6
 8006f3e:	2128      	movs	r1, #40	; 0x28
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f7ff fc55 	bl	80067f0 <lsm6dsr_read_reg>
 8006f46:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006f48:	7b7b      	ldrb	r3, [r7, #13]
 8006f4a:	b21a      	sxth	r2, r3
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	021b      	lsls	r3, r3, #8
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	7b3b      	ldrb	r3, [r7, #12]
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	4413      	add	r3, r2
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	b21a      	sxth	r2, r3
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006f6a:	7bfa      	ldrb	r2, [r7, #15]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	3302      	adds	r3, #2
 8006f70:	b212      	sxth	r2, r2
 8006f72:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	3302      	adds	r3, #2
 8006f78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	021b      	lsls	r3, r3, #8
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	7bbb      	ldrb	r3, [r7, #14]
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	4413      	add	r3, r2
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	3302      	adds	r3, #2
 8006f8e:	b212      	sxth	r2, r2
 8006f90:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006f92:	7c7a      	ldrb	r2, [r7, #17]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	3304      	adds	r3, #4
 8006f98:	b212      	sxth	r2, r2
 8006f9a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	021b      	lsls	r3, r3, #8
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	7c3b      	ldrb	r3, [r7, #16]
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	4413      	add	r3, r2
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	3304      	adds	r3, #4
 8006fb6:	b212      	sxth	r2, r2
 8006fb8:	801a      	strh	r2, [r3, #0]

  return ret;
 8006fba:	697b      	ldr	r3, [r7, #20]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3718      	adds	r7, #24
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	460b      	mov	r3, r1
 8006fce:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8006fd0:	f107 0208 	add.w	r2, r7, #8
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	2101      	movs	r1, #1
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f7ff fc09 	bl	80067f0 <lsm6dsr_read_reg>
 8006fde:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10f      	bne.n	8007006 <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 8006fe6:	78fb      	ldrb	r3, [r7, #3]
 8006fe8:	f003 0303 	and.w	r3, r3, #3
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	7a3b      	ldrb	r3, [r7, #8]
 8006ff0:	f362 1387 	bfi	r3, r2, #6, #2
 8006ff4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8006ff6:	f107 0208 	add.w	r2, r7, #8
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7ff fc0e 	bl	8006820 <lsm6dsr_write_reg>
 8007004:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8007006:	68fb      	ldr	r3, [r7, #12]
}
 8007008:	4618      	mov	r0, r3
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 800701a:	2301      	movs	r3, #1
 800701c:	683a      	ldr	r2, [r7, #0]
 800701e:	210f      	movs	r1, #15
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f7ff fbe5 	bl	80067f0 <lsm6dsr_read_reg>
 8007026:	60f8      	str	r0, [r7, #12]

  return ret;
 8007028:	68fb      	ldr	r3, [r7, #12]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b084      	sub	sp, #16
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
 800703a:	460b      	mov	r3, r1
 800703c:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800703e:	f107 0208 	add.w	r2, r7, #8
 8007042:	2301      	movs	r3, #1
 8007044:	2112      	movs	r1, #18
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f7ff fbd2 	bl	80067f0 <lsm6dsr_read_reg>
 800704c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10f      	bne.n	8007074 <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8007054:	78fb      	ldrb	r3, [r7, #3]
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	b2da      	uxtb	r2, r3
 800705c:	7a3b      	ldrb	r3, [r7, #8]
 800705e:	f362 0300 	bfi	r3, r2, #0, #1
 8007062:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007064:	f107 0208 	add.w	r2, r7, #8
 8007068:	2301      	movs	r3, #1
 800706a:	2112      	movs	r1, #18
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f7ff fbd7 	bl	8006820 <lsm6dsr_write_reg>
 8007072:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007074:	68fb      	ldr	r3, [r7, #12]
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b084      	sub	sp, #16
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
 8007086:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007088:	f107 0208 	add.w	r2, r7, #8
 800708c:	2301      	movs	r3, #1
 800708e:	2112      	movs	r1, #18
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f7ff fbad 	bl	80067f0 <lsm6dsr_read_reg>
 8007096:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8007098:	7a3b      	ldrb	r3, [r7, #8]
 800709a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	461a      	mov	r2, r3
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	701a      	strb	r2, [r3, #0]

  return ret;
 80070a6:	68fb      	ldr	r3, [r7, #12]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <lsm6dsr_xl_filter_lp2_set>:
  * @param  val    Change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	460b      	mov	r3, r1
 80070ba:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80070bc:	f107 0208 	add.w	r2, r7, #8
 80070c0:	2301      	movs	r3, #1
 80070c2:	2110      	movs	r1, #16
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f7ff fb93 	bl	80067f0 <lsm6dsr_read_reg>
 80070ca:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10f      	bne.n	80070f2 <lsm6dsr_xl_filter_lp2_set+0x42>
  {
    ctrl1_xl.lpf2_xl_en = (uint8_t)val;
 80070d2:	78fb      	ldrb	r3, [r7, #3]
 80070d4:	f003 0301 	and.w	r3, r3, #1
 80070d8:	b2da      	uxtb	r2, r3
 80070da:	7a3b      	ldrb	r3, [r7, #8]
 80070dc:	f362 0341 	bfi	r3, r2, #1, #1
 80070e0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 80070e2:	f107 0208 	add.w	r2, r7, #8
 80070e6:	2301      	movs	r3, #1
 80070e8:	2110      	movs	r1, #16
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7ff fb98 	bl	8006820 <lsm6dsr_write_reg>
 80070f0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80070f2:	68fb      	ldr	r3, [r7, #12]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <lsm6dsr_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dsr_hp_slope_xl_en_t val)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	460b      	mov	r3, r1
 8007106:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8007108:	f107 0208 	add.w	r2, r7, #8
 800710c:	2301      	movs	r3, #1
 800710e:	2117      	movs	r1, #23
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f7ff fb6d 	bl	80067f0 <lsm6dsr_read_reg>
 8007116:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d121      	bne.n	8007162 <lsm6dsr_xl_hp_path_on_out_set+0x66>
  {
    ctrl8_xl.hp_slope_xl_en = (((uint8_t)val & 0x10U) >> 4);
 800711e:	78fb      	ldrb	r3, [r7, #3]
 8007120:	091b      	lsrs	r3, r3, #4
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	b2da      	uxtb	r2, r3
 8007128:	7a3b      	ldrb	r3, [r7, #8]
 800712a:	f362 0382 	bfi	r3, r2, #2, #1
 800712e:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_ref_mode_xl = (((uint8_t)val & 0x20U) >> 5);
 8007130:	78fb      	ldrb	r3, [r7, #3]
 8007132:	095b      	lsrs	r3, r3, #5
 8007134:	f003 0301 	and.w	r3, r3, #1
 8007138:	b2da      	uxtb	r2, r3
 800713a:	7a3b      	ldrb	r3, [r7, #8]
 800713c:	f362 1304 	bfi	r3, r2, #4, #1
 8007140:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 8007142:	78fb      	ldrb	r3, [r7, #3]
 8007144:	f003 0307 	and.w	r3, r3, #7
 8007148:	b2da      	uxtb	r2, r3
 800714a:	7a3b      	ldrb	r3, [r7, #8]
 800714c:	f362 1347 	bfi	r3, r2, #5, #3
 8007150:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL8_XL,
 8007152:	f107 0208 	add.w	r2, r7, #8
 8007156:	2301      	movs	r3, #1
 8007158:	2117      	movs	r1, #23
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7ff fb60 	bl	8006820 <lsm6dsr_write_reg>
 8007160:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 8007162:	68fb      	ldr	r3, [r7, #12]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <lsm6dsr_i3c_disable_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dsr_i3c_disable_t val)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b086      	sub	sp, #24
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	460b      	mov	r3, r1
 8007176:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl9_xl_t ctrl9_xl;
  lsm6dsr_i3c_bus_avb_t i3c_bus_avb;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8007178:	f107 0210 	add.w	r2, r7, #16
 800717c:	2301      	movs	r3, #1
 800717e:	2118      	movs	r1, #24
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f7ff fb35 	bl	80067f0 <lsm6dsr_read_reg>
 8007186:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d111      	bne.n	80071b2 <lsm6dsr_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 800718e:	78fb      	ldrb	r3, [r7, #3]
 8007190:	09db      	lsrs	r3, r3, #7
 8007192:	b2db      	uxtb	r3, r3
 8007194:	f003 0301 	and.w	r3, r3, #1
 8007198:	b2da      	uxtb	r2, r3
 800719a:	7c3b      	ldrb	r3, [r7, #16]
 800719c:	f362 0341 	bfi	r3, r2, #1, #1
 80071a0:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL9_XL,
 80071a2:	f107 0210 	add.w	r2, r7, #16
 80071a6:	2301      	movs	r3, #1
 80071a8:	2118      	movs	r1, #24
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f7ff fb38 	bl	8006820 <lsm6dsr_write_reg>
 80071b0:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0)
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d107      	bne.n	80071c8 <lsm6dsr_i3c_disable_set+0x5c>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 80071b8:	f107 020c 	add.w	r2, r7, #12
 80071bc:	2301      	movs	r3, #1
 80071be:	2162      	movs	r1, #98	; 0x62
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f7ff fb15 	bl	80067f0 <lsm6dsr_read_reg>
 80071c6:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10f      	bne.n	80071ee <lsm6dsr_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 80071ce:	78fb      	ldrb	r3, [r7, #3]
 80071d0:	f003 0303 	and.w	r3, r3, #3
 80071d4:	b2da      	uxtb	r2, r3
 80071d6:	7b3b      	ldrb	r3, [r7, #12]
 80071d8:	f362 03c4 	bfi	r3, r2, #3, #2
 80071dc:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 80071de:	f107 020c 	add.w	r2, r7, #12
 80071e2:	2301      	movs	r3, #1
 80071e4:	2162      	movs	r1, #98	; 0x62
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7ff fb1a 	bl	8006820 <lsm6dsr_write_reg>
 80071ec:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 80071ee:	697b      	ldr	r3, [r7, #20]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3718      	adds	r7, #24
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8007202:	2102      	movs	r1, #2
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f7ff fedd 	bl	8006fc4 <lsm6dsr_mem_bank_set>
 800720a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d106      	bne.n	8007220 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 8007212:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 8007214:	2301      	movs	r3, #1
 8007216:	2146      	movs	r1, #70	; 0x46
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f7ff fae9 	bl	80067f0 <lsm6dsr_read_reg>
 800721e:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d107      	bne.n	8007236 <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 800722a:	2301      	movs	r3, #1
 800722c:	2147      	movs	r1, #71	; 0x47
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7ff fade 	bl	80067f0 <lsm6dsr_read_reg>
 8007234:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d104      	bne.n	8007246 <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 800723c:	2100      	movs	r1, #0
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f7ff fec0 	bl	8006fc4 <lsm6dsr_mem_bank_set>
 8007244:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007246:	68fb      	ldr	r3, [r7, #12]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800725a:	2102      	movs	r1, #2
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f7ff feb1 	bl	8006fc4 <lsm6dsr_mem_bank_set>
 8007262:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d107      	bne.n	800727a <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 800726a:	f107 0208 	add.w	r2, r7, #8
 800726e:	2301      	movs	r3, #1
 8007270:	215f      	movs	r1, #95	; 0x5f
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7ff fabc 	bl	80067f0 <lsm6dsr_read_reg>
 8007278:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d104      	bne.n	800728a <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8007280:	2100      	movs	r1, #0
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f7ff fe9e 	bl	8006fc4 <lsm6dsr_mem_bank_set>
 8007288:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 800728a:	7a3b      	ldrb	r3, [r7, #8]
 800728c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b03      	cmp	r3, #3
 8007294:	d81a      	bhi.n	80072cc <lsm6dsr_fsm_data_rate_get+0x7c>
 8007296:	a201      	add	r2, pc, #4	; (adr r2, 800729c <lsm6dsr_fsm_data_rate_get+0x4c>)
 8007298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800729c:	080072ad 	.word	0x080072ad
 80072a0:	080072b5 	.word	0x080072b5
 80072a4:	080072bd 	.word	0x080072bd
 80072a8:	080072c5 	.word	0x080072c5
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	2200      	movs	r2, #0
 80072b0:	701a      	strb	r2, [r3, #0]
      break;
 80072b2:	e00f      	b.n	80072d4 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	2201      	movs	r2, #1
 80072b8:	701a      	strb	r2, [r3, #0]
      break;
 80072ba:	e00b      	b.n	80072d4 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	2202      	movs	r2, #2
 80072c0:	701a      	strb	r2, [r3, #0]
      break;
 80072c2:	e007      	b.n	80072d4 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	2203      	movs	r2, #3
 80072c8:	701a      	strb	r2, [r3, #0]
      break;
 80072ca:	e003      	b.n	80072d4 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	2200      	movs	r2, #0
 80072d0:	701a      	strb	r2, [r3, #0]
      break;
 80072d2:	bf00      	nop
  }

  return ret;
 80072d4:	68fb      	ldr	r3, [r7, #12]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop

080072e0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b086      	sub	sp, #24
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 80072ec:	2300      	movs	r3, #0
 80072ee:	617b      	str	r3, [r7, #20]
  while (size--) {
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	1e5a      	subs	r2, r3, #1
 80072f4:	607a      	str	r2, [r7, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	bf14      	ite	ne
 80072fa:	2301      	movne	r3, #1
 80072fc:	2300      	moveq	r3, #0
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00e      	beq.n	8007322 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	1c59      	adds	r1, r3, #1
 800730e:	60b9      	str	r1, [r7, #8]
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	4619      	mov	r1, r3
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	4790      	blx	r2
 8007318:	4602      	mov	r2, r0
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	4413      	add	r3, r2
 800731e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8007320:	e7e6      	b.n	80072f0 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8007322:	697b      	ldr	r3, [r7, #20]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3718      	adds	r7, #24
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	4a06      	ldr	r2, [pc, #24]	; (8007350 <_ZN5PrintC1Ev+0x24>)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	601a      	str	r2, [r3, #0]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	605a      	str	r2, [r3, #4]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4618      	mov	r0, r3
 8007344:	370c      	adds	r7, #12
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	0801d624 	.word	0x0801d624

08007354 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4618      	mov	r0, r3
 8007360:	f7ff ffe4 	bl	800732c <_ZN5PrintC1Ev>
 8007364:	4a05      	ldr	r2, [pc, #20]	; (800737c <_ZN6StreamC1Ev+0x28>)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	601a      	str	r2, [r3, #0]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007370:	609a      	str	r2, [r3, #8]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4618      	mov	r0, r3
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	0801d654 	.word	0x0801d654

08007380 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4618      	mov	r0, r3
 800738e:	f7ff ffe1 	bl	8007354 <_ZN6StreamC1Ev>
 8007392:	4a16      	ldr	r2, [pc, #88]	; (80073ec <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	3390      	adds	r3, #144	; 0x90
 80073a2:	2220      	movs	r2, #32
 80073a4:	2100      	movs	r1, #0
 80073a6:	4618      	mov	r0, r3
 80073a8:	f00f ff18 	bl	80171dc <memset>
  rxBufferIndex = 0;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4618      	mov	r0, r3
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	0801d634 	.word	0x0801d634

080073f0 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	460b      	mov	r3, r1
 80073fa:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8007402:	2b00      	cmp	r3, #0
 8007404:	d01d      	beq.n	8007442 <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800740c:	2b1f      	cmp	r3, #31
 800740e:	d901      	bls.n	8007414 <_ZN7TwoWire5writeEh+0x24>
      return 0;
 8007410:	2300      	movs	r3, #0
 8007412:	e028      	b.n	8007466 <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800741a:	4619      	mov	r1, r3
 800741c:	78fa      	ldrb	r2, [r7, #3]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	440b      	add	r3, r1
 8007422:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800742a:	3301      	adds	r3, #1
 800742c:	b2da      	uxtb	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8007440:	e010      	b.n	8007464 <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 f984 	bl	8007750 <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 8007448:	1cfb      	adds	r3, r7, #3
 800744a:	2201      	movs	r2, #1
 800744c:	4619      	mov	r1, r3
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f8b7 	bl	80075c2 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 f949 	bl	80076ec <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	333c      	adds	r3, #60	; 0x3c
 800745e:	4618      	mov	r0, r3
 8007460:	f003 f8ca 	bl	800a5f8 <HAL_I2C_EnableListen_IT>
  }
  return 1;
 8007464:	2301      	movs	r3, #1
}
 8007466:	4618      	mov	r0, r3
 8007468:	3708      	adds	r7, #8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b086      	sub	sp, #24
 8007472:	af00      	add	r7, sp, #0
 8007474:	60f8      	str	r0, [r7, #12]
 8007476:	60b9      	str	r1, [r7, #8]
 8007478:	607a      	str	r2, [r7, #4]
  if(transmitting){
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8007480:	2b00      	cmp	r3, #0
 8007482:	d013      	beq.n	80074ac <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 8007484:	2300      	movs	r3, #0
 8007486:	617b      	str	r3, [r7, #20]
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	429a      	cmp	r2, r3
 800748e:	d21e      	bcs.n	80074ce <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68b9      	ldr	r1, [r7, #8]
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	440a      	add	r2, r1
 800749c:	7812      	ldrb	r2, [r2, #0]
 800749e:	4611      	mov	r1, r2
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	3301      	adds	r3, #1
 80074a8:	617b      	str	r3, [r7, #20]
 80074aa:	e7ed      	b.n	8007488 <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f000 f94f 	bl	8007750 <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	461a      	mov	r2, r3
 80074b6:	68b9      	ldr	r1, [r7, #8]
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f000 f882 	bl	80075c2 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f000 f914 	bl	80076ec <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	333c      	adds	r3, #60	; 0x3c
 80074c8:	4618      	mov	r0, r3
 80074ca:	f003 f895 	bl	800a5f8 <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 80074ce:	687b      	ldr	r3, [r7, #4]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3718      	adds	r7, #24
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	461a      	mov	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	1ad3      	subs	r3, r2, r3
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  int value = -1;
 8007508:	f04f 33ff 	mov.w	r3, #4294967295
 800750c:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8007514:	b2da      	uxtb	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800751c:	b2db      	uxtb	r3, r3
 800751e:	429a      	cmp	r2, r3
 8007520:	bf34      	ite	cc
 8007522:	2301      	movcc	r3, #1
 8007524:	2300      	movcs	r3, #0
 8007526:	b2db      	uxtb	r3, r3
 8007528:	2b00      	cmp	r3, #0
 800752a:	d012      	beq.n	8007552 <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8007532:	b2db      	uxtb	r3, r3
 8007534:	461a      	mov	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4413      	add	r3, r2
 800753a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800753e:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8007546:	b2db      	uxtb	r3, r3
 8007548:	3301      	adds	r3, #1
 800754a:	b2da      	uxtb	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 8007552:	68fb      	ldr	r3, [r7, #12]
}
 8007554:	4618      	mov	r0, r3
 8007556:	3714      	adds	r7, #20
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  int value = -1;
 8007568:	f04f 33ff 	mov.w	r3, #4294967295
 800756c:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8007574:	b2da      	uxtb	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800757c:	b2db      	uxtb	r3, r3
 800757e:	429a      	cmp	r2, r3
 8007580:	bf34      	ite	cc
 8007582:	2301      	movcc	r3, #1
 8007584:	2300      	movcs	r3, #0
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b00      	cmp	r3, #0
 800758a:	d009      	beq.n	80075a0 <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8007592:	b2db      	uxtb	r3, r3
 8007594:	461a      	mov	r2, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4413      	add	r3, r2
 800759a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800759e:	60fb      	str	r3, [r7, #12]
  }

  return value;
 80075a0:	68fb      	ldr	r3, [r7, #12]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3714      	adds	r7, #20
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr

080075ae <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 80075ae:	b480      	push	{r7}
 80075b0:	b083      	sub	sp, #12
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 80075b6:	bf00      	nop
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <_ZN7TwoWire15i2c_slave_writeEPKci>:

    return 1;
}

int TwoWire::i2c_slave_write(const char *data, int length)
{
 80075c2:	b480      	push	{r7}
 80075c4:	b089      	sub	sp, #36	; 0x24
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	60f8      	str	r0, [r7, #12]
 80075ca:	60b9      	str	r1, [r7, #8]
 80075cc:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 80075ce:	2300      	movs	r3, #0
 80075d0:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075d6:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	dd41      	ble.n	8007662 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 80075de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075e2:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ee:	2b80      	cmp	r3, #128	; 0x80
 80075f0:	bf14      	ite	ne
 80075f2:	2301      	movne	r3, #1
 80075f4:	2300      	moveq	r3, #0
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d008      	beq.n	800760e <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	3b01      	subs	r3, #1
 8007600:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1ed      	bne.n	80075e4 <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 8007608:	f04f 33ff 	mov.w	r3, #4294967295
 800760c:	e068      	b.n	80076e0 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	1c5a      	adds	r2, r3, #1
 8007612:	60ba      	str	r2, [r7, #8]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	461a      	mov	r2, r3
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	611a      	str	r2, [r3, #16]
        length--;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	3b01      	subs	r3, #1
 8007620:	607b      	str	r3, [r7, #4]
        size++;
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	3301      	adds	r3, #1
 8007626:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	f003 0304 	and.w	r3, r3, #4
 8007632:	2b04      	cmp	r3, #4
 8007634:	d104      	bne.n	8007640 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d001      	beq.n	8007640 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 800763c:	2301      	movs	r3, #1
 800763e:	e000      	b.n	8007642 <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 8007640:	2300      	movs	r3, #0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d0c8      	beq.n	80075d8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	1c5a      	adds	r2, r3, #1
 800764a:	60ba      	str	r2, [r7, #8]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	461a      	mov	r2, r3
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	611a      	str	r2, [r3, #16]
            length--;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	3b01      	subs	r3, #1
 8007658:	607b      	str	r3, [r7, #4]
            size++;
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	3301      	adds	r3, #1
 800765e:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 8007660:	e7ba      	b.n	80075d8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 8007662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007666:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007676:	bf14      	ite	ne
 8007678:	2301      	movne	r3, #1
 800767a:	2300      	moveq	r3, #0
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b00      	cmp	r3, #0
 8007680:	d008      	beq.n	8007694 <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	3b01      	subs	r3, #1
 8007686:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1ec      	bne.n	8007668 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 800768e:	f04f 33ff 	mov.w	r3, #4294967295
 8007692:	e025      	b.n	80076e0 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007698:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800769c:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 800769e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076a2:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	f003 0302 	and.w	r3, r3, #2
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	bf0c      	ite	eq
 80076b2:	2301      	moveq	r3, #1
 80076b4:	2300      	movne	r3, #0
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d008      	beq.n	80076ce <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	3b01      	subs	r3, #1
 80076c0:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1ed      	bne.n	80076a4 <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 80076c8:	f04f 33ff 	mov.w	r3, #4294967295
 80076cc:	e008      	b.n	80076e0 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2220      	movs	r2, #32
 80076d2:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 80076de:	69bb      	ldr	r3, [r7, #24]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3724      	adds	r7, #36	; 0x24
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f8:	4a12      	ldr	r2, [pc, #72]	; (8007744 <_ZN7TwoWire15enableInterruptEv+0x58>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d106      	bne.n	800770c <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80076fe:	2049      	movs	r0, #73	; 0x49
 8007700:	f002 f904 	bl	800990c <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8007704:	2048      	movs	r0, #72	; 0x48
 8007706:	f002 f901 	bl	800990c <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 800770a:	e016      	b.n	800773a <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007710:	4a0d      	ldr	r2, [pc, #52]	; (8007748 <_ZN7TwoWire15enableInterruptEv+0x5c>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d106      	bne.n	8007724 <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8007716:	2022      	movs	r0, #34	; 0x22
 8007718:	f002 f8f8 	bl	800990c <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800771c:	2021      	movs	r0, #33	; 0x21
 800771e:	f002 f8f5 	bl	800990c <HAL_NVIC_EnableIRQ>
}
 8007722:	e00a      	b.n	800773a <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007728:	4a08      	ldr	r2, [pc, #32]	; (800774c <_ZN7TwoWire15enableInterruptEv+0x60>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d105      	bne.n	800773a <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800772e:	2020      	movs	r0, #32
 8007730:	f002 f8ec 	bl	800990c <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8007734:	201f      	movs	r0, #31
 8007736:	f002 f8e9 	bl	800990c <HAL_NVIC_EnableIRQ>
}
 800773a:	bf00      	nop
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	40005c00 	.word	0x40005c00
 8007748:	40005800 	.word	0x40005800
 800774c:	40005400 	.word	0x40005400

08007750 <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800775c:	4a12      	ldr	r2, [pc, #72]	; (80077a8 <_ZN7TwoWire16disableInterruptEv+0x58>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d106      	bne.n	8007770 <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8007762:	2049      	movs	r0, #73	; 0x49
 8007764:	f002 f8e0 	bl	8009928 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8007768:	2048      	movs	r0, #72	; 0x48
 800776a:	f002 f8dd 	bl	8009928 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 800776e:	e016      	b.n	800779e <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007774:	4a0d      	ldr	r2, [pc, #52]	; (80077ac <_ZN7TwoWire16disableInterruptEv+0x5c>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d106      	bne.n	8007788 <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 800777a:	2022      	movs	r0, #34	; 0x22
 800777c:	f002 f8d4 	bl	8009928 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8007780:	2021      	movs	r0, #33	; 0x21
 8007782:	f002 f8d1 	bl	8009928 <HAL_NVIC_DisableIRQ>
}
 8007786:	e00a      	b.n	800779e <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800778c:	4a08      	ldr	r2, [pc, #32]	; (80077b0 <_ZN7TwoWire16disableInterruptEv+0x60>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d105      	bne.n	800779e <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8007792:	2020      	movs	r0, #32
 8007794:	f002 f8c8 	bl	8009928 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8007798:	201f      	movs	r0, #31
 800779a:	f002 f8c5 	bl	8009928 <HAL_NVIC_DisableIRQ>
}
 800779e:	bf00      	nop
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	40005c00 	.word	0x40005c00
 80077ac:	40005800 	.word	0x40005800
 80077b0:	40005400 	.word	0x40005400

080077b4 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d110      	bne.n	80077e6 <_Z41__static_initialization_and_destruction_0ii+0x32>
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d10b      	bne.n	80077e6 <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 80077ce:	4908      	ldr	r1, [pc, #32]	; (80077f0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80077d0:	4808      	ldr	r0, [pc, #32]	; (80077f4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80077d2:	f7ff fdd5 	bl	8007380 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 80077d6:	4908      	ldr	r1, [pc, #32]	; (80077f8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80077d8:	4808      	ldr	r0, [pc, #32]	; (80077fc <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80077da:	f7ff fdd1 	bl	8007380 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 80077de:	4908      	ldr	r1, [pc, #32]	; (8007800 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80077e0:	4808      	ldr	r0, [pc, #32]	; (8007804 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80077e2:	f7ff fdcd 	bl	8007380 <_ZN7TwoWireC1EP11I2C_TypeDef>
 80077e6:	bf00      	nop
 80077e8:	3708      	adds	r7, #8
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	40005400 	.word	0x40005400
 80077f4:	20000518 	.word	0x20000518
 80077f8:	40005800 	.word	0x40005800
 80077fc:	200005d0 	.word	0x200005d0
 8007800:	40005c00 	.word	0x40005c00
 8007804:	20000688 	.word	0x20000688

08007808 <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 8007808:	b580      	push	{r7, lr}
 800780a:	af00      	add	r7, sp, #0
 800780c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007810:	2001      	movs	r0, #1
 8007812:	f7ff ffcf 	bl	80077b4 <_Z41__static_initialization_and_destruction_0ii>
 8007816:	bd80      	pop	{r7, pc}

08007818 <MRT_radio_tx>:
#include <iwdg.h>
#include <string.h>
#include <sx126x.h>


void MRT_radio_tx(char* buffer){
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
	#if XTEND_ //Xtend send
		if (strlen(buffer) < XTEND_BUFFER_SIZE)	HAL_UART_Transmit(&XTEND_UART,(uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
	#elif SRADIO_ //SRadio send TODO
		if (strlen(buffer) < SRADIO_BUFFER_SIZE){
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f7f8 fcef 	bl	8000204 <strlen>
 8007826:	4603      	mov	r3, r0
 8007828:	2bff      	cmp	r3, #255	; 0xff
 800782a:	d80a      	bhi.n	8007842 <MRT_radio_tx+0x2a>
			//sx126x_set_tx(&SRADIO_SPI, 1000, SRADIO_BUFFER_SIZE);
			Tx_setup();
 800782c:	f000 fb00 	bl	8007e30 <Tx_setup>
			TxProtocol((uint8_t*) buffer, strlen(buffer));
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7f8 fce7 	bl	8000204 <strlen>
 8007836:	4603      	mov	r3, r0
 8007838:	b2db      	uxtb	r3, r3
 800783a:	4619      	mov	r1, r3
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fc0b 	bl	8008058 <TxProtocol>
		}
	#endif

	print((char*) "Radio sending:\t");
 8007842:	4805      	ldr	r0, [pc, #20]	; (8007858 <MRT_radio_tx+0x40>)
 8007844:	f7f9 fc10 	bl	8001068 <print>
	println(buffer);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f7f9 fbef 	bl	800102c <println>
}
 800784e:	bf00      	nop
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	0801d3a0 	.word	0x0801d3a0

0800785c <MRT_radio_rx>:


void MRT_radio_rx(char* buffer, uint8_t size, uint16_t timeout){
 800785c:	b5b0      	push	{r4, r5, r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	460b      	mov	r3, r1
 8007866:	70fb      	strb	r3, [r7, #3]
 8007868:	4613      	mov	r3, r2
 800786a:	803b      	strh	r3, [r7, #0]
	#if XTEND_ //Xtend receive
		if (size < XTEND_BUFFER_SIZE){
			HAL_UART_Receive(&XTEND_UART,(uint8_t*) buffer, sizeof(char) * size, timeout);
		}
	#elif SRADIO_ //SRadio receive TODO
		if (size < SRADIO_BUFFER_SIZE){
 800786c:	466b      	mov	r3, sp
 800786e:	461d      	mov	r5, r3
			//sx126x_set_rx(&SRADIO_SPI,5000);
			Rx_setup();
 8007870:	f000 fc2e 	bl	80080d0 <Rx_setup>

			//Note: The last character is always random and needs to be removed
			char temp_buf[size];
 8007874:	78fc      	ldrb	r4, [r7, #3]
 8007876:	4623      	mov	r3, r4
 8007878:	3b01      	subs	r3, #1
 800787a:	60fb      	str	r3, [r7, #12]
 800787c:	b2e0      	uxtb	r0, r4
 800787e:	f04f 0100 	mov.w	r1, #0
 8007882:	f04f 0200 	mov.w	r2, #0
 8007886:	f04f 0300 	mov.w	r3, #0
 800788a:	00cb      	lsls	r3, r1, #3
 800788c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8007890:	00c2      	lsls	r2, r0, #3
 8007892:	b2e0      	uxtb	r0, r4
 8007894:	f04f 0100 	mov.w	r1, #0
 8007898:	f04f 0200 	mov.w	r2, #0
 800789c:	f04f 0300 	mov.w	r3, #0
 80078a0:	00cb      	lsls	r3, r1, #3
 80078a2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80078a6:	00c2      	lsls	r2, r0, #3
 80078a8:	4623      	mov	r3, r4
 80078aa:	3307      	adds	r3, #7
 80078ac:	08db      	lsrs	r3, r3, #3
 80078ae:	00db      	lsls	r3, r3, #3
 80078b0:	ebad 0d03 	sub.w	sp, sp, r3
 80078b4:	466b      	mov	r3, sp
 80078b6:	3300      	adds	r3, #0
 80078b8:	60bb      	str	r3, [r7, #8]
			memset(temp_buf,0,size);
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	78fa      	ldrb	r2, [r7, #3]
 80078be:	2100      	movs	r1, #0
 80078c0:	4618      	mov	r0, r3
 80078c2:	f00f fc8b 	bl	80171dc <memset>
			RxProtocol((uint8_t*) temp_buf);
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	4618      	mov	r0, r3
 80078ca:	f000 fcf5 	bl	80082b8 <RxProtocol>
			//memcpy(buffer,temp_buf,strlen(temp_buf)-1);
			memcpy(buffer,temp_buf,size);
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	78fa      	ldrb	r2, [r7, #3]
 80078d2:	4619      	mov	r1, r3
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f00f fc59 	bl	801718c <memcpy>
 80078da:	46ad      	mov	sp, r5
		}
	#endif

	print((char*) "Radio receiving:\t");
 80078dc:	4804      	ldr	r0, [pc, #16]	; (80078f0 <MRT_radio_rx+0x94>)
 80078de:	f7f9 fbc3 	bl	8001068 <print>
	println(buffer);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7f9 fba2 	bl	800102c <println>
}
 80078e8:	bf00      	nop
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bdb0      	pop	{r4, r5, r7, pc}
 80078f0:	0801d3b0 	.word	0x0801d3b0

080078f4 <MRT_radio_Init>:



void MRT_radio_Init(void){
 80078f4:	b590      	push	{r4, r7, lr}
 80078f6:	b093      	sub	sp, #76	; 0x4c
 80078f8:	af12      	add	r7, sp, #72	; 0x48
	println("\r\nRadio Init");
 80078fa:	4816      	ldr	r0, [pc, #88]	; (8007954 <MRT_radio_Init+0x60>)
 80078fc:	f7f9 fb96 	bl	800102c <println>
	#if XTEND_
	print("\tXTEND Init...");
	HAL_GPIO_WritePin(XTend_CTS_Pin, GPIO_PIN_10, GPIO_PIN_RESET);
	println("OK");
	#elif SRADIO_
	print("\tSRADIO Init...");
 8007900:	4815      	ldr	r0, [pc, #84]	; (8007958 <MRT_radio_Init+0x64>)
 8007902:	f7f9 fbb1 	bl	8001068 <print>
	set_hspi(SRADIO_SPI);
 8007906:	4c15      	ldr	r4, [pc, #84]	; (800795c <MRT_radio_Init+0x68>)
 8007908:	4668      	mov	r0, sp
 800790a:	f104 0310 	add.w	r3, r4, #16
 800790e:	2248      	movs	r2, #72	; 0x48
 8007910:	4619      	mov	r1, r3
 8007912:	f00f fc3b 	bl	801718c <memcpy>
 8007916:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800791a:	f000 fa71 	bl	8007e00 <set_hspi>
	set_NSS_pin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin);
 800791e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007922:	480f      	ldr	r0, [pc, #60]	; (8007960 <MRT_radio_Init+0x6c>)
 8007924:	f000 fa14 	bl	8007d50 <set_NSS_pin>
	set_BUSY_pin(SX_BUSY_GPIO_Port, SX_BUSY_Pin);
 8007928:	2108      	movs	r1, #8
 800792a:	480e      	ldr	r0, [pc, #56]	; (8007964 <MRT_radio_Init+0x70>)
 800792c:	f000 fa26 	bl	8007d7c <set_BUSY_pin>
	set_NRESET_pin(SX_RST_GPIO_Port, SX_RST_Pin);
 8007930:	2104      	movs	r1, #4
 8007932:	480c      	ldr	r0, [pc, #48]	; (8007964 <MRT_radio_Init+0x70>)
 8007934:	f000 fa38 	bl	8007da8 <set_NRESET_pin>
	set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
 8007938:	2110      	movs	r1, #16
 800793a:	480a      	ldr	r0, [pc, #40]	; (8007964 <MRT_radio_Init+0x70>)
 800793c:	f000 fa4a 	bl	8007dd4 <set_DIO1_pin>
	//  set_DIO2_pin(DIO2_1_GPIO_Port, DIO2_1_Pin);
	//  set_DIO3_pin(DIO3_1_GPIO_Port, DIO3_1_Pin);
	Tx_setup();
 8007940:	f000 fa76 	bl	8007e30 <Tx_setup>
	//Rx_setup();
	println("OK");
 8007944:	4808      	ldr	r0, [pc, #32]	; (8007968 <MRT_radio_Init+0x74>)
 8007946:	f7f9 fb71 	bl	800102c <println>
	#else
	println("\tNo radio currently in use");
	#endif
}
 800794a:	bf00      	nop
 800794c:	3704      	adds	r7, #4
 800794e:	46bd      	mov	sp, r7
 8007950:	bd90      	pop	{r4, r7, pc}
 8007952:	bf00      	nop
 8007954:	0801d3c4 	.word	0x0801d3c4
 8007958:	0801d3d4 	.word	0x0801d3d4
 800795c:	2000bb4c 	.word	0x2000bb4c
 8007960:	40020400 	.word	0x40020400
 8007964:	40021800 	.word	0x40021800
 8007968:	0801d3e4 	.word	0x0801d3e4

0800796c <MRT_TELEMETRY_Init>:


void MRT_TELEMETRY_Init(void){
 800796c:	b580      	push	{r7, lr}
 800796e:	af00      	add	r7, sp, #0

	MRT_radio_Init();
 8007970:	f7ff ffc0 	bl	80078f4 <MRT_radio_Init>

	HAL_IWDG_Refresh(&hiwdg);
 8007974:	4802      	ldr	r0, [pc, #8]	; (8007980 <MRT_TELEMETRY_Init+0x14>)
 8007976:	f003 fa8d 	bl	800ae94 <HAL_IWDG_Refresh>
		hiridium = MRT_Iridium_Init(IRIDIUM_TIMEOUT, IRIDIUM_I2C, print);
		#else
		hiridium = MRT_Iridium_Init(IRIDIUM_TIMEOUT, IRIDIUM_I2C, no_print); //Doesn't print the internal commands
		#endif
	#endif
}
 800797a:	bf00      	nop
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	2000bb20 	.word	0x2000bb20

08007984 <MRT_radio_send_ack>:



void MRT_radio_send_ack(radio_command cmd){
 8007984:	b580      	push	{r7, lr}
 8007986:	b088      	sub	sp, #32
 8007988:	af00      	add	r7, sp, #0
 800798a:	4603      	mov	r3, r0
 800798c:	71fb      	strb	r3, [r7, #7]
	if(cmd>=0 && cmd<=9){
 800798e:	79fb      	ldrb	r3, [r7, #7]
 8007990:	2b09      	cmp	r3, #9
 8007992:	d80b      	bhi.n	80079ac <MRT_radio_send_ack+0x28>
		char buffer[20];
		sprintf(buffer, "radio_ack_%i\r\n",cmd);
 8007994:	79fa      	ldrb	r2, [r7, #7]
 8007996:	f107 030c 	add.w	r3, r7, #12
 800799a:	4906      	ldr	r1, [pc, #24]	; (80079b4 <MRT_radio_send_ack+0x30>)
 800799c:	4618      	mov	r0, r3
 800799e:	f010 fc9b 	bl	80182d8 <siprintf>
		MRT_radio_tx(buffer);
 80079a2:	f107 030c 	add.w	r3, r7, #12
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7ff ff36 	bl	8007818 <MRT_radio_tx>
	}
}
 80079ac:	bf00      	nop
 80079ae:	3720      	adds	r7, #32
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	0801d3e8 	.word	0x0801d3e8

080079b8 <radio_parse_command>:
//extern volatile uint8_t state_arm_rcov; TODO NOT USED YET
//extern volatile uint8_t state_arm_prop; TODO NOT USED YET

//extern volatile char rx_buf[10]; // dma buffer NOT IN USE YET

radio_command radio_parse_command(char* rx_buf) {
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
	memset(radio_buffer,0,10);
	sprintf(radio_buffer,"%i",strcmp(rx_buf, "lr"));
	//println(radio_buffer);
	#endif

	if (strcmp(rx_buf, "lr") == 0) { // launch command
 80079c0:	492a      	ldr	r1, [pc, #168]	; (8007a6c <radio_parse_command+0xb4>)
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7f8 fc14 	bl	80001f0 <strcmp>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d101      	bne.n	80079d2 <radio_parse_command+0x1a>
		return LAUNCH;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e048      	b.n	8007a64 <radio_parse_command+0xac>
	}
	else if (strcmp(rx_buf, "ap") == 0) { // arm propulsion
 80079d2:	4927      	ldr	r1, [pc, #156]	; (8007a70 <radio_parse_command+0xb8>)
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f7f8 fc0b 	bl	80001f0 <strcmp>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d101      	bne.n	80079e4 <radio_parse_command+0x2c>
		return ARM_PROP;
 80079e0:	2302      	movs	r3, #2
 80079e2:	e03f      	b.n	8007a64 <radio_parse_command+0xac>
	}
	else if (strcmp(rx_buf, "ar") == 0) { // arm recovery
 80079e4:	4923      	ldr	r1, [pc, #140]	; (8007a74 <radio_parse_command+0xbc>)
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f7f8 fc02 	bl	80001f0 <strcmp>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d101      	bne.n	80079f6 <radio_parse_command+0x3e>
		return ARM_RCOV;
 80079f2:	2303      	movs	r3, #3
 80079f4:	e036      	b.n	8007a64 <radio_parse_command+0xac>
	}
	else if (strcmp(rx_buf, "dp") == 0) { // disarm propulsion
 80079f6:	4920      	ldr	r1, [pc, #128]	; (8007a78 <radio_parse_command+0xc0>)
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f7f8 fbf9 	bl	80001f0 <strcmp>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d101      	bne.n	8007a08 <radio_parse_command+0x50>
		return DISARM_PROP;
 8007a04:	2304      	movs	r3, #4
 8007a06:	e02d      	b.n	8007a64 <radio_parse_command+0xac>
	}
	else if (strcmp(rx_buf, "dr") == 0) { // disarm recovery
 8007a08:	491c      	ldr	r1, [pc, #112]	; (8007a7c <radio_parse_command+0xc4>)
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7f8 fbf0 	bl	80001f0 <strcmp>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d101      	bne.n	8007a1a <radio_parse_command+0x62>
		return DISARM_RCOV;
 8007a16:	2305      	movs	r3, #5
 8007a18:	e024      	b.n	8007a64 <radio_parse_command+0xac>
	}
	else if (strcmp(rx_buf, "v1") == 0) { // vr power on
 8007a1a:	4919      	ldr	r1, [pc, #100]	; (8007a80 <radio_parse_command+0xc8>)
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f7f8 fbe7 	bl	80001f0 <strcmp>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d101      	bne.n	8007a2c <radio_parse_command+0x74>
		return VR_POWER_ON;
 8007a28:	2306      	movs	r3, #6
 8007a2a:	e01b      	b.n	8007a64 <radio_parse_command+0xac>
	}
	else if (strcmp(rx_buf, "v2") == 0) { // vr start
 8007a2c:	4915      	ldr	r1, [pc, #84]	; (8007a84 <radio_parse_command+0xcc>)
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f7f8 fbde 	bl	80001f0 <strcmp>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d101      	bne.n	8007a3e <radio_parse_command+0x86>
		return VR_REC_START;
 8007a3a:	2307      	movs	r3, #7
 8007a3c:	e012      	b.n	8007a64 <radio_parse_command+0xac>
	}
	else if (strcmp(rx_buf, "v3") == 0) { // vr stop
 8007a3e:	4912      	ldr	r1, [pc, #72]	; (8007a88 <radio_parse_command+0xd0>)
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f7f8 fbd5 	bl	80001f0 <strcmp>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d101      	bne.n	8007a50 <radio_parse_command+0x98>
		return VR_REC_STOP;
 8007a4c:	2308      	movs	r3, #8
 8007a4e:	e009      	b.n	8007a64 <radio_parse_command+0xac>
	}
	else if (strcmp(rx_buf, "v4") == 0) { // vr power off
 8007a50:	490e      	ldr	r1, [pc, #56]	; (8007a8c <radio_parse_command+0xd4>)
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f7f8 fbcc 	bl	80001f0 <strcmp>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d101      	bne.n	8007a62 <radio_parse_command+0xaa>
		return VR_POWER_OFF;
 8007a5e:	2309      	movs	r3, #9
 8007a60:	e000      	b.n	8007a64 <radio_parse_command+0xac>
	}

	// all other commands are invalid, ignore.
	else{
		return -1;
 8007a62:	23ff      	movs	r3, #255	; 0xff
	}
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	0801d3f8 	.word	0x0801d3f8
 8007a70:	0801d3fc 	.word	0x0801d3fc
 8007a74:	0801d400 	.word	0x0801d400
 8007a78:	0801d404 	.word	0x0801d404
 8007a7c:	0801d408 	.word	0x0801d408
 8007a80:	0801d40c 	.word	0x0801d40c
 8007a84:	0801d410 	.word	0x0801d410
 8007a88:	0801d414 	.word	0x0801d414
 8007a8c:	0801d418 	.word	0x0801d418

08007a90 <execute_parsed_command>:

void execute_parsed_command(radio_command cmd) {
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	4603      	mov	r3, r0
 8007a98:	71fb      	strb	r3, [r7, #7]
	// TODO: decide whether we want to send an ack back to ground station, maybe as special event message
	switch (cmd) {
 8007a9a:	79fb      	ldrb	r3, [r7, #7]
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	2b08      	cmp	r3, #8
 8007aa0:	d84a      	bhi.n	8007b38 <execute_parsed_command+0xa8>
 8007aa2:	a201      	add	r2, pc, #4	; (adr r2, 8007aa8 <execute_parsed_command+0x18>)
 8007aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa8:	08007acd 	.word	0x08007acd
 8007aac:	08007ad9 	.word	0x08007ad9
 8007ab0:	08007ae5 	.word	0x08007ae5
 8007ab4:	08007af1 	.word	0x08007af1
 8007ab8:	08007afd 	.word	0x08007afd
 8007abc:	08007b09 	.word	0x08007b09
 8007ac0:	08007b15 	.word	0x08007b15
 8007ac4:	08007b21 	.word	0x08007b21
 8007ac8:	08007b2d 	.word	0x08007b2d
	case LAUNCH:
		rocket_launch();
 8007acc:	f000 f84c 	bl	8007b68 <rocket_launch>
		println((char*) "launch");
 8007ad0:	481c      	ldr	r0, [pc, #112]	; (8007b44 <execute_parsed_command+0xb4>)
 8007ad2:	f7f9 faab 	bl	800102c <println>
		break;
 8007ad6:	e030      	b.n	8007b3a <execute_parsed_command+0xaa>

	case ARM_PROP:
		arming_propulsion();
 8007ad8:	f000 f860 	bl	8007b9c <arming_propulsion>
		println((char*) "arm pr");
 8007adc:	481a      	ldr	r0, [pc, #104]	; (8007b48 <execute_parsed_command+0xb8>)
 8007ade:	f7f9 faa5 	bl	800102c <println>
		break;
 8007ae2:	e02a      	b.n	8007b3a <execute_parsed_command+0xaa>

	case ARM_RCOV:
		arming_recovery();
 8007ae4:	f000 f866 	bl	8007bb4 <arming_recovery>
		println((char*) "arm rc");
 8007ae8:	4818      	ldr	r0, [pc, #96]	; (8007b4c <execute_parsed_command+0xbc>)
 8007aea:	f7f9 fa9f 	bl	800102c <println>
		break;
 8007aee:	e024      	b.n	8007b3a <execute_parsed_command+0xaa>

	case DISARM_PROP:
		disarm_propulsion();
 8007af0:	f000 f86c 	bl	8007bcc <disarm_propulsion>
		println((char*) "disarm pr");
 8007af4:	4816      	ldr	r0, [pc, #88]	; (8007b50 <execute_parsed_command+0xc0>)
 8007af6:	f7f9 fa99 	bl	800102c <println>
		break;
 8007afa:	e01e      	b.n	8007b3a <execute_parsed_command+0xaa>

	case DISARM_RCOV:
		disarm_recovery();
 8007afc:	f000 f880 	bl	8007c00 <disarm_recovery>
		println((char*) "disarm rc");
 8007b00:	4814      	ldr	r0, [pc, #80]	; (8007b54 <execute_parsed_command+0xc4>)
 8007b02:	f7f9 fa93 	bl	800102c <println>
		break;
 8007b06:	e018      	b.n	8007b3a <execute_parsed_command+0xaa>

	case VR_POWER_ON:
		VR_Power_On();
 8007b08:	f7fd fc56 	bl	80053b8 <VR_Power_On>
		println((char*) "vr on");
 8007b0c:	4812      	ldr	r0, [pc, #72]	; (8007b58 <execute_parsed_command+0xc8>)
 8007b0e:	f7f9 fa8d 	bl	800102c <println>
		break;
 8007b12:	e012      	b.n	8007b3a <execute_parsed_command+0xaa>

	case VR_REC_START:
		VR_Start_Rec();
 8007b14:	f7fd fc6c 	bl	80053f0 <VR_Start_Rec>
		println((char*) "vr start");
 8007b18:	4810      	ldr	r0, [pc, #64]	; (8007b5c <execute_parsed_command+0xcc>)
 8007b1a:	f7f9 fa87 	bl	800102c <println>
		break;
 8007b1e:	e00c      	b.n	8007b3a <execute_parsed_command+0xaa>

	case VR_REC_STOP:
		VR_Stop_Rec();
 8007b20:	f7fd fc72 	bl	8005408 <VR_Stop_Rec>
		println((char*) "vr stop");
 8007b24:	480e      	ldr	r0, [pc, #56]	; (8007b60 <execute_parsed_command+0xd0>)
 8007b26:	f7f9 fa81 	bl	800102c <println>
		break;
 8007b2a:	e006      	b.n	8007b3a <execute_parsed_command+0xaa>

	case VR_POWER_OFF:
		VR_Power_Off();
 8007b2c:	f7fd fc54 	bl	80053d8 <VR_Power_Off>
		println((char*) "vr off");
 8007b30:	480c      	ldr	r0, [pc, #48]	; (8007b64 <execute_parsed_command+0xd4>)
 8007b32:	f7f9 fa7b 	bl	800102c <println>
		break;
 8007b36:	e000      	b.n	8007b3a <execute_parsed_command+0xaa>

	default:
		break;
 8007b38:	bf00      	nop
	}
}
 8007b3a:	bf00      	nop
 8007b3c:	3708      	adds	r7, #8
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	0801d41c 	.word	0x0801d41c
 8007b48:	0801d424 	.word	0x0801d424
 8007b4c:	0801d42c 	.word	0x0801d42c
 8007b50:	0801d434 	.word	0x0801d434
 8007b54:	0801d440 	.word	0x0801d440
 8007b58:	0801d44c 	.word	0x0801d44c
 8007b5c:	0801d454 	.word	0x0801d454
 8007b60:	0801d460 	.word	0x0801d460
 8007b64:	0801d468 	.word	0x0801d468

08007b68 <rocket_launch>:

void rocket_launch(void) {
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	af00      	add	r7, sp, #0
	// just to be safe, set arming pin high to ensure pyro channels are armed
	HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET);
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	2102      	movs	r1, #2
 8007b70:	4808      	ldr	r0, [pc, #32]	; (8007b94 <rocket_launch+0x2c>)
 8007b72:	f002 f8ab 	bl	8009ccc <HAL_GPIO_WritePin>

	// open valve by firing the prop pyro ejection channels
	HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, SET);
 8007b76:	2201      	movs	r2, #1
 8007b78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b7c:	4806      	ldr	r0, [pc, #24]	; (8007b98 <rocket_launch+0x30>)
 8007b7e:	f002 f8a5 	bl	8009ccc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port, OUT_PyroValve_Gate_2_Pin, SET);
 8007b82:	2201      	movs	r2, #1
 8007b84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007b88:	4803      	ldr	r0, [pc, #12]	; (8007b98 <rocket_launch+0x30>)
 8007b8a:	f002 f89f 	bl	8009ccc <HAL_GPIO_WritePin>
}
 8007b8e:	bf00      	nop
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	40021800 	.word	0x40021800
 8007b98:	40021400 	.word	0x40021400

08007b9c <arming_propulsion>:

void arming_propulsion(void) {
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	af00      	add	r7, sp, #0
	// arm, TODO: decide whether to add feedback/check on arming status
	HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET);
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	2102      	movs	r1, #2
 8007ba4:	4802      	ldr	r0, [pc, #8]	; (8007bb0 <arming_propulsion+0x14>)
 8007ba6:	f002 f891 	bl	8009ccc <HAL_GPIO_WritePin>
	//state_arm_prop = 1;
	//set_backup_state(FC_STATE_ARM_PROP, //state_arm_prop);
}
 8007baa:	bf00      	nop
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	40021800 	.word	0x40021800

08007bb4 <arming_recovery>:

void arming_recovery(void) {
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	af00      	add	r7, sp, #0
	// arm, TODO: decide whether to add feedback/check on arming status
	HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET);
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007bbe:	4802      	ldr	r0, [pc, #8]	; (8007bc8 <arming_recovery+0x14>)
 8007bc0:	f002 f884 	bl	8009ccc <HAL_GPIO_WritePin>
	//state_arm_rcov = 1;
	//set_backup_state(FC_STATE_ARM_RCOV, //state_arm_rcov);
}
 8007bc4:	bf00      	nop
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	40021800 	.word	0x40021800

08007bcc <disarm_propulsion>:

void disarm_propulsion(void) {
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	af00      	add	r7, sp, #0
	// disarm, TODO: decide whether to add feedback/check on arming status
	HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, RESET);
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	2102      	movs	r1, #2
 8007bd4:	4808      	ldr	r0, [pc, #32]	; (8007bf8 <disarm_propulsion+0x2c>)
 8007bd6:	f002 f879 	bl	8009ccc <HAL_GPIO_WritePin>

	// also reset the gates in case they were high
	HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET);
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007be0:	4806      	ldr	r0, [pc, #24]	; (8007bfc <disarm_propulsion+0x30>)
 8007be2:	f002 f873 	bl	8009ccc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port, OUT_PyroValve_Gate_2_Pin, RESET);
 8007be6:	2200      	movs	r2, #0
 8007be8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007bec:	4803      	ldr	r0, [pc, #12]	; (8007bfc <disarm_propulsion+0x30>)
 8007bee:	f002 f86d 	bl	8009ccc <HAL_GPIO_WritePin>

	//state_arm_prop = 0;
	//set_backup_state(FC_STATE_ARM_PROP, //state_arm_prop);
}
 8007bf2:	bf00      	nop
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	40021800 	.word	0x40021800
 8007bfc:	40021400 	.word	0x40021400

08007c00 <disarm_recovery>:

void disarm_recovery(void) {
 8007c00:	b580      	push	{r7, lr}
 8007c02:	af00      	add	r7, sp, #0
	// disarm, TODO: decide whether to add feedback/check on arming status
	HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, RESET);
 8007c04:	2200      	movs	r2, #0
 8007c06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007c0a:	4808      	ldr	r0, [pc, #32]	; (8007c2c <disarm_recovery+0x2c>)
 8007c0c:	f002 f85e 	bl	8009ccc <HAL_GPIO_WritePin>

	// also reset the gates in case they were high
	HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET);
 8007c10:	2200      	movs	r2, #0
 8007c12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007c16:	4805      	ldr	r0, [pc, #20]	; (8007c2c <disarm_recovery+0x2c>)
 8007c18:	f002 f858 	bl	8009ccc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET);
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c22:	4802      	ldr	r0, [pc, #8]	; (8007c2c <disarm_recovery+0x2c>)
 8007c24:	f002 f852 	bl	8009ccc <HAL_GPIO_WritePin>

	//state_arm_rcov = 0;
	//set_backup_state(FC_STATE_ARM_RCOV, //state_arm_rcov);
}
 8007c28:	bf00      	nop
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	40021800 	.word	0x40021800

08007c30 <sx126x_hal_write>:
 * @returns Operation status
 */


sx126x_hal_status_t sx126x_hal_write( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                      const uint8_t* data, const uint16_t data_length ){
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	603b      	str	r3, [r7, #0]
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO,BUSY) == GPIO_PIN_SET);
 8007c40:	bf00      	nop
 8007c42:	4b18      	ldr	r3, [pc, #96]	; (8007ca4 <sx126x_hal_write+0x74>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a18      	ldr	r2, [pc, #96]	; (8007ca8 <sx126x_hal_write+0x78>)
 8007c48:	8812      	ldrh	r2, [r2, #0]
 8007c4a:	4611      	mov	r1, r2
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f002 f825 	bl	8009c9c <HAL_GPIO_ReadPin>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d0f4      	beq.n	8007c42 <sx126x_hal_write+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 8007c58:	4b14      	ldr	r3, [pc, #80]	; (8007cac <sx126x_hal_write+0x7c>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a14      	ldr	r2, [pc, #80]	; (8007cb0 <sx126x_hal_write+0x80>)
 8007c5e:	8811      	ldrh	r1, [r2, #0]
 8007c60:	2200      	movs	r2, #0
 8007c62:	4618      	mov	r0, r3
 8007c64:	f002 f832 	bl	8009ccc <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, command_length, 100);
 8007c68:	88fa      	ldrh	r2, [r7, #6]
 8007c6a:	2364      	movs	r3, #100	; 0x64
 8007c6c:	68b9      	ldr	r1, [r7, #8]
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f004 feb7 	bl	800c9e2 <HAL_SPI_Transmit>
 8007c74:	4603      	mov	r3, r0
 8007c76:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_Transmit(hspi, data, data_length, 100);
 8007c78:	8c3a      	ldrh	r2, [r7, #32]
 8007c7a:	2364      	movs	r3, #100	; 0x64
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f004 feaf 	bl	800c9e2 <HAL_SPI_Transmit>
 8007c84:	4603      	mov	r3, r0
 8007c86:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 8007c88:	4b08      	ldr	r3, [pc, #32]	; (8007cac <sx126x_hal_write+0x7c>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a08      	ldr	r2, [pc, #32]	; (8007cb0 <sx126x_hal_write+0x80>)
 8007c8e:	8811      	ldrh	r1, [r2, #0]
 8007c90:	2201      	movs	r2, #1
 8007c92:	4618      	mov	r0, r3
 8007c94:	f002 f81a 	bl	8009ccc <HAL_GPIO_WritePin>
    return status;
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	20000754 	.word	0x20000754
 8007ca8:	20000750 	.word	0x20000750
 8007cac:	20000744 	.word	0x20000744
 8007cb0:	20000740 	.word	0x20000740

08007cb4 <sx126x_hal_read>:
 * @param [in] data_length      Buffer size to be received
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_read( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                     uint8_t* data, const uint8_t offset ){
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b088      	sub	sp, #32
 8007cb8:	af02      	add	r7, sp, #8
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	603b      	str	r3, [r7, #0]
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO, BUSY) == GPIO_PIN_SET);
 8007cc4:	bf00      	nop
 8007cc6:	4b1e      	ldr	r3, [pc, #120]	; (8007d40 <sx126x_hal_read+0x8c>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a1e      	ldr	r2, [pc, #120]	; (8007d44 <sx126x_hal_read+0x90>)
 8007ccc:	8812      	ldrh	r2, [r2, #0]
 8007cce:	4611      	mov	r1, r2
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f001 ffe3 	bl	8009c9c <HAL_GPIO_ReadPin>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d0f4      	beq.n	8007cc6 <sx126x_hal_read+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 8007cdc:	4b1a      	ldr	r3, [pc, #104]	; (8007d48 <sx126x_hal_read+0x94>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a1a      	ldr	r2, [pc, #104]	; (8007d4c <sx126x_hal_read+0x98>)
 8007ce2:	8811      	ldrh	r1, [r2, #0]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f001 fff0 	bl	8009ccc <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, offset, 100);
 8007cec:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	2364      	movs	r3, #100	; 0x64
 8007cf4:	68b9      	ldr	r1, [r7, #8]
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f004 fe73 	bl	800c9e2 <HAL_SPI_Transmit>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_TransmitReceive(hspi, command+offset, data, command_length-offset, 100);
 8007d00:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	18d1      	adds	r1, r2, r3
 8007d08:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	88fa      	ldrh	r2, [r7, #6]
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	2264      	movs	r2, #100	; 0x64
 8007d16:	9200      	str	r2, [sp, #0]
 8007d18:	683a      	ldr	r2, [r7, #0]
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f005 f8ae 	bl	800ce7c <HAL_SPI_TransmitReceive>
 8007d20:	4603      	mov	r3, r0
 8007d22:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 8007d24:	4b08      	ldr	r3, [pc, #32]	; (8007d48 <sx126x_hal_read+0x94>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a08      	ldr	r2, [pc, #32]	; (8007d4c <sx126x_hal_read+0x98>)
 8007d2a:	8811      	ldrh	r1, [r2, #0]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f001 ffcc 	bl	8009ccc <HAL_GPIO_WritePin>
    return status;
 8007d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3718      	adds	r7, #24
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	20000754 	.word	0x20000754
 8007d44:	20000750 	.word	0x20000750
 8007d48:	20000744 	.word	0x20000744
 8007d4c:	20000740 	.word	0x20000740

08007d50 <set_NSS_pin>:
    status = HAL_SPI_TransmitReceive(&hspi, (uint8_t*)params, (uint8_t*)response, numOfParams, 100);
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
    return status;
}

void set_NSS_pin(GPIO_TypeDef* _NSS_GPIO, uint16_t _NSS){
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	460b      	mov	r3, r1
 8007d5a:	807b      	strh	r3, [r7, #2]
    NSS = _NSS;
 8007d5c:	4a05      	ldr	r2, [pc, #20]	; (8007d74 <set_NSS_pin+0x24>)
 8007d5e:	887b      	ldrh	r3, [r7, #2]
 8007d60:	8013      	strh	r3, [r2, #0]
    NSS_GPIO = _NSS_GPIO;
 8007d62:	4a05      	ldr	r2, [pc, #20]	; (8007d78 <set_NSS_pin+0x28>)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6013      	str	r3, [r2, #0]
}
 8007d68:	bf00      	nop
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr
 8007d74:	20000740 	.word	0x20000740
 8007d78:	20000744 	.word	0x20000744

08007d7c <set_BUSY_pin>:

void set_BUSY_pin(GPIO_TypeDef* _BUSY_GPIO, uint16_t _BUSY){
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	807b      	strh	r3, [r7, #2]
    BUSY = _BUSY;
 8007d88:	4a05      	ldr	r2, [pc, #20]	; (8007da0 <set_BUSY_pin+0x24>)
 8007d8a:	887b      	ldrh	r3, [r7, #2]
 8007d8c:	8013      	strh	r3, [r2, #0]
    BUSY_GPIO = _BUSY_GPIO;
 8007d8e:	4a05      	ldr	r2, [pc, #20]	; (8007da4 <set_BUSY_pin+0x28>)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6013      	str	r3, [r2, #0]
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr
 8007da0:	20000750 	.word	0x20000750
 8007da4:	20000754 	.word	0x20000754

08007da8 <set_NRESET_pin>:

void set_NRESET_pin(GPIO_TypeDef* _NRESET_GPIO, uint16_t _NRESET){
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	460b      	mov	r3, r1
 8007db2:	807b      	strh	r3, [r7, #2]
    NRESET = _NRESET;
 8007db4:	4a05      	ldr	r2, [pc, #20]	; (8007dcc <set_NRESET_pin+0x24>)
 8007db6:	887b      	ldrh	r3, [r7, #2]
 8007db8:	8013      	strh	r3, [r2, #0]
    NRESET_GPIO = _NRESET_GPIO;
 8007dba:	4a05      	ldr	r2, [pc, #20]	; (8007dd0 <set_NRESET_pin+0x28>)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6013      	str	r3, [r2, #0]
}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr
 8007dcc:	20000748 	.word	0x20000748
 8007dd0:	2000074c 	.word	0x2000074c

08007dd4 <set_DIO1_pin>:

void set_DIO1_pin(GPIO_TypeDef* _DIO1_GPIO, uint16_t _DIO1){
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	807b      	strh	r3, [r7, #2]
    DIO1 = _DIO1;
 8007de0:	4a05      	ldr	r2, [pc, #20]	; (8007df8 <set_DIO1_pin+0x24>)
 8007de2:	887b      	ldrh	r3, [r7, #2]
 8007de4:	8013      	strh	r3, [r2, #0]
    DIO1_GPIO = _DIO1_GPIO;
 8007de6:	4a05      	ldr	r2, [pc, #20]	; (8007dfc <set_DIO1_pin+0x28>)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6013      	str	r3, [r2, #0]
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr
 8007df8:	20000758 	.word	0x20000758
 8007dfc:	2000075c 	.word	0x2000075c

08007e00 <set_hspi>:
void set_DIO3_pin(GPIO_TypeDef* _DIO3_GPIO, uint16_t _DIO3){
    DIO3 = _DIO3;
    DIO3_GPIO = _DIO3_GPIO;
}

void set_hspi(SPI_HandleTypeDef _hspi){
 8007e00:	b084      	sub	sp, #16
 8007e02:	b580      	push	{r7, lr}
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	f107 0c08 	add.w	ip, r7, #8
 8007e0a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    hspi = _hspi;
 8007e0e:	4b07      	ldr	r3, [pc, #28]	; (8007e2c <set_hspi+0x2c>)
 8007e10:	4618      	mov	r0, r3
 8007e12:	f107 0308 	add.w	r3, r7, #8
 8007e16:	2258      	movs	r2, #88	; 0x58
 8007e18:	4619      	mov	r1, r3
 8007e1a:	f00f f9b7 	bl	801718c <memcpy>
}
 8007e1e:	bf00      	nop
 8007e20:	46bd      	mov	sp, r7
 8007e22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e26:	b004      	add	sp, #16
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	20000760 	.word	0x20000760

08007e30 <Tx_setup>:

void Tx_setup(){
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b086      	sub	sp, #24
 8007e34:	af02      	add	r7, sp, #8
    //NEED TO ADD COMMAND ERROR HANDLING
    HAL_GPIO_WritePin(NRESET_GPIO, NRESET, GPIO_PIN_SET);
 8007e36:	4b66      	ldr	r3, [pc, #408]	; (8007fd0 <Tx_setup+0x1a0>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a66      	ldr	r2, [pc, #408]	; (8007fd4 <Tx_setup+0x1a4>)
 8007e3c:	8811      	ldrh	r1, [r2, #0]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	4618      	mov	r0, r3
 8007e42:	f001 ff43 	bl	8009ccc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 8007e46:	4b64      	ldr	r3, [pc, #400]	; (8007fd8 <Tx_setup+0x1a8>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a64      	ldr	r2, [pc, #400]	; (8007fdc <Tx_setup+0x1ac>)
 8007e4c:	8811      	ldrh	r1, [r2, #0]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	4618      	mov	r0, r3
 8007e52:	f001 ff3b 	bl	8009ccc <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8007e56:	2032      	movs	r0, #50	; 0x32
 8007e58:	f001 f82c 	bl	8008eb4 <HAL_Delay>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);             //make sure chip select is off
 8007e5c:	4b5e      	ldr	r3, [pc, #376]	; (8007fd8 <Tx_setup+0x1a8>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a5e      	ldr	r2, [pc, #376]	; (8007fdc <Tx_setup+0x1ac>)
 8007e62:	8811      	ldrh	r1, [r2, #0]
 8007e64:	2201      	movs	r2, #1
 8007e66:	4618      	mov	r0, r3
 8007e68:	f001 ff30 	bl	8009ccc <HAL_GPIO_WritePin>

    //set to standby for setup
    sx126x_set_standby(&hspi, 0);
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	485c      	ldr	r0, [pc, #368]	; (8007fe0 <Tx_setup+0x1b0>)
 8007e70:	f000 fa8a 	bl	8008388 <sx126x_set_standby>

    //set general parameters
    sx126x_set_rf_freq(&hspi, frequency);                       //set rf frequency
 8007e74:	4b5b      	ldr	r3, [pc, #364]	; (8007fe4 <Tx_setup+0x1b4>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4619      	mov	r1, r3
 8007e7a:	4859      	ldr	r0, [pc, #356]	; (8007fe0 <Tx_setup+0x1b0>)
 8007e7c:	f000 fdfe 	bl	8008a7c <sx126x_set_rf_freq>
    sx126x_set_pkt_type(&hspi, packet_type);                    //set packet type
 8007e80:	4b59      	ldr	r3, [pc, #356]	; (8007fe8 <Tx_setup+0x1b8>)
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	4619      	mov	r1, r3
 8007e86:	4856      	ldr	r0, [pc, #344]	; (8007fe0 <Tx_setup+0x1b0>)
 8007e88:	f000 fe32 	bl	8008af0 <sx126x_set_pkt_type>
    sx126x_set_rx_tx_fallback_mode(&hspi, fallback_mode);       //set rx tx fallback mode
 8007e8c:	4b57      	ldr	r3, [pc, #348]	; (8007fec <Tx_setup+0x1bc>)
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	4619      	mov	r1, r3
 8007e92:	4853      	ldr	r0, [pc, #332]	; (8007fe0 <Tx_setup+0x1b0>)
 8007e94:	f000 fbcf 	bl	8008636 <sx126x_set_rx_tx_fallback_mode>
    sx126x_set_dio2_as_rf_sw_ctrl(&hspi, 1);                    //set dio2 as rf sw -> 1 is to activate it 0 would be to have it as regular irq
 8007e98:	2101      	movs	r1, #1
 8007e9a:	4851      	ldr	r0, [pc, #324]	; (8007fe0 <Tx_setup+0x1b0>)
 8007e9c:	f000 fdac 	bl	80089f8 <sx126x_set_dio2_as_rf_sw_ctrl>
    sx126x_set_dio3_as_tcxo_ctrl(&hspi, tcxo_voltage_ctrl, 100);//set dio3 as tcxo ctrl, 100 is for the delay in ms
 8007ea0:	4b53      	ldr	r3, [pc, #332]	; (8007ff0 <Tx_setup+0x1c0>)
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	2264      	movs	r2, #100	; 0x64
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	484d      	ldr	r0, [pc, #308]	; (8007fe0 <Tx_setup+0x1b0>)
 8007eaa:	f000 fdbf 	bl	8008a2c <sx126x_set_dio3_as_tcxo_ctrl>

    //calibrate functions
    sx126x_cal(&hspi, cal_mask);                                //calibrate radio, mask chooses what to calibrate
 8007eae:	4b51      	ldr	r3, [pc, #324]	; (8007ff4 <Tx_setup+0x1c4>)
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	484a      	ldr	r0, [pc, #296]	; (8007fe0 <Tx_setup+0x1b0>)
 8007eb6:	f000 fb5b 	bl	8008570 <sx126x_cal>
    HAL_Delay(50);
 8007eba:	2032      	movs	r0, #50	; 0x32
 8007ebc:	f000 fffa 	bl	8008eb4 <HAL_Delay>
    sx126x_set_reg_mode(&hspi, regulator_mode);                 //ldo or dc-dc
 8007ec0:	4b4d      	ldr	r3, [pc, #308]	; (8007ff8 <Tx_setup+0x1c8>)
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	4846      	ldr	r0, [pc, #280]	; (8007fe0 <Tx_setup+0x1b0>)
 8007ec8:	f000 fb38 	bl	800853c <sx126x_set_reg_mode>
    sx126x_cal_img_hex(&hspi, cal_low_freq, cal_hi_freq);       //image calibration frequencies
 8007ecc:	4b4b      	ldr	r3, [pc, #300]	; (8007ffc <Tx_setup+0x1cc>)
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	4a4b      	ldr	r2, [pc, #300]	; (8008000 <Tx_setup+0x1d0>)
 8007ed2:	7812      	ldrb	r2, [r2, #0]
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	4842      	ldr	r0, [pc, #264]	; (8007fe0 <Tx_setup+0x1b0>)
 8007ed8:	f000 fb64 	bl	80085a4 <sx126x_cal_img_hex>

    //set pa config
    struct sx126x_pa_cfg_params_s *params = malloc(sizeof(sx126x_pa_cfg_params_t));
 8007edc:	2004      	movs	r0, #4
 8007ede:	f00f f945 	bl	801716c <malloc>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	60fb      	str	r3, [r7, #12]
    params->pa_duty_cycle=pa_duty_cyc;
 8007ee6:	4b47      	ldr	r3, [pc, #284]	; (8008004 <Tx_setup+0x1d4>)
 8007ee8:	781a      	ldrb	r2, [r3, #0]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	701a      	strb	r2, [r3, #0]
    params->hp_max=pa_hp_max;
 8007eee:	4b46      	ldr	r3, [pc, #280]	; (8008008 <Tx_setup+0x1d8>)
 8007ef0:	781a      	ldrb	r2, [r3, #0]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	705a      	strb	r2, [r3, #1]
    params->device_sel=pa_device_sel;
 8007ef6:	4b45      	ldr	r3, [pc, #276]	; (800800c <Tx_setup+0x1dc>)
 8007ef8:	781a      	ldrb	r2, [r3, #0]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	709a      	strb	r2, [r3, #2]
    params->pa_lut=pa_lut;
 8007efe:	4b44      	ldr	r3, [pc, #272]	; (8008010 <Tx_setup+0x1e0>)
 8007f00:	781a      	ldrb	r2, [r3, #0]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	70da      	strb	r2, [r3, #3]
    sx126x_set_pa_cfg(&hspi, params);
 8007f06:	68f9      	ldr	r1, [r7, #12]
 8007f08:	4835      	ldr	r0, [pc, #212]	; (8007fe0 <Tx_setup+0x1b0>)
 8007f0a:	f000 fb6f 	bl	80085ec <sx126x_set_pa_cfg>
    free(params);
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f00f f934 	bl	801717c <free>

    //set transmission parameters
    sx126x_set_tx_params(&hspi, tx_power, ramp_time);
 8007f14:	4b3f      	ldr	r3, [pc, #252]	; (8008014 <Tx_setup+0x1e4>)
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	b25b      	sxtb	r3, r3
 8007f1a:	4a3f      	ldr	r2, [pc, #252]	; (8008018 <Tx_setup+0x1e8>)
 8007f1c:	7812      	ldrb	r2, [r2, #0]
 8007f1e:	4619      	mov	r1, r3
 8007f20:	482f      	ldr	r0, [pc, #188]	; (8007fe0 <Tx_setup+0x1b0>)
 8007f22:	f000 fdff 	bl	8008b24 <sx126x_set_tx_params>
    sx126x_set_buffer_base_address(&hspi, tx_address_base, rx_address_base);
 8007f26:	4b3d      	ldr	r3, [pc, #244]	; (800801c <Tx_setup+0x1ec>)
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	4a3d      	ldr	r2, [pc, #244]	; (8008020 <Tx_setup+0x1f0>)
 8007f2c:	7812      	ldrb	r2, [r2, #0]
 8007f2e:	4619      	mov	r1, r3
 8007f30:	482b      	ldr	r0, [pc, #172]	; (8007fe0 <Tx_setup+0x1b0>)
 8007f32:	f000 feb5 	bl	8008ca0 <sx126x_set_buffer_base_address>

    //set modulation parameters
    struct sx126x_mod_params_lora_s *mod_params = malloc(sizeof(sx126x_mod_params_lora_t));
 8007f36:	2004      	movs	r0, #4
 8007f38:	f00f f918 	bl	801716c <malloc>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	60bb      	str	r3, [r7, #8]
    mod_params->sf=lora_sf;
 8007f40:	4b38      	ldr	r3, [pc, #224]	; (8008024 <Tx_setup+0x1f4>)
 8007f42:	781a      	ldrb	r2, [r3, #0]
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	701a      	strb	r2, [r3, #0]
    mod_params->bw=lora_bw;
 8007f48:	4b37      	ldr	r3, [pc, #220]	; (8008028 <Tx_setup+0x1f8>)
 8007f4a:	781a      	ldrb	r2, [r3, #0]
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	705a      	strb	r2, [r3, #1]
    mod_params->cr=lora_cr;
 8007f50:	4b36      	ldr	r3, [pc, #216]	; (800802c <Tx_setup+0x1fc>)
 8007f52:	781a      	ldrb	r2, [r3, #0]
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	709a      	strb	r2, [r3, #2]
    mod_params->ldro=lora_ldro;
 8007f58:	4b35      	ldr	r3, [pc, #212]	; (8008030 <Tx_setup+0x200>)
 8007f5a:	781a      	ldrb	r2, [r3, #0]
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	70da      	strb	r2, [r3, #3]
    sx126x_set_lora_mod_params(&hspi, mod_params);
 8007f60:	68b9      	ldr	r1, [r7, #8]
 8007f62:	481f      	ldr	r0, [pc, #124]	; (8007fe0 <Tx_setup+0x1b0>)
 8007f64:	f000 fe02 	bl	8008b6c <sx126x_set_lora_mod_params>
    free(mod_params);
 8007f68:	68b8      	ldr	r0, [r7, #8]
 8007f6a:	f00f f907 	bl	801717c <free>

    //set lora packet params
    struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 8007f6e:	2006      	movs	r0, #6
 8007f70:	f00f f8fc 	bl	801716c <malloc>
 8007f74:	4603      	mov	r3, r0
 8007f76:	607b      	str	r3, [r7, #4]
    lora_params->preamble_len_in_symb=pkt_preamble_len;
 8007f78:	4b2e      	ldr	r3, [pc, #184]	; (8008034 <Tx_setup+0x204>)
 8007f7a:	881a      	ldrh	r2, [r3, #0]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	801a      	strh	r2, [r3, #0]
    lora_params->header_type=header_type;
 8007f80:	4b2d      	ldr	r3, [pc, #180]	; (8008038 <Tx_setup+0x208>)
 8007f82:	781a      	ldrb	r2, [r3, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	709a      	strb	r2, [r3, #2]
    lora_params->pld_len_in_bytes=payload_len;
 8007f88:	4b2c      	ldr	r3, [pc, #176]	; (800803c <Tx_setup+0x20c>)
 8007f8a:	781a      	ldrb	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	70da      	strb	r2, [r3, #3]
    lora_params->crc_is_on=crc_is_on;
 8007f90:	4b2b      	ldr	r3, [pc, #172]	; (8008040 <Tx_setup+0x210>)
 8007f92:	781a      	ldrb	r2, [r3, #0]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	711a      	strb	r2, [r3, #4]
    lora_params->invert_iq_is_on=invert_iq_is_on;
 8007f98:	4b2a      	ldr	r3, [pc, #168]	; (8008044 <Tx_setup+0x214>)
 8007f9a:	781a      	ldrb	r2, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	715a      	strb	r2, [r3, #5]
    sx126x_set_lora_pkt_params(&hspi, lora_params);
 8007fa0:	6879      	ldr	r1, [r7, #4]
 8007fa2:	480f      	ldr	r0, [pc, #60]	; (8007fe0 <Tx_setup+0x1b0>)
 8007fa4:	f000 fe0e 	bl	8008bc4 <sx126x_set_lora_pkt_params>
    free(lora_params);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f00f f8e7 	bl	801717c <free>

    //set dio and irq parameters
    sx126x_set_dio_irq_params(&hspi, irq_mask, dio1_mask, dio2_mask, dio3_mask);
 8007fae:	4b26      	ldr	r3, [pc, #152]	; (8008048 <Tx_setup+0x218>)
 8007fb0:	8819      	ldrh	r1, [r3, #0]
 8007fb2:	4b26      	ldr	r3, [pc, #152]	; (800804c <Tx_setup+0x21c>)
 8007fb4:	881a      	ldrh	r2, [r3, #0]
 8007fb6:	4b26      	ldr	r3, [pc, #152]	; (8008050 <Tx_setup+0x220>)
 8007fb8:	8818      	ldrh	r0, [r3, #0]
 8007fba:	4b26      	ldr	r3, [pc, #152]	; (8008054 <Tx_setup+0x224>)
 8007fbc:	881b      	ldrh	r3, [r3, #0]
 8007fbe:	9300      	str	r3, [sp, #0]
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	4807      	ldr	r0, [pc, #28]	; (8007fe0 <Tx_setup+0x1b0>)
 8007fc4:	f000 fc7c 	bl	80088c0 <sx126x_set_dio_irq_params>

}
 8007fc8:	bf00      	nop
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	2000074c 	.word	0x2000074c
 8007fd4:	20000748 	.word	0x20000748
 8007fd8:	20000744 	.word	0x20000744
 8007fdc:	20000740 	.word	0x20000740
 8007fe0:	20000760 	.word	0x20000760
 8007fe4:	200000b0 	.word	0x200000b0
 8007fe8:	200000b4 	.word	0x200000b4
 8007fec:	200000b5 	.word	0x200000b5
 8007ff0:	200000b6 	.word	0x200000b6
 8007ff4:	200000b8 	.word	0x200000b8
 8007ff8:	200000b7 	.word	0x200000b7
 8007ffc:	200000b9 	.word	0x200000b9
 8008000:	200000ba 	.word	0x200000ba
 8008004:	200000bb 	.word	0x200000bb
 8008008:	200000bc 	.word	0x200000bc
 800800c:	200007b8 	.word	0x200007b8
 8008010:	200000bd 	.word	0x200000bd
 8008014:	200000be 	.word	0x200000be
 8008018:	200000bf 	.word	0x200000bf
 800801c:	200007b9 	.word	0x200007b9
 8008020:	200007ba 	.word	0x200007ba
 8008024:	200000c0 	.word	0x200000c0
 8008028:	200000c1 	.word	0x200000c1
 800802c:	200000c2 	.word	0x200000c2
 8008030:	200007bb 	.word	0x200007bb
 8008034:	200000c4 	.word	0x200000c4
 8008038:	200007bc 	.word	0x200007bc
 800803c:	200000c6 	.word	0x200000c6
 8008040:	200000c7 	.word	0x200000c7
 8008044:	200007bd 	.word	0x200007bd
 8008048:	200000c8 	.word	0x200000c8
 800804c:	200000ca 	.word	0x200000ca
 8008050:	200007c0 	.word	0x200007c0
 8008054:	200007c2 	.word	0x200007c2

08008058 <TxProtocol>:

void TxProtocol(uint8_t data[], uint8_t data_length){
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	460b      	mov	r3, r1
 8008062:	70fb      	strb	r3, [r7, #3]

    HAL_StatusTypeDef command_status;
    command_status = sx126x_clear_irq_status(&hspi, dio1_mask);
 8008064:	4b18      	ldr	r3, [pc, #96]	; (80080c8 <TxProtocol+0x70>)
 8008066:	881b      	ldrh	r3, [r3, #0]
 8008068:	4619      	mov	r1, r3
 800806a:	4818      	ldr	r0, [pc, #96]	; (80080cc <TxProtocol+0x74>)
 800806c:	f000 fc9e 	bl	80089ac <sx126x_clear_irq_status>
 8008070:	4603      	mov	r3, r0
 8008072:	73fb      	strb	r3, [r7, #15]
    command_status = sx126x_write_buffer(&hspi, 0, data, data_length); // 0 is the offset
 8008074:	78fb      	ldrb	r3, [r7, #3]
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	2100      	movs	r1, #0
 800807a:	4814      	ldr	r0, [pc, #80]	; (80080cc <TxProtocol+0x74>)
 800807c:	f000 fb48 	bl	8008710 <sx126x_write_buffer>
 8008080:	4603      	mov	r3, r0
 8008082:	73fb      	strb	r3, [r7, #15]
    command_status = sx126x_set_tx(&hspi, 6000, data_length);
 8008084:	78fb      	ldrb	r3, [r7, #3]
 8008086:	461a      	mov	r2, r3
 8008088:	f241 7170 	movw	r1, #6000	; 0x1770
 800808c:	480f      	ldr	r0, [pc, #60]	; (80080cc <TxProtocol+0x74>)
 800808e:	f000 f995 	bl	80083bc <sx126x_set_tx>
 8008092:	4603      	mov	r3, r0
 8008094:	73fb      	strb	r3, [r7, #15]
    osDelay(100);
 8008096:	2064      	movs	r0, #100	; 0x64
 8008098:	f00a fbdc 	bl	8012854 <osDelay>

    sx126x_irq_mask_t irq;
    do {
        command_status = sx126x_get_irq_status(&hspi, &irq); //reading the irq into irq
 800809c:	f107 030c 	add.w	r3, r7, #12
 80080a0:	4619      	mov	r1, r3
 80080a2:	480a      	ldr	r0, [pc, #40]	; (80080cc <TxProtocol+0x74>)
 80080a4:	f000 fc50 	bl	8008948 <sx126x_get_irq_status>
 80080a8:	4603      	mov	r3, r0
 80080aa:	73fb      	strb	r3, [r7, #15]
    } while ( (!(irq & SX126X_IRQ_TX_DONE)) && (!(irq & SX126X_IRQ_TIMEOUT)) );
 80080ac:	89bb      	ldrh	r3, [r7, #12]
 80080ae:	f003 0301 	and.w	r3, r3, #1
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d104      	bne.n	80080c0 <TxProtocol+0x68>
 80080b6:	89bb      	ldrh	r3, [r7, #12]
 80080b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d0ed      	beq.n	800809c <TxProtocol+0x44>
}
 80080c0:	bf00      	nop
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	200000ca 	.word	0x200000ca
 80080cc:	20000760 	.word	0x20000760

080080d0 <Rx_setup>:

void Rx_setup(){
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af02      	add	r7, sp, #8
    //NEED TO ADD COMMAND ERROR HANDLING
    HAL_GPIO_WritePin(NRESET_GPIO, NRESET, GPIO_PIN_SET);
 80080d6:	4b5a      	ldr	r3, [pc, #360]	; (8008240 <Rx_setup+0x170>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a5a      	ldr	r2, [pc, #360]	; (8008244 <Rx_setup+0x174>)
 80080dc:	8811      	ldrh	r1, [r2, #0]
 80080de:	2201      	movs	r2, #1
 80080e0:	4618      	mov	r0, r3
 80080e2:	f001 fdf3 	bl	8009ccc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 80080e6:	4b58      	ldr	r3, [pc, #352]	; (8008248 <Rx_setup+0x178>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a58      	ldr	r2, [pc, #352]	; (800824c <Rx_setup+0x17c>)
 80080ec:	8811      	ldrh	r1, [r2, #0]
 80080ee:	2200      	movs	r2, #0
 80080f0:	4618      	mov	r0, r3
 80080f2:	f001 fdeb 	bl	8009ccc <HAL_GPIO_WritePin>
    HAL_Delay(50);
 80080f6:	2032      	movs	r0, #50	; 0x32
 80080f8:	f000 fedc 	bl	8008eb4 <HAL_Delay>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);             //make sure chip select is off
 80080fc:	4b52      	ldr	r3, [pc, #328]	; (8008248 <Rx_setup+0x178>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a52      	ldr	r2, [pc, #328]	; (800824c <Rx_setup+0x17c>)
 8008102:	8811      	ldrh	r1, [r2, #0]
 8008104:	2201      	movs	r2, #1
 8008106:	4618      	mov	r0, r3
 8008108:	f001 fde0 	bl	8009ccc <HAL_GPIO_WritePin>

    //set to standby for setup
    sx126x_set_standby(&hspi, 0);
 800810c:	2100      	movs	r1, #0
 800810e:	4850      	ldr	r0, [pc, #320]	; (8008250 <Rx_setup+0x180>)
 8008110:	f000 f93a 	bl	8008388 <sx126x_set_standby>

    //set general parameters
    sx126x_set_rf_freq(&hspi, frequency);                       //set rf frequency
 8008114:	4b4f      	ldr	r3, [pc, #316]	; (8008254 <Rx_setup+0x184>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4619      	mov	r1, r3
 800811a:	484d      	ldr	r0, [pc, #308]	; (8008250 <Rx_setup+0x180>)
 800811c:	f000 fcae 	bl	8008a7c <sx126x_set_rf_freq>
    sx126x_set_pkt_type(&hspi, packet_type);                    //set packet type
 8008120:	4b4d      	ldr	r3, [pc, #308]	; (8008258 <Rx_setup+0x188>)
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	4619      	mov	r1, r3
 8008126:	484a      	ldr	r0, [pc, #296]	; (8008250 <Rx_setup+0x180>)
 8008128:	f000 fce2 	bl	8008af0 <sx126x_set_pkt_type>
    sx126x_set_rx_tx_fallback_mode(&hspi, fallback_mode);       //set rx tx fallback mode
 800812c:	4b4b      	ldr	r3, [pc, #300]	; (800825c <Rx_setup+0x18c>)
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	4619      	mov	r1, r3
 8008132:	4847      	ldr	r0, [pc, #284]	; (8008250 <Rx_setup+0x180>)
 8008134:	f000 fa7f 	bl	8008636 <sx126x_set_rx_tx_fallback_mode>
    sx126x_set_dio2_as_rf_sw_ctrl(&hspi, 1);                    //set dio2 as rf sw -> 1 is to activate it 0 would be to have it as regular irq
 8008138:	2101      	movs	r1, #1
 800813a:	4845      	ldr	r0, [pc, #276]	; (8008250 <Rx_setup+0x180>)
 800813c:	f000 fc5c 	bl	80089f8 <sx126x_set_dio2_as_rf_sw_ctrl>
    sx126x_set_dio3_as_tcxo_ctrl(&hspi, tcxo_voltage_ctrl, 100);//set dio3 as tcxo ctrl, 100 is for the delay in ms
 8008140:	4b47      	ldr	r3, [pc, #284]	; (8008260 <Rx_setup+0x190>)
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	2264      	movs	r2, #100	; 0x64
 8008146:	4619      	mov	r1, r3
 8008148:	4841      	ldr	r0, [pc, #260]	; (8008250 <Rx_setup+0x180>)
 800814a:	f000 fc6f 	bl	8008a2c <sx126x_set_dio3_as_tcxo_ctrl>

    //calibrate functions
    sx126x_cal(&hspi, cal_mask);                                //calibrate radio, mask chooses what to calibrate
 800814e:	4b45      	ldr	r3, [pc, #276]	; (8008264 <Rx_setup+0x194>)
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	4619      	mov	r1, r3
 8008154:	483e      	ldr	r0, [pc, #248]	; (8008250 <Rx_setup+0x180>)
 8008156:	f000 fa0b 	bl	8008570 <sx126x_cal>
    HAL_Delay(50);
 800815a:	2032      	movs	r0, #50	; 0x32
 800815c:	f000 feaa 	bl	8008eb4 <HAL_Delay>
    sx126x_set_reg_mode(&hspi, regulator_mode);                 //ldo or dc-dc
 8008160:	4b41      	ldr	r3, [pc, #260]	; (8008268 <Rx_setup+0x198>)
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	4619      	mov	r1, r3
 8008166:	483a      	ldr	r0, [pc, #232]	; (8008250 <Rx_setup+0x180>)
 8008168:	f000 f9e8 	bl	800853c <sx126x_set_reg_mode>
    sx126x_cal_img_hex(&hspi, cal_low_freq, cal_hi_freq);       //image calibration frequencies
 800816c:	4b3f      	ldr	r3, [pc, #252]	; (800826c <Rx_setup+0x19c>)
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	4a3f      	ldr	r2, [pc, #252]	; (8008270 <Rx_setup+0x1a0>)
 8008172:	7812      	ldrb	r2, [r2, #0]
 8008174:	4619      	mov	r1, r3
 8008176:	4836      	ldr	r0, [pc, #216]	; (8008250 <Rx_setup+0x180>)
 8008178:	f000 fa14 	bl	80085a4 <sx126x_cal_img_hex>

    sx126x_set_buffer_base_address(&hspi, tx_address_base, rx_address_base);
 800817c:	4b3d      	ldr	r3, [pc, #244]	; (8008274 <Rx_setup+0x1a4>)
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	4a3d      	ldr	r2, [pc, #244]	; (8008278 <Rx_setup+0x1a8>)
 8008182:	7812      	ldrb	r2, [r2, #0]
 8008184:	4619      	mov	r1, r3
 8008186:	4832      	ldr	r0, [pc, #200]	; (8008250 <Rx_setup+0x180>)
 8008188:	f000 fd8a 	bl	8008ca0 <sx126x_set_buffer_base_address>

    //set modulation parameters
    struct sx126x_mod_params_lora_s *mod_params = malloc(sizeof(sx126x_mod_params_lora_t));
 800818c:	2004      	movs	r0, #4
 800818e:	f00e ffed 	bl	801716c <malloc>
 8008192:	4603      	mov	r3, r0
 8008194:	607b      	str	r3, [r7, #4]
    mod_params->sf=lora_sf;
 8008196:	4b39      	ldr	r3, [pc, #228]	; (800827c <Rx_setup+0x1ac>)
 8008198:	781a      	ldrb	r2, [r3, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	701a      	strb	r2, [r3, #0]
    mod_params->bw=lora_bw;
 800819e:	4b38      	ldr	r3, [pc, #224]	; (8008280 <Rx_setup+0x1b0>)
 80081a0:	781a      	ldrb	r2, [r3, #0]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	705a      	strb	r2, [r3, #1]
    mod_params->cr=lora_cr;
 80081a6:	4b37      	ldr	r3, [pc, #220]	; (8008284 <Rx_setup+0x1b4>)
 80081a8:	781a      	ldrb	r2, [r3, #0]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	709a      	strb	r2, [r3, #2]
    mod_params->ldro=lora_ldro;
 80081ae:	4b36      	ldr	r3, [pc, #216]	; (8008288 <Rx_setup+0x1b8>)
 80081b0:	781a      	ldrb	r2, [r3, #0]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	70da      	strb	r2, [r3, #3]
    sx126x_set_lora_mod_params(&hspi, mod_params);
 80081b6:	6879      	ldr	r1, [r7, #4]
 80081b8:	4825      	ldr	r0, [pc, #148]	; (8008250 <Rx_setup+0x180>)
 80081ba:	f000 fcd7 	bl	8008b6c <sx126x_set_lora_mod_params>
    free(mod_params);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f00e ffdc 	bl	801717c <free>

    //set lora packet params
    struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 80081c4:	2006      	movs	r0, #6
 80081c6:	f00e ffd1 	bl	801716c <malloc>
 80081ca:	4603      	mov	r3, r0
 80081cc:	603b      	str	r3, [r7, #0]
    lora_params->preamble_len_in_symb=pkt_preamble_len;
 80081ce:	4b2f      	ldr	r3, [pc, #188]	; (800828c <Rx_setup+0x1bc>)
 80081d0:	881a      	ldrh	r2, [r3, #0]
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	801a      	strh	r2, [r3, #0]
    lora_params->header_type=header_type;
 80081d6:	4b2e      	ldr	r3, [pc, #184]	; (8008290 <Rx_setup+0x1c0>)
 80081d8:	781a      	ldrb	r2, [r3, #0]
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	709a      	strb	r2, [r3, #2]
    lora_params->pld_len_in_bytes=payload_len;
 80081de:	4b2d      	ldr	r3, [pc, #180]	; (8008294 <Rx_setup+0x1c4>)
 80081e0:	781a      	ldrb	r2, [r3, #0]
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	70da      	strb	r2, [r3, #3]
    lora_params->crc_is_on=crc_is_on;
 80081e6:	4b2c      	ldr	r3, [pc, #176]	; (8008298 <Rx_setup+0x1c8>)
 80081e8:	781a      	ldrb	r2, [r3, #0]
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	711a      	strb	r2, [r3, #4]
    lora_params->invert_iq_is_on=invert_iq_is_on;
 80081ee:	4b2b      	ldr	r3, [pc, #172]	; (800829c <Rx_setup+0x1cc>)
 80081f0:	781a      	ldrb	r2, [r3, #0]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	715a      	strb	r2, [r3, #5]
    sx126x_set_lora_pkt_params(&hspi, lora_params);
 80081f6:	6839      	ldr	r1, [r7, #0]
 80081f8:	4815      	ldr	r0, [pc, #84]	; (8008250 <Rx_setup+0x180>)
 80081fa:	f000 fce3 	bl	8008bc4 <sx126x_set_lora_pkt_params>
    free(lora_params);
 80081fe:	6838      	ldr	r0, [r7, #0]
 8008200:	f00e ffbc 	bl	801717c <free>

    //set dio and irq parameters
    sx126x_set_dio_irq_params(&hspi, irq_mask, dio1_mask, dio2_mask, dio3_mask);
 8008204:	4b26      	ldr	r3, [pc, #152]	; (80082a0 <Rx_setup+0x1d0>)
 8008206:	8819      	ldrh	r1, [r3, #0]
 8008208:	4b26      	ldr	r3, [pc, #152]	; (80082a4 <Rx_setup+0x1d4>)
 800820a:	881a      	ldrh	r2, [r3, #0]
 800820c:	4b26      	ldr	r3, [pc, #152]	; (80082a8 <Rx_setup+0x1d8>)
 800820e:	8818      	ldrh	r0, [r3, #0]
 8008210:	4b26      	ldr	r3, [pc, #152]	; (80082ac <Rx_setup+0x1dc>)
 8008212:	881b      	ldrh	r3, [r3, #0]
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	4603      	mov	r3, r0
 8008218:	480d      	ldr	r0, [pc, #52]	; (8008250 <Rx_setup+0x180>)
 800821a:	f000 fb51 	bl	80088c0 <sx126x_set_dio_irq_params>

    //timer for TIMEOUT params
    sx126x_stop_timer_on_preamble(&hspi, timer_is_stopped_at_header);
 800821e:	4b24      	ldr	r3, [pc, #144]	; (80082b0 <Rx_setup+0x1e0>)
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	4619      	mov	r1, r3
 8008224:	480a      	ldr	r0, [pc, #40]	; (8008250 <Rx_setup+0x180>)
 8008226:	f000 f96f 	bl	8008508 <sx126x_stop_timer_on_preamble>
    sx126x_set_lora_symb_nb_timeout(&hspi, nb_symbols_for_valid_rx);
 800822a:	4b22      	ldr	r3, [pc, #136]	; (80082b4 <Rx_setup+0x1e4>)
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	4619      	mov	r1, r3
 8008230:	4807      	ldr	r0, [pc, #28]	; (8008250 <Rx_setup+0x180>)
 8008232:	f000 fd59 	bl	8008ce8 <sx126x_set_lora_symb_nb_timeout>


}
 8008236:	bf00      	nop
 8008238:	3708      	adds	r7, #8
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	2000074c 	.word	0x2000074c
 8008244:	20000748 	.word	0x20000748
 8008248:	20000744 	.word	0x20000744
 800824c:	20000740 	.word	0x20000740
 8008250:	20000760 	.word	0x20000760
 8008254:	200000b0 	.word	0x200000b0
 8008258:	200000b4 	.word	0x200000b4
 800825c:	200000b5 	.word	0x200000b5
 8008260:	200000b6 	.word	0x200000b6
 8008264:	200000b8 	.word	0x200000b8
 8008268:	200000b7 	.word	0x200000b7
 800826c:	200000b9 	.word	0x200000b9
 8008270:	200000ba 	.word	0x200000ba
 8008274:	200007b9 	.word	0x200007b9
 8008278:	200007ba 	.word	0x200007ba
 800827c:	200000c0 	.word	0x200000c0
 8008280:	200000c1 	.word	0x200000c1
 8008284:	200000c2 	.word	0x200000c2
 8008288:	200007bb 	.word	0x200007bb
 800828c:	200000c4 	.word	0x200000c4
 8008290:	200007bc 	.word	0x200007bc
 8008294:	200000c6 	.word	0x200000c6
 8008298:	200000c7 	.word	0x200000c7
 800829c:	200007bd 	.word	0x200007bd
 80082a0:	200000c8 	.word	0x200000c8
 80082a4:	200000ca 	.word	0x200000ca
 80082a8:	200007c0 	.word	0x200007c0
 80082ac:	200007c2 	.word	0x200007c2
 80082b0:	200007be 	.word	0x200007be
 80082b4:	200007bf 	.word	0x200007bf

080082b8 <RxProtocol>:

void RxProtocol(uint8_t buffer_received[]){
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]

    HAL_StatusTypeDef command_status;
    command_status = sx126x_clear_irq_status(&hspi, dio1_mask);
 80082c0:	4b2f      	ldr	r3, [pc, #188]	; (8008380 <RxProtocol+0xc8>)
 80082c2:	881b      	ldrh	r3, [r3, #0]
 80082c4:	4619      	mov	r1, r3
 80082c6:	482f      	ldr	r0, [pc, #188]	; (8008384 <RxProtocol+0xcc>)
 80082c8:	f000 fb70 	bl	80089ac <sx126x_clear_irq_status>
 80082cc:	4603      	mov	r3, r0
 80082ce:	73fb      	strb	r3, [r7, #15]
    command_status = sx126x_set_rx(&hspi, 3000);
 80082d0:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80082d4:	482b      	ldr	r0, [pc, #172]	; (8008384 <RxProtocol+0xcc>)
 80082d6:	f000 f8dd 	bl	8008494 <sx126x_set_rx>
 80082da:	4603      	mov	r3, r0
 80082dc:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(1400);
 80082de:	f44f 60af 	mov.w	r0, #1400	; 0x578
 80082e2:	f000 fde7 	bl	8008eb4 <HAL_Delay>

    sx126x_irq_mask_t irq;
    command_status = sx126x_get_irq_status(&hspi, &irq); //reading the irq into irq
 80082e6:	f107 030c 	add.w	r3, r7, #12
 80082ea:	4619      	mov	r1, r3
 80082ec:	4825      	ldr	r0, [pc, #148]	; (8008384 <RxProtocol+0xcc>)
 80082ee:	f000 fb2b 	bl	8008948 <sx126x_get_irq_status>
 80082f2:	4603      	mov	r3, r0
 80082f4:	73fb      	strb	r3, [r7, #15]
    do {
        command_status = sx126x_get_irq_status(&hspi, &irq); //reading the irq into irq
 80082f6:	f107 030c 	add.w	r3, r7, #12
 80082fa:	4619      	mov	r1, r3
 80082fc:	4821      	ldr	r0, [pc, #132]	; (8008384 <RxProtocol+0xcc>)
 80082fe:	f000 fb23 	bl	8008948 <sx126x_get_irq_status>
 8008302:	4603      	mov	r3, r0
 8008304:	73fb      	strb	r3, [r7, #15]
    } while ( (!(irq & SX126X_IRQ_RX_DONE)) && (!(irq & SX126X_IRQ_TIMEOUT)) );
 8008306:	89bb      	ldrh	r3, [r7, #12]
 8008308:	f003 0302 	and.w	r3, r3, #2
 800830c:	2b00      	cmp	r3, #0
 800830e:	d104      	bne.n	800831a <RxProtocol+0x62>
 8008310:	89bb      	ldrh	r3, [r7, #12]
 8008312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008316:	2b00      	cmp	r3, #0
 8008318:	d0ed      	beq.n	80082f6 <RxProtocol+0x3e>

    if (irq & SX126X_IRQ_TIMEOUT) {
 800831a:	89bb      	ldrh	r3, [r7, #12]
 800831c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008320:	2b00      	cmp	r3, #0
 8008322:	d005      	beq.n	8008330 <RxProtocol+0x78>
        //transmitBuffer("RX TIMEOUT!");
        sx126x_clear_irq_status(&hspi, SX126X_IRQ_TIMEOUT);
 8008324:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008328:	4816      	ldr	r0, [pc, #88]	; (8008384 <RxProtocol+0xcc>)
 800832a:	f000 fb3f 	bl	80089ac <sx126x_clear_irq_status>
                //transmitBuffer("----- RECEIVED DATA -----");
                //transmitBuffer(buffer_received);
            }
        }
    }
}
 800832e:	e022      	b.n	8008376 <RxProtocol+0xbe>
        if (irq & SX126X_IRQ_HEADER_ERROR || irq & SX126X_IRQ_CRC_ERROR) {
 8008330:	89bb      	ldrh	r3, [r7, #12]
 8008332:	f003 0320 	and.w	r3, r3, #32
 8008336:	2b00      	cmp	r3, #0
 8008338:	d104      	bne.n	8008344 <RxProtocol+0x8c>
 800833a:	89bb      	ldrh	r3, [r7, #12]
 800833c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008340:	2b00      	cmp	r3, #0
 8008342:	d004      	beq.n	800834e <RxProtocol+0x96>
            sx126x_clear_irq_status(&hspi, SX126X_IRQ_HEADER_ERROR | SX126X_IRQ_CRC_ERROR);
 8008344:	2160      	movs	r1, #96	; 0x60
 8008346:	480f      	ldr	r0, [pc, #60]	; (8008384 <RxProtocol+0xcc>)
 8008348:	f000 fb30 	bl	80089ac <sx126x_clear_irq_status>
}
 800834c:	e013      	b.n	8008376 <RxProtocol+0xbe>
        } else if (irq & SX126X_IRQ_RX_DONE) {
 800834e:	89bb      	ldrh	r3, [r7, #12]
 8008350:	f003 0302 	and.w	r3, r3, #2
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00e      	beq.n	8008376 <RxProtocol+0xbe>
            command_status = sx126x_read_buffer(&hspi, buffer_received);
 8008358:	6879      	ldr	r1, [r7, #4]
 800835a:	480a      	ldr	r0, [pc, #40]	; (8008384 <RxProtocol+0xcc>)
 800835c:	f000 f9f8 	bl	8008750 <sx126x_read_buffer>
 8008360:	4603      	mov	r3, r0
 8008362:	73fb      	strb	r3, [r7, #15]
            if (command_status != SX126X_STATUS_OK) {
 8008364:	7bfb      	ldrb	r3, [r7, #15]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d105      	bne.n	8008376 <RxProtocol+0xbe>
                sx126x_get_irq_status(&hspi, &irq);
 800836a:	f107 030c 	add.w	r3, r7, #12
 800836e:	4619      	mov	r1, r3
 8008370:	4804      	ldr	r0, [pc, #16]	; (8008384 <RxProtocol+0xcc>)
 8008372:	f000 fae9 	bl	8008948 <sx126x_get_irq_status>
}
 8008376:	bf00      	nop
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	200000ca 	.word	0x200000ca
 8008384:	20000760 	.word	0x20000760

08008388 <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af02      	add	r7, sp, #8
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	460b      	mov	r3, r1
 8008392:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_STANDBY] = { 0 };
 8008394:	2300      	movs	r3, #0
 8008396:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_STANDBY;
 8008398:	2380      	movs	r3, #128	; 0x80
 800839a:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) cfg;
 800839c:	78fb      	ldrb	r3, [r7, #3]
 800839e:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 80083a0:	f107 010c 	add.w	r1, r7, #12
 80083a4:	2300      	movs	r3, #0
 80083a6:	9300      	str	r3, [sp, #0]
 80083a8:	2300      	movs	r3, #0
 80083aa:	2202      	movs	r2, #2
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f7ff fc3f 	bl	8007c30 <sx126x_hal_write>
 80083b2:	4603      	mov	r3, r0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3710      	adds	r7, #16
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <sx126x_set_tx>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_FS, 0, 0 );
}

sx126x_status_t sx126x_set_tx( const void* context, const uint32_t timeout_in_ms , uint8_t lora_data_length)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	4613      	mov	r3, r2
 80083c8:	71fb      	strb	r3, [r7, #7]
    if (packet_type == SX126X_PKT_TYPE_LORA) {
 80083ca:	4b1b      	ldr	r3, [pc, #108]	; (8008438 <sx126x_set_tx+0x7c>)
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d11e      	bne.n	8008410 <sx126x_set_tx+0x54>
        struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 80083d2:	2006      	movs	r0, #6
 80083d4:	f00e feca 	bl	801716c <malloc>
 80083d8:	4603      	mov	r3, r0
 80083da:	617b      	str	r3, [r7, #20]
        lora_params->preamble_len_in_symb=pkt_preamble_len;
 80083dc:	4b17      	ldr	r3, [pc, #92]	; (800843c <sx126x_set_tx+0x80>)
 80083de:	881a      	ldrh	r2, [r3, #0]
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	801a      	strh	r2, [r3, #0]
        lora_params->header_type=header_type;
 80083e4:	4b16      	ldr	r3, [pc, #88]	; (8008440 <sx126x_set_tx+0x84>)
 80083e6:	781a      	ldrb	r2, [r3, #0]
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	709a      	strb	r2, [r3, #2]
        lora_params->pld_len_in_bytes=lora_data_length;
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	79fa      	ldrb	r2, [r7, #7]
 80083f0:	70da      	strb	r2, [r3, #3]
        lora_params->crc_is_on=crc_is_on;
 80083f2:	4b14      	ldr	r3, [pc, #80]	; (8008444 <sx126x_set_tx+0x88>)
 80083f4:	781a      	ldrb	r2, [r3, #0]
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	711a      	strb	r2, [r3, #4]
        lora_params->invert_iq_is_on=invert_iq_is_on;
 80083fa:	4b13      	ldr	r3, [pc, #76]	; (8008448 <sx126x_set_tx+0x8c>)
 80083fc:	781a      	ldrb	r2, [r3, #0]
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	715a      	strb	r2, [r3, #5]
        sx126x_set_lora_pkt_params(&hspi, lora_params);
 8008402:	6979      	ldr	r1, [r7, #20]
 8008404:	4811      	ldr	r0, [pc, #68]	; (800844c <sx126x_set_tx+0x90>)
 8008406:	f000 fbdd 	bl	8008bc4 <sx126x_set_lora_pkt_params>
        free(lora_params);
 800840a:	6978      	ldr	r0, [r7, #20]
 800840c:	f00e feb6 	bl	801717c <free>
    }

    if( timeout_in_ms > SX126X_MAX_TIMEOUT_IN_MS )
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008416:	d301      	bcc.n	800841c <sx126x_set_tx+0x60>
    {
        return SX126X_STATUS_UNKNOWN_VALUE;
 8008418:	2302      	movs	r3, #2
 800841a:	e008      	b.n	800842e <sx126x_set_tx+0x72>
    }

    const uint32_t timeout_in_rtc_step = sx126x_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 800841c:	68b8      	ldr	r0, [r7, #8]
 800841e:	f000 fcfb 	bl	8008e18 <sx126x_convert_timeout_in_ms_to_rtc_step>
 8008422:	6138      	str	r0, [r7, #16]

    return sx126x_set_tx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 8008424:	6939      	ldr	r1, [r7, #16]
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f000 f812 	bl	8008450 <sx126x_set_tx_with_timeout_in_rtc_step>
 800842c:	4603      	mov	r3, r0
}
 800842e:	4618      	mov	r0, r3
 8008430:	3718      	adds	r7, #24
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	200000b4 	.word	0x200000b4
 800843c:	200000c4 	.word	0x200000c4
 8008440:	200007bc 	.word	0x200007bc
 8008444:	200000c7 	.word	0x200000c7
 8008448:	200007bd 	.word	0x200007bd
 800844c:	20000760 	.word	0x20000760

08008450 <sx126x_set_tx_with_timeout_in_rtc_step>:

sx126x_status_t sx126x_set_tx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b086      	sub	sp, #24
 8008454:	af02      	add	r7, sp, #8
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_TX] = { 0 };
 800845a:	2300      	movs	r3, #0
 800845c:	60fb      	str	r3, [r7, #12]

    buf[0] = SX126X_SET_TX;
 800845e:	2383      	movs	r3, #131	; 0x83
 8008460:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t )( timeout_in_rtc_step >> 16 );
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	0c1b      	lsrs	r3, r3, #16
 8008466:	b2db      	uxtb	r3, r3
 8008468:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout_in_rtc_step >> 8 );
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	0a1b      	lsrs	r3, r3, #8
 800846e:	b2db      	uxtb	r3, r3
 8008470:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout_in_rtc_step >> 0 );
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	b2db      	uxtb	r3, r3
 8008476:	73fb      	strb	r3, [r7, #15]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX, 0, 0 );
 8008478:	f107 010c 	add.w	r1, r7, #12
 800847c:	2300      	movs	r3, #0
 800847e:	9300      	str	r3, [sp, #0]
 8008480:	2300      	movs	r3, #0
 8008482:	2204      	movs	r2, #4
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f7ff fbd3 	bl	8007c30 <sx126x_hal_write>
 800848a:	4603      	mov	r3, r0
}
 800848c:	4618      	mov	r0, r3
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <sx126x_set_rx>:

sx126x_status_t sx126x_set_rx( const void* context, const uint32_t timeout_in_ms )
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
    if( timeout_in_ms > SX126X_MAX_TIMEOUT_IN_MS )
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80084a4:	d301      	bcc.n	80084aa <sx126x_set_rx+0x16>
    {
        return SX126X_STATUS_UNKNOWN_VALUE;
 80084a6:	2302      	movs	r3, #2
 80084a8:	e008      	b.n	80084bc <sx126x_set_rx+0x28>
    }

    const uint32_t timeout_in_rtc_step = sx126x_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 80084aa:	6838      	ldr	r0, [r7, #0]
 80084ac:	f000 fcb4 	bl	8008e18 <sx126x_convert_timeout_in_ms_to_rtc_step>
 80084b0:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 80084b2:	68f9      	ldr	r1, [r7, #12]
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 f805 	bl	80084c4 <sx126x_set_rx_with_timeout_in_rtc_step>
 80084ba:	4603      	mov	r3, r0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <sx126x_set_rx_with_timeout_in_rtc_step>:

sx126x_status_t sx126x_set_rx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b086      	sub	sp, #24
 80084c8:	af02      	add	r7, sp, #8
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_RX] = { 0 };
 80084ce:	2300      	movs	r3, #0
 80084d0:	60fb      	str	r3, [r7, #12]

    buf[0] = SX126X_SET_RX;
 80084d2:	2382      	movs	r3, #130	; 0x82
 80084d4:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t )( timeout_in_rtc_step >> 16 );
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	0c1b      	lsrs	r3, r3, #16
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout_in_rtc_step >> 8 );
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	0a1b      	lsrs	r3, r3, #8
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout_in_rtc_step >> 0 );
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	73fb      	strb	r3, [r7, #15]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RX, 0, 0 );
 80084ec:	f107 010c 	add.w	r1, r7, #12
 80084f0:	2300      	movs	r3, #0
 80084f2:	9300      	str	r3, [sp, #0]
 80084f4:	2300      	movs	r3, #0
 80084f6:	2204      	movs	r2, #4
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f7ff fb99 	bl	8007c30 <sx126x_hal_write>
 80084fe:	4603      	mov	r3, r0
}
 8008500:	4618      	mov	r0, r3
 8008502:	3710      	adds	r7, #16
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <sx126x_stop_timer_on_preamble>:

sx126x_status_t sx126x_stop_timer_on_preamble( const void* context, const bool enable )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b086      	sub	sp, #24
 800850c:	af02      	add	r7, sp, #8
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	460b      	mov	r3, r1
 8008512:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_STOP_TIMER_ON_PREAMBLE] = { 0 };
 8008514:	2300      	movs	r3, #0
 8008516:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_STOP_TIMER_ON_PREAMBLE;
 8008518:	239f      	movs	r3, #159	; 0x9f
 800851a:	733b      	strb	r3, [r7, #12]

    buf[1] = ( enable == true ) ? 1 : 0;
 800851c:	78fb      	ldrb	r3, [r7, #3]
 800851e:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STOP_TIMER_ON_PREAMBLE, 0, 0 );
 8008520:	f107 010c 	add.w	r1, r7, #12
 8008524:	2300      	movs	r3, #0
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	2300      	movs	r3, #0
 800852a:	2202      	movs	r2, #2
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f7ff fb7f 	bl	8007c30 <sx126x_hal_write>
 8008532:	4603      	mov	r3, r0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b086      	sub	sp, #24
 8008540:	af02      	add	r7, sp, #8
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	460b      	mov	r3, r1
 8008546:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = { 0 };
 8008548:	2300      	movs	r3, #0
 800854a:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_REGULATOR_MODE;
 800854c:	2396      	movs	r3, #150	; 0x96
 800854e:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) mode;
 8008550:	78fb      	ldrb	r3, [r7, #3]
 8008552:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 8008554:	f107 010c 	add.w	r1, r7, #12
 8008558:	2300      	movs	r3, #0
 800855a:	9300      	str	r3, [sp, #0]
 800855c:	2300      	movs	r3, #0
 800855e:	2202      	movs	r2, #2
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f7ff fb65 	bl	8007c30 <sx126x_hal_write>
 8008566:	4603      	mov	r3, r0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <sx126x_cal>:

sx126x_status_t sx126x_cal( const void* context, const sx126x_cal_mask_t param )
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af02      	add	r7, sp, #8
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	460b      	mov	r3, r1
 800857a:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_CALIBRATE] = { 0 };
 800857c:	2300      	movs	r3, #0
 800857e:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_CALIBRATE;
 8008580:	2389      	movs	r3, #137	; 0x89
 8008582:	733b      	strb	r3, [r7, #12]

    buf[1] = param;
 8008584:	78fb      	ldrb	r3, [r7, #3]
 8008586:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE, 0, 0 );
 8008588:	f107 010c 	add.w	r1, r7, #12
 800858c:	2300      	movs	r3, #0
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	2300      	movs	r3, #0
 8008592:	2202      	movs	r2, #2
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f7ff fb4b 	bl	8007c30 <sx126x_hal_write>
 800859a:	4603      	mov	r3, r0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <sx126x_cal_img_hex>:

sx126x_status_t sx126x_cal_img_hex( const void* context, const uint8_t low_freq, const uint8_t high_freq)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af02      	add	r7, sp, #8
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	460b      	mov	r3, r1
 80085ae:	70fb      	strb	r3, [r7, #3]
 80085b0:	4613      	mov	r3, r2
 80085b2:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CALIBRATE_IMAGE] = { 0 };
 80085b4:	4b0c      	ldr	r3, [pc, #48]	; (80085e8 <sx126x_cal_img_hex+0x44>)
 80085b6:	881b      	ldrh	r3, [r3, #0]
 80085b8:	81bb      	strh	r3, [r7, #12]
 80085ba:	2300      	movs	r3, #0
 80085bc:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CALIBRATE_IMAGE;
 80085be:	2398      	movs	r3, #152	; 0x98
 80085c0:	733b      	strb	r3, [r7, #12]
    buf[1] = low_freq;
 80085c2:	78fb      	ldrb	r3, [r7, #3]
 80085c4:	737b      	strb	r3, [r7, #13]
    buf[2] = high_freq;
 80085c6:	78bb      	ldrb	r3, [r7, #2]
 80085c8:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
 80085ca:	f107 010c 	add.w	r1, r7, #12
 80085ce:	2300      	movs	r3, #0
 80085d0:	9300      	str	r3, [sp, #0]
 80085d2:	2300      	movs	r3, #0
 80085d4:	2203      	movs	r2, #3
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f7ff fb2a 	bl	8007c30 <sx126x_hal_write>
 80085dc:	4603      	mov	r3, r0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	0801d470 	.word	0x0801d470

080085ec <sx126x_set_pa_cfg>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
}

sx126x_status_t sx126x_set_pa_cfg( const void* context, const sx126x_pa_cfg_params_t* params )
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b086      	sub	sp, #24
 80085f0:	af02      	add	r7, sp, #8
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_PA_CFG] = { 0 };
 80085f6:	2300      	movs	r3, #0
 80085f8:	60bb      	str	r3, [r7, #8]
 80085fa:	2300      	movs	r3, #0
 80085fc:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_PA_CFG;
 80085fe:	2395      	movs	r3, #149	; 0x95
 8008600:	723b      	strb	r3, [r7, #8]
    buf[1] = params->pa_duty_cycle;
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	727b      	strb	r3, [r7, #9]
    buf[2] = params->hp_max;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	785b      	ldrb	r3, [r3, #1]
 800860c:	72bb      	strb	r3, [r7, #10]
    buf[3] = params->device_sel;
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	789b      	ldrb	r3, [r3, #2]
 8008612:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->pa_lut;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	78db      	ldrb	r3, [r3, #3]
 8008618:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
 800861a:	f107 0108 	add.w	r1, r7, #8
 800861e:	2300      	movs	r3, #0
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	2300      	movs	r3, #0
 8008624:	2205      	movs	r2, #5
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f7ff fb02 	bl	8007c30 <sx126x_hal_write>
 800862c:	4603      	mov	r3, r0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <sx126x_set_rx_tx_fallback_mode>:

sx126x_status_t sx126x_set_rx_tx_fallback_mode( const void* context, const sx126x_fallback_modes_t fallback_mode )
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b086      	sub	sp, #24
 800863a:	af02      	add	r7, sp, #8
 800863c:	6078      	str	r0, [r7, #4]
 800863e:	460b      	mov	r3, r1
 8008640:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_RX_TX_FALLBACK_MODE] = { 0 };
 8008642:	2300      	movs	r3, #0
 8008644:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_RX_TX_FALLBACK_MODE;
 8008646:	2393      	movs	r3, #147	; 0x93
 8008648:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) fallback_mode;
 800864a:	78fb      	ldrb	r3, [r7, #3]
 800864c:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RX_TX_FALLBACK_MODE, 0, 0 );
 800864e:	f107 010c 	add.w	r1, r7, #12
 8008652:	2300      	movs	r3, #0
 8008654:	9300      	str	r3, [sp, #0]
 8008656:	2300      	movs	r3, #0
 8008658:	2202      	movs	r2, #2
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f7ff fae8 	bl	8007c30 <sx126x_hal_write>
 8008660:	4603      	mov	r3, r0
}
 8008662:	4618      	mov	r0, r3
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
	...

0800866c <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b088      	sub	sp, #32
 8008670:	af02      	add	r7, sp, #8
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	607a      	str	r2, [r7, #4]
 8008676:	461a      	mov	r2, r3
 8008678:	460b      	mov	r3, r1
 800867a:	817b      	strh	r3, [r7, #10]
 800867c:	4613      	mov	r3, r2
 800867e:	727b      	strb	r3, [r7, #9]
    uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = { 0 };
 8008680:	4b0e      	ldr	r3, [pc, #56]	; (80086bc <sx126x_write_register+0x50>)
 8008682:	881b      	ldrh	r3, [r3, #0]
 8008684:	82bb      	strh	r3, [r7, #20]
 8008686:	2300      	movs	r3, #0
 8008688:	75bb      	strb	r3, [r7, #22]

    buf[0] = SX126X_WRITE_REGISTER;
 800868a:	230d      	movs	r3, #13
 800868c:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( address >> 8 );
 800868e:	897b      	ldrh	r3, [r7, #10]
 8008690:	0a1b      	lsrs	r3, r3, #8
 8008692:	b29b      	uxth	r3, r3
 8008694:	b2db      	uxtb	r3, r3
 8008696:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( address >> 0 );
 8008698:	897b      	ldrh	r3, [r7, #10]
 800869a:	b2db      	uxtb	r3, r3
 800869c:	75bb      	strb	r3, [r7, #22]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 800869e:	7a7b      	ldrb	r3, [r7, #9]
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	f107 0114 	add.w	r1, r7, #20
 80086a6:	9300      	str	r3, [sp, #0]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2203      	movs	r2, #3
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f7ff fabf 	bl	8007c30 <sx126x_hal_write>
 80086b2:	4603      	mov	r3, r0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3718      	adds	r7, #24
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	0801d470 	.word	0x0801d470

080086c0 <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b088      	sub	sp, #32
 80086c4:	af02      	add	r7, sp, #8
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	607a      	str	r2, [r7, #4]
 80086ca:	461a      	mov	r2, r3
 80086cc:	460b      	mov	r3, r1
 80086ce:	817b      	strh	r3, [r7, #10]
 80086d0:	4613      	mov	r3, r2
 80086d2:	727b      	strb	r3, [r7, #9]
    uint8_t         buf[SX126X_SIZE_READ_REGISTER] = { 0 };
 80086d4:	2300      	movs	r3, #0
 80086d6:	613b      	str	r3, [r7, #16]
    sx126x_status_t status                         = SX126X_STATUS_ERROR;
 80086d8:	2303      	movs	r3, #3
 80086da:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_READ_REGISTER;
 80086dc:	231d      	movs	r3, #29
 80086de:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( address >> 8 );
 80086e0:	897b      	ldrh	r3, [r7, #10]
 80086e2:	0a1b      	lsrs	r3, r3, #8
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( address >> 0 );
 80086ea:	897b      	ldrh	r3, [r7, #10]
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	74bb      	strb	r3, [r7, #18]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 80086f0:	f107 0110 	add.w	r1, r7, #16
 80086f4:	7a7b      	ldrb	r3, [r7, #9]
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2204      	movs	r2, #4
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f7ff fad9 	bl	8007cb4 <sx126x_hal_read>
 8008702:	4603      	mov	r3, r0
 8008704:	75fb      	strb	r3, [r7, #23]

    return status;
 8008706:	7dfb      	ldrb	r3, [r7, #23]
}
 8008708:	4618      	mov	r0, r3
 800870a:	3718      	adds	r7, #24
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <sx126x_write_buffer>:

sx126x_status_t sx126x_write_buffer( const void* context, const uint8_t buffer_offset, const uint8_t* buffer,
                                     const uint8_t size )
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b088      	sub	sp, #32
 8008714:	af02      	add	r7, sp, #8
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	607a      	str	r2, [r7, #4]
 800871a:	461a      	mov	r2, r3
 800871c:	460b      	mov	r3, r1
 800871e:	72fb      	strb	r3, [r7, #11]
 8008720:	4613      	mov	r3, r2
 8008722:	72bb      	strb	r3, [r7, #10]
    uint8_t buf[SX126X_SIZE_WRITE_BUFFER] = { 0 };
 8008724:	2300      	movs	r3, #0
 8008726:	82bb      	strh	r3, [r7, #20]

    buf[0] = SX126X_WRITE_BUFFER;
 8008728:	230e      	movs	r3, #14
 800872a:	753b      	strb	r3, [r7, #20]

    buf[1] = buffer_offset;
 800872c:	7afb      	ldrb	r3, [r7, #11]
 800872e:	757b      	strb	r3, [r7, #21]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_BUFFER, buffer, size );
 8008730:	7abb      	ldrb	r3, [r7, #10]
 8008732:	b29b      	uxth	r3, r3
 8008734:	f107 0114 	add.w	r1, r7, #20
 8008738:	9300      	str	r3, [sp, #0]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2202      	movs	r2, #2
 800873e:	68f8      	ldr	r0, [r7, #12]
 8008740:	f7ff fa76 	bl	8007c30 <sx126x_hal_write>
 8008744:	4603      	mov	r3, r0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3718      	adds	r7, #24
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
	...

08008750 <sx126x_read_buffer>:

sx126x_status_t sx126x_read_buffer( const void* context, uint8_t* buffer)
{
 8008750:	b5b0      	push	{r4, r5, r7, lr}
 8008752:	b08c      	sub	sp, #48	; 0x30
 8008754:	af02      	add	r7, sp, #8
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
 800875a:	466b      	mov	r3, sp
 800875c:	461d      	mov	r5, r3
    sx126x_status_t status                       = SX126X_STATUS_ERROR;
 800875e:	2303      	movs	r3, #3
 8008760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	sx126x_rx_buffer_status_t buffer_status;
    sx126x_get_rx_buffer_status(&hspi, &buffer_status);
 8008764:	f107 030c 	add.w	r3, r7, #12
 8008768:	4619      	mov	r1, r3
 800876a:	4854      	ldr	r0, [pc, #336]	; (80088bc <sx126x_read_buffer+0x16c>)
 800876c:	f000 fb02 	bl	8008d74 <sx126x_get_rx_buffer_status>
    uint8_t size = buffer_status.pld_len_in_bytes;
 8008770:	7b3b      	ldrb	r3, [r7, #12]
 8008772:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    uint8_t offset = buffer_status.buffer_start_pointer;
 8008776:	7b7b      	ldrb	r3, [r7, #13]
 8008778:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    uint8_t received_buf[size + 1];
 800877c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008780:	1c5c      	adds	r4, r3, #1
 8008782:	1e63      	subs	r3, r4, #1
 8008784:	61fb      	str	r3, [r7, #28]
 8008786:	4623      	mov	r3, r4
 8008788:	4618      	mov	r0, r3
 800878a:	f04f 0100 	mov.w	r1, #0
 800878e:	f04f 0200 	mov.w	r2, #0
 8008792:	f04f 0300 	mov.w	r3, #0
 8008796:	00cb      	lsls	r3, r1, #3
 8008798:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800879c:	00c2      	lsls	r2, r0, #3
 800879e:	4623      	mov	r3, r4
 80087a0:	4618      	mov	r0, r3
 80087a2:	f04f 0100 	mov.w	r1, #0
 80087a6:	f04f 0200 	mov.w	r2, #0
 80087aa:	f04f 0300 	mov.w	r3, #0
 80087ae:	00cb      	lsls	r3, r1, #3
 80087b0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80087b4:	00c2      	lsls	r2, r0, #3
 80087b6:	4623      	mov	r3, r4
 80087b8:	3307      	adds	r3, #7
 80087ba:	08db      	lsrs	r3, r3, #3
 80087bc:	00db      	lsls	r3, r3, #3
 80087be:	ebad 0d03 	sub.w	sp, sp, r3
 80087c2:	ab02      	add	r3, sp, #8
 80087c4:	3300      	adds	r3, #0
 80087c6:	61bb      	str	r3, [r7, #24]
    uint8_t cmd_buf[size + 1 + SX126X_OFFSET_READ_BUFFER];
 80087c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80087cc:	1cdc      	adds	r4, r3, #3
 80087ce:	1e63      	subs	r3, r4, #1
 80087d0:	617b      	str	r3, [r7, #20]
 80087d2:	4623      	mov	r3, r4
 80087d4:	4618      	mov	r0, r3
 80087d6:	f04f 0100 	mov.w	r1, #0
 80087da:	f04f 0200 	mov.w	r2, #0
 80087de:	f04f 0300 	mov.w	r3, #0
 80087e2:	00cb      	lsls	r3, r1, #3
 80087e4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80087e8:	00c2      	lsls	r2, r0, #3
 80087ea:	4623      	mov	r3, r4
 80087ec:	4618      	mov	r0, r3
 80087ee:	f04f 0100 	mov.w	r1, #0
 80087f2:	f04f 0200 	mov.w	r2, #0
 80087f6:	f04f 0300 	mov.w	r3, #0
 80087fa:	00cb      	lsls	r3, r1, #3
 80087fc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8008800:	00c2      	lsls	r2, r0, #3
 8008802:	4623      	mov	r3, r4
 8008804:	3307      	adds	r3, #7
 8008806:	08db      	lsrs	r3, r3, #3
 8008808:	00db      	lsls	r3, r3, #3
 800880a:	ebad 0d03 	sub.w	sp, sp, r3
 800880e:	ab02      	add	r3, sp, #8
 8008810:	3300      	adds	r3, #0
 8008812:	613b      	str	r3, [r7, #16]

    for (uint8_t i=2; i<size+1+SX126X_OFFSET_READ_BUFFER; i++){
 8008814:	2302      	movs	r3, #2
 8008816:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800881a:	e009      	b.n	8008830 <sx126x_read_buffer+0xe0>
        cmd_buf[i] = 0x00;
 800881c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008820:	693a      	ldr	r2, [r7, #16]
 8008822:	2100      	movs	r1, #0
 8008824:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i=2; i<size+1+SX126X_OFFSET_READ_BUFFER; i++){
 8008826:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800882a:	3301      	adds	r3, #1
 800882c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008830:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008834:	1c9a      	adds	r2, r3, #2
 8008836:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800883a:	429a      	cmp	r2, r3
 800883c:	daee      	bge.n	800881c <sx126x_read_buffer+0xcc>
    }

    cmd_buf[0] = SX126X_READ_BUFFER;
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	221e      	movs	r2, #30
 8008842:	701a      	strb	r2, [r3, #0]
    cmd_buf[1] = offset;
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800884a:	705a      	strb	r2, [r3, #1]

    status = ( sx126x_status_t ) sx126x_hal_read( context, cmd_buf, SX126X_OFFSET_READ_BUFFER + size, received_buf,  SX126X_OFFSET_READ_BUFFER);
 800884c:	6939      	ldr	r1, [r7, #16]
 800884e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008852:	b29b      	uxth	r3, r3
 8008854:	3302      	adds	r3, #2
 8008856:	b29a      	uxth	r2, r3
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	2002      	movs	r0, #2
 800885c:	9000      	str	r0, [sp, #0]
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7ff fa28 	bl	8007cb4 <sx126x_hal_read>
 8008864:	4603      	mov	r3, r0
 8008866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (status == SX126X_STATUS_OK) {
 800886a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800886e:	2b00      	cmp	r3, #0
 8008870:	d11c      	bne.n	80088ac <sx126x_read_buffer+0x15c>
        status = received_buf[0];
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        //CO U LD T R Y T O U SE SPRINTF
        for (uint8_t i=1; i<=size; i++){
 800887a:	2301      	movs	r3, #1
 800887c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008880:	e00e      	b.n	80088a0 <sx126x_read_buffer+0x150>
            buffer[i-1] = received_buf[i];
 8008882:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008886:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800888a:	3b01      	subs	r3, #1
 800888c:	6839      	ldr	r1, [r7, #0]
 800888e:	440b      	add	r3, r1
 8008890:	69b9      	ldr	r1, [r7, #24]
 8008892:	5c8a      	ldrb	r2, [r1, r2]
 8008894:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=1; i<=size; i++){
 8008896:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800889a:	3301      	adds	r3, #1
 800889c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80088a0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80088a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d9ea      	bls.n	8008882 <sx126x_read_buffer+0x132>
        }
    }
    //ADD FUCKING RETURN STATUS FROM RECEIVED_BUF[0]
    return status;
 80088ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088b0:	46ad      	mov	sp, r5
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3728      	adds	r7, #40	; 0x28
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bdb0      	pop	{r4, r5, r7, pc}
 80088ba:	bf00      	nop
 80088bc:	20000760 	.word	0x20000760

080088c0 <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b08a      	sub	sp, #40	; 0x28
 80088c4:	af02      	add	r7, sp, #8
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	4608      	mov	r0, r1
 80088ca:	4611      	mov	r1, r2
 80088cc:	461a      	mov	r2, r3
 80088ce:	4603      	mov	r3, r0
 80088d0:	817b      	strh	r3, [r7, #10]
 80088d2:	460b      	mov	r3, r1
 80088d4:	813b      	strh	r3, [r7, #8]
 80088d6:	4613      	mov	r3, r2
 80088d8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = { 0 };
 80088da:	2300      	movs	r3, #0
 80088dc:	617b      	str	r3, [r7, #20]
 80088de:	f107 0318 	add.w	r3, r7, #24
 80088e2:	2200      	movs	r2, #0
 80088e4:	601a      	str	r2, [r3, #0]
 80088e6:	711a      	strb	r2, [r3, #4]

    buf[0] = SX126X_SET_DIO_IRQ_PARAMS;
 80088e8:	2308      	movs	r3, #8
 80088ea:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 80088ec:	897b      	ldrh	r3, [r7, #10]
 80088ee:	0a1b      	lsrs	r3, r3, #8
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 80088f6:	897b      	ldrh	r3, [r7, #10]
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	75bb      	strb	r3, [r7, #22]

    buf[3] = ( uint8_t )( dio1_mask >> 8 );
 80088fc:	893b      	ldrh	r3, [r7, #8]
 80088fe:	0a1b      	lsrs	r3, r3, #8
 8008900:	b29b      	uxth	r3, r3
 8008902:	b2db      	uxtb	r3, r3
 8008904:	75fb      	strb	r3, [r7, #23]
    buf[4] = ( uint8_t )( dio1_mask >> 0 );
 8008906:	893b      	ldrh	r3, [r7, #8]
 8008908:	b2db      	uxtb	r3, r3
 800890a:	763b      	strb	r3, [r7, #24]

    buf[5] = ( uint8_t )( dio2_mask >> 8 );
 800890c:	88fb      	ldrh	r3, [r7, #6]
 800890e:	0a1b      	lsrs	r3, r3, #8
 8008910:	b29b      	uxth	r3, r3
 8008912:	b2db      	uxtb	r3, r3
 8008914:	767b      	strb	r3, [r7, #25]
    buf[6] = ( uint8_t )( dio2_mask >> 0 );
 8008916:	88fb      	ldrh	r3, [r7, #6]
 8008918:	b2db      	uxtb	r3, r3
 800891a:	76bb      	strb	r3, [r7, #26]

    buf[7] = ( uint8_t )( dio3_mask >> 8 );
 800891c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800891e:	0a1b      	lsrs	r3, r3, #8
 8008920:	b29b      	uxth	r3, r3
 8008922:	b2db      	uxtb	r3, r3
 8008924:	76fb      	strb	r3, [r7, #27]
    buf[8] = ( uint8_t )( dio3_mask >> 0 );
 8008926:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008928:	b2db      	uxtb	r3, r3
 800892a:	773b      	strb	r3, [r7, #28]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 800892c:	f107 0114 	add.w	r1, r7, #20
 8008930:	2300      	movs	r3, #0
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	2300      	movs	r3, #0
 8008936:	2209      	movs	r2, #9
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f7ff f979 	bl	8007c30 <sx126x_hal_write>
 800893e:	4603      	mov	r3, r0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3720      	adds	r7, #32
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <sx126x_get_irq_status>:

sx126x_status_t sx126x_get_irq_status( const void* context, sx126x_irq_mask_t* irq )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b088      	sub	sp, #32
 800894c:	af02      	add	r7, sp, #8
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
    uint8_t         buf[SX126X_SIZE_GET_IRQ_STATUS]             = { 0x00 }; //0x00 is no operational, its just so that theyre equal
 8008952:	2300      	movs	r3, #0
 8008954:	613b      	str	r3, [r7, #16]
    uint8_t         received_buf[sizeof( sx126x_irq_mask_t )+1] = { 0x00 };
 8008956:	4b14      	ldr	r3, [pc, #80]	; (80089a8 <sx126x_get_irq_status+0x60>)
 8008958:	881b      	ldrh	r3, [r3, #0]
 800895a:	81bb      	strh	r3, [r7, #12]
 800895c:	2300      	movs	r3, #0
 800895e:	73bb      	strb	r3, [r7, #14]
    sx126x_status_t status                                      = SX126X_STATUS_ERROR;
 8008960:	2303      	movs	r3, #3
 8008962:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_GET_IRQ_STATUS;
 8008964:	2312      	movs	r3, #18
 8008966:	743b      	strb	r3, [r7, #16]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_IRQ_STATUS, received_buf,
 8008968:	f107 030c 	add.w	r3, r7, #12
 800896c:	f107 0110 	add.w	r1, r7, #16
 8008970:	2201      	movs	r2, #1
 8008972:	9200      	str	r2, [sp, #0]
 8008974:	2204      	movs	r2, #4
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f7ff f99c 	bl	8007cb4 <sx126x_hal_read>
 800897c:	4603      	mov	r3, r0
 800897e:	75fb      	strb	r3, [r7, #23]
                                                  SX126X_OFFSET_GET_IRQ_STATUS );

    if( status == SX126X_STATUS_OK )
 8008980:	7dfb      	ldrb	r3, [r7, #23]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d10b      	bne.n	800899e <sx126x_get_irq_status+0x56>
    {
        *irq = ( ( sx126x_irq_mask_t ) received_buf[1] << 8 ) | ( ( sx126x_irq_mask_t ) received_buf[2] << 0 );
 8008986:	7b7b      	ldrb	r3, [r7, #13]
 8008988:	021b      	lsls	r3, r3, #8
 800898a:	b21a      	sxth	r2, r3
 800898c:	7bbb      	ldrb	r3, [r7, #14]
 800898e:	b21b      	sxth	r3, r3
 8008990:	4313      	orrs	r3, r2
 8008992:	b21b      	sxth	r3, r3
 8008994:	b29a      	uxth	r2, r3
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	801a      	strh	r2, [r3, #0]
        status = received_buf[0]; //its the status
 800899a:	7b3b      	ldrb	r3, [r7, #12]
 800899c:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 800899e:	7dfb      	ldrb	r3, [r7, #23]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3718      	adds	r7, #24
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}
 80089a8:	0801d470 	.word	0x0801d470

080089ac <sx126x_clear_irq_status>:

sx126x_status_t sx126x_clear_irq_status( const void* context, const sx126x_irq_mask_t irq_mask )
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b086      	sub	sp, #24
 80089b0:	af02      	add	r7, sp, #8
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	460b      	mov	r3, r1
 80089b6:	807b      	strh	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CLR_IRQ_STATUS] = { 0 };
 80089b8:	4b0e      	ldr	r3, [pc, #56]	; (80089f4 <sx126x_clear_irq_status+0x48>)
 80089ba:	881b      	ldrh	r3, [r3, #0]
 80089bc:	81bb      	strh	r3, [r7, #12]
 80089be:	2300      	movs	r3, #0
 80089c0:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CLR_IRQ_STATUS;
 80089c2:	2302      	movs	r3, #2
 80089c4:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 80089c6:	887b      	ldrh	r3, [r7, #2]
 80089c8:	0a1b      	lsrs	r3, r3, #8
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 80089d0:	887b      	ldrh	r3, [r7, #2]
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CLR_IRQ_STATUS, 0, 0 );
 80089d6:	f107 010c 	add.w	r1, r7, #12
 80089da:	2300      	movs	r3, #0
 80089dc:	9300      	str	r3, [sp, #0]
 80089de:	2300      	movs	r3, #0
 80089e0:	2203      	movs	r2, #3
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f7ff f924 	bl	8007c30 <sx126x_hal_write>
 80089e8:	4603      	mov	r3, r0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	0801d470 	.word	0x0801d470

080089f8 <sx126x_set_dio2_as_rf_sw_ctrl>:
    }
    return status;
}

sx126x_status_t sx126x_set_dio2_as_rf_sw_ctrl( const void* context, const bool enable )
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b086      	sub	sp, #24
 80089fc:	af02      	add	r7, sp, #8
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	460b      	mov	r3, r1
 8008a02:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL] = { 0 };
 8008a04:	2300      	movs	r3, #0
 8008a06:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_DIO2_AS_RF_SWITCH_CTRL;
 8008a08:	239d      	movs	r3, #157	; 0x9d
 8008a0a:	733b      	strb	r3, [r7, #12]

    buf[1] = ( enable == true ) ? 1 : 0;
 8008a0c:	78fb      	ldrb	r3, [r7, #3]
 8008a0e:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL, 0, 0 );
 8008a10:	f107 010c 	add.w	r1, r7, #12
 8008a14:	2300      	movs	r3, #0
 8008a16:	9300      	str	r3, [sp, #0]
 8008a18:	2300      	movs	r3, #0
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f7ff f907 	bl	8007c30 <sx126x_hal_write>
 8008a22:	4603      	mov	r3, r0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <sx126x_set_dio3_as_tcxo_ctrl>:

sx126x_status_t sx126x_set_dio3_as_tcxo_ctrl( const void* context, const sx126x_tcxo_ctrl_voltages_t tcxo_voltage,
                                              const uint32_t timeout )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b088      	sub	sp, #32
 8008a30:	af02      	add	r7, sp, #8
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	460b      	mov	r3, r1
 8008a36:	607a      	str	r2, [r7, #4]
 8008a38:	72fb      	strb	r3, [r7, #11]
    uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = { 0 };
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	613b      	str	r3, [r7, #16]
 8008a3e:	2300      	movs	r3, #0
 8008a40:	753b      	strb	r3, [r7, #20]

    buf[0] = SX126X_SET_DIO3_AS_TCXO_CTRL;
 8008a42:	2397      	movs	r3, #151	; 0x97
 8008a44:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t ) tcxo_voltage;
 8008a46:	7afb      	ldrb	r3, [r7, #11]
 8008a48:	747b      	strb	r3, [r7, #17]

    buf[2] = ( uint8_t )( timeout >> 16 );
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	0c1b      	lsrs	r3, r3, #16
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( timeout >> 8 );
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	0a1b      	lsrs	r3, r3, #8
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	74fb      	strb	r3, [r7, #19]
    buf[4] = ( uint8_t )( timeout >> 0 );
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	753b      	strb	r3, [r7, #20]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL, 0, 0 );
 8008a60:	f107 0110 	add.w	r1, r7, #16
 8008a64:	2300      	movs	r3, #0
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	2300      	movs	r3, #0
 8008a6a:	2205      	movs	r2, #5
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f7ff f8df 	bl	8007c30 <sx126x_hal_write>
 8008a72:	4603      	mov	r3, r0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3718      	adds	r7, #24
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 8008a86:	6838      	ldr	r0, [r7, #0]
 8008a88:	f000 f9a0 	bl	8008dcc <sx126x_convert_freq_in_hz_to_pll_step>
 8008a8c:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 8008a8e:	68f9      	ldr	r1, [r7, #12]
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 f805 	bl	8008aa0 <sx126x_set_rf_freq_in_pll_steps>
 8008a96:	4603      	mov	r3, r0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af02      	add	r7, sp, #8
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = { 0 };
 8008aaa:	2300      	movs	r3, #0
 8008aac:	60bb      	str	r3, [r7, #8]
 8008aae:	2300      	movs	r3, #0
 8008ab0:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_RF_FREQUENCY;
 8008ab2:	2386      	movs	r3, #134	; 0x86
 8008ab4:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( freq >> 24 );
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	0e1b      	lsrs	r3, r3, #24
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( freq >> 16 );
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	0c1b      	lsrs	r3, r3, #16
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( freq >> 8 );
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	0a1b      	lsrs	r3, r3, #8
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( freq >> 0 );
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 8008ad4:	f107 0108 	add.w	r1, r7, #8
 8008ad8:	2300      	movs	r3, #0
 8008ada:	9300      	str	r3, [sp, #0]
 8008adc:	2300      	movs	r3, #0
 8008ade:	2205      	movs	r2, #5
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f7ff f8a5 	bl	8007c30 <sx126x_hal_write>
 8008ae6:	4603      	mov	r3, r0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3710      	adds	r7, #16
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b086      	sub	sp, #24
 8008af4:	af02      	add	r7, sp, #8
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	460b      	mov	r3, r1
 8008afa:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = { 0 };
 8008afc:	2300      	movs	r3, #0
 8008afe:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_PKT_TYPE;
 8008b00:	238a      	movs	r3, #138	; 0x8a
 8008b02:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pkt_type;
 8008b04:	78fb      	ldrb	r3, [r7, #3]
 8008b06:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 8008b08:	f107 010c 	add.w	r1, r7, #12
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	9300      	str	r3, [sp, #0]
 8008b10:	2300      	movs	r3, #0
 8008b12:	2202      	movs	r2, #2
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f7ff f88b 	bl	8007c30 <sx126x_hal_write>
 8008b1a:	4603      	mov	r3, r0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3710      	adds	r7, #16
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <sx126x_set_tx_params>:

    return status;
}

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b086      	sub	sp, #24
 8008b28:	af02      	add	r7, sp, #8
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	70fb      	strb	r3, [r7, #3]
 8008b30:	4613      	mov	r3, r2
 8008b32:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = { 0 };
 8008b34:	4b0c      	ldr	r3, [pc, #48]	; (8008b68 <sx126x_set_tx_params+0x44>)
 8008b36:	881b      	ldrh	r3, [r3, #0]
 8008b38:	81bb      	strh	r3, [r7, #12]
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_TX_PARAMS;
 8008b3e:	238e      	movs	r3, #142	; 0x8e
 8008b40:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pwr_in_dbm;
 8008b42:	78fb      	ldrb	r3, [r7, #3]
 8008b44:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t ) ramp_time;
 8008b46:	78bb      	ldrb	r3, [r7, #2]
 8008b48:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 8008b4a:	f107 010c 	add.w	r1, r7, #12
 8008b4e:	2300      	movs	r3, #0
 8008b50:	9300      	str	r3, [sp, #0]
 8008b52:	2300      	movs	r3, #0
 8008b54:	2203      	movs	r2, #3
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f7ff f86a 	bl	8007c30 <sx126x_hal_write>
 8008b5c:	4603      	mov	r3, r0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	0801d470 	.word	0x0801d470

08008b6c <sx126x_set_lora_mod_params>:
    }
    return status;
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b086      	sub	sp, #24
 8008b70:	af02      	add	r7, sp, #8
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 8008b76:	2303      	movs	r3, #3
 8008b78:	73fb      	strb	r3, [r7, #15]

    uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = { 0 };
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	60bb      	str	r3, [r7, #8]
 8008b7e:	2300      	movs	r3, #0
 8008b80:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_MODULATION_PARAMS;
 8008b82:	238b      	movs	r3, #139	; 0x8b
 8008b84:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( params->sf );
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( params->bw );
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	785b      	ldrb	r3, [r3, #1]
 8008b90:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( params->cr );
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	789b      	ldrb	r3, [r3, #2]
 8008b96:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->ldro & 0x01;
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	78db      	ldrb	r3, [r3, #3]
 8008b9c:	f003 0301 	and.w	r3, r3, #1
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	733b      	strb	r3, [r7, #12]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 8008ba4:	f107 0108 	add.w	r1, r7, #8
 8008ba8:	2300      	movs	r3, #0
 8008baa:	9300      	str	r3, [sp, #0]
 8008bac:	2300      	movs	r3, #0
 8008bae:	2205      	movs	r2, #5
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f7ff f83d 	bl	8007c30 <sx126x_hal_write>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	73fb      	strb	r3, [r7, #15]
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
        // WORKAROUND END
    }
    */

    return status;
 8008bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3710      	adds	r7, #16
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <sx126x_set_lora_pkt_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_GFSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b088      	sub	sp, #32
 8008bc8:	af02      	add	r7, sp, #8
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 8008bce:	2303      	movs	r3, #3
 8008bd0:	75fb      	strb	r3, [r7, #23]

    uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = { 0 };
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	613b      	str	r3, [r7, #16]
 8008bd6:	f107 0314 	add.w	r3, r7, #20
 8008bda:	2100      	movs	r1, #0
 8008bdc:	460a      	mov	r2, r1
 8008bde:	801a      	strh	r2, [r3, #0]
 8008be0:	460a      	mov	r2, r1
 8008be2:	709a      	strb	r2, [r3, #2]

    buf[0] = SX126X_SET_PKT_PARAMS;
 8008be4:	238c      	movs	r3, #140	; 0x8c
 8008be6:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( params->preamble_len_in_symb >> 8 );
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	881b      	ldrh	r3, [r3, #0]
 8008bec:	0a1b      	lsrs	r3, r3, #8
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( params->preamble_len_in_symb >> 0 );
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	881b      	ldrh	r3, [r3, #0]
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( params->header_type );
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	789b      	ldrb	r3, [r3, #2]
 8008c00:	74fb      	strb	r3, [r7, #19]
    buf[4] = params->pld_len_in_bytes;
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	78db      	ldrb	r3, [r3, #3]
 8008c06:	753b      	strb	r3, [r7, #20]
    buf[5] = ( uint8_t )( params->crc_is_on ? 1 : 0 );
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	791b      	ldrb	r3, [r3, #4]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d001      	beq.n	8008c14 <sx126x_set_lora_pkt_params+0x50>
 8008c10:	2301      	movs	r3, #1
 8008c12:	e000      	b.n	8008c16 <sx126x_set_lora_pkt_params+0x52>
 8008c14:	2300      	movs	r3, #0
 8008c16:	757b      	strb	r3, [r7, #21]
    buf[6] = ( uint8_t )( params->invert_iq_is_on ? 1 : 0 );
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	795b      	ldrb	r3, [r3, #5]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d001      	beq.n	8008c24 <sx126x_set_lora_pkt_params+0x60>
 8008c20:	2301      	movs	r3, #1
 8008c22:	e000      	b.n	8008c26 <sx126x_set_lora_pkt_params+0x62>
 8008c24:	2300      	movs	r3, #0
 8008c26:	75bb      	strb	r3, [r7, #22]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 8008c28:	f107 0110 	add.w	r1, r7, #16
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	9300      	str	r3, [sp, #0]
 8008c30:	2300      	movs	r3, #0
 8008c32:	2207      	movs	r2, #7
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f7fe fffb 	bl	8007c30 <sx126x_hal_write>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	75fb      	strb	r3, [r7, #23]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 8008c3e:	7dfb      	ldrb	r3, [r7, #23]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d127      	bne.n	8008c94 <sx126x_set_lora_pkt_params+0xd0>
    {
        uint8_t reg_value = 0;
 8008c44:	2300      	movs	r3, #0
 8008c46:	73fb      	strb	r3, [r7, #15]

        status = sx126x_read_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 8008c48:	f107 020f 	add.w	r2, r7, #15
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	f240 7136 	movw	r1, #1846	; 0x736
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f7ff fd34 	bl	80086c0 <sx126x_read_register>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	75fb      	strb	r3, [r7, #23]
        if( status == SX126X_STATUS_OK )
 8008c5c:	7dfb      	ldrb	r3, [r7, #23]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d118      	bne.n	8008c94 <sx126x_set_lora_pkt_params+0xd0>
        {
            if( params->invert_iq_is_on == true )
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	795b      	ldrb	r3, [r3, #5]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d005      	beq.n	8008c76 <sx126x_set_lora_pkt_params+0xb2>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 8008c6a:	7bfb      	ldrb	r3, [r7, #15]
 8008c6c:	f023 0304 	bic.w	r3, r3, #4
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	73fb      	strb	r3, [r7, #15]
 8008c74:	e004      	b.n	8008c80 <sx126x_set_lora_pkt_params+0xbc>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 8008c76:	7bfb      	ldrb	r3, [r7, #15]
 8008c78:	f043 0304 	orr.w	r3, r3, #4
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	73fb      	strb	r3, [r7, #15]
            }
            status = sx126x_write_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 8008c80:	f107 020f 	add.w	r2, r7, #15
 8008c84:	2301      	movs	r3, #1
 8008c86:	f240 7136 	movw	r1, #1846	; 0x736
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f7ff fcee 	bl	800866c <sx126x_write_register>
 8008c90:	4603      	mov	r3, r0
 8008c92:	75fb      	strb	r3, [r7, #23]
        }
    }
    // WORKAROUND END

    return status;
 8008c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3718      	adds	r7, #24
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
	...

08008ca0 <sx126x_set_buffer_base_address>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_CAD_PARAMS, 0, 0 );
}

sx126x_status_t sx126x_set_buffer_base_address( const void* context, const uint8_t tx_base_address,
                                                const uint8_t rx_base_address )
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b086      	sub	sp, #24
 8008ca4:	af02      	add	r7, sp, #8
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	460b      	mov	r3, r1
 8008caa:	70fb      	strb	r3, [r7, #3]
 8008cac:	4613      	mov	r3, r2
 8008cae:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_BUFFER_BASE_ADDRESS] = { 0 };
 8008cb0:	4b0c      	ldr	r3, [pc, #48]	; (8008ce4 <sx126x_set_buffer_base_address+0x44>)
 8008cb2:	881b      	ldrh	r3, [r3, #0]
 8008cb4:	81bb      	strh	r3, [r7, #12]
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_BUFFER_BASE_ADDRESS;
 8008cba:	238f      	movs	r3, #143	; 0x8f
 8008cbc:	733b      	strb	r3, [r7, #12]

    buf[1] = tx_base_address;
 8008cbe:	78fb      	ldrb	r3, [r7, #3]
 8008cc0:	737b      	strb	r3, [r7, #13]
    buf[2] = rx_base_address;
 8008cc2:	78bb      	ldrb	r3, [r7, #2]
 8008cc4:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_BUFFER_BASE_ADDRESS, 0, 0 );
 8008cc6:	f107 010c 	add.w	r1, r7, #12
 8008cca:	2300      	movs	r3, #0
 8008ccc:	9300      	str	r3, [sp, #0]
 8008cce:	2300      	movs	r3, #0
 8008cd0:	2203      	movs	r2, #3
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f7fe ffac 	bl	8007c30 <sx126x_hal_write>
 8008cd8:	4603      	mov	r3, r0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	0801d470 	.word	0x0801d470

08008ce8 <sx126x_set_lora_symb_nb_timeout>:

sx126x_status_t sx126x_set_lora_symb_nb_timeout( const void* context, const uint8_t nb_of_symbs )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b088      	sub	sp, #32
 8008cec:	af02      	add	r7, sp, #8
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	70fb      	strb	r3, [r7, #3]
    uint8_t         buf[SX126X_SIZE_SET_LORA_SYMB_NUM_TIMEOUT] = { 0 };
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	823b      	strh	r3, [r7, #16]
    sx126x_status_t status                                     = SX126X_STATUS_ERROR;
 8008cf8:	2303      	movs	r3, #3
 8008cfa:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_SET_LORA_SYMB_NUM_TIMEOUT;
 8008cfc:	23a0      	movs	r3, #160	; 0xa0
 8008cfe:	743b      	strb	r3, [r7, #16]

    buf[1] = nb_of_symbs;
 8008d00:	78fb      	ldrb	r3, [r7, #3]
 8008d02:	747b      	strb	r3, [r7, #17]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_LORA_SYMB_NUM_TIMEOUT, 0, 0 );
 8008d04:	f107 0110 	add.w	r1, r7, #16
 8008d08:	2300      	movs	r3, #0
 8008d0a:	9300      	str	r3, [sp, #0]
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	2202      	movs	r2, #2
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7fe ff8d 	bl	8007c30 <sx126x_hal_write>
 8008d16:	4603      	mov	r3, r0
 8008d18:	75fb      	strb	r3, [r7, #23]

    if( ( status == SX126X_STATUS_OK ) && ( nb_of_symbs >= 64 ) )
 8008d1a:	7dfb      	ldrb	r3, [r7, #23]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d124      	bne.n	8008d6a <sx126x_set_lora_symb_nb_timeout+0x82>
 8008d20:	78fb      	ldrb	r3, [r7, #3]
 8008d22:	2b3f      	cmp	r3, #63	; 0x3f
 8008d24:	d921      	bls.n	8008d6a <sx126x_set_lora_symb_nb_timeout+0x82>
    {
        uint8_t mant = nb_of_symbs >> 1;
 8008d26:	78fb      	ldrb	r3, [r7, #3]
 8008d28:	085b      	lsrs	r3, r3, #1
 8008d2a:	75bb      	strb	r3, [r7, #22]
        uint8_t exp  = 0;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	757b      	strb	r3, [r7, #21]
        uint8_t reg  = 0;
 8008d30:	2300      	movs	r3, #0
 8008d32:	73fb      	strb	r3, [r7, #15]

        while( mant > 31 )
 8008d34:	e005      	b.n	8008d42 <sx126x_set_lora_symb_nb_timeout+0x5a>
        {
            mant >>= 2;
 8008d36:	7dbb      	ldrb	r3, [r7, #22]
 8008d38:	089b      	lsrs	r3, r3, #2
 8008d3a:	75bb      	strb	r3, [r7, #22]
            exp++;
 8008d3c:	7d7b      	ldrb	r3, [r7, #21]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	757b      	strb	r3, [r7, #21]
        while( mant > 31 )
 8008d42:	7dbb      	ldrb	r3, [r7, #22]
 8008d44:	2b1f      	cmp	r3, #31
 8008d46:	d8f6      	bhi.n	8008d36 <sx126x_set_lora_symb_nb_timeout+0x4e>
        }

        reg    = exp + ( mant << 3 );
 8008d48:	7dbb      	ldrb	r3, [r7, #22]
 8008d4a:	00db      	lsls	r3, r3, #3
 8008d4c:	b2da      	uxtb	r2, r3
 8008d4e:	7d7b      	ldrb	r3, [r7, #21]
 8008d50:	4413      	add	r3, r2
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	73fb      	strb	r3, [r7, #15]
        status = sx126x_write_register( context, SX126X_REG_LR_SYNCH_TIMEOUT, &reg, 1 );
 8008d56:	f107 020f 	add.w	r2, r7, #15
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	f240 7106 	movw	r1, #1798	; 0x706
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f7ff fc83 	bl	800866c <sx126x_write_register>
 8008d66:	4603      	mov	r3, r0
 8008d68:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 8008d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3718      	adds	r7, #24
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <sx126x_get_rx_buffer_status>:

    return status;
}

sx126x_status_t sx126x_get_rx_buffer_status( const void* context, sx126x_rx_buffer_status_t* rx_buffer_status )
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b088      	sub	sp, #32
 8008d78:	af02      	add	r7, sp, #8
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
    uint8_t         buf[SX126X_SIZE_GET_RX_BUFFER_STATUS]               = { 0x00 };
 8008d7e:	2300      	movs	r3, #0
 8008d80:	613b      	str	r3, [r7, #16]
    uint8_t         status_local[sizeof( sx126x_rx_buffer_status_t )+1] = { 0x00 };
 8008d82:	4b11      	ldr	r3, [pc, #68]	; (8008dc8 <sx126x_get_rx_buffer_status+0x54>)
 8008d84:	881b      	ldrh	r3, [r3, #0]
 8008d86:	81bb      	strh	r3, [r7, #12]
 8008d88:	2300      	movs	r3, #0
 8008d8a:	73bb      	strb	r3, [r7, #14]
    sx126x_status_t status                                              = SX126X_STATUS_ERROR;
 8008d8c:	2303      	movs	r3, #3
 8008d8e:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_GET_RX_BUFFER_STATUS;
 8008d90:	2313      	movs	r3, #19
 8008d92:	743b      	strb	r3, [r7, #16]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_RX_BUFFER_STATUS, status_local,
 8008d94:	f107 030c 	add.w	r3, r7, #12
 8008d98:	f107 0110 	add.w	r1, r7, #16
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	9200      	str	r2, [sp, #0]
 8008da0:	2204      	movs	r2, #4
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f7fe ff86 	bl	8007cb4 <sx126x_hal_read>
 8008da8:	4603      	mov	r3, r0
 8008daa:	75fb      	strb	r3, [r7, #23]
                                                  SX126X_OFFSET_GET_RX_BUFFER_STATUS );

    if( status == SX126X_STATUS_OK )
 8008dac:	7dfb      	ldrb	r3, [r7, #23]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d105      	bne.n	8008dbe <sx126x_get_rx_buffer_status+0x4a>
    {
        rx_buffer_status->pld_len_in_bytes     = status_local[1];
 8008db2:	7b7a      	ldrb	r2, [r7, #13]
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	701a      	strb	r2, [r3, #0]
        rx_buffer_status->buffer_start_pointer = status_local[2];
 8008db8:	7bba      	ldrb	r2, [r7, #14]
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	705a      	strb	r2, [r3, #1]
    }

    return (sx126x_status_t) status_local[0];
 8008dbe:	7b3b      	ldrb	r3, [r7, #12]
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3718      	adds	r7, #24
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	0801d470 	.word	0x0801d470

08008dcc <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b085      	sub	sp, #20
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4a0f      	ldr	r2, [pc, #60]	; (8008e14 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 8008dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8008ddc:	0b1b      	lsrs	r3, r3, #12
 8008dde:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f643 5209 	movw	r2, #15625	; 0x3d09
 8008de6:	fb02 f303 	mul.w	r3, r2, r3
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	1ad3      	subs	r3, r2, r3
 8008dee:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	039a      	lsls	r2, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	039b      	lsls	r3, r3, #14
 8008df8:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8008dfc:	3304      	adds	r3, #4
 8008dfe:	4905      	ldr	r1, [pc, #20]	; (8008e14 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 8008e00:	fba1 1303 	umull	r1, r3, r1, r3
 8008e04:	0b1b      	lsrs	r3, r3, #12
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 8008e06:	4413      	add	r3, r2
             SX126X_PLL_STEP_SCALED );
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3714      	adds	r7, #20
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr
 8008e14:	431bde83 	.word	0x431bde83

08008e18 <sx126x_convert_timeout_in_ms_to_rtc_step>:

uint32_t sx126x_convert_timeout_in_ms_to_rtc_step( uint32_t timeout_in_ms )
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( timeout_in_ms * ( SX126X_RTC_FREQ_IN_HZ / 1000 ) );
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	019b      	lsls	r3, r3, #6
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	370c      	adds	r7, #12
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008e34:	4b0e      	ldr	r3, [pc, #56]	; (8008e70 <HAL_Init+0x40>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a0d      	ldr	r2, [pc, #52]	; (8008e70 <HAL_Init+0x40>)
 8008e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008e40:	4b0b      	ldr	r3, [pc, #44]	; (8008e70 <HAL_Init+0x40>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a0a      	ldr	r2, [pc, #40]	; (8008e70 <HAL_Init+0x40>)
 8008e46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008e4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008e4c:	4b08      	ldr	r3, [pc, #32]	; (8008e70 <HAL_Init+0x40>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a07      	ldr	r2, [pc, #28]	; (8008e70 <HAL_Init+0x40>)
 8008e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008e58:	2003      	movs	r0, #3
 8008e5a:	f000 fd30 	bl	80098be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008e5e:	200f      	movs	r0, #15
 8008e60:	f7fa fb28 	bl	80034b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008e64:	f7fa fae8 	bl	8003438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	40023c00 	.word	0x40023c00

08008e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008e74:	b480      	push	{r7}
 8008e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008e78:	4b06      	ldr	r3, [pc, #24]	; (8008e94 <HAL_IncTick+0x20>)
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	4b06      	ldr	r3, [pc, #24]	; (8008e98 <HAL_IncTick+0x24>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4413      	add	r3, r2
 8008e84:	4a04      	ldr	r2, [pc, #16]	; (8008e98 <HAL_IncTick+0x24>)
 8008e86:	6013      	str	r3, [r2, #0]
}
 8008e88:	bf00      	nop
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	200000d0 	.word	0x200000d0
 8008e98:	2000cc04 	.word	0x2000cc04

08008e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8008ea0:	4b03      	ldr	r3, [pc, #12]	; (8008eb0 <HAL_GetTick+0x14>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	2000cc04 	.word	0x2000cc04

08008eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008ebc:	f7ff ffee 	bl	8008e9c <HAL_GetTick>
 8008ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ecc:	d005      	beq.n	8008eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008ece:	4b0a      	ldr	r3, [pc, #40]	; (8008ef8 <HAL_Delay+0x44>)
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	4413      	add	r3, r2
 8008ed8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008eda:	bf00      	nop
 8008edc:	f7ff ffde 	bl	8008e9c <HAL_GetTick>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	1ad3      	subs	r3, r2, r3
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d8f7      	bhi.n	8008edc <HAL_Delay+0x28>
  {
  }
}
 8008eec:	bf00      	nop
 8008eee:	bf00      	nop
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	200000d0 	.word	0x200000d0

08008efc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008f04:	2300      	movs	r3, #0
 8008f06:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d101      	bne.n	8008f12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e033      	b.n	8008f7a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d109      	bne.n	8008f2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7f8 fae8 	bl	80014f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f32:	f003 0310 	and.w	r3, r3, #16
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d118      	bne.n	8008f6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f3e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008f42:	f023 0302 	bic.w	r3, r3, #2
 8008f46:	f043 0202 	orr.w	r2, r3, #2
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 fae8 	bl	8009524 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5e:	f023 0303 	bic.w	r3, r3, #3
 8008f62:	f043 0201 	orr.w	r2, r3, #1
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	641a      	str	r2, [r3, #64]	; 0x40
 8008f6a:	e001      	b.n	8008f70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3710      	adds	r7, #16
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
	...

08008f84 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d101      	bne.n	8008f9e <HAL_ADC_Start+0x1a>
 8008f9a:	2302      	movs	r3, #2
 8008f9c:	e0b2      	b.n	8009104 <HAL_ADC_Start+0x180>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	f003 0301 	and.w	r3, r3, #1
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d018      	beq.n	8008fe6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	689a      	ldr	r2, [r3, #8]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f042 0201 	orr.w	r2, r2, #1
 8008fc2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008fc4:	4b52      	ldr	r3, [pc, #328]	; (8009110 <HAL_ADC_Start+0x18c>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a52      	ldr	r2, [pc, #328]	; (8009114 <HAL_ADC_Start+0x190>)
 8008fca:	fba2 2303 	umull	r2, r3, r2, r3
 8008fce:	0c9a      	lsrs	r2, r3, #18
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	005b      	lsls	r3, r3, #1
 8008fd4:	4413      	add	r3, r2
 8008fd6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8008fd8:	e002      	b.n	8008fe0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	3b01      	subs	r3, #1
 8008fde:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1f9      	bne.n	8008fda <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	f003 0301 	and.w	r3, r3, #1
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d17a      	bne.n	80090ea <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008ffc:	f023 0301 	bic.w	r3, r3, #1
 8009000:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009012:	2b00      	cmp	r3, #0
 8009014:	d007      	beq.n	8009026 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800901e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800902a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800902e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009032:	d106      	bne.n	8009042 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009038:	f023 0206 	bic.w	r2, r3, #6
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	645a      	str	r2, [r3, #68]	; 0x44
 8009040:	e002      	b.n	8009048 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009050:	4b31      	ldr	r3, [pc, #196]	; (8009118 <HAL_ADC_Start+0x194>)
 8009052:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800905c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	f003 031f 	and.w	r3, r3, #31
 8009066:	2b00      	cmp	r3, #0
 8009068:	d12a      	bne.n	80090c0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a2b      	ldr	r2, [pc, #172]	; (800911c <HAL_ADC_Start+0x198>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d015      	beq.n	80090a0 <HAL_ADC_Start+0x11c>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a29      	ldr	r2, [pc, #164]	; (8009120 <HAL_ADC_Start+0x19c>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d105      	bne.n	800908a <HAL_ADC_Start+0x106>
 800907e:	4b26      	ldr	r3, [pc, #152]	; (8009118 <HAL_ADC_Start+0x194>)
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	f003 031f 	and.w	r3, r3, #31
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00a      	beq.n	80090a0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a25      	ldr	r2, [pc, #148]	; (8009124 <HAL_ADC_Start+0x1a0>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d136      	bne.n	8009102 <HAL_ADC_Start+0x17e>
 8009094:	4b20      	ldr	r3, [pc, #128]	; (8009118 <HAL_ADC_Start+0x194>)
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	f003 0310 	and.w	r3, r3, #16
 800909c:	2b00      	cmp	r3, #0
 800909e:	d130      	bne.n	8009102 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d129      	bne.n	8009102 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	689a      	ldr	r2, [r3, #8]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80090bc:	609a      	str	r2, [r3, #8]
 80090be:	e020      	b.n	8009102 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a15      	ldr	r2, [pc, #84]	; (800911c <HAL_ADC_Start+0x198>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d11b      	bne.n	8009102 <HAL_ADC_Start+0x17e>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d114      	bne.n	8009102 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	689a      	ldr	r2, [r3, #8]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80090e6:	609a      	str	r2, [r3, #8]
 80090e8:	e00b      	b.n	8009102 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ee:	f043 0210 	orr.w	r2, r3, #16
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090fa:	f043 0201 	orr.w	r2, r3, #1
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr
 8009110:	20000088 	.word	0x20000088
 8009114:	431bde83 	.word	0x431bde83
 8009118:	40012300 	.word	0x40012300
 800911c:	40012000 	.word	0x40012000
 8009120:	40012100 	.word	0x40012100
 8009124:	40012200 	.word	0x40012200

08009128 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009136:	2b01      	cmp	r3, #1
 8009138:	d101      	bne.n	800913e <HAL_ADC_Stop+0x16>
 800913a:	2302      	movs	r3, #2
 800913c:	e021      	b.n	8009182 <HAL_ADC_Stop+0x5a>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2201      	movs	r2, #1
 8009142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	689a      	ldr	r2, [r3, #8]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f022 0201 	bic.w	r2, r2, #1
 8009154:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	f003 0301 	and.w	r3, r3, #1
 8009160:	2b00      	cmp	r3, #0
 8009162:	d109      	bne.n	8009178 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009168:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800916c:	f023 0301 	bic.w	r3, r3, #1
 8009170:	f043 0201 	orr.w	r2, r3, #1
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	370c      	adds	r7, #12
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr

0800918e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800918e:	b580      	push	{r7, lr}
 8009190:	b084      	sub	sp, #16
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
 8009196:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8009198:	2300      	movs	r3, #0
 800919a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091aa:	d113      	bne.n	80091d4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80091b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091ba:	d10b      	bne.n	80091d4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c0:	f043 0220 	orr.w	r2, r3, #32
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	e063      	b.n	800929c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80091d4:	f7ff fe62 	bl	8008e9c <HAL_GetTick>
 80091d8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80091da:	e021      	b.n	8009220 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e2:	d01d      	beq.n	8009220 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d007      	beq.n	80091fa <HAL_ADC_PollForConversion+0x6c>
 80091ea:	f7ff fe57 	bl	8008e9c <HAL_GetTick>
 80091ee:	4602      	mov	r2, r0
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	1ad3      	subs	r3, r2, r3
 80091f4:	683a      	ldr	r2, [r7, #0]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d212      	bcs.n	8009220 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 0302 	and.w	r3, r3, #2
 8009204:	2b02      	cmp	r3, #2
 8009206:	d00b      	beq.n	8009220 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800920c:	f043 0204 	orr.w	r2, r3, #4
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800921c:	2303      	movs	r3, #3
 800921e:	e03d      	b.n	800929c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 0302 	and.w	r3, r3, #2
 800922a:	2b02      	cmp	r3, #2
 800922c:	d1d6      	bne.n	80091dc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f06f 0212 	mvn.w	r2, #18
 8009236:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800923c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800924e:	2b00      	cmp	r3, #0
 8009250:	d123      	bne.n	800929a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009256:	2b00      	cmp	r3, #0
 8009258:	d11f      	bne.n	800929a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009260:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009264:	2b00      	cmp	r3, #0
 8009266:	d006      	beq.n	8009276 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8009272:	2b00      	cmp	r3, #0
 8009274:	d111      	bne.n	800929a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800927a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009286:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800928a:	2b00      	cmp	r3, #0
 800928c:	d105      	bne.n	800929a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009292:	f043 0201 	orr.w	r2, r3, #1
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800929a:	2300      	movs	r3, #0
}
 800929c:	4618      	mov	r0, r3
 800929e:	3710      	adds	r7, #16
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	370c      	adds	r7, #12
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
	...

080092c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b085      	sub	sp, #20
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80092ca:	2300      	movs	r3, #0
 80092cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d101      	bne.n	80092dc <HAL_ADC_ConfigChannel+0x1c>
 80092d8:	2302      	movs	r3, #2
 80092da:	e113      	b.n	8009504 <HAL_ADC_ConfigChannel+0x244>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2b09      	cmp	r3, #9
 80092ea:	d925      	bls.n	8009338 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	68d9      	ldr	r1, [r3, #12]
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	461a      	mov	r2, r3
 80092fa:	4613      	mov	r3, r2
 80092fc:	005b      	lsls	r3, r3, #1
 80092fe:	4413      	add	r3, r2
 8009300:	3b1e      	subs	r3, #30
 8009302:	2207      	movs	r2, #7
 8009304:	fa02 f303 	lsl.w	r3, r2, r3
 8009308:	43da      	mvns	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	400a      	ands	r2, r1
 8009310:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	68d9      	ldr	r1, [r3, #12]
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	689a      	ldr	r2, [r3, #8]
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	b29b      	uxth	r3, r3
 8009322:	4618      	mov	r0, r3
 8009324:	4603      	mov	r3, r0
 8009326:	005b      	lsls	r3, r3, #1
 8009328:	4403      	add	r3, r0
 800932a:	3b1e      	subs	r3, #30
 800932c:	409a      	lsls	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	430a      	orrs	r2, r1
 8009334:	60da      	str	r2, [r3, #12]
 8009336:	e022      	b.n	800937e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	6919      	ldr	r1, [r3, #16]
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	b29b      	uxth	r3, r3
 8009344:	461a      	mov	r2, r3
 8009346:	4613      	mov	r3, r2
 8009348:	005b      	lsls	r3, r3, #1
 800934a:	4413      	add	r3, r2
 800934c:	2207      	movs	r2, #7
 800934e:	fa02 f303 	lsl.w	r3, r2, r3
 8009352:	43da      	mvns	r2, r3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	400a      	ands	r2, r1
 800935a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	6919      	ldr	r1, [r3, #16]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	689a      	ldr	r2, [r3, #8]
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	b29b      	uxth	r3, r3
 800936c:	4618      	mov	r0, r3
 800936e:	4603      	mov	r3, r0
 8009370:	005b      	lsls	r3, r3, #1
 8009372:	4403      	add	r3, r0
 8009374:	409a      	lsls	r2, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	430a      	orrs	r2, r1
 800937c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	2b06      	cmp	r3, #6
 8009384:	d824      	bhi.n	80093d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	685a      	ldr	r2, [r3, #4]
 8009390:	4613      	mov	r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	4413      	add	r3, r2
 8009396:	3b05      	subs	r3, #5
 8009398:	221f      	movs	r2, #31
 800939a:	fa02 f303 	lsl.w	r3, r2, r3
 800939e:	43da      	mvns	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	400a      	ands	r2, r1
 80093a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	4618      	mov	r0, r3
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	685a      	ldr	r2, [r3, #4]
 80093ba:	4613      	mov	r3, r2
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	4413      	add	r3, r2
 80093c0:	3b05      	subs	r3, #5
 80093c2:	fa00 f203 	lsl.w	r2, r0, r3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	430a      	orrs	r2, r1
 80093cc:	635a      	str	r2, [r3, #52]	; 0x34
 80093ce:	e04c      	b.n	800946a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	2b0c      	cmp	r3, #12
 80093d6:	d824      	bhi.n	8009422 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	685a      	ldr	r2, [r3, #4]
 80093e2:	4613      	mov	r3, r2
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	4413      	add	r3, r2
 80093e8:	3b23      	subs	r3, #35	; 0x23
 80093ea:	221f      	movs	r2, #31
 80093ec:	fa02 f303 	lsl.w	r3, r2, r3
 80093f0:	43da      	mvns	r2, r3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	400a      	ands	r2, r1
 80093f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	b29b      	uxth	r3, r3
 8009406:	4618      	mov	r0, r3
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	685a      	ldr	r2, [r3, #4]
 800940c:	4613      	mov	r3, r2
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	4413      	add	r3, r2
 8009412:	3b23      	subs	r3, #35	; 0x23
 8009414:	fa00 f203 	lsl.w	r2, r0, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	430a      	orrs	r2, r1
 800941e:	631a      	str	r2, [r3, #48]	; 0x30
 8009420:	e023      	b.n	800946a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	685a      	ldr	r2, [r3, #4]
 800942c:	4613      	mov	r3, r2
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	4413      	add	r3, r2
 8009432:	3b41      	subs	r3, #65	; 0x41
 8009434:	221f      	movs	r2, #31
 8009436:	fa02 f303 	lsl.w	r3, r2, r3
 800943a:	43da      	mvns	r2, r3
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	400a      	ands	r2, r1
 8009442:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	b29b      	uxth	r3, r3
 8009450:	4618      	mov	r0, r3
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	685a      	ldr	r2, [r3, #4]
 8009456:	4613      	mov	r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	4413      	add	r3, r2
 800945c:	3b41      	subs	r3, #65	; 0x41
 800945e:	fa00 f203 	lsl.w	r2, r0, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	430a      	orrs	r2, r1
 8009468:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800946a:	4b29      	ldr	r3, [pc, #164]	; (8009510 <HAL_ADC_ConfigChannel+0x250>)
 800946c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a28      	ldr	r2, [pc, #160]	; (8009514 <HAL_ADC_ConfigChannel+0x254>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d10f      	bne.n	8009498 <HAL_ADC_ConfigChannel+0x1d8>
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2b12      	cmp	r3, #18
 800947e:	d10b      	bne.n	8009498 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a1d      	ldr	r2, [pc, #116]	; (8009514 <HAL_ADC_ConfigChannel+0x254>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d12b      	bne.n	80094fa <HAL_ADC_ConfigChannel+0x23a>
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a1c      	ldr	r2, [pc, #112]	; (8009518 <HAL_ADC_ConfigChannel+0x258>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d003      	beq.n	80094b4 <HAL_ADC_ConfigChannel+0x1f4>
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2b11      	cmp	r3, #17
 80094b2:	d122      	bne.n	80094fa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a11      	ldr	r2, [pc, #68]	; (8009518 <HAL_ADC_ConfigChannel+0x258>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d111      	bne.n	80094fa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80094d6:	4b11      	ldr	r3, [pc, #68]	; (800951c <HAL_ADC_ConfigChannel+0x25c>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a11      	ldr	r2, [pc, #68]	; (8009520 <HAL_ADC_ConfigChannel+0x260>)
 80094dc:	fba2 2303 	umull	r2, r3, r2, r3
 80094e0:	0c9a      	lsrs	r2, r3, #18
 80094e2:	4613      	mov	r3, r2
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	4413      	add	r3, r2
 80094e8:	005b      	lsls	r3, r3, #1
 80094ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80094ec:	e002      	b.n	80094f4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	3b01      	subs	r3, #1
 80094f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d1f9      	bne.n	80094ee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	3714      	adds	r7, #20
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr
 8009510:	40012300 	.word	0x40012300
 8009514:	40012000 	.word	0x40012000
 8009518:	10000012 	.word	0x10000012
 800951c:	20000088 	.word	0x20000088
 8009520:	431bde83 	.word	0x431bde83

08009524 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009524:	b480      	push	{r7}
 8009526:	b085      	sub	sp, #20
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800952c:	4b79      	ldr	r3, [pc, #484]	; (8009714 <ADC_Init+0x1f0>)
 800952e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	685a      	ldr	r2, [r3, #4]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	431a      	orrs	r2, r3
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	685a      	ldr	r2, [r3, #4]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009558:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	6859      	ldr	r1, [r3, #4]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	691b      	ldr	r3, [r3, #16]
 8009564:	021a      	lsls	r2, r3, #8
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	430a      	orrs	r2, r1
 800956c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	685a      	ldr	r2, [r3, #4]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800957c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	6859      	ldr	r1, [r3, #4]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	689a      	ldr	r2, [r3, #8]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	430a      	orrs	r2, r1
 800958e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	689a      	ldr	r2, [r3, #8]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800959e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	6899      	ldr	r1, [r3, #8]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	68da      	ldr	r2, [r3, #12]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	430a      	orrs	r2, r1
 80095b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b6:	4a58      	ldr	r2, [pc, #352]	; (8009718 <ADC_Init+0x1f4>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d022      	beq.n	8009602 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	689a      	ldr	r2, [r3, #8]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80095ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	6899      	ldr	r1, [r3, #8]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	430a      	orrs	r2, r1
 80095dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	689a      	ldr	r2, [r3, #8]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80095ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	6899      	ldr	r1, [r3, #8]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	430a      	orrs	r2, r1
 80095fe:	609a      	str	r2, [r3, #8]
 8009600:	e00f      	b.n	8009622 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	689a      	ldr	r2, [r3, #8]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009610:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	689a      	ldr	r2, [r3, #8]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009620:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	689a      	ldr	r2, [r3, #8]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f022 0202 	bic.w	r2, r2, #2
 8009630:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	6899      	ldr	r1, [r3, #8]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	7e1b      	ldrb	r3, [r3, #24]
 800963c:	005a      	lsls	r2, r3, #1
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	430a      	orrs	r2, r1
 8009644:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f893 3020 	ldrb.w	r3, [r3, #32]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d01b      	beq.n	8009688 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	685a      	ldr	r2, [r3, #4]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800965e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	685a      	ldr	r2, [r3, #4]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800966e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	6859      	ldr	r1, [r3, #4]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967a:	3b01      	subs	r3, #1
 800967c:	035a      	lsls	r2, r3, #13
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	430a      	orrs	r2, r1
 8009684:	605a      	str	r2, [r3, #4]
 8009686:	e007      	b.n	8009698 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	685a      	ldr	r2, [r3, #4]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009696:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80096a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	69db      	ldr	r3, [r3, #28]
 80096b2:	3b01      	subs	r3, #1
 80096b4:	051a      	lsls	r2, r3, #20
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	430a      	orrs	r2, r1
 80096bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	689a      	ldr	r2, [r3, #8]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80096cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	6899      	ldr	r1, [r3, #8]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80096da:	025a      	lsls	r2, r3, #9
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	430a      	orrs	r2, r1
 80096e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	689a      	ldr	r2, [r3, #8]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	6899      	ldr	r1, [r3, #8]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	695b      	ldr	r3, [r3, #20]
 80096fe:	029a      	lsls	r2, r3, #10
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	430a      	orrs	r2, r1
 8009706:	609a      	str	r2, [r3, #8]
}
 8009708:	bf00      	nop
 800970a:	3714      	adds	r7, #20
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr
 8009714:	40012300 	.word	0x40012300
 8009718:	0f000001 	.word	0x0f000001

0800971c <__NVIC_SetPriorityGrouping>:
{
 800971c:	b480      	push	{r7}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f003 0307 	and.w	r3, r3, #7
 800972a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800972c:	4b0c      	ldr	r3, [pc, #48]	; (8009760 <__NVIC_SetPriorityGrouping+0x44>)
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009732:	68ba      	ldr	r2, [r7, #8]
 8009734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009738:	4013      	ands	r3, r2
 800973a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009744:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800974c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800974e:	4a04      	ldr	r2, [pc, #16]	; (8009760 <__NVIC_SetPriorityGrouping+0x44>)
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	60d3      	str	r3, [r2, #12]
}
 8009754:	bf00      	nop
 8009756:	3714      	adds	r7, #20
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr
 8009760:	e000ed00 	.word	0xe000ed00

08009764 <__NVIC_GetPriorityGrouping>:
{
 8009764:	b480      	push	{r7}
 8009766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009768:	4b04      	ldr	r3, [pc, #16]	; (800977c <__NVIC_GetPriorityGrouping+0x18>)
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	0a1b      	lsrs	r3, r3, #8
 800976e:	f003 0307 	and.w	r3, r3, #7
}
 8009772:	4618      	mov	r0, r3
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr
 800977c:	e000ed00 	.word	0xe000ed00

08009780 <__NVIC_EnableIRQ>:
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	4603      	mov	r3, r0
 8009788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800978a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800978e:	2b00      	cmp	r3, #0
 8009790:	db0b      	blt.n	80097aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009792:	79fb      	ldrb	r3, [r7, #7]
 8009794:	f003 021f 	and.w	r2, r3, #31
 8009798:	4907      	ldr	r1, [pc, #28]	; (80097b8 <__NVIC_EnableIRQ+0x38>)
 800979a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800979e:	095b      	lsrs	r3, r3, #5
 80097a0:	2001      	movs	r0, #1
 80097a2:	fa00 f202 	lsl.w	r2, r0, r2
 80097a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80097aa:	bf00      	nop
 80097ac:	370c      	adds	r7, #12
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	e000e100 	.word	0xe000e100

080097bc <__NVIC_DisableIRQ>:
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	4603      	mov	r3, r0
 80097c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80097c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	db12      	blt.n	80097f4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80097ce:	79fb      	ldrb	r3, [r7, #7]
 80097d0:	f003 021f 	and.w	r2, r3, #31
 80097d4:	490a      	ldr	r1, [pc, #40]	; (8009800 <__NVIC_DisableIRQ+0x44>)
 80097d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097da:	095b      	lsrs	r3, r3, #5
 80097dc:	2001      	movs	r0, #1
 80097de:	fa00 f202 	lsl.w	r2, r0, r2
 80097e2:	3320      	adds	r3, #32
 80097e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80097e8:	f3bf 8f4f 	dsb	sy
}
 80097ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80097ee:	f3bf 8f6f 	isb	sy
}
 80097f2:	bf00      	nop
}
 80097f4:	bf00      	nop
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr
 8009800:	e000e100 	.word	0xe000e100

08009804 <__NVIC_SetPriority>:
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	4603      	mov	r3, r0
 800980c:	6039      	str	r1, [r7, #0]
 800980e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009814:	2b00      	cmp	r3, #0
 8009816:	db0a      	blt.n	800982e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	b2da      	uxtb	r2, r3
 800981c:	490c      	ldr	r1, [pc, #48]	; (8009850 <__NVIC_SetPriority+0x4c>)
 800981e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009822:	0112      	lsls	r2, r2, #4
 8009824:	b2d2      	uxtb	r2, r2
 8009826:	440b      	add	r3, r1
 8009828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800982c:	e00a      	b.n	8009844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	b2da      	uxtb	r2, r3
 8009832:	4908      	ldr	r1, [pc, #32]	; (8009854 <__NVIC_SetPriority+0x50>)
 8009834:	79fb      	ldrb	r3, [r7, #7]
 8009836:	f003 030f 	and.w	r3, r3, #15
 800983a:	3b04      	subs	r3, #4
 800983c:	0112      	lsls	r2, r2, #4
 800983e:	b2d2      	uxtb	r2, r2
 8009840:	440b      	add	r3, r1
 8009842:	761a      	strb	r2, [r3, #24]
}
 8009844:	bf00      	nop
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr
 8009850:	e000e100 	.word	0xe000e100
 8009854:	e000ed00 	.word	0xe000ed00

08009858 <NVIC_EncodePriority>:
{
 8009858:	b480      	push	{r7}
 800985a:	b089      	sub	sp, #36	; 0x24
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f003 0307 	and.w	r3, r3, #7
 800986a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800986c:	69fb      	ldr	r3, [r7, #28]
 800986e:	f1c3 0307 	rsb	r3, r3, #7
 8009872:	2b04      	cmp	r3, #4
 8009874:	bf28      	it	cs
 8009876:	2304      	movcs	r3, #4
 8009878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800987a:	69fb      	ldr	r3, [r7, #28]
 800987c:	3304      	adds	r3, #4
 800987e:	2b06      	cmp	r3, #6
 8009880:	d902      	bls.n	8009888 <NVIC_EncodePriority+0x30>
 8009882:	69fb      	ldr	r3, [r7, #28]
 8009884:	3b03      	subs	r3, #3
 8009886:	e000      	b.n	800988a <NVIC_EncodePriority+0x32>
 8009888:	2300      	movs	r3, #0
 800988a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800988c:	f04f 32ff 	mov.w	r2, #4294967295
 8009890:	69bb      	ldr	r3, [r7, #24]
 8009892:	fa02 f303 	lsl.w	r3, r2, r3
 8009896:	43da      	mvns	r2, r3
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	401a      	ands	r2, r3
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80098a0:	f04f 31ff 	mov.w	r1, #4294967295
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	fa01 f303 	lsl.w	r3, r1, r3
 80098aa:	43d9      	mvns	r1, r3
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80098b0:	4313      	orrs	r3, r2
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3724      	adds	r7, #36	; 0x24
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr

080098be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b082      	sub	sp, #8
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f7ff ff28 	bl	800971c <__NVIC_SetPriorityGrouping>
}
 80098cc:	bf00      	nop
 80098ce:	3708      	adds	r7, #8
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b086      	sub	sp, #24
 80098d8:	af00      	add	r7, sp, #0
 80098da:	4603      	mov	r3, r0
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
 80098e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80098e2:	2300      	movs	r3, #0
 80098e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80098e6:	f7ff ff3d 	bl	8009764 <__NVIC_GetPriorityGrouping>
 80098ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	68b9      	ldr	r1, [r7, #8]
 80098f0:	6978      	ldr	r0, [r7, #20]
 80098f2:	f7ff ffb1 	bl	8009858 <NVIC_EncodePriority>
 80098f6:	4602      	mov	r2, r0
 80098f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098fc:	4611      	mov	r1, r2
 80098fe:	4618      	mov	r0, r3
 8009900:	f7ff ff80 	bl	8009804 <__NVIC_SetPriority>
}
 8009904:	bf00      	nop
 8009906:	3718      	adds	r7, #24
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	4603      	mov	r3, r0
 8009914:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800991a:	4618      	mov	r0, r3
 800991c:	f7ff ff30 	bl	8009780 <__NVIC_EnableIRQ>
}
 8009920:	bf00      	nop
 8009922:	3708      	adds	r7, #8
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	4603      	mov	r3, r0
 8009930:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009936:	4618      	mov	r0, r3
 8009938:	f7ff ff40 	bl	80097bc <__NVIC_DisableIRQ>
}
 800993c:	bf00      	nop
 800993e:	3708      	adds	r7, #8
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009944:	b480      	push	{r7}
 8009946:	b089      	sub	sp, #36	; 0x24
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800994e:	2300      	movs	r3, #0
 8009950:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009952:	2300      	movs	r3, #0
 8009954:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009956:	2300      	movs	r3, #0
 8009958:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800995a:	2300      	movs	r3, #0
 800995c:	61fb      	str	r3, [r7, #28]
 800995e:	e177      	b.n	8009c50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009960:	2201      	movs	r2, #1
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	fa02 f303 	lsl.w	r3, r2, r3
 8009968:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	697a      	ldr	r2, [r7, #20]
 8009970:	4013      	ands	r3, r2
 8009972:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009974:	693a      	ldr	r2, [r7, #16]
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	429a      	cmp	r2, r3
 800997a:	f040 8166 	bne.w	8009c4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	f003 0303 	and.w	r3, r3, #3
 8009986:	2b01      	cmp	r3, #1
 8009988:	d005      	beq.n	8009996 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009992:	2b02      	cmp	r3, #2
 8009994:	d130      	bne.n	80099f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800999c:	69fb      	ldr	r3, [r7, #28]
 800999e:	005b      	lsls	r3, r3, #1
 80099a0:	2203      	movs	r2, #3
 80099a2:	fa02 f303 	lsl.w	r3, r2, r3
 80099a6:	43db      	mvns	r3, r3
 80099a8:	69ba      	ldr	r2, [r7, #24]
 80099aa:	4013      	ands	r3, r2
 80099ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	68da      	ldr	r2, [r3, #12]
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	005b      	lsls	r3, r3, #1
 80099b6:	fa02 f303 	lsl.w	r3, r2, r3
 80099ba:	69ba      	ldr	r2, [r7, #24]
 80099bc:	4313      	orrs	r3, r2
 80099be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	69ba      	ldr	r2, [r7, #24]
 80099c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80099cc:	2201      	movs	r2, #1
 80099ce:	69fb      	ldr	r3, [r7, #28]
 80099d0:	fa02 f303 	lsl.w	r3, r2, r3
 80099d4:	43db      	mvns	r3, r3
 80099d6:	69ba      	ldr	r2, [r7, #24]
 80099d8:	4013      	ands	r3, r2
 80099da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	091b      	lsrs	r3, r3, #4
 80099e2:	f003 0201 	and.w	r2, r3, #1
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	fa02 f303 	lsl.w	r3, r2, r3
 80099ec:	69ba      	ldr	r2, [r7, #24]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	69ba      	ldr	r2, [r7, #24]
 80099f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	f003 0303 	and.w	r3, r3, #3
 8009a00:	2b03      	cmp	r3, #3
 8009a02:	d017      	beq.n	8009a34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009a0a:	69fb      	ldr	r3, [r7, #28]
 8009a0c:	005b      	lsls	r3, r3, #1
 8009a0e:	2203      	movs	r2, #3
 8009a10:	fa02 f303 	lsl.w	r3, r2, r3
 8009a14:	43db      	mvns	r3, r3
 8009a16:	69ba      	ldr	r2, [r7, #24]
 8009a18:	4013      	ands	r3, r2
 8009a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	689a      	ldr	r2, [r3, #8]
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	005b      	lsls	r3, r3, #1
 8009a24:	fa02 f303 	lsl.w	r3, r2, r3
 8009a28:	69ba      	ldr	r2, [r7, #24]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	69ba      	ldr	r2, [r7, #24]
 8009a32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	f003 0303 	and.w	r3, r3, #3
 8009a3c:	2b02      	cmp	r3, #2
 8009a3e:	d123      	bne.n	8009a88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	08da      	lsrs	r2, r3, #3
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	3208      	adds	r2, #8
 8009a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009a4e:	69fb      	ldr	r3, [r7, #28]
 8009a50:	f003 0307 	and.w	r3, r3, #7
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	220f      	movs	r2, #15
 8009a58:	fa02 f303 	lsl.w	r3, r2, r3
 8009a5c:	43db      	mvns	r3, r3
 8009a5e:	69ba      	ldr	r2, [r7, #24]
 8009a60:	4013      	ands	r3, r2
 8009a62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	691a      	ldr	r2, [r3, #16]
 8009a68:	69fb      	ldr	r3, [r7, #28]
 8009a6a:	f003 0307 	and.w	r3, r3, #7
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	fa02 f303 	lsl.w	r3, r2, r3
 8009a74:	69ba      	ldr	r2, [r7, #24]
 8009a76:	4313      	orrs	r3, r2
 8009a78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	08da      	lsrs	r2, r3, #3
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	3208      	adds	r2, #8
 8009a82:	69b9      	ldr	r1, [r7, #24]
 8009a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009a8e:	69fb      	ldr	r3, [r7, #28]
 8009a90:	005b      	lsls	r3, r3, #1
 8009a92:	2203      	movs	r2, #3
 8009a94:	fa02 f303 	lsl.w	r3, r2, r3
 8009a98:	43db      	mvns	r3, r3
 8009a9a:	69ba      	ldr	r2, [r7, #24]
 8009a9c:	4013      	ands	r3, r2
 8009a9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	f003 0203 	and.w	r2, r3, #3
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	005b      	lsls	r3, r3, #1
 8009aac:	fa02 f303 	lsl.w	r3, r2, r3
 8009ab0:	69ba      	ldr	r2, [r7, #24]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	69ba      	ldr	r2, [r7, #24]
 8009aba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f000 80c0 	beq.w	8009c4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009aca:	2300      	movs	r3, #0
 8009acc:	60fb      	str	r3, [r7, #12]
 8009ace:	4b66      	ldr	r3, [pc, #408]	; (8009c68 <HAL_GPIO_Init+0x324>)
 8009ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ad2:	4a65      	ldr	r2, [pc, #404]	; (8009c68 <HAL_GPIO_Init+0x324>)
 8009ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8009ada:	4b63      	ldr	r3, [pc, #396]	; (8009c68 <HAL_GPIO_Init+0x324>)
 8009adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ae2:	60fb      	str	r3, [r7, #12]
 8009ae4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009ae6:	4a61      	ldr	r2, [pc, #388]	; (8009c6c <HAL_GPIO_Init+0x328>)
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	089b      	lsrs	r3, r3, #2
 8009aec:	3302      	adds	r3, #2
 8009aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	f003 0303 	and.w	r3, r3, #3
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	220f      	movs	r2, #15
 8009afe:	fa02 f303 	lsl.w	r3, r2, r3
 8009b02:	43db      	mvns	r3, r3
 8009b04:	69ba      	ldr	r2, [r7, #24]
 8009b06:	4013      	ands	r3, r2
 8009b08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4a58      	ldr	r2, [pc, #352]	; (8009c70 <HAL_GPIO_Init+0x32c>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d037      	beq.n	8009b82 <HAL_GPIO_Init+0x23e>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4a57      	ldr	r2, [pc, #348]	; (8009c74 <HAL_GPIO_Init+0x330>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d031      	beq.n	8009b7e <HAL_GPIO_Init+0x23a>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4a56      	ldr	r2, [pc, #344]	; (8009c78 <HAL_GPIO_Init+0x334>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d02b      	beq.n	8009b7a <HAL_GPIO_Init+0x236>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4a55      	ldr	r2, [pc, #340]	; (8009c7c <HAL_GPIO_Init+0x338>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d025      	beq.n	8009b76 <HAL_GPIO_Init+0x232>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	4a54      	ldr	r2, [pc, #336]	; (8009c80 <HAL_GPIO_Init+0x33c>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d01f      	beq.n	8009b72 <HAL_GPIO_Init+0x22e>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	4a53      	ldr	r2, [pc, #332]	; (8009c84 <HAL_GPIO_Init+0x340>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d019      	beq.n	8009b6e <HAL_GPIO_Init+0x22a>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	4a52      	ldr	r2, [pc, #328]	; (8009c88 <HAL_GPIO_Init+0x344>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d013      	beq.n	8009b6a <HAL_GPIO_Init+0x226>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	4a51      	ldr	r2, [pc, #324]	; (8009c8c <HAL_GPIO_Init+0x348>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d00d      	beq.n	8009b66 <HAL_GPIO_Init+0x222>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	4a50      	ldr	r2, [pc, #320]	; (8009c90 <HAL_GPIO_Init+0x34c>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d007      	beq.n	8009b62 <HAL_GPIO_Init+0x21e>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	4a4f      	ldr	r2, [pc, #316]	; (8009c94 <HAL_GPIO_Init+0x350>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d101      	bne.n	8009b5e <HAL_GPIO_Init+0x21a>
 8009b5a:	2309      	movs	r3, #9
 8009b5c:	e012      	b.n	8009b84 <HAL_GPIO_Init+0x240>
 8009b5e:	230a      	movs	r3, #10
 8009b60:	e010      	b.n	8009b84 <HAL_GPIO_Init+0x240>
 8009b62:	2308      	movs	r3, #8
 8009b64:	e00e      	b.n	8009b84 <HAL_GPIO_Init+0x240>
 8009b66:	2307      	movs	r3, #7
 8009b68:	e00c      	b.n	8009b84 <HAL_GPIO_Init+0x240>
 8009b6a:	2306      	movs	r3, #6
 8009b6c:	e00a      	b.n	8009b84 <HAL_GPIO_Init+0x240>
 8009b6e:	2305      	movs	r3, #5
 8009b70:	e008      	b.n	8009b84 <HAL_GPIO_Init+0x240>
 8009b72:	2304      	movs	r3, #4
 8009b74:	e006      	b.n	8009b84 <HAL_GPIO_Init+0x240>
 8009b76:	2303      	movs	r3, #3
 8009b78:	e004      	b.n	8009b84 <HAL_GPIO_Init+0x240>
 8009b7a:	2302      	movs	r3, #2
 8009b7c:	e002      	b.n	8009b84 <HAL_GPIO_Init+0x240>
 8009b7e:	2301      	movs	r3, #1
 8009b80:	e000      	b.n	8009b84 <HAL_GPIO_Init+0x240>
 8009b82:	2300      	movs	r3, #0
 8009b84:	69fa      	ldr	r2, [r7, #28]
 8009b86:	f002 0203 	and.w	r2, r2, #3
 8009b8a:	0092      	lsls	r2, r2, #2
 8009b8c:	4093      	lsls	r3, r2
 8009b8e:	69ba      	ldr	r2, [r7, #24]
 8009b90:	4313      	orrs	r3, r2
 8009b92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009b94:	4935      	ldr	r1, [pc, #212]	; (8009c6c <HAL_GPIO_Init+0x328>)
 8009b96:	69fb      	ldr	r3, [r7, #28]
 8009b98:	089b      	lsrs	r3, r3, #2
 8009b9a:	3302      	adds	r3, #2
 8009b9c:	69ba      	ldr	r2, [r7, #24]
 8009b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009ba2:	4b3d      	ldr	r3, [pc, #244]	; (8009c98 <HAL_GPIO_Init+0x354>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	43db      	mvns	r3, r3
 8009bac:	69ba      	ldr	r2, [r7, #24]
 8009bae:	4013      	ands	r3, r2
 8009bb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d003      	beq.n	8009bc6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009bbe:	69ba      	ldr	r2, [r7, #24]
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009bc6:	4a34      	ldr	r2, [pc, #208]	; (8009c98 <HAL_GPIO_Init+0x354>)
 8009bc8:	69bb      	ldr	r3, [r7, #24]
 8009bca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009bcc:	4b32      	ldr	r3, [pc, #200]	; (8009c98 <HAL_GPIO_Init+0x354>)
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	43db      	mvns	r3, r3
 8009bd6:	69ba      	ldr	r2, [r7, #24]
 8009bd8:	4013      	ands	r3, r2
 8009bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d003      	beq.n	8009bf0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009be8:	69ba      	ldr	r2, [r7, #24]
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	4313      	orrs	r3, r2
 8009bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009bf0:	4a29      	ldr	r2, [pc, #164]	; (8009c98 <HAL_GPIO_Init+0x354>)
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009bf6:	4b28      	ldr	r3, [pc, #160]	; (8009c98 <HAL_GPIO_Init+0x354>)
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	43db      	mvns	r3, r3
 8009c00:	69ba      	ldr	r2, [r7, #24]
 8009c02:	4013      	ands	r3, r2
 8009c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d003      	beq.n	8009c1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009c12:	69ba      	ldr	r2, [r7, #24]
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009c1a:	4a1f      	ldr	r2, [pc, #124]	; (8009c98 <HAL_GPIO_Init+0x354>)
 8009c1c:	69bb      	ldr	r3, [r7, #24]
 8009c1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009c20:	4b1d      	ldr	r3, [pc, #116]	; (8009c98 <HAL_GPIO_Init+0x354>)
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	43db      	mvns	r3, r3
 8009c2a:	69ba      	ldr	r2, [r7, #24]
 8009c2c:	4013      	ands	r3, r2
 8009c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d003      	beq.n	8009c44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009c3c:	69ba      	ldr	r2, [r7, #24]
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	4313      	orrs	r3, r2
 8009c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009c44:	4a14      	ldr	r2, [pc, #80]	; (8009c98 <HAL_GPIO_Init+0x354>)
 8009c46:	69bb      	ldr	r3, [r7, #24]
 8009c48:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	61fb      	str	r3, [r7, #28]
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	2b0f      	cmp	r3, #15
 8009c54:	f67f ae84 	bls.w	8009960 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009c58:	bf00      	nop
 8009c5a:	bf00      	nop
 8009c5c:	3724      	adds	r7, #36	; 0x24
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr
 8009c66:	bf00      	nop
 8009c68:	40023800 	.word	0x40023800
 8009c6c:	40013800 	.word	0x40013800
 8009c70:	40020000 	.word	0x40020000
 8009c74:	40020400 	.word	0x40020400
 8009c78:	40020800 	.word	0x40020800
 8009c7c:	40020c00 	.word	0x40020c00
 8009c80:	40021000 	.word	0x40021000
 8009c84:	40021400 	.word	0x40021400
 8009c88:	40021800 	.word	0x40021800
 8009c8c:	40021c00 	.word	0x40021c00
 8009c90:	40022000 	.word	0x40022000
 8009c94:	40022400 	.word	0x40022400
 8009c98:	40013c00 	.word	0x40013c00

08009c9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b085      	sub	sp, #20
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	691a      	ldr	r2, [r3, #16]
 8009cac:	887b      	ldrh	r3, [r7, #2]
 8009cae:	4013      	ands	r3, r2
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d002      	beq.n	8009cba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	73fb      	strb	r3, [r7, #15]
 8009cb8:	e001      	b.n	8009cbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3714      	adds	r7, #20
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	807b      	strh	r3, [r7, #2]
 8009cd8:	4613      	mov	r3, r2
 8009cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009cdc:	787b      	ldrb	r3, [r7, #1]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d003      	beq.n	8009cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009ce2:	887a      	ldrh	r2, [r7, #2]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009ce8:	e003      	b.n	8009cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009cea:	887b      	ldrh	r3, [r7, #2]
 8009cec:	041a      	lsls	r2, r3, #16
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	619a      	str	r2, [r3, #24]
}
 8009cf2:	bf00      	nop
 8009cf4:	370c      	adds	r7, #12
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr
	...

08009d00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	4603      	mov	r3, r0
 8009d08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009d0a:	4b08      	ldr	r3, [pc, #32]	; (8009d2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009d0c:	695a      	ldr	r2, [r3, #20]
 8009d0e:	88fb      	ldrh	r3, [r7, #6]
 8009d10:	4013      	ands	r3, r2
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d006      	beq.n	8009d24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009d16:	4a05      	ldr	r2, [pc, #20]	; (8009d2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009d18:	88fb      	ldrh	r3, [r7, #6]
 8009d1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009d1c:	88fb      	ldrh	r3, [r7, #6]
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7f9 fc88 	bl	8003634 <HAL_GPIO_EXTI_Callback>
  }
}
 8009d24:	bf00      	nop
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	40013c00 	.word	0x40013c00

08009d30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d101      	bne.n	8009d42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e12b      	b.n	8009f9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d106      	bne.n	8009d5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2200      	movs	r2, #0
 8009d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f7f8 fbea 	bl	8002530 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2224      	movs	r2, #36	; 0x24
 8009d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f022 0201 	bic.w	r2, r2, #1
 8009d72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009d92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009d94:	f001 fd66 	bl	800b864 <HAL_RCC_GetPCLK1Freq>
 8009d98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	4a81      	ldr	r2, [pc, #516]	; (8009fa4 <HAL_I2C_Init+0x274>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d807      	bhi.n	8009db4 <HAL_I2C_Init+0x84>
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	4a80      	ldr	r2, [pc, #512]	; (8009fa8 <HAL_I2C_Init+0x278>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	bf94      	ite	ls
 8009dac:	2301      	movls	r3, #1
 8009dae:	2300      	movhi	r3, #0
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	e006      	b.n	8009dc2 <HAL_I2C_Init+0x92>
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	4a7d      	ldr	r2, [pc, #500]	; (8009fac <HAL_I2C_Init+0x27c>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	bf94      	ite	ls
 8009dbc:	2301      	movls	r3, #1
 8009dbe:	2300      	movhi	r3, #0
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d001      	beq.n	8009dca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e0e7      	b.n	8009f9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	4a78      	ldr	r2, [pc, #480]	; (8009fb0 <HAL_I2C_Init+0x280>)
 8009dce:	fba2 2303 	umull	r2, r3, r2, r3
 8009dd2:	0c9b      	lsrs	r3, r3, #18
 8009dd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	68ba      	ldr	r2, [r7, #8]
 8009de6:	430a      	orrs	r2, r1
 8009de8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	6a1b      	ldr	r3, [r3, #32]
 8009df0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	4a6a      	ldr	r2, [pc, #424]	; (8009fa4 <HAL_I2C_Init+0x274>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d802      	bhi.n	8009e04 <HAL_I2C_Init+0xd4>
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	3301      	adds	r3, #1
 8009e02:	e009      	b.n	8009e18 <HAL_I2C_Init+0xe8>
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009e0a:	fb02 f303 	mul.w	r3, r2, r3
 8009e0e:	4a69      	ldr	r2, [pc, #420]	; (8009fb4 <HAL_I2C_Init+0x284>)
 8009e10:	fba2 2303 	umull	r2, r3, r2, r3
 8009e14:	099b      	lsrs	r3, r3, #6
 8009e16:	3301      	adds	r3, #1
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	6812      	ldr	r2, [r2, #0]
 8009e1c:	430b      	orrs	r3, r1
 8009e1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	69db      	ldr	r3, [r3, #28]
 8009e26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009e2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	495c      	ldr	r1, [pc, #368]	; (8009fa4 <HAL_I2C_Init+0x274>)
 8009e34:	428b      	cmp	r3, r1
 8009e36:	d819      	bhi.n	8009e6c <HAL_I2C_Init+0x13c>
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	1e59      	subs	r1, r3, #1
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	005b      	lsls	r3, r3, #1
 8009e42:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e46:	1c59      	adds	r1, r3, #1
 8009e48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009e4c:	400b      	ands	r3, r1
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d00a      	beq.n	8009e68 <HAL_I2C_Init+0x138>
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	1e59      	subs	r1, r3, #1
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	005b      	lsls	r3, r3, #1
 8009e5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e60:	3301      	adds	r3, #1
 8009e62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e66:	e051      	b.n	8009f0c <HAL_I2C_Init+0x1dc>
 8009e68:	2304      	movs	r3, #4
 8009e6a:	e04f      	b.n	8009f0c <HAL_I2C_Init+0x1dc>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d111      	bne.n	8009e98 <HAL_I2C_Init+0x168>
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	1e58      	subs	r0, r3, #1
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6859      	ldr	r1, [r3, #4]
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	005b      	lsls	r3, r3, #1
 8009e80:	440b      	add	r3, r1
 8009e82:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e86:	3301      	adds	r3, #1
 8009e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	bf0c      	ite	eq
 8009e90:	2301      	moveq	r3, #1
 8009e92:	2300      	movne	r3, #0
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	e012      	b.n	8009ebe <HAL_I2C_Init+0x18e>
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	1e58      	subs	r0, r3, #1
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6859      	ldr	r1, [r3, #4]
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	440b      	add	r3, r1
 8009ea6:	0099      	lsls	r1, r3, #2
 8009ea8:	440b      	add	r3, r1
 8009eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8009eae:	3301      	adds	r3, #1
 8009eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	bf0c      	ite	eq
 8009eb8:	2301      	moveq	r3, #1
 8009eba:	2300      	movne	r3, #0
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d001      	beq.n	8009ec6 <HAL_I2C_Init+0x196>
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e022      	b.n	8009f0c <HAL_I2C_Init+0x1dc>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d10e      	bne.n	8009eec <HAL_I2C_Init+0x1bc>
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	1e58      	subs	r0, r3, #1
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6859      	ldr	r1, [r3, #4]
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	005b      	lsls	r3, r3, #1
 8009eda:	440b      	add	r3, r1
 8009edc:	fbb0 f3f3 	udiv	r3, r0, r3
 8009ee0:	3301      	adds	r3, #1
 8009ee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009eea:	e00f      	b.n	8009f0c <HAL_I2C_Init+0x1dc>
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	1e58      	subs	r0, r3, #1
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6859      	ldr	r1, [r3, #4]
 8009ef4:	460b      	mov	r3, r1
 8009ef6:	009b      	lsls	r3, r3, #2
 8009ef8:	440b      	add	r3, r1
 8009efa:	0099      	lsls	r1, r3, #2
 8009efc:	440b      	add	r3, r1
 8009efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8009f02:	3301      	adds	r3, #1
 8009f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f0c:	6879      	ldr	r1, [r7, #4]
 8009f0e:	6809      	ldr	r1, [r1, #0]
 8009f10:	4313      	orrs	r3, r2
 8009f12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	69da      	ldr	r2, [r3, #28]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6a1b      	ldr	r3, [r3, #32]
 8009f26:	431a      	orrs	r2, r3
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	430a      	orrs	r2, r1
 8009f2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	689b      	ldr	r3, [r3, #8]
 8009f36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009f3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	6911      	ldr	r1, [r2, #16]
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	68d2      	ldr	r2, [r2, #12]
 8009f46:	4311      	orrs	r1, r2
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	6812      	ldr	r2, [r2, #0]
 8009f4c:	430b      	orrs	r3, r1
 8009f4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	68db      	ldr	r3, [r3, #12]
 8009f56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	695a      	ldr	r2, [r3, #20]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	699b      	ldr	r3, [r3, #24]
 8009f62:	431a      	orrs	r2, r3
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	430a      	orrs	r2, r1
 8009f6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f042 0201 	orr.w	r2, r2, #1
 8009f7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2220      	movs	r2, #32
 8009f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	000186a0 	.word	0x000186a0
 8009fa8:	001e847f 	.word	0x001e847f
 8009fac:	003d08ff 	.word	0x003d08ff
 8009fb0:	431bde83 	.word	0x431bde83
 8009fb4:	10624dd3 	.word	0x10624dd3

08009fb8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b088      	sub	sp, #32
 8009fbc:	af02      	add	r7, sp, #8
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	4608      	mov	r0, r1
 8009fc2:	4611      	mov	r1, r2
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	817b      	strh	r3, [r7, #10]
 8009fca:	460b      	mov	r3, r1
 8009fcc:	813b      	strh	r3, [r7, #8]
 8009fce:	4613      	mov	r3, r2
 8009fd0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009fd2:	f7fe ff63 	bl	8008e9c <HAL_GetTick>
 8009fd6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	2b20      	cmp	r3, #32
 8009fe2:	f040 80d9 	bne.w	800a198 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	9300      	str	r3, [sp, #0]
 8009fea:	2319      	movs	r3, #25
 8009fec:	2201      	movs	r2, #1
 8009fee:	496d      	ldr	r1, [pc, #436]	; (800a1a4 <HAL_I2C_Mem_Write+0x1ec>)
 8009ff0:	68f8      	ldr	r0, [r7, #12]
 8009ff2:	f000 fcb5 	bl	800a960 <I2C_WaitOnFlagUntilTimeout>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d001      	beq.n	800a000 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009ffc:	2302      	movs	r3, #2
 8009ffe:	e0cc      	b.n	800a19a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a006:	2b01      	cmp	r3, #1
 800a008:	d101      	bne.n	800a00e <HAL_I2C_Mem_Write+0x56>
 800a00a:	2302      	movs	r3, #2
 800a00c:	e0c5      	b.n	800a19a <HAL_I2C_Mem_Write+0x1e2>
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2201      	movs	r2, #1
 800a012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f003 0301 	and.w	r3, r3, #1
 800a020:	2b01      	cmp	r3, #1
 800a022:	d007      	beq.n	800a034 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f042 0201 	orr.w	r2, r2, #1
 800a032:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a042:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2221      	movs	r2, #33	; 0x21
 800a048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2240      	movs	r2, #64	; 0x40
 800a050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2200      	movs	r2, #0
 800a058:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6a3a      	ldr	r2, [r7, #32]
 800a05e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a064:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a06a:	b29a      	uxth	r2, r3
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	4a4d      	ldr	r2, [pc, #308]	; (800a1a8 <HAL_I2C_Mem_Write+0x1f0>)
 800a074:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a076:	88f8      	ldrh	r0, [r7, #6]
 800a078:	893a      	ldrh	r2, [r7, #8]
 800a07a:	8979      	ldrh	r1, [r7, #10]
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	9301      	str	r3, [sp, #4]
 800a080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a082:	9300      	str	r3, [sp, #0]
 800a084:	4603      	mov	r3, r0
 800a086:	68f8      	ldr	r0, [r7, #12]
 800a088:	f000 faec 	bl	800a664 <I2C_RequestMemoryWrite>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d052      	beq.n	800a138 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a092:	2301      	movs	r3, #1
 800a094:	e081      	b.n	800a19a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a096:	697a      	ldr	r2, [r7, #20]
 800a098:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a09a:	68f8      	ldr	r0, [r7, #12]
 800a09c:	f000 fd36 	bl	800ab0c <I2C_WaitOnTXEFlagUntilTimeout>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d00d      	beq.n	800a0c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0aa:	2b04      	cmp	r3, #4
 800a0ac:	d107      	bne.n	800a0be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e06b      	b.n	800a19a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c6:	781a      	ldrb	r2, [r3, #0]
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d2:	1c5a      	adds	r2, r3, #1
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	b29a      	uxth	r2, r3
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	3b01      	subs	r3, #1
 800a0ec:	b29a      	uxth	r2, r3
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	695b      	ldr	r3, [r3, #20]
 800a0f8:	f003 0304 	and.w	r3, r3, #4
 800a0fc:	2b04      	cmp	r3, #4
 800a0fe:	d11b      	bne.n	800a138 <HAL_I2C_Mem_Write+0x180>
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a104:	2b00      	cmp	r3, #0
 800a106:	d017      	beq.n	800a138 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10c:	781a      	ldrb	r2, [r3, #0]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a118:	1c5a      	adds	r2, r3, #1
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a122:	3b01      	subs	r3, #1
 800a124:	b29a      	uxth	r2, r3
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a12e:	b29b      	uxth	r3, r3
 800a130:	3b01      	subs	r3, #1
 800a132:	b29a      	uxth	r2, r3
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d1aa      	bne.n	800a096 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a140:	697a      	ldr	r2, [r7, #20]
 800a142:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f000 fd22 	bl	800ab8e <I2C_WaitOnBTFFlagUntilTimeout>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d00d      	beq.n	800a16c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a154:	2b04      	cmp	r3, #4
 800a156:	d107      	bne.n	800a168 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a166:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a168:	2301      	movs	r3, #1
 800a16a:	e016      	b.n	800a19a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a17a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2220      	movs	r2, #32
 800a180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2200      	movs	r2, #0
 800a188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2200      	movs	r2, #0
 800a190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a194:	2300      	movs	r3, #0
 800a196:	e000      	b.n	800a19a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a198:	2302      	movs	r3, #2
  }
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3718      	adds	r7, #24
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	00100002 	.word	0x00100002
 800a1a8:	ffff0000 	.word	0xffff0000

0800a1ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b08c      	sub	sp, #48	; 0x30
 800a1b0:	af02      	add	r7, sp, #8
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	4608      	mov	r0, r1
 800a1b6:	4611      	mov	r1, r2
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	817b      	strh	r3, [r7, #10]
 800a1be:	460b      	mov	r3, r1
 800a1c0:	813b      	strh	r3, [r7, #8]
 800a1c2:	4613      	mov	r3, r2
 800a1c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a1c6:	f7fe fe69 	bl	8008e9c <HAL_GetTick>
 800a1ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	2b20      	cmp	r3, #32
 800a1d6:	f040 8208 	bne.w	800a5ea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1dc:	9300      	str	r3, [sp, #0]
 800a1de:	2319      	movs	r3, #25
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	497b      	ldr	r1, [pc, #492]	; (800a3d0 <HAL_I2C_Mem_Read+0x224>)
 800a1e4:	68f8      	ldr	r0, [r7, #12]
 800a1e6:	f000 fbbb 	bl	800a960 <I2C_WaitOnFlagUntilTimeout>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d001      	beq.n	800a1f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800a1f0:	2302      	movs	r3, #2
 800a1f2:	e1fb      	b.n	800a5ec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d101      	bne.n	800a202 <HAL_I2C_Mem_Read+0x56>
 800a1fe:	2302      	movs	r3, #2
 800a200:	e1f4      	b.n	800a5ec <HAL_I2C_Mem_Read+0x440>
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2201      	movs	r2, #1
 800a206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f003 0301 	and.w	r3, r3, #1
 800a214:	2b01      	cmp	r3, #1
 800a216:	d007      	beq.n	800a228 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f042 0201 	orr.w	r2, r2, #1
 800a226:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a236:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2222      	movs	r2, #34	; 0x22
 800a23c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2240      	movs	r2, #64	; 0x40
 800a244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2200      	movs	r2, #0
 800a24c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a252:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a258:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a25e:	b29a      	uxth	r2, r3
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	4a5b      	ldr	r2, [pc, #364]	; (800a3d4 <HAL_I2C_Mem_Read+0x228>)
 800a268:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a26a:	88f8      	ldrh	r0, [r7, #6]
 800a26c:	893a      	ldrh	r2, [r7, #8]
 800a26e:	8979      	ldrh	r1, [r7, #10]
 800a270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a272:	9301      	str	r3, [sp, #4]
 800a274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a276:	9300      	str	r3, [sp, #0]
 800a278:	4603      	mov	r3, r0
 800a27a:	68f8      	ldr	r0, [r7, #12]
 800a27c:	f000 fa88 	bl	800a790 <I2C_RequestMemoryRead>
 800a280:	4603      	mov	r3, r0
 800a282:	2b00      	cmp	r3, #0
 800a284:	d001      	beq.n	800a28a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800a286:	2301      	movs	r3, #1
 800a288:	e1b0      	b.n	800a5ec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d113      	bne.n	800a2ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a292:	2300      	movs	r3, #0
 800a294:	623b      	str	r3, [r7, #32]
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	695b      	ldr	r3, [r3, #20]
 800a29c:	623b      	str	r3, [r7, #32]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	699b      	ldr	r3, [r3, #24]
 800a2a4:	623b      	str	r3, [r7, #32]
 800a2a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2b6:	601a      	str	r2, [r3, #0]
 800a2b8:	e184      	b.n	800a5c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d11b      	bne.n	800a2fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	681a      	ldr	r2, [r3, #0]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	61fb      	str	r3, [r7, #28]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	695b      	ldr	r3, [r3, #20]
 800a2dc:	61fb      	str	r3, [r7, #28]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	699b      	ldr	r3, [r3, #24]
 800a2e4:	61fb      	str	r3, [r7, #28]
 800a2e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	681a      	ldr	r2, [r3, #0]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2f6:	601a      	str	r2, [r3, #0]
 800a2f8:	e164      	b.n	800a5c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2fe:	2b02      	cmp	r3, #2
 800a300:	d11b      	bne.n	800a33a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a310:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a320:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a322:	2300      	movs	r3, #0
 800a324:	61bb      	str	r3, [r7, #24]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	695b      	ldr	r3, [r3, #20]
 800a32c:	61bb      	str	r3, [r7, #24]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	699b      	ldr	r3, [r3, #24]
 800a334:	61bb      	str	r3, [r7, #24]
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	e144      	b.n	800a5c4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a33a:	2300      	movs	r3, #0
 800a33c:	617b      	str	r3, [r7, #20]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	695b      	ldr	r3, [r3, #20]
 800a344:	617b      	str	r3, [r7, #20]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	699b      	ldr	r3, [r3, #24]
 800a34c:	617b      	str	r3, [r7, #20]
 800a34e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a350:	e138      	b.n	800a5c4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a356:	2b03      	cmp	r3, #3
 800a358:	f200 80f1 	bhi.w	800a53e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a360:	2b01      	cmp	r3, #1
 800a362:	d123      	bne.n	800a3ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a366:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	f000 fc51 	bl	800ac10 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a36e:	4603      	mov	r3, r0
 800a370:	2b00      	cmp	r3, #0
 800a372:	d001      	beq.n	800a378 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800a374:	2301      	movs	r3, #1
 800a376:	e139      	b.n	800a5ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	691a      	ldr	r2, [r3, #16]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a382:	b2d2      	uxtb	r2, r2
 800a384:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a38a:	1c5a      	adds	r2, r3, #1
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a394:	3b01      	subs	r3, #1
 800a396:	b29a      	uxth	r2, r3
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	3b01      	subs	r3, #1
 800a3a4:	b29a      	uxth	r2, r3
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a3aa:	e10b      	b.n	800a5c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	d14e      	bne.n	800a452 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b6:	9300      	str	r3, [sp, #0]
 800a3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	4906      	ldr	r1, [pc, #24]	; (800a3d8 <HAL_I2C_Mem_Read+0x22c>)
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f000 face 	bl	800a960 <I2C_WaitOnFlagUntilTimeout>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d008      	beq.n	800a3dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e10e      	b.n	800a5ec <HAL_I2C_Mem_Read+0x440>
 800a3ce:	bf00      	nop
 800a3d0:	00100002 	.word	0x00100002
 800a3d4:	ffff0000 	.word	0xffff0000
 800a3d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	691a      	ldr	r2, [r3, #16]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f6:	b2d2      	uxtb	r2, r2
 800a3f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fe:	1c5a      	adds	r2, r3, #1
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a408:	3b01      	subs	r3, #1
 800a40a:	b29a      	uxth	r2, r3
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a414:	b29b      	uxth	r3, r3
 800a416:	3b01      	subs	r3, #1
 800a418:	b29a      	uxth	r2, r3
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	691a      	ldr	r2, [r3, #16]
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a428:	b2d2      	uxtb	r2, r2
 800a42a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a430:	1c5a      	adds	r2, r3, #1
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a43a:	3b01      	subs	r3, #1
 800a43c:	b29a      	uxth	r2, r3
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a446:	b29b      	uxth	r3, r3
 800a448:	3b01      	subs	r3, #1
 800a44a:	b29a      	uxth	r2, r3
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a450:	e0b8      	b.n	800a5c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a454:	9300      	str	r3, [sp, #0]
 800a456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a458:	2200      	movs	r2, #0
 800a45a:	4966      	ldr	r1, [pc, #408]	; (800a5f4 <HAL_I2C_Mem_Read+0x448>)
 800a45c:	68f8      	ldr	r0, [r7, #12]
 800a45e:	f000 fa7f 	bl	800a960 <I2C_WaitOnFlagUntilTimeout>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d001      	beq.n	800a46c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800a468:	2301      	movs	r3, #1
 800a46a:	e0bf      	b.n	800a5ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a47a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	691a      	ldr	r2, [r3, #16]
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a486:	b2d2      	uxtb	r2, r2
 800a488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a48e:	1c5a      	adds	r2, r3, #1
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a498:	3b01      	subs	r3, #1
 800a49a:	b29a      	uxth	r2, r3
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	b29a      	uxth	r2, r3
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b0:	9300      	str	r3, [sp, #0]
 800a4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	494f      	ldr	r1, [pc, #316]	; (800a5f4 <HAL_I2C_Mem_Read+0x448>)
 800a4b8:	68f8      	ldr	r0, [r7, #12]
 800a4ba:	f000 fa51 	bl	800a960 <I2C_WaitOnFlagUntilTimeout>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d001      	beq.n	800a4c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	e091      	b.n	800a5ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	681a      	ldr	r2, [r3, #0]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	691a      	ldr	r2, [r3, #16]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e2:	b2d2      	uxtb	r2, r2
 800a4e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ea:	1c5a      	adds	r2, r3, #1
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4f4:	3b01      	subs	r3, #1
 800a4f6:	b29a      	uxth	r2, r3
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a500:	b29b      	uxth	r3, r3
 800a502:	3b01      	subs	r3, #1
 800a504:	b29a      	uxth	r2, r3
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	691a      	ldr	r2, [r3, #16]
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a514:	b2d2      	uxtb	r2, r2
 800a516:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a51c:	1c5a      	adds	r2, r3, #1
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a526:	3b01      	subs	r3, #1
 800a528:	b29a      	uxth	r2, r3
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a532:	b29b      	uxth	r3, r3
 800a534:	3b01      	subs	r3, #1
 800a536:	b29a      	uxth	r2, r3
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a53c:	e042      	b.n	800a5c4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a53e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a540:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a542:	68f8      	ldr	r0, [r7, #12]
 800a544:	f000 fb64 	bl	800ac10 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d001      	beq.n	800a552 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a54e:	2301      	movs	r3, #1
 800a550:	e04c      	b.n	800a5ec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	691a      	ldr	r2, [r3, #16]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55c:	b2d2      	uxtb	r2, r2
 800a55e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a564:	1c5a      	adds	r2, r3, #1
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a56e:	3b01      	subs	r3, #1
 800a570:	b29a      	uxth	r2, r3
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	3b01      	subs	r3, #1
 800a57e:	b29a      	uxth	r2, r3
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	695b      	ldr	r3, [r3, #20]
 800a58a:	f003 0304 	and.w	r3, r3, #4
 800a58e:	2b04      	cmp	r3, #4
 800a590:	d118      	bne.n	800a5c4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	691a      	ldr	r2, [r3, #16]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59c:	b2d2      	uxtb	r2, r2
 800a59e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a4:	1c5a      	adds	r2, r3, #1
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5ae:	3b01      	subs	r3, #1
 800a5b0:	b29a      	uxth	r2, r3
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	3b01      	subs	r3, #1
 800a5be:	b29a      	uxth	r2, r3
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f47f aec2 	bne.w	800a352 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2220      	movs	r2, #32
 800a5d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	e000      	b.n	800a5ec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a5ea:	2302      	movs	r3, #2
  }
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3728      	adds	r7, #40	; 0x28
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	00010004 	.word	0x00010004

0800a5f8 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b083      	sub	sp, #12
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a606:	b2db      	uxtb	r3, r3
 800a608:	2b20      	cmp	r3, #32
 800a60a:	d124      	bne.n	800a656 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2228      	movs	r2, #40	; 0x28
 800a610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f003 0301 	and.w	r3, r3, #1
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d007      	beq.n	800a632 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f042 0201 	orr.w	r2, r2, #1
 800a630:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a640:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	685a      	ldr	r2, [r3, #4]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800a650:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800a652:	2300      	movs	r3, #0
 800a654:	e000      	b.n	800a658 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800a656:	2302      	movs	r3, #2
  }
}
 800a658:	4618      	mov	r0, r3
 800a65a:	370c      	adds	r7, #12
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b088      	sub	sp, #32
 800a668:	af02      	add	r7, sp, #8
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	4608      	mov	r0, r1
 800a66e:	4611      	mov	r1, r2
 800a670:	461a      	mov	r2, r3
 800a672:	4603      	mov	r3, r0
 800a674:	817b      	strh	r3, [r7, #10]
 800a676:	460b      	mov	r3, r1
 800a678:	813b      	strh	r3, [r7, #8]
 800a67a:	4613      	mov	r3, r2
 800a67c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a68c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a690:	9300      	str	r3, [sp, #0]
 800a692:	6a3b      	ldr	r3, [r7, #32]
 800a694:	2200      	movs	r2, #0
 800a696:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	f000 f960 	bl	800a960 <I2C_WaitOnFlagUntilTimeout>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d00d      	beq.n	800a6c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6b4:	d103      	bne.n	800a6be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a6be:	2303      	movs	r3, #3
 800a6c0:	e05f      	b.n	800a782 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a6c2:	897b      	ldrh	r3, [r7, #10]
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a6d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d4:	6a3a      	ldr	r2, [r7, #32]
 800a6d6:	492d      	ldr	r1, [pc, #180]	; (800a78c <I2C_RequestMemoryWrite+0x128>)
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f000 f998 	bl	800aa0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d001      	beq.n	800a6e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	e04c      	b.n	800a782 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	617b      	str	r3, [r7, #20]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	695b      	ldr	r3, [r3, #20]
 800a6f2:	617b      	str	r3, [r7, #20]
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	699b      	ldr	r3, [r3, #24]
 800a6fa:	617b      	str	r3, [r7, #20]
 800a6fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a6fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a700:	6a39      	ldr	r1, [r7, #32]
 800a702:	68f8      	ldr	r0, [r7, #12]
 800a704:	f000 fa02 	bl	800ab0c <I2C_WaitOnTXEFlagUntilTimeout>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d00d      	beq.n	800a72a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a712:	2b04      	cmp	r3, #4
 800a714:	d107      	bne.n	800a726 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a724:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a726:	2301      	movs	r3, #1
 800a728:	e02b      	b.n	800a782 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a72a:	88fb      	ldrh	r3, [r7, #6]
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d105      	bne.n	800a73c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a730:	893b      	ldrh	r3, [r7, #8]
 800a732:	b2da      	uxtb	r2, r3
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	611a      	str	r2, [r3, #16]
 800a73a:	e021      	b.n	800a780 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a73c:	893b      	ldrh	r3, [r7, #8]
 800a73e:	0a1b      	lsrs	r3, r3, #8
 800a740:	b29b      	uxth	r3, r3
 800a742:	b2da      	uxtb	r2, r3
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a74a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a74c:	6a39      	ldr	r1, [r7, #32]
 800a74e:	68f8      	ldr	r0, [r7, #12]
 800a750:	f000 f9dc 	bl	800ab0c <I2C_WaitOnTXEFlagUntilTimeout>
 800a754:	4603      	mov	r3, r0
 800a756:	2b00      	cmp	r3, #0
 800a758:	d00d      	beq.n	800a776 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a75e:	2b04      	cmp	r3, #4
 800a760:	d107      	bne.n	800a772 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a770:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a772:	2301      	movs	r3, #1
 800a774:	e005      	b.n	800a782 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a776:	893b      	ldrh	r3, [r7, #8]
 800a778:	b2da      	uxtb	r2, r3
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a780:	2300      	movs	r3, #0
}
 800a782:	4618      	mov	r0, r3
 800a784:	3718      	adds	r7, #24
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	00010002 	.word	0x00010002

0800a790 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b088      	sub	sp, #32
 800a794:	af02      	add	r7, sp, #8
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	4608      	mov	r0, r1
 800a79a:	4611      	mov	r1, r2
 800a79c:	461a      	mov	r2, r3
 800a79e:	4603      	mov	r3, r0
 800a7a0:	817b      	strh	r3, [r7, #10]
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	813b      	strh	r3, [r7, #8]
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a7b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7cc:	9300      	str	r3, [sp, #0]
 800a7ce:	6a3b      	ldr	r3, [r7, #32]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a7d6:	68f8      	ldr	r0, [r7, #12]
 800a7d8:	f000 f8c2 	bl	800a960 <I2C_WaitOnFlagUntilTimeout>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d00d      	beq.n	800a7fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7f0:	d103      	bne.n	800a7fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a7fa:	2303      	movs	r3, #3
 800a7fc:	e0aa      	b.n	800a954 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a7fe:	897b      	ldrh	r3, [r7, #10]
 800a800:	b2db      	uxtb	r3, r3
 800a802:	461a      	mov	r2, r3
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a80c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a810:	6a3a      	ldr	r2, [r7, #32]
 800a812:	4952      	ldr	r1, [pc, #328]	; (800a95c <I2C_RequestMemoryRead+0x1cc>)
 800a814:	68f8      	ldr	r0, [r7, #12]
 800a816:	f000 f8fa 	bl	800aa0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a81a:	4603      	mov	r3, r0
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d001      	beq.n	800a824 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a820:	2301      	movs	r3, #1
 800a822:	e097      	b.n	800a954 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a824:	2300      	movs	r3, #0
 800a826:	617b      	str	r3, [r7, #20]
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	695b      	ldr	r3, [r3, #20]
 800a82e:	617b      	str	r3, [r7, #20]
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	699b      	ldr	r3, [r3, #24]
 800a836:	617b      	str	r3, [r7, #20]
 800a838:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a83a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a83c:	6a39      	ldr	r1, [r7, #32]
 800a83e:	68f8      	ldr	r0, [r7, #12]
 800a840:	f000 f964 	bl	800ab0c <I2C_WaitOnTXEFlagUntilTimeout>
 800a844:	4603      	mov	r3, r0
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00d      	beq.n	800a866 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a84e:	2b04      	cmp	r3, #4
 800a850:	d107      	bne.n	800a862 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a860:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a862:	2301      	movs	r3, #1
 800a864:	e076      	b.n	800a954 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a866:	88fb      	ldrh	r3, [r7, #6]
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d105      	bne.n	800a878 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a86c:	893b      	ldrh	r3, [r7, #8]
 800a86e:	b2da      	uxtb	r2, r3
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	611a      	str	r2, [r3, #16]
 800a876:	e021      	b.n	800a8bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a878:	893b      	ldrh	r3, [r7, #8]
 800a87a:	0a1b      	lsrs	r3, r3, #8
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	b2da      	uxtb	r2, r3
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a888:	6a39      	ldr	r1, [r7, #32]
 800a88a:	68f8      	ldr	r0, [r7, #12]
 800a88c:	f000 f93e 	bl	800ab0c <I2C_WaitOnTXEFlagUntilTimeout>
 800a890:	4603      	mov	r3, r0
 800a892:	2b00      	cmp	r3, #0
 800a894:	d00d      	beq.n	800a8b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a89a:	2b04      	cmp	r3, #4
 800a89c:	d107      	bne.n	800a8ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	e050      	b.n	800a954 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a8b2:	893b      	ldrh	r3, [r7, #8]
 800a8b4:	b2da      	uxtb	r2, r3
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a8bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8be:	6a39      	ldr	r1, [r7, #32]
 800a8c0:	68f8      	ldr	r0, [r7, #12]
 800a8c2:	f000 f923 	bl	800ab0c <I2C_WaitOnTXEFlagUntilTimeout>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d00d      	beq.n	800a8e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d0:	2b04      	cmp	r3, #4
 800a8d2:	d107      	bne.n	800a8e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	e035      	b.n	800a954 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fa:	9300      	str	r3, [sp, #0]
 800a8fc:	6a3b      	ldr	r3, [r7, #32]
 800a8fe:	2200      	movs	r2, #0
 800a900:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a904:	68f8      	ldr	r0, [r7, #12]
 800a906:	f000 f82b 	bl	800a960 <I2C_WaitOnFlagUntilTimeout>
 800a90a:	4603      	mov	r3, r0
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d00d      	beq.n	800a92c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a91a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a91e:	d103      	bne.n	800a928 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a926:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a928:	2303      	movs	r3, #3
 800a92a:	e013      	b.n	800a954 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a92c:	897b      	ldrh	r3, [r7, #10]
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	f043 0301 	orr.w	r3, r3, #1
 800a934:	b2da      	uxtb	r2, r3
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93e:	6a3a      	ldr	r2, [r7, #32]
 800a940:	4906      	ldr	r1, [pc, #24]	; (800a95c <I2C_RequestMemoryRead+0x1cc>)
 800a942:	68f8      	ldr	r0, [r7, #12]
 800a944:	f000 f863 	bl	800aa0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a948:	4603      	mov	r3, r0
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d001      	beq.n	800a952 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a94e:	2301      	movs	r3, #1
 800a950:	e000      	b.n	800a954 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a952:	2300      	movs	r3, #0
}
 800a954:	4618      	mov	r0, r3
 800a956:	3718      	adds	r7, #24
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	00010002 	.word	0x00010002

0800a960 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
 800a966:	60f8      	str	r0, [r7, #12]
 800a968:	60b9      	str	r1, [r7, #8]
 800a96a:	603b      	str	r3, [r7, #0]
 800a96c:	4613      	mov	r3, r2
 800a96e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a970:	e025      	b.n	800a9be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a978:	d021      	beq.n	800a9be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a97a:	f7fe fa8f 	bl	8008e9c <HAL_GetTick>
 800a97e:	4602      	mov	r2, r0
 800a980:	69bb      	ldr	r3, [r7, #24]
 800a982:	1ad3      	subs	r3, r2, r3
 800a984:	683a      	ldr	r2, [r7, #0]
 800a986:	429a      	cmp	r2, r3
 800a988:	d302      	bcc.n	800a990 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d116      	bne.n	800a9be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2200      	movs	r2, #0
 800a994:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2220      	movs	r2, #32
 800a99a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9aa:	f043 0220 	orr.w	r2, r3, #32
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	e023      	b.n	800aa06 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	0c1b      	lsrs	r3, r3, #16
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d10d      	bne.n	800a9e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	695b      	ldr	r3, [r3, #20]
 800a9ce:	43da      	mvns	r2, r3
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	4013      	ands	r3, r2
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	bf0c      	ite	eq
 800a9da:	2301      	moveq	r3, #1
 800a9dc:	2300      	movne	r3, #0
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	e00c      	b.n	800a9fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	699b      	ldr	r3, [r3, #24]
 800a9ea:	43da      	mvns	r2, r3
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	4013      	ands	r3, r2
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	bf0c      	ite	eq
 800a9f6:	2301      	moveq	r3, #1
 800a9f8:	2300      	movne	r3, #0
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	79fb      	ldrb	r3, [r7, #7]
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d0b6      	beq.n	800a972 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aa04:	2300      	movs	r3, #0
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3710      	adds	r7, #16
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}

0800aa0e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800aa0e:	b580      	push	{r7, lr}
 800aa10:	b084      	sub	sp, #16
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	60f8      	str	r0, [r7, #12]
 800aa16:	60b9      	str	r1, [r7, #8]
 800aa18:	607a      	str	r2, [r7, #4]
 800aa1a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aa1c:	e051      	b.n	800aac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	695b      	ldr	r3, [r3, #20]
 800aa24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa2c:	d123      	bne.n	800aa76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	681a      	ldr	r2, [r3, #0]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa3c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800aa46:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2220      	movs	r2, #32
 800aa52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa62:	f043 0204 	orr.w	r2, r3, #4
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800aa72:	2301      	movs	r3, #1
 800aa74:	e046      	b.n	800ab04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa7c:	d021      	beq.n	800aac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa7e:	f7fe fa0d 	bl	8008e9c <HAL_GetTick>
 800aa82:	4602      	mov	r2, r0
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	1ad3      	subs	r3, r2, r3
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d302      	bcc.n	800aa94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d116      	bne.n	800aac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2200      	movs	r2, #0
 800aa98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2220      	movs	r2, #32
 800aa9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaae:	f043 0220 	orr.w	r2, r3, #32
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2200      	movs	r2, #0
 800aaba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800aabe:	2301      	movs	r3, #1
 800aac0:	e020      	b.n	800ab04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	0c1b      	lsrs	r3, r3, #16
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d10c      	bne.n	800aae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	695b      	ldr	r3, [r3, #20]
 800aad2:	43da      	mvns	r2, r3
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	4013      	ands	r3, r2
 800aad8:	b29b      	uxth	r3, r3
 800aada:	2b00      	cmp	r3, #0
 800aadc:	bf14      	ite	ne
 800aade:	2301      	movne	r3, #1
 800aae0:	2300      	moveq	r3, #0
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	e00b      	b.n	800aafe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	699b      	ldr	r3, [r3, #24]
 800aaec:	43da      	mvns	r2, r3
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	4013      	ands	r3, r2
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	bf14      	ite	ne
 800aaf8:	2301      	movne	r3, #1
 800aafa:	2300      	moveq	r3, #0
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d18d      	bne.n	800aa1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800ab02:	2300      	movs	r3, #0
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3710      	adds	r7, #16
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	60b9      	str	r1, [r7, #8]
 800ab16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ab18:	e02d      	b.n	800ab76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ab1a:	68f8      	ldr	r0, [r7, #12]
 800ab1c:	f000 f8ce 	bl	800acbc <I2C_IsAcknowledgeFailed>
 800ab20:	4603      	mov	r3, r0
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d001      	beq.n	800ab2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ab26:	2301      	movs	r3, #1
 800ab28:	e02d      	b.n	800ab86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab30:	d021      	beq.n	800ab76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab32:	f7fe f9b3 	bl	8008e9c <HAL_GetTick>
 800ab36:	4602      	mov	r2, r0
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	1ad3      	subs	r3, r2, r3
 800ab3c:	68ba      	ldr	r2, [r7, #8]
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d302      	bcc.n	800ab48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d116      	bne.n	800ab76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2220      	movs	r2, #32
 800ab52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab62:	f043 0220 	orr.w	r2, r3, #32
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ab72:	2301      	movs	r3, #1
 800ab74:	e007      	b.n	800ab86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	695b      	ldr	r3, [r3, #20]
 800ab7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab80:	2b80      	cmp	r3, #128	; 0x80
 800ab82:	d1ca      	bne.n	800ab1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}

0800ab8e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ab8e:	b580      	push	{r7, lr}
 800ab90:	b084      	sub	sp, #16
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	60f8      	str	r0, [r7, #12]
 800ab96:	60b9      	str	r1, [r7, #8]
 800ab98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ab9a:	e02d      	b.n	800abf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ab9c:	68f8      	ldr	r0, [r7, #12]
 800ab9e:	f000 f88d 	bl	800acbc <I2C_IsAcknowledgeFailed>
 800aba2:	4603      	mov	r3, r0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d001      	beq.n	800abac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800aba8:	2301      	movs	r3, #1
 800abaa:	e02d      	b.n	800ac08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb2:	d021      	beq.n	800abf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abb4:	f7fe f972 	bl	8008e9c <HAL_GetTick>
 800abb8:	4602      	mov	r2, r0
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	1ad3      	subs	r3, r2, r3
 800abbe:	68ba      	ldr	r2, [r7, #8]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d302      	bcc.n	800abca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d116      	bne.n	800abf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2200      	movs	r2, #0
 800abce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2220      	movs	r2, #32
 800abd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2200      	movs	r2, #0
 800abdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe4:	f043 0220 	orr.w	r2, r3, #32
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2200      	movs	r2, #0
 800abf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800abf4:	2301      	movs	r3, #1
 800abf6:	e007      	b.n	800ac08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	695b      	ldr	r3, [r3, #20]
 800abfe:	f003 0304 	and.w	r3, r3, #4
 800ac02:	2b04      	cmp	r3, #4
 800ac04:	d1ca      	bne.n	800ab9c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ac06:	2300      	movs	r3, #0
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3710      	adds	r7, #16
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b084      	sub	sp, #16
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	60f8      	str	r0, [r7, #12]
 800ac18:	60b9      	str	r1, [r7, #8]
 800ac1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ac1c:	e042      	b.n	800aca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	695b      	ldr	r3, [r3, #20]
 800ac24:	f003 0310 	and.w	r3, r3, #16
 800ac28:	2b10      	cmp	r3, #16
 800ac2a:	d119      	bne.n	800ac60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f06f 0210 	mvn.w	r2, #16
 800ac34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2220      	movs	r2, #32
 800ac40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2200      	movs	r2, #0
 800ac48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2200      	movs	r2, #0
 800ac58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	e029      	b.n	800acb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac60:	f7fe f91c 	bl	8008e9c <HAL_GetTick>
 800ac64:	4602      	mov	r2, r0
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	1ad3      	subs	r3, r2, r3
 800ac6a:	68ba      	ldr	r2, [r7, #8]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d302      	bcc.n	800ac76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d116      	bne.n	800aca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	2220      	movs	r2, #32
 800ac80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2200      	movs	r2, #0
 800ac88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac90:	f043 0220 	orr.w	r2, r3, #32
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800aca0:	2301      	movs	r3, #1
 800aca2:	e007      	b.n	800acb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	695b      	ldr	r3, [r3, #20]
 800acaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acae:	2b40      	cmp	r3, #64	; 0x40
 800acb0:	d1b5      	bne.n	800ac1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800acb2:	2300      	movs	r3, #0
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3710      	adds	r7, #16
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	695b      	ldr	r3, [r3, #20]
 800acca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800acce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800acd2:	d11b      	bne.n	800ad0c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800acdc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2200      	movs	r2, #0
 800ace2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2220      	movs	r2, #32
 800ace8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2200      	movs	r2, #0
 800acf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acf8:	f043 0204 	orr.w	r2, r3, #4
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	e000      	b.n	800ad0e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ad0c:	2300      	movs	r3, #0
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	370c      	adds	r7, #12
 800ad12:	46bd      	mov	sp, r7
 800ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad18:	4770      	bx	lr

0800ad1a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ad1a:	b480      	push	{r7}
 800ad1c:	b083      	sub	sp, #12
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	6078      	str	r0, [r7, #4]
 800ad22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	2b20      	cmp	r3, #32
 800ad2e:	d129      	bne.n	800ad84 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2224      	movs	r2, #36	; 0x24
 800ad34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	681a      	ldr	r2, [r3, #0]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f022 0201 	bic.w	r2, r2, #1
 800ad46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f022 0210 	bic.w	r2, r2, #16
 800ad56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	683a      	ldr	r2, [r7, #0]
 800ad64:	430a      	orrs	r2, r1
 800ad66:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f042 0201 	orr.w	r2, r2, #1
 800ad76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2220      	movs	r2, #32
 800ad7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ad80:	2300      	movs	r3, #0
 800ad82:	e000      	b.n	800ad86 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800ad84:	2302      	movs	r3, #2
  }
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	370c      	adds	r7, #12
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr

0800ad92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ad92:	b480      	push	{r7}
 800ad94:	b085      	sub	sp, #20
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
 800ad9a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	2b20      	cmp	r3, #32
 800adaa:	d12a      	bne.n	800ae02 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2224      	movs	r2, #36	; 0x24
 800adb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	681a      	ldr	r2, [r3, #0]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f022 0201 	bic.w	r2, r2, #1
 800adc2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adca:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800adcc:	89fb      	ldrh	r3, [r7, #14]
 800adce:	f023 030f 	bic.w	r3, r3, #15
 800add2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	b29a      	uxth	r2, r3
 800add8:	89fb      	ldrh	r3, [r7, #14]
 800adda:	4313      	orrs	r3, r2
 800addc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	89fa      	ldrh	r2, [r7, #14]
 800ade4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f042 0201 	orr.w	r2, r2, #1
 800adf4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2220      	movs	r2, #32
 800adfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800adfe:	2300      	movs	r3, #0
 800ae00:	e000      	b.n	800ae04 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800ae02:	2302      	movs	r3, #2
  }
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3714      	adds	r7, #20
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d101      	bne.n	800ae22 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800ae1e:	2301      	movs	r3, #1
 800ae20:	e034      	b.n	800ae8c <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800ae2a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f245 5255 	movw	r2, #21845	; 0x5555
 800ae34:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	6852      	ldr	r2, [r2, #4]
 800ae3e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	6892      	ldr	r2, [r2, #8]
 800ae48:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800ae4a:	f7fe f827 	bl	8008e9c <HAL_GetTick>
 800ae4e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ae50:	e00f      	b.n	800ae72 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800ae52:	f7fe f823 	bl	8008e9c <HAL_GetTick>
 800ae56:	4602      	mov	r2, r0
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	1ad3      	subs	r3, r2, r3
 800ae5c:	2b31      	cmp	r3, #49	; 0x31
 800ae5e:	d908      	bls.n	800ae72 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	68db      	ldr	r3, [r3, #12]
 800ae66:	f003 0303 	and.w	r3, r3, #3
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d001      	beq.n	800ae72 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800ae6e:	2303      	movs	r3, #3
 800ae70:	e00c      	b.n	800ae8c <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	68db      	ldr	r3, [r3, #12]
 800ae78:	f003 0303 	and.w	r3, r3, #3
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d1e8      	bne.n	800ae52 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800ae88:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ae8a:	2300      	movs	r3, #0
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3710      	adds	r7, #16
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800aea4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800aea6:	2300      	movs	r3, #0
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	370c      	adds	r7, #12
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr

0800aeb4 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 800aebc:	4b05      	ldr	r3, [pc, #20]	; (800aed4 <HAL_PWR_EnableWakeUpPin+0x20>)
 800aebe:	685a      	ldr	r2, [r3, #4]
 800aec0:	4904      	ldr	r1, [pc, #16]	; (800aed4 <HAL_PWR_EnableWakeUpPin+0x20>)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	4313      	orrs	r3, r2
 800aec6:	604b      	str	r3, [r1, #4]
}
 800aec8:	bf00      	nop
 800aeca:	370c      	adds	r7, #12
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr
 800aed4:	40007000 	.word	0x40007000

0800aed8 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b083      	sub	sp, #12
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 800aee0:	4b06      	ldr	r3, [pc, #24]	; (800aefc <HAL_PWR_DisableWakeUpPin+0x24>)
 800aee2:	685a      	ldr	r2, [r3, #4]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	43db      	mvns	r3, r3
 800aee8:	4904      	ldr	r1, [pc, #16]	; (800aefc <HAL_PWR_DisableWakeUpPin+0x24>)
 800aeea:	4013      	ands	r3, r2
 800aeec:	604b      	str	r3, [r1, #4]
}
 800aeee:	bf00      	nop
 800aef0:	370c      	adds	r7, #12
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr
 800aefa:	bf00      	nop
 800aefc:	40007000 	.word	0x40007000

0800af00 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800af00:	b480      	push	{r7}
 800af02:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800af04:	4b08      	ldr	r3, [pc, #32]	; (800af28 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4a07      	ldr	r2, [pc, #28]	; (800af28 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800af0a:	f043 0302 	orr.w	r3, r3, #2
 800af0e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800af10:	4b06      	ldr	r3, [pc, #24]	; (800af2c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800af12:	691b      	ldr	r3, [r3, #16]
 800af14:	4a05      	ldr	r2, [pc, #20]	; (800af2c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800af16:	f043 0304 	orr.w	r3, r3, #4
 800af1a:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800af1c:	bf30      	wfi
}
 800af1e:	bf00      	nop
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr
 800af28:	40007000 	.word	0x40007000
 800af2c:	e000ed00 	.word	0xe000ed00

0800af30 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800af36:	2300      	movs	r3, #0
 800af38:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800af3a:	2300      	movs	r3, #0
 800af3c:	603b      	str	r3, [r7, #0]
 800af3e:	4b20      	ldr	r3, [pc, #128]	; (800afc0 <HAL_PWREx_EnableOverDrive+0x90>)
 800af40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af42:	4a1f      	ldr	r2, [pc, #124]	; (800afc0 <HAL_PWREx_EnableOverDrive+0x90>)
 800af44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af48:	6413      	str	r3, [r2, #64]	; 0x40
 800af4a:	4b1d      	ldr	r3, [pc, #116]	; (800afc0 <HAL_PWREx_EnableOverDrive+0x90>)
 800af4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af52:	603b      	str	r3, [r7, #0]
 800af54:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800af56:	4b1b      	ldr	r3, [pc, #108]	; (800afc4 <HAL_PWREx_EnableOverDrive+0x94>)
 800af58:	2201      	movs	r2, #1
 800af5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800af5c:	f7fd ff9e 	bl	8008e9c <HAL_GetTick>
 800af60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800af62:	e009      	b.n	800af78 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800af64:	f7fd ff9a 	bl	8008e9c <HAL_GetTick>
 800af68:	4602      	mov	r2, r0
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	1ad3      	subs	r3, r2, r3
 800af6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af72:	d901      	bls.n	800af78 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800af74:	2303      	movs	r3, #3
 800af76:	e01f      	b.n	800afb8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800af78:	4b13      	ldr	r3, [pc, #76]	; (800afc8 <HAL_PWREx_EnableOverDrive+0x98>)
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af84:	d1ee      	bne.n	800af64 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800af86:	4b11      	ldr	r3, [pc, #68]	; (800afcc <HAL_PWREx_EnableOverDrive+0x9c>)
 800af88:	2201      	movs	r2, #1
 800af8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800af8c:	f7fd ff86 	bl	8008e9c <HAL_GetTick>
 800af90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800af92:	e009      	b.n	800afa8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800af94:	f7fd ff82 	bl	8008e9c <HAL_GetTick>
 800af98:	4602      	mov	r2, r0
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	1ad3      	subs	r3, r2, r3
 800af9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800afa2:	d901      	bls.n	800afa8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800afa4:	2303      	movs	r3, #3
 800afa6:	e007      	b.n	800afb8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800afa8:	4b07      	ldr	r3, [pc, #28]	; (800afc8 <HAL_PWREx_EnableOverDrive+0x98>)
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afb4:	d1ee      	bne.n	800af94 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800afb6:	2300      	movs	r3, #0
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3708      	adds	r7, #8
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}
 800afc0:	40023800 	.word	0x40023800
 800afc4:	420e0040 	.word	0x420e0040
 800afc8:	40007000 	.word	0x40007000
 800afcc:	420e0044 	.word	0x420e0044

0800afd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b086      	sub	sp, #24
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d101      	bne.n	800afe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800afde:	2301      	movs	r3, #1
 800afe0:	e264      	b.n	800b4ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f003 0301 	and.w	r3, r3, #1
 800afea:	2b00      	cmp	r3, #0
 800afec:	d075      	beq.n	800b0da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800afee:	4ba3      	ldr	r3, [pc, #652]	; (800b27c <HAL_RCC_OscConfig+0x2ac>)
 800aff0:	689b      	ldr	r3, [r3, #8]
 800aff2:	f003 030c 	and.w	r3, r3, #12
 800aff6:	2b04      	cmp	r3, #4
 800aff8:	d00c      	beq.n	800b014 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800affa:	4ba0      	ldr	r3, [pc, #640]	; (800b27c <HAL_RCC_OscConfig+0x2ac>)
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b002:	2b08      	cmp	r3, #8
 800b004:	d112      	bne.n	800b02c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b006:	4b9d      	ldr	r3, [pc, #628]	; (800b27c <HAL_RCC_OscConfig+0x2ac>)
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b00e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b012:	d10b      	bne.n	800b02c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b014:	4b99      	ldr	r3, [pc, #612]	; (800b27c <HAL_RCC_OscConfig+0x2ac>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d05b      	beq.n	800b0d8 <HAL_RCC_OscConfig+0x108>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d157      	bne.n	800b0d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b028:	2301      	movs	r3, #1
 800b02a:	e23f      	b.n	800b4ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b034:	d106      	bne.n	800b044 <HAL_RCC_OscConfig+0x74>
 800b036:	4b91      	ldr	r3, [pc, #580]	; (800b27c <HAL_RCC_OscConfig+0x2ac>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a90      	ldr	r2, [pc, #576]	; (800b27c <HAL_RCC_OscConfig+0x2ac>)
 800b03c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b040:	6013      	str	r3, [r2, #0]
 800b042:	e01d      	b.n	800b080 <HAL_RCC_OscConfig+0xb0>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b04c:	d10c      	bne.n	800b068 <HAL_RCC_OscConfig+0x98>
 800b04e:	4b8b      	ldr	r3, [pc, #556]	; (800b27c <HAL_RCC_OscConfig+0x2ac>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a8a      	ldr	r2, [pc, #552]	; (800b27c <HAL_RCC_OscConfig+0x2ac>)
 800b054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b058:	6013      	str	r3, [r2, #0]
 800b05a:	4b88      	ldr	r3, [pc, #544]	; (800b27c <HAL_RCC_OscConfig+0x2ac>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4a87      	ldr	r2, [pc, #540]	; (800b27c <HAL_RCC_OscConfig+0x2ac>)
 800b060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b064:	6013      	str	r3, [r2, #0]
 800b066:	e00b      	b.n	800b080 <HAL_RCC_OscConfig+0xb0>
 800b068:	4b84      	ldr	r3, [pc, #528]	; (800b27c <HAL_RCC_OscConfig+0x2ac>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a83      	ldr	r2, [pc, #524]	; (800b27c <HAL_RCC_OscConfig+0x2ac>)
 800b06e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b072:	6013      	str	r3, [r2, #0]
 800b074:	4b81      	ldr	r3, [pc, #516]	; (800b27c <HAL_RCC_OscConfig+0x2ac>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4a80      	ldr	r2, [pc, #512]	; (800b27c <HAL_RCC_OscConfig+0x2ac>)
 800b07a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b07e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d013      	beq.n	800b0b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b088:	f7fd ff08 	bl	8008e9c <HAL_GetTick>
 800b08c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b08e:	e008      	b.n	800b0a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b090:	f7fd ff04 	bl	8008e9c <HAL_GetTick>
 800b094:	4602      	mov	r2, r0
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	1ad3      	subs	r3, r2, r3
 800b09a:	2b64      	cmp	r3, #100	; 0x64
 800b09c:	d901      	bls.n	800b0a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b09e:	2303      	movs	r3, #3
 800b0a0:	e204      	b.n	800b4ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b0a2:	4b76      	ldr	r3, [pc, #472]	; (800b27c <HAL_RCC_OscConfig+0x2ac>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d0f0      	beq.n	800b090 <HAL_RCC_OscConfig+0xc0>
 800b0ae:	e014      	b.n	800b0da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b0b0:	f7fd fef4 	bl	8008e9c <HAL_GetTick>
 800b0b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b0b6:	e008      	b.n	800b0ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b0b8:	f7fd fef0 	bl	8008e9c <HAL_GetTick>
 800b0bc:	4602      	mov	r2, r0
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	1ad3      	subs	r3, r2, r3
 800b0c2:	2b64      	cmp	r3, #100	; 0x64
 800b0c4:	d901      	bls.n	800b0ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b0c6:	2303      	movs	r3, #3
 800b0c8:	e1f0      	b.n	800b4ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b0ca:	4b6c      	ldr	r3, [pc, #432]	; (800b27c <HAL_RCC_OscConfig+0x2ac>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d1f0      	bne.n	800b0b8 <HAL_RCC_OscConfig+0xe8>
 800b0d6:	e000      	b.n	800b0da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b0d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f003 0302 	and.w	r3, r3, #2
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d063      	beq.n	800b1ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b0e6:	4b65      	ldr	r3, [pc, #404]	; (800b27c <HAL_RCC_OscConfig+0x2ac>)
 800b0e8:	689b      	ldr	r3, [r3, #8]
 800b0ea:	f003 030c 	and.w	r3, r3, #12
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d00b      	beq.n	800b10a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b0f2:	4b62      	ldr	r3, [pc, #392]	; (800b27c <HAL_RCC_OscConfig+0x2ac>)
 800b0f4:	689b      	ldr	r3, [r3, #8]
 800b0f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b0fa:	2b08      	cmp	r3, #8
 800b0fc:	d11c      	bne.n	800b138 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b0fe:	4b5f      	ldr	r3, [pc, #380]	; (800b27c <HAL_RCC_OscConfig+0x2ac>)
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b106:	2b00      	cmp	r3, #0
 800b108:	d116      	bne.n	800b138 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b10a:	4b5c      	ldr	r3, [pc, #368]	; (800b27c <HAL_RCC_OscConfig+0x2ac>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f003 0302 	and.w	r3, r3, #2
 800b112:	2b00      	cmp	r3, #0
 800b114:	d005      	beq.n	800b122 <HAL_RCC_OscConfig+0x152>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	68db      	ldr	r3, [r3, #12]
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	d001      	beq.n	800b122 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	e1c4      	b.n	800b4ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b122:	4b56      	ldr	r3, [pc, #344]	; (800b27c <HAL_RCC_OscConfig+0x2ac>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	691b      	ldr	r3, [r3, #16]
 800b12e:	00db      	lsls	r3, r3, #3
 800b130:	4952      	ldr	r1, [pc, #328]	; (800b27c <HAL_RCC_OscConfig+0x2ac>)
 800b132:	4313      	orrs	r3, r2
 800b134:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b136:	e03a      	b.n	800b1ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	68db      	ldr	r3, [r3, #12]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d020      	beq.n	800b182 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b140:	4b4f      	ldr	r3, [pc, #316]	; (800b280 <HAL_RCC_OscConfig+0x2b0>)
 800b142:	2201      	movs	r2, #1
 800b144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b146:	f7fd fea9 	bl	8008e9c <HAL_GetTick>
 800b14a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b14c:	e008      	b.n	800b160 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b14e:	f7fd fea5 	bl	8008e9c <HAL_GetTick>
 800b152:	4602      	mov	r2, r0
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	1ad3      	subs	r3, r2, r3
 800b158:	2b02      	cmp	r3, #2
 800b15a:	d901      	bls.n	800b160 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b15c:	2303      	movs	r3, #3
 800b15e:	e1a5      	b.n	800b4ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b160:	4b46      	ldr	r3, [pc, #280]	; (800b27c <HAL_RCC_OscConfig+0x2ac>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f003 0302 	and.w	r3, r3, #2
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d0f0      	beq.n	800b14e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b16c:	4b43      	ldr	r3, [pc, #268]	; (800b27c <HAL_RCC_OscConfig+0x2ac>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	691b      	ldr	r3, [r3, #16]
 800b178:	00db      	lsls	r3, r3, #3
 800b17a:	4940      	ldr	r1, [pc, #256]	; (800b27c <HAL_RCC_OscConfig+0x2ac>)
 800b17c:	4313      	orrs	r3, r2
 800b17e:	600b      	str	r3, [r1, #0]
 800b180:	e015      	b.n	800b1ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b182:	4b3f      	ldr	r3, [pc, #252]	; (800b280 <HAL_RCC_OscConfig+0x2b0>)
 800b184:	2200      	movs	r2, #0
 800b186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b188:	f7fd fe88 	bl	8008e9c <HAL_GetTick>
 800b18c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b18e:	e008      	b.n	800b1a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b190:	f7fd fe84 	bl	8008e9c <HAL_GetTick>
 800b194:	4602      	mov	r2, r0
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	1ad3      	subs	r3, r2, r3
 800b19a:	2b02      	cmp	r3, #2
 800b19c:	d901      	bls.n	800b1a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b19e:	2303      	movs	r3, #3
 800b1a0:	e184      	b.n	800b4ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b1a2:	4b36      	ldr	r3, [pc, #216]	; (800b27c <HAL_RCC_OscConfig+0x2ac>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f003 0302 	and.w	r3, r3, #2
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d1f0      	bne.n	800b190 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f003 0308 	and.w	r3, r3, #8
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d030      	beq.n	800b21c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	695b      	ldr	r3, [r3, #20]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d016      	beq.n	800b1f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b1c2:	4b30      	ldr	r3, [pc, #192]	; (800b284 <HAL_RCC_OscConfig+0x2b4>)
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1c8:	f7fd fe68 	bl	8008e9c <HAL_GetTick>
 800b1cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b1ce:	e008      	b.n	800b1e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b1d0:	f7fd fe64 	bl	8008e9c <HAL_GetTick>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	1ad3      	subs	r3, r2, r3
 800b1da:	2b02      	cmp	r3, #2
 800b1dc:	d901      	bls.n	800b1e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b1de:	2303      	movs	r3, #3
 800b1e0:	e164      	b.n	800b4ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b1e2:	4b26      	ldr	r3, [pc, #152]	; (800b27c <HAL_RCC_OscConfig+0x2ac>)
 800b1e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1e6:	f003 0302 	and.w	r3, r3, #2
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d0f0      	beq.n	800b1d0 <HAL_RCC_OscConfig+0x200>
 800b1ee:	e015      	b.n	800b21c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b1f0:	4b24      	ldr	r3, [pc, #144]	; (800b284 <HAL_RCC_OscConfig+0x2b4>)
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b1f6:	f7fd fe51 	bl	8008e9c <HAL_GetTick>
 800b1fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b1fc:	e008      	b.n	800b210 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b1fe:	f7fd fe4d 	bl	8008e9c <HAL_GetTick>
 800b202:	4602      	mov	r2, r0
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	1ad3      	subs	r3, r2, r3
 800b208:	2b02      	cmp	r3, #2
 800b20a:	d901      	bls.n	800b210 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b20c:	2303      	movs	r3, #3
 800b20e:	e14d      	b.n	800b4ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b210:	4b1a      	ldr	r3, [pc, #104]	; (800b27c <HAL_RCC_OscConfig+0x2ac>)
 800b212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b214:	f003 0302 	and.w	r3, r3, #2
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d1f0      	bne.n	800b1fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f003 0304 	and.w	r3, r3, #4
 800b224:	2b00      	cmp	r3, #0
 800b226:	f000 80a0 	beq.w	800b36a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b22a:	2300      	movs	r3, #0
 800b22c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b22e:	4b13      	ldr	r3, [pc, #76]	; (800b27c <HAL_RCC_OscConfig+0x2ac>)
 800b230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b236:	2b00      	cmp	r3, #0
 800b238:	d10f      	bne.n	800b25a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b23a:	2300      	movs	r3, #0
 800b23c:	60bb      	str	r3, [r7, #8]
 800b23e:	4b0f      	ldr	r3, [pc, #60]	; (800b27c <HAL_RCC_OscConfig+0x2ac>)
 800b240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b242:	4a0e      	ldr	r2, [pc, #56]	; (800b27c <HAL_RCC_OscConfig+0x2ac>)
 800b244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b248:	6413      	str	r3, [r2, #64]	; 0x40
 800b24a:	4b0c      	ldr	r3, [pc, #48]	; (800b27c <HAL_RCC_OscConfig+0x2ac>)
 800b24c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b24e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b252:	60bb      	str	r3, [r7, #8]
 800b254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b256:	2301      	movs	r3, #1
 800b258:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b25a:	4b0b      	ldr	r3, [pc, #44]	; (800b288 <HAL_RCC_OscConfig+0x2b8>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b262:	2b00      	cmp	r3, #0
 800b264:	d121      	bne.n	800b2aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b266:	4b08      	ldr	r3, [pc, #32]	; (800b288 <HAL_RCC_OscConfig+0x2b8>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4a07      	ldr	r2, [pc, #28]	; (800b288 <HAL_RCC_OscConfig+0x2b8>)
 800b26c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b270:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b272:	f7fd fe13 	bl	8008e9c <HAL_GetTick>
 800b276:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b278:	e011      	b.n	800b29e <HAL_RCC_OscConfig+0x2ce>
 800b27a:	bf00      	nop
 800b27c:	40023800 	.word	0x40023800
 800b280:	42470000 	.word	0x42470000
 800b284:	42470e80 	.word	0x42470e80
 800b288:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b28c:	f7fd fe06 	bl	8008e9c <HAL_GetTick>
 800b290:	4602      	mov	r2, r0
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	1ad3      	subs	r3, r2, r3
 800b296:	2b02      	cmp	r3, #2
 800b298:	d901      	bls.n	800b29e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800b29a:	2303      	movs	r3, #3
 800b29c:	e106      	b.n	800b4ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b29e:	4b85      	ldr	r3, [pc, #532]	; (800b4b4 <HAL_RCC_OscConfig+0x4e4>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d0f0      	beq.n	800b28c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	689b      	ldr	r3, [r3, #8]
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d106      	bne.n	800b2c0 <HAL_RCC_OscConfig+0x2f0>
 800b2b2:	4b81      	ldr	r3, [pc, #516]	; (800b4b8 <HAL_RCC_OscConfig+0x4e8>)
 800b2b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2b6:	4a80      	ldr	r2, [pc, #512]	; (800b4b8 <HAL_RCC_OscConfig+0x4e8>)
 800b2b8:	f043 0301 	orr.w	r3, r3, #1
 800b2bc:	6713      	str	r3, [r2, #112]	; 0x70
 800b2be:	e01c      	b.n	800b2fa <HAL_RCC_OscConfig+0x32a>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	689b      	ldr	r3, [r3, #8]
 800b2c4:	2b05      	cmp	r3, #5
 800b2c6:	d10c      	bne.n	800b2e2 <HAL_RCC_OscConfig+0x312>
 800b2c8:	4b7b      	ldr	r3, [pc, #492]	; (800b4b8 <HAL_RCC_OscConfig+0x4e8>)
 800b2ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2cc:	4a7a      	ldr	r2, [pc, #488]	; (800b4b8 <HAL_RCC_OscConfig+0x4e8>)
 800b2ce:	f043 0304 	orr.w	r3, r3, #4
 800b2d2:	6713      	str	r3, [r2, #112]	; 0x70
 800b2d4:	4b78      	ldr	r3, [pc, #480]	; (800b4b8 <HAL_RCC_OscConfig+0x4e8>)
 800b2d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2d8:	4a77      	ldr	r2, [pc, #476]	; (800b4b8 <HAL_RCC_OscConfig+0x4e8>)
 800b2da:	f043 0301 	orr.w	r3, r3, #1
 800b2de:	6713      	str	r3, [r2, #112]	; 0x70
 800b2e0:	e00b      	b.n	800b2fa <HAL_RCC_OscConfig+0x32a>
 800b2e2:	4b75      	ldr	r3, [pc, #468]	; (800b4b8 <HAL_RCC_OscConfig+0x4e8>)
 800b2e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2e6:	4a74      	ldr	r2, [pc, #464]	; (800b4b8 <HAL_RCC_OscConfig+0x4e8>)
 800b2e8:	f023 0301 	bic.w	r3, r3, #1
 800b2ec:	6713      	str	r3, [r2, #112]	; 0x70
 800b2ee:	4b72      	ldr	r3, [pc, #456]	; (800b4b8 <HAL_RCC_OscConfig+0x4e8>)
 800b2f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2f2:	4a71      	ldr	r2, [pc, #452]	; (800b4b8 <HAL_RCC_OscConfig+0x4e8>)
 800b2f4:	f023 0304 	bic.w	r3, r3, #4
 800b2f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	689b      	ldr	r3, [r3, #8]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d015      	beq.n	800b32e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b302:	f7fd fdcb 	bl	8008e9c <HAL_GetTick>
 800b306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b308:	e00a      	b.n	800b320 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b30a:	f7fd fdc7 	bl	8008e9c <HAL_GetTick>
 800b30e:	4602      	mov	r2, r0
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	1ad3      	subs	r3, r2, r3
 800b314:	f241 3288 	movw	r2, #5000	; 0x1388
 800b318:	4293      	cmp	r3, r2
 800b31a:	d901      	bls.n	800b320 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800b31c:	2303      	movs	r3, #3
 800b31e:	e0c5      	b.n	800b4ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b320:	4b65      	ldr	r3, [pc, #404]	; (800b4b8 <HAL_RCC_OscConfig+0x4e8>)
 800b322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b324:	f003 0302 	and.w	r3, r3, #2
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d0ee      	beq.n	800b30a <HAL_RCC_OscConfig+0x33a>
 800b32c:	e014      	b.n	800b358 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b32e:	f7fd fdb5 	bl	8008e9c <HAL_GetTick>
 800b332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b334:	e00a      	b.n	800b34c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b336:	f7fd fdb1 	bl	8008e9c <HAL_GetTick>
 800b33a:	4602      	mov	r2, r0
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	1ad3      	subs	r3, r2, r3
 800b340:	f241 3288 	movw	r2, #5000	; 0x1388
 800b344:	4293      	cmp	r3, r2
 800b346:	d901      	bls.n	800b34c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800b348:	2303      	movs	r3, #3
 800b34a:	e0af      	b.n	800b4ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b34c:	4b5a      	ldr	r3, [pc, #360]	; (800b4b8 <HAL_RCC_OscConfig+0x4e8>)
 800b34e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b350:	f003 0302 	and.w	r3, r3, #2
 800b354:	2b00      	cmp	r3, #0
 800b356:	d1ee      	bne.n	800b336 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b358:	7dfb      	ldrb	r3, [r7, #23]
 800b35a:	2b01      	cmp	r3, #1
 800b35c:	d105      	bne.n	800b36a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b35e:	4b56      	ldr	r3, [pc, #344]	; (800b4b8 <HAL_RCC_OscConfig+0x4e8>)
 800b360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b362:	4a55      	ldr	r2, [pc, #340]	; (800b4b8 <HAL_RCC_OscConfig+0x4e8>)
 800b364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b368:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	699b      	ldr	r3, [r3, #24]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	f000 809b 	beq.w	800b4aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b374:	4b50      	ldr	r3, [pc, #320]	; (800b4b8 <HAL_RCC_OscConfig+0x4e8>)
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	f003 030c 	and.w	r3, r3, #12
 800b37c:	2b08      	cmp	r3, #8
 800b37e:	d05c      	beq.n	800b43a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	699b      	ldr	r3, [r3, #24]
 800b384:	2b02      	cmp	r3, #2
 800b386:	d141      	bne.n	800b40c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b388:	4b4c      	ldr	r3, [pc, #304]	; (800b4bc <HAL_RCC_OscConfig+0x4ec>)
 800b38a:	2200      	movs	r2, #0
 800b38c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b38e:	f7fd fd85 	bl	8008e9c <HAL_GetTick>
 800b392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b394:	e008      	b.n	800b3a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b396:	f7fd fd81 	bl	8008e9c <HAL_GetTick>
 800b39a:	4602      	mov	r2, r0
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	1ad3      	subs	r3, r2, r3
 800b3a0:	2b02      	cmp	r3, #2
 800b3a2:	d901      	bls.n	800b3a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800b3a4:	2303      	movs	r3, #3
 800b3a6:	e081      	b.n	800b4ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b3a8:	4b43      	ldr	r3, [pc, #268]	; (800b4b8 <HAL_RCC_OscConfig+0x4e8>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d1f0      	bne.n	800b396 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	69da      	ldr	r2, [r3, #28]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6a1b      	ldr	r3, [r3, #32]
 800b3bc:	431a      	orrs	r2, r3
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c2:	019b      	lsls	r3, r3, #6
 800b3c4:	431a      	orrs	r2, r3
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ca:	085b      	lsrs	r3, r3, #1
 800b3cc:	3b01      	subs	r3, #1
 800b3ce:	041b      	lsls	r3, r3, #16
 800b3d0:	431a      	orrs	r2, r3
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3d6:	061b      	lsls	r3, r3, #24
 800b3d8:	4937      	ldr	r1, [pc, #220]	; (800b4b8 <HAL_RCC_OscConfig+0x4e8>)
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b3de:	4b37      	ldr	r3, [pc, #220]	; (800b4bc <HAL_RCC_OscConfig+0x4ec>)
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b3e4:	f7fd fd5a 	bl	8008e9c <HAL_GetTick>
 800b3e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b3ea:	e008      	b.n	800b3fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b3ec:	f7fd fd56 	bl	8008e9c <HAL_GetTick>
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	1ad3      	subs	r3, r2, r3
 800b3f6:	2b02      	cmp	r3, #2
 800b3f8:	d901      	bls.n	800b3fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800b3fa:	2303      	movs	r3, #3
 800b3fc:	e056      	b.n	800b4ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b3fe:	4b2e      	ldr	r3, [pc, #184]	; (800b4b8 <HAL_RCC_OscConfig+0x4e8>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b406:	2b00      	cmp	r3, #0
 800b408:	d0f0      	beq.n	800b3ec <HAL_RCC_OscConfig+0x41c>
 800b40a:	e04e      	b.n	800b4aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b40c:	4b2b      	ldr	r3, [pc, #172]	; (800b4bc <HAL_RCC_OscConfig+0x4ec>)
 800b40e:	2200      	movs	r2, #0
 800b410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b412:	f7fd fd43 	bl	8008e9c <HAL_GetTick>
 800b416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b418:	e008      	b.n	800b42c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b41a:	f7fd fd3f 	bl	8008e9c <HAL_GetTick>
 800b41e:	4602      	mov	r2, r0
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	1ad3      	subs	r3, r2, r3
 800b424:	2b02      	cmp	r3, #2
 800b426:	d901      	bls.n	800b42c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800b428:	2303      	movs	r3, #3
 800b42a:	e03f      	b.n	800b4ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b42c:	4b22      	ldr	r3, [pc, #136]	; (800b4b8 <HAL_RCC_OscConfig+0x4e8>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b434:	2b00      	cmp	r3, #0
 800b436:	d1f0      	bne.n	800b41a <HAL_RCC_OscConfig+0x44a>
 800b438:	e037      	b.n	800b4aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	699b      	ldr	r3, [r3, #24]
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d101      	bne.n	800b446 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800b442:	2301      	movs	r3, #1
 800b444:	e032      	b.n	800b4ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b446:	4b1c      	ldr	r3, [pc, #112]	; (800b4b8 <HAL_RCC_OscConfig+0x4e8>)
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	699b      	ldr	r3, [r3, #24]
 800b450:	2b01      	cmp	r3, #1
 800b452:	d028      	beq.n	800b4a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b45e:	429a      	cmp	r2, r3
 800b460:	d121      	bne.n	800b4a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d11a      	bne.n	800b4a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b470:	68fa      	ldr	r2, [r7, #12]
 800b472:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b476:	4013      	ands	r3, r2
 800b478:	687a      	ldr	r2, [r7, #4]
 800b47a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b47c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b47e:	4293      	cmp	r3, r2
 800b480:	d111      	bne.n	800b4a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b48c:	085b      	lsrs	r3, r3, #1
 800b48e:	3b01      	subs	r3, #1
 800b490:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b492:	429a      	cmp	r2, r3
 800b494:	d107      	bne.n	800b4a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d001      	beq.n	800b4aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	e000      	b.n	800b4ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800b4aa:	2300      	movs	r3, #0
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3718      	adds	r7, #24
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}
 800b4b4:	40007000 	.word	0x40007000
 800b4b8:	40023800 	.word	0x40023800
 800b4bc:	42470060 	.word	0x42470060

0800b4c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b084      	sub	sp, #16
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d101      	bne.n	800b4d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	e0cc      	b.n	800b66e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b4d4:	4b68      	ldr	r3, [pc, #416]	; (800b678 <HAL_RCC_ClockConfig+0x1b8>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f003 030f 	and.w	r3, r3, #15
 800b4dc:	683a      	ldr	r2, [r7, #0]
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d90c      	bls.n	800b4fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b4e2:	4b65      	ldr	r3, [pc, #404]	; (800b678 <HAL_RCC_ClockConfig+0x1b8>)
 800b4e4:	683a      	ldr	r2, [r7, #0]
 800b4e6:	b2d2      	uxtb	r2, r2
 800b4e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4ea:	4b63      	ldr	r3, [pc, #396]	; (800b678 <HAL_RCC_ClockConfig+0x1b8>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f003 030f 	and.w	r3, r3, #15
 800b4f2:	683a      	ldr	r2, [r7, #0]
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d001      	beq.n	800b4fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	e0b8      	b.n	800b66e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f003 0302 	and.w	r3, r3, #2
 800b504:	2b00      	cmp	r3, #0
 800b506:	d020      	beq.n	800b54a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f003 0304 	and.w	r3, r3, #4
 800b510:	2b00      	cmp	r3, #0
 800b512:	d005      	beq.n	800b520 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b514:	4b59      	ldr	r3, [pc, #356]	; (800b67c <HAL_RCC_ClockConfig+0x1bc>)
 800b516:	689b      	ldr	r3, [r3, #8]
 800b518:	4a58      	ldr	r2, [pc, #352]	; (800b67c <HAL_RCC_ClockConfig+0x1bc>)
 800b51a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b51e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f003 0308 	and.w	r3, r3, #8
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d005      	beq.n	800b538 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b52c:	4b53      	ldr	r3, [pc, #332]	; (800b67c <HAL_RCC_ClockConfig+0x1bc>)
 800b52e:	689b      	ldr	r3, [r3, #8]
 800b530:	4a52      	ldr	r2, [pc, #328]	; (800b67c <HAL_RCC_ClockConfig+0x1bc>)
 800b532:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b536:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b538:	4b50      	ldr	r3, [pc, #320]	; (800b67c <HAL_RCC_ClockConfig+0x1bc>)
 800b53a:	689b      	ldr	r3, [r3, #8]
 800b53c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	689b      	ldr	r3, [r3, #8]
 800b544:	494d      	ldr	r1, [pc, #308]	; (800b67c <HAL_RCC_ClockConfig+0x1bc>)
 800b546:	4313      	orrs	r3, r2
 800b548:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f003 0301 	and.w	r3, r3, #1
 800b552:	2b00      	cmp	r3, #0
 800b554:	d044      	beq.n	800b5e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	685b      	ldr	r3, [r3, #4]
 800b55a:	2b01      	cmp	r3, #1
 800b55c:	d107      	bne.n	800b56e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b55e:	4b47      	ldr	r3, [pc, #284]	; (800b67c <HAL_RCC_ClockConfig+0x1bc>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b566:	2b00      	cmp	r3, #0
 800b568:	d119      	bne.n	800b59e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b56a:	2301      	movs	r3, #1
 800b56c:	e07f      	b.n	800b66e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	2b02      	cmp	r3, #2
 800b574:	d003      	beq.n	800b57e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b57a:	2b03      	cmp	r3, #3
 800b57c:	d107      	bne.n	800b58e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b57e:	4b3f      	ldr	r3, [pc, #252]	; (800b67c <HAL_RCC_ClockConfig+0x1bc>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b586:	2b00      	cmp	r3, #0
 800b588:	d109      	bne.n	800b59e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b58a:	2301      	movs	r3, #1
 800b58c:	e06f      	b.n	800b66e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b58e:	4b3b      	ldr	r3, [pc, #236]	; (800b67c <HAL_RCC_ClockConfig+0x1bc>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f003 0302 	and.w	r3, r3, #2
 800b596:	2b00      	cmp	r3, #0
 800b598:	d101      	bne.n	800b59e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b59a:	2301      	movs	r3, #1
 800b59c:	e067      	b.n	800b66e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b59e:	4b37      	ldr	r3, [pc, #220]	; (800b67c <HAL_RCC_ClockConfig+0x1bc>)
 800b5a0:	689b      	ldr	r3, [r3, #8]
 800b5a2:	f023 0203 	bic.w	r2, r3, #3
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	4934      	ldr	r1, [pc, #208]	; (800b67c <HAL_RCC_ClockConfig+0x1bc>)
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b5b0:	f7fd fc74 	bl	8008e9c <HAL_GetTick>
 800b5b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b5b6:	e00a      	b.n	800b5ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b5b8:	f7fd fc70 	bl	8008e9c <HAL_GetTick>
 800b5bc:	4602      	mov	r2, r0
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	1ad3      	subs	r3, r2, r3
 800b5c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d901      	bls.n	800b5ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b5ca:	2303      	movs	r3, #3
 800b5cc:	e04f      	b.n	800b66e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b5ce:	4b2b      	ldr	r3, [pc, #172]	; (800b67c <HAL_RCC_ClockConfig+0x1bc>)
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	f003 020c 	and.w	r2, r3, #12
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d1eb      	bne.n	800b5b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b5e0:	4b25      	ldr	r3, [pc, #148]	; (800b678 <HAL_RCC_ClockConfig+0x1b8>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f003 030f 	and.w	r3, r3, #15
 800b5e8:	683a      	ldr	r2, [r7, #0]
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d20c      	bcs.n	800b608 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b5ee:	4b22      	ldr	r3, [pc, #136]	; (800b678 <HAL_RCC_ClockConfig+0x1b8>)
 800b5f0:	683a      	ldr	r2, [r7, #0]
 800b5f2:	b2d2      	uxtb	r2, r2
 800b5f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b5f6:	4b20      	ldr	r3, [pc, #128]	; (800b678 <HAL_RCC_ClockConfig+0x1b8>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f003 030f 	and.w	r3, r3, #15
 800b5fe:	683a      	ldr	r2, [r7, #0]
 800b600:	429a      	cmp	r2, r3
 800b602:	d001      	beq.n	800b608 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b604:	2301      	movs	r3, #1
 800b606:	e032      	b.n	800b66e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f003 0304 	and.w	r3, r3, #4
 800b610:	2b00      	cmp	r3, #0
 800b612:	d008      	beq.n	800b626 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b614:	4b19      	ldr	r3, [pc, #100]	; (800b67c <HAL_RCC_ClockConfig+0x1bc>)
 800b616:	689b      	ldr	r3, [r3, #8]
 800b618:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	68db      	ldr	r3, [r3, #12]
 800b620:	4916      	ldr	r1, [pc, #88]	; (800b67c <HAL_RCC_ClockConfig+0x1bc>)
 800b622:	4313      	orrs	r3, r2
 800b624:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f003 0308 	and.w	r3, r3, #8
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d009      	beq.n	800b646 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b632:	4b12      	ldr	r3, [pc, #72]	; (800b67c <HAL_RCC_ClockConfig+0x1bc>)
 800b634:	689b      	ldr	r3, [r3, #8]
 800b636:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	691b      	ldr	r3, [r3, #16]
 800b63e:	00db      	lsls	r3, r3, #3
 800b640:	490e      	ldr	r1, [pc, #56]	; (800b67c <HAL_RCC_ClockConfig+0x1bc>)
 800b642:	4313      	orrs	r3, r2
 800b644:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b646:	f000 f821 	bl	800b68c <HAL_RCC_GetSysClockFreq>
 800b64a:	4602      	mov	r2, r0
 800b64c:	4b0b      	ldr	r3, [pc, #44]	; (800b67c <HAL_RCC_ClockConfig+0x1bc>)
 800b64e:	689b      	ldr	r3, [r3, #8]
 800b650:	091b      	lsrs	r3, r3, #4
 800b652:	f003 030f 	and.w	r3, r3, #15
 800b656:	490a      	ldr	r1, [pc, #40]	; (800b680 <HAL_RCC_ClockConfig+0x1c0>)
 800b658:	5ccb      	ldrb	r3, [r1, r3]
 800b65a:	fa22 f303 	lsr.w	r3, r2, r3
 800b65e:	4a09      	ldr	r2, [pc, #36]	; (800b684 <HAL_RCC_ClockConfig+0x1c4>)
 800b660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b662:	4b09      	ldr	r3, [pc, #36]	; (800b688 <HAL_RCC_ClockConfig+0x1c8>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4618      	mov	r0, r3
 800b668:	f7f7 ff24 	bl	80034b4 <HAL_InitTick>

  return HAL_OK;
 800b66c:	2300      	movs	r3, #0
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3710      	adds	r7, #16
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	40023c00 	.word	0x40023c00
 800b67c:	40023800 	.word	0x40023800
 800b680:	0801d5b4 	.word	0x0801d5b4
 800b684:	20000088 	.word	0x20000088
 800b688:	200000cc 	.word	0x200000cc

0800b68c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b68c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b690:	b084      	sub	sp, #16
 800b692:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b694:	2300      	movs	r3, #0
 800b696:	607b      	str	r3, [r7, #4]
 800b698:	2300      	movs	r3, #0
 800b69a:	60fb      	str	r3, [r7, #12]
 800b69c:	2300      	movs	r3, #0
 800b69e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b6a4:	4b67      	ldr	r3, [pc, #412]	; (800b844 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	f003 030c 	and.w	r3, r3, #12
 800b6ac:	2b08      	cmp	r3, #8
 800b6ae:	d00d      	beq.n	800b6cc <HAL_RCC_GetSysClockFreq+0x40>
 800b6b0:	2b08      	cmp	r3, #8
 800b6b2:	f200 80bd 	bhi.w	800b830 <HAL_RCC_GetSysClockFreq+0x1a4>
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d002      	beq.n	800b6c0 <HAL_RCC_GetSysClockFreq+0x34>
 800b6ba:	2b04      	cmp	r3, #4
 800b6bc:	d003      	beq.n	800b6c6 <HAL_RCC_GetSysClockFreq+0x3a>
 800b6be:	e0b7      	b.n	800b830 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b6c0:	4b61      	ldr	r3, [pc, #388]	; (800b848 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800b6c2:	60bb      	str	r3, [r7, #8]
       break;
 800b6c4:	e0b7      	b.n	800b836 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b6c6:	4b60      	ldr	r3, [pc, #384]	; (800b848 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800b6c8:	60bb      	str	r3, [r7, #8]
      break;
 800b6ca:	e0b4      	b.n	800b836 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b6cc:	4b5d      	ldr	r3, [pc, #372]	; (800b844 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b6d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b6d6:	4b5b      	ldr	r3, [pc, #364]	; (800b844 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d04d      	beq.n	800b77e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b6e2:	4b58      	ldr	r3, [pc, #352]	; (800b844 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	099b      	lsrs	r3, r3, #6
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	f04f 0300 	mov.w	r3, #0
 800b6ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b6f2:	f04f 0100 	mov.w	r1, #0
 800b6f6:	ea02 0800 	and.w	r8, r2, r0
 800b6fa:	ea03 0901 	and.w	r9, r3, r1
 800b6fe:	4640      	mov	r0, r8
 800b700:	4649      	mov	r1, r9
 800b702:	f04f 0200 	mov.w	r2, #0
 800b706:	f04f 0300 	mov.w	r3, #0
 800b70a:	014b      	lsls	r3, r1, #5
 800b70c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b710:	0142      	lsls	r2, r0, #5
 800b712:	4610      	mov	r0, r2
 800b714:	4619      	mov	r1, r3
 800b716:	ebb0 0008 	subs.w	r0, r0, r8
 800b71a:	eb61 0109 	sbc.w	r1, r1, r9
 800b71e:	f04f 0200 	mov.w	r2, #0
 800b722:	f04f 0300 	mov.w	r3, #0
 800b726:	018b      	lsls	r3, r1, #6
 800b728:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b72c:	0182      	lsls	r2, r0, #6
 800b72e:	1a12      	subs	r2, r2, r0
 800b730:	eb63 0301 	sbc.w	r3, r3, r1
 800b734:	f04f 0000 	mov.w	r0, #0
 800b738:	f04f 0100 	mov.w	r1, #0
 800b73c:	00d9      	lsls	r1, r3, #3
 800b73e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b742:	00d0      	lsls	r0, r2, #3
 800b744:	4602      	mov	r2, r0
 800b746:	460b      	mov	r3, r1
 800b748:	eb12 0208 	adds.w	r2, r2, r8
 800b74c:	eb43 0309 	adc.w	r3, r3, r9
 800b750:	f04f 0000 	mov.w	r0, #0
 800b754:	f04f 0100 	mov.w	r1, #0
 800b758:	0299      	lsls	r1, r3, #10
 800b75a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b75e:	0290      	lsls	r0, r2, #10
 800b760:	4602      	mov	r2, r0
 800b762:	460b      	mov	r3, r1
 800b764:	4610      	mov	r0, r2
 800b766:	4619      	mov	r1, r3
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	461a      	mov	r2, r3
 800b76c:	f04f 0300 	mov.w	r3, #0
 800b770:	f7f5 faaa 	bl	8000cc8 <__aeabi_uldivmod>
 800b774:	4602      	mov	r2, r0
 800b776:	460b      	mov	r3, r1
 800b778:	4613      	mov	r3, r2
 800b77a:	60fb      	str	r3, [r7, #12]
 800b77c:	e04a      	b.n	800b814 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b77e:	4b31      	ldr	r3, [pc, #196]	; (800b844 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	099b      	lsrs	r3, r3, #6
 800b784:	461a      	mov	r2, r3
 800b786:	f04f 0300 	mov.w	r3, #0
 800b78a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b78e:	f04f 0100 	mov.w	r1, #0
 800b792:	ea02 0400 	and.w	r4, r2, r0
 800b796:	ea03 0501 	and.w	r5, r3, r1
 800b79a:	4620      	mov	r0, r4
 800b79c:	4629      	mov	r1, r5
 800b79e:	f04f 0200 	mov.w	r2, #0
 800b7a2:	f04f 0300 	mov.w	r3, #0
 800b7a6:	014b      	lsls	r3, r1, #5
 800b7a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b7ac:	0142      	lsls	r2, r0, #5
 800b7ae:	4610      	mov	r0, r2
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	1b00      	subs	r0, r0, r4
 800b7b4:	eb61 0105 	sbc.w	r1, r1, r5
 800b7b8:	f04f 0200 	mov.w	r2, #0
 800b7bc:	f04f 0300 	mov.w	r3, #0
 800b7c0:	018b      	lsls	r3, r1, #6
 800b7c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b7c6:	0182      	lsls	r2, r0, #6
 800b7c8:	1a12      	subs	r2, r2, r0
 800b7ca:	eb63 0301 	sbc.w	r3, r3, r1
 800b7ce:	f04f 0000 	mov.w	r0, #0
 800b7d2:	f04f 0100 	mov.w	r1, #0
 800b7d6:	00d9      	lsls	r1, r3, #3
 800b7d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b7dc:	00d0      	lsls	r0, r2, #3
 800b7de:	4602      	mov	r2, r0
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	1912      	adds	r2, r2, r4
 800b7e4:	eb45 0303 	adc.w	r3, r5, r3
 800b7e8:	f04f 0000 	mov.w	r0, #0
 800b7ec:	f04f 0100 	mov.w	r1, #0
 800b7f0:	0299      	lsls	r1, r3, #10
 800b7f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b7f6:	0290      	lsls	r0, r2, #10
 800b7f8:	4602      	mov	r2, r0
 800b7fa:	460b      	mov	r3, r1
 800b7fc:	4610      	mov	r0, r2
 800b7fe:	4619      	mov	r1, r3
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	461a      	mov	r2, r3
 800b804:	f04f 0300 	mov.w	r3, #0
 800b808:	f7f5 fa5e 	bl	8000cc8 <__aeabi_uldivmod>
 800b80c:	4602      	mov	r2, r0
 800b80e:	460b      	mov	r3, r1
 800b810:	4613      	mov	r3, r2
 800b812:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b814:	4b0b      	ldr	r3, [pc, #44]	; (800b844 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	0c1b      	lsrs	r3, r3, #16
 800b81a:	f003 0303 	and.w	r3, r3, #3
 800b81e:	3301      	adds	r3, #1
 800b820:	005b      	lsls	r3, r3, #1
 800b822:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b824:	68fa      	ldr	r2, [r7, #12]
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	fbb2 f3f3 	udiv	r3, r2, r3
 800b82c:	60bb      	str	r3, [r7, #8]
      break;
 800b82e:	e002      	b.n	800b836 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b830:	4b05      	ldr	r3, [pc, #20]	; (800b848 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800b832:	60bb      	str	r3, [r7, #8]
      break;
 800b834:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b836:	68bb      	ldr	r3, [r7, #8]
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3710      	adds	r7, #16
 800b83c:	46bd      	mov	sp, r7
 800b83e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b842:	bf00      	nop
 800b844:	40023800 	.word	0x40023800
 800b848:	00f42400 	.word	0x00f42400

0800b84c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b84c:	b480      	push	{r7}
 800b84e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b850:	4b03      	ldr	r3, [pc, #12]	; (800b860 <HAL_RCC_GetHCLKFreq+0x14>)
 800b852:	681b      	ldr	r3, [r3, #0]
}
 800b854:	4618      	mov	r0, r3
 800b856:	46bd      	mov	sp, r7
 800b858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85c:	4770      	bx	lr
 800b85e:	bf00      	nop
 800b860:	20000088 	.word	0x20000088

0800b864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b868:	f7ff fff0 	bl	800b84c <HAL_RCC_GetHCLKFreq>
 800b86c:	4602      	mov	r2, r0
 800b86e:	4b05      	ldr	r3, [pc, #20]	; (800b884 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b870:	689b      	ldr	r3, [r3, #8]
 800b872:	0a9b      	lsrs	r3, r3, #10
 800b874:	f003 0307 	and.w	r3, r3, #7
 800b878:	4903      	ldr	r1, [pc, #12]	; (800b888 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b87a:	5ccb      	ldrb	r3, [r1, r3]
 800b87c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b880:	4618      	mov	r0, r3
 800b882:	bd80      	pop	{r7, pc}
 800b884:	40023800 	.word	0x40023800
 800b888:	0801d5c4 	.word	0x0801d5c4

0800b88c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b890:	f7ff ffdc 	bl	800b84c <HAL_RCC_GetHCLKFreq>
 800b894:	4602      	mov	r2, r0
 800b896:	4b05      	ldr	r3, [pc, #20]	; (800b8ac <HAL_RCC_GetPCLK2Freq+0x20>)
 800b898:	689b      	ldr	r3, [r3, #8]
 800b89a:	0b5b      	lsrs	r3, r3, #13
 800b89c:	f003 0307 	and.w	r3, r3, #7
 800b8a0:	4903      	ldr	r1, [pc, #12]	; (800b8b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b8a2:	5ccb      	ldrb	r3, [r1, r3]
 800b8a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	bd80      	pop	{r7, pc}
 800b8ac:	40023800 	.word	0x40023800
 800b8b0:	0801d5c4 	.word	0x0801d5c4

0800b8b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b083      	sub	sp, #12
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	220f      	movs	r2, #15
 800b8c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b8c4:	4b12      	ldr	r3, [pc, #72]	; (800b910 <HAL_RCC_GetClockConfig+0x5c>)
 800b8c6:	689b      	ldr	r3, [r3, #8]
 800b8c8:	f003 0203 	and.w	r2, r3, #3
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b8d0:	4b0f      	ldr	r3, [pc, #60]	; (800b910 <HAL_RCC_GetClockConfig+0x5c>)
 800b8d2:	689b      	ldr	r3, [r3, #8]
 800b8d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b8dc:	4b0c      	ldr	r3, [pc, #48]	; (800b910 <HAL_RCC_GetClockConfig+0x5c>)
 800b8de:	689b      	ldr	r3, [r3, #8]
 800b8e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800b8e8:	4b09      	ldr	r3, [pc, #36]	; (800b910 <HAL_RCC_GetClockConfig+0x5c>)
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	08db      	lsrs	r3, r3, #3
 800b8ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b8f6:	4b07      	ldr	r3, [pc, #28]	; (800b914 <HAL_RCC_GetClockConfig+0x60>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f003 020f 	and.w	r2, r3, #15
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	601a      	str	r2, [r3, #0]
}
 800b902:	bf00      	nop
 800b904:	370c      	adds	r7, #12
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr
 800b90e:	bf00      	nop
 800b910:	40023800 	.word	0x40023800
 800b914:	40023c00 	.word	0x40023c00

0800b918 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b086      	sub	sp, #24
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b920:	2300      	movs	r3, #0
 800b922:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800b924:	2300      	movs	r3, #0
 800b926:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f003 0301 	and.w	r3, r3, #1
 800b930:	2b00      	cmp	r3, #0
 800b932:	d10b      	bne.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d105      	bne.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d075      	beq.n	800ba38 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b94c:	4bad      	ldr	r3, [pc, #692]	; (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800b94e:	2200      	movs	r2, #0
 800b950:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b952:	f7fd faa3 	bl	8008e9c <HAL_GetTick>
 800b956:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b958:	e008      	b.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b95a:	f7fd fa9f 	bl	8008e9c <HAL_GetTick>
 800b95e:	4602      	mov	r2, r0
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	1ad3      	subs	r3, r2, r3
 800b964:	2b02      	cmp	r3, #2
 800b966:	d901      	bls.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b968:	2303      	movs	r3, #3
 800b96a:	e18b      	b.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b96c:	4ba6      	ldr	r3, [pc, #664]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b974:	2b00      	cmp	r3, #0
 800b976:	d1f0      	bne.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f003 0301 	and.w	r3, r3, #1
 800b980:	2b00      	cmp	r3, #0
 800b982:	d009      	beq.n	800b998 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	685b      	ldr	r3, [r3, #4]
 800b988:	019a      	lsls	r2, r3, #6
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	689b      	ldr	r3, [r3, #8]
 800b98e:	071b      	lsls	r3, r3, #28
 800b990:	499d      	ldr	r1, [pc, #628]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b992:	4313      	orrs	r3, r2
 800b994:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f003 0302 	and.w	r3, r3, #2
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d01f      	beq.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b9a4:	4b98      	ldr	r3, [pc, #608]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b9a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9aa:	0f1b      	lsrs	r3, r3, #28
 800b9ac:	f003 0307 	and.w	r3, r3, #7
 800b9b0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	685b      	ldr	r3, [r3, #4]
 800b9b6:	019a      	lsls	r2, r3, #6
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	68db      	ldr	r3, [r3, #12]
 800b9bc:	061b      	lsls	r3, r3, #24
 800b9be:	431a      	orrs	r2, r3
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	071b      	lsls	r3, r3, #28
 800b9c4:	4990      	ldr	r1, [pc, #576]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b9cc:	4b8e      	ldr	r3, [pc, #568]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b9ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9d2:	f023 021f 	bic.w	r2, r3, #31
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	69db      	ldr	r3, [r3, #28]
 800b9da:	3b01      	subs	r3, #1
 800b9dc:	498a      	ldr	r1, [pc, #552]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d00d      	beq.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	019a      	lsls	r2, r3, #6
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	68db      	ldr	r3, [r3, #12]
 800b9fa:	061b      	lsls	r3, r3, #24
 800b9fc:	431a      	orrs	r2, r3
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	689b      	ldr	r3, [r3, #8]
 800ba02:	071b      	lsls	r3, r3, #28
 800ba04:	4980      	ldr	r1, [pc, #512]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ba06:	4313      	orrs	r3, r2
 800ba08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800ba0c:	4b7d      	ldr	r3, [pc, #500]	; (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800ba0e:	2201      	movs	r2, #1
 800ba10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ba12:	f7fd fa43 	bl	8008e9c <HAL_GetTick>
 800ba16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ba18:	e008      	b.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800ba1a:	f7fd fa3f 	bl	8008e9c <HAL_GetTick>
 800ba1e:	4602      	mov	r2, r0
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	1ad3      	subs	r3, r2, r3
 800ba24:	2b02      	cmp	r3, #2
 800ba26:	d901      	bls.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ba28:	2303      	movs	r3, #3
 800ba2a:	e12b      	b.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ba2c:	4b76      	ldr	r3, [pc, #472]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d0f0      	beq.n	800ba1a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f003 0304 	and.w	r3, r3, #4
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d105      	bne.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d079      	beq.n	800bb44 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800ba50:	4b6e      	ldr	r3, [pc, #440]	; (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ba52:	2200      	movs	r2, #0
 800ba54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ba56:	f7fd fa21 	bl	8008e9c <HAL_GetTick>
 800ba5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ba5c:	e008      	b.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800ba5e:	f7fd fa1d 	bl	8008e9c <HAL_GetTick>
 800ba62:	4602      	mov	r2, r0
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	1ad3      	subs	r3, r2, r3
 800ba68:	2b02      	cmp	r3, #2
 800ba6a:	d901      	bls.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ba6c:	2303      	movs	r3, #3
 800ba6e:	e109      	b.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ba70:	4b65      	ldr	r3, [pc, #404]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba7c:	d0ef      	beq.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f003 0304 	and.w	r3, r3, #4
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d020      	beq.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ba8a:	4b5f      	ldr	r3, [pc, #380]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ba8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba90:	0f1b      	lsrs	r3, r3, #28
 800ba92:	f003 0307 	and.w	r3, r3, #7
 800ba96:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	691b      	ldr	r3, [r3, #16]
 800ba9c:	019a      	lsls	r2, r3, #6
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	695b      	ldr	r3, [r3, #20]
 800baa2:	061b      	lsls	r3, r3, #24
 800baa4:	431a      	orrs	r2, r3
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	071b      	lsls	r3, r3, #28
 800baaa:	4957      	ldr	r1, [pc, #348]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800baac:	4313      	orrs	r3, r2
 800baae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800bab2:	4b55      	ldr	r3, [pc, #340]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bab8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6a1b      	ldr	r3, [r3, #32]
 800bac0:	3b01      	subs	r3, #1
 800bac2:	021b      	lsls	r3, r3, #8
 800bac4:	4950      	ldr	r1, [pc, #320]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bac6:	4313      	orrs	r3, r2
 800bac8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f003 0308 	and.w	r3, r3, #8
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d01e      	beq.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bad8:	4b4b      	ldr	r3, [pc, #300]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bade:	0e1b      	lsrs	r3, r3, #24
 800bae0:	f003 030f 	and.w	r3, r3, #15
 800bae4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	691b      	ldr	r3, [r3, #16]
 800baea:	019a      	lsls	r2, r3, #6
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	061b      	lsls	r3, r3, #24
 800baf0:	431a      	orrs	r2, r3
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	699b      	ldr	r3, [r3, #24]
 800baf6:	071b      	lsls	r3, r3, #28
 800baf8:	4943      	ldr	r1, [pc, #268]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bafa:	4313      	orrs	r3, r2
 800bafc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800bb00:	4b41      	ldr	r3, [pc, #260]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bb02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb0e:	493e      	ldr	r1, [pc, #248]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bb10:	4313      	orrs	r3, r2
 800bb12:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800bb16:	4b3d      	ldr	r3, [pc, #244]	; (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bb18:	2201      	movs	r2, #1
 800bb1a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bb1c:	f7fd f9be 	bl	8008e9c <HAL_GetTick>
 800bb20:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bb22:	e008      	b.n	800bb36 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800bb24:	f7fd f9ba 	bl	8008e9c <HAL_GetTick>
 800bb28:	4602      	mov	r2, r0
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	1ad3      	subs	r3, r2, r3
 800bb2e:	2b02      	cmp	r3, #2
 800bb30:	d901      	bls.n	800bb36 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bb32:	2303      	movs	r3, #3
 800bb34:	e0a6      	b.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bb36:	4b34      	ldr	r3, [pc, #208]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb42:	d1ef      	bne.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f003 0320 	and.w	r3, r3, #32
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	f000 808d 	beq.w	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800bb52:	2300      	movs	r3, #0
 800bb54:	60fb      	str	r3, [r7, #12]
 800bb56:	4b2c      	ldr	r3, [pc, #176]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bb58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb5a:	4a2b      	ldr	r2, [pc, #172]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bb5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb60:	6413      	str	r3, [r2, #64]	; 0x40
 800bb62:	4b29      	ldr	r3, [pc, #164]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bb64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb6a:	60fb      	str	r3, [r7, #12]
 800bb6c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800bb6e:	4b28      	ldr	r3, [pc, #160]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	4a27      	ldr	r2, [pc, #156]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800bb74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb78:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bb7a:	f7fd f98f 	bl	8008e9c <HAL_GetTick>
 800bb7e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800bb80:	e008      	b.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800bb82:	f7fd f98b 	bl	8008e9c <HAL_GetTick>
 800bb86:	4602      	mov	r2, r0
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	1ad3      	subs	r3, r2, r3
 800bb8c:	2b02      	cmp	r3, #2
 800bb8e:	d901      	bls.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800bb90:	2303      	movs	r3, #3
 800bb92:	e077      	b.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800bb94:	4b1e      	ldr	r3, [pc, #120]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d0f0      	beq.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800bba0:	4b19      	ldr	r3, [pc, #100]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bba4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bba8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d039      	beq.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbb8:	693a      	ldr	r2, [r7, #16]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d032      	beq.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bbbe:	4b12      	ldr	r3, [pc, #72]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bbc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bbc6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800bbc8:	4b12      	ldr	r3, [pc, #72]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800bbca:	2201      	movs	r2, #1
 800bbcc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800bbce:	4b11      	ldr	r3, [pc, #68]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800bbd4:	4a0c      	ldr	r2, [pc, #48]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800bbda:	4b0b      	ldr	r3, [pc, #44]	; (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bbdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbde:	f003 0301 	and.w	r3, r3, #1
 800bbe2:	2b01      	cmp	r3, #1
 800bbe4:	d11e      	bne.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800bbe6:	f7fd f959 	bl	8008e9c <HAL_GetTick>
 800bbea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bbec:	e014      	b.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bbee:	f7fd f955 	bl	8008e9c <HAL_GetTick>
 800bbf2:	4602      	mov	r2, r0
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	1ad3      	subs	r3, r2, r3
 800bbf8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d90b      	bls.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800bc00:	2303      	movs	r3, #3
 800bc02:	e03f      	b.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800bc04:	42470068 	.word	0x42470068
 800bc08:	40023800 	.word	0x40023800
 800bc0c:	42470070 	.word	0x42470070
 800bc10:	40007000 	.word	0x40007000
 800bc14:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bc18:	4b1c      	ldr	r3, [pc, #112]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800bc1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc1c:	f003 0302 	and.w	r3, r3, #2
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d0e4      	beq.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bc30:	d10d      	bne.n	800bc4e <HAL_RCCEx_PeriphCLKConfig+0x336>
 800bc32:	4b16      	ldr	r3, [pc, #88]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800bc34:	689b      	ldr	r3, [r3, #8]
 800bc36:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc3e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bc42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc46:	4911      	ldr	r1, [pc, #68]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800bc48:	4313      	orrs	r3, r2
 800bc4a:	608b      	str	r3, [r1, #8]
 800bc4c:	e005      	b.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800bc4e:	4b0f      	ldr	r3, [pc, #60]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800bc50:	689b      	ldr	r3, [r3, #8]
 800bc52:	4a0e      	ldr	r2, [pc, #56]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800bc54:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800bc58:	6093      	str	r3, [r2, #8]
 800bc5a:	4b0c      	ldr	r3, [pc, #48]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800bc5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bc66:	4909      	ldr	r1, [pc, #36]	; (800bc8c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800bc68:	4313      	orrs	r3, r2
 800bc6a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f003 0310 	and.w	r3, r3, #16
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d004      	beq.n	800bc82 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800bc7e:	4b04      	ldr	r3, [pc, #16]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800bc80:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800bc82:	2300      	movs	r3, #0
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3718      	adds	r7, #24
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}
 800bc8c:	40023800 	.word	0x40023800
 800bc90:	424711e0 	.word	0x424711e0

0800bc94 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d101      	bne.n	800bca6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800bca2:	2301      	movs	r3, #1
 800bca4:	e083      	b.n	800bdae <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	7f5b      	ldrb	r3, [r3, #29]
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d105      	bne.n	800bcbc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f7f6 ff9e 	bl	8002bf8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2202      	movs	r2, #2
 800bcc0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	22ca      	movs	r2, #202	; 0xca
 800bcc8:	625a      	str	r2, [r3, #36]	; 0x24
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	2253      	movs	r2, #83	; 0x53
 800bcd0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f000 fc26 	bl	800c524 <RTC_EnterInitMode>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d008      	beq.n	800bcf0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	22ff      	movs	r2, #255	; 0xff
 800bce4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2204      	movs	r2, #4
 800bcea:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800bcec:	2301      	movs	r3, #1
 800bcee:	e05e      	b.n	800bdae <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	689b      	ldr	r3, [r3, #8]
 800bcf6:	687a      	ldr	r2, [r7, #4]
 800bcf8:	6812      	ldr	r2, [r2, #0]
 800bcfa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bcfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd02:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	6899      	ldr	r1, [r3, #8]
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	685a      	ldr	r2, [r3, #4]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	691b      	ldr	r3, [r3, #16]
 800bd12:	431a      	orrs	r2, r3
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	695b      	ldr	r3, [r3, #20]
 800bd18:	431a      	orrs	r2, r3
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	430a      	orrs	r2, r1
 800bd20:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	68d2      	ldr	r2, [r2, #12]
 800bd2a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	6919      	ldr	r1, [r3, #16]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	689b      	ldr	r3, [r3, #8]
 800bd36:	041a      	lsls	r2, r3, #16
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	430a      	orrs	r2, r1
 800bd3e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	68da      	ldr	r2, [r3, #12]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bd4e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	689b      	ldr	r3, [r3, #8]
 800bd56:	f003 0320 	and.w	r3, r3, #32
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d10e      	bne.n	800bd7c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 fbb8 	bl	800c4d4 <HAL_RTC_WaitForSynchro>
 800bd64:	4603      	mov	r3, r0
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d008      	beq.n	800bd7c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	22ff      	movs	r2, #255	; 0xff
 800bd70:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2204      	movs	r2, #4
 800bd76:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800bd78:	2301      	movs	r3, #1
 800bd7a:	e018      	b.n	800bdae <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bd8a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	699a      	ldr	r2, [r3, #24]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	430a      	orrs	r2, r1
 800bd9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	22ff      	movs	r2, #255	; 0xff
 800bda4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2201      	movs	r2, #1
 800bdaa:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800bdac:	2300      	movs	r3, #0
  }
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3708      	adds	r7, #8
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}

0800bdb6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bdb6:	b590      	push	{r4, r7, lr}
 800bdb8:	b087      	sub	sp, #28
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	60f8      	str	r0, [r7, #12]
 800bdbe:	60b9      	str	r1, [r7, #8]
 800bdc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	7f1b      	ldrb	r3, [r3, #28]
 800bdca:	2b01      	cmp	r3, #1
 800bdcc:	d101      	bne.n	800bdd2 <HAL_RTC_SetTime+0x1c>
 800bdce:	2302      	movs	r3, #2
 800bdd0:	e0aa      	b.n	800bf28 <HAL_RTC_SetTime+0x172>
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2201      	movs	r2, #1
 800bdd6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2202      	movs	r2, #2
 800bddc:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d126      	bne.n	800be32 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	689b      	ldr	r3, [r3, #8]
 800bdea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d102      	bne.n	800bdf8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	781b      	ldrb	r3, [r3, #0]
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f000 fbbd 	bl	800c57c <RTC_ByteToBcd2>
 800be02:	4603      	mov	r3, r0
 800be04:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	785b      	ldrb	r3, [r3, #1]
 800be0a:	4618      	mov	r0, r3
 800be0c:	f000 fbb6 	bl	800c57c <RTC_ByteToBcd2>
 800be10:	4603      	mov	r3, r0
 800be12:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800be14:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	789b      	ldrb	r3, [r3, #2]
 800be1a:	4618      	mov	r0, r3
 800be1c:	f000 fbae 	bl	800c57c <RTC_ByteToBcd2>
 800be20:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800be22:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	78db      	ldrb	r3, [r3, #3]
 800be2a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800be2c:	4313      	orrs	r3, r2
 800be2e:	617b      	str	r3, [r7, #20]
 800be30:	e018      	b.n	800be64 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	689b      	ldr	r3, [r3, #8]
 800be38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d102      	bne.n	800be46 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	2200      	movs	r2, #0
 800be44:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	781b      	ldrb	r3, [r3, #0]
 800be4a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	785b      	ldrb	r3, [r3, #1]
 800be50:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800be52:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800be54:	68ba      	ldr	r2, [r7, #8]
 800be56:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800be58:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	78db      	ldrb	r3, [r3, #3]
 800be5e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800be60:	4313      	orrs	r3, r2
 800be62:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	22ca      	movs	r2, #202	; 0xca
 800be6a:	625a      	str	r2, [r3, #36]	; 0x24
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	2253      	movs	r2, #83	; 0x53
 800be72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800be74:	68f8      	ldr	r0, [r7, #12]
 800be76:	f000 fb55 	bl	800c524 <RTC_EnterInitMode>
 800be7a:	4603      	mov	r3, r0
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d00b      	beq.n	800be98 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	22ff      	movs	r2, #255	; 0xff
 800be86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	2204      	movs	r2, #4
 800be8c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	2200      	movs	r2, #0
 800be92:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800be94:	2301      	movs	r3, #1
 800be96:	e047      	b.n	800bf28 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681a      	ldr	r2, [r3, #0]
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800bea2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800bea6:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	689a      	ldr	r2, [r3, #8]
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800beb6:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	6899      	ldr	r1, [r3, #8]
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	68da      	ldr	r2, [r3, #12]
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	691b      	ldr	r3, [r3, #16]
 800bec6:	431a      	orrs	r2, r3
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	430a      	orrs	r2, r1
 800bece:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	68da      	ldr	r2, [r3, #12]
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bede:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	689b      	ldr	r3, [r3, #8]
 800bee6:	f003 0320 	and.w	r3, r3, #32
 800beea:	2b00      	cmp	r3, #0
 800beec:	d111      	bne.n	800bf12 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800beee:	68f8      	ldr	r0, [r7, #12]
 800bef0:	f000 faf0 	bl	800c4d4 <HAL_RTC_WaitForSynchro>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d00b      	beq.n	800bf12 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	22ff      	movs	r2, #255	; 0xff
 800bf00:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	2204      	movs	r2, #4
 800bf06:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	e00a      	b.n	800bf28 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	22ff      	movs	r2, #255	; 0xff
 800bf18:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2200      	movs	r2, #0
 800bf24:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800bf26:	2300      	movs	r3, #0
  }
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	371c      	adds	r7, #28
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd90      	pop	{r4, r7, pc}

0800bf30 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b086      	sub	sp, #24
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	691b      	ldr	r3, [r3, #16]
 800bf50:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800bf62:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800bf66:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	0c1b      	lsrs	r3, r3, #16
 800bf6c:	b2db      	uxtb	r3, r3
 800bf6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf72:	b2da      	uxtb	r2, r3
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	0a1b      	lsrs	r3, r3, #8
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf82:	b2da      	uxtb	r2, r3
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf90:	b2da      	uxtb	r2, r3
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	0c1b      	lsrs	r3, r3, #16
 800bf9a:	b2db      	uxtb	r3, r3
 800bf9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfa0:	b2da      	uxtb	r2, r3
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d11a      	bne.n	800bfe2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f000 fb01 	bl	800c5b8 <RTC_Bcd2ToByte>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	461a      	mov	r2, r3
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	785b      	ldrb	r3, [r3, #1]
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f000 faf8 	bl	800c5b8 <RTC_Bcd2ToByte>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	461a      	mov	r2, r3
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	789b      	ldrb	r3, [r3, #2]
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f000 faef 	bl	800c5b8 <RTC_Bcd2ToByte>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	461a      	mov	r2, r3
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800bfe2:	2300      	movs	r3, #0
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3718      	adds	r7, #24
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bfec:	b590      	push	{r4, r7, lr}
 800bfee:	b087      	sub	sp, #28
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800bff8:	2300      	movs	r3, #0
 800bffa:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	7f1b      	ldrb	r3, [r3, #28]
 800c000:	2b01      	cmp	r3, #1
 800c002:	d101      	bne.n	800c008 <HAL_RTC_SetDate+0x1c>
 800c004:	2302      	movs	r3, #2
 800c006:	e094      	b.n	800c132 <HAL_RTC_SetDate+0x146>
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	2201      	movs	r2, #1
 800c00c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2202      	movs	r2, #2
 800c012:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d10e      	bne.n	800c038 <HAL_RTC_SetDate+0x4c>
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	785b      	ldrb	r3, [r3, #1]
 800c01e:	f003 0310 	and.w	r3, r3, #16
 800c022:	2b00      	cmp	r3, #0
 800c024:	d008      	beq.n	800c038 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	785b      	ldrb	r3, [r3, #1]
 800c02a:	f023 0310 	bic.w	r3, r3, #16
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	330a      	adds	r3, #10
 800c032:	b2da      	uxtb	r2, r3
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d11c      	bne.n	800c078 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	78db      	ldrb	r3, [r3, #3]
 800c042:	4618      	mov	r0, r3
 800c044:	f000 fa9a 	bl	800c57c <RTC_ByteToBcd2>
 800c048:	4603      	mov	r3, r0
 800c04a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	785b      	ldrb	r3, [r3, #1]
 800c050:	4618      	mov	r0, r3
 800c052:	f000 fa93 	bl	800c57c <RTC_ByteToBcd2>
 800c056:	4603      	mov	r3, r0
 800c058:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c05a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	789b      	ldrb	r3, [r3, #2]
 800c060:	4618      	mov	r0, r3
 800c062:	f000 fa8b 	bl	800c57c <RTC_ByteToBcd2>
 800c066:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c068:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	781b      	ldrb	r3, [r3, #0]
 800c070:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c072:	4313      	orrs	r3, r2
 800c074:	617b      	str	r3, [r7, #20]
 800c076:	e00e      	b.n	800c096 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	78db      	ldrb	r3, [r3, #3]
 800c07c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	785b      	ldrb	r3, [r3, #1]
 800c082:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c084:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800c086:	68ba      	ldr	r2, [r7, #8]
 800c088:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800c08a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c092:	4313      	orrs	r3, r2
 800c094:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	22ca      	movs	r2, #202	; 0xca
 800c09c:	625a      	str	r2, [r3, #36]	; 0x24
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	2253      	movs	r2, #83	; 0x53
 800c0a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c0a6:	68f8      	ldr	r0, [r7, #12]
 800c0a8:	f000 fa3c 	bl	800c524 <RTC_EnterInitMode>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d00b      	beq.n	800c0ca <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	22ff      	movs	r2, #255	; 0xff
 800c0b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	2204      	movs	r2, #4
 800c0be:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	e033      	b.n	800c132 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681a      	ldr	r2, [r3, #0]
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c0d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c0d8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	68da      	ldr	r2, [r3, #12]
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c0e8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	689b      	ldr	r3, [r3, #8]
 800c0f0:	f003 0320 	and.w	r3, r3, #32
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d111      	bne.n	800c11c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c0f8:	68f8      	ldr	r0, [r7, #12]
 800c0fa:	f000 f9eb 	bl	800c4d4 <HAL_RTC_WaitForSynchro>
 800c0fe:	4603      	mov	r3, r0
 800c100:	2b00      	cmp	r3, #0
 800c102:	d00b      	beq.n	800c11c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	22ff      	movs	r2, #255	; 0xff
 800c10a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2204      	movs	r2, #4
 800c110:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	2200      	movs	r2, #0
 800c116:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c118:	2301      	movs	r3, #1
 800c11a:	e00a      	b.n	800c132 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	22ff      	movs	r2, #255	; 0xff
 800c122:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	2201      	movs	r2, #1
 800c128:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2200      	movs	r2, #0
 800c12e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800c130:	2300      	movs	r3, #0
  }
}
 800c132:	4618      	mov	r0, r3
 800c134:	371c      	adds	r7, #28
 800c136:	46bd      	mov	sp, r7
 800c138:	bd90      	pop	{r4, r7, pc}

0800c13a <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c13a:	b580      	push	{r7, lr}
 800c13c:	b086      	sub	sp, #24
 800c13e:	af00      	add	r7, sp, #0
 800c140:	60f8      	str	r0, [r7, #12]
 800c142:	60b9      	str	r1, [r7, #8]
 800c144:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c146:	2300      	movs	r3, #0
 800c148:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	685b      	ldr	r3, [r3, #4]
 800c150:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c154:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c158:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	0c1b      	lsrs	r3, r3, #16
 800c15e:	b2da      	uxtb	r2, r3
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	0a1b      	lsrs	r3, r3, #8
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	f003 031f 	and.w	r3, r3, #31
 800c16e:	b2da      	uxtb	r2, r3
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	b2db      	uxtb	r3, r3
 800c178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c17c:	b2da      	uxtb	r2, r3
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	0b5b      	lsrs	r3, r3, #13
 800c186:	b2db      	uxtb	r3, r3
 800c188:	f003 0307 	and.w	r3, r3, #7
 800c18c:	b2da      	uxtb	r2, r3
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d11a      	bne.n	800c1ce <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	78db      	ldrb	r3, [r3, #3]
 800c19c:	4618      	mov	r0, r3
 800c19e:	f000 fa0b 	bl	800c5b8 <RTC_Bcd2ToByte>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	785b      	ldrb	r3, [r3, #1]
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f000 fa02 	bl	800c5b8 <RTC_Bcd2ToByte>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	789b      	ldrb	r3, [r3, #2]
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f000 f9f9 	bl	800c5b8 <RTC_Bcd2ToByte>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c1ce:	2300      	movs	r3, #0
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3718      	adds	r7, #24
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}

0800c1d8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800c1d8:	b590      	push	{r4, r7, lr}
 800c1da:	b089      	sub	sp, #36	; 0x24
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	60f8      	str	r0, [r7, #12]
 800c1e0:	60b9      	str	r1, [r7, #8]
 800c1e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	61fb      	str	r3, [r7, #28]
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800c1ec:	4b93      	ldr	r3, [pc, #588]	; (800c43c <HAL_RTC_SetAlarm_IT+0x264>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4a93      	ldr	r2, [pc, #588]	; (800c440 <HAL_RTC_SetAlarm_IT+0x268>)
 800c1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c1f6:	0adb      	lsrs	r3, r3, #11
 800c1f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c1fc:	fb02 f303 	mul.w	r3, r2, r3
 800c200:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	7f1b      	ldrb	r3, [r3, #28]
 800c206:	2b01      	cmp	r3, #1
 800c208:	d101      	bne.n	800c20e <HAL_RTC_SetAlarm_IT+0x36>
 800c20a:	2302      	movs	r3, #2
 800c20c:	e111      	b.n	800c432 <HAL_RTC_SetAlarm_IT+0x25a>
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2201      	movs	r2, #1
 800c212:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2202      	movs	r2, #2
 800c218:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d137      	bne.n	800c290 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	689b      	ldr	r3, [r3, #8]
 800c226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d102      	bne.n	800c234 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	2200      	movs	r2, #0
 800c232:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	781b      	ldrb	r3, [r3, #0]
 800c238:	4618      	mov	r0, r3
 800c23a:	f000 f99f 	bl	800c57c <RTC_ByteToBcd2>
 800c23e:	4603      	mov	r3, r0
 800c240:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	785b      	ldrb	r3, [r3, #1]
 800c246:	4618      	mov	r0, r3
 800c248:	f000 f998 	bl	800c57c <RTC_ByteToBcd2>
 800c24c:	4603      	mov	r3, r0
 800c24e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800c250:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	789b      	ldrb	r3, [r3, #2]
 800c256:	4618      	mov	r0, r3
 800c258:	f000 f990 	bl	800c57c <RTC_ByteToBcd2>
 800c25c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c25e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	78db      	ldrb	r3, [r3, #3]
 800c266:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800c268:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c272:	4618      	mov	r0, r3
 800c274:	f000 f982 	bl	800c57c <RTC_ByteToBcd2>
 800c278:	4603      	mov	r3, r0
 800c27a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c27c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c284:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800c28a:	4313      	orrs	r3, r2
 800c28c:	61fb      	str	r3, [r7, #28]
 800c28e:	e023      	b.n	800c2d8 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	689b      	ldr	r3, [r3, #8]
 800c296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d102      	bne.n	800c2a4 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	785b      	ldrb	r3, [r3, #1]
 800c2ae:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800c2b0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800c2b2:	68ba      	ldr	r2, [r7, #8]
 800c2b4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c2b6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	78db      	ldrb	r3, [r3, #3]
 800c2bc:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800c2be:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c2c6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c2c8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c2ce:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	685a      	ldr	r2, [r3, #4]
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	699b      	ldr	r3, [r3, #24]
 800c2e0:	4313      	orrs	r3, r2
 800c2e2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	22ca      	movs	r2, #202	; 0xca
 800c2ea:	625a      	str	r2, [r3, #36]	; 0x24
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	2253      	movs	r2, #83	; 0x53
 800c2f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2fc:	d141      	bne.n	800c382 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	689a      	ldr	r2, [r3, #8]
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c30c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	68db      	ldr	r3, [r3, #12]
 800c314:	b2da      	uxtb	r2, r3
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800c31e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	1e5a      	subs	r2, r3, #1
 800c324:	617a      	str	r2, [r7, #20]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d10b      	bne.n	800c342 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	22ff      	movs	r2, #255	; 0xff
 800c330:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	2203      	movs	r2, #3
 800c336:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	2200      	movs	r2, #0
 800c33c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c33e:	2303      	movs	r3, #3
 800c340:	e077      	b.n	800c432 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	68db      	ldr	r3, [r3, #12]
 800c348:	f003 0301 	and.w	r3, r3, #1
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d0e7      	beq.n	800c320 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	69fa      	ldr	r2, [r7, #28]
 800c356:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	69ba      	ldr	r2, [r7, #24]
 800c35e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	689a      	ldr	r2, [r3, #8]
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c36e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	689a      	ldr	r2, [r3, #8]
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c37e:	609a      	str	r2, [r3, #8]
 800c380:	e040      	b.n	800c404 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	689a      	ldr	r2, [r3, #8]
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c390:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	68db      	ldr	r3, [r3, #12]
 800c398:	b2da      	uxtb	r2, r3
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f462 7220 	orn	r2, r2, #640	; 0x280
 800c3a2:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	1e5a      	subs	r2, r3, #1
 800c3a8:	617a      	str	r2, [r7, #20]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d10b      	bne.n	800c3c6 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	22ff      	movs	r2, #255	; 0xff
 800c3b4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2203      	movs	r2, #3
 800c3ba:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c3c2:	2303      	movs	r3, #3
 800c3c4:	e035      	b.n	800c432 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	68db      	ldr	r3, [r3, #12]
 800c3cc:	f003 0302 	and.w	r3, r3, #2
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d0e7      	beq.n	800c3a4 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	69fa      	ldr	r2, [r7, #28]
 800c3da:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	69ba      	ldr	r2, [r7, #24]
 800c3e2:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	689a      	ldr	r2, [r3, #8]
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c3f2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	689a      	ldr	r2, [r3, #8]
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c402:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800c404:	4b0f      	ldr	r3, [pc, #60]	; (800c444 <HAL_RTC_SetAlarm_IT+0x26c>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	4a0e      	ldr	r2, [pc, #56]	; (800c444 <HAL_RTC_SetAlarm_IT+0x26c>)
 800c40a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c40e:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800c410:	4b0c      	ldr	r3, [pc, #48]	; (800c444 <HAL_RTC_SetAlarm_IT+0x26c>)
 800c412:	689b      	ldr	r3, [r3, #8]
 800c414:	4a0b      	ldr	r2, [pc, #44]	; (800c444 <HAL_RTC_SetAlarm_IT+0x26c>)
 800c416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c41a:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	22ff      	movs	r2, #255	; 0xff
 800c422:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	2201      	movs	r2, #1
 800c428:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2200      	movs	r2, #0
 800c42e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c430:	2300      	movs	r3, #0
}
 800c432:	4618      	mov	r0, r3
 800c434:	3724      	adds	r7, #36	; 0x24
 800c436:	46bd      	mov	sp, r7
 800c438:	bd90      	pop	{r4, r7, pc}
 800c43a:	bf00      	nop
 800c43c:	20000088 	.word	0x20000088
 800c440:	10624dd3 	.word	0x10624dd3
 800c444:	40013c00 	.word	0x40013c00

0800c448 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b082      	sub	sp, #8
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	689b      	ldr	r3, [r3, #8]
 800c456:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d012      	beq.n	800c484 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	68db      	ldr	r3, [r3, #12]
 800c464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d00b      	beq.n	800c484 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f7f7 f8ff 	bl	8003670 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	68db      	ldr	r3, [r3, #12]
 800c478:	b2da      	uxtb	r2, r3
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800c482:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	689b      	ldr	r3, [r3, #8]
 800c48a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d012      	beq.n	800c4b8 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	68db      	ldr	r3, [r3, #12]
 800c498:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d00b      	beq.n	800c4b8 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f7f7 f8f7 	bl	8003694 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	68db      	ldr	r3, [r3, #12]
 800c4ac:	b2da      	uxtb	r2, r3
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f462 7220 	orn	r2, r2, #640	; 0x280
 800c4b6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800c4b8:	4b05      	ldr	r3, [pc, #20]	; (800c4d0 <HAL_RTC_AlarmIRQHandler+0x88>)
 800c4ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c4be:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	775a      	strb	r2, [r3, #29]
}
 800c4c6:	bf00      	nop
 800c4c8:	3708      	adds	r7, #8
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	40013c00 	.word	0x40013c00

0800c4d4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	68da      	ldr	r2, [r3, #12]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c4ee:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c4f0:	f7fc fcd4 	bl	8008e9c <HAL_GetTick>
 800c4f4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c4f6:	e009      	b.n	800c50c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c4f8:	f7fc fcd0 	bl	8008e9c <HAL_GetTick>
 800c4fc:	4602      	mov	r2, r0
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	1ad3      	subs	r3, r2, r3
 800c502:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c506:	d901      	bls.n	800c50c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800c508:	2303      	movs	r3, #3
 800c50a:	e007      	b.n	800c51c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	68db      	ldr	r3, [r3, #12]
 800c512:	f003 0320 	and.w	r3, r3, #32
 800c516:	2b00      	cmp	r3, #0
 800c518:	d0ee      	beq.n	800c4f8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800c51a:	2300      	movs	r3, #0
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3710      	adds	r7, #16
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}

0800c524 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b084      	sub	sp, #16
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c52c:	2300      	movs	r3, #0
 800c52e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	68db      	ldr	r3, [r3, #12]
 800c536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d119      	bne.n	800c572 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f04f 32ff 	mov.w	r2, #4294967295
 800c546:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c548:	f7fc fca8 	bl	8008e9c <HAL_GetTick>
 800c54c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c54e:	e009      	b.n	800c564 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c550:	f7fc fca4 	bl	8008e9c <HAL_GetTick>
 800c554:	4602      	mov	r2, r0
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	1ad3      	subs	r3, r2, r3
 800c55a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c55e:	d901      	bls.n	800c564 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800c560:	2303      	movs	r3, #3
 800c562:	e007      	b.n	800c574 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	68db      	ldr	r3, [r3, #12]
 800c56a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d0ee      	beq.n	800c550 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800c572:	2300      	movs	r3, #0
}
 800c574:	4618      	mov	r0, r3
 800c576:	3710      	adds	r7, #16
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c57c:	b480      	push	{r7}
 800c57e:	b085      	sub	sp, #20
 800c580:	af00      	add	r7, sp, #0
 800c582:	4603      	mov	r3, r0
 800c584:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c586:	2300      	movs	r3, #0
 800c588:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800c58a:	e005      	b.n	800c598 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	3301      	adds	r3, #1
 800c590:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800c592:	79fb      	ldrb	r3, [r7, #7]
 800c594:	3b0a      	subs	r3, #10
 800c596:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800c598:	79fb      	ldrb	r3, [r7, #7]
 800c59a:	2b09      	cmp	r3, #9
 800c59c:	d8f6      	bhi.n	800c58c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	b2db      	uxtb	r3, r3
 800c5a2:	011b      	lsls	r3, r3, #4
 800c5a4:	b2da      	uxtb	r2, r3
 800c5a6:	79fb      	ldrb	r3, [r7, #7]
 800c5a8:	4313      	orrs	r3, r2
 800c5aa:	b2db      	uxtb	r3, r3
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3714      	adds	r7, #20
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b6:	4770      	bx	lr

0800c5b8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b085      	sub	sp, #20
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	4603      	mov	r3, r0
 800c5c0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800c5c6:	79fb      	ldrb	r3, [r7, #7]
 800c5c8:	091b      	lsrs	r3, r3, #4
 800c5ca:	b2db      	uxtb	r3, r3
 800c5cc:	461a      	mov	r2, r3
 800c5ce:	4613      	mov	r3, r2
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	4413      	add	r3, r2
 800c5d4:	005b      	lsls	r3, r3, #1
 800c5d6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800c5d8:	79fb      	ldrb	r3, [r7, #7]
 800c5da:	f003 030f 	and.w	r3, r3, #15
 800c5de:	b2da      	uxtb	r2, r3
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	b2db      	uxtb	r3, r3
 800c5e4:	4413      	add	r3, r2
 800c5e6:	b2db      	uxtb	r3, r3
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3714      	adds	r7, #20
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr

0800c5f4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b087      	sub	sp, #28
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	60b9      	str	r1, [r7, #8]
 800c5fe:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	7f1b      	ldrb	r3, [r3, #28]
 800c604:	2b01      	cmp	r3, #1
 800c606:	d101      	bne.n	800c60c <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 800c608:	2302      	movs	r3, #2
 800c60a:	e0a6      	b.n	800c75a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2201      	movs	r2, #1
 800c610:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	2202      	movs	r2, #2
 800c616:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	22ca      	movs	r2, #202	; 0xca
 800c61e:	625a      	str	r2, [r3, #36]	; 0x24
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	2253      	movs	r2, #83	; 0x53
 800c626:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	689b      	ldr	r3, [r3, #8]
 800c62e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c632:	2b00      	cmp	r3, #0
 800c634:	d022      	beq.n	800c67c <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800c636:	4b4c      	ldr	r3, [pc, #304]	; (800c768 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	4a4c      	ldr	r2, [pc, #304]	; (800c76c <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800c63c:	fba2 2303 	umull	r2, r3, r2, r3
 800c640:	0adb      	lsrs	r3, r3, #11
 800c642:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c646:	fb02 f303 	mul.w	r3, r2, r3
 800c64a:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	1e5a      	subs	r2, r3, #1
 800c650:	617a      	str	r2, [r7, #20]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d10b      	bne.n	800c66e <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	22ff      	movs	r2, #255	; 0xff
 800c65c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2203      	movs	r2, #3
 800c662:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	2200      	movs	r2, #0
 800c668:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c66a:	2303      	movs	r3, #3
 800c66c:	e075      	b.n	800c75a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	68db      	ldr	r3, [r3, #12]
 800c674:	f003 0304 	and.w	r3, r3, #4
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d1e7      	bne.n	800c64c <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	689a      	ldr	r2, [r3, #8]
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c68a:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800c68c:	4b36      	ldr	r3, [pc, #216]	; (800c768 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4a36      	ldr	r2, [pc, #216]	; (800c76c <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800c692:	fba2 2303 	umull	r2, r3, r2, r3
 800c696:	0adb      	lsrs	r3, r3, #11
 800c698:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c69c:	fb02 f303 	mul.w	r3, r2, r3
 800c6a0:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	1e5a      	subs	r2, r3, #1
 800c6a6:	617a      	str	r2, [r7, #20]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d10b      	bne.n	800c6c4 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	22ff      	movs	r2, #255	; 0xff
 800c6b2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2203      	movs	r2, #3
 800c6b8:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800c6c0:	2303      	movs	r3, #3
 800c6c2:	e04a      	b.n	800c75a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	68db      	ldr	r3, [r3, #12]
 800c6ca:	f003 0304 	and.w	r3, r3, #4
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d0e7      	beq.n	800c6a2 <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	68ba      	ldr	r2, [r7, #8]
 800c6d8:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	689a      	ldr	r2, [r3, #8]
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	f022 0207 	bic.w	r2, r2, #7
 800c6e8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	6899      	ldr	r1, [r3, #8]
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	687a      	ldr	r2, [r7, #4]
 800c6f6:	430a      	orrs	r2, r1
 800c6f8:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800c6fa:	4b1d      	ldr	r3, [pc, #116]	; (800c770 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4a1c      	ldr	r2, [pc, #112]	; (800c770 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800c700:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c704:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800c706:	4b1a      	ldr	r3, [pc, #104]	; (800c770 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800c708:	689b      	ldr	r3, [r3, #8]
 800c70a:	4a19      	ldr	r2, [pc, #100]	; (800c770 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800c70c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c710:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	68db      	ldr	r3, [r3, #12]
 800c718:	b2da      	uxtb	r2, r3
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800c722:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	689a      	ldr	r2, [r3, #8]
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c732:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	689a      	ldr	r2, [r3, #8]
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c742:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	22ff      	movs	r2, #255	; 0xff
 800c74a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	2201      	movs	r2, #1
 800c750:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2200      	movs	r2, #0
 800c756:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c758:	2300      	movs	r3, #0
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	371c      	adds	r7, #28
 800c75e:	46bd      	mov	sp, r7
 800c760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c764:	4770      	bx	lr
 800c766:	bf00      	nop
 800c768:	20000088 	.word	0x20000088
 800c76c:	10624dd3 	.word	0x10624dd3
 800c770:	40013c00 	.word	0x40013c00

0800c774 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b084      	sub	sp, #16
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c77c:	2300      	movs	r3, #0
 800c77e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	7f1b      	ldrb	r3, [r3, #28]
 800c784:	2b01      	cmp	r3, #1
 800c786:	d101      	bne.n	800c78c <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 800c788:	2302      	movs	r3, #2
 800c78a:	e047      	b.n	800c81c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2201      	movs	r2, #1
 800c790:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2202      	movs	r2, #2
 800c796:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	22ca      	movs	r2, #202	; 0xca
 800c79e:	625a      	str	r2, [r3, #36]	; 0x24
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	2253      	movs	r2, #83	; 0x53
 800c7a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	689a      	ldr	r2, [r3, #8]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c7b6:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	689a      	ldr	r2, [r3, #8]
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c7c6:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c7c8:	f7fc fb68 	bl	8008e9c <HAL_GetTick>
 800c7cc:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800c7ce:	e013      	b.n	800c7f8 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c7d0:	f7fc fb64 	bl	8008e9c <HAL_GetTick>
 800c7d4:	4602      	mov	r2, r0
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	1ad3      	subs	r3, r2, r3
 800c7da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c7de:	d90b      	bls.n	800c7f8 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	22ff      	movs	r2, #255	; 0xff
 800c7e6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2203      	movs	r2, #3
 800c7ec:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800c7f4:	2303      	movs	r3, #3
 800c7f6:	e011      	b.n	800c81c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	68db      	ldr	r3, [r3, #12]
 800c7fe:	f003 0304 	and.w	r3, r3, #4
 800c802:	2b00      	cmp	r3, #0
 800c804:	d0e4      	beq.n	800c7d0 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	22ff      	movs	r2, #255	; 0xff
 800c80c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2201      	movs	r2, #1
 800c812:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2200      	movs	r2, #0
 800c818:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c81a:	2300      	movs	r3, #0
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3710      	adds	r7, #16
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b082      	sub	sp, #8
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != (uint32_t)RESET)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	68db      	ldr	r3, [r3, #12]
 800c832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c836:	2b00      	cmp	r3, #0
 800c838:	d00b      	beq.n	800c852 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f7f6 ff3c 	bl	80036b8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	68db      	ldr	r3, [r3, #12]
 800c846:	b2da      	uxtb	r2, r3
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800c850:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800c852:	4b05      	ldr	r3, [pc, #20]	; (800c868 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 800c854:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800c858:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2201      	movs	r2, #1
 800c85e:	775a      	strb	r2, [r3, #29]
}
 800c860:	bf00      	nop
 800c862:	3708      	adds	r7, #8
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}
 800c868:	40013c00 	.word	0x40013c00

0800c86c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b087      	sub	sp, #28
 800c870:	af00      	add	r7, sp, #0
 800c872:	60f8      	str	r0, [r7, #12]
 800c874:	60b9      	str	r1, [r7, #8]
 800c876:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800c878:	2300      	movs	r3, #0
 800c87a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	3350      	adds	r3, #80	; 0x50
 800c882:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	009b      	lsls	r3, r3, #2
 800c888:	697a      	ldr	r2, [r7, #20]
 800c88a:	4413      	add	r3, r2
 800c88c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	687a      	ldr	r2, [r7, #4]
 800c892:	601a      	str	r2, [r3, #0]
}
 800c894:	bf00      	nop
 800c896:	371c      	adds	r7, #28
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr

0800c8a0 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b085      	sub	sp, #20
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	3350      	adds	r3, #80	; 0x50
 800c8b4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	009b      	lsls	r3, r3, #2
 800c8ba:	68fa      	ldr	r2, [r7, #12]
 800c8bc:	4413      	add	r3, r2
 800c8be:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	681b      	ldr	r3, [r3, #0]
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3714      	adds	r7, #20
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ce:	4770      	bx	lr

0800c8d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b082      	sub	sp, #8
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d101      	bne.n	800c8e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c8de:	2301      	movs	r3, #1
 800c8e0:	e07b      	b.n	800c9da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d108      	bne.n	800c8fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c8f2:	d009      	beq.n	800c908 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	61da      	str	r2, [r3, #28]
 800c8fa:	e005      	b.n	800c908 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2200      	movs	r2, #0
 800c900:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2200      	movs	r2, #0
 800c906:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2200      	movs	r2, #0
 800c90c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c914:	b2db      	uxtb	r3, r3
 800c916:	2b00      	cmp	r3, #0
 800c918:	d106      	bne.n	800c928 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2200      	movs	r2, #0
 800c91e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f7f6 fcd2 	bl	80032cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2202      	movs	r2, #2
 800c92c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	681a      	ldr	r2, [r3, #0]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c93e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	689b      	ldr	r3, [r3, #8]
 800c94c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c950:	431a      	orrs	r2, r3
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	68db      	ldr	r3, [r3, #12]
 800c956:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c95a:	431a      	orrs	r2, r3
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	691b      	ldr	r3, [r3, #16]
 800c960:	f003 0302 	and.w	r3, r3, #2
 800c964:	431a      	orrs	r2, r3
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	695b      	ldr	r3, [r3, #20]
 800c96a:	f003 0301 	and.w	r3, r3, #1
 800c96e:	431a      	orrs	r2, r3
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	699b      	ldr	r3, [r3, #24]
 800c974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c978:	431a      	orrs	r2, r3
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	69db      	ldr	r3, [r3, #28]
 800c97e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c982:	431a      	orrs	r2, r3
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6a1b      	ldr	r3, [r3, #32]
 800c988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c98c:	ea42 0103 	orr.w	r1, r2, r3
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c994:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	430a      	orrs	r2, r1
 800c99e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	699b      	ldr	r3, [r3, #24]
 800c9a4:	0c1b      	lsrs	r3, r3, #16
 800c9a6:	f003 0104 	and.w	r1, r3, #4
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ae:	f003 0210 	and.w	r2, r3, #16
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	430a      	orrs	r2, r1
 800c9b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	69da      	ldr	r2, [r3, #28]
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c9c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c9d8:	2300      	movs	r3, #0
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3708      	adds	r7, #8
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b088      	sub	sp, #32
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	60f8      	str	r0, [r7, #12]
 800c9ea:	60b9      	str	r1, [r7, #8]
 800c9ec:	603b      	str	r3, [r7, #0]
 800c9ee:	4613      	mov	r3, r2
 800c9f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c9fc:	2b01      	cmp	r3, #1
 800c9fe:	d101      	bne.n	800ca04 <HAL_SPI_Transmit+0x22>
 800ca00:	2302      	movs	r3, #2
 800ca02:	e126      	b.n	800cc52 <HAL_SPI_Transmit+0x270>
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	2201      	movs	r2, #1
 800ca08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ca0c:	f7fc fa46 	bl	8008e9c <HAL_GetTick>
 800ca10:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ca12:	88fb      	ldrh	r3, [r7, #6]
 800ca14:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ca1c:	b2db      	uxtb	r3, r3
 800ca1e:	2b01      	cmp	r3, #1
 800ca20:	d002      	beq.n	800ca28 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ca22:	2302      	movs	r3, #2
 800ca24:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ca26:	e10b      	b.n	800cc40 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d002      	beq.n	800ca34 <HAL_SPI_Transmit+0x52>
 800ca2e:	88fb      	ldrh	r3, [r7, #6]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d102      	bne.n	800ca3a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ca34:	2301      	movs	r3, #1
 800ca36:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ca38:	e102      	b.n	800cc40 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	2203      	movs	r2, #3
 800ca3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	2200      	movs	r2, #0
 800ca46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	68ba      	ldr	r2, [r7, #8]
 800ca4c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	88fa      	ldrh	r2, [r7, #6]
 800ca52:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	88fa      	ldrh	r2, [r7, #6]
 800ca58:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	2200      	movs	r2, #0
 800ca64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2200      	movs	r2, #0
 800ca76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	689b      	ldr	r3, [r3, #8]
 800ca7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca80:	d10f      	bne.n	800caa2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	681a      	ldr	r2, [r3, #0]
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ca90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	681a      	ldr	r2, [r3, #0]
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800caa0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caac:	2b40      	cmp	r3, #64	; 0x40
 800caae:	d007      	beq.n	800cac0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	681a      	ldr	r2, [r3, #0]
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cabe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	68db      	ldr	r3, [r3, #12]
 800cac4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cac8:	d14b      	bne.n	800cb62 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d002      	beq.n	800cad8 <HAL_SPI_Transmit+0xf6>
 800cad2:	8afb      	ldrh	r3, [r7, #22]
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	d13e      	bne.n	800cb56 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cadc:	881a      	ldrh	r2, [r3, #0]
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cae8:	1c9a      	adds	r2, r3, #2
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800caf2:	b29b      	uxth	r3, r3
 800caf4:	3b01      	subs	r3, #1
 800caf6:	b29a      	uxth	r2, r3
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800cafc:	e02b      	b.n	800cb56 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	689b      	ldr	r3, [r3, #8]
 800cb04:	f003 0302 	and.w	r3, r3, #2
 800cb08:	2b02      	cmp	r3, #2
 800cb0a:	d112      	bne.n	800cb32 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb10:	881a      	ldrh	r2, [r3, #0]
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb1c:	1c9a      	adds	r2, r3, #2
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cb26:	b29b      	uxth	r3, r3
 800cb28:	3b01      	subs	r3, #1
 800cb2a:	b29a      	uxth	r2, r3
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	86da      	strh	r2, [r3, #54]	; 0x36
 800cb30:	e011      	b.n	800cb56 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb32:	f7fc f9b3 	bl	8008e9c <HAL_GetTick>
 800cb36:	4602      	mov	r2, r0
 800cb38:	69bb      	ldr	r3, [r7, #24]
 800cb3a:	1ad3      	subs	r3, r2, r3
 800cb3c:	683a      	ldr	r2, [r7, #0]
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d803      	bhi.n	800cb4a <HAL_SPI_Transmit+0x168>
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb48:	d102      	bne.n	800cb50 <HAL_SPI_Transmit+0x16e>
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d102      	bne.n	800cb56 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800cb50:	2303      	movs	r3, #3
 800cb52:	77fb      	strb	r3, [r7, #31]
          goto error;
 800cb54:	e074      	b.n	800cc40 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cb5a:	b29b      	uxth	r3, r3
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d1ce      	bne.n	800cafe <HAL_SPI_Transmit+0x11c>
 800cb60:	e04c      	b.n	800cbfc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d002      	beq.n	800cb70 <HAL_SPI_Transmit+0x18e>
 800cb6a:	8afb      	ldrh	r3, [r7, #22]
 800cb6c:	2b01      	cmp	r3, #1
 800cb6e:	d140      	bne.n	800cbf2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	330c      	adds	r3, #12
 800cb7a:	7812      	ldrb	r2, [r2, #0]
 800cb7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb82:	1c5a      	adds	r2, r3, #1
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cb8c:	b29b      	uxth	r3, r3
 800cb8e:	3b01      	subs	r3, #1
 800cb90:	b29a      	uxth	r2, r3
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800cb96:	e02c      	b.n	800cbf2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	689b      	ldr	r3, [r3, #8]
 800cb9e:	f003 0302 	and.w	r3, r3, #2
 800cba2:	2b02      	cmp	r3, #2
 800cba4:	d113      	bne.n	800cbce <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	330c      	adds	r3, #12
 800cbb0:	7812      	ldrb	r2, [r2, #0]
 800cbb2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbb8:	1c5a      	adds	r2, r3, #1
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cbc2:	b29b      	uxth	r3, r3
 800cbc4:	3b01      	subs	r3, #1
 800cbc6:	b29a      	uxth	r2, r3
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	86da      	strh	r2, [r3, #54]	; 0x36
 800cbcc:	e011      	b.n	800cbf2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cbce:	f7fc f965 	bl	8008e9c <HAL_GetTick>
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	69bb      	ldr	r3, [r7, #24]
 800cbd6:	1ad3      	subs	r3, r2, r3
 800cbd8:	683a      	ldr	r2, [r7, #0]
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d803      	bhi.n	800cbe6 <HAL_SPI_Transmit+0x204>
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbe4:	d102      	bne.n	800cbec <HAL_SPI_Transmit+0x20a>
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d102      	bne.n	800cbf2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800cbec:	2303      	movs	r3, #3
 800cbee:	77fb      	strb	r3, [r7, #31]
          goto error;
 800cbf0:	e026      	b.n	800cc40 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cbf6:	b29b      	uxth	r3, r3
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d1cd      	bne.n	800cb98 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cbfc:	69ba      	ldr	r2, [r7, #24]
 800cbfe:	6839      	ldr	r1, [r7, #0]
 800cc00:	68f8      	ldr	r0, [r7, #12]
 800cc02:	f000 fbcb 	bl	800d39c <SPI_EndRxTxTransaction>
 800cc06:	4603      	mov	r3, r0
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d002      	beq.n	800cc12 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	2220      	movs	r2, #32
 800cc10:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	689b      	ldr	r3, [r3, #8]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d10a      	bne.n	800cc30 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	613b      	str	r3, [r7, #16]
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	68db      	ldr	r3, [r3, #12]
 800cc24:	613b      	str	r3, [r7, #16]
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	689b      	ldr	r3, [r3, #8]
 800cc2c:	613b      	str	r3, [r7, #16]
 800cc2e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d002      	beq.n	800cc3e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800cc38:	2301      	movs	r3, #1
 800cc3a:	77fb      	strb	r3, [r7, #31]
 800cc3c:	e000      	b.n	800cc40 <HAL_SPI_Transmit+0x25e>
  }

error:
 800cc3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2201      	movs	r2, #1
 800cc44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800cc50:	7ffb      	ldrb	r3, [r7, #31]
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3720      	adds	r7, #32
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}

0800cc5a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc5a:	b580      	push	{r7, lr}
 800cc5c:	b088      	sub	sp, #32
 800cc5e:	af02      	add	r7, sp, #8
 800cc60:	60f8      	str	r0, [r7, #12]
 800cc62:	60b9      	str	r1, [r7, #8]
 800cc64:	603b      	str	r3, [r7, #0]
 800cc66:	4613      	mov	r3, r2
 800cc68:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	685b      	ldr	r3, [r3, #4]
 800cc72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cc76:	d112      	bne.n	800cc9e <HAL_SPI_Receive+0x44>
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	689b      	ldr	r3, [r3, #8]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d10e      	bne.n	800cc9e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	2204      	movs	r2, #4
 800cc84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800cc88:	88fa      	ldrh	r2, [r7, #6]
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	9300      	str	r3, [sp, #0]
 800cc8e:	4613      	mov	r3, r2
 800cc90:	68ba      	ldr	r2, [r7, #8]
 800cc92:	68b9      	ldr	r1, [r7, #8]
 800cc94:	68f8      	ldr	r0, [r7, #12]
 800cc96:	f000 f8f1 	bl	800ce7c <HAL_SPI_TransmitReceive>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	e0ea      	b.n	800ce74 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cca4:	2b01      	cmp	r3, #1
 800cca6:	d101      	bne.n	800ccac <HAL_SPI_Receive+0x52>
 800cca8:	2302      	movs	r3, #2
 800ccaa:	e0e3      	b.n	800ce74 <HAL_SPI_Receive+0x21a>
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	2201      	movs	r2, #1
 800ccb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ccb4:	f7fc f8f2 	bl	8008e9c <HAL_GetTick>
 800ccb8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ccc0:	b2db      	uxtb	r3, r3
 800ccc2:	2b01      	cmp	r3, #1
 800ccc4:	d002      	beq.n	800cccc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800ccc6:	2302      	movs	r3, #2
 800ccc8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ccca:	e0ca      	b.n	800ce62 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d002      	beq.n	800ccd8 <HAL_SPI_Receive+0x7e>
 800ccd2:	88fb      	ldrh	r3, [r7, #6]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d102      	bne.n	800ccde <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800ccd8:	2301      	movs	r3, #1
 800ccda:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ccdc:	e0c1      	b.n	800ce62 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	2204      	movs	r2, #4
 800cce2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2200      	movs	r2, #0
 800ccea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	68ba      	ldr	r2, [r7, #8]
 800ccf0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	88fa      	ldrh	r2, [r7, #6]
 800ccf6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	88fa      	ldrh	r2, [r7, #6]
 800ccfc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2200      	movs	r2, #0
 800cd02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	2200      	movs	r2, #0
 800cd08:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2200      	movs	r2, #0
 800cd14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	689b      	ldr	r3, [r3, #8]
 800cd20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd24:	d10f      	bne.n	800cd46 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	681a      	ldr	r2, [r3, #0]
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	681a      	ldr	r2, [r3, #0]
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cd44:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd50:	2b40      	cmp	r3, #64	; 0x40
 800cd52:	d007      	beq.n	800cd64 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	681a      	ldr	r2, [r3, #0]
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cd62:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	68db      	ldr	r3, [r3, #12]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d162      	bne.n	800ce32 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800cd6c:	e02e      	b.n	800cdcc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	689b      	ldr	r3, [r3, #8]
 800cd74:	f003 0301 	and.w	r3, r3, #1
 800cd78:	2b01      	cmp	r3, #1
 800cd7a:	d115      	bne.n	800cda8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f103 020c 	add.w	r2, r3, #12
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd88:	7812      	ldrb	r2, [r2, #0]
 800cd8a:	b2d2      	uxtb	r2, r2
 800cd8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd92:	1c5a      	adds	r2, r3, #1
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cd9c:	b29b      	uxth	r3, r3
 800cd9e:	3b01      	subs	r3, #1
 800cda0:	b29a      	uxth	r2, r3
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cda6:	e011      	b.n	800cdcc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cda8:	f7fc f878 	bl	8008e9c <HAL_GetTick>
 800cdac:	4602      	mov	r2, r0
 800cdae:	693b      	ldr	r3, [r7, #16]
 800cdb0:	1ad3      	subs	r3, r2, r3
 800cdb2:	683a      	ldr	r2, [r7, #0]
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d803      	bhi.n	800cdc0 <HAL_SPI_Receive+0x166>
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdbe:	d102      	bne.n	800cdc6 <HAL_SPI_Receive+0x16c>
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d102      	bne.n	800cdcc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800cdc6:	2303      	movs	r3, #3
 800cdc8:	75fb      	strb	r3, [r7, #23]
          goto error;
 800cdca:	e04a      	b.n	800ce62 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cdd0:	b29b      	uxth	r3, r3
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d1cb      	bne.n	800cd6e <HAL_SPI_Receive+0x114>
 800cdd6:	e031      	b.n	800ce3c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	689b      	ldr	r3, [r3, #8]
 800cdde:	f003 0301 	and.w	r3, r3, #1
 800cde2:	2b01      	cmp	r3, #1
 800cde4:	d113      	bne.n	800ce0e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	68da      	ldr	r2, [r3, #12]
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdf0:	b292      	uxth	r2, r2
 800cdf2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdf8:	1c9a      	adds	r2, r3, #2
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ce02:	b29b      	uxth	r3, r3
 800ce04:	3b01      	subs	r3, #1
 800ce06:	b29a      	uxth	r2, r3
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ce0c:	e011      	b.n	800ce32 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ce0e:	f7fc f845 	bl	8008e9c <HAL_GetTick>
 800ce12:	4602      	mov	r2, r0
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	1ad3      	subs	r3, r2, r3
 800ce18:	683a      	ldr	r2, [r7, #0]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d803      	bhi.n	800ce26 <HAL_SPI_Receive+0x1cc>
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce24:	d102      	bne.n	800ce2c <HAL_SPI_Receive+0x1d2>
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d102      	bne.n	800ce32 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800ce2c:	2303      	movs	r3, #3
 800ce2e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ce30:	e017      	b.n	800ce62 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ce36:	b29b      	uxth	r3, r3
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d1cd      	bne.n	800cdd8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ce3c:	693a      	ldr	r2, [r7, #16]
 800ce3e:	6839      	ldr	r1, [r7, #0]
 800ce40:	68f8      	ldr	r0, [r7, #12]
 800ce42:	f000 fa45 	bl	800d2d0 <SPI_EndRxTransaction>
 800ce46:	4603      	mov	r3, r0
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d002      	beq.n	800ce52 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	2220      	movs	r2, #32
 800ce50:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d002      	beq.n	800ce60 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	75fb      	strb	r3, [r7, #23]
 800ce5e:	e000      	b.n	800ce62 <HAL_SPI_Receive+0x208>
  }

error :
 800ce60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2201      	movs	r2, #1
 800ce66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ce72:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3718      	adds	r7, #24
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b08c      	sub	sp, #48	; 0x30
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	60f8      	str	r0, [r7, #12]
 800ce84:	60b9      	str	r1, [r7, #8]
 800ce86:	607a      	str	r2, [r7, #4]
 800ce88:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ce9a:	2b01      	cmp	r3, #1
 800ce9c:	d101      	bne.n	800cea2 <HAL_SPI_TransmitReceive+0x26>
 800ce9e:	2302      	movs	r3, #2
 800cea0:	e18a      	b.n	800d1b8 <HAL_SPI_TransmitReceive+0x33c>
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	2201      	movs	r2, #1
 800cea6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ceaa:	f7fb fff7 	bl	8008e9c <HAL_GetTick>
 800ceae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ceb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800cec0:	887b      	ldrh	r3, [r7, #2]
 800cec2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800cec4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cec8:	2b01      	cmp	r3, #1
 800ceca:	d00f      	beq.n	800ceec <HAL_SPI_TransmitReceive+0x70>
 800cecc:	69fb      	ldr	r3, [r7, #28]
 800cece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ced2:	d107      	bne.n	800cee4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	689b      	ldr	r3, [r3, #8]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d103      	bne.n	800cee4 <HAL_SPI_TransmitReceive+0x68>
 800cedc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cee0:	2b04      	cmp	r3, #4
 800cee2:	d003      	beq.n	800ceec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800cee4:	2302      	movs	r3, #2
 800cee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ceea:	e15b      	b.n	800d1a4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d005      	beq.n	800cefe <HAL_SPI_TransmitReceive+0x82>
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d002      	beq.n	800cefe <HAL_SPI_TransmitReceive+0x82>
 800cef8:	887b      	ldrh	r3, [r7, #2]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d103      	bne.n	800cf06 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800cefe:	2301      	movs	r3, #1
 800cf00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800cf04:	e14e      	b.n	800d1a4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cf0c:	b2db      	uxtb	r3, r3
 800cf0e:	2b04      	cmp	r3, #4
 800cf10:	d003      	beq.n	800cf1a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	2205      	movs	r2, #5
 800cf16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	687a      	ldr	r2, [r7, #4]
 800cf24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	887a      	ldrh	r2, [r7, #2]
 800cf2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	887a      	ldrh	r2, [r7, #2]
 800cf30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	68ba      	ldr	r2, [r7, #8]
 800cf36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	887a      	ldrh	r2, [r7, #2]
 800cf3c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	887a      	ldrh	r2, [r7, #2]
 800cf42:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	2200      	movs	r2, #0
 800cf48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf5a:	2b40      	cmp	r3, #64	; 0x40
 800cf5c:	d007      	beq.n	800cf6e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	681a      	ldr	r2, [r3, #0]
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cf6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	68db      	ldr	r3, [r3, #12]
 800cf72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cf76:	d178      	bne.n	800d06a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	685b      	ldr	r3, [r3, #4]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d002      	beq.n	800cf86 <HAL_SPI_TransmitReceive+0x10a>
 800cf80:	8b7b      	ldrh	r3, [r7, #26]
 800cf82:	2b01      	cmp	r3, #1
 800cf84:	d166      	bne.n	800d054 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf8a:	881a      	ldrh	r2, [r3, #0]
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf96:	1c9a      	adds	r2, r3, #2
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cfa0:	b29b      	uxth	r3, r3
 800cfa2:	3b01      	subs	r3, #1
 800cfa4:	b29a      	uxth	r2, r3
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cfaa:	e053      	b.n	800d054 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	689b      	ldr	r3, [r3, #8]
 800cfb2:	f003 0302 	and.w	r3, r3, #2
 800cfb6:	2b02      	cmp	r3, #2
 800cfb8:	d11b      	bne.n	800cff2 <HAL_SPI_TransmitReceive+0x176>
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cfbe:	b29b      	uxth	r3, r3
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d016      	beq.n	800cff2 <HAL_SPI_TransmitReceive+0x176>
 800cfc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc6:	2b01      	cmp	r3, #1
 800cfc8:	d113      	bne.n	800cff2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfce:	881a      	ldrh	r2, [r3, #0]
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfda:	1c9a      	adds	r2, r3, #2
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cfe4:	b29b      	uxth	r3, r3
 800cfe6:	3b01      	subs	r3, #1
 800cfe8:	b29a      	uxth	r2, r3
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800cfee:	2300      	movs	r3, #0
 800cff0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	689b      	ldr	r3, [r3, #8]
 800cff8:	f003 0301 	and.w	r3, r3, #1
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	d119      	bne.n	800d034 <HAL_SPI_TransmitReceive+0x1b8>
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d004:	b29b      	uxth	r3, r3
 800d006:	2b00      	cmp	r3, #0
 800d008:	d014      	beq.n	800d034 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	68da      	ldr	r2, [r3, #12]
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d014:	b292      	uxth	r2, r2
 800d016:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d01c:	1c9a      	adds	r2, r3, #2
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d026:	b29b      	uxth	r3, r3
 800d028:	3b01      	subs	r3, #1
 800d02a:	b29a      	uxth	r2, r3
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d030:	2301      	movs	r3, #1
 800d032:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d034:	f7fb ff32 	bl	8008e9c <HAL_GetTick>
 800d038:	4602      	mov	r2, r0
 800d03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d03c:	1ad3      	subs	r3, r2, r3
 800d03e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d040:	429a      	cmp	r2, r3
 800d042:	d807      	bhi.n	800d054 <HAL_SPI_TransmitReceive+0x1d8>
 800d044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d04a:	d003      	beq.n	800d054 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800d04c:	2303      	movs	r3, #3
 800d04e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d052:	e0a7      	b.n	800d1a4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d058:	b29b      	uxth	r3, r3
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d1a6      	bne.n	800cfac <HAL_SPI_TransmitReceive+0x130>
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d062:	b29b      	uxth	r3, r3
 800d064:	2b00      	cmp	r3, #0
 800d066:	d1a1      	bne.n	800cfac <HAL_SPI_TransmitReceive+0x130>
 800d068:	e07c      	b.n	800d164 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	685b      	ldr	r3, [r3, #4]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d002      	beq.n	800d078 <HAL_SPI_TransmitReceive+0x1fc>
 800d072:	8b7b      	ldrh	r3, [r7, #26]
 800d074:	2b01      	cmp	r3, #1
 800d076:	d16b      	bne.n	800d150 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	330c      	adds	r3, #12
 800d082:	7812      	ldrb	r2, [r2, #0]
 800d084:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d08a:	1c5a      	adds	r2, r3, #1
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d094:	b29b      	uxth	r3, r3
 800d096:	3b01      	subs	r3, #1
 800d098:	b29a      	uxth	r2, r3
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d09e:	e057      	b.n	800d150 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	689b      	ldr	r3, [r3, #8]
 800d0a6:	f003 0302 	and.w	r3, r3, #2
 800d0aa:	2b02      	cmp	r3, #2
 800d0ac:	d11c      	bne.n	800d0e8 <HAL_SPI_TransmitReceive+0x26c>
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d0b2:	b29b      	uxth	r3, r3
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d017      	beq.n	800d0e8 <HAL_SPI_TransmitReceive+0x26c>
 800d0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ba:	2b01      	cmp	r3, #1
 800d0bc:	d114      	bne.n	800d0e8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	330c      	adds	r3, #12
 800d0c8:	7812      	ldrb	r2, [r2, #0]
 800d0ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0d0:	1c5a      	adds	r2, r3, #1
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d0da:	b29b      	uxth	r3, r3
 800d0dc:	3b01      	subs	r3, #1
 800d0de:	b29a      	uxth	r2, r3
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	689b      	ldr	r3, [r3, #8]
 800d0ee:	f003 0301 	and.w	r3, r3, #1
 800d0f2:	2b01      	cmp	r3, #1
 800d0f4:	d119      	bne.n	800d12a <HAL_SPI_TransmitReceive+0x2ae>
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d0fa:	b29b      	uxth	r3, r3
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d014      	beq.n	800d12a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	68da      	ldr	r2, [r3, #12]
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d10a:	b2d2      	uxtb	r2, r2
 800d10c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d112:	1c5a      	adds	r2, r3, #1
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d11c:	b29b      	uxth	r3, r3
 800d11e:	3b01      	subs	r3, #1
 800d120:	b29a      	uxth	r2, r3
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d126:	2301      	movs	r3, #1
 800d128:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d12a:	f7fb feb7 	bl	8008e9c <HAL_GetTick>
 800d12e:	4602      	mov	r2, r0
 800d130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d132:	1ad3      	subs	r3, r2, r3
 800d134:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d136:	429a      	cmp	r2, r3
 800d138:	d803      	bhi.n	800d142 <HAL_SPI_TransmitReceive+0x2c6>
 800d13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d140:	d102      	bne.n	800d148 <HAL_SPI_TransmitReceive+0x2cc>
 800d142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d144:	2b00      	cmp	r3, #0
 800d146:	d103      	bne.n	800d150 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800d148:	2303      	movs	r3, #3
 800d14a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d14e:	e029      	b.n	800d1a4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d154:	b29b      	uxth	r3, r3
 800d156:	2b00      	cmp	r3, #0
 800d158:	d1a2      	bne.n	800d0a0 <HAL_SPI_TransmitReceive+0x224>
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d15e:	b29b      	uxth	r3, r3
 800d160:	2b00      	cmp	r3, #0
 800d162:	d19d      	bne.n	800d0a0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d166:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d168:	68f8      	ldr	r0, [r7, #12]
 800d16a:	f000 f917 	bl	800d39c <SPI_EndRxTxTransaction>
 800d16e:	4603      	mov	r3, r0
 800d170:	2b00      	cmp	r3, #0
 800d172:	d006      	beq.n	800d182 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800d174:	2301      	movs	r3, #1
 800d176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	2220      	movs	r2, #32
 800d17e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800d180:	e010      	b.n	800d1a4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	689b      	ldr	r3, [r3, #8]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d10b      	bne.n	800d1a2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d18a:	2300      	movs	r3, #0
 800d18c:	617b      	str	r3, [r7, #20]
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	68db      	ldr	r3, [r3, #12]
 800d194:	617b      	str	r3, [r7, #20]
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	689b      	ldr	r3, [r3, #8]
 800d19c:	617b      	str	r3, [r7, #20]
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	e000      	b.n	800d1a4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800d1a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2201      	movs	r2, #1
 800d1a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d1b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3730      	adds	r7, #48	; 0x30
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}

0800d1c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b088      	sub	sp, #32
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	60f8      	str	r0, [r7, #12]
 800d1c8:	60b9      	str	r1, [r7, #8]
 800d1ca:	603b      	str	r3, [r7, #0]
 800d1cc:	4613      	mov	r3, r2
 800d1ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d1d0:	f7fb fe64 	bl	8008e9c <HAL_GetTick>
 800d1d4:	4602      	mov	r2, r0
 800d1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d8:	1a9b      	subs	r3, r3, r2
 800d1da:	683a      	ldr	r2, [r7, #0]
 800d1dc:	4413      	add	r3, r2
 800d1de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d1e0:	f7fb fe5c 	bl	8008e9c <HAL_GetTick>
 800d1e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d1e6:	4b39      	ldr	r3, [pc, #228]	; (800d2cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	015b      	lsls	r3, r3, #5
 800d1ec:	0d1b      	lsrs	r3, r3, #20
 800d1ee:	69fa      	ldr	r2, [r7, #28]
 800d1f0:	fb02 f303 	mul.w	r3, r2, r3
 800d1f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d1f6:	e054      	b.n	800d2a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1fe:	d050      	beq.n	800d2a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d200:	f7fb fe4c 	bl	8008e9c <HAL_GetTick>
 800d204:	4602      	mov	r2, r0
 800d206:	69bb      	ldr	r3, [r7, #24]
 800d208:	1ad3      	subs	r3, r2, r3
 800d20a:	69fa      	ldr	r2, [r7, #28]
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d902      	bls.n	800d216 <SPI_WaitFlagStateUntilTimeout+0x56>
 800d210:	69fb      	ldr	r3, [r7, #28]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d13d      	bne.n	800d292 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	685a      	ldr	r2, [r3, #4]
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d224:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	685b      	ldr	r3, [r3, #4]
 800d22a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d22e:	d111      	bne.n	800d254 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	689b      	ldr	r3, [r3, #8]
 800d234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d238:	d004      	beq.n	800d244 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	689b      	ldr	r3, [r3, #8]
 800d23e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d242:	d107      	bne.n	800d254 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	681a      	ldr	r2, [r3, #0]
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d252:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d258:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d25c:	d10f      	bne.n	800d27e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	681a      	ldr	r2, [r3, #0]
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d26c:	601a      	str	r2, [r3, #0]
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	681a      	ldr	r2, [r3, #0]
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d27c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	2201      	movs	r2, #1
 800d282:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	2200      	movs	r2, #0
 800d28a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800d28e:	2303      	movs	r3, #3
 800d290:	e017      	b.n	800d2c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d101      	bne.n	800d29c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d298:	2300      	movs	r3, #0
 800d29a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d29c:	697b      	ldr	r3, [r7, #20]
 800d29e:	3b01      	subs	r3, #1
 800d2a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	689a      	ldr	r2, [r3, #8]
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	4013      	ands	r3, r2
 800d2ac:	68ba      	ldr	r2, [r7, #8]
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	bf0c      	ite	eq
 800d2b2:	2301      	moveq	r3, #1
 800d2b4:	2300      	movne	r3, #0
 800d2b6:	b2db      	uxtb	r3, r3
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	79fb      	ldrb	r3, [r7, #7]
 800d2bc:	429a      	cmp	r2, r3
 800d2be:	d19b      	bne.n	800d1f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d2c0:	2300      	movs	r3, #0
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3720      	adds	r7, #32
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}
 800d2ca:	bf00      	nop
 800d2cc:	20000088 	.word	0x20000088

0800d2d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b086      	sub	sp, #24
 800d2d4:	af02      	add	r7, sp, #8
 800d2d6:	60f8      	str	r0, [r7, #12]
 800d2d8:	60b9      	str	r1, [r7, #8]
 800d2da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	685b      	ldr	r3, [r3, #4]
 800d2e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d2e4:	d111      	bne.n	800d30a <SPI_EndRxTransaction+0x3a>
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	689b      	ldr	r3, [r3, #8]
 800d2ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d2ee:	d004      	beq.n	800d2fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	689b      	ldr	r3, [r3, #8]
 800d2f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d2f8:	d107      	bne.n	800d30a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	681a      	ldr	r2, [r3, #0]
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d308:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	685b      	ldr	r3, [r3, #4]
 800d30e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d312:	d12a      	bne.n	800d36a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	689b      	ldr	r3, [r3, #8]
 800d318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d31c:	d012      	beq.n	800d344 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	9300      	str	r3, [sp, #0]
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	2200      	movs	r2, #0
 800d326:	2180      	movs	r1, #128	; 0x80
 800d328:	68f8      	ldr	r0, [r7, #12]
 800d32a:	f7ff ff49 	bl	800d1c0 <SPI_WaitFlagStateUntilTimeout>
 800d32e:	4603      	mov	r3, r0
 800d330:	2b00      	cmp	r3, #0
 800d332:	d02d      	beq.n	800d390 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d338:	f043 0220 	orr.w	r2, r3, #32
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d340:	2303      	movs	r3, #3
 800d342:	e026      	b.n	800d392 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	9300      	str	r3, [sp, #0]
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	2200      	movs	r2, #0
 800d34c:	2101      	movs	r1, #1
 800d34e:	68f8      	ldr	r0, [r7, #12]
 800d350:	f7ff ff36 	bl	800d1c0 <SPI_WaitFlagStateUntilTimeout>
 800d354:	4603      	mov	r3, r0
 800d356:	2b00      	cmp	r3, #0
 800d358:	d01a      	beq.n	800d390 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d35e:	f043 0220 	orr.w	r2, r3, #32
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d366:	2303      	movs	r3, #3
 800d368:	e013      	b.n	800d392 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	9300      	str	r3, [sp, #0]
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	2200      	movs	r2, #0
 800d372:	2101      	movs	r1, #1
 800d374:	68f8      	ldr	r0, [r7, #12]
 800d376:	f7ff ff23 	bl	800d1c0 <SPI_WaitFlagStateUntilTimeout>
 800d37a:	4603      	mov	r3, r0
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d007      	beq.n	800d390 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d384:	f043 0220 	orr.w	r2, r3, #32
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d38c:	2303      	movs	r3, #3
 800d38e:	e000      	b.n	800d392 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800d390:	2300      	movs	r3, #0
}
 800d392:	4618      	mov	r0, r3
 800d394:	3710      	adds	r7, #16
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
	...

0800d39c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b088      	sub	sp, #32
 800d3a0:	af02      	add	r7, sp, #8
 800d3a2:	60f8      	str	r0, [r7, #12]
 800d3a4:	60b9      	str	r1, [r7, #8]
 800d3a6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800d3a8:	4b1b      	ldr	r3, [pc, #108]	; (800d418 <SPI_EndRxTxTransaction+0x7c>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	4a1b      	ldr	r2, [pc, #108]	; (800d41c <SPI_EndRxTxTransaction+0x80>)
 800d3ae:	fba2 2303 	umull	r2, r3, r2, r3
 800d3b2:	0d5b      	lsrs	r3, r3, #21
 800d3b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d3b8:	fb02 f303 	mul.w	r3, r2, r3
 800d3bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	685b      	ldr	r3, [r3, #4]
 800d3c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d3c6:	d112      	bne.n	800d3ee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	9300      	str	r3, [sp, #0]
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	2180      	movs	r1, #128	; 0x80
 800d3d2:	68f8      	ldr	r0, [r7, #12]
 800d3d4:	f7ff fef4 	bl	800d1c0 <SPI_WaitFlagStateUntilTimeout>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d016      	beq.n	800d40c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3e2:	f043 0220 	orr.w	r2, r3, #32
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d3ea:	2303      	movs	r3, #3
 800d3ec:	e00f      	b.n	800d40e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800d3ee:	697b      	ldr	r3, [r7, #20]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d00a      	beq.n	800d40a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800d3f4:	697b      	ldr	r3, [r7, #20]
 800d3f6:	3b01      	subs	r3, #1
 800d3f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	689b      	ldr	r3, [r3, #8]
 800d400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d404:	2b80      	cmp	r3, #128	; 0x80
 800d406:	d0f2      	beq.n	800d3ee <SPI_EndRxTxTransaction+0x52>
 800d408:	e000      	b.n	800d40c <SPI_EndRxTxTransaction+0x70>
        break;
 800d40a:	bf00      	nop
  }

  return HAL_OK;
 800d40c:	2300      	movs	r3, #0
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3718      	adds	r7, #24
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
 800d416:	bf00      	nop
 800d418:	20000088 	.word	0x20000088
 800d41c:	165e9f81 	.word	0x165e9f81

0800d420 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b082      	sub	sp, #8
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d101      	bne.n	800d432 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d42e:	2301      	movs	r3, #1
 800d430:	e041      	b.n	800d4b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d438:	b2db      	uxtb	r3, r3
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d106      	bne.n	800d44c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2200      	movs	r2, #0
 800d442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f7f6 f9d0 	bl	80037ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2202      	movs	r2, #2
 800d450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681a      	ldr	r2, [r3, #0]
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	3304      	adds	r3, #4
 800d45c:	4619      	mov	r1, r3
 800d45e:	4610      	mov	r0, r2
 800d460:	f000 fcea 	bl	800de38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2201      	movs	r2, #1
 800d468:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2201      	movs	r2, #1
 800d470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2201      	movs	r2, #1
 800d478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2201      	movs	r2, #1
 800d480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2201      	movs	r2, #1
 800d488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2201      	movs	r2, #1
 800d490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2201      	movs	r2, #1
 800d498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2201      	movs	r2, #1
 800d4a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2201      	movs	r2, #1
 800d4b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d4b4:	2300      	movs	r3, #0
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3708      	adds	r7, #8
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
	...

0800d4c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b085      	sub	sp, #20
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d4ce:	b2db      	uxtb	r3, r3
 800d4d0:	2b01      	cmp	r3, #1
 800d4d2:	d001      	beq.n	800d4d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	e04e      	b.n	800d576 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2202      	movs	r2, #2
 800d4dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	68da      	ldr	r2, [r3, #12]
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	f042 0201 	orr.w	r2, r2, #1
 800d4ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	4a23      	ldr	r2, [pc, #140]	; (800d584 <HAL_TIM_Base_Start_IT+0xc4>)
 800d4f6:	4293      	cmp	r3, r2
 800d4f8:	d022      	beq.n	800d540 <HAL_TIM_Base_Start_IT+0x80>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d502:	d01d      	beq.n	800d540 <HAL_TIM_Base_Start_IT+0x80>
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	4a1f      	ldr	r2, [pc, #124]	; (800d588 <HAL_TIM_Base_Start_IT+0xc8>)
 800d50a:	4293      	cmp	r3, r2
 800d50c:	d018      	beq.n	800d540 <HAL_TIM_Base_Start_IT+0x80>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	4a1e      	ldr	r2, [pc, #120]	; (800d58c <HAL_TIM_Base_Start_IT+0xcc>)
 800d514:	4293      	cmp	r3, r2
 800d516:	d013      	beq.n	800d540 <HAL_TIM_Base_Start_IT+0x80>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	4a1c      	ldr	r2, [pc, #112]	; (800d590 <HAL_TIM_Base_Start_IT+0xd0>)
 800d51e:	4293      	cmp	r3, r2
 800d520:	d00e      	beq.n	800d540 <HAL_TIM_Base_Start_IT+0x80>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	4a1b      	ldr	r2, [pc, #108]	; (800d594 <HAL_TIM_Base_Start_IT+0xd4>)
 800d528:	4293      	cmp	r3, r2
 800d52a:	d009      	beq.n	800d540 <HAL_TIM_Base_Start_IT+0x80>
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	4a19      	ldr	r2, [pc, #100]	; (800d598 <HAL_TIM_Base_Start_IT+0xd8>)
 800d532:	4293      	cmp	r3, r2
 800d534:	d004      	beq.n	800d540 <HAL_TIM_Base_Start_IT+0x80>
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	4a18      	ldr	r2, [pc, #96]	; (800d59c <HAL_TIM_Base_Start_IT+0xdc>)
 800d53c:	4293      	cmp	r3, r2
 800d53e:	d111      	bne.n	800d564 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	689b      	ldr	r3, [r3, #8]
 800d546:	f003 0307 	and.w	r3, r3, #7
 800d54a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	2b06      	cmp	r3, #6
 800d550:	d010      	beq.n	800d574 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	681a      	ldr	r2, [r3, #0]
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f042 0201 	orr.w	r2, r2, #1
 800d560:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d562:	e007      	b.n	800d574 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	681a      	ldr	r2, [r3, #0]
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f042 0201 	orr.w	r2, r2, #1
 800d572:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d574:	2300      	movs	r3, #0
}
 800d576:	4618      	mov	r0, r3
 800d578:	3714      	adds	r7, #20
 800d57a:	46bd      	mov	sp, r7
 800d57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d580:	4770      	bx	lr
 800d582:	bf00      	nop
 800d584:	40010000 	.word	0x40010000
 800d588:	40000400 	.word	0x40000400
 800d58c:	40000800 	.word	0x40000800
 800d590:	40000c00 	.word	0x40000c00
 800d594:	40010400 	.word	0x40010400
 800d598:	40014000 	.word	0x40014000
 800d59c:	40001800 	.word	0x40001800

0800d5a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b082      	sub	sp, #8
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d101      	bne.n	800d5b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	e041      	b.n	800d636 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d5b8:	b2db      	uxtb	r3, r3
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d106      	bne.n	800d5cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f000 f839 	bl	800d63e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2202      	movs	r2, #2
 800d5d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681a      	ldr	r2, [r3, #0]
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	3304      	adds	r3, #4
 800d5dc:	4619      	mov	r1, r3
 800d5de:	4610      	mov	r0, r2
 800d5e0:	f000 fc2a 	bl	800de38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2201      	movs	r2, #1
 800d5e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2201      	movs	r2, #1
 800d5f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2201      	movs	r2, #1
 800d600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2201      	movs	r2, #1
 800d608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2201      	movs	r2, #1
 800d610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2201      	movs	r2, #1
 800d618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2201      	movs	r2, #1
 800d620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2201      	movs	r2, #1
 800d628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2201      	movs	r2, #1
 800d630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d634:	2300      	movs	r3, #0
}
 800d636:	4618      	mov	r0, r3
 800d638:	3708      	adds	r7, #8
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}

0800d63e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d63e:	b480      	push	{r7}
 800d640:	b083      	sub	sp, #12
 800d642:	af00      	add	r7, sp, #0
 800d644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d646:	bf00      	nop
 800d648:	370c      	adds	r7, #12
 800d64a:	46bd      	mov	sp, r7
 800d64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d650:	4770      	bx	lr
	...

0800d654 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b084      	sub	sp, #16
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
 800d65c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d109      	bne.n	800d678 <HAL_TIM_PWM_Start+0x24>
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d66a:	b2db      	uxtb	r3, r3
 800d66c:	2b01      	cmp	r3, #1
 800d66e:	bf14      	ite	ne
 800d670:	2301      	movne	r3, #1
 800d672:	2300      	moveq	r3, #0
 800d674:	b2db      	uxtb	r3, r3
 800d676:	e022      	b.n	800d6be <HAL_TIM_PWM_Start+0x6a>
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	2b04      	cmp	r3, #4
 800d67c:	d109      	bne.n	800d692 <HAL_TIM_PWM_Start+0x3e>
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d684:	b2db      	uxtb	r3, r3
 800d686:	2b01      	cmp	r3, #1
 800d688:	bf14      	ite	ne
 800d68a:	2301      	movne	r3, #1
 800d68c:	2300      	moveq	r3, #0
 800d68e:	b2db      	uxtb	r3, r3
 800d690:	e015      	b.n	800d6be <HAL_TIM_PWM_Start+0x6a>
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	2b08      	cmp	r3, #8
 800d696:	d109      	bne.n	800d6ac <HAL_TIM_PWM_Start+0x58>
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d69e:	b2db      	uxtb	r3, r3
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	bf14      	ite	ne
 800d6a4:	2301      	movne	r3, #1
 800d6a6:	2300      	moveq	r3, #0
 800d6a8:	b2db      	uxtb	r3, r3
 800d6aa:	e008      	b.n	800d6be <HAL_TIM_PWM_Start+0x6a>
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d6b2:	b2db      	uxtb	r3, r3
 800d6b4:	2b01      	cmp	r3, #1
 800d6b6:	bf14      	ite	ne
 800d6b8:	2301      	movne	r3, #1
 800d6ba:	2300      	moveq	r3, #0
 800d6bc:	b2db      	uxtb	r3, r3
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d001      	beq.n	800d6c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	e07c      	b.n	800d7c0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d104      	bne.n	800d6d6 <HAL_TIM_PWM_Start+0x82>
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2202      	movs	r2, #2
 800d6d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d6d4:	e013      	b.n	800d6fe <HAL_TIM_PWM_Start+0xaa>
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	2b04      	cmp	r3, #4
 800d6da:	d104      	bne.n	800d6e6 <HAL_TIM_PWM_Start+0x92>
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2202      	movs	r2, #2
 800d6e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d6e4:	e00b      	b.n	800d6fe <HAL_TIM_PWM_Start+0xaa>
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	2b08      	cmp	r3, #8
 800d6ea:	d104      	bne.n	800d6f6 <HAL_TIM_PWM_Start+0xa2>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2202      	movs	r2, #2
 800d6f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d6f4:	e003      	b.n	800d6fe <HAL_TIM_PWM_Start+0xaa>
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2202      	movs	r2, #2
 800d6fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	2201      	movs	r2, #1
 800d704:	6839      	ldr	r1, [r7, #0]
 800d706:	4618      	mov	r0, r3
 800d708:	f000 fe80 	bl	800e40c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	4a2d      	ldr	r2, [pc, #180]	; (800d7c8 <HAL_TIM_PWM_Start+0x174>)
 800d712:	4293      	cmp	r3, r2
 800d714:	d004      	beq.n	800d720 <HAL_TIM_PWM_Start+0xcc>
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	4a2c      	ldr	r2, [pc, #176]	; (800d7cc <HAL_TIM_PWM_Start+0x178>)
 800d71c:	4293      	cmp	r3, r2
 800d71e:	d101      	bne.n	800d724 <HAL_TIM_PWM_Start+0xd0>
 800d720:	2301      	movs	r3, #1
 800d722:	e000      	b.n	800d726 <HAL_TIM_PWM_Start+0xd2>
 800d724:	2300      	movs	r3, #0
 800d726:	2b00      	cmp	r3, #0
 800d728:	d007      	beq.n	800d73a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d738:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	4a22      	ldr	r2, [pc, #136]	; (800d7c8 <HAL_TIM_PWM_Start+0x174>)
 800d740:	4293      	cmp	r3, r2
 800d742:	d022      	beq.n	800d78a <HAL_TIM_PWM_Start+0x136>
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d74c:	d01d      	beq.n	800d78a <HAL_TIM_PWM_Start+0x136>
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	4a1f      	ldr	r2, [pc, #124]	; (800d7d0 <HAL_TIM_PWM_Start+0x17c>)
 800d754:	4293      	cmp	r3, r2
 800d756:	d018      	beq.n	800d78a <HAL_TIM_PWM_Start+0x136>
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	4a1d      	ldr	r2, [pc, #116]	; (800d7d4 <HAL_TIM_PWM_Start+0x180>)
 800d75e:	4293      	cmp	r3, r2
 800d760:	d013      	beq.n	800d78a <HAL_TIM_PWM_Start+0x136>
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	4a1c      	ldr	r2, [pc, #112]	; (800d7d8 <HAL_TIM_PWM_Start+0x184>)
 800d768:	4293      	cmp	r3, r2
 800d76a:	d00e      	beq.n	800d78a <HAL_TIM_PWM_Start+0x136>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	4a16      	ldr	r2, [pc, #88]	; (800d7cc <HAL_TIM_PWM_Start+0x178>)
 800d772:	4293      	cmp	r3, r2
 800d774:	d009      	beq.n	800d78a <HAL_TIM_PWM_Start+0x136>
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	4a18      	ldr	r2, [pc, #96]	; (800d7dc <HAL_TIM_PWM_Start+0x188>)
 800d77c:	4293      	cmp	r3, r2
 800d77e:	d004      	beq.n	800d78a <HAL_TIM_PWM_Start+0x136>
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4a16      	ldr	r2, [pc, #88]	; (800d7e0 <HAL_TIM_PWM_Start+0x18c>)
 800d786:	4293      	cmp	r3, r2
 800d788:	d111      	bne.n	800d7ae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	689b      	ldr	r3, [r3, #8]
 800d790:	f003 0307 	and.w	r3, r3, #7
 800d794:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	2b06      	cmp	r3, #6
 800d79a:	d010      	beq.n	800d7be <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	681a      	ldr	r2, [r3, #0]
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	f042 0201 	orr.w	r2, r2, #1
 800d7aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7ac:	e007      	b.n	800d7be <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	681a      	ldr	r2, [r3, #0]
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	f042 0201 	orr.w	r2, r2, #1
 800d7bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d7be:	2300      	movs	r3, #0
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	3710      	adds	r7, #16
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}
 800d7c8:	40010000 	.word	0x40010000
 800d7cc:	40010400 	.word	0x40010400
 800d7d0:	40000400 	.word	0x40000400
 800d7d4:	40000800 	.word	0x40000800
 800d7d8:	40000c00 	.word	0x40000c00
 800d7dc:	40014000 	.word	0x40014000
 800d7e0:	40001800 	.word	0x40001800

0800d7e4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	6839      	ldr	r1, [r7, #0]
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f000 fe08 	bl	800e40c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	4a2e      	ldr	r2, [pc, #184]	; (800d8bc <HAL_TIM_PWM_Stop+0xd8>)
 800d802:	4293      	cmp	r3, r2
 800d804:	d004      	beq.n	800d810 <HAL_TIM_PWM_Stop+0x2c>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	4a2d      	ldr	r2, [pc, #180]	; (800d8c0 <HAL_TIM_PWM_Stop+0xdc>)
 800d80c:	4293      	cmp	r3, r2
 800d80e:	d101      	bne.n	800d814 <HAL_TIM_PWM_Stop+0x30>
 800d810:	2301      	movs	r3, #1
 800d812:	e000      	b.n	800d816 <HAL_TIM_PWM_Stop+0x32>
 800d814:	2300      	movs	r3, #0
 800d816:	2b00      	cmp	r3, #0
 800d818:	d017      	beq.n	800d84a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	6a1a      	ldr	r2, [r3, #32]
 800d820:	f241 1311 	movw	r3, #4369	; 0x1111
 800d824:	4013      	ands	r3, r2
 800d826:	2b00      	cmp	r3, #0
 800d828:	d10f      	bne.n	800d84a <HAL_TIM_PWM_Stop+0x66>
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	6a1a      	ldr	r2, [r3, #32]
 800d830:	f240 4344 	movw	r3, #1092	; 0x444
 800d834:	4013      	ands	r3, r2
 800d836:	2b00      	cmp	r3, #0
 800d838:	d107      	bne.n	800d84a <HAL_TIM_PWM_Stop+0x66>
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d848:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	6a1a      	ldr	r2, [r3, #32]
 800d850:	f241 1311 	movw	r3, #4369	; 0x1111
 800d854:	4013      	ands	r3, r2
 800d856:	2b00      	cmp	r3, #0
 800d858:	d10f      	bne.n	800d87a <HAL_TIM_PWM_Stop+0x96>
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	6a1a      	ldr	r2, [r3, #32]
 800d860:	f240 4344 	movw	r3, #1092	; 0x444
 800d864:	4013      	ands	r3, r2
 800d866:	2b00      	cmp	r3, #0
 800d868:	d107      	bne.n	800d87a <HAL_TIM_PWM_Stop+0x96>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	681a      	ldr	r2, [r3, #0]
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	f022 0201 	bic.w	r2, r2, #1
 800d878:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d104      	bne.n	800d88a <HAL_TIM_PWM_Stop+0xa6>
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2201      	movs	r2, #1
 800d884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d888:	e013      	b.n	800d8b2 <HAL_TIM_PWM_Stop+0xce>
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	2b04      	cmp	r3, #4
 800d88e:	d104      	bne.n	800d89a <HAL_TIM_PWM_Stop+0xb6>
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2201      	movs	r2, #1
 800d894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d898:	e00b      	b.n	800d8b2 <HAL_TIM_PWM_Stop+0xce>
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	2b08      	cmp	r3, #8
 800d89e:	d104      	bne.n	800d8aa <HAL_TIM_PWM_Stop+0xc6>
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2201      	movs	r2, #1
 800d8a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d8a8:	e003      	b.n	800d8b2 <HAL_TIM_PWM_Stop+0xce>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2201      	movs	r2, #1
 800d8ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800d8b2:	2300      	movs	r3, #0
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3708      	adds	r7, #8
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	40010000 	.word	0x40010000
 800d8c0:	40010400 	.word	0x40010400

0800d8c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b082      	sub	sp, #8
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	691b      	ldr	r3, [r3, #16]
 800d8d2:	f003 0302 	and.w	r3, r3, #2
 800d8d6:	2b02      	cmp	r3, #2
 800d8d8:	d122      	bne.n	800d920 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	68db      	ldr	r3, [r3, #12]
 800d8e0:	f003 0302 	and.w	r3, r3, #2
 800d8e4:	2b02      	cmp	r3, #2
 800d8e6:	d11b      	bne.n	800d920 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	f06f 0202 	mvn.w	r2, #2
 800d8f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2201      	movs	r2, #1
 800d8f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	699b      	ldr	r3, [r3, #24]
 800d8fe:	f003 0303 	and.w	r3, r3, #3
 800d902:	2b00      	cmp	r3, #0
 800d904:	d003      	beq.n	800d90e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f000 fa77 	bl	800ddfa <HAL_TIM_IC_CaptureCallback>
 800d90c:	e005      	b.n	800d91a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f000 fa69 	bl	800dde6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f000 fa7a 	bl	800de0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2200      	movs	r2, #0
 800d91e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	691b      	ldr	r3, [r3, #16]
 800d926:	f003 0304 	and.w	r3, r3, #4
 800d92a:	2b04      	cmp	r3, #4
 800d92c:	d122      	bne.n	800d974 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	68db      	ldr	r3, [r3, #12]
 800d934:	f003 0304 	and.w	r3, r3, #4
 800d938:	2b04      	cmp	r3, #4
 800d93a:	d11b      	bne.n	800d974 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	f06f 0204 	mvn.w	r2, #4
 800d944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2202      	movs	r2, #2
 800d94a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	699b      	ldr	r3, [r3, #24]
 800d952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d956:	2b00      	cmp	r3, #0
 800d958:	d003      	beq.n	800d962 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f000 fa4d 	bl	800ddfa <HAL_TIM_IC_CaptureCallback>
 800d960:	e005      	b.n	800d96e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f000 fa3f 	bl	800dde6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f000 fa50 	bl	800de0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2200      	movs	r2, #0
 800d972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	691b      	ldr	r3, [r3, #16]
 800d97a:	f003 0308 	and.w	r3, r3, #8
 800d97e:	2b08      	cmp	r3, #8
 800d980:	d122      	bne.n	800d9c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	68db      	ldr	r3, [r3, #12]
 800d988:	f003 0308 	and.w	r3, r3, #8
 800d98c:	2b08      	cmp	r3, #8
 800d98e:	d11b      	bne.n	800d9c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f06f 0208 	mvn.w	r2, #8
 800d998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2204      	movs	r2, #4
 800d99e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	69db      	ldr	r3, [r3, #28]
 800d9a6:	f003 0303 	and.w	r3, r3, #3
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d003      	beq.n	800d9b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f000 fa23 	bl	800ddfa <HAL_TIM_IC_CaptureCallback>
 800d9b4:	e005      	b.n	800d9c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f000 fa15 	bl	800dde6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f000 fa26 	bl	800de0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	691b      	ldr	r3, [r3, #16]
 800d9ce:	f003 0310 	and.w	r3, r3, #16
 800d9d2:	2b10      	cmp	r3, #16
 800d9d4:	d122      	bne.n	800da1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	68db      	ldr	r3, [r3, #12]
 800d9dc:	f003 0310 	and.w	r3, r3, #16
 800d9e0:	2b10      	cmp	r3, #16
 800d9e2:	d11b      	bne.n	800da1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	f06f 0210 	mvn.w	r2, #16
 800d9ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2208      	movs	r2, #8
 800d9f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	69db      	ldr	r3, [r3, #28]
 800d9fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d003      	beq.n	800da0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f000 f9f9 	bl	800ddfa <HAL_TIM_IC_CaptureCallback>
 800da08:	e005      	b.n	800da16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f000 f9eb 	bl	800dde6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f000 f9fc 	bl	800de0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2200      	movs	r2, #0
 800da1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	691b      	ldr	r3, [r3, #16]
 800da22:	f003 0301 	and.w	r3, r3, #1
 800da26:	2b01      	cmp	r3, #1
 800da28:	d10e      	bne.n	800da48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	68db      	ldr	r3, [r3, #12]
 800da30:	f003 0301 	and.w	r3, r3, #1
 800da34:	2b01      	cmp	r3, #1
 800da36:	d107      	bne.n	800da48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	f06f 0201 	mvn.w	r2, #1
 800da40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f7f5 f812 	bl	8002a6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	691b      	ldr	r3, [r3, #16]
 800da4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da52:	2b80      	cmp	r3, #128	; 0x80
 800da54:	d10e      	bne.n	800da74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	68db      	ldr	r3, [r3, #12]
 800da5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da60:	2b80      	cmp	r3, #128	; 0x80
 800da62:	d107      	bne.n	800da74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800da6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f000 fd78 	bl	800e564 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	691b      	ldr	r3, [r3, #16]
 800da7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da7e:	2b40      	cmp	r3, #64	; 0x40
 800da80:	d10e      	bne.n	800daa0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	68db      	ldr	r3, [r3, #12]
 800da88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da8c:	2b40      	cmp	r3, #64	; 0x40
 800da8e:	d107      	bne.n	800daa0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800da98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f000 f9c1 	bl	800de22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	691b      	ldr	r3, [r3, #16]
 800daa6:	f003 0320 	and.w	r3, r3, #32
 800daaa:	2b20      	cmp	r3, #32
 800daac:	d10e      	bne.n	800dacc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	68db      	ldr	r3, [r3, #12]
 800dab4:	f003 0320 	and.w	r3, r3, #32
 800dab8:	2b20      	cmp	r3, #32
 800daba:	d107      	bne.n	800dacc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	f06f 0220 	mvn.w	r2, #32
 800dac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f000 fd42 	bl	800e550 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dacc:	bf00      	nop
 800dace:	3708      	adds	r7, #8
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b086      	sub	sp, #24
 800dad8:	af00      	add	r7, sp, #0
 800dada:	60f8      	str	r0, [r7, #12]
 800dadc:	60b9      	str	r1, [r7, #8]
 800dade:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dae0:	2300      	movs	r3, #0
 800dae2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800daea:	2b01      	cmp	r3, #1
 800daec:	d101      	bne.n	800daf2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800daee:	2302      	movs	r3, #2
 800daf0:	e0ae      	b.n	800dc50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	2201      	movs	r2, #1
 800daf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2b0c      	cmp	r3, #12
 800dafe:	f200 809f 	bhi.w	800dc40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800db02:	a201      	add	r2, pc, #4	; (adr r2, 800db08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800db04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db08:	0800db3d 	.word	0x0800db3d
 800db0c:	0800dc41 	.word	0x0800dc41
 800db10:	0800dc41 	.word	0x0800dc41
 800db14:	0800dc41 	.word	0x0800dc41
 800db18:	0800db7d 	.word	0x0800db7d
 800db1c:	0800dc41 	.word	0x0800dc41
 800db20:	0800dc41 	.word	0x0800dc41
 800db24:	0800dc41 	.word	0x0800dc41
 800db28:	0800dbbf 	.word	0x0800dbbf
 800db2c:	0800dc41 	.word	0x0800dc41
 800db30:	0800dc41 	.word	0x0800dc41
 800db34:	0800dc41 	.word	0x0800dc41
 800db38:	0800dbff 	.word	0x0800dbff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	68b9      	ldr	r1, [r7, #8]
 800db42:	4618      	mov	r0, r3
 800db44:	f000 fa18 	bl	800df78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	699a      	ldr	r2, [r3, #24]
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	f042 0208 	orr.w	r2, r2, #8
 800db56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	699a      	ldr	r2, [r3, #24]
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	f022 0204 	bic.w	r2, r2, #4
 800db66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	6999      	ldr	r1, [r3, #24]
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	691a      	ldr	r2, [r3, #16]
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	430a      	orrs	r2, r1
 800db78:	619a      	str	r2, [r3, #24]
      break;
 800db7a:	e064      	b.n	800dc46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	68b9      	ldr	r1, [r7, #8]
 800db82:	4618      	mov	r0, r3
 800db84:	f000 fa68 	bl	800e058 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	699a      	ldr	r2, [r3, #24]
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800db96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	699a      	ldr	r2, [r3, #24]
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dba6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	6999      	ldr	r1, [r3, #24]
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	691b      	ldr	r3, [r3, #16]
 800dbb2:	021a      	lsls	r2, r3, #8
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	430a      	orrs	r2, r1
 800dbba:	619a      	str	r2, [r3, #24]
      break;
 800dbbc:	e043      	b.n	800dc46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	68b9      	ldr	r1, [r7, #8]
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f000 fabd 	bl	800e144 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	69da      	ldr	r2, [r3, #28]
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	f042 0208 	orr.w	r2, r2, #8
 800dbd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	69da      	ldr	r2, [r3, #28]
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	f022 0204 	bic.w	r2, r2, #4
 800dbe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	69d9      	ldr	r1, [r3, #28]
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	691a      	ldr	r2, [r3, #16]
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	430a      	orrs	r2, r1
 800dbfa:	61da      	str	r2, [r3, #28]
      break;
 800dbfc:	e023      	b.n	800dc46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	68b9      	ldr	r1, [r7, #8]
 800dc04:	4618      	mov	r0, r3
 800dc06:	f000 fb11 	bl	800e22c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	69da      	ldr	r2, [r3, #28]
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dc18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	69da      	ldr	r2, [r3, #28]
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dc28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	69d9      	ldr	r1, [r3, #28]
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	691b      	ldr	r3, [r3, #16]
 800dc34:	021a      	lsls	r2, r3, #8
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	430a      	orrs	r2, r1
 800dc3c:	61da      	str	r2, [r3, #28]
      break;
 800dc3e:	e002      	b.n	800dc46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800dc40:	2301      	movs	r3, #1
 800dc42:	75fb      	strb	r3, [r7, #23]
      break;
 800dc44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	2200      	movs	r2, #0
 800dc4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dc4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3718      	adds	r7, #24
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b084      	sub	sp, #16
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dc62:	2300      	movs	r3, #0
 800dc64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc6c:	2b01      	cmp	r3, #1
 800dc6e:	d101      	bne.n	800dc74 <HAL_TIM_ConfigClockSource+0x1c>
 800dc70:	2302      	movs	r3, #2
 800dc72:	e0b4      	b.n	800ddde <HAL_TIM_ConfigClockSource+0x186>
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2201      	movs	r2, #1
 800dc78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2202      	movs	r2, #2
 800dc80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	689b      	ldr	r3, [r3, #8]
 800dc8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800dc92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dc9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	68ba      	ldr	r2, [r7, #8]
 800dca2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dcac:	d03e      	beq.n	800dd2c <HAL_TIM_ConfigClockSource+0xd4>
 800dcae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dcb2:	f200 8087 	bhi.w	800ddc4 <HAL_TIM_ConfigClockSource+0x16c>
 800dcb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dcba:	f000 8086 	beq.w	800ddca <HAL_TIM_ConfigClockSource+0x172>
 800dcbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dcc2:	d87f      	bhi.n	800ddc4 <HAL_TIM_ConfigClockSource+0x16c>
 800dcc4:	2b70      	cmp	r3, #112	; 0x70
 800dcc6:	d01a      	beq.n	800dcfe <HAL_TIM_ConfigClockSource+0xa6>
 800dcc8:	2b70      	cmp	r3, #112	; 0x70
 800dcca:	d87b      	bhi.n	800ddc4 <HAL_TIM_ConfigClockSource+0x16c>
 800dccc:	2b60      	cmp	r3, #96	; 0x60
 800dcce:	d050      	beq.n	800dd72 <HAL_TIM_ConfigClockSource+0x11a>
 800dcd0:	2b60      	cmp	r3, #96	; 0x60
 800dcd2:	d877      	bhi.n	800ddc4 <HAL_TIM_ConfigClockSource+0x16c>
 800dcd4:	2b50      	cmp	r3, #80	; 0x50
 800dcd6:	d03c      	beq.n	800dd52 <HAL_TIM_ConfigClockSource+0xfa>
 800dcd8:	2b50      	cmp	r3, #80	; 0x50
 800dcda:	d873      	bhi.n	800ddc4 <HAL_TIM_ConfigClockSource+0x16c>
 800dcdc:	2b40      	cmp	r3, #64	; 0x40
 800dcde:	d058      	beq.n	800dd92 <HAL_TIM_ConfigClockSource+0x13a>
 800dce0:	2b40      	cmp	r3, #64	; 0x40
 800dce2:	d86f      	bhi.n	800ddc4 <HAL_TIM_ConfigClockSource+0x16c>
 800dce4:	2b30      	cmp	r3, #48	; 0x30
 800dce6:	d064      	beq.n	800ddb2 <HAL_TIM_ConfigClockSource+0x15a>
 800dce8:	2b30      	cmp	r3, #48	; 0x30
 800dcea:	d86b      	bhi.n	800ddc4 <HAL_TIM_ConfigClockSource+0x16c>
 800dcec:	2b20      	cmp	r3, #32
 800dcee:	d060      	beq.n	800ddb2 <HAL_TIM_ConfigClockSource+0x15a>
 800dcf0:	2b20      	cmp	r3, #32
 800dcf2:	d867      	bhi.n	800ddc4 <HAL_TIM_ConfigClockSource+0x16c>
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d05c      	beq.n	800ddb2 <HAL_TIM_ConfigClockSource+0x15a>
 800dcf8:	2b10      	cmp	r3, #16
 800dcfa:	d05a      	beq.n	800ddb2 <HAL_TIM_ConfigClockSource+0x15a>
 800dcfc:	e062      	b.n	800ddc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6818      	ldr	r0, [r3, #0]
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	6899      	ldr	r1, [r3, #8]
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	685a      	ldr	r2, [r3, #4]
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	68db      	ldr	r3, [r3, #12]
 800dd0e:	f000 fb5d 	bl	800e3cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	689b      	ldr	r3, [r3, #8]
 800dd18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800dd20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	68ba      	ldr	r2, [r7, #8]
 800dd28:	609a      	str	r2, [r3, #8]
      break;
 800dd2a:	e04f      	b.n	800ddcc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6818      	ldr	r0, [r3, #0]
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	6899      	ldr	r1, [r3, #8]
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	685a      	ldr	r2, [r3, #4]
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	68db      	ldr	r3, [r3, #12]
 800dd3c:	f000 fb46 	bl	800e3cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	689a      	ldr	r2, [r3, #8]
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dd4e:	609a      	str	r2, [r3, #8]
      break;
 800dd50:	e03c      	b.n	800ddcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6818      	ldr	r0, [r3, #0]
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	6859      	ldr	r1, [r3, #4]
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	68db      	ldr	r3, [r3, #12]
 800dd5e:	461a      	mov	r2, r3
 800dd60:	f000 faba 	bl	800e2d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	2150      	movs	r1, #80	; 0x50
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f000 fb13 	bl	800e396 <TIM_ITRx_SetConfig>
      break;
 800dd70:	e02c      	b.n	800ddcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6818      	ldr	r0, [r3, #0]
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	6859      	ldr	r1, [r3, #4]
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	68db      	ldr	r3, [r3, #12]
 800dd7e:	461a      	mov	r2, r3
 800dd80:	f000 fad9 	bl	800e336 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	2160      	movs	r1, #96	; 0x60
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f000 fb03 	bl	800e396 <TIM_ITRx_SetConfig>
      break;
 800dd90:	e01c      	b.n	800ddcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6818      	ldr	r0, [r3, #0]
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	6859      	ldr	r1, [r3, #4]
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	68db      	ldr	r3, [r3, #12]
 800dd9e:	461a      	mov	r2, r3
 800dda0:	f000 fa9a 	bl	800e2d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	2140      	movs	r1, #64	; 0x40
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f000 faf3 	bl	800e396 <TIM_ITRx_SetConfig>
      break;
 800ddb0:	e00c      	b.n	800ddcc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681a      	ldr	r2, [r3, #0]
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	4619      	mov	r1, r3
 800ddbc:	4610      	mov	r0, r2
 800ddbe:	f000 faea 	bl	800e396 <TIM_ITRx_SetConfig>
      break;
 800ddc2:	e003      	b.n	800ddcc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ddc4:	2301      	movs	r3, #1
 800ddc6:	73fb      	strb	r3, [r7, #15]
      break;
 800ddc8:	e000      	b.n	800ddcc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ddca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2201      	movs	r2, #1
 800ddd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dddc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	3710      	adds	r7, #16
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd80      	pop	{r7, pc}

0800dde6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dde6:	b480      	push	{r7}
 800dde8:	b083      	sub	sp, #12
 800ddea:	af00      	add	r7, sp, #0
 800ddec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ddee:	bf00      	nop
 800ddf0:	370c      	adds	r7, #12
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf8:	4770      	bx	lr

0800ddfa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ddfa:	b480      	push	{r7}
 800ddfc:	b083      	sub	sp, #12
 800ddfe:	af00      	add	r7, sp, #0
 800de00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800de02:	bf00      	nop
 800de04:	370c      	adds	r7, #12
 800de06:	46bd      	mov	sp, r7
 800de08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0c:	4770      	bx	lr

0800de0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800de0e:	b480      	push	{r7}
 800de10:	b083      	sub	sp, #12
 800de12:	af00      	add	r7, sp, #0
 800de14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800de16:	bf00      	nop
 800de18:	370c      	adds	r7, #12
 800de1a:	46bd      	mov	sp, r7
 800de1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de20:	4770      	bx	lr

0800de22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800de22:	b480      	push	{r7}
 800de24:	b083      	sub	sp, #12
 800de26:	af00      	add	r7, sp, #0
 800de28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800de2a:	bf00      	nop
 800de2c:	370c      	adds	r7, #12
 800de2e:	46bd      	mov	sp, r7
 800de30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de34:	4770      	bx	lr
	...

0800de38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800de38:	b480      	push	{r7}
 800de3a:	b085      	sub	sp, #20
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
 800de40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	4a40      	ldr	r2, [pc, #256]	; (800df4c <TIM_Base_SetConfig+0x114>)
 800de4c:	4293      	cmp	r3, r2
 800de4e:	d013      	beq.n	800de78 <TIM_Base_SetConfig+0x40>
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de56:	d00f      	beq.n	800de78 <TIM_Base_SetConfig+0x40>
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	4a3d      	ldr	r2, [pc, #244]	; (800df50 <TIM_Base_SetConfig+0x118>)
 800de5c:	4293      	cmp	r3, r2
 800de5e:	d00b      	beq.n	800de78 <TIM_Base_SetConfig+0x40>
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	4a3c      	ldr	r2, [pc, #240]	; (800df54 <TIM_Base_SetConfig+0x11c>)
 800de64:	4293      	cmp	r3, r2
 800de66:	d007      	beq.n	800de78 <TIM_Base_SetConfig+0x40>
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	4a3b      	ldr	r2, [pc, #236]	; (800df58 <TIM_Base_SetConfig+0x120>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d003      	beq.n	800de78 <TIM_Base_SetConfig+0x40>
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	4a3a      	ldr	r2, [pc, #232]	; (800df5c <TIM_Base_SetConfig+0x124>)
 800de74:	4293      	cmp	r3, r2
 800de76:	d108      	bne.n	800de8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	685b      	ldr	r3, [r3, #4]
 800de84:	68fa      	ldr	r2, [r7, #12]
 800de86:	4313      	orrs	r3, r2
 800de88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	4a2f      	ldr	r2, [pc, #188]	; (800df4c <TIM_Base_SetConfig+0x114>)
 800de8e:	4293      	cmp	r3, r2
 800de90:	d02b      	beq.n	800deea <TIM_Base_SetConfig+0xb2>
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de98:	d027      	beq.n	800deea <TIM_Base_SetConfig+0xb2>
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	4a2c      	ldr	r2, [pc, #176]	; (800df50 <TIM_Base_SetConfig+0x118>)
 800de9e:	4293      	cmp	r3, r2
 800dea0:	d023      	beq.n	800deea <TIM_Base_SetConfig+0xb2>
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	4a2b      	ldr	r2, [pc, #172]	; (800df54 <TIM_Base_SetConfig+0x11c>)
 800dea6:	4293      	cmp	r3, r2
 800dea8:	d01f      	beq.n	800deea <TIM_Base_SetConfig+0xb2>
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	4a2a      	ldr	r2, [pc, #168]	; (800df58 <TIM_Base_SetConfig+0x120>)
 800deae:	4293      	cmp	r3, r2
 800deb0:	d01b      	beq.n	800deea <TIM_Base_SetConfig+0xb2>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	4a29      	ldr	r2, [pc, #164]	; (800df5c <TIM_Base_SetConfig+0x124>)
 800deb6:	4293      	cmp	r3, r2
 800deb8:	d017      	beq.n	800deea <TIM_Base_SetConfig+0xb2>
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	4a28      	ldr	r2, [pc, #160]	; (800df60 <TIM_Base_SetConfig+0x128>)
 800debe:	4293      	cmp	r3, r2
 800dec0:	d013      	beq.n	800deea <TIM_Base_SetConfig+0xb2>
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	4a27      	ldr	r2, [pc, #156]	; (800df64 <TIM_Base_SetConfig+0x12c>)
 800dec6:	4293      	cmp	r3, r2
 800dec8:	d00f      	beq.n	800deea <TIM_Base_SetConfig+0xb2>
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	4a26      	ldr	r2, [pc, #152]	; (800df68 <TIM_Base_SetConfig+0x130>)
 800dece:	4293      	cmp	r3, r2
 800ded0:	d00b      	beq.n	800deea <TIM_Base_SetConfig+0xb2>
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	4a25      	ldr	r2, [pc, #148]	; (800df6c <TIM_Base_SetConfig+0x134>)
 800ded6:	4293      	cmp	r3, r2
 800ded8:	d007      	beq.n	800deea <TIM_Base_SetConfig+0xb2>
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	4a24      	ldr	r2, [pc, #144]	; (800df70 <TIM_Base_SetConfig+0x138>)
 800dede:	4293      	cmp	r3, r2
 800dee0:	d003      	beq.n	800deea <TIM_Base_SetConfig+0xb2>
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	4a23      	ldr	r2, [pc, #140]	; (800df74 <TIM_Base_SetConfig+0x13c>)
 800dee6:	4293      	cmp	r3, r2
 800dee8:	d108      	bne.n	800defc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800def0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	68db      	ldr	r3, [r3, #12]
 800def6:	68fa      	ldr	r2, [r7, #12]
 800def8:	4313      	orrs	r3, r2
 800defa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	695b      	ldr	r3, [r3, #20]
 800df06:	4313      	orrs	r3, r2
 800df08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	68fa      	ldr	r2, [r7, #12]
 800df0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	689a      	ldr	r2, [r3, #8]
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	681a      	ldr	r2, [r3, #0]
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	4a0a      	ldr	r2, [pc, #40]	; (800df4c <TIM_Base_SetConfig+0x114>)
 800df24:	4293      	cmp	r3, r2
 800df26:	d003      	beq.n	800df30 <TIM_Base_SetConfig+0xf8>
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	4a0c      	ldr	r2, [pc, #48]	; (800df5c <TIM_Base_SetConfig+0x124>)
 800df2c:	4293      	cmp	r3, r2
 800df2e:	d103      	bne.n	800df38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	691a      	ldr	r2, [r3, #16]
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2201      	movs	r2, #1
 800df3c:	615a      	str	r2, [r3, #20]
}
 800df3e:	bf00      	nop
 800df40:	3714      	adds	r7, #20
 800df42:	46bd      	mov	sp, r7
 800df44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df48:	4770      	bx	lr
 800df4a:	bf00      	nop
 800df4c:	40010000 	.word	0x40010000
 800df50:	40000400 	.word	0x40000400
 800df54:	40000800 	.word	0x40000800
 800df58:	40000c00 	.word	0x40000c00
 800df5c:	40010400 	.word	0x40010400
 800df60:	40014000 	.word	0x40014000
 800df64:	40014400 	.word	0x40014400
 800df68:	40014800 	.word	0x40014800
 800df6c:	40001800 	.word	0x40001800
 800df70:	40001c00 	.word	0x40001c00
 800df74:	40002000 	.word	0x40002000

0800df78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800df78:	b480      	push	{r7}
 800df7a:	b087      	sub	sp, #28
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
 800df80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6a1b      	ldr	r3, [r3, #32]
 800df86:	f023 0201 	bic.w	r2, r3, #1
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6a1b      	ldr	r3, [r3, #32]
 800df92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	685b      	ldr	r3, [r3, #4]
 800df98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	699b      	ldr	r3, [r3, #24]
 800df9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dfa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	f023 0303 	bic.w	r3, r3, #3
 800dfae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	68fa      	ldr	r2, [r7, #12]
 800dfb6:	4313      	orrs	r3, r2
 800dfb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dfba:	697b      	ldr	r3, [r7, #20]
 800dfbc:	f023 0302 	bic.w	r3, r3, #2
 800dfc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	689b      	ldr	r3, [r3, #8]
 800dfc6:	697a      	ldr	r2, [r7, #20]
 800dfc8:	4313      	orrs	r3, r2
 800dfca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	4a20      	ldr	r2, [pc, #128]	; (800e050 <TIM_OC1_SetConfig+0xd8>)
 800dfd0:	4293      	cmp	r3, r2
 800dfd2:	d003      	beq.n	800dfdc <TIM_OC1_SetConfig+0x64>
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	4a1f      	ldr	r2, [pc, #124]	; (800e054 <TIM_OC1_SetConfig+0xdc>)
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	d10c      	bne.n	800dff6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	f023 0308 	bic.w	r3, r3, #8
 800dfe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	68db      	ldr	r3, [r3, #12]
 800dfe8:	697a      	ldr	r2, [r7, #20]
 800dfea:	4313      	orrs	r3, r2
 800dfec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	f023 0304 	bic.w	r3, r3, #4
 800dff4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	4a15      	ldr	r2, [pc, #84]	; (800e050 <TIM_OC1_SetConfig+0xd8>)
 800dffa:	4293      	cmp	r3, r2
 800dffc:	d003      	beq.n	800e006 <TIM_OC1_SetConfig+0x8e>
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	4a14      	ldr	r2, [pc, #80]	; (800e054 <TIM_OC1_SetConfig+0xdc>)
 800e002:	4293      	cmp	r3, r2
 800e004:	d111      	bne.n	800e02a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e00c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e00e:	693b      	ldr	r3, [r7, #16]
 800e010:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	695b      	ldr	r3, [r3, #20]
 800e01a:	693a      	ldr	r2, [r7, #16]
 800e01c:	4313      	orrs	r3, r2
 800e01e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	699b      	ldr	r3, [r3, #24]
 800e024:	693a      	ldr	r2, [r7, #16]
 800e026:	4313      	orrs	r3, r2
 800e028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	693a      	ldr	r2, [r7, #16]
 800e02e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	68fa      	ldr	r2, [r7, #12]
 800e034:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	685a      	ldr	r2, [r3, #4]
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	697a      	ldr	r2, [r7, #20]
 800e042:	621a      	str	r2, [r3, #32]
}
 800e044:	bf00      	nop
 800e046:	371c      	adds	r7, #28
 800e048:	46bd      	mov	sp, r7
 800e04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04e:	4770      	bx	lr
 800e050:	40010000 	.word	0x40010000
 800e054:	40010400 	.word	0x40010400

0800e058 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e058:	b480      	push	{r7}
 800e05a:	b087      	sub	sp, #28
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6a1b      	ldr	r3, [r3, #32]
 800e066:	f023 0210 	bic.w	r2, r3, #16
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6a1b      	ldr	r3, [r3, #32]
 800e072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	685b      	ldr	r3, [r3, #4]
 800e078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	699b      	ldr	r3, [r3, #24]
 800e07e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e08e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	021b      	lsls	r3, r3, #8
 800e096:	68fa      	ldr	r2, [r7, #12]
 800e098:	4313      	orrs	r3, r2
 800e09a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e09c:	697b      	ldr	r3, [r7, #20]
 800e09e:	f023 0320 	bic.w	r3, r3, #32
 800e0a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	689b      	ldr	r3, [r3, #8]
 800e0a8:	011b      	lsls	r3, r3, #4
 800e0aa:	697a      	ldr	r2, [r7, #20]
 800e0ac:	4313      	orrs	r3, r2
 800e0ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	4a22      	ldr	r2, [pc, #136]	; (800e13c <TIM_OC2_SetConfig+0xe4>)
 800e0b4:	4293      	cmp	r3, r2
 800e0b6:	d003      	beq.n	800e0c0 <TIM_OC2_SetConfig+0x68>
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	4a21      	ldr	r2, [pc, #132]	; (800e140 <TIM_OC2_SetConfig+0xe8>)
 800e0bc:	4293      	cmp	r3, r2
 800e0be:	d10d      	bne.n	800e0dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e0c0:	697b      	ldr	r3, [r7, #20]
 800e0c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e0c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	68db      	ldr	r3, [r3, #12]
 800e0cc:	011b      	lsls	r3, r3, #4
 800e0ce:	697a      	ldr	r2, [r7, #20]
 800e0d0:	4313      	orrs	r3, r2
 800e0d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e0d4:	697b      	ldr	r3, [r7, #20]
 800e0d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e0da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	4a17      	ldr	r2, [pc, #92]	; (800e13c <TIM_OC2_SetConfig+0xe4>)
 800e0e0:	4293      	cmp	r3, r2
 800e0e2:	d003      	beq.n	800e0ec <TIM_OC2_SetConfig+0x94>
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	4a16      	ldr	r2, [pc, #88]	; (800e140 <TIM_OC2_SetConfig+0xe8>)
 800e0e8:	4293      	cmp	r3, r2
 800e0ea:	d113      	bne.n	800e114 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e0ec:	693b      	ldr	r3, [r7, #16]
 800e0ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e0f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e0f4:	693b      	ldr	r3, [r7, #16]
 800e0f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e0fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	695b      	ldr	r3, [r3, #20]
 800e100:	009b      	lsls	r3, r3, #2
 800e102:	693a      	ldr	r2, [r7, #16]
 800e104:	4313      	orrs	r3, r2
 800e106:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	699b      	ldr	r3, [r3, #24]
 800e10c:	009b      	lsls	r3, r3, #2
 800e10e:	693a      	ldr	r2, [r7, #16]
 800e110:	4313      	orrs	r3, r2
 800e112:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	693a      	ldr	r2, [r7, #16]
 800e118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	68fa      	ldr	r2, [r7, #12]
 800e11e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	685a      	ldr	r2, [r3, #4]
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	697a      	ldr	r2, [r7, #20]
 800e12c:	621a      	str	r2, [r3, #32]
}
 800e12e:	bf00      	nop
 800e130:	371c      	adds	r7, #28
 800e132:	46bd      	mov	sp, r7
 800e134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e138:	4770      	bx	lr
 800e13a:	bf00      	nop
 800e13c:	40010000 	.word	0x40010000
 800e140:	40010400 	.word	0x40010400

0800e144 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e144:	b480      	push	{r7}
 800e146:	b087      	sub	sp, #28
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
 800e14c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6a1b      	ldr	r3, [r3, #32]
 800e152:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6a1b      	ldr	r3, [r3, #32]
 800e15e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	685b      	ldr	r3, [r3, #4]
 800e164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	69db      	ldr	r3, [r3, #28]
 800e16a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	f023 0303 	bic.w	r3, r3, #3
 800e17a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	68fa      	ldr	r2, [r7, #12]
 800e182:	4313      	orrs	r3, r2
 800e184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e186:	697b      	ldr	r3, [r7, #20]
 800e188:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e18c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	689b      	ldr	r3, [r3, #8]
 800e192:	021b      	lsls	r3, r3, #8
 800e194:	697a      	ldr	r2, [r7, #20]
 800e196:	4313      	orrs	r3, r2
 800e198:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	4a21      	ldr	r2, [pc, #132]	; (800e224 <TIM_OC3_SetConfig+0xe0>)
 800e19e:	4293      	cmp	r3, r2
 800e1a0:	d003      	beq.n	800e1aa <TIM_OC3_SetConfig+0x66>
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	4a20      	ldr	r2, [pc, #128]	; (800e228 <TIM_OC3_SetConfig+0xe4>)
 800e1a6:	4293      	cmp	r3, r2
 800e1a8:	d10d      	bne.n	800e1c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e1b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	68db      	ldr	r3, [r3, #12]
 800e1b6:	021b      	lsls	r3, r3, #8
 800e1b8:	697a      	ldr	r2, [r7, #20]
 800e1ba:	4313      	orrs	r3, r2
 800e1bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e1be:	697b      	ldr	r3, [r7, #20]
 800e1c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e1c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	4a16      	ldr	r2, [pc, #88]	; (800e224 <TIM_OC3_SetConfig+0xe0>)
 800e1ca:	4293      	cmp	r3, r2
 800e1cc:	d003      	beq.n	800e1d6 <TIM_OC3_SetConfig+0x92>
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	4a15      	ldr	r2, [pc, #84]	; (800e228 <TIM_OC3_SetConfig+0xe4>)
 800e1d2:	4293      	cmp	r3, r2
 800e1d4:	d113      	bne.n	800e1fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e1dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e1e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	695b      	ldr	r3, [r3, #20]
 800e1ea:	011b      	lsls	r3, r3, #4
 800e1ec:	693a      	ldr	r2, [r7, #16]
 800e1ee:	4313      	orrs	r3, r2
 800e1f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	699b      	ldr	r3, [r3, #24]
 800e1f6:	011b      	lsls	r3, r3, #4
 800e1f8:	693a      	ldr	r2, [r7, #16]
 800e1fa:	4313      	orrs	r3, r2
 800e1fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	693a      	ldr	r2, [r7, #16]
 800e202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	68fa      	ldr	r2, [r7, #12]
 800e208:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	685a      	ldr	r2, [r3, #4]
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	697a      	ldr	r2, [r7, #20]
 800e216:	621a      	str	r2, [r3, #32]
}
 800e218:	bf00      	nop
 800e21a:	371c      	adds	r7, #28
 800e21c:	46bd      	mov	sp, r7
 800e21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e222:	4770      	bx	lr
 800e224:	40010000 	.word	0x40010000
 800e228:	40010400 	.word	0x40010400

0800e22c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e22c:	b480      	push	{r7}
 800e22e:	b087      	sub	sp, #28
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
 800e234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	6a1b      	ldr	r3, [r3, #32]
 800e23a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	6a1b      	ldr	r3, [r3, #32]
 800e246:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	685b      	ldr	r3, [r3, #4]
 800e24c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	69db      	ldr	r3, [r3, #28]
 800e252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e25a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	021b      	lsls	r3, r3, #8
 800e26a:	68fa      	ldr	r2, [r7, #12]
 800e26c:	4313      	orrs	r3, r2
 800e26e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e270:	693b      	ldr	r3, [r7, #16]
 800e272:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e276:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	689b      	ldr	r3, [r3, #8]
 800e27c:	031b      	lsls	r3, r3, #12
 800e27e:	693a      	ldr	r2, [r7, #16]
 800e280:	4313      	orrs	r3, r2
 800e282:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	4a12      	ldr	r2, [pc, #72]	; (800e2d0 <TIM_OC4_SetConfig+0xa4>)
 800e288:	4293      	cmp	r3, r2
 800e28a:	d003      	beq.n	800e294 <TIM_OC4_SetConfig+0x68>
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	4a11      	ldr	r2, [pc, #68]	; (800e2d4 <TIM_OC4_SetConfig+0xa8>)
 800e290:	4293      	cmp	r3, r2
 800e292:	d109      	bne.n	800e2a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e294:	697b      	ldr	r3, [r7, #20]
 800e296:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e29a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	695b      	ldr	r3, [r3, #20]
 800e2a0:	019b      	lsls	r3, r3, #6
 800e2a2:	697a      	ldr	r2, [r7, #20]
 800e2a4:	4313      	orrs	r3, r2
 800e2a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	697a      	ldr	r2, [r7, #20]
 800e2ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	68fa      	ldr	r2, [r7, #12]
 800e2b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	685a      	ldr	r2, [r3, #4]
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	693a      	ldr	r2, [r7, #16]
 800e2c0:	621a      	str	r2, [r3, #32]
}
 800e2c2:	bf00      	nop
 800e2c4:	371c      	adds	r7, #28
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2cc:	4770      	bx	lr
 800e2ce:	bf00      	nop
 800e2d0:	40010000 	.word	0x40010000
 800e2d4:	40010400 	.word	0x40010400

0800e2d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e2d8:	b480      	push	{r7}
 800e2da:	b087      	sub	sp, #28
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	60f8      	str	r0, [r7, #12]
 800e2e0:	60b9      	str	r1, [r7, #8]
 800e2e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	6a1b      	ldr	r3, [r3, #32]
 800e2e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	6a1b      	ldr	r3, [r3, #32]
 800e2ee:	f023 0201 	bic.w	r2, r3, #1
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	699b      	ldr	r3, [r3, #24]
 800e2fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e2fc:	693b      	ldr	r3, [r7, #16]
 800e2fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	011b      	lsls	r3, r3, #4
 800e308:	693a      	ldr	r2, [r7, #16]
 800e30a:	4313      	orrs	r3, r2
 800e30c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e30e:	697b      	ldr	r3, [r7, #20]
 800e310:	f023 030a 	bic.w	r3, r3, #10
 800e314:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e316:	697a      	ldr	r2, [r7, #20]
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	4313      	orrs	r3, r2
 800e31c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	693a      	ldr	r2, [r7, #16]
 800e322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	697a      	ldr	r2, [r7, #20]
 800e328:	621a      	str	r2, [r3, #32]
}
 800e32a:	bf00      	nop
 800e32c:	371c      	adds	r7, #28
 800e32e:	46bd      	mov	sp, r7
 800e330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e334:	4770      	bx	lr

0800e336 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e336:	b480      	push	{r7}
 800e338:	b087      	sub	sp, #28
 800e33a:	af00      	add	r7, sp, #0
 800e33c:	60f8      	str	r0, [r7, #12]
 800e33e:	60b9      	str	r1, [r7, #8]
 800e340:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	6a1b      	ldr	r3, [r3, #32]
 800e346:	f023 0210 	bic.w	r2, r3, #16
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	699b      	ldr	r3, [r3, #24]
 800e352:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	6a1b      	ldr	r3, [r3, #32]
 800e358:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e360:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	031b      	lsls	r3, r3, #12
 800e366:	697a      	ldr	r2, [r7, #20]
 800e368:	4313      	orrs	r3, r2
 800e36a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e36c:	693b      	ldr	r3, [r7, #16]
 800e36e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e372:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	011b      	lsls	r3, r3, #4
 800e378:	693a      	ldr	r2, [r7, #16]
 800e37a:	4313      	orrs	r3, r2
 800e37c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	697a      	ldr	r2, [r7, #20]
 800e382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	693a      	ldr	r2, [r7, #16]
 800e388:	621a      	str	r2, [r3, #32]
}
 800e38a:	bf00      	nop
 800e38c:	371c      	adds	r7, #28
 800e38e:	46bd      	mov	sp, r7
 800e390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e394:	4770      	bx	lr

0800e396 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e396:	b480      	push	{r7}
 800e398:	b085      	sub	sp, #20
 800e39a:	af00      	add	r7, sp, #0
 800e39c:	6078      	str	r0, [r7, #4]
 800e39e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	689b      	ldr	r3, [r3, #8]
 800e3a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e3ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e3ae:	683a      	ldr	r2, [r7, #0]
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	4313      	orrs	r3, r2
 800e3b4:	f043 0307 	orr.w	r3, r3, #7
 800e3b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	68fa      	ldr	r2, [r7, #12]
 800e3be:	609a      	str	r2, [r3, #8]
}
 800e3c0:	bf00      	nop
 800e3c2:	3714      	adds	r7, #20
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ca:	4770      	bx	lr

0800e3cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e3cc:	b480      	push	{r7}
 800e3ce:	b087      	sub	sp, #28
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	60f8      	str	r0, [r7, #12]
 800e3d4:	60b9      	str	r1, [r7, #8]
 800e3d6:	607a      	str	r2, [r7, #4]
 800e3d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	689b      	ldr	r3, [r3, #8]
 800e3de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e3e0:	697b      	ldr	r3, [r7, #20]
 800e3e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e3e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	021a      	lsls	r2, r3, #8
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	431a      	orrs	r2, r3
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	4313      	orrs	r3, r2
 800e3f4:	697a      	ldr	r2, [r7, #20]
 800e3f6:	4313      	orrs	r3, r2
 800e3f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	697a      	ldr	r2, [r7, #20]
 800e3fe:	609a      	str	r2, [r3, #8]
}
 800e400:	bf00      	nop
 800e402:	371c      	adds	r7, #28
 800e404:	46bd      	mov	sp, r7
 800e406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40a:	4770      	bx	lr

0800e40c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e40c:	b480      	push	{r7}
 800e40e:	b087      	sub	sp, #28
 800e410:	af00      	add	r7, sp, #0
 800e412:	60f8      	str	r0, [r7, #12]
 800e414:	60b9      	str	r1, [r7, #8]
 800e416:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	f003 031f 	and.w	r3, r3, #31
 800e41e:	2201      	movs	r2, #1
 800e420:	fa02 f303 	lsl.w	r3, r2, r3
 800e424:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	6a1a      	ldr	r2, [r3, #32]
 800e42a:	697b      	ldr	r3, [r7, #20]
 800e42c:	43db      	mvns	r3, r3
 800e42e:	401a      	ands	r2, r3
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	6a1a      	ldr	r2, [r3, #32]
 800e438:	68bb      	ldr	r3, [r7, #8]
 800e43a:	f003 031f 	and.w	r3, r3, #31
 800e43e:	6879      	ldr	r1, [r7, #4]
 800e440:	fa01 f303 	lsl.w	r3, r1, r3
 800e444:	431a      	orrs	r2, r3
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	621a      	str	r2, [r3, #32]
}
 800e44a:	bf00      	nop
 800e44c:	371c      	adds	r7, #28
 800e44e:	46bd      	mov	sp, r7
 800e450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e454:	4770      	bx	lr
	...

0800e458 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e458:	b480      	push	{r7}
 800e45a:	b085      	sub	sp, #20
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
 800e460:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e468:	2b01      	cmp	r3, #1
 800e46a:	d101      	bne.n	800e470 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e46c:	2302      	movs	r3, #2
 800e46e:	e05a      	b.n	800e526 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2201      	movs	r2, #1
 800e474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2202      	movs	r2, #2
 800e47c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	685b      	ldr	r3, [r3, #4]
 800e486:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	689b      	ldr	r3, [r3, #8]
 800e48e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e496:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	68fa      	ldr	r2, [r7, #12]
 800e49e:	4313      	orrs	r3, r2
 800e4a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	68fa      	ldr	r2, [r7, #12]
 800e4a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	4a21      	ldr	r2, [pc, #132]	; (800e534 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e4b0:	4293      	cmp	r3, r2
 800e4b2:	d022      	beq.n	800e4fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e4bc:	d01d      	beq.n	800e4fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	4a1d      	ldr	r2, [pc, #116]	; (800e538 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e4c4:	4293      	cmp	r3, r2
 800e4c6:	d018      	beq.n	800e4fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	4a1b      	ldr	r2, [pc, #108]	; (800e53c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e4ce:	4293      	cmp	r3, r2
 800e4d0:	d013      	beq.n	800e4fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	4a1a      	ldr	r2, [pc, #104]	; (800e540 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e4d8:	4293      	cmp	r3, r2
 800e4da:	d00e      	beq.n	800e4fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	4a18      	ldr	r2, [pc, #96]	; (800e544 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e4e2:	4293      	cmp	r3, r2
 800e4e4:	d009      	beq.n	800e4fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	4a17      	ldr	r2, [pc, #92]	; (800e548 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e4ec:	4293      	cmp	r3, r2
 800e4ee:	d004      	beq.n	800e4fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	4a15      	ldr	r2, [pc, #84]	; (800e54c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e4f6:	4293      	cmp	r3, r2
 800e4f8:	d10c      	bne.n	800e514 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e500:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	685b      	ldr	r3, [r3, #4]
 800e506:	68ba      	ldr	r2, [r7, #8]
 800e508:	4313      	orrs	r3, r2
 800e50a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	68ba      	ldr	r2, [r7, #8]
 800e512:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2201      	movs	r2, #1
 800e518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2200      	movs	r2, #0
 800e520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e524:	2300      	movs	r3, #0
}
 800e526:	4618      	mov	r0, r3
 800e528:	3714      	adds	r7, #20
 800e52a:	46bd      	mov	sp, r7
 800e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e530:	4770      	bx	lr
 800e532:	bf00      	nop
 800e534:	40010000 	.word	0x40010000
 800e538:	40000400 	.word	0x40000400
 800e53c:	40000800 	.word	0x40000800
 800e540:	40000c00 	.word	0x40000c00
 800e544:	40010400 	.word	0x40010400
 800e548:	40014000 	.word	0x40014000
 800e54c:	40001800 	.word	0x40001800

0800e550 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e550:	b480      	push	{r7}
 800e552:	b083      	sub	sp, #12
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e558:	bf00      	nop
 800e55a:	370c      	adds	r7, #12
 800e55c:	46bd      	mov	sp, r7
 800e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e562:	4770      	bx	lr

0800e564 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e564:	b480      	push	{r7}
 800e566:	b083      	sub	sp, #12
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e56c:	bf00      	nop
 800e56e:	370c      	adds	r7, #12
 800e570:	46bd      	mov	sp, r7
 800e572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e576:	4770      	bx	lr

0800e578 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b082      	sub	sp, #8
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d101      	bne.n	800e58a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e586:	2301      	movs	r3, #1
 800e588:	e03f      	b.n	800e60a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e590:	b2db      	uxtb	r3, r3
 800e592:	2b00      	cmp	r3, #0
 800e594:	d106      	bne.n	800e5a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2200      	movs	r2, #0
 800e59a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f7f5 f9fa 	bl	8003998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2224      	movs	r2, #36	; 0x24
 800e5a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	68da      	ldr	r2, [r3, #12]
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e5ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f000 f9cb 	bl	800e958 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	691a      	ldr	r2, [r3, #16]
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e5d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	695a      	ldr	r2, [r3, #20]
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e5e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	68da      	ldr	r2, [r3, #12]
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e5f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2220      	movs	r2, #32
 800e5fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2220      	movs	r2, #32
 800e604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800e608:	2300      	movs	r3, #0
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3708      	adds	r7, #8
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}

0800e612 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e612:	b580      	push	{r7, lr}
 800e614:	b08a      	sub	sp, #40	; 0x28
 800e616:	af02      	add	r7, sp, #8
 800e618:	60f8      	str	r0, [r7, #12]
 800e61a:	60b9      	str	r1, [r7, #8]
 800e61c:	603b      	str	r3, [r7, #0]
 800e61e:	4613      	mov	r3, r2
 800e620:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800e622:	2300      	movs	r3, #0
 800e624:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e62c:	b2db      	uxtb	r3, r3
 800e62e:	2b20      	cmp	r3, #32
 800e630:	d17c      	bne.n	800e72c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d002      	beq.n	800e63e <HAL_UART_Transmit+0x2c>
 800e638:	88fb      	ldrh	r3, [r7, #6]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d101      	bne.n	800e642 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800e63e:	2301      	movs	r3, #1
 800e640:	e075      	b.n	800e72e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e648:	2b01      	cmp	r3, #1
 800e64a:	d101      	bne.n	800e650 <HAL_UART_Transmit+0x3e>
 800e64c:	2302      	movs	r3, #2
 800e64e:	e06e      	b.n	800e72e <HAL_UART_Transmit+0x11c>
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	2201      	movs	r2, #1
 800e654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	2200      	movs	r2, #0
 800e65c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	2221      	movs	r2, #33	; 0x21
 800e662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e666:	f7fa fc19 	bl	8008e9c <HAL_GetTick>
 800e66a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	88fa      	ldrh	r2, [r7, #6]
 800e670:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	88fa      	ldrh	r2, [r7, #6]
 800e676:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	689b      	ldr	r3, [r3, #8]
 800e67c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e680:	d108      	bne.n	800e694 <HAL_UART_Transmit+0x82>
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	691b      	ldr	r3, [r3, #16]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d104      	bne.n	800e694 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800e68a:	2300      	movs	r3, #0
 800e68c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	61bb      	str	r3, [r7, #24]
 800e692:	e003      	b.n	800e69c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e698:	2300      	movs	r3, #0
 800e69a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	2200      	movs	r2, #0
 800e6a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800e6a4:	e02a      	b.n	800e6fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	9300      	str	r3, [sp, #0]
 800e6aa:	697b      	ldr	r3, [r7, #20]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	2180      	movs	r1, #128	; 0x80
 800e6b0:	68f8      	ldr	r0, [r7, #12]
 800e6b2:	f000 f8e2 	bl	800e87a <UART_WaitOnFlagUntilTimeout>
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d001      	beq.n	800e6c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800e6bc:	2303      	movs	r3, #3
 800e6be:	e036      	b.n	800e72e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800e6c0:	69fb      	ldr	r3, [r7, #28]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d10b      	bne.n	800e6de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e6c6:	69bb      	ldr	r3, [r7, #24]
 800e6c8:	881b      	ldrh	r3, [r3, #0]
 800e6ca:	461a      	mov	r2, r3
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e6d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800e6d6:	69bb      	ldr	r3, [r7, #24]
 800e6d8:	3302      	adds	r3, #2
 800e6da:	61bb      	str	r3, [r7, #24]
 800e6dc:	e007      	b.n	800e6ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800e6de:	69fb      	ldr	r3, [r7, #28]
 800e6e0:	781a      	ldrb	r2, [r3, #0]
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800e6e8:	69fb      	ldr	r3, [r7, #28]
 800e6ea:	3301      	adds	r3, #1
 800e6ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e6f2:	b29b      	uxth	r3, r3
 800e6f4:	3b01      	subs	r3, #1
 800e6f6:	b29a      	uxth	r2, r3
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e700:	b29b      	uxth	r3, r3
 800e702:	2b00      	cmp	r3, #0
 800e704:	d1cf      	bne.n	800e6a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	9300      	str	r3, [sp, #0]
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	2200      	movs	r2, #0
 800e70e:	2140      	movs	r1, #64	; 0x40
 800e710:	68f8      	ldr	r0, [r7, #12]
 800e712:	f000 f8b2 	bl	800e87a <UART_WaitOnFlagUntilTimeout>
 800e716:	4603      	mov	r3, r0
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d001      	beq.n	800e720 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800e71c:	2303      	movs	r3, #3
 800e71e:	e006      	b.n	800e72e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	2220      	movs	r2, #32
 800e724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800e728:	2300      	movs	r3, #0
 800e72a:	e000      	b.n	800e72e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800e72c:	2302      	movs	r3, #2
  }
}
 800e72e:	4618      	mov	r0, r3
 800e730:	3720      	adds	r7, #32
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}

0800e736 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e736:	b580      	push	{r7, lr}
 800e738:	b08a      	sub	sp, #40	; 0x28
 800e73a:	af02      	add	r7, sp, #8
 800e73c:	60f8      	str	r0, [r7, #12]
 800e73e:	60b9      	str	r1, [r7, #8]
 800e740:	603b      	str	r3, [r7, #0]
 800e742:	4613      	mov	r3, r2
 800e744:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800e746:	2300      	movs	r3, #0
 800e748:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e750:	b2db      	uxtb	r3, r3
 800e752:	2b20      	cmp	r3, #32
 800e754:	f040 808c 	bne.w	800e870 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e758:	68bb      	ldr	r3, [r7, #8]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d002      	beq.n	800e764 <HAL_UART_Receive+0x2e>
 800e75e:	88fb      	ldrh	r3, [r7, #6]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d101      	bne.n	800e768 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800e764:	2301      	movs	r3, #1
 800e766:	e084      	b.n	800e872 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e76e:	2b01      	cmp	r3, #1
 800e770:	d101      	bne.n	800e776 <HAL_UART_Receive+0x40>
 800e772:	2302      	movs	r3, #2
 800e774:	e07d      	b.n	800e872 <HAL_UART_Receive+0x13c>
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	2201      	movs	r2, #1
 800e77a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	2200      	movs	r2, #0
 800e782:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	2222      	movs	r2, #34	; 0x22
 800e788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	2200      	movs	r2, #0
 800e790:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e792:	f7fa fb83 	bl	8008e9c <HAL_GetTick>
 800e796:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	88fa      	ldrh	r2, [r7, #6]
 800e79c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	88fa      	ldrh	r2, [r7, #6]
 800e7a2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	689b      	ldr	r3, [r3, #8]
 800e7a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e7ac:	d108      	bne.n	800e7c0 <HAL_UART_Receive+0x8a>
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	691b      	ldr	r3, [r3, #16]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d104      	bne.n	800e7c0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	61bb      	str	r3, [r7, #24]
 800e7be:	e003      	b.n	800e7c8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800e7d0:	e043      	b.n	800e85a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	9300      	str	r3, [sp, #0]
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	2200      	movs	r2, #0
 800e7da:	2120      	movs	r1, #32
 800e7dc:	68f8      	ldr	r0, [r7, #12]
 800e7de:	f000 f84c 	bl	800e87a <UART_WaitOnFlagUntilTimeout>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d001      	beq.n	800e7ec <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800e7e8:	2303      	movs	r3, #3
 800e7ea:	e042      	b.n	800e872 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800e7ec:	69fb      	ldr	r3, [r7, #28]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d10c      	bne.n	800e80c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	685b      	ldr	r3, [r3, #4]
 800e7f8:	b29b      	uxth	r3, r3
 800e7fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7fe:	b29a      	uxth	r2, r3
 800e800:	69bb      	ldr	r3, [r7, #24]
 800e802:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800e804:	69bb      	ldr	r3, [r7, #24]
 800e806:	3302      	adds	r3, #2
 800e808:	61bb      	str	r3, [r7, #24]
 800e80a:	e01f      	b.n	800e84c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	689b      	ldr	r3, [r3, #8]
 800e810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e814:	d007      	beq.n	800e826 <HAL_UART_Receive+0xf0>
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	689b      	ldr	r3, [r3, #8]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d10a      	bne.n	800e834 <HAL_UART_Receive+0xfe>
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	691b      	ldr	r3, [r3, #16]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d106      	bne.n	800e834 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	685b      	ldr	r3, [r3, #4]
 800e82c:	b2da      	uxtb	r2, r3
 800e82e:	69fb      	ldr	r3, [r7, #28]
 800e830:	701a      	strb	r2, [r3, #0]
 800e832:	e008      	b.n	800e846 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	685b      	ldr	r3, [r3, #4]
 800e83a:	b2db      	uxtb	r3, r3
 800e83c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e840:	b2da      	uxtb	r2, r3
 800e842:	69fb      	ldr	r3, [r7, #28]
 800e844:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800e846:	69fb      	ldr	r3, [r7, #28]
 800e848:	3301      	adds	r3, #1
 800e84a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e850:	b29b      	uxth	r3, r3
 800e852:	3b01      	subs	r3, #1
 800e854:	b29a      	uxth	r2, r3
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e85e:	b29b      	uxth	r3, r3
 800e860:	2b00      	cmp	r3, #0
 800e862:	d1b6      	bne.n	800e7d2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	2220      	movs	r2, #32
 800e868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800e86c:	2300      	movs	r3, #0
 800e86e:	e000      	b.n	800e872 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800e870:	2302      	movs	r3, #2
  }
}
 800e872:	4618      	mov	r0, r3
 800e874:	3720      	adds	r7, #32
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}

0800e87a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800e87a:	b580      	push	{r7, lr}
 800e87c:	b090      	sub	sp, #64	; 0x40
 800e87e:	af00      	add	r7, sp, #0
 800e880:	60f8      	str	r0, [r7, #12]
 800e882:	60b9      	str	r1, [r7, #8]
 800e884:	603b      	str	r3, [r7, #0]
 800e886:	4613      	mov	r3, r2
 800e888:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e88a:	e050      	b.n	800e92e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e88c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e88e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e892:	d04c      	beq.n	800e92e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800e894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e896:	2b00      	cmp	r3, #0
 800e898:	d007      	beq.n	800e8aa <UART_WaitOnFlagUntilTimeout+0x30>
 800e89a:	f7fa faff 	bl	8008e9c <HAL_GetTick>
 800e89e:	4602      	mov	r2, r0
 800e8a0:	683b      	ldr	r3, [r7, #0]
 800e8a2:	1ad3      	subs	r3, r2, r3
 800e8a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e8a6:	429a      	cmp	r2, r3
 800e8a8:	d241      	bcs.n	800e92e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	330c      	adds	r3, #12
 800e8b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8b4:	e853 3f00 	ldrex	r3, [r3]
 800e8b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e8c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	330c      	adds	r3, #12
 800e8c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e8ca:	637a      	str	r2, [r7, #52]	; 0x34
 800e8cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e8d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e8d2:	e841 2300 	strex	r3, r2, [r1]
 800e8d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d1e5      	bne.n	800e8aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	3314      	adds	r3, #20
 800e8e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8e6:	697b      	ldr	r3, [r7, #20]
 800e8e8:	e853 3f00 	ldrex	r3, [r3]
 800e8ec:	613b      	str	r3, [r7, #16]
   return(result);
 800e8ee:	693b      	ldr	r3, [r7, #16]
 800e8f0:	f023 0301 	bic.w	r3, r3, #1
 800e8f4:	63bb      	str	r3, [r7, #56]	; 0x38
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	3314      	adds	r3, #20
 800e8fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e8fe:	623a      	str	r2, [r7, #32]
 800e900:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e902:	69f9      	ldr	r1, [r7, #28]
 800e904:	6a3a      	ldr	r2, [r7, #32]
 800e906:	e841 2300 	strex	r3, r2, [r1]
 800e90a:	61bb      	str	r3, [r7, #24]
   return(result);
 800e90c:	69bb      	ldr	r3, [r7, #24]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d1e5      	bne.n	800e8de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	2220      	movs	r2, #32
 800e916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	2220      	movs	r2, #32
 800e91e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	2200      	movs	r2, #0
 800e926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800e92a:	2303      	movs	r3, #3
 800e92c:	e00f      	b.n	800e94e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	681a      	ldr	r2, [r3, #0]
 800e934:	68bb      	ldr	r3, [r7, #8]
 800e936:	4013      	ands	r3, r2
 800e938:	68ba      	ldr	r2, [r7, #8]
 800e93a:	429a      	cmp	r2, r3
 800e93c:	bf0c      	ite	eq
 800e93e:	2301      	moveq	r3, #1
 800e940:	2300      	movne	r3, #0
 800e942:	b2db      	uxtb	r3, r3
 800e944:	461a      	mov	r2, r3
 800e946:	79fb      	ldrb	r3, [r7, #7]
 800e948:	429a      	cmp	r2, r3
 800e94a:	d09f      	beq.n	800e88c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e94c:	2300      	movs	r3, #0
}
 800e94e:	4618      	mov	r0, r3
 800e950:	3740      	adds	r7, #64	; 0x40
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}
	...

0800e958 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e95c:	b09f      	sub	sp, #124	; 0x7c
 800e95e:	af00      	add	r7, sp, #0
 800e960:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	691b      	ldr	r3, [r3, #16]
 800e968:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e96c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e96e:	68d9      	ldr	r1, [r3, #12]
 800e970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e972:	681a      	ldr	r2, [r3, #0]
 800e974:	ea40 0301 	orr.w	r3, r0, r1
 800e978:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e97a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e97c:	689a      	ldr	r2, [r3, #8]
 800e97e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e980:	691b      	ldr	r3, [r3, #16]
 800e982:	431a      	orrs	r2, r3
 800e984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e986:	695b      	ldr	r3, [r3, #20]
 800e988:	431a      	orrs	r2, r3
 800e98a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e98c:	69db      	ldr	r3, [r3, #28]
 800e98e:	4313      	orrs	r3, r2
 800e990:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800e992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	68db      	ldr	r3, [r3, #12]
 800e998:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800e99c:	f021 010c 	bic.w	r1, r1, #12
 800e9a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9a2:	681a      	ldr	r2, [r3, #0]
 800e9a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e9a6:	430b      	orrs	r3, r1
 800e9a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e9aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	695b      	ldr	r3, [r3, #20]
 800e9b0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800e9b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9b6:	6999      	ldr	r1, [r3, #24]
 800e9b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9ba:	681a      	ldr	r2, [r3, #0]
 800e9bc:	ea40 0301 	orr.w	r3, r0, r1
 800e9c0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e9c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9c4:	681a      	ldr	r2, [r3, #0]
 800e9c6:	4bc5      	ldr	r3, [pc, #788]	; (800ecdc <UART_SetConfig+0x384>)
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d004      	beq.n	800e9d6 <UART_SetConfig+0x7e>
 800e9cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9ce:	681a      	ldr	r2, [r3, #0]
 800e9d0:	4bc3      	ldr	r3, [pc, #780]	; (800ece0 <UART_SetConfig+0x388>)
 800e9d2:	429a      	cmp	r2, r3
 800e9d4:	d103      	bne.n	800e9de <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e9d6:	f7fc ff59 	bl	800b88c <HAL_RCC_GetPCLK2Freq>
 800e9da:	6778      	str	r0, [r7, #116]	; 0x74
 800e9dc:	e002      	b.n	800e9e4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e9de:	f7fc ff41 	bl	800b864 <HAL_RCC_GetPCLK1Freq>
 800e9e2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e9e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9e6:	69db      	ldr	r3, [r3, #28]
 800e9e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9ec:	f040 80b6 	bne.w	800eb5c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e9f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e9f2:	461c      	mov	r4, r3
 800e9f4:	f04f 0500 	mov.w	r5, #0
 800e9f8:	4622      	mov	r2, r4
 800e9fa:	462b      	mov	r3, r5
 800e9fc:	1891      	adds	r1, r2, r2
 800e9fe:	6439      	str	r1, [r7, #64]	; 0x40
 800ea00:	415b      	adcs	r3, r3
 800ea02:	647b      	str	r3, [r7, #68]	; 0x44
 800ea04:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ea08:	1912      	adds	r2, r2, r4
 800ea0a:	eb45 0303 	adc.w	r3, r5, r3
 800ea0e:	f04f 0000 	mov.w	r0, #0
 800ea12:	f04f 0100 	mov.w	r1, #0
 800ea16:	00d9      	lsls	r1, r3, #3
 800ea18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ea1c:	00d0      	lsls	r0, r2, #3
 800ea1e:	4602      	mov	r2, r0
 800ea20:	460b      	mov	r3, r1
 800ea22:	1911      	adds	r1, r2, r4
 800ea24:	6639      	str	r1, [r7, #96]	; 0x60
 800ea26:	416b      	adcs	r3, r5
 800ea28:	667b      	str	r3, [r7, #100]	; 0x64
 800ea2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea2c:	685b      	ldr	r3, [r3, #4]
 800ea2e:	461a      	mov	r2, r3
 800ea30:	f04f 0300 	mov.w	r3, #0
 800ea34:	1891      	adds	r1, r2, r2
 800ea36:	63b9      	str	r1, [r7, #56]	; 0x38
 800ea38:	415b      	adcs	r3, r3
 800ea3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ea3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ea40:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800ea44:	f7f2 f940 	bl	8000cc8 <__aeabi_uldivmod>
 800ea48:	4602      	mov	r2, r0
 800ea4a:	460b      	mov	r3, r1
 800ea4c:	4ba5      	ldr	r3, [pc, #660]	; (800ece4 <UART_SetConfig+0x38c>)
 800ea4e:	fba3 2302 	umull	r2, r3, r3, r2
 800ea52:	095b      	lsrs	r3, r3, #5
 800ea54:	011e      	lsls	r6, r3, #4
 800ea56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ea58:	461c      	mov	r4, r3
 800ea5a:	f04f 0500 	mov.w	r5, #0
 800ea5e:	4622      	mov	r2, r4
 800ea60:	462b      	mov	r3, r5
 800ea62:	1891      	adds	r1, r2, r2
 800ea64:	6339      	str	r1, [r7, #48]	; 0x30
 800ea66:	415b      	adcs	r3, r3
 800ea68:	637b      	str	r3, [r7, #52]	; 0x34
 800ea6a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ea6e:	1912      	adds	r2, r2, r4
 800ea70:	eb45 0303 	adc.w	r3, r5, r3
 800ea74:	f04f 0000 	mov.w	r0, #0
 800ea78:	f04f 0100 	mov.w	r1, #0
 800ea7c:	00d9      	lsls	r1, r3, #3
 800ea7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ea82:	00d0      	lsls	r0, r2, #3
 800ea84:	4602      	mov	r2, r0
 800ea86:	460b      	mov	r3, r1
 800ea88:	1911      	adds	r1, r2, r4
 800ea8a:	65b9      	str	r1, [r7, #88]	; 0x58
 800ea8c:	416b      	adcs	r3, r5
 800ea8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ea90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	461a      	mov	r2, r3
 800ea96:	f04f 0300 	mov.w	r3, #0
 800ea9a:	1891      	adds	r1, r2, r2
 800ea9c:	62b9      	str	r1, [r7, #40]	; 0x28
 800ea9e:	415b      	adcs	r3, r3
 800eaa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eaa2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800eaa6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800eaaa:	f7f2 f90d 	bl	8000cc8 <__aeabi_uldivmod>
 800eaae:	4602      	mov	r2, r0
 800eab0:	460b      	mov	r3, r1
 800eab2:	4b8c      	ldr	r3, [pc, #560]	; (800ece4 <UART_SetConfig+0x38c>)
 800eab4:	fba3 1302 	umull	r1, r3, r3, r2
 800eab8:	095b      	lsrs	r3, r3, #5
 800eaba:	2164      	movs	r1, #100	; 0x64
 800eabc:	fb01 f303 	mul.w	r3, r1, r3
 800eac0:	1ad3      	subs	r3, r2, r3
 800eac2:	00db      	lsls	r3, r3, #3
 800eac4:	3332      	adds	r3, #50	; 0x32
 800eac6:	4a87      	ldr	r2, [pc, #540]	; (800ece4 <UART_SetConfig+0x38c>)
 800eac8:	fba2 2303 	umull	r2, r3, r2, r3
 800eacc:	095b      	lsrs	r3, r3, #5
 800eace:	005b      	lsls	r3, r3, #1
 800ead0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ead4:	441e      	add	r6, r3
 800ead6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ead8:	4618      	mov	r0, r3
 800eada:	f04f 0100 	mov.w	r1, #0
 800eade:	4602      	mov	r2, r0
 800eae0:	460b      	mov	r3, r1
 800eae2:	1894      	adds	r4, r2, r2
 800eae4:	623c      	str	r4, [r7, #32]
 800eae6:	415b      	adcs	r3, r3
 800eae8:	627b      	str	r3, [r7, #36]	; 0x24
 800eaea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800eaee:	1812      	adds	r2, r2, r0
 800eaf0:	eb41 0303 	adc.w	r3, r1, r3
 800eaf4:	f04f 0400 	mov.w	r4, #0
 800eaf8:	f04f 0500 	mov.w	r5, #0
 800eafc:	00dd      	lsls	r5, r3, #3
 800eafe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800eb02:	00d4      	lsls	r4, r2, #3
 800eb04:	4622      	mov	r2, r4
 800eb06:	462b      	mov	r3, r5
 800eb08:	1814      	adds	r4, r2, r0
 800eb0a:	653c      	str	r4, [r7, #80]	; 0x50
 800eb0c:	414b      	adcs	r3, r1
 800eb0e:	657b      	str	r3, [r7, #84]	; 0x54
 800eb10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb12:	685b      	ldr	r3, [r3, #4]
 800eb14:	461a      	mov	r2, r3
 800eb16:	f04f 0300 	mov.w	r3, #0
 800eb1a:	1891      	adds	r1, r2, r2
 800eb1c:	61b9      	str	r1, [r7, #24]
 800eb1e:	415b      	adcs	r3, r3
 800eb20:	61fb      	str	r3, [r7, #28]
 800eb22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800eb26:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800eb2a:	f7f2 f8cd 	bl	8000cc8 <__aeabi_uldivmod>
 800eb2e:	4602      	mov	r2, r0
 800eb30:	460b      	mov	r3, r1
 800eb32:	4b6c      	ldr	r3, [pc, #432]	; (800ece4 <UART_SetConfig+0x38c>)
 800eb34:	fba3 1302 	umull	r1, r3, r3, r2
 800eb38:	095b      	lsrs	r3, r3, #5
 800eb3a:	2164      	movs	r1, #100	; 0x64
 800eb3c:	fb01 f303 	mul.w	r3, r1, r3
 800eb40:	1ad3      	subs	r3, r2, r3
 800eb42:	00db      	lsls	r3, r3, #3
 800eb44:	3332      	adds	r3, #50	; 0x32
 800eb46:	4a67      	ldr	r2, [pc, #412]	; (800ece4 <UART_SetConfig+0x38c>)
 800eb48:	fba2 2303 	umull	r2, r3, r2, r3
 800eb4c:	095b      	lsrs	r3, r3, #5
 800eb4e:	f003 0207 	and.w	r2, r3, #7
 800eb52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	4432      	add	r2, r6
 800eb58:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800eb5a:	e0b9      	b.n	800ecd0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800eb5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eb5e:	461c      	mov	r4, r3
 800eb60:	f04f 0500 	mov.w	r5, #0
 800eb64:	4622      	mov	r2, r4
 800eb66:	462b      	mov	r3, r5
 800eb68:	1891      	adds	r1, r2, r2
 800eb6a:	6139      	str	r1, [r7, #16]
 800eb6c:	415b      	adcs	r3, r3
 800eb6e:	617b      	str	r3, [r7, #20]
 800eb70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800eb74:	1912      	adds	r2, r2, r4
 800eb76:	eb45 0303 	adc.w	r3, r5, r3
 800eb7a:	f04f 0000 	mov.w	r0, #0
 800eb7e:	f04f 0100 	mov.w	r1, #0
 800eb82:	00d9      	lsls	r1, r3, #3
 800eb84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800eb88:	00d0      	lsls	r0, r2, #3
 800eb8a:	4602      	mov	r2, r0
 800eb8c:	460b      	mov	r3, r1
 800eb8e:	eb12 0804 	adds.w	r8, r2, r4
 800eb92:	eb43 0905 	adc.w	r9, r3, r5
 800eb96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb98:	685b      	ldr	r3, [r3, #4]
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f04f 0100 	mov.w	r1, #0
 800eba0:	f04f 0200 	mov.w	r2, #0
 800eba4:	f04f 0300 	mov.w	r3, #0
 800eba8:	008b      	lsls	r3, r1, #2
 800ebaa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ebae:	0082      	lsls	r2, r0, #2
 800ebb0:	4640      	mov	r0, r8
 800ebb2:	4649      	mov	r1, r9
 800ebb4:	f7f2 f888 	bl	8000cc8 <__aeabi_uldivmod>
 800ebb8:	4602      	mov	r2, r0
 800ebba:	460b      	mov	r3, r1
 800ebbc:	4b49      	ldr	r3, [pc, #292]	; (800ece4 <UART_SetConfig+0x38c>)
 800ebbe:	fba3 2302 	umull	r2, r3, r3, r2
 800ebc2:	095b      	lsrs	r3, r3, #5
 800ebc4:	011e      	lsls	r6, r3, #4
 800ebc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ebc8:	4618      	mov	r0, r3
 800ebca:	f04f 0100 	mov.w	r1, #0
 800ebce:	4602      	mov	r2, r0
 800ebd0:	460b      	mov	r3, r1
 800ebd2:	1894      	adds	r4, r2, r2
 800ebd4:	60bc      	str	r4, [r7, #8]
 800ebd6:	415b      	adcs	r3, r3
 800ebd8:	60fb      	str	r3, [r7, #12]
 800ebda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ebde:	1812      	adds	r2, r2, r0
 800ebe0:	eb41 0303 	adc.w	r3, r1, r3
 800ebe4:	f04f 0400 	mov.w	r4, #0
 800ebe8:	f04f 0500 	mov.w	r5, #0
 800ebec:	00dd      	lsls	r5, r3, #3
 800ebee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ebf2:	00d4      	lsls	r4, r2, #3
 800ebf4:	4622      	mov	r2, r4
 800ebf6:	462b      	mov	r3, r5
 800ebf8:	1814      	adds	r4, r2, r0
 800ebfa:	64bc      	str	r4, [r7, #72]	; 0x48
 800ebfc:	414b      	adcs	r3, r1
 800ebfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ec00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec02:	685b      	ldr	r3, [r3, #4]
 800ec04:	4618      	mov	r0, r3
 800ec06:	f04f 0100 	mov.w	r1, #0
 800ec0a:	f04f 0200 	mov.w	r2, #0
 800ec0e:	f04f 0300 	mov.w	r3, #0
 800ec12:	008b      	lsls	r3, r1, #2
 800ec14:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ec18:	0082      	lsls	r2, r0, #2
 800ec1a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800ec1e:	f7f2 f853 	bl	8000cc8 <__aeabi_uldivmod>
 800ec22:	4602      	mov	r2, r0
 800ec24:	460b      	mov	r3, r1
 800ec26:	4b2f      	ldr	r3, [pc, #188]	; (800ece4 <UART_SetConfig+0x38c>)
 800ec28:	fba3 1302 	umull	r1, r3, r3, r2
 800ec2c:	095b      	lsrs	r3, r3, #5
 800ec2e:	2164      	movs	r1, #100	; 0x64
 800ec30:	fb01 f303 	mul.w	r3, r1, r3
 800ec34:	1ad3      	subs	r3, r2, r3
 800ec36:	011b      	lsls	r3, r3, #4
 800ec38:	3332      	adds	r3, #50	; 0x32
 800ec3a:	4a2a      	ldr	r2, [pc, #168]	; (800ece4 <UART_SetConfig+0x38c>)
 800ec3c:	fba2 2303 	umull	r2, r3, r2, r3
 800ec40:	095b      	lsrs	r3, r3, #5
 800ec42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ec46:	441e      	add	r6, r3
 800ec48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f04f 0100 	mov.w	r1, #0
 800ec50:	4602      	mov	r2, r0
 800ec52:	460b      	mov	r3, r1
 800ec54:	1894      	adds	r4, r2, r2
 800ec56:	603c      	str	r4, [r7, #0]
 800ec58:	415b      	adcs	r3, r3
 800ec5a:	607b      	str	r3, [r7, #4]
 800ec5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec60:	1812      	adds	r2, r2, r0
 800ec62:	eb41 0303 	adc.w	r3, r1, r3
 800ec66:	f04f 0400 	mov.w	r4, #0
 800ec6a:	f04f 0500 	mov.w	r5, #0
 800ec6e:	00dd      	lsls	r5, r3, #3
 800ec70:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ec74:	00d4      	lsls	r4, r2, #3
 800ec76:	4622      	mov	r2, r4
 800ec78:	462b      	mov	r3, r5
 800ec7a:	eb12 0a00 	adds.w	sl, r2, r0
 800ec7e:	eb43 0b01 	adc.w	fp, r3, r1
 800ec82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec84:	685b      	ldr	r3, [r3, #4]
 800ec86:	4618      	mov	r0, r3
 800ec88:	f04f 0100 	mov.w	r1, #0
 800ec8c:	f04f 0200 	mov.w	r2, #0
 800ec90:	f04f 0300 	mov.w	r3, #0
 800ec94:	008b      	lsls	r3, r1, #2
 800ec96:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ec9a:	0082      	lsls	r2, r0, #2
 800ec9c:	4650      	mov	r0, sl
 800ec9e:	4659      	mov	r1, fp
 800eca0:	f7f2 f812 	bl	8000cc8 <__aeabi_uldivmod>
 800eca4:	4602      	mov	r2, r0
 800eca6:	460b      	mov	r3, r1
 800eca8:	4b0e      	ldr	r3, [pc, #56]	; (800ece4 <UART_SetConfig+0x38c>)
 800ecaa:	fba3 1302 	umull	r1, r3, r3, r2
 800ecae:	095b      	lsrs	r3, r3, #5
 800ecb0:	2164      	movs	r1, #100	; 0x64
 800ecb2:	fb01 f303 	mul.w	r3, r1, r3
 800ecb6:	1ad3      	subs	r3, r2, r3
 800ecb8:	011b      	lsls	r3, r3, #4
 800ecba:	3332      	adds	r3, #50	; 0x32
 800ecbc:	4a09      	ldr	r2, [pc, #36]	; (800ece4 <UART_SetConfig+0x38c>)
 800ecbe:	fba2 2303 	umull	r2, r3, r2, r3
 800ecc2:	095b      	lsrs	r3, r3, #5
 800ecc4:	f003 020f 	and.w	r2, r3, #15
 800ecc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	4432      	add	r2, r6
 800ecce:	609a      	str	r2, [r3, #8]
}
 800ecd0:	bf00      	nop
 800ecd2:	377c      	adds	r7, #124	; 0x7c
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecda:	bf00      	nop
 800ecdc:	40011000 	.word	0x40011000
 800ece0:	40011400 	.word	0x40011400
 800ece4:	51eb851f 	.word	0x51eb851f

0800ece8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800ecec:	4904      	ldr	r1, [pc, #16]	; (800ed00 <MX_FATFS_Init+0x18>)
 800ecee:	4805      	ldr	r0, [pc, #20]	; (800ed04 <MX_FATFS_Init+0x1c>)
 800ecf0:	f003 fb9e 	bl	8012430 <FATFS_LinkDriver>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	461a      	mov	r2, r3
 800ecf8:	4b03      	ldr	r3, [pc, #12]	; (800ed08 <MX_FATFS_Init+0x20>)
 800ecfa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ecfc:	bf00      	nop
 800ecfe:	bd80      	pop	{r7, pc}
 800ed00:	2000cc08 	.word	0x2000cc08
 800ed04:	200000d4 	.word	0x200000d4
 800ed08:	2000cc0c 	.word	0x2000cc0c

0800ed0c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ed0c:	b480      	push	{r7}
 800ed0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ed10:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ed12:	4618      	mov	r0, r3
 800ed14:	46bd      	mov	sp, r7
 800ed16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1a:	4770      	bx	lr

0800ed1c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b082      	sub	sp, #8
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	4603      	mov	r3, r0
 800ed24:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800ed26:	79fb      	ldrb	r3, [r7, #7]
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f000 f9dd 	bl	800f0e8 <USER_SPI_initialize>
 800ed2e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	3708      	adds	r7, #8
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bd80      	pop	{r7, pc}

0800ed38 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b082      	sub	sp, #8
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	4603      	mov	r3, r0
 800ed40:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800ed42:	79fb      	ldrb	r3, [r7, #7]
 800ed44:	4618      	mov	r0, r3
 800ed46:	f000 fab9 	bl	800f2bc <USER_SPI_status>
 800ed4a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	3708      	adds	r7, #8
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}

0800ed54 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b084      	sub	sp, #16
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	60b9      	str	r1, [r7, #8]
 800ed5c:	607a      	str	r2, [r7, #4]
 800ed5e:	603b      	str	r3, [r7, #0]
 800ed60:	4603      	mov	r3, r0
 800ed62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800ed64:	7bf8      	ldrb	r0, [r7, #15]
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	687a      	ldr	r2, [r7, #4]
 800ed6a:	68b9      	ldr	r1, [r7, #8]
 800ed6c:	f000 fabc 	bl	800f2e8 <USER_SPI_read>
 800ed70:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	3710      	adds	r7, #16
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd80      	pop	{r7, pc}

0800ed7a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800ed7a:	b580      	push	{r7, lr}
 800ed7c:	b084      	sub	sp, #16
 800ed7e:	af00      	add	r7, sp, #0
 800ed80:	60b9      	str	r1, [r7, #8]
 800ed82:	607a      	str	r2, [r7, #4]
 800ed84:	603b      	str	r3, [r7, #0]
 800ed86:	4603      	mov	r3, r0
 800ed88:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800ed8a:	7bf8      	ldrb	r0, [r7, #15]
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	687a      	ldr	r2, [r7, #4]
 800ed90:	68b9      	ldr	r1, [r7, #8]
 800ed92:	f000 fb0f 	bl	800f3b4 <USER_SPI_write>
 800ed96:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800ed98:	4618      	mov	r0, r3
 800ed9a:	3710      	adds	r7, #16
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}

0800eda0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b082      	sub	sp, #8
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	4603      	mov	r3, r0
 800eda8:	603a      	str	r2, [r7, #0]
 800edaa:	71fb      	strb	r3, [r7, #7]
 800edac:	460b      	mov	r3, r1
 800edae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800edb0:	79b9      	ldrb	r1, [r7, #6]
 800edb2:	79fb      	ldrb	r3, [r7, #7]
 800edb4:	683a      	ldr	r2, [r7, #0]
 800edb6:	4618      	mov	r0, r3
 800edb8:	f000 fb78 	bl	800f4ac <USER_SPI_ioctl>
 800edbc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	3708      	adds	r7, #8
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}
	...

0800edc8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800edc8:	b580      	push	{r7, lr}
 800edca:	b082      	sub	sp, #8
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800edd0:	f7fa f864 	bl	8008e9c <HAL_GetTick>
 800edd4:	4603      	mov	r3, r0
 800edd6:	4a04      	ldr	r2, [pc, #16]	; (800ede8 <SPI_Timer_On+0x20>)
 800edd8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800edda:	4a04      	ldr	r2, [pc, #16]	; (800edec <SPI_Timer_On+0x24>)
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6013      	str	r3, [r2, #0]
}
 800ede0:	bf00      	nop
 800ede2:	3708      	adds	r7, #8
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}
 800ede8:	2000d074 	.word	0x2000d074
 800edec:	2000d078 	.word	0x2000d078

0800edf0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800edf0:	b580      	push	{r7, lr}
 800edf2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800edf4:	f7fa f852 	bl	8008e9c <HAL_GetTick>
 800edf8:	4602      	mov	r2, r0
 800edfa:	4b06      	ldr	r3, [pc, #24]	; (800ee14 <SPI_Timer_Status+0x24>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	1ad2      	subs	r2, r2, r3
 800ee00:	4b05      	ldr	r3, [pc, #20]	; (800ee18 <SPI_Timer_Status+0x28>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	429a      	cmp	r2, r3
 800ee06:	bf34      	ite	cc
 800ee08:	2301      	movcc	r3, #1
 800ee0a:	2300      	movcs	r3, #0
 800ee0c:	b2db      	uxtb	r3, r3
}
 800ee0e:	4618      	mov	r0, r3
 800ee10:	bd80      	pop	{r7, pc}
 800ee12:	bf00      	nop
 800ee14:	2000d074 	.word	0x2000d074
 800ee18:	2000d078 	.word	0x2000d078

0800ee1c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b086      	sub	sp, #24
 800ee20:	af02      	add	r7, sp, #8
 800ee22:	4603      	mov	r3, r0
 800ee24:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800ee26:	f107 020f 	add.w	r2, r7, #15
 800ee2a:	1df9      	adds	r1, r7, #7
 800ee2c:	2332      	movs	r3, #50	; 0x32
 800ee2e:	9300      	str	r3, [sp, #0]
 800ee30:	2301      	movs	r3, #1
 800ee32:	4804      	ldr	r0, [pc, #16]	; (800ee44 <xchg_spi+0x28>)
 800ee34:	f7fe f822 	bl	800ce7c <HAL_SPI_TransmitReceive>
    return rxDat;
 800ee38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	3710      	adds	r7, #16
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}
 800ee42:	bf00      	nop
 800ee44:	2000bba4 	.word	0x2000bba4

0800ee48 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800ee48:	b590      	push	{r4, r7, lr}
 800ee4a:	b085      	sub	sp, #20
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
 800ee50:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800ee52:	2300      	movs	r3, #0
 800ee54:	60fb      	str	r3, [r7, #12]
 800ee56:	e00a      	b.n	800ee6e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800ee58:	687a      	ldr	r2, [r7, #4]
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	18d4      	adds	r4, r2, r3
 800ee5e:	20ff      	movs	r0, #255	; 0xff
 800ee60:	f7ff ffdc 	bl	800ee1c <xchg_spi>
 800ee64:	4603      	mov	r3, r0
 800ee66:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	3301      	adds	r3, #1
 800ee6c:	60fb      	str	r3, [r7, #12]
 800ee6e:	68fa      	ldr	r2, [r7, #12]
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	429a      	cmp	r2, r3
 800ee74:	d3f0      	bcc.n	800ee58 <rcvr_spi_multi+0x10>
	}
}
 800ee76:	bf00      	nop
 800ee78:	bf00      	nop
 800ee7a:	3714      	adds	r7, #20
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	bd90      	pop	{r4, r7, pc}

0800ee80 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b084      	sub	sp, #16
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
 800ee88:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	60fb      	str	r3, [r7, #12]
 800ee8e:	e009      	b.n	800eea4 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800ee90:	687a      	ldr	r2, [r7, #4]
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	4413      	add	r3, r2
 800ee96:	781b      	ldrb	r3, [r3, #0]
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f7ff ffbf 	bl	800ee1c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	3301      	adds	r3, #1
 800eea2:	60fb      	str	r3, [r7, #12]
 800eea4:	68fa      	ldr	r2, [r7, #12]
 800eea6:	683b      	ldr	r3, [r7, #0]
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	d3f1      	bcc.n	800ee90 <xmit_spi_multi+0x10>
	}
}
 800eeac:	bf00      	nop
 800eeae:	bf00      	nop
 800eeb0:	3710      	adds	r7, #16
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}

0800eeb6 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800eeb6:	b580      	push	{r7, lr}
 800eeb8:	b086      	sub	sp, #24
 800eeba:	af00      	add	r7, sp, #0
 800eebc:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800eebe:	f7f9 ffed 	bl	8008e9c <HAL_GetTick>
 800eec2:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800eec8:	20ff      	movs	r0, #255	; 0xff
 800eeca:	f7ff ffa7 	bl	800ee1c <xchg_spi>
 800eece:	4603      	mov	r3, r0
 800eed0:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800eed2:	7bfb      	ldrb	r3, [r7, #15]
 800eed4:	2bff      	cmp	r3, #255	; 0xff
 800eed6:	d007      	beq.n	800eee8 <wait_ready+0x32>
 800eed8:	f7f9 ffe0 	bl	8008e9c <HAL_GetTick>
 800eedc:	4602      	mov	r2, r0
 800eede:	697b      	ldr	r3, [r7, #20]
 800eee0:	1ad3      	subs	r3, r2, r3
 800eee2:	693a      	ldr	r2, [r7, #16]
 800eee4:	429a      	cmp	r2, r3
 800eee6:	d8ef      	bhi.n	800eec8 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800eee8:	7bfb      	ldrb	r3, [r7, #15]
 800eeea:	2bff      	cmp	r3, #255	; 0xff
 800eeec:	bf0c      	ite	eq
 800eeee:	2301      	moveq	r3, #1
 800eef0:	2300      	movne	r3, #0
 800eef2:	b2db      	uxtb	r3, r3
}
 800eef4:	4618      	mov	r0, r3
 800eef6:	3718      	adds	r7, #24
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bd80      	pop	{r7, pc}

0800eefc <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800ef00:	2201      	movs	r2, #1
 800ef02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ef06:	4804      	ldr	r0, [pc, #16]	; (800ef18 <despiselect+0x1c>)
 800ef08:	f7fa fee0 	bl	8009ccc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800ef0c:	20ff      	movs	r0, #255	; 0xff
 800ef0e:	f7ff ff85 	bl	800ee1c <xchg_spi>

}
 800ef12:	bf00      	nop
 800ef14:	bd80      	pop	{r7, pc}
 800ef16:	bf00      	nop
 800ef18:	40021400 	.word	0x40021400

0800ef1c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800ef20:	2200      	movs	r2, #0
 800ef22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ef26:	480a      	ldr	r0, [pc, #40]	; (800ef50 <spiselect+0x34>)
 800ef28:	f7fa fed0 	bl	8009ccc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800ef2c:	20ff      	movs	r0, #255	; 0xff
 800ef2e:	f7ff ff75 	bl	800ee1c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800ef32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ef36:	f7ff ffbe 	bl	800eeb6 <wait_ready>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d001      	beq.n	800ef44 <spiselect+0x28>
 800ef40:	2301      	movs	r3, #1
 800ef42:	e002      	b.n	800ef4a <spiselect+0x2e>

	despiselect();
 800ef44:	f7ff ffda 	bl	800eefc <despiselect>
	return 0;	/* Timeout */
 800ef48:	2300      	movs	r3, #0
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	bd80      	pop	{r7, pc}
 800ef4e:	bf00      	nop
 800ef50:	40021400 	.word	0x40021400

0800ef54 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b084      	sub	sp, #16
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
 800ef5c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800ef5e:	20c8      	movs	r0, #200	; 0xc8
 800ef60:	f7ff ff32 	bl	800edc8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800ef64:	20ff      	movs	r0, #255	; 0xff
 800ef66:	f7ff ff59 	bl	800ee1c <xchg_spi>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800ef6e:	7bfb      	ldrb	r3, [r7, #15]
 800ef70:	2bff      	cmp	r3, #255	; 0xff
 800ef72:	d104      	bne.n	800ef7e <rcvr_datablock+0x2a>
 800ef74:	f7ff ff3c 	bl	800edf0 <SPI_Timer_Status>
 800ef78:	4603      	mov	r3, r0
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d1f2      	bne.n	800ef64 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800ef7e:	7bfb      	ldrb	r3, [r7, #15]
 800ef80:	2bfe      	cmp	r3, #254	; 0xfe
 800ef82:	d001      	beq.n	800ef88 <rcvr_datablock+0x34>
 800ef84:	2300      	movs	r3, #0
 800ef86:	e00a      	b.n	800ef9e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800ef88:	6839      	ldr	r1, [r7, #0]
 800ef8a:	6878      	ldr	r0, [r7, #4]
 800ef8c:	f7ff ff5c 	bl	800ee48 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800ef90:	20ff      	movs	r0, #255	; 0xff
 800ef92:	f7ff ff43 	bl	800ee1c <xchg_spi>
 800ef96:	20ff      	movs	r0, #255	; 0xff
 800ef98:	f7ff ff40 	bl	800ee1c <xchg_spi>

	return 1;						/* Function succeeded */
 800ef9c:	2301      	movs	r3, #1
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3710      	adds	r7, #16
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bd80      	pop	{r7, pc}

0800efa6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800efa6:	b580      	push	{r7, lr}
 800efa8:	b084      	sub	sp, #16
 800efaa:	af00      	add	r7, sp, #0
 800efac:	6078      	str	r0, [r7, #4]
 800efae:	460b      	mov	r3, r1
 800efb0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800efb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800efb6:	f7ff ff7e 	bl	800eeb6 <wait_ready>
 800efba:	4603      	mov	r3, r0
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d101      	bne.n	800efc4 <xmit_datablock+0x1e>
 800efc0:	2300      	movs	r3, #0
 800efc2:	e01e      	b.n	800f002 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800efc4:	78fb      	ldrb	r3, [r7, #3]
 800efc6:	4618      	mov	r0, r3
 800efc8:	f7ff ff28 	bl	800ee1c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800efcc:	78fb      	ldrb	r3, [r7, #3]
 800efce:	2bfd      	cmp	r3, #253	; 0xfd
 800efd0:	d016      	beq.n	800f000 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800efd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800efd6:	6878      	ldr	r0, [r7, #4]
 800efd8:	f7ff ff52 	bl	800ee80 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800efdc:	20ff      	movs	r0, #255	; 0xff
 800efde:	f7ff ff1d 	bl	800ee1c <xchg_spi>
 800efe2:	20ff      	movs	r0, #255	; 0xff
 800efe4:	f7ff ff1a 	bl	800ee1c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800efe8:	20ff      	movs	r0, #255	; 0xff
 800efea:	f7ff ff17 	bl	800ee1c <xchg_spi>
 800efee:	4603      	mov	r3, r0
 800eff0:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800eff2:	7bfb      	ldrb	r3, [r7, #15]
 800eff4:	f003 031f 	and.w	r3, r3, #31
 800eff8:	2b05      	cmp	r3, #5
 800effa:	d001      	beq.n	800f000 <xmit_datablock+0x5a>
 800effc:	2300      	movs	r3, #0
 800effe:	e000      	b.n	800f002 <xmit_datablock+0x5c>
	}
	return 1;
 800f000:	2301      	movs	r3, #1
}
 800f002:	4618      	mov	r0, r3
 800f004:	3710      	adds	r7, #16
 800f006:	46bd      	mov	sp, r7
 800f008:	bd80      	pop	{r7, pc}

0800f00a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800f00a:	b580      	push	{r7, lr}
 800f00c:	b084      	sub	sp, #16
 800f00e:	af00      	add	r7, sp, #0
 800f010:	4603      	mov	r3, r0
 800f012:	6039      	str	r1, [r7, #0]
 800f014:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800f016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	da0e      	bge.n	800f03c <send_cmd+0x32>
		cmd &= 0x7F;
 800f01e:	79fb      	ldrb	r3, [r7, #7]
 800f020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f024:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800f026:	2100      	movs	r1, #0
 800f028:	2037      	movs	r0, #55	; 0x37
 800f02a:	f7ff ffee 	bl	800f00a <send_cmd>
 800f02e:	4603      	mov	r3, r0
 800f030:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800f032:	7bbb      	ldrb	r3, [r7, #14]
 800f034:	2b01      	cmp	r3, #1
 800f036:	d901      	bls.n	800f03c <send_cmd+0x32>
 800f038:	7bbb      	ldrb	r3, [r7, #14]
 800f03a:	e051      	b.n	800f0e0 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800f03c:	79fb      	ldrb	r3, [r7, #7]
 800f03e:	2b0c      	cmp	r3, #12
 800f040:	d008      	beq.n	800f054 <send_cmd+0x4a>
		despiselect();
 800f042:	f7ff ff5b 	bl	800eefc <despiselect>
		if (!spiselect()) return 0xFF;
 800f046:	f7ff ff69 	bl	800ef1c <spiselect>
 800f04a:	4603      	mov	r3, r0
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d101      	bne.n	800f054 <send_cmd+0x4a>
 800f050:	23ff      	movs	r3, #255	; 0xff
 800f052:	e045      	b.n	800f0e0 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800f054:	79fb      	ldrb	r3, [r7, #7]
 800f056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f05a:	b2db      	uxtb	r3, r3
 800f05c:	4618      	mov	r0, r3
 800f05e:	f7ff fedd 	bl	800ee1c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	0e1b      	lsrs	r3, r3, #24
 800f066:	b2db      	uxtb	r3, r3
 800f068:	4618      	mov	r0, r3
 800f06a:	f7ff fed7 	bl	800ee1c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	0c1b      	lsrs	r3, r3, #16
 800f072:	b2db      	uxtb	r3, r3
 800f074:	4618      	mov	r0, r3
 800f076:	f7ff fed1 	bl	800ee1c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800f07a:	683b      	ldr	r3, [r7, #0]
 800f07c:	0a1b      	lsrs	r3, r3, #8
 800f07e:	b2db      	uxtb	r3, r3
 800f080:	4618      	mov	r0, r3
 800f082:	f7ff fecb 	bl	800ee1c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800f086:	683b      	ldr	r3, [r7, #0]
 800f088:	b2db      	uxtb	r3, r3
 800f08a:	4618      	mov	r0, r3
 800f08c:	f7ff fec6 	bl	800ee1c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800f090:	2301      	movs	r3, #1
 800f092:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800f094:	79fb      	ldrb	r3, [r7, #7]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d101      	bne.n	800f09e <send_cmd+0x94>
 800f09a:	2395      	movs	r3, #149	; 0x95
 800f09c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800f09e:	79fb      	ldrb	r3, [r7, #7]
 800f0a0:	2b08      	cmp	r3, #8
 800f0a2:	d101      	bne.n	800f0a8 <send_cmd+0x9e>
 800f0a4:	2387      	movs	r3, #135	; 0x87
 800f0a6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800f0a8:	7bfb      	ldrb	r3, [r7, #15]
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f7ff feb6 	bl	800ee1c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800f0b0:	79fb      	ldrb	r3, [r7, #7]
 800f0b2:	2b0c      	cmp	r3, #12
 800f0b4:	d102      	bne.n	800f0bc <send_cmd+0xb2>
 800f0b6:	20ff      	movs	r0, #255	; 0xff
 800f0b8:	f7ff feb0 	bl	800ee1c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800f0bc:	230a      	movs	r3, #10
 800f0be:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800f0c0:	20ff      	movs	r0, #255	; 0xff
 800f0c2:	f7ff feab 	bl	800ee1c <xchg_spi>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800f0ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	da05      	bge.n	800f0de <send_cmd+0xd4>
 800f0d2:	7bfb      	ldrb	r3, [r7, #15]
 800f0d4:	3b01      	subs	r3, #1
 800f0d6:	73fb      	strb	r3, [r7, #15]
 800f0d8:	7bfb      	ldrb	r3, [r7, #15]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d1f0      	bne.n	800f0c0 <send_cmd+0xb6>

	return res;							/* Return received response */
 800f0de:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3710      	adds	r7, #16
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}

0800f0e8 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800f0e8:	b590      	push	{r4, r7, lr}
 800f0ea:	b085      	sub	sp, #20
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800f0f2:	79fb      	ldrb	r3, [r7, #7]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d001      	beq.n	800f0fc <USER_SPI_initialize+0x14>
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	e0d4      	b.n	800f2a6 <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800f0fc:	4b6c      	ldr	r3, [pc, #432]	; (800f2b0 <USER_SPI_initialize+0x1c8>)
 800f0fe:	781b      	ldrb	r3, [r3, #0]
 800f100:	b2db      	uxtb	r3, r3
 800f102:	f003 0302 	and.w	r3, r3, #2
 800f106:	2b00      	cmp	r3, #0
 800f108:	d003      	beq.n	800f112 <USER_SPI_initialize+0x2a>
 800f10a:	4b69      	ldr	r3, [pc, #420]	; (800f2b0 <USER_SPI_initialize+0x1c8>)
 800f10c:	781b      	ldrb	r3, [r3, #0]
 800f10e:	b2db      	uxtb	r3, r3
 800f110:	e0c9      	b.n	800f2a6 <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 800f112:	4b68      	ldr	r3, [pc, #416]	; (800f2b4 <USER_SPI_initialize+0x1cc>)
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	681a      	ldr	r2, [r3, #0]
 800f118:	4b66      	ldr	r3, [pc, #408]	; (800f2b4 <USER_SPI_initialize+0x1cc>)
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800f120:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800f122:	230a      	movs	r3, #10
 800f124:	73fb      	strb	r3, [r7, #15]
 800f126:	e005      	b.n	800f134 <USER_SPI_initialize+0x4c>
 800f128:	20ff      	movs	r0, #255	; 0xff
 800f12a:	f7ff fe77 	bl	800ee1c <xchg_spi>
 800f12e:	7bfb      	ldrb	r3, [r7, #15]
 800f130:	3b01      	subs	r3, #1
 800f132:	73fb      	strb	r3, [r7, #15]
 800f134:	7bfb      	ldrb	r3, [r7, #15]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d1f6      	bne.n	800f128 <USER_SPI_initialize+0x40>

	ty = 0;
 800f13a:	2300      	movs	r3, #0
 800f13c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800f13e:	2100      	movs	r1, #0
 800f140:	2000      	movs	r0, #0
 800f142:	f7ff ff62 	bl	800f00a <send_cmd>
 800f146:	4603      	mov	r3, r0
 800f148:	2b01      	cmp	r3, #1
 800f14a:	f040 808b 	bne.w	800f264 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800f14e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f152:	f7ff fe39 	bl	800edc8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800f156:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f15a:	2008      	movs	r0, #8
 800f15c:	f7ff ff55 	bl	800f00a <send_cmd>
 800f160:	4603      	mov	r3, r0
 800f162:	2b01      	cmp	r3, #1
 800f164:	d151      	bne.n	800f20a <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800f166:	2300      	movs	r3, #0
 800f168:	73fb      	strb	r3, [r7, #15]
 800f16a:	e00d      	b.n	800f188 <USER_SPI_initialize+0xa0>
 800f16c:	7bfc      	ldrb	r4, [r7, #15]
 800f16e:	20ff      	movs	r0, #255	; 0xff
 800f170:	f7ff fe54 	bl	800ee1c <xchg_spi>
 800f174:	4603      	mov	r3, r0
 800f176:	461a      	mov	r2, r3
 800f178:	f107 0310 	add.w	r3, r7, #16
 800f17c:	4423      	add	r3, r4
 800f17e:	f803 2c08 	strb.w	r2, [r3, #-8]
 800f182:	7bfb      	ldrb	r3, [r7, #15]
 800f184:	3301      	adds	r3, #1
 800f186:	73fb      	strb	r3, [r7, #15]
 800f188:	7bfb      	ldrb	r3, [r7, #15]
 800f18a:	2b03      	cmp	r3, #3
 800f18c:	d9ee      	bls.n	800f16c <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800f18e:	7abb      	ldrb	r3, [r7, #10]
 800f190:	2b01      	cmp	r3, #1
 800f192:	d167      	bne.n	800f264 <USER_SPI_initialize+0x17c>
 800f194:	7afb      	ldrb	r3, [r7, #11]
 800f196:	2baa      	cmp	r3, #170	; 0xaa
 800f198:	d164      	bne.n	800f264 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800f19a:	bf00      	nop
 800f19c:	f7ff fe28 	bl	800edf0 <SPI_Timer_Status>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d007      	beq.n	800f1b6 <USER_SPI_initialize+0xce>
 800f1a6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800f1aa:	20a9      	movs	r0, #169	; 0xa9
 800f1ac:	f7ff ff2d 	bl	800f00a <send_cmd>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d1f2      	bne.n	800f19c <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800f1b6:	f7ff fe1b 	bl	800edf0 <SPI_Timer_Status>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d051      	beq.n	800f264 <USER_SPI_initialize+0x17c>
 800f1c0:	2100      	movs	r1, #0
 800f1c2:	203a      	movs	r0, #58	; 0x3a
 800f1c4:	f7ff ff21 	bl	800f00a <send_cmd>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d14a      	bne.n	800f264 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	73fb      	strb	r3, [r7, #15]
 800f1d2:	e00d      	b.n	800f1f0 <USER_SPI_initialize+0x108>
 800f1d4:	7bfc      	ldrb	r4, [r7, #15]
 800f1d6:	20ff      	movs	r0, #255	; 0xff
 800f1d8:	f7ff fe20 	bl	800ee1c <xchg_spi>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	461a      	mov	r2, r3
 800f1e0:	f107 0310 	add.w	r3, r7, #16
 800f1e4:	4423      	add	r3, r4
 800f1e6:	f803 2c08 	strb.w	r2, [r3, #-8]
 800f1ea:	7bfb      	ldrb	r3, [r7, #15]
 800f1ec:	3301      	adds	r3, #1
 800f1ee:	73fb      	strb	r3, [r7, #15]
 800f1f0:	7bfb      	ldrb	r3, [r7, #15]
 800f1f2:	2b03      	cmp	r3, #3
 800f1f4:	d9ee      	bls.n	800f1d4 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800f1f6:	7a3b      	ldrb	r3, [r7, #8]
 800f1f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d001      	beq.n	800f204 <USER_SPI_initialize+0x11c>
 800f200:	230c      	movs	r3, #12
 800f202:	e000      	b.n	800f206 <USER_SPI_initialize+0x11e>
 800f204:	2304      	movs	r3, #4
 800f206:	737b      	strb	r3, [r7, #13]
 800f208:	e02c      	b.n	800f264 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800f20a:	2100      	movs	r1, #0
 800f20c:	20a9      	movs	r0, #169	; 0xa9
 800f20e:	f7ff fefc 	bl	800f00a <send_cmd>
 800f212:	4603      	mov	r3, r0
 800f214:	2b01      	cmp	r3, #1
 800f216:	d804      	bhi.n	800f222 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800f218:	2302      	movs	r3, #2
 800f21a:	737b      	strb	r3, [r7, #13]
 800f21c:	23a9      	movs	r3, #169	; 0xa9
 800f21e:	73bb      	strb	r3, [r7, #14]
 800f220:	e003      	b.n	800f22a <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800f222:	2301      	movs	r3, #1
 800f224:	737b      	strb	r3, [r7, #13]
 800f226:	2301      	movs	r3, #1
 800f228:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800f22a:	bf00      	nop
 800f22c:	f7ff fde0 	bl	800edf0 <SPI_Timer_Status>
 800f230:	4603      	mov	r3, r0
 800f232:	2b00      	cmp	r3, #0
 800f234:	d007      	beq.n	800f246 <USER_SPI_initialize+0x15e>
 800f236:	7bbb      	ldrb	r3, [r7, #14]
 800f238:	2100      	movs	r1, #0
 800f23a:	4618      	mov	r0, r3
 800f23c:	f7ff fee5 	bl	800f00a <send_cmd>
 800f240:	4603      	mov	r3, r0
 800f242:	2b00      	cmp	r3, #0
 800f244:	d1f2      	bne.n	800f22c <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800f246:	f7ff fdd3 	bl	800edf0 <SPI_Timer_Status>
 800f24a:	4603      	mov	r3, r0
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d007      	beq.n	800f260 <USER_SPI_initialize+0x178>
 800f250:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f254:	2010      	movs	r0, #16
 800f256:	f7ff fed8 	bl	800f00a <send_cmd>
 800f25a:	4603      	mov	r3, r0
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d001      	beq.n	800f264 <USER_SPI_initialize+0x17c>
				ty = 0;
 800f260:	2300      	movs	r3, #0
 800f262:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800f264:	4a14      	ldr	r2, [pc, #80]	; (800f2b8 <USER_SPI_initialize+0x1d0>)
 800f266:	7b7b      	ldrb	r3, [r7, #13]
 800f268:	7013      	strb	r3, [r2, #0]
	despiselect();
 800f26a:	f7ff fe47 	bl	800eefc <despiselect>

	if (ty) {			/* OK */
 800f26e:	7b7b      	ldrb	r3, [r7, #13]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d012      	beq.n	800f29a <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 800f274:	4b0f      	ldr	r3, [pc, #60]	; (800f2b4 <USER_SPI_initialize+0x1cc>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800f27e:	4b0d      	ldr	r3, [pc, #52]	; (800f2b4 <USER_SPI_initialize+0x1cc>)
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	f042 0208 	orr.w	r2, r2, #8
 800f286:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800f288:	4b09      	ldr	r3, [pc, #36]	; (800f2b0 <USER_SPI_initialize+0x1c8>)
 800f28a:	781b      	ldrb	r3, [r3, #0]
 800f28c:	b2db      	uxtb	r3, r3
 800f28e:	f023 0301 	bic.w	r3, r3, #1
 800f292:	b2da      	uxtb	r2, r3
 800f294:	4b06      	ldr	r3, [pc, #24]	; (800f2b0 <USER_SPI_initialize+0x1c8>)
 800f296:	701a      	strb	r2, [r3, #0]
 800f298:	e002      	b.n	800f2a0 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800f29a:	4b05      	ldr	r3, [pc, #20]	; (800f2b0 <USER_SPI_initialize+0x1c8>)
 800f29c:	2201      	movs	r2, #1
 800f29e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800f2a0:	4b03      	ldr	r3, [pc, #12]	; (800f2b0 <USER_SPI_initialize+0x1c8>)
 800f2a2:	781b      	ldrb	r3, [r3, #0]
 800f2a4:	b2db      	uxtb	r3, r3
}
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	3714      	adds	r7, #20
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd90      	pop	{r4, r7, pc}
 800f2ae:	bf00      	nop
 800f2b0:	200000e8 	.word	0x200000e8
 800f2b4:	2000bba4 	.word	0x2000bba4
 800f2b8:	200007c4 	.word	0x200007c4

0800f2bc <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800f2bc:	b480      	push	{r7}
 800f2be:	b083      	sub	sp, #12
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800f2c6:	79fb      	ldrb	r3, [r7, #7]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d001      	beq.n	800f2d0 <USER_SPI_status+0x14>
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	e002      	b.n	800f2d6 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800f2d0:	4b04      	ldr	r3, [pc, #16]	; (800f2e4 <USER_SPI_status+0x28>)
 800f2d2:	781b      	ldrb	r3, [r3, #0]
 800f2d4:	b2db      	uxtb	r3, r3
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	370c      	adds	r7, #12
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e0:	4770      	bx	lr
 800f2e2:	bf00      	nop
 800f2e4:	200000e8 	.word	0x200000e8

0800f2e8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b084      	sub	sp, #16
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	60b9      	str	r1, [r7, #8]
 800f2f0:	607a      	str	r2, [r7, #4]
 800f2f2:	603b      	str	r3, [r7, #0]
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800f2f8:	7bfb      	ldrb	r3, [r7, #15]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d102      	bne.n	800f304 <USER_SPI_read+0x1c>
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d101      	bne.n	800f308 <USER_SPI_read+0x20>
 800f304:	2304      	movs	r3, #4
 800f306:	e04d      	b.n	800f3a4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800f308:	4b28      	ldr	r3, [pc, #160]	; (800f3ac <USER_SPI_read+0xc4>)
 800f30a:	781b      	ldrb	r3, [r3, #0]
 800f30c:	b2db      	uxtb	r3, r3
 800f30e:	f003 0301 	and.w	r3, r3, #1
 800f312:	2b00      	cmp	r3, #0
 800f314:	d001      	beq.n	800f31a <USER_SPI_read+0x32>
 800f316:	2303      	movs	r3, #3
 800f318:	e044      	b.n	800f3a4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800f31a:	4b25      	ldr	r3, [pc, #148]	; (800f3b0 <USER_SPI_read+0xc8>)
 800f31c:	781b      	ldrb	r3, [r3, #0]
 800f31e:	f003 0308 	and.w	r3, r3, #8
 800f322:	2b00      	cmp	r3, #0
 800f324:	d102      	bne.n	800f32c <USER_SPI_read+0x44>
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	025b      	lsls	r3, r3, #9
 800f32a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	2b01      	cmp	r3, #1
 800f330:	d111      	bne.n	800f356 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800f332:	6879      	ldr	r1, [r7, #4]
 800f334:	2011      	movs	r0, #17
 800f336:	f7ff fe68 	bl	800f00a <send_cmd>
 800f33a:	4603      	mov	r3, r0
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d129      	bne.n	800f394 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800f340:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f344:	68b8      	ldr	r0, [r7, #8]
 800f346:	f7ff fe05 	bl	800ef54 <rcvr_datablock>
 800f34a:	4603      	mov	r3, r0
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d021      	beq.n	800f394 <USER_SPI_read+0xac>
			count = 0;
 800f350:	2300      	movs	r3, #0
 800f352:	603b      	str	r3, [r7, #0]
 800f354:	e01e      	b.n	800f394 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800f356:	6879      	ldr	r1, [r7, #4]
 800f358:	2012      	movs	r0, #18
 800f35a:	f7ff fe56 	bl	800f00a <send_cmd>
 800f35e:	4603      	mov	r3, r0
 800f360:	2b00      	cmp	r3, #0
 800f362:	d117      	bne.n	800f394 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800f364:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f368:	68b8      	ldr	r0, [r7, #8]
 800f36a:	f7ff fdf3 	bl	800ef54 <rcvr_datablock>
 800f36e:	4603      	mov	r3, r0
 800f370:	2b00      	cmp	r3, #0
 800f372:	d00a      	beq.n	800f38a <USER_SPI_read+0xa2>
				buff += 512;
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800f37a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	3b01      	subs	r3, #1
 800f380:	603b      	str	r3, [r7, #0]
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d1ed      	bne.n	800f364 <USER_SPI_read+0x7c>
 800f388:	e000      	b.n	800f38c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800f38a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800f38c:	2100      	movs	r1, #0
 800f38e:	200c      	movs	r0, #12
 800f390:	f7ff fe3b 	bl	800f00a <send_cmd>
		}
	}
	despiselect();
 800f394:	f7ff fdb2 	bl	800eefc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	bf14      	ite	ne
 800f39e:	2301      	movne	r3, #1
 800f3a0:	2300      	moveq	r3, #0
 800f3a2:	b2db      	uxtb	r3, r3
}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	3710      	adds	r7, #16
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd80      	pop	{r7, pc}
 800f3ac:	200000e8 	.word	0x200000e8
 800f3b0:	200007c4 	.word	0x200007c4

0800f3b4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b084      	sub	sp, #16
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	60b9      	str	r1, [r7, #8]
 800f3bc:	607a      	str	r2, [r7, #4]
 800f3be:	603b      	str	r3, [r7, #0]
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800f3c4:	7bfb      	ldrb	r3, [r7, #15]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d102      	bne.n	800f3d0 <USER_SPI_write+0x1c>
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d101      	bne.n	800f3d4 <USER_SPI_write+0x20>
 800f3d0:	2304      	movs	r3, #4
 800f3d2:	e063      	b.n	800f49c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800f3d4:	4b33      	ldr	r3, [pc, #204]	; (800f4a4 <USER_SPI_write+0xf0>)
 800f3d6:	781b      	ldrb	r3, [r3, #0]
 800f3d8:	b2db      	uxtb	r3, r3
 800f3da:	f003 0301 	and.w	r3, r3, #1
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d001      	beq.n	800f3e6 <USER_SPI_write+0x32>
 800f3e2:	2303      	movs	r3, #3
 800f3e4:	e05a      	b.n	800f49c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800f3e6:	4b2f      	ldr	r3, [pc, #188]	; (800f4a4 <USER_SPI_write+0xf0>)
 800f3e8:	781b      	ldrb	r3, [r3, #0]
 800f3ea:	b2db      	uxtb	r3, r3
 800f3ec:	f003 0304 	and.w	r3, r3, #4
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d001      	beq.n	800f3f8 <USER_SPI_write+0x44>
 800f3f4:	2302      	movs	r3, #2
 800f3f6:	e051      	b.n	800f49c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800f3f8:	4b2b      	ldr	r3, [pc, #172]	; (800f4a8 <USER_SPI_write+0xf4>)
 800f3fa:	781b      	ldrb	r3, [r3, #0]
 800f3fc:	f003 0308 	and.w	r3, r3, #8
 800f400:	2b00      	cmp	r3, #0
 800f402:	d102      	bne.n	800f40a <USER_SPI_write+0x56>
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	025b      	lsls	r3, r3, #9
 800f408:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	2b01      	cmp	r3, #1
 800f40e:	d110      	bne.n	800f432 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800f410:	6879      	ldr	r1, [r7, #4]
 800f412:	2018      	movs	r0, #24
 800f414:	f7ff fdf9 	bl	800f00a <send_cmd>
 800f418:	4603      	mov	r3, r0
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d136      	bne.n	800f48c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800f41e:	21fe      	movs	r1, #254	; 0xfe
 800f420:	68b8      	ldr	r0, [r7, #8]
 800f422:	f7ff fdc0 	bl	800efa6 <xmit_datablock>
 800f426:	4603      	mov	r3, r0
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d02f      	beq.n	800f48c <USER_SPI_write+0xd8>
			count = 0;
 800f42c:	2300      	movs	r3, #0
 800f42e:	603b      	str	r3, [r7, #0]
 800f430:	e02c      	b.n	800f48c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800f432:	4b1d      	ldr	r3, [pc, #116]	; (800f4a8 <USER_SPI_write+0xf4>)
 800f434:	781b      	ldrb	r3, [r3, #0]
 800f436:	f003 0306 	and.w	r3, r3, #6
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d003      	beq.n	800f446 <USER_SPI_write+0x92>
 800f43e:	6839      	ldr	r1, [r7, #0]
 800f440:	2097      	movs	r0, #151	; 0x97
 800f442:	f7ff fde2 	bl	800f00a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800f446:	6879      	ldr	r1, [r7, #4]
 800f448:	2019      	movs	r0, #25
 800f44a:	f7ff fdde 	bl	800f00a <send_cmd>
 800f44e:	4603      	mov	r3, r0
 800f450:	2b00      	cmp	r3, #0
 800f452:	d11b      	bne.n	800f48c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800f454:	21fc      	movs	r1, #252	; 0xfc
 800f456:	68b8      	ldr	r0, [r7, #8]
 800f458:	f7ff fda5 	bl	800efa6 <xmit_datablock>
 800f45c:	4603      	mov	r3, r0
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d00a      	beq.n	800f478 <USER_SPI_write+0xc4>
				buff += 512;
 800f462:	68bb      	ldr	r3, [r7, #8]
 800f464:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800f468:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800f46a:	683b      	ldr	r3, [r7, #0]
 800f46c:	3b01      	subs	r3, #1
 800f46e:	603b      	str	r3, [r7, #0]
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d1ee      	bne.n	800f454 <USER_SPI_write+0xa0>
 800f476:	e000      	b.n	800f47a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800f478:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800f47a:	21fd      	movs	r1, #253	; 0xfd
 800f47c:	2000      	movs	r0, #0
 800f47e:	f7ff fd92 	bl	800efa6 <xmit_datablock>
 800f482:	4603      	mov	r3, r0
 800f484:	2b00      	cmp	r3, #0
 800f486:	d101      	bne.n	800f48c <USER_SPI_write+0xd8>
 800f488:	2301      	movs	r3, #1
 800f48a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800f48c:	f7ff fd36 	bl	800eefc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	2b00      	cmp	r3, #0
 800f494:	bf14      	ite	ne
 800f496:	2301      	movne	r3, #1
 800f498:	2300      	moveq	r3, #0
 800f49a:	b2db      	uxtb	r3, r3
}
 800f49c:	4618      	mov	r0, r3
 800f49e:	3710      	adds	r7, #16
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}
 800f4a4:	200000e8 	.word	0x200000e8
 800f4a8:	200007c4 	.word	0x200007c4

0800f4ac <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b08c      	sub	sp, #48	; 0x30
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	603a      	str	r2, [r7, #0]
 800f4b6:	71fb      	strb	r3, [r7, #7]
 800f4b8:	460b      	mov	r3, r1
 800f4ba:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800f4bc:	79fb      	ldrb	r3, [r7, #7]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d001      	beq.n	800f4c6 <USER_SPI_ioctl+0x1a>
 800f4c2:	2304      	movs	r3, #4
 800f4c4:	e15a      	b.n	800f77c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800f4c6:	4baf      	ldr	r3, [pc, #700]	; (800f784 <USER_SPI_ioctl+0x2d8>)
 800f4c8:	781b      	ldrb	r3, [r3, #0]
 800f4ca:	b2db      	uxtb	r3, r3
 800f4cc:	f003 0301 	and.w	r3, r3, #1
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d001      	beq.n	800f4d8 <USER_SPI_ioctl+0x2c>
 800f4d4:	2303      	movs	r3, #3
 800f4d6:	e151      	b.n	800f77c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800f4d8:	2301      	movs	r3, #1
 800f4da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800f4de:	79bb      	ldrb	r3, [r7, #6]
 800f4e0:	2b04      	cmp	r3, #4
 800f4e2:	f200 8136 	bhi.w	800f752 <USER_SPI_ioctl+0x2a6>
 800f4e6:	a201      	add	r2, pc, #4	; (adr r2, 800f4ec <USER_SPI_ioctl+0x40>)
 800f4e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4ec:	0800f501 	.word	0x0800f501
 800f4f0:	0800f515 	.word	0x0800f515
 800f4f4:	0800f753 	.word	0x0800f753
 800f4f8:	0800f5c1 	.word	0x0800f5c1
 800f4fc:	0800f6b7 	.word	0x0800f6b7
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800f500:	f7ff fd0c 	bl	800ef1c <spiselect>
 800f504:	4603      	mov	r3, r0
 800f506:	2b00      	cmp	r3, #0
 800f508:	f000 8127 	beq.w	800f75a <USER_SPI_ioctl+0x2ae>
 800f50c:	2300      	movs	r3, #0
 800f50e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800f512:	e122      	b.n	800f75a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800f514:	2100      	movs	r1, #0
 800f516:	2009      	movs	r0, #9
 800f518:	f7ff fd77 	bl	800f00a <send_cmd>
 800f51c:	4603      	mov	r3, r0
 800f51e:	2b00      	cmp	r3, #0
 800f520:	f040 811d 	bne.w	800f75e <USER_SPI_ioctl+0x2b2>
 800f524:	f107 030c 	add.w	r3, r7, #12
 800f528:	2110      	movs	r1, #16
 800f52a:	4618      	mov	r0, r3
 800f52c:	f7ff fd12 	bl	800ef54 <rcvr_datablock>
 800f530:	4603      	mov	r3, r0
 800f532:	2b00      	cmp	r3, #0
 800f534:	f000 8113 	beq.w	800f75e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800f538:	7b3b      	ldrb	r3, [r7, #12]
 800f53a:	099b      	lsrs	r3, r3, #6
 800f53c:	b2db      	uxtb	r3, r3
 800f53e:	2b01      	cmp	r3, #1
 800f540:	d111      	bne.n	800f566 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800f542:	7d7b      	ldrb	r3, [r7, #21]
 800f544:	461a      	mov	r2, r3
 800f546:	7d3b      	ldrb	r3, [r7, #20]
 800f548:	021b      	lsls	r3, r3, #8
 800f54a:	4413      	add	r3, r2
 800f54c:	461a      	mov	r2, r3
 800f54e:	7cfb      	ldrb	r3, [r7, #19]
 800f550:	041b      	lsls	r3, r3, #16
 800f552:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800f556:	4413      	add	r3, r2
 800f558:	3301      	adds	r3, #1
 800f55a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800f55c:	69fb      	ldr	r3, [r7, #28]
 800f55e:	029a      	lsls	r2, r3, #10
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	601a      	str	r2, [r3, #0]
 800f564:	e028      	b.n	800f5b8 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800f566:	7c7b      	ldrb	r3, [r7, #17]
 800f568:	f003 030f 	and.w	r3, r3, #15
 800f56c:	b2da      	uxtb	r2, r3
 800f56e:	7dbb      	ldrb	r3, [r7, #22]
 800f570:	09db      	lsrs	r3, r3, #7
 800f572:	b2db      	uxtb	r3, r3
 800f574:	4413      	add	r3, r2
 800f576:	b2da      	uxtb	r2, r3
 800f578:	7d7b      	ldrb	r3, [r7, #21]
 800f57a:	005b      	lsls	r3, r3, #1
 800f57c:	b2db      	uxtb	r3, r3
 800f57e:	f003 0306 	and.w	r3, r3, #6
 800f582:	b2db      	uxtb	r3, r3
 800f584:	4413      	add	r3, r2
 800f586:	b2db      	uxtb	r3, r3
 800f588:	3302      	adds	r3, #2
 800f58a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800f58e:	7d3b      	ldrb	r3, [r7, #20]
 800f590:	099b      	lsrs	r3, r3, #6
 800f592:	b2db      	uxtb	r3, r3
 800f594:	461a      	mov	r2, r3
 800f596:	7cfb      	ldrb	r3, [r7, #19]
 800f598:	009b      	lsls	r3, r3, #2
 800f59a:	441a      	add	r2, r3
 800f59c:	7cbb      	ldrb	r3, [r7, #18]
 800f59e:	029b      	lsls	r3, r3, #10
 800f5a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f5a4:	4413      	add	r3, r2
 800f5a6:	3301      	adds	r3, #1
 800f5a8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800f5aa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f5ae:	3b09      	subs	r3, #9
 800f5b0:	69fa      	ldr	r2, [r7, #28]
 800f5b2:	409a      	lsls	r2, r3
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800f5be:	e0ce      	b.n	800f75e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800f5c0:	4b71      	ldr	r3, [pc, #452]	; (800f788 <USER_SPI_ioctl+0x2dc>)
 800f5c2:	781b      	ldrb	r3, [r3, #0]
 800f5c4:	f003 0304 	and.w	r3, r3, #4
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d031      	beq.n	800f630 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800f5cc:	2100      	movs	r1, #0
 800f5ce:	208d      	movs	r0, #141	; 0x8d
 800f5d0:	f7ff fd1b 	bl	800f00a <send_cmd>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	f040 80c3 	bne.w	800f762 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800f5dc:	20ff      	movs	r0, #255	; 0xff
 800f5de:	f7ff fc1d 	bl	800ee1c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800f5e2:	f107 030c 	add.w	r3, r7, #12
 800f5e6:	2110      	movs	r1, #16
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f7ff fcb3 	bl	800ef54 <rcvr_datablock>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	f000 80b6 	beq.w	800f762 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800f5f6:	2330      	movs	r3, #48	; 0x30
 800f5f8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800f5fc:	e007      	b.n	800f60e <USER_SPI_ioctl+0x162>
 800f5fe:	20ff      	movs	r0, #255	; 0xff
 800f600:	f7ff fc0c 	bl	800ee1c <xchg_spi>
 800f604:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f608:	3b01      	subs	r3, #1
 800f60a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800f60e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f612:	2b00      	cmp	r3, #0
 800f614:	d1f3      	bne.n	800f5fe <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800f616:	7dbb      	ldrb	r3, [r7, #22]
 800f618:	091b      	lsrs	r3, r3, #4
 800f61a:	b2db      	uxtb	r3, r3
 800f61c:	461a      	mov	r2, r3
 800f61e:	2310      	movs	r3, #16
 800f620:	fa03 f202 	lsl.w	r2, r3, r2
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800f628:	2300      	movs	r3, #0
 800f62a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800f62e:	e098      	b.n	800f762 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800f630:	2100      	movs	r1, #0
 800f632:	2009      	movs	r0, #9
 800f634:	f7ff fce9 	bl	800f00a <send_cmd>
 800f638:	4603      	mov	r3, r0
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	f040 8091 	bne.w	800f762 <USER_SPI_ioctl+0x2b6>
 800f640:	f107 030c 	add.w	r3, r7, #12
 800f644:	2110      	movs	r1, #16
 800f646:	4618      	mov	r0, r3
 800f648:	f7ff fc84 	bl	800ef54 <rcvr_datablock>
 800f64c:	4603      	mov	r3, r0
 800f64e:	2b00      	cmp	r3, #0
 800f650:	f000 8087 	beq.w	800f762 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800f654:	4b4c      	ldr	r3, [pc, #304]	; (800f788 <USER_SPI_ioctl+0x2dc>)
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	f003 0302 	and.w	r3, r3, #2
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d012      	beq.n	800f686 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800f660:	7dbb      	ldrb	r3, [r7, #22]
 800f662:	005b      	lsls	r3, r3, #1
 800f664:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800f668:	7dfa      	ldrb	r2, [r7, #23]
 800f66a:	09d2      	lsrs	r2, r2, #7
 800f66c:	b2d2      	uxtb	r2, r2
 800f66e:	4413      	add	r3, r2
 800f670:	1c5a      	adds	r2, r3, #1
 800f672:	7e7b      	ldrb	r3, [r7, #25]
 800f674:	099b      	lsrs	r3, r3, #6
 800f676:	b2db      	uxtb	r3, r3
 800f678:	3b01      	subs	r3, #1
 800f67a:	fa02 f303 	lsl.w	r3, r2, r3
 800f67e:	461a      	mov	r2, r3
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	601a      	str	r2, [r3, #0]
 800f684:	e013      	b.n	800f6ae <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800f686:	7dbb      	ldrb	r3, [r7, #22]
 800f688:	109b      	asrs	r3, r3, #2
 800f68a:	b29b      	uxth	r3, r3
 800f68c:	f003 031f 	and.w	r3, r3, #31
 800f690:	3301      	adds	r3, #1
 800f692:	7dfa      	ldrb	r2, [r7, #23]
 800f694:	00d2      	lsls	r2, r2, #3
 800f696:	f002 0218 	and.w	r2, r2, #24
 800f69a:	7df9      	ldrb	r1, [r7, #23]
 800f69c:	0949      	lsrs	r1, r1, #5
 800f69e:	b2c9      	uxtb	r1, r1
 800f6a0:	440a      	add	r2, r1
 800f6a2:	3201      	adds	r2, #1
 800f6a4:	fb02 f303 	mul.w	r3, r2, r3
 800f6a8:	461a      	mov	r2, r3
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800f6b4:	e055      	b.n	800f762 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800f6b6:	4b34      	ldr	r3, [pc, #208]	; (800f788 <USER_SPI_ioctl+0x2dc>)
 800f6b8:	781b      	ldrb	r3, [r3, #0]
 800f6ba:	f003 0306 	and.w	r3, r3, #6
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d051      	beq.n	800f766 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800f6c2:	f107 020c 	add.w	r2, r7, #12
 800f6c6:	79fb      	ldrb	r3, [r7, #7]
 800f6c8:	210b      	movs	r1, #11
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f7ff feee 	bl	800f4ac <USER_SPI_ioctl>
 800f6d0:	4603      	mov	r3, r0
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d149      	bne.n	800f76a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800f6d6:	7b3b      	ldrb	r3, [r7, #12]
 800f6d8:	099b      	lsrs	r3, r3, #6
 800f6da:	b2db      	uxtb	r3, r3
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d104      	bne.n	800f6ea <USER_SPI_ioctl+0x23e>
 800f6e0:	7dbb      	ldrb	r3, [r7, #22]
 800f6e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d041      	beq.n	800f76e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	623b      	str	r3, [r7, #32]
 800f6ee:	6a3b      	ldr	r3, [r7, #32]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800f6f4:	6a3b      	ldr	r3, [r7, #32]
 800f6f6:	685b      	ldr	r3, [r3, #4]
 800f6f8:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800f6fa:	4b23      	ldr	r3, [pc, #140]	; (800f788 <USER_SPI_ioctl+0x2dc>)
 800f6fc:	781b      	ldrb	r3, [r3, #0]
 800f6fe:	f003 0308 	and.w	r3, r3, #8
 800f702:	2b00      	cmp	r3, #0
 800f704:	d105      	bne.n	800f712 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800f706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f708:	025b      	lsls	r3, r3, #9
 800f70a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f70e:	025b      	lsls	r3, r3, #9
 800f710:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800f712:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f714:	2020      	movs	r0, #32
 800f716:	f7ff fc78 	bl	800f00a <send_cmd>
 800f71a:	4603      	mov	r3, r0
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d128      	bne.n	800f772 <USER_SPI_ioctl+0x2c6>
 800f720:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f722:	2021      	movs	r0, #33	; 0x21
 800f724:	f7ff fc71 	bl	800f00a <send_cmd>
 800f728:	4603      	mov	r3, r0
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d121      	bne.n	800f772 <USER_SPI_ioctl+0x2c6>
 800f72e:	2100      	movs	r1, #0
 800f730:	2026      	movs	r0, #38	; 0x26
 800f732:	f7ff fc6a 	bl	800f00a <send_cmd>
 800f736:	4603      	mov	r3, r0
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d11a      	bne.n	800f772 <USER_SPI_ioctl+0x2c6>
 800f73c:	f247 5030 	movw	r0, #30000	; 0x7530
 800f740:	f7ff fbb9 	bl	800eeb6 <wait_ready>
 800f744:	4603      	mov	r3, r0
 800f746:	2b00      	cmp	r3, #0
 800f748:	d013      	beq.n	800f772 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800f74a:	2300      	movs	r3, #0
 800f74c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800f750:	e00f      	b.n	800f772 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800f752:	2304      	movs	r3, #4
 800f754:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f758:	e00c      	b.n	800f774 <USER_SPI_ioctl+0x2c8>
		break;
 800f75a:	bf00      	nop
 800f75c:	e00a      	b.n	800f774 <USER_SPI_ioctl+0x2c8>
		break;
 800f75e:	bf00      	nop
 800f760:	e008      	b.n	800f774 <USER_SPI_ioctl+0x2c8>
		break;
 800f762:	bf00      	nop
 800f764:	e006      	b.n	800f774 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800f766:	bf00      	nop
 800f768:	e004      	b.n	800f774 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800f76a:	bf00      	nop
 800f76c:	e002      	b.n	800f774 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800f76e:	bf00      	nop
 800f770:	e000      	b.n	800f774 <USER_SPI_ioctl+0x2c8>
		break;
 800f772:	bf00      	nop
	}

	despiselect();
 800f774:	f7ff fbc2 	bl	800eefc <despiselect>

	return res;
 800f778:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f77c:	4618      	mov	r0, r3
 800f77e:	3730      	adds	r7, #48	; 0x30
 800f780:	46bd      	mov	sp, r7
 800f782:	bd80      	pop	{r7, pc}
 800f784:	200000e8 	.word	0x200000e8
 800f788:	200007c4 	.word	0x200007c4

0800f78c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b084      	sub	sp, #16
 800f790:	af00      	add	r7, sp, #0
 800f792:	4603      	mov	r3, r0
 800f794:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f796:	79fb      	ldrb	r3, [r7, #7]
 800f798:	4a08      	ldr	r2, [pc, #32]	; (800f7bc <disk_status+0x30>)
 800f79a:	009b      	lsls	r3, r3, #2
 800f79c:	4413      	add	r3, r2
 800f79e:	685b      	ldr	r3, [r3, #4]
 800f7a0:	685b      	ldr	r3, [r3, #4]
 800f7a2:	79fa      	ldrb	r2, [r7, #7]
 800f7a4:	4905      	ldr	r1, [pc, #20]	; (800f7bc <disk_status+0x30>)
 800f7a6:	440a      	add	r2, r1
 800f7a8:	7a12      	ldrb	r2, [r2, #8]
 800f7aa:	4610      	mov	r0, r2
 800f7ac:	4798      	blx	r3
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f7b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	3710      	adds	r7, #16
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	bd80      	pop	{r7, pc}
 800f7bc:	200007f0 	.word	0x200007f0

0800f7c0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b084      	sub	sp, #16
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f7ce:	79fb      	ldrb	r3, [r7, #7]
 800f7d0:	4a0d      	ldr	r2, [pc, #52]	; (800f808 <disk_initialize+0x48>)
 800f7d2:	5cd3      	ldrb	r3, [r2, r3]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d111      	bne.n	800f7fc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f7d8:	79fb      	ldrb	r3, [r7, #7]
 800f7da:	4a0b      	ldr	r2, [pc, #44]	; (800f808 <disk_initialize+0x48>)
 800f7dc:	2101      	movs	r1, #1
 800f7de:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f7e0:	79fb      	ldrb	r3, [r7, #7]
 800f7e2:	4a09      	ldr	r2, [pc, #36]	; (800f808 <disk_initialize+0x48>)
 800f7e4:	009b      	lsls	r3, r3, #2
 800f7e6:	4413      	add	r3, r2
 800f7e8:	685b      	ldr	r3, [r3, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	79fa      	ldrb	r2, [r7, #7]
 800f7ee:	4906      	ldr	r1, [pc, #24]	; (800f808 <disk_initialize+0x48>)
 800f7f0:	440a      	add	r2, r1
 800f7f2:	7a12      	ldrb	r2, [r2, #8]
 800f7f4:	4610      	mov	r0, r2
 800f7f6:	4798      	blx	r3
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f7fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7fe:	4618      	mov	r0, r3
 800f800:	3710      	adds	r7, #16
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}
 800f806:	bf00      	nop
 800f808:	200007f0 	.word	0x200007f0

0800f80c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f80c:	b590      	push	{r4, r7, lr}
 800f80e:	b087      	sub	sp, #28
 800f810:	af00      	add	r7, sp, #0
 800f812:	60b9      	str	r1, [r7, #8]
 800f814:	607a      	str	r2, [r7, #4]
 800f816:	603b      	str	r3, [r7, #0]
 800f818:	4603      	mov	r3, r0
 800f81a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f81c:	7bfb      	ldrb	r3, [r7, #15]
 800f81e:	4a0a      	ldr	r2, [pc, #40]	; (800f848 <disk_read+0x3c>)
 800f820:	009b      	lsls	r3, r3, #2
 800f822:	4413      	add	r3, r2
 800f824:	685b      	ldr	r3, [r3, #4]
 800f826:	689c      	ldr	r4, [r3, #8]
 800f828:	7bfb      	ldrb	r3, [r7, #15]
 800f82a:	4a07      	ldr	r2, [pc, #28]	; (800f848 <disk_read+0x3c>)
 800f82c:	4413      	add	r3, r2
 800f82e:	7a18      	ldrb	r0, [r3, #8]
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	687a      	ldr	r2, [r7, #4]
 800f834:	68b9      	ldr	r1, [r7, #8]
 800f836:	47a0      	blx	r4
 800f838:	4603      	mov	r3, r0
 800f83a:	75fb      	strb	r3, [r7, #23]
  return res;
 800f83c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f83e:	4618      	mov	r0, r3
 800f840:	371c      	adds	r7, #28
 800f842:	46bd      	mov	sp, r7
 800f844:	bd90      	pop	{r4, r7, pc}
 800f846:	bf00      	nop
 800f848:	200007f0 	.word	0x200007f0

0800f84c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f84c:	b590      	push	{r4, r7, lr}
 800f84e:	b087      	sub	sp, #28
 800f850:	af00      	add	r7, sp, #0
 800f852:	60b9      	str	r1, [r7, #8]
 800f854:	607a      	str	r2, [r7, #4]
 800f856:	603b      	str	r3, [r7, #0]
 800f858:	4603      	mov	r3, r0
 800f85a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f85c:	7bfb      	ldrb	r3, [r7, #15]
 800f85e:	4a0a      	ldr	r2, [pc, #40]	; (800f888 <disk_write+0x3c>)
 800f860:	009b      	lsls	r3, r3, #2
 800f862:	4413      	add	r3, r2
 800f864:	685b      	ldr	r3, [r3, #4]
 800f866:	68dc      	ldr	r4, [r3, #12]
 800f868:	7bfb      	ldrb	r3, [r7, #15]
 800f86a:	4a07      	ldr	r2, [pc, #28]	; (800f888 <disk_write+0x3c>)
 800f86c:	4413      	add	r3, r2
 800f86e:	7a18      	ldrb	r0, [r3, #8]
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	687a      	ldr	r2, [r7, #4]
 800f874:	68b9      	ldr	r1, [r7, #8]
 800f876:	47a0      	blx	r4
 800f878:	4603      	mov	r3, r0
 800f87a:	75fb      	strb	r3, [r7, #23]
  return res;
 800f87c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f87e:	4618      	mov	r0, r3
 800f880:	371c      	adds	r7, #28
 800f882:	46bd      	mov	sp, r7
 800f884:	bd90      	pop	{r4, r7, pc}
 800f886:	bf00      	nop
 800f888:	200007f0 	.word	0x200007f0

0800f88c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b084      	sub	sp, #16
 800f890:	af00      	add	r7, sp, #0
 800f892:	4603      	mov	r3, r0
 800f894:	603a      	str	r2, [r7, #0]
 800f896:	71fb      	strb	r3, [r7, #7]
 800f898:	460b      	mov	r3, r1
 800f89a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f89c:	79fb      	ldrb	r3, [r7, #7]
 800f89e:	4a09      	ldr	r2, [pc, #36]	; (800f8c4 <disk_ioctl+0x38>)
 800f8a0:	009b      	lsls	r3, r3, #2
 800f8a2:	4413      	add	r3, r2
 800f8a4:	685b      	ldr	r3, [r3, #4]
 800f8a6:	691b      	ldr	r3, [r3, #16]
 800f8a8:	79fa      	ldrb	r2, [r7, #7]
 800f8aa:	4906      	ldr	r1, [pc, #24]	; (800f8c4 <disk_ioctl+0x38>)
 800f8ac:	440a      	add	r2, r1
 800f8ae:	7a10      	ldrb	r0, [r2, #8]
 800f8b0:	79b9      	ldrb	r1, [r7, #6]
 800f8b2:	683a      	ldr	r2, [r7, #0]
 800f8b4:	4798      	blx	r3
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	73fb      	strb	r3, [r7, #15]
  return res;
 800f8ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8bc:	4618      	mov	r0, r3
 800f8be:	3710      	adds	r7, #16
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}
 800f8c4:	200007f0 	.word	0x200007f0

0800f8c8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f8c8:	b480      	push	{r7}
 800f8ca:	b085      	sub	sp, #20
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	3301      	adds	r3, #1
 800f8d4:	781b      	ldrb	r3, [r3, #0]
 800f8d6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f8d8:	89fb      	ldrh	r3, [r7, #14]
 800f8da:	021b      	lsls	r3, r3, #8
 800f8dc:	b21a      	sxth	r2, r3
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	781b      	ldrb	r3, [r3, #0]
 800f8e2:	b21b      	sxth	r3, r3
 800f8e4:	4313      	orrs	r3, r2
 800f8e6:	b21b      	sxth	r3, r3
 800f8e8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f8ea:	89fb      	ldrh	r3, [r7, #14]
}
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	3714      	adds	r7, #20
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f6:	4770      	bx	lr

0800f8f8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f8f8:	b480      	push	{r7}
 800f8fa:	b085      	sub	sp, #20
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	3303      	adds	r3, #3
 800f904:	781b      	ldrb	r3, [r3, #0]
 800f906:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	021b      	lsls	r3, r3, #8
 800f90c:	687a      	ldr	r2, [r7, #4]
 800f90e:	3202      	adds	r2, #2
 800f910:	7812      	ldrb	r2, [r2, #0]
 800f912:	4313      	orrs	r3, r2
 800f914:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	021b      	lsls	r3, r3, #8
 800f91a:	687a      	ldr	r2, [r7, #4]
 800f91c:	3201      	adds	r2, #1
 800f91e:	7812      	ldrb	r2, [r2, #0]
 800f920:	4313      	orrs	r3, r2
 800f922:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	021b      	lsls	r3, r3, #8
 800f928:	687a      	ldr	r2, [r7, #4]
 800f92a:	7812      	ldrb	r2, [r2, #0]
 800f92c:	4313      	orrs	r3, r2
 800f92e:	60fb      	str	r3, [r7, #12]
	return rv;
 800f930:	68fb      	ldr	r3, [r7, #12]
}
 800f932:	4618      	mov	r0, r3
 800f934:	3714      	adds	r7, #20
 800f936:	46bd      	mov	sp, r7
 800f938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93c:	4770      	bx	lr

0800f93e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f93e:	b480      	push	{r7}
 800f940:	b083      	sub	sp, #12
 800f942:	af00      	add	r7, sp, #0
 800f944:	6078      	str	r0, [r7, #4]
 800f946:	460b      	mov	r3, r1
 800f948:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	1c5a      	adds	r2, r3, #1
 800f94e:	607a      	str	r2, [r7, #4]
 800f950:	887a      	ldrh	r2, [r7, #2]
 800f952:	b2d2      	uxtb	r2, r2
 800f954:	701a      	strb	r2, [r3, #0]
 800f956:	887b      	ldrh	r3, [r7, #2]
 800f958:	0a1b      	lsrs	r3, r3, #8
 800f95a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	1c5a      	adds	r2, r3, #1
 800f960:	607a      	str	r2, [r7, #4]
 800f962:	887a      	ldrh	r2, [r7, #2]
 800f964:	b2d2      	uxtb	r2, r2
 800f966:	701a      	strb	r2, [r3, #0]
}
 800f968:	bf00      	nop
 800f96a:	370c      	adds	r7, #12
 800f96c:	46bd      	mov	sp, r7
 800f96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f972:	4770      	bx	lr

0800f974 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f974:	b480      	push	{r7}
 800f976:	b083      	sub	sp, #12
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
 800f97c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	1c5a      	adds	r2, r3, #1
 800f982:	607a      	str	r2, [r7, #4]
 800f984:	683a      	ldr	r2, [r7, #0]
 800f986:	b2d2      	uxtb	r2, r2
 800f988:	701a      	strb	r2, [r3, #0]
 800f98a:	683b      	ldr	r3, [r7, #0]
 800f98c:	0a1b      	lsrs	r3, r3, #8
 800f98e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	1c5a      	adds	r2, r3, #1
 800f994:	607a      	str	r2, [r7, #4]
 800f996:	683a      	ldr	r2, [r7, #0]
 800f998:	b2d2      	uxtb	r2, r2
 800f99a:	701a      	strb	r2, [r3, #0]
 800f99c:	683b      	ldr	r3, [r7, #0]
 800f99e:	0a1b      	lsrs	r3, r3, #8
 800f9a0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	1c5a      	adds	r2, r3, #1
 800f9a6:	607a      	str	r2, [r7, #4]
 800f9a8:	683a      	ldr	r2, [r7, #0]
 800f9aa:	b2d2      	uxtb	r2, r2
 800f9ac:	701a      	strb	r2, [r3, #0]
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	0a1b      	lsrs	r3, r3, #8
 800f9b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	1c5a      	adds	r2, r3, #1
 800f9b8:	607a      	str	r2, [r7, #4]
 800f9ba:	683a      	ldr	r2, [r7, #0]
 800f9bc:	b2d2      	uxtb	r2, r2
 800f9be:	701a      	strb	r2, [r3, #0]
}
 800f9c0:	bf00      	nop
 800f9c2:	370c      	adds	r7, #12
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ca:	4770      	bx	lr

0800f9cc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f9cc:	b480      	push	{r7}
 800f9ce:	b087      	sub	sp, #28
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	60f8      	str	r0, [r7, #12]
 800f9d4:	60b9      	str	r1, [r7, #8]
 800f9d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f9dc:	68bb      	ldr	r3, [r7, #8]
 800f9de:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d00d      	beq.n	800fa02 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f9e6:	693a      	ldr	r2, [r7, #16]
 800f9e8:	1c53      	adds	r3, r2, #1
 800f9ea:	613b      	str	r3, [r7, #16]
 800f9ec:	697b      	ldr	r3, [r7, #20]
 800f9ee:	1c59      	adds	r1, r3, #1
 800f9f0:	6179      	str	r1, [r7, #20]
 800f9f2:	7812      	ldrb	r2, [r2, #0]
 800f9f4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	3b01      	subs	r3, #1
 800f9fa:	607b      	str	r3, [r7, #4]
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d1f1      	bne.n	800f9e6 <mem_cpy+0x1a>
	}
}
 800fa02:	bf00      	nop
 800fa04:	371c      	adds	r7, #28
 800fa06:	46bd      	mov	sp, r7
 800fa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0c:	4770      	bx	lr

0800fa0e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800fa0e:	b480      	push	{r7}
 800fa10:	b087      	sub	sp, #28
 800fa12:	af00      	add	r7, sp, #0
 800fa14:	60f8      	str	r0, [r7, #12]
 800fa16:	60b9      	str	r1, [r7, #8]
 800fa18:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800fa1e:	697b      	ldr	r3, [r7, #20]
 800fa20:	1c5a      	adds	r2, r3, #1
 800fa22:	617a      	str	r2, [r7, #20]
 800fa24:	68ba      	ldr	r2, [r7, #8]
 800fa26:	b2d2      	uxtb	r2, r2
 800fa28:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	3b01      	subs	r3, #1
 800fa2e:	607b      	str	r3, [r7, #4]
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d1f3      	bne.n	800fa1e <mem_set+0x10>
}
 800fa36:	bf00      	nop
 800fa38:	bf00      	nop
 800fa3a:	371c      	adds	r7, #28
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa42:	4770      	bx	lr

0800fa44 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800fa44:	b480      	push	{r7}
 800fa46:	b089      	sub	sp, #36	; 0x24
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	60f8      	str	r0, [r7, #12]
 800fa4c:	60b9      	str	r1, [r7, #8]
 800fa4e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	61fb      	str	r3, [r7, #28]
 800fa54:	68bb      	ldr	r3, [r7, #8]
 800fa56:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800fa58:	2300      	movs	r3, #0
 800fa5a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800fa5c:	69fb      	ldr	r3, [r7, #28]
 800fa5e:	1c5a      	adds	r2, r3, #1
 800fa60:	61fa      	str	r2, [r7, #28]
 800fa62:	781b      	ldrb	r3, [r3, #0]
 800fa64:	4619      	mov	r1, r3
 800fa66:	69bb      	ldr	r3, [r7, #24]
 800fa68:	1c5a      	adds	r2, r3, #1
 800fa6a:	61ba      	str	r2, [r7, #24]
 800fa6c:	781b      	ldrb	r3, [r3, #0]
 800fa6e:	1acb      	subs	r3, r1, r3
 800fa70:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	3b01      	subs	r3, #1
 800fa76:	607b      	str	r3, [r7, #4]
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d002      	beq.n	800fa84 <mem_cmp+0x40>
 800fa7e:	697b      	ldr	r3, [r7, #20]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d0eb      	beq.n	800fa5c <mem_cmp+0x18>

	return r;
 800fa84:	697b      	ldr	r3, [r7, #20]
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	3724      	adds	r7, #36	; 0x24
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa90:	4770      	bx	lr

0800fa92 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800fa92:	b480      	push	{r7}
 800fa94:	b083      	sub	sp, #12
 800fa96:	af00      	add	r7, sp, #0
 800fa98:	6078      	str	r0, [r7, #4]
 800fa9a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800fa9c:	e002      	b.n	800faa4 <chk_chr+0x12>
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	3301      	adds	r3, #1
 800faa2:	607b      	str	r3, [r7, #4]
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	781b      	ldrb	r3, [r3, #0]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d005      	beq.n	800fab8 <chk_chr+0x26>
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	781b      	ldrb	r3, [r3, #0]
 800fab0:	461a      	mov	r2, r3
 800fab2:	683b      	ldr	r3, [r7, #0]
 800fab4:	4293      	cmp	r3, r2
 800fab6:	d1f2      	bne.n	800fa9e <chk_chr+0xc>
	return *str;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	781b      	ldrb	r3, [r3, #0]
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	370c      	adds	r7, #12
 800fac0:	46bd      	mov	sp, r7
 800fac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac6:	4770      	bx	lr

0800fac8 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b082      	sub	sp, #8
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d009      	beq.n	800faea <lock_fs+0x22>
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	68db      	ldr	r3, [r3, #12]
 800fada:	4618      	mov	r0, r3
 800fadc:	f002 fcde 	bl	801249c <ff_req_grant>
 800fae0:	4603      	mov	r3, r0
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d001      	beq.n	800faea <lock_fs+0x22>
 800fae6:	2301      	movs	r3, #1
 800fae8:	e000      	b.n	800faec <lock_fs+0x24>
 800faea:	2300      	movs	r3, #0
}
 800faec:	4618      	mov	r0, r3
 800faee:	3708      	adds	r7, #8
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}

0800faf4 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b082      	sub	sp, #8
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
 800fafc:	460b      	mov	r3, r1
 800fafe:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d00d      	beq.n	800fb22 <unlock_fs+0x2e>
 800fb06:	78fb      	ldrb	r3, [r7, #3]
 800fb08:	2b0c      	cmp	r3, #12
 800fb0a:	d00a      	beq.n	800fb22 <unlock_fs+0x2e>
 800fb0c:	78fb      	ldrb	r3, [r7, #3]
 800fb0e:	2b0b      	cmp	r3, #11
 800fb10:	d007      	beq.n	800fb22 <unlock_fs+0x2e>
 800fb12:	78fb      	ldrb	r3, [r7, #3]
 800fb14:	2b0f      	cmp	r3, #15
 800fb16:	d004      	beq.n	800fb22 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	68db      	ldr	r3, [r3, #12]
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f002 fcd2 	bl	80124c6 <ff_rel_grant>
	}
}
 800fb22:	bf00      	nop
 800fb24:	3708      	adds	r7, #8
 800fb26:	46bd      	mov	sp, r7
 800fb28:	bd80      	pop	{r7, pc}
	...

0800fb2c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fb2c:	b480      	push	{r7}
 800fb2e:	b085      	sub	sp, #20
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
 800fb34:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fb36:	2300      	movs	r3, #0
 800fb38:	60bb      	str	r3, [r7, #8]
 800fb3a:	68bb      	ldr	r3, [r7, #8]
 800fb3c:	60fb      	str	r3, [r7, #12]
 800fb3e:	e029      	b.n	800fb94 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800fb40:	4a27      	ldr	r2, [pc, #156]	; (800fbe0 <chk_lock+0xb4>)
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	011b      	lsls	r3, r3, #4
 800fb46:	4413      	add	r3, r2
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d01d      	beq.n	800fb8a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fb4e:	4a24      	ldr	r2, [pc, #144]	; (800fbe0 <chk_lock+0xb4>)
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	011b      	lsls	r3, r3, #4
 800fb54:	4413      	add	r3, r2
 800fb56:	681a      	ldr	r2, [r3, #0]
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	d116      	bne.n	800fb8e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800fb60:	4a1f      	ldr	r2, [pc, #124]	; (800fbe0 <chk_lock+0xb4>)
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	011b      	lsls	r3, r3, #4
 800fb66:	4413      	add	r3, r2
 800fb68:	3304      	adds	r3, #4
 800fb6a:	681a      	ldr	r2, [r3, #0]
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fb70:	429a      	cmp	r2, r3
 800fb72:	d10c      	bne.n	800fb8e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fb74:	4a1a      	ldr	r2, [pc, #104]	; (800fbe0 <chk_lock+0xb4>)
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	011b      	lsls	r3, r3, #4
 800fb7a:	4413      	add	r3, r2
 800fb7c:	3308      	adds	r3, #8
 800fb7e:	681a      	ldr	r2, [r3, #0]
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800fb84:	429a      	cmp	r2, r3
 800fb86:	d102      	bne.n	800fb8e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fb88:	e007      	b.n	800fb9a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800fb8a:	2301      	movs	r3, #1
 800fb8c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	3301      	adds	r3, #1
 800fb92:	60fb      	str	r3, [r7, #12]
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	2b01      	cmp	r3, #1
 800fb98:	d9d2      	bls.n	800fb40 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	2b02      	cmp	r3, #2
 800fb9e:	d109      	bne.n	800fbb4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d102      	bne.n	800fbac <chk_lock+0x80>
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	2b02      	cmp	r3, #2
 800fbaa:	d101      	bne.n	800fbb0 <chk_lock+0x84>
 800fbac:	2300      	movs	r3, #0
 800fbae:	e010      	b.n	800fbd2 <chk_lock+0xa6>
 800fbb0:	2312      	movs	r3, #18
 800fbb2:	e00e      	b.n	800fbd2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d108      	bne.n	800fbcc <chk_lock+0xa0>
 800fbba:	4a09      	ldr	r2, [pc, #36]	; (800fbe0 <chk_lock+0xb4>)
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	011b      	lsls	r3, r3, #4
 800fbc0:	4413      	add	r3, r2
 800fbc2:	330c      	adds	r3, #12
 800fbc4:	881b      	ldrh	r3, [r3, #0]
 800fbc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fbca:	d101      	bne.n	800fbd0 <chk_lock+0xa4>
 800fbcc:	2310      	movs	r3, #16
 800fbce:	e000      	b.n	800fbd2 <chk_lock+0xa6>
 800fbd0:	2300      	movs	r3, #0
}
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	3714      	adds	r7, #20
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbdc:	4770      	bx	lr
 800fbde:	bf00      	nop
 800fbe0:	200007d0 	.word	0x200007d0

0800fbe4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800fbe4:	b480      	push	{r7}
 800fbe6:	b083      	sub	sp, #12
 800fbe8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fbea:	2300      	movs	r3, #0
 800fbec:	607b      	str	r3, [r7, #4]
 800fbee:	e002      	b.n	800fbf6 <enq_lock+0x12>
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	3301      	adds	r3, #1
 800fbf4:	607b      	str	r3, [r7, #4]
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2b01      	cmp	r3, #1
 800fbfa:	d806      	bhi.n	800fc0a <enq_lock+0x26>
 800fbfc:	4a09      	ldr	r2, [pc, #36]	; (800fc24 <enq_lock+0x40>)
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	011b      	lsls	r3, r3, #4
 800fc02:	4413      	add	r3, r2
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d1f2      	bne.n	800fbf0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	2b02      	cmp	r3, #2
 800fc0e:	bf14      	ite	ne
 800fc10:	2301      	movne	r3, #1
 800fc12:	2300      	moveq	r3, #0
 800fc14:	b2db      	uxtb	r3, r3
}
 800fc16:	4618      	mov	r0, r3
 800fc18:	370c      	adds	r7, #12
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc20:	4770      	bx	lr
 800fc22:	bf00      	nop
 800fc24:	200007d0 	.word	0x200007d0

0800fc28 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fc28:	b480      	push	{r7}
 800fc2a:	b085      	sub	sp, #20
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
 800fc30:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fc32:	2300      	movs	r3, #0
 800fc34:	60fb      	str	r3, [r7, #12]
 800fc36:	e01f      	b.n	800fc78 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800fc38:	4a41      	ldr	r2, [pc, #260]	; (800fd40 <inc_lock+0x118>)
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	011b      	lsls	r3, r3, #4
 800fc3e:	4413      	add	r3, r2
 800fc40:	681a      	ldr	r2, [r3, #0]
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	429a      	cmp	r2, r3
 800fc48:	d113      	bne.n	800fc72 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800fc4a:	4a3d      	ldr	r2, [pc, #244]	; (800fd40 <inc_lock+0x118>)
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	011b      	lsls	r3, r3, #4
 800fc50:	4413      	add	r3, r2
 800fc52:	3304      	adds	r3, #4
 800fc54:	681a      	ldr	r2, [r3, #0]
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	d109      	bne.n	800fc72 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800fc5e:	4a38      	ldr	r2, [pc, #224]	; (800fd40 <inc_lock+0x118>)
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	011b      	lsls	r3, r3, #4
 800fc64:	4413      	add	r3, r2
 800fc66:	3308      	adds	r3, #8
 800fc68:	681a      	ldr	r2, [r3, #0]
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800fc6e:	429a      	cmp	r2, r3
 800fc70:	d006      	beq.n	800fc80 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	3301      	adds	r3, #1
 800fc76:	60fb      	str	r3, [r7, #12]
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	2b01      	cmp	r3, #1
 800fc7c:	d9dc      	bls.n	800fc38 <inc_lock+0x10>
 800fc7e:	e000      	b.n	800fc82 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800fc80:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	2b02      	cmp	r3, #2
 800fc86:	d132      	bne.n	800fcee <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fc88:	2300      	movs	r3, #0
 800fc8a:	60fb      	str	r3, [r7, #12]
 800fc8c:	e002      	b.n	800fc94 <inc_lock+0x6c>
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	3301      	adds	r3, #1
 800fc92:	60fb      	str	r3, [r7, #12]
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	2b01      	cmp	r3, #1
 800fc98:	d806      	bhi.n	800fca8 <inc_lock+0x80>
 800fc9a:	4a29      	ldr	r2, [pc, #164]	; (800fd40 <inc_lock+0x118>)
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	011b      	lsls	r3, r3, #4
 800fca0:	4413      	add	r3, r2
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d1f2      	bne.n	800fc8e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	2b02      	cmp	r3, #2
 800fcac:	d101      	bne.n	800fcb2 <inc_lock+0x8a>
 800fcae:	2300      	movs	r3, #0
 800fcb0:	e040      	b.n	800fd34 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	681a      	ldr	r2, [r3, #0]
 800fcb6:	4922      	ldr	r1, [pc, #136]	; (800fd40 <inc_lock+0x118>)
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	011b      	lsls	r3, r3, #4
 800fcbc:	440b      	add	r3, r1
 800fcbe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	689a      	ldr	r2, [r3, #8]
 800fcc4:	491e      	ldr	r1, [pc, #120]	; (800fd40 <inc_lock+0x118>)
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	011b      	lsls	r3, r3, #4
 800fcca:	440b      	add	r3, r1
 800fccc:	3304      	adds	r3, #4
 800fcce:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	695a      	ldr	r2, [r3, #20]
 800fcd4:	491a      	ldr	r1, [pc, #104]	; (800fd40 <inc_lock+0x118>)
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	011b      	lsls	r3, r3, #4
 800fcda:	440b      	add	r3, r1
 800fcdc:	3308      	adds	r3, #8
 800fcde:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800fce0:	4a17      	ldr	r2, [pc, #92]	; (800fd40 <inc_lock+0x118>)
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	011b      	lsls	r3, r3, #4
 800fce6:	4413      	add	r3, r2
 800fce8:	330c      	adds	r3, #12
 800fcea:	2200      	movs	r2, #0
 800fcec:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d009      	beq.n	800fd08 <inc_lock+0xe0>
 800fcf4:	4a12      	ldr	r2, [pc, #72]	; (800fd40 <inc_lock+0x118>)
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	011b      	lsls	r3, r3, #4
 800fcfa:	4413      	add	r3, r2
 800fcfc:	330c      	adds	r3, #12
 800fcfe:	881b      	ldrh	r3, [r3, #0]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d001      	beq.n	800fd08 <inc_lock+0xe0>
 800fd04:	2300      	movs	r3, #0
 800fd06:	e015      	b.n	800fd34 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800fd08:	683b      	ldr	r3, [r7, #0]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d108      	bne.n	800fd20 <inc_lock+0xf8>
 800fd0e:	4a0c      	ldr	r2, [pc, #48]	; (800fd40 <inc_lock+0x118>)
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	011b      	lsls	r3, r3, #4
 800fd14:	4413      	add	r3, r2
 800fd16:	330c      	adds	r3, #12
 800fd18:	881b      	ldrh	r3, [r3, #0]
 800fd1a:	3301      	adds	r3, #1
 800fd1c:	b29a      	uxth	r2, r3
 800fd1e:	e001      	b.n	800fd24 <inc_lock+0xfc>
 800fd20:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fd24:	4906      	ldr	r1, [pc, #24]	; (800fd40 <inc_lock+0x118>)
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	011b      	lsls	r3, r3, #4
 800fd2a:	440b      	add	r3, r1
 800fd2c:	330c      	adds	r3, #12
 800fd2e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	3301      	adds	r3, #1
}
 800fd34:	4618      	mov	r0, r3
 800fd36:	3714      	adds	r7, #20
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3e:	4770      	bx	lr
 800fd40:	200007d0 	.word	0x200007d0

0800fd44 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800fd44:	b480      	push	{r7}
 800fd46:	b085      	sub	sp, #20
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	3b01      	subs	r3, #1
 800fd50:	607b      	str	r3, [r7, #4]
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	2b01      	cmp	r3, #1
 800fd56:	d825      	bhi.n	800fda4 <dec_lock+0x60>
		n = Files[i].ctr;
 800fd58:	4a17      	ldr	r2, [pc, #92]	; (800fdb8 <dec_lock+0x74>)
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	011b      	lsls	r3, r3, #4
 800fd5e:	4413      	add	r3, r2
 800fd60:	330c      	adds	r3, #12
 800fd62:	881b      	ldrh	r3, [r3, #0]
 800fd64:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800fd66:	89fb      	ldrh	r3, [r7, #14]
 800fd68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd6c:	d101      	bne.n	800fd72 <dec_lock+0x2e>
 800fd6e:	2300      	movs	r3, #0
 800fd70:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800fd72:	89fb      	ldrh	r3, [r7, #14]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d002      	beq.n	800fd7e <dec_lock+0x3a>
 800fd78:	89fb      	ldrh	r3, [r7, #14]
 800fd7a:	3b01      	subs	r3, #1
 800fd7c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800fd7e:	4a0e      	ldr	r2, [pc, #56]	; (800fdb8 <dec_lock+0x74>)
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	011b      	lsls	r3, r3, #4
 800fd84:	4413      	add	r3, r2
 800fd86:	330c      	adds	r3, #12
 800fd88:	89fa      	ldrh	r2, [r7, #14]
 800fd8a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800fd8c:	89fb      	ldrh	r3, [r7, #14]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d105      	bne.n	800fd9e <dec_lock+0x5a>
 800fd92:	4a09      	ldr	r2, [pc, #36]	; (800fdb8 <dec_lock+0x74>)
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	011b      	lsls	r3, r3, #4
 800fd98:	4413      	add	r3, r2
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	737b      	strb	r3, [r7, #13]
 800fda2:	e001      	b.n	800fda8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800fda4:	2302      	movs	r3, #2
 800fda6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800fda8:	7b7b      	ldrb	r3, [r7, #13]
}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	3714      	adds	r7, #20
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb4:	4770      	bx	lr
 800fdb6:	bf00      	nop
 800fdb8:	200007d0 	.word	0x200007d0

0800fdbc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800fdbc:	b480      	push	{r7}
 800fdbe:	b085      	sub	sp, #20
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	60fb      	str	r3, [r7, #12]
 800fdc8:	e010      	b.n	800fdec <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fdca:	4a0d      	ldr	r2, [pc, #52]	; (800fe00 <clear_lock+0x44>)
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	011b      	lsls	r3, r3, #4
 800fdd0:	4413      	add	r3, r2
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	687a      	ldr	r2, [r7, #4]
 800fdd6:	429a      	cmp	r2, r3
 800fdd8:	d105      	bne.n	800fde6 <clear_lock+0x2a>
 800fdda:	4a09      	ldr	r2, [pc, #36]	; (800fe00 <clear_lock+0x44>)
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	011b      	lsls	r3, r3, #4
 800fde0:	4413      	add	r3, r2
 800fde2:	2200      	movs	r2, #0
 800fde4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	3301      	adds	r3, #1
 800fdea:	60fb      	str	r3, [r7, #12]
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	2b01      	cmp	r3, #1
 800fdf0:	d9eb      	bls.n	800fdca <clear_lock+0xe>
	}
}
 800fdf2:	bf00      	nop
 800fdf4:	bf00      	nop
 800fdf6:	3714      	adds	r7, #20
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfe:	4770      	bx	lr
 800fe00:	200007d0 	.word	0x200007d0

0800fe04 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b086      	sub	sp, #24
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	78db      	ldrb	r3, [r3, #3]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d034      	beq.n	800fe82 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe1c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	7858      	ldrb	r0, [r3, #1]
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fe28:	2301      	movs	r3, #1
 800fe2a:	697a      	ldr	r2, [r7, #20]
 800fe2c:	f7ff fd0e 	bl	800f84c <disk_write>
 800fe30:	4603      	mov	r3, r0
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d002      	beq.n	800fe3c <sync_window+0x38>
			res = FR_DISK_ERR;
 800fe36:	2301      	movs	r3, #1
 800fe38:	73fb      	strb	r3, [r7, #15]
 800fe3a:	e022      	b.n	800fe82 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2200      	movs	r2, #0
 800fe40:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe46:	697a      	ldr	r2, [r7, #20]
 800fe48:	1ad2      	subs	r2, r2, r3
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	69db      	ldr	r3, [r3, #28]
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	d217      	bcs.n	800fe82 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	789b      	ldrb	r3, [r3, #2]
 800fe56:	613b      	str	r3, [r7, #16]
 800fe58:	e010      	b.n	800fe7c <sync_window+0x78>
					wsect += fs->fsize;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	69db      	ldr	r3, [r3, #28]
 800fe5e:	697a      	ldr	r2, [r7, #20]
 800fe60:	4413      	add	r3, r2
 800fe62:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	7858      	ldrb	r0, [r3, #1]
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fe6e:	2301      	movs	r3, #1
 800fe70:	697a      	ldr	r2, [r7, #20]
 800fe72:	f7ff fceb 	bl	800f84c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fe76:	693b      	ldr	r3, [r7, #16]
 800fe78:	3b01      	subs	r3, #1
 800fe7a:	613b      	str	r3, [r7, #16]
 800fe7c:	693b      	ldr	r3, [r7, #16]
 800fe7e:	2b01      	cmp	r3, #1
 800fe80:	d8eb      	bhi.n	800fe5a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800fe82:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe84:	4618      	mov	r0, r3
 800fe86:	3718      	adds	r7, #24
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	bd80      	pop	{r7, pc}

0800fe8c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b084      	sub	sp, #16
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
 800fe94:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800fe96:	2300      	movs	r3, #0
 800fe98:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe9e:	683a      	ldr	r2, [r7, #0]
 800fea0:	429a      	cmp	r2, r3
 800fea2:	d01b      	beq.n	800fedc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	f7ff ffad 	bl	800fe04 <sync_window>
 800feaa:	4603      	mov	r3, r0
 800feac:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800feae:	7bfb      	ldrb	r3, [r7, #15]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d113      	bne.n	800fedc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	7858      	ldrb	r0, [r3, #1]
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800febe:	2301      	movs	r3, #1
 800fec0:	683a      	ldr	r2, [r7, #0]
 800fec2:	f7ff fca3 	bl	800f80c <disk_read>
 800fec6:	4603      	mov	r3, r0
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d004      	beq.n	800fed6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800fecc:	f04f 33ff 	mov.w	r3, #4294967295
 800fed0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800fed2:	2301      	movs	r3, #1
 800fed4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	683a      	ldr	r2, [r7, #0]
 800feda:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800fedc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fede:	4618      	mov	r0, r3
 800fee0:	3710      	adds	r7, #16
 800fee2:	46bd      	mov	sp, r7
 800fee4:	bd80      	pop	{r7, pc}
	...

0800fee8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b084      	sub	sp, #16
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800fef0:	6878      	ldr	r0, [r7, #4]
 800fef2:	f7ff ff87 	bl	800fe04 <sync_window>
 800fef6:	4603      	mov	r3, r0
 800fef8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fefa:	7bfb      	ldrb	r3, [r7, #15]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d158      	bne.n	800ffb2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	781b      	ldrb	r3, [r3, #0]
 800ff04:	2b03      	cmp	r3, #3
 800ff06:	d148      	bne.n	800ff9a <sync_fs+0xb2>
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	791b      	ldrb	r3, [r3, #4]
 800ff0c:	2b01      	cmp	r3, #1
 800ff0e:	d144      	bne.n	800ff9a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	3334      	adds	r3, #52	; 0x34
 800ff14:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ff18:	2100      	movs	r1, #0
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f7ff fd77 	bl	800fa0e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	3334      	adds	r3, #52	; 0x34
 800ff24:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ff28:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	f7ff fd06 	bl	800f93e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	3334      	adds	r3, #52	; 0x34
 800ff36:	4921      	ldr	r1, [pc, #132]	; (800ffbc <sync_fs+0xd4>)
 800ff38:	4618      	mov	r0, r3
 800ff3a:	f7ff fd1b 	bl	800f974 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	3334      	adds	r3, #52	; 0x34
 800ff42:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ff46:	491e      	ldr	r1, [pc, #120]	; (800ffc0 <sync_fs+0xd8>)
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f7ff fd13 	bl	800f974 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	3334      	adds	r3, #52	; 0x34
 800ff52:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	695b      	ldr	r3, [r3, #20]
 800ff5a:	4619      	mov	r1, r3
 800ff5c:	4610      	mov	r0, r2
 800ff5e:	f7ff fd09 	bl	800f974 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	3334      	adds	r3, #52	; 0x34
 800ff66:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	691b      	ldr	r3, [r3, #16]
 800ff6e:	4619      	mov	r1, r3
 800ff70:	4610      	mov	r0, r2
 800ff72:	f7ff fcff 	bl	800f974 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	6a1b      	ldr	r3, [r3, #32]
 800ff7a:	1c5a      	adds	r2, r3, #1
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	7858      	ldrb	r0, [r3, #1]
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ff8e:	2301      	movs	r3, #1
 800ff90:	f7ff fc5c 	bl	800f84c <disk_write>
			fs->fsi_flag = 0;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2200      	movs	r2, #0
 800ff98:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	785b      	ldrb	r3, [r3, #1]
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	2100      	movs	r1, #0
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7ff fc72 	bl	800f88c <disk_ioctl>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d001      	beq.n	800ffb2 <sync_fs+0xca>
 800ffae:	2301      	movs	r3, #1
 800ffb0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ffb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	3710      	adds	r7, #16
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bd80      	pop	{r7, pc}
 800ffbc:	41615252 	.word	0x41615252
 800ffc0:	61417272 	.word	0x61417272

0800ffc4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ffc4:	b480      	push	{r7}
 800ffc6:	b083      	sub	sp, #12
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
 800ffcc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ffce:	683b      	ldr	r3, [r7, #0]
 800ffd0:	3b02      	subs	r3, #2
 800ffd2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	699b      	ldr	r3, [r3, #24]
 800ffd8:	3b02      	subs	r3, #2
 800ffda:	683a      	ldr	r2, [r7, #0]
 800ffdc:	429a      	cmp	r2, r3
 800ffde:	d301      	bcc.n	800ffe4 <clust2sect+0x20>
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	e008      	b.n	800fff6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	895b      	ldrh	r3, [r3, #10]
 800ffe8:	461a      	mov	r2, r3
 800ffea:	683b      	ldr	r3, [r7, #0]
 800ffec:	fb03 f202 	mul.w	r2, r3, r2
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fff4:	4413      	add	r3, r2
}
 800fff6:	4618      	mov	r0, r3
 800fff8:	370c      	adds	r7, #12
 800fffa:	46bd      	mov	sp, r7
 800fffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010000:	4770      	bx	lr

08010002 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010002:	b580      	push	{r7, lr}
 8010004:	b086      	sub	sp, #24
 8010006:	af00      	add	r7, sp, #0
 8010008:	6078      	str	r0, [r7, #4]
 801000a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	2b01      	cmp	r3, #1
 8010016:	d904      	bls.n	8010022 <get_fat+0x20>
 8010018:	693b      	ldr	r3, [r7, #16]
 801001a:	699b      	ldr	r3, [r3, #24]
 801001c:	683a      	ldr	r2, [r7, #0]
 801001e:	429a      	cmp	r2, r3
 8010020:	d302      	bcc.n	8010028 <get_fat+0x26>
		val = 1;	/* Internal error */
 8010022:	2301      	movs	r3, #1
 8010024:	617b      	str	r3, [r7, #20]
 8010026:	e08f      	b.n	8010148 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010028:	f04f 33ff 	mov.w	r3, #4294967295
 801002c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801002e:	693b      	ldr	r3, [r7, #16]
 8010030:	781b      	ldrb	r3, [r3, #0]
 8010032:	2b03      	cmp	r3, #3
 8010034:	d062      	beq.n	80100fc <get_fat+0xfa>
 8010036:	2b03      	cmp	r3, #3
 8010038:	dc7c      	bgt.n	8010134 <get_fat+0x132>
 801003a:	2b01      	cmp	r3, #1
 801003c:	d002      	beq.n	8010044 <get_fat+0x42>
 801003e:	2b02      	cmp	r3, #2
 8010040:	d042      	beq.n	80100c8 <get_fat+0xc6>
 8010042:	e077      	b.n	8010134 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010044:	683b      	ldr	r3, [r7, #0]
 8010046:	60fb      	str	r3, [r7, #12]
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	085b      	lsrs	r3, r3, #1
 801004c:	68fa      	ldr	r2, [r7, #12]
 801004e:	4413      	add	r3, r2
 8010050:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010052:	693b      	ldr	r3, [r7, #16]
 8010054:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	0a5b      	lsrs	r3, r3, #9
 801005a:	4413      	add	r3, r2
 801005c:	4619      	mov	r1, r3
 801005e:	6938      	ldr	r0, [r7, #16]
 8010060:	f7ff ff14 	bl	800fe8c <move_window>
 8010064:	4603      	mov	r3, r0
 8010066:	2b00      	cmp	r3, #0
 8010068:	d167      	bne.n	801013a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	1c5a      	adds	r2, r3, #1
 801006e:	60fa      	str	r2, [r7, #12]
 8010070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010074:	693a      	ldr	r2, [r7, #16]
 8010076:	4413      	add	r3, r2
 8010078:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801007c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801007e:	693b      	ldr	r3, [r7, #16]
 8010080:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	0a5b      	lsrs	r3, r3, #9
 8010086:	4413      	add	r3, r2
 8010088:	4619      	mov	r1, r3
 801008a:	6938      	ldr	r0, [r7, #16]
 801008c:	f7ff fefe 	bl	800fe8c <move_window>
 8010090:	4603      	mov	r3, r0
 8010092:	2b00      	cmp	r3, #0
 8010094:	d153      	bne.n	801013e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801009c:	693a      	ldr	r2, [r7, #16]
 801009e:	4413      	add	r3, r2
 80100a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80100a4:	021b      	lsls	r3, r3, #8
 80100a6:	461a      	mov	r2, r3
 80100a8:	68bb      	ldr	r3, [r7, #8]
 80100aa:	4313      	orrs	r3, r2
 80100ac:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	f003 0301 	and.w	r3, r3, #1
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d002      	beq.n	80100be <get_fat+0xbc>
 80100b8:	68bb      	ldr	r3, [r7, #8]
 80100ba:	091b      	lsrs	r3, r3, #4
 80100bc:	e002      	b.n	80100c4 <get_fat+0xc2>
 80100be:	68bb      	ldr	r3, [r7, #8]
 80100c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80100c4:	617b      	str	r3, [r7, #20]
			break;
 80100c6:	e03f      	b.n	8010148 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80100c8:	693b      	ldr	r3, [r7, #16]
 80100ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	0a1b      	lsrs	r3, r3, #8
 80100d0:	4413      	add	r3, r2
 80100d2:	4619      	mov	r1, r3
 80100d4:	6938      	ldr	r0, [r7, #16]
 80100d6:	f7ff fed9 	bl	800fe8c <move_window>
 80100da:	4603      	mov	r3, r0
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d130      	bne.n	8010142 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80100e0:	693b      	ldr	r3, [r7, #16]
 80100e2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	005b      	lsls	r3, r3, #1
 80100ea:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80100ee:	4413      	add	r3, r2
 80100f0:	4618      	mov	r0, r3
 80100f2:	f7ff fbe9 	bl	800f8c8 <ld_word>
 80100f6:	4603      	mov	r3, r0
 80100f8:	617b      	str	r3, [r7, #20]
			break;
 80100fa:	e025      	b.n	8010148 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80100fc:	693b      	ldr	r3, [r7, #16]
 80100fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	09db      	lsrs	r3, r3, #7
 8010104:	4413      	add	r3, r2
 8010106:	4619      	mov	r1, r3
 8010108:	6938      	ldr	r0, [r7, #16]
 801010a:	f7ff febf 	bl	800fe8c <move_window>
 801010e:	4603      	mov	r3, r0
 8010110:	2b00      	cmp	r3, #0
 8010112:	d118      	bne.n	8010146 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010114:	693b      	ldr	r3, [r7, #16]
 8010116:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	009b      	lsls	r3, r3, #2
 801011e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010122:	4413      	add	r3, r2
 8010124:	4618      	mov	r0, r3
 8010126:	f7ff fbe7 	bl	800f8f8 <ld_dword>
 801012a:	4603      	mov	r3, r0
 801012c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010130:	617b      	str	r3, [r7, #20]
			break;
 8010132:	e009      	b.n	8010148 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010134:	2301      	movs	r3, #1
 8010136:	617b      	str	r3, [r7, #20]
 8010138:	e006      	b.n	8010148 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801013a:	bf00      	nop
 801013c:	e004      	b.n	8010148 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801013e:	bf00      	nop
 8010140:	e002      	b.n	8010148 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010142:	bf00      	nop
 8010144:	e000      	b.n	8010148 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010146:	bf00      	nop
		}
	}

	return val;
 8010148:	697b      	ldr	r3, [r7, #20]
}
 801014a:	4618      	mov	r0, r3
 801014c:	3718      	adds	r7, #24
 801014e:	46bd      	mov	sp, r7
 8010150:	bd80      	pop	{r7, pc}

08010152 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010152:	b590      	push	{r4, r7, lr}
 8010154:	b089      	sub	sp, #36	; 0x24
 8010156:	af00      	add	r7, sp, #0
 8010158:	60f8      	str	r0, [r7, #12]
 801015a:	60b9      	str	r1, [r7, #8]
 801015c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801015e:	2302      	movs	r3, #2
 8010160:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010162:	68bb      	ldr	r3, [r7, #8]
 8010164:	2b01      	cmp	r3, #1
 8010166:	f240 80d2 	bls.w	801030e <put_fat+0x1bc>
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	699b      	ldr	r3, [r3, #24]
 801016e:	68ba      	ldr	r2, [r7, #8]
 8010170:	429a      	cmp	r2, r3
 8010172:	f080 80cc 	bcs.w	801030e <put_fat+0x1bc>
		switch (fs->fs_type) {
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	781b      	ldrb	r3, [r3, #0]
 801017a:	2b03      	cmp	r3, #3
 801017c:	f000 8096 	beq.w	80102ac <put_fat+0x15a>
 8010180:	2b03      	cmp	r3, #3
 8010182:	f300 80cd 	bgt.w	8010320 <put_fat+0x1ce>
 8010186:	2b01      	cmp	r3, #1
 8010188:	d002      	beq.n	8010190 <put_fat+0x3e>
 801018a:	2b02      	cmp	r3, #2
 801018c:	d06e      	beq.n	801026c <put_fat+0x11a>
 801018e:	e0c7      	b.n	8010320 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	61bb      	str	r3, [r7, #24]
 8010194:	69bb      	ldr	r3, [r7, #24]
 8010196:	085b      	lsrs	r3, r3, #1
 8010198:	69ba      	ldr	r2, [r7, #24]
 801019a:	4413      	add	r3, r2
 801019c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80101a2:	69bb      	ldr	r3, [r7, #24]
 80101a4:	0a5b      	lsrs	r3, r3, #9
 80101a6:	4413      	add	r3, r2
 80101a8:	4619      	mov	r1, r3
 80101aa:	68f8      	ldr	r0, [r7, #12]
 80101ac:	f7ff fe6e 	bl	800fe8c <move_window>
 80101b0:	4603      	mov	r3, r0
 80101b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80101b4:	7ffb      	ldrb	r3, [r7, #31]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	f040 80ab 	bne.w	8010312 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80101c2:	69bb      	ldr	r3, [r7, #24]
 80101c4:	1c59      	adds	r1, r3, #1
 80101c6:	61b9      	str	r1, [r7, #24]
 80101c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101cc:	4413      	add	r3, r2
 80101ce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80101d0:	68bb      	ldr	r3, [r7, #8]
 80101d2:	f003 0301 	and.w	r3, r3, #1
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d00d      	beq.n	80101f6 <put_fat+0xa4>
 80101da:	697b      	ldr	r3, [r7, #20]
 80101dc:	781b      	ldrb	r3, [r3, #0]
 80101de:	b25b      	sxtb	r3, r3
 80101e0:	f003 030f 	and.w	r3, r3, #15
 80101e4:	b25a      	sxtb	r2, r3
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	b2db      	uxtb	r3, r3
 80101ea:	011b      	lsls	r3, r3, #4
 80101ec:	b25b      	sxtb	r3, r3
 80101ee:	4313      	orrs	r3, r2
 80101f0:	b25b      	sxtb	r3, r3
 80101f2:	b2db      	uxtb	r3, r3
 80101f4:	e001      	b.n	80101fa <put_fat+0xa8>
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	b2db      	uxtb	r3, r3
 80101fa:	697a      	ldr	r2, [r7, #20]
 80101fc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	2201      	movs	r2, #1
 8010202:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010208:	69bb      	ldr	r3, [r7, #24]
 801020a:	0a5b      	lsrs	r3, r3, #9
 801020c:	4413      	add	r3, r2
 801020e:	4619      	mov	r1, r3
 8010210:	68f8      	ldr	r0, [r7, #12]
 8010212:	f7ff fe3b 	bl	800fe8c <move_window>
 8010216:	4603      	mov	r3, r0
 8010218:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801021a:	7ffb      	ldrb	r3, [r7, #31]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d17a      	bne.n	8010316 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010226:	69bb      	ldr	r3, [r7, #24]
 8010228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801022c:	4413      	add	r3, r2
 801022e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010230:	68bb      	ldr	r3, [r7, #8]
 8010232:	f003 0301 	and.w	r3, r3, #1
 8010236:	2b00      	cmp	r3, #0
 8010238:	d003      	beq.n	8010242 <put_fat+0xf0>
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	091b      	lsrs	r3, r3, #4
 801023e:	b2db      	uxtb	r3, r3
 8010240:	e00e      	b.n	8010260 <put_fat+0x10e>
 8010242:	697b      	ldr	r3, [r7, #20]
 8010244:	781b      	ldrb	r3, [r3, #0]
 8010246:	b25b      	sxtb	r3, r3
 8010248:	f023 030f 	bic.w	r3, r3, #15
 801024c:	b25a      	sxtb	r2, r3
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	0a1b      	lsrs	r3, r3, #8
 8010252:	b25b      	sxtb	r3, r3
 8010254:	f003 030f 	and.w	r3, r3, #15
 8010258:	b25b      	sxtb	r3, r3
 801025a:	4313      	orrs	r3, r2
 801025c:	b25b      	sxtb	r3, r3
 801025e:	b2db      	uxtb	r3, r3
 8010260:	697a      	ldr	r2, [r7, #20]
 8010262:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	2201      	movs	r2, #1
 8010268:	70da      	strb	r2, [r3, #3]
			break;
 801026a:	e059      	b.n	8010320 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010270:	68bb      	ldr	r3, [r7, #8]
 8010272:	0a1b      	lsrs	r3, r3, #8
 8010274:	4413      	add	r3, r2
 8010276:	4619      	mov	r1, r3
 8010278:	68f8      	ldr	r0, [r7, #12]
 801027a:	f7ff fe07 	bl	800fe8c <move_window>
 801027e:	4603      	mov	r3, r0
 8010280:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010282:	7ffb      	ldrb	r3, [r7, #31]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d148      	bne.n	801031a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	005b      	lsls	r3, r3, #1
 8010292:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010296:	4413      	add	r3, r2
 8010298:	687a      	ldr	r2, [r7, #4]
 801029a:	b292      	uxth	r2, r2
 801029c:	4611      	mov	r1, r2
 801029e:	4618      	mov	r0, r3
 80102a0:	f7ff fb4d 	bl	800f93e <st_word>
			fs->wflag = 1;
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	2201      	movs	r2, #1
 80102a8:	70da      	strb	r2, [r3, #3]
			break;
 80102aa:	e039      	b.n	8010320 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80102b0:	68bb      	ldr	r3, [r7, #8]
 80102b2:	09db      	lsrs	r3, r3, #7
 80102b4:	4413      	add	r3, r2
 80102b6:	4619      	mov	r1, r3
 80102b8:	68f8      	ldr	r0, [r7, #12]
 80102ba:	f7ff fde7 	bl	800fe8c <move_window>
 80102be:	4603      	mov	r3, r0
 80102c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80102c2:	7ffb      	ldrb	r3, [r7, #31]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d12a      	bne.n	801031e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80102d4:	68bb      	ldr	r3, [r7, #8]
 80102d6:	009b      	lsls	r3, r3, #2
 80102d8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80102dc:	4413      	add	r3, r2
 80102de:	4618      	mov	r0, r3
 80102e0:	f7ff fb0a 	bl	800f8f8 <ld_dword>
 80102e4:	4603      	mov	r3, r0
 80102e6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80102ea:	4323      	orrs	r3, r4
 80102ec:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	009b      	lsls	r3, r3, #2
 80102f8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80102fc:	4413      	add	r3, r2
 80102fe:	6879      	ldr	r1, [r7, #4]
 8010300:	4618      	mov	r0, r3
 8010302:	f7ff fb37 	bl	800f974 <st_dword>
			fs->wflag = 1;
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	2201      	movs	r2, #1
 801030a:	70da      	strb	r2, [r3, #3]
			break;
 801030c:	e008      	b.n	8010320 <put_fat+0x1ce>
		}
	}
 801030e:	bf00      	nop
 8010310:	e006      	b.n	8010320 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8010312:	bf00      	nop
 8010314:	e004      	b.n	8010320 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8010316:	bf00      	nop
 8010318:	e002      	b.n	8010320 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801031a:	bf00      	nop
 801031c:	e000      	b.n	8010320 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801031e:	bf00      	nop
	return res;
 8010320:	7ffb      	ldrb	r3, [r7, #31]
}
 8010322:	4618      	mov	r0, r3
 8010324:	3724      	adds	r7, #36	; 0x24
 8010326:	46bd      	mov	sp, r7
 8010328:	bd90      	pop	{r4, r7, pc}

0801032a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801032a:	b580      	push	{r7, lr}
 801032c:	b088      	sub	sp, #32
 801032e:	af00      	add	r7, sp, #0
 8010330:	60f8      	str	r0, [r7, #12]
 8010332:	60b9      	str	r1, [r7, #8]
 8010334:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010336:	2300      	movs	r3, #0
 8010338:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010340:	68bb      	ldr	r3, [r7, #8]
 8010342:	2b01      	cmp	r3, #1
 8010344:	d904      	bls.n	8010350 <remove_chain+0x26>
 8010346:	69bb      	ldr	r3, [r7, #24]
 8010348:	699b      	ldr	r3, [r3, #24]
 801034a:	68ba      	ldr	r2, [r7, #8]
 801034c:	429a      	cmp	r2, r3
 801034e:	d301      	bcc.n	8010354 <remove_chain+0x2a>
 8010350:	2302      	movs	r3, #2
 8010352:	e04b      	b.n	80103ec <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d00c      	beq.n	8010374 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801035a:	f04f 32ff 	mov.w	r2, #4294967295
 801035e:	6879      	ldr	r1, [r7, #4]
 8010360:	69b8      	ldr	r0, [r7, #24]
 8010362:	f7ff fef6 	bl	8010152 <put_fat>
 8010366:	4603      	mov	r3, r0
 8010368:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801036a:	7ffb      	ldrb	r3, [r7, #31]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d001      	beq.n	8010374 <remove_chain+0x4a>
 8010370:	7ffb      	ldrb	r3, [r7, #31]
 8010372:	e03b      	b.n	80103ec <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8010374:	68b9      	ldr	r1, [r7, #8]
 8010376:	68f8      	ldr	r0, [r7, #12]
 8010378:	f7ff fe43 	bl	8010002 <get_fat>
 801037c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801037e:	697b      	ldr	r3, [r7, #20]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d031      	beq.n	80103e8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010384:	697b      	ldr	r3, [r7, #20]
 8010386:	2b01      	cmp	r3, #1
 8010388:	d101      	bne.n	801038e <remove_chain+0x64>
 801038a:	2302      	movs	r3, #2
 801038c:	e02e      	b.n	80103ec <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801038e:	697b      	ldr	r3, [r7, #20]
 8010390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010394:	d101      	bne.n	801039a <remove_chain+0x70>
 8010396:	2301      	movs	r3, #1
 8010398:	e028      	b.n	80103ec <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801039a:	2200      	movs	r2, #0
 801039c:	68b9      	ldr	r1, [r7, #8]
 801039e:	69b8      	ldr	r0, [r7, #24]
 80103a0:	f7ff fed7 	bl	8010152 <put_fat>
 80103a4:	4603      	mov	r3, r0
 80103a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80103a8:	7ffb      	ldrb	r3, [r7, #31]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d001      	beq.n	80103b2 <remove_chain+0x88>
 80103ae:	7ffb      	ldrb	r3, [r7, #31]
 80103b0:	e01c      	b.n	80103ec <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80103b2:	69bb      	ldr	r3, [r7, #24]
 80103b4:	695a      	ldr	r2, [r3, #20]
 80103b6:	69bb      	ldr	r3, [r7, #24]
 80103b8:	699b      	ldr	r3, [r3, #24]
 80103ba:	3b02      	subs	r3, #2
 80103bc:	429a      	cmp	r2, r3
 80103be:	d20b      	bcs.n	80103d8 <remove_chain+0xae>
			fs->free_clst++;
 80103c0:	69bb      	ldr	r3, [r7, #24]
 80103c2:	695b      	ldr	r3, [r3, #20]
 80103c4:	1c5a      	adds	r2, r3, #1
 80103c6:	69bb      	ldr	r3, [r7, #24]
 80103c8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80103ca:	69bb      	ldr	r3, [r7, #24]
 80103cc:	791b      	ldrb	r3, [r3, #4]
 80103ce:	f043 0301 	orr.w	r3, r3, #1
 80103d2:	b2da      	uxtb	r2, r3
 80103d4:	69bb      	ldr	r3, [r7, #24]
 80103d6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80103d8:	697b      	ldr	r3, [r7, #20]
 80103da:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80103dc:	69bb      	ldr	r3, [r7, #24]
 80103de:	699b      	ldr	r3, [r3, #24]
 80103e0:	68ba      	ldr	r2, [r7, #8]
 80103e2:	429a      	cmp	r2, r3
 80103e4:	d3c6      	bcc.n	8010374 <remove_chain+0x4a>
 80103e6:	e000      	b.n	80103ea <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80103e8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80103ea:	2300      	movs	r3, #0
}
 80103ec:	4618      	mov	r0, r3
 80103ee:	3720      	adds	r7, #32
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bd80      	pop	{r7, pc}

080103f4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b088      	sub	sp, #32
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
 80103fc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d10d      	bne.n	8010426 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801040a:	693b      	ldr	r3, [r7, #16]
 801040c:	691b      	ldr	r3, [r3, #16]
 801040e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010410:	69bb      	ldr	r3, [r7, #24]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d004      	beq.n	8010420 <create_chain+0x2c>
 8010416:	693b      	ldr	r3, [r7, #16]
 8010418:	699b      	ldr	r3, [r3, #24]
 801041a:	69ba      	ldr	r2, [r7, #24]
 801041c:	429a      	cmp	r2, r3
 801041e:	d31b      	bcc.n	8010458 <create_chain+0x64>
 8010420:	2301      	movs	r3, #1
 8010422:	61bb      	str	r3, [r7, #24]
 8010424:	e018      	b.n	8010458 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010426:	6839      	ldr	r1, [r7, #0]
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f7ff fdea 	bl	8010002 <get_fat>
 801042e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	2b01      	cmp	r3, #1
 8010434:	d801      	bhi.n	801043a <create_chain+0x46>
 8010436:	2301      	movs	r3, #1
 8010438:	e070      	b.n	801051c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010440:	d101      	bne.n	8010446 <create_chain+0x52>
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	e06a      	b.n	801051c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010446:	693b      	ldr	r3, [r7, #16]
 8010448:	699b      	ldr	r3, [r3, #24]
 801044a:	68fa      	ldr	r2, [r7, #12]
 801044c:	429a      	cmp	r2, r3
 801044e:	d201      	bcs.n	8010454 <create_chain+0x60>
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	e063      	b.n	801051c <create_chain+0x128>
		scl = clst;
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010458:	69bb      	ldr	r3, [r7, #24]
 801045a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801045c:	69fb      	ldr	r3, [r7, #28]
 801045e:	3301      	adds	r3, #1
 8010460:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8010462:	693b      	ldr	r3, [r7, #16]
 8010464:	699b      	ldr	r3, [r3, #24]
 8010466:	69fa      	ldr	r2, [r7, #28]
 8010468:	429a      	cmp	r2, r3
 801046a:	d307      	bcc.n	801047c <create_chain+0x88>
				ncl = 2;
 801046c:	2302      	movs	r3, #2
 801046e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010470:	69fa      	ldr	r2, [r7, #28]
 8010472:	69bb      	ldr	r3, [r7, #24]
 8010474:	429a      	cmp	r2, r3
 8010476:	d901      	bls.n	801047c <create_chain+0x88>
 8010478:	2300      	movs	r3, #0
 801047a:	e04f      	b.n	801051c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801047c:	69f9      	ldr	r1, [r7, #28]
 801047e:	6878      	ldr	r0, [r7, #4]
 8010480:	f7ff fdbf 	bl	8010002 <get_fat>
 8010484:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d00e      	beq.n	80104aa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	2b01      	cmp	r3, #1
 8010490:	d003      	beq.n	801049a <create_chain+0xa6>
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010498:	d101      	bne.n	801049e <create_chain+0xaa>
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	e03e      	b.n	801051c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801049e:	69fa      	ldr	r2, [r7, #28]
 80104a0:	69bb      	ldr	r3, [r7, #24]
 80104a2:	429a      	cmp	r2, r3
 80104a4:	d1da      	bne.n	801045c <create_chain+0x68>
 80104a6:	2300      	movs	r3, #0
 80104a8:	e038      	b.n	801051c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80104aa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80104ac:	f04f 32ff 	mov.w	r2, #4294967295
 80104b0:	69f9      	ldr	r1, [r7, #28]
 80104b2:	6938      	ldr	r0, [r7, #16]
 80104b4:	f7ff fe4d 	bl	8010152 <put_fat>
 80104b8:	4603      	mov	r3, r0
 80104ba:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80104bc:	7dfb      	ldrb	r3, [r7, #23]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d109      	bne.n	80104d6 <create_chain+0xe2>
 80104c2:	683b      	ldr	r3, [r7, #0]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d006      	beq.n	80104d6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80104c8:	69fa      	ldr	r2, [r7, #28]
 80104ca:	6839      	ldr	r1, [r7, #0]
 80104cc:	6938      	ldr	r0, [r7, #16]
 80104ce:	f7ff fe40 	bl	8010152 <put_fat>
 80104d2:	4603      	mov	r3, r0
 80104d4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80104d6:	7dfb      	ldrb	r3, [r7, #23]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d116      	bne.n	801050a <create_chain+0x116>
		fs->last_clst = ncl;
 80104dc:	693b      	ldr	r3, [r7, #16]
 80104de:	69fa      	ldr	r2, [r7, #28]
 80104e0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80104e2:	693b      	ldr	r3, [r7, #16]
 80104e4:	695a      	ldr	r2, [r3, #20]
 80104e6:	693b      	ldr	r3, [r7, #16]
 80104e8:	699b      	ldr	r3, [r3, #24]
 80104ea:	3b02      	subs	r3, #2
 80104ec:	429a      	cmp	r2, r3
 80104ee:	d804      	bhi.n	80104fa <create_chain+0x106>
 80104f0:	693b      	ldr	r3, [r7, #16]
 80104f2:	695b      	ldr	r3, [r3, #20]
 80104f4:	1e5a      	subs	r2, r3, #1
 80104f6:	693b      	ldr	r3, [r7, #16]
 80104f8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80104fa:	693b      	ldr	r3, [r7, #16]
 80104fc:	791b      	ldrb	r3, [r3, #4]
 80104fe:	f043 0301 	orr.w	r3, r3, #1
 8010502:	b2da      	uxtb	r2, r3
 8010504:	693b      	ldr	r3, [r7, #16]
 8010506:	711a      	strb	r2, [r3, #4]
 8010508:	e007      	b.n	801051a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801050a:	7dfb      	ldrb	r3, [r7, #23]
 801050c:	2b01      	cmp	r3, #1
 801050e:	d102      	bne.n	8010516 <create_chain+0x122>
 8010510:	f04f 33ff 	mov.w	r3, #4294967295
 8010514:	e000      	b.n	8010518 <create_chain+0x124>
 8010516:	2301      	movs	r3, #1
 8010518:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801051a:	69fb      	ldr	r3, [r7, #28]
}
 801051c:	4618      	mov	r0, r3
 801051e:	3720      	adds	r7, #32
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}

08010524 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010524:	b480      	push	{r7}
 8010526:	b087      	sub	sp, #28
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
 801052c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010538:	3304      	adds	r3, #4
 801053a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	0a5b      	lsrs	r3, r3, #9
 8010540:	68fa      	ldr	r2, [r7, #12]
 8010542:	8952      	ldrh	r2, [r2, #10]
 8010544:	fbb3 f3f2 	udiv	r3, r3, r2
 8010548:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801054a:	693b      	ldr	r3, [r7, #16]
 801054c:	1d1a      	adds	r2, r3, #4
 801054e:	613a      	str	r2, [r7, #16]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010554:	68bb      	ldr	r3, [r7, #8]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d101      	bne.n	801055e <clmt_clust+0x3a>
 801055a:	2300      	movs	r3, #0
 801055c:	e010      	b.n	8010580 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801055e:	697a      	ldr	r2, [r7, #20]
 8010560:	68bb      	ldr	r3, [r7, #8]
 8010562:	429a      	cmp	r2, r3
 8010564:	d307      	bcc.n	8010576 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8010566:	697a      	ldr	r2, [r7, #20]
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	1ad3      	subs	r3, r2, r3
 801056c:	617b      	str	r3, [r7, #20]
 801056e:	693b      	ldr	r3, [r7, #16]
 8010570:	3304      	adds	r3, #4
 8010572:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010574:	e7e9      	b.n	801054a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8010576:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010578:	693b      	ldr	r3, [r7, #16]
 801057a:	681a      	ldr	r2, [r3, #0]
 801057c:	697b      	ldr	r3, [r7, #20]
 801057e:	4413      	add	r3, r2
}
 8010580:	4618      	mov	r0, r3
 8010582:	371c      	adds	r7, #28
 8010584:	46bd      	mov	sp, r7
 8010586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801058a:	4770      	bx	lr

0801058c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b086      	sub	sp, #24
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
 8010594:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801059c:	683b      	ldr	r3, [r7, #0]
 801059e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80105a2:	d204      	bcs.n	80105ae <dir_sdi+0x22>
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	f003 031f 	and.w	r3, r3, #31
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d001      	beq.n	80105b2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80105ae:	2302      	movs	r3, #2
 80105b0:	e063      	b.n	801067a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	683a      	ldr	r2, [r7, #0]
 80105b6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	689b      	ldr	r3, [r3, #8]
 80105bc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80105be:	697b      	ldr	r3, [r7, #20]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d106      	bne.n	80105d2 <dir_sdi+0x46>
 80105c4:	693b      	ldr	r3, [r7, #16]
 80105c6:	781b      	ldrb	r3, [r3, #0]
 80105c8:	2b02      	cmp	r3, #2
 80105ca:	d902      	bls.n	80105d2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80105cc:	693b      	ldr	r3, [r7, #16]
 80105ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105d0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80105d2:	697b      	ldr	r3, [r7, #20]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d10c      	bne.n	80105f2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	095b      	lsrs	r3, r3, #5
 80105dc:	693a      	ldr	r2, [r7, #16]
 80105de:	8912      	ldrh	r2, [r2, #8]
 80105e0:	4293      	cmp	r3, r2
 80105e2:	d301      	bcc.n	80105e8 <dir_sdi+0x5c>
 80105e4:	2302      	movs	r3, #2
 80105e6:	e048      	b.n	801067a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80105e8:	693b      	ldr	r3, [r7, #16]
 80105ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	61da      	str	r2, [r3, #28]
 80105f0:	e029      	b.n	8010646 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80105f2:	693b      	ldr	r3, [r7, #16]
 80105f4:	895b      	ldrh	r3, [r3, #10]
 80105f6:	025b      	lsls	r3, r3, #9
 80105f8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80105fa:	e019      	b.n	8010630 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	6979      	ldr	r1, [r7, #20]
 8010600:	4618      	mov	r0, r3
 8010602:	f7ff fcfe 	bl	8010002 <get_fat>
 8010606:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010608:	697b      	ldr	r3, [r7, #20]
 801060a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801060e:	d101      	bne.n	8010614 <dir_sdi+0x88>
 8010610:	2301      	movs	r3, #1
 8010612:	e032      	b.n	801067a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010614:	697b      	ldr	r3, [r7, #20]
 8010616:	2b01      	cmp	r3, #1
 8010618:	d904      	bls.n	8010624 <dir_sdi+0x98>
 801061a:	693b      	ldr	r3, [r7, #16]
 801061c:	699b      	ldr	r3, [r3, #24]
 801061e:	697a      	ldr	r2, [r7, #20]
 8010620:	429a      	cmp	r2, r3
 8010622:	d301      	bcc.n	8010628 <dir_sdi+0x9c>
 8010624:	2302      	movs	r3, #2
 8010626:	e028      	b.n	801067a <dir_sdi+0xee>
			ofs -= csz;
 8010628:	683a      	ldr	r2, [r7, #0]
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	1ad3      	subs	r3, r2, r3
 801062e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010630:	683a      	ldr	r2, [r7, #0]
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	429a      	cmp	r2, r3
 8010636:	d2e1      	bcs.n	80105fc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8010638:	6979      	ldr	r1, [r7, #20]
 801063a:	6938      	ldr	r0, [r7, #16]
 801063c:	f7ff fcc2 	bl	800ffc4 <clust2sect>
 8010640:	4602      	mov	r2, r0
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	697a      	ldr	r2, [r7, #20]
 801064a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	69db      	ldr	r3, [r3, #28]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d101      	bne.n	8010658 <dir_sdi+0xcc>
 8010654:	2302      	movs	r3, #2
 8010656:	e010      	b.n	801067a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	69da      	ldr	r2, [r3, #28]
 801065c:	683b      	ldr	r3, [r7, #0]
 801065e:	0a5b      	lsrs	r3, r3, #9
 8010660:	441a      	add	r2, r3
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010666:	693b      	ldr	r3, [r7, #16]
 8010668:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801066c:	683b      	ldr	r3, [r7, #0]
 801066e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010672:	441a      	add	r2, r3
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010678:	2300      	movs	r3, #0
}
 801067a:	4618      	mov	r0, r3
 801067c:	3718      	adds	r7, #24
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}

08010682 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010682:	b580      	push	{r7, lr}
 8010684:	b086      	sub	sp, #24
 8010686:	af00      	add	r7, sp, #0
 8010688:	6078      	str	r0, [r7, #4]
 801068a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	695b      	ldr	r3, [r3, #20]
 8010696:	3320      	adds	r3, #32
 8010698:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	69db      	ldr	r3, [r3, #28]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d003      	beq.n	80106aa <dir_next+0x28>
 80106a2:	68bb      	ldr	r3, [r7, #8]
 80106a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80106a8:	d301      	bcc.n	80106ae <dir_next+0x2c>
 80106aa:	2304      	movs	r3, #4
 80106ac:	e0aa      	b.n	8010804 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80106ae:	68bb      	ldr	r3, [r7, #8]
 80106b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	f040 8098 	bne.w	80107ea <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	69db      	ldr	r3, [r3, #28]
 80106be:	1c5a      	adds	r2, r3, #1
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	699b      	ldr	r3, [r3, #24]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d10b      	bne.n	80106e4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80106cc:	68bb      	ldr	r3, [r7, #8]
 80106ce:	095b      	lsrs	r3, r3, #5
 80106d0:	68fa      	ldr	r2, [r7, #12]
 80106d2:	8912      	ldrh	r2, [r2, #8]
 80106d4:	4293      	cmp	r3, r2
 80106d6:	f0c0 8088 	bcc.w	80107ea <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	2200      	movs	r2, #0
 80106de:	61da      	str	r2, [r3, #28]
 80106e0:	2304      	movs	r3, #4
 80106e2:	e08f      	b.n	8010804 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	0a5b      	lsrs	r3, r3, #9
 80106e8:	68fa      	ldr	r2, [r7, #12]
 80106ea:	8952      	ldrh	r2, [r2, #10]
 80106ec:	3a01      	subs	r2, #1
 80106ee:	4013      	ands	r3, r2
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d17a      	bne.n	80107ea <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80106f4:	687a      	ldr	r2, [r7, #4]
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	699b      	ldr	r3, [r3, #24]
 80106fa:	4619      	mov	r1, r3
 80106fc:	4610      	mov	r0, r2
 80106fe:	f7ff fc80 	bl	8010002 <get_fat>
 8010702:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010704:	697b      	ldr	r3, [r7, #20]
 8010706:	2b01      	cmp	r3, #1
 8010708:	d801      	bhi.n	801070e <dir_next+0x8c>
 801070a:	2302      	movs	r3, #2
 801070c:	e07a      	b.n	8010804 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801070e:	697b      	ldr	r3, [r7, #20]
 8010710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010714:	d101      	bne.n	801071a <dir_next+0x98>
 8010716:	2301      	movs	r3, #1
 8010718:	e074      	b.n	8010804 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	699b      	ldr	r3, [r3, #24]
 801071e:	697a      	ldr	r2, [r7, #20]
 8010720:	429a      	cmp	r2, r3
 8010722:	d358      	bcc.n	80107d6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010724:	683b      	ldr	r3, [r7, #0]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d104      	bne.n	8010734 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	2200      	movs	r2, #0
 801072e:	61da      	str	r2, [r3, #28]
 8010730:	2304      	movs	r3, #4
 8010732:	e067      	b.n	8010804 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010734:	687a      	ldr	r2, [r7, #4]
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	699b      	ldr	r3, [r3, #24]
 801073a:	4619      	mov	r1, r3
 801073c:	4610      	mov	r0, r2
 801073e:	f7ff fe59 	bl	80103f4 <create_chain>
 8010742:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010744:	697b      	ldr	r3, [r7, #20]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d101      	bne.n	801074e <dir_next+0xcc>
 801074a:	2307      	movs	r3, #7
 801074c:	e05a      	b.n	8010804 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801074e:	697b      	ldr	r3, [r7, #20]
 8010750:	2b01      	cmp	r3, #1
 8010752:	d101      	bne.n	8010758 <dir_next+0xd6>
 8010754:	2302      	movs	r3, #2
 8010756:	e055      	b.n	8010804 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010758:	697b      	ldr	r3, [r7, #20]
 801075a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801075e:	d101      	bne.n	8010764 <dir_next+0xe2>
 8010760:	2301      	movs	r3, #1
 8010762:	e04f      	b.n	8010804 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010764:	68f8      	ldr	r0, [r7, #12]
 8010766:	f7ff fb4d 	bl	800fe04 <sync_window>
 801076a:	4603      	mov	r3, r0
 801076c:	2b00      	cmp	r3, #0
 801076e:	d001      	beq.n	8010774 <dir_next+0xf2>
 8010770:	2301      	movs	r3, #1
 8010772:	e047      	b.n	8010804 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	3334      	adds	r3, #52	; 0x34
 8010778:	f44f 7200 	mov.w	r2, #512	; 0x200
 801077c:	2100      	movs	r1, #0
 801077e:	4618      	mov	r0, r3
 8010780:	f7ff f945 	bl	800fa0e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010784:	2300      	movs	r3, #0
 8010786:	613b      	str	r3, [r7, #16]
 8010788:	6979      	ldr	r1, [r7, #20]
 801078a:	68f8      	ldr	r0, [r7, #12]
 801078c:	f7ff fc1a 	bl	800ffc4 <clust2sect>
 8010790:	4602      	mov	r2, r0
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	631a      	str	r2, [r3, #48]	; 0x30
 8010796:	e012      	b.n	80107be <dir_next+0x13c>
						fs->wflag = 1;
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	2201      	movs	r2, #1
 801079c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801079e:	68f8      	ldr	r0, [r7, #12]
 80107a0:	f7ff fb30 	bl	800fe04 <sync_window>
 80107a4:	4603      	mov	r3, r0
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d001      	beq.n	80107ae <dir_next+0x12c>
 80107aa:	2301      	movs	r3, #1
 80107ac:	e02a      	b.n	8010804 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80107ae:	693b      	ldr	r3, [r7, #16]
 80107b0:	3301      	adds	r3, #1
 80107b2:	613b      	str	r3, [r7, #16]
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107b8:	1c5a      	adds	r2, r3, #1
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	631a      	str	r2, [r3, #48]	; 0x30
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	895b      	ldrh	r3, [r3, #10]
 80107c2:	461a      	mov	r2, r3
 80107c4:	693b      	ldr	r3, [r7, #16]
 80107c6:	4293      	cmp	r3, r2
 80107c8:	d3e6      	bcc.n	8010798 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80107ce:	693b      	ldr	r3, [r7, #16]
 80107d0:	1ad2      	subs	r2, r2, r3
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	697a      	ldr	r2, [r7, #20]
 80107da:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80107dc:	6979      	ldr	r1, [r7, #20]
 80107de:	68f8      	ldr	r0, [r7, #12]
 80107e0:	f7ff fbf0 	bl	800ffc4 <clust2sect>
 80107e4:	4602      	mov	r2, r0
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	68ba      	ldr	r2, [r7, #8]
 80107ee:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80107f6:	68bb      	ldr	r3, [r7, #8]
 80107f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80107fc:	441a      	add	r2, r3
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010802:	2300      	movs	r3, #0
}
 8010804:	4618      	mov	r0, r3
 8010806:	3718      	adds	r7, #24
 8010808:	46bd      	mov	sp, r7
 801080a:	bd80      	pop	{r7, pc}

0801080c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801080c:	b580      	push	{r7, lr}
 801080e:	b086      	sub	sp, #24
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
 8010814:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801081c:	2100      	movs	r1, #0
 801081e:	6878      	ldr	r0, [r7, #4]
 8010820:	f7ff feb4 	bl	801058c <dir_sdi>
 8010824:	4603      	mov	r3, r0
 8010826:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010828:	7dfb      	ldrb	r3, [r7, #23]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d12b      	bne.n	8010886 <dir_alloc+0x7a>
		n = 0;
 801082e:	2300      	movs	r3, #0
 8010830:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	69db      	ldr	r3, [r3, #28]
 8010836:	4619      	mov	r1, r3
 8010838:	68f8      	ldr	r0, [r7, #12]
 801083a:	f7ff fb27 	bl	800fe8c <move_window>
 801083e:	4603      	mov	r3, r0
 8010840:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010842:	7dfb      	ldrb	r3, [r7, #23]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d11d      	bne.n	8010884 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	6a1b      	ldr	r3, [r3, #32]
 801084c:	781b      	ldrb	r3, [r3, #0]
 801084e:	2be5      	cmp	r3, #229	; 0xe5
 8010850:	d004      	beq.n	801085c <dir_alloc+0x50>
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	6a1b      	ldr	r3, [r3, #32]
 8010856:	781b      	ldrb	r3, [r3, #0]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d107      	bne.n	801086c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801085c:	693b      	ldr	r3, [r7, #16]
 801085e:	3301      	adds	r3, #1
 8010860:	613b      	str	r3, [r7, #16]
 8010862:	693a      	ldr	r2, [r7, #16]
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	429a      	cmp	r2, r3
 8010868:	d102      	bne.n	8010870 <dir_alloc+0x64>
 801086a:	e00c      	b.n	8010886 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801086c:	2300      	movs	r3, #0
 801086e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010870:	2101      	movs	r1, #1
 8010872:	6878      	ldr	r0, [r7, #4]
 8010874:	f7ff ff05 	bl	8010682 <dir_next>
 8010878:	4603      	mov	r3, r0
 801087a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801087c:	7dfb      	ldrb	r3, [r7, #23]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d0d7      	beq.n	8010832 <dir_alloc+0x26>
 8010882:	e000      	b.n	8010886 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8010884:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010886:	7dfb      	ldrb	r3, [r7, #23]
 8010888:	2b04      	cmp	r3, #4
 801088a:	d101      	bne.n	8010890 <dir_alloc+0x84>
 801088c:	2307      	movs	r3, #7
 801088e:	75fb      	strb	r3, [r7, #23]
	return res;
 8010890:	7dfb      	ldrb	r3, [r7, #23]
}
 8010892:	4618      	mov	r0, r3
 8010894:	3718      	adds	r7, #24
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}

0801089a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801089a:	b580      	push	{r7, lr}
 801089c:	b084      	sub	sp, #16
 801089e:	af00      	add	r7, sp, #0
 80108a0:	6078      	str	r0, [r7, #4]
 80108a2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	331a      	adds	r3, #26
 80108a8:	4618      	mov	r0, r3
 80108aa:	f7ff f80d 	bl	800f8c8 <ld_word>
 80108ae:	4603      	mov	r3, r0
 80108b0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	781b      	ldrb	r3, [r3, #0]
 80108b6:	2b03      	cmp	r3, #3
 80108b8:	d109      	bne.n	80108ce <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80108ba:	683b      	ldr	r3, [r7, #0]
 80108bc:	3314      	adds	r3, #20
 80108be:	4618      	mov	r0, r3
 80108c0:	f7ff f802 	bl	800f8c8 <ld_word>
 80108c4:	4603      	mov	r3, r0
 80108c6:	041b      	lsls	r3, r3, #16
 80108c8:	68fa      	ldr	r2, [r7, #12]
 80108ca:	4313      	orrs	r3, r2
 80108cc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80108ce:	68fb      	ldr	r3, [r7, #12]
}
 80108d0:	4618      	mov	r0, r3
 80108d2:	3710      	adds	r7, #16
 80108d4:	46bd      	mov	sp, r7
 80108d6:	bd80      	pop	{r7, pc}

080108d8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b084      	sub	sp, #16
 80108dc:	af00      	add	r7, sp, #0
 80108de:	60f8      	str	r0, [r7, #12]
 80108e0:	60b9      	str	r1, [r7, #8]
 80108e2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80108e4:	68bb      	ldr	r3, [r7, #8]
 80108e6:	331a      	adds	r3, #26
 80108e8:	687a      	ldr	r2, [r7, #4]
 80108ea:	b292      	uxth	r2, r2
 80108ec:	4611      	mov	r1, r2
 80108ee:	4618      	mov	r0, r3
 80108f0:	f7ff f825 	bl	800f93e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	781b      	ldrb	r3, [r3, #0]
 80108f8:	2b03      	cmp	r3, #3
 80108fa:	d109      	bne.n	8010910 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	f103 0214 	add.w	r2, r3, #20
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	0c1b      	lsrs	r3, r3, #16
 8010906:	b29b      	uxth	r3, r3
 8010908:	4619      	mov	r1, r3
 801090a:	4610      	mov	r0, r2
 801090c:	f7ff f817 	bl	800f93e <st_word>
	}
}
 8010910:	bf00      	nop
 8010912:	3710      	adds	r7, #16
 8010914:	46bd      	mov	sp, r7
 8010916:	bd80      	pop	{r7, pc}

08010918 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b086      	sub	sp, #24
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
 8010920:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8010922:	2304      	movs	r3, #4
 8010924:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 801092c:	e03c      	b.n	80109a8 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	69db      	ldr	r3, [r3, #28]
 8010932:	4619      	mov	r1, r3
 8010934:	6938      	ldr	r0, [r7, #16]
 8010936:	f7ff faa9 	bl	800fe8c <move_window>
 801093a:	4603      	mov	r3, r0
 801093c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801093e:	7dfb      	ldrb	r3, [r7, #23]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d136      	bne.n	80109b2 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	6a1b      	ldr	r3, [r3, #32]
 8010948:	781b      	ldrb	r3, [r3, #0]
 801094a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 801094c:	7bfb      	ldrb	r3, [r7, #15]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d102      	bne.n	8010958 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8010952:	2304      	movs	r3, #4
 8010954:	75fb      	strb	r3, [r7, #23]
 8010956:	e031      	b.n	80109bc <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	6a1b      	ldr	r3, [r3, #32]
 801095c:	330b      	adds	r3, #11
 801095e:	781b      	ldrb	r3, [r3, #0]
 8010960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010964:	73bb      	strb	r3, [r7, #14]
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	7bba      	ldrb	r2, [r7, #14]
 801096a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 801096c:	7bfb      	ldrb	r3, [r7, #15]
 801096e:	2be5      	cmp	r3, #229	; 0xe5
 8010970:	d011      	beq.n	8010996 <dir_read+0x7e>
 8010972:	7bfb      	ldrb	r3, [r7, #15]
 8010974:	2b2e      	cmp	r3, #46	; 0x2e
 8010976:	d00e      	beq.n	8010996 <dir_read+0x7e>
 8010978:	7bbb      	ldrb	r3, [r7, #14]
 801097a:	2b0f      	cmp	r3, #15
 801097c:	d00b      	beq.n	8010996 <dir_read+0x7e>
 801097e:	7bbb      	ldrb	r3, [r7, #14]
 8010980:	f023 0320 	bic.w	r3, r3, #32
 8010984:	2b08      	cmp	r3, #8
 8010986:	bf0c      	ite	eq
 8010988:	2301      	moveq	r3, #1
 801098a:	2300      	movne	r3, #0
 801098c:	b2db      	uxtb	r3, r3
 801098e:	461a      	mov	r2, r3
 8010990:	683b      	ldr	r3, [r7, #0]
 8010992:	4293      	cmp	r3, r2
 8010994:	d00f      	beq.n	80109b6 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8010996:	2100      	movs	r1, #0
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f7ff fe72 	bl	8010682 <dir_next>
 801099e:	4603      	mov	r3, r0
 80109a0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80109a2:	7dfb      	ldrb	r3, [r7, #23]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d108      	bne.n	80109ba <dir_read+0xa2>
	while (dp->sect) {
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	69db      	ldr	r3, [r3, #28]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d1be      	bne.n	801092e <dir_read+0x16>
 80109b0:	e004      	b.n	80109bc <dir_read+0xa4>
		if (res != FR_OK) break;
 80109b2:	bf00      	nop
 80109b4:	e002      	b.n	80109bc <dir_read+0xa4>
				break;
 80109b6:	bf00      	nop
 80109b8:	e000      	b.n	80109bc <dir_read+0xa4>
		if (res != FR_OK) break;
 80109ba:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80109bc:	7dfb      	ldrb	r3, [r7, #23]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d002      	beq.n	80109c8 <dir_read+0xb0>
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2200      	movs	r2, #0
 80109c6:	61da      	str	r2, [r3, #28]
	return res;
 80109c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80109ca:	4618      	mov	r0, r3
 80109cc:	3718      	adds	r7, #24
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}

080109d2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80109d2:	b580      	push	{r7, lr}
 80109d4:	b086      	sub	sp, #24
 80109d6:	af00      	add	r7, sp, #0
 80109d8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80109e0:	2100      	movs	r1, #0
 80109e2:	6878      	ldr	r0, [r7, #4]
 80109e4:	f7ff fdd2 	bl	801058c <dir_sdi>
 80109e8:	4603      	mov	r3, r0
 80109ea:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80109ec:	7dfb      	ldrb	r3, [r7, #23]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d001      	beq.n	80109f6 <dir_find+0x24>
 80109f2:	7dfb      	ldrb	r3, [r7, #23]
 80109f4:	e03e      	b.n	8010a74 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	69db      	ldr	r3, [r3, #28]
 80109fa:	4619      	mov	r1, r3
 80109fc:	6938      	ldr	r0, [r7, #16]
 80109fe:	f7ff fa45 	bl	800fe8c <move_window>
 8010a02:	4603      	mov	r3, r0
 8010a04:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010a06:	7dfb      	ldrb	r3, [r7, #23]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d12f      	bne.n	8010a6c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	6a1b      	ldr	r3, [r3, #32]
 8010a10:	781b      	ldrb	r3, [r3, #0]
 8010a12:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010a14:	7bfb      	ldrb	r3, [r7, #15]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d102      	bne.n	8010a20 <dir_find+0x4e>
 8010a1a:	2304      	movs	r3, #4
 8010a1c:	75fb      	strb	r3, [r7, #23]
 8010a1e:	e028      	b.n	8010a72 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	6a1b      	ldr	r3, [r3, #32]
 8010a24:	330b      	adds	r3, #11
 8010a26:	781b      	ldrb	r3, [r3, #0]
 8010a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010a2c:	b2da      	uxtb	r2, r3
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	6a1b      	ldr	r3, [r3, #32]
 8010a36:	330b      	adds	r3, #11
 8010a38:	781b      	ldrb	r3, [r3, #0]
 8010a3a:	f003 0308 	and.w	r3, r3, #8
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d10a      	bne.n	8010a58 <dir_find+0x86>
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	6a18      	ldr	r0, [r3, #32]
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	3324      	adds	r3, #36	; 0x24
 8010a4a:	220b      	movs	r2, #11
 8010a4c:	4619      	mov	r1, r3
 8010a4e:	f7fe fff9 	bl	800fa44 <mem_cmp>
 8010a52:	4603      	mov	r3, r0
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d00b      	beq.n	8010a70 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010a58:	2100      	movs	r1, #0
 8010a5a:	6878      	ldr	r0, [r7, #4]
 8010a5c:	f7ff fe11 	bl	8010682 <dir_next>
 8010a60:	4603      	mov	r3, r0
 8010a62:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010a64:	7dfb      	ldrb	r3, [r7, #23]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d0c5      	beq.n	80109f6 <dir_find+0x24>
 8010a6a:	e002      	b.n	8010a72 <dir_find+0xa0>
		if (res != FR_OK) break;
 8010a6c:	bf00      	nop
 8010a6e:	e000      	b.n	8010a72 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010a70:	bf00      	nop

	return res;
 8010a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a74:	4618      	mov	r0, r3
 8010a76:	3718      	adds	r7, #24
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	bd80      	pop	{r7, pc}

08010a7c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b084      	sub	sp, #16
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010a8a:	2101      	movs	r1, #1
 8010a8c:	6878      	ldr	r0, [r7, #4]
 8010a8e:	f7ff febd 	bl	801080c <dir_alloc>
 8010a92:	4603      	mov	r3, r0
 8010a94:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010a96:	7bfb      	ldrb	r3, [r7, #15]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d11c      	bne.n	8010ad6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	69db      	ldr	r3, [r3, #28]
 8010aa0:	4619      	mov	r1, r3
 8010aa2:	68b8      	ldr	r0, [r7, #8]
 8010aa4:	f7ff f9f2 	bl	800fe8c <move_window>
 8010aa8:	4603      	mov	r3, r0
 8010aaa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010aac:	7bfb      	ldrb	r3, [r7, #15]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d111      	bne.n	8010ad6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	6a1b      	ldr	r3, [r3, #32]
 8010ab6:	2220      	movs	r2, #32
 8010ab8:	2100      	movs	r1, #0
 8010aba:	4618      	mov	r0, r3
 8010abc:	f7fe ffa7 	bl	800fa0e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	6a18      	ldr	r0, [r3, #32]
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	3324      	adds	r3, #36	; 0x24
 8010ac8:	220b      	movs	r2, #11
 8010aca:	4619      	mov	r1, r3
 8010acc:	f7fe ff7e 	bl	800f9cc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010ad0:	68bb      	ldr	r3, [r7, #8]
 8010ad2:	2201      	movs	r2, #1
 8010ad4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ad8:	4618      	mov	r0, r3
 8010ada:	3710      	adds	r7, #16
 8010adc:	46bd      	mov	sp, r7
 8010ade:	bd80      	pop	{r7, pc}

08010ae0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b086      	sub	sp, #24
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]
 8010ae8:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8010aea:	683b      	ldr	r3, [r7, #0]
 8010aec:	2200      	movs	r2, #0
 8010aee:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	69db      	ldr	r3, [r3, #28]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d04e      	beq.n	8010b96 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8010af8:	2300      	movs	r3, #0
 8010afa:	613b      	str	r3, [r7, #16]
 8010afc:	693b      	ldr	r3, [r7, #16]
 8010afe:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8010b00:	e021      	b.n	8010b46 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	6a1a      	ldr	r2, [r3, #32]
 8010b06:	697b      	ldr	r3, [r7, #20]
 8010b08:	1c59      	adds	r1, r3, #1
 8010b0a:	6179      	str	r1, [r7, #20]
 8010b0c:	4413      	add	r3, r2
 8010b0e:	781b      	ldrb	r3, [r3, #0]
 8010b10:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8010b12:	7bfb      	ldrb	r3, [r7, #15]
 8010b14:	2b20      	cmp	r3, #32
 8010b16:	d100      	bne.n	8010b1a <get_fileinfo+0x3a>
 8010b18:	e015      	b.n	8010b46 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8010b1a:	7bfb      	ldrb	r3, [r7, #15]
 8010b1c:	2b05      	cmp	r3, #5
 8010b1e:	d101      	bne.n	8010b24 <get_fileinfo+0x44>
 8010b20:	23e5      	movs	r3, #229	; 0xe5
 8010b22:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8010b24:	697b      	ldr	r3, [r7, #20]
 8010b26:	2b09      	cmp	r3, #9
 8010b28:	d106      	bne.n	8010b38 <get_fileinfo+0x58>
 8010b2a:	693b      	ldr	r3, [r7, #16]
 8010b2c:	1c5a      	adds	r2, r3, #1
 8010b2e:	613a      	str	r2, [r7, #16]
 8010b30:	683a      	ldr	r2, [r7, #0]
 8010b32:	4413      	add	r3, r2
 8010b34:	222e      	movs	r2, #46	; 0x2e
 8010b36:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8010b38:	693b      	ldr	r3, [r7, #16]
 8010b3a:	1c5a      	adds	r2, r3, #1
 8010b3c:	613a      	str	r2, [r7, #16]
 8010b3e:	683a      	ldr	r2, [r7, #0]
 8010b40:	4413      	add	r3, r2
 8010b42:	7bfa      	ldrb	r2, [r7, #15]
 8010b44:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8010b46:	697b      	ldr	r3, [r7, #20]
 8010b48:	2b0a      	cmp	r3, #10
 8010b4a:	d9da      	bls.n	8010b02 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8010b4c:	683a      	ldr	r2, [r7, #0]
 8010b4e:	693b      	ldr	r3, [r7, #16]
 8010b50:	4413      	add	r3, r2
 8010b52:	3309      	adds	r3, #9
 8010b54:	2200      	movs	r2, #0
 8010b56:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	6a1b      	ldr	r3, [r3, #32]
 8010b5c:	7ada      	ldrb	r2, [r3, #11]
 8010b5e:	683b      	ldr	r3, [r7, #0]
 8010b60:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	6a1b      	ldr	r3, [r3, #32]
 8010b66:	331c      	adds	r3, #28
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f7fe fec5 	bl	800f8f8 <ld_dword>
 8010b6e:	4602      	mov	r2, r0
 8010b70:	683b      	ldr	r3, [r7, #0]
 8010b72:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	6a1b      	ldr	r3, [r3, #32]
 8010b78:	3316      	adds	r3, #22
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	f7fe febc 	bl	800f8f8 <ld_dword>
 8010b80:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8010b82:	68bb      	ldr	r3, [r7, #8]
 8010b84:	b29a      	uxth	r2, r3
 8010b86:	683b      	ldr	r3, [r7, #0]
 8010b88:	80da      	strh	r2, [r3, #6]
 8010b8a:	68bb      	ldr	r3, [r7, #8]
 8010b8c:	0c1b      	lsrs	r3, r3, #16
 8010b8e:	b29a      	uxth	r2, r3
 8010b90:	683b      	ldr	r3, [r7, #0]
 8010b92:	809a      	strh	r2, [r3, #4]
 8010b94:	e000      	b.n	8010b98 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010b96:	bf00      	nop
}
 8010b98:	3718      	adds	r7, #24
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}
	...

08010ba0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b088      	sub	sp, #32
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
 8010ba8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8010baa:	683b      	ldr	r3, [r7, #0]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	60fb      	str	r3, [r7, #12]
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	3324      	adds	r3, #36	; 0x24
 8010bb4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010bb6:	220b      	movs	r2, #11
 8010bb8:	2120      	movs	r1, #32
 8010bba:	68b8      	ldr	r0, [r7, #8]
 8010bbc:	f7fe ff27 	bl	800fa0e <mem_set>
	si = i = 0; ni = 8;
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	613b      	str	r3, [r7, #16]
 8010bc4:	693b      	ldr	r3, [r7, #16]
 8010bc6:	61fb      	str	r3, [r7, #28]
 8010bc8:	2308      	movs	r3, #8
 8010bca:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010bcc:	69fb      	ldr	r3, [r7, #28]
 8010bce:	1c5a      	adds	r2, r3, #1
 8010bd0:	61fa      	str	r2, [r7, #28]
 8010bd2:	68fa      	ldr	r2, [r7, #12]
 8010bd4:	4413      	add	r3, r2
 8010bd6:	781b      	ldrb	r3, [r3, #0]
 8010bd8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010bda:	7efb      	ldrb	r3, [r7, #27]
 8010bdc:	2b20      	cmp	r3, #32
 8010bde:	d94e      	bls.n	8010c7e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010be0:	7efb      	ldrb	r3, [r7, #27]
 8010be2:	2b2f      	cmp	r3, #47	; 0x2f
 8010be4:	d006      	beq.n	8010bf4 <create_name+0x54>
 8010be6:	7efb      	ldrb	r3, [r7, #27]
 8010be8:	2b5c      	cmp	r3, #92	; 0x5c
 8010bea:	d110      	bne.n	8010c0e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010bec:	e002      	b.n	8010bf4 <create_name+0x54>
 8010bee:	69fb      	ldr	r3, [r7, #28]
 8010bf0:	3301      	adds	r3, #1
 8010bf2:	61fb      	str	r3, [r7, #28]
 8010bf4:	68fa      	ldr	r2, [r7, #12]
 8010bf6:	69fb      	ldr	r3, [r7, #28]
 8010bf8:	4413      	add	r3, r2
 8010bfa:	781b      	ldrb	r3, [r3, #0]
 8010bfc:	2b2f      	cmp	r3, #47	; 0x2f
 8010bfe:	d0f6      	beq.n	8010bee <create_name+0x4e>
 8010c00:	68fa      	ldr	r2, [r7, #12]
 8010c02:	69fb      	ldr	r3, [r7, #28]
 8010c04:	4413      	add	r3, r2
 8010c06:	781b      	ldrb	r3, [r3, #0]
 8010c08:	2b5c      	cmp	r3, #92	; 0x5c
 8010c0a:	d0f0      	beq.n	8010bee <create_name+0x4e>
			break;
 8010c0c:	e038      	b.n	8010c80 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8010c0e:	7efb      	ldrb	r3, [r7, #27]
 8010c10:	2b2e      	cmp	r3, #46	; 0x2e
 8010c12:	d003      	beq.n	8010c1c <create_name+0x7c>
 8010c14:	693a      	ldr	r2, [r7, #16]
 8010c16:	697b      	ldr	r3, [r7, #20]
 8010c18:	429a      	cmp	r2, r3
 8010c1a:	d30c      	bcc.n	8010c36 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8010c1c:	697b      	ldr	r3, [r7, #20]
 8010c1e:	2b0b      	cmp	r3, #11
 8010c20:	d002      	beq.n	8010c28 <create_name+0x88>
 8010c22:	7efb      	ldrb	r3, [r7, #27]
 8010c24:	2b2e      	cmp	r3, #46	; 0x2e
 8010c26:	d001      	beq.n	8010c2c <create_name+0x8c>
 8010c28:	2306      	movs	r3, #6
 8010c2a:	e044      	b.n	8010cb6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8010c2c:	2308      	movs	r3, #8
 8010c2e:	613b      	str	r3, [r7, #16]
 8010c30:	230b      	movs	r3, #11
 8010c32:	617b      	str	r3, [r7, #20]
			continue;
 8010c34:	e022      	b.n	8010c7c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010c36:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	da04      	bge.n	8010c48 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8010c3e:	7efb      	ldrb	r3, [r7, #27]
 8010c40:	3b80      	subs	r3, #128	; 0x80
 8010c42:	4a1f      	ldr	r2, [pc, #124]	; (8010cc0 <create_name+0x120>)
 8010c44:	5cd3      	ldrb	r3, [r2, r3]
 8010c46:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010c48:	7efb      	ldrb	r3, [r7, #27]
 8010c4a:	4619      	mov	r1, r3
 8010c4c:	481d      	ldr	r0, [pc, #116]	; (8010cc4 <create_name+0x124>)
 8010c4e:	f7fe ff20 	bl	800fa92 <chk_chr>
 8010c52:	4603      	mov	r3, r0
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d001      	beq.n	8010c5c <create_name+0xbc>
 8010c58:	2306      	movs	r3, #6
 8010c5a:	e02c      	b.n	8010cb6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010c5c:	7efb      	ldrb	r3, [r7, #27]
 8010c5e:	2b60      	cmp	r3, #96	; 0x60
 8010c60:	d905      	bls.n	8010c6e <create_name+0xce>
 8010c62:	7efb      	ldrb	r3, [r7, #27]
 8010c64:	2b7a      	cmp	r3, #122	; 0x7a
 8010c66:	d802      	bhi.n	8010c6e <create_name+0xce>
 8010c68:	7efb      	ldrb	r3, [r7, #27]
 8010c6a:	3b20      	subs	r3, #32
 8010c6c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8010c6e:	693b      	ldr	r3, [r7, #16]
 8010c70:	1c5a      	adds	r2, r3, #1
 8010c72:	613a      	str	r2, [r7, #16]
 8010c74:	68ba      	ldr	r2, [r7, #8]
 8010c76:	4413      	add	r3, r2
 8010c78:	7efa      	ldrb	r2, [r7, #27]
 8010c7a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010c7c:	e7a6      	b.n	8010bcc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010c7e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010c80:	68fa      	ldr	r2, [r7, #12]
 8010c82:	69fb      	ldr	r3, [r7, #28]
 8010c84:	441a      	add	r2, r3
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8010c8a:	693b      	ldr	r3, [r7, #16]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d101      	bne.n	8010c94 <create_name+0xf4>
 8010c90:	2306      	movs	r3, #6
 8010c92:	e010      	b.n	8010cb6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010c94:	68bb      	ldr	r3, [r7, #8]
 8010c96:	781b      	ldrb	r3, [r3, #0]
 8010c98:	2be5      	cmp	r3, #229	; 0xe5
 8010c9a:	d102      	bne.n	8010ca2 <create_name+0x102>
 8010c9c:	68bb      	ldr	r3, [r7, #8]
 8010c9e:	2205      	movs	r2, #5
 8010ca0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010ca2:	7efb      	ldrb	r3, [r7, #27]
 8010ca4:	2b20      	cmp	r3, #32
 8010ca6:	d801      	bhi.n	8010cac <create_name+0x10c>
 8010ca8:	2204      	movs	r2, #4
 8010caa:	e000      	b.n	8010cae <create_name+0x10e>
 8010cac:	2200      	movs	r2, #0
 8010cae:	68bb      	ldr	r3, [r7, #8]
 8010cb0:	330b      	adds	r3, #11
 8010cb2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010cb4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	3720      	adds	r7, #32
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	bd80      	pop	{r7, pc}
 8010cbe:	bf00      	nop
 8010cc0:	0801d66c 	.word	0x0801d66c
 8010cc4:	0801d474 	.word	0x0801d474

08010cc8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b086      	sub	sp, #24
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
 8010cd0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010cd6:	693b      	ldr	r3, [r7, #16]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010cdc:	e002      	b.n	8010ce4 <follow_path+0x1c>
 8010cde:	683b      	ldr	r3, [r7, #0]
 8010ce0:	3301      	adds	r3, #1
 8010ce2:	603b      	str	r3, [r7, #0]
 8010ce4:	683b      	ldr	r3, [r7, #0]
 8010ce6:	781b      	ldrb	r3, [r3, #0]
 8010ce8:	2b2f      	cmp	r3, #47	; 0x2f
 8010cea:	d0f8      	beq.n	8010cde <follow_path+0x16>
 8010cec:	683b      	ldr	r3, [r7, #0]
 8010cee:	781b      	ldrb	r3, [r3, #0]
 8010cf0:	2b5c      	cmp	r3, #92	; 0x5c
 8010cf2:	d0f4      	beq.n	8010cde <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010cf4:	693b      	ldr	r3, [r7, #16]
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010cfa:	683b      	ldr	r3, [r7, #0]
 8010cfc:	781b      	ldrb	r3, [r3, #0]
 8010cfe:	2b1f      	cmp	r3, #31
 8010d00:	d80a      	bhi.n	8010d18 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	2280      	movs	r2, #128	; 0x80
 8010d06:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8010d0a:	2100      	movs	r1, #0
 8010d0c:	6878      	ldr	r0, [r7, #4]
 8010d0e:	f7ff fc3d 	bl	801058c <dir_sdi>
 8010d12:	4603      	mov	r3, r0
 8010d14:	75fb      	strb	r3, [r7, #23]
 8010d16:	e043      	b.n	8010da0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010d18:	463b      	mov	r3, r7
 8010d1a:	4619      	mov	r1, r3
 8010d1c:	6878      	ldr	r0, [r7, #4]
 8010d1e:	f7ff ff3f 	bl	8010ba0 <create_name>
 8010d22:	4603      	mov	r3, r0
 8010d24:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010d26:	7dfb      	ldrb	r3, [r7, #23]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d134      	bne.n	8010d96 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010d2c:	6878      	ldr	r0, [r7, #4]
 8010d2e:	f7ff fe50 	bl	80109d2 <dir_find>
 8010d32:	4603      	mov	r3, r0
 8010d34:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010d3c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010d3e:	7dfb      	ldrb	r3, [r7, #23]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d00a      	beq.n	8010d5a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010d44:	7dfb      	ldrb	r3, [r7, #23]
 8010d46:	2b04      	cmp	r3, #4
 8010d48:	d127      	bne.n	8010d9a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010d4a:	7afb      	ldrb	r3, [r7, #11]
 8010d4c:	f003 0304 	and.w	r3, r3, #4
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d122      	bne.n	8010d9a <follow_path+0xd2>
 8010d54:	2305      	movs	r3, #5
 8010d56:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010d58:	e01f      	b.n	8010d9a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010d5a:	7afb      	ldrb	r3, [r7, #11]
 8010d5c:	f003 0304 	and.w	r3, r3, #4
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d11c      	bne.n	8010d9e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010d64:	693b      	ldr	r3, [r7, #16]
 8010d66:	799b      	ldrb	r3, [r3, #6]
 8010d68:	f003 0310 	and.w	r3, r3, #16
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d102      	bne.n	8010d76 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010d70:	2305      	movs	r3, #5
 8010d72:	75fb      	strb	r3, [r7, #23]
 8010d74:	e014      	b.n	8010da0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	695b      	ldr	r3, [r3, #20]
 8010d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d84:	4413      	add	r3, r2
 8010d86:	4619      	mov	r1, r3
 8010d88:	68f8      	ldr	r0, [r7, #12]
 8010d8a:	f7ff fd86 	bl	801089a <ld_clust>
 8010d8e:	4602      	mov	r2, r0
 8010d90:	693b      	ldr	r3, [r7, #16]
 8010d92:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010d94:	e7c0      	b.n	8010d18 <follow_path+0x50>
			if (res != FR_OK) break;
 8010d96:	bf00      	nop
 8010d98:	e002      	b.n	8010da0 <follow_path+0xd8>
				break;
 8010d9a:	bf00      	nop
 8010d9c:	e000      	b.n	8010da0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010d9e:	bf00      	nop
			}
		}
	}

	return res;
 8010da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010da2:	4618      	mov	r0, r3
 8010da4:	3718      	adds	r7, #24
 8010da6:	46bd      	mov	sp, r7
 8010da8:	bd80      	pop	{r7, pc}

08010daa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010daa:	b480      	push	{r7}
 8010dac:	b087      	sub	sp, #28
 8010dae:	af00      	add	r7, sp, #0
 8010db0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010db2:	f04f 33ff 	mov.w	r3, #4294967295
 8010db6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d031      	beq.n	8010e24 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	617b      	str	r3, [r7, #20]
 8010dc6:	e002      	b.n	8010dce <get_ldnumber+0x24>
 8010dc8:	697b      	ldr	r3, [r7, #20]
 8010dca:	3301      	adds	r3, #1
 8010dcc:	617b      	str	r3, [r7, #20]
 8010dce:	697b      	ldr	r3, [r7, #20]
 8010dd0:	781b      	ldrb	r3, [r3, #0]
 8010dd2:	2b20      	cmp	r3, #32
 8010dd4:	d903      	bls.n	8010dde <get_ldnumber+0x34>
 8010dd6:	697b      	ldr	r3, [r7, #20]
 8010dd8:	781b      	ldrb	r3, [r3, #0]
 8010dda:	2b3a      	cmp	r3, #58	; 0x3a
 8010ddc:	d1f4      	bne.n	8010dc8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010dde:	697b      	ldr	r3, [r7, #20]
 8010de0:	781b      	ldrb	r3, [r3, #0]
 8010de2:	2b3a      	cmp	r3, #58	; 0x3a
 8010de4:	d11c      	bne.n	8010e20 <get_ldnumber+0x76>
			tp = *path;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	1c5a      	adds	r2, r3, #1
 8010df0:	60fa      	str	r2, [r7, #12]
 8010df2:	781b      	ldrb	r3, [r3, #0]
 8010df4:	3b30      	subs	r3, #48	; 0x30
 8010df6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010df8:	68bb      	ldr	r3, [r7, #8]
 8010dfa:	2b09      	cmp	r3, #9
 8010dfc:	d80e      	bhi.n	8010e1c <get_ldnumber+0x72>
 8010dfe:	68fa      	ldr	r2, [r7, #12]
 8010e00:	697b      	ldr	r3, [r7, #20]
 8010e02:	429a      	cmp	r2, r3
 8010e04:	d10a      	bne.n	8010e1c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010e06:	68bb      	ldr	r3, [r7, #8]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d107      	bne.n	8010e1c <get_ldnumber+0x72>
					vol = (int)i;
 8010e0c:	68bb      	ldr	r3, [r7, #8]
 8010e0e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010e10:	697b      	ldr	r3, [r7, #20]
 8010e12:	3301      	adds	r3, #1
 8010e14:	617b      	str	r3, [r7, #20]
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	697a      	ldr	r2, [r7, #20]
 8010e1a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010e1c:	693b      	ldr	r3, [r7, #16]
 8010e1e:	e002      	b.n	8010e26 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010e20:	2300      	movs	r3, #0
 8010e22:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010e24:	693b      	ldr	r3, [r7, #16]
}
 8010e26:	4618      	mov	r0, r3
 8010e28:	371c      	adds	r7, #28
 8010e2a:	46bd      	mov	sp, r7
 8010e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e30:	4770      	bx	lr
	...

08010e34 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b082      	sub	sp, #8
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
 8010e3c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	2200      	movs	r2, #0
 8010e42:	70da      	strb	r2, [r3, #3]
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	f04f 32ff 	mov.w	r2, #4294967295
 8010e4a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010e4c:	6839      	ldr	r1, [r7, #0]
 8010e4e:	6878      	ldr	r0, [r7, #4]
 8010e50:	f7ff f81c 	bl	800fe8c <move_window>
 8010e54:	4603      	mov	r3, r0
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d001      	beq.n	8010e5e <check_fs+0x2a>
 8010e5a:	2304      	movs	r3, #4
 8010e5c:	e038      	b.n	8010ed0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	3334      	adds	r3, #52	; 0x34
 8010e62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010e66:	4618      	mov	r0, r3
 8010e68:	f7fe fd2e 	bl	800f8c8 <ld_word>
 8010e6c:	4603      	mov	r3, r0
 8010e6e:	461a      	mov	r2, r3
 8010e70:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010e74:	429a      	cmp	r2, r3
 8010e76:	d001      	beq.n	8010e7c <check_fs+0x48>
 8010e78:	2303      	movs	r3, #3
 8010e7a:	e029      	b.n	8010ed0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010e82:	2be9      	cmp	r3, #233	; 0xe9
 8010e84:	d009      	beq.n	8010e9a <check_fs+0x66>
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010e8c:	2beb      	cmp	r3, #235	; 0xeb
 8010e8e:	d11e      	bne.n	8010ece <check_fs+0x9a>
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8010e96:	2b90      	cmp	r3, #144	; 0x90
 8010e98:	d119      	bne.n	8010ece <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	3334      	adds	r3, #52	; 0x34
 8010e9e:	3336      	adds	r3, #54	; 0x36
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f7fe fd29 	bl	800f8f8 <ld_dword>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010eac:	4a0a      	ldr	r2, [pc, #40]	; (8010ed8 <check_fs+0xa4>)
 8010eae:	4293      	cmp	r3, r2
 8010eb0:	d101      	bne.n	8010eb6 <check_fs+0x82>
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	e00c      	b.n	8010ed0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	3334      	adds	r3, #52	; 0x34
 8010eba:	3352      	adds	r3, #82	; 0x52
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f7fe fd1b 	bl	800f8f8 <ld_dword>
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	4a05      	ldr	r2, [pc, #20]	; (8010edc <check_fs+0xa8>)
 8010ec6:	4293      	cmp	r3, r2
 8010ec8:	d101      	bne.n	8010ece <check_fs+0x9a>
 8010eca:	2300      	movs	r3, #0
 8010ecc:	e000      	b.n	8010ed0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010ece:	2302      	movs	r3, #2
}
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	3708      	adds	r7, #8
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	bd80      	pop	{r7, pc}
 8010ed8:	00544146 	.word	0x00544146
 8010edc:	33544146 	.word	0x33544146

08010ee0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b096      	sub	sp, #88	; 0x58
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	60f8      	str	r0, [r7, #12]
 8010ee8:	60b9      	str	r1, [r7, #8]
 8010eea:	4613      	mov	r3, r2
 8010eec:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010eee:	68bb      	ldr	r3, [r7, #8]
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010ef4:	68f8      	ldr	r0, [r7, #12]
 8010ef6:	f7ff ff58 	bl	8010daa <get_ldnumber>
 8010efa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	da01      	bge.n	8010f06 <find_volume+0x26>
 8010f02:	230b      	movs	r3, #11
 8010f04:	e236      	b.n	8011374 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010f06:	4aac      	ldr	r2, [pc, #688]	; (80111b8 <find_volume+0x2d8>)
 8010f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f0e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d101      	bne.n	8010f1a <find_volume+0x3a>
 8010f16:	230c      	movs	r3, #12
 8010f18:	e22c      	b.n	8011374 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8010f1a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010f1c:	f7fe fdd4 	bl	800fac8 <lock_fs>
 8010f20:	4603      	mov	r3, r0
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d101      	bne.n	8010f2a <find_volume+0x4a>
 8010f26:	230f      	movs	r3, #15
 8010f28:	e224      	b.n	8011374 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8010f2a:	68bb      	ldr	r3, [r7, #8]
 8010f2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010f2e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010f30:	79fb      	ldrb	r3, [r7, #7]
 8010f32:	f023 0301 	bic.w	r3, r3, #1
 8010f36:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f3a:	781b      	ldrb	r3, [r3, #0]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d01a      	beq.n	8010f76 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8010f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f42:	785b      	ldrb	r3, [r3, #1]
 8010f44:	4618      	mov	r0, r3
 8010f46:	f7fe fc21 	bl	800f78c <disk_status>
 8010f4a:	4603      	mov	r3, r0
 8010f4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010f50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010f54:	f003 0301 	and.w	r3, r3, #1
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d10c      	bne.n	8010f76 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010f5c:	79fb      	ldrb	r3, [r7, #7]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d007      	beq.n	8010f72 <find_volume+0x92>
 8010f62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010f66:	f003 0304 	and.w	r3, r3, #4
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d001      	beq.n	8010f72 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8010f6e:	230a      	movs	r3, #10
 8010f70:	e200      	b.n	8011374 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8010f72:	2300      	movs	r3, #0
 8010f74:	e1fe      	b.n	8011374 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f78:	2200      	movs	r2, #0
 8010f7a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f7e:	b2da      	uxtb	r2, r3
 8010f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f82:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f86:	785b      	ldrb	r3, [r3, #1]
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f7fe fc19 	bl	800f7c0 <disk_initialize>
 8010f8e:	4603      	mov	r3, r0
 8010f90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010f94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010f98:	f003 0301 	and.w	r3, r3, #1
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d001      	beq.n	8010fa4 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010fa0:	2303      	movs	r3, #3
 8010fa2:	e1e7      	b.n	8011374 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010fa4:	79fb      	ldrb	r3, [r7, #7]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d007      	beq.n	8010fba <find_volume+0xda>
 8010faa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010fae:	f003 0304 	and.w	r3, r3, #4
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d001      	beq.n	8010fba <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8010fb6:	230a      	movs	r3, #10
 8010fb8:	e1dc      	b.n	8011374 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010fba:	2300      	movs	r3, #0
 8010fbc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010fbe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010fc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010fc2:	f7ff ff37 	bl	8010e34 <check_fs>
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010fcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010fd0:	2b02      	cmp	r3, #2
 8010fd2:	d14b      	bne.n	801106c <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	643b      	str	r3, [r7, #64]	; 0x40
 8010fd8:	e01f      	b.n	801101a <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fdc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010fe2:	011b      	lsls	r3, r3, #4
 8010fe4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010fe8:	4413      	add	r3, r2
 8010fea:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fee:	3304      	adds	r3, #4
 8010ff0:	781b      	ldrb	r3, [r3, #0]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d006      	beq.n	8011004 <find_volume+0x124>
 8010ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ff8:	3308      	adds	r3, #8
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	f7fe fc7c 	bl	800f8f8 <ld_dword>
 8011000:	4602      	mov	r2, r0
 8011002:	e000      	b.n	8011006 <find_volume+0x126>
 8011004:	2200      	movs	r2, #0
 8011006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011008:	009b      	lsls	r3, r3, #2
 801100a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801100e:	440b      	add	r3, r1
 8011010:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011016:	3301      	adds	r3, #1
 8011018:	643b      	str	r3, [r7, #64]	; 0x40
 801101a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801101c:	2b03      	cmp	r3, #3
 801101e:	d9dc      	bls.n	8010fda <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011020:	2300      	movs	r3, #0
 8011022:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011026:	2b00      	cmp	r3, #0
 8011028:	d002      	beq.n	8011030 <find_volume+0x150>
 801102a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801102c:	3b01      	subs	r3, #1
 801102e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011032:	009b      	lsls	r3, r3, #2
 8011034:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011038:	4413      	add	r3, r2
 801103a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801103e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011042:	2b00      	cmp	r3, #0
 8011044:	d005      	beq.n	8011052 <find_volume+0x172>
 8011046:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011048:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801104a:	f7ff fef3 	bl	8010e34 <check_fs>
 801104e:	4603      	mov	r3, r0
 8011050:	e000      	b.n	8011054 <find_volume+0x174>
 8011052:	2303      	movs	r3, #3
 8011054:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011058:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801105c:	2b01      	cmp	r3, #1
 801105e:	d905      	bls.n	801106c <find_volume+0x18c>
 8011060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011062:	3301      	adds	r3, #1
 8011064:	643b      	str	r3, [r7, #64]	; 0x40
 8011066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011068:	2b03      	cmp	r3, #3
 801106a:	d9e1      	bls.n	8011030 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801106c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011070:	2b04      	cmp	r3, #4
 8011072:	d101      	bne.n	8011078 <find_volume+0x198>
 8011074:	2301      	movs	r3, #1
 8011076:	e17d      	b.n	8011374 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011078:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801107c:	2b01      	cmp	r3, #1
 801107e:	d901      	bls.n	8011084 <find_volume+0x1a4>
 8011080:	230d      	movs	r3, #13
 8011082:	e177      	b.n	8011374 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011086:	3334      	adds	r3, #52	; 0x34
 8011088:	330b      	adds	r3, #11
 801108a:	4618      	mov	r0, r3
 801108c:	f7fe fc1c 	bl	800f8c8 <ld_word>
 8011090:	4603      	mov	r3, r0
 8011092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011096:	d001      	beq.n	801109c <find_volume+0x1bc>
 8011098:	230d      	movs	r3, #13
 801109a:	e16b      	b.n	8011374 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801109c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801109e:	3334      	adds	r3, #52	; 0x34
 80110a0:	3316      	adds	r3, #22
 80110a2:	4618      	mov	r0, r3
 80110a4:	f7fe fc10 	bl	800f8c8 <ld_word>
 80110a8:	4603      	mov	r3, r0
 80110aa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80110ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d106      	bne.n	80110c0 <find_volume+0x1e0>
 80110b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110b4:	3334      	adds	r3, #52	; 0x34
 80110b6:	3324      	adds	r3, #36	; 0x24
 80110b8:	4618      	mov	r0, r3
 80110ba:	f7fe fc1d 	bl	800f8f8 <ld_dword>
 80110be:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80110c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80110c4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80110c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110c8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80110cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110ce:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80110d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110d2:	789b      	ldrb	r3, [r3, #2]
 80110d4:	2b01      	cmp	r3, #1
 80110d6:	d005      	beq.n	80110e4 <find_volume+0x204>
 80110d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110da:	789b      	ldrb	r3, [r3, #2]
 80110dc:	2b02      	cmp	r3, #2
 80110de:	d001      	beq.n	80110e4 <find_volume+0x204>
 80110e0:	230d      	movs	r3, #13
 80110e2:	e147      	b.n	8011374 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80110e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110e6:	789b      	ldrb	r3, [r3, #2]
 80110e8:	461a      	mov	r2, r3
 80110ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110ec:	fb02 f303 	mul.w	r3, r2, r3
 80110f0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80110f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80110f8:	b29a      	uxth	r2, r3
 80110fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110fc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80110fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011100:	895b      	ldrh	r3, [r3, #10]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d008      	beq.n	8011118 <find_volume+0x238>
 8011106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011108:	895b      	ldrh	r3, [r3, #10]
 801110a:	461a      	mov	r2, r3
 801110c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801110e:	895b      	ldrh	r3, [r3, #10]
 8011110:	3b01      	subs	r3, #1
 8011112:	4013      	ands	r3, r2
 8011114:	2b00      	cmp	r3, #0
 8011116:	d001      	beq.n	801111c <find_volume+0x23c>
 8011118:	230d      	movs	r3, #13
 801111a:	e12b      	b.n	8011374 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801111c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801111e:	3334      	adds	r3, #52	; 0x34
 8011120:	3311      	adds	r3, #17
 8011122:	4618      	mov	r0, r3
 8011124:	f7fe fbd0 	bl	800f8c8 <ld_word>
 8011128:	4603      	mov	r3, r0
 801112a:	461a      	mov	r2, r3
 801112c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801112e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011132:	891b      	ldrh	r3, [r3, #8]
 8011134:	f003 030f 	and.w	r3, r3, #15
 8011138:	b29b      	uxth	r3, r3
 801113a:	2b00      	cmp	r3, #0
 801113c:	d001      	beq.n	8011142 <find_volume+0x262>
 801113e:	230d      	movs	r3, #13
 8011140:	e118      	b.n	8011374 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011144:	3334      	adds	r3, #52	; 0x34
 8011146:	3313      	adds	r3, #19
 8011148:	4618      	mov	r0, r3
 801114a:	f7fe fbbd 	bl	800f8c8 <ld_word>
 801114e:	4603      	mov	r3, r0
 8011150:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011154:	2b00      	cmp	r3, #0
 8011156:	d106      	bne.n	8011166 <find_volume+0x286>
 8011158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801115a:	3334      	adds	r3, #52	; 0x34
 801115c:	3320      	adds	r3, #32
 801115e:	4618      	mov	r0, r3
 8011160:	f7fe fbca 	bl	800f8f8 <ld_dword>
 8011164:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011168:	3334      	adds	r3, #52	; 0x34
 801116a:	330e      	adds	r3, #14
 801116c:	4618      	mov	r0, r3
 801116e:	f7fe fbab 	bl	800f8c8 <ld_word>
 8011172:	4603      	mov	r3, r0
 8011174:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011176:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011178:	2b00      	cmp	r3, #0
 801117a:	d101      	bne.n	8011180 <find_volume+0x2a0>
 801117c:	230d      	movs	r3, #13
 801117e:	e0f9      	b.n	8011374 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011180:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011184:	4413      	add	r3, r2
 8011186:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011188:	8912      	ldrh	r2, [r2, #8]
 801118a:	0912      	lsrs	r2, r2, #4
 801118c:	b292      	uxth	r2, r2
 801118e:	4413      	add	r3, r2
 8011190:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011192:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011196:	429a      	cmp	r2, r3
 8011198:	d201      	bcs.n	801119e <find_volume+0x2be>
 801119a:	230d      	movs	r3, #13
 801119c:	e0ea      	b.n	8011374 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801119e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80111a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111a2:	1ad3      	subs	r3, r2, r3
 80111a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80111a6:	8952      	ldrh	r2, [r2, #10]
 80111a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80111ac:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80111ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d103      	bne.n	80111bc <find_volume+0x2dc>
 80111b4:	230d      	movs	r3, #13
 80111b6:	e0dd      	b.n	8011374 <find_volume+0x494>
 80111b8:	200007c8 	.word	0x200007c8
		fmt = FS_FAT32;
 80111bc:	2303      	movs	r3, #3
 80111be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80111c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111c4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80111c8:	4293      	cmp	r3, r2
 80111ca:	d802      	bhi.n	80111d2 <find_volume+0x2f2>
 80111cc:	2302      	movs	r3, #2
 80111ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80111d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111d4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80111d8:	4293      	cmp	r3, r2
 80111da:	d802      	bhi.n	80111e2 <find_volume+0x302>
 80111dc:	2301      	movs	r3, #1
 80111de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80111e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111e4:	1c9a      	adds	r2, r3, #2
 80111e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111e8:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80111ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80111ee:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80111f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80111f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111f4:	441a      	add	r2, r3
 80111f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111f8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80111fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80111fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111fe:	441a      	add	r2, r3
 8011200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011202:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8011204:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011208:	2b03      	cmp	r3, #3
 801120a:	d11e      	bne.n	801124a <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801120c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801120e:	3334      	adds	r3, #52	; 0x34
 8011210:	332a      	adds	r3, #42	; 0x2a
 8011212:	4618      	mov	r0, r3
 8011214:	f7fe fb58 	bl	800f8c8 <ld_word>
 8011218:	4603      	mov	r3, r0
 801121a:	2b00      	cmp	r3, #0
 801121c:	d001      	beq.n	8011222 <find_volume+0x342>
 801121e:	230d      	movs	r3, #13
 8011220:	e0a8      	b.n	8011374 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011224:	891b      	ldrh	r3, [r3, #8]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d001      	beq.n	801122e <find_volume+0x34e>
 801122a:	230d      	movs	r3, #13
 801122c:	e0a2      	b.n	8011374 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801122e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011230:	3334      	adds	r3, #52	; 0x34
 8011232:	332c      	adds	r3, #44	; 0x2c
 8011234:	4618      	mov	r0, r3
 8011236:	f7fe fb5f 	bl	800f8f8 <ld_dword>
 801123a:	4602      	mov	r2, r0
 801123c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801123e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011242:	699b      	ldr	r3, [r3, #24]
 8011244:	009b      	lsls	r3, r3, #2
 8011246:	647b      	str	r3, [r7, #68]	; 0x44
 8011248:	e01f      	b.n	801128a <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801124a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801124c:	891b      	ldrh	r3, [r3, #8]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d101      	bne.n	8011256 <find_volume+0x376>
 8011252:	230d      	movs	r3, #13
 8011254:	e08e      	b.n	8011374 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011258:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801125a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801125c:	441a      	add	r2, r3
 801125e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011260:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011262:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011266:	2b02      	cmp	r3, #2
 8011268:	d103      	bne.n	8011272 <find_volume+0x392>
 801126a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801126c:	699b      	ldr	r3, [r3, #24]
 801126e:	005b      	lsls	r3, r3, #1
 8011270:	e00a      	b.n	8011288 <find_volume+0x3a8>
 8011272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011274:	699a      	ldr	r2, [r3, #24]
 8011276:	4613      	mov	r3, r2
 8011278:	005b      	lsls	r3, r3, #1
 801127a:	4413      	add	r3, r2
 801127c:	085a      	lsrs	r2, r3, #1
 801127e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011280:	699b      	ldr	r3, [r3, #24]
 8011282:	f003 0301 	and.w	r3, r3, #1
 8011286:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011288:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801128a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801128c:	69da      	ldr	r2, [r3, #28]
 801128e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011290:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8011294:	0a5b      	lsrs	r3, r3, #9
 8011296:	429a      	cmp	r2, r3
 8011298:	d201      	bcs.n	801129e <find_volume+0x3be>
 801129a:	230d      	movs	r3, #13
 801129c:	e06a      	b.n	8011374 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801129e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112a0:	f04f 32ff 	mov.w	r2, #4294967295
 80112a4:	615a      	str	r2, [r3, #20]
 80112a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112a8:	695a      	ldr	r2, [r3, #20]
 80112aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ac:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80112ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112b0:	2280      	movs	r2, #128	; 0x80
 80112b2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80112b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80112b8:	2b03      	cmp	r3, #3
 80112ba:	d149      	bne.n	8011350 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80112bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112be:	3334      	adds	r3, #52	; 0x34
 80112c0:	3330      	adds	r3, #48	; 0x30
 80112c2:	4618      	mov	r0, r3
 80112c4:	f7fe fb00 	bl	800f8c8 <ld_word>
 80112c8:	4603      	mov	r3, r0
 80112ca:	2b01      	cmp	r3, #1
 80112cc:	d140      	bne.n	8011350 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 80112ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112d0:	3301      	adds	r3, #1
 80112d2:	4619      	mov	r1, r3
 80112d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80112d6:	f7fe fdd9 	bl	800fe8c <move_window>
 80112da:	4603      	mov	r3, r0
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d137      	bne.n	8011350 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 80112e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112e2:	2200      	movs	r2, #0
 80112e4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80112e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112e8:	3334      	adds	r3, #52	; 0x34
 80112ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80112ee:	4618      	mov	r0, r3
 80112f0:	f7fe faea 	bl	800f8c8 <ld_word>
 80112f4:	4603      	mov	r3, r0
 80112f6:	461a      	mov	r2, r3
 80112f8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80112fc:	429a      	cmp	r2, r3
 80112fe:	d127      	bne.n	8011350 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011302:	3334      	adds	r3, #52	; 0x34
 8011304:	4618      	mov	r0, r3
 8011306:	f7fe faf7 	bl	800f8f8 <ld_dword>
 801130a:	4603      	mov	r3, r0
 801130c:	4a1b      	ldr	r2, [pc, #108]	; (801137c <find_volume+0x49c>)
 801130e:	4293      	cmp	r3, r2
 8011310:	d11e      	bne.n	8011350 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011314:	3334      	adds	r3, #52	; 0x34
 8011316:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801131a:	4618      	mov	r0, r3
 801131c:	f7fe faec 	bl	800f8f8 <ld_dword>
 8011320:	4603      	mov	r3, r0
 8011322:	4a17      	ldr	r2, [pc, #92]	; (8011380 <find_volume+0x4a0>)
 8011324:	4293      	cmp	r3, r2
 8011326:	d113      	bne.n	8011350 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801132a:	3334      	adds	r3, #52	; 0x34
 801132c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011330:	4618      	mov	r0, r3
 8011332:	f7fe fae1 	bl	800f8f8 <ld_dword>
 8011336:	4602      	mov	r2, r0
 8011338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801133a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801133c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801133e:	3334      	adds	r3, #52	; 0x34
 8011340:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011344:	4618      	mov	r0, r3
 8011346:	f7fe fad7 	bl	800f8f8 <ld_dword>
 801134a:	4602      	mov	r2, r0
 801134c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801134e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011352:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8011356:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011358:	4b0a      	ldr	r3, [pc, #40]	; (8011384 <find_volume+0x4a4>)
 801135a:	881b      	ldrh	r3, [r3, #0]
 801135c:	3301      	adds	r3, #1
 801135e:	b29a      	uxth	r2, r3
 8011360:	4b08      	ldr	r3, [pc, #32]	; (8011384 <find_volume+0x4a4>)
 8011362:	801a      	strh	r2, [r3, #0]
 8011364:	4b07      	ldr	r3, [pc, #28]	; (8011384 <find_volume+0x4a4>)
 8011366:	881a      	ldrh	r2, [r3, #0]
 8011368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801136a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801136c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801136e:	f7fe fd25 	bl	800fdbc <clear_lock>
#endif
	return FR_OK;
 8011372:	2300      	movs	r3, #0
}
 8011374:	4618      	mov	r0, r3
 8011376:	3758      	adds	r7, #88	; 0x58
 8011378:	46bd      	mov	sp, r7
 801137a:	bd80      	pop	{r7, pc}
 801137c:	41615252 	.word	0x41615252
 8011380:	61417272 	.word	0x61417272
 8011384:	200007cc 	.word	0x200007cc

08011388 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011388:	b580      	push	{r7, lr}
 801138a:	b084      	sub	sp, #16
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]
 8011390:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011392:	2309      	movs	r3, #9
 8011394:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d02e      	beq.n	80113fa <validate+0x72>
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d02a      	beq.n	80113fa <validate+0x72>
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	781b      	ldrb	r3, [r3, #0]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d025      	beq.n	80113fa <validate+0x72>
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	889a      	ldrh	r2, [r3, #4]
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	88db      	ldrh	r3, [r3, #6]
 80113b8:	429a      	cmp	r2, r3
 80113ba:	d11e      	bne.n	80113fa <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	4618      	mov	r0, r3
 80113c2:	f7fe fb81 	bl	800fac8 <lock_fs>
 80113c6:	4603      	mov	r3, r0
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d014      	beq.n	80113f6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	785b      	ldrb	r3, [r3, #1]
 80113d2:	4618      	mov	r0, r3
 80113d4:	f7fe f9da 	bl	800f78c <disk_status>
 80113d8:	4603      	mov	r3, r0
 80113da:	f003 0301 	and.w	r3, r3, #1
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d102      	bne.n	80113e8 <validate+0x60>
				res = FR_OK;
 80113e2:	2300      	movs	r3, #0
 80113e4:	73fb      	strb	r3, [r7, #15]
 80113e6:	e008      	b.n	80113fa <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	2100      	movs	r1, #0
 80113ee:	4618      	mov	r0, r3
 80113f0:	f7fe fb80 	bl	800faf4 <unlock_fs>
 80113f4:	e001      	b.n	80113fa <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80113f6:	230f      	movs	r3, #15
 80113f8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80113fa:	7bfb      	ldrb	r3, [r7, #15]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d102      	bne.n	8011406 <validate+0x7e>
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	e000      	b.n	8011408 <validate+0x80>
 8011406:	2300      	movs	r3, #0
 8011408:	683a      	ldr	r2, [r7, #0]
 801140a:	6013      	str	r3, [r2, #0]
	return res;
 801140c:	7bfb      	ldrb	r3, [r7, #15]
}
 801140e:	4618      	mov	r0, r3
 8011410:	3710      	adds	r7, #16
 8011412:	46bd      	mov	sp, r7
 8011414:	bd80      	pop	{r7, pc}
	...

08011418 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011418:	b580      	push	{r7, lr}
 801141a:	b088      	sub	sp, #32
 801141c:	af00      	add	r7, sp, #0
 801141e:	60f8      	str	r0, [r7, #12]
 8011420:	60b9      	str	r1, [r7, #8]
 8011422:	4613      	mov	r3, r2
 8011424:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011426:	68bb      	ldr	r3, [r7, #8]
 8011428:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801142a:	f107 0310 	add.w	r3, r7, #16
 801142e:	4618      	mov	r0, r3
 8011430:	f7ff fcbb 	bl	8010daa <get_ldnumber>
 8011434:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011436:	69fb      	ldr	r3, [r7, #28]
 8011438:	2b00      	cmp	r3, #0
 801143a:	da01      	bge.n	8011440 <f_mount+0x28>
 801143c:	230b      	movs	r3, #11
 801143e:	e048      	b.n	80114d2 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011440:	4a26      	ldr	r2, [pc, #152]	; (80114dc <f_mount+0xc4>)
 8011442:	69fb      	ldr	r3, [r7, #28]
 8011444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011448:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801144a:	69bb      	ldr	r3, [r7, #24]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d00f      	beq.n	8011470 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011450:	69b8      	ldr	r0, [r7, #24]
 8011452:	f7fe fcb3 	bl	800fdbc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8011456:	69bb      	ldr	r3, [r7, #24]
 8011458:	68db      	ldr	r3, [r3, #12]
 801145a:	4618      	mov	r0, r3
 801145c:	f001 f812 	bl	8012484 <ff_del_syncobj>
 8011460:	4603      	mov	r3, r0
 8011462:	2b00      	cmp	r3, #0
 8011464:	d101      	bne.n	801146a <f_mount+0x52>
 8011466:	2302      	movs	r3, #2
 8011468:	e033      	b.n	80114d2 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801146a:	69bb      	ldr	r3, [r7, #24]
 801146c:	2200      	movs	r2, #0
 801146e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d00f      	beq.n	8011496 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	2200      	movs	r2, #0
 801147a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 801147c:	69fb      	ldr	r3, [r7, #28]
 801147e:	b2da      	uxtb	r2, r3
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	330c      	adds	r3, #12
 8011484:	4619      	mov	r1, r3
 8011486:	4610      	mov	r0, r2
 8011488:	f000 ffe1 	bl	801244e <ff_cre_syncobj>
 801148c:	4603      	mov	r3, r0
 801148e:	2b00      	cmp	r3, #0
 8011490:	d101      	bne.n	8011496 <f_mount+0x7e>
 8011492:	2302      	movs	r3, #2
 8011494:	e01d      	b.n	80114d2 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011496:	68fa      	ldr	r2, [r7, #12]
 8011498:	4910      	ldr	r1, [pc, #64]	; (80114dc <f_mount+0xc4>)
 801149a:	69fb      	ldr	r3, [r7, #28]
 801149c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d002      	beq.n	80114ac <f_mount+0x94>
 80114a6:	79fb      	ldrb	r3, [r7, #7]
 80114a8:	2b01      	cmp	r3, #1
 80114aa:	d001      	beq.n	80114b0 <f_mount+0x98>
 80114ac:	2300      	movs	r3, #0
 80114ae:	e010      	b.n	80114d2 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80114b0:	f107 010c 	add.w	r1, r7, #12
 80114b4:	f107 0308 	add.w	r3, r7, #8
 80114b8:	2200      	movs	r2, #0
 80114ba:	4618      	mov	r0, r3
 80114bc:	f7ff fd10 	bl	8010ee0 <find_volume>
 80114c0:	4603      	mov	r3, r0
 80114c2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	7dfa      	ldrb	r2, [r7, #23]
 80114c8:	4611      	mov	r1, r2
 80114ca:	4618      	mov	r0, r3
 80114cc:	f7fe fb12 	bl	800faf4 <unlock_fs>
 80114d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80114d2:	4618      	mov	r0, r3
 80114d4:	3720      	adds	r7, #32
 80114d6:	46bd      	mov	sp, r7
 80114d8:	bd80      	pop	{r7, pc}
 80114da:	bf00      	nop
 80114dc:	200007c8 	.word	0x200007c8

080114e0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b098      	sub	sp, #96	; 0x60
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	60f8      	str	r0, [r7, #12]
 80114e8:	60b9      	str	r1, [r7, #8]
 80114ea:	4613      	mov	r3, r2
 80114ec:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d101      	bne.n	80114f8 <f_open+0x18>
 80114f4:	2309      	movs	r3, #9
 80114f6:	e1b4      	b.n	8011862 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80114f8:	79fb      	ldrb	r3, [r7, #7]
 80114fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80114fe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011500:	79fa      	ldrb	r2, [r7, #7]
 8011502:	f107 0110 	add.w	r1, r7, #16
 8011506:	f107 0308 	add.w	r3, r7, #8
 801150a:	4618      	mov	r0, r3
 801150c:	f7ff fce8 	bl	8010ee0 <find_volume>
 8011510:	4603      	mov	r3, r0
 8011512:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8011516:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801151a:	2b00      	cmp	r3, #0
 801151c:	f040 8191 	bne.w	8011842 <f_open+0x362>
		dj.obj.fs = fs;
 8011520:	693b      	ldr	r3, [r7, #16]
 8011522:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011524:	68ba      	ldr	r2, [r7, #8]
 8011526:	f107 0314 	add.w	r3, r7, #20
 801152a:	4611      	mov	r1, r2
 801152c:	4618      	mov	r0, r3
 801152e:	f7ff fbcb 	bl	8010cc8 <follow_path>
 8011532:	4603      	mov	r3, r0
 8011534:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011538:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801153c:	2b00      	cmp	r3, #0
 801153e:	d11a      	bne.n	8011576 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011540:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011544:	b25b      	sxtb	r3, r3
 8011546:	2b00      	cmp	r3, #0
 8011548:	da03      	bge.n	8011552 <f_open+0x72>
				res = FR_INVALID_NAME;
 801154a:	2306      	movs	r3, #6
 801154c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011550:	e011      	b.n	8011576 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011552:	79fb      	ldrb	r3, [r7, #7]
 8011554:	f023 0301 	bic.w	r3, r3, #1
 8011558:	2b00      	cmp	r3, #0
 801155a:	bf14      	ite	ne
 801155c:	2301      	movne	r3, #1
 801155e:	2300      	moveq	r3, #0
 8011560:	b2db      	uxtb	r3, r3
 8011562:	461a      	mov	r2, r3
 8011564:	f107 0314 	add.w	r3, r7, #20
 8011568:	4611      	mov	r1, r2
 801156a:	4618      	mov	r0, r3
 801156c:	f7fe fade 	bl	800fb2c <chk_lock>
 8011570:	4603      	mov	r3, r0
 8011572:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011576:	79fb      	ldrb	r3, [r7, #7]
 8011578:	f003 031c 	and.w	r3, r3, #28
 801157c:	2b00      	cmp	r3, #0
 801157e:	d07f      	beq.n	8011680 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8011580:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011584:	2b00      	cmp	r3, #0
 8011586:	d017      	beq.n	80115b8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011588:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801158c:	2b04      	cmp	r3, #4
 801158e:	d10e      	bne.n	80115ae <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011590:	f7fe fb28 	bl	800fbe4 <enq_lock>
 8011594:	4603      	mov	r3, r0
 8011596:	2b00      	cmp	r3, #0
 8011598:	d006      	beq.n	80115a8 <f_open+0xc8>
 801159a:	f107 0314 	add.w	r3, r7, #20
 801159e:	4618      	mov	r0, r3
 80115a0:	f7ff fa6c 	bl	8010a7c <dir_register>
 80115a4:	4603      	mov	r3, r0
 80115a6:	e000      	b.n	80115aa <f_open+0xca>
 80115a8:	2312      	movs	r3, #18
 80115aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80115ae:	79fb      	ldrb	r3, [r7, #7]
 80115b0:	f043 0308 	orr.w	r3, r3, #8
 80115b4:	71fb      	strb	r3, [r7, #7]
 80115b6:	e010      	b.n	80115da <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80115b8:	7ebb      	ldrb	r3, [r7, #26]
 80115ba:	f003 0311 	and.w	r3, r3, #17
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d003      	beq.n	80115ca <f_open+0xea>
					res = FR_DENIED;
 80115c2:	2307      	movs	r3, #7
 80115c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80115c8:	e007      	b.n	80115da <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80115ca:	79fb      	ldrb	r3, [r7, #7]
 80115cc:	f003 0304 	and.w	r3, r3, #4
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d002      	beq.n	80115da <f_open+0xfa>
 80115d4:	2308      	movs	r3, #8
 80115d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80115da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d168      	bne.n	80116b4 <f_open+0x1d4>
 80115e2:	79fb      	ldrb	r3, [r7, #7]
 80115e4:	f003 0308 	and.w	r3, r3, #8
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d063      	beq.n	80116b4 <f_open+0x1d4>
				dw = GET_FATTIME();
 80115ec:	f7fd fb8e 	bl	800ed0c <get_fattime>
 80115f0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80115f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115f4:	330e      	adds	r3, #14
 80115f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7fe f9bb 	bl	800f974 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80115fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011600:	3316      	adds	r3, #22
 8011602:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011604:	4618      	mov	r0, r3
 8011606:	f7fe f9b5 	bl	800f974 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801160a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801160c:	330b      	adds	r3, #11
 801160e:	2220      	movs	r2, #32
 8011610:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011612:	693b      	ldr	r3, [r7, #16]
 8011614:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011616:	4611      	mov	r1, r2
 8011618:	4618      	mov	r0, r3
 801161a:	f7ff f93e 	bl	801089a <ld_clust>
 801161e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011620:	693b      	ldr	r3, [r7, #16]
 8011622:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011624:	2200      	movs	r2, #0
 8011626:	4618      	mov	r0, r3
 8011628:	f7ff f956 	bl	80108d8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801162c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801162e:	331c      	adds	r3, #28
 8011630:	2100      	movs	r1, #0
 8011632:	4618      	mov	r0, r3
 8011634:	f7fe f99e 	bl	800f974 <st_dword>
					fs->wflag = 1;
 8011638:	693b      	ldr	r3, [r7, #16]
 801163a:	2201      	movs	r2, #1
 801163c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801163e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011640:	2b00      	cmp	r3, #0
 8011642:	d037      	beq.n	80116b4 <f_open+0x1d4>
						dw = fs->winsect;
 8011644:	693b      	ldr	r3, [r7, #16]
 8011646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011648:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801164a:	f107 0314 	add.w	r3, r7, #20
 801164e:	2200      	movs	r2, #0
 8011650:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8011652:	4618      	mov	r0, r3
 8011654:	f7fe fe69 	bl	801032a <remove_chain>
 8011658:	4603      	mov	r3, r0
 801165a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801165e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011662:	2b00      	cmp	r3, #0
 8011664:	d126      	bne.n	80116b4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8011666:	693b      	ldr	r3, [r7, #16]
 8011668:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801166a:	4618      	mov	r0, r3
 801166c:	f7fe fc0e 	bl	800fe8c <move_window>
 8011670:	4603      	mov	r3, r0
 8011672:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011676:	693b      	ldr	r3, [r7, #16]
 8011678:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801167a:	3a01      	subs	r2, #1
 801167c:	611a      	str	r2, [r3, #16]
 801167e:	e019      	b.n	80116b4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011680:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011684:	2b00      	cmp	r3, #0
 8011686:	d115      	bne.n	80116b4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011688:	7ebb      	ldrb	r3, [r7, #26]
 801168a:	f003 0310 	and.w	r3, r3, #16
 801168e:	2b00      	cmp	r3, #0
 8011690:	d003      	beq.n	801169a <f_open+0x1ba>
					res = FR_NO_FILE;
 8011692:	2304      	movs	r3, #4
 8011694:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011698:	e00c      	b.n	80116b4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801169a:	79fb      	ldrb	r3, [r7, #7]
 801169c:	f003 0302 	and.w	r3, r3, #2
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d007      	beq.n	80116b4 <f_open+0x1d4>
 80116a4:	7ebb      	ldrb	r3, [r7, #26]
 80116a6:	f003 0301 	and.w	r3, r3, #1
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d002      	beq.n	80116b4 <f_open+0x1d4>
						res = FR_DENIED;
 80116ae:	2307      	movs	r3, #7
 80116b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80116b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d128      	bne.n	801170e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80116bc:	79fb      	ldrb	r3, [r7, #7]
 80116be:	f003 0308 	and.w	r3, r3, #8
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d003      	beq.n	80116ce <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80116c6:	79fb      	ldrb	r3, [r7, #7]
 80116c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80116cc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80116ce:	693b      	ldr	r3, [r7, #16]
 80116d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80116d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80116dc:	79fb      	ldrb	r3, [r7, #7]
 80116de:	f023 0301 	bic.w	r3, r3, #1
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	bf14      	ite	ne
 80116e6:	2301      	movne	r3, #1
 80116e8:	2300      	moveq	r3, #0
 80116ea:	b2db      	uxtb	r3, r3
 80116ec:	461a      	mov	r2, r3
 80116ee:	f107 0314 	add.w	r3, r7, #20
 80116f2:	4611      	mov	r1, r2
 80116f4:	4618      	mov	r0, r3
 80116f6:	f7fe fa97 	bl	800fc28 <inc_lock>
 80116fa:	4602      	mov	r2, r0
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	691b      	ldr	r3, [r3, #16]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d102      	bne.n	801170e <f_open+0x22e>
 8011708:	2302      	movs	r3, #2
 801170a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801170e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011712:	2b00      	cmp	r3, #0
 8011714:	f040 8095 	bne.w	8011842 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011718:	693b      	ldr	r3, [r7, #16]
 801171a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801171c:	4611      	mov	r1, r2
 801171e:	4618      	mov	r0, r3
 8011720:	f7ff f8bb 	bl	801089a <ld_clust>
 8011724:	4602      	mov	r2, r0
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801172a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801172c:	331c      	adds	r3, #28
 801172e:	4618      	mov	r0, r3
 8011730:	f7fe f8e2 	bl	800f8f8 <ld_dword>
 8011734:	4602      	mov	r2, r0
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	2200      	movs	r2, #0
 801173e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011740:	693a      	ldr	r2, [r7, #16]
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011746:	693b      	ldr	r3, [r7, #16]
 8011748:	88da      	ldrh	r2, [r3, #6]
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	79fa      	ldrb	r2, [r7, #7]
 8011752:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	2200      	movs	r2, #0
 8011758:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	2200      	movs	r2, #0
 801175e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	2200      	movs	r2, #0
 8011764:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	3330      	adds	r3, #48	; 0x30
 801176a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801176e:	2100      	movs	r1, #0
 8011770:	4618      	mov	r0, r3
 8011772:	f7fe f94c 	bl	800fa0e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011776:	79fb      	ldrb	r3, [r7, #7]
 8011778:	f003 0320 	and.w	r3, r3, #32
 801177c:	2b00      	cmp	r3, #0
 801177e:	d060      	beq.n	8011842 <f_open+0x362>
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	68db      	ldr	r3, [r3, #12]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d05c      	beq.n	8011842 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	68da      	ldr	r2, [r3, #12]
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011790:	693b      	ldr	r3, [r7, #16]
 8011792:	895b      	ldrh	r3, [r3, #10]
 8011794:	025b      	lsls	r3, r3, #9
 8011796:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	689b      	ldr	r3, [r3, #8]
 801179c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	68db      	ldr	r3, [r3, #12]
 80117a2:	657b      	str	r3, [r7, #84]	; 0x54
 80117a4:	e016      	b.n	80117d4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80117aa:	4618      	mov	r0, r3
 80117ac:	f7fe fc29 	bl	8010002 <get_fat>
 80117b0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80117b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80117b4:	2b01      	cmp	r3, #1
 80117b6:	d802      	bhi.n	80117be <f_open+0x2de>
 80117b8:	2302      	movs	r3, #2
 80117ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80117be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80117c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117c4:	d102      	bne.n	80117cc <f_open+0x2ec>
 80117c6:	2301      	movs	r3, #1
 80117c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80117cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80117ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117d0:	1ad3      	subs	r3, r2, r3
 80117d2:	657b      	str	r3, [r7, #84]	; 0x54
 80117d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d103      	bne.n	80117e4 <f_open+0x304>
 80117dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80117de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117e0:	429a      	cmp	r2, r3
 80117e2:	d8e0      	bhi.n	80117a6 <f_open+0x2c6>
				}
				fp->clust = clst;
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80117e8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80117ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d127      	bne.n	8011842 <f_open+0x362>
 80117f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d022      	beq.n	8011842 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80117fc:	693b      	ldr	r3, [r7, #16]
 80117fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011800:	4618      	mov	r0, r3
 8011802:	f7fe fbdf 	bl	800ffc4 <clust2sect>
 8011806:	6478      	str	r0, [r7, #68]	; 0x44
 8011808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801180a:	2b00      	cmp	r3, #0
 801180c:	d103      	bne.n	8011816 <f_open+0x336>
						res = FR_INT_ERR;
 801180e:	2302      	movs	r3, #2
 8011810:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011814:	e015      	b.n	8011842 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011818:	0a5a      	lsrs	r2, r3, #9
 801181a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801181c:	441a      	add	r2, r3
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011822:	693b      	ldr	r3, [r7, #16]
 8011824:	7858      	ldrb	r0, [r3, #1]
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	6a1a      	ldr	r2, [r3, #32]
 8011830:	2301      	movs	r3, #1
 8011832:	f7fd ffeb 	bl	800f80c <disk_read>
 8011836:	4603      	mov	r3, r0
 8011838:	2b00      	cmp	r3, #0
 801183a:	d002      	beq.n	8011842 <f_open+0x362>
 801183c:	2301      	movs	r3, #1
 801183e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011842:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011846:	2b00      	cmp	r3, #0
 8011848:	d002      	beq.n	8011850 <f_open+0x370>
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	2200      	movs	r2, #0
 801184e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011850:	693b      	ldr	r3, [r7, #16]
 8011852:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8011856:	4611      	mov	r1, r2
 8011858:	4618      	mov	r0, r3
 801185a:	f7fe f94b 	bl	800faf4 <unlock_fs>
 801185e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8011862:	4618      	mov	r0, r3
 8011864:	3760      	adds	r7, #96	; 0x60
 8011866:	46bd      	mov	sp, r7
 8011868:	bd80      	pop	{r7, pc}

0801186a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801186a:	b580      	push	{r7, lr}
 801186c:	b08c      	sub	sp, #48	; 0x30
 801186e:	af00      	add	r7, sp, #0
 8011870:	60f8      	str	r0, [r7, #12]
 8011872:	60b9      	str	r1, [r7, #8]
 8011874:	607a      	str	r2, [r7, #4]
 8011876:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011878:	68bb      	ldr	r3, [r7, #8]
 801187a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801187c:	683b      	ldr	r3, [r7, #0]
 801187e:	2200      	movs	r2, #0
 8011880:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	f107 0210 	add.w	r2, r7, #16
 8011888:	4611      	mov	r1, r2
 801188a:	4618      	mov	r0, r3
 801188c:	f7ff fd7c 	bl	8011388 <validate>
 8011890:	4603      	mov	r3, r0
 8011892:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011896:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801189a:	2b00      	cmp	r3, #0
 801189c:	d107      	bne.n	80118ae <f_write+0x44>
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	7d5b      	ldrb	r3, [r3, #21]
 80118a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80118a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d009      	beq.n	80118c2 <f_write+0x58>
 80118ae:	693b      	ldr	r3, [r7, #16]
 80118b0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80118b4:	4611      	mov	r1, r2
 80118b6:	4618      	mov	r0, r3
 80118b8:	f7fe f91c 	bl	800faf4 <unlock_fs>
 80118bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118c0:	e173      	b.n	8011baa <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	7d1b      	ldrb	r3, [r3, #20]
 80118c6:	f003 0302 	and.w	r3, r3, #2
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d106      	bne.n	80118dc <f_write+0x72>
 80118ce:	693b      	ldr	r3, [r7, #16]
 80118d0:	2107      	movs	r1, #7
 80118d2:	4618      	mov	r0, r3
 80118d4:	f7fe f90e 	bl	800faf4 <unlock_fs>
 80118d8:	2307      	movs	r3, #7
 80118da:	e166      	b.n	8011baa <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	699a      	ldr	r2, [r3, #24]
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	441a      	add	r2, r3
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	699b      	ldr	r3, [r3, #24]
 80118e8:	429a      	cmp	r2, r3
 80118ea:	f080 814b 	bcs.w	8011b84 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	699b      	ldr	r3, [r3, #24]
 80118f2:	43db      	mvns	r3, r3
 80118f4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80118f6:	e145      	b.n	8011b84 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	699b      	ldr	r3, [r3, #24]
 80118fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011900:	2b00      	cmp	r3, #0
 8011902:	f040 8101 	bne.w	8011b08 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	699b      	ldr	r3, [r3, #24]
 801190a:	0a5b      	lsrs	r3, r3, #9
 801190c:	693a      	ldr	r2, [r7, #16]
 801190e:	8952      	ldrh	r2, [r2, #10]
 8011910:	3a01      	subs	r2, #1
 8011912:	4013      	ands	r3, r2
 8011914:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011916:	69bb      	ldr	r3, [r7, #24]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d14d      	bne.n	80119b8 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	699b      	ldr	r3, [r3, #24]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d10c      	bne.n	801193e <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	689b      	ldr	r3, [r3, #8]
 8011928:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801192a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801192c:	2b00      	cmp	r3, #0
 801192e:	d11a      	bne.n	8011966 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	2100      	movs	r1, #0
 8011934:	4618      	mov	r0, r3
 8011936:	f7fe fd5d 	bl	80103f4 <create_chain>
 801193a:	62b8      	str	r0, [r7, #40]	; 0x28
 801193c:	e013      	b.n	8011966 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011942:	2b00      	cmp	r3, #0
 8011944:	d007      	beq.n	8011956 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	699b      	ldr	r3, [r3, #24]
 801194a:	4619      	mov	r1, r3
 801194c:	68f8      	ldr	r0, [r7, #12]
 801194e:	f7fe fde9 	bl	8010524 <clmt_clust>
 8011952:	62b8      	str	r0, [r7, #40]	; 0x28
 8011954:	e007      	b.n	8011966 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011956:	68fa      	ldr	r2, [r7, #12]
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	69db      	ldr	r3, [r3, #28]
 801195c:	4619      	mov	r1, r3
 801195e:	4610      	mov	r0, r2
 8011960:	f7fe fd48 	bl	80103f4 <create_chain>
 8011964:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011968:	2b00      	cmp	r3, #0
 801196a:	f000 8110 	beq.w	8011b8e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801196e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011970:	2b01      	cmp	r3, #1
 8011972:	d109      	bne.n	8011988 <f_write+0x11e>
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	2202      	movs	r2, #2
 8011978:	755a      	strb	r2, [r3, #21]
 801197a:	693b      	ldr	r3, [r7, #16]
 801197c:	2102      	movs	r1, #2
 801197e:	4618      	mov	r0, r3
 8011980:	f7fe f8b8 	bl	800faf4 <unlock_fs>
 8011984:	2302      	movs	r3, #2
 8011986:	e110      	b.n	8011baa <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801198a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801198e:	d109      	bne.n	80119a4 <f_write+0x13a>
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	2201      	movs	r2, #1
 8011994:	755a      	strb	r2, [r3, #21]
 8011996:	693b      	ldr	r3, [r7, #16]
 8011998:	2101      	movs	r1, #1
 801199a:	4618      	mov	r0, r3
 801199c:	f7fe f8aa 	bl	800faf4 <unlock_fs>
 80119a0:	2301      	movs	r3, #1
 80119a2:	e102      	b.n	8011baa <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80119a8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	689b      	ldr	r3, [r3, #8]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d102      	bne.n	80119b8 <f_write+0x14e>
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80119b6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	7d1b      	ldrb	r3, [r3, #20]
 80119bc:	b25b      	sxtb	r3, r3
 80119be:	2b00      	cmp	r3, #0
 80119c0:	da1d      	bge.n	80119fe <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80119c2:	693b      	ldr	r3, [r7, #16]
 80119c4:	7858      	ldrb	r0, [r3, #1]
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	6a1a      	ldr	r2, [r3, #32]
 80119d0:	2301      	movs	r3, #1
 80119d2:	f7fd ff3b 	bl	800f84c <disk_write>
 80119d6:	4603      	mov	r3, r0
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d009      	beq.n	80119f0 <f_write+0x186>
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	2201      	movs	r2, #1
 80119e0:	755a      	strb	r2, [r3, #21]
 80119e2:	693b      	ldr	r3, [r7, #16]
 80119e4:	2101      	movs	r1, #1
 80119e6:	4618      	mov	r0, r3
 80119e8:	f7fe f884 	bl	800faf4 <unlock_fs>
 80119ec:	2301      	movs	r3, #1
 80119ee:	e0dc      	b.n	8011baa <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	7d1b      	ldrb	r3, [r3, #20]
 80119f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80119f8:	b2da      	uxtb	r2, r3
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80119fe:	693a      	ldr	r2, [r7, #16]
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	69db      	ldr	r3, [r3, #28]
 8011a04:	4619      	mov	r1, r3
 8011a06:	4610      	mov	r0, r2
 8011a08:	f7fe fadc 	bl	800ffc4 <clust2sect>
 8011a0c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011a0e:	697b      	ldr	r3, [r7, #20]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d109      	bne.n	8011a28 <f_write+0x1be>
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	2202      	movs	r2, #2
 8011a18:	755a      	strb	r2, [r3, #21]
 8011a1a:	693b      	ldr	r3, [r7, #16]
 8011a1c:	2102      	movs	r1, #2
 8011a1e:	4618      	mov	r0, r3
 8011a20:	f7fe f868 	bl	800faf4 <unlock_fs>
 8011a24:	2302      	movs	r3, #2
 8011a26:	e0c0      	b.n	8011baa <f_write+0x340>
			sect += csect;
 8011a28:	697a      	ldr	r2, [r7, #20]
 8011a2a:	69bb      	ldr	r3, [r7, #24]
 8011a2c:	4413      	add	r3, r2
 8011a2e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	0a5b      	lsrs	r3, r3, #9
 8011a34:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011a36:	6a3b      	ldr	r3, [r7, #32]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d041      	beq.n	8011ac0 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011a3c:	69ba      	ldr	r2, [r7, #24]
 8011a3e:	6a3b      	ldr	r3, [r7, #32]
 8011a40:	4413      	add	r3, r2
 8011a42:	693a      	ldr	r2, [r7, #16]
 8011a44:	8952      	ldrh	r2, [r2, #10]
 8011a46:	4293      	cmp	r3, r2
 8011a48:	d905      	bls.n	8011a56 <f_write+0x1ec>
					cc = fs->csize - csect;
 8011a4a:	693b      	ldr	r3, [r7, #16]
 8011a4c:	895b      	ldrh	r3, [r3, #10]
 8011a4e:	461a      	mov	r2, r3
 8011a50:	69bb      	ldr	r3, [r7, #24]
 8011a52:	1ad3      	subs	r3, r2, r3
 8011a54:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011a56:	693b      	ldr	r3, [r7, #16]
 8011a58:	7858      	ldrb	r0, [r3, #1]
 8011a5a:	6a3b      	ldr	r3, [r7, #32]
 8011a5c:	697a      	ldr	r2, [r7, #20]
 8011a5e:	69f9      	ldr	r1, [r7, #28]
 8011a60:	f7fd fef4 	bl	800f84c <disk_write>
 8011a64:	4603      	mov	r3, r0
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d009      	beq.n	8011a7e <f_write+0x214>
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	2201      	movs	r2, #1
 8011a6e:	755a      	strb	r2, [r3, #21]
 8011a70:	693b      	ldr	r3, [r7, #16]
 8011a72:	2101      	movs	r1, #1
 8011a74:	4618      	mov	r0, r3
 8011a76:	f7fe f83d 	bl	800faf4 <unlock_fs>
 8011a7a:	2301      	movs	r3, #1
 8011a7c:	e095      	b.n	8011baa <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	6a1a      	ldr	r2, [r3, #32]
 8011a82:	697b      	ldr	r3, [r7, #20]
 8011a84:	1ad3      	subs	r3, r2, r3
 8011a86:	6a3a      	ldr	r2, [r7, #32]
 8011a88:	429a      	cmp	r2, r3
 8011a8a:	d915      	bls.n	8011ab8 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	6a1a      	ldr	r2, [r3, #32]
 8011a96:	697b      	ldr	r3, [r7, #20]
 8011a98:	1ad3      	subs	r3, r2, r3
 8011a9a:	025b      	lsls	r3, r3, #9
 8011a9c:	69fa      	ldr	r2, [r7, #28]
 8011a9e:	4413      	add	r3, r2
 8011aa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011aa4:	4619      	mov	r1, r3
 8011aa6:	f7fd ff91 	bl	800f9cc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	7d1b      	ldrb	r3, [r3, #20]
 8011aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011ab2:	b2da      	uxtb	r2, r3
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011ab8:	6a3b      	ldr	r3, [r7, #32]
 8011aba:	025b      	lsls	r3, r3, #9
 8011abc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8011abe:	e044      	b.n	8011b4a <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	6a1b      	ldr	r3, [r3, #32]
 8011ac4:	697a      	ldr	r2, [r7, #20]
 8011ac6:	429a      	cmp	r2, r3
 8011ac8:	d01b      	beq.n	8011b02 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	699a      	ldr	r2, [r3, #24]
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011ad2:	429a      	cmp	r2, r3
 8011ad4:	d215      	bcs.n	8011b02 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011ad6:	693b      	ldr	r3, [r7, #16]
 8011ad8:	7858      	ldrb	r0, [r3, #1]
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011ae0:	2301      	movs	r3, #1
 8011ae2:	697a      	ldr	r2, [r7, #20]
 8011ae4:	f7fd fe92 	bl	800f80c <disk_read>
 8011ae8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d009      	beq.n	8011b02 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	2201      	movs	r2, #1
 8011af2:	755a      	strb	r2, [r3, #21]
 8011af4:	693b      	ldr	r3, [r7, #16]
 8011af6:	2101      	movs	r1, #1
 8011af8:	4618      	mov	r0, r3
 8011afa:	f7fd fffb 	bl	800faf4 <unlock_fs>
 8011afe:	2301      	movs	r3, #1
 8011b00:	e053      	b.n	8011baa <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	697a      	ldr	r2, [r7, #20]
 8011b06:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	699b      	ldr	r3, [r3, #24]
 8011b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b10:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8011b14:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	429a      	cmp	r2, r3
 8011b1c:	d901      	bls.n	8011b22 <f_write+0x2b8>
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	699b      	ldr	r3, [r3, #24]
 8011b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b30:	4413      	add	r3, r2
 8011b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b34:	69f9      	ldr	r1, [r7, #28]
 8011b36:	4618      	mov	r0, r3
 8011b38:	f7fd ff48 	bl	800f9cc <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	7d1b      	ldrb	r3, [r3, #20]
 8011b40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011b44:	b2da      	uxtb	r2, r3
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011b4a:	69fa      	ldr	r2, [r7, #28]
 8011b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b4e:	4413      	add	r3, r2
 8011b50:	61fb      	str	r3, [r7, #28]
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	699a      	ldr	r2, [r3, #24]
 8011b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b58:	441a      	add	r2, r3
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	619a      	str	r2, [r3, #24]
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	68da      	ldr	r2, [r3, #12]
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	699b      	ldr	r3, [r3, #24]
 8011b66:	429a      	cmp	r2, r3
 8011b68:	bf38      	it	cc
 8011b6a:	461a      	movcc	r2, r3
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	60da      	str	r2, [r3, #12]
 8011b70:	683b      	ldr	r3, [r7, #0]
 8011b72:	681a      	ldr	r2, [r3, #0]
 8011b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b76:	441a      	add	r2, r3
 8011b78:	683b      	ldr	r3, [r7, #0]
 8011b7a:	601a      	str	r2, [r3, #0]
 8011b7c:	687a      	ldr	r2, [r7, #4]
 8011b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b80:	1ad3      	subs	r3, r2, r3
 8011b82:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	f47f aeb6 	bne.w	80118f8 <f_write+0x8e>
 8011b8c:	e000      	b.n	8011b90 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011b8e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	7d1b      	ldrb	r3, [r3, #20]
 8011b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b98:	b2da      	uxtb	r2, r3
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011b9e:	693b      	ldr	r3, [r7, #16]
 8011ba0:	2100      	movs	r1, #0
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f7fd ffa6 	bl	800faf4 <unlock_fs>
 8011ba8:	2300      	movs	r3, #0
}
 8011baa:	4618      	mov	r0, r3
 8011bac:	3730      	adds	r7, #48	; 0x30
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	bd80      	pop	{r7, pc}

08011bb2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011bb2:	b580      	push	{r7, lr}
 8011bb4:	b086      	sub	sp, #24
 8011bb6:	af00      	add	r7, sp, #0
 8011bb8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	f107 0208 	add.w	r2, r7, #8
 8011bc0:	4611      	mov	r1, r2
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	f7ff fbe0 	bl	8011388 <validate>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011bcc:	7dfb      	ldrb	r3, [r7, #23]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d16d      	bne.n	8011cae <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	7d1b      	ldrb	r3, [r3, #20]
 8011bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d067      	beq.n	8011cae <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	7d1b      	ldrb	r3, [r3, #20]
 8011be2:	b25b      	sxtb	r3, r3
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	da1a      	bge.n	8011c1e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011be8:	68bb      	ldr	r3, [r7, #8]
 8011bea:	7858      	ldrb	r0, [r3, #1]
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	6a1a      	ldr	r2, [r3, #32]
 8011bf6:	2301      	movs	r3, #1
 8011bf8:	f7fd fe28 	bl	800f84c <disk_write>
 8011bfc:	4603      	mov	r3, r0
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d006      	beq.n	8011c10 <f_sync+0x5e>
 8011c02:	68bb      	ldr	r3, [r7, #8]
 8011c04:	2101      	movs	r1, #1
 8011c06:	4618      	mov	r0, r3
 8011c08:	f7fd ff74 	bl	800faf4 <unlock_fs>
 8011c0c:	2301      	movs	r3, #1
 8011c0e:	e055      	b.n	8011cbc <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	7d1b      	ldrb	r3, [r3, #20]
 8011c14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011c18:	b2da      	uxtb	r2, r3
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011c1e:	f7fd f875 	bl	800ed0c <get_fattime>
 8011c22:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011c24:	68ba      	ldr	r2, [r7, #8]
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c2a:	4619      	mov	r1, r3
 8011c2c:	4610      	mov	r0, r2
 8011c2e:	f7fe f92d 	bl	800fe8c <move_window>
 8011c32:	4603      	mov	r3, r0
 8011c34:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011c36:	7dfb      	ldrb	r3, [r7, #23]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d138      	bne.n	8011cae <f_sync+0xfc>
					dir = fp->dir_ptr;
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c40:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	330b      	adds	r3, #11
 8011c46:	781a      	ldrb	r2, [r3, #0]
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	330b      	adds	r3, #11
 8011c4c:	f042 0220 	orr.w	r2, r2, #32
 8011c50:	b2d2      	uxtb	r2, r2
 8011c52:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	6818      	ldr	r0, [r3, #0]
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	689b      	ldr	r3, [r3, #8]
 8011c5c:	461a      	mov	r2, r3
 8011c5e:	68f9      	ldr	r1, [r7, #12]
 8011c60:	f7fe fe3a 	bl	80108d8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	f103 021c 	add.w	r2, r3, #28
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	68db      	ldr	r3, [r3, #12]
 8011c6e:	4619      	mov	r1, r3
 8011c70:	4610      	mov	r0, r2
 8011c72:	f7fd fe7f 	bl	800f974 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	3316      	adds	r3, #22
 8011c7a:	6939      	ldr	r1, [r7, #16]
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	f7fd fe79 	bl	800f974 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	3312      	adds	r3, #18
 8011c86:	2100      	movs	r1, #0
 8011c88:	4618      	mov	r0, r3
 8011c8a:	f7fd fe58 	bl	800f93e <st_word>
					fs->wflag = 1;
 8011c8e:	68bb      	ldr	r3, [r7, #8]
 8011c90:	2201      	movs	r2, #1
 8011c92:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011c94:	68bb      	ldr	r3, [r7, #8]
 8011c96:	4618      	mov	r0, r3
 8011c98:	f7fe f926 	bl	800fee8 <sync_fs>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	7d1b      	ldrb	r3, [r3, #20]
 8011ca4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011ca8:	b2da      	uxtb	r2, r3
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011cae:	68bb      	ldr	r3, [r7, #8]
 8011cb0:	7dfa      	ldrb	r2, [r7, #23]
 8011cb2:	4611      	mov	r1, r2
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	f7fd ff1d 	bl	800faf4 <unlock_fs>
 8011cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	3718      	adds	r7, #24
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	bd80      	pop	{r7, pc}

08011cc4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b084      	sub	sp, #16
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011ccc:	6878      	ldr	r0, [r7, #4]
 8011cce:	f7ff ff70 	bl	8011bb2 <f_sync>
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011cd6:	7bfb      	ldrb	r3, [r7, #15]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d11d      	bne.n	8011d18 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	f107 0208 	add.w	r2, r7, #8
 8011ce2:	4611      	mov	r1, r2
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f7ff fb4f 	bl	8011388 <validate>
 8011cea:	4603      	mov	r3, r0
 8011cec:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011cee:	7bfb      	ldrb	r3, [r7, #15]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d111      	bne.n	8011d18 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	691b      	ldr	r3, [r3, #16]
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	f7fe f823 	bl	800fd44 <dec_lock>
 8011cfe:	4603      	mov	r3, r0
 8011d00:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011d02:	7bfb      	ldrb	r3, [r7, #15]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d102      	bne.n	8011d0e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8011d0e:	68bb      	ldr	r3, [r7, #8]
 8011d10:	2100      	movs	r1, #0
 8011d12:	4618      	mov	r0, r3
 8011d14:	f7fd feee 	bl	800faf4 <unlock_fs>
#endif
		}
	}
	return res;
 8011d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	3710      	adds	r7, #16
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	bd80      	pop	{r7, pc}

08011d22 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8011d22:	b580      	push	{r7, lr}
 8011d24:	b090      	sub	sp, #64	; 0x40
 8011d26:	af00      	add	r7, sp, #0
 8011d28:	6078      	str	r0, [r7, #4]
 8011d2a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	f107 0208 	add.w	r2, r7, #8
 8011d32:	4611      	mov	r1, r2
 8011d34:	4618      	mov	r0, r3
 8011d36:	f7ff fb27 	bl	8011388 <validate>
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8011d40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d103      	bne.n	8011d50 <f_lseek+0x2e>
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	7d5b      	ldrb	r3, [r3, #21]
 8011d4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8011d50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d009      	beq.n	8011d6c <f_lseek+0x4a>
 8011d58:	68bb      	ldr	r3, [r7, #8]
 8011d5a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8011d5e:	4611      	mov	r1, r2
 8011d60:	4618      	mov	r0, r3
 8011d62:	f7fd fec7 	bl	800faf4 <unlock_fs>
 8011d66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011d6a:	e229      	b.n	80121c0 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	f000 80ea 	beq.w	8011f4a <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011d76:	683b      	ldr	r3, [r7, #0]
 8011d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d7c:	d164      	bne.n	8011e48 <f_lseek+0x126>
			tbl = fp->cltbl;
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d82:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d86:	1d1a      	adds	r2, r3, #4
 8011d88:	627a      	str	r2, [r7, #36]	; 0x24
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	617b      	str	r3, [r7, #20]
 8011d8e:	2302      	movs	r3, #2
 8011d90:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	689b      	ldr	r3, [r3, #8]
 8011d96:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8011d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d044      	beq.n	8011e28 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011da0:	613b      	str	r3, [r7, #16]
 8011da2:	2300      	movs	r3, #0
 8011da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011da8:	3302      	adds	r3, #2
 8011daa:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8011dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dae:	60fb      	str	r3, [r7, #12]
 8011db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011db2:	3301      	adds	r3, #1
 8011db4:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011dba:	4618      	mov	r0, r3
 8011dbc:	f7fe f921 	bl	8010002 <get_fat>
 8011dc0:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8011dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dc4:	2b01      	cmp	r3, #1
 8011dc6:	d809      	bhi.n	8011ddc <f_lseek+0xba>
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	2202      	movs	r2, #2
 8011dcc:	755a      	strb	r2, [r3, #21]
 8011dce:	68bb      	ldr	r3, [r7, #8]
 8011dd0:	2102      	movs	r1, #2
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	f7fd fe8e 	bl	800faf4 <unlock_fs>
 8011dd8:	2302      	movs	r3, #2
 8011dda:	e1f1      	b.n	80121c0 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011de2:	d109      	bne.n	8011df8 <f_lseek+0xd6>
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	2201      	movs	r2, #1
 8011de8:	755a      	strb	r2, [r3, #21]
 8011dea:	68bb      	ldr	r3, [r7, #8]
 8011dec:	2101      	movs	r1, #1
 8011dee:	4618      	mov	r0, r3
 8011df0:	f7fd fe80 	bl	800faf4 <unlock_fs>
 8011df4:	2301      	movs	r3, #1
 8011df6:	e1e3      	b.n	80121c0 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	3301      	adds	r3, #1
 8011dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011dfe:	429a      	cmp	r2, r3
 8011e00:	d0d4      	beq.n	8011dac <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e04:	697b      	ldr	r3, [r7, #20]
 8011e06:	429a      	cmp	r2, r3
 8011e08:	d809      	bhi.n	8011e1e <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8011e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e0c:	1d1a      	adds	r2, r3, #4
 8011e0e:	627a      	str	r2, [r7, #36]	; 0x24
 8011e10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e12:	601a      	str	r2, [r3, #0]
 8011e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e16:	1d1a      	adds	r2, r3, #4
 8011e18:	627a      	str	r2, [r7, #36]	; 0x24
 8011e1a:	693a      	ldr	r2, [r7, #16]
 8011e1c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8011e1e:	68bb      	ldr	r3, [r7, #8]
 8011e20:	699b      	ldr	r3, [r3, #24]
 8011e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e24:	429a      	cmp	r2, r3
 8011e26:	d3ba      	bcc.n	8011d9e <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e2e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8011e30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e32:	697b      	ldr	r3, [r7, #20]
 8011e34:	429a      	cmp	r2, r3
 8011e36:	d803      	bhi.n	8011e40 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8011e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e3a:	2200      	movs	r2, #0
 8011e3c:	601a      	str	r2, [r3, #0]
 8011e3e:	e1b6      	b.n	80121ae <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011e40:	2311      	movs	r3, #17
 8011e42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8011e46:	e1b2      	b.n	80121ae <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	68db      	ldr	r3, [r3, #12]
 8011e4c:	683a      	ldr	r2, [r7, #0]
 8011e4e:	429a      	cmp	r2, r3
 8011e50:	d902      	bls.n	8011e58 <f_lseek+0x136>
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	68db      	ldr	r3, [r3, #12]
 8011e56:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	683a      	ldr	r2, [r7, #0]
 8011e5c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8011e5e:	683b      	ldr	r3, [r7, #0]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	f000 81a4 	beq.w	80121ae <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011e66:	683b      	ldr	r3, [r7, #0]
 8011e68:	3b01      	subs	r3, #1
 8011e6a:	4619      	mov	r1, r3
 8011e6c:	6878      	ldr	r0, [r7, #4]
 8011e6e:	f7fe fb59 	bl	8010524 <clmt_clust>
 8011e72:	4602      	mov	r2, r0
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011e78:	68ba      	ldr	r2, [r7, #8]
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	69db      	ldr	r3, [r3, #28]
 8011e7e:	4619      	mov	r1, r3
 8011e80:	4610      	mov	r0, r2
 8011e82:	f7fe f89f 	bl	800ffc4 <clust2sect>
 8011e86:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011e88:	69bb      	ldr	r3, [r7, #24]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d109      	bne.n	8011ea2 <f_lseek+0x180>
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	2202      	movs	r2, #2
 8011e92:	755a      	strb	r2, [r3, #21]
 8011e94:	68bb      	ldr	r3, [r7, #8]
 8011e96:	2102      	movs	r1, #2
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f7fd fe2b 	bl	800faf4 <unlock_fs>
 8011e9e:	2302      	movs	r3, #2
 8011ea0:	e18e      	b.n	80121c0 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011ea2:	683b      	ldr	r3, [r7, #0]
 8011ea4:	3b01      	subs	r3, #1
 8011ea6:	0a5b      	lsrs	r3, r3, #9
 8011ea8:	68ba      	ldr	r2, [r7, #8]
 8011eaa:	8952      	ldrh	r2, [r2, #10]
 8011eac:	3a01      	subs	r2, #1
 8011eae:	4013      	ands	r3, r2
 8011eb0:	69ba      	ldr	r2, [r7, #24]
 8011eb2:	4413      	add	r3, r2
 8011eb4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	699b      	ldr	r3, [r3, #24]
 8011eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	f000 8175 	beq.w	80121ae <f_lseek+0x48c>
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	6a1b      	ldr	r3, [r3, #32]
 8011ec8:	69ba      	ldr	r2, [r7, #24]
 8011eca:	429a      	cmp	r2, r3
 8011ecc:	f000 816f 	beq.w	80121ae <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	7d1b      	ldrb	r3, [r3, #20]
 8011ed4:	b25b      	sxtb	r3, r3
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	da1d      	bge.n	8011f16 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011eda:	68bb      	ldr	r3, [r7, #8]
 8011edc:	7858      	ldrb	r0, [r3, #1]
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	6a1a      	ldr	r2, [r3, #32]
 8011ee8:	2301      	movs	r3, #1
 8011eea:	f7fd fcaf 	bl	800f84c <disk_write>
 8011eee:	4603      	mov	r3, r0
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d009      	beq.n	8011f08 <f_lseek+0x1e6>
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	2201      	movs	r2, #1
 8011ef8:	755a      	strb	r2, [r3, #21]
 8011efa:	68bb      	ldr	r3, [r7, #8]
 8011efc:	2101      	movs	r1, #1
 8011efe:	4618      	mov	r0, r3
 8011f00:	f7fd fdf8 	bl	800faf4 <unlock_fs>
 8011f04:	2301      	movs	r3, #1
 8011f06:	e15b      	b.n	80121c0 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	7d1b      	ldrb	r3, [r3, #20]
 8011f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011f10:	b2da      	uxtb	r2, r3
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011f16:	68bb      	ldr	r3, [r7, #8]
 8011f18:	7858      	ldrb	r0, [r3, #1]
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011f20:	2301      	movs	r3, #1
 8011f22:	69ba      	ldr	r2, [r7, #24]
 8011f24:	f7fd fc72 	bl	800f80c <disk_read>
 8011f28:	4603      	mov	r3, r0
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d009      	beq.n	8011f42 <f_lseek+0x220>
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	2201      	movs	r2, #1
 8011f32:	755a      	strb	r2, [r3, #21]
 8011f34:	68bb      	ldr	r3, [r7, #8]
 8011f36:	2101      	movs	r1, #1
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f7fd fddb 	bl	800faf4 <unlock_fs>
 8011f3e:	2301      	movs	r3, #1
 8011f40:	e13e      	b.n	80121c0 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	69ba      	ldr	r2, [r7, #24]
 8011f46:	621a      	str	r2, [r3, #32]
 8011f48:	e131      	b.n	80121ae <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	68db      	ldr	r3, [r3, #12]
 8011f4e:	683a      	ldr	r2, [r7, #0]
 8011f50:	429a      	cmp	r2, r3
 8011f52:	d908      	bls.n	8011f66 <f_lseek+0x244>
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	7d1b      	ldrb	r3, [r3, #20]
 8011f58:	f003 0302 	and.w	r3, r3, #2
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d102      	bne.n	8011f66 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	68db      	ldr	r3, [r3, #12]
 8011f64:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	699b      	ldr	r3, [r3, #24]
 8011f6a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	637b      	str	r3, [r7, #52]	; 0x34
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011f74:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011f76:	683b      	ldr	r3, [r7, #0]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	f000 80c0 	beq.w	80120fe <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011f7e:	68bb      	ldr	r3, [r7, #8]
 8011f80:	895b      	ldrh	r3, [r3, #10]
 8011f82:	025b      	lsls	r3, r3, #9
 8011f84:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011f86:	6a3b      	ldr	r3, [r7, #32]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d01b      	beq.n	8011fc4 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011f8c:	683b      	ldr	r3, [r7, #0]
 8011f8e:	1e5a      	subs	r2, r3, #1
 8011f90:	69fb      	ldr	r3, [r7, #28]
 8011f92:	fbb2 f2f3 	udiv	r2, r2, r3
 8011f96:	6a3b      	ldr	r3, [r7, #32]
 8011f98:	1e59      	subs	r1, r3, #1
 8011f9a:	69fb      	ldr	r3, [r7, #28]
 8011f9c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011fa0:	429a      	cmp	r2, r3
 8011fa2:	d30f      	bcc.n	8011fc4 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8011fa4:	6a3b      	ldr	r3, [r7, #32]
 8011fa6:	1e5a      	subs	r2, r3, #1
 8011fa8:	69fb      	ldr	r3, [r7, #28]
 8011faa:	425b      	negs	r3, r3
 8011fac:	401a      	ands	r2, r3
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	699b      	ldr	r3, [r3, #24]
 8011fb6:	683a      	ldr	r2, [r7, #0]
 8011fb8:	1ad3      	subs	r3, r2, r3
 8011fba:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	69db      	ldr	r3, [r3, #28]
 8011fc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8011fc2:	e02c      	b.n	801201e <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	689b      	ldr	r3, [r3, #8]
 8011fc8:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d123      	bne.n	8012018 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	2100      	movs	r1, #0
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	f7fe fa0d 	bl	80103f4 <create_chain>
 8011fda:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fde:	2b01      	cmp	r3, #1
 8011fe0:	d109      	bne.n	8011ff6 <f_lseek+0x2d4>
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	2202      	movs	r2, #2
 8011fe6:	755a      	strb	r2, [r3, #21]
 8011fe8:	68bb      	ldr	r3, [r7, #8]
 8011fea:	2102      	movs	r1, #2
 8011fec:	4618      	mov	r0, r3
 8011fee:	f7fd fd81 	bl	800faf4 <unlock_fs>
 8011ff2:	2302      	movs	r3, #2
 8011ff4:	e0e4      	b.n	80121c0 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ffc:	d109      	bne.n	8012012 <f_lseek+0x2f0>
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	2201      	movs	r2, #1
 8012002:	755a      	strb	r2, [r3, #21]
 8012004:	68bb      	ldr	r3, [r7, #8]
 8012006:	2101      	movs	r1, #1
 8012008:	4618      	mov	r0, r3
 801200a:	f7fd fd73 	bl	800faf4 <unlock_fs>
 801200e:	2301      	movs	r3, #1
 8012010:	e0d6      	b.n	80121c0 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012016:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801201c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801201e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012020:	2b00      	cmp	r3, #0
 8012022:	d06c      	beq.n	80120fe <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8012024:	e044      	b.n	80120b0 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8012026:	683a      	ldr	r2, [r7, #0]
 8012028:	69fb      	ldr	r3, [r7, #28]
 801202a:	1ad3      	subs	r3, r2, r3
 801202c:	603b      	str	r3, [r7, #0]
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	699a      	ldr	r2, [r3, #24]
 8012032:	69fb      	ldr	r3, [r7, #28]
 8012034:	441a      	add	r2, r3
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	7d1b      	ldrb	r3, [r3, #20]
 801203e:	f003 0302 	and.w	r3, r3, #2
 8012042:	2b00      	cmp	r3, #0
 8012044:	d00b      	beq.n	801205e <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801204a:	4618      	mov	r0, r3
 801204c:	f7fe f9d2 	bl	80103f4 <create_chain>
 8012050:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8012052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012054:	2b00      	cmp	r3, #0
 8012056:	d108      	bne.n	801206a <f_lseek+0x348>
							ofs = 0; break;
 8012058:	2300      	movs	r3, #0
 801205a:	603b      	str	r3, [r7, #0]
 801205c:	e02c      	b.n	80120b8 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012062:	4618      	mov	r0, r3
 8012064:	f7fd ffcd 	bl	8010002 <get_fat>
 8012068:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801206a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801206c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012070:	d109      	bne.n	8012086 <f_lseek+0x364>
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	2201      	movs	r2, #1
 8012076:	755a      	strb	r2, [r3, #21]
 8012078:	68bb      	ldr	r3, [r7, #8]
 801207a:	2101      	movs	r1, #1
 801207c:	4618      	mov	r0, r3
 801207e:	f7fd fd39 	bl	800faf4 <unlock_fs>
 8012082:	2301      	movs	r3, #1
 8012084:	e09c      	b.n	80121c0 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8012086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012088:	2b01      	cmp	r3, #1
 801208a:	d904      	bls.n	8012096 <f_lseek+0x374>
 801208c:	68bb      	ldr	r3, [r7, #8]
 801208e:	699b      	ldr	r3, [r3, #24]
 8012090:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012092:	429a      	cmp	r2, r3
 8012094:	d309      	bcc.n	80120aa <f_lseek+0x388>
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	2202      	movs	r2, #2
 801209a:	755a      	strb	r2, [r3, #21]
 801209c:	68bb      	ldr	r3, [r7, #8]
 801209e:	2102      	movs	r1, #2
 80120a0:	4618      	mov	r0, r3
 80120a2:	f7fd fd27 	bl	800faf4 <unlock_fs>
 80120a6:	2302      	movs	r3, #2
 80120a8:	e08a      	b.n	80121c0 <f_lseek+0x49e>
					fp->clust = clst;
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80120ae:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80120b0:	683a      	ldr	r2, [r7, #0]
 80120b2:	69fb      	ldr	r3, [r7, #28]
 80120b4:	429a      	cmp	r2, r3
 80120b6:	d8b6      	bhi.n	8012026 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	699a      	ldr	r2, [r3, #24]
 80120bc:	683b      	ldr	r3, [r7, #0]
 80120be:	441a      	add	r2, r3
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80120c4:	683b      	ldr	r3, [r7, #0]
 80120c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d017      	beq.n	80120fe <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80120ce:	68bb      	ldr	r3, [r7, #8]
 80120d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80120d2:	4618      	mov	r0, r3
 80120d4:	f7fd ff76 	bl	800ffc4 <clust2sect>
 80120d8:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80120da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d109      	bne.n	80120f4 <f_lseek+0x3d2>
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	2202      	movs	r2, #2
 80120e4:	755a      	strb	r2, [r3, #21]
 80120e6:	68bb      	ldr	r3, [r7, #8]
 80120e8:	2102      	movs	r1, #2
 80120ea:	4618      	mov	r0, r3
 80120ec:	f7fd fd02 	bl	800faf4 <unlock_fs>
 80120f0:	2302      	movs	r3, #2
 80120f2:	e065      	b.n	80121c0 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 80120f4:	683b      	ldr	r3, [r7, #0]
 80120f6:	0a5b      	lsrs	r3, r3, #9
 80120f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80120fa:	4413      	add	r3, r2
 80120fc:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	699a      	ldr	r2, [r3, #24]
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	68db      	ldr	r3, [r3, #12]
 8012106:	429a      	cmp	r2, r3
 8012108:	d90a      	bls.n	8012120 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	699a      	ldr	r2, [r3, #24]
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	7d1b      	ldrb	r3, [r3, #20]
 8012116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801211a:	b2da      	uxtb	r2, r3
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	699b      	ldr	r3, [r3, #24]
 8012124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012128:	2b00      	cmp	r3, #0
 801212a:	d040      	beq.n	80121ae <f_lseek+0x48c>
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	6a1b      	ldr	r3, [r3, #32]
 8012130:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012132:	429a      	cmp	r2, r3
 8012134:	d03b      	beq.n	80121ae <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	7d1b      	ldrb	r3, [r3, #20]
 801213a:	b25b      	sxtb	r3, r3
 801213c:	2b00      	cmp	r3, #0
 801213e:	da1d      	bge.n	801217c <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012140:	68bb      	ldr	r3, [r7, #8]
 8012142:	7858      	ldrb	r0, [r3, #1]
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	6a1a      	ldr	r2, [r3, #32]
 801214e:	2301      	movs	r3, #1
 8012150:	f7fd fb7c 	bl	800f84c <disk_write>
 8012154:	4603      	mov	r3, r0
 8012156:	2b00      	cmp	r3, #0
 8012158:	d009      	beq.n	801216e <f_lseek+0x44c>
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	2201      	movs	r2, #1
 801215e:	755a      	strb	r2, [r3, #21]
 8012160:	68bb      	ldr	r3, [r7, #8]
 8012162:	2101      	movs	r1, #1
 8012164:	4618      	mov	r0, r3
 8012166:	f7fd fcc5 	bl	800faf4 <unlock_fs>
 801216a:	2301      	movs	r3, #1
 801216c:	e028      	b.n	80121c0 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	7d1b      	ldrb	r3, [r3, #20]
 8012172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012176:	b2da      	uxtb	r2, r3
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801217c:	68bb      	ldr	r3, [r7, #8]
 801217e:	7858      	ldrb	r0, [r3, #1]
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012186:	2301      	movs	r3, #1
 8012188:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801218a:	f7fd fb3f 	bl	800f80c <disk_read>
 801218e:	4603      	mov	r3, r0
 8012190:	2b00      	cmp	r3, #0
 8012192:	d009      	beq.n	80121a8 <f_lseek+0x486>
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	2201      	movs	r2, #1
 8012198:	755a      	strb	r2, [r3, #21]
 801219a:	68bb      	ldr	r3, [r7, #8]
 801219c:	2101      	movs	r1, #1
 801219e:	4618      	mov	r0, r3
 80121a0:	f7fd fca8 	bl	800faf4 <unlock_fs>
 80121a4:	2301      	movs	r3, #1
 80121a6:	e00b      	b.n	80121c0 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80121ac:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80121ae:	68bb      	ldr	r3, [r7, #8]
 80121b0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80121b4:	4611      	mov	r1, r2
 80121b6:	4618      	mov	r0, r3
 80121b8:	f7fd fc9c 	bl	800faf4 <unlock_fs>
 80121bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80121c0:	4618      	mov	r0, r3
 80121c2:	3740      	adds	r7, #64	; 0x40
 80121c4:	46bd      	mov	sp, r7
 80121c6:	bd80      	pop	{r7, pc}

080121c8 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b086      	sub	sp, #24
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
 80121d0:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d101      	bne.n	80121dc <f_opendir+0x14>
 80121d8:	2309      	movs	r3, #9
 80121da:	e06a      	b.n	80122b2 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80121e0:	f107 010c 	add.w	r1, r7, #12
 80121e4:	463b      	mov	r3, r7
 80121e6:	2200      	movs	r2, #0
 80121e8:	4618      	mov	r0, r3
 80121ea:	f7fe fe79 	bl	8010ee0 <find_volume>
 80121ee:	4603      	mov	r3, r0
 80121f0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80121f2:	7dfb      	ldrb	r3, [r7, #23]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d14f      	bne.n	8012298 <f_opendir+0xd0>
		obj->fs = fs;
 80121f8:	68fa      	ldr	r2, [r7, #12]
 80121fa:	693b      	ldr	r3, [r7, #16]
 80121fc:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80121fe:	683b      	ldr	r3, [r7, #0]
 8012200:	4619      	mov	r1, r3
 8012202:	6878      	ldr	r0, [r7, #4]
 8012204:	f7fe fd60 	bl	8010cc8 <follow_path>
 8012208:	4603      	mov	r3, r0
 801220a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801220c:	7dfb      	ldrb	r3, [r7, #23]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d13d      	bne.n	801228e <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012218:	b25b      	sxtb	r3, r3
 801221a:	2b00      	cmp	r3, #0
 801221c:	db12      	blt.n	8012244 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801221e:	693b      	ldr	r3, [r7, #16]
 8012220:	799b      	ldrb	r3, [r3, #6]
 8012222:	f003 0310 	and.w	r3, r3, #16
 8012226:	2b00      	cmp	r3, #0
 8012228:	d00a      	beq.n	8012240 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801222a:	68fa      	ldr	r2, [r7, #12]
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	6a1b      	ldr	r3, [r3, #32]
 8012230:	4619      	mov	r1, r3
 8012232:	4610      	mov	r0, r2
 8012234:	f7fe fb31 	bl	801089a <ld_clust>
 8012238:	4602      	mov	r2, r0
 801223a:	693b      	ldr	r3, [r7, #16]
 801223c:	609a      	str	r2, [r3, #8]
 801223e:	e001      	b.n	8012244 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8012240:	2305      	movs	r3, #5
 8012242:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8012244:	7dfb      	ldrb	r3, [r7, #23]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d121      	bne.n	801228e <f_opendir+0xc6>
				obj->id = fs->id;
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	88da      	ldrh	r2, [r3, #6]
 801224e:	693b      	ldr	r3, [r7, #16]
 8012250:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8012252:	2100      	movs	r1, #0
 8012254:	6878      	ldr	r0, [r7, #4]
 8012256:	f7fe f999 	bl	801058c <dir_sdi>
 801225a:	4603      	mov	r3, r0
 801225c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801225e:	7dfb      	ldrb	r3, [r7, #23]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d114      	bne.n	801228e <f_opendir+0xc6>
					if (obj->sclust) {
 8012264:	693b      	ldr	r3, [r7, #16]
 8012266:	689b      	ldr	r3, [r3, #8]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d00d      	beq.n	8012288 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801226c:	2100      	movs	r1, #0
 801226e:	6878      	ldr	r0, [r7, #4]
 8012270:	f7fd fcda 	bl	800fc28 <inc_lock>
 8012274:	4602      	mov	r2, r0
 8012276:	693b      	ldr	r3, [r7, #16]
 8012278:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801227a:	693b      	ldr	r3, [r7, #16]
 801227c:	691b      	ldr	r3, [r3, #16]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d105      	bne.n	801228e <f_opendir+0xc6>
 8012282:	2312      	movs	r3, #18
 8012284:	75fb      	strb	r3, [r7, #23]
 8012286:	e002      	b.n	801228e <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8012288:	693b      	ldr	r3, [r7, #16]
 801228a:	2200      	movs	r2, #0
 801228c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801228e:	7dfb      	ldrb	r3, [r7, #23]
 8012290:	2b04      	cmp	r3, #4
 8012292:	d101      	bne.n	8012298 <f_opendir+0xd0>
 8012294:	2305      	movs	r3, #5
 8012296:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8012298:	7dfb      	ldrb	r3, [r7, #23]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d002      	beq.n	80122a4 <f_opendir+0xdc>
 801229e:	693b      	ldr	r3, [r7, #16]
 80122a0:	2200      	movs	r2, #0
 80122a2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	7dfa      	ldrb	r2, [r7, #23]
 80122a8:	4611      	mov	r1, r2
 80122aa:	4618      	mov	r0, r3
 80122ac:	f7fd fc22 	bl	800faf4 <unlock_fs>
 80122b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80122b2:	4618      	mov	r0, r3
 80122b4:	3718      	adds	r7, #24
 80122b6:	46bd      	mov	sp, r7
 80122b8:	bd80      	pop	{r7, pc}

080122ba <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80122ba:	b580      	push	{r7, lr}
 80122bc:	b084      	sub	sp, #16
 80122be:	af00      	add	r7, sp, #0
 80122c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f107 0208 	add.w	r2, r7, #8
 80122c8:	4611      	mov	r1, r2
 80122ca:	4618      	mov	r0, r3
 80122cc:	f7ff f85c 	bl	8011388 <validate>
 80122d0:	4603      	mov	r3, r0
 80122d2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80122d4:	7bfb      	ldrb	r3, [r7, #15]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d115      	bne.n	8012306 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	691b      	ldr	r3, [r3, #16]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d006      	beq.n	80122f0 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	691b      	ldr	r3, [r3, #16]
 80122e6:	4618      	mov	r0, r3
 80122e8:	f7fd fd2c 	bl	800fd44 <dec_lock>
 80122ec:	4603      	mov	r3, r0
 80122ee:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80122f0:	7bfb      	ldrb	r3, [r7, #15]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d102      	bne.n	80122fc <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	2200      	movs	r2, #0
 80122fa:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 80122fc:	68bb      	ldr	r3, [r7, #8]
 80122fe:	2100      	movs	r1, #0
 8012300:	4618      	mov	r0, r3
 8012302:	f7fd fbf7 	bl	800faf4 <unlock_fs>
#endif
	}
	return res;
 8012306:	7bfb      	ldrb	r3, [r7, #15]
}
 8012308:	4618      	mov	r0, r3
 801230a:	3710      	adds	r7, #16
 801230c:	46bd      	mov	sp, r7
 801230e:	bd80      	pop	{r7, pc}

08012310 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8012310:	b580      	push	{r7, lr}
 8012312:	b084      	sub	sp, #16
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
 8012318:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	f107 0208 	add.w	r2, r7, #8
 8012320:	4611      	mov	r1, r2
 8012322:	4618      	mov	r0, r3
 8012324:	f7ff f830 	bl	8011388 <validate>
 8012328:	4603      	mov	r3, r0
 801232a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801232c:	7bfb      	ldrb	r3, [r7, #15]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d126      	bne.n	8012380 <f_readdir+0x70>
		if (!fno) {
 8012332:	683b      	ldr	r3, [r7, #0]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d106      	bne.n	8012346 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8012338:	2100      	movs	r1, #0
 801233a:	6878      	ldr	r0, [r7, #4]
 801233c:	f7fe f926 	bl	801058c <dir_sdi>
 8012340:	4603      	mov	r3, r0
 8012342:	73fb      	strb	r3, [r7, #15]
 8012344:	e01c      	b.n	8012380 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8012346:	2100      	movs	r1, #0
 8012348:	6878      	ldr	r0, [r7, #4]
 801234a:	f7fe fae5 	bl	8010918 <dir_read>
 801234e:	4603      	mov	r3, r0
 8012350:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8012352:	7bfb      	ldrb	r3, [r7, #15]
 8012354:	2b04      	cmp	r3, #4
 8012356:	d101      	bne.n	801235c <f_readdir+0x4c>
 8012358:	2300      	movs	r3, #0
 801235a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 801235c:	7bfb      	ldrb	r3, [r7, #15]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d10e      	bne.n	8012380 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8012362:	6839      	ldr	r1, [r7, #0]
 8012364:	6878      	ldr	r0, [r7, #4]
 8012366:	f7fe fbbb 	bl	8010ae0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801236a:	2100      	movs	r1, #0
 801236c:	6878      	ldr	r0, [r7, #4]
 801236e:	f7fe f988 	bl	8010682 <dir_next>
 8012372:	4603      	mov	r3, r0
 8012374:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8012376:	7bfb      	ldrb	r3, [r7, #15]
 8012378:	2b04      	cmp	r3, #4
 801237a:	d101      	bne.n	8012380 <f_readdir+0x70>
 801237c:	2300      	movs	r3, #0
 801237e:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8012380:	68bb      	ldr	r3, [r7, #8]
 8012382:	7bfa      	ldrb	r2, [r7, #15]
 8012384:	4611      	mov	r1, r2
 8012386:	4618      	mov	r0, r3
 8012388:	f7fd fbb4 	bl	800faf4 <unlock_fs>
 801238c:	7bfb      	ldrb	r3, [r7, #15]
}
 801238e:	4618      	mov	r0, r3
 8012390:	3710      	adds	r7, #16
 8012392:	46bd      	mov	sp, r7
 8012394:	bd80      	pop	{r7, pc}
	...

08012398 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012398:	b480      	push	{r7}
 801239a:	b087      	sub	sp, #28
 801239c:	af00      	add	r7, sp, #0
 801239e:	60f8      	str	r0, [r7, #12]
 80123a0:	60b9      	str	r1, [r7, #8]
 80123a2:	4613      	mov	r3, r2
 80123a4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80123a6:	2301      	movs	r3, #1
 80123a8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80123aa:	2300      	movs	r3, #0
 80123ac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80123ae:	4b1f      	ldr	r3, [pc, #124]	; (801242c <FATFS_LinkDriverEx+0x94>)
 80123b0:	7a5b      	ldrb	r3, [r3, #9]
 80123b2:	b2db      	uxtb	r3, r3
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d131      	bne.n	801241c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80123b8:	4b1c      	ldr	r3, [pc, #112]	; (801242c <FATFS_LinkDriverEx+0x94>)
 80123ba:	7a5b      	ldrb	r3, [r3, #9]
 80123bc:	b2db      	uxtb	r3, r3
 80123be:	461a      	mov	r2, r3
 80123c0:	4b1a      	ldr	r3, [pc, #104]	; (801242c <FATFS_LinkDriverEx+0x94>)
 80123c2:	2100      	movs	r1, #0
 80123c4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80123c6:	4b19      	ldr	r3, [pc, #100]	; (801242c <FATFS_LinkDriverEx+0x94>)
 80123c8:	7a5b      	ldrb	r3, [r3, #9]
 80123ca:	b2db      	uxtb	r3, r3
 80123cc:	4a17      	ldr	r2, [pc, #92]	; (801242c <FATFS_LinkDriverEx+0x94>)
 80123ce:	009b      	lsls	r3, r3, #2
 80123d0:	4413      	add	r3, r2
 80123d2:	68fa      	ldr	r2, [r7, #12]
 80123d4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80123d6:	4b15      	ldr	r3, [pc, #84]	; (801242c <FATFS_LinkDriverEx+0x94>)
 80123d8:	7a5b      	ldrb	r3, [r3, #9]
 80123da:	b2db      	uxtb	r3, r3
 80123dc:	461a      	mov	r2, r3
 80123de:	4b13      	ldr	r3, [pc, #76]	; (801242c <FATFS_LinkDriverEx+0x94>)
 80123e0:	4413      	add	r3, r2
 80123e2:	79fa      	ldrb	r2, [r7, #7]
 80123e4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80123e6:	4b11      	ldr	r3, [pc, #68]	; (801242c <FATFS_LinkDriverEx+0x94>)
 80123e8:	7a5b      	ldrb	r3, [r3, #9]
 80123ea:	b2db      	uxtb	r3, r3
 80123ec:	1c5a      	adds	r2, r3, #1
 80123ee:	b2d1      	uxtb	r1, r2
 80123f0:	4a0e      	ldr	r2, [pc, #56]	; (801242c <FATFS_LinkDriverEx+0x94>)
 80123f2:	7251      	strb	r1, [r2, #9]
 80123f4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80123f6:	7dbb      	ldrb	r3, [r7, #22]
 80123f8:	3330      	adds	r3, #48	; 0x30
 80123fa:	b2da      	uxtb	r2, r3
 80123fc:	68bb      	ldr	r3, [r7, #8]
 80123fe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012400:	68bb      	ldr	r3, [r7, #8]
 8012402:	3301      	adds	r3, #1
 8012404:	223a      	movs	r2, #58	; 0x3a
 8012406:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012408:	68bb      	ldr	r3, [r7, #8]
 801240a:	3302      	adds	r3, #2
 801240c:	222f      	movs	r2, #47	; 0x2f
 801240e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012410:	68bb      	ldr	r3, [r7, #8]
 8012412:	3303      	adds	r3, #3
 8012414:	2200      	movs	r2, #0
 8012416:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012418:	2300      	movs	r3, #0
 801241a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801241c:	7dfb      	ldrb	r3, [r7, #23]
}
 801241e:	4618      	mov	r0, r3
 8012420:	371c      	adds	r7, #28
 8012422:	46bd      	mov	sp, r7
 8012424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012428:	4770      	bx	lr
 801242a:	bf00      	nop
 801242c:	200007f0 	.word	0x200007f0

08012430 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012430:	b580      	push	{r7, lr}
 8012432:	b082      	sub	sp, #8
 8012434:	af00      	add	r7, sp, #0
 8012436:	6078      	str	r0, [r7, #4]
 8012438:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801243a:	2200      	movs	r2, #0
 801243c:	6839      	ldr	r1, [r7, #0]
 801243e:	6878      	ldr	r0, [r7, #4]
 8012440:	f7ff ffaa 	bl	8012398 <FATFS_LinkDriverEx>
 8012444:	4603      	mov	r3, r0
}
 8012446:	4618      	mov	r0, r3
 8012448:	3708      	adds	r7, #8
 801244a:	46bd      	mov	sp, r7
 801244c:	bd80      	pop	{r7, pc}

0801244e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801244e:	b580      	push	{r7, lr}
 8012450:	b084      	sub	sp, #16
 8012452:	af00      	add	r7, sp, #0
 8012454:	4603      	mov	r3, r0
 8012456:	6039      	str	r1, [r7, #0]
 8012458:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 801245a:	2200      	movs	r2, #0
 801245c:	2101      	movs	r1, #1
 801245e:	2001      	movs	r0, #1
 8012460:	f000 fa13 	bl	801288a <osSemaphoreNew>
 8012464:	4602      	mov	r2, r0
 8012466:	683b      	ldr	r3, [r7, #0]
 8012468:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 801246a:	683b      	ldr	r3, [r7, #0]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	2b00      	cmp	r3, #0
 8012470:	bf14      	ite	ne
 8012472:	2301      	movne	r3, #1
 8012474:	2300      	moveq	r3, #0
 8012476:	b2db      	uxtb	r3, r3
 8012478:	60fb      	str	r3, [r7, #12]

    return ret;
 801247a:	68fb      	ldr	r3, [r7, #12]
}
 801247c:	4618      	mov	r0, r3
 801247e:	3710      	adds	r7, #16
 8012480:	46bd      	mov	sp, r7
 8012482:	bd80      	pop	{r7, pc}

08012484 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b082      	sub	sp, #8
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 801248c:	6878      	ldr	r0, [r7, #4]
 801248e:	f000 fb1b 	bl	8012ac8 <osSemaphoreDelete>
#endif
    return 1;
 8012492:	2301      	movs	r3, #1
}
 8012494:	4618      	mov	r0, r3
 8012496:	3708      	adds	r7, #8
 8012498:	46bd      	mov	sp, r7
 801249a:	bd80      	pop	{r7, pc}

0801249c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801249c:	b580      	push	{r7, lr}
 801249e:	b084      	sub	sp, #16
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80124a4:	2300      	movs	r3, #0
 80124a6:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80124a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80124ac:	6878      	ldr	r0, [r7, #4]
 80124ae:	f000 fa75 	bl	801299c <osSemaphoreAcquire>
 80124b2:	4603      	mov	r3, r0
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d101      	bne.n	80124bc <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80124b8:	2301      	movs	r3, #1
 80124ba:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80124bc:	68fb      	ldr	r3, [r7, #12]
}
 80124be:	4618      	mov	r0, r3
 80124c0:	3710      	adds	r7, #16
 80124c2:	46bd      	mov	sp, r7
 80124c4:	bd80      	pop	{r7, pc}

080124c6 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80124c6:	b580      	push	{r7, lr}
 80124c8:	b082      	sub	sp, #8
 80124ca:	af00      	add	r7, sp, #0
 80124cc:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80124ce:	6878      	ldr	r0, [r7, #4]
 80124d0:	f000 fab6 	bl	8012a40 <osSemaphoreRelease>
#endif
}
 80124d4:	bf00      	nop
 80124d6:	3708      	adds	r7, #8
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}

080124dc <__NVIC_SetPriority>:
{
 80124dc:	b480      	push	{r7}
 80124de:	b083      	sub	sp, #12
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	4603      	mov	r3, r0
 80124e4:	6039      	str	r1, [r7, #0]
 80124e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80124e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	db0a      	blt.n	8012506 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80124f0:	683b      	ldr	r3, [r7, #0]
 80124f2:	b2da      	uxtb	r2, r3
 80124f4:	490c      	ldr	r1, [pc, #48]	; (8012528 <__NVIC_SetPriority+0x4c>)
 80124f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80124fa:	0112      	lsls	r2, r2, #4
 80124fc:	b2d2      	uxtb	r2, r2
 80124fe:	440b      	add	r3, r1
 8012500:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012504:	e00a      	b.n	801251c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012506:	683b      	ldr	r3, [r7, #0]
 8012508:	b2da      	uxtb	r2, r3
 801250a:	4908      	ldr	r1, [pc, #32]	; (801252c <__NVIC_SetPriority+0x50>)
 801250c:	79fb      	ldrb	r3, [r7, #7]
 801250e:	f003 030f 	and.w	r3, r3, #15
 8012512:	3b04      	subs	r3, #4
 8012514:	0112      	lsls	r2, r2, #4
 8012516:	b2d2      	uxtb	r2, r2
 8012518:	440b      	add	r3, r1
 801251a:	761a      	strb	r2, [r3, #24]
}
 801251c:	bf00      	nop
 801251e:	370c      	adds	r7, #12
 8012520:	46bd      	mov	sp, r7
 8012522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012526:	4770      	bx	lr
 8012528:	e000e100 	.word	0xe000e100
 801252c:	e000ed00 	.word	0xe000ed00

08012530 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8012530:	b580      	push	{r7, lr}
 8012532:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8012534:	4b05      	ldr	r3, [pc, #20]	; (801254c <SysTick_Handler+0x1c>)
 8012536:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8012538:	f002 fba0 	bl	8014c7c <xTaskGetSchedulerState>
 801253c:	4603      	mov	r3, r0
 801253e:	2b01      	cmp	r3, #1
 8012540:	d001      	beq.n	8012546 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8012542:	f003 fa89 	bl	8015a58 <xPortSysTickHandler>
  }
}
 8012546:	bf00      	nop
 8012548:	bd80      	pop	{r7, pc}
 801254a:	bf00      	nop
 801254c:	e000e010 	.word	0xe000e010

08012550 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012550:	b580      	push	{r7, lr}
 8012552:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8012554:	2100      	movs	r1, #0
 8012556:	f06f 0004 	mvn.w	r0, #4
 801255a:	f7ff ffbf 	bl	80124dc <__NVIC_SetPriority>
#endif
}
 801255e:	bf00      	nop
 8012560:	bd80      	pop	{r7, pc}
	...

08012564 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012564:	b480      	push	{r7}
 8012566:	b083      	sub	sp, #12
 8012568:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801256a:	f3ef 8305 	mrs	r3, IPSR
 801256e:	603b      	str	r3, [r7, #0]
  return(result);
 8012570:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012572:	2b00      	cmp	r3, #0
 8012574:	d003      	beq.n	801257e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8012576:	f06f 0305 	mvn.w	r3, #5
 801257a:	607b      	str	r3, [r7, #4]
 801257c:	e00c      	b.n	8012598 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801257e:	4b0a      	ldr	r3, [pc, #40]	; (80125a8 <osKernelInitialize+0x44>)
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d105      	bne.n	8012592 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012586:	4b08      	ldr	r3, [pc, #32]	; (80125a8 <osKernelInitialize+0x44>)
 8012588:	2201      	movs	r2, #1
 801258a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801258c:	2300      	movs	r3, #0
 801258e:	607b      	str	r3, [r7, #4]
 8012590:	e002      	b.n	8012598 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8012592:	f04f 33ff 	mov.w	r3, #4294967295
 8012596:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012598:	687b      	ldr	r3, [r7, #4]
}
 801259a:	4618      	mov	r0, r3
 801259c:	370c      	adds	r7, #12
 801259e:	46bd      	mov	sp, r7
 80125a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a4:	4770      	bx	lr
 80125a6:	bf00      	nop
 80125a8:	200007fc 	.word	0x200007fc

080125ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b082      	sub	sp, #8
 80125b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80125b2:	f3ef 8305 	mrs	r3, IPSR
 80125b6:	603b      	str	r3, [r7, #0]
  return(result);
 80125b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d003      	beq.n	80125c6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80125be:	f06f 0305 	mvn.w	r3, #5
 80125c2:	607b      	str	r3, [r7, #4]
 80125c4:	e010      	b.n	80125e8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80125c6:	4b0b      	ldr	r3, [pc, #44]	; (80125f4 <osKernelStart+0x48>)
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	2b01      	cmp	r3, #1
 80125cc:	d109      	bne.n	80125e2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80125ce:	f7ff ffbf 	bl	8012550 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80125d2:	4b08      	ldr	r3, [pc, #32]	; (80125f4 <osKernelStart+0x48>)
 80125d4:	2202      	movs	r2, #2
 80125d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80125d8:	f001 fee4 	bl	80143a4 <vTaskStartScheduler>
      stat = osOK;
 80125dc:	2300      	movs	r3, #0
 80125de:	607b      	str	r3, [r7, #4]
 80125e0:	e002      	b.n	80125e8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80125e2:	f04f 33ff 	mov.w	r3, #4294967295
 80125e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80125e8:	687b      	ldr	r3, [r7, #4]
}
 80125ea:	4618      	mov	r0, r3
 80125ec:	3708      	adds	r7, #8
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bd80      	pop	{r7, pc}
 80125f2:	bf00      	nop
 80125f4:	200007fc 	.word	0x200007fc

080125f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80125f8:	b580      	push	{r7, lr}
 80125fa:	b08e      	sub	sp, #56	; 0x38
 80125fc:	af04      	add	r7, sp, #16
 80125fe:	60f8      	str	r0, [r7, #12]
 8012600:	60b9      	str	r1, [r7, #8]
 8012602:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012604:	2300      	movs	r3, #0
 8012606:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012608:	f3ef 8305 	mrs	r3, IPSR
 801260c:	617b      	str	r3, [r7, #20]
  return(result);
 801260e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012610:	2b00      	cmp	r3, #0
 8012612:	d17f      	bne.n	8012714 <osThreadNew+0x11c>
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d07c      	beq.n	8012714 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 801261a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801261e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8012620:	2318      	movs	r3, #24
 8012622:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8012624:	2300      	movs	r3, #0
 8012626:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8012628:	f04f 33ff 	mov.w	r3, #4294967295
 801262c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d045      	beq.n	80126c0 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d002      	beq.n	8012642 <osThreadNew+0x4a>
        name = attr->name;
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	699b      	ldr	r3, [r3, #24]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d002      	beq.n	8012650 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	699b      	ldr	r3, [r3, #24]
 801264e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8012650:	69fb      	ldr	r3, [r7, #28]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d008      	beq.n	8012668 <osThreadNew+0x70>
 8012656:	69fb      	ldr	r3, [r7, #28]
 8012658:	2b38      	cmp	r3, #56	; 0x38
 801265a:	d805      	bhi.n	8012668 <osThreadNew+0x70>
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	685b      	ldr	r3, [r3, #4]
 8012660:	f003 0301 	and.w	r3, r3, #1
 8012664:	2b00      	cmp	r3, #0
 8012666:	d001      	beq.n	801266c <osThreadNew+0x74>
        return (NULL);
 8012668:	2300      	movs	r3, #0
 801266a:	e054      	b.n	8012716 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	695b      	ldr	r3, [r3, #20]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d003      	beq.n	801267c <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	695b      	ldr	r3, [r3, #20]
 8012678:	089b      	lsrs	r3, r3, #2
 801267a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	689b      	ldr	r3, [r3, #8]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d00e      	beq.n	80126a2 <osThreadNew+0xaa>
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	68db      	ldr	r3, [r3, #12]
 8012688:	2bbb      	cmp	r3, #187	; 0xbb
 801268a:	d90a      	bls.n	80126a2 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012690:	2b00      	cmp	r3, #0
 8012692:	d006      	beq.n	80126a2 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	695b      	ldr	r3, [r3, #20]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d002      	beq.n	80126a2 <osThreadNew+0xaa>
        mem = 1;
 801269c:	2301      	movs	r3, #1
 801269e:	61bb      	str	r3, [r7, #24]
 80126a0:	e010      	b.n	80126c4 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	689b      	ldr	r3, [r3, #8]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d10c      	bne.n	80126c4 <osThreadNew+0xcc>
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	68db      	ldr	r3, [r3, #12]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d108      	bne.n	80126c4 <osThreadNew+0xcc>
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	691b      	ldr	r3, [r3, #16]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d104      	bne.n	80126c4 <osThreadNew+0xcc>
          mem = 0;
 80126ba:	2300      	movs	r3, #0
 80126bc:	61bb      	str	r3, [r7, #24]
 80126be:	e001      	b.n	80126c4 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 80126c0:	2300      	movs	r3, #0
 80126c2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80126c4:	69bb      	ldr	r3, [r7, #24]
 80126c6:	2b01      	cmp	r3, #1
 80126c8:	d110      	bne.n	80126ec <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80126ce:	687a      	ldr	r2, [r7, #4]
 80126d0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80126d2:	9202      	str	r2, [sp, #8]
 80126d4:	9301      	str	r3, [sp, #4]
 80126d6:	69fb      	ldr	r3, [r7, #28]
 80126d8:	9300      	str	r3, [sp, #0]
 80126da:	68bb      	ldr	r3, [r7, #8]
 80126dc:	6a3a      	ldr	r2, [r7, #32]
 80126de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80126e0:	68f8      	ldr	r0, [r7, #12]
 80126e2:	f001 fb0b 	bl	8013cfc <xTaskCreateStatic>
 80126e6:	4603      	mov	r3, r0
 80126e8:	613b      	str	r3, [r7, #16]
 80126ea:	e013      	b.n	8012714 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 80126ec:	69bb      	ldr	r3, [r7, #24]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d110      	bne.n	8012714 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80126f2:	6a3b      	ldr	r3, [r7, #32]
 80126f4:	b29a      	uxth	r2, r3
 80126f6:	f107 0310 	add.w	r3, r7, #16
 80126fa:	9301      	str	r3, [sp, #4]
 80126fc:	69fb      	ldr	r3, [r7, #28]
 80126fe:	9300      	str	r3, [sp, #0]
 8012700:	68bb      	ldr	r3, [r7, #8]
 8012702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012704:	68f8      	ldr	r0, [r7, #12]
 8012706:	f001 fb56 	bl	8013db6 <xTaskCreate>
 801270a:	4603      	mov	r3, r0
 801270c:	2b01      	cmp	r3, #1
 801270e:	d001      	beq.n	8012714 <osThreadNew+0x11c>
            hTask = NULL;
 8012710:	2300      	movs	r3, #0
 8012712:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012714:	693b      	ldr	r3, [r7, #16]
}
 8012716:	4618      	mov	r0, r3
 8012718:	3728      	adds	r7, #40	; 0x28
 801271a:	46bd      	mov	sp, r7
 801271c:	bd80      	pop	{r7, pc}

0801271e <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 801271e:	b580      	push	{r7, lr}
 8012720:	b082      	sub	sp, #8
 8012722:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8012724:	f002 fa9a 	bl	8014c5c <xTaskGetCurrentTaskHandle>
 8012728:	6078      	str	r0, [r7, #4]

  return (id);
 801272a:	687b      	ldr	r3, [r7, #4]
}
 801272c:	4618      	mov	r0, r3
 801272e:	3708      	adds	r7, #8
 8012730:	46bd      	mov	sp, r7
 8012732:	bd80      	pop	{r7, pc}

08012734 <osThreadGetState>:

osThreadState_t osThreadGetState (osThreadId_t thread_id) {
 8012734:	b580      	push	{r7, lr}
 8012736:	b086      	sub	sp, #24
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012740:	f3ef 8305 	mrs	r3, IPSR
 8012744:	60fb      	str	r3, [r7, #12]
  return(result);
 8012746:	68fb      	ldr	r3, [r7, #12]
  osThreadState_t state;

  if (IS_IRQ() || (hTask == NULL)) {
 8012748:	2b00      	cmp	r3, #0
 801274a:	d102      	bne.n	8012752 <osThreadGetState+0x1e>
 801274c:	693b      	ldr	r3, [r7, #16]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d103      	bne.n	801275a <osThreadGetState+0x26>
    state = osThreadError;
 8012752:	f04f 33ff 	mov.w	r3, #4294967295
 8012756:	617b      	str	r3, [r7, #20]
 8012758:	e022      	b.n	80127a0 <osThreadGetState+0x6c>
  }
  else {
    switch (eTaskGetState (hTask)) {
 801275a:	6938      	ldr	r0, [r7, #16]
 801275c:	f001 fd2c 	bl	80141b8 <eTaskGetState>
 8012760:	4603      	mov	r3, r0
 8012762:	2b04      	cmp	r3, #4
 8012764:	d818      	bhi.n	8012798 <osThreadGetState+0x64>
 8012766:	a201      	add	r2, pc, #4	; (adr r2, 801276c <osThreadGetState+0x38>)
 8012768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801276c:	08012781 	.word	0x08012781
 8012770:	08012787 	.word	0x08012787
 8012774:	0801278d 	.word	0x0801278d
 8012778:	0801278d 	.word	0x0801278d
 801277c:	08012793 	.word	0x08012793
      case eRunning:   state = osThreadRunning;    break;
 8012780:	2302      	movs	r3, #2
 8012782:	617b      	str	r3, [r7, #20]
 8012784:	e00c      	b.n	80127a0 <osThreadGetState+0x6c>
      case eReady:     state = osThreadReady;      break;
 8012786:	2301      	movs	r3, #1
 8012788:	617b      	str	r3, [r7, #20]
 801278a:	e009      	b.n	80127a0 <osThreadGetState+0x6c>
      case eBlocked:
      case eSuspended: state = osThreadBlocked;    break;
 801278c:	2303      	movs	r3, #3
 801278e:	617b      	str	r3, [r7, #20]
 8012790:	e006      	b.n	80127a0 <osThreadGetState+0x6c>
      case eDeleted:   state = osThreadTerminated; break;
 8012792:	2304      	movs	r3, #4
 8012794:	617b      	str	r3, [r7, #20]
 8012796:	e003      	b.n	80127a0 <osThreadGetState+0x6c>
      case eInvalid:
      default:         state = osThreadError;      break;
 8012798:	f04f 33ff 	mov.w	r3, #4294967295
 801279c:	617b      	str	r3, [r7, #20]
 801279e:	bf00      	nop
    }
  }

  return (state);
 80127a0:	697b      	ldr	r3, [r7, #20]
}
 80127a2:	4618      	mov	r0, r3
 80127a4:	3718      	adds	r7, #24
 80127a6:	46bd      	mov	sp, r7
 80127a8:	bd80      	pop	{r7, pc}
 80127aa:	bf00      	nop

080127ac <osThreadResume>:
  }

  return (stat);
}

osStatus_t osThreadResume (osThreadId_t thread_id) {
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b086      	sub	sp, #24
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80127b8:	f3ef 8305 	mrs	r3, IPSR
 80127bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80127be:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d003      	beq.n	80127cc <osThreadResume+0x20>
    stat = osErrorISR;
 80127c4:	f06f 0305 	mvn.w	r3, #5
 80127c8:	617b      	str	r3, [r7, #20]
 80127ca:	e00b      	b.n	80127e4 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 80127cc:	693b      	ldr	r3, [r7, #16]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d103      	bne.n	80127da <osThreadResume+0x2e>
    stat = osErrorParameter;
 80127d2:	f06f 0303 	mvn.w	r3, #3
 80127d6:	617b      	str	r3, [r7, #20]
 80127d8:	e004      	b.n	80127e4 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 80127da:	2300      	movs	r3, #0
 80127dc:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 80127de:	6938      	ldr	r0, [r7, #16]
 80127e0:	f001 fd82 	bl	80142e8 <vTaskResume>
  }

  return (stat);
 80127e4:	697b      	ldr	r3, [r7, #20]
}
 80127e6:	4618      	mov	r0, r3
 80127e8:	3718      	adds	r7, #24
 80127ea:	46bd      	mov	sp, r7
 80127ec:	bd80      	pop	{r7, pc}

080127ee <osThreadExit>:
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 80127ee:	b580      	push	{r7, lr}
 80127f0:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 80127f2:	2000      	movs	r0, #0
 80127f4:	f001 fc3a 	bl	801406c <vTaskDelete>
#endif
  for (;;);
 80127f8:	e7fe      	b.n	80127f8 <osThreadExit+0xa>

080127fa <osThreadTerminate>:
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 80127fa:	b580      	push	{r7, lr}
 80127fc:	b086      	sub	sp, #24
 80127fe:	af00      	add	r7, sp, #0
 8012800:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012806:	f3ef 8305 	mrs	r3, IPSR
 801280a:	60bb      	str	r3, [r7, #8]
  return(result);
 801280c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 801280e:	2b00      	cmp	r3, #0
 8012810:	d003      	beq.n	801281a <osThreadTerminate+0x20>
    stat = osErrorISR;
 8012812:	f06f 0305 	mvn.w	r3, #5
 8012816:	617b      	str	r3, [r7, #20]
 8012818:	e017      	b.n	801284a <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 801281a:	693b      	ldr	r3, [r7, #16]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d103      	bne.n	8012828 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8012820:	f06f 0303 	mvn.w	r3, #3
 8012824:	617b      	str	r3, [r7, #20]
 8012826:	e010      	b.n	801284a <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8012828:	6938      	ldr	r0, [r7, #16]
 801282a:	f001 fcc5 	bl	80141b8 <eTaskGetState>
 801282e:	4603      	mov	r3, r0
 8012830:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8012832:	7bfb      	ldrb	r3, [r7, #15]
 8012834:	2b04      	cmp	r3, #4
 8012836:	d005      	beq.n	8012844 <osThreadTerminate+0x4a>
      stat = osOK;
 8012838:	2300      	movs	r3, #0
 801283a:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 801283c:	6938      	ldr	r0, [r7, #16]
 801283e:	f001 fc15 	bl	801406c <vTaskDelete>
 8012842:	e002      	b.n	801284a <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8012844:	f06f 0302 	mvn.w	r3, #2
 8012848:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 801284a:	697b      	ldr	r3, [r7, #20]
}
 801284c:	4618      	mov	r0, r3
 801284e:	3718      	adds	r7, #24
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}

08012854 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8012854:	b580      	push	{r7, lr}
 8012856:	b084      	sub	sp, #16
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801285c:	f3ef 8305 	mrs	r3, IPSR
 8012860:	60bb      	str	r3, [r7, #8]
  return(result);
 8012862:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012864:	2b00      	cmp	r3, #0
 8012866:	d003      	beq.n	8012870 <osDelay+0x1c>
    stat = osErrorISR;
 8012868:	f06f 0305 	mvn.w	r3, #5
 801286c:	60fb      	str	r3, [r7, #12]
 801286e:	e007      	b.n	8012880 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8012870:	2300      	movs	r3, #0
 8012872:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d002      	beq.n	8012880 <osDelay+0x2c>
      vTaskDelay(ticks);
 801287a:	6878      	ldr	r0, [r7, #4]
 801287c:	f001 fc68 	bl	8014150 <vTaskDelay>
    }
  }

  return (stat);
 8012880:	68fb      	ldr	r3, [r7, #12]
}
 8012882:	4618      	mov	r0, r3
 8012884:	3710      	adds	r7, #16
 8012886:	46bd      	mov	sp, r7
 8012888:	bd80      	pop	{r7, pc}

0801288a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 801288a:	b580      	push	{r7, lr}
 801288c:	b08a      	sub	sp, #40	; 0x28
 801288e:	af02      	add	r7, sp, #8
 8012890:	60f8      	str	r0, [r7, #12]
 8012892:	60b9      	str	r1, [r7, #8]
 8012894:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8012896:	2300      	movs	r3, #0
 8012898:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801289a:	f3ef 8305 	mrs	r3, IPSR
 801289e:	613b      	str	r3, [r7, #16]
  return(result);
 80128a0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d175      	bne.n	8012992 <osSemaphoreNew+0x108>
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d072      	beq.n	8012992 <osSemaphoreNew+0x108>
 80128ac:	68ba      	ldr	r2, [r7, #8]
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	429a      	cmp	r2, r3
 80128b2:	d86e      	bhi.n	8012992 <osSemaphoreNew+0x108>
    mem = -1;
 80128b4:	f04f 33ff 	mov.w	r3, #4294967295
 80128b8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d015      	beq.n	80128ec <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	689b      	ldr	r3, [r3, #8]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d006      	beq.n	80128d6 <osSemaphoreNew+0x4c>
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	68db      	ldr	r3, [r3, #12]
 80128cc:	2b4f      	cmp	r3, #79	; 0x4f
 80128ce:	d902      	bls.n	80128d6 <osSemaphoreNew+0x4c>
        mem = 1;
 80128d0:	2301      	movs	r3, #1
 80128d2:	61bb      	str	r3, [r7, #24]
 80128d4:	e00c      	b.n	80128f0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	689b      	ldr	r3, [r3, #8]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d108      	bne.n	80128f0 <osSemaphoreNew+0x66>
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	68db      	ldr	r3, [r3, #12]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d104      	bne.n	80128f0 <osSemaphoreNew+0x66>
          mem = 0;
 80128e6:	2300      	movs	r3, #0
 80128e8:	61bb      	str	r3, [r7, #24]
 80128ea:	e001      	b.n	80128f0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80128ec:	2300      	movs	r3, #0
 80128ee:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80128f0:	69bb      	ldr	r3, [r7, #24]
 80128f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128f6:	d04c      	beq.n	8012992 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	2b01      	cmp	r3, #1
 80128fc:	d128      	bne.n	8012950 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80128fe:	69bb      	ldr	r3, [r7, #24]
 8012900:	2b01      	cmp	r3, #1
 8012902:	d10a      	bne.n	801291a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	689b      	ldr	r3, [r3, #8]
 8012908:	2203      	movs	r2, #3
 801290a:	9200      	str	r2, [sp, #0]
 801290c:	2200      	movs	r2, #0
 801290e:	2100      	movs	r1, #0
 8012910:	2001      	movs	r0, #1
 8012912:	f000 fa4d 	bl	8012db0 <xQueueGenericCreateStatic>
 8012916:	61f8      	str	r0, [r7, #28]
 8012918:	e005      	b.n	8012926 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 801291a:	2203      	movs	r2, #3
 801291c:	2100      	movs	r1, #0
 801291e:	2001      	movs	r0, #1
 8012920:	f000 fabe 	bl	8012ea0 <xQueueGenericCreate>
 8012924:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8012926:	69fb      	ldr	r3, [r7, #28]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d022      	beq.n	8012972 <osSemaphoreNew+0xe8>
 801292c:	68bb      	ldr	r3, [r7, #8]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d01f      	beq.n	8012972 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8012932:	2300      	movs	r3, #0
 8012934:	2200      	movs	r2, #0
 8012936:	2100      	movs	r1, #0
 8012938:	69f8      	ldr	r0, [r7, #28]
 801293a:	f000 fb79 	bl	8013030 <xQueueGenericSend>
 801293e:	4603      	mov	r3, r0
 8012940:	2b01      	cmp	r3, #1
 8012942:	d016      	beq.n	8012972 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8012944:	69f8      	ldr	r0, [r7, #28]
 8012946:	f001 f805 	bl	8013954 <vQueueDelete>
            hSemaphore = NULL;
 801294a:	2300      	movs	r3, #0
 801294c:	61fb      	str	r3, [r7, #28]
 801294e:	e010      	b.n	8012972 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8012950:	69bb      	ldr	r3, [r7, #24]
 8012952:	2b01      	cmp	r3, #1
 8012954:	d108      	bne.n	8012968 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	689b      	ldr	r3, [r3, #8]
 801295a:	461a      	mov	r2, r3
 801295c:	68b9      	ldr	r1, [r7, #8]
 801295e:	68f8      	ldr	r0, [r7, #12]
 8012960:	f000 fafb 	bl	8012f5a <xQueueCreateCountingSemaphoreStatic>
 8012964:	61f8      	str	r0, [r7, #28]
 8012966:	e004      	b.n	8012972 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8012968:	68b9      	ldr	r1, [r7, #8]
 801296a:	68f8      	ldr	r0, [r7, #12]
 801296c:	f000 fb2c 	bl	8012fc8 <xQueueCreateCountingSemaphore>
 8012970:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8012972:	69fb      	ldr	r3, [r7, #28]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d00c      	beq.n	8012992 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d003      	beq.n	8012986 <osSemaphoreNew+0xfc>
          name = attr->name;
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	617b      	str	r3, [r7, #20]
 8012984:	e001      	b.n	801298a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8012986:	2300      	movs	r3, #0
 8012988:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801298a:	6979      	ldr	r1, [r7, #20]
 801298c:	69f8      	ldr	r0, [r7, #28]
 801298e:	f001 f92d 	bl	8013bec <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8012992:	69fb      	ldr	r3, [r7, #28]
}
 8012994:	4618      	mov	r0, r3
 8012996:	3720      	adds	r7, #32
 8012998:	46bd      	mov	sp, r7
 801299a:	bd80      	pop	{r7, pc}

0801299c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 801299c:	b580      	push	{r7, lr}
 801299e:	b086      	sub	sp, #24
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	6078      	str	r0, [r7, #4]
 80129a4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80129aa:	2300      	movs	r3, #0
 80129ac:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80129ae:	693b      	ldr	r3, [r7, #16]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d103      	bne.n	80129bc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80129b4:	f06f 0303 	mvn.w	r3, #3
 80129b8:	617b      	str	r3, [r7, #20]
 80129ba:	e039      	b.n	8012a30 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80129bc:	f3ef 8305 	mrs	r3, IPSR
 80129c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80129c2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d022      	beq.n	8012a0e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80129c8:	683b      	ldr	r3, [r7, #0]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d003      	beq.n	80129d6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80129ce:	f06f 0303 	mvn.w	r3, #3
 80129d2:	617b      	str	r3, [r7, #20]
 80129d4:	e02c      	b.n	8012a30 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80129d6:	2300      	movs	r3, #0
 80129d8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80129da:	f107 0308 	add.w	r3, r7, #8
 80129de:	461a      	mov	r2, r3
 80129e0:	2100      	movs	r1, #0
 80129e2:	6938      	ldr	r0, [r7, #16]
 80129e4:	f000 ff36 	bl	8013854 <xQueueReceiveFromISR>
 80129e8:	4603      	mov	r3, r0
 80129ea:	2b01      	cmp	r3, #1
 80129ec:	d003      	beq.n	80129f6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80129ee:	f06f 0302 	mvn.w	r3, #2
 80129f2:	617b      	str	r3, [r7, #20]
 80129f4:	e01c      	b.n	8012a30 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80129f6:	68bb      	ldr	r3, [r7, #8]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d019      	beq.n	8012a30 <osSemaphoreAcquire+0x94>
 80129fc:	4b0f      	ldr	r3, [pc, #60]	; (8012a3c <osSemaphoreAcquire+0xa0>)
 80129fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a02:	601a      	str	r2, [r3, #0]
 8012a04:	f3bf 8f4f 	dsb	sy
 8012a08:	f3bf 8f6f 	isb	sy
 8012a0c:	e010      	b.n	8012a30 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8012a0e:	6839      	ldr	r1, [r7, #0]
 8012a10:	6938      	ldr	r0, [r7, #16]
 8012a12:	f000 fe13 	bl	801363c <xQueueSemaphoreTake>
 8012a16:	4603      	mov	r3, r0
 8012a18:	2b01      	cmp	r3, #1
 8012a1a:	d009      	beq.n	8012a30 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8012a1c:	683b      	ldr	r3, [r7, #0]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d003      	beq.n	8012a2a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8012a22:	f06f 0301 	mvn.w	r3, #1
 8012a26:	617b      	str	r3, [r7, #20]
 8012a28:	e002      	b.n	8012a30 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8012a2a:	f06f 0302 	mvn.w	r3, #2
 8012a2e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8012a30:	697b      	ldr	r3, [r7, #20]
}
 8012a32:	4618      	mov	r0, r3
 8012a34:	3718      	adds	r7, #24
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd80      	pop	{r7, pc}
 8012a3a:	bf00      	nop
 8012a3c:	e000ed04 	.word	0xe000ed04

08012a40 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b086      	sub	sp, #24
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8012a50:	693b      	ldr	r3, [r7, #16]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d103      	bne.n	8012a5e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8012a56:	f06f 0303 	mvn.w	r3, #3
 8012a5a:	617b      	str	r3, [r7, #20]
 8012a5c:	e02c      	b.n	8012ab8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012a5e:	f3ef 8305 	mrs	r3, IPSR
 8012a62:	60fb      	str	r3, [r7, #12]
  return(result);
 8012a64:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d01a      	beq.n	8012aa0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8012a6e:	f107 0308 	add.w	r3, r7, #8
 8012a72:	4619      	mov	r1, r3
 8012a74:	6938      	ldr	r0, [r7, #16]
 8012a76:	f000 fc74 	bl	8013362 <xQueueGiveFromISR>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	2b01      	cmp	r3, #1
 8012a7e:	d003      	beq.n	8012a88 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8012a80:	f06f 0302 	mvn.w	r3, #2
 8012a84:	617b      	str	r3, [r7, #20]
 8012a86:	e017      	b.n	8012ab8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8012a88:	68bb      	ldr	r3, [r7, #8]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d014      	beq.n	8012ab8 <osSemaphoreRelease+0x78>
 8012a8e:	4b0d      	ldr	r3, [pc, #52]	; (8012ac4 <osSemaphoreRelease+0x84>)
 8012a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a94:	601a      	str	r2, [r3, #0]
 8012a96:	f3bf 8f4f 	dsb	sy
 8012a9a:	f3bf 8f6f 	isb	sy
 8012a9e:	e00b      	b.n	8012ab8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	2100      	movs	r1, #0
 8012aa6:	6938      	ldr	r0, [r7, #16]
 8012aa8:	f000 fac2 	bl	8013030 <xQueueGenericSend>
 8012aac:	4603      	mov	r3, r0
 8012aae:	2b01      	cmp	r3, #1
 8012ab0:	d002      	beq.n	8012ab8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8012ab2:	f06f 0302 	mvn.w	r3, #2
 8012ab6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8012ab8:	697b      	ldr	r3, [r7, #20]
}
 8012aba:	4618      	mov	r0, r3
 8012abc:	3718      	adds	r7, #24
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	bd80      	pop	{r7, pc}
 8012ac2:	bf00      	nop
 8012ac4:	e000ed04 	.word	0xe000ed04

08012ac8 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b086      	sub	sp, #24
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ad4:	f3ef 8305 	mrs	r3, IPSR
 8012ad8:	60fb      	str	r3, [r7, #12]
  return(result);
 8012ada:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d003      	beq.n	8012ae8 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8012ae0:	f06f 0305 	mvn.w	r3, #5
 8012ae4:	617b      	str	r3, [r7, #20]
 8012ae6:	e00e      	b.n	8012b06 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8012ae8:	693b      	ldr	r3, [r7, #16]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d103      	bne.n	8012af6 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8012aee:	f06f 0303 	mvn.w	r3, #3
 8012af2:	617b      	str	r3, [r7, #20]
 8012af4:	e007      	b.n	8012b06 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8012af6:	6938      	ldr	r0, [r7, #16]
 8012af8:	f001 f8a2 	bl	8013c40 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8012afc:	2300      	movs	r3, #0
 8012afe:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8012b00:	6938      	ldr	r0, [r7, #16]
 8012b02:	f000 ff27 	bl	8013954 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8012b06:	697b      	ldr	r3, [r7, #20]
}
 8012b08:	4618      	mov	r0, r3
 8012b0a:	3718      	adds	r7, #24
 8012b0c:	46bd      	mov	sp, r7
 8012b0e:	bd80      	pop	{r7, pc}

08012b10 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012b10:	b480      	push	{r7}
 8012b12:	b085      	sub	sp, #20
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	60f8      	str	r0, [r7, #12]
 8012b18:	60b9      	str	r1, [r7, #8]
 8012b1a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	4a07      	ldr	r2, [pc, #28]	; (8012b3c <vApplicationGetIdleTaskMemory+0x2c>)
 8012b20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012b22:	68bb      	ldr	r3, [r7, #8]
 8012b24:	4a06      	ldr	r2, [pc, #24]	; (8012b40 <vApplicationGetIdleTaskMemory+0x30>)
 8012b26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012b2e:	601a      	str	r2, [r3, #0]
}
 8012b30:	bf00      	nop
 8012b32:	3714      	adds	r7, #20
 8012b34:	46bd      	mov	sp, r7
 8012b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b3a:	4770      	bx	lr
 8012b3c:	20000800 	.word	0x20000800
 8012b40:	200008bc 	.word	0x200008bc

08012b44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012b44:	b480      	push	{r7}
 8012b46:	b085      	sub	sp, #20
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	60f8      	str	r0, [r7, #12]
 8012b4c:	60b9      	str	r1, [r7, #8]
 8012b4e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	4a07      	ldr	r2, [pc, #28]	; (8012b70 <vApplicationGetTimerTaskMemory+0x2c>)
 8012b54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012b56:	68bb      	ldr	r3, [r7, #8]
 8012b58:	4a06      	ldr	r2, [pc, #24]	; (8012b74 <vApplicationGetTimerTaskMemory+0x30>)
 8012b5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012b62:	601a      	str	r2, [r3, #0]
}
 8012b64:	bf00      	nop
 8012b66:	3714      	adds	r7, #20
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6e:	4770      	bx	lr
 8012b70:	200010bc 	.word	0x200010bc
 8012b74:	20001178 	.word	0x20001178

08012b78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012b78:	b480      	push	{r7}
 8012b7a:	b083      	sub	sp, #12
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	f103 0208 	add.w	r2, r3, #8
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8012b90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	f103 0208 	add.w	r2, r3, #8
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	f103 0208 	add.w	r2, r3, #8
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	2200      	movs	r2, #0
 8012baa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012bac:	bf00      	nop
 8012bae:	370c      	adds	r7, #12
 8012bb0:	46bd      	mov	sp, r7
 8012bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb6:	4770      	bx	lr

08012bb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012bb8:	b480      	push	{r7}
 8012bba:	b083      	sub	sp, #12
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	2200      	movs	r2, #0
 8012bc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012bc6:	bf00      	nop
 8012bc8:	370c      	adds	r7, #12
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd0:	4770      	bx	lr

08012bd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012bd2:	b480      	push	{r7}
 8012bd4:	b085      	sub	sp, #20
 8012bd6:	af00      	add	r7, sp, #0
 8012bd8:	6078      	str	r0, [r7, #4]
 8012bda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	685b      	ldr	r3, [r3, #4]
 8012be0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012be2:	683b      	ldr	r3, [r7, #0]
 8012be4:	68fa      	ldr	r2, [r7, #12]
 8012be6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	689a      	ldr	r2, [r3, #8]
 8012bec:	683b      	ldr	r3, [r7, #0]
 8012bee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	689b      	ldr	r3, [r3, #8]
 8012bf4:	683a      	ldr	r2, [r7, #0]
 8012bf6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	683a      	ldr	r2, [r7, #0]
 8012bfc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012bfe:	683b      	ldr	r3, [r7, #0]
 8012c00:	687a      	ldr	r2, [r7, #4]
 8012c02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	1c5a      	adds	r2, r3, #1
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	601a      	str	r2, [r3, #0]
}
 8012c0e:	bf00      	nop
 8012c10:	3714      	adds	r7, #20
 8012c12:	46bd      	mov	sp, r7
 8012c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c18:	4770      	bx	lr

08012c1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012c1a:	b480      	push	{r7}
 8012c1c:	b085      	sub	sp, #20
 8012c1e:	af00      	add	r7, sp, #0
 8012c20:	6078      	str	r0, [r7, #4]
 8012c22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012c24:	683b      	ldr	r3, [r7, #0]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012c2a:	68bb      	ldr	r3, [r7, #8]
 8012c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c30:	d103      	bne.n	8012c3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	691b      	ldr	r3, [r3, #16]
 8012c36:	60fb      	str	r3, [r7, #12]
 8012c38:	e00c      	b.n	8012c54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	3308      	adds	r3, #8
 8012c3e:	60fb      	str	r3, [r7, #12]
 8012c40:	e002      	b.n	8012c48 <vListInsert+0x2e>
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	685b      	ldr	r3, [r3, #4]
 8012c46:	60fb      	str	r3, [r7, #12]
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	685b      	ldr	r3, [r3, #4]
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	68ba      	ldr	r2, [r7, #8]
 8012c50:	429a      	cmp	r2, r3
 8012c52:	d2f6      	bcs.n	8012c42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	685a      	ldr	r2, [r3, #4]
 8012c58:	683b      	ldr	r3, [r7, #0]
 8012c5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012c5c:	683b      	ldr	r3, [r7, #0]
 8012c5e:	685b      	ldr	r3, [r3, #4]
 8012c60:	683a      	ldr	r2, [r7, #0]
 8012c62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012c64:	683b      	ldr	r3, [r7, #0]
 8012c66:	68fa      	ldr	r2, [r7, #12]
 8012c68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	683a      	ldr	r2, [r7, #0]
 8012c6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012c70:	683b      	ldr	r3, [r7, #0]
 8012c72:	687a      	ldr	r2, [r7, #4]
 8012c74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	1c5a      	adds	r2, r3, #1
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	601a      	str	r2, [r3, #0]
}
 8012c80:	bf00      	nop
 8012c82:	3714      	adds	r7, #20
 8012c84:	46bd      	mov	sp, r7
 8012c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c8a:	4770      	bx	lr

08012c8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012c8c:	b480      	push	{r7}
 8012c8e:	b085      	sub	sp, #20
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	691b      	ldr	r3, [r3, #16]
 8012c98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	685b      	ldr	r3, [r3, #4]
 8012c9e:	687a      	ldr	r2, [r7, #4]
 8012ca0:	6892      	ldr	r2, [r2, #8]
 8012ca2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	689b      	ldr	r3, [r3, #8]
 8012ca8:	687a      	ldr	r2, [r7, #4]
 8012caa:	6852      	ldr	r2, [r2, #4]
 8012cac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	685b      	ldr	r3, [r3, #4]
 8012cb2:	687a      	ldr	r2, [r7, #4]
 8012cb4:	429a      	cmp	r2, r3
 8012cb6:	d103      	bne.n	8012cc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	689a      	ldr	r2, [r3, #8]
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	2200      	movs	r2, #0
 8012cc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	1e5a      	subs	r2, r3, #1
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	681b      	ldr	r3, [r3, #0]
}
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	3714      	adds	r7, #20
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cde:	4770      	bx	lr

08012ce0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b084      	sub	sp, #16
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	6078      	str	r0, [r7, #4]
 8012ce8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d10a      	bne.n	8012d0a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cf8:	f383 8811 	msr	BASEPRI, r3
 8012cfc:	f3bf 8f6f 	isb	sy
 8012d00:	f3bf 8f4f 	dsb	sy
 8012d04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012d06:	bf00      	nop
 8012d08:	e7fe      	b.n	8012d08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012d0a:	f002 fe13 	bl	8015934 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	681a      	ldr	r2, [r3, #0]
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d16:	68f9      	ldr	r1, [r7, #12]
 8012d18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012d1a:	fb01 f303 	mul.w	r3, r1, r3
 8012d1e:	441a      	add	r2, r3
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	2200      	movs	r2, #0
 8012d28:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	681a      	ldr	r2, [r3, #0]
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	681a      	ldr	r2, [r3, #0]
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d3a:	3b01      	subs	r3, #1
 8012d3c:	68f9      	ldr	r1, [r7, #12]
 8012d3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012d40:	fb01 f303 	mul.w	r3, r1, r3
 8012d44:	441a      	add	r2, r3
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	22ff      	movs	r2, #255	; 0xff
 8012d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	22ff      	movs	r2, #255	; 0xff
 8012d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012d5a:	683b      	ldr	r3, [r7, #0]
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d114      	bne.n	8012d8a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	691b      	ldr	r3, [r3, #16]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d01a      	beq.n	8012d9e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	3310      	adds	r3, #16
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	f001 fdb3 	bl	80148d8 <xTaskRemoveFromEventList>
 8012d72:	4603      	mov	r3, r0
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d012      	beq.n	8012d9e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012d78:	4b0c      	ldr	r3, [pc, #48]	; (8012dac <xQueueGenericReset+0xcc>)
 8012d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d7e:	601a      	str	r2, [r3, #0]
 8012d80:	f3bf 8f4f 	dsb	sy
 8012d84:	f3bf 8f6f 	isb	sy
 8012d88:	e009      	b.n	8012d9e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	3310      	adds	r3, #16
 8012d8e:	4618      	mov	r0, r3
 8012d90:	f7ff fef2 	bl	8012b78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	3324      	adds	r3, #36	; 0x24
 8012d98:	4618      	mov	r0, r3
 8012d9a:	f7ff feed 	bl	8012b78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012d9e:	f002 fdf9 	bl	8015994 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012da2:	2301      	movs	r3, #1
}
 8012da4:	4618      	mov	r0, r3
 8012da6:	3710      	adds	r7, #16
 8012da8:	46bd      	mov	sp, r7
 8012daa:	bd80      	pop	{r7, pc}
 8012dac:	e000ed04 	.word	0xe000ed04

08012db0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b08e      	sub	sp, #56	; 0x38
 8012db4:	af02      	add	r7, sp, #8
 8012db6:	60f8      	str	r0, [r7, #12]
 8012db8:	60b9      	str	r1, [r7, #8]
 8012dba:	607a      	str	r2, [r7, #4]
 8012dbc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d10a      	bne.n	8012dda <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8012dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dc8:	f383 8811 	msr	BASEPRI, r3
 8012dcc:	f3bf 8f6f 	isb	sy
 8012dd0:	f3bf 8f4f 	dsb	sy
 8012dd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012dd6:	bf00      	nop
 8012dd8:	e7fe      	b.n	8012dd8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012dda:	683b      	ldr	r3, [r7, #0]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d10a      	bne.n	8012df6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8012de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012de4:	f383 8811 	msr	BASEPRI, r3
 8012de8:	f3bf 8f6f 	isb	sy
 8012dec:	f3bf 8f4f 	dsb	sy
 8012df0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012df2:	bf00      	nop
 8012df4:	e7fe      	b.n	8012df4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d002      	beq.n	8012e02 <xQueueGenericCreateStatic+0x52>
 8012dfc:	68bb      	ldr	r3, [r7, #8]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d001      	beq.n	8012e06 <xQueueGenericCreateStatic+0x56>
 8012e02:	2301      	movs	r3, #1
 8012e04:	e000      	b.n	8012e08 <xQueueGenericCreateStatic+0x58>
 8012e06:	2300      	movs	r3, #0
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d10a      	bne.n	8012e22 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8012e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e10:	f383 8811 	msr	BASEPRI, r3
 8012e14:	f3bf 8f6f 	isb	sy
 8012e18:	f3bf 8f4f 	dsb	sy
 8012e1c:	623b      	str	r3, [r7, #32]
}
 8012e1e:	bf00      	nop
 8012e20:	e7fe      	b.n	8012e20 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d102      	bne.n	8012e2e <xQueueGenericCreateStatic+0x7e>
 8012e28:	68bb      	ldr	r3, [r7, #8]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d101      	bne.n	8012e32 <xQueueGenericCreateStatic+0x82>
 8012e2e:	2301      	movs	r3, #1
 8012e30:	e000      	b.n	8012e34 <xQueueGenericCreateStatic+0x84>
 8012e32:	2300      	movs	r3, #0
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d10a      	bne.n	8012e4e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8012e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e3c:	f383 8811 	msr	BASEPRI, r3
 8012e40:	f3bf 8f6f 	isb	sy
 8012e44:	f3bf 8f4f 	dsb	sy
 8012e48:	61fb      	str	r3, [r7, #28]
}
 8012e4a:	bf00      	nop
 8012e4c:	e7fe      	b.n	8012e4c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012e4e:	2350      	movs	r3, #80	; 0x50
 8012e50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012e52:	697b      	ldr	r3, [r7, #20]
 8012e54:	2b50      	cmp	r3, #80	; 0x50
 8012e56:	d00a      	beq.n	8012e6e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e5c:	f383 8811 	msr	BASEPRI, r3
 8012e60:	f3bf 8f6f 	isb	sy
 8012e64:	f3bf 8f4f 	dsb	sy
 8012e68:	61bb      	str	r3, [r7, #24]
}
 8012e6a:	bf00      	nop
 8012e6c:	e7fe      	b.n	8012e6c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012e6e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012e70:	683b      	ldr	r3, [r7, #0]
 8012e72:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d00d      	beq.n	8012e96 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e7c:	2201      	movs	r2, #1
 8012e7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012e82:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e88:	9300      	str	r3, [sp, #0]
 8012e8a:	4613      	mov	r3, r2
 8012e8c:	687a      	ldr	r2, [r7, #4]
 8012e8e:	68b9      	ldr	r1, [r7, #8]
 8012e90:	68f8      	ldr	r0, [r7, #12]
 8012e92:	f000 f83f 	bl	8012f14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012e98:	4618      	mov	r0, r3
 8012e9a:	3730      	adds	r7, #48	; 0x30
 8012e9c:	46bd      	mov	sp, r7
 8012e9e:	bd80      	pop	{r7, pc}

08012ea0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b08a      	sub	sp, #40	; 0x28
 8012ea4:	af02      	add	r7, sp, #8
 8012ea6:	60f8      	str	r0, [r7, #12]
 8012ea8:	60b9      	str	r1, [r7, #8]
 8012eaa:	4613      	mov	r3, r2
 8012eac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d10a      	bne.n	8012eca <xQueueGenericCreate+0x2a>
	__asm volatile
 8012eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eb8:	f383 8811 	msr	BASEPRI, r3
 8012ebc:	f3bf 8f6f 	isb	sy
 8012ec0:	f3bf 8f4f 	dsb	sy
 8012ec4:	613b      	str	r3, [r7, #16]
}
 8012ec6:	bf00      	nop
 8012ec8:	e7fe      	b.n	8012ec8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	68ba      	ldr	r2, [r7, #8]
 8012ece:	fb02 f303 	mul.w	r3, r2, r3
 8012ed2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012ed4:	69fb      	ldr	r3, [r7, #28]
 8012ed6:	3350      	adds	r3, #80	; 0x50
 8012ed8:	4618      	mov	r0, r3
 8012eda:	f002 fe4d 	bl	8015b78 <pvPortMalloc>
 8012ede:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012ee0:	69bb      	ldr	r3, [r7, #24]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d011      	beq.n	8012f0a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012ee6:	69bb      	ldr	r3, [r7, #24]
 8012ee8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012eea:	697b      	ldr	r3, [r7, #20]
 8012eec:	3350      	adds	r3, #80	; 0x50
 8012eee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012ef0:	69bb      	ldr	r3, [r7, #24]
 8012ef2:	2200      	movs	r2, #0
 8012ef4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012ef8:	79fa      	ldrb	r2, [r7, #7]
 8012efa:	69bb      	ldr	r3, [r7, #24]
 8012efc:	9300      	str	r3, [sp, #0]
 8012efe:	4613      	mov	r3, r2
 8012f00:	697a      	ldr	r2, [r7, #20]
 8012f02:	68b9      	ldr	r1, [r7, #8]
 8012f04:	68f8      	ldr	r0, [r7, #12]
 8012f06:	f000 f805 	bl	8012f14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012f0a:	69bb      	ldr	r3, [r7, #24]
	}
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	3720      	adds	r7, #32
 8012f10:	46bd      	mov	sp, r7
 8012f12:	bd80      	pop	{r7, pc}

08012f14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b084      	sub	sp, #16
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	60f8      	str	r0, [r7, #12]
 8012f1c:	60b9      	str	r1, [r7, #8]
 8012f1e:	607a      	str	r2, [r7, #4]
 8012f20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012f22:	68bb      	ldr	r3, [r7, #8]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d103      	bne.n	8012f30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012f28:	69bb      	ldr	r3, [r7, #24]
 8012f2a:	69ba      	ldr	r2, [r7, #24]
 8012f2c:	601a      	str	r2, [r3, #0]
 8012f2e:	e002      	b.n	8012f36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012f30:	69bb      	ldr	r3, [r7, #24]
 8012f32:	687a      	ldr	r2, [r7, #4]
 8012f34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012f36:	69bb      	ldr	r3, [r7, #24]
 8012f38:	68fa      	ldr	r2, [r7, #12]
 8012f3a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012f3c:	69bb      	ldr	r3, [r7, #24]
 8012f3e:	68ba      	ldr	r2, [r7, #8]
 8012f40:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012f42:	2101      	movs	r1, #1
 8012f44:	69b8      	ldr	r0, [r7, #24]
 8012f46:	f7ff fecb 	bl	8012ce0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012f4a:	69bb      	ldr	r3, [r7, #24]
 8012f4c:	78fa      	ldrb	r2, [r7, #3]
 8012f4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012f52:	bf00      	nop
 8012f54:	3710      	adds	r7, #16
 8012f56:	46bd      	mov	sp, r7
 8012f58:	bd80      	pop	{r7, pc}

08012f5a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8012f5a:	b580      	push	{r7, lr}
 8012f5c:	b08a      	sub	sp, #40	; 0x28
 8012f5e:	af02      	add	r7, sp, #8
 8012f60:	60f8      	str	r0, [r7, #12]
 8012f62:	60b9      	str	r1, [r7, #8]
 8012f64:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d10a      	bne.n	8012f82 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8012f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f70:	f383 8811 	msr	BASEPRI, r3
 8012f74:	f3bf 8f6f 	isb	sy
 8012f78:	f3bf 8f4f 	dsb	sy
 8012f7c:	61bb      	str	r3, [r7, #24]
}
 8012f7e:	bf00      	nop
 8012f80:	e7fe      	b.n	8012f80 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8012f82:	68ba      	ldr	r2, [r7, #8]
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	429a      	cmp	r2, r3
 8012f88:	d90a      	bls.n	8012fa0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8012f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f8e:	f383 8811 	msr	BASEPRI, r3
 8012f92:	f3bf 8f6f 	isb	sy
 8012f96:	f3bf 8f4f 	dsb	sy
 8012f9a:	617b      	str	r3, [r7, #20]
}
 8012f9c:	bf00      	nop
 8012f9e:	e7fe      	b.n	8012f9e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012fa0:	2302      	movs	r3, #2
 8012fa2:	9300      	str	r3, [sp, #0]
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	2200      	movs	r2, #0
 8012fa8:	2100      	movs	r1, #0
 8012faa:	68f8      	ldr	r0, [r7, #12]
 8012fac:	f7ff ff00 	bl	8012db0 <xQueueGenericCreateStatic>
 8012fb0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8012fb2:	69fb      	ldr	r3, [r7, #28]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d002      	beq.n	8012fbe <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012fb8:	69fb      	ldr	r3, [r7, #28]
 8012fba:	68ba      	ldr	r2, [r7, #8]
 8012fbc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8012fbe:	69fb      	ldr	r3, [r7, #28]
	}
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	3720      	adds	r7, #32
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	bd80      	pop	{r7, pc}

08012fc8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8012fc8:	b580      	push	{r7, lr}
 8012fca:	b086      	sub	sp, #24
 8012fcc:	af00      	add	r7, sp, #0
 8012fce:	6078      	str	r0, [r7, #4]
 8012fd0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d10a      	bne.n	8012fee <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8012fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fdc:	f383 8811 	msr	BASEPRI, r3
 8012fe0:	f3bf 8f6f 	isb	sy
 8012fe4:	f3bf 8f4f 	dsb	sy
 8012fe8:	613b      	str	r3, [r7, #16]
}
 8012fea:	bf00      	nop
 8012fec:	e7fe      	b.n	8012fec <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8012fee:	683a      	ldr	r2, [r7, #0]
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	429a      	cmp	r2, r3
 8012ff4:	d90a      	bls.n	801300c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8012ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ffa:	f383 8811 	msr	BASEPRI, r3
 8012ffe:	f3bf 8f6f 	isb	sy
 8013002:	f3bf 8f4f 	dsb	sy
 8013006:	60fb      	str	r3, [r7, #12]
}
 8013008:	bf00      	nop
 801300a:	e7fe      	b.n	801300a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801300c:	2202      	movs	r2, #2
 801300e:	2100      	movs	r1, #0
 8013010:	6878      	ldr	r0, [r7, #4]
 8013012:	f7ff ff45 	bl	8012ea0 <xQueueGenericCreate>
 8013016:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8013018:	697b      	ldr	r3, [r7, #20]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d002      	beq.n	8013024 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801301e:	697b      	ldr	r3, [r7, #20]
 8013020:	683a      	ldr	r2, [r7, #0]
 8013022:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8013024:	697b      	ldr	r3, [r7, #20]
	}
 8013026:	4618      	mov	r0, r3
 8013028:	3718      	adds	r7, #24
 801302a:	46bd      	mov	sp, r7
 801302c:	bd80      	pop	{r7, pc}
	...

08013030 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b08e      	sub	sp, #56	; 0x38
 8013034:	af00      	add	r7, sp, #0
 8013036:	60f8      	str	r0, [r7, #12]
 8013038:	60b9      	str	r1, [r7, #8]
 801303a:	607a      	str	r2, [r7, #4]
 801303c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801303e:	2300      	movs	r3, #0
 8013040:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013048:	2b00      	cmp	r3, #0
 801304a:	d10a      	bne.n	8013062 <xQueueGenericSend+0x32>
	__asm volatile
 801304c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013050:	f383 8811 	msr	BASEPRI, r3
 8013054:	f3bf 8f6f 	isb	sy
 8013058:	f3bf 8f4f 	dsb	sy
 801305c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801305e:	bf00      	nop
 8013060:	e7fe      	b.n	8013060 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013062:	68bb      	ldr	r3, [r7, #8]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d103      	bne.n	8013070 <xQueueGenericSend+0x40>
 8013068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801306c:	2b00      	cmp	r3, #0
 801306e:	d101      	bne.n	8013074 <xQueueGenericSend+0x44>
 8013070:	2301      	movs	r3, #1
 8013072:	e000      	b.n	8013076 <xQueueGenericSend+0x46>
 8013074:	2300      	movs	r3, #0
 8013076:	2b00      	cmp	r3, #0
 8013078:	d10a      	bne.n	8013090 <xQueueGenericSend+0x60>
	__asm volatile
 801307a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801307e:	f383 8811 	msr	BASEPRI, r3
 8013082:	f3bf 8f6f 	isb	sy
 8013086:	f3bf 8f4f 	dsb	sy
 801308a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801308c:	bf00      	nop
 801308e:	e7fe      	b.n	801308e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013090:	683b      	ldr	r3, [r7, #0]
 8013092:	2b02      	cmp	r3, #2
 8013094:	d103      	bne.n	801309e <xQueueGenericSend+0x6e>
 8013096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801309a:	2b01      	cmp	r3, #1
 801309c:	d101      	bne.n	80130a2 <xQueueGenericSend+0x72>
 801309e:	2301      	movs	r3, #1
 80130a0:	e000      	b.n	80130a4 <xQueueGenericSend+0x74>
 80130a2:	2300      	movs	r3, #0
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d10a      	bne.n	80130be <xQueueGenericSend+0x8e>
	__asm volatile
 80130a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ac:	f383 8811 	msr	BASEPRI, r3
 80130b0:	f3bf 8f6f 	isb	sy
 80130b4:	f3bf 8f4f 	dsb	sy
 80130b8:	623b      	str	r3, [r7, #32]
}
 80130ba:	bf00      	nop
 80130bc:	e7fe      	b.n	80130bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80130be:	f001 fddd 	bl	8014c7c <xTaskGetSchedulerState>
 80130c2:	4603      	mov	r3, r0
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d102      	bne.n	80130ce <xQueueGenericSend+0x9e>
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d101      	bne.n	80130d2 <xQueueGenericSend+0xa2>
 80130ce:	2301      	movs	r3, #1
 80130d0:	e000      	b.n	80130d4 <xQueueGenericSend+0xa4>
 80130d2:	2300      	movs	r3, #0
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d10a      	bne.n	80130ee <xQueueGenericSend+0xbe>
	__asm volatile
 80130d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130dc:	f383 8811 	msr	BASEPRI, r3
 80130e0:	f3bf 8f6f 	isb	sy
 80130e4:	f3bf 8f4f 	dsb	sy
 80130e8:	61fb      	str	r3, [r7, #28]
}
 80130ea:	bf00      	nop
 80130ec:	e7fe      	b.n	80130ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80130ee:	f002 fc21 	bl	8015934 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80130f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80130f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80130fa:	429a      	cmp	r2, r3
 80130fc:	d302      	bcc.n	8013104 <xQueueGenericSend+0xd4>
 80130fe:	683b      	ldr	r3, [r7, #0]
 8013100:	2b02      	cmp	r3, #2
 8013102:	d129      	bne.n	8013158 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013104:	683a      	ldr	r2, [r7, #0]
 8013106:	68b9      	ldr	r1, [r7, #8]
 8013108:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801310a:	f000 fc5e 	bl	80139ca <prvCopyDataToQueue>
 801310e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013114:	2b00      	cmp	r3, #0
 8013116:	d010      	beq.n	801313a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801311a:	3324      	adds	r3, #36	; 0x24
 801311c:	4618      	mov	r0, r3
 801311e:	f001 fbdb 	bl	80148d8 <xTaskRemoveFromEventList>
 8013122:	4603      	mov	r3, r0
 8013124:	2b00      	cmp	r3, #0
 8013126:	d013      	beq.n	8013150 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013128:	4b3f      	ldr	r3, [pc, #252]	; (8013228 <xQueueGenericSend+0x1f8>)
 801312a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801312e:	601a      	str	r2, [r3, #0]
 8013130:	f3bf 8f4f 	dsb	sy
 8013134:	f3bf 8f6f 	isb	sy
 8013138:	e00a      	b.n	8013150 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801313a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801313c:	2b00      	cmp	r3, #0
 801313e:	d007      	beq.n	8013150 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013140:	4b39      	ldr	r3, [pc, #228]	; (8013228 <xQueueGenericSend+0x1f8>)
 8013142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013146:	601a      	str	r2, [r3, #0]
 8013148:	f3bf 8f4f 	dsb	sy
 801314c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013150:	f002 fc20 	bl	8015994 <vPortExitCritical>
				return pdPASS;
 8013154:	2301      	movs	r3, #1
 8013156:	e063      	b.n	8013220 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d103      	bne.n	8013166 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801315e:	f002 fc19 	bl	8015994 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013162:	2300      	movs	r3, #0
 8013164:	e05c      	b.n	8013220 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013168:	2b00      	cmp	r3, #0
 801316a:	d106      	bne.n	801317a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801316c:	f107 0314 	add.w	r3, r7, #20
 8013170:	4618      	mov	r0, r3
 8013172:	f001 fc15 	bl	80149a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013176:	2301      	movs	r3, #1
 8013178:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801317a:	f002 fc0b 	bl	8015994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801317e:	f001 f981 	bl	8014484 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013182:	f002 fbd7 	bl	8015934 <vPortEnterCritical>
 8013186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013188:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801318c:	b25b      	sxtb	r3, r3
 801318e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013192:	d103      	bne.n	801319c <xQueueGenericSend+0x16c>
 8013194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013196:	2200      	movs	r2, #0
 8013198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801319c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801319e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80131a2:	b25b      	sxtb	r3, r3
 80131a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131a8:	d103      	bne.n	80131b2 <xQueueGenericSend+0x182>
 80131aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ac:	2200      	movs	r2, #0
 80131ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80131b2:	f002 fbef 	bl	8015994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80131b6:	1d3a      	adds	r2, r7, #4
 80131b8:	f107 0314 	add.w	r3, r7, #20
 80131bc:	4611      	mov	r1, r2
 80131be:	4618      	mov	r0, r3
 80131c0:	f001 fc04 	bl	80149cc <xTaskCheckForTimeOut>
 80131c4:	4603      	mov	r3, r0
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d124      	bne.n	8013214 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80131ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80131cc:	f000 fcf5 	bl	8013bba <prvIsQueueFull>
 80131d0:	4603      	mov	r3, r0
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d018      	beq.n	8013208 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80131d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131d8:	3310      	adds	r3, #16
 80131da:	687a      	ldr	r2, [r7, #4]
 80131dc:	4611      	mov	r1, r2
 80131de:	4618      	mov	r0, r3
 80131e0:	f001 fb2a 	bl	8014838 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80131e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80131e6:	f000 fc80 	bl	8013aea <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80131ea:	f001 f959 	bl	80144a0 <xTaskResumeAll>
 80131ee:	4603      	mov	r3, r0
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	f47f af7c 	bne.w	80130ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80131f6:	4b0c      	ldr	r3, [pc, #48]	; (8013228 <xQueueGenericSend+0x1f8>)
 80131f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131fc:	601a      	str	r2, [r3, #0]
 80131fe:	f3bf 8f4f 	dsb	sy
 8013202:	f3bf 8f6f 	isb	sy
 8013206:	e772      	b.n	80130ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013208:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801320a:	f000 fc6e 	bl	8013aea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801320e:	f001 f947 	bl	80144a0 <xTaskResumeAll>
 8013212:	e76c      	b.n	80130ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013214:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013216:	f000 fc68 	bl	8013aea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801321a:	f001 f941 	bl	80144a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801321e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013220:	4618      	mov	r0, r3
 8013222:	3738      	adds	r7, #56	; 0x38
 8013224:	46bd      	mov	sp, r7
 8013226:	bd80      	pop	{r7, pc}
 8013228:	e000ed04 	.word	0xe000ed04

0801322c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801322c:	b580      	push	{r7, lr}
 801322e:	b090      	sub	sp, #64	; 0x40
 8013230:	af00      	add	r7, sp, #0
 8013232:	60f8      	str	r0, [r7, #12]
 8013234:	60b9      	str	r1, [r7, #8]
 8013236:	607a      	str	r2, [r7, #4]
 8013238:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801323e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013240:	2b00      	cmp	r3, #0
 8013242:	d10a      	bne.n	801325a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8013244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013248:	f383 8811 	msr	BASEPRI, r3
 801324c:	f3bf 8f6f 	isb	sy
 8013250:	f3bf 8f4f 	dsb	sy
 8013254:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013256:	bf00      	nop
 8013258:	e7fe      	b.n	8013258 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801325a:	68bb      	ldr	r3, [r7, #8]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d103      	bne.n	8013268 <xQueueGenericSendFromISR+0x3c>
 8013260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013264:	2b00      	cmp	r3, #0
 8013266:	d101      	bne.n	801326c <xQueueGenericSendFromISR+0x40>
 8013268:	2301      	movs	r3, #1
 801326a:	e000      	b.n	801326e <xQueueGenericSendFromISR+0x42>
 801326c:	2300      	movs	r3, #0
 801326e:	2b00      	cmp	r3, #0
 8013270:	d10a      	bne.n	8013288 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8013272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013276:	f383 8811 	msr	BASEPRI, r3
 801327a:	f3bf 8f6f 	isb	sy
 801327e:	f3bf 8f4f 	dsb	sy
 8013282:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013284:	bf00      	nop
 8013286:	e7fe      	b.n	8013286 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013288:	683b      	ldr	r3, [r7, #0]
 801328a:	2b02      	cmp	r3, #2
 801328c:	d103      	bne.n	8013296 <xQueueGenericSendFromISR+0x6a>
 801328e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013292:	2b01      	cmp	r3, #1
 8013294:	d101      	bne.n	801329a <xQueueGenericSendFromISR+0x6e>
 8013296:	2301      	movs	r3, #1
 8013298:	e000      	b.n	801329c <xQueueGenericSendFromISR+0x70>
 801329a:	2300      	movs	r3, #0
 801329c:	2b00      	cmp	r3, #0
 801329e:	d10a      	bne.n	80132b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80132a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132a4:	f383 8811 	msr	BASEPRI, r3
 80132a8:	f3bf 8f6f 	isb	sy
 80132ac:	f3bf 8f4f 	dsb	sy
 80132b0:	623b      	str	r3, [r7, #32]
}
 80132b2:	bf00      	nop
 80132b4:	e7fe      	b.n	80132b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80132b6:	f002 fc1f 	bl	8015af8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80132ba:	f3ef 8211 	mrs	r2, BASEPRI
 80132be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132c2:	f383 8811 	msr	BASEPRI, r3
 80132c6:	f3bf 8f6f 	isb	sy
 80132ca:	f3bf 8f4f 	dsb	sy
 80132ce:	61fa      	str	r2, [r7, #28]
 80132d0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80132d2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80132d4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80132d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80132da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80132de:	429a      	cmp	r2, r3
 80132e0:	d302      	bcc.n	80132e8 <xQueueGenericSendFromISR+0xbc>
 80132e2:	683b      	ldr	r3, [r7, #0]
 80132e4:	2b02      	cmp	r3, #2
 80132e6:	d12f      	bne.n	8013348 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80132e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80132ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80132f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80132f8:	683a      	ldr	r2, [r7, #0]
 80132fa:	68b9      	ldr	r1, [r7, #8]
 80132fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80132fe:	f000 fb64 	bl	80139ca <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013302:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8013306:	f1b3 3fff 	cmp.w	r3, #4294967295
 801330a:	d112      	bne.n	8013332 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801330c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013310:	2b00      	cmp	r3, #0
 8013312:	d016      	beq.n	8013342 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013316:	3324      	adds	r3, #36	; 0x24
 8013318:	4618      	mov	r0, r3
 801331a:	f001 fadd 	bl	80148d8 <xTaskRemoveFromEventList>
 801331e:	4603      	mov	r3, r0
 8013320:	2b00      	cmp	r3, #0
 8013322:	d00e      	beq.n	8013342 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d00b      	beq.n	8013342 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	2201      	movs	r2, #1
 801332e:	601a      	str	r2, [r3, #0]
 8013330:	e007      	b.n	8013342 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013332:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013336:	3301      	adds	r3, #1
 8013338:	b2db      	uxtb	r3, r3
 801333a:	b25a      	sxtb	r2, r3
 801333c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801333e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013342:	2301      	movs	r3, #1
 8013344:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8013346:	e001      	b.n	801334c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013348:	2300      	movs	r3, #0
 801334a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801334c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801334e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013350:	697b      	ldr	r3, [r7, #20]
 8013352:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013356:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801335a:	4618      	mov	r0, r3
 801335c:	3740      	adds	r7, #64	; 0x40
 801335e:	46bd      	mov	sp, r7
 8013360:	bd80      	pop	{r7, pc}

08013362 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013362:	b580      	push	{r7, lr}
 8013364:	b08e      	sub	sp, #56	; 0x38
 8013366:	af00      	add	r7, sp, #0
 8013368:	6078      	str	r0, [r7, #4]
 801336a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8013370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013372:	2b00      	cmp	r3, #0
 8013374:	d10a      	bne.n	801338c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8013376:	f04f 0350 	mov.w	r3, #80	; 0x50
 801337a:	f383 8811 	msr	BASEPRI, r3
 801337e:	f3bf 8f6f 	isb	sy
 8013382:	f3bf 8f4f 	dsb	sy
 8013386:	623b      	str	r3, [r7, #32]
}
 8013388:	bf00      	nop
 801338a:	e7fe      	b.n	801338a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801338c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013390:	2b00      	cmp	r3, #0
 8013392:	d00a      	beq.n	80133aa <xQueueGiveFromISR+0x48>
	__asm volatile
 8013394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013398:	f383 8811 	msr	BASEPRI, r3
 801339c:	f3bf 8f6f 	isb	sy
 80133a0:	f3bf 8f4f 	dsb	sy
 80133a4:	61fb      	str	r3, [r7, #28]
}
 80133a6:	bf00      	nop
 80133a8:	e7fe      	b.n	80133a8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80133aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d103      	bne.n	80133ba <xQueueGiveFromISR+0x58>
 80133b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133b4:	689b      	ldr	r3, [r3, #8]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d101      	bne.n	80133be <xQueueGiveFromISR+0x5c>
 80133ba:	2301      	movs	r3, #1
 80133bc:	e000      	b.n	80133c0 <xQueueGiveFromISR+0x5e>
 80133be:	2300      	movs	r3, #0
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d10a      	bne.n	80133da <xQueueGiveFromISR+0x78>
	__asm volatile
 80133c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133c8:	f383 8811 	msr	BASEPRI, r3
 80133cc:	f3bf 8f6f 	isb	sy
 80133d0:	f3bf 8f4f 	dsb	sy
 80133d4:	61bb      	str	r3, [r7, #24]
}
 80133d6:	bf00      	nop
 80133d8:	e7fe      	b.n	80133d8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80133da:	f002 fb8d 	bl	8015af8 <vPortValidateInterruptPriority>
	__asm volatile
 80133de:	f3ef 8211 	mrs	r2, BASEPRI
 80133e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133e6:	f383 8811 	msr	BASEPRI, r3
 80133ea:	f3bf 8f6f 	isb	sy
 80133ee:	f3bf 8f4f 	dsb	sy
 80133f2:	617a      	str	r2, [r7, #20]
 80133f4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80133f6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80133f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80133fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013404:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013406:	429a      	cmp	r2, r3
 8013408:	d22b      	bcs.n	8013462 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801340a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801340c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013416:	1c5a      	adds	r2, r3, #1
 8013418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801341a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801341c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013424:	d112      	bne.n	801344c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801342a:	2b00      	cmp	r3, #0
 801342c:	d016      	beq.n	801345c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801342e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013430:	3324      	adds	r3, #36	; 0x24
 8013432:	4618      	mov	r0, r3
 8013434:	f001 fa50 	bl	80148d8 <xTaskRemoveFromEventList>
 8013438:	4603      	mov	r3, r0
 801343a:	2b00      	cmp	r3, #0
 801343c:	d00e      	beq.n	801345c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801343e:	683b      	ldr	r3, [r7, #0]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d00b      	beq.n	801345c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013444:	683b      	ldr	r3, [r7, #0]
 8013446:	2201      	movs	r2, #1
 8013448:	601a      	str	r2, [r3, #0]
 801344a:	e007      	b.n	801345c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801344c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013450:	3301      	adds	r3, #1
 8013452:	b2db      	uxtb	r3, r3
 8013454:	b25a      	sxtb	r2, r3
 8013456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801345c:	2301      	movs	r3, #1
 801345e:	637b      	str	r3, [r7, #52]	; 0x34
 8013460:	e001      	b.n	8013466 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013462:	2300      	movs	r3, #0
 8013464:	637b      	str	r3, [r7, #52]	; 0x34
 8013466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013468:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	f383 8811 	msr	BASEPRI, r3
}
 8013470:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013474:	4618      	mov	r0, r3
 8013476:	3738      	adds	r7, #56	; 0x38
 8013478:	46bd      	mov	sp, r7
 801347a:	bd80      	pop	{r7, pc}

0801347c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801347c:	b580      	push	{r7, lr}
 801347e:	b08c      	sub	sp, #48	; 0x30
 8013480:	af00      	add	r7, sp, #0
 8013482:	60f8      	str	r0, [r7, #12]
 8013484:	60b9      	str	r1, [r7, #8]
 8013486:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013488:	2300      	movs	r3, #0
 801348a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013492:	2b00      	cmp	r3, #0
 8013494:	d10a      	bne.n	80134ac <xQueueReceive+0x30>
	__asm volatile
 8013496:	f04f 0350 	mov.w	r3, #80	; 0x50
 801349a:	f383 8811 	msr	BASEPRI, r3
 801349e:	f3bf 8f6f 	isb	sy
 80134a2:	f3bf 8f4f 	dsb	sy
 80134a6:	623b      	str	r3, [r7, #32]
}
 80134a8:	bf00      	nop
 80134aa:	e7fe      	b.n	80134aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80134ac:	68bb      	ldr	r3, [r7, #8]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d103      	bne.n	80134ba <xQueueReceive+0x3e>
 80134b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d101      	bne.n	80134be <xQueueReceive+0x42>
 80134ba:	2301      	movs	r3, #1
 80134bc:	e000      	b.n	80134c0 <xQueueReceive+0x44>
 80134be:	2300      	movs	r3, #0
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d10a      	bne.n	80134da <xQueueReceive+0x5e>
	__asm volatile
 80134c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134c8:	f383 8811 	msr	BASEPRI, r3
 80134cc:	f3bf 8f6f 	isb	sy
 80134d0:	f3bf 8f4f 	dsb	sy
 80134d4:	61fb      	str	r3, [r7, #28]
}
 80134d6:	bf00      	nop
 80134d8:	e7fe      	b.n	80134d8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80134da:	f001 fbcf 	bl	8014c7c <xTaskGetSchedulerState>
 80134de:	4603      	mov	r3, r0
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d102      	bne.n	80134ea <xQueueReceive+0x6e>
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d101      	bne.n	80134ee <xQueueReceive+0x72>
 80134ea:	2301      	movs	r3, #1
 80134ec:	e000      	b.n	80134f0 <xQueueReceive+0x74>
 80134ee:	2300      	movs	r3, #0
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d10a      	bne.n	801350a <xQueueReceive+0x8e>
	__asm volatile
 80134f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134f8:	f383 8811 	msr	BASEPRI, r3
 80134fc:	f3bf 8f6f 	isb	sy
 8013500:	f3bf 8f4f 	dsb	sy
 8013504:	61bb      	str	r3, [r7, #24]
}
 8013506:	bf00      	nop
 8013508:	e7fe      	b.n	8013508 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801350a:	f002 fa13 	bl	8015934 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801350e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013512:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013516:	2b00      	cmp	r3, #0
 8013518:	d01f      	beq.n	801355a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801351a:	68b9      	ldr	r1, [r7, #8]
 801351c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801351e:	f000 fabe 	bl	8013a9e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013524:	1e5a      	subs	r2, r3, #1
 8013526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013528:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801352a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801352c:	691b      	ldr	r3, [r3, #16]
 801352e:	2b00      	cmp	r3, #0
 8013530:	d00f      	beq.n	8013552 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013534:	3310      	adds	r3, #16
 8013536:	4618      	mov	r0, r3
 8013538:	f001 f9ce 	bl	80148d8 <xTaskRemoveFromEventList>
 801353c:	4603      	mov	r3, r0
 801353e:	2b00      	cmp	r3, #0
 8013540:	d007      	beq.n	8013552 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013542:	4b3d      	ldr	r3, [pc, #244]	; (8013638 <xQueueReceive+0x1bc>)
 8013544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013548:	601a      	str	r2, [r3, #0]
 801354a:	f3bf 8f4f 	dsb	sy
 801354e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013552:	f002 fa1f 	bl	8015994 <vPortExitCritical>
				return pdPASS;
 8013556:	2301      	movs	r3, #1
 8013558:	e069      	b.n	801362e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	2b00      	cmp	r3, #0
 801355e:	d103      	bne.n	8013568 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013560:	f002 fa18 	bl	8015994 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013564:	2300      	movs	r3, #0
 8013566:	e062      	b.n	801362e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801356a:	2b00      	cmp	r3, #0
 801356c:	d106      	bne.n	801357c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801356e:	f107 0310 	add.w	r3, r7, #16
 8013572:	4618      	mov	r0, r3
 8013574:	f001 fa14 	bl	80149a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013578:	2301      	movs	r3, #1
 801357a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801357c:	f002 fa0a 	bl	8015994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013580:	f000 ff80 	bl	8014484 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013584:	f002 f9d6 	bl	8015934 <vPortEnterCritical>
 8013588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801358a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801358e:	b25b      	sxtb	r3, r3
 8013590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013594:	d103      	bne.n	801359e <xQueueReceive+0x122>
 8013596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013598:	2200      	movs	r2, #0
 801359a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801359e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80135a4:	b25b      	sxtb	r3, r3
 80135a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135aa:	d103      	bne.n	80135b4 <xQueueReceive+0x138>
 80135ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135ae:	2200      	movs	r2, #0
 80135b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80135b4:	f002 f9ee 	bl	8015994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80135b8:	1d3a      	adds	r2, r7, #4
 80135ba:	f107 0310 	add.w	r3, r7, #16
 80135be:	4611      	mov	r1, r2
 80135c0:	4618      	mov	r0, r3
 80135c2:	f001 fa03 	bl	80149cc <xTaskCheckForTimeOut>
 80135c6:	4603      	mov	r3, r0
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d123      	bne.n	8013614 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80135cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80135ce:	f000 fade 	bl	8013b8e <prvIsQueueEmpty>
 80135d2:	4603      	mov	r3, r0
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d017      	beq.n	8013608 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80135d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135da:	3324      	adds	r3, #36	; 0x24
 80135dc:	687a      	ldr	r2, [r7, #4]
 80135de:	4611      	mov	r1, r2
 80135e0:	4618      	mov	r0, r3
 80135e2:	f001 f929 	bl	8014838 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80135e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80135e8:	f000 fa7f 	bl	8013aea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80135ec:	f000 ff58 	bl	80144a0 <xTaskResumeAll>
 80135f0:	4603      	mov	r3, r0
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d189      	bne.n	801350a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80135f6:	4b10      	ldr	r3, [pc, #64]	; (8013638 <xQueueReceive+0x1bc>)
 80135f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135fc:	601a      	str	r2, [r3, #0]
 80135fe:	f3bf 8f4f 	dsb	sy
 8013602:	f3bf 8f6f 	isb	sy
 8013606:	e780      	b.n	801350a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013608:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801360a:	f000 fa6e 	bl	8013aea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801360e:	f000 ff47 	bl	80144a0 <xTaskResumeAll>
 8013612:	e77a      	b.n	801350a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013616:	f000 fa68 	bl	8013aea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801361a:	f000 ff41 	bl	80144a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801361e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013620:	f000 fab5 	bl	8013b8e <prvIsQueueEmpty>
 8013624:	4603      	mov	r3, r0
 8013626:	2b00      	cmp	r3, #0
 8013628:	f43f af6f 	beq.w	801350a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801362c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801362e:	4618      	mov	r0, r3
 8013630:	3730      	adds	r7, #48	; 0x30
 8013632:	46bd      	mov	sp, r7
 8013634:	bd80      	pop	{r7, pc}
 8013636:	bf00      	nop
 8013638:	e000ed04 	.word	0xe000ed04

0801363c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801363c:	b580      	push	{r7, lr}
 801363e:	b08e      	sub	sp, #56	; 0x38
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]
 8013644:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8013646:	2300      	movs	r3, #0
 8013648:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801364e:	2300      	movs	r3, #0
 8013650:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013654:	2b00      	cmp	r3, #0
 8013656:	d10a      	bne.n	801366e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8013658:	f04f 0350 	mov.w	r3, #80	; 0x50
 801365c:	f383 8811 	msr	BASEPRI, r3
 8013660:	f3bf 8f6f 	isb	sy
 8013664:	f3bf 8f4f 	dsb	sy
 8013668:	623b      	str	r3, [r7, #32]
}
 801366a:	bf00      	nop
 801366c:	e7fe      	b.n	801366c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801366e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013672:	2b00      	cmp	r3, #0
 8013674:	d00a      	beq.n	801368c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8013676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801367a:	f383 8811 	msr	BASEPRI, r3
 801367e:	f3bf 8f6f 	isb	sy
 8013682:	f3bf 8f4f 	dsb	sy
 8013686:	61fb      	str	r3, [r7, #28]
}
 8013688:	bf00      	nop
 801368a:	e7fe      	b.n	801368a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801368c:	f001 faf6 	bl	8014c7c <xTaskGetSchedulerState>
 8013690:	4603      	mov	r3, r0
 8013692:	2b00      	cmp	r3, #0
 8013694:	d102      	bne.n	801369c <xQueueSemaphoreTake+0x60>
 8013696:	683b      	ldr	r3, [r7, #0]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d101      	bne.n	80136a0 <xQueueSemaphoreTake+0x64>
 801369c:	2301      	movs	r3, #1
 801369e:	e000      	b.n	80136a2 <xQueueSemaphoreTake+0x66>
 80136a0:	2300      	movs	r3, #0
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d10a      	bne.n	80136bc <xQueueSemaphoreTake+0x80>
	__asm volatile
 80136a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136aa:	f383 8811 	msr	BASEPRI, r3
 80136ae:	f3bf 8f6f 	isb	sy
 80136b2:	f3bf 8f4f 	dsb	sy
 80136b6:	61bb      	str	r3, [r7, #24]
}
 80136b8:	bf00      	nop
 80136ba:	e7fe      	b.n	80136ba <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80136bc:	f002 f93a 	bl	8015934 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80136c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136c4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80136c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d024      	beq.n	8013716 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80136cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136ce:	1e5a      	subs	r2, r3, #1
 80136d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136d2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80136d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d104      	bne.n	80136e6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80136dc:	f001 fc44 	bl	8014f68 <pvTaskIncrementMutexHeldCount>
 80136e0:	4602      	mov	r2, r0
 80136e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136e4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80136e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136e8:	691b      	ldr	r3, [r3, #16]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d00f      	beq.n	801370e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80136ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136f0:	3310      	adds	r3, #16
 80136f2:	4618      	mov	r0, r3
 80136f4:	f001 f8f0 	bl	80148d8 <xTaskRemoveFromEventList>
 80136f8:	4603      	mov	r3, r0
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d007      	beq.n	801370e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80136fe:	4b54      	ldr	r3, [pc, #336]	; (8013850 <xQueueSemaphoreTake+0x214>)
 8013700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013704:	601a      	str	r2, [r3, #0]
 8013706:	f3bf 8f4f 	dsb	sy
 801370a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801370e:	f002 f941 	bl	8015994 <vPortExitCritical>
				return pdPASS;
 8013712:	2301      	movs	r3, #1
 8013714:	e097      	b.n	8013846 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013716:	683b      	ldr	r3, [r7, #0]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d111      	bne.n	8013740 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801371c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801371e:	2b00      	cmp	r3, #0
 8013720:	d00a      	beq.n	8013738 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8013722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013726:	f383 8811 	msr	BASEPRI, r3
 801372a:	f3bf 8f6f 	isb	sy
 801372e:	f3bf 8f4f 	dsb	sy
 8013732:	617b      	str	r3, [r7, #20]
}
 8013734:	bf00      	nop
 8013736:	e7fe      	b.n	8013736 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013738:	f002 f92c 	bl	8015994 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801373c:	2300      	movs	r3, #0
 801373e:	e082      	b.n	8013846 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013742:	2b00      	cmp	r3, #0
 8013744:	d106      	bne.n	8013754 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013746:	f107 030c 	add.w	r3, r7, #12
 801374a:	4618      	mov	r0, r3
 801374c:	f001 f928 	bl	80149a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013750:	2301      	movs	r3, #1
 8013752:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013754:	f002 f91e 	bl	8015994 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013758:	f000 fe94 	bl	8014484 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801375c:	f002 f8ea 	bl	8015934 <vPortEnterCritical>
 8013760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013762:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013766:	b25b      	sxtb	r3, r3
 8013768:	f1b3 3fff 	cmp.w	r3, #4294967295
 801376c:	d103      	bne.n	8013776 <xQueueSemaphoreTake+0x13a>
 801376e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013770:	2200      	movs	r2, #0
 8013772:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013778:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801377c:	b25b      	sxtb	r3, r3
 801377e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013782:	d103      	bne.n	801378c <xQueueSemaphoreTake+0x150>
 8013784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013786:	2200      	movs	r2, #0
 8013788:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801378c:	f002 f902 	bl	8015994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013790:	463a      	mov	r2, r7
 8013792:	f107 030c 	add.w	r3, r7, #12
 8013796:	4611      	mov	r1, r2
 8013798:	4618      	mov	r0, r3
 801379a:	f001 f917 	bl	80149cc <xTaskCheckForTimeOut>
 801379e:	4603      	mov	r3, r0
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d132      	bne.n	801380a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80137a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80137a6:	f000 f9f2 	bl	8013b8e <prvIsQueueEmpty>
 80137aa:	4603      	mov	r3, r0
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d026      	beq.n	80137fe <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80137b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d109      	bne.n	80137cc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80137b8:	f002 f8bc 	bl	8015934 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80137bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137be:	689b      	ldr	r3, [r3, #8]
 80137c0:	4618      	mov	r0, r3
 80137c2:	f001 fa79 	bl	8014cb8 <xTaskPriorityInherit>
 80137c6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80137c8:	f002 f8e4 	bl	8015994 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80137cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137ce:	3324      	adds	r3, #36	; 0x24
 80137d0:	683a      	ldr	r2, [r7, #0]
 80137d2:	4611      	mov	r1, r2
 80137d4:	4618      	mov	r0, r3
 80137d6:	f001 f82f 	bl	8014838 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80137da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80137dc:	f000 f985 	bl	8013aea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80137e0:	f000 fe5e 	bl	80144a0 <xTaskResumeAll>
 80137e4:	4603      	mov	r3, r0
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	f47f af68 	bne.w	80136bc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80137ec:	4b18      	ldr	r3, [pc, #96]	; (8013850 <xQueueSemaphoreTake+0x214>)
 80137ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137f2:	601a      	str	r2, [r3, #0]
 80137f4:	f3bf 8f4f 	dsb	sy
 80137f8:	f3bf 8f6f 	isb	sy
 80137fc:	e75e      	b.n	80136bc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80137fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013800:	f000 f973 	bl	8013aea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013804:	f000 fe4c 	bl	80144a0 <xTaskResumeAll>
 8013808:	e758      	b.n	80136bc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801380a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801380c:	f000 f96d 	bl	8013aea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013810:	f000 fe46 	bl	80144a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013814:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013816:	f000 f9ba 	bl	8013b8e <prvIsQueueEmpty>
 801381a:	4603      	mov	r3, r0
 801381c:	2b00      	cmp	r3, #0
 801381e:	f43f af4d 	beq.w	80136bc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013824:	2b00      	cmp	r3, #0
 8013826:	d00d      	beq.n	8013844 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8013828:	f002 f884 	bl	8015934 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801382c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801382e:	f000 f8b4 	bl	801399a <prvGetDisinheritPriorityAfterTimeout>
 8013832:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013836:	689b      	ldr	r3, [r3, #8]
 8013838:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801383a:	4618      	mov	r0, r3
 801383c:	f001 fb12 	bl	8014e64 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013840:	f002 f8a8 	bl	8015994 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013844:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013846:	4618      	mov	r0, r3
 8013848:	3738      	adds	r7, #56	; 0x38
 801384a:	46bd      	mov	sp, r7
 801384c:	bd80      	pop	{r7, pc}
 801384e:	bf00      	nop
 8013850:	e000ed04 	.word	0xe000ed04

08013854 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013854:	b580      	push	{r7, lr}
 8013856:	b08e      	sub	sp, #56	; 0x38
 8013858:	af00      	add	r7, sp, #0
 801385a:	60f8      	str	r0, [r7, #12]
 801385c:	60b9      	str	r1, [r7, #8]
 801385e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013866:	2b00      	cmp	r3, #0
 8013868:	d10a      	bne.n	8013880 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801386a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801386e:	f383 8811 	msr	BASEPRI, r3
 8013872:	f3bf 8f6f 	isb	sy
 8013876:	f3bf 8f4f 	dsb	sy
 801387a:	623b      	str	r3, [r7, #32]
}
 801387c:	bf00      	nop
 801387e:	e7fe      	b.n	801387e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013880:	68bb      	ldr	r3, [r7, #8]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d103      	bne.n	801388e <xQueueReceiveFromISR+0x3a>
 8013886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801388a:	2b00      	cmp	r3, #0
 801388c:	d101      	bne.n	8013892 <xQueueReceiveFromISR+0x3e>
 801388e:	2301      	movs	r3, #1
 8013890:	e000      	b.n	8013894 <xQueueReceiveFromISR+0x40>
 8013892:	2300      	movs	r3, #0
 8013894:	2b00      	cmp	r3, #0
 8013896:	d10a      	bne.n	80138ae <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8013898:	f04f 0350 	mov.w	r3, #80	; 0x50
 801389c:	f383 8811 	msr	BASEPRI, r3
 80138a0:	f3bf 8f6f 	isb	sy
 80138a4:	f3bf 8f4f 	dsb	sy
 80138a8:	61fb      	str	r3, [r7, #28]
}
 80138aa:	bf00      	nop
 80138ac:	e7fe      	b.n	80138ac <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80138ae:	f002 f923 	bl	8015af8 <vPortValidateInterruptPriority>
	__asm volatile
 80138b2:	f3ef 8211 	mrs	r2, BASEPRI
 80138b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138ba:	f383 8811 	msr	BASEPRI, r3
 80138be:	f3bf 8f6f 	isb	sy
 80138c2:	f3bf 8f4f 	dsb	sy
 80138c6:	61ba      	str	r2, [r7, #24]
 80138c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80138ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80138cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80138ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80138d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d02f      	beq.n	801393a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80138da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80138e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80138e4:	68b9      	ldr	r1, [r7, #8]
 80138e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80138e8:	f000 f8d9 	bl	8013a9e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80138ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138ee:	1e5a      	subs	r2, r3, #1
 80138f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80138f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80138f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138fc:	d112      	bne.n	8013924 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80138fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013900:	691b      	ldr	r3, [r3, #16]
 8013902:	2b00      	cmp	r3, #0
 8013904:	d016      	beq.n	8013934 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013908:	3310      	adds	r3, #16
 801390a:	4618      	mov	r0, r3
 801390c:	f000 ffe4 	bl	80148d8 <xTaskRemoveFromEventList>
 8013910:	4603      	mov	r3, r0
 8013912:	2b00      	cmp	r3, #0
 8013914:	d00e      	beq.n	8013934 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	2b00      	cmp	r3, #0
 801391a:	d00b      	beq.n	8013934 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	2201      	movs	r2, #1
 8013920:	601a      	str	r2, [r3, #0]
 8013922:	e007      	b.n	8013934 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013928:	3301      	adds	r3, #1
 801392a:	b2db      	uxtb	r3, r3
 801392c:	b25a      	sxtb	r2, r3
 801392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013934:	2301      	movs	r3, #1
 8013936:	637b      	str	r3, [r7, #52]	; 0x34
 8013938:	e001      	b.n	801393e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801393a:	2300      	movs	r3, #0
 801393c:	637b      	str	r3, [r7, #52]	; 0x34
 801393e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013940:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013942:	693b      	ldr	r3, [r7, #16]
 8013944:	f383 8811 	msr	BASEPRI, r3
}
 8013948:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801394a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801394c:	4618      	mov	r0, r3
 801394e:	3738      	adds	r7, #56	; 0x38
 8013950:	46bd      	mov	sp, r7
 8013952:	bd80      	pop	{r7, pc}

08013954 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8013954:	b580      	push	{r7, lr}
 8013956:	b084      	sub	sp, #16
 8013958:	af00      	add	r7, sp, #0
 801395a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	2b00      	cmp	r3, #0
 8013964:	d10a      	bne.n	801397c <vQueueDelete+0x28>
	__asm volatile
 8013966:	f04f 0350 	mov.w	r3, #80	; 0x50
 801396a:	f383 8811 	msr	BASEPRI, r3
 801396e:	f3bf 8f6f 	isb	sy
 8013972:	f3bf 8f4f 	dsb	sy
 8013976:	60bb      	str	r3, [r7, #8]
}
 8013978:	bf00      	nop
 801397a:	e7fe      	b.n	801397a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801397c:	68f8      	ldr	r0, [r7, #12]
 801397e:	f000 f95f 	bl	8013c40 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8013988:	2b00      	cmp	r3, #0
 801398a:	d102      	bne.n	8013992 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 801398c:	68f8      	ldr	r0, [r7, #12]
 801398e:	f002 f9bf 	bl	8015d10 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8013992:	bf00      	nop
 8013994:	3710      	adds	r7, #16
 8013996:	46bd      	mov	sp, r7
 8013998:	bd80      	pop	{r7, pc}

0801399a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801399a:	b480      	push	{r7}
 801399c:	b085      	sub	sp, #20
 801399e:	af00      	add	r7, sp, #0
 80139a0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d006      	beq.n	80139b8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80139b4:	60fb      	str	r3, [r7, #12]
 80139b6:	e001      	b.n	80139bc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80139b8:	2300      	movs	r3, #0
 80139ba:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80139bc:	68fb      	ldr	r3, [r7, #12]
	}
 80139be:	4618      	mov	r0, r3
 80139c0:	3714      	adds	r7, #20
 80139c2:	46bd      	mov	sp, r7
 80139c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c8:	4770      	bx	lr

080139ca <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80139ca:	b580      	push	{r7, lr}
 80139cc:	b086      	sub	sp, #24
 80139ce:	af00      	add	r7, sp, #0
 80139d0:	60f8      	str	r0, [r7, #12]
 80139d2:	60b9      	str	r1, [r7, #8]
 80139d4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80139d6:	2300      	movs	r3, #0
 80139d8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139de:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d10d      	bne.n	8013a04 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d14d      	bne.n	8013a8c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	689b      	ldr	r3, [r3, #8]
 80139f4:	4618      	mov	r0, r3
 80139f6:	f001 f9c7 	bl	8014d88 <xTaskPriorityDisinherit>
 80139fa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	2200      	movs	r2, #0
 8013a00:	609a      	str	r2, [r3, #8]
 8013a02:	e043      	b.n	8013a8c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d119      	bne.n	8013a3e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	6858      	ldr	r0, [r3, #4]
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a12:	461a      	mov	r2, r3
 8013a14:	68b9      	ldr	r1, [r7, #8]
 8013a16:	f003 fbb9 	bl	801718c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	685a      	ldr	r2, [r3, #4]
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a22:	441a      	add	r2, r3
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	685a      	ldr	r2, [r3, #4]
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	689b      	ldr	r3, [r3, #8]
 8013a30:	429a      	cmp	r2, r3
 8013a32:	d32b      	bcc.n	8013a8c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	681a      	ldr	r2, [r3, #0]
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	605a      	str	r2, [r3, #4]
 8013a3c:	e026      	b.n	8013a8c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	68d8      	ldr	r0, [r3, #12]
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a46:	461a      	mov	r2, r3
 8013a48:	68b9      	ldr	r1, [r7, #8]
 8013a4a:	f003 fb9f 	bl	801718c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	68da      	ldr	r2, [r3, #12]
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a56:	425b      	negs	r3, r3
 8013a58:	441a      	add	r2, r3
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	68da      	ldr	r2, [r3, #12]
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	429a      	cmp	r2, r3
 8013a68:	d207      	bcs.n	8013a7a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	689a      	ldr	r2, [r3, #8]
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a72:	425b      	negs	r3, r3
 8013a74:	441a      	add	r2, r3
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	2b02      	cmp	r3, #2
 8013a7e:	d105      	bne.n	8013a8c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013a80:	693b      	ldr	r3, [r7, #16]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d002      	beq.n	8013a8c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013a86:	693b      	ldr	r3, [r7, #16]
 8013a88:	3b01      	subs	r3, #1
 8013a8a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013a8c:	693b      	ldr	r3, [r7, #16]
 8013a8e:	1c5a      	adds	r2, r3, #1
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013a94:	697b      	ldr	r3, [r7, #20]
}
 8013a96:	4618      	mov	r0, r3
 8013a98:	3718      	adds	r7, #24
 8013a9a:	46bd      	mov	sp, r7
 8013a9c:	bd80      	pop	{r7, pc}

08013a9e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013a9e:	b580      	push	{r7, lr}
 8013aa0:	b082      	sub	sp, #8
 8013aa2:	af00      	add	r7, sp, #0
 8013aa4:	6078      	str	r0, [r7, #4]
 8013aa6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d018      	beq.n	8013ae2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	68da      	ldr	r2, [r3, #12]
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ab8:	441a      	add	r2, r3
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	68da      	ldr	r2, [r3, #12]
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	689b      	ldr	r3, [r3, #8]
 8013ac6:	429a      	cmp	r2, r3
 8013ac8:	d303      	bcc.n	8013ad2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	681a      	ldr	r2, [r3, #0]
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	68d9      	ldr	r1, [r3, #12]
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ada:	461a      	mov	r2, r3
 8013adc:	6838      	ldr	r0, [r7, #0]
 8013ade:	f003 fb55 	bl	801718c <memcpy>
	}
}
 8013ae2:	bf00      	nop
 8013ae4:	3708      	adds	r7, #8
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	bd80      	pop	{r7, pc}

08013aea <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013aea:	b580      	push	{r7, lr}
 8013aec:	b084      	sub	sp, #16
 8013aee:	af00      	add	r7, sp, #0
 8013af0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013af2:	f001 ff1f 	bl	8015934 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013afc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013afe:	e011      	b.n	8013b24 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d012      	beq.n	8013b2e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	3324      	adds	r3, #36	; 0x24
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	f000 fee3 	bl	80148d8 <xTaskRemoveFromEventList>
 8013b12:	4603      	mov	r3, r0
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d001      	beq.n	8013b1c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013b18:	f000 ffba 	bl	8014a90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013b1c:	7bfb      	ldrb	r3, [r7, #15]
 8013b1e:	3b01      	subs	r3, #1
 8013b20:	b2db      	uxtb	r3, r3
 8013b22:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	dce9      	bgt.n	8013b00 <prvUnlockQueue+0x16>
 8013b2c:	e000      	b.n	8013b30 <prvUnlockQueue+0x46>
					break;
 8013b2e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	22ff      	movs	r2, #255	; 0xff
 8013b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013b38:	f001 ff2c 	bl	8015994 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013b3c:	f001 fefa 	bl	8015934 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013b46:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013b48:	e011      	b.n	8013b6e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	691b      	ldr	r3, [r3, #16]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d012      	beq.n	8013b78 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	3310      	adds	r3, #16
 8013b56:	4618      	mov	r0, r3
 8013b58:	f000 febe 	bl	80148d8 <xTaskRemoveFromEventList>
 8013b5c:	4603      	mov	r3, r0
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d001      	beq.n	8013b66 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013b62:	f000 ff95 	bl	8014a90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013b66:	7bbb      	ldrb	r3, [r7, #14]
 8013b68:	3b01      	subs	r3, #1
 8013b6a:	b2db      	uxtb	r3, r3
 8013b6c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013b6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	dce9      	bgt.n	8013b4a <prvUnlockQueue+0x60>
 8013b76:	e000      	b.n	8013b7a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013b78:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	22ff      	movs	r2, #255	; 0xff
 8013b7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013b82:	f001 ff07 	bl	8015994 <vPortExitCritical>
}
 8013b86:	bf00      	nop
 8013b88:	3710      	adds	r7, #16
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	bd80      	pop	{r7, pc}

08013b8e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013b8e:	b580      	push	{r7, lr}
 8013b90:	b084      	sub	sp, #16
 8013b92:	af00      	add	r7, sp, #0
 8013b94:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013b96:	f001 fecd 	bl	8015934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d102      	bne.n	8013ba8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013ba2:	2301      	movs	r3, #1
 8013ba4:	60fb      	str	r3, [r7, #12]
 8013ba6:	e001      	b.n	8013bac <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013ba8:	2300      	movs	r3, #0
 8013baa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013bac:	f001 fef2 	bl	8015994 <vPortExitCritical>

	return xReturn;
 8013bb0:	68fb      	ldr	r3, [r7, #12]
}
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	3710      	adds	r7, #16
 8013bb6:	46bd      	mov	sp, r7
 8013bb8:	bd80      	pop	{r7, pc}

08013bba <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013bba:	b580      	push	{r7, lr}
 8013bbc:	b084      	sub	sp, #16
 8013bbe:	af00      	add	r7, sp, #0
 8013bc0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013bc2:	f001 feb7 	bl	8015934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013bce:	429a      	cmp	r2, r3
 8013bd0:	d102      	bne.n	8013bd8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013bd2:	2301      	movs	r3, #1
 8013bd4:	60fb      	str	r3, [r7, #12]
 8013bd6:	e001      	b.n	8013bdc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013bd8:	2300      	movs	r3, #0
 8013bda:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013bdc:	f001 feda 	bl	8015994 <vPortExitCritical>

	return xReturn;
 8013be0:	68fb      	ldr	r3, [r7, #12]
}
 8013be2:	4618      	mov	r0, r3
 8013be4:	3710      	adds	r7, #16
 8013be6:	46bd      	mov	sp, r7
 8013be8:	bd80      	pop	{r7, pc}
	...

08013bec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013bec:	b480      	push	{r7}
 8013bee:	b085      	sub	sp, #20
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	6078      	str	r0, [r7, #4]
 8013bf4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	60fb      	str	r3, [r7, #12]
 8013bfa:	e014      	b.n	8013c26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013bfc:	4a0f      	ldr	r2, [pc, #60]	; (8013c3c <vQueueAddToRegistry+0x50>)
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d10b      	bne.n	8013c20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013c08:	490c      	ldr	r1, [pc, #48]	; (8013c3c <vQueueAddToRegistry+0x50>)
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	683a      	ldr	r2, [r7, #0]
 8013c0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013c12:	4a0a      	ldr	r2, [pc, #40]	; (8013c3c <vQueueAddToRegistry+0x50>)
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	00db      	lsls	r3, r3, #3
 8013c18:	4413      	add	r3, r2
 8013c1a:	687a      	ldr	r2, [r7, #4]
 8013c1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013c1e:	e006      	b.n	8013c2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	3301      	adds	r3, #1
 8013c24:	60fb      	str	r3, [r7, #12]
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	2b07      	cmp	r3, #7
 8013c2a:	d9e7      	bls.n	8013bfc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013c2c:	bf00      	nop
 8013c2e:	bf00      	nop
 8013c30:	3714      	adds	r7, #20
 8013c32:	46bd      	mov	sp, r7
 8013c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c38:	4770      	bx	lr
 8013c3a:	bf00      	nop
 8013c3c:	2000d07c 	.word	0x2000d07c

08013c40 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8013c40:	b480      	push	{r7}
 8013c42:	b085      	sub	sp, #20
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013c48:	2300      	movs	r3, #0
 8013c4a:	60fb      	str	r3, [r7, #12]
 8013c4c:	e016      	b.n	8013c7c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013c4e:	4a10      	ldr	r2, [pc, #64]	; (8013c90 <vQueueUnregisterQueue+0x50>)
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	00db      	lsls	r3, r3, #3
 8013c54:	4413      	add	r3, r2
 8013c56:	685b      	ldr	r3, [r3, #4]
 8013c58:	687a      	ldr	r2, [r7, #4]
 8013c5a:	429a      	cmp	r2, r3
 8013c5c:	d10b      	bne.n	8013c76 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013c5e:	4a0c      	ldr	r2, [pc, #48]	; (8013c90 <vQueueUnregisterQueue+0x50>)
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	2100      	movs	r1, #0
 8013c64:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013c68:	4a09      	ldr	r2, [pc, #36]	; (8013c90 <vQueueUnregisterQueue+0x50>)
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	00db      	lsls	r3, r3, #3
 8013c6e:	4413      	add	r3, r2
 8013c70:	2200      	movs	r2, #0
 8013c72:	605a      	str	r2, [r3, #4]
				break;
 8013c74:	e006      	b.n	8013c84 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	3301      	adds	r3, #1
 8013c7a:	60fb      	str	r3, [r7, #12]
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	2b07      	cmp	r3, #7
 8013c80:	d9e5      	bls.n	8013c4e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8013c82:	bf00      	nop
 8013c84:	bf00      	nop
 8013c86:	3714      	adds	r7, #20
 8013c88:	46bd      	mov	sp, r7
 8013c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c8e:	4770      	bx	lr
 8013c90:	2000d07c 	.word	0x2000d07c

08013c94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013c94:	b580      	push	{r7, lr}
 8013c96:	b086      	sub	sp, #24
 8013c98:	af00      	add	r7, sp, #0
 8013c9a:	60f8      	str	r0, [r7, #12]
 8013c9c:	60b9      	str	r1, [r7, #8]
 8013c9e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013ca4:	f001 fe46 	bl	8015934 <vPortEnterCritical>
 8013ca8:	697b      	ldr	r3, [r7, #20]
 8013caa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013cae:	b25b      	sxtb	r3, r3
 8013cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cb4:	d103      	bne.n	8013cbe <vQueueWaitForMessageRestricted+0x2a>
 8013cb6:	697b      	ldr	r3, [r7, #20]
 8013cb8:	2200      	movs	r2, #0
 8013cba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013cbe:	697b      	ldr	r3, [r7, #20]
 8013cc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013cc4:	b25b      	sxtb	r3, r3
 8013cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cca:	d103      	bne.n	8013cd4 <vQueueWaitForMessageRestricted+0x40>
 8013ccc:	697b      	ldr	r3, [r7, #20]
 8013cce:	2200      	movs	r2, #0
 8013cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013cd4:	f001 fe5e 	bl	8015994 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013cd8:	697b      	ldr	r3, [r7, #20]
 8013cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d106      	bne.n	8013cee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013ce0:	697b      	ldr	r3, [r7, #20]
 8013ce2:	3324      	adds	r3, #36	; 0x24
 8013ce4:	687a      	ldr	r2, [r7, #4]
 8013ce6:	68b9      	ldr	r1, [r7, #8]
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f000 fdc9 	bl	8014880 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013cee:	6978      	ldr	r0, [r7, #20]
 8013cf0:	f7ff fefb 	bl	8013aea <prvUnlockQueue>
	}
 8013cf4:	bf00      	nop
 8013cf6:	3718      	adds	r7, #24
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	bd80      	pop	{r7, pc}

08013cfc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b08e      	sub	sp, #56	; 0x38
 8013d00:	af04      	add	r7, sp, #16
 8013d02:	60f8      	str	r0, [r7, #12]
 8013d04:	60b9      	str	r1, [r7, #8]
 8013d06:	607a      	str	r2, [r7, #4]
 8013d08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d10a      	bne.n	8013d26 <xTaskCreateStatic+0x2a>
	__asm volatile
 8013d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d14:	f383 8811 	msr	BASEPRI, r3
 8013d18:	f3bf 8f6f 	isb	sy
 8013d1c:	f3bf 8f4f 	dsb	sy
 8013d20:	623b      	str	r3, [r7, #32]
}
 8013d22:	bf00      	nop
 8013d24:	e7fe      	b.n	8013d24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d10a      	bne.n	8013d42 <xTaskCreateStatic+0x46>
	__asm volatile
 8013d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d30:	f383 8811 	msr	BASEPRI, r3
 8013d34:	f3bf 8f6f 	isb	sy
 8013d38:	f3bf 8f4f 	dsb	sy
 8013d3c:	61fb      	str	r3, [r7, #28]
}
 8013d3e:	bf00      	nop
 8013d40:	e7fe      	b.n	8013d40 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013d42:	23bc      	movs	r3, #188	; 0xbc
 8013d44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013d46:	693b      	ldr	r3, [r7, #16]
 8013d48:	2bbc      	cmp	r3, #188	; 0xbc
 8013d4a:	d00a      	beq.n	8013d62 <xTaskCreateStatic+0x66>
	__asm volatile
 8013d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d50:	f383 8811 	msr	BASEPRI, r3
 8013d54:	f3bf 8f6f 	isb	sy
 8013d58:	f3bf 8f4f 	dsb	sy
 8013d5c:	61bb      	str	r3, [r7, #24]
}
 8013d5e:	bf00      	nop
 8013d60:	e7fe      	b.n	8013d60 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013d62:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d01e      	beq.n	8013da8 <xTaskCreateStatic+0xac>
 8013d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d01b      	beq.n	8013da8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d72:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013d78:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d7c:	2202      	movs	r2, #2
 8013d7e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013d82:	2300      	movs	r3, #0
 8013d84:	9303      	str	r3, [sp, #12]
 8013d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d88:	9302      	str	r3, [sp, #8]
 8013d8a:	f107 0314 	add.w	r3, r7, #20
 8013d8e:	9301      	str	r3, [sp, #4]
 8013d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d92:	9300      	str	r3, [sp, #0]
 8013d94:	683b      	ldr	r3, [r7, #0]
 8013d96:	687a      	ldr	r2, [r7, #4]
 8013d98:	68b9      	ldr	r1, [r7, #8]
 8013d9a:	68f8      	ldr	r0, [r7, #12]
 8013d9c:	f000 f850 	bl	8013e40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013da0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013da2:	f000 f8f3 	bl	8013f8c <prvAddNewTaskToReadyList>
 8013da6:	e001      	b.n	8013dac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8013da8:	2300      	movs	r3, #0
 8013daa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013dac:	697b      	ldr	r3, [r7, #20]
	}
 8013dae:	4618      	mov	r0, r3
 8013db0:	3728      	adds	r7, #40	; 0x28
 8013db2:	46bd      	mov	sp, r7
 8013db4:	bd80      	pop	{r7, pc}

08013db6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013db6:	b580      	push	{r7, lr}
 8013db8:	b08c      	sub	sp, #48	; 0x30
 8013dba:	af04      	add	r7, sp, #16
 8013dbc:	60f8      	str	r0, [r7, #12]
 8013dbe:	60b9      	str	r1, [r7, #8]
 8013dc0:	603b      	str	r3, [r7, #0]
 8013dc2:	4613      	mov	r3, r2
 8013dc4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013dc6:	88fb      	ldrh	r3, [r7, #6]
 8013dc8:	009b      	lsls	r3, r3, #2
 8013dca:	4618      	mov	r0, r3
 8013dcc:	f001 fed4 	bl	8015b78 <pvPortMalloc>
 8013dd0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013dd2:	697b      	ldr	r3, [r7, #20]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d00e      	beq.n	8013df6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013dd8:	20bc      	movs	r0, #188	; 0xbc
 8013dda:	f001 fecd 	bl	8015b78 <pvPortMalloc>
 8013dde:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013de0:	69fb      	ldr	r3, [r7, #28]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d003      	beq.n	8013dee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013de6:	69fb      	ldr	r3, [r7, #28]
 8013de8:	697a      	ldr	r2, [r7, #20]
 8013dea:	631a      	str	r2, [r3, #48]	; 0x30
 8013dec:	e005      	b.n	8013dfa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013dee:	6978      	ldr	r0, [r7, #20]
 8013df0:	f001 ff8e 	bl	8015d10 <vPortFree>
 8013df4:	e001      	b.n	8013dfa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013df6:	2300      	movs	r3, #0
 8013df8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013dfa:	69fb      	ldr	r3, [r7, #28]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d017      	beq.n	8013e30 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013e00:	69fb      	ldr	r3, [r7, #28]
 8013e02:	2200      	movs	r2, #0
 8013e04:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013e08:	88fa      	ldrh	r2, [r7, #6]
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	9303      	str	r3, [sp, #12]
 8013e0e:	69fb      	ldr	r3, [r7, #28]
 8013e10:	9302      	str	r3, [sp, #8]
 8013e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e14:	9301      	str	r3, [sp, #4]
 8013e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e18:	9300      	str	r3, [sp, #0]
 8013e1a:	683b      	ldr	r3, [r7, #0]
 8013e1c:	68b9      	ldr	r1, [r7, #8]
 8013e1e:	68f8      	ldr	r0, [r7, #12]
 8013e20:	f000 f80e 	bl	8013e40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013e24:	69f8      	ldr	r0, [r7, #28]
 8013e26:	f000 f8b1 	bl	8013f8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013e2a:	2301      	movs	r3, #1
 8013e2c:	61bb      	str	r3, [r7, #24]
 8013e2e:	e002      	b.n	8013e36 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013e30:	f04f 33ff 	mov.w	r3, #4294967295
 8013e34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013e36:	69bb      	ldr	r3, [r7, #24]
	}
 8013e38:	4618      	mov	r0, r3
 8013e3a:	3720      	adds	r7, #32
 8013e3c:	46bd      	mov	sp, r7
 8013e3e:	bd80      	pop	{r7, pc}

08013e40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b088      	sub	sp, #32
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	60f8      	str	r0, [r7, #12]
 8013e48:	60b9      	str	r1, [r7, #8]
 8013e4a:	607a      	str	r2, [r7, #4]
 8013e4c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	009b      	lsls	r3, r3, #2
 8013e56:	461a      	mov	r2, r3
 8013e58:	21a5      	movs	r1, #165	; 0xa5
 8013e5a:	f003 f9bf 	bl	80171dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013e68:	3b01      	subs	r3, #1
 8013e6a:	009b      	lsls	r3, r3, #2
 8013e6c:	4413      	add	r3, r2
 8013e6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013e70:	69bb      	ldr	r3, [r7, #24]
 8013e72:	f023 0307 	bic.w	r3, r3, #7
 8013e76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013e78:	69bb      	ldr	r3, [r7, #24]
 8013e7a:	f003 0307 	and.w	r3, r3, #7
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d00a      	beq.n	8013e98 <prvInitialiseNewTask+0x58>
	__asm volatile
 8013e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e86:	f383 8811 	msr	BASEPRI, r3
 8013e8a:	f3bf 8f6f 	isb	sy
 8013e8e:	f3bf 8f4f 	dsb	sy
 8013e92:	617b      	str	r3, [r7, #20]
}
 8013e94:	bf00      	nop
 8013e96:	e7fe      	b.n	8013e96 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013e98:	68bb      	ldr	r3, [r7, #8]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d01f      	beq.n	8013ede <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	61fb      	str	r3, [r7, #28]
 8013ea2:	e012      	b.n	8013eca <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013ea4:	68ba      	ldr	r2, [r7, #8]
 8013ea6:	69fb      	ldr	r3, [r7, #28]
 8013ea8:	4413      	add	r3, r2
 8013eaa:	7819      	ldrb	r1, [r3, #0]
 8013eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013eae:	69fb      	ldr	r3, [r7, #28]
 8013eb0:	4413      	add	r3, r2
 8013eb2:	3334      	adds	r3, #52	; 0x34
 8013eb4:	460a      	mov	r2, r1
 8013eb6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013eb8:	68ba      	ldr	r2, [r7, #8]
 8013eba:	69fb      	ldr	r3, [r7, #28]
 8013ebc:	4413      	add	r3, r2
 8013ebe:	781b      	ldrb	r3, [r3, #0]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d006      	beq.n	8013ed2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013ec4:	69fb      	ldr	r3, [r7, #28]
 8013ec6:	3301      	adds	r3, #1
 8013ec8:	61fb      	str	r3, [r7, #28]
 8013eca:	69fb      	ldr	r3, [r7, #28]
 8013ecc:	2b0f      	cmp	r3, #15
 8013ece:	d9e9      	bls.n	8013ea4 <prvInitialiseNewTask+0x64>
 8013ed0:	e000      	b.n	8013ed4 <prvInitialiseNewTask+0x94>
			{
				break;
 8013ed2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ed6:	2200      	movs	r2, #0
 8013ed8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013edc:	e003      	b.n	8013ee6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ee0:	2200      	movs	r2, #0
 8013ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ee8:	2b37      	cmp	r3, #55	; 0x37
 8013eea:	d901      	bls.n	8013ef0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013eec:	2337      	movs	r3, #55	; 0x37
 8013eee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ef2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ef4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ef8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013efa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013efe:	2200      	movs	r2, #0
 8013f00:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f04:	3304      	adds	r3, #4
 8013f06:	4618      	mov	r0, r3
 8013f08:	f7fe fe56 	bl	8012bb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f0e:	3318      	adds	r3, #24
 8013f10:	4618      	mov	r0, r3
 8013f12:	f7fe fe51 	bl	8012bb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f1a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f24:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f2a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f2e:	2200      	movs	r2, #0
 8013f30:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f36:	2200      	movs	r2, #0
 8013f38:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8013f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f3e:	3354      	adds	r3, #84	; 0x54
 8013f40:	2260      	movs	r2, #96	; 0x60
 8013f42:	2100      	movs	r1, #0
 8013f44:	4618      	mov	r0, r3
 8013f46:	f003 f949 	bl	80171dc <memset>
 8013f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f4c:	4a0c      	ldr	r2, [pc, #48]	; (8013f80 <prvInitialiseNewTask+0x140>)
 8013f4e:	659a      	str	r2, [r3, #88]	; 0x58
 8013f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f52:	4a0c      	ldr	r2, [pc, #48]	; (8013f84 <prvInitialiseNewTask+0x144>)
 8013f54:	65da      	str	r2, [r3, #92]	; 0x5c
 8013f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f58:	4a0b      	ldr	r2, [pc, #44]	; (8013f88 <prvInitialiseNewTask+0x148>)
 8013f5a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013f5c:	683a      	ldr	r2, [r7, #0]
 8013f5e:	68f9      	ldr	r1, [r7, #12]
 8013f60:	69b8      	ldr	r0, [r7, #24]
 8013f62:	f001 fbb7 	bl	80156d4 <pxPortInitialiseStack>
 8013f66:	4602      	mov	r2, r0
 8013f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f6a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d002      	beq.n	8013f78 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f76:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013f78:	bf00      	nop
 8013f7a:	3720      	adds	r7, #32
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	bd80      	pop	{r7, pc}
 8013f80:	0801d854 	.word	0x0801d854
 8013f84:	0801d874 	.word	0x0801d874
 8013f88:	0801d834 	.word	0x0801d834

08013f8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013f8c:	b580      	push	{r7, lr}
 8013f8e:	b082      	sub	sp, #8
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013f94:	f001 fcce 	bl	8015934 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013f98:	4b2d      	ldr	r3, [pc, #180]	; (8014050 <prvAddNewTaskToReadyList+0xc4>)
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	3301      	adds	r3, #1
 8013f9e:	4a2c      	ldr	r2, [pc, #176]	; (8014050 <prvAddNewTaskToReadyList+0xc4>)
 8013fa0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013fa2:	4b2c      	ldr	r3, [pc, #176]	; (8014054 <prvAddNewTaskToReadyList+0xc8>)
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d109      	bne.n	8013fbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013faa:	4a2a      	ldr	r2, [pc, #168]	; (8014054 <prvAddNewTaskToReadyList+0xc8>)
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013fb0:	4b27      	ldr	r3, [pc, #156]	; (8014050 <prvAddNewTaskToReadyList+0xc4>)
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	2b01      	cmp	r3, #1
 8013fb6:	d110      	bne.n	8013fda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013fb8:	f000 fd8e 	bl	8014ad8 <prvInitialiseTaskLists>
 8013fbc:	e00d      	b.n	8013fda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013fbe:	4b26      	ldr	r3, [pc, #152]	; (8014058 <prvAddNewTaskToReadyList+0xcc>)
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d109      	bne.n	8013fda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013fc6:	4b23      	ldr	r3, [pc, #140]	; (8014054 <prvAddNewTaskToReadyList+0xc8>)
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fd0:	429a      	cmp	r2, r3
 8013fd2:	d802      	bhi.n	8013fda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013fd4:	4a1f      	ldr	r2, [pc, #124]	; (8014054 <prvAddNewTaskToReadyList+0xc8>)
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013fda:	4b20      	ldr	r3, [pc, #128]	; (801405c <prvAddNewTaskToReadyList+0xd0>)
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	3301      	adds	r3, #1
 8013fe0:	4a1e      	ldr	r2, [pc, #120]	; (801405c <prvAddNewTaskToReadyList+0xd0>)
 8013fe2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013fe4:	4b1d      	ldr	r3, [pc, #116]	; (801405c <prvAddNewTaskToReadyList+0xd0>)
 8013fe6:	681a      	ldr	r2, [r3, #0]
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ff0:	4b1b      	ldr	r3, [pc, #108]	; (8014060 <prvAddNewTaskToReadyList+0xd4>)
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	429a      	cmp	r2, r3
 8013ff6:	d903      	bls.n	8014000 <prvAddNewTaskToReadyList+0x74>
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ffc:	4a18      	ldr	r2, [pc, #96]	; (8014060 <prvAddNewTaskToReadyList+0xd4>)
 8013ffe:	6013      	str	r3, [r2, #0]
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014004:	4613      	mov	r3, r2
 8014006:	009b      	lsls	r3, r3, #2
 8014008:	4413      	add	r3, r2
 801400a:	009b      	lsls	r3, r3, #2
 801400c:	4a15      	ldr	r2, [pc, #84]	; (8014064 <prvAddNewTaskToReadyList+0xd8>)
 801400e:	441a      	add	r2, r3
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	3304      	adds	r3, #4
 8014014:	4619      	mov	r1, r3
 8014016:	4610      	mov	r0, r2
 8014018:	f7fe fddb 	bl	8012bd2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801401c:	f001 fcba 	bl	8015994 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014020:	4b0d      	ldr	r3, [pc, #52]	; (8014058 <prvAddNewTaskToReadyList+0xcc>)
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	2b00      	cmp	r3, #0
 8014026:	d00e      	beq.n	8014046 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014028:	4b0a      	ldr	r3, [pc, #40]	; (8014054 <prvAddNewTaskToReadyList+0xc8>)
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014032:	429a      	cmp	r2, r3
 8014034:	d207      	bcs.n	8014046 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014036:	4b0c      	ldr	r3, [pc, #48]	; (8014068 <prvAddNewTaskToReadyList+0xdc>)
 8014038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801403c:	601a      	str	r2, [r3, #0]
 801403e:	f3bf 8f4f 	dsb	sy
 8014042:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014046:	bf00      	nop
 8014048:	3708      	adds	r7, #8
 801404a:	46bd      	mov	sp, r7
 801404c:	bd80      	pop	{r7, pc}
 801404e:	bf00      	nop
 8014050:	2000264c 	.word	0x2000264c
 8014054:	20002178 	.word	0x20002178
 8014058:	20002658 	.word	0x20002658
 801405c:	20002668 	.word	0x20002668
 8014060:	20002654 	.word	0x20002654
 8014064:	2000217c 	.word	0x2000217c
 8014068:	e000ed04 	.word	0xe000ed04

0801406c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 801406c:	b580      	push	{r7, lr}
 801406e:	b084      	sub	sp, #16
 8014070:	af00      	add	r7, sp, #0
 8014072:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8014074:	f001 fc5e 	bl	8015934 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	2b00      	cmp	r3, #0
 801407c:	d102      	bne.n	8014084 <vTaskDelete+0x18>
 801407e:	4b2c      	ldr	r3, [pc, #176]	; (8014130 <vTaskDelete+0xc4>)
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	e000      	b.n	8014086 <vTaskDelete+0x1a>
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	3304      	adds	r3, #4
 801408c:	4618      	mov	r0, r3
 801408e:	f7fe fdfd 	bl	8012c8c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014096:	2b00      	cmp	r3, #0
 8014098:	d004      	beq.n	80140a4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	3318      	adds	r3, #24
 801409e:	4618      	mov	r0, r3
 80140a0:	f7fe fdf4 	bl	8012c8c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80140a4:	4b23      	ldr	r3, [pc, #140]	; (8014134 <vTaskDelete+0xc8>)
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	3301      	adds	r3, #1
 80140aa:	4a22      	ldr	r2, [pc, #136]	; (8014134 <vTaskDelete+0xc8>)
 80140ac:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80140ae:	4b20      	ldr	r3, [pc, #128]	; (8014130 <vTaskDelete+0xc4>)
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	68fa      	ldr	r2, [r7, #12]
 80140b4:	429a      	cmp	r2, r3
 80140b6:	d10b      	bne.n	80140d0 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	3304      	adds	r3, #4
 80140bc:	4619      	mov	r1, r3
 80140be:	481e      	ldr	r0, [pc, #120]	; (8014138 <vTaskDelete+0xcc>)
 80140c0:	f7fe fd87 	bl	8012bd2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80140c4:	4b1d      	ldr	r3, [pc, #116]	; (801413c <vTaskDelete+0xd0>)
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	3301      	adds	r3, #1
 80140ca:	4a1c      	ldr	r2, [pc, #112]	; (801413c <vTaskDelete+0xd0>)
 80140cc:	6013      	str	r3, [r2, #0]
 80140ce:	e009      	b.n	80140e4 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80140d0:	4b1b      	ldr	r3, [pc, #108]	; (8014140 <vTaskDelete+0xd4>)
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	3b01      	subs	r3, #1
 80140d6:	4a1a      	ldr	r2, [pc, #104]	; (8014140 <vTaskDelete+0xd4>)
 80140d8:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80140da:	68f8      	ldr	r0, [r7, #12]
 80140dc:	f000 fd6a 	bl	8014bb4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80140e0:	f000 fd9c 	bl	8014c1c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80140e4:	f001 fc56 	bl	8015994 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80140e8:	4b16      	ldr	r3, [pc, #88]	; (8014144 <vTaskDelete+0xd8>)
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d01b      	beq.n	8014128 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80140f0:	4b0f      	ldr	r3, [pc, #60]	; (8014130 <vTaskDelete+0xc4>)
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	68fa      	ldr	r2, [r7, #12]
 80140f6:	429a      	cmp	r2, r3
 80140f8:	d116      	bne.n	8014128 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80140fa:	4b13      	ldr	r3, [pc, #76]	; (8014148 <vTaskDelete+0xdc>)
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d00a      	beq.n	8014118 <vTaskDelete+0xac>
	__asm volatile
 8014102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014106:	f383 8811 	msr	BASEPRI, r3
 801410a:	f3bf 8f6f 	isb	sy
 801410e:	f3bf 8f4f 	dsb	sy
 8014112:	60bb      	str	r3, [r7, #8]
}
 8014114:	bf00      	nop
 8014116:	e7fe      	b.n	8014116 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8014118:	4b0c      	ldr	r3, [pc, #48]	; (801414c <vTaskDelete+0xe0>)
 801411a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801411e:	601a      	str	r2, [r3, #0]
 8014120:	f3bf 8f4f 	dsb	sy
 8014124:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014128:	bf00      	nop
 801412a:	3710      	adds	r7, #16
 801412c:	46bd      	mov	sp, r7
 801412e:	bd80      	pop	{r7, pc}
 8014130:	20002178 	.word	0x20002178
 8014134:	20002668 	.word	0x20002668
 8014138:	20002620 	.word	0x20002620
 801413c:	20002634 	.word	0x20002634
 8014140:	2000264c 	.word	0x2000264c
 8014144:	20002658 	.word	0x20002658
 8014148:	20002674 	.word	0x20002674
 801414c:	e000ed04 	.word	0xe000ed04

08014150 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014150:	b580      	push	{r7, lr}
 8014152:	b084      	sub	sp, #16
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014158:	2300      	movs	r3, #0
 801415a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	2b00      	cmp	r3, #0
 8014160:	d017      	beq.n	8014192 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014162:	4b13      	ldr	r3, [pc, #76]	; (80141b0 <vTaskDelay+0x60>)
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d00a      	beq.n	8014180 <vTaskDelay+0x30>
	__asm volatile
 801416a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801416e:	f383 8811 	msr	BASEPRI, r3
 8014172:	f3bf 8f6f 	isb	sy
 8014176:	f3bf 8f4f 	dsb	sy
 801417a:	60bb      	str	r3, [r7, #8]
}
 801417c:	bf00      	nop
 801417e:	e7fe      	b.n	801417e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014180:	f000 f980 	bl	8014484 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014184:	2100      	movs	r1, #0
 8014186:	6878      	ldr	r0, [r7, #4]
 8014188:	f000 ff02 	bl	8014f90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801418c:	f000 f988 	bl	80144a0 <xTaskResumeAll>
 8014190:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	2b00      	cmp	r3, #0
 8014196:	d107      	bne.n	80141a8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8014198:	4b06      	ldr	r3, [pc, #24]	; (80141b4 <vTaskDelay+0x64>)
 801419a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801419e:	601a      	str	r2, [r3, #0]
 80141a0:	f3bf 8f4f 	dsb	sy
 80141a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80141a8:	bf00      	nop
 80141aa:	3710      	adds	r7, #16
 80141ac:	46bd      	mov	sp, r7
 80141ae:	bd80      	pop	{r7, pc}
 80141b0:	20002674 	.word	0x20002674
 80141b4:	e000ed04 	.word	0xe000ed04

080141b8 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80141b8:	b580      	push	{r7, lr}
 80141ba:	b088      	sub	sp, #32
 80141bc:	af00      	add	r7, sp, #0
 80141be:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80141c4:	69bb      	ldr	r3, [r7, #24]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d10a      	bne.n	80141e0 <eTaskGetState+0x28>
	__asm volatile
 80141ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141ce:	f383 8811 	msr	BASEPRI, r3
 80141d2:	f3bf 8f6f 	isb	sy
 80141d6:	f3bf 8f4f 	dsb	sy
 80141da:	60bb      	str	r3, [r7, #8]
}
 80141dc:	bf00      	nop
 80141de:	e7fe      	b.n	80141de <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80141e0:	4b23      	ldr	r3, [pc, #140]	; (8014270 <eTaskGetState+0xb8>)
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	69ba      	ldr	r2, [r7, #24]
 80141e6:	429a      	cmp	r2, r3
 80141e8:	d102      	bne.n	80141f0 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80141ea:	2300      	movs	r3, #0
 80141ec:	77fb      	strb	r3, [r7, #31]
 80141ee:	e03a      	b.n	8014266 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 80141f0:	f001 fba0 	bl	8015934 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80141f4:	69bb      	ldr	r3, [r7, #24]
 80141f6:	695b      	ldr	r3, [r3, #20]
 80141f8:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80141fa:	4b1e      	ldr	r3, [pc, #120]	; (8014274 <eTaskGetState+0xbc>)
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8014200:	4b1d      	ldr	r3, [pc, #116]	; (8014278 <eTaskGetState+0xc0>)
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8014206:	f001 fbc5 	bl	8015994 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 801420a:	697a      	ldr	r2, [r7, #20]
 801420c:	693b      	ldr	r3, [r7, #16]
 801420e:	429a      	cmp	r2, r3
 8014210:	d003      	beq.n	801421a <eTaskGetState+0x62>
 8014212:	697a      	ldr	r2, [r7, #20]
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	429a      	cmp	r2, r3
 8014218:	d102      	bne.n	8014220 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 801421a:	2302      	movs	r3, #2
 801421c:	77fb      	strb	r3, [r7, #31]
 801421e:	e022      	b.n	8014266 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8014220:	697b      	ldr	r3, [r7, #20]
 8014222:	4a16      	ldr	r2, [pc, #88]	; (801427c <eTaskGetState+0xc4>)
 8014224:	4293      	cmp	r3, r2
 8014226:	d112      	bne.n	801424e <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8014228:	69bb      	ldr	r3, [r7, #24]
 801422a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801422c:	2b00      	cmp	r3, #0
 801422e:	d10b      	bne.n	8014248 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8014230:	69bb      	ldr	r3, [r7, #24]
 8014232:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8014236:	b2db      	uxtb	r3, r3
 8014238:	2b01      	cmp	r3, #1
 801423a:	d102      	bne.n	8014242 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 801423c:	2302      	movs	r3, #2
 801423e:	77fb      	strb	r3, [r7, #31]
 8014240:	e011      	b.n	8014266 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8014242:	2303      	movs	r3, #3
 8014244:	77fb      	strb	r3, [r7, #31]
 8014246:	e00e      	b.n	8014266 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8014248:	2302      	movs	r3, #2
 801424a:	77fb      	strb	r3, [r7, #31]
 801424c:	e00b      	b.n	8014266 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 801424e:	697b      	ldr	r3, [r7, #20]
 8014250:	4a0b      	ldr	r2, [pc, #44]	; (8014280 <eTaskGetState+0xc8>)
 8014252:	4293      	cmp	r3, r2
 8014254:	d002      	beq.n	801425c <eTaskGetState+0xa4>
 8014256:	697b      	ldr	r3, [r7, #20]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d102      	bne.n	8014262 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 801425c:	2304      	movs	r3, #4
 801425e:	77fb      	strb	r3, [r7, #31]
 8014260:	e001      	b.n	8014266 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8014262:	2301      	movs	r3, #1
 8014264:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8014266:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8014268:	4618      	mov	r0, r3
 801426a:	3720      	adds	r7, #32
 801426c:	46bd      	mov	sp, r7
 801426e:	bd80      	pop	{r7, pc}
 8014270:	20002178 	.word	0x20002178
 8014274:	20002604 	.word	0x20002604
 8014278:	20002608 	.word	0x20002608
 801427c:	20002638 	.word	0x20002638
 8014280:	20002620 	.word	0x20002620

08014284 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8014284:	b480      	push	{r7}
 8014286:	b087      	sub	sp, #28
 8014288:	af00      	add	r7, sp, #0
 801428a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 801428c:	2300      	movs	r3, #0
 801428e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d10a      	bne.n	80142b0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 801429a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801429e:	f383 8811 	msr	BASEPRI, r3
 80142a2:	f3bf 8f6f 	isb	sy
 80142a6:	f3bf 8f4f 	dsb	sy
 80142aa:	60fb      	str	r3, [r7, #12]
}
 80142ac:	bf00      	nop
 80142ae:	e7fe      	b.n	80142ae <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80142b0:	693b      	ldr	r3, [r7, #16]
 80142b2:	695b      	ldr	r3, [r3, #20]
 80142b4:	4a0a      	ldr	r2, [pc, #40]	; (80142e0 <prvTaskIsTaskSuspended+0x5c>)
 80142b6:	4293      	cmp	r3, r2
 80142b8:	d10a      	bne.n	80142d0 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80142ba:	693b      	ldr	r3, [r7, #16]
 80142bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142be:	4a09      	ldr	r2, [pc, #36]	; (80142e4 <prvTaskIsTaskSuspended+0x60>)
 80142c0:	4293      	cmp	r3, r2
 80142c2:	d005      	beq.n	80142d0 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80142c4:	693b      	ldr	r3, [r7, #16]
 80142c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d101      	bne.n	80142d0 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80142cc:	2301      	movs	r3, #1
 80142ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80142d0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80142d2:	4618      	mov	r0, r3
 80142d4:	371c      	adds	r7, #28
 80142d6:	46bd      	mov	sp, r7
 80142d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142dc:	4770      	bx	lr
 80142de:	bf00      	nop
 80142e0:	20002638 	.word	0x20002638
 80142e4:	2000260c 	.word	0x2000260c

080142e8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80142e8:	b580      	push	{r7, lr}
 80142ea:	b084      	sub	sp, #16
 80142ec:	af00      	add	r7, sp, #0
 80142ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d10a      	bne.n	8014310 <vTaskResume+0x28>
	__asm volatile
 80142fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142fe:	f383 8811 	msr	BASEPRI, r3
 8014302:	f3bf 8f6f 	isb	sy
 8014306:	f3bf 8f4f 	dsb	sy
 801430a:	60bb      	str	r3, [r7, #8]
}
 801430c:	bf00      	nop
 801430e:	e7fe      	b.n	801430e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8014310:	4b20      	ldr	r3, [pc, #128]	; (8014394 <vTaskResume+0xac>)
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	68fa      	ldr	r2, [r7, #12]
 8014316:	429a      	cmp	r2, r3
 8014318:	d038      	beq.n	801438c <vTaskResume+0xa4>
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d035      	beq.n	801438c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8014320:	f001 fb08 	bl	8015934 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8014324:	68f8      	ldr	r0, [r7, #12]
 8014326:	f7ff ffad 	bl	8014284 <prvTaskIsTaskSuspended>
 801432a:	4603      	mov	r3, r0
 801432c:	2b00      	cmp	r3, #0
 801432e:	d02b      	beq.n	8014388 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	3304      	adds	r3, #4
 8014334:	4618      	mov	r0, r3
 8014336:	f7fe fca9 	bl	8012c8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801433e:	4b16      	ldr	r3, [pc, #88]	; (8014398 <vTaskResume+0xb0>)
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	429a      	cmp	r2, r3
 8014344:	d903      	bls.n	801434e <vTaskResume+0x66>
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801434a:	4a13      	ldr	r2, [pc, #76]	; (8014398 <vTaskResume+0xb0>)
 801434c:	6013      	str	r3, [r2, #0]
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014352:	4613      	mov	r3, r2
 8014354:	009b      	lsls	r3, r3, #2
 8014356:	4413      	add	r3, r2
 8014358:	009b      	lsls	r3, r3, #2
 801435a:	4a10      	ldr	r2, [pc, #64]	; (801439c <vTaskResume+0xb4>)
 801435c:	441a      	add	r2, r3
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	3304      	adds	r3, #4
 8014362:	4619      	mov	r1, r3
 8014364:	4610      	mov	r0, r2
 8014366:	f7fe fc34 	bl	8012bd2 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801436e:	4b09      	ldr	r3, [pc, #36]	; (8014394 <vTaskResume+0xac>)
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014374:	429a      	cmp	r2, r3
 8014376:	d307      	bcc.n	8014388 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8014378:	4b09      	ldr	r3, [pc, #36]	; (80143a0 <vTaskResume+0xb8>)
 801437a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801437e:	601a      	str	r2, [r3, #0]
 8014380:	f3bf 8f4f 	dsb	sy
 8014384:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8014388:	f001 fb04 	bl	8015994 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801438c:	bf00      	nop
 801438e:	3710      	adds	r7, #16
 8014390:	46bd      	mov	sp, r7
 8014392:	bd80      	pop	{r7, pc}
 8014394:	20002178 	.word	0x20002178
 8014398:	20002654 	.word	0x20002654
 801439c:	2000217c 	.word	0x2000217c
 80143a0:	e000ed04 	.word	0xe000ed04

080143a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80143a4:	b580      	push	{r7, lr}
 80143a6:	b08a      	sub	sp, #40	; 0x28
 80143a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80143aa:	2300      	movs	r3, #0
 80143ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80143ae:	2300      	movs	r3, #0
 80143b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80143b2:	463a      	mov	r2, r7
 80143b4:	1d39      	adds	r1, r7, #4
 80143b6:	f107 0308 	add.w	r3, r7, #8
 80143ba:	4618      	mov	r0, r3
 80143bc:	f7fe fba8 	bl	8012b10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80143c0:	6839      	ldr	r1, [r7, #0]
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	68ba      	ldr	r2, [r7, #8]
 80143c6:	9202      	str	r2, [sp, #8]
 80143c8:	9301      	str	r3, [sp, #4]
 80143ca:	2300      	movs	r3, #0
 80143cc:	9300      	str	r3, [sp, #0]
 80143ce:	2300      	movs	r3, #0
 80143d0:	460a      	mov	r2, r1
 80143d2:	4924      	ldr	r1, [pc, #144]	; (8014464 <vTaskStartScheduler+0xc0>)
 80143d4:	4824      	ldr	r0, [pc, #144]	; (8014468 <vTaskStartScheduler+0xc4>)
 80143d6:	f7ff fc91 	bl	8013cfc <xTaskCreateStatic>
 80143da:	4603      	mov	r3, r0
 80143dc:	4a23      	ldr	r2, [pc, #140]	; (801446c <vTaskStartScheduler+0xc8>)
 80143de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80143e0:	4b22      	ldr	r3, [pc, #136]	; (801446c <vTaskStartScheduler+0xc8>)
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d002      	beq.n	80143ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80143e8:	2301      	movs	r3, #1
 80143ea:	617b      	str	r3, [r7, #20]
 80143ec:	e001      	b.n	80143f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80143ee:	2300      	movs	r3, #0
 80143f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80143f2:	697b      	ldr	r3, [r7, #20]
 80143f4:	2b01      	cmp	r3, #1
 80143f6:	d102      	bne.n	80143fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80143f8:	f000 fe1e 	bl	8015038 <xTimerCreateTimerTask>
 80143fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80143fe:	697b      	ldr	r3, [r7, #20]
 8014400:	2b01      	cmp	r3, #1
 8014402:	d11b      	bne.n	801443c <vTaskStartScheduler+0x98>
	__asm volatile
 8014404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014408:	f383 8811 	msr	BASEPRI, r3
 801440c:	f3bf 8f6f 	isb	sy
 8014410:	f3bf 8f4f 	dsb	sy
 8014414:	613b      	str	r3, [r7, #16]
}
 8014416:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014418:	4b15      	ldr	r3, [pc, #84]	; (8014470 <vTaskStartScheduler+0xcc>)
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	3354      	adds	r3, #84	; 0x54
 801441e:	4a15      	ldr	r2, [pc, #84]	; (8014474 <vTaskStartScheduler+0xd0>)
 8014420:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014422:	4b15      	ldr	r3, [pc, #84]	; (8014478 <vTaskStartScheduler+0xd4>)
 8014424:	f04f 32ff 	mov.w	r2, #4294967295
 8014428:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801442a:	4b14      	ldr	r3, [pc, #80]	; (801447c <vTaskStartScheduler+0xd8>)
 801442c:	2201      	movs	r2, #1
 801442e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014430:	4b13      	ldr	r3, [pc, #76]	; (8014480 <vTaskStartScheduler+0xdc>)
 8014432:	2200      	movs	r2, #0
 8014434:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014436:	f001 f9db 	bl	80157f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801443a:	e00e      	b.n	801445a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801443c:	697b      	ldr	r3, [r7, #20]
 801443e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014442:	d10a      	bne.n	801445a <vTaskStartScheduler+0xb6>
	__asm volatile
 8014444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014448:	f383 8811 	msr	BASEPRI, r3
 801444c:	f3bf 8f6f 	isb	sy
 8014450:	f3bf 8f4f 	dsb	sy
 8014454:	60fb      	str	r3, [r7, #12]
}
 8014456:	bf00      	nop
 8014458:	e7fe      	b.n	8014458 <vTaskStartScheduler+0xb4>
}
 801445a:	bf00      	nop
 801445c:	3718      	adds	r7, #24
 801445e:	46bd      	mov	sp, r7
 8014460:	bd80      	pop	{r7, pc}
 8014462:	bf00      	nop
 8014464:	0801d4b8 	.word	0x0801d4b8
 8014468:	08014aa9 	.word	0x08014aa9
 801446c:	20002670 	.word	0x20002670
 8014470:	20002178 	.word	0x20002178
 8014474:	200000f8 	.word	0x200000f8
 8014478:	2000266c 	.word	0x2000266c
 801447c:	20002658 	.word	0x20002658
 8014480:	20002650 	.word	0x20002650

08014484 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014484:	b480      	push	{r7}
 8014486:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014488:	4b04      	ldr	r3, [pc, #16]	; (801449c <vTaskSuspendAll+0x18>)
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	3301      	adds	r3, #1
 801448e:	4a03      	ldr	r2, [pc, #12]	; (801449c <vTaskSuspendAll+0x18>)
 8014490:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8014492:	bf00      	nop
 8014494:	46bd      	mov	sp, r7
 8014496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449a:	4770      	bx	lr
 801449c:	20002674 	.word	0x20002674

080144a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b084      	sub	sp, #16
 80144a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80144a6:	2300      	movs	r3, #0
 80144a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80144aa:	2300      	movs	r3, #0
 80144ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80144ae:	4b42      	ldr	r3, [pc, #264]	; (80145b8 <xTaskResumeAll+0x118>)
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d10a      	bne.n	80144cc <xTaskResumeAll+0x2c>
	__asm volatile
 80144b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144ba:	f383 8811 	msr	BASEPRI, r3
 80144be:	f3bf 8f6f 	isb	sy
 80144c2:	f3bf 8f4f 	dsb	sy
 80144c6:	603b      	str	r3, [r7, #0]
}
 80144c8:	bf00      	nop
 80144ca:	e7fe      	b.n	80144ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80144cc:	f001 fa32 	bl	8015934 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80144d0:	4b39      	ldr	r3, [pc, #228]	; (80145b8 <xTaskResumeAll+0x118>)
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	3b01      	subs	r3, #1
 80144d6:	4a38      	ldr	r2, [pc, #224]	; (80145b8 <xTaskResumeAll+0x118>)
 80144d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80144da:	4b37      	ldr	r3, [pc, #220]	; (80145b8 <xTaskResumeAll+0x118>)
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d162      	bne.n	80145a8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80144e2:	4b36      	ldr	r3, [pc, #216]	; (80145bc <xTaskResumeAll+0x11c>)
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d05e      	beq.n	80145a8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80144ea:	e02f      	b.n	801454c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80144ec:	4b34      	ldr	r3, [pc, #208]	; (80145c0 <xTaskResumeAll+0x120>)
 80144ee:	68db      	ldr	r3, [r3, #12]
 80144f0:	68db      	ldr	r3, [r3, #12]
 80144f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	3318      	adds	r3, #24
 80144f8:	4618      	mov	r0, r3
 80144fa:	f7fe fbc7 	bl	8012c8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	3304      	adds	r3, #4
 8014502:	4618      	mov	r0, r3
 8014504:	f7fe fbc2 	bl	8012c8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801450c:	4b2d      	ldr	r3, [pc, #180]	; (80145c4 <xTaskResumeAll+0x124>)
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	429a      	cmp	r2, r3
 8014512:	d903      	bls.n	801451c <xTaskResumeAll+0x7c>
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014518:	4a2a      	ldr	r2, [pc, #168]	; (80145c4 <xTaskResumeAll+0x124>)
 801451a:	6013      	str	r3, [r2, #0]
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014520:	4613      	mov	r3, r2
 8014522:	009b      	lsls	r3, r3, #2
 8014524:	4413      	add	r3, r2
 8014526:	009b      	lsls	r3, r3, #2
 8014528:	4a27      	ldr	r2, [pc, #156]	; (80145c8 <xTaskResumeAll+0x128>)
 801452a:	441a      	add	r2, r3
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	3304      	adds	r3, #4
 8014530:	4619      	mov	r1, r3
 8014532:	4610      	mov	r0, r2
 8014534:	f7fe fb4d 	bl	8012bd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801453c:	4b23      	ldr	r3, [pc, #140]	; (80145cc <xTaskResumeAll+0x12c>)
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014542:	429a      	cmp	r2, r3
 8014544:	d302      	bcc.n	801454c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8014546:	4b22      	ldr	r3, [pc, #136]	; (80145d0 <xTaskResumeAll+0x130>)
 8014548:	2201      	movs	r2, #1
 801454a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801454c:	4b1c      	ldr	r3, [pc, #112]	; (80145c0 <xTaskResumeAll+0x120>)
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d1cb      	bne.n	80144ec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	2b00      	cmp	r3, #0
 8014558:	d001      	beq.n	801455e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801455a:	f000 fb5f 	bl	8014c1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801455e:	4b1d      	ldr	r3, [pc, #116]	; (80145d4 <xTaskResumeAll+0x134>)
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d010      	beq.n	801458c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801456a:	f000 f847 	bl	80145fc <xTaskIncrementTick>
 801456e:	4603      	mov	r3, r0
 8014570:	2b00      	cmp	r3, #0
 8014572:	d002      	beq.n	801457a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8014574:	4b16      	ldr	r3, [pc, #88]	; (80145d0 <xTaskResumeAll+0x130>)
 8014576:	2201      	movs	r2, #1
 8014578:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	3b01      	subs	r3, #1
 801457e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d1f1      	bne.n	801456a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8014586:	4b13      	ldr	r3, [pc, #76]	; (80145d4 <xTaskResumeAll+0x134>)
 8014588:	2200      	movs	r2, #0
 801458a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801458c:	4b10      	ldr	r3, [pc, #64]	; (80145d0 <xTaskResumeAll+0x130>)
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	2b00      	cmp	r3, #0
 8014592:	d009      	beq.n	80145a8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014594:	2301      	movs	r3, #1
 8014596:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014598:	4b0f      	ldr	r3, [pc, #60]	; (80145d8 <xTaskResumeAll+0x138>)
 801459a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801459e:	601a      	str	r2, [r3, #0]
 80145a0:	f3bf 8f4f 	dsb	sy
 80145a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80145a8:	f001 f9f4 	bl	8015994 <vPortExitCritical>

	return xAlreadyYielded;
 80145ac:	68bb      	ldr	r3, [r7, #8]
}
 80145ae:	4618      	mov	r0, r3
 80145b0:	3710      	adds	r7, #16
 80145b2:	46bd      	mov	sp, r7
 80145b4:	bd80      	pop	{r7, pc}
 80145b6:	bf00      	nop
 80145b8:	20002674 	.word	0x20002674
 80145bc:	2000264c 	.word	0x2000264c
 80145c0:	2000260c 	.word	0x2000260c
 80145c4:	20002654 	.word	0x20002654
 80145c8:	2000217c 	.word	0x2000217c
 80145cc:	20002178 	.word	0x20002178
 80145d0:	20002660 	.word	0x20002660
 80145d4:	2000265c 	.word	0x2000265c
 80145d8:	e000ed04 	.word	0xe000ed04

080145dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80145dc:	b480      	push	{r7}
 80145de:	b083      	sub	sp, #12
 80145e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80145e2:	4b05      	ldr	r3, [pc, #20]	; (80145f8 <xTaskGetTickCount+0x1c>)
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80145e8:	687b      	ldr	r3, [r7, #4]
}
 80145ea:	4618      	mov	r0, r3
 80145ec:	370c      	adds	r7, #12
 80145ee:	46bd      	mov	sp, r7
 80145f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145f4:	4770      	bx	lr
 80145f6:	bf00      	nop
 80145f8:	20002650 	.word	0x20002650

080145fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80145fc:	b580      	push	{r7, lr}
 80145fe:	b086      	sub	sp, #24
 8014600:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014602:	2300      	movs	r3, #0
 8014604:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014606:	4b4f      	ldr	r3, [pc, #316]	; (8014744 <xTaskIncrementTick+0x148>)
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	2b00      	cmp	r3, #0
 801460c:	f040 808f 	bne.w	801472e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014610:	4b4d      	ldr	r3, [pc, #308]	; (8014748 <xTaskIncrementTick+0x14c>)
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	3301      	adds	r3, #1
 8014616:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014618:	4a4b      	ldr	r2, [pc, #300]	; (8014748 <xTaskIncrementTick+0x14c>)
 801461a:	693b      	ldr	r3, [r7, #16]
 801461c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801461e:	693b      	ldr	r3, [r7, #16]
 8014620:	2b00      	cmp	r3, #0
 8014622:	d120      	bne.n	8014666 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8014624:	4b49      	ldr	r3, [pc, #292]	; (801474c <xTaskIncrementTick+0x150>)
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d00a      	beq.n	8014644 <xTaskIncrementTick+0x48>
	__asm volatile
 801462e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014632:	f383 8811 	msr	BASEPRI, r3
 8014636:	f3bf 8f6f 	isb	sy
 801463a:	f3bf 8f4f 	dsb	sy
 801463e:	603b      	str	r3, [r7, #0]
}
 8014640:	bf00      	nop
 8014642:	e7fe      	b.n	8014642 <xTaskIncrementTick+0x46>
 8014644:	4b41      	ldr	r3, [pc, #260]	; (801474c <xTaskIncrementTick+0x150>)
 8014646:	681b      	ldr	r3, [r3, #0]
 8014648:	60fb      	str	r3, [r7, #12]
 801464a:	4b41      	ldr	r3, [pc, #260]	; (8014750 <xTaskIncrementTick+0x154>)
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	4a3f      	ldr	r2, [pc, #252]	; (801474c <xTaskIncrementTick+0x150>)
 8014650:	6013      	str	r3, [r2, #0]
 8014652:	4a3f      	ldr	r2, [pc, #252]	; (8014750 <xTaskIncrementTick+0x154>)
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	6013      	str	r3, [r2, #0]
 8014658:	4b3e      	ldr	r3, [pc, #248]	; (8014754 <xTaskIncrementTick+0x158>)
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	3301      	adds	r3, #1
 801465e:	4a3d      	ldr	r2, [pc, #244]	; (8014754 <xTaskIncrementTick+0x158>)
 8014660:	6013      	str	r3, [r2, #0]
 8014662:	f000 fadb 	bl	8014c1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014666:	4b3c      	ldr	r3, [pc, #240]	; (8014758 <xTaskIncrementTick+0x15c>)
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	693a      	ldr	r2, [r7, #16]
 801466c:	429a      	cmp	r2, r3
 801466e:	d349      	bcc.n	8014704 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014670:	4b36      	ldr	r3, [pc, #216]	; (801474c <xTaskIncrementTick+0x150>)
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	2b00      	cmp	r3, #0
 8014678:	d104      	bne.n	8014684 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801467a:	4b37      	ldr	r3, [pc, #220]	; (8014758 <xTaskIncrementTick+0x15c>)
 801467c:	f04f 32ff 	mov.w	r2, #4294967295
 8014680:	601a      	str	r2, [r3, #0]
					break;
 8014682:	e03f      	b.n	8014704 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014684:	4b31      	ldr	r3, [pc, #196]	; (801474c <xTaskIncrementTick+0x150>)
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	68db      	ldr	r3, [r3, #12]
 801468a:	68db      	ldr	r3, [r3, #12]
 801468c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801468e:	68bb      	ldr	r3, [r7, #8]
 8014690:	685b      	ldr	r3, [r3, #4]
 8014692:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014694:	693a      	ldr	r2, [r7, #16]
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	429a      	cmp	r2, r3
 801469a:	d203      	bcs.n	80146a4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801469c:	4a2e      	ldr	r2, [pc, #184]	; (8014758 <xTaskIncrementTick+0x15c>)
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80146a2:	e02f      	b.n	8014704 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80146a4:	68bb      	ldr	r3, [r7, #8]
 80146a6:	3304      	adds	r3, #4
 80146a8:	4618      	mov	r0, r3
 80146aa:	f7fe faef 	bl	8012c8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80146ae:	68bb      	ldr	r3, [r7, #8]
 80146b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d004      	beq.n	80146c0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80146b6:	68bb      	ldr	r3, [r7, #8]
 80146b8:	3318      	adds	r3, #24
 80146ba:	4618      	mov	r0, r3
 80146bc:	f7fe fae6 	bl	8012c8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80146c0:	68bb      	ldr	r3, [r7, #8]
 80146c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146c4:	4b25      	ldr	r3, [pc, #148]	; (801475c <xTaskIncrementTick+0x160>)
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	429a      	cmp	r2, r3
 80146ca:	d903      	bls.n	80146d4 <xTaskIncrementTick+0xd8>
 80146cc:	68bb      	ldr	r3, [r7, #8]
 80146ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146d0:	4a22      	ldr	r2, [pc, #136]	; (801475c <xTaskIncrementTick+0x160>)
 80146d2:	6013      	str	r3, [r2, #0]
 80146d4:	68bb      	ldr	r3, [r7, #8]
 80146d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146d8:	4613      	mov	r3, r2
 80146da:	009b      	lsls	r3, r3, #2
 80146dc:	4413      	add	r3, r2
 80146de:	009b      	lsls	r3, r3, #2
 80146e0:	4a1f      	ldr	r2, [pc, #124]	; (8014760 <xTaskIncrementTick+0x164>)
 80146e2:	441a      	add	r2, r3
 80146e4:	68bb      	ldr	r3, [r7, #8]
 80146e6:	3304      	adds	r3, #4
 80146e8:	4619      	mov	r1, r3
 80146ea:	4610      	mov	r0, r2
 80146ec:	f7fe fa71 	bl	8012bd2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80146f0:	68bb      	ldr	r3, [r7, #8]
 80146f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146f4:	4b1b      	ldr	r3, [pc, #108]	; (8014764 <xTaskIncrementTick+0x168>)
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146fa:	429a      	cmp	r2, r3
 80146fc:	d3b8      	bcc.n	8014670 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80146fe:	2301      	movs	r3, #1
 8014700:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014702:	e7b5      	b.n	8014670 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014704:	4b17      	ldr	r3, [pc, #92]	; (8014764 <xTaskIncrementTick+0x168>)
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801470a:	4915      	ldr	r1, [pc, #84]	; (8014760 <xTaskIncrementTick+0x164>)
 801470c:	4613      	mov	r3, r2
 801470e:	009b      	lsls	r3, r3, #2
 8014710:	4413      	add	r3, r2
 8014712:	009b      	lsls	r3, r3, #2
 8014714:	440b      	add	r3, r1
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	2b01      	cmp	r3, #1
 801471a:	d901      	bls.n	8014720 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801471c:	2301      	movs	r3, #1
 801471e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014720:	4b11      	ldr	r3, [pc, #68]	; (8014768 <xTaskIncrementTick+0x16c>)
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d007      	beq.n	8014738 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8014728:	2301      	movs	r3, #1
 801472a:	617b      	str	r3, [r7, #20]
 801472c:	e004      	b.n	8014738 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801472e:	4b0f      	ldr	r3, [pc, #60]	; (801476c <xTaskIncrementTick+0x170>)
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	3301      	adds	r3, #1
 8014734:	4a0d      	ldr	r2, [pc, #52]	; (801476c <xTaskIncrementTick+0x170>)
 8014736:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8014738:	697b      	ldr	r3, [r7, #20]
}
 801473a:	4618      	mov	r0, r3
 801473c:	3718      	adds	r7, #24
 801473e:	46bd      	mov	sp, r7
 8014740:	bd80      	pop	{r7, pc}
 8014742:	bf00      	nop
 8014744:	20002674 	.word	0x20002674
 8014748:	20002650 	.word	0x20002650
 801474c:	20002604 	.word	0x20002604
 8014750:	20002608 	.word	0x20002608
 8014754:	20002664 	.word	0x20002664
 8014758:	2000266c 	.word	0x2000266c
 801475c:	20002654 	.word	0x20002654
 8014760:	2000217c 	.word	0x2000217c
 8014764:	20002178 	.word	0x20002178
 8014768:	20002660 	.word	0x20002660
 801476c:	2000265c 	.word	0x2000265c

08014770 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014770:	b480      	push	{r7}
 8014772:	b085      	sub	sp, #20
 8014774:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014776:	4b2a      	ldr	r3, [pc, #168]	; (8014820 <vTaskSwitchContext+0xb0>)
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d003      	beq.n	8014786 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801477e:	4b29      	ldr	r3, [pc, #164]	; (8014824 <vTaskSwitchContext+0xb4>)
 8014780:	2201      	movs	r2, #1
 8014782:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014784:	e046      	b.n	8014814 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8014786:	4b27      	ldr	r3, [pc, #156]	; (8014824 <vTaskSwitchContext+0xb4>)
 8014788:	2200      	movs	r2, #0
 801478a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801478c:	4b26      	ldr	r3, [pc, #152]	; (8014828 <vTaskSwitchContext+0xb8>)
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	60fb      	str	r3, [r7, #12]
 8014792:	e010      	b.n	80147b6 <vTaskSwitchContext+0x46>
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d10a      	bne.n	80147b0 <vTaskSwitchContext+0x40>
	__asm volatile
 801479a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801479e:	f383 8811 	msr	BASEPRI, r3
 80147a2:	f3bf 8f6f 	isb	sy
 80147a6:	f3bf 8f4f 	dsb	sy
 80147aa:	607b      	str	r3, [r7, #4]
}
 80147ac:	bf00      	nop
 80147ae:	e7fe      	b.n	80147ae <vTaskSwitchContext+0x3e>
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	3b01      	subs	r3, #1
 80147b4:	60fb      	str	r3, [r7, #12]
 80147b6:	491d      	ldr	r1, [pc, #116]	; (801482c <vTaskSwitchContext+0xbc>)
 80147b8:	68fa      	ldr	r2, [r7, #12]
 80147ba:	4613      	mov	r3, r2
 80147bc:	009b      	lsls	r3, r3, #2
 80147be:	4413      	add	r3, r2
 80147c0:	009b      	lsls	r3, r3, #2
 80147c2:	440b      	add	r3, r1
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d0e4      	beq.n	8014794 <vTaskSwitchContext+0x24>
 80147ca:	68fa      	ldr	r2, [r7, #12]
 80147cc:	4613      	mov	r3, r2
 80147ce:	009b      	lsls	r3, r3, #2
 80147d0:	4413      	add	r3, r2
 80147d2:	009b      	lsls	r3, r3, #2
 80147d4:	4a15      	ldr	r2, [pc, #84]	; (801482c <vTaskSwitchContext+0xbc>)
 80147d6:	4413      	add	r3, r2
 80147d8:	60bb      	str	r3, [r7, #8]
 80147da:	68bb      	ldr	r3, [r7, #8]
 80147dc:	685b      	ldr	r3, [r3, #4]
 80147de:	685a      	ldr	r2, [r3, #4]
 80147e0:	68bb      	ldr	r3, [r7, #8]
 80147e2:	605a      	str	r2, [r3, #4]
 80147e4:	68bb      	ldr	r3, [r7, #8]
 80147e6:	685a      	ldr	r2, [r3, #4]
 80147e8:	68bb      	ldr	r3, [r7, #8]
 80147ea:	3308      	adds	r3, #8
 80147ec:	429a      	cmp	r2, r3
 80147ee:	d104      	bne.n	80147fa <vTaskSwitchContext+0x8a>
 80147f0:	68bb      	ldr	r3, [r7, #8]
 80147f2:	685b      	ldr	r3, [r3, #4]
 80147f4:	685a      	ldr	r2, [r3, #4]
 80147f6:	68bb      	ldr	r3, [r7, #8]
 80147f8:	605a      	str	r2, [r3, #4]
 80147fa:	68bb      	ldr	r3, [r7, #8]
 80147fc:	685b      	ldr	r3, [r3, #4]
 80147fe:	68db      	ldr	r3, [r3, #12]
 8014800:	4a0b      	ldr	r2, [pc, #44]	; (8014830 <vTaskSwitchContext+0xc0>)
 8014802:	6013      	str	r3, [r2, #0]
 8014804:	4a08      	ldr	r2, [pc, #32]	; (8014828 <vTaskSwitchContext+0xb8>)
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801480a:	4b09      	ldr	r3, [pc, #36]	; (8014830 <vTaskSwitchContext+0xc0>)
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	3354      	adds	r3, #84	; 0x54
 8014810:	4a08      	ldr	r2, [pc, #32]	; (8014834 <vTaskSwitchContext+0xc4>)
 8014812:	6013      	str	r3, [r2, #0]
}
 8014814:	bf00      	nop
 8014816:	3714      	adds	r7, #20
 8014818:	46bd      	mov	sp, r7
 801481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801481e:	4770      	bx	lr
 8014820:	20002674 	.word	0x20002674
 8014824:	20002660 	.word	0x20002660
 8014828:	20002654 	.word	0x20002654
 801482c:	2000217c 	.word	0x2000217c
 8014830:	20002178 	.word	0x20002178
 8014834:	200000f8 	.word	0x200000f8

08014838 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014838:	b580      	push	{r7, lr}
 801483a:	b084      	sub	sp, #16
 801483c:	af00      	add	r7, sp, #0
 801483e:	6078      	str	r0, [r7, #4]
 8014840:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	2b00      	cmp	r3, #0
 8014846:	d10a      	bne.n	801485e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014848:	f04f 0350 	mov.w	r3, #80	; 0x50
 801484c:	f383 8811 	msr	BASEPRI, r3
 8014850:	f3bf 8f6f 	isb	sy
 8014854:	f3bf 8f4f 	dsb	sy
 8014858:	60fb      	str	r3, [r7, #12]
}
 801485a:	bf00      	nop
 801485c:	e7fe      	b.n	801485c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801485e:	4b07      	ldr	r3, [pc, #28]	; (801487c <vTaskPlaceOnEventList+0x44>)
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	3318      	adds	r3, #24
 8014864:	4619      	mov	r1, r3
 8014866:	6878      	ldr	r0, [r7, #4]
 8014868:	f7fe f9d7 	bl	8012c1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801486c:	2101      	movs	r1, #1
 801486e:	6838      	ldr	r0, [r7, #0]
 8014870:	f000 fb8e 	bl	8014f90 <prvAddCurrentTaskToDelayedList>
}
 8014874:	bf00      	nop
 8014876:	3710      	adds	r7, #16
 8014878:	46bd      	mov	sp, r7
 801487a:	bd80      	pop	{r7, pc}
 801487c:	20002178 	.word	0x20002178

08014880 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014880:	b580      	push	{r7, lr}
 8014882:	b086      	sub	sp, #24
 8014884:	af00      	add	r7, sp, #0
 8014886:	60f8      	str	r0, [r7, #12]
 8014888:	60b9      	str	r1, [r7, #8]
 801488a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d10a      	bne.n	80148a8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8014892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014896:	f383 8811 	msr	BASEPRI, r3
 801489a:	f3bf 8f6f 	isb	sy
 801489e:	f3bf 8f4f 	dsb	sy
 80148a2:	617b      	str	r3, [r7, #20]
}
 80148a4:	bf00      	nop
 80148a6:	e7fe      	b.n	80148a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80148a8:	4b0a      	ldr	r3, [pc, #40]	; (80148d4 <vTaskPlaceOnEventListRestricted+0x54>)
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	3318      	adds	r3, #24
 80148ae:	4619      	mov	r1, r3
 80148b0:	68f8      	ldr	r0, [r7, #12]
 80148b2:	f7fe f98e 	bl	8012bd2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d002      	beq.n	80148c2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80148bc:	f04f 33ff 	mov.w	r3, #4294967295
 80148c0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80148c2:	6879      	ldr	r1, [r7, #4]
 80148c4:	68b8      	ldr	r0, [r7, #8]
 80148c6:	f000 fb63 	bl	8014f90 <prvAddCurrentTaskToDelayedList>
	}
 80148ca:	bf00      	nop
 80148cc:	3718      	adds	r7, #24
 80148ce:	46bd      	mov	sp, r7
 80148d0:	bd80      	pop	{r7, pc}
 80148d2:	bf00      	nop
 80148d4:	20002178 	.word	0x20002178

080148d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	b086      	sub	sp, #24
 80148dc:	af00      	add	r7, sp, #0
 80148de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	68db      	ldr	r3, [r3, #12]
 80148e4:	68db      	ldr	r3, [r3, #12]
 80148e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80148e8:	693b      	ldr	r3, [r7, #16]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d10a      	bne.n	8014904 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80148ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148f2:	f383 8811 	msr	BASEPRI, r3
 80148f6:	f3bf 8f6f 	isb	sy
 80148fa:	f3bf 8f4f 	dsb	sy
 80148fe:	60fb      	str	r3, [r7, #12]
}
 8014900:	bf00      	nop
 8014902:	e7fe      	b.n	8014902 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014904:	693b      	ldr	r3, [r7, #16]
 8014906:	3318      	adds	r3, #24
 8014908:	4618      	mov	r0, r3
 801490a:	f7fe f9bf 	bl	8012c8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801490e:	4b1e      	ldr	r3, [pc, #120]	; (8014988 <xTaskRemoveFromEventList+0xb0>)
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	2b00      	cmp	r3, #0
 8014914:	d11d      	bne.n	8014952 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014916:	693b      	ldr	r3, [r7, #16]
 8014918:	3304      	adds	r3, #4
 801491a:	4618      	mov	r0, r3
 801491c:	f7fe f9b6 	bl	8012c8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014920:	693b      	ldr	r3, [r7, #16]
 8014922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014924:	4b19      	ldr	r3, [pc, #100]	; (801498c <xTaskRemoveFromEventList+0xb4>)
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	429a      	cmp	r2, r3
 801492a:	d903      	bls.n	8014934 <xTaskRemoveFromEventList+0x5c>
 801492c:	693b      	ldr	r3, [r7, #16]
 801492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014930:	4a16      	ldr	r2, [pc, #88]	; (801498c <xTaskRemoveFromEventList+0xb4>)
 8014932:	6013      	str	r3, [r2, #0]
 8014934:	693b      	ldr	r3, [r7, #16]
 8014936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014938:	4613      	mov	r3, r2
 801493a:	009b      	lsls	r3, r3, #2
 801493c:	4413      	add	r3, r2
 801493e:	009b      	lsls	r3, r3, #2
 8014940:	4a13      	ldr	r2, [pc, #76]	; (8014990 <xTaskRemoveFromEventList+0xb8>)
 8014942:	441a      	add	r2, r3
 8014944:	693b      	ldr	r3, [r7, #16]
 8014946:	3304      	adds	r3, #4
 8014948:	4619      	mov	r1, r3
 801494a:	4610      	mov	r0, r2
 801494c:	f7fe f941 	bl	8012bd2 <vListInsertEnd>
 8014950:	e005      	b.n	801495e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014952:	693b      	ldr	r3, [r7, #16]
 8014954:	3318      	adds	r3, #24
 8014956:	4619      	mov	r1, r3
 8014958:	480e      	ldr	r0, [pc, #56]	; (8014994 <xTaskRemoveFromEventList+0xbc>)
 801495a:	f7fe f93a 	bl	8012bd2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801495e:	693b      	ldr	r3, [r7, #16]
 8014960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014962:	4b0d      	ldr	r3, [pc, #52]	; (8014998 <xTaskRemoveFromEventList+0xc0>)
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014968:	429a      	cmp	r2, r3
 801496a:	d905      	bls.n	8014978 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801496c:	2301      	movs	r3, #1
 801496e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014970:	4b0a      	ldr	r3, [pc, #40]	; (801499c <xTaskRemoveFromEventList+0xc4>)
 8014972:	2201      	movs	r2, #1
 8014974:	601a      	str	r2, [r3, #0]
 8014976:	e001      	b.n	801497c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8014978:	2300      	movs	r3, #0
 801497a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801497c:	697b      	ldr	r3, [r7, #20]
}
 801497e:	4618      	mov	r0, r3
 8014980:	3718      	adds	r7, #24
 8014982:	46bd      	mov	sp, r7
 8014984:	bd80      	pop	{r7, pc}
 8014986:	bf00      	nop
 8014988:	20002674 	.word	0x20002674
 801498c:	20002654 	.word	0x20002654
 8014990:	2000217c 	.word	0x2000217c
 8014994:	2000260c 	.word	0x2000260c
 8014998:	20002178 	.word	0x20002178
 801499c:	20002660 	.word	0x20002660

080149a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80149a0:	b480      	push	{r7}
 80149a2:	b083      	sub	sp, #12
 80149a4:	af00      	add	r7, sp, #0
 80149a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80149a8:	4b06      	ldr	r3, [pc, #24]	; (80149c4 <vTaskInternalSetTimeOutState+0x24>)
 80149aa:	681a      	ldr	r2, [r3, #0]
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80149b0:	4b05      	ldr	r3, [pc, #20]	; (80149c8 <vTaskInternalSetTimeOutState+0x28>)
 80149b2:	681a      	ldr	r2, [r3, #0]
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	605a      	str	r2, [r3, #4]
}
 80149b8:	bf00      	nop
 80149ba:	370c      	adds	r7, #12
 80149bc:	46bd      	mov	sp, r7
 80149be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149c2:	4770      	bx	lr
 80149c4:	20002664 	.word	0x20002664
 80149c8:	20002650 	.word	0x20002650

080149cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80149cc:	b580      	push	{r7, lr}
 80149ce:	b088      	sub	sp, #32
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	6078      	str	r0, [r7, #4]
 80149d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d10a      	bne.n	80149f2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80149dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149e0:	f383 8811 	msr	BASEPRI, r3
 80149e4:	f3bf 8f6f 	isb	sy
 80149e8:	f3bf 8f4f 	dsb	sy
 80149ec:	613b      	str	r3, [r7, #16]
}
 80149ee:	bf00      	nop
 80149f0:	e7fe      	b.n	80149f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80149f2:	683b      	ldr	r3, [r7, #0]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d10a      	bne.n	8014a0e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80149f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149fc:	f383 8811 	msr	BASEPRI, r3
 8014a00:	f3bf 8f6f 	isb	sy
 8014a04:	f3bf 8f4f 	dsb	sy
 8014a08:	60fb      	str	r3, [r7, #12]
}
 8014a0a:	bf00      	nop
 8014a0c:	e7fe      	b.n	8014a0c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014a0e:	f000 ff91 	bl	8015934 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014a12:	4b1d      	ldr	r3, [pc, #116]	; (8014a88 <xTaskCheckForTimeOut+0xbc>)
 8014a14:	681b      	ldr	r3, [r3, #0]
 8014a16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	685b      	ldr	r3, [r3, #4]
 8014a1c:	69ba      	ldr	r2, [r7, #24]
 8014a1e:	1ad3      	subs	r3, r2, r3
 8014a20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014a22:	683b      	ldr	r3, [r7, #0]
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a2a:	d102      	bne.n	8014a32 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014a2c:	2300      	movs	r3, #0
 8014a2e:	61fb      	str	r3, [r7, #28]
 8014a30:	e023      	b.n	8014a7a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	681a      	ldr	r2, [r3, #0]
 8014a36:	4b15      	ldr	r3, [pc, #84]	; (8014a8c <xTaskCheckForTimeOut+0xc0>)
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	429a      	cmp	r2, r3
 8014a3c:	d007      	beq.n	8014a4e <xTaskCheckForTimeOut+0x82>
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	685b      	ldr	r3, [r3, #4]
 8014a42:	69ba      	ldr	r2, [r7, #24]
 8014a44:	429a      	cmp	r2, r3
 8014a46:	d302      	bcc.n	8014a4e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014a48:	2301      	movs	r3, #1
 8014a4a:	61fb      	str	r3, [r7, #28]
 8014a4c:	e015      	b.n	8014a7a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014a4e:	683b      	ldr	r3, [r7, #0]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	697a      	ldr	r2, [r7, #20]
 8014a54:	429a      	cmp	r2, r3
 8014a56:	d20b      	bcs.n	8014a70 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014a58:	683b      	ldr	r3, [r7, #0]
 8014a5a:	681a      	ldr	r2, [r3, #0]
 8014a5c:	697b      	ldr	r3, [r7, #20]
 8014a5e:	1ad2      	subs	r2, r2, r3
 8014a60:	683b      	ldr	r3, [r7, #0]
 8014a62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014a64:	6878      	ldr	r0, [r7, #4]
 8014a66:	f7ff ff9b 	bl	80149a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014a6a:	2300      	movs	r3, #0
 8014a6c:	61fb      	str	r3, [r7, #28]
 8014a6e:	e004      	b.n	8014a7a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014a70:	683b      	ldr	r3, [r7, #0]
 8014a72:	2200      	movs	r2, #0
 8014a74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014a76:	2301      	movs	r3, #1
 8014a78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014a7a:	f000 ff8b 	bl	8015994 <vPortExitCritical>

	return xReturn;
 8014a7e:	69fb      	ldr	r3, [r7, #28]
}
 8014a80:	4618      	mov	r0, r3
 8014a82:	3720      	adds	r7, #32
 8014a84:	46bd      	mov	sp, r7
 8014a86:	bd80      	pop	{r7, pc}
 8014a88:	20002650 	.word	0x20002650
 8014a8c:	20002664 	.word	0x20002664

08014a90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014a90:	b480      	push	{r7}
 8014a92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014a94:	4b03      	ldr	r3, [pc, #12]	; (8014aa4 <vTaskMissedYield+0x14>)
 8014a96:	2201      	movs	r2, #1
 8014a98:	601a      	str	r2, [r3, #0]
}
 8014a9a:	bf00      	nop
 8014a9c:	46bd      	mov	sp, r7
 8014a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aa2:	4770      	bx	lr
 8014aa4:	20002660 	.word	0x20002660

08014aa8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014aa8:	b580      	push	{r7, lr}
 8014aaa:	b082      	sub	sp, #8
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014ab0:	f000 f852 	bl	8014b58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014ab4:	4b06      	ldr	r3, [pc, #24]	; (8014ad0 <prvIdleTask+0x28>)
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	2b01      	cmp	r3, #1
 8014aba:	d9f9      	bls.n	8014ab0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014abc:	4b05      	ldr	r3, [pc, #20]	; (8014ad4 <prvIdleTask+0x2c>)
 8014abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ac2:	601a      	str	r2, [r3, #0]
 8014ac4:	f3bf 8f4f 	dsb	sy
 8014ac8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014acc:	e7f0      	b.n	8014ab0 <prvIdleTask+0x8>
 8014ace:	bf00      	nop
 8014ad0:	2000217c 	.word	0x2000217c
 8014ad4:	e000ed04 	.word	0xe000ed04

08014ad8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	b082      	sub	sp, #8
 8014adc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014ade:	2300      	movs	r3, #0
 8014ae0:	607b      	str	r3, [r7, #4]
 8014ae2:	e00c      	b.n	8014afe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014ae4:	687a      	ldr	r2, [r7, #4]
 8014ae6:	4613      	mov	r3, r2
 8014ae8:	009b      	lsls	r3, r3, #2
 8014aea:	4413      	add	r3, r2
 8014aec:	009b      	lsls	r3, r3, #2
 8014aee:	4a12      	ldr	r2, [pc, #72]	; (8014b38 <prvInitialiseTaskLists+0x60>)
 8014af0:	4413      	add	r3, r2
 8014af2:	4618      	mov	r0, r3
 8014af4:	f7fe f840 	bl	8012b78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	3301      	adds	r3, #1
 8014afc:	607b      	str	r3, [r7, #4]
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	2b37      	cmp	r3, #55	; 0x37
 8014b02:	d9ef      	bls.n	8014ae4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014b04:	480d      	ldr	r0, [pc, #52]	; (8014b3c <prvInitialiseTaskLists+0x64>)
 8014b06:	f7fe f837 	bl	8012b78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014b0a:	480d      	ldr	r0, [pc, #52]	; (8014b40 <prvInitialiseTaskLists+0x68>)
 8014b0c:	f7fe f834 	bl	8012b78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014b10:	480c      	ldr	r0, [pc, #48]	; (8014b44 <prvInitialiseTaskLists+0x6c>)
 8014b12:	f7fe f831 	bl	8012b78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014b16:	480c      	ldr	r0, [pc, #48]	; (8014b48 <prvInitialiseTaskLists+0x70>)
 8014b18:	f7fe f82e 	bl	8012b78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014b1c:	480b      	ldr	r0, [pc, #44]	; (8014b4c <prvInitialiseTaskLists+0x74>)
 8014b1e:	f7fe f82b 	bl	8012b78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014b22:	4b0b      	ldr	r3, [pc, #44]	; (8014b50 <prvInitialiseTaskLists+0x78>)
 8014b24:	4a05      	ldr	r2, [pc, #20]	; (8014b3c <prvInitialiseTaskLists+0x64>)
 8014b26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014b28:	4b0a      	ldr	r3, [pc, #40]	; (8014b54 <prvInitialiseTaskLists+0x7c>)
 8014b2a:	4a05      	ldr	r2, [pc, #20]	; (8014b40 <prvInitialiseTaskLists+0x68>)
 8014b2c:	601a      	str	r2, [r3, #0]
}
 8014b2e:	bf00      	nop
 8014b30:	3708      	adds	r7, #8
 8014b32:	46bd      	mov	sp, r7
 8014b34:	bd80      	pop	{r7, pc}
 8014b36:	bf00      	nop
 8014b38:	2000217c 	.word	0x2000217c
 8014b3c:	200025dc 	.word	0x200025dc
 8014b40:	200025f0 	.word	0x200025f0
 8014b44:	2000260c 	.word	0x2000260c
 8014b48:	20002620 	.word	0x20002620
 8014b4c:	20002638 	.word	0x20002638
 8014b50:	20002604 	.word	0x20002604
 8014b54:	20002608 	.word	0x20002608

08014b58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014b58:	b580      	push	{r7, lr}
 8014b5a:	b082      	sub	sp, #8
 8014b5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014b5e:	e019      	b.n	8014b94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014b60:	f000 fee8 	bl	8015934 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014b64:	4b10      	ldr	r3, [pc, #64]	; (8014ba8 <prvCheckTasksWaitingTermination+0x50>)
 8014b66:	68db      	ldr	r3, [r3, #12]
 8014b68:	68db      	ldr	r3, [r3, #12]
 8014b6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	3304      	adds	r3, #4
 8014b70:	4618      	mov	r0, r3
 8014b72:	f7fe f88b 	bl	8012c8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014b76:	4b0d      	ldr	r3, [pc, #52]	; (8014bac <prvCheckTasksWaitingTermination+0x54>)
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	3b01      	subs	r3, #1
 8014b7c:	4a0b      	ldr	r2, [pc, #44]	; (8014bac <prvCheckTasksWaitingTermination+0x54>)
 8014b7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014b80:	4b0b      	ldr	r3, [pc, #44]	; (8014bb0 <prvCheckTasksWaitingTermination+0x58>)
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	3b01      	subs	r3, #1
 8014b86:	4a0a      	ldr	r2, [pc, #40]	; (8014bb0 <prvCheckTasksWaitingTermination+0x58>)
 8014b88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014b8a:	f000 ff03 	bl	8015994 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014b8e:	6878      	ldr	r0, [r7, #4]
 8014b90:	f000 f810 	bl	8014bb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014b94:	4b06      	ldr	r3, [pc, #24]	; (8014bb0 <prvCheckTasksWaitingTermination+0x58>)
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d1e1      	bne.n	8014b60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014b9c:	bf00      	nop
 8014b9e:	bf00      	nop
 8014ba0:	3708      	adds	r7, #8
 8014ba2:	46bd      	mov	sp, r7
 8014ba4:	bd80      	pop	{r7, pc}
 8014ba6:	bf00      	nop
 8014ba8:	20002620 	.word	0x20002620
 8014bac:	2000264c 	.word	0x2000264c
 8014bb0:	20002634 	.word	0x20002634

08014bb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014bb4:	b580      	push	{r7, lr}
 8014bb6:	b084      	sub	sp, #16
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	3354      	adds	r3, #84	; 0x54
 8014bc0:	4618      	mov	r0, r3
 8014bc2:	f003 fad3 	bl	801816c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d108      	bne.n	8014be2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	f001 f89b 	bl	8015d10 <vPortFree>
				vPortFree( pxTCB );
 8014bda:	6878      	ldr	r0, [r7, #4]
 8014bdc:	f001 f898 	bl	8015d10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014be0:	e018      	b.n	8014c14 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8014be8:	2b01      	cmp	r3, #1
 8014bea:	d103      	bne.n	8014bf4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8014bec:	6878      	ldr	r0, [r7, #4]
 8014bee:	f001 f88f 	bl	8015d10 <vPortFree>
	}
 8014bf2:	e00f      	b.n	8014c14 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8014bfa:	2b02      	cmp	r3, #2
 8014bfc:	d00a      	beq.n	8014c14 <prvDeleteTCB+0x60>
	__asm volatile
 8014bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c02:	f383 8811 	msr	BASEPRI, r3
 8014c06:	f3bf 8f6f 	isb	sy
 8014c0a:	f3bf 8f4f 	dsb	sy
 8014c0e:	60fb      	str	r3, [r7, #12]
}
 8014c10:	bf00      	nop
 8014c12:	e7fe      	b.n	8014c12 <prvDeleteTCB+0x5e>
	}
 8014c14:	bf00      	nop
 8014c16:	3710      	adds	r7, #16
 8014c18:	46bd      	mov	sp, r7
 8014c1a:	bd80      	pop	{r7, pc}

08014c1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014c1c:	b480      	push	{r7}
 8014c1e:	b083      	sub	sp, #12
 8014c20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014c22:	4b0c      	ldr	r3, [pc, #48]	; (8014c54 <prvResetNextTaskUnblockTime+0x38>)
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d104      	bne.n	8014c36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014c2c:	4b0a      	ldr	r3, [pc, #40]	; (8014c58 <prvResetNextTaskUnblockTime+0x3c>)
 8014c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8014c32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014c34:	e008      	b.n	8014c48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c36:	4b07      	ldr	r3, [pc, #28]	; (8014c54 <prvResetNextTaskUnblockTime+0x38>)
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	68db      	ldr	r3, [r3, #12]
 8014c3c:	68db      	ldr	r3, [r3, #12]
 8014c3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	685b      	ldr	r3, [r3, #4]
 8014c44:	4a04      	ldr	r2, [pc, #16]	; (8014c58 <prvResetNextTaskUnblockTime+0x3c>)
 8014c46:	6013      	str	r3, [r2, #0]
}
 8014c48:	bf00      	nop
 8014c4a:	370c      	adds	r7, #12
 8014c4c:	46bd      	mov	sp, r7
 8014c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c52:	4770      	bx	lr
 8014c54:	20002604 	.word	0x20002604
 8014c58:	2000266c 	.word	0x2000266c

08014c5c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8014c5c:	b480      	push	{r7}
 8014c5e:	b083      	sub	sp, #12
 8014c60:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8014c62:	4b05      	ldr	r3, [pc, #20]	; (8014c78 <xTaskGetCurrentTaskHandle+0x1c>)
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	607b      	str	r3, [r7, #4]

		return xReturn;
 8014c68:	687b      	ldr	r3, [r7, #4]
	}
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	370c      	adds	r7, #12
 8014c6e:	46bd      	mov	sp, r7
 8014c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c74:	4770      	bx	lr
 8014c76:	bf00      	nop
 8014c78:	20002178 	.word	0x20002178

08014c7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014c7c:	b480      	push	{r7}
 8014c7e:	b083      	sub	sp, #12
 8014c80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014c82:	4b0b      	ldr	r3, [pc, #44]	; (8014cb0 <xTaskGetSchedulerState+0x34>)
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d102      	bne.n	8014c90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014c8a:	2301      	movs	r3, #1
 8014c8c:	607b      	str	r3, [r7, #4]
 8014c8e:	e008      	b.n	8014ca2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014c90:	4b08      	ldr	r3, [pc, #32]	; (8014cb4 <xTaskGetSchedulerState+0x38>)
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d102      	bne.n	8014c9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014c98:	2302      	movs	r3, #2
 8014c9a:	607b      	str	r3, [r7, #4]
 8014c9c:	e001      	b.n	8014ca2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014c9e:	2300      	movs	r3, #0
 8014ca0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014ca2:	687b      	ldr	r3, [r7, #4]
	}
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	370c      	adds	r7, #12
 8014ca8:	46bd      	mov	sp, r7
 8014caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cae:	4770      	bx	lr
 8014cb0:	20002658 	.word	0x20002658
 8014cb4:	20002674 	.word	0x20002674

08014cb8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014cb8:	b580      	push	{r7, lr}
 8014cba:	b084      	sub	sp, #16
 8014cbc:	af00      	add	r7, sp, #0
 8014cbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014cc4:	2300      	movs	r3, #0
 8014cc6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d051      	beq.n	8014d72 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014cce:	68bb      	ldr	r3, [r7, #8]
 8014cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cd2:	4b2a      	ldr	r3, [pc, #168]	; (8014d7c <xTaskPriorityInherit+0xc4>)
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cd8:	429a      	cmp	r2, r3
 8014cda:	d241      	bcs.n	8014d60 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014cdc:	68bb      	ldr	r3, [r7, #8]
 8014cde:	699b      	ldr	r3, [r3, #24]
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	db06      	blt.n	8014cf2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014ce4:	4b25      	ldr	r3, [pc, #148]	; (8014d7c <xTaskPriorityInherit+0xc4>)
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014cee:	68bb      	ldr	r3, [r7, #8]
 8014cf0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014cf2:	68bb      	ldr	r3, [r7, #8]
 8014cf4:	6959      	ldr	r1, [r3, #20]
 8014cf6:	68bb      	ldr	r3, [r7, #8]
 8014cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cfa:	4613      	mov	r3, r2
 8014cfc:	009b      	lsls	r3, r3, #2
 8014cfe:	4413      	add	r3, r2
 8014d00:	009b      	lsls	r3, r3, #2
 8014d02:	4a1f      	ldr	r2, [pc, #124]	; (8014d80 <xTaskPriorityInherit+0xc8>)
 8014d04:	4413      	add	r3, r2
 8014d06:	4299      	cmp	r1, r3
 8014d08:	d122      	bne.n	8014d50 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014d0a:	68bb      	ldr	r3, [r7, #8]
 8014d0c:	3304      	adds	r3, #4
 8014d0e:	4618      	mov	r0, r3
 8014d10:	f7fd ffbc 	bl	8012c8c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014d14:	4b19      	ldr	r3, [pc, #100]	; (8014d7c <xTaskPriorityInherit+0xc4>)
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d1a:	68bb      	ldr	r3, [r7, #8]
 8014d1c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014d1e:	68bb      	ldr	r3, [r7, #8]
 8014d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d22:	4b18      	ldr	r3, [pc, #96]	; (8014d84 <xTaskPriorityInherit+0xcc>)
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	429a      	cmp	r2, r3
 8014d28:	d903      	bls.n	8014d32 <xTaskPriorityInherit+0x7a>
 8014d2a:	68bb      	ldr	r3, [r7, #8]
 8014d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d2e:	4a15      	ldr	r2, [pc, #84]	; (8014d84 <xTaskPriorityInherit+0xcc>)
 8014d30:	6013      	str	r3, [r2, #0]
 8014d32:	68bb      	ldr	r3, [r7, #8]
 8014d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d36:	4613      	mov	r3, r2
 8014d38:	009b      	lsls	r3, r3, #2
 8014d3a:	4413      	add	r3, r2
 8014d3c:	009b      	lsls	r3, r3, #2
 8014d3e:	4a10      	ldr	r2, [pc, #64]	; (8014d80 <xTaskPriorityInherit+0xc8>)
 8014d40:	441a      	add	r2, r3
 8014d42:	68bb      	ldr	r3, [r7, #8]
 8014d44:	3304      	adds	r3, #4
 8014d46:	4619      	mov	r1, r3
 8014d48:	4610      	mov	r0, r2
 8014d4a:	f7fd ff42 	bl	8012bd2 <vListInsertEnd>
 8014d4e:	e004      	b.n	8014d5a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014d50:	4b0a      	ldr	r3, [pc, #40]	; (8014d7c <xTaskPriorityInherit+0xc4>)
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d56:	68bb      	ldr	r3, [r7, #8]
 8014d58:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014d5a:	2301      	movs	r3, #1
 8014d5c:	60fb      	str	r3, [r7, #12]
 8014d5e:	e008      	b.n	8014d72 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014d60:	68bb      	ldr	r3, [r7, #8]
 8014d62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014d64:	4b05      	ldr	r3, [pc, #20]	; (8014d7c <xTaskPriorityInherit+0xc4>)
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d6a:	429a      	cmp	r2, r3
 8014d6c:	d201      	bcs.n	8014d72 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014d6e:	2301      	movs	r3, #1
 8014d70:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014d72:	68fb      	ldr	r3, [r7, #12]
	}
 8014d74:	4618      	mov	r0, r3
 8014d76:	3710      	adds	r7, #16
 8014d78:	46bd      	mov	sp, r7
 8014d7a:	bd80      	pop	{r7, pc}
 8014d7c:	20002178 	.word	0x20002178
 8014d80:	2000217c 	.word	0x2000217c
 8014d84:	20002654 	.word	0x20002654

08014d88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014d88:	b580      	push	{r7, lr}
 8014d8a:	b086      	sub	sp, #24
 8014d8c:	af00      	add	r7, sp, #0
 8014d8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014d94:	2300      	movs	r3, #0
 8014d96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d056      	beq.n	8014e4c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014d9e:	4b2e      	ldr	r3, [pc, #184]	; (8014e58 <xTaskPriorityDisinherit+0xd0>)
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	693a      	ldr	r2, [r7, #16]
 8014da4:	429a      	cmp	r2, r3
 8014da6:	d00a      	beq.n	8014dbe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8014da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dac:	f383 8811 	msr	BASEPRI, r3
 8014db0:	f3bf 8f6f 	isb	sy
 8014db4:	f3bf 8f4f 	dsb	sy
 8014db8:	60fb      	str	r3, [r7, #12]
}
 8014dba:	bf00      	nop
 8014dbc:	e7fe      	b.n	8014dbc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8014dbe:	693b      	ldr	r3, [r7, #16]
 8014dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d10a      	bne.n	8014ddc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8014dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dca:	f383 8811 	msr	BASEPRI, r3
 8014dce:	f3bf 8f6f 	isb	sy
 8014dd2:	f3bf 8f4f 	dsb	sy
 8014dd6:	60bb      	str	r3, [r7, #8]
}
 8014dd8:	bf00      	nop
 8014dda:	e7fe      	b.n	8014dda <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8014ddc:	693b      	ldr	r3, [r7, #16]
 8014dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014de0:	1e5a      	subs	r2, r3, #1
 8014de2:	693b      	ldr	r3, [r7, #16]
 8014de4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014de6:	693b      	ldr	r3, [r7, #16]
 8014de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014dea:	693b      	ldr	r3, [r7, #16]
 8014dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014dee:	429a      	cmp	r2, r3
 8014df0:	d02c      	beq.n	8014e4c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014df2:	693b      	ldr	r3, [r7, #16]
 8014df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d128      	bne.n	8014e4c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014dfa:	693b      	ldr	r3, [r7, #16]
 8014dfc:	3304      	adds	r3, #4
 8014dfe:	4618      	mov	r0, r3
 8014e00:	f7fd ff44 	bl	8012c8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014e04:	693b      	ldr	r3, [r7, #16]
 8014e06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014e08:	693b      	ldr	r3, [r7, #16]
 8014e0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014e0c:	693b      	ldr	r3, [r7, #16]
 8014e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e10:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014e14:	693b      	ldr	r3, [r7, #16]
 8014e16:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014e18:	693b      	ldr	r3, [r7, #16]
 8014e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e1c:	4b0f      	ldr	r3, [pc, #60]	; (8014e5c <xTaskPriorityDisinherit+0xd4>)
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	429a      	cmp	r2, r3
 8014e22:	d903      	bls.n	8014e2c <xTaskPriorityDisinherit+0xa4>
 8014e24:	693b      	ldr	r3, [r7, #16]
 8014e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e28:	4a0c      	ldr	r2, [pc, #48]	; (8014e5c <xTaskPriorityDisinherit+0xd4>)
 8014e2a:	6013      	str	r3, [r2, #0]
 8014e2c:	693b      	ldr	r3, [r7, #16]
 8014e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e30:	4613      	mov	r3, r2
 8014e32:	009b      	lsls	r3, r3, #2
 8014e34:	4413      	add	r3, r2
 8014e36:	009b      	lsls	r3, r3, #2
 8014e38:	4a09      	ldr	r2, [pc, #36]	; (8014e60 <xTaskPriorityDisinherit+0xd8>)
 8014e3a:	441a      	add	r2, r3
 8014e3c:	693b      	ldr	r3, [r7, #16]
 8014e3e:	3304      	adds	r3, #4
 8014e40:	4619      	mov	r1, r3
 8014e42:	4610      	mov	r0, r2
 8014e44:	f7fd fec5 	bl	8012bd2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014e48:	2301      	movs	r3, #1
 8014e4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014e4c:	697b      	ldr	r3, [r7, #20]
	}
 8014e4e:	4618      	mov	r0, r3
 8014e50:	3718      	adds	r7, #24
 8014e52:	46bd      	mov	sp, r7
 8014e54:	bd80      	pop	{r7, pc}
 8014e56:	bf00      	nop
 8014e58:	20002178 	.word	0x20002178
 8014e5c:	20002654 	.word	0x20002654
 8014e60:	2000217c 	.word	0x2000217c

08014e64 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014e64:	b580      	push	{r7, lr}
 8014e66:	b088      	sub	sp, #32
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	6078      	str	r0, [r7, #4]
 8014e6c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014e72:	2301      	movs	r3, #1
 8014e74:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d06a      	beq.n	8014f52 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014e7c:	69bb      	ldr	r3, [r7, #24]
 8014e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d10a      	bne.n	8014e9a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8014e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e88:	f383 8811 	msr	BASEPRI, r3
 8014e8c:	f3bf 8f6f 	isb	sy
 8014e90:	f3bf 8f4f 	dsb	sy
 8014e94:	60fb      	str	r3, [r7, #12]
}
 8014e96:	bf00      	nop
 8014e98:	e7fe      	b.n	8014e98 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014e9a:	69bb      	ldr	r3, [r7, #24]
 8014e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014e9e:	683a      	ldr	r2, [r7, #0]
 8014ea0:	429a      	cmp	r2, r3
 8014ea2:	d902      	bls.n	8014eaa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014ea4:	683b      	ldr	r3, [r7, #0]
 8014ea6:	61fb      	str	r3, [r7, #28]
 8014ea8:	e002      	b.n	8014eb0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8014eaa:	69bb      	ldr	r3, [r7, #24]
 8014eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014eae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014eb0:	69bb      	ldr	r3, [r7, #24]
 8014eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014eb4:	69fa      	ldr	r2, [r7, #28]
 8014eb6:	429a      	cmp	r2, r3
 8014eb8:	d04b      	beq.n	8014f52 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014eba:	69bb      	ldr	r3, [r7, #24]
 8014ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014ebe:	697a      	ldr	r2, [r7, #20]
 8014ec0:	429a      	cmp	r2, r3
 8014ec2:	d146      	bne.n	8014f52 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014ec4:	4b25      	ldr	r3, [pc, #148]	; (8014f5c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	69ba      	ldr	r2, [r7, #24]
 8014eca:	429a      	cmp	r2, r3
 8014ecc:	d10a      	bne.n	8014ee4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8014ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ed2:	f383 8811 	msr	BASEPRI, r3
 8014ed6:	f3bf 8f6f 	isb	sy
 8014eda:	f3bf 8f4f 	dsb	sy
 8014ede:	60bb      	str	r3, [r7, #8]
}
 8014ee0:	bf00      	nop
 8014ee2:	e7fe      	b.n	8014ee2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014ee4:	69bb      	ldr	r3, [r7, #24]
 8014ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ee8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8014eea:	69bb      	ldr	r3, [r7, #24]
 8014eec:	69fa      	ldr	r2, [r7, #28]
 8014eee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014ef0:	69bb      	ldr	r3, [r7, #24]
 8014ef2:	699b      	ldr	r3, [r3, #24]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	db04      	blt.n	8014f02 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014ef8:	69fb      	ldr	r3, [r7, #28]
 8014efa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014efe:	69bb      	ldr	r3, [r7, #24]
 8014f00:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014f02:	69bb      	ldr	r3, [r7, #24]
 8014f04:	6959      	ldr	r1, [r3, #20]
 8014f06:	693a      	ldr	r2, [r7, #16]
 8014f08:	4613      	mov	r3, r2
 8014f0a:	009b      	lsls	r3, r3, #2
 8014f0c:	4413      	add	r3, r2
 8014f0e:	009b      	lsls	r3, r3, #2
 8014f10:	4a13      	ldr	r2, [pc, #76]	; (8014f60 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8014f12:	4413      	add	r3, r2
 8014f14:	4299      	cmp	r1, r3
 8014f16:	d11c      	bne.n	8014f52 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014f18:	69bb      	ldr	r3, [r7, #24]
 8014f1a:	3304      	adds	r3, #4
 8014f1c:	4618      	mov	r0, r3
 8014f1e:	f7fd feb5 	bl	8012c8c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8014f22:	69bb      	ldr	r3, [r7, #24]
 8014f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f26:	4b0f      	ldr	r3, [pc, #60]	; (8014f64 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	429a      	cmp	r2, r3
 8014f2c:	d903      	bls.n	8014f36 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8014f2e:	69bb      	ldr	r3, [r7, #24]
 8014f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f32:	4a0c      	ldr	r2, [pc, #48]	; (8014f64 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8014f34:	6013      	str	r3, [r2, #0]
 8014f36:	69bb      	ldr	r3, [r7, #24]
 8014f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f3a:	4613      	mov	r3, r2
 8014f3c:	009b      	lsls	r3, r3, #2
 8014f3e:	4413      	add	r3, r2
 8014f40:	009b      	lsls	r3, r3, #2
 8014f42:	4a07      	ldr	r2, [pc, #28]	; (8014f60 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8014f44:	441a      	add	r2, r3
 8014f46:	69bb      	ldr	r3, [r7, #24]
 8014f48:	3304      	adds	r3, #4
 8014f4a:	4619      	mov	r1, r3
 8014f4c:	4610      	mov	r0, r2
 8014f4e:	f7fd fe40 	bl	8012bd2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014f52:	bf00      	nop
 8014f54:	3720      	adds	r7, #32
 8014f56:	46bd      	mov	sp, r7
 8014f58:	bd80      	pop	{r7, pc}
 8014f5a:	bf00      	nop
 8014f5c:	20002178 	.word	0x20002178
 8014f60:	2000217c 	.word	0x2000217c
 8014f64:	20002654 	.word	0x20002654

08014f68 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8014f68:	b480      	push	{r7}
 8014f6a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014f6c:	4b07      	ldr	r3, [pc, #28]	; (8014f8c <pvTaskIncrementMutexHeldCount+0x24>)
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d004      	beq.n	8014f7e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014f74:	4b05      	ldr	r3, [pc, #20]	; (8014f8c <pvTaskIncrementMutexHeldCount+0x24>)
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014f7a:	3201      	adds	r2, #1
 8014f7c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8014f7e:	4b03      	ldr	r3, [pc, #12]	; (8014f8c <pvTaskIncrementMutexHeldCount+0x24>)
 8014f80:	681b      	ldr	r3, [r3, #0]
	}
 8014f82:	4618      	mov	r0, r3
 8014f84:	46bd      	mov	sp, r7
 8014f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f8a:	4770      	bx	lr
 8014f8c:	20002178 	.word	0x20002178

08014f90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014f90:	b580      	push	{r7, lr}
 8014f92:	b084      	sub	sp, #16
 8014f94:	af00      	add	r7, sp, #0
 8014f96:	6078      	str	r0, [r7, #4]
 8014f98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014f9a:	4b21      	ldr	r3, [pc, #132]	; (8015020 <prvAddCurrentTaskToDelayedList+0x90>)
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014fa0:	4b20      	ldr	r3, [pc, #128]	; (8015024 <prvAddCurrentTaskToDelayedList+0x94>)
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	3304      	adds	r3, #4
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	f7fd fe70 	bl	8012c8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fb2:	d10a      	bne.n	8014fca <prvAddCurrentTaskToDelayedList+0x3a>
 8014fb4:	683b      	ldr	r3, [r7, #0]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d007      	beq.n	8014fca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014fba:	4b1a      	ldr	r3, [pc, #104]	; (8015024 <prvAddCurrentTaskToDelayedList+0x94>)
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	3304      	adds	r3, #4
 8014fc0:	4619      	mov	r1, r3
 8014fc2:	4819      	ldr	r0, [pc, #100]	; (8015028 <prvAddCurrentTaskToDelayedList+0x98>)
 8014fc4:	f7fd fe05 	bl	8012bd2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014fc8:	e026      	b.n	8015018 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014fca:	68fa      	ldr	r2, [r7, #12]
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	4413      	add	r3, r2
 8014fd0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014fd2:	4b14      	ldr	r3, [pc, #80]	; (8015024 <prvAddCurrentTaskToDelayedList+0x94>)
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	68ba      	ldr	r2, [r7, #8]
 8014fd8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014fda:	68ba      	ldr	r2, [r7, #8]
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	429a      	cmp	r2, r3
 8014fe0:	d209      	bcs.n	8014ff6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014fe2:	4b12      	ldr	r3, [pc, #72]	; (801502c <prvAddCurrentTaskToDelayedList+0x9c>)
 8014fe4:	681a      	ldr	r2, [r3, #0]
 8014fe6:	4b0f      	ldr	r3, [pc, #60]	; (8015024 <prvAddCurrentTaskToDelayedList+0x94>)
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	3304      	adds	r3, #4
 8014fec:	4619      	mov	r1, r3
 8014fee:	4610      	mov	r0, r2
 8014ff0:	f7fd fe13 	bl	8012c1a <vListInsert>
}
 8014ff4:	e010      	b.n	8015018 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014ff6:	4b0e      	ldr	r3, [pc, #56]	; (8015030 <prvAddCurrentTaskToDelayedList+0xa0>)
 8014ff8:	681a      	ldr	r2, [r3, #0]
 8014ffa:	4b0a      	ldr	r3, [pc, #40]	; (8015024 <prvAddCurrentTaskToDelayedList+0x94>)
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	3304      	adds	r3, #4
 8015000:	4619      	mov	r1, r3
 8015002:	4610      	mov	r0, r2
 8015004:	f7fd fe09 	bl	8012c1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015008:	4b0a      	ldr	r3, [pc, #40]	; (8015034 <prvAddCurrentTaskToDelayedList+0xa4>)
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	68ba      	ldr	r2, [r7, #8]
 801500e:	429a      	cmp	r2, r3
 8015010:	d202      	bcs.n	8015018 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015012:	4a08      	ldr	r2, [pc, #32]	; (8015034 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015014:	68bb      	ldr	r3, [r7, #8]
 8015016:	6013      	str	r3, [r2, #0]
}
 8015018:	bf00      	nop
 801501a:	3710      	adds	r7, #16
 801501c:	46bd      	mov	sp, r7
 801501e:	bd80      	pop	{r7, pc}
 8015020:	20002650 	.word	0x20002650
 8015024:	20002178 	.word	0x20002178
 8015028:	20002638 	.word	0x20002638
 801502c:	20002608 	.word	0x20002608
 8015030:	20002604 	.word	0x20002604
 8015034:	2000266c 	.word	0x2000266c

08015038 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015038:	b580      	push	{r7, lr}
 801503a:	b08a      	sub	sp, #40	; 0x28
 801503c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801503e:	2300      	movs	r3, #0
 8015040:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015042:	f000 fb07 	bl	8015654 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015046:	4b1c      	ldr	r3, [pc, #112]	; (80150b8 <xTimerCreateTimerTask+0x80>)
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	2b00      	cmp	r3, #0
 801504c:	d021      	beq.n	8015092 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801504e:	2300      	movs	r3, #0
 8015050:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015052:	2300      	movs	r3, #0
 8015054:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015056:	1d3a      	adds	r2, r7, #4
 8015058:	f107 0108 	add.w	r1, r7, #8
 801505c:	f107 030c 	add.w	r3, r7, #12
 8015060:	4618      	mov	r0, r3
 8015062:	f7fd fd6f 	bl	8012b44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015066:	6879      	ldr	r1, [r7, #4]
 8015068:	68bb      	ldr	r3, [r7, #8]
 801506a:	68fa      	ldr	r2, [r7, #12]
 801506c:	9202      	str	r2, [sp, #8]
 801506e:	9301      	str	r3, [sp, #4]
 8015070:	2302      	movs	r3, #2
 8015072:	9300      	str	r3, [sp, #0]
 8015074:	2300      	movs	r3, #0
 8015076:	460a      	mov	r2, r1
 8015078:	4910      	ldr	r1, [pc, #64]	; (80150bc <xTimerCreateTimerTask+0x84>)
 801507a:	4811      	ldr	r0, [pc, #68]	; (80150c0 <xTimerCreateTimerTask+0x88>)
 801507c:	f7fe fe3e 	bl	8013cfc <xTaskCreateStatic>
 8015080:	4603      	mov	r3, r0
 8015082:	4a10      	ldr	r2, [pc, #64]	; (80150c4 <xTimerCreateTimerTask+0x8c>)
 8015084:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015086:	4b0f      	ldr	r3, [pc, #60]	; (80150c4 <xTimerCreateTimerTask+0x8c>)
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	2b00      	cmp	r3, #0
 801508c:	d001      	beq.n	8015092 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801508e:	2301      	movs	r3, #1
 8015090:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015092:	697b      	ldr	r3, [r7, #20]
 8015094:	2b00      	cmp	r3, #0
 8015096:	d10a      	bne.n	80150ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8015098:	f04f 0350 	mov.w	r3, #80	; 0x50
 801509c:	f383 8811 	msr	BASEPRI, r3
 80150a0:	f3bf 8f6f 	isb	sy
 80150a4:	f3bf 8f4f 	dsb	sy
 80150a8:	613b      	str	r3, [r7, #16]
}
 80150aa:	bf00      	nop
 80150ac:	e7fe      	b.n	80150ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 80150ae:	697b      	ldr	r3, [r7, #20]
}
 80150b0:	4618      	mov	r0, r3
 80150b2:	3718      	adds	r7, #24
 80150b4:	46bd      	mov	sp, r7
 80150b6:	bd80      	pop	{r7, pc}
 80150b8:	200026a8 	.word	0x200026a8
 80150bc:	0801d4c0 	.word	0x0801d4c0
 80150c0:	080151fd 	.word	0x080151fd
 80150c4:	200026ac 	.word	0x200026ac

080150c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b08a      	sub	sp, #40	; 0x28
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	60f8      	str	r0, [r7, #12]
 80150d0:	60b9      	str	r1, [r7, #8]
 80150d2:	607a      	str	r2, [r7, #4]
 80150d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80150d6:	2300      	movs	r3, #0
 80150d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d10a      	bne.n	80150f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80150e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150e4:	f383 8811 	msr	BASEPRI, r3
 80150e8:	f3bf 8f6f 	isb	sy
 80150ec:	f3bf 8f4f 	dsb	sy
 80150f0:	623b      	str	r3, [r7, #32]
}
 80150f2:	bf00      	nop
 80150f4:	e7fe      	b.n	80150f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80150f6:	4b1a      	ldr	r3, [pc, #104]	; (8015160 <xTimerGenericCommand+0x98>)
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d02a      	beq.n	8015154 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80150fe:	68bb      	ldr	r3, [r7, #8]
 8015100:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801510a:	68bb      	ldr	r3, [r7, #8]
 801510c:	2b05      	cmp	r3, #5
 801510e:	dc18      	bgt.n	8015142 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015110:	f7ff fdb4 	bl	8014c7c <xTaskGetSchedulerState>
 8015114:	4603      	mov	r3, r0
 8015116:	2b02      	cmp	r3, #2
 8015118:	d109      	bne.n	801512e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801511a:	4b11      	ldr	r3, [pc, #68]	; (8015160 <xTimerGenericCommand+0x98>)
 801511c:	6818      	ldr	r0, [r3, #0]
 801511e:	f107 0110 	add.w	r1, r7, #16
 8015122:	2300      	movs	r3, #0
 8015124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015126:	f7fd ff83 	bl	8013030 <xQueueGenericSend>
 801512a:	6278      	str	r0, [r7, #36]	; 0x24
 801512c:	e012      	b.n	8015154 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801512e:	4b0c      	ldr	r3, [pc, #48]	; (8015160 <xTimerGenericCommand+0x98>)
 8015130:	6818      	ldr	r0, [r3, #0]
 8015132:	f107 0110 	add.w	r1, r7, #16
 8015136:	2300      	movs	r3, #0
 8015138:	2200      	movs	r2, #0
 801513a:	f7fd ff79 	bl	8013030 <xQueueGenericSend>
 801513e:	6278      	str	r0, [r7, #36]	; 0x24
 8015140:	e008      	b.n	8015154 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015142:	4b07      	ldr	r3, [pc, #28]	; (8015160 <xTimerGenericCommand+0x98>)
 8015144:	6818      	ldr	r0, [r3, #0]
 8015146:	f107 0110 	add.w	r1, r7, #16
 801514a:	2300      	movs	r3, #0
 801514c:	683a      	ldr	r2, [r7, #0]
 801514e:	f7fe f86d 	bl	801322c <xQueueGenericSendFromISR>
 8015152:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015156:	4618      	mov	r0, r3
 8015158:	3728      	adds	r7, #40	; 0x28
 801515a:	46bd      	mov	sp, r7
 801515c:	bd80      	pop	{r7, pc}
 801515e:	bf00      	nop
 8015160:	200026a8 	.word	0x200026a8

08015164 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015164:	b580      	push	{r7, lr}
 8015166:	b088      	sub	sp, #32
 8015168:	af02      	add	r7, sp, #8
 801516a:	6078      	str	r0, [r7, #4]
 801516c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801516e:	4b22      	ldr	r3, [pc, #136]	; (80151f8 <prvProcessExpiredTimer+0x94>)
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	68db      	ldr	r3, [r3, #12]
 8015174:	68db      	ldr	r3, [r3, #12]
 8015176:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015178:	697b      	ldr	r3, [r7, #20]
 801517a:	3304      	adds	r3, #4
 801517c:	4618      	mov	r0, r3
 801517e:	f7fd fd85 	bl	8012c8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015182:	697b      	ldr	r3, [r7, #20]
 8015184:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015188:	f003 0304 	and.w	r3, r3, #4
 801518c:	2b00      	cmp	r3, #0
 801518e:	d022      	beq.n	80151d6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015190:	697b      	ldr	r3, [r7, #20]
 8015192:	699a      	ldr	r2, [r3, #24]
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	18d1      	adds	r1, r2, r3
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	683a      	ldr	r2, [r7, #0]
 801519c:	6978      	ldr	r0, [r7, #20]
 801519e:	f000 f8d1 	bl	8015344 <prvInsertTimerInActiveList>
 80151a2:	4603      	mov	r3, r0
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d01f      	beq.n	80151e8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80151a8:	2300      	movs	r3, #0
 80151aa:	9300      	str	r3, [sp, #0]
 80151ac:	2300      	movs	r3, #0
 80151ae:	687a      	ldr	r2, [r7, #4]
 80151b0:	2100      	movs	r1, #0
 80151b2:	6978      	ldr	r0, [r7, #20]
 80151b4:	f7ff ff88 	bl	80150c8 <xTimerGenericCommand>
 80151b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80151ba:	693b      	ldr	r3, [r7, #16]
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d113      	bne.n	80151e8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80151c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151c4:	f383 8811 	msr	BASEPRI, r3
 80151c8:	f3bf 8f6f 	isb	sy
 80151cc:	f3bf 8f4f 	dsb	sy
 80151d0:	60fb      	str	r3, [r7, #12]
}
 80151d2:	bf00      	nop
 80151d4:	e7fe      	b.n	80151d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80151d6:	697b      	ldr	r3, [r7, #20]
 80151d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80151dc:	f023 0301 	bic.w	r3, r3, #1
 80151e0:	b2da      	uxtb	r2, r3
 80151e2:	697b      	ldr	r3, [r7, #20]
 80151e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80151e8:	697b      	ldr	r3, [r7, #20]
 80151ea:	6a1b      	ldr	r3, [r3, #32]
 80151ec:	6978      	ldr	r0, [r7, #20]
 80151ee:	4798      	blx	r3
}
 80151f0:	bf00      	nop
 80151f2:	3718      	adds	r7, #24
 80151f4:	46bd      	mov	sp, r7
 80151f6:	bd80      	pop	{r7, pc}
 80151f8:	200026a0 	.word	0x200026a0

080151fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80151fc:	b580      	push	{r7, lr}
 80151fe:	b084      	sub	sp, #16
 8015200:	af00      	add	r7, sp, #0
 8015202:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015204:	f107 0308 	add.w	r3, r7, #8
 8015208:	4618      	mov	r0, r3
 801520a:	f000 f857 	bl	80152bc <prvGetNextExpireTime>
 801520e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015210:	68bb      	ldr	r3, [r7, #8]
 8015212:	4619      	mov	r1, r3
 8015214:	68f8      	ldr	r0, [r7, #12]
 8015216:	f000 f803 	bl	8015220 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801521a:	f000 f8d5 	bl	80153c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801521e:	e7f1      	b.n	8015204 <prvTimerTask+0x8>

08015220 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015220:	b580      	push	{r7, lr}
 8015222:	b084      	sub	sp, #16
 8015224:	af00      	add	r7, sp, #0
 8015226:	6078      	str	r0, [r7, #4]
 8015228:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801522a:	f7ff f92b 	bl	8014484 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801522e:	f107 0308 	add.w	r3, r7, #8
 8015232:	4618      	mov	r0, r3
 8015234:	f000 f866 	bl	8015304 <prvSampleTimeNow>
 8015238:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801523a:	68bb      	ldr	r3, [r7, #8]
 801523c:	2b00      	cmp	r3, #0
 801523e:	d130      	bne.n	80152a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015240:	683b      	ldr	r3, [r7, #0]
 8015242:	2b00      	cmp	r3, #0
 8015244:	d10a      	bne.n	801525c <prvProcessTimerOrBlockTask+0x3c>
 8015246:	687a      	ldr	r2, [r7, #4]
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	429a      	cmp	r2, r3
 801524c:	d806      	bhi.n	801525c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801524e:	f7ff f927 	bl	80144a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015252:	68f9      	ldr	r1, [r7, #12]
 8015254:	6878      	ldr	r0, [r7, #4]
 8015256:	f7ff ff85 	bl	8015164 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801525a:	e024      	b.n	80152a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801525c:	683b      	ldr	r3, [r7, #0]
 801525e:	2b00      	cmp	r3, #0
 8015260:	d008      	beq.n	8015274 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015262:	4b13      	ldr	r3, [pc, #76]	; (80152b0 <prvProcessTimerOrBlockTask+0x90>)
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	2b00      	cmp	r3, #0
 801526a:	d101      	bne.n	8015270 <prvProcessTimerOrBlockTask+0x50>
 801526c:	2301      	movs	r3, #1
 801526e:	e000      	b.n	8015272 <prvProcessTimerOrBlockTask+0x52>
 8015270:	2300      	movs	r3, #0
 8015272:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015274:	4b0f      	ldr	r3, [pc, #60]	; (80152b4 <prvProcessTimerOrBlockTask+0x94>)
 8015276:	6818      	ldr	r0, [r3, #0]
 8015278:	687a      	ldr	r2, [r7, #4]
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	1ad3      	subs	r3, r2, r3
 801527e:	683a      	ldr	r2, [r7, #0]
 8015280:	4619      	mov	r1, r3
 8015282:	f7fe fd07 	bl	8013c94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015286:	f7ff f90b 	bl	80144a0 <xTaskResumeAll>
 801528a:	4603      	mov	r3, r0
 801528c:	2b00      	cmp	r3, #0
 801528e:	d10a      	bne.n	80152a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015290:	4b09      	ldr	r3, [pc, #36]	; (80152b8 <prvProcessTimerOrBlockTask+0x98>)
 8015292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015296:	601a      	str	r2, [r3, #0]
 8015298:	f3bf 8f4f 	dsb	sy
 801529c:	f3bf 8f6f 	isb	sy
}
 80152a0:	e001      	b.n	80152a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80152a2:	f7ff f8fd 	bl	80144a0 <xTaskResumeAll>
}
 80152a6:	bf00      	nop
 80152a8:	3710      	adds	r7, #16
 80152aa:	46bd      	mov	sp, r7
 80152ac:	bd80      	pop	{r7, pc}
 80152ae:	bf00      	nop
 80152b0:	200026a4 	.word	0x200026a4
 80152b4:	200026a8 	.word	0x200026a8
 80152b8:	e000ed04 	.word	0xe000ed04

080152bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80152bc:	b480      	push	{r7}
 80152be:	b085      	sub	sp, #20
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80152c4:	4b0e      	ldr	r3, [pc, #56]	; (8015300 <prvGetNextExpireTime+0x44>)
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d101      	bne.n	80152d2 <prvGetNextExpireTime+0x16>
 80152ce:	2201      	movs	r2, #1
 80152d0:	e000      	b.n	80152d4 <prvGetNextExpireTime+0x18>
 80152d2:	2200      	movs	r2, #0
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d105      	bne.n	80152ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80152e0:	4b07      	ldr	r3, [pc, #28]	; (8015300 <prvGetNextExpireTime+0x44>)
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	68db      	ldr	r3, [r3, #12]
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	60fb      	str	r3, [r7, #12]
 80152ea:	e001      	b.n	80152f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80152ec:	2300      	movs	r3, #0
 80152ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80152f0:	68fb      	ldr	r3, [r7, #12]
}
 80152f2:	4618      	mov	r0, r3
 80152f4:	3714      	adds	r7, #20
 80152f6:	46bd      	mov	sp, r7
 80152f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152fc:	4770      	bx	lr
 80152fe:	bf00      	nop
 8015300:	200026a0 	.word	0x200026a0

08015304 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015304:	b580      	push	{r7, lr}
 8015306:	b084      	sub	sp, #16
 8015308:	af00      	add	r7, sp, #0
 801530a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801530c:	f7ff f966 	bl	80145dc <xTaskGetTickCount>
 8015310:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015312:	4b0b      	ldr	r3, [pc, #44]	; (8015340 <prvSampleTimeNow+0x3c>)
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	68fa      	ldr	r2, [r7, #12]
 8015318:	429a      	cmp	r2, r3
 801531a:	d205      	bcs.n	8015328 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801531c:	f000 f936 	bl	801558c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	2201      	movs	r2, #1
 8015324:	601a      	str	r2, [r3, #0]
 8015326:	e002      	b.n	801532e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	2200      	movs	r2, #0
 801532c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801532e:	4a04      	ldr	r2, [pc, #16]	; (8015340 <prvSampleTimeNow+0x3c>)
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015334:	68fb      	ldr	r3, [r7, #12]
}
 8015336:	4618      	mov	r0, r3
 8015338:	3710      	adds	r7, #16
 801533a:	46bd      	mov	sp, r7
 801533c:	bd80      	pop	{r7, pc}
 801533e:	bf00      	nop
 8015340:	200026b0 	.word	0x200026b0

08015344 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015344:	b580      	push	{r7, lr}
 8015346:	b086      	sub	sp, #24
 8015348:	af00      	add	r7, sp, #0
 801534a:	60f8      	str	r0, [r7, #12]
 801534c:	60b9      	str	r1, [r7, #8]
 801534e:	607a      	str	r2, [r7, #4]
 8015350:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015352:	2300      	movs	r3, #0
 8015354:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	68ba      	ldr	r2, [r7, #8]
 801535a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	68fa      	ldr	r2, [r7, #12]
 8015360:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015362:	68ba      	ldr	r2, [r7, #8]
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	429a      	cmp	r2, r3
 8015368:	d812      	bhi.n	8015390 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801536a:	687a      	ldr	r2, [r7, #4]
 801536c:	683b      	ldr	r3, [r7, #0]
 801536e:	1ad2      	subs	r2, r2, r3
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	699b      	ldr	r3, [r3, #24]
 8015374:	429a      	cmp	r2, r3
 8015376:	d302      	bcc.n	801537e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015378:	2301      	movs	r3, #1
 801537a:	617b      	str	r3, [r7, #20]
 801537c:	e01b      	b.n	80153b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801537e:	4b10      	ldr	r3, [pc, #64]	; (80153c0 <prvInsertTimerInActiveList+0x7c>)
 8015380:	681a      	ldr	r2, [r3, #0]
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	3304      	adds	r3, #4
 8015386:	4619      	mov	r1, r3
 8015388:	4610      	mov	r0, r2
 801538a:	f7fd fc46 	bl	8012c1a <vListInsert>
 801538e:	e012      	b.n	80153b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015390:	687a      	ldr	r2, [r7, #4]
 8015392:	683b      	ldr	r3, [r7, #0]
 8015394:	429a      	cmp	r2, r3
 8015396:	d206      	bcs.n	80153a6 <prvInsertTimerInActiveList+0x62>
 8015398:	68ba      	ldr	r2, [r7, #8]
 801539a:	683b      	ldr	r3, [r7, #0]
 801539c:	429a      	cmp	r2, r3
 801539e:	d302      	bcc.n	80153a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80153a0:	2301      	movs	r3, #1
 80153a2:	617b      	str	r3, [r7, #20]
 80153a4:	e007      	b.n	80153b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80153a6:	4b07      	ldr	r3, [pc, #28]	; (80153c4 <prvInsertTimerInActiveList+0x80>)
 80153a8:	681a      	ldr	r2, [r3, #0]
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	3304      	adds	r3, #4
 80153ae:	4619      	mov	r1, r3
 80153b0:	4610      	mov	r0, r2
 80153b2:	f7fd fc32 	bl	8012c1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80153b6:	697b      	ldr	r3, [r7, #20]
}
 80153b8:	4618      	mov	r0, r3
 80153ba:	3718      	adds	r7, #24
 80153bc:	46bd      	mov	sp, r7
 80153be:	bd80      	pop	{r7, pc}
 80153c0:	200026a4 	.word	0x200026a4
 80153c4:	200026a0 	.word	0x200026a0

080153c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80153c8:	b580      	push	{r7, lr}
 80153ca:	b08e      	sub	sp, #56	; 0x38
 80153cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80153ce:	e0ca      	b.n	8015566 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	da18      	bge.n	8015408 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80153d6:	1d3b      	adds	r3, r7, #4
 80153d8:	3304      	adds	r3, #4
 80153da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80153dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d10a      	bne.n	80153f8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80153e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153e6:	f383 8811 	msr	BASEPRI, r3
 80153ea:	f3bf 8f6f 	isb	sy
 80153ee:	f3bf 8f4f 	dsb	sy
 80153f2:	61fb      	str	r3, [r7, #28]
}
 80153f4:	bf00      	nop
 80153f6:	e7fe      	b.n	80153f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80153f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153fa:	681b      	ldr	r3, [r3, #0]
 80153fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80153fe:	6850      	ldr	r0, [r2, #4]
 8015400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015402:	6892      	ldr	r2, [r2, #8]
 8015404:	4611      	mov	r1, r2
 8015406:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	2b00      	cmp	r3, #0
 801540c:	f2c0 80aa 	blt.w	8015564 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015416:	695b      	ldr	r3, [r3, #20]
 8015418:	2b00      	cmp	r3, #0
 801541a:	d004      	beq.n	8015426 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801541c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801541e:	3304      	adds	r3, #4
 8015420:	4618      	mov	r0, r3
 8015422:	f7fd fc33 	bl	8012c8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015426:	463b      	mov	r3, r7
 8015428:	4618      	mov	r0, r3
 801542a:	f7ff ff6b 	bl	8015304 <prvSampleTimeNow>
 801542e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	2b09      	cmp	r3, #9
 8015434:	f200 8097 	bhi.w	8015566 <prvProcessReceivedCommands+0x19e>
 8015438:	a201      	add	r2, pc, #4	; (adr r2, 8015440 <prvProcessReceivedCommands+0x78>)
 801543a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801543e:	bf00      	nop
 8015440:	08015469 	.word	0x08015469
 8015444:	08015469 	.word	0x08015469
 8015448:	08015469 	.word	0x08015469
 801544c:	080154dd 	.word	0x080154dd
 8015450:	080154f1 	.word	0x080154f1
 8015454:	0801553b 	.word	0x0801553b
 8015458:	08015469 	.word	0x08015469
 801545c:	08015469 	.word	0x08015469
 8015460:	080154dd 	.word	0x080154dd
 8015464:	080154f1 	.word	0x080154f1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801546a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801546e:	f043 0301 	orr.w	r3, r3, #1
 8015472:	b2da      	uxtb	r2, r3
 8015474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015476:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801547a:	68ba      	ldr	r2, [r7, #8]
 801547c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801547e:	699b      	ldr	r3, [r3, #24]
 8015480:	18d1      	adds	r1, r2, r3
 8015482:	68bb      	ldr	r3, [r7, #8]
 8015484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015486:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015488:	f7ff ff5c 	bl	8015344 <prvInsertTimerInActiveList>
 801548c:	4603      	mov	r3, r0
 801548e:	2b00      	cmp	r3, #0
 8015490:	d069      	beq.n	8015566 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015494:	6a1b      	ldr	r3, [r3, #32]
 8015496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015498:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801549a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801549c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80154a0:	f003 0304 	and.w	r3, r3, #4
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d05e      	beq.n	8015566 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80154a8:	68ba      	ldr	r2, [r7, #8]
 80154aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154ac:	699b      	ldr	r3, [r3, #24]
 80154ae:	441a      	add	r2, r3
 80154b0:	2300      	movs	r3, #0
 80154b2:	9300      	str	r3, [sp, #0]
 80154b4:	2300      	movs	r3, #0
 80154b6:	2100      	movs	r1, #0
 80154b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80154ba:	f7ff fe05 	bl	80150c8 <xTimerGenericCommand>
 80154be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80154c0:	6a3b      	ldr	r3, [r7, #32]
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d14f      	bne.n	8015566 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80154c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154ca:	f383 8811 	msr	BASEPRI, r3
 80154ce:	f3bf 8f6f 	isb	sy
 80154d2:	f3bf 8f4f 	dsb	sy
 80154d6:	61bb      	str	r3, [r7, #24]
}
 80154d8:	bf00      	nop
 80154da:	e7fe      	b.n	80154da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80154dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80154e2:	f023 0301 	bic.w	r3, r3, #1
 80154e6:	b2da      	uxtb	r2, r3
 80154e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80154ee:	e03a      	b.n	8015566 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80154f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80154f6:	f043 0301 	orr.w	r3, r3, #1
 80154fa:	b2da      	uxtb	r2, r3
 80154fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015502:	68ba      	ldr	r2, [r7, #8]
 8015504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015506:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801550a:	699b      	ldr	r3, [r3, #24]
 801550c:	2b00      	cmp	r3, #0
 801550e:	d10a      	bne.n	8015526 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8015510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015514:	f383 8811 	msr	BASEPRI, r3
 8015518:	f3bf 8f6f 	isb	sy
 801551c:	f3bf 8f4f 	dsb	sy
 8015520:	617b      	str	r3, [r7, #20]
}
 8015522:	bf00      	nop
 8015524:	e7fe      	b.n	8015524 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015528:	699a      	ldr	r2, [r3, #24]
 801552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801552c:	18d1      	adds	r1, r2, r3
 801552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015534:	f7ff ff06 	bl	8015344 <prvInsertTimerInActiveList>
					break;
 8015538:	e015      	b.n	8015566 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801553a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801553c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015540:	f003 0302 	and.w	r3, r3, #2
 8015544:	2b00      	cmp	r3, #0
 8015546:	d103      	bne.n	8015550 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8015548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801554a:	f000 fbe1 	bl	8015d10 <vPortFree>
 801554e:	e00a      	b.n	8015566 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015552:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015556:	f023 0301 	bic.w	r3, r3, #1
 801555a:	b2da      	uxtb	r2, r3
 801555c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801555e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015562:	e000      	b.n	8015566 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015564:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015566:	4b08      	ldr	r3, [pc, #32]	; (8015588 <prvProcessReceivedCommands+0x1c0>)
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	1d39      	adds	r1, r7, #4
 801556c:	2200      	movs	r2, #0
 801556e:	4618      	mov	r0, r3
 8015570:	f7fd ff84 	bl	801347c <xQueueReceive>
 8015574:	4603      	mov	r3, r0
 8015576:	2b00      	cmp	r3, #0
 8015578:	f47f af2a 	bne.w	80153d0 <prvProcessReceivedCommands+0x8>
	}
}
 801557c:	bf00      	nop
 801557e:	bf00      	nop
 8015580:	3730      	adds	r7, #48	; 0x30
 8015582:	46bd      	mov	sp, r7
 8015584:	bd80      	pop	{r7, pc}
 8015586:	bf00      	nop
 8015588:	200026a8 	.word	0x200026a8

0801558c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801558c:	b580      	push	{r7, lr}
 801558e:	b088      	sub	sp, #32
 8015590:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015592:	e048      	b.n	8015626 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015594:	4b2d      	ldr	r3, [pc, #180]	; (801564c <prvSwitchTimerLists+0xc0>)
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	68db      	ldr	r3, [r3, #12]
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801559e:	4b2b      	ldr	r3, [pc, #172]	; (801564c <prvSwitchTimerLists+0xc0>)
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	68db      	ldr	r3, [r3, #12]
 80155a4:	68db      	ldr	r3, [r3, #12]
 80155a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	3304      	adds	r3, #4
 80155ac:	4618      	mov	r0, r3
 80155ae:	f7fd fb6d 	bl	8012c8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	6a1b      	ldr	r3, [r3, #32]
 80155b6:	68f8      	ldr	r0, [r7, #12]
 80155b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80155c0:	f003 0304 	and.w	r3, r3, #4
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d02e      	beq.n	8015626 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	699b      	ldr	r3, [r3, #24]
 80155cc:	693a      	ldr	r2, [r7, #16]
 80155ce:	4413      	add	r3, r2
 80155d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80155d2:	68ba      	ldr	r2, [r7, #8]
 80155d4:	693b      	ldr	r3, [r7, #16]
 80155d6:	429a      	cmp	r2, r3
 80155d8:	d90e      	bls.n	80155f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	68ba      	ldr	r2, [r7, #8]
 80155de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	68fa      	ldr	r2, [r7, #12]
 80155e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80155e6:	4b19      	ldr	r3, [pc, #100]	; (801564c <prvSwitchTimerLists+0xc0>)
 80155e8:	681a      	ldr	r2, [r3, #0]
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	3304      	adds	r3, #4
 80155ee:	4619      	mov	r1, r3
 80155f0:	4610      	mov	r0, r2
 80155f2:	f7fd fb12 	bl	8012c1a <vListInsert>
 80155f6:	e016      	b.n	8015626 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80155f8:	2300      	movs	r3, #0
 80155fa:	9300      	str	r3, [sp, #0]
 80155fc:	2300      	movs	r3, #0
 80155fe:	693a      	ldr	r2, [r7, #16]
 8015600:	2100      	movs	r1, #0
 8015602:	68f8      	ldr	r0, [r7, #12]
 8015604:	f7ff fd60 	bl	80150c8 <xTimerGenericCommand>
 8015608:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	2b00      	cmp	r3, #0
 801560e:	d10a      	bne.n	8015626 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8015610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015614:	f383 8811 	msr	BASEPRI, r3
 8015618:	f3bf 8f6f 	isb	sy
 801561c:	f3bf 8f4f 	dsb	sy
 8015620:	603b      	str	r3, [r7, #0]
}
 8015622:	bf00      	nop
 8015624:	e7fe      	b.n	8015624 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015626:	4b09      	ldr	r3, [pc, #36]	; (801564c <prvSwitchTimerLists+0xc0>)
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	2b00      	cmp	r3, #0
 801562e:	d1b1      	bne.n	8015594 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015630:	4b06      	ldr	r3, [pc, #24]	; (801564c <prvSwitchTimerLists+0xc0>)
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015636:	4b06      	ldr	r3, [pc, #24]	; (8015650 <prvSwitchTimerLists+0xc4>)
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	4a04      	ldr	r2, [pc, #16]	; (801564c <prvSwitchTimerLists+0xc0>)
 801563c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801563e:	4a04      	ldr	r2, [pc, #16]	; (8015650 <prvSwitchTimerLists+0xc4>)
 8015640:	697b      	ldr	r3, [r7, #20]
 8015642:	6013      	str	r3, [r2, #0]
}
 8015644:	bf00      	nop
 8015646:	3718      	adds	r7, #24
 8015648:	46bd      	mov	sp, r7
 801564a:	bd80      	pop	{r7, pc}
 801564c:	200026a0 	.word	0x200026a0
 8015650:	200026a4 	.word	0x200026a4

08015654 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015654:	b580      	push	{r7, lr}
 8015656:	b082      	sub	sp, #8
 8015658:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801565a:	f000 f96b 	bl	8015934 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801565e:	4b15      	ldr	r3, [pc, #84]	; (80156b4 <prvCheckForValidListAndQueue+0x60>)
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	2b00      	cmp	r3, #0
 8015664:	d120      	bne.n	80156a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015666:	4814      	ldr	r0, [pc, #80]	; (80156b8 <prvCheckForValidListAndQueue+0x64>)
 8015668:	f7fd fa86 	bl	8012b78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801566c:	4813      	ldr	r0, [pc, #76]	; (80156bc <prvCheckForValidListAndQueue+0x68>)
 801566e:	f7fd fa83 	bl	8012b78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015672:	4b13      	ldr	r3, [pc, #76]	; (80156c0 <prvCheckForValidListAndQueue+0x6c>)
 8015674:	4a10      	ldr	r2, [pc, #64]	; (80156b8 <prvCheckForValidListAndQueue+0x64>)
 8015676:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015678:	4b12      	ldr	r3, [pc, #72]	; (80156c4 <prvCheckForValidListAndQueue+0x70>)
 801567a:	4a10      	ldr	r2, [pc, #64]	; (80156bc <prvCheckForValidListAndQueue+0x68>)
 801567c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801567e:	2300      	movs	r3, #0
 8015680:	9300      	str	r3, [sp, #0]
 8015682:	4b11      	ldr	r3, [pc, #68]	; (80156c8 <prvCheckForValidListAndQueue+0x74>)
 8015684:	4a11      	ldr	r2, [pc, #68]	; (80156cc <prvCheckForValidListAndQueue+0x78>)
 8015686:	2110      	movs	r1, #16
 8015688:	200a      	movs	r0, #10
 801568a:	f7fd fb91 	bl	8012db0 <xQueueGenericCreateStatic>
 801568e:	4603      	mov	r3, r0
 8015690:	4a08      	ldr	r2, [pc, #32]	; (80156b4 <prvCheckForValidListAndQueue+0x60>)
 8015692:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015694:	4b07      	ldr	r3, [pc, #28]	; (80156b4 <prvCheckForValidListAndQueue+0x60>)
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	2b00      	cmp	r3, #0
 801569a:	d005      	beq.n	80156a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801569c:	4b05      	ldr	r3, [pc, #20]	; (80156b4 <prvCheckForValidListAndQueue+0x60>)
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	490b      	ldr	r1, [pc, #44]	; (80156d0 <prvCheckForValidListAndQueue+0x7c>)
 80156a2:	4618      	mov	r0, r3
 80156a4:	f7fe faa2 	bl	8013bec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80156a8:	f000 f974 	bl	8015994 <vPortExitCritical>
}
 80156ac:	bf00      	nop
 80156ae:	46bd      	mov	sp, r7
 80156b0:	bd80      	pop	{r7, pc}
 80156b2:	bf00      	nop
 80156b4:	200026a8 	.word	0x200026a8
 80156b8:	20002678 	.word	0x20002678
 80156bc:	2000268c 	.word	0x2000268c
 80156c0:	200026a0 	.word	0x200026a0
 80156c4:	200026a4 	.word	0x200026a4
 80156c8:	20002754 	.word	0x20002754
 80156cc:	200026b4 	.word	0x200026b4
 80156d0:	0801d4c8 	.word	0x0801d4c8

080156d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80156d4:	b480      	push	{r7}
 80156d6:	b085      	sub	sp, #20
 80156d8:	af00      	add	r7, sp, #0
 80156da:	60f8      	str	r0, [r7, #12]
 80156dc:	60b9      	str	r1, [r7, #8]
 80156de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80156e0:	68fb      	ldr	r3, [r7, #12]
 80156e2:	3b04      	subs	r3, #4
 80156e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80156ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	3b04      	subs	r3, #4
 80156f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80156f4:	68bb      	ldr	r3, [r7, #8]
 80156f6:	f023 0201 	bic.w	r2, r3, #1
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	3b04      	subs	r3, #4
 8015702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015704:	4a0c      	ldr	r2, [pc, #48]	; (8015738 <pxPortInitialiseStack+0x64>)
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	3b14      	subs	r3, #20
 801570e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015710:	687a      	ldr	r2, [r7, #4]
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	3b04      	subs	r3, #4
 801571a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	f06f 0202 	mvn.w	r2, #2
 8015722:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	3b20      	subs	r3, #32
 8015728:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801572a:	68fb      	ldr	r3, [r7, #12]
}
 801572c:	4618      	mov	r0, r3
 801572e:	3714      	adds	r7, #20
 8015730:	46bd      	mov	sp, r7
 8015732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015736:	4770      	bx	lr
 8015738:	0801573d 	.word	0x0801573d

0801573c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801573c:	b480      	push	{r7}
 801573e:	b085      	sub	sp, #20
 8015740:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015742:	2300      	movs	r3, #0
 8015744:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015746:	4b12      	ldr	r3, [pc, #72]	; (8015790 <prvTaskExitError+0x54>)
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801574e:	d00a      	beq.n	8015766 <prvTaskExitError+0x2a>
	__asm volatile
 8015750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015754:	f383 8811 	msr	BASEPRI, r3
 8015758:	f3bf 8f6f 	isb	sy
 801575c:	f3bf 8f4f 	dsb	sy
 8015760:	60fb      	str	r3, [r7, #12]
}
 8015762:	bf00      	nop
 8015764:	e7fe      	b.n	8015764 <prvTaskExitError+0x28>
	__asm volatile
 8015766:	f04f 0350 	mov.w	r3, #80	; 0x50
 801576a:	f383 8811 	msr	BASEPRI, r3
 801576e:	f3bf 8f6f 	isb	sy
 8015772:	f3bf 8f4f 	dsb	sy
 8015776:	60bb      	str	r3, [r7, #8]
}
 8015778:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801577a:	bf00      	nop
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	2b00      	cmp	r3, #0
 8015780:	d0fc      	beq.n	801577c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015782:	bf00      	nop
 8015784:	bf00      	nop
 8015786:	3714      	adds	r7, #20
 8015788:	46bd      	mov	sp, r7
 801578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801578e:	4770      	bx	lr
 8015790:	200000ec 	.word	0x200000ec
	...

080157a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80157a0:	4b07      	ldr	r3, [pc, #28]	; (80157c0 <pxCurrentTCBConst2>)
 80157a2:	6819      	ldr	r1, [r3, #0]
 80157a4:	6808      	ldr	r0, [r1, #0]
 80157a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157aa:	f380 8809 	msr	PSP, r0
 80157ae:	f3bf 8f6f 	isb	sy
 80157b2:	f04f 0000 	mov.w	r0, #0
 80157b6:	f380 8811 	msr	BASEPRI, r0
 80157ba:	4770      	bx	lr
 80157bc:	f3af 8000 	nop.w

080157c0 <pxCurrentTCBConst2>:
 80157c0:	20002178 	.word	0x20002178
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80157c4:	bf00      	nop
 80157c6:	bf00      	nop

080157c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80157c8:	4808      	ldr	r0, [pc, #32]	; (80157ec <prvPortStartFirstTask+0x24>)
 80157ca:	6800      	ldr	r0, [r0, #0]
 80157cc:	6800      	ldr	r0, [r0, #0]
 80157ce:	f380 8808 	msr	MSP, r0
 80157d2:	f04f 0000 	mov.w	r0, #0
 80157d6:	f380 8814 	msr	CONTROL, r0
 80157da:	b662      	cpsie	i
 80157dc:	b661      	cpsie	f
 80157de:	f3bf 8f4f 	dsb	sy
 80157e2:	f3bf 8f6f 	isb	sy
 80157e6:	df00      	svc	0
 80157e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80157ea:	bf00      	nop
 80157ec:	e000ed08 	.word	0xe000ed08

080157f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80157f0:	b580      	push	{r7, lr}
 80157f2:	b086      	sub	sp, #24
 80157f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80157f6:	4b46      	ldr	r3, [pc, #280]	; (8015910 <xPortStartScheduler+0x120>)
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	4a46      	ldr	r2, [pc, #280]	; (8015914 <xPortStartScheduler+0x124>)
 80157fc:	4293      	cmp	r3, r2
 80157fe:	d10a      	bne.n	8015816 <xPortStartScheduler+0x26>
	__asm volatile
 8015800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015804:	f383 8811 	msr	BASEPRI, r3
 8015808:	f3bf 8f6f 	isb	sy
 801580c:	f3bf 8f4f 	dsb	sy
 8015810:	613b      	str	r3, [r7, #16]
}
 8015812:	bf00      	nop
 8015814:	e7fe      	b.n	8015814 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015816:	4b3e      	ldr	r3, [pc, #248]	; (8015910 <xPortStartScheduler+0x120>)
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	4a3f      	ldr	r2, [pc, #252]	; (8015918 <xPortStartScheduler+0x128>)
 801581c:	4293      	cmp	r3, r2
 801581e:	d10a      	bne.n	8015836 <xPortStartScheduler+0x46>
	__asm volatile
 8015820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015824:	f383 8811 	msr	BASEPRI, r3
 8015828:	f3bf 8f6f 	isb	sy
 801582c:	f3bf 8f4f 	dsb	sy
 8015830:	60fb      	str	r3, [r7, #12]
}
 8015832:	bf00      	nop
 8015834:	e7fe      	b.n	8015834 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015836:	4b39      	ldr	r3, [pc, #228]	; (801591c <xPortStartScheduler+0x12c>)
 8015838:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801583a:	697b      	ldr	r3, [r7, #20]
 801583c:	781b      	ldrb	r3, [r3, #0]
 801583e:	b2db      	uxtb	r3, r3
 8015840:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015842:	697b      	ldr	r3, [r7, #20]
 8015844:	22ff      	movs	r2, #255	; 0xff
 8015846:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015848:	697b      	ldr	r3, [r7, #20]
 801584a:	781b      	ldrb	r3, [r3, #0]
 801584c:	b2db      	uxtb	r3, r3
 801584e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015850:	78fb      	ldrb	r3, [r7, #3]
 8015852:	b2db      	uxtb	r3, r3
 8015854:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015858:	b2da      	uxtb	r2, r3
 801585a:	4b31      	ldr	r3, [pc, #196]	; (8015920 <xPortStartScheduler+0x130>)
 801585c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801585e:	4b31      	ldr	r3, [pc, #196]	; (8015924 <xPortStartScheduler+0x134>)
 8015860:	2207      	movs	r2, #7
 8015862:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015864:	e009      	b.n	801587a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8015866:	4b2f      	ldr	r3, [pc, #188]	; (8015924 <xPortStartScheduler+0x134>)
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	3b01      	subs	r3, #1
 801586c:	4a2d      	ldr	r2, [pc, #180]	; (8015924 <xPortStartScheduler+0x134>)
 801586e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015870:	78fb      	ldrb	r3, [r7, #3]
 8015872:	b2db      	uxtb	r3, r3
 8015874:	005b      	lsls	r3, r3, #1
 8015876:	b2db      	uxtb	r3, r3
 8015878:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801587a:	78fb      	ldrb	r3, [r7, #3]
 801587c:	b2db      	uxtb	r3, r3
 801587e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015882:	2b80      	cmp	r3, #128	; 0x80
 8015884:	d0ef      	beq.n	8015866 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015886:	4b27      	ldr	r3, [pc, #156]	; (8015924 <xPortStartScheduler+0x134>)
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	f1c3 0307 	rsb	r3, r3, #7
 801588e:	2b04      	cmp	r3, #4
 8015890:	d00a      	beq.n	80158a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8015892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015896:	f383 8811 	msr	BASEPRI, r3
 801589a:	f3bf 8f6f 	isb	sy
 801589e:	f3bf 8f4f 	dsb	sy
 80158a2:	60bb      	str	r3, [r7, #8]
}
 80158a4:	bf00      	nop
 80158a6:	e7fe      	b.n	80158a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80158a8:	4b1e      	ldr	r3, [pc, #120]	; (8015924 <xPortStartScheduler+0x134>)
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	021b      	lsls	r3, r3, #8
 80158ae:	4a1d      	ldr	r2, [pc, #116]	; (8015924 <xPortStartScheduler+0x134>)
 80158b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80158b2:	4b1c      	ldr	r3, [pc, #112]	; (8015924 <xPortStartScheduler+0x134>)
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80158ba:	4a1a      	ldr	r2, [pc, #104]	; (8015924 <xPortStartScheduler+0x134>)
 80158bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	b2da      	uxtb	r2, r3
 80158c2:	697b      	ldr	r3, [r7, #20]
 80158c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80158c6:	4b18      	ldr	r3, [pc, #96]	; (8015928 <xPortStartScheduler+0x138>)
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	4a17      	ldr	r2, [pc, #92]	; (8015928 <xPortStartScheduler+0x138>)
 80158cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80158d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80158d2:	4b15      	ldr	r3, [pc, #84]	; (8015928 <xPortStartScheduler+0x138>)
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	4a14      	ldr	r2, [pc, #80]	; (8015928 <xPortStartScheduler+0x138>)
 80158d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80158dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80158de:	f000 f8dd 	bl	8015a9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80158e2:	4b12      	ldr	r3, [pc, #72]	; (801592c <xPortStartScheduler+0x13c>)
 80158e4:	2200      	movs	r2, #0
 80158e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80158e8:	f000 f8fc 	bl	8015ae4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80158ec:	4b10      	ldr	r3, [pc, #64]	; (8015930 <xPortStartScheduler+0x140>)
 80158ee:	681b      	ldr	r3, [r3, #0]
 80158f0:	4a0f      	ldr	r2, [pc, #60]	; (8015930 <xPortStartScheduler+0x140>)
 80158f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80158f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80158f8:	f7ff ff66 	bl	80157c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80158fc:	f7fe ff38 	bl	8014770 <vTaskSwitchContext>
	prvTaskExitError();
 8015900:	f7ff ff1c 	bl	801573c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015904:	2300      	movs	r3, #0
}
 8015906:	4618      	mov	r0, r3
 8015908:	3718      	adds	r7, #24
 801590a:	46bd      	mov	sp, r7
 801590c:	bd80      	pop	{r7, pc}
 801590e:	bf00      	nop
 8015910:	e000ed00 	.word	0xe000ed00
 8015914:	410fc271 	.word	0x410fc271
 8015918:	410fc270 	.word	0x410fc270
 801591c:	e000e400 	.word	0xe000e400
 8015920:	200027a4 	.word	0x200027a4
 8015924:	200027a8 	.word	0x200027a8
 8015928:	e000ed20 	.word	0xe000ed20
 801592c:	200000ec 	.word	0x200000ec
 8015930:	e000ef34 	.word	0xe000ef34

08015934 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015934:	b480      	push	{r7}
 8015936:	b083      	sub	sp, #12
 8015938:	af00      	add	r7, sp, #0
	__asm volatile
 801593a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801593e:	f383 8811 	msr	BASEPRI, r3
 8015942:	f3bf 8f6f 	isb	sy
 8015946:	f3bf 8f4f 	dsb	sy
 801594a:	607b      	str	r3, [r7, #4]
}
 801594c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801594e:	4b0f      	ldr	r3, [pc, #60]	; (801598c <vPortEnterCritical+0x58>)
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	3301      	adds	r3, #1
 8015954:	4a0d      	ldr	r2, [pc, #52]	; (801598c <vPortEnterCritical+0x58>)
 8015956:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015958:	4b0c      	ldr	r3, [pc, #48]	; (801598c <vPortEnterCritical+0x58>)
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	2b01      	cmp	r3, #1
 801595e:	d10f      	bne.n	8015980 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015960:	4b0b      	ldr	r3, [pc, #44]	; (8015990 <vPortEnterCritical+0x5c>)
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	b2db      	uxtb	r3, r3
 8015966:	2b00      	cmp	r3, #0
 8015968:	d00a      	beq.n	8015980 <vPortEnterCritical+0x4c>
	__asm volatile
 801596a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801596e:	f383 8811 	msr	BASEPRI, r3
 8015972:	f3bf 8f6f 	isb	sy
 8015976:	f3bf 8f4f 	dsb	sy
 801597a:	603b      	str	r3, [r7, #0]
}
 801597c:	bf00      	nop
 801597e:	e7fe      	b.n	801597e <vPortEnterCritical+0x4a>
	}
}
 8015980:	bf00      	nop
 8015982:	370c      	adds	r7, #12
 8015984:	46bd      	mov	sp, r7
 8015986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801598a:	4770      	bx	lr
 801598c:	200000ec 	.word	0x200000ec
 8015990:	e000ed04 	.word	0xe000ed04

08015994 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015994:	b480      	push	{r7}
 8015996:	b083      	sub	sp, #12
 8015998:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801599a:	4b12      	ldr	r3, [pc, #72]	; (80159e4 <vPortExitCritical+0x50>)
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d10a      	bne.n	80159b8 <vPortExitCritical+0x24>
	__asm volatile
 80159a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159a6:	f383 8811 	msr	BASEPRI, r3
 80159aa:	f3bf 8f6f 	isb	sy
 80159ae:	f3bf 8f4f 	dsb	sy
 80159b2:	607b      	str	r3, [r7, #4]
}
 80159b4:	bf00      	nop
 80159b6:	e7fe      	b.n	80159b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80159b8:	4b0a      	ldr	r3, [pc, #40]	; (80159e4 <vPortExitCritical+0x50>)
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	3b01      	subs	r3, #1
 80159be:	4a09      	ldr	r2, [pc, #36]	; (80159e4 <vPortExitCritical+0x50>)
 80159c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80159c2:	4b08      	ldr	r3, [pc, #32]	; (80159e4 <vPortExitCritical+0x50>)
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d105      	bne.n	80159d6 <vPortExitCritical+0x42>
 80159ca:	2300      	movs	r3, #0
 80159cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80159ce:	683b      	ldr	r3, [r7, #0]
 80159d0:	f383 8811 	msr	BASEPRI, r3
}
 80159d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80159d6:	bf00      	nop
 80159d8:	370c      	adds	r7, #12
 80159da:	46bd      	mov	sp, r7
 80159dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e0:	4770      	bx	lr
 80159e2:	bf00      	nop
 80159e4:	200000ec 	.word	0x200000ec
	...

080159f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80159f0:	f3ef 8009 	mrs	r0, PSP
 80159f4:	f3bf 8f6f 	isb	sy
 80159f8:	4b15      	ldr	r3, [pc, #84]	; (8015a50 <pxCurrentTCBConst>)
 80159fa:	681a      	ldr	r2, [r3, #0]
 80159fc:	f01e 0f10 	tst.w	lr, #16
 8015a00:	bf08      	it	eq
 8015a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a0a:	6010      	str	r0, [r2, #0]
 8015a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015a10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015a14:	f380 8811 	msr	BASEPRI, r0
 8015a18:	f3bf 8f4f 	dsb	sy
 8015a1c:	f3bf 8f6f 	isb	sy
 8015a20:	f7fe fea6 	bl	8014770 <vTaskSwitchContext>
 8015a24:	f04f 0000 	mov.w	r0, #0
 8015a28:	f380 8811 	msr	BASEPRI, r0
 8015a2c:	bc09      	pop	{r0, r3}
 8015a2e:	6819      	ldr	r1, [r3, #0]
 8015a30:	6808      	ldr	r0, [r1, #0]
 8015a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a36:	f01e 0f10 	tst.w	lr, #16
 8015a3a:	bf08      	it	eq
 8015a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015a40:	f380 8809 	msr	PSP, r0
 8015a44:	f3bf 8f6f 	isb	sy
 8015a48:	4770      	bx	lr
 8015a4a:	bf00      	nop
 8015a4c:	f3af 8000 	nop.w

08015a50 <pxCurrentTCBConst>:
 8015a50:	20002178 	.word	0x20002178
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015a54:	bf00      	nop
 8015a56:	bf00      	nop

08015a58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	b082      	sub	sp, #8
 8015a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8015a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a62:	f383 8811 	msr	BASEPRI, r3
 8015a66:	f3bf 8f6f 	isb	sy
 8015a6a:	f3bf 8f4f 	dsb	sy
 8015a6e:	607b      	str	r3, [r7, #4]
}
 8015a70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015a72:	f7fe fdc3 	bl	80145fc <xTaskIncrementTick>
 8015a76:	4603      	mov	r3, r0
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d003      	beq.n	8015a84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015a7c:	4b06      	ldr	r3, [pc, #24]	; (8015a98 <xPortSysTickHandler+0x40>)
 8015a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015a82:	601a      	str	r2, [r3, #0]
 8015a84:	2300      	movs	r3, #0
 8015a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015a88:	683b      	ldr	r3, [r7, #0]
 8015a8a:	f383 8811 	msr	BASEPRI, r3
}
 8015a8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015a90:	bf00      	nop
 8015a92:	3708      	adds	r7, #8
 8015a94:	46bd      	mov	sp, r7
 8015a96:	bd80      	pop	{r7, pc}
 8015a98:	e000ed04 	.word	0xe000ed04

08015a9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015a9c:	b480      	push	{r7}
 8015a9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015aa0:	4b0b      	ldr	r3, [pc, #44]	; (8015ad0 <vPortSetupTimerInterrupt+0x34>)
 8015aa2:	2200      	movs	r2, #0
 8015aa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015aa6:	4b0b      	ldr	r3, [pc, #44]	; (8015ad4 <vPortSetupTimerInterrupt+0x38>)
 8015aa8:	2200      	movs	r2, #0
 8015aaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015aac:	4b0a      	ldr	r3, [pc, #40]	; (8015ad8 <vPortSetupTimerInterrupt+0x3c>)
 8015aae:	681b      	ldr	r3, [r3, #0]
 8015ab0:	4a0a      	ldr	r2, [pc, #40]	; (8015adc <vPortSetupTimerInterrupt+0x40>)
 8015ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8015ab6:	099b      	lsrs	r3, r3, #6
 8015ab8:	4a09      	ldr	r2, [pc, #36]	; (8015ae0 <vPortSetupTimerInterrupt+0x44>)
 8015aba:	3b01      	subs	r3, #1
 8015abc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015abe:	4b04      	ldr	r3, [pc, #16]	; (8015ad0 <vPortSetupTimerInterrupt+0x34>)
 8015ac0:	2207      	movs	r2, #7
 8015ac2:	601a      	str	r2, [r3, #0]
}
 8015ac4:	bf00      	nop
 8015ac6:	46bd      	mov	sp, r7
 8015ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015acc:	4770      	bx	lr
 8015ace:	bf00      	nop
 8015ad0:	e000e010 	.word	0xe000e010
 8015ad4:	e000e018 	.word	0xe000e018
 8015ad8:	20000088 	.word	0x20000088
 8015adc:	10624dd3 	.word	0x10624dd3
 8015ae0:	e000e014 	.word	0xe000e014

08015ae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015ae4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015af4 <vPortEnableVFP+0x10>
 8015ae8:	6801      	ldr	r1, [r0, #0]
 8015aea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015aee:	6001      	str	r1, [r0, #0]
 8015af0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015af2:	bf00      	nop
 8015af4:	e000ed88 	.word	0xe000ed88

08015af8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015af8:	b480      	push	{r7}
 8015afa:	b085      	sub	sp, #20
 8015afc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015afe:	f3ef 8305 	mrs	r3, IPSR
 8015b02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	2b0f      	cmp	r3, #15
 8015b08:	d914      	bls.n	8015b34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015b0a:	4a17      	ldr	r2, [pc, #92]	; (8015b68 <vPortValidateInterruptPriority+0x70>)
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	4413      	add	r3, r2
 8015b10:	781b      	ldrb	r3, [r3, #0]
 8015b12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015b14:	4b15      	ldr	r3, [pc, #84]	; (8015b6c <vPortValidateInterruptPriority+0x74>)
 8015b16:	781b      	ldrb	r3, [r3, #0]
 8015b18:	7afa      	ldrb	r2, [r7, #11]
 8015b1a:	429a      	cmp	r2, r3
 8015b1c:	d20a      	bcs.n	8015b34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8015b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b22:	f383 8811 	msr	BASEPRI, r3
 8015b26:	f3bf 8f6f 	isb	sy
 8015b2a:	f3bf 8f4f 	dsb	sy
 8015b2e:	607b      	str	r3, [r7, #4]
}
 8015b30:	bf00      	nop
 8015b32:	e7fe      	b.n	8015b32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015b34:	4b0e      	ldr	r3, [pc, #56]	; (8015b70 <vPortValidateInterruptPriority+0x78>)
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015b3c:	4b0d      	ldr	r3, [pc, #52]	; (8015b74 <vPortValidateInterruptPriority+0x7c>)
 8015b3e:	681b      	ldr	r3, [r3, #0]
 8015b40:	429a      	cmp	r2, r3
 8015b42:	d90a      	bls.n	8015b5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b48:	f383 8811 	msr	BASEPRI, r3
 8015b4c:	f3bf 8f6f 	isb	sy
 8015b50:	f3bf 8f4f 	dsb	sy
 8015b54:	603b      	str	r3, [r7, #0]
}
 8015b56:	bf00      	nop
 8015b58:	e7fe      	b.n	8015b58 <vPortValidateInterruptPriority+0x60>
	}
 8015b5a:	bf00      	nop
 8015b5c:	3714      	adds	r7, #20
 8015b5e:	46bd      	mov	sp, r7
 8015b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b64:	4770      	bx	lr
 8015b66:	bf00      	nop
 8015b68:	e000e3f0 	.word	0xe000e3f0
 8015b6c:	200027a4 	.word	0x200027a4
 8015b70:	e000ed0c 	.word	0xe000ed0c
 8015b74:	200027a8 	.word	0x200027a8

08015b78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015b78:	b580      	push	{r7, lr}
 8015b7a:	b08a      	sub	sp, #40	; 0x28
 8015b7c:	af00      	add	r7, sp, #0
 8015b7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015b80:	2300      	movs	r3, #0
 8015b82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015b84:	f7fe fc7e 	bl	8014484 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015b88:	4b5b      	ldr	r3, [pc, #364]	; (8015cf8 <pvPortMalloc+0x180>)
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d101      	bne.n	8015b94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015b90:	f000 f920 	bl	8015dd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015b94:	4b59      	ldr	r3, [pc, #356]	; (8015cfc <pvPortMalloc+0x184>)
 8015b96:	681a      	ldr	r2, [r3, #0]
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	4013      	ands	r3, r2
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	f040 8093 	bne.w	8015cc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d01d      	beq.n	8015be4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015ba8:	2208      	movs	r2, #8
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	4413      	add	r3, r2
 8015bae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	f003 0307 	and.w	r3, r3, #7
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d014      	beq.n	8015be4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	f023 0307 	bic.w	r3, r3, #7
 8015bc0:	3308      	adds	r3, #8
 8015bc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	f003 0307 	and.w	r3, r3, #7
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d00a      	beq.n	8015be4 <pvPortMalloc+0x6c>
	__asm volatile
 8015bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bd2:	f383 8811 	msr	BASEPRI, r3
 8015bd6:	f3bf 8f6f 	isb	sy
 8015bda:	f3bf 8f4f 	dsb	sy
 8015bde:	617b      	str	r3, [r7, #20]
}
 8015be0:	bf00      	nop
 8015be2:	e7fe      	b.n	8015be2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d06e      	beq.n	8015cc8 <pvPortMalloc+0x150>
 8015bea:	4b45      	ldr	r3, [pc, #276]	; (8015d00 <pvPortMalloc+0x188>)
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	687a      	ldr	r2, [r7, #4]
 8015bf0:	429a      	cmp	r2, r3
 8015bf2:	d869      	bhi.n	8015cc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015bf4:	4b43      	ldr	r3, [pc, #268]	; (8015d04 <pvPortMalloc+0x18c>)
 8015bf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015bf8:	4b42      	ldr	r3, [pc, #264]	; (8015d04 <pvPortMalloc+0x18c>)
 8015bfa:	681b      	ldr	r3, [r3, #0]
 8015bfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015bfe:	e004      	b.n	8015c0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c0c:	685b      	ldr	r3, [r3, #4]
 8015c0e:	687a      	ldr	r2, [r7, #4]
 8015c10:	429a      	cmp	r2, r3
 8015c12:	d903      	bls.n	8015c1c <pvPortMalloc+0xa4>
 8015c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d1f1      	bne.n	8015c00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015c1c:	4b36      	ldr	r3, [pc, #216]	; (8015cf8 <pvPortMalloc+0x180>)
 8015c1e:	681b      	ldr	r3, [r3, #0]
 8015c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c22:	429a      	cmp	r2, r3
 8015c24:	d050      	beq.n	8015cc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015c26:	6a3b      	ldr	r3, [r7, #32]
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	2208      	movs	r2, #8
 8015c2c:	4413      	add	r3, r2
 8015c2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c32:	681a      	ldr	r2, [r3, #0]
 8015c34:	6a3b      	ldr	r3, [r7, #32]
 8015c36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c3a:	685a      	ldr	r2, [r3, #4]
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	1ad2      	subs	r2, r2, r3
 8015c40:	2308      	movs	r3, #8
 8015c42:	005b      	lsls	r3, r3, #1
 8015c44:	429a      	cmp	r2, r3
 8015c46:	d91f      	bls.n	8015c88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	4413      	add	r3, r2
 8015c4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015c50:	69bb      	ldr	r3, [r7, #24]
 8015c52:	f003 0307 	and.w	r3, r3, #7
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d00a      	beq.n	8015c70 <pvPortMalloc+0xf8>
	__asm volatile
 8015c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c5e:	f383 8811 	msr	BASEPRI, r3
 8015c62:	f3bf 8f6f 	isb	sy
 8015c66:	f3bf 8f4f 	dsb	sy
 8015c6a:	613b      	str	r3, [r7, #16]
}
 8015c6c:	bf00      	nop
 8015c6e:	e7fe      	b.n	8015c6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c72:	685a      	ldr	r2, [r3, #4]
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	1ad2      	subs	r2, r2, r3
 8015c78:	69bb      	ldr	r3, [r7, #24]
 8015c7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c7e:	687a      	ldr	r2, [r7, #4]
 8015c80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015c82:	69b8      	ldr	r0, [r7, #24]
 8015c84:	f000 f908 	bl	8015e98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015c88:	4b1d      	ldr	r3, [pc, #116]	; (8015d00 <pvPortMalloc+0x188>)
 8015c8a:	681a      	ldr	r2, [r3, #0]
 8015c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c8e:	685b      	ldr	r3, [r3, #4]
 8015c90:	1ad3      	subs	r3, r2, r3
 8015c92:	4a1b      	ldr	r2, [pc, #108]	; (8015d00 <pvPortMalloc+0x188>)
 8015c94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015c96:	4b1a      	ldr	r3, [pc, #104]	; (8015d00 <pvPortMalloc+0x188>)
 8015c98:	681a      	ldr	r2, [r3, #0]
 8015c9a:	4b1b      	ldr	r3, [pc, #108]	; (8015d08 <pvPortMalloc+0x190>)
 8015c9c:	681b      	ldr	r3, [r3, #0]
 8015c9e:	429a      	cmp	r2, r3
 8015ca0:	d203      	bcs.n	8015caa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015ca2:	4b17      	ldr	r3, [pc, #92]	; (8015d00 <pvPortMalloc+0x188>)
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	4a18      	ldr	r2, [pc, #96]	; (8015d08 <pvPortMalloc+0x190>)
 8015ca8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cac:	685a      	ldr	r2, [r3, #4]
 8015cae:	4b13      	ldr	r3, [pc, #76]	; (8015cfc <pvPortMalloc+0x184>)
 8015cb0:	681b      	ldr	r3, [r3, #0]
 8015cb2:	431a      	orrs	r2, r3
 8015cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cba:	2200      	movs	r2, #0
 8015cbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015cbe:	4b13      	ldr	r3, [pc, #76]	; (8015d0c <pvPortMalloc+0x194>)
 8015cc0:	681b      	ldr	r3, [r3, #0]
 8015cc2:	3301      	adds	r3, #1
 8015cc4:	4a11      	ldr	r2, [pc, #68]	; (8015d0c <pvPortMalloc+0x194>)
 8015cc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015cc8:	f7fe fbea 	bl	80144a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015ccc:	69fb      	ldr	r3, [r7, #28]
 8015cce:	f003 0307 	and.w	r3, r3, #7
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d00a      	beq.n	8015cec <pvPortMalloc+0x174>
	__asm volatile
 8015cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cda:	f383 8811 	msr	BASEPRI, r3
 8015cde:	f3bf 8f6f 	isb	sy
 8015ce2:	f3bf 8f4f 	dsb	sy
 8015ce6:	60fb      	str	r3, [r7, #12]
}
 8015ce8:	bf00      	nop
 8015cea:	e7fe      	b.n	8015cea <pvPortMalloc+0x172>
	return pvReturn;
 8015cec:	69fb      	ldr	r3, [r7, #28]
}
 8015cee:	4618      	mov	r0, r3
 8015cf0:	3728      	adds	r7, #40	; 0x28
 8015cf2:	46bd      	mov	sp, r7
 8015cf4:	bd80      	pop	{r7, pc}
 8015cf6:	bf00      	nop
 8015cf8:	20008574 	.word	0x20008574
 8015cfc:	20008588 	.word	0x20008588
 8015d00:	20008578 	.word	0x20008578
 8015d04:	2000856c 	.word	0x2000856c
 8015d08:	2000857c 	.word	0x2000857c
 8015d0c:	20008580 	.word	0x20008580

08015d10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b086      	sub	sp, #24
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d04d      	beq.n	8015dbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015d22:	2308      	movs	r3, #8
 8015d24:	425b      	negs	r3, r3
 8015d26:	697a      	ldr	r2, [r7, #20]
 8015d28:	4413      	add	r3, r2
 8015d2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015d2c:	697b      	ldr	r3, [r7, #20]
 8015d2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015d30:	693b      	ldr	r3, [r7, #16]
 8015d32:	685a      	ldr	r2, [r3, #4]
 8015d34:	4b24      	ldr	r3, [pc, #144]	; (8015dc8 <vPortFree+0xb8>)
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	4013      	ands	r3, r2
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d10a      	bne.n	8015d54 <vPortFree+0x44>
	__asm volatile
 8015d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d42:	f383 8811 	msr	BASEPRI, r3
 8015d46:	f3bf 8f6f 	isb	sy
 8015d4a:	f3bf 8f4f 	dsb	sy
 8015d4e:	60fb      	str	r3, [r7, #12]
}
 8015d50:	bf00      	nop
 8015d52:	e7fe      	b.n	8015d52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015d54:	693b      	ldr	r3, [r7, #16]
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d00a      	beq.n	8015d72 <vPortFree+0x62>
	__asm volatile
 8015d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d60:	f383 8811 	msr	BASEPRI, r3
 8015d64:	f3bf 8f6f 	isb	sy
 8015d68:	f3bf 8f4f 	dsb	sy
 8015d6c:	60bb      	str	r3, [r7, #8]
}
 8015d6e:	bf00      	nop
 8015d70:	e7fe      	b.n	8015d70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015d72:	693b      	ldr	r3, [r7, #16]
 8015d74:	685a      	ldr	r2, [r3, #4]
 8015d76:	4b14      	ldr	r3, [pc, #80]	; (8015dc8 <vPortFree+0xb8>)
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	4013      	ands	r3, r2
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d01e      	beq.n	8015dbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015d80:	693b      	ldr	r3, [r7, #16]
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d11a      	bne.n	8015dbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015d88:	693b      	ldr	r3, [r7, #16]
 8015d8a:	685a      	ldr	r2, [r3, #4]
 8015d8c:	4b0e      	ldr	r3, [pc, #56]	; (8015dc8 <vPortFree+0xb8>)
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	43db      	mvns	r3, r3
 8015d92:	401a      	ands	r2, r3
 8015d94:	693b      	ldr	r3, [r7, #16]
 8015d96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015d98:	f7fe fb74 	bl	8014484 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015d9c:	693b      	ldr	r3, [r7, #16]
 8015d9e:	685a      	ldr	r2, [r3, #4]
 8015da0:	4b0a      	ldr	r3, [pc, #40]	; (8015dcc <vPortFree+0xbc>)
 8015da2:	681b      	ldr	r3, [r3, #0]
 8015da4:	4413      	add	r3, r2
 8015da6:	4a09      	ldr	r2, [pc, #36]	; (8015dcc <vPortFree+0xbc>)
 8015da8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015daa:	6938      	ldr	r0, [r7, #16]
 8015dac:	f000 f874 	bl	8015e98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8015db0:	4b07      	ldr	r3, [pc, #28]	; (8015dd0 <vPortFree+0xc0>)
 8015db2:	681b      	ldr	r3, [r3, #0]
 8015db4:	3301      	adds	r3, #1
 8015db6:	4a06      	ldr	r2, [pc, #24]	; (8015dd0 <vPortFree+0xc0>)
 8015db8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8015dba:	f7fe fb71 	bl	80144a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015dbe:	bf00      	nop
 8015dc0:	3718      	adds	r7, #24
 8015dc2:	46bd      	mov	sp, r7
 8015dc4:	bd80      	pop	{r7, pc}
 8015dc6:	bf00      	nop
 8015dc8:	20008588 	.word	0x20008588
 8015dcc:	20008578 	.word	0x20008578
 8015dd0:	20008584 	.word	0x20008584

08015dd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015dd4:	b480      	push	{r7}
 8015dd6:	b085      	sub	sp, #20
 8015dd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015dda:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 8015dde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015de0:	4b27      	ldr	r3, [pc, #156]	; (8015e80 <prvHeapInit+0xac>)
 8015de2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015de4:	68fb      	ldr	r3, [r7, #12]
 8015de6:	f003 0307 	and.w	r3, r3, #7
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d00c      	beq.n	8015e08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	3307      	adds	r3, #7
 8015df2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	f023 0307 	bic.w	r3, r3, #7
 8015dfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015dfc:	68ba      	ldr	r2, [r7, #8]
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	1ad3      	subs	r3, r2, r3
 8015e02:	4a1f      	ldr	r2, [pc, #124]	; (8015e80 <prvHeapInit+0xac>)
 8015e04:	4413      	add	r3, r2
 8015e06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015e0c:	4a1d      	ldr	r2, [pc, #116]	; (8015e84 <prvHeapInit+0xb0>)
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015e12:	4b1c      	ldr	r3, [pc, #112]	; (8015e84 <prvHeapInit+0xb0>)
 8015e14:	2200      	movs	r2, #0
 8015e16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	68ba      	ldr	r2, [r7, #8]
 8015e1c:	4413      	add	r3, r2
 8015e1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015e20:	2208      	movs	r2, #8
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	1a9b      	subs	r3, r3, r2
 8015e26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	f023 0307 	bic.w	r3, r3, #7
 8015e2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015e30:	68fb      	ldr	r3, [r7, #12]
 8015e32:	4a15      	ldr	r2, [pc, #84]	; (8015e88 <prvHeapInit+0xb4>)
 8015e34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015e36:	4b14      	ldr	r3, [pc, #80]	; (8015e88 <prvHeapInit+0xb4>)
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	2200      	movs	r2, #0
 8015e3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015e3e:	4b12      	ldr	r3, [pc, #72]	; (8015e88 <prvHeapInit+0xb4>)
 8015e40:	681b      	ldr	r3, [r3, #0]
 8015e42:	2200      	movs	r2, #0
 8015e44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015e4a:	683b      	ldr	r3, [r7, #0]
 8015e4c:	68fa      	ldr	r2, [r7, #12]
 8015e4e:	1ad2      	subs	r2, r2, r3
 8015e50:	683b      	ldr	r3, [r7, #0]
 8015e52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015e54:	4b0c      	ldr	r3, [pc, #48]	; (8015e88 <prvHeapInit+0xb4>)
 8015e56:	681a      	ldr	r2, [r3, #0]
 8015e58:	683b      	ldr	r3, [r7, #0]
 8015e5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015e5c:	683b      	ldr	r3, [r7, #0]
 8015e5e:	685b      	ldr	r3, [r3, #4]
 8015e60:	4a0a      	ldr	r2, [pc, #40]	; (8015e8c <prvHeapInit+0xb8>)
 8015e62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015e64:	683b      	ldr	r3, [r7, #0]
 8015e66:	685b      	ldr	r3, [r3, #4]
 8015e68:	4a09      	ldr	r2, [pc, #36]	; (8015e90 <prvHeapInit+0xbc>)
 8015e6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015e6c:	4b09      	ldr	r3, [pc, #36]	; (8015e94 <prvHeapInit+0xc0>)
 8015e6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015e72:	601a      	str	r2, [r3, #0]
}
 8015e74:	bf00      	nop
 8015e76:	3714      	adds	r7, #20
 8015e78:	46bd      	mov	sp, r7
 8015e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e7e:	4770      	bx	lr
 8015e80:	200027ac 	.word	0x200027ac
 8015e84:	2000856c 	.word	0x2000856c
 8015e88:	20008574 	.word	0x20008574
 8015e8c:	2000857c 	.word	0x2000857c
 8015e90:	20008578 	.word	0x20008578
 8015e94:	20008588 	.word	0x20008588

08015e98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015e98:	b480      	push	{r7}
 8015e9a:	b085      	sub	sp, #20
 8015e9c:	af00      	add	r7, sp, #0
 8015e9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015ea0:	4b28      	ldr	r3, [pc, #160]	; (8015f44 <prvInsertBlockIntoFreeList+0xac>)
 8015ea2:	60fb      	str	r3, [r7, #12]
 8015ea4:	e002      	b.n	8015eac <prvInsertBlockIntoFreeList+0x14>
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	60fb      	str	r3, [r7, #12]
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	687a      	ldr	r2, [r7, #4]
 8015eb2:	429a      	cmp	r2, r3
 8015eb4:	d8f7      	bhi.n	8015ea6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	685b      	ldr	r3, [r3, #4]
 8015ebe:	68ba      	ldr	r2, [r7, #8]
 8015ec0:	4413      	add	r3, r2
 8015ec2:	687a      	ldr	r2, [r7, #4]
 8015ec4:	429a      	cmp	r2, r3
 8015ec6:	d108      	bne.n	8015eda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	685a      	ldr	r2, [r3, #4]
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	685b      	ldr	r3, [r3, #4]
 8015ed0:	441a      	add	r2, r3
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	685b      	ldr	r3, [r3, #4]
 8015ee2:	68ba      	ldr	r2, [r7, #8]
 8015ee4:	441a      	add	r2, r3
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	429a      	cmp	r2, r3
 8015eec:	d118      	bne.n	8015f20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	681a      	ldr	r2, [r3, #0]
 8015ef2:	4b15      	ldr	r3, [pc, #84]	; (8015f48 <prvInsertBlockIntoFreeList+0xb0>)
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	429a      	cmp	r2, r3
 8015ef8:	d00d      	beq.n	8015f16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	685a      	ldr	r2, [r3, #4]
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	685b      	ldr	r3, [r3, #4]
 8015f04:	441a      	add	r2, r3
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	681a      	ldr	r2, [r3, #0]
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	601a      	str	r2, [r3, #0]
 8015f14:	e008      	b.n	8015f28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015f16:	4b0c      	ldr	r3, [pc, #48]	; (8015f48 <prvInsertBlockIntoFreeList+0xb0>)
 8015f18:	681a      	ldr	r2, [r3, #0]
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	601a      	str	r2, [r3, #0]
 8015f1e:	e003      	b.n	8015f28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	681a      	ldr	r2, [r3, #0]
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015f28:	68fa      	ldr	r2, [r7, #12]
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	429a      	cmp	r2, r3
 8015f2e:	d002      	beq.n	8015f36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	687a      	ldr	r2, [r7, #4]
 8015f34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015f36:	bf00      	nop
 8015f38:	3714      	adds	r7, #20
 8015f3a:	46bd      	mov	sp, r7
 8015f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f40:	4770      	bx	lr
 8015f42:	bf00      	nop
 8015f44:	2000856c 	.word	0x2000856c
 8015f48:	20008574 	.word	0x20008574

08015f4c <_Znwj>:
 8015f4c:	2801      	cmp	r0, #1
 8015f4e:	bf38      	it	cc
 8015f50:	2001      	movcc	r0, #1
 8015f52:	b510      	push	{r4, lr}
 8015f54:	4604      	mov	r4, r0
 8015f56:	4620      	mov	r0, r4
 8015f58:	f001 f908 	bl	801716c <malloc>
 8015f5c:	b930      	cbnz	r0, 8015f6c <_Znwj+0x20>
 8015f5e:	f000 f81b 	bl	8015f98 <_ZSt15get_new_handlerv>
 8015f62:	b908      	cbnz	r0, 8015f68 <_Znwj+0x1c>
 8015f64:	f000 ffd6 	bl	8016f14 <abort>
 8015f68:	4780      	blx	r0
 8015f6a:	e7f4      	b.n	8015f56 <_Znwj+0xa>
 8015f6c:	bd10      	pop	{r4, pc}

08015f6e <__cxa_pure_virtual>:
 8015f6e:	b508      	push	{r3, lr}
 8015f70:	f000 f80c 	bl	8015f8c <_ZSt9terminatev>

08015f74 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8015f74:	b508      	push	{r3, lr}
 8015f76:	4780      	blx	r0
 8015f78:	f000 ffcc 	bl	8016f14 <abort>

08015f7c <_ZSt13get_terminatev>:
 8015f7c:	4b02      	ldr	r3, [pc, #8]	; (8015f88 <_ZSt13get_terminatev+0xc>)
 8015f7e:	6818      	ldr	r0, [r3, #0]
 8015f80:	f3bf 8f5b 	dmb	ish
 8015f84:	4770      	bx	lr
 8015f86:	bf00      	nop
 8015f88:	200000f0 	.word	0x200000f0

08015f8c <_ZSt9terminatev>:
 8015f8c:	b508      	push	{r3, lr}
 8015f8e:	f7ff fff5 	bl	8015f7c <_ZSt13get_terminatev>
 8015f92:	f7ff ffef 	bl	8015f74 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08015f98 <_ZSt15get_new_handlerv>:
 8015f98:	4b02      	ldr	r3, [pc, #8]	; (8015fa4 <_ZSt15get_new_handlerv+0xc>)
 8015f9a:	6818      	ldr	r0, [r3, #0]
 8015f9c:	f3bf 8f5b 	dmb	ish
 8015fa0:	4770      	bx	lr
 8015fa2:	bf00      	nop
 8015fa4:	2000858c 	.word	0x2000858c

08015fa8 <pow>:
 8015fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015fac:	ec59 8b10 	vmov	r8, r9, d0
 8015fb0:	ec57 6b11 	vmov	r6, r7, d1
 8015fb4:	f000 f8a8 	bl	8016108 <__ieee754_pow>
 8015fb8:	4b4e      	ldr	r3, [pc, #312]	; (80160f4 <pow+0x14c>)
 8015fba:	f993 3000 	ldrsb.w	r3, [r3]
 8015fbe:	3301      	adds	r3, #1
 8015fc0:	ec55 4b10 	vmov	r4, r5, d0
 8015fc4:	d015      	beq.n	8015ff2 <pow+0x4a>
 8015fc6:	4632      	mov	r2, r6
 8015fc8:	463b      	mov	r3, r7
 8015fca:	4630      	mov	r0, r6
 8015fcc:	4639      	mov	r1, r7
 8015fce:	f7ea fdcd 	bl	8000b6c <__aeabi_dcmpun>
 8015fd2:	b970      	cbnz	r0, 8015ff2 <pow+0x4a>
 8015fd4:	4642      	mov	r2, r8
 8015fd6:	464b      	mov	r3, r9
 8015fd8:	4640      	mov	r0, r8
 8015fda:	4649      	mov	r1, r9
 8015fdc:	f7ea fdc6 	bl	8000b6c <__aeabi_dcmpun>
 8015fe0:	2200      	movs	r2, #0
 8015fe2:	2300      	movs	r3, #0
 8015fe4:	b148      	cbz	r0, 8015ffa <pow+0x52>
 8015fe6:	4630      	mov	r0, r6
 8015fe8:	4639      	mov	r1, r7
 8015fea:	f7ea fd8d 	bl	8000b08 <__aeabi_dcmpeq>
 8015fee:	2800      	cmp	r0, #0
 8015ff0:	d17d      	bne.n	80160ee <pow+0x146>
 8015ff2:	ec45 4b10 	vmov	d0, r4, r5
 8015ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ffa:	4640      	mov	r0, r8
 8015ffc:	4649      	mov	r1, r9
 8015ffe:	f7ea fd83 	bl	8000b08 <__aeabi_dcmpeq>
 8016002:	b1e0      	cbz	r0, 801603e <pow+0x96>
 8016004:	2200      	movs	r2, #0
 8016006:	2300      	movs	r3, #0
 8016008:	4630      	mov	r0, r6
 801600a:	4639      	mov	r1, r7
 801600c:	f7ea fd7c 	bl	8000b08 <__aeabi_dcmpeq>
 8016010:	2800      	cmp	r0, #0
 8016012:	d16c      	bne.n	80160ee <pow+0x146>
 8016014:	ec47 6b10 	vmov	d0, r6, r7
 8016018:	f000 fe55 	bl	8016cc6 <finite>
 801601c:	2800      	cmp	r0, #0
 801601e:	d0e8      	beq.n	8015ff2 <pow+0x4a>
 8016020:	2200      	movs	r2, #0
 8016022:	2300      	movs	r3, #0
 8016024:	4630      	mov	r0, r6
 8016026:	4639      	mov	r1, r7
 8016028:	f7ea fd78 	bl	8000b1c <__aeabi_dcmplt>
 801602c:	2800      	cmp	r0, #0
 801602e:	d0e0      	beq.n	8015ff2 <pow+0x4a>
 8016030:	f000 ff78 	bl	8016f24 <__errno>
 8016034:	2321      	movs	r3, #33	; 0x21
 8016036:	6003      	str	r3, [r0, #0]
 8016038:	2400      	movs	r4, #0
 801603a:	4d2f      	ldr	r5, [pc, #188]	; (80160f8 <pow+0x150>)
 801603c:	e7d9      	b.n	8015ff2 <pow+0x4a>
 801603e:	ec45 4b10 	vmov	d0, r4, r5
 8016042:	f000 fe40 	bl	8016cc6 <finite>
 8016046:	bbb8      	cbnz	r0, 80160b8 <pow+0x110>
 8016048:	ec49 8b10 	vmov	d0, r8, r9
 801604c:	f000 fe3b 	bl	8016cc6 <finite>
 8016050:	b390      	cbz	r0, 80160b8 <pow+0x110>
 8016052:	ec47 6b10 	vmov	d0, r6, r7
 8016056:	f000 fe36 	bl	8016cc6 <finite>
 801605a:	b368      	cbz	r0, 80160b8 <pow+0x110>
 801605c:	4622      	mov	r2, r4
 801605e:	462b      	mov	r3, r5
 8016060:	4620      	mov	r0, r4
 8016062:	4629      	mov	r1, r5
 8016064:	f7ea fd82 	bl	8000b6c <__aeabi_dcmpun>
 8016068:	b160      	cbz	r0, 8016084 <pow+0xdc>
 801606a:	f000 ff5b 	bl	8016f24 <__errno>
 801606e:	2321      	movs	r3, #33	; 0x21
 8016070:	6003      	str	r3, [r0, #0]
 8016072:	2200      	movs	r2, #0
 8016074:	2300      	movs	r3, #0
 8016076:	4610      	mov	r0, r2
 8016078:	4619      	mov	r1, r3
 801607a:	f7ea fc07 	bl	800088c <__aeabi_ddiv>
 801607e:	4604      	mov	r4, r0
 8016080:	460d      	mov	r5, r1
 8016082:	e7b6      	b.n	8015ff2 <pow+0x4a>
 8016084:	f000 ff4e 	bl	8016f24 <__errno>
 8016088:	2322      	movs	r3, #34	; 0x22
 801608a:	6003      	str	r3, [r0, #0]
 801608c:	2200      	movs	r2, #0
 801608e:	2300      	movs	r3, #0
 8016090:	4640      	mov	r0, r8
 8016092:	4649      	mov	r1, r9
 8016094:	f7ea fd42 	bl	8000b1c <__aeabi_dcmplt>
 8016098:	2400      	movs	r4, #0
 801609a:	b158      	cbz	r0, 80160b4 <pow+0x10c>
 801609c:	ec47 6b10 	vmov	d0, r6, r7
 80160a0:	f000 fe26 	bl	8016cf0 <rint>
 80160a4:	4632      	mov	r2, r6
 80160a6:	ec51 0b10 	vmov	r0, r1, d0
 80160aa:	463b      	mov	r3, r7
 80160ac:	f7ea fd2c 	bl	8000b08 <__aeabi_dcmpeq>
 80160b0:	2800      	cmp	r0, #0
 80160b2:	d0c2      	beq.n	801603a <pow+0x92>
 80160b4:	4d11      	ldr	r5, [pc, #68]	; (80160fc <pow+0x154>)
 80160b6:	e79c      	b.n	8015ff2 <pow+0x4a>
 80160b8:	2200      	movs	r2, #0
 80160ba:	2300      	movs	r3, #0
 80160bc:	4620      	mov	r0, r4
 80160be:	4629      	mov	r1, r5
 80160c0:	f7ea fd22 	bl	8000b08 <__aeabi_dcmpeq>
 80160c4:	2800      	cmp	r0, #0
 80160c6:	d094      	beq.n	8015ff2 <pow+0x4a>
 80160c8:	ec49 8b10 	vmov	d0, r8, r9
 80160cc:	f000 fdfb 	bl	8016cc6 <finite>
 80160d0:	2800      	cmp	r0, #0
 80160d2:	d08e      	beq.n	8015ff2 <pow+0x4a>
 80160d4:	ec47 6b10 	vmov	d0, r6, r7
 80160d8:	f000 fdf5 	bl	8016cc6 <finite>
 80160dc:	2800      	cmp	r0, #0
 80160de:	d088      	beq.n	8015ff2 <pow+0x4a>
 80160e0:	f000 ff20 	bl	8016f24 <__errno>
 80160e4:	2322      	movs	r3, #34	; 0x22
 80160e6:	6003      	str	r3, [r0, #0]
 80160e8:	2400      	movs	r4, #0
 80160ea:	2500      	movs	r5, #0
 80160ec:	e781      	b.n	8015ff2 <pow+0x4a>
 80160ee:	4d04      	ldr	r5, [pc, #16]	; (8016100 <pow+0x158>)
 80160f0:	2400      	movs	r4, #0
 80160f2:	e77e      	b.n	8015ff2 <pow+0x4a>
 80160f4:	200000f4 	.word	0x200000f4
 80160f8:	fff00000 	.word	0xfff00000
 80160fc:	7ff00000 	.word	0x7ff00000
 8016100:	3ff00000 	.word	0x3ff00000
 8016104:	00000000 	.word	0x00000000

08016108 <__ieee754_pow>:
 8016108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801610c:	ed2d 8b06 	vpush	{d8-d10}
 8016110:	b08d      	sub	sp, #52	; 0x34
 8016112:	ed8d 1b02 	vstr	d1, [sp, #8]
 8016116:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 801611a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801611e:	ea56 0100 	orrs.w	r1, r6, r0
 8016122:	ec53 2b10 	vmov	r2, r3, d0
 8016126:	f000 84d1 	beq.w	8016acc <__ieee754_pow+0x9c4>
 801612a:	497f      	ldr	r1, [pc, #508]	; (8016328 <__ieee754_pow+0x220>)
 801612c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8016130:	428c      	cmp	r4, r1
 8016132:	ee10 8a10 	vmov	r8, s0
 8016136:	4699      	mov	r9, r3
 8016138:	dc09      	bgt.n	801614e <__ieee754_pow+0x46>
 801613a:	d103      	bne.n	8016144 <__ieee754_pow+0x3c>
 801613c:	b97a      	cbnz	r2, 801615e <__ieee754_pow+0x56>
 801613e:	42a6      	cmp	r6, r4
 8016140:	dd02      	ble.n	8016148 <__ieee754_pow+0x40>
 8016142:	e00c      	b.n	801615e <__ieee754_pow+0x56>
 8016144:	428e      	cmp	r6, r1
 8016146:	dc02      	bgt.n	801614e <__ieee754_pow+0x46>
 8016148:	428e      	cmp	r6, r1
 801614a:	d110      	bne.n	801616e <__ieee754_pow+0x66>
 801614c:	b178      	cbz	r0, 801616e <__ieee754_pow+0x66>
 801614e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016152:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016156:	ea54 0308 	orrs.w	r3, r4, r8
 801615a:	f000 84b7 	beq.w	8016acc <__ieee754_pow+0x9c4>
 801615e:	4873      	ldr	r0, [pc, #460]	; (801632c <__ieee754_pow+0x224>)
 8016160:	b00d      	add	sp, #52	; 0x34
 8016162:	ecbd 8b06 	vpop	{d8-d10}
 8016166:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801616a:	f000 bdb9 	b.w	8016ce0 <nan>
 801616e:	f1b9 0f00 	cmp.w	r9, #0
 8016172:	da36      	bge.n	80161e2 <__ieee754_pow+0xda>
 8016174:	496e      	ldr	r1, [pc, #440]	; (8016330 <__ieee754_pow+0x228>)
 8016176:	428e      	cmp	r6, r1
 8016178:	dc51      	bgt.n	801621e <__ieee754_pow+0x116>
 801617a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 801617e:	428e      	cmp	r6, r1
 8016180:	f340 84af 	ble.w	8016ae2 <__ieee754_pow+0x9da>
 8016184:	1531      	asrs	r1, r6, #20
 8016186:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801618a:	2914      	cmp	r1, #20
 801618c:	dd0f      	ble.n	80161ae <__ieee754_pow+0xa6>
 801618e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8016192:	fa20 fc01 	lsr.w	ip, r0, r1
 8016196:	fa0c f101 	lsl.w	r1, ip, r1
 801619a:	4281      	cmp	r1, r0
 801619c:	f040 84a1 	bne.w	8016ae2 <__ieee754_pow+0x9da>
 80161a0:	f00c 0c01 	and.w	ip, ip, #1
 80161a4:	f1cc 0102 	rsb	r1, ip, #2
 80161a8:	9100      	str	r1, [sp, #0]
 80161aa:	b180      	cbz	r0, 80161ce <__ieee754_pow+0xc6>
 80161ac:	e059      	b.n	8016262 <__ieee754_pow+0x15a>
 80161ae:	2800      	cmp	r0, #0
 80161b0:	d155      	bne.n	801625e <__ieee754_pow+0x156>
 80161b2:	f1c1 0114 	rsb	r1, r1, #20
 80161b6:	fa46 fc01 	asr.w	ip, r6, r1
 80161ba:	fa0c f101 	lsl.w	r1, ip, r1
 80161be:	42b1      	cmp	r1, r6
 80161c0:	f040 848c 	bne.w	8016adc <__ieee754_pow+0x9d4>
 80161c4:	f00c 0c01 	and.w	ip, ip, #1
 80161c8:	f1cc 0102 	rsb	r1, ip, #2
 80161cc:	9100      	str	r1, [sp, #0]
 80161ce:	4959      	ldr	r1, [pc, #356]	; (8016334 <__ieee754_pow+0x22c>)
 80161d0:	428e      	cmp	r6, r1
 80161d2:	d12d      	bne.n	8016230 <__ieee754_pow+0x128>
 80161d4:	2f00      	cmp	r7, #0
 80161d6:	da79      	bge.n	80162cc <__ieee754_pow+0x1c4>
 80161d8:	4956      	ldr	r1, [pc, #344]	; (8016334 <__ieee754_pow+0x22c>)
 80161da:	2000      	movs	r0, #0
 80161dc:	f7ea fb56 	bl	800088c <__aeabi_ddiv>
 80161e0:	e016      	b.n	8016210 <__ieee754_pow+0x108>
 80161e2:	2100      	movs	r1, #0
 80161e4:	9100      	str	r1, [sp, #0]
 80161e6:	2800      	cmp	r0, #0
 80161e8:	d13b      	bne.n	8016262 <__ieee754_pow+0x15a>
 80161ea:	494f      	ldr	r1, [pc, #316]	; (8016328 <__ieee754_pow+0x220>)
 80161ec:	428e      	cmp	r6, r1
 80161ee:	d1ee      	bne.n	80161ce <__ieee754_pow+0xc6>
 80161f0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80161f4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80161f8:	ea53 0308 	orrs.w	r3, r3, r8
 80161fc:	f000 8466 	beq.w	8016acc <__ieee754_pow+0x9c4>
 8016200:	4b4d      	ldr	r3, [pc, #308]	; (8016338 <__ieee754_pow+0x230>)
 8016202:	429c      	cmp	r4, r3
 8016204:	dd0d      	ble.n	8016222 <__ieee754_pow+0x11a>
 8016206:	2f00      	cmp	r7, #0
 8016208:	f280 8464 	bge.w	8016ad4 <__ieee754_pow+0x9cc>
 801620c:	2000      	movs	r0, #0
 801620e:	2100      	movs	r1, #0
 8016210:	ec41 0b10 	vmov	d0, r0, r1
 8016214:	b00d      	add	sp, #52	; 0x34
 8016216:	ecbd 8b06 	vpop	{d8-d10}
 801621a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801621e:	2102      	movs	r1, #2
 8016220:	e7e0      	b.n	80161e4 <__ieee754_pow+0xdc>
 8016222:	2f00      	cmp	r7, #0
 8016224:	daf2      	bge.n	801620c <__ieee754_pow+0x104>
 8016226:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 801622a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801622e:	e7ef      	b.n	8016210 <__ieee754_pow+0x108>
 8016230:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8016234:	d104      	bne.n	8016240 <__ieee754_pow+0x138>
 8016236:	4610      	mov	r0, r2
 8016238:	4619      	mov	r1, r3
 801623a:	f7ea f9fd 	bl	8000638 <__aeabi_dmul>
 801623e:	e7e7      	b.n	8016210 <__ieee754_pow+0x108>
 8016240:	493e      	ldr	r1, [pc, #248]	; (801633c <__ieee754_pow+0x234>)
 8016242:	428f      	cmp	r7, r1
 8016244:	d10d      	bne.n	8016262 <__ieee754_pow+0x15a>
 8016246:	f1b9 0f00 	cmp.w	r9, #0
 801624a:	db0a      	blt.n	8016262 <__ieee754_pow+0x15a>
 801624c:	ec43 2b10 	vmov	d0, r2, r3
 8016250:	b00d      	add	sp, #52	; 0x34
 8016252:	ecbd 8b06 	vpop	{d8-d10}
 8016256:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801625a:	f000 bc77 	b.w	8016b4c <__ieee754_sqrt>
 801625e:	2100      	movs	r1, #0
 8016260:	9100      	str	r1, [sp, #0]
 8016262:	ec43 2b10 	vmov	d0, r2, r3
 8016266:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801626a:	f000 fd23 	bl	8016cb4 <fabs>
 801626e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016272:	ec51 0b10 	vmov	r0, r1, d0
 8016276:	f1b8 0f00 	cmp.w	r8, #0
 801627a:	d12a      	bne.n	80162d2 <__ieee754_pow+0x1ca>
 801627c:	b12c      	cbz	r4, 801628a <__ieee754_pow+0x182>
 801627e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8016334 <__ieee754_pow+0x22c>
 8016282:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8016286:	45e6      	cmp	lr, ip
 8016288:	d123      	bne.n	80162d2 <__ieee754_pow+0x1ca>
 801628a:	2f00      	cmp	r7, #0
 801628c:	da05      	bge.n	801629a <__ieee754_pow+0x192>
 801628e:	4602      	mov	r2, r0
 8016290:	460b      	mov	r3, r1
 8016292:	2000      	movs	r0, #0
 8016294:	4927      	ldr	r1, [pc, #156]	; (8016334 <__ieee754_pow+0x22c>)
 8016296:	f7ea faf9 	bl	800088c <__aeabi_ddiv>
 801629a:	f1b9 0f00 	cmp.w	r9, #0
 801629e:	dab7      	bge.n	8016210 <__ieee754_pow+0x108>
 80162a0:	9b00      	ldr	r3, [sp, #0]
 80162a2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80162a6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80162aa:	4323      	orrs	r3, r4
 80162ac:	d108      	bne.n	80162c0 <__ieee754_pow+0x1b8>
 80162ae:	4602      	mov	r2, r0
 80162b0:	460b      	mov	r3, r1
 80162b2:	4610      	mov	r0, r2
 80162b4:	4619      	mov	r1, r3
 80162b6:	f7ea f807 	bl	80002c8 <__aeabi_dsub>
 80162ba:	4602      	mov	r2, r0
 80162bc:	460b      	mov	r3, r1
 80162be:	e78d      	b.n	80161dc <__ieee754_pow+0xd4>
 80162c0:	9b00      	ldr	r3, [sp, #0]
 80162c2:	2b01      	cmp	r3, #1
 80162c4:	d1a4      	bne.n	8016210 <__ieee754_pow+0x108>
 80162c6:	4602      	mov	r2, r0
 80162c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80162cc:	4610      	mov	r0, r2
 80162ce:	4619      	mov	r1, r3
 80162d0:	e79e      	b.n	8016210 <__ieee754_pow+0x108>
 80162d2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80162d6:	f10c 35ff 	add.w	r5, ip, #4294967295
 80162da:	950a      	str	r5, [sp, #40]	; 0x28
 80162dc:	9d00      	ldr	r5, [sp, #0]
 80162de:	46ac      	mov	ip, r5
 80162e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80162e2:	ea5c 0505 	orrs.w	r5, ip, r5
 80162e6:	d0e4      	beq.n	80162b2 <__ieee754_pow+0x1aa>
 80162e8:	4b15      	ldr	r3, [pc, #84]	; (8016340 <__ieee754_pow+0x238>)
 80162ea:	429e      	cmp	r6, r3
 80162ec:	f340 80fc 	ble.w	80164e8 <__ieee754_pow+0x3e0>
 80162f0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80162f4:	429e      	cmp	r6, r3
 80162f6:	4b10      	ldr	r3, [pc, #64]	; (8016338 <__ieee754_pow+0x230>)
 80162f8:	dd07      	ble.n	801630a <__ieee754_pow+0x202>
 80162fa:	429c      	cmp	r4, r3
 80162fc:	dc0a      	bgt.n	8016314 <__ieee754_pow+0x20c>
 80162fe:	2f00      	cmp	r7, #0
 8016300:	da84      	bge.n	801620c <__ieee754_pow+0x104>
 8016302:	a307      	add	r3, pc, #28	; (adr r3, 8016320 <__ieee754_pow+0x218>)
 8016304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016308:	e795      	b.n	8016236 <__ieee754_pow+0x12e>
 801630a:	429c      	cmp	r4, r3
 801630c:	dbf7      	blt.n	80162fe <__ieee754_pow+0x1f6>
 801630e:	4b09      	ldr	r3, [pc, #36]	; (8016334 <__ieee754_pow+0x22c>)
 8016310:	429c      	cmp	r4, r3
 8016312:	dd17      	ble.n	8016344 <__ieee754_pow+0x23c>
 8016314:	2f00      	cmp	r7, #0
 8016316:	dcf4      	bgt.n	8016302 <__ieee754_pow+0x1fa>
 8016318:	e778      	b.n	801620c <__ieee754_pow+0x104>
 801631a:	bf00      	nop
 801631c:	f3af 8000 	nop.w
 8016320:	8800759c 	.word	0x8800759c
 8016324:	7e37e43c 	.word	0x7e37e43c
 8016328:	7ff00000 	.word	0x7ff00000
 801632c:	0801d95b 	.word	0x0801d95b
 8016330:	433fffff 	.word	0x433fffff
 8016334:	3ff00000 	.word	0x3ff00000
 8016338:	3fefffff 	.word	0x3fefffff
 801633c:	3fe00000 	.word	0x3fe00000
 8016340:	41e00000 	.word	0x41e00000
 8016344:	4b64      	ldr	r3, [pc, #400]	; (80164d8 <__ieee754_pow+0x3d0>)
 8016346:	2200      	movs	r2, #0
 8016348:	f7e9 ffbe 	bl	80002c8 <__aeabi_dsub>
 801634c:	a356      	add	r3, pc, #344	; (adr r3, 80164a8 <__ieee754_pow+0x3a0>)
 801634e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016352:	4604      	mov	r4, r0
 8016354:	460d      	mov	r5, r1
 8016356:	f7ea f96f 	bl	8000638 <__aeabi_dmul>
 801635a:	a355      	add	r3, pc, #340	; (adr r3, 80164b0 <__ieee754_pow+0x3a8>)
 801635c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016360:	4606      	mov	r6, r0
 8016362:	460f      	mov	r7, r1
 8016364:	4620      	mov	r0, r4
 8016366:	4629      	mov	r1, r5
 8016368:	f7ea f966 	bl	8000638 <__aeabi_dmul>
 801636c:	4b5b      	ldr	r3, [pc, #364]	; (80164dc <__ieee754_pow+0x3d4>)
 801636e:	4682      	mov	sl, r0
 8016370:	468b      	mov	fp, r1
 8016372:	2200      	movs	r2, #0
 8016374:	4620      	mov	r0, r4
 8016376:	4629      	mov	r1, r5
 8016378:	f7ea f95e 	bl	8000638 <__aeabi_dmul>
 801637c:	4602      	mov	r2, r0
 801637e:	460b      	mov	r3, r1
 8016380:	a14d      	add	r1, pc, #308	; (adr r1, 80164b8 <__ieee754_pow+0x3b0>)
 8016382:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016386:	f7e9 ff9f 	bl	80002c8 <__aeabi_dsub>
 801638a:	4622      	mov	r2, r4
 801638c:	462b      	mov	r3, r5
 801638e:	f7ea f953 	bl	8000638 <__aeabi_dmul>
 8016392:	4602      	mov	r2, r0
 8016394:	460b      	mov	r3, r1
 8016396:	2000      	movs	r0, #0
 8016398:	4951      	ldr	r1, [pc, #324]	; (80164e0 <__ieee754_pow+0x3d8>)
 801639a:	f7e9 ff95 	bl	80002c8 <__aeabi_dsub>
 801639e:	4622      	mov	r2, r4
 80163a0:	4680      	mov	r8, r0
 80163a2:	4689      	mov	r9, r1
 80163a4:	462b      	mov	r3, r5
 80163a6:	4620      	mov	r0, r4
 80163a8:	4629      	mov	r1, r5
 80163aa:	f7ea f945 	bl	8000638 <__aeabi_dmul>
 80163ae:	4602      	mov	r2, r0
 80163b0:	460b      	mov	r3, r1
 80163b2:	4640      	mov	r0, r8
 80163b4:	4649      	mov	r1, r9
 80163b6:	f7ea f93f 	bl	8000638 <__aeabi_dmul>
 80163ba:	a341      	add	r3, pc, #260	; (adr r3, 80164c0 <__ieee754_pow+0x3b8>)
 80163bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163c0:	f7ea f93a 	bl	8000638 <__aeabi_dmul>
 80163c4:	4602      	mov	r2, r0
 80163c6:	460b      	mov	r3, r1
 80163c8:	4650      	mov	r0, sl
 80163ca:	4659      	mov	r1, fp
 80163cc:	f7e9 ff7c 	bl	80002c8 <__aeabi_dsub>
 80163d0:	4602      	mov	r2, r0
 80163d2:	460b      	mov	r3, r1
 80163d4:	4680      	mov	r8, r0
 80163d6:	4689      	mov	r9, r1
 80163d8:	4630      	mov	r0, r6
 80163da:	4639      	mov	r1, r7
 80163dc:	f7e9 ff76 	bl	80002cc <__adddf3>
 80163e0:	2400      	movs	r4, #0
 80163e2:	4632      	mov	r2, r6
 80163e4:	463b      	mov	r3, r7
 80163e6:	4620      	mov	r0, r4
 80163e8:	460d      	mov	r5, r1
 80163ea:	f7e9 ff6d 	bl	80002c8 <__aeabi_dsub>
 80163ee:	4602      	mov	r2, r0
 80163f0:	460b      	mov	r3, r1
 80163f2:	4640      	mov	r0, r8
 80163f4:	4649      	mov	r1, r9
 80163f6:	f7e9 ff67 	bl	80002c8 <__aeabi_dsub>
 80163fa:	9b00      	ldr	r3, [sp, #0]
 80163fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80163fe:	3b01      	subs	r3, #1
 8016400:	4313      	orrs	r3, r2
 8016402:	4682      	mov	sl, r0
 8016404:	468b      	mov	fp, r1
 8016406:	f040 81f1 	bne.w	80167ec <__ieee754_pow+0x6e4>
 801640a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80164c8 <__ieee754_pow+0x3c0>
 801640e:	eeb0 8a47 	vmov.f32	s16, s14
 8016412:	eef0 8a67 	vmov.f32	s17, s15
 8016416:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801641a:	2600      	movs	r6, #0
 801641c:	4632      	mov	r2, r6
 801641e:	463b      	mov	r3, r7
 8016420:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016424:	f7e9 ff50 	bl	80002c8 <__aeabi_dsub>
 8016428:	4622      	mov	r2, r4
 801642a:	462b      	mov	r3, r5
 801642c:	f7ea f904 	bl	8000638 <__aeabi_dmul>
 8016430:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016434:	4680      	mov	r8, r0
 8016436:	4689      	mov	r9, r1
 8016438:	4650      	mov	r0, sl
 801643a:	4659      	mov	r1, fp
 801643c:	f7ea f8fc 	bl	8000638 <__aeabi_dmul>
 8016440:	4602      	mov	r2, r0
 8016442:	460b      	mov	r3, r1
 8016444:	4640      	mov	r0, r8
 8016446:	4649      	mov	r1, r9
 8016448:	f7e9 ff40 	bl	80002cc <__adddf3>
 801644c:	4632      	mov	r2, r6
 801644e:	463b      	mov	r3, r7
 8016450:	4680      	mov	r8, r0
 8016452:	4689      	mov	r9, r1
 8016454:	4620      	mov	r0, r4
 8016456:	4629      	mov	r1, r5
 8016458:	f7ea f8ee 	bl	8000638 <__aeabi_dmul>
 801645c:	460b      	mov	r3, r1
 801645e:	4604      	mov	r4, r0
 8016460:	460d      	mov	r5, r1
 8016462:	4602      	mov	r2, r0
 8016464:	4649      	mov	r1, r9
 8016466:	4640      	mov	r0, r8
 8016468:	f7e9 ff30 	bl	80002cc <__adddf3>
 801646c:	4b1d      	ldr	r3, [pc, #116]	; (80164e4 <__ieee754_pow+0x3dc>)
 801646e:	4299      	cmp	r1, r3
 8016470:	ec45 4b19 	vmov	d9, r4, r5
 8016474:	4606      	mov	r6, r0
 8016476:	460f      	mov	r7, r1
 8016478:	468b      	mov	fp, r1
 801647a:	f340 82fe 	ble.w	8016a7a <__ieee754_pow+0x972>
 801647e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8016482:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8016486:	4303      	orrs	r3, r0
 8016488:	f000 81f0 	beq.w	801686c <__ieee754_pow+0x764>
 801648c:	a310      	add	r3, pc, #64	; (adr r3, 80164d0 <__ieee754_pow+0x3c8>)
 801648e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016492:	ec51 0b18 	vmov	r0, r1, d8
 8016496:	f7ea f8cf 	bl	8000638 <__aeabi_dmul>
 801649a:	a30d      	add	r3, pc, #52	; (adr r3, 80164d0 <__ieee754_pow+0x3c8>)
 801649c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164a0:	e6cb      	b.n	801623a <__ieee754_pow+0x132>
 80164a2:	bf00      	nop
 80164a4:	f3af 8000 	nop.w
 80164a8:	60000000 	.word	0x60000000
 80164ac:	3ff71547 	.word	0x3ff71547
 80164b0:	f85ddf44 	.word	0xf85ddf44
 80164b4:	3e54ae0b 	.word	0x3e54ae0b
 80164b8:	55555555 	.word	0x55555555
 80164bc:	3fd55555 	.word	0x3fd55555
 80164c0:	652b82fe 	.word	0x652b82fe
 80164c4:	3ff71547 	.word	0x3ff71547
 80164c8:	00000000 	.word	0x00000000
 80164cc:	bff00000 	.word	0xbff00000
 80164d0:	8800759c 	.word	0x8800759c
 80164d4:	7e37e43c 	.word	0x7e37e43c
 80164d8:	3ff00000 	.word	0x3ff00000
 80164dc:	3fd00000 	.word	0x3fd00000
 80164e0:	3fe00000 	.word	0x3fe00000
 80164e4:	408fffff 	.word	0x408fffff
 80164e8:	4bd7      	ldr	r3, [pc, #860]	; (8016848 <__ieee754_pow+0x740>)
 80164ea:	ea03 0309 	and.w	r3, r3, r9
 80164ee:	2200      	movs	r2, #0
 80164f0:	b92b      	cbnz	r3, 80164fe <__ieee754_pow+0x3f6>
 80164f2:	4bd6      	ldr	r3, [pc, #856]	; (801684c <__ieee754_pow+0x744>)
 80164f4:	f7ea f8a0 	bl	8000638 <__aeabi_dmul>
 80164f8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80164fc:	460c      	mov	r4, r1
 80164fe:	1523      	asrs	r3, r4, #20
 8016500:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016504:	4413      	add	r3, r2
 8016506:	9309      	str	r3, [sp, #36]	; 0x24
 8016508:	4bd1      	ldr	r3, [pc, #836]	; (8016850 <__ieee754_pow+0x748>)
 801650a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801650e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8016512:	429c      	cmp	r4, r3
 8016514:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016518:	dd08      	ble.n	801652c <__ieee754_pow+0x424>
 801651a:	4bce      	ldr	r3, [pc, #824]	; (8016854 <__ieee754_pow+0x74c>)
 801651c:	429c      	cmp	r4, r3
 801651e:	f340 8163 	ble.w	80167e8 <__ieee754_pow+0x6e0>
 8016522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016524:	3301      	adds	r3, #1
 8016526:	9309      	str	r3, [sp, #36]	; 0x24
 8016528:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801652c:	2400      	movs	r4, #0
 801652e:	00e3      	lsls	r3, r4, #3
 8016530:	930b      	str	r3, [sp, #44]	; 0x2c
 8016532:	4bc9      	ldr	r3, [pc, #804]	; (8016858 <__ieee754_pow+0x750>)
 8016534:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016538:	ed93 7b00 	vldr	d7, [r3]
 801653c:	4629      	mov	r1, r5
 801653e:	ec53 2b17 	vmov	r2, r3, d7
 8016542:	eeb0 8a47 	vmov.f32	s16, s14
 8016546:	eef0 8a67 	vmov.f32	s17, s15
 801654a:	4682      	mov	sl, r0
 801654c:	f7e9 febc 	bl	80002c8 <__aeabi_dsub>
 8016550:	4652      	mov	r2, sl
 8016552:	4606      	mov	r6, r0
 8016554:	460f      	mov	r7, r1
 8016556:	462b      	mov	r3, r5
 8016558:	ec51 0b18 	vmov	r0, r1, d8
 801655c:	f7e9 feb6 	bl	80002cc <__adddf3>
 8016560:	4602      	mov	r2, r0
 8016562:	460b      	mov	r3, r1
 8016564:	2000      	movs	r0, #0
 8016566:	49bd      	ldr	r1, [pc, #756]	; (801685c <__ieee754_pow+0x754>)
 8016568:	f7ea f990 	bl	800088c <__aeabi_ddiv>
 801656c:	ec41 0b19 	vmov	d9, r0, r1
 8016570:	4602      	mov	r2, r0
 8016572:	460b      	mov	r3, r1
 8016574:	4630      	mov	r0, r6
 8016576:	4639      	mov	r1, r7
 8016578:	f7ea f85e 	bl	8000638 <__aeabi_dmul>
 801657c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016580:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016584:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016588:	2300      	movs	r3, #0
 801658a:	9304      	str	r3, [sp, #16]
 801658c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8016590:	46ab      	mov	fp, r5
 8016592:	106d      	asrs	r5, r5, #1
 8016594:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8016598:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801659c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80165a0:	2200      	movs	r2, #0
 80165a2:	4640      	mov	r0, r8
 80165a4:	4649      	mov	r1, r9
 80165a6:	4614      	mov	r4, r2
 80165a8:	461d      	mov	r5, r3
 80165aa:	f7ea f845 	bl	8000638 <__aeabi_dmul>
 80165ae:	4602      	mov	r2, r0
 80165b0:	460b      	mov	r3, r1
 80165b2:	4630      	mov	r0, r6
 80165b4:	4639      	mov	r1, r7
 80165b6:	f7e9 fe87 	bl	80002c8 <__aeabi_dsub>
 80165ba:	ec53 2b18 	vmov	r2, r3, d8
 80165be:	4606      	mov	r6, r0
 80165c0:	460f      	mov	r7, r1
 80165c2:	4620      	mov	r0, r4
 80165c4:	4629      	mov	r1, r5
 80165c6:	f7e9 fe7f 	bl	80002c8 <__aeabi_dsub>
 80165ca:	4602      	mov	r2, r0
 80165cc:	460b      	mov	r3, r1
 80165ce:	4650      	mov	r0, sl
 80165d0:	4659      	mov	r1, fp
 80165d2:	f7e9 fe79 	bl	80002c8 <__aeabi_dsub>
 80165d6:	4642      	mov	r2, r8
 80165d8:	464b      	mov	r3, r9
 80165da:	f7ea f82d 	bl	8000638 <__aeabi_dmul>
 80165de:	4602      	mov	r2, r0
 80165e0:	460b      	mov	r3, r1
 80165e2:	4630      	mov	r0, r6
 80165e4:	4639      	mov	r1, r7
 80165e6:	f7e9 fe6f 	bl	80002c8 <__aeabi_dsub>
 80165ea:	ec53 2b19 	vmov	r2, r3, d9
 80165ee:	f7ea f823 	bl	8000638 <__aeabi_dmul>
 80165f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80165f6:	ec41 0b18 	vmov	d8, r0, r1
 80165fa:	4610      	mov	r0, r2
 80165fc:	4619      	mov	r1, r3
 80165fe:	f7ea f81b 	bl	8000638 <__aeabi_dmul>
 8016602:	a37d      	add	r3, pc, #500	; (adr r3, 80167f8 <__ieee754_pow+0x6f0>)
 8016604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016608:	4604      	mov	r4, r0
 801660a:	460d      	mov	r5, r1
 801660c:	f7ea f814 	bl	8000638 <__aeabi_dmul>
 8016610:	a37b      	add	r3, pc, #492	; (adr r3, 8016800 <__ieee754_pow+0x6f8>)
 8016612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016616:	f7e9 fe59 	bl	80002cc <__adddf3>
 801661a:	4622      	mov	r2, r4
 801661c:	462b      	mov	r3, r5
 801661e:	f7ea f80b 	bl	8000638 <__aeabi_dmul>
 8016622:	a379      	add	r3, pc, #484	; (adr r3, 8016808 <__ieee754_pow+0x700>)
 8016624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016628:	f7e9 fe50 	bl	80002cc <__adddf3>
 801662c:	4622      	mov	r2, r4
 801662e:	462b      	mov	r3, r5
 8016630:	f7ea f802 	bl	8000638 <__aeabi_dmul>
 8016634:	a376      	add	r3, pc, #472	; (adr r3, 8016810 <__ieee754_pow+0x708>)
 8016636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801663a:	f7e9 fe47 	bl	80002cc <__adddf3>
 801663e:	4622      	mov	r2, r4
 8016640:	462b      	mov	r3, r5
 8016642:	f7e9 fff9 	bl	8000638 <__aeabi_dmul>
 8016646:	a374      	add	r3, pc, #464	; (adr r3, 8016818 <__ieee754_pow+0x710>)
 8016648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801664c:	f7e9 fe3e 	bl	80002cc <__adddf3>
 8016650:	4622      	mov	r2, r4
 8016652:	462b      	mov	r3, r5
 8016654:	f7e9 fff0 	bl	8000638 <__aeabi_dmul>
 8016658:	a371      	add	r3, pc, #452	; (adr r3, 8016820 <__ieee754_pow+0x718>)
 801665a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801665e:	f7e9 fe35 	bl	80002cc <__adddf3>
 8016662:	4622      	mov	r2, r4
 8016664:	4606      	mov	r6, r0
 8016666:	460f      	mov	r7, r1
 8016668:	462b      	mov	r3, r5
 801666a:	4620      	mov	r0, r4
 801666c:	4629      	mov	r1, r5
 801666e:	f7e9 ffe3 	bl	8000638 <__aeabi_dmul>
 8016672:	4602      	mov	r2, r0
 8016674:	460b      	mov	r3, r1
 8016676:	4630      	mov	r0, r6
 8016678:	4639      	mov	r1, r7
 801667a:	f7e9 ffdd 	bl	8000638 <__aeabi_dmul>
 801667e:	4642      	mov	r2, r8
 8016680:	4604      	mov	r4, r0
 8016682:	460d      	mov	r5, r1
 8016684:	464b      	mov	r3, r9
 8016686:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801668a:	f7e9 fe1f 	bl	80002cc <__adddf3>
 801668e:	ec53 2b18 	vmov	r2, r3, d8
 8016692:	f7e9 ffd1 	bl	8000638 <__aeabi_dmul>
 8016696:	4622      	mov	r2, r4
 8016698:	462b      	mov	r3, r5
 801669a:	f7e9 fe17 	bl	80002cc <__adddf3>
 801669e:	4642      	mov	r2, r8
 80166a0:	4682      	mov	sl, r0
 80166a2:	468b      	mov	fp, r1
 80166a4:	464b      	mov	r3, r9
 80166a6:	4640      	mov	r0, r8
 80166a8:	4649      	mov	r1, r9
 80166aa:	f7e9 ffc5 	bl	8000638 <__aeabi_dmul>
 80166ae:	4b6c      	ldr	r3, [pc, #432]	; (8016860 <__ieee754_pow+0x758>)
 80166b0:	2200      	movs	r2, #0
 80166b2:	4606      	mov	r6, r0
 80166b4:	460f      	mov	r7, r1
 80166b6:	f7e9 fe09 	bl	80002cc <__adddf3>
 80166ba:	4652      	mov	r2, sl
 80166bc:	465b      	mov	r3, fp
 80166be:	f7e9 fe05 	bl	80002cc <__adddf3>
 80166c2:	9c04      	ldr	r4, [sp, #16]
 80166c4:	460d      	mov	r5, r1
 80166c6:	4622      	mov	r2, r4
 80166c8:	460b      	mov	r3, r1
 80166ca:	4640      	mov	r0, r8
 80166cc:	4649      	mov	r1, r9
 80166ce:	f7e9 ffb3 	bl	8000638 <__aeabi_dmul>
 80166d2:	4b63      	ldr	r3, [pc, #396]	; (8016860 <__ieee754_pow+0x758>)
 80166d4:	4680      	mov	r8, r0
 80166d6:	4689      	mov	r9, r1
 80166d8:	2200      	movs	r2, #0
 80166da:	4620      	mov	r0, r4
 80166dc:	4629      	mov	r1, r5
 80166de:	f7e9 fdf3 	bl	80002c8 <__aeabi_dsub>
 80166e2:	4632      	mov	r2, r6
 80166e4:	463b      	mov	r3, r7
 80166e6:	f7e9 fdef 	bl	80002c8 <__aeabi_dsub>
 80166ea:	4602      	mov	r2, r0
 80166ec:	460b      	mov	r3, r1
 80166ee:	4650      	mov	r0, sl
 80166f0:	4659      	mov	r1, fp
 80166f2:	f7e9 fde9 	bl	80002c8 <__aeabi_dsub>
 80166f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80166fa:	f7e9 ff9d 	bl	8000638 <__aeabi_dmul>
 80166fe:	4622      	mov	r2, r4
 8016700:	4606      	mov	r6, r0
 8016702:	460f      	mov	r7, r1
 8016704:	462b      	mov	r3, r5
 8016706:	ec51 0b18 	vmov	r0, r1, d8
 801670a:	f7e9 ff95 	bl	8000638 <__aeabi_dmul>
 801670e:	4602      	mov	r2, r0
 8016710:	460b      	mov	r3, r1
 8016712:	4630      	mov	r0, r6
 8016714:	4639      	mov	r1, r7
 8016716:	f7e9 fdd9 	bl	80002cc <__adddf3>
 801671a:	4606      	mov	r6, r0
 801671c:	460f      	mov	r7, r1
 801671e:	4602      	mov	r2, r0
 8016720:	460b      	mov	r3, r1
 8016722:	4640      	mov	r0, r8
 8016724:	4649      	mov	r1, r9
 8016726:	f7e9 fdd1 	bl	80002cc <__adddf3>
 801672a:	9c04      	ldr	r4, [sp, #16]
 801672c:	a33e      	add	r3, pc, #248	; (adr r3, 8016828 <__ieee754_pow+0x720>)
 801672e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016732:	4620      	mov	r0, r4
 8016734:	460d      	mov	r5, r1
 8016736:	f7e9 ff7f 	bl	8000638 <__aeabi_dmul>
 801673a:	4642      	mov	r2, r8
 801673c:	ec41 0b18 	vmov	d8, r0, r1
 8016740:	464b      	mov	r3, r9
 8016742:	4620      	mov	r0, r4
 8016744:	4629      	mov	r1, r5
 8016746:	f7e9 fdbf 	bl	80002c8 <__aeabi_dsub>
 801674a:	4602      	mov	r2, r0
 801674c:	460b      	mov	r3, r1
 801674e:	4630      	mov	r0, r6
 8016750:	4639      	mov	r1, r7
 8016752:	f7e9 fdb9 	bl	80002c8 <__aeabi_dsub>
 8016756:	a336      	add	r3, pc, #216	; (adr r3, 8016830 <__ieee754_pow+0x728>)
 8016758:	e9d3 2300 	ldrd	r2, r3, [r3]
 801675c:	f7e9 ff6c 	bl	8000638 <__aeabi_dmul>
 8016760:	a335      	add	r3, pc, #212	; (adr r3, 8016838 <__ieee754_pow+0x730>)
 8016762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016766:	4606      	mov	r6, r0
 8016768:	460f      	mov	r7, r1
 801676a:	4620      	mov	r0, r4
 801676c:	4629      	mov	r1, r5
 801676e:	f7e9 ff63 	bl	8000638 <__aeabi_dmul>
 8016772:	4602      	mov	r2, r0
 8016774:	460b      	mov	r3, r1
 8016776:	4630      	mov	r0, r6
 8016778:	4639      	mov	r1, r7
 801677a:	f7e9 fda7 	bl	80002cc <__adddf3>
 801677e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016780:	4b38      	ldr	r3, [pc, #224]	; (8016864 <__ieee754_pow+0x75c>)
 8016782:	4413      	add	r3, r2
 8016784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016788:	f7e9 fda0 	bl	80002cc <__adddf3>
 801678c:	4682      	mov	sl, r0
 801678e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016790:	468b      	mov	fp, r1
 8016792:	f7e9 fee7 	bl	8000564 <__aeabi_i2d>
 8016796:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016798:	4b33      	ldr	r3, [pc, #204]	; (8016868 <__ieee754_pow+0x760>)
 801679a:	4413      	add	r3, r2
 801679c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80167a0:	4606      	mov	r6, r0
 80167a2:	460f      	mov	r7, r1
 80167a4:	4652      	mov	r2, sl
 80167a6:	465b      	mov	r3, fp
 80167a8:	ec51 0b18 	vmov	r0, r1, d8
 80167ac:	f7e9 fd8e 	bl	80002cc <__adddf3>
 80167b0:	4642      	mov	r2, r8
 80167b2:	464b      	mov	r3, r9
 80167b4:	f7e9 fd8a 	bl	80002cc <__adddf3>
 80167b8:	4632      	mov	r2, r6
 80167ba:	463b      	mov	r3, r7
 80167bc:	f7e9 fd86 	bl	80002cc <__adddf3>
 80167c0:	9c04      	ldr	r4, [sp, #16]
 80167c2:	4632      	mov	r2, r6
 80167c4:	463b      	mov	r3, r7
 80167c6:	4620      	mov	r0, r4
 80167c8:	460d      	mov	r5, r1
 80167ca:	f7e9 fd7d 	bl	80002c8 <__aeabi_dsub>
 80167ce:	4642      	mov	r2, r8
 80167d0:	464b      	mov	r3, r9
 80167d2:	f7e9 fd79 	bl	80002c8 <__aeabi_dsub>
 80167d6:	ec53 2b18 	vmov	r2, r3, d8
 80167da:	f7e9 fd75 	bl	80002c8 <__aeabi_dsub>
 80167de:	4602      	mov	r2, r0
 80167e0:	460b      	mov	r3, r1
 80167e2:	4650      	mov	r0, sl
 80167e4:	4659      	mov	r1, fp
 80167e6:	e606      	b.n	80163f6 <__ieee754_pow+0x2ee>
 80167e8:	2401      	movs	r4, #1
 80167ea:	e6a0      	b.n	801652e <__ieee754_pow+0x426>
 80167ec:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8016840 <__ieee754_pow+0x738>
 80167f0:	e60d      	b.n	801640e <__ieee754_pow+0x306>
 80167f2:	bf00      	nop
 80167f4:	f3af 8000 	nop.w
 80167f8:	4a454eef 	.word	0x4a454eef
 80167fc:	3fca7e28 	.word	0x3fca7e28
 8016800:	93c9db65 	.word	0x93c9db65
 8016804:	3fcd864a 	.word	0x3fcd864a
 8016808:	a91d4101 	.word	0xa91d4101
 801680c:	3fd17460 	.word	0x3fd17460
 8016810:	518f264d 	.word	0x518f264d
 8016814:	3fd55555 	.word	0x3fd55555
 8016818:	db6fabff 	.word	0xdb6fabff
 801681c:	3fdb6db6 	.word	0x3fdb6db6
 8016820:	33333303 	.word	0x33333303
 8016824:	3fe33333 	.word	0x3fe33333
 8016828:	e0000000 	.word	0xe0000000
 801682c:	3feec709 	.word	0x3feec709
 8016830:	dc3a03fd 	.word	0xdc3a03fd
 8016834:	3feec709 	.word	0x3feec709
 8016838:	145b01f5 	.word	0x145b01f5
 801683c:	be3e2fe0 	.word	0xbe3e2fe0
 8016840:	00000000 	.word	0x00000000
 8016844:	3ff00000 	.word	0x3ff00000
 8016848:	7ff00000 	.word	0x7ff00000
 801684c:	43400000 	.word	0x43400000
 8016850:	0003988e 	.word	0x0003988e
 8016854:	000bb679 	.word	0x000bb679
 8016858:	0801d6f0 	.word	0x0801d6f0
 801685c:	3ff00000 	.word	0x3ff00000
 8016860:	40080000 	.word	0x40080000
 8016864:	0801d710 	.word	0x0801d710
 8016868:	0801d700 	.word	0x0801d700
 801686c:	a3b5      	add	r3, pc, #724	; (adr r3, 8016b44 <__ieee754_pow+0xa3c>)
 801686e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016872:	4640      	mov	r0, r8
 8016874:	4649      	mov	r1, r9
 8016876:	f7e9 fd29 	bl	80002cc <__adddf3>
 801687a:	4622      	mov	r2, r4
 801687c:	ec41 0b1a 	vmov	d10, r0, r1
 8016880:	462b      	mov	r3, r5
 8016882:	4630      	mov	r0, r6
 8016884:	4639      	mov	r1, r7
 8016886:	f7e9 fd1f 	bl	80002c8 <__aeabi_dsub>
 801688a:	4602      	mov	r2, r0
 801688c:	460b      	mov	r3, r1
 801688e:	ec51 0b1a 	vmov	r0, r1, d10
 8016892:	f7ea f961 	bl	8000b58 <__aeabi_dcmpgt>
 8016896:	2800      	cmp	r0, #0
 8016898:	f47f adf8 	bne.w	801648c <__ieee754_pow+0x384>
 801689c:	4aa4      	ldr	r2, [pc, #656]	; (8016b30 <__ieee754_pow+0xa28>)
 801689e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80168a2:	4293      	cmp	r3, r2
 80168a4:	f340 810b 	ble.w	8016abe <__ieee754_pow+0x9b6>
 80168a8:	151b      	asrs	r3, r3, #20
 80168aa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80168ae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80168b2:	fa4a f303 	asr.w	r3, sl, r3
 80168b6:	445b      	add	r3, fp
 80168b8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80168bc:	4e9d      	ldr	r6, [pc, #628]	; (8016b34 <__ieee754_pow+0xa2c>)
 80168be:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80168c2:	4116      	asrs	r6, r2
 80168c4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80168c8:	2000      	movs	r0, #0
 80168ca:	ea23 0106 	bic.w	r1, r3, r6
 80168ce:	f1c2 0214 	rsb	r2, r2, #20
 80168d2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80168d6:	fa4a fa02 	asr.w	sl, sl, r2
 80168da:	f1bb 0f00 	cmp.w	fp, #0
 80168de:	4602      	mov	r2, r0
 80168e0:	460b      	mov	r3, r1
 80168e2:	4620      	mov	r0, r4
 80168e4:	4629      	mov	r1, r5
 80168e6:	bfb8      	it	lt
 80168e8:	f1ca 0a00 	rsblt	sl, sl, #0
 80168ec:	f7e9 fcec 	bl	80002c8 <__aeabi_dsub>
 80168f0:	ec41 0b19 	vmov	d9, r0, r1
 80168f4:	4642      	mov	r2, r8
 80168f6:	464b      	mov	r3, r9
 80168f8:	ec51 0b19 	vmov	r0, r1, d9
 80168fc:	f7e9 fce6 	bl	80002cc <__adddf3>
 8016900:	2400      	movs	r4, #0
 8016902:	a379      	add	r3, pc, #484	; (adr r3, 8016ae8 <__ieee754_pow+0x9e0>)
 8016904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016908:	4620      	mov	r0, r4
 801690a:	460d      	mov	r5, r1
 801690c:	f7e9 fe94 	bl	8000638 <__aeabi_dmul>
 8016910:	ec53 2b19 	vmov	r2, r3, d9
 8016914:	4606      	mov	r6, r0
 8016916:	460f      	mov	r7, r1
 8016918:	4620      	mov	r0, r4
 801691a:	4629      	mov	r1, r5
 801691c:	f7e9 fcd4 	bl	80002c8 <__aeabi_dsub>
 8016920:	4602      	mov	r2, r0
 8016922:	460b      	mov	r3, r1
 8016924:	4640      	mov	r0, r8
 8016926:	4649      	mov	r1, r9
 8016928:	f7e9 fcce 	bl	80002c8 <__aeabi_dsub>
 801692c:	a370      	add	r3, pc, #448	; (adr r3, 8016af0 <__ieee754_pow+0x9e8>)
 801692e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016932:	f7e9 fe81 	bl	8000638 <__aeabi_dmul>
 8016936:	a370      	add	r3, pc, #448	; (adr r3, 8016af8 <__ieee754_pow+0x9f0>)
 8016938:	e9d3 2300 	ldrd	r2, r3, [r3]
 801693c:	4680      	mov	r8, r0
 801693e:	4689      	mov	r9, r1
 8016940:	4620      	mov	r0, r4
 8016942:	4629      	mov	r1, r5
 8016944:	f7e9 fe78 	bl	8000638 <__aeabi_dmul>
 8016948:	4602      	mov	r2, r0
 801694a:	460b      	mov	r3, r1
 801694c:	4640      	mov	r0, r8
 801694e:	4649      	mov	r1, r9
 8016950:	f7e9 fcbc 	bl	80002cc <__adddf3>
 8016954:	4604      	mov	r4, r0
 8016956:	460d      	mov	r5, r1
 8016958:	4602      	mov	r2, r0
 801695a:	460b      	mov	r3, r1
 801695c:	4630      	mov	r0, r6
 801695e:	4639      	mov	r1, r7
 8016960:	f7e9 fcb4 	bl	80002cc <__adddf3>
 8016964:	4632      	mov	r2, r6
 8016966:	463b      	mov	r3, r7
 8016968:	4680      	mov	r8, r0
 801696a:	4689      	mov	r9, r1
 801696c:	f7e9 fcac 	bl	80002c8 <__aeabi_dsub>
 8016970:	4602      	mov	r2, r0
 8016972:	460b      	mov	r3, r1
 8016974:	4620      	mov	r0, r4
 8016976:	4629      	mov	r1, r5
 8016978:	f7e9 fca6 	bl	80002c8 <__aeabi_dsub>
 801697c:	4642      	mov	r2, r8
 801697e:	4606      	mov	r6, r0
 8016980:	460f      	mov	r7, r1
 8016982:	464b      	mov	r3, r9
 8016984:	4640      	mov	r0, r8
 8016986:	4649      	mov	r1, r9
 8016988:	f7e9 fe56 	bl	8000638 <__aeabi_dmul>
 801698c:	a35c      	add	r3, pc, #368	; (adr r3, 8016b00 <__ieee754_pow+0x9f8>)
 801698e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016992:	4604      	mov	r4, r0
 8016994:	460d      	mov	r5, r1
 8016996:	f7e9 fe4f 	bl	8000638 <__aeabi_dmul>
 801699a:	a35b      	add	r3, pc, #364	; (adr r3, 8016b08 <__ieee754_pow+0xa00>)
 801699c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169a0:	f7e9 fc92 	bl	80002c8 <__aeabi_dsub>
 80169a4:	4622      	mov	r2, r4
 80169a6:	462b      	mov	r3, r5
 80169a8:	f7e9 fe46 	bl	8000638 <__aeabi_dmul>
 80169ac:	a358      	add	r3, pc, #352	; (adr r3, 8016b10 <__ieee754_pow+0xa08>)
 80169ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169b2:	f7e9 fc8b 	bl	80002cc <__adddf3>
 80169b6:	4622      	mov	r2, r4
 80169b8:	462b      	mov	r3, r5
 80169ba:	f7e9 fe3d 	bl	8000638 <__aeabi_dmul>
 80169be:	a356      	add	r3, pc, #344	; (adr r3, 8016b18 <__ieee754_pow+0xa10>)
 80169c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169c4:	f7e9 fc80 	bl	80002c8 <__aeabi_dsub>
 80169c8:	4622      	mov	r2, r4
 80169ca:	462b      	mov	r3, r5
 80169cc:	f7e9 fe34 	bl	8000638 <__aeabi_dmul>
 80169d0:	a353      	add	r3, pc, #332	; (adr r3, 8016b20 <__ieee754_pow+0xa18>)
 80169d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169d6:	f7e9 fc79 	bl	80002cc <__adddf3>
 80169da:	4622      	mov	r2, r4
 80169dc:	462b      	mov	r3, r5
 80169de:	f7e9 fe2b 	bl	8000638 <__aeabi_dmul>
 80169e2:	4602      	mov	r2, r0
 80169e4:	460b      	mov	r3, r1
 80169e6:	4640      	mov	r0, r8
 80169e8:	4649      	mov	r1, r9
 80169ea:	f7e9 fc6d 	bl	80002c8 <__aeabi_dsub>
 80169ee:	4604      	mov	r4, r0
 80169f0:	460d      	mov	r5, r1
 80169f2:	4602      	mov	r2, r0
 80169f4:	460b      	mov	r3, r1
 80169f6:	4640      	mov	r0, r8
 80169f8:	4649      	mov	r1, r9
 80169fa:	f7e9 fe1d 	bl	8000638 <__aeabi_dmul>
 80169fe:	2200      	movs	r2, #0
 8016a00:	ec41 0b19 	vmov	d9, r0, r1
 8016a04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016a08:	4620      	mov	r0, r4
 8016a0a:	4629      	mov	r1, r5
 8016a0c:	f7e9 fc5c 	bl	80002c8 <__aeabi_dsub>
 8016a10:	4602      	mov	r2, r0
 8016a12:	460b      	mov	r3, r1
 8016a14:	ec51 0b19 	vmov	r0, r1, d9
 8016a18:	f7e9 ff38 	bl	800088c <__aeabi_ddiv>
 8016a1c:	4632      	mov	r2, r6
 8016a1e:	4604      	mov	r4, r0
 8016a20:	460d      	mov	r5, r1
 8016a22:	463b      	mov	r3, r7
 8016a24:	4640      	mov	r0, r8
 8016a26:	4649      	mov	r1, r9
 8016a28:	f7e9 fe06 	bl	8000638 <__aeabi_dmul>
 8016a2c:	4632      	mov	r2, r6
 8016a2e:	463b      	mov	r3, r7
 8016a30:	f7e9 fc4c 	bl	80002cc <__adddf3>
 8016a34:	4602      	mov	r2, r0
 8016a36:	460b      	mov	r3, r1
 8016a38:	4620      	mov	r0, r4
 8016a3a:	4629      	mov	r1, r5
 8016a3c:	f7e9 fc44 	bl	80002c8 <__aeabi_dsub>
 8016a40:	4642      	mov	r2, r8
 8016a42:	464b      	mov	r3, r9
 8016a44:	f7e9 fc40 	bl	80002c8 <__aeabi_dsub>
 8016a48:	460b      	mov	r3, r1
 8016a4a:	4602      	mov	r2, r0
 8016a4c:	493a      	ldr	r1, [pc, #232]	; (8016b38 <__ieee754_pow+0xa30>)
 8016a4e:	2000      	movs	r0, #0
 8016a50:	f7e9 fc3a 	bl	80002c8 <__aeabi_dsub>
 8016a54:	e9cd 0100 	strd	r0, r1, [sp]
 8016a58:	9b01      	ldr	r3, [sp, #4]
 8016a5a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8016a5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016a62:	da2f      	bge.n	8016ac4 <__ieee754_pow+0x9bc>
 8016a64:	4650      	mov	r0, sl
 8016a66:	ed9d 0b00 	vldr	d0, [sp]
 8016a6a:	f000 f9cd 	bl	8016e08 <scalbn>
 8016a6e:	ec51 0b10 	vmov	r0, r1, d0
 8016a72:	ec53 2b18 	vmov	r2, r3, d8
 8016a76:	f7ff bbe0 	b.w	801623a <__ieee754_pow+0x132>
 8016a7a:	4b30      	ldr	r3, [pc, #192]	; (8016b3c <__ieee754_pow+0xa34>)
 8016a7c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8016a80:	429e      	cmp	r6, r3
 8016a82:	f77f af0b 	ble.w	801689c <__ieee754_pow+0x794>
 8016a86:	4b2e      	ldr	r3, [pc, #184]	; (8016b40 <__ieee754_pow+0xa38>)
 8016a88:	440b      	add	r3, r1
 8016a8a:	4303      	orrs	r3, r0
 8016a8c:	d00b      	beq.n	8016aa6 <__ieee754_pow+0x99e>
 8016a8e:	a326      	add	r3, pc, #152	; (adr r3, 8016b28 <__ieee754_pow+0xa20>)
 8016a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a94:	ec51 0b18 	vmov	r0, r1, d8
 8016a98:	f7e9 fdce 	bl	8000638 <__aeabi_dmul>
 8016a9c:	a322      	add	r3, pc, #136	; (adr r3, 8016b28 <__ieee754_pow+0xa20>)
 8016a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016aa2:	f7ff bbca 	b.w	801623a <__ieee754_pow+0x132>
 8016aa6:	4622      	mov	r2, r4
 8016aa8:	462b      	mov	r3, r5
 8016aaa:	f7e9 fc0d 	bl	80002c8 <__aeabi_dsub>
 8016aae:	4642      	mov	r2, r8
 8016ab0:	464b      	mov	r3, r9
 8016ab2:	f7ea f847 	bl	8000b44 <__aeabi_dcmpge>
 8016ab6:	2800      	cmp	r0, #0
 8016ab8:	f43f aef0 	beq.w	801689c <__ieee754_pow+0x794>
 8016abc:	e7e7      	b.n	8016a8e <__ieee754_pow+0x986>
 8016abe:	f04f 0a00 	mov.w	sl, #0
 8016ac2:	e717      	b.n	80168f4 <__ieee754_pow+0x7ec>
 8016ac4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016ac8:	4619      	mov	r1, r3
 8016aca:	e7d2      	b.n	8016a72 <__ieee754_pow+0x96a>
 8016acc:	491a      	ldr	r1, [pc, #104]	; (8016b38 <__ieee754_pow+0xa30>)
 8016ace:	2000      	movs	r0, #0
 8016ad0:	f7ff bb9e 	b.w	8016210 <__ieee754_pow+0x108>
 8016ad4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016ad8:	f7ff bb9a 	b.w	8016210 <__ieee754_pow+0x108>
 8016adc:	9000      	str	r0, [sp, #0]
 8016ade:	f7ff bb76 	b.w	80161ce <__ieee754_pow+0xc6>
 8016ae2:	2100      	movs	r1, #0
 8016ae4:	f7ff bb60 	b.w	80161a8 <__ieee754_pow+0xa0>
 8016ae8:	00000000 	.word	0x00000000
 8016aec:	3fe62e43 	.word	0x3fe62e43
 8016af0:	fefa39ef 	.word	0xfefa39ef
 8016af4:	3fe62e42 	.word	0x3fe62e42
 8016af8:	0ca86c39 	.word	0x0ca86c39
 8016afc:	be205c61 	.word	0xbe205c61
 8016b00:	72bea4d0 	.word	0x72bea4d0
 8016b04:	3e663769 	.word	0x3e663769
 8016b08:	c5d26bf1 	.word	0xc5d26bf1
 8016b0c:	3ebbbd41 	.word	0x3ebbbd41
 8016b10:	af25de2c 	.word	0xaf25de2c
 8016b14:	3f11566a 	.word	0x3f11566a
 8016b18:	16bebd93 	.word	0x16bebd93
 8016b1c:	3f66c16c 	.word	0x3f66c16c
 8016b20:	5555553e 	.word	0x5555553e
 8016b24:	3fc55555 	.word	0x3fc55555
 8016b28:	c2f8f359 	.word	0xc2f8f359
 8016b2c:	01a56e1f 	.word	0x01a56e1f
 8016b30:	3fe00000 	.word	0x3fe00000
 8016b34:	000fffff 	.word	0x000fffff
 8016b38:	3ff00000 	.word	0x3ff00000
 8016b3c:	4090cbff 	.word	0x4090cbff
 8016b40:	3f6f3400 	.word	0x3f6f3400
 8016b44:	652b82fe 	.word	0x652b82fe
 8016b48:	3c971547 	.word	0x3c971547

08016b4c <__ieee754_sqrt>:
 8016b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b50:	ec55 4b10 	vmov	r4, r5, d0
 8016b54:	4e56      	ldr	r6, [pc, #344]	; (8016cb0 <__ieee754_sqrt+0x164>)
 8016b56:	43ae      	bics	r6, r5
 8016b58:	ee10 0a10 	vmov	r0, s0
 8016b5c:	ee10 3a10 	vmov	r3, s0
 8016b60:	4629      	mov	r1, r5
 8016b62:	462a      	mov	r2, r5
 8016b64:	d110      	bne.n	8016b88 <__ieee754_sqrt+0x3c>
 8016b66:	ee10 2a10 	vmov	r2, s0
 8016b6a:	462b      	mov	r3, r5
 8016b6c:	f7e9 fd64 	bl	8000638 <__aeabi_dmul>
 8016b70:	4602      	mov	r2, r0
 8016b72:	460b      	mov	r3, r1
 8016b74:	4620      	mov	r0, r4
 8016b76:	4629      	mov	r1, r5
 8016b78:	f7e9 fba8 	bl	80002cc <__adddf3>
 8016b7c:	4604      	mov	r4, r0
 8016b7e:	460d      	mov	r5, r1
 8016b80:	ec45 4b10 	vmov	d0, r4, r5
 8016b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b88:	2d00      	cmp	r5, #0
 8016b8a:	dc10      	bgt.n	8016bae <__ieee754_sqrt+0x62>
 8016b8c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016b90:	4330      	orrs	r0, r6
 8016b92:	d0f5      	beq.n	8016b80 <__ieee754_sqrt+0x34>
 8016b94:	b15d      	cbz	r5, 8016bae <__ieee754_sqrt+0x62>
 8016b96:	ee10 2a10 	vmov	r2, s0
 8016b9a:	462b      	mov	r3, r5
 8016b9c:	ee10 0a10 	vmov	r0, s0
 8016ba0:	f7e9 fb92 	bl	80002c8 <__aeabi_dsub>
 8016ba4:	4602      	mov	r2, r0
 8016ba6:	460b      	mov	r3, r1
 8016ba8:	f7e9 fe70 	bl	800088c <__aeabi_ddiv>
 8016bac:	e7e6      	b.n	8016b7c <__ieee754_sqrt+0x30>
 8016bae:	1509      	asrs	r1, r1, #20
 8016bb0:	d076      	beq.n	8016ca0 <__ieee754_sqrt+0x154>
 8016bb2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8016bb6:	07ce      	lsls	r6, r1, #31
 8016bb8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8016bbc:	bf5e      	ittt	pl
 8016bbe:	0fda      	lsrpl	r2, r3, #31
 8016bc0:	005b      	lslpl	r3, r3, #1
 8016bc2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8016bc6:	0fda      	lsrs	r2, r3, #31
 8016bc8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8016bcc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8016bd0:	2000      	movs	r0, #0
 8016bd2:	106d      	asrs	r5, r5, #1
 8016bd4:	005b      	lsls	r3, r3, #1
 8016bd6:	f04f 0e16 	mov.w	lr, #22
 8016bda:	4684      	mov	ip, r0
 8016bdc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8016be0:	eb0c 0401 	add.w	r4, ip, r1
 8016be4:	4294      	cmp	r4, r2
 8016be6:	bfde      	ittt	le
 8016be8:	1b12      	suble	r2, r2, r4
 8016bea:	eb04 0c01 	addle.w	ip, r4, r1
 8016bee:	1840      	addle	r0, r0, r1
 8016bf0:	0052      	lsls	r2, r2, #1
 8016bf2:	f1be 0e01 	subs.w	lr, lr, #1
 8016bf6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8016bfa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8016bfe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016c02:	d1ed      	bne.n	8016be0 <__ieee754_sqrt+0x94>
 8016c04:	4671      	mov	r1, lr
 8016c06:	2720      	movs	r7, #32
 8016c08:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8016c0c:	4562      	cmp	r2, ip
 8016c0e:	eb04 060e 	add.w	r6, r4, lr
 8016c12:	dc02      	bgt.n	8016c1a <__ieee754_sqrt+0xce>
 8016c14:	d113      	bne.n	8016c3e <__ieee754_sqrt+0xf2>
 8016c16:	429e      	cmp	r6, r3
 8016c18:	d811      	bhi.n	8016c3e <__ieee754_sqrt+0xf2>
 8016c1a:	2e00      	cmp	r6, #0
 8016c1c:	eb06 0e04 	add.w	lr, r6, r4
 8016c20:	da43      	bge.n	8016caa <__ieee754_sqrt+0x15e>
 8016c22:	f1be 0f00 	cmp.w	lr, #0
 8016c26:	db40      	blt.n	8016caa <__ieee754_sqrt+0x15e>
 8016c28:	f10c 0801 	add.w	r8, ip, #1
 8016c2c:	eba2 020c 	sub.w	r2, r2, ip
 8016c30:	429e      	cmp	r6, r3
 8016c32:	bf88      	it	hi
 8016c34:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8016c38:	1b9b      	subs	r3, r3, r6
 8016c3a:	4421      	add	r1, r4
 8016c3c:	46c4      	mov	ip, r8
 8016c3e:	0052      	lsls	r2, r2, #1
 8016c40:	3f01      	subs	r7, #1
 8016c42:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8016c46:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8016c4a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016c4e:	d1dd      	bne.n	8016c0c <__ieee754_sqrt+0xc0>
 8016c50:	4313      	orrs	r3, r2
 8016c52:	d006      	beq.n	8016c62 <__ieee754_sqrt+0x116>
 8016c54:	1c4c      	adds	r4, r1, #1
 8016c56:	bf13      	iteet	ne
 8016c58:	3101      	addne	r1, #1
 8016c5a:	3001      	addeq	r0, #1
 8016c5c:	4639      	moveq	r1, r7
 8016c5e:	f021 0101 	bicne.w	r1, r1, #1
 8016c62:	1043      	asrs	r3, r0, #1
 8016c64:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8016c68:	0849      	lsrs	r1, r1, #1
 8016c6a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8016c6e:	07c2      	lsls	r2, r0, #31
 8016c70:	bf48      	it	mi
 8016c72:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8016c76:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8016c7a:	460c      	mov	r4, r1
 8016c7c:	463d      	mov	r5, r7
 8016c7e:	e77f      	b.n	8016b80 <__ieee754_sqrt+0x34>
 8016c80:	0ada      	lsrs	r2, r3, #11
 8016c82:	3815      	subs	r0, #21
 8016c84:	055b      	lsls	r3, r3, #21
 8016c86:	2a00      	cmp	r2, #0
 8016c88:	d0fa      	beq.n	8016c80 <__ieee754_sqrt+0x134>
 8016c8a:	02d7      	lsls	r7, r2, #11
 8016c8c:	d50a      	bpl.n	8016ca4 <__ieee754_sqrt+0x158>
 8016c8e:	f1c1 0420 	rsb	r4, r1, #32
 8016c92:	fa23 f404 	lsr.w	r4, r3, r4
 8016c96:	1e4d      	subs	r5, r1, #1
 8016c98:	408b      	lsls	r3, r1
 8016c9a:	4322      	orrs	r2, r4
 8016c9c:	1b41      	subs	r1, r0, r5
 8016c9e:	e788      	b.n	8016bb2 <__ieee754_sqrt+0x66>
 8016ca0:	4608      	mov	r0, r1
 8016ca2:	e7f0      	b.n	8016c86 <__ieee754_sqrt+0x13a>
 8016ca4:	0052      	lsls	r2, r2, #1
 8016ca6:	3101      	adds	r1, #1
 8016ca8:	e7ef      	b.n	8016c8a <__ieee754_sqrt+0x13e>
 8016caa:	46e0      	mov	r8, ip
 8016cac:	e7be      	b.n	8016c2c <__ieee754_sqrt+0xe0>
 8016cae:	bf00      	nop
 8016cb0:	7ff00000 	.word	0x7ff00000

08016cb4 <fabs>:
 8016cb4:	ec51 0b10 	vmov	r0, r1, d0
 8016cb8:	ee10 2a10 	vmov	r2, s0
 8016cbc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016cc0:	ec43 2b10 	vmov	d0, r2, r3
 8016cc4:	4770      	bx	lr

08016cc6 <finite>:
 8016cc6:	b082      	sub	sp, #8
 8016cc8:	ed8d 0b00 	vstr	d0, [sp]
 8016ccc:	9801      	ldr	r0, [sp, #4]
 8016cce:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8016cd2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8016cd6:	0fc0      	lsrs	r0, r0, #31
 8016cd8:	b002      	add	sp, #8
 8016cda:	4770      	bx	lr
 8016cdc:	0000      	movs	r0, r0
	...

08016ce0 <nan>:
 8016ce0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016ce8 <nan+0x8>
 8016ce4:	4770      	bx	lr
 8016ce6:	bf00      	nop
 8016ce8:	00000000 	.word	0x00000000
 8016cec:	7ff80000 	.word	0x7ff80000

08016cf0 <rint>:
 8016cf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016cf2:	ec51 0b10 	vmov	r0, r1, d0
 8016cf6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016cfa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8016cfe:	2e13      	cmp	r6, #19
 8016d00:	ee10 4a10 	vmov	r4, s0
 8016d04:	460b      	mov	r3, r1
 8016d06:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8016d0a:	dc58      	bgt.n	8016dbe <rint+0xce>
 8016d0c:	2e00      	cmp	r6, #0
 8016d0e:	da2b      	bge.n	8016d68 <rint+0x78>
 8016d10:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8016d14:	4302      	orrs	r2, r0
 8016d16:	d023      	beq.n	8016d60 <rint+0x70>
 8016d18:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8016d1c:	4302      	orrs	r2, r0
 8016d1e:	4254      	negs	r4, r2
 8016d20:	4314      	orrs	r4, r2
 8016d22:	0c4b      	lsrs	r3, r1, #17
 8016d24:	0b24      	lsrs	r4, r4, #12
 8016d26:	045b      	lsls	r3, r3, #17
 8016d28:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8016d2c:	ea44 0103 	orr.w	r1, r4, r3
 8016d30:	4b32      	ldr	r3, [pc, #200]	; (8016dfc <rint+0x10c>)
 8016d32:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016d36:	e9d3 6700 	ldrd	r6, r7, [r3]
 8016d3a:	4602      	mov	r2, r0
 8016d3c:	460b      	mov	r3, r1
 8016d3e:	4630      	mov	r0, r6
 8016d40:	4639      	mov	r1, r7
 8016d42:	f7e9 fac3 	bl	80002cc <__adddf3>
 8016d46:	e9cd 0100 	strd	r0, r1, [sp]
 8016d4a:	463b      	mov	r3, r7
 8016d4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016d50:	4632      	mov	r2, r6
 8016d52:	f7e9 fab9 	bl	80002c8 <__aeabi_dsub>
 8016d56:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016d5a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8016d5e:	4639      	mov	r1, r7
 8016d60:	ec41 0b10 	vmov	d0, r0, r1
 8016d64:	b003      	add	sp, #12
 8016d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d68:	4a25      	ldr	r2, [pc, #148]	; (8016e00 <rint+0x110>)
 8016d6a:	4132      	asrs	r2, r6
 8016d6c:	ea01 0702 	and.w	r7, r1, r2
 8016d70:	4307      	orrs	r7, r0
 8016d72:	d0f5      	beq.n	8016d60 <rint+0x70>
 8016d74:	0851      	lsrs	r1, r2, #1
 8016d76:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8016d7a:	4314      	orrs	r4, r2
 8016d7c:	d00c      	beq.n	8016d98 <rint+0xa8>
 8016d7e:	ea23 0201 	bic.w	r2, r3, r1
 8016d82:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8016d86:	2e13      	cmp	r6, #19
 8016d88:	fa43 f606 	asr.w	r6, r3, r6
 8016d8c:	bf0c      	ite	eq
 8016d8e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8016d92:	2400      	movne	r4, #0
 8016d94:	ea42 0306 	orr.w	r3, r2, r6
 8016d98:	4918      	ldr	r1, [pc, #96]	; (8016dfc <rint+0x10c>)
 8016d9a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8016d9e:	4622      	mov	r2, r4
 8016da0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016da4:	4620      	mov	r0, r4
 8016da6:	4629      	mov	r1, r5
 8016da8:	f7e9 fa90 	bl	80002cc <__adddf3>
 8016dac:	e9cd 0100 	strd	r0, r1, [sp]
 8016db0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016db4:	4622      	mov	r2, r4
 8016db6:	462b      	mov	r3, r5
 8016db8:	f7e9 fa86 	bl	80002c8 <__aeabi_dsub>
 8016dbc:	e7d0      	b.n	8016d60 <rint+0x70>
 8016dbe:	2e33      	cmp	r6, #51	; 0x33
 8016dc0:	dd07      	ble.n	8016dd2 <rint+0xe2>
 8016dc2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8016dc6:	d1cb      	bne.n	8016d60 <rint+0x70>
 8016dc8:	ee10 2a10 	vmov	r2, s0
 8016dcc:	f7e9 fa7e 	bl	80002cc <__adddf3>
 8016dd0:	e7c6      	b.n	8016d60 <rint+0x70>
 8016dd2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8016dd6:	f04f 36ff 	mov.w	r6, #4294967295
 8016dda:	40d6      	lsrs	r6, r2
 8016ddc:	4230      	tst	r0, r6
 8016dde:	d0bf      	beq.n	8016d60 <rint+0x70>
 8016de0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8016de4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8016de8:	bf1f      	itttt	ne
 8016dea:	ea24 0101 	bicne.w	r1, r4, r1
 8016dee:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8016df2:	fa44 f202 	asrne.w	r2, r4, r2
 8016df6:	ea41 0402 	orrne.w	r4, r1, r2
 8016dfa:	e7cd      	b.n	8016d98 <rint+0xa8>
 8016dfc:	0801d720 	.word	0x0801d720
 8016e00:	000fffff 	.word	0x000fffff
 8016e04:	00000000 	.word	0x00000000

08016e08 <scalbn>:
 8016e08:	b570      	push	{r4, r5, r6, lr}
 8016e0a:	ec55 4b10 	vmov	r4, r5, d0
 8016e0e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8016e12:	4606      	mov	r6, r0
 8016e14:	462b      	mov	r3, r5
 8016e16:	b99a      	cbnz	r2, 8016e40 <scalbn+0x38>
 8016e18:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8016e1c:	4323      	orrs	r3, r4
 8016e1e:	d036      	beq.n	8016e8e <scalbn+0x86>
 8016e20:	4b39      	ldr	r3, [pc, #228]	; (8016f08 <scalbn+0x100>)
 8016e22:	4629      	mov	r1, r5
 8016e24:	ee10 0a10 	vmov	r0, s0
 8016e28:	2200      	movs	r2, #0
 8016e2a:	f7e9 fc05 	bl	8000638 <__aeabi_dmul>
 8016e2e:	4b37      	ldr	r3, [pc, #220]	; (8016f0c <scalbn+0x104>)
 8016e30:	429e      	cmp	r6, r3
 8016e32:	4604      	mov	r4, r0
 8016e34:	460d      	mov	r5, r1
 8016e36:	da10      	bge.n	8016e5a <scalbn+0x52>
 8016e38:	a32b      	add	r3, pc, #172	; (adr r3, 8016ee8 <scalbn+0xe0>)
 8016e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e3e:	e03a      	b.n	8016eb6 <scalbn+0xae>
 8016e40:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8016e44:	428a      	cmp	r2, r1
 8016e46:	d10c      	bne.n	8016e62 <scalbn+0x5a>
 8016e48:	ee10 2a10 	vmov	r2, s0
 8016e4c:	4620      	mov	r0, r4
 8016e4e:	4629      	mov	r1, r5
 8016e50:	f7e9 fa3c 	bl	80002cc <__adddf3>
 8016e54:	4604      	mov	r4, r0
 8016e56:	460d      	mov	r5, r1
 8016e58:	e019      	b.n	8016e8e <scalbn+0x86>
 8016e5a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016e5e:	460b      	mov	r3, r1
 8016e60:	3a36      	subs	r2, #54	; 0x36
 8016e62:	4432      	add	r2, r6
 8016e64:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8016e68:	428a      	cmp	r2, r1
 8016e6a:	dd08      	ble.n	8016e7e <scalbn+0x76>
 8016e6c:	2d00      	cmp	r5, #0
 8016e6e:	a120      	add	r1, pc, #128	; (adr r1, 8016ef0 <scalbn+0xe8>)
 8016e70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016e74:	da1c      	bge.n	8016eb0 <scalbn+0xa8>
 8016e76:	a120      	add	r1, pc, #128	; (adr r1, 8016ef8 <scalbn+0xf0>)
 8016e78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016e7c:	e018      	b.n	8016eb0 <scalbn+0xa8>
 8016e7e:	2a00      	cmp	r2, #0
 8016e80:	dd08      	ble.n	8016e94 <scalbn+0x8c>
 8016e82:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016e86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016e8a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016e8e:	ec45 4b10 	vmov	d0, r4, r5
 8016e92:	bd70      	pop	{r4, r5, r6, pc}
 8016e94:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8016e98:	da19      	bge.n	8016ece <scalbn+0xc6>
 8016e9a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016e9e:	429e      	cmp	r6, r3
 8016ea0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8016ea4:	dd0a      	ble.n	8016ebc <scalbn+0xb4>
 8016ea6:	a112      	add	r1, pc, #72	; (adr r1, 8016ef0 <scalbn+0xe8>)
 8016ea8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d1e2      	bne.n	8016e76 <scalbn+0x6e>
 8016eb0:	a30f      	add	r3, pc, #60	; (adr r3, 8016ef0 <scalbn+0xe8>)
 8016eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016eb6:	f7e9 fbbf 	bl	8000638 <__aeabi_dmul>
 8016eba:	e7cb      	b.n	8016e54 <scalbn+0x4c>
 8016ebc:	a10a      	add	r1, pc, #40	; (adr r1, 8016ee8 <scalbn+0xe0>)
 8016ebe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d0b8      	beq.n	8016e38 <scalbn+0x30>
 8016ec6:	a10e      	add	r1, pc, #56	; (adr r1, 8016f00 <scalbn+0xf8>)
 8016ec8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016ecc:	e7b4      	b.n	8016e38 <scalbn+0x30>
 8016ece:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016ed2:	3236      	adds	r2, #54	; 0x36
 8016ed4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016ed8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8016edc:	4620      	mov	r0, r4
 8016ede:	4b0c      	ldr	r3, [pc, #48]	; (8016f10 <scalbn+0x108>)
 8016ee0:	2200      	movs	r2, #0
 8016ee2:	e7e8      	b.n	8016eb6 <scalbn+0xae>
 8016ee4:	f3af 8000 	nop.w
 8016ee8:	c2f8f359 	.word	0xc2f8f359
 8016eec:	01a56e1f 	.word	0x01a56e1f
 8016ef0:	8800759c 	.word	0x8800759c
 8016ef4:	7e37e43c 	.word	0x7e37e43c
 8016ef8:	8800759c 	.word	0x8800759c
 8016efc:	fe37e43c 	.word	0xfe37e43c
 8016f00:	c2f8f359 	.word	0xc2f8f359
 8016f04:	81a56e1f 	.word	0x81a56e1f
 8016f08:	43500000 	.word	0x43500000
 8016f0c:	ffff3cb0 	.word	0xffff3cb0
 8016f10:	3c900000 	.word	0x3c900000

08016f14 <abort>:
 8016f14:	b508      	push	{r3, lr}
 8016f16:	2006      	movs	r0, #6
 8016f18:	f001 f9c2 	bl	80182a0 <raise>
 8016f1c:	2001      	movs	r0, #1
 8016f1e:	f005 fa1f 	bl	801c360 <_exit>
	...

08016f24 <__errno>:
 8016f24:	4b01      	ldr	r3, [pc, #4]	; (8016f2c <__errno+0x8>)
 8016f26:	6818      	ldr	r0, [r3, #0]
 8016f28:	4770      	bx	lr
 8016f2a:	bf00      	nop
 8016f2c:	200000f8 	.word	0x200000f8

08016f30 <std>:
 8016f30:	2300      	movs	r3, #0
 8016f32:	b510      	push	{r4, lr}
 8016f34:	4604      	mov	r4, r0
 8016f36:	e9c0 3300 	strd	r3, r3, [r0]
 8016f3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016f3e:	6083      	str	r3, [r0, #8]
 8016f40:	8181      	strh	r1, [r0, #12]
 8016f42:	6643      	str	r3, [r0, #100]	; 0x64
 8016f44:	81c2      	strh	r2, [r0, #14]
 8016f46:	6183      	str	r3, [r0, #24]
 8016f48:	4619      	mov	r1, r3
 8016f4a:	2208      	movs	r2, #8
 8016f4c:	305c      	adds	r0, #92	; 0x5c
 8016f4e:	f000 f945 	bl	80171dc <memset>
 8016f52:	4b05      	ldr	r3, [pc, #20]	; (8016f68 <std+0x38>)
 8016f54:	6263      	str	r3, [r4, #36]	; 0x24
 8016f56:	4b05      	ldr	r3, [pc, #20]	; (8016f6c <std+0x3c>)
 8016f58:	62a3      	str	r3, [r4, #40]	; 0x28
 8016f5a:	4b05      	ldr	r3, [pc, #20]	; (8016f70 <std+0x40>)
 8016f5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016f5e:	4b05      	ldr	r3, [pc, #20]	; (8016f74 <std+0x44>)
 8016f60:	6224      	str	r4, [r4, #32]
 8016f62:	6323      	str	r3, [r4, #48]	; 0x30
 8016f64:	bd10      	pop	{r4, pc}
 8016f66:	bf00      	nop
 8016f68:	08018371 	.word	0x08018371
 8016f6c:	08018397 	.word	0x08018397
 8016f70:	080183cf 	.word	0x080183cf
 8016f74:	080183f3 	.word	0x080183f3

08016f78 <_cleanup_r>:
 8016f78:	4901      	ldr	r1, [pc, #4]	; (8016f80 <_cleanup_r+0x8>)
 8016f7a:	f000 b8af 	b.w	80170dc <_fwalk_reent>
 8016f7e:	bf00      	nop
 8016f80:	0801a315 	.word	0x0801a315

08016f84 <__sfmoreglue>:
 8016f84:	b570      	push	{r4, r5, r6, lr}
 8016f86:	1e4a      	subs	r2, r1, #1
 8016f88:	2568      	movs	r5, #104	; 0x68
 8016f8a:	4355      	muls	r5, r2
 8016f8c:	460e      	mov	r6, r1
 8016f8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016f92:	f000 f97b 	bl	801728c <_malloc_r>
 8016f96:	4604      	mov	r4, r0
 8016f98:	b140      	cbz	r0, 8016fac <__sfmoreglue+0x28>
 8016f9a:	2100      	movs	r1, #0
 8016f9c:	e9c0 1600 	strd	r1, r6, [r0]
 8016fa0:	300c      	adds	r0, #12
 8016fa2:	60a0      	str	r0, [r4, #8]
 8016fa4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016fa8:	f000 f918 	bl	80171dc <memset>
 8016fac:	4620      	mov	r0, r4
 8016fae:	bd70      	pop	{r4, r5, r6, pc}

08016fb0 <__sfp_lock_acquire>:
 8016fb0:	4801      	ldr	r0, [pc, #4]	; (8016fb8 <__sfp_lock_acquire+0x8>)
 8016fb2:	f000 b8d8 	b.w	8017166 <__retarget_lock_acquire_recursive>
 8016fb6:	bf00      	nop
 8016fb8:	2000d0c4 	.word	0x2000d0c4

08016fbc <__sfp_lock_release>:
 8016fbc:	4801      	ldr	r0, [pc, #4]	; (8016fc4 <__sfp_lock_release+0x8>)
 8016fbe:	f000 b8d3 	b.w	8017168 <__retarget_lock_release_recursive>
 8016fc2:	bf00      	nop
 8016fc4:	2000d0c4 	.word	0x2000d0c4

08016fc8 <__sinit_lock_acquire>:
 8016fc8:	4801      	ldr	r0, [pc, #4]	; (8016fd0 <__sinit_lock_acquire+0x8>)
 8016fca:	f000 b8cc 	b.w	8017166 <__retarget_lock_acquire_recursive>
 8016fce:	bf00      	nop
 8016fd0:	2000d0bf 	.word	0x2000d0bf

08016fd4 <__sinit_lock_release>:
 8016fd4:	4801      	ldr	r0, [pc, #4]	; (8016fdc <__sinit_lock_release+0x8>)
 8016fd6:	f000 b8c7 	b.w	8017168 <__retarget_lock_release_recursive>
 8016fda:	bf00      	nop
 8016fdc:	2000d0bf 	.word	0x2000d0bf

08016fe0 <__sinit>:
 8016fe0:	b510      	push	{r4, lr}
 8016fe2:	4604      	mov	r4, r0
 8016fe4:	f7ff fff0 	bl	8016fc8 <__sinit_lock_acquire>
 8016fe8:	69a3      	ldr	r3, [r4, #24]
 8016fea:	b11b      	cbz	r3, 8016ff4 <__sinit+0x14>
 8016fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ff0:	f7ff bff0 	b.w	8016fd4 <__sinit_lock_release>
 8016ff4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016ff8:	6523      	str	r3, [r4, #80]	; 0x50
 8016ffa:	4b13      	ldr	r3, [pc, #76]	; (8017048 <__sinit+0x68>)
 8016ffc:	4a13      	ldr	r2, [pc, #76]	; (801704c <__sinit+0x6c>)
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	62a2      	str	r2, [r4, #40]	; 0x28
 8017002:	42a3      	cmp	r3, r4
 8017004:	bf04      	itt	eq
 8017006:	2301      	moveq	r3, #1
 8017008:	61a3      	streq	r3, [r4, #24]
 801700a:	4620      	mov	r0, r4
 801700c:	f000 f820 	bl	8017050 <__sfp>
 8017010:	6060      	str	r0, [r4, #4]
 8017012:	4620      	mov	r0, r4
 8017014:	f000 f81c 	bl	8017050 <__sfp>
 8017018:	60a0      	str	r0, [r4, #8]
 801701a:	4620      	mov	r0, r4
 801701c:	f000 f818 	bl	8017050 <__sfp>
 8017020:	2200      	movs	r2, #0
 8017022:	60e0      	str	r0, [r4, #12]
 8017024:	2104      	movs	r1, #4
 8017026:	6860      	ldr	r0, [r4, #4]
 8017028:	f7ff ff82 	bl	8016f30 <std>
 801702c:	68a0      	ldr	r0, [r4, #8]
 801702e:	2201      	movs	r2, #1
 8017030:	2109      	movs	r1, #9
 8017032:	f7ff ff7d 	bl	8016f30 <std>
 8017036:	68e0      	ldr	r0, [r4, #12]
 8017038:	2202      	movs	r2, #2
 801703a:	2112      	movs	r1, #18
 801703c:	f7ff ff78 	bl	8016f30 <std>
 8017040:	2301      	movs	r3, #1
 8017042:	61a3      	str	r3, [r4, #24]
 8017044:	e7d2      	b.n	8016fec <__sinit+0xc>
 8017046:	bf00      	nop
 8017048:	0801d894 	.word	0x0801d894
 801704c:	08016f79 	.word	0x08016f79

08017050 <__sfp>:
 8017050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017052:	4607      	mov	r7, r0
 8017054:	f7ff ffac 	bl	8016fb0 <__sfp_lock_acquire>
 8017058:	4b1e      	ldr	r3, [pc, #120]	; (80170d4 <__sfp+0x84>)
 801705a:	681e      	ldr	r6, [r3, #0]
 801705c:	69b3      	ldr	r3, [r6, #24]
 801705e:	b913      	cbnz	r3, 8017066 <__sfp+0x16>
 8017060:	4630      	mov	r0, r6
 8017062:	f7ff ffbd 	bl	8016fe0 <__sinit>
 8017066:	3648      	adds	r6, #72	; 0x48
 8017068:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801706c:	3b01      	subs	r3, #1
 801706e:	d503      	bpl.n	8017078 <__sfp+0x28>
 8017070:	6833      	ldr	r3, [r6, #0]
 8017072:	b30b      	cbz	r3, 80170b8 <__sfp+0x68>
 8017074:	6836      	ldr	r6, [r6, #0]
 8017076:	e7f7      	b.n	8017068 <__sfp+0x18>
 8017078:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801707c:	b9d5      	cbnz	r5, 80170b4 <__sfp+0x64>
 801707e:	4b16      	ldr	r3, [pc, #88]	; (80170d8 <__sfp+0x88>)
 8017080:	60e3      	str	r3, [r4, #12]
 8017082:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017086:	6665      	str	r5, [r4, #100]	; 0x64
 8017088:	f000 f86c 	bl	8017164 <__retarget_lock_init_recursive>
 801708c:	f7ff ff96 	bl	8016fbc <__sfp_lock_release>
 8017090:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017094:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017098:	6025      	str	r5, [r4, #0]
 801709a:	61a5      	str	r5, [r4, #24]
 801709c:	2208      	movs	r2, #8
 801709e:	4629      	mov	r1, r5
 80170a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80170a4:	f000 f89a 	bl	80171dc <memset>
 80170a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80170ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80170b0:	4620      	mov	r0, r4
 80170b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170b4:	3468      	adds	r4, #104	; 0x68
 80170b6:	e7d9      	b.n	801706c <__sfp+0x1c>
 80170b8:	2104      	movs	r1, #4
 80170ba:	4638      	mov	r0, r7
 80170bc:	f7ff ff62 	bl	8016f84 <__sfmoreglue>
 80170c0:	4604      	mov	r4, r0
 80170c2:	6030      	str	r0, [r6, #0]
 80170c4:	2800      	cmp	r0, #0
 80170c6:	d1d5      	bne.n	8017074 <__sfp+0x24>
 80170c8:	f7ff ff78 	bl	8016fbc <__sfp_lock_release>
 80170cc:	230c      	movs	r3, #12
 80170ce:	603b      	str	r3, [r7, #0]
 80170d0:	e7ee      	b.n	80170b0 <__sfp+0x60>
 80170d2:	bf00      	nop
 80170d4:	0801d894 	.word	0x0801d894
 80170d8:	ffff0001 	.word	0xffff0001

080170dc <_fwalk_reent>:
 80170dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80170e0:	4606      	mov	r6, r0
 80170e2:	4688      	mov	r8, r1
 80170e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80170e8:	2700      	movs	r7, #0
 80170ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80170ee:	f1b9 0901 	subs.w	r9, r9, #1
 80170f2:	d505      	bpl.n	8017100 <_fwalk_reent+0x24>
 80170f4:	6824      	ldr	r4, [r4, #0]
 80170f6:	2c00      	cmp	r4, #0
 80170f8:	d1f7      	bne.n	80170ea <_fwalk_reent+0xe>
 80170fa:	4638      	mov	r0, r7
 80170fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017100:	89ab      	ldrh	r3, [r5, #12]
 8017102:	2b01      	cmp	r3, #1
 8017104:	d907      	bls.n	8017116 <_fwalk_reent+0x3a>
 8017106:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801710a:	3301      	adds	r3, #1
 801710c:	d003      	beq.n	8017116 <_fwalk_reent+0x3a>
 801710e:	4629      	mov	r1, r5
 8017110:	4630      	mov	r0, r6
 8017112:	47c0      	blx	r8
 8017114:	4307      	orrs	r7, r0
 8017116:	3568      	adds	r5, #104	; 0x68
 8017118:	e7e9      	b.n	80170ee <_fwalk_reent+0x12>
	...

0801711c <__libc_init_array>:
 801711c:	b570      	push	{r4, r5, r6, lr}
 801711e:	4d0d      	ldr	r5, [pc, #52]	; (8017154 <__libc_init_array+0x38>)
 8017120:	4c0d      	ldr	r4, [pc, #52]	; (8017158 <__libc_init_array+0x3c>)
 8017122:	1b64      	subs	r4, r4, r5
 8017124:	10a4      	asrs	r4, r4, #2
 8017126:	2600      	movs	r6, #0
 8017128:	42a6      	cmp	r6, r4
 801712a:	d109      	bne.n	8017140 <__libc_init_array+0x24>
 801712c:	4d0b      	ldr	r5, [pc, #44]	; (801715c <__libc_init_array+0x40>)
 801712e:	4c0c      	ldr	r4, [pc, #48]	; (8017160 <__libc_init_array+0x44>)
 8017130:	f005 f918 	bl	801c364 <_init>
 8017134:	1b64      	subs	r4, r4, r5
 8017136:	10a4      	asrs	r4, r4, #2
 8017138:	2600      	movs	r6, #0
 801713a:	42a6      	cmp	r6, r4
 801713c:	d105      	bne.n	801714a <__libc_init_array+0x2e>
 801713e:	bd70      	pop	{r4, r5, r6, pc}
 8017140:	f855 3b04 	ldr.w	r3, [r5], #4
 8017144:	4798      	blx	r3
 8017146:	3601      	adds	r6, #1
 8017148:	e7ee      	b.n	8017128 <__libc_init_array+0xc>
 801714a:	f855 3b04 	ldr.w	r3, [r5], #4
 801714e:	4798      	blx	r3
 8017150:	3601      	adds	r6, #1
 8017152:	e7f2      	b.n	801713a <__libc_init_array+0x1e>
 8017154:	0801dc00 	.word	0x0801dc00
 8017158:	0801dc00 	.word	0x0801dc00
 801715c:	0801dc00 	.word	0x0801dc00
 8017160:	0801dc08 	.word	0x0801dc08

08017164 <__retarget_lock_init_recursive>:
 8017164:	4770      	bx	lr

08017166 <__retarget_lock_acquire_recursive>:
 8017166:	4770      	bx	lr

08017168 <__retarget_lock_release_recursive>:
 8017168:	4770      	bx	lr
	...

0801716c <malloc>:
 801716c:	4b02      	ldr	r3, [pc, #8]	; (8017178 <malloc+0xc>)
 801716e:	4601      	mov	r1, r0
 8017170:	6818      	ldr	r0, [r3, #0]
 8017172:	f000 b88b 	b.w	801728c <_malloc_r>
 8017176:	bf00      	nop
 8017178:	200000f8 	.word	0x200000f8

0801717c <free>:
 801717c:	4b02      	ldr	r3, [pc, #8]	; (8017188 <free+0xc>)
 801717e:	4601      	mov	r1, r0
 8017180:	6818      	ldr	r0, [r3, #0]
 8017182:	f000 b833 	b.w	80171ec <_free_r>
 8017186:	bf00      	nop
 8017188:	200000f8 	.word	0x200000f8

0801718c <memcpy>:
 801718c:	440a      	add	r2, r1
 801718e:	4291      	cmp	r1, r2
 8017190:	f100 33ff 	add.w	r3, r0, #4294967295
 8017194:	d100      	bne.n	8017198 <memcpy+0xc>
 8017196:	4770      	bx	lr
 8017198:	b510      	push	{r4, lr}
 801719a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801719e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80171a2:	4291      	cmp	r1, r2
 80171a4:	d1f9      	bne.n	801719a <memcpy+0xe>
 80171a6:	bd10      	pop	{r4, pc}

080171a8 <memmove>:
 80171a8:	4288      	cmp	r0, r1
 80171aa:	b510      	push	{r4, lr}
 80171ac:	eb01 0402 	add.w	r4, r1, r2
 80171b0:	d902      	bls.n	80171b8 <memmove+0x10>
 80171b2:	4284      	cmp	r4, r0
 80171b4:	4623      	mov	r3, r4
 80171b6:	d807      	bhi.n	80171c8 <memmove+0x20>
 80171b8:	1e43      	subs	r3, r0, #1
 80171ba:	42a1      	cmp	r1, r4
 80171bc:	d008      	beq.n	80171d0 <memmove+0x28>
 80171be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80171c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80171c6:	e7f8      	b.n	80171ba <memmove+0x12>
 80171c8:	4402      	add	r2, r0
 80171ca:	4601      	mov	r1, r0
 80171cc:	428a      	cmp	r2, r1
 80171ce:	d100      	bne.n	80171d2 <memmove+0x2a>
 80171d0:	bd10      	pop	{r4, pc}
 80171d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80171d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80171da:	e7f7      	b.n	80171cc <memmove+0x24>

080171dc <memset>:
 80171dc:	4402      	add	r2, r0
 80171de:	4603      	mov	r3, r0
 80171e0:	4293      	cmp	r3, r2
 80171e2:	d100      	bne.n	80171e6 <memset+0xa>
 80171e4:	4770      	bx	lr
 80171e6:	f803 1b01 	strb.w	r1, [r3], #1
 80171ea:	e7f9      	b.n	80171e0 <memset+0x4>

080171ec <_free_r>:
 80171ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80171ee:	2900      	cmp	r1, #0
 80171f0:	d048      	beq.n	8017284 <_free_r+0x98>
 80171f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80171f6:	9001      	str	r0, [sp, #4]
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	f1a1 0404 	sub.w	r4, r1, #4
 80171fe:	bfb8      	it	lt
 8017200:	18e4      	addlt	r4, r4, r3
 8017202:	f003 fcd1 	bl	801aba8 <__malloc_lock>
 8017206:	4a20      	ldr	r2, [pc, #128]	; (8017288 <_free_r+0x9c>)
 8017208:	9801      	ldr	r0, [sp, #4]
 801720a:	6813      	ldr	r3, [r2, #0]
 801720c:	4615      	mov	r5, r2
 801720e:	b933      	cbnz	r3, 801721e <_free_r+0x32>
 8017210:	6063      	str	r3, [r4, #4]
 8017212:	6014      	str	r4, [r2, #0]
 8017214:	b003      	add	sp, #12
 8017216:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801721a:	f003 bccb 	b.w	801abb4 <__malloc_unlock>
 801721e:	42a3      	cmp	r3, r4
 8017220:	d90b      	bls.n	801723a <_free_r+0x4e>
 8017222:	6821      	ldr	r1, [r4, #0]
 8017224:	1862      	adds	r2, r4, r1
 8017226:	4293      	cmp	r3, r2
 8017228:	bf04      	itt	eq
 801722a:	681a      	ldreq	r2, [r3, #0]
 801722c:	685b      	ldreq	r3, [r3, #4]
 801722e:	6063      	str	r3, [r4, #4]
 8017230:	bf04      	itt	eq
 8017232:	1852      	addeq	r2, r2, r1
 8017234:	6022      	streq	r2, [r4, #0]
 8017236:	602c      	str	r4, [r5, #0]
 8017238:	e7ec      	b.n	8017214 <_free_r+0x28>
 801723a:	461a      	mov	r2, r3
 801723c:	685b      	ldr	r3, [r3, #4]
 801723e:	b10b      	cbz	r3, 8017244 <_free_r+0x58>
 8017240:	42a3      	cmp	r3, r4
 8017242:	d9fa      	bls.n	801723a <_free_r+0x4e>
 8017244:	6811      	ldr	r1, [r2, #0]
 8017246:	1855      	adds	r5, r2, r1
 8017248:	42a5      	cmp	r5, r4
 801724a:	d10b      	bne.n	8017264 <_free_r+0x78>
 801724c:	6824      	ldr	r4, [r4, #0]
 801724e:	4421      	add	r1, r4
 8017250:	1854      	adds	r4, r2, r1
 8017252:	42a3      	cmp	r3, r4
 8017254:	6011      	str	r1, [r2, #0]
 8017256:	d1dd      	bne.n	8017214 <_free_r+0x28>
 8017258:	681c      	ldr	r4, [r3, #0]
 801725a:	685b      	ldr	r3, [r3, #4]
 801725c:	6053      	str	r3, [r2, #4]
 801725e:	4421      	add	r1, r4
 8017260:	6011      	str	r1, [r2, #0]
 8017262:	e7d7      	b.n	8017214 <_free_r+0x28>
 8017264:	d902      	bls.n	801726c <_free_r+0x80>
 8017266:	230c      	movs	r3, #12
 8017268:	6003      	str	r3, [r0, #0]
 801726a:	e7d3      	b.n	8017214 <_free_r+0x28>
 801726c:	6825      	ldr	r5, [r4, #0]
 801726e:	1961      	adds	r1, r4, r5
 8017270:	428b      	cmp	r3, r1
 8017272:	bf04      	itt	eq
 8017274:	6819      	ldreq	r1, [r3, #0]
 8017276:	685b      	ldreq	r3, [r3, #4]
 8017278:	6063      	str	r3, [r4, #4]
 801727a:	bf04      	itt	eq
 801727c:	1949      	addeq	r1, r1, r5
 801727e:	6021      	streq	r1, [r4, #0]
 8017280:	6054      	str	r4, [r2, #4]
 8017282:	e7c7      	b.n	8017214 <_free_r+0x28>
 8017284:	b003      	add	sp, #12
 8017286:	bd30      	pop	{r4, r5, pc}
 8017288:	20008590 	.word	0x20008590

0801728c <_malloc_r>:
 801728c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801728e:	1ccd      	adds	r5, r1, #3
 8017290:	f025 0503 	bic.w	r5, r5, #3
 8017294:	3508      	adds	r5, #8
 8017296:	2d0c      	cmp	r5, #12
 8017298:	bf38      	it	cc
 801729a:	250c      	movcc	r5, #12
 801729c:	2d00      	cmp	r5, #0
 801729e:	4606      	mov	r6, r0
 80172a0:	db01      	blt.n	80172a6 <_malloc_r+0x1a>
 80172a2:	42a9      	cmp	r1, r5
 80172a4:	d903      	bls.n	80172ae <_malloc_r+0x22>
 80172a6:	230c      	movs	r3, #12
 80172a8:	6033      	str	r3, [r6, #0]
 80172aa:	2000      	movs	r0, #0
 80172ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172ae:	f003 fc7b 	bl	801aba8 <__malloc_lock>
 80172b2:	4921      	ldr	r1, [pc, #132]	; (8017338 <_malloc_r+0xac>)
 80172b4:	680a      	ldr	r2, [r1, #0]
 80172b6:	4614      	mov	r4, r2
 80172b8:	b99c      	cbnz	r4, 80172e2 <_malloc_r+0x56>
 80172ba:	4f20      	ldr	r7, [pc, #128]	; (801733c <_malloc_r+0xb0>)
 80172bc:	683b      	ldr	r3, [r7, #0]
 80172be:	b923      	cbnz	r3, 80172ca <_malloc_r+0x3e>
 80172c0:	4621      	mov	r1, r4
 80172c2:	4630      	mov	r0, r6
 80172c4:	f000 ffae 	bl	8018224 <_sbrk_r>
 80172c8:	6038      	str	r0, [r7, #0]
 80172ca:	4629      	mov	r1, r5
 80172cc:	4630      	mov	r0, r6
 80172ce:	f000 ffa9 	bl	8018224 <_sbrk_r>
 80172d2:	1c43      	adds	r3, r0, #1
 80172d4:	d123      	bne.n	801731e <_malloc_r+0x92>
 80172d6:	230c      	movs	r3, #12
 80172d8:	6033      	str	r3, [r6, #0]
 80172da:	4630      	mov	r0, r6
 80172dc:	f003 fc6a 	bl	801abb4 <__malloc_unlock>
 80172e0:	e7e3      	b.n	80172aa <_malloc_r+0x1e>
 80172e2:	6823      	ldr	r3, [r4, #0]
 80172e4:	1b5b      	subs	r3, r3, r5
 80172e6:	d417      	bmi.n	8017318 <_malloc_r+0x8c>
 80172e8:	2b0b      	cmp	r3, #11
 80172ea:	d903      	bls.n	80172f4 <_malloc_r+0x68>
 80172ec:	6023      	str	r3, [r4, #0]
 80172ee:	441c      	add	r4, r3
 80172f0:	6025      	str	r5, [r4, #0]
 80172f2:	e004      	b.n	80172fe <_malloc_r+0x72>
 80172f4:	6863      	ldr	r3, [r4, #4]
 80172f6:	42a2      	cmp	r2, r4
 80172f8:	bf0c      	ite	eq
 80172fa:	600b      	streq	r3, [r1, #0]
 80172fc:	6053      	strne	r3, [r2, #4]
 80172fe:	4630      	mov	r0, r6
 8017300:	f003 fc58 	bl	801abb4 <__malloc_unlock>
 8017304:	f104 000b 	add.w	r0, r4, #11
 8017308:	1d23      	adds	r3, r4, #4
 801730a:	f020 0007 	bic.w	r0, r0, #7
 801730e:	1ac2      	subs	r2, r0, r3
 8017310:	d0cc      	beq.n	80172ac <_malloc_r+0x20>
 8017312:	1a1b      	subs	r3, r3, r0
 8017314:	50a3      	str	r3, [r4, r2]
 8017316:	e7c9      	b.n	80172ac <_malloc_r+0x20>
 8017318:	4622      	mov	r2, r4
 801731a:	6864      	ldr	r4, [r4, #4]
 801731c:	e7cc      	b.n	80172b8 <_malloc_r+0x2c>
 801731e:	1cc4      	adds	r4, r0, #3
 8017320:	f024 0403 	bic.w	r4, r4, #3
 8017324:	42a0      	cmp	r0, r4
 8017326:	d0e3      	beq.n	80172f0 <_malloc_r+0x64>
 8017328:	1a21      	subs	r1, r4, r0
 801732a:	4630      	mov	r0, r6
 801732c:	f000 ff7a 	bl	8018224 <_sbrk_r>
 8017330:	3001      	adds	r0, #1
 8017332:	d1dd      	bne.n	80172f0 <_malloc_r+0x64>
 8017334:	e7cf      	b.n	80172d6 <_malloc_r+0x4a>
 8017336:	bf00      	nop
 8017338:	20008590 	.word	0x20008590
 801733c:	20008594 	.word	0x20008594

08017340 <__cvt>:
 8017340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017344:	ec55 4b10 	vmov	r4, r5, d0
 8017348:	2d00      	cmp	r5, #0
 801734a:	460e      	mov	r6, r1
 801734c:	4619      	mov	r1, r3
 801734e:	462b      	mov	r3, r5
 8017350:	bfbb      	ittet	lt
 8017352:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8017356:	461d      	movlt	r5, r3
 8017358:	2300      	movge	r3, #0
 801735a:	232d      	movlt	r3, #45	; 0x2d
 801735c:	700b      	strb	r3, [r1, #0]
 801735e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017360:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8017364:	4691      	mov	r9, r2
 8017366:	f023 0820 	bic.w	r8, r3, #32
 801736a:	bfbc      	itt	lt
 801736c:	4622      	movlt	r2, r4
 801736e:	4614      	movlt	r4, r2
 8017370:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017374:	d005      	beq.n	8017382 <__cvt+0x42>
 8017376:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801737a:	d100      	bne.n	801737e <__cvt+0x3e>
 801737c:	3601      	adds	r6, #1
 801737e:	2102      	movs	r1, #2
 8017380:	e000      	b.n	8017384 <__cvt+0x44>
 8017382:	2103      	movs	r1, #3
 8017384:	ab03      	add	r3, sp, #12
 8017386:	9301      	str	r3, [sp, #4]
 8017388:	ab02      	add	r3, sp, #8
 801738a:	9300      	str	r3, [sp, #0]
 801738c:	ec45 4b10 	vmov	d0, r4, r5
 8017390:	4653      	mov	r3, sl
 8017392:	4632      	mov	r2, r6
 8017394:	f002 f94c 	bl	8019630 <_dtoa_r>
 8017398:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801739c:	4607      	mov	r7, r0
 801739e:	d102      	bne.n	80173a6 <__cvt+0x66>
 80173a0:	f019 0f01 	tst.w	r9, #1
 80173a4:	d022      	beq.n	80173ec <__cvt+0xac>
 80173a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80173aa:	eb07 0906 	add.w	r9, r7, r6
 80173ae:	d110      	bne.n	80173d2 <__cvt+0x92>
 80173b0:	783b      	ldrb	r3, [r7, #0]
 80173b2:	2b30      	cmp	r3, #48	; 0x30
 80173b4:	d10a      	bne.n	80173cc <__cvt+0x8c>
 80173b6:	2200      	movs	r2, #0
 80173b8:	2300      	movs	r3, #0
 80173ba:	4620      	mov	r0, r4
 80173bc:	4629      	mov	r1, r5
 80173be:	f7e9 fba3 	bl	8000b08 <__aeabi_dcmpeq>
 80173c2:	b918      	cbnz	r0, 80173cc <__cvt+0x8c>
 80173c4:	f1c6 0601 	rsb	r6, r6, #1
 80173c8:	f8ca 6000 	str.w	r6, [sl]
 80173cc:	f8da 3000 	ldr.w	r3, [sl]
 80173d0:	4499      	add	r9, r3
 80173d2:	2200      	movs	r2, #0
 80173d4:	2300      	movs	r3, #0
 80173d6:	4620      	mov	r0, r4
 80173d8:	4629      	mov	r1, r5
 80173da:	f7e9 fb95 	bl	8000b08 <__aeabi_dcmpeq>
 80173de:	b108      	cbz	r0, 80173e4 <__cvt+0xa4>
 80173e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80173e4:	2230      	movs	r2, #48	; 0x30
 80173e6:	9b03      	ldr	r3, [sp, #12]
 80173e8:	454b      	cmp	r3, r9
 80173ea:	d307      	bcc.n	80173fc <__cvt+0xbc>
 80173ec:	9b03      	ldr	r3, [sp, #12]
 80173ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80173f0:	1bdb      	subs	r3, r3, r7
 80173f2:	4638      	mov	r0, r7
 80173f4:	6013      	str	r3, [r2, #0]
 80173f6:	b004      	add	sp, #16
 80173f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173fc:	1c59      	adds	r1, r3, #1
 80173fe:	9103      	str	r1, [sp, #12]
 8017400:	701a      	strb	r2, [r3, #0]
 8017402:	e7f0      	b.n	80173e6 <__cvt+0xa6>

08017404 <__exponent>:
 8017404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017406:	4603      	mov	r3, r0
 8017408:	2900      	cmp	r1, #0
 801740a:	bfb8      	it	lt
 801740c:	4249      	neglt	r1, r1
 801740e:	f803 2b02 	strb.w	r2, [r3], #2
 8017412:	bfb4      	ite	lt
 8017414:	222d      	movlt	r2, #45	; 0x2d
 8017416:	222b      	movge	r2, #43	; 0x2b
 8017418:	2909      	cmp	r1, #9
 801741a:	7042      	strb	r2, [r0, #1]
 801741c:	dd2a      	ble.n	8017474 <__exponent+0x70>
 801741e:	f10d 0407 	add.w	r4, sp, #7
 8017422:	46a4      	mov	ip, r4
 8017424:	270a      	movs	r7, #10
 8017426:	46a6      	mov	lr, r4
 8017428:	460a      	mov	r2, r1
 801742a:	fb91 f6f7 	sdiv	r6, r1, r7
 801742e:	fb07 1516 	mls	r5, r7, r6, r1
 8017432:	3530      	adds	r5, #48	; 0x30
 8017434:	2a63      	cmp	r2, #99	; 0x63
 8017436:	f104 34ff 	add.w	r4, r4, #4294967295
 801743a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801743e:	4631      	mov	r1, r6
 8017440:	dcf1      	bgt.n	8017426 <__exponent+0x22>
 8017442:	3130      	adds	r1, #48	; 0x30
 8017444:	f1ae 0502 	sub.w	r5, lr, #2
 8017448:	f804 1c01 	strb.w	r1, [r4, #-1]
 801744c:	1c44      	adds	r4, r0, #1
 801744e:	4629      	mov	r1, r5
 8017450:	4561      	cmp	r1, ip
 8017452:	d30a      	bcc.n	801746a <__exponent+0x66>
 8017454:	f10d 0209 	add.w	r2, sp, #9
 8017458:	eba2 020e 	sub.w	r2, r2, lr
 801745c:	4565      	cmp	r5, ip
 801745e:	bf88      	it	hi
 8017460:	2200      	movhi	r2, #0
 8017462:	4413      	add	r3, r2
 8017464:	1a18      	subs	r0, r3, r0
 8017466:	b003      	add	sp, #12
 8017468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801746a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801746e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8017472:	e7ed      	b.n	8017450 <__exponent+0x4c>
 8017474:	2330      	movs	r3, #48	; 0x30
 8017476:	3130      	adds	r1, #48	; 0x30
 8017478:	7083      	strb	r3, [r0, #2]
 801747a:	70c1      	strb	r1, [r0, #3]
 801747c:	1d03      	adds	r3, r0, #4
 801747e:	e7f1      	b.n	8017464 <__exponent+0x60>

08017480 <_printf_float>:
 8017480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017484:	ed2d 8b02 	vpush	{d8}
 8017488:	b08d      	sub	sp, #52	; 0x34
 801748a:	460c      	mov	r4, r1
 801748c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8017490:	4616      	mov	r6, r2
 8017492:	461f      	mov	r7, r3
 8017494:	4605      	mov	r5, r0
 8017496:	f003 fafb 	bl	801aa90 <_localeconv_r>
 801749a:	f8d0 a000 	ldr.w	sl, [r0]
 801749e:	4650      	mov	r0, sl
 80174a0:	f7e8 feb0 	bl	8000204 <strlen>
 80174a4:	2300      	movs	r3, #0
 80174a6:	930a      	str	r3, [sp, #40]	; 0x28
 80174a8:	6823      	ldr	r3, [r4, #0]
 80174aa:	9305      	str	r3, [sp, #20]
 80174ac:	f8d8 3000 	ldr.w	r3, [r8]
 80174b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80174b4:	3307      	adds	r3, #7
 80174b6:	f023 0307 	bic.w	r3, r3, #7
 80174ba:	f103 0208 	add.w	r2, r3, #8
 80174be:	f8c8 2000 	str.w	r2, [r8]
 80174c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80174ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80174ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80174d2:	9307      	str	r3, [sp, #28]
 80174d4:	f8cd 8018 	str.w	r8, [sp, #24]
 80174d8:	ee08 0a10 	vmov	s16, r0
 80174dc:	4b9f      	ldr	r3, [pc, #636]	; (801775c <_printf_float+0x2dc>)
 80174de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80174e2:	f04f 32ff 	mov.w	r2, #4294967295
 80174e6:	f7e9 fb41 	bl	8000b6c <__aeabi_dcmpun>
 80174ea:	bb88      	cbnz	r0, 8017550 <_printf_float+0xd0>
 80174ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80174f0:	4b9a      	ldr	r3, [pc, #616]	; (801775c <_printf_float+0x2dc>)
 80174f2:	f04f 32ff 	mov.w	r2, #4294967295
 80174f6:	f7e9 fb1b 	bl	8000b30 <__aeabi_dcmple>
 80174fa:	bb48      	cbnz	r0, 8017550 <_printf_float+0xd0>
 80174fc:	2200      	movs	r2, #0
 80174fe:	2300      	movs	r3, #0
 8017500:	4640      	mov	r0, r8
 8017502:	4649      	mov	r1, r9
 8017504:	f7e9 fb0a 	bl	8000b1c <__aeabi_dcmplt>
 8017508:	b110      	cbz	r0, 8017510 <_printf_float+0x90>
 801750a:	232d      	movs	r3, #45	; 0x2d
 801750c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017510:	4b93      	ldr	r3, [pc, #588]	; (8017760 <_printf_float+0x2e0>)
 8017512:	4894      	ldr	r0, [pc, #592]	; (8017764 <_printf_float+0x2e4>)
 8017514:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8017518:	bf94      	ite	ls
 801751a:	4698      	movls	r8, r3
 801751c:	4680      	movhi	r8, r0
 801751e:	2303      	movs	r3, #3
 8017520:	6123      	str	r3, [r4, #16]
 8017522:	9b05      	ldr	r3, [sp, #20]
 8017524:	f023 0204 	bic.w	r2, r3, #4
 8017528:	6022      	str	r2, [r4, #0]
 801752a:	f04f 0900 	mov.w	r9, #0
 801752e:	9700      	str	r7, [sp, #0]
 8017530:	4633      	mov	r3, r6
 8017532:	aa0b      	add	r2, sp, #44	; 0x2c
 8017534:	4621      	mov	r1, r4
 8017536:	4628      	mov	r0, r5
 8017538:	f000 f9d8 	bl	80178ec <_printf_common>
 801753c:	3001      	adds	r0, #1
 801753e:	f040 8090 	bne.w	8017662 <_printf_float+0x1e2>
 8017542:	f04f 30ff 	mov.w	r0, #4294967295
 8017546:	b00d      	add	sp, #52	; 0x34
 8017548:	ecbd 8b02 	vpop	{d8}
 801754c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017550:	4642      	mov	r2, r8
 8017552:	464b      	mov	r3, r9
 8017554:	4640      	mov	r0, r8
 8017556:	4649      	mov	r1, r9
 8017558:	f7e9 fb08 	bl	8000b6c <__aeabi_dcmpun>
 801755c:	b140      	cbz	r0, 8017570 <_printf_float+0xf0>
 801755e:	464b      	mov	r3, r9
 8017560:	2b00      	cmp	r3, #0
 8017562:	bfbc      	itt	lt
 8017564:	232d      	movlt	r3, #45	; 0x2d
 8017566:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801756a:	487f      	ldr	r0, [pc, #508]	; (8017768 <_printf_float+0x2e8>)
 801756c:	4b7f      	ldr	r3, [pc, #508]	; (801776c <_printf_float+0x2ec>)
 801756e:	e7d1      	b.n	8017514 <_printf_float+0x94>
 8017570:	6863      	ldr	r3, [r4, #4]
 8017572:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8017576:	9206      	str	r2, [sp, #24]
 8017578:	1c5a      	adds	r2, r3, #1
 801757a:	d13f      	bne.n	80175fc <_printf_float+0x17c>
 801757c:	2306      	movs	r3, #6
 801757e:	6063      	str	r3, [r4, #4]
 8017580:	9b05      	ldr	r3, [sp, #20]
 8017582:	6861      	ldr	r1, [r4, #4]
 8017584:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8017588:	2300      	movs	r3, #0
 801758a:	9303      	str	r3, [sp, #12]
 801758c:	ab0a      	add	r3, sp, #40	; 0x28
 801758e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8017592:	ab09      	add	r3, sp, #36	; 0x24
 8017594:	ec49 8b10 	vmov	d0, r8, r9
 8017598:	9300      	str	r3, [sp, #0]
 801759a:	6022      	str	r2, [r4, #0]
 801759c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80175a0:	4628      	mov	r0, r5
 80175a2:	f7ff fecd 	bl	8017340 <__cvt>
 80175a6:	9b06      	ldr	r3, [sp, #24]
 80175a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80175aa:	2b47      	cmp	r3, #71	; 0x47
 80175ac:	4680      	mov	r8, r0
 80175ae:	d108      	bne.n	80175c2 <_printf_float+0x142>
 80175b0:	1cc8      	adds	r0, r1, #3
 80175b2:	db02      	blt.n	80175ba <_printf_float+0x13a>
 80175b4:	6863      	ldr	r3, [r4, #4]
 80175b6:	4299      	cmp	r1, r3
 80175b8:	dd41      	ble.n	801763e <_printf_float+0x1be>
 80175ba:	f1ab 0b02 	sub.w	fp, fp, #2
 80175be:	fa5f fb8b 	uxtb.w	fp, fp
 80175c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80175c6:	d820      	bhi.n	801760a <_printf_float+0x18a>
 80175c8:	3901      	subs	r1, #1
 80175ca:	465a      	mov	r2, fp
 80175cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80175d0:	9109      	str	r1, [sp, #36]	; 0x24
 80175d2:	f7ff ff17 	bl	8017404 <__exponent>
 80175d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80175d8:	1813      	adds	r3, r2, r0
 80175da:	2a01      	cmp	r2, #1
 80175dc:	4681      	mov	r9, r0
 80175de:	6123      	str	r3, [r4, #16]
 80175e0:	dc02      	bgt.n	80175e8 <_printf_float+0x168>
 80175e2:	6822      	ldr	r2, [r4, #0]
 80175e4:	07d2      	lsls	r2, r2, #31
 80175e6:	d501      	bpl.n	80175ec <_printf_float+0x16c>
 80175e8:	3301      	adds	r3, #1
 80175ea:	6123      	str	r3, [r4, #16]
 80175ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d09c      	beq.n	801752e <_printf_float+0xae>
 80175f4:	232d      	movs	r3, #45	; 0x2d
 80175f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80175fa:	e798      	b.n	801752e <_printf_float+0xae>
 80175fc:	9a06      	ldr	r2, [sp, #24]
 80175fe:	2a47      	cmp	r2, #71	; 0x47
 8017600:	d1be      	bne.n	8017580 <_printf_float+0x100>
 8017602:	2b00      	cmp	r3, #0
 8017604:	d1bc      	bne.n	8017580 <_printf_float+0x100>
 8017606:	2301      	movs	r3, #1
 8017608:	e7b9      	b.n	801757e <_printf_float+0xfe>
 801760a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801760e:	d118      	bne.n	8017642 <_printf_float+0x1c2>
 8017610:	2900      	cmp	r1, #0
 8017612:	6863      	ldr	r3, [r4, #4]
 8017614:	dd0b      	ble.n	801762e <_printf_float+0x1ae>
 8017616:	6121      	str	r1, [r4, #16]
 8017618:	b913      	cbnz	r3, 8017620 <_printf_float+0x1a0>
 801761a:	6822      	ldr	r2, [r4, #0]
 801761c:	07d0      	lsls	r0, r2, #31
 801761e:	d502      	bpl.n	8017626 <_printf_float+0x1a6>
 8017620:	3301      	adds	r3, #1
 8017622:	440b      	add	r3, r1
 8017624:	6123      	str	r3, [r4, #16]
 8017626:	65a1      	str	r1, [r4, #88]	; 0x58
 8017628:	f04f 0900 	mov.w	r9, #0
 801762c:	e7de      	b.n	80175ec <_printf_float+0x16c>
 801762e:	b913      	cbnz	r3, 8017636 <_printf_float+0x1b6>
 8017630:	6822      	ldr	r2, [r4, #0]
 8017632:	07d2      	lsls	r2, r2, #31
 8017634:	d501      	bpl.n	801763a <_printf_float+0x1ba>
 8017636:	3302      	adds	r3, #2
 8017638:	e7f4      	b.n	8017624 <_printf_float+0x1a4>
 801763a:	2301      	movs	r3, #1
 801763c:	e7f2      	b.n	8017624 <_printf_float+0x1a4>
 801763e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8017642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017644:	4299      	cmp	r1, r3
 8017646:	db05      	blt.n	8017654 <_printf_float+0x1d4>
 8017648:	6823      	ldr	r3, [r4, #0]
 801764a:	6121      	str	r1, [r4, #16]
 801764c:	07d8      	lsls	r0, r3, #31
 801764e:	d5ea      	bpl.n	8017626 <_printf_float+0x1a6>
 8017650:	1c4b      	adds	r3, r1, #1
 8017652:	e7e7      	b.n	8017624 <_printf_float+0x1a4>
 8017654:	2900      	cmp	r1, #0
 8017656:	bfd4      	ite	le
 8017658:	f1c1 0202 	rsble	r2, r1, #2
 801765c:	2201      	movgt	r2, #1
 801765e:	4413      	add	r3, r2
 8017660:	e7e0      	b.n	8017624 <_printf_float+0x1a4>
 8017662:	6823      	ldr	r3, [r4, #0]
 8017664:	055a      	lsls	r2, r3, #21
 8017666:	d407      	bmi.n	8017678 <_printf_float+0x1f8>
 8017668:	6923      	ldr	r3, [r4, #16]
 801766a:	4642      	mov	r2, r8
 801766c:	4631      	mov	r1, r6
 801766e:	4628      	mov	r0, r5
 8017670:	47b8      	blx	r7
 8017672:	3001      	adds	r0, #1
 8017674:	d12c      	bne.n	80176d0 <_printf_float+0x250>
 8017676:	e764      	b.n	8017542 <_printf_float+0xc2>
 8017678:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801767c:	f240 80e0 	bls.w	8017840 <_printf_float+0x3c0>
 8017680:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017684:	2200      	movs	r2, #0
 8017686:	2300      	movs	r3, #0
 8017688:	f7e9 fa3e 	bl	8000b08 <__aeabi_dcmpeq>
 801768c:	2800      	cmp	r0, #0
 801768e:	d034      	beq.n	80176fa <_printf_float+0x27a>
 8017690:	4a37      	ldr	r2, [pc, #220]	; (8017770 <_printf_float+0x2f0>)
 8017692:	2301      	movs	r3, #1
 8017694:	4631      	mov	r1, r6
 8017696:	4628      	mov	r0, r5
 8017698:	47b8      	blx	r7
 801769a:	3001      	adds	r0, #1
 801769c:	f43f af51 	beq.w	8017542 <_printf_float+0xc2>
 80176a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80176a4:	429a      	cmp	r2, r3
 80176a6:	db02      	blt.n	80176ae <_printf_float+0x22e>
 80176a8:	6823      	ldr	r3, [r4, #0]
 80176aa:	07d8      	lsls	r0, r3, #31
 80176ac:	d510      	bpl.n	80176d0 <_printf_float+0x250>
 80176ae:	ee18 3a10 	vmov	r3, s16
 80176b2:	4652      	mov	r2, sl
 80176b4:	4631      	mov	r1, r6
 80176b6:	4628      	mov	r0, r5
 80176b8:	47b8      	blx	r7
 80176ba:	3001      	adds	r0, #1
 80176bc:	f43f af41 	beq.w	8017542 <_printf_float+0xc2>
 80176c0:	f04f 0800 	mov.w	r8, #0
 80176c4:	f104 091a 	add.w	r9, r4, #26
 80176c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80176ca:	3b01      	subs	r3, #1
 80176cc:	4543      	cmp	r3, r8
 80176ce:	dc09      	bgt.n	80176e4 <_printf_float+0x264>
 80176d0:	6823      	ldr	r3, [r4, #0]
 80176d2:	079b      	lsls	r3, r3, #30
 80176d4:	f100 8105 	bmi.w	80178e2 <_printf_float+0x462>
 80176d8:	68e0      	ldr	r0, [r4, #12]
 80176da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80176dc:	4298      	cmp	r0, r3
 80176de:	bfb8      	it	lt
 80176e0:	4618      	movlt	r0, r3
 80176e2:	e730      	b.n	8017546 <_printf_float+0xc6>
 80176e4:	2301      	movs	r3, #1
 80176e6:	464a      	mov	r2, r9
 80176e8:	4631      	mov	r1, r6
 80176ea:	4628      	mov	r0, r5
 80176ec:	47b8      	blx	r7
 80176ee:	3001      	adds	r0, #1
 80176f0:	f43f af27 	beq.w	8017542 <_printf_float+0xc2>
 80176f4:	f108 0801 	add.w	r8, r8, #1
 80176f8:	e7e6      	b.n	80176c8 <_printf_float+0x248>
 80176fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	dc39      	bgt.n	8017774 <_printf_float+0x2f4>
 8017700:	4a1b      	ldr	r2, [pc, #108]	; (8017770 <_printf_float+0x2f0>)
 8017702:	2301      	movs	r3, #1
 8017704:	4631      	mov	r1, r6
 8017706:	4628      	mov	r0, r5
 8017708:	47b8      	blx	r7
 801770a:	3001      	adds	r0, #1
 801770c:	f43f af19 	beq.w	8017542 <_printf_float+0xc2>
 8017710:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017714:	4313      	orrs	r3, r2
 8017716:	d102      	bne.n	801771e <_printf_float+0x29e>
 8017718:	6823      	ldr	r3, [r4, #0]
 801771a:	07d9      	lsls	r1, r3, #31
 801771c:	d5d8      	bpl.n	80176d0 <_printf_float+0x250>
 801771e:	ee18 3a10 	vmov	r3, s16
 8017722:	4652      	mov	r2, sl
 8017724:	4631      	mov	r1, r6
 8017726:	4628      	mov	r0, r5
 8017728:	47b8      	blx	r7
 801772a:	3001      	adds	r0, #1
 801772c:	f43f af09 	beq.w	8017542 <_printf_float+0xc2>
 8017730:	f04f 0900 	mov.w	r9, #0
 8017734:	f104 0a1a 	add.w	sl, r4, #26
 8017738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801773a:	425b      	negs	r3, r3
 801773c:	454b      	cmp	r3, r9
 801773e:	dc01      	bgt.n	8017744 <_printf_float+0x2c4>
 8017740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017742:	e792      	b.n	801766a <_printf_float+0x1ea>
 8017744:	2301      	movs	r3, #1
 8017746:	4652      	mov	r2, sl
 8017748:	4631      	mov	r1, r6
 801774a:	4628      	mov	r0, r5
 801774c:	47b8      	blx	r7
 801774e:	3001      	adds	r0, #1
 8017750:	f43f aef7 	beq.w	8017542 <_printf_float+0xc2>
 8017754:	f109 0901 	add.w	r9, r9, #1
 8017758:	e7ee      	b.n	8017738 <_printf_float+0x2b8>
 801775a:	bf00      	nop
 801775c:	7fefffff 	.word	0x7fefffff
 8017760:	0801d898 	.word	0x0801d898
 8017764:	0801d89c 	.word	0x0801d89c
 8017768:	0801d8a4 	.word	0x0801d8a4
 801776c:	0801d8a0 	.word	0x0801d8a0
 8017770:	0801dbe1 	.word	0x0801dbe1
 8017774:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017776:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017778:	429a      	cmp	r2, r3
 801777a:	bfa8      	it	ge
 801777c:	461a      	movge	r2, r3
 801777e:	2a00      	cmp	r2, #0
 8017780:	4691      	mov	r9, r2
 8017782:	dc37      	bgt.n	80177f4 <_printf_float+0x374>
 8017784:	f04f 0b00 	mov.w	fp, #0
 8017788:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801778c:	f104 021a 	add.w	r2, r4, #26
 8017790:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017792:	9305      	str	r3, [sp, #20]
 8017794:	eba3 0309 	sub.w	r3, r3, r9
 8017798:	455b      	cmp	r3, fp
 801779a:	dc33      	bgt.n	8017804 <_printf_float+0x384>
 801779c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80177a0:	429a      	cmp	r2, r3
 80177a2:	db3b      	blt.n	801781c <_printf_float+0x39c>
 80177a4:	6823      	ldr	r3, [r4, #0]
 80177a6:	07da      	lsls	r2, r3, #31
 80177a8:	d438      	bmi.n	801781c <_printf_float+0x39c>
 80177aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80177ac:	9b05      	ldr	r3, [sp, #20]
 80177ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80177b0:	1ad3      	subs	r3, r2, r3
 80177b2:	eba2 0901 	sub.w	r9, r2, r1
 80177b6:	4599      	cmp	r9, r3
 80177b8:	bfa8      	it	ge
 80177ba:	4699      	movge	r9, r3
 80177bc:	f1b9 0f00 	cmp.w	r9, #0
 80177c0:	dc35      	bgt.n	801782e <_printf_float+0x3ae>
 80177c2:	f04f 0800 	mov.w	r8, #0
 80177c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80177ca:	f104 0a1a 	add.w	sl, r4, #26
 80177ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80177d2:	1a9b      	subs	r3, r3, r2
 80177d4:	eba3 0309 	sub.w	r3, r3, r9
 80177d8:	4543      	cmp	r3, r8
 80177da:	f77f af79 	ble.w	80176d0 <_printf_float+0x250>
 80177de:	2301      	movs	r3, #1
 80177e0:	4652      	mov	r2, sl
 80177e2:	4631      	mov	r1, r6
 80177e4:	4628      	mov	r0, r5
 80177e6:	47b8      	blx	r7
 80177e8:	3001      	adds	r0, #1
 80177ea:	f43f aeaa 	beq.w	8017542 <_printf_float+0xc2>
 80177ee:	f108 0801 	add.w	r8, r8, #1
 80177f2:	e7ec      	b.n	80177ce <_printf_float+0x34e>
 80177f4:	4613      	mov	r3, r2
 80177f6:	4631      	mov	r1, r6
 80177f8:	4642      	mov	r2, r8
 80177fa:	4628      	mov	r0, r5
 80177fc:	47b8      	blx	r7
 80177fe:	3001      	adds	r0, #1
 8017800:	d1c0      	bne.n	8017784 <_printf_float+0x304>
 8017802:	e69e      	b.n	8017542 <_printf_float+0xc2>
 8017804:	2301      	movs	r3, #1
 8017806:	4631      	mov	r1, r6
 8017808:	4628      	mov	r0, r5
 801780a:	9205      	str	r2, [sp, #20]
 801780c:	47b8      	blx	r7
 801780e:	3001      	adds	r0, #1
 8017810:	f43f ae97 	beq.w	8017542 <_printf_float+0xc2>
 8017814:	9a05      	ldr	r2, [sp, #20]
 8017816:	f10b 0b01 	add.w	fp, fp, #1
 801781a:	e7b9      	b.n	8017790 <_printf_float+0x310>
 801781c:	ee18 3a10 	vmov	r3, s16
 8017820:	4652      	mov	r2, sl
 8017822:	4631      	mov	r1, r6
 8017824:	4628      	mov	r0, r5
 8017826:	47b8      	blx	r7
 8017828:	3001      	adds	r0, #1
 801782a:	d1be      	bne.n	80177aa <_printf_float+0x32a>
 801782c:	e689      	b.n	8017542 <_printf_float+0xc2>
 801782e:	9a05      	ldr	r2, [sp, #20]
 8017830:	464b      	mov	r3, r9
 8017832:	4442      	add	r2, r8
 8017834:	4631      	mov	r1, r6
 8017836:	4628      	mov	r0, r5
 8017838:	47b8      	blx	r7
 801783a:	3001      	adds	r0, #1
 801783c:	d1c1      	bne.n	80177c2 <_printf_float+0x342>
 801783e:	e680      	b.n	8017542 <_printf_float+0xc2>
 8017840:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017842:	2a01      	cmp	r2, #1
 8017844:	dc01      	bgt.n	801784a <_printf_float+0x3ca>
 8017846:	07db      	lsls	r3, r3, #31
 8017848:	d538      	bpl.n	80178bc <_printf_float+0x43c>
 801784a:	2301      	movs	r3, #1
 801784c:	4642      	mov	r2, r8
 801784e:	4631      	mov	r1, r6
 8017850:	4628      	mov	r0, r5
 8017852:	47b8      	blx	r7
 8017854:	3001      	adds	r0, #1
 8017856:	f43f ae74 	beq.w	8017542 <_printf_float+0xc2>
 801785a:	ee18 3a10 	vmov	r3, s16
 801785e:	4652      	mov	r2, sl
 8017860:	4631      	mov	r1, r6
 8017862:	4628      	mov	r0, r5
 8017864:	47b8      	blx	r7
 8017866:	3001      	adds	r0, #1
 8017868:	f43f ae6b 	beq.w	8017542 <_printf_float+0xc2>
 801786c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017870:	2200      	movs	r2, #0
 8017872:	2300      	movs	r3, #0
 8017874:	f7e9 f948 	bl	8000b08 <__aeabi_dcmpeq>
 8017878:	b9d8      	cbnz	r0, 80178b2 <_printf_float+0x432>
 801787a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801787c:	f108 0201 	add.w	r2, r8, #1
 8017880:	3b01      	subs	r3, #1
 8017882:	4631      	mov	r1, r6
 8017884:	4628      	mov	r0, r5
 8017886:	47b8      	blx	r7
 8017888:	3001      	adds	r0, #1
 801788a:	d10e      	bne.n	80178aa <_printf_float+0x42a>
 801788c:	e659      	b.n	8017542 <_printf_float+0xc2>
 801788e:	2301      	movs	r3, #1
 8017890:	4652      	mov	r2, sl
 8017892:	4631      	mov	r1, r6
 8017894:	4628      	mov	r0, r5
 8017896:	47b8      	blx	r7
 8017898:	3001      	adds	r0, #1
 801789a:	f43f ae52 	beq.w	8017542 <_printf_float+0xc2>
 801789e:	f108 0801 	add.w	r8, r8, #1
 80178a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80178a4:	3b01      	subs	r3, #1
 80178a6:	4543      	cmp	r3, r8
 80178a8:	dcf1      	bgt.n	801788e <_printf_float+0x40e>
 80178aa:	464b      	mov	r3, r9
 80178ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80178b0:	e6dc      	b.n	801766c <_printf_float+0x1ec>
 80178b2:	f04f 0800 	mov.w	r8, #0
 80178b6:	f104 0a1a 	add.w	sl, r4, #26
 80178ba:	e7f2      	b.n	80178a2 <_printf_float+0x422>
 80178bc:	2301      	movs	r3, #1
 80178be:	4642      	mov	r2, r8
 80178c0:	e7df      	b.n	8017882 <_printf_float+0x402>
 80178c2:	2301      	movs	r3, #1
 80178c4:	464a      	mov	r2, r9
 80178c6:	4631      	mov	r1, r6
 80178c8:	4628      	mov	r0, r5
 80178ca:	47b8      	blx	r7
 80178cc:	3001      	adds	r0, #1
 80178ce:	f43f ae38 	beq.w	8017542 <_printf_float+0xc2>
 80178d2:	f108 0801 	add.w	r8, r8, #1
 80178d6:	68e3      	ldr	r3, [r4, #12]
 80178d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80178da:	1a5b      	subs	r3, r3, r1
 80178dc:	4543      	cmp	r3, r8
 80178de:	dcf0      	bgt.n	80178c2 <_printf_float+0x442>
 80178e0:	e6fa      	b.n	80176d8 <_printf_float+0x258>
 80178e2:	f04f 0800 	mov.w	r8, #0
 80178e6:	f104 0919 	add.w	r9, r4, #25
 80178ea:	e7f4      	b.n	80178d6 <_printf_float+0x456>

080178ec <_printf_common>:
 80178ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80178f0:	4616      	mov	r6, r2
 80178f2:	4699      	mov	r9, r3
 80178f4:	688a      	ldr	r2, [r1, #8]
 80178f6:	690b      	ldr	r3, [r1, #16]
 80178f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80178fc:	4293      	cmp	r3, r2
 80178fe:	bfb8      	it	lt
 8017900:	4613      	movlt	r3, r2
 8017902:	6033      	str	r3, [r6, #0]
 8017904:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017908:	4607      	mov	r7, r0
 801790a:	460c      	mov	r4, r1
 801790c:	b10a      	cbz	r2, 8017912 <_printf_common+0x26>
 801790e:	3301      	adds	r3, #1
 8017910:	6033      	str	r3, [r6, #0]
 8017912:	6823      	ldr	r3, [r4, #0]
 8017914:	0699      	lsls	r1, r3, #26
 8017916:	bf42      	ittt	mi
 8017918:	6833      	ldrmi	r3, [r6, #0]
 801791a:	3302      	addmi	r3, #2
 801791c:	6033      	strmi	r3, [r6, #0]
 801791e:	6825      	ldr	r5, [r4, #0]
 8017920:	f015 0506 	ands.w	r5, r5, #6
 8017924:	d106      	bne.n	8017934 <_printf_common+0x48>
 8017926:	f104 0a19 	add.w	sl, r4, #25
 801792a:	68e3      	ldr	r3, [r4, #12]
 801792c:	6832      	ldr	r2, [r6, #0]
 801792e:	1a9b      	subs	r3, r3, r2
 8017930:	42ab      	cmp	r3, r5
 8017932:	dc26      	bgt.n	8017982 <_printf_common+0x96>
 8017934:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017938:	1e13      	subs	r3, r2, #0
 801793a:	6822      	ldr	r2, [r4, #0]
 801793c:	bf18      	it	ne
 801793e:	2301      	movne	r3, #1
 8017940:	0692      	lsls	r2, r2, #26
 8017942:	d42b      	bmi.n	801799c <_printf_common+0xb0>
 8017944:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017948:	4649      	mov	r1, r9
 801794a:	4638      	mov	r0, r7
 801794c:	47c0      	blx	r8
 801794e:	3001      	adds	r0, #1
 8017950:	d01e      	beq.n	8017990 <_printf_common+0xa4>
 8017952:	6823      	ldr	r3, [r4, #0]
 8017954:	68e5      	ldr	r5, [r4, #12]
 8017956:	6832      	ldr	r2, [r6, #0]
 8017958:	f003 0306 	and.w	r3, r3, #6
 801795c:	2b04      	cmp	r3, #4
 801795e:	bf08      	it	eq
 8017960:	1aad      	subeq	r5, r5, r2
 8017962:	68a3      	ldr	r3, [r4, #8]
 8017964:	6922      	ldr	r2, [r4, #16]
 8017966:	bf0c      	ite	eq
 8017968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801796c:	2500      	movne	r5, #0
 801796e:	4293      	cmp	r3, r2
 8017970:	bfc4      	itt	gt
 8017972:	1a9b      	subgt	r3, r3, r2
 8017974:	18ed      	addgt	r5, r5, r3
 8017976:	2600      	movs	r6, #0
 8017978:	341a      	adds	r4, #26
 801797a:	42b5      	cmp	r5, r6
 801797c:	d11a      	bne.n	80179b4 <_printf_common+0xc8>
 801797e:	2000      	movs	r0, #0
 8017980:	e008      	b.n	8017994 <_printf_common+0xa8>
 8017982:	2301      	movs	r3, #1
 8017984:	4652      	mov	r2, sl
 8017986:	4649      	mov	r1, r9
 8017988:	4638      	mov	r0, r7
 801798a:	47c0      	blx	r8
 801798c:	3001      	adds	r0, #1
 801798e:	d103      	bne.n	8017998 <_printf_common+0xac>
 8017990:	f04f 30ff 	mov.w	r0, #4294967295
 8017994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017998:	3501      	adds	r5, #1
 801799a:	e7c6      	b.n	801792a <_printf_common+0x3e>
 801799c:	18e1      	adds	r1, r4, r3
 801799e:	1c5a      	adds	r2, r3, #1
 80179a0:	2030      	movs	r0, #48	; 0x30
 80179a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80179a6:	4422      	add	r2, r4
 80179a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80179ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80179b0:	3302      	adds	r3, #2
 80179b2:	e7c7      	b.n	8017944 <_printf_common+0x58>
 80179b4:	2301      	movs	r3, #1
 80179b6:	4622      	mov	r2, r4
 80179b8:	4649      	mov	r1, r9
 80179ba:	4638      	mov	r0, r7
 80179bc:	47c0      	blx	r8
 80179be:	3001      	adds	r0, #1
 80179c0:	d0e6      	beq.n	8017990 <_printf_common+0xa4>
 80179c2:	3601      	adds	r6, #1
 80179c4:	e7d9      	b.n	801797a <_printf_common+0x8e>
	...

080179c8 <_printf_i>:
 80179c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80179cc:	460c      	mov	r4, r1
 80179ce:	4691      	mov	r9, r2
 80179d0:	7e27      	ldrb	r7, [r4, #24]
 80179d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80179d4:	2f78      	cmp	r7, #120	; 0x78
 80179d6:	4680      	mov	r8, r0
 80179d8:	469a      	mov	sl, r3
 80179da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80179de:	d807      	bhi.n	80179f0 <_printf_i+0x28>
 80179e0:	2f62      	cmp	r7, #98	; 0x62
 80179e2:	d80a      	bhi.n	80179fa <_printf_i+0x32>
 80179e4:	2f00      	cmp	r7, #0
 80179e6:	f000 80d8 	beq.w	8017b9a <_printf_i+0x1d2>
 80179ea:	2f58      	cmp	r7, #88	; 0x58
 80179ec:	f000 80a3 	beq.w	8017b36 <_printf_i+0x16e>
 80179f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80179f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80179f8:	e03a      	b.n	8017a70 <_printf_i+0xa8>
 80179fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80179fe:	2b15      	cmp	r3, #21
 8017a00:	d8f6      	bhi.n	80179f0 <_printf_i+0x28>
 8017a02:	a001      	add	r0, pc, #4	; (adr r0, 8017a08 <_printf_i+0x40>)
 8017a04:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017a08:	08017a61 	.word	0x08017a61
 8017a0c:	08017a75 	.word	0x08017a75
 8017a10:	080179f1 	.word	0x080179f1
 8017a14:	080179f1 	.word	0x080179f1
 8017a18:	080179f1 	.word	0x080179f1
 8017a1c:	080179f1 	.word	0x080179f1
 8017a20:	08017a75 	.word	0x08017a75
 8017a24:	080179f1 	.word	0x080179f1
 8017a28:	080179f1 	.word	0x080179f1
 8017a2c:	080179f1 	.word	0x080179f1
 8017a30:	080179f1 	.word	0x080179f1
 8017a34:	08017b81 	.word	0x08017b81
 8017a38:	08017aa5 	.word	0x08017aa5
 8017a3c:	08017b63 	.word	0x08017b63
 8017a40:	080179f1 	.word	0x080179f1
 8017a44:	080179f1 	.word	0x080179f1
 8017a48:	08017ba3 	.word	0x08017ba3
 8017a4c:	080179f1 	.word	0x080179f1
 8017a50:	08017aa5 	.word	0x08017aa5
 8017a54:	080179f1 	.word	0x080179f1
 8017a58:	080179f1 	.word	0x080179f1
 8017a5c:	08017b6b 	.word	0x08017b6b
 8017a60:	680b      	ldr	r3, [r1, #0]
 8017a62:	1d1a      	adds	r2, r3, #4
 8017a64:	681b      	ldr	r3, [r3, #0]
 8017a66:	600a      	str	r2, [r1, #0]
 8017a68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017a6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017a70:	2301      	movs	r3, #1
 8017a72:	e0a3      	b.n	8017bbc <_printf_i+0x1f4>
 8017a74:	6825      	ldr	r5, [r4, #0]
 8017a76:	6808      	ldr	r0, [r1, #0]
 8017a78:	062e      	lsls	r6, r5, #24
 8017a7a:	f100 0304 	add.w	r3, r0, #4
 8017a7e:	d50a      	bpl.n	8017a96 <_printf_i+0xce>
 8017a80:	6805      	ldr	r5, [r0, #0]
 8017a82:	600b      	str	r3, [r1, #0]
 8017a84:	2d00      	cmp	r5, #0
 8017a86:	da03      	bge.n	8017a90 <_printf_i+0xc8>
 8017a88:	232d      	movs	r3, #45	; 0x2d
 8017a8a:	426d      	negs	r5, r5
 8017a8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017a90:	485e      	ldr	r0, [pc, #376]	; (8017c0c <_printf_i+0x244>)
 8017a92:	230a      	movs	r3, #10
 8017a94:	e019      	b.n	8017aca <_printf_i+0x102>
 8017a96:	f015 0f40 	tst.w	r5, #64	; 0x40
 8017a9a:	6805      	ldr	r5, [r0, #0]
 8017a9c:	600b      	str	r3, [r1, #0]
 8017a9e:	bf18      	it	ne
 8017aa0:	b22d      	sxthne	r5, r5
 8017aa2:	e7ef      	b.n	8017a84 <_printf_i+0xbc>
 8017aa4:	680b      	ldr	r3, [r1, #0]
 8017aa6:	6825      	ldr	r5, [r4, #0]
 8017aa8:	1d18      	adds	r0, r3, #4
 8017aaa:	6008      	str	r0, [r1, #0]
 8017aac:	0628      	lsls	r0, r5, #24
 8017aae:	d501      	bpl.n	8017ab4 <_printf_i+0xec>
 8017ab0:	681d      	ldr	r5, [r3, #0]
 8017ab2:	e002      	b.n	8017aba <_printf_i+0xf2>
 8017ab4:	0669      	lsls	r1, r5, #25
 8017ab6:	d5fb      	bpl.n	8017ab0 <_printf_i+0xe8>
 8017ab8:	881d      	ldrh	r5, [r3, #0]
 8017aba:	4854      	ldr	r0, [pc, #336]	; (8017c0c <_printf_i+0x244>)
 8017abc:	2f6f      	cmp	r7, #111	; 0x6f
 8017abe:	bf0c      	ite	eq
 8017ac0:	2308      	moveq	r3, #8
 8017ac2:	230a      	movne	r3, #10
 8017ac4:	2100      	movs	r1, #0
 8017ac6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017aca:	6866      	ldr	r6, [r4, #4]
 8017acc:	60a6      	str	r6, [r4, #8]
 8017ace:	2e00      	cmp	r6, #0
 8017ad0:	bfa2      	ittt	ge
 8017ad2:	6821      	ldrge	r1, [r4, #0]
 8017ad4:	f021 0104 	bicge.w	r1, r1, #4
 8017ad8:	6021      	strge	r1, [r4, #0]
 8017ada:	b90d      	cbnz	r5, 8017ae0 <_printf_i+0x118>
 8017adc:	2e00      	cmp	r6, #0
 8017ade:	d04d      	beq.n	8017b7c <_printf_i+0x1b4>
 8017ae0:	4616      	mov	r6, r2
 8017ae2:	fbb5 f1f3 	udiv	r1, r5, r3
 8017ae6:	fb03 5711 	mls	r7, r3, r1, r5
 8017aea:	5dc7      	ldrb	r7, [r0, r7]
 8017aec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017af0:	462f      	mov	r7, r5
 8017af2:	42bb      	cmp	r3, r7
 8017af4:	460d      	mov	r5, r1
 8017af6:	d9f4      	bls.n	8017ae2 <_printf_i+0x11a>
 8017af8:	2b08      	cmp	r3, #8
 8017afa:	d10b      	bne.n	8017b14 <_printf_i+0x14c>
 8017afc:	6823      	ldr	r3, [r4, #0]
 8017afe:	07df      	lsls	r7, r3, #31
 8017b00:	d508      	bpl.n	8017b14 <_printf_i+0x14c>
 8017b02:	6923      	ldr	r3, [r4, #16]
 8017b04:	6861      	ldr	r1, [r4, #4]
 8017b06:	4299      	cmp	r1, r3
 8017b08:	bfde      	ittt	le
 8017b0a:	2330      	movle	r3, #48	; 0x30
 8017b0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017b10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017b14:	1b92      	subs	r2, r2, r6
 8017b16:	6122      	str	r2, [r4, #16]
 8017b18:	f8cd a000 	str.w	sl, [sp]
 8017b1c:	464b      	mov	r3, r9
 8017b1e:	aa03      	add	r2, sp, #12
 8017b20:	4621      	mov	r1, r4
 8017b22:	4640      	mov	r0, r8
 8017b24:	f7ff fee2 	bl	80178ec <_printf_common>
 8017b28:	3001      	adds	r0, #1
 8017b2a:	d14c      	bne.n	8017bc6 <_printf_i+0x1fe>
 8017b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8017b30:	b004      	add	sp, #16
 8017b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b36:	4835      	ldr	r0, [pc, #212]	; (8017c0c <_printf_i+0x244>)
 8017b38:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017b3c:	6823      	ldr	r3, [r4, #0]
 8017b3e:	680e      	ldr	r6, [r1, #0]
 8017b40:	061f      	lsls	r7, r3, #24
 8017b42:	f856 5b04 	ldr.w	r5, [r6], #4
 8017b46:	600e      	str	r6, [r1, #0]
 8017b48:	d514      	bpl.n	8017b74 <_printf_i+0x1ac>
 8017b4a:	07d9      	lsls	r1, r3, #31
 8017b4c:	bf44      	itt	mi
 8017b4e:	f043 0320 	orrmi.w	r3, r3, #32
 8017b52:	6023      	strmi	r3, [r4, #0]
 8017b54:	b91d      	cbnz	r5, 8017b5e <_printf_i+0x196>
 8017b56:	6823      	ldr	r3, [r4, #0]
 8017b58:	f023 0320 	bic.w	r3, r3, #32
 8017b5c:	6023      	str	r3, [r4, #0]
 8017b5e:	2310      	movs	r3, #16
 8017b60:	e7b0      	b.n	8017ac4 <_printf_i+0xfc>
 8017b62:	6823      	ldr	r3, [r4, #0]
 8017b64:	f043 0320 	orr.w	r3, r3, #32
 8017b68:	6023      	str	r3, [r4, #0]
 8017b6a:	2378      	movs	r3, #120	; 0x78
 8017b6c:	4828      	ldr	r0, [pc, #160]	; (8017c10 <_printf_i+0x248>)
 8017b6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017b72:	e7e3      	b.n	8017b3c <_printf_i+0x174>
 8017b74:	065e      	lsls	r6, r3, #25
 8017b76:	bf48      	it	mi
 8017b78:	b2ad      	uxthmi	r5, r5
 8017b7a:	e7e6      	b.n	8017b4a <_printf_i+0x182>
 8017b7c:	4616      	mov	r6, r2
 8017b7e:	e7bb      	b.n	8017af8 <_printf_i+0x130>
 8017b80:	680b      	ldr	r3, [r1, #0]
 8017b82:	6826      	ldr	r6, [r4, #0]
 8017b84:	6960      	ldr	r0, [r4, #20]
 8017b86:	1d1d      	adds	r5, r3, #4
 8017b88:	600d      	str	r5, [r1, #0]
 8017b8a:	0635      	lsls	r5, r6, #24
 8017b8c:	681b      	ldr	r3, [r3, #0]
 8017b8e:	d501      	bpl.n	8017b94 <_printf_i+0x1cc>
 8017b90:	6018      	str	r0, [r3, #0]
 8017b92:	e002      	b.n	8017b9a <_printf_i+0x1d2>
 8017b94:	0671      	lsls	r1, r6, #25
 8017b96:	d5fb      	bpl.n	8017b90 <_printf_i+0x1c8>
 8017b98:	8018      	strh	r0, [r3, #0]
 8017b9a:	2300      	movs	r3, #0
 8017b9c:	6123      	str	r3, [r4, #16]
 8017b9e:	4616      	mov	r6, r2
 8017ba0:	e7ba      	b.n	8017b18 <_printf_i+0x150>
 8017ba2:	680b      	ldr	r3, [r1, #0]
 8017ba4:	1d1a      	adds	r2, r3, #4
 8017ba6:	600a      	str	r2, [r1, #0]
 8017ba8:	681e      	ldr	r6, [r3, #0]
 8017baa:	6862      	ldr	r2, [r4, #4]
 8017bac:	2100      	movs	r1, #0
 8017bae:	4630      	mov	r0, r6
 8017bb0:	f7e8 fb36 	bl	8000220 <memchr>
 8017bb4:	b108      	cbz	r0, 8017bba <_printf_i+0x1f2>
 8017bb6:	1b80      	subs	r0, r0, r6
 8017bb8:	6060      	str	r0, [r4, #4]
 8017bba:	6863      	ldr	r3, [r4, #4]
 8017bbc:	6123      	str	r3, [r4, #16]
 8017bbe:	2300      	movs	r3, #0
 8017bc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017bc4:	e7a8      	b.n	8017b18 <_printf_i+0x150>
 8017bc6:	6923      	ldr	r3, [r4, #16]
 8017bc8:	4632      	mov	r2, r6
 8017bca:	4649      	mov	r1, r9
 8017bcc:	4640      	mov	r0, r8
 8017bce:	47d0      	blx	sl
 8017bd0:	3001      	adds	r0, #1
 8017bd2:	d0ab      	beq.n	8017b2c <_printf_i+0x164>
 8017bd4:	6823      	ldr	r3, [r4, #0]
 8017bd6:	079b      	lsls	r3, r3, #30
 8017bd8:	d413      	bmi.n	8017c02 <_printf_i+0x23a>
 8017bda:	68e0      	ldr	r0, [r4, #12]
 8017bdc:	9b03      	ldr	r3, [sp, #12]
 8017bde:	4298      	cmp	r0, r3
 8017be0:	bfb8      	it	lt
 8017be2:	4618      	movlt	r0, r3
 8017be4:	e7a4      	b.n	8017b30 <_printf_i+0x168>
 8017be6:	2301      	movs	r3, #1
 8017be8:	4632      	mov	r2, r6
 8017bea:	4649      	mov	r1, r9
 8017bec:	4640      	mov	r0, r8
 8017bee:	47d0      	blx	sl
 8017bf0:	3001      	adds	r0, #1
 8017bf2:	d09b      	beq.n	8017b2c <_printf_i+0x164>
 8017bf4:	3501      	adds	r5, #1
 8017bf6:	68e3      	ldr	r3, [r4, #12]
 8017bf8:	9903      	ldr	r1, [sp, #12]
 8017bfa:	1a5b      	subs	r3, r3, r1
 8017bfc:	42ab      	cmp	r3, r5
 8017bfe:	dcf2      	bgt.n	8017be6 <_printf_i+0x21e>
 8017c00:	e7eb      	b.n	8017bda <_printf_i+0x212>
 8017c02:	2500      	movs	r5, #0
 8017c04:	f104 0619 	add.w	r6, r4, #25
 8017c08:	e7f5      	b.n	8017bf6 <_printf_i+0x22e>
 8017c0a:	bf00      	nop
 8017c0c:	0801d8a8 	.word	0x0801d8a8
 8017c10:	0801d8b9 	.word	0x0801d8b9

08017c14 <_scanf_float>:
 8017c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c18:	b087      	sub	sp, #28
 8017c1a:	4617      	mov	r7, r2
 8017c1c:	9303      	str	r3, [sp, #12]
 8017c1e:	688b      	ldr	r3, [r1, #8]
 8017c20:	1e5a      	subs	r2, r3, #1
 8017c22:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017c26:	bf83      	ittte	hi
 8017c28:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017c2c:	195b      	addhi	r3, r3, r5
 8017c2e:	9302      	strhi	r3, [sp, #8]
 8017c30:	2300      	movls	r3, #0
 8017c32:	bf86      	itte	hi
 8017c34:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017c38:	608b      	strhi	r3, [r1, #8]
 8017c3a:	9302      	strls	r3, [sp, #8]
 8017c3c:	680b      	ldr	r3, [r1, #0]
 8017c3e:	468b      	mov	fp, r1
 8017c40:	2500      	movs	r5, #0
 8017c42:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8017c46:	f84b 3b1c 	str.w	r3, [fp], #28
 8017c4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8017c4e:	4680      	mov	r8, r0
 8017c50:	460c      	mov	r4, r1
 8017c52:	465e      	mov	r6, fp
 8017c54:	46aa      	mov	sl, r5
 8017c56:	46a9      	mov	r9, r5
 8017c58:	9501      	str	r5, [sp, #4]
 8017c5a:	68a2      	ldr	r2, [r4, #8]
 8017c5c:	b152      	cbz	r2, 8017c74 <_scanf_float+0x60>
 8017c5e:	683b      	ldr	r3, [r7, #0]
 8017c60:	781b      	ldrb	r3, [r3, #0]
 8017c62:	2b4e      	cmp	r3, #78	; 0x4e
 8017c64:	d864      	bhi.n	8017d30 <_scanf_float+0x11c>
 8017c66:	2b40      	cmp	r3, #64	; 0x40
 8017c68:	d83c      	bhi.n	8017ce4 <_scanf_float+0xd0>
 8017c6a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8017c6e:	b2c8      	uxtb	r0, r1
 8017c70:	280e      	cmp	r0, #14
 8017c72:	d93a      	bls.n	8017cea <_scanf_float+0xd6>
 8017c74:	f1b9 0f00 	cmp.w	r9, #0
 8017c78:	d003      	beq.n	8017c82 <_scanf_float+0x6e>
 8017c7a:	6823      	ldr	r3, [r4, #0]
 8017c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017c80:	6023      	str	r3, [r4, #0]
 8017c82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017c86:	f1ba 0f01 	cmp.w	sl, #1
 8017c8a:	f200 8113 	bhi.w	8017eb4 <_scanf_float+0x2a0>
 8017c8e:	455e      	cmp	r6, fp
 8017c90:	f200 8105 	bhi.w	8017e9e <_scanf_float+0x28a>
 8017c94:	2501      	movs	r5, #1
 8017c96:	4628      	mov	r0, r5
 8017c98:	b007      	add	sp, #28
 8017c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c9e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8017ca2:	2a0d      	cmp	r2, #13
 8017ca4:	d8e6      	bhi.n	8017c74 <_scanf_float+0x60>
 8017ca6:	a101      	add	r1, pc, #4	; (adr r1, 8017cac <_scanf_float+0x98>)
 8017ca8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017cac:	08017deb 	.word	0x08017deb
 8017cb0:	08017c75 	.word	0x08017c75
 8017cb4:	08017c75 	.word	0x08017c75
 8017cb8:	08017c75 	.word	0x08017c75
 8017cbc:	08017e4b 	.word	0x08017e4b
 8017cc0:	08017e23 	.word	0x08017e23
 8017cc4:	08017c75 	.word	0x08017c75
 8017cc8:	08017c75 	.word	0x08017c75
 8017ccc:	08017df9 	.word	0x08017df9
 8017cd0:	08017c75 	.word	0x08017c75
 8017cd4:	08017c75 	.word	0x08017c75
 8017cd8:	08017c75 	.word	0x08017c75
 8017cdc:	08017c75 	.word	0x08017c75
 8017ce0:	08017db1 	.word	0x08017db1
 8017ce4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8017ce8:	e7db      	b.n	8017ca2 <_scanf_float+0x8e>
 8017cea:	290e      	cmp	r1, #14
 8017cec:	d8c2      	bhi.n	8017c74 <_scanf_float+0x60>
 8017cee:	a001      	add	r0, pc, #4	; (adr r0, 8017cf4 <_scanf_float+0xe0>)
 8017cf0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8017cf4:	08017da3 	.word	0x08017da3
 8017cf8:	08017c75 	.word	0x08017c75
 8017cfc:	08017da3 	.word	0x08017da3
 8017d00:	08017e37 	.word	0x08017e37
 8017d04:	08017c75 	.word	0x08017c75
 8017d08:	08017d51 	.word	0x08017d51
 8017d0c:	08017d8d 	.word	0x08017d8d
 8017d10:	08017d8d 	.word	0x08017d8d
 8017d14:	08017d8d 	.word	0x08017d8d
 8017d18:	08017d8d 	.word	0x08017d8d
 8017d1c:	08017d8d 	.word	0x08017d8d
 8017d20:	08017d8d 	.word	0x08017d8d
 8017d24:	08017d8d 	.word	0x08017d8d
 8017d28:	08017d8d 	.word	0x08017d8d
 8017d2c:	08017d8d 	.word	0x08017d8d
 8017d30:	2b6e      	cmp	r3, #110	; 0x6e
 8017d32:	d809      	bhi.n	8017d48 <_scanf_float+0x134>
 8017d34:	2b60      	cmp	r3, #96	; 0x60
 8017d36:	d8b2      	bhi.n	8017c9e <_scanf_float+0x8a>
 8017d38:	2b54      	cmp	r3, #84	; 0x54
 8017d3a:	d077      	beq.n	8017e2c <_scanf_float+0x218>
 8017d3c:	2b59      	cmp	r3, #89	; 0x59
 8017d3e:	d199      	bne.n	8017c74 <_scanf_float+0x60>
 8017d40:	2d07      	cmp	r5, #7
 8017d42:	d197      	bne.n	8017c74 <_scanf_float+0x60>
 8017d44:	2508      	movs	r5, #8
 8017d46:	e029      	b.n	8017d9c <_scanf_float+0x188>
 8017d48:	2b74      	cmp	r3, #116	; 0x74
 8017d4a:	d06f      	beq.n	8017e2c <_scanf_float+0x218>
 8017d4c:	2b79      	cmp	r3, #121	; 0x79
 8017d4e:	e7f6      	b.n	8017d3e <_scanf_float+0x12a>
 8017d50:	6821      	ldr	r1, [r4, #0]
 8017d52:	05c8      	lsls	r0, r1, #23
 8017d54:	d51a      	bpl.n	8017d8c <_scanf_float+0x178>
 8017d56:	9b02      	ldr	r3, [sp, #8]
 8017d58:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8017d5c:	6021      	str	r1, [r4, #0]
 8017d5e:	f109 0901 	add.w	r9, r9, #1
 8017d62:	b11b      	cbz	r3, 8017d6c <_scanf_float+0x158>
 8017d64:	3b01      	subs	r3, #1
 8017d66:	3201      	adds	r2, #1
 8017d68:	9302      	str	r3, [sp, #8]
 8017d6a:	60a2      	str	r2, [r4, #8]
 8017d6c:	68a3      	ldr	r3, [r4, #8]
 8017d6e:	3b01      	subs	r3, #1
 8017d70:	60a3      	str	r3, [r4, #8]
 8017d72:	6923      	ldr	r3, [r4, #16]
 8017d74:	3301      	adds	r3, #1
 8017d76:	6123      	str	r3, [r4, #16]
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	3b01      	subs	r3, #1
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	607b      	str	r3, [r7, #4]
 8017d80:	f340 8084 	ble.w	8017e8c <_scanf_float+0x278>
 8017d84:	683b      	ldr	r3, [r7, #0]
 8017d86:	3301      	adds	r3, #1
 8017d88:	603b      	str	r3, [r7, #0]
 8017d8a:	e766      	b.n	8017c5a <_scanf_float+0x46>
 8017d8c:	eb1a 0f05 	cmn.w	sl, r5
 8017d90:	f47f af70 	bne.w	8017c74 <_scanf_float+0x60>
 8017d94:	6822      	ldr	r2, [r4, #0]
 8017d96:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8017d9a:	6022      	str	r2, [r4, #0]
 8017d9c:	f806 3b01 	strb.w	r3, [r6], #1
 8017da0:	e7e4      	b.n	8017d6c <_scanf_float+0x158>
 8017da2:	6822      	ldr	r2, [r4, #0]
 8017da4:	0610      	lsls	r0, r2, #24
 8017da6:	f57f af65 	bpl.w	8017c74 <_scanf_float+0x60>
 8017daa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017dae:	e7f4      	b.n	8017d9a <_scanf_float+0x186>
 8017db0:	f1ba 0f00 	cmp.w	sl, #0
 8017db4:	d10e      	bne.n	8017dd4 <_scanf_float+0x1c0>
 8017db6:	f1b9 0f00 	cmp.w	r9, #0
 8017dba:	d10e      	bne.n	8017dda <_scanf_float+0x1c6>
 8017dbc:	6822      	ldr	r2, [r4, #0]
 8017dbe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8017dc2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8017dc6:	d108      	bne.n	8017dda <_scanf_float+0x1c6>
 8017dc8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017dcc:	6022      	str	r2, [r4, #0]
 8017dce:	f04f 0a01 	mov.w	sl, #1
 8017dd2:	e7e3      	b.n	8017d9c <_scanf_float+0x188>
 8017dd4:	f1ba 0f02 	cmp.w	sl, #2
 8017dd8:	d055      	beq.n	8017e86 <_scanf_float+0x272>
 8017dda:	2d01      	cmp	r5, #1
 8017ddc:	d002      	beq.n	8017de4 <_scanf_float+0x1d0>
 8017dde:	2d04      	cmp	r5, #4
 8017de0:	f47f af48 	bne.w	8017c74 <_scanf_float+0x60>
 8017de4:	3501      	adds	r5, #1
 8017de6:	b2ed      	uxtb	r5, r5
 8017de8:	e7d8      	b.n	8017d9c <_scanf_float+0x188>
 8017dea:	f1ba 0f01 	cmp.w	sl, #1
 8017dee:	f47f af41 	bne.w	8017c74 <_scanf_float+0x60>
 8017df2:	f04f 0a02 	mov.w	sl, #2
 8017df6:	e7d1      	b.n	8017d9c <_scanf_float+0x188>
 8017df8:	b97d      	cbnz	r5, 8017e1a <_scanf_float+0x206>
 8017dfa:	f1b9 0f00 	cmp.w	r9, #0
 8017dfe:	f47f af3c 	bne.w	8017c7a <_scanf_float+0x66>
 8017e02:	6822      	ldr	r2, [r4, #0]
 8017e04:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8017e08:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8017e0c:	f47f af39 	bne.w	8017c82 <_scanf_float+0x6e>
 8017e10:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017e14:	6022      	str	r2, [r4, #0]
 8017e16:	2501      	movs	r5, #1
 8017e18:	e7c0      	b.n	8017d9c <_scanf_float+0x188>
 8017e1a:	2d03      	cmp	r5, #3
 8017e1c:	d0e2      	beq.n	8017de4 <_scanf_float+0x1d0>
 8017e1e:	2d05      	cmp	r5, #5
 8017e20:	e7de      	b.n	8017de0 <_scanf_float+0x1cc>
 8017e22:	2d02      	cmp	r5, #2
 8017e24:	f47f af26 	bne.w	8017c74 <_scanf_float+0x60>
 8017e28:	2503      	movs	r5, #3
 8017e2a:	e7b7      	b.n	8017d9c <_scanf_float+0x188>
 8017e2c:	2d06      	cmp	r5, #6
 8017e2e:	f47f af21 	bne.w	8017c74 <_scanf_float+0x60>
 8017e32:	2507      	movs	r5, #7
 8017e34:	e7b2      	b.n	8017d9c <_scanf_float+0x188>
 8017e36:	6822      	ldr	r2, [r4, #0]
 8017e38:	0591      	lsls	r1, r2, #22
 8017e3a:	f57f af1b 	bpl.w	8017c74 <_scanf_float+0x60>
 8017e3e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8017e42:	6022      	str	r2, [r4, #0]
 8017e44:	f8cd 9004 	str.w	r9, [sp, #4]
 8017e48:	e7a8      	b.n	8017d9c <_scanf_float+0x188>
 8017e4a:	6822      	ldr	r2, [r4, #0]
 8017e4c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8017e50:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8017e54:	d006      	beq.n	8017e64 <_scanf_float+0x250>
 8017e56:	0550      	lsls	r0, r2, #21
 8017e58:	f57f af0c 	bpl.w	8017c74 <_scanf_float+0x60>
 8017e5c:	f1b9 0f00 	cmp.w	r9, #0
 8017e60:	f43f af0f 	beq.w	8017c82 <_scanf_float+0x6e>
 8017e64:	0591      	lsls	r1, r2, #22
 8017e66:	bf58      	it	pl
 8017e68:	9901      	ldrpl	r1, [sp, #4]
 8017e6a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017e6e:	bf58      	it	pl
 8017e70:	eba9 0101 	subpl.w	r1, r9, r1
 8017e74:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8017e78:	bf58      	it	pl
 8017e7a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8017e7e:	6022      	str	r2, [r4, #0]
 8017e80:	f04f 0900 	mov.w	r9, #0
 8017e84:	e78a      	b.n	8017d9c <_scanf_float+0x188>
 8017e86:	f04f 0a03 	mov.w	sl, #3
 8017e8a:	e787      	b.n	8017d9c <_scanf_float+0x188>
 8017e8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017e90:	4639      	mov	r1, r7
 8017e92:	4640      	mov	r0, r8
 8017e94:	4798      	blx	r3
 8017e96:	2800      	cmp	r0, #0
 8017e98:	f43f aedf 	beq.w	8017c5a <_scanf_float+0x46>
 8017e9c:	e6ea      	b.n	8017c74 <_scanf_float+0x60>
 8017e9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017ea2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017ea6:	463a      	mov	r2, r7
 8017ea8:	4640      	mov	r0, r8
 8017eaa:	4798      	blx	r3
 8017eac:	6923      	ldr	r3, [r4, #16]
 8017eae:	3b01      	subs	r3, #1
 8017eb0:	6123      	str	r3, [r4, #16]
 8017eb2:	e6ec      	b.n	8017c8e <_scanf_float+0x7a>
 8017eb4:	1e6b      	subs	r3, r5, #1
 8017eb6:	2b06      	cmp	r3, #6
 8017eb8:	d825      	bhi.n	8017f06 <_scanf_float+0x2f2>
 8017eba:	2d02      	cmp	r5, #2
 8017ebc:	d836      	bhi.n	8017f2c <_scanf_float+0x318>
 8017ebe:	455e      	cmp	r6, fp
 8017ec0:	f67f aee8 	bls.w	8017c94 <_scanf_float+0x80>
 8017ec4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017ec8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017ecc:	463a      	mov	r2, r7
 8017ece:	4640      	mov	r0, r8
 8017ed0:	4798      	blx	r3
 8017ed2:	6923      	ldr	r3, [r4, #16]
 8017ed4:	3b01      	subs	r3, #1
 8017ed6:	6123      	str	r3, [r4, #16]
 8017ed8:	e7f1      	b.n	8017ebe <_scanf_float+0x2aa>
 8017eda:	9802      	ldr	r0, [sp, #8]
 8017edc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017ee0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8017ee4:	9002      	str	r0, [sp, #8]
 8017ee6:	463a      	mov	r2, r7
 8017ee8:	4640      	mov	r0, r8
 8017eea:	4798      	blx	r3
 8017eec:	6923      	ldr	r3, [r4, #16]
 8017eee:	3b01      	subs	r3, #1
 8017ef0:	6123      	str	r3, [r4, #16]
 8017ef2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017ef6:	fa5f fa8a 	uxtb.w	sl, sl
 8017efa:	f1ba 0f02 	cmp.w	sl, #2
 8017efe:	d1ec      	bne.n	8017eda <_scanf_float+0x2c6>
 8017f00:	3d03      	subs	r5, #3
 8017f02:	b2ed      	uxtb	r5, r5
 8017f04:	1b76      	subs	r6, r6, r5
 8017f06:	6823      	ldr	r3, [r4, #0]
 8017f08:	05da      	lsls	r2, r3, #23
 8017f0a:	d52f      	bpl.n	8017f6c <_scanf_float+0x358>
 8017f0c:	055b      	lsls	r3, r3, #21
 8017f0e:	d510      	bpl.n	8017f32 <_scanf_float+0x31e>
 8017f10:	455e      	cmp	r6, fp
 8017f12:	f67f aebf 	bls.w	8017c94 <_scanf_float+0x80>
 8017f16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017f1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017f1e:	463a      	mov	r2, r7
 8017f20:	4640      	mov	r0, r8
 8017f22:	4798      	blx	r3
 8017f24:	6923      	ldr	r3, [r4, #16]
 8017f26:	3b01      	subs	r3, #1
 8017f28:	6123      	str	r3, [r4, #16]
 8017f2a:	e7f1      	b.n	8017f10 <_scanf_float+0x2fc>
 8017f2c:	46aa      	mov	sl, r5
 8017f2e:	9602      	str	r6, [sp, #8]
 8017f30:	e7df      	b.n	8017ef2 <_scanf_float+0x2de>
 8017f32:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8017f36:	6923      	ldr	r3, [r4, #16]
 8017f38:	2965      	cmp	r1, #101	; 0x65
 8017f3a:	f103 33ff 	add.w	r3, r3, #4294967295
 8017f3e:	f106 35ff 	add.w	r5, r6, #4294967295
 8017f42:	6123      	str	r3, [r4, #16]
 8017f44:	d00c      	beq.n	8017f60 <_scanf_float+0x34c>
 8017f46:	2945      	cmp	r1, #69	; 0x45
 8017f48:	d00a      	beq.n	8017f60 <_scanf_float+0x34c>
 8017f4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017f4e:	463a      	mov	r2, r7
 8017f50:	4640      	mov	r0, r8
 8017f52:	4798      	blx	r3
 8017f54:	6923      	ldr	r3, [r4, #16]
 8017f56:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8017f5a:	3b01      	subs	r3, #1
 8017f5c:	1eb5      	subs	r5, r6, #2
 8017f5e:	6123      	str	r3, [r4, #16]
 8017f60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017f64:	463a      	mov	r2, r7
 8017f66:	4640      	mov	r0, r8
 8017f68:	4798      	blx	r3
 8017f6a:	462e      	mov	r6, r5
 8017f6c:	6825      	ldr	r5, [r4, #0]
 8017f6e:	f015 0510 	ands.w	r5, r5, #16
 8017f72:	d158      	bne.n	8018026 <_scanf_float+0x412>
 8017f74:	7035      	strb	r5, [r6, #0]
 8017f76:	6823      	ldr	r3, [r4, #0]
 8017f78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8017f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017f80:	d11c      	bne.n	8017fbc <_scanf_float+0x3a8>
 8017f82:	9b01      	ldr	r3, [sp, #4]
 8017f84:	454b      	cmp	r3, r9
 8017f86:	eba3 0209 	sub.w	r2, r3, r9
 8017f8a:	d124      	bne.n	8017fd6 <_scanf_float+0x3c2>
 8017f8c:	2200      	movs	r2, #0
 8017f8e:	4659      	mov	r1, fp
 8017f90:	4640      	mov	r0, r8
 8017f92:	f001 f873 	bl	801907c <_strtod_r>
 8017f96:	9b03      	ldr	r3, [sp, #12]
 8017f98:	6821      	ldr	r1, [r4, #0]
 8017f9a:	681b      	ldr	r3, [r3, #0]
 8017f9c:	f011 0f02 	tst.w	r1, #2
 8017fa0:	ec57 6b10 	vmov	r6, r7, d0
 8017fa4:	f103 0204 	add.w	r2, r3, #4
 8017fa8:	d020      	beq.n	8017fec <_scanf_float+0x3d8>
 8017faa:	9903      	ldr	r1, [sp, #12]
 8017fac:	600a      	str	r2, [r1, #0]
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	e9c3 6700 	strd	r6, r7, [r3]
 8017fb4:	68e3      	ldr	r3, [r4, #12]
 8017fb6:	3301      	adds	r3, #1
 8017fb8:	60e3      	str	r3, [r4, #12]
 8017fba:	e66c      	b.n	8017c96 <_scanf_float+0x82>
 8017fbc:	9b04      	ldr	r3, [sp, #16]
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d0e4      	beq.n	8017f8c <_scanf_float+0x378>
 8017fc2:	9905      	ldr	r1, [sp, #20]
 8017fc4:	230a      	movs	r3, #10
 8017fc6:	462a      	mov	r2, r5
 8017fc8:	3101      	adds	r1, #1
 8017fca:	4640      	mov	r0, r8
 8017fcc:	f001 f8e0 	bl	8019190 <_strtol_r>
 8017fd0:	9b04      	ldr	r3, [sp, #16]
 8017fd2:	9e05      	ldr	r6, [sp, #20]
 8017fd4:	1ac2      	subs	r2, r0, r3
 8017fd6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8017fda:	429e      	cmp	r6, r3
 8017fdc:	bf28      	it	cs
 8017fde:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8017fe2:	4912      	ldr	r1, [pc, #72]	; (801802c <_scanf_float+0x418>)
 8017fe4:	4630      	mov	r0, r6
 8017fe6:	f000 f977 	bl	80182d8 <siprintf>
 8017fea:	e7cf      	b.n	8017f8c <_scanf_float+0x378>
 8017fec:	f011 0f04 	tst.w	r1, #4
 8017ff0:	9903      	ldr	r1, [sp, #12]
 8017ff2:	600a      	str	r2, [r1, #0]
 8017ff4:	d1db      	bne.n	8017fae <_scanf_float+0x39a>
 8017ff6:	f8d3 8000 	ldr.w	r8, [r3]
 8017ffa:	ee10 2a10 	vmov	r2, s0
 8017ffe:	ee10 0a10 	vmov	r0, s0
 8018002:	463b      	mov	r3, r7
 8018004:	4639      	mov	r1, r7
 8018006:	f7e8 fdb1 	bl	8000b6c <__aeabi_dcmpun>
 801800a:	b128      	cbz	r0, 8018018 <_scanf_float+0x404>
 801800c:	4808      	ldr	r0, [pc, #32]	; (8018030 <_scanf_float+0x41c>)
 801800e:	f000 f919 	bl	8018244 <nanf>
 8018012:	ed88 0a00 	vstr	s0, [r8]
 8018016:	e7cd      	b.n	8017fb4 <_scanf_float+0x3a0>
 8018018:	4630      	mov	r0, r6
 801801a:	4639      	mov	r1, r7
 801801c:	f7e8 fe04 	bl	8000c28 <__aeabi_d2f>
 8018020:	f8c8 0000 	str.w	r0, [r8]
 8018024:	e7c6      	b.n	8017fb4 <_scanf_float+0x3a0>
 8018026:	2500      	movs	r5, #0
 8018028:	e635      	b.n	8017c96 <_scanf_float+0x82>
 801802a:	bf00      	nop
 801802c:	0801d8ca 	.word	0x0801d8ca
 8018030:	0801d95b 	.word	0x0801d95b

08018034 <iprintf>:
 8018034:	b40f      	push	{r0, r1, r2, r3}
 8018036:	4b0a      	ldr	r3, [pc, #40]	; (8018060 <iprintf+0x2c>)
 8018038:	b513      	push	{r0, r1, r4, lr}
 801803a:	681c      	ldr	r4, [r3, #0]
 801803c:	b124      	cbz	r4, 8018048 <iprintf+0x14>
 801803e:	69a3      	ldr	r3, [r4, #24]
 8018040:	b913      	cbnz	r3, 8018048 <iprintf+0x14>
 8018042:	4620      	mov	r0, r4
 8018044:	f7fe ffcc 	bl	8016fe0 <__sinit>
 8018048:	ab05      	add	r3, sp, #20
 801804a:	9a04      	ldr	r2, [sp, #16]
 801804c:	68a1      	ldr	r1, [r4, #8]
 801804e:	9301      	str	r3, [sp, #4]
 8018050:	4620      	mov	r0, r4
 8018052:	f003 fdfd 	bl	801bc50 <_vfiprintf_r>
 8018056:	b002      	add	sp, #8
 8018058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801805c:	b004      	add	sp, #16
 801805e:	4770      	bx	lr
 8018060:	200000f8 	.word	0x200000f8

08018064 <_puts_r>:
 8018064:	b570      	push	{r4, r5, r6, lr}
 8018066:	460e      	mov	r6, r1
 8018068:	4605      	mov	r5, r0
 801806a:	b118      	cbz	r0, 8018074 <_puts_r+0x10>
 801806c:	6983      	ldr	r3, [r0, #24]
 801806e:	b90b      	cbnz	r3, 8018074 <_puts_r+0x10>
 8018070:	f7fe ffb6 	bl	8016fe0 <__sinit>
 8018074:	69ab      	ldr	r3, [r5, #24]
 8018076:	68ac      	ldr	r4, [r5, #8]
 8018078:	b913      	cbnz	r3, 8018080 <_puts_r+0x1c>
 801807a:	4628      	mov	r0, r5
 801807c:	f7fe ffb0 	bl	8016fe0 <__sinit>
 8018080:	4b2c      	ldr	r3, [pc, #176]	; (8018134 <_puts_r+0xd0>)
 8018082:	429c      	cmp	r4, r3
 8018084:	d120      	bne.n	80180c8 <_puts_r+0x64>
 8018086:	686c      	ldr	r4, [r5, #4]
 8018088:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801808a:	07db      	lsls	r3, r3, #31
 801808c:	d405      	bmi.n	801809a <_puts_r+0x36>
 801808e:	89a3      	ldrh	r3, [r4, #12]
 8018090:	0598      	lsls	r0, r3, #22
 8018092:	d402      	bmi.n	801809a <_puts_r+0x36>
 8018094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018096:	f7ff f866 	bl	8017166 <__retarget_lock_acquire_recursive>
 801809a:	89a3      	ldrh	r3, [r4, #12]
 801809c:	0719      	lsls	r1, r3, #28
 801809e:	d51d      	bpl.n	80180dc <_puts_r+0x78>
 80180a0:	6923      	ldr	r3, [r4, #16]
 80180a2:	b1db      	cbz	r3, 80180dc <_puts_r+0x78>
 80180a4:	3e01      	subs	r6, #1
 80180a6:	68a3      	ldr	r3, [r4, #8]
 80180a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80180ac:	3b01      	subs	r3, #1
 80180ae:	60a3      	str	r3, [r4, #8]
 80180b0:	bb39      	cbnz	r1, 8018102 <_puts_r+0x9e>
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	da38      	bge.n	8018128 <_puts_r+0xc4>
 80180b6:	4622      	mov	r2, r4
 80180b8:	210a      	movs	r1, #10
 80180ba:	4628      	mov	r0, r5
 80180bc:	f001 f92c 	bl	8019318 <__swbuf_r>
 80180c0:	3001      	adds	r0, #1
 80180c2:	d011      	beq.n	80180e8 <_puts_r+0x84>
 80180c4:	250a      	movs	r5, #10
 80180c6:	e011      	b.n	80180ec <_puts_r+0x88>
 80180c8:	4b1b      	ldr	r3, [pc, #108]	; (8018138 <_puts_r+0xd4>)
 80180ca:	429c      	cmp	r4, r3
 80180cc:	d101      	bne.n	80180d2 <_puts_r+0x6e>
 80180ce:	68ac      	ldr	r4, [r5, #8]
 80180d0:	e7da      	b.n	8018088 <_puts_r+0x24>
 80180d2:	4b1a      	ldr	r3, [pc, #104]	; (801813c <_puts_r+0xd8>)
 80180d4:	429c      	cmp	r4, r3
 80180d6:	bf08      	it	eq
 80180d8:	68ec      	ldreq	r4, [r5, #12]
 80180da:	e7d5      	b.n	8018088 <_puts_r+0x24>
 80180dc:	4621      	mov	r1, r4
 80180de:	4628      	mov	r0, r5
 80180e0:	f001 f97e 	bl	80193e0 <__swsetup_r>
 80180e4:	2800      	cmp	r0, #0
 80180e6:	d0dd      	beq.n	80180a4 <_puts_r+0x40>
 80180e8:	f04f 35ff 	mov.w	r5, #4294967295
 80180ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80180ee:	07da      	lsls	r2, r3, #31
 80180f0:	d405      	bmi.n	80180fe <_puts_r+0x9a>
 80180f2:	89a3      	ldrh	r3, [r4, #12]
 80180f4:	059b      	lsls	r3, r3, #22
 80180f6:	d402      	bmi.n	80180fe <_puts_r+0x9a>
 80180f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80180fa:	f7ff f835 	bl	8017168 <__retarget_lock_release_recursive>
 80180fe:	4628      	mov	r0, r5
 8018100:	bd70      	pop	{r4, r5, r6, pc}
 8018102:	2b00      	cmp	r3, #0
 8018104:	da04      	bge.n	8018110 <_puts_r+0xac>
 8018106:	69a2      	ldr	r2, [r4, #24]
 8018108:	429a      	cmp	r2, r3
 801810a:	dc06      	bgt.n	801811a <_puts_r+0xb6>
 801810c:	290a      	cmp	r1, #10
 801810e:	d004      	beq.n	801811a <_puts_r+0xb6>
 8018110:	6823      	ldr	r3, [r4, #0]
 8018112:	1c5a      	adds	r2, r3, #1
 8018114:	6022      	str	r2, [r4, #0]
 8018116:	7019      	strb	r1, [r3, #0]
 8018118:	e7c5      	b.n	80180a6 <_puts_r+0x42>
 801811a:	4622      	mov	r2, r4
 801811c:	4628      	mov	r0, r5
 801811e:	f001 f8fb 	bl	8019318 <__swbuf_r>
 8018122:	3001      	adds	r0, #1
 8018124:	d1bf      	bne.n	80180a6 <_puts_r+0x42>
 8018126:	e7df      	b.n	80180e8 <_puts_r+0x84>
 8018128:	6823      	ldr	r3, [r4, #0]
 801812a:	250a      	movs	r5, #10
 801812c:	1c5a      	adds	r2, r3, #1
 801812e:	6022      	str	r2, [r4, #0]
 8018130:	701d      	strb	r5, [r3, #0]
 8018132:	e7db      	b.n	80180ec <_puts_r+0x88>
 8018134:	0801d854 	.word	0x0801d854
 8018138:	0801d874 	.word	0x0801d874
 801813c:	0801d834 	.word	0x0801d834

08018140 <puts>:
 8018140:	4b02      	ldr	r3, [pc, #8]	; (801814c <puts+0xc>)
 8018142:	4601      	mov	r1, r0
 8018144:	6818      	ldr	r0, [r3, #0]
 8018146:	f7ff bf8d 	b.w	8018064 <_puts_r>
 801814a:	bf00      	nop
 801814c:	200000f8 	.word	0x200000f8

08018150 <cleanup_glue>:
 8018150:	b538      	push	{r3, r4, r5, lr}
 8018152:	460c      	mov	r4, r1
 8018154:	6809      	ldr	r1, [r1, #0]
 8018156:	4605      	mov	r5, r0
 8018158:	b109      	cbz	r1, 801815e <cleanup_glue+0xe>
 801815a:	f7ff fff9 	bl	8018150 <cleanup_glue>
 801815e:	4621      	mov	r1, r4
 8018160:	4628      	mov	r0, r5
 8018162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018166:	f7ff b841 	b.w	80171ec <_free_r>
	...

0801816c <_reclaim_reent>:
 801816c:	4b2c      	ldr	r3, [pc, #176]	; (8018220 <_reclaim_reent+0xb4>)
 801816e:	681b      	ldr	r3, [r3, #0]
 8018170:	4283      	cmp	r3, r0
 8018172:	b570      	push	{r4, r5, r6, lr}
 8018174:	4604      	mov	r4, r0
 8018176:	d051      	beq.n	801821c <_reclaim_reent+0xb0>
 8018178:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801817a:	b143      	cbz	r3, 801818e <_reclaim_reent+0x22>
 801817c:	68db      	ldr	r3, [r3, #12]
 801817e:	2b00      	cmp	r3, #0
 8018180:	d14a      	bne.n	8018218 <_reclaim_reent+0xac>
 8018182:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018184:	6819      	ldr	r1, [r3, #0]
 8018186:	b111      	cbz	r1, 801818e <_reclaim_reent+0x22>
 8018188:	4620      	mov	r0, r4
 801818a:	f7ff f82f 	bl	80171ec <_free_r>
 801818e:	6961      	ldr	r1, [r4, #20]
 8018190:	b111      	cbz	r1, 8018198 <_reclaim_reent+0x2c>
 8018192:	4620      	mov	r0, r4
 8018194:	f7ff f82a 	bl	80171ec <_free_r>
 8018198:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801819a:	b111      	cbz	r1, 80181a2 <_reclaim_reent+0x36>
 801819c:	4620      	mov	r0, r4
 801819e:	f7ff f825 	bl	80171ec <_free_r>
 80181a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80181a4:	b111      	cbz	r1, 80181ac <_reclaim_reent+0x40>
 80181a6:	4620      	mov	r0, r4
 80181a8:	f7ff f820 	bl	80171ec <_free_r>
 80181ac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80181ae:	b111      	cbz	r1, 80181b6 <_reclaim_reent+0x4a>
 80181b0:	4620      	mov	r0, r4
 80181b2:	f7ff f81b 	bl	80171ec <_free_r>
 80181b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80181b8:	b111      	cbz	r1, 80181c0 <_reclaim_reent+0x54>
 80181ba:	4620      	mov	r0, r4
 80181bc:	f7ff f816 	bl	80171ec <_free_r>
 80181c0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80181c2:	b111      	cbz	r1, 80181ca <_reclaim_reent+0x5e>
 80181c4:	4620      	mov	r0, r4
 80181c6:	f7ff f811 	bl	80171ec <_free_r>
 80181ca:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80181cc:	b111      	cbz	r1, 80181d4 <_reclaim_reent+0x68>
 80181ce:	4620      	mov	r0, r4
 80181d0:	f7ff f80c 	bl	80171ec <_free_r>
 80181d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80181d6:	b111      	cbz	r1, 80181de <_reclaim_reent+0x72>
 80181d8:	4620      	mov	r0, r4
 80181da:	f7ff f807 	bl	80171ec <_free_r>
 80181de:	69a3      	ldr	r3, [r4, #24]
 80181e0:	b1e3      	cbz	r3, 801821c <_reclaim_reent+0xb0>
 80181e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80181e4:	4620      	mov	r0, r4
 80181e6:	4798      	blx	r3
 80181e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80181ea:	b1b9      	cbz	r1, 801821c <_reclaim_reent+0xb0>
 80181ec:	4620      	mov	r0, r4
 80181ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80181f2:	f7ff bfad 	b.w	8018150 <cleanup_glue>
 80181f6:	5949      	ldr	r1, [r1, r5]
 80181f8:	b941      	cbnz	r1, 801820c <_reclaim_reent+0xa0>
 80181fa:	3504      	adds	r5, #4
 80181fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80181fe:	2d80      	cmp	r5, #128	; 0x80
 8018200:	68d9      	ldr	r1, [r3, #12]
 8018202:	d1f8      	bne.n	80181f6 <_reclaim_reent+0x8a>
 8018204:	4620      	mov	r0, r4
 8018206:	f7fe fff1 	bl	80171ec <_free_r>
 801820a:	e7ba      	b.n	8018182 <_reclaim_reent+0x16>
 801820c:	680e      	ldr	r6, [r1, #0]
 801820e:	4620      	mov	r0, r4
 8018210:	f7fe ffec 	bl	80171ec <_free_r>
 8018214:	4631      	mov	r1, r6
 8018216:	e7ef      	b.n	80181f8 <_reclaim_reent+0x8c>
 8018218:	2500      	movs	r5, #0
 801821a:	e7ef      	b.n	80181fc <_reclaim_reent+0x90>
 801821c:	bd70      	pop	{r4, r5, r6, pc}
 801821e:	bf00      	nop
 8018220:	200000f8 	.word	0x200000f8

08018224 <_sbrk_r>:
 8018224:	b538      	push	{r3, r4, r5, lr}
 8018226:	4d06      	ldr	r5, [pc, #24]	; (8018240 <_sbrk_r+0x1c>)
 8018228:	2300      	movs	r3, #0
 801822a:	4604      	mov	r4, r0
 801822c:	4608      	mov	r0, r1
 801822e:	602b      	str	r3, [r5, #0]
 8018230:	f004 f880 	bl	801c334 <_sbrk>
 8018234:	1c43      	adds	r3, r0, #1
 8018236:	d102      	bne.n	801823e <_sbrk_r+0x1a>
 8018238:	682b      	ldr	r3, [r5, #0]
 801823a:	b103      	cbz	r3, 801823e <_sbrk_r+0x1a>
 801823c:	6023      	str	r3, [r4, #0]
 801823e:	bd38      	pop	{r3, r4, r5, pc}
 8018240:	2000d0c8 	.word	0x2000d0c8

08018244 <nanf>:
 8018244:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801824c <nanf+0x8>
 8018248:	4770      	bx	lr
 801824a:	bf00      	nop
 801824c:	7fc00000 	.word	0x7fc00000

08018250 <_raise_r>:
 8018250:	291f      	cmp	r1, #31
 8018252:	b538      	push	{r3, r4, r5, lr}
 8018254:	4604      	mov	r4, r0
 8018256:	460d      	mov	r5, r1
 8018258:	d904      	bls.n	8018264 <_raise_r+0x14>
 801825a:	2316      	movs	r3, #22
 801825c:	6003      	str	r3, [r0, #0]
 801825e:	f04f 30ff 	mov.w	r0, #4294967295
 8018262:	bd38      	pop	{r3, r4, r5, pc}
 8018264:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018266:	b112      	cbz	r2, 801826e <_raise_r+0x1e>
 8018268:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801826c:	b94b      	cbnz	r3, 8018282 <_raise_r+0x32>
 801826e:	4620      	mov	r0, r4
 8018270:	f000 f830 	bl	80182d4 <_getpid_r>
 8018274:	462a      	mov	r2, r5
 8018276:	4601      	mov	r1, r0
 8018278:	4620      	mov	r0, r4
 801827a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801827e:	f000 b817 	b.w	80182b0 <_kill_r>
 8018282:	2b01      	cmp	r3, #1
 8018284:	d00a      	beq.n	801829c <_raise_r+0x4c>
 8018286:	1c59      	adds	r1, r3, #1
 8018288:	d103      	bne.n	8018292 <_raise_r+0x42>
 801828a:	2316      	movs	r3, #22
 801828c:	6003      	str	r3, [r0, #0]
 801828e:	2001      	movs	r0, #1
 8018290:	e7e7      	b.n	8018262 <_raise_r+0x12>
 8018292:	2400      	movs	r4, #0
 8018294:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018298:	4628      	mov	r0, r5
 801829a:	4798      	blx	r3
 801829c:	2000      	movs	r0, #0
 801829e:	e7e0      	b.n	8018262 <_raise_r+0x12>

080182a0 <raise>:
 80182a0:	4b02      	ldr	r3, [pc, #8]	; (80182ac <raise+0xc>)
 80182a2:	4601      	mov	r1, r0
 80182a4:	6818      	ldr	r0, [r3, #0]
 80182a6:	f7ff bfd3 	b.w	8018250 <_raise_r>
 80182aa:	bf00      	nop
 80182ac:	200000f8 	.word	0x200000f8

080182b0 <_kill_r>:
 80182b0:	b538      	push	{r3, r4, r5, lr}
 80182b2:	4d07      	ldr	r5, [pc, #28]	; (80182d0 <_kill_r+0x20>)
 80182b4:	2300      	movs	r3, #0
 80182b6:	4604      	mov	r4, r0
 80182b8:	4608      	mov	r0, r1
 80182ba:	4611      	mov	r1, r2
 80182bc:	602b      	str	r3, [r5, #0]
 80182be:	f004 f821 	bl	801c304 <_kill>
 80182c2:	1c43      	adds	r3, r0, #1
 80182c4:	d102      	bne.n	80182cc <_kill_r+0x1c>
 80182c6:	682b      	ldr	r3, [r5, #0]
 80182c8:	b103      	cbz	r3, 80182cc <_kill_r+0x1c>
 80182ca:	6023      	str	r3, [r4, #0]
 80182cc:	bd38      	pop	{r3, r4, r5, pc}
 80182ce:	bf00      	nop
 80182d0:	2000d0c8 	.word	0x2000d0c8

080182d4 <_getpid_r>:
 80182d4:	f004 b806 	b.w	801c2e4 <_getpid>

080182d8 <siprintf>:
 80182d8:	b40e      	push	{r1, r2, r3}
 80182da:	b500      	push	{lr}
 80182dc:	b09c      	sub	sp, #112	; 0x70
 80182de:	ab1d      	add	r3, sp, #116	; 0x74
 80182e0:	9002      	str	r0, [sp, #8]
 80182e2:	9006      	str	r0, [sp, #24]
 80182e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80182e8:	4809      	ldr	r0, [pc, #36]	; (8018310 <siprintf+0x38>)
 80182ea:	9107      	str	r1, [sp, #28]
 80182ec:	9104      	str	r1, [sp, #16]
 80182ee:	4909      	ldr	r1, [pc, #36]	; (8018314 <siprintf+0x3c>)
 80182f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80182f4:	9105      	str	r1, [sp, #20]
 80182f6:	6800      	ldr	r0, [r0, #0]
 80182f8:	9301      	str	r3, [sp, #4]
 80182fa:	a902      	add	r1, sp, #8
 80182fc:	f003 f9ac 	bl	801b658 <_svfiprintf_r>
 8018300:	9b02      	ldr	r3, [sp, #8]
 8018302:	2200      	movs	r2, #0
 8018304:	701a      	strb	r2, [r3, #0]
 8018306:	b01c      	add	sp, #112	; 0x70
 8018308:	f85d eb04 	ldr.w	lr, [sp], #4
 801830c:	b003      	add	sp, #12
 801830e:	4770      	bx	lr
 8018310:	200000f8 	.word	0x200000f8
 8018314:	ffff0208 	.word	0xffff0208

08018318 <siscanf>:
 8018318:	b40e      	push	{r1, r2, r3}
 801831a:	b510      	push	{r4, lr}
 801831c:	b09f      	sub	sp, #124	; 0x7c
 801831e:	ac21      	add	r4, sp, #132	; 0x84
 8018320:	f44f 7101 	mov.w	r1, #516	; 0x204
 8018324:	f854 2b04 	ldr.w	r2, [r4], #4
 8018328:	9201      	str	r2, [sp, #4]
 801832a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801832e:	9004      	str	r0, [sp, #16]
 8018330:	9008      	str	r0, [sp, #32]
 8018332:	f7e7 ff67 	bl	8000204 <strlen>
 8018336:	4b0c      	ldr	r3, [pc, #48]	; (8018368 <siscanf+0x50>)
 8018338:	9005      	str	r0, [sp, #20]
 801833a:	9009      	str	r0, [sp, #36]	; 0x24
 801833c:	930d      	str	r3, [sp, #52]	; 0x34
 801833e:	480b      	ldr	r0, [pc, #44]	; (801836c <siscanf+0x54>)
 8018340:	9a01      	ldr	r2, [sp, #4]
 8018342:	6800      	ldr	r0, [r0, #0]
 8018344:	9403      	str	r4, [sp, #12]
 8018346:	2300      	movs	r3, #0
 8018348:	9311      	str	r3, [sp, #68]	; 0x44
 801834a:	9316      	str	r3, [sp, #88]	; 0x58
 801834c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018350:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018354:	a904      	add	r1, sp, #16
 8018356:	4623      	mov	r3, r4
 8018358:	f003 fad8 	bl	801b90c <__ssvfiscanf_r>
 801835c:	b01f      	add	sp, #124	; 0x7c
 801835e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018362:	b003      	add	sp, #12
 8018364:	4770      	bx	lr
 8018366:	bf00      	nop
 8018368:	08018393 	.word	0x08018393
 801836c:	200000f8 	.word	0x200000f8

08018370 <__sread>:
 8018370:	b510      	push	{r4, lr}
 8018372:	460c      	mov	r4, r1
 8018374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018378:	f003 fee6 	bl	801c148 <_read_r>
 801837c:	2800      	cmp	r0, #0
 801837e:	bfab      	itete	ge
 8018380:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018382:	89a3      	ldrhlt	r3, [r4, #12]
 8018384:	181b      	addge	r3, r3, r0
 8018386:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801838a:	bfac      	ite	ge
 801838c:	6563      	strge	r3, [r4, #84]	; 0x54
 801838e:	81a3      	strhlt	r3, [r4, #12]
 8018390:	bd10      	pop	{r4, pc}

08018392 <__seofread>:
 8018392:	2000      	movs	r0, #0
 8018394:	4770      	bx	lr

08018396 <__swrite>:
 8018396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801839a:	461f      	mov	r7, r3
 801839c:	898b      	ldrh	r3, [r1, #12]
 801839e:	05db      	lsls	r3, r3, #23
 80183a0:	4605      	mov	r5, r0
 80183a2:	460c      	mov	r4, r1
 80183a4:	4616      	mov	r6, r2
 80183a6:	d505      	bpl.n	80183b4 <__swrite+0x1e>
 80183a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183ac:	2302      	movs	r3, #2
 80183ae:	2200      	movs	r2, #0
 80183b0:	f002 fb72 	bl	801aa98 <_lseek_r>
 80183b4:	89a3      	ldrh	r3, [r4, #12]
 80183b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80183ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80183be:	81a3      	strh	r3, [r4, #12]
 80183c0:	4632      	mov	r2, r6
 80183c2:	463b      	mov	r3, r7
 80183c4:	4628      	mov	r0, r5
 80183c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80183ca:	f000 bff7 	b.w	80193bc <_write_r>

080183ce <__sseek>:
 80183ce:	b510      	push	{r4, lr}
 80183d0:	460c      	mov	r4, r1
 80183d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183d6:	f002 fb5f 	bl	801aa98 <_lseek_r>
 80183da:	1c43      	adds	r3, r0, #1
 80183dc:	89a3      	ldrh	r3, [r4, #12]
 80183de:	bf15      	itete	ne
 80183e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80183e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80183e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80183ea:	81a3      	strheq	r3, [r4, #12]
 80183ec:	bf18      	it	ne
 80183ee:	81a3      	strhne	r3, [r4, #12]
 80183f0:	bd10      	pop	{r4, pc}

080183f2 <__sclose>:
 80183f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183f6:	f001 b87f 	b.w	80194f8 <_close_r>

080183fa <strcpy>:
 80183fa:	4603      	mov	r3, r0
 80183fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018400:	f803 2b01 	strb.w	r2, [r3], #1
 8018404:	2a00      	cmp	r2, #0
 8018406:	d1f9      	bne.n	80183fc <strcpy+0x2>
 8018408:	4770      	bx	lr

0801840a <strncmp>:
 801840a:	b510      	push	{r4, lr}
 801840c:	b16a      	cbz	r2, 801842a <strncmp+0x20>
 801840e:	3901      	subs	r1, #1
 8018410:	1884      	adds	r4, r0, r2
 8018412:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018416:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801841a:	4293      	cmp	r3, r2
 801841c:	d103      	bne.n	8018426 <strncmp+0x1c>
 801841e:	42a0      	cmp	r0, r4
 8018420:	d001      	beq.n	8018426 <strncmp+0x1c>
 8018422:	2b00      	cmp	r3, #0
 8018424:	d1f5      	bne.n	8018412 <strncmp+0x8>
 8018426:	1a98      	subs	r0, r3, r2
 8018428:	bd10      	pop	{r4, pc}
 801842a:	4610      	mov	r0, r2
 801842c:	e7fc      	b.n	8018428 <strncmp+0x1e>

0801842e <sulp>:
 801842e:	b570      	push	{r4, r5, r6, lr}
 8018430:	4604      	mov	r4, r0
 8018432:	460d      	mov	r5, r1
 8018434:	ec45 4b10 	vmov	d0, r4, r5
 8018438:	4616      	mov	r6, r2
 801843a:	f002 ff2d 	bl	801b298 <__ulp>
 801843e:	ec51 0b10 	vmov	r0, r1, d0
 8018442:	b17e      	cbz	r6, 8018464 <sulp+0x36>
 8018444:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8018448:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801844c:	2b00      	cmp	r3, #0
 801844e:	dd09      	ble.n	8018464 <sulp+0x36>
 8018450:	051b      	lsls	r3, r3, #20
 8018452:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8018456:	2400      	movs	r4, #0
 8018458:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801845c:	4622      	mov	r2, r4
 801845e:	462b      	mov	r3, r5
 8018460:	f7e8 f8ea 	bl	8000638 <__aeabi_dmul>
 8018464:	bd70      	pop	{r4, r5, r6, pc}
	...

08018468 <_strtod_l>:
 8018468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801846c:	b0a3      	sub	sp, #140	; 0x8c
 801846e:	461f      	mov	r7, r3
 8018470:	2300      	movs	r3, #0
 8018472:	931e      	str	r3, [sp, #120]	; 0x78
 8018474:	4ba4      	ldr	r3, [pc, #656]	; (8018708 <_strtod_l+0x2a0>)
 8018476:	9219      	str	r2, [sp, #100]	; 0x64
 8018478:	681b      	ldr	r3, [r3, #0]
 801847a:	9307      	str	r3, [sp, #28]
 801847c:	4604      	mov	r4, r0
 801847e:	4618      	mov	r0, r3
 8018480:	4688      	mov	r8, r1
 8018482:	f7e7 febf 	bl	8000204 <strlen>
 8018486:	f04f 0a00 	mov.w	sl, #0
 801848a:	4605      	mov	r5, r0
 801848c:	f04f 0b00 	mov.w	fp, #0
 8018490:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8018494:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018496:	781a      	ldrb	r2, [r3, #0]
 8018498:	2a2b      	cmp	r2, #43	; 0x2b
 801849a:	d04c      	beq.n	8018536 <_strtod_l+0xce>
 801849c:	d839      	bhi.n	8018512 <_strtod_l+0xaa>
 801849e:	2a0d      	cmp	r2, #13
 80184a0:	d832      	bhi.n	8018508 <_strtod_l+0xa0>
 80184a2:	2a08      	cmp	r2, #8
 80184a4:	d832      	bhi.n	801850c <_strtod_l+0xa4>
 80184a6:	2a00      	cmp	r2, #0
 80184a8:	d03c      	beq.n	8018524 <_strtod_l+0xbc>
 80184aa:	2300      	movs	r3, #0
 80184ac:	930e      	str	r3, [sp, #56]	; 0x38
 80184ae:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80184b0:	7833      	ldrb	r3, [r6, #0]
 80184b2:	2b30      	cmp	r3, #48	; 0x30
 80184b4:	f040 80b4 	bne.w	8018620 <_strtod_l+0x1b8>
 80184b8:	7873      	ldrb	r3, [r6, #1]
 80184ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80184be:	2b58      	cmp	r3, #88	; 0x58
 80184c0:	d16c      	bne.n	801859c <_strtod_l+0x134>
 80184c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80184c4:	9301      	str	r3, [sp, #4]
 80184c6:	ab1e      	add	r3, sp, #120	; 0x78
 80184c8:	9702      	str	r7, [sp, #8]
 80184ca:	9300      	str	r3, [sp, #0]
 80184cc:	4a8f      	ldr	r2, [pc, #572]	; (801870c <_strtod_l+0x2a4>)
 80184ce:	ab1f      	add	r3, sp, #124	; 0x7c
 80184d0:	a91d      	add	r1, sp, #116	; 0x74
 80184d2:	4620      	mov	r0, r4
 80184d4:	f001 ffd4 	bl	801a480 <__gethex>
 80184d8:	f010 0707 	ands.w	r7, r0, #7
 80184dc:	4605      	mov	r5, r0
 80184de:	d005      	beq.n	80184ec <_strtod_l+0x84>
 80184e0:	2f06      	cmp	r7, #6
 80184e2:	d12a      	bne.n	801853a <_strtod_l+0xd2>
 80184e4:	3601      	adds	r6, #1
 80184e6:	2300      	movs	r3, #0
 80184e8:	961d      	str	r6, [sp, #116]	; 0x74
 80184ea:	930e      	str	r3, [sp, #56]	; 0x38
 80184ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	f040 8596 	bne.w	8019020 <_strtod_l+0xbb8>
 80184f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80184f6:	b1db      	cbz	r3, 8018530 <_strtod_l+0xc8>
 80184f8:	4652      	mov	r2, sl
 80184fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80184fe:	ec43 2b10 	vmov	d0, r2, r3
 8018502:	b023      	add	sp, #140	; 0x8c
 8018504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018508:	2a20      	cmp	r2, #32
 801850a:	d1ce      	bne.n	80184aa <_strtod_l+0x42>
 801850c:	3301      	adds	r3, #1
 801850e:	931d      	str	r3, [sp, #116]	; 0x74
 8018510:	e7c0      	b.n	8018494 <_strtod_l+0x2c>
 8018512:	2a2d      	cmp	r2, #45	; 0x2d
 8018514:	d1c9      	bne.n	80184aa <_strtod_l+0x42>
 8018516:	2201      	movs	r2, #1
 8018518:	920e      	str	r2, [sp, #56]	; 0x38
 801851a:	1c5a      	adds	r2, r3, #1
 801851c:	921d      	str	r2, [sp, #116]	; 0x74
 801851e:	785b      	ldrb	r3, [r3, #1]
 8018520:	2b00      	cmp	r3, #0
 8018522:	d1c4      	bne.n	80184ae <_strtod_l+0x46>
 8018524:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018526:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801852a:	2b00      	cmp	r3, #0
 801852c:	f040 8576 	bne.w	801901c <_strtod_l+0xbb4>
 8018530:	4652      	mov	r2, sl
 8018532:	465b      	mov	r3, fp
 8018534:	e7e3      	b.n	80184fe <_strtod_l+0x96>
 8018536:	2200      	movs	r2, #0
 8018538:	e7ee      	b.n	8018518 <_strtod_l+0xb0>
 801853a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801853c:	b13a      	cbz	r2, 801854e <_strtod_l+0xe6>
 801853e:	2135      	movs	r1, #53	; 0x35
 8018540:	a820      	add	r0, sp, #128	; 0x80
 8018542:	f002 ffb4 	bl	801b4ae <__copybits>
 8018546:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018548:	4620      	mov	r0, r4
 801854a:	f002 fb79 	bl	801ac40 <_Bfree>
 801854e:	3f01      	subs	r7, #1
 8018550:	2f05      	cmp	r7, #5
 8018552:	d807      	bhi.n	8018564 <_strtod_l+0xfc>
 8018554:	e8df f007 	tbb	[pc, r7]
 8018558:	1d180b0e 	.word	0x1d180b0e
 801855c:	030e      	.short	0x030e
 801855e:	f04f 0b00 	mov.w	fp, #0
 8018562:	46da      	mov	sl, fp
 8018564:	0728      	lsls	r0, r5, #28
 8018566:	d5c1      	bpl.n	80184ec <_strtod_l+0x84>
 8018568:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801856c:	e7be      	b.n	80184ec <_strtod_l+0x84>
 801856e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8018572:	e7f7      	b.n	8018564 <_strtod_l+0xfc>
 8018574:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8018578:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801857a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801857e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8018582:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8018586:	e7ed      	b.n	8018564 <_strtod_l+0xfc>
 8018588:	f8df b184 	ldr.w	fp, [pc, #388]	; 8018710 <_strtod_l+0x2a8>
 801858c:	f04f 0a00 	mov.w	sl, #0
 8018590:	e7e8      	b.n	8018564 <_strtod_l+0xfc>
 8018592:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8018596:	f04f 3aff 	mov.w	sl, #4294967295
 801859a:	e7e3      	b.n	8018564 <_strtod_l+0xfc>
 801859c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801859e:	1c5a      	adds	r2, r3, #1
 80185a0:	921d      	str	r2, [sp, #116]	; 0x74
 80185a2:	785b      	ldrb	r3, [r3, #1]
 80185a4:	2b30      	cmp	r3, #48	; 0x30
 80185a6:	d0f9      	beq.n	801859c <_strtod_l+0x134>
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d09f      	beq.n	80184ec <_strtod_l+0x84>
 80185ac:	2301      	movs	r3, #1
 80185ae:	f04f 0900 	mov.w	r9, #0
 80185b2:	9304      	str	r3, [sp, #16]
 80185b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80185b6:	930a      	str	r3, [sp, #40]	; 0x28
 80185b8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80185bc:	464f      	mov	r7, r9
 80185be:	220a      	movs	r2, #10
 80185c0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80185c2:	7806      	ldrb	r6, [r0, #0]
 80185c4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80185c8:	b2d9      	uxtb	r1, r3
 80185ca:	2909      	cmp	r1, #9
 80185cc:	d92a      	bls.n	8018624 <_strtod_l+0x1bc>
 80185ce:	9907      	ldr	r1, [sp, #28]
 80185d0:	462a      	mov	r2, r5
 80185d2:	f7ff ff1a 	bl	801840a <strncmp>
 80185d6:	b398      	cbz	r0, 8018640 <_strtod_l+0x1d8>
 80185d8:	2000      	movs	r0, #0
 80185da:	4633      	mov	r3, r6
 80185dc:	463d      	mov	r5, r7
 80185de:	9007      	str	r0, [sp, #28]
 80185e0:	4602      	mov	r2, r0
 80185e2:	2b65      	cmp	r3, #101	; 0x65
 80185e4:	d001      	beq.n	80185ea <_strtod_l+0x182>
 80185e6:	2b45      	cmp	r3, #69	; 0x45
 80185e8:	d118      	bne.n	801861c <_strtod_l+0x1b4>
 80185ea:	b91d      	cbnz	r5, 80185f4 <_strtod_l+0x18c>
 80185ec:	9b04      	ldr	r3, [sp, #16]
 80185ee:	4303      	orrs	r3, r0
 80185f0:	d098      	beq.n	8018524 <_strtod_l+0xbc>
 80185f2:	2500      	movs	r5, #0
 80185f4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80185f8:	f108 0301 	add.w	r3, r8, #1
 80185fc:	931d      	str	r3, [sp, #116]	; 0x74
 80185fe:	f898 3001 	ldrb.w	r3, [r8, #1]
 8018602:	2b2b      	cmp	r3, #43	; 0x2b
 8018604:	d075      	beq.n	80186f2 <_strtod_l+0x28a>
 8018606:	2b2d      	cmp	r3, #45	; 0x2d
 8018608:	d07b      	beq.n	8018702 <_strtod_l+0x29a>
 801860a:	f04f 0c00 	mov.w	ip, #0
 801860e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8018612:	2909      	cmp	r1, #9
 8018614:	f240 8082 	bls.w	801871c <_strtod_l+0x2b4>
 8018618:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801861c:	2600      	movs	r6, #0
 801861e:	e09d      	b.n	801875c <_strtod_l+0x2f4>
 8018620:	2300      	movs	r3, #0
 8018622:	e7c4      	b.n	80185ae <_strtod_l+0x146>
 8018624:	2f08      	cmp	r7, #8
 8018626:	bfd8      	it	le
 8018628:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801862a:	f100 0001 	add.w	r0, r0, #1
 801862e:	bfda      	itte	le
 8018630:	fb02 3301 	mlale	r3, r2, r1, r3
 8018634:	9309      	strle	r3, [sp, #36]	; 0x24
 8018636:	fb02 3909 	mlagt	r9, r2, r9, r3
 801863a:	3701      	adds	r7, #1
 801863c:	901d      	str	r0, [sp, #116]	; 0x74
 801863e:	e7bf      	b.n	80185c0 <_strtod_l+0x158>
 8018640:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018642:	195a      	adds	r2, r3, r5
 8018644:	921d      	str	r2, [sp, #116]	; 0x74
 8018646:	5d5b      	ldrb	r3, [r3, r5]
 8018648:	2f00      	cmp	r7, #0
 801864a:	d037      	beq.n	80186bc <_strtod_l+0x254>
 801864c:	9007      	str	r0, [sp, #28]
 801864e:	463d      	mov	r5, r7
 8018650:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8018654:	2a09      	cmp	r2, #9
 8018656:	d912      	bls.n	801867e <_strtod_l+0x216>
 8018658:	2201      	movs	r2, #1
 801865a:	e7c2      	b.n	80185e2 <_strtod_l+0x17a>
 801865c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801865e:	1c5a      	adds	r2, r3, #1
 8018660:	921d      	str	r2, [sp, #116]	; 0x74
 8018662:	785b      	ldrb	r3, [r3, #1]
 8018664:	3001      	adds	r0, #1
 8018666:	2b30      	cmp	r3, #48	; 0x30
 8018668:	d0f8      	beq.n	801865c <_strtod_l+0x1f4>
 801866a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801866e:	2a08      	cmp	r2, #8
 8018670:	f200 84db 	bhi.w	801902a <_strtod_l+0xbc2>
 8018674:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018676:	9007      	str	r0, [sp, #28]
 8018678:	2000      	movs	r0, #0
 801867a:	920a      	str	r2, [sp, #40]	; 0x28
 801867c:	4605      	mov	r5, r0
 801867e:	3b30      	subs	r3, #48	; 0x30
 8018680:	f100 0201 	add.w	r2, r0, #1
 8018684:	d014      	beq.n	80186b0 <_strtod_l+0x248>
 8018686:	9907      	ldr	r1, [sp, #28]
 8018688:	4411      	add	r1, r2
 801868a:	9107      	str	r1, [sp, #28]
 801868c:	462a      	mov	r2, r5
 801868e:	eb00 0e05 	add.w	lr, r0, r5
 8018692:	210a      	movs	r1, #10
 8018694:	4572      	cmp	r2, lr
 8018696:	d113      	bne.n	80186c0 <_strtod_l+0x258>
 8018698:	182a      	adds	r2, r5, r0
 801869a:	2a08      	cmp	r2, #8
 801869c:	f105 0501 	add.w	r5, r5, #1
 80186a0:	4405      	add	r5, r0
 80186a2:	dc1c      	bgt.n	80186de <_strtod_l+0x276>
 80186a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80186a6:	220a      	movs	r2, #10
 80186a8:	fb02 3301 	mla	r3, r2, r1, r3
 80186ac:	9309      	str	r3, [sp, #36]	; 0x24
 80186ae:	2200      	movs	r2, #0
 80186b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80186b2:	1c59      	adds	r1, r3, #1
 80186b4:	911d      	str	r1, [sp, #116]	; 0x74
 80186b6:	785b      	ldrb	r3, [r3, #1]
 80186b8:	4610      	mov	r0, r2
 80186ba:	e7c9      	b.n	8018650 <_strtod_l+0x1e8>
 80186bc:	4638      	mov	r0, r7
 80186be:	e7d2      	b.n	8018666 <_strtod_l+0x1fe>
 80186c0:	2a08      	cmp	r2, #8
 80186c2:	dc04      	bgt.n	80186ce <_strtod_l+0x266>
 80186c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80186c6:	434e      	muls	r6, r1
 80186c8:	9609      	str	r6, [sp, #36]	; 0x24
 80186ca:	3201      	adds	r2, #1
 80186cc:	e7e2      	b.n	8018694 <_strtod_l+0x22c>
 80186ce:	f102 0c01 	add.w	ip, r2, #1
 80186d2:	f1bc 0f10 	cmp.w	ip, #16
 80186d6:	bfd8      	it	le
 80186d8:	fb01 f909 	mulle.w	r9, r1, r9
 80186dc:	e7f5      	b.n	80186ca <_strtod_l+0x262>
 80186de:	2d10      	cmp	r5, #16
 80186e0:	bfdc      	itt	le
 80186e2:	220a      	movle	r2, #10
 80186e4:	fb02 3909 	mlale	r9, r2, r9, r3
 80186e8:	e7e1      	b.n	80186ae <_strtod_l+0x246>
 80186ea:	2300      	movs	r3, #0
 80186ec:	9307      	str	r3, [sp, #28]
 80186ee:	2201      	movs	r2, #1
 80186f0:	e77c      	b.n	80185ec <_strtod_l+0x184>
 80186f2:	f04f 0c00 	mov.w	ip, #0
 80186f6:	f108 0302 	add.w	r3, r8, #2
 80186fa:	931d      	str	r3, [sp, #116]	; 0x74
 80186fc:	f898 3002 	ldrb.w	r3, [r8, #2]
 8018700:	e785      	b.n	801860e <_strtod_l+0x1a6>
 8018702:	f04f 0c01 	mov.w	ip, #1
 8018706:	e7f6      	b.n	80186f6 <_strtod_l+0x28e>
 8018708:	0801da5c 	.word	0x0801da5c
 801870c:	0801d8d0 	.word	0x0801d8d0
 8018710:	7ff00000 	.word	0x7ff00000
 8018714:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018716:	1c59      	adds	r1, r3, #1
 8018718:	911d      	str	r1, [sp, #116]	; 0x74
 801871a:	785b      	ldrb	r3, [r3, #1]
 801871c:	2b30      	cmp	r3, #48	; 0x30
 801871e:	d0f9      	beq.n	8018714 <_strtod_l+0x2ac>
 8018720:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8018724:	2908      	cmp	r1, #8
 8018726:	f63f af79 	bhi.w	801861c <_strtod_l+0x1b4>
 801872a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801872e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018730:	9308      	str	r3, [sp, #32]
 8018732:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018734:	1c59      	adds	r1, r3, #1
 8018736:	911d      	str	r1, [sp, #116]	; 0x74
 8018738:	785b      	ldrb	r3, [r3, #1]
 801873a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801873e:	2e09      	cmp	r6, #9
 8018740:	d937      	bls.n	80187b2 <_strtod_l+0x34a>
 8018742:	9e08      	ldr	r6, [sp, #32]
 8018744:	1b89      	subs	r1, r1, r6
 8018746:	2908      	cmp	r1, #8
 8018748:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801874c:	dc02      	bgt.n	8018754 <_strtod_l+0x2ec>
 801874e:	4576      	cmp	r6, lr
 8018750:	bfa8      	it	ge
 8018752:	4676      	movge	r6, lr
 8018754:	f1bc 0f00 	cmp.w	ip, #0
 8018758:	d000      	beq.n	801875c <_strtod_l+0x2f4>
 801875a:	4276      	negs	r6, r6
 801875c:	2d00      	cmp	r5, #0
 801875e:	d14f      	bne.n	8018800 <_strtod_l+0x398>
 8018760:	9904      	ldr	r1, [sp, #16]
 8018762:	4301      	orrs	r1, r0
 8018764:	f47f aec2 	bne.w	80184ec <_strtod_l+0x84>
 8018768:	2a00      	cmp	r2, #0
 801876a:	f47f aedb 	bne.w	8018524 <_strtod_l+0xbc>
 801876e:	2b69      	cmp	r3, #105	; 0x69
 8018770:	d027      	beq.n	80187c2 <_strtod_l+0x35a>
 8018772:	dc24      	bgt.n	80187be <_strtod_l+0x356>
 8018774:	2b49      	cmp	r3, #73	; 0x49
 8018776:	d024      	beq.n	80187c2 <_strtod_l+0x35a>
 8018778:	2b4e      	cmp	r3, #78	; 0x4e
 801877a:	f47f aed3 	bne.w	8018524 <_strtod_l+0xbc>
 801877e:	499e      	ldr	r1, [pc, #632]	; (80189f8 <_strtod_l+0x590>)
 8018780:	a81d      	add	r0, sp, #116	; 0x74
 8018782:	f002 f8d5 	bl	801a930 <__match>
 8018786:	2800      	cmp	r0, #0
 8018788:	f43f aecc 	beq.w	8018524 <_strtod_l+0xbc>
 801878c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801878e:	781b      	ldrb	r3, [r3, #0]
 8018790:	2b28      	cmp	r3, #40	; 0x28
 8018792:	d12d      	bne.n	80187f0 <_strtod_l+0x388>
 8018794:	4999      	ldr	r1, [pc, #612]	; (80189fc <_strtod_l+0x594>)
 8018796:	aa20      	add	r2, sp, #128	; 0x80
 8018798:	a81d      	add	r0, sp, #116	; 0x74
 801879a:	f002 f8dd 	bl	801a958 <__hexnan>
 801879e:	2805      	cmp	r0, #5
 80187a0:	d126      	bne.n	80187f0 <_strtod_l+0x388>
 80187a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80187a4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80187a8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80187ac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80187b0:	e69c      	b.n	80184ec <_strtod_l+0x84>
 80187b2:	210a      	movs	r1, #10
 80187b4:	fb01 3e0e 	mla	lr, r1, lr, r3
 80187b8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80187bc:	e7b9      	b.n	8018732 <_strtod_l+0x2ca>
 80187be:	2b6e      	cmp	r3, #110	; 0x6e
 80187c0:	e7db      	b.n	801877a <_strtod_l+0x312>
 80187c2:	498f      	ldr	r1, [pc, #572]	; (8018a00 <_strtod_l+0x598>)
 80187c4:	a81d      	add	r0, sp, #116	; 0x74
 80187c6:	f002 f8b3 	bl	801a930 <__match>
 80187ca:	2800      	cmp	r0, #0
 80187cc:	f43f aeaa 	beq.w	8018524 <_strtod_l+0xbc>
 80187d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80187d2:	498c      	ldr	r1, [pc, #560]	; (8018a04 <_strtod_l+0x59c>)
 80187d4:	3b01      	subs	r3, #1
 80187d6:	a81d      	add	r0, sp, #116	; 0x74
 80187d8:	931d      	str	r3, [sp, #116]	; 0x74
 80187da:	f002 f8a9 	bl	801a930 <__match>
 80187de:	b910      	cbnz	r0, 80187e6 <_strtod_l+0x37e>
 80187e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80187e2:	3301      	adds	r3, #1
 80187e4:	931d      	str	r3, [sp, #116]	; 0x74
 80187e6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8018a14 <_strtod_l+0x5ac>
 80187ea:	f04f 0a00 	mov.w	sl, #0
 80187ee:	e67d      	b.n	80184ec <_strtod_l+0x84>
 80187f0:	4885      	ldr	r0, [pc, #532]	; (8018a08 <_strtod_l+0x5a0>)
 80187f2:	f7fe fa75 	bl	8016ce0 <nan>
 80187f6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80187fa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80187fe:	e675      	b.n	80184ec <_strtod_l+0x84>
 8018800:	9b07      	ldr	r3, [sp, #28]
 8018802:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018804:	1af3      	subs	r3, r6, r3
 8018806:	2f00      	cmp	r7, #0
 8018808:	bf08      	it	eq
 801880a:	462f      	moveq	r7, r5
 801880c:	2d10      	cmp	r5, #16
 801880e:	9308      	str	r3, [sp, #32]
 8018810:	46a8      	mov	r8, r5
 8018812:	bfa8      	it	ge
 8018814:	f04f 0810 	movge.w	r8, #16
 8018818:	f7e7 fe94 	bl	8000544 <__aeabi_ui2d>
 801881c:	2d09      	cmp	r5, #9
 801881e:	4682      	mov	sl, r0
 8018820:	468b      	mov	fp, r1
 8018822:	dd13      	ble.n	801884c <_strtod_l+0x3e4>
 8018824:	4b79      	ldr	r3, [pc, #484]	; (8018a0c <_strtod_l+0x5a4>)
 8018826:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801882a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801882e:	f7e7 ff03 	bl	8000638 <__aeabi_dmul>
 8018832:	4682      	mov	sl, r0
 8018834:	4648      	mov	r0, r9
 8018836:	468b      	mov	fp, r1
 8018838:	f7e7 fe84 	bl	8000544 <__aeabi_ui2d>
 801883c:	4602      	mov	r2, r0
 801883e:	460b      	mov	r3, r1
 8018840:	4650      	mov	r0, sl
 8018842:	4659      	mov	r1, fp
 8018844:	f7e7 fd42 	bl	80002cc <__adddf3>
 8018848:	4682      	mov	sl, r0
 801884a:	468b      	mov	fp, r1
 801884c:	2d0f      	cmp	r5, #15
 801884e:	dc38      	bgt.n	80188c2 <_strtod_l+0x45a>
 8018850:	9b08      	ldr	r3, [sp, #32]
 8018852:	2b00      	cmp	r3, #0
 8018854:	f43f ae4a 	beq.w	80184ec <_strtod_l+0x84>
 8018858:	dd24      	ble.n	80188a4 <_strtod_l+0x43c>
 801885a:	2b16      	cmp	r3, #22
 801885c:	dc0b      	bgt.n	8018876 <_strtod_l+0x40e>
 801885e:	4d6b      	ldr	r5, [pc, #428]	; (8018a0c <_strtod_l+0x5a4>)
 8018860:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8018864:	e9d5 0100 	ldrd	r0, r1, [r5]
 8018868:	4652      	mov	r2, sl
 801886a:	465b      	mov	r3, fp
 801886c:	f7e7 fee4 	bl	8000638 <__aeabi_dmul>
 8018870:	4682      	mov	sl, r0
 8018872:	468b      	mov	fp, r1
 8018874:	e63a      	b.n	80184ec <_strtod_l+0x84>
 8018876:	9a08      	ldr	r2, [sp, #32]
 8018878:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801887c:	4293      	cmp	r3, r2
 801887e:	db20      	blt.n	80188c2 <_strtod_l+0x45a>
 8018880:	4c62      	ldr	r4, [pc, #392]	; (8018a0c <_strtod_l+0x5a4>)
 8018882:	f1c5 050f 	rsb	r5, r5, #15
 8018886:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801888a:	4652      	mov	r2, sl
 801888c:	465b      	mov	r3, fp
 801888e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018892:	f7e7 fed1 	bl	8000638 <__aeabi_dmul>
 8018896:	9b08      	ldr	r3, [sp, #32]
 8018898:	1b5d      	subs	r5, r3, r5
 801889a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801889e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80188a2:	e7e3      	b.n	801886c <_strtod_l+0x404>
 80188a4:	9b08      	ldr	r3, [sp, #32]
 80188a6:	3316      	adds	r3, #22
 80188a8:	db0b      	blt.n	80188c2 <_strtod_l+0x45a>
 80188aa:	9b07      	ldr	r3, [sp, #28]
 80188ac:	4a57      	ldr	r2, [pc, #348]	; (8018a0c <_strtod_l+0x5a4>)
 80188ae:	1b9e      	subs	r6, r3, r6
 80188b0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80188b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80188b8:	4650      	mov	r0, sl
 80188ba:	4659      	mov	r1, fp
 80188bc:	f7e7 ffe6 	bl	800088c <__aeabi_ddiv>
 80188c0:	e7d6      	b.n	8018870 <_strtod_l+0x408>
 80188c2:	9b08      	ldr	r3, [sp, #32]
 80188c4:	eba5 0808 	sub.w	r8, r5, r8
 80188c8:	4498      	add	r8, r3
 80188ca:	f1b8 0f00 	cmp.w	r8, #0
 80188ce:	dd71      	ble.n	80189b4 <_strtod_l+0x54c>
 80188d0:	f018 030f 	ands.w	r3, r8, #15
 80188d4:	d00a      	beq.n	80188ec <_strtod_l+0x484>
 80188d6:	494d      	ldr	r1, [pc, #308]	; (8018a0c <_strtod_l+0x5a4>)
 80188d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80188dc:	4652      	mov	r2, sl
 80188de:	465b      	mov	r3, fp
 80188e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80188e4:	f7e7 fea8 	bl	8000638 <__aeabi_dmul>
 80188e8:	4682      	mov	sl, r0
 80188ea:	468b      	mov	fp, r1
 80188ec:	f038 080f 	bics.w	r8, r8, #15
 80188f0:	d04d      	beq.n	801898e <_strtod_l+0x526>
 80188f2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80188f6:	dd22      	ble.n	801893e <_strtod_l+0x4d6>
 80188f8:	2500      	movs	r5, #0
 80188fa:	462e      	mov	r6, r5
 80188fc:	9509      	str	r5, [sp, #36]	; 0x24
 80188fe:	9507      	str	r5, [sp, #28]
 8018900:	2322      	movs	r3, #34	; 0x22
 8018902:	f8df b110 	ldr.w	fp, [pc, #272]	; 8018a14 <_strtod_l+0x5ac>
 8018906:	6023      	str	r3, [r4, #0]
 8018908:	f04f 0a00 	mov.w	sl, #0
 801890c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801890e:	2b00      	cmp	r3, #0
 8018910:	f43f adec 	beq.w	80184ec <_strtod_l+0x84>
 8018914:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018916:	4620      	mov	r0, r4
 8018918:	f002 f992 	bl	801ac40 <_Bfree>
 801891c:	9907      	ldr	r1, [sp, #28]
 801891e:	4620      	mov	r0, r4
 8018920:	f002 f98e 	bl	801ac40 <_Bfree>
 8018924:	4631      	mov	r1, r6
 8018926:	4620      	mov	r0, r4
 8018928:	f002 f98a 	bl	801ac40 <_Bfree>
 801892c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801892e:	4620      	mov	r0, r4
 8018930:	f002 f986 	bl	801ac40 <_Bfree>
 8018934:	4629      	mov	r1, r5
 8018936:	4620      	mov	r0, r4
 8018938:	f002 f982 	bl	801ac40 <_Bfree>
 801893c:	e5d6      	b.n	80184ec <_strtod_l+0x84>
 801893e:	2300      	movs	r3, #0
 8018940:	ea4f 1828 	mov.w	r8, r8, asr #4
 8018944:	4650      	mov	r0, sl
 8018946:	4659      	mov	r1, fp
 8018948:	4699      	mov	r9, r3
 801894a:	f1b8 0f01 	cmp.w	r8, #1
 801894e:	dc21      	bgt.n	8018994 <_strtod_l+0x52c>
 8018950:	b10b      	cbz	r3, 8018956 <_strtod_l+0x4ee>
 8018952:	4682      	mov	sl, r0
 8018954:	468b      	mov	fp, r1
 8018956:	4b2e      	ldr	r3, [pc, #184]	; (8018a10 <_strtod_l+0x5a8>)
 8018958:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801895c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8018960:	4652      	mov	r2, sl
 8018962:	465b      	mov	r3, fp
 8018964:	e9d9 0100 	ldrd	r0, r1, [r9]
 8018968:	f7e7 fe66 	bl	8000638 <__aeabi_dmul>
 801896c:	4b29      	ldr	r3, [pc, #164]	; (8018a14 <_strtod_l+0x5ac>)
 801896e:	460a      	mov	r2, r1
 8018970:	400b      	ands	r3, r1
 8018972:	4929      	ldr	r1, [pc, #164]	; (8018a18 <_strtod_l+0x5b0>)
 8018974:	428b      	cmp	r3, r1
 8018976:	4682      	mov	sl, r0
 8018978:	d8be      	bhi.n	80188f8 <_strtod_l+0x490>
 801897a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801897e:	428b      	cmp	r3, r1
 8018980:	bf86      	itte	hi
 8018982:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8018a1c <_strtod_l+0x5b4>
 8018986:	f04f 3aff 	movhi.w	sl, #4294967295
 801898a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801898e:	2300      	movs	r3, #0
 8018990:	9304      	str	r3, [sp, #16]
 8018992:	e081      	b.n	8018a98 <_strtod_l+0x630>
 8018994:	f018 0f01 	tst.w	r8, #1
 8018998:	d007      	beq.n	80189aa <_strtod_l+0x542>
 801899a:	4b1d      	ldr	r3, [pc, #116]	; (8018a10 <_strtod_l+0x5a8>)
 801899c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80189a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189a4:	f7e7 fe48 	bl	8000638 <__aeabi_dmul>
 80189a8:	2301      	movs	r3, #1
 80189aa:	f109 0901 	add.w	r9, r9, #1
 80189ae:	ea4f 0868 	mov.w	r8, r8, asr #1
 80189b2:	e7ca      	b.n	801894a <_strtod_l+0x4e2>
 80189b4:	d0eb      	beq.n	801898e <_strtod_l+0x526>
 80189b6:	f1c8 0800 	rsb	r8, r8, #0
 80189ba:	f018 020f 	ands.w	r2, r8, #15
 80189be:	d00a      	beq.n	80189d6 <_strtod_l+0x56e>
 80189c0:	4b12      	ldr	r3, [pc, #72]	; (8018a0c <_strtod_l+0x5a4>)
 80189c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80189c6:	4650      	mov	r0, sl
 80189c8:	4659      	mov	r1, fp
 80189ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189ce:	f7e7 ff5d 	bl	800088c <__aeabi_ddiv>
 80189d2:	4682      	mov	sl, r0
 80189d4:	468b      	mov	fp, r1
 80189d6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80189da:	d0d8      	beq.n	801898e <_strtod_l+0x526>
 80189dc:	f1b8 0f1f 	cmp.w	r8, #31
 80189e0:	dd1e      	ble.n	8018a20 <_strtod_l+0x5b8>
 80189e2:	2500      	movs	r5, #0
 80189e4:	462e      	mov	r6, r5
 80189e6:	9509      	str	r5, [sp, #36]	; 0x24
 80189e8:	9507      	str	r5, [sp, #28]
 80189ea:	2322      	movs	r3, #34	; 0x22
 80189ec:	f04f 0a00 	mov.w	sl, #0
 80189f0:	f04f 0b00 	mov.w	fp, #0
 80189f4:	6023      	str	r3, [r4, #0]
 80189f6:	e789      	b.n	801890c <_strtod_l+0x4a4>
 80189f8:	0801d8a5 	.word	0x0801d8a5
 80189fc:	0801d8e4 	.word	0x0801d8e4
 8018a00:	0801d89d 	.word	0x0801d89d
 8018a04:	0801d95f 	.word	0x0801d95f
 8018a08:	0801d95b 	.word	0x0801d95b
 8018a0c:	0801daf8 	.word	0x0801daf8
 8018a10:	0801dad0 	.word	0x0801dad0
 8018a14:	7ff00000 	.word	0x7ff00000
 8018a18:	7ca00000 	.word	0x7ca00000
 8018a1c:	7fefffff 	.word	0x7fefffff
 8018a20:	f018 0310 	ands.w	r3, r8, #16
 8018a24:	bf18      	it	ne
 8018a26:	236a      	movne	r3, #106	; 0x6a
 8018a28:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8018de0 <_strtod_l+0x978>
 8018a2c:	9304      	str	r3, [sp, #16]
 8018a2e:	4650      	mov	r0, sl
 8018a30:	4659      	mov	r1, fp
 8018a32:	2300      	movs	r3, #0
 8018a34:	f018 0f01 	tst.w	r8, #1
 8018a38:	d004      	beq.n	8018a44 <_strtod_l+0x5dc>
 8018a3a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8018a3e:	f7e7 fdfb 	bl	8000638 <__aeabi_dmul>
 8018a42:	2301      	movs	r3, #1
 8018a44:	ea5f 0868 	movs.w	r8, r8, asr #1
 8018a48:	f109 0908 	add.w	r9, r9, #8
 8018a4c:	d1f2      	bne.n	8018a34 <_strtod_l+0x5cc>
 8018a4e:	b10b      	cbz	r3, 8018a54 <_strtod_l+0x5ec>
 8018a50:	4682      	mov	sl, r0
 8018a52:	468b      	mov	fp, r1
 8018a54:	9b04      	ldr	r3, [sp, #16]
 8018a56:	b1bb      	cbz	r3, 8018a88 <_strtod_l+0x620>
 8018a58:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8018a5c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	4659      	mov	r1, fp
 8018a64:	dd10      	ble.n	8018a88 <_strtod_l+0x620>
 8018a66:	2b1f      	cmp	r3, #31
 8018a68:	f340 8128 	ble.w	8018cbc <_strtod_l+0x854>
 8018a6c:	2b34      	cmp	r3, #52	; 0x34
 8018a6e:	bfde      	ittt	le
 8018a70:	3b20      	suble	r3, #32
 8018a72:	f04f 32ff 	movle.w	r2, #4294967295
 8018a76:	fa02 f303 	lslle.w	r3, r2, r3
 8018a7a:	f04f 0a00 	mov.w	sl, #0
 8018a7e:	bfcc      	ite	gt
 8018a80:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8018a84:	ea03 0b01 	andle.w	fp, r3, r1
 8018a88:	2200      	movs	r2, #0
 8018a8a:	2300      	movs	r3, #0
 8018a8c:	4650      	mov	r0, sl
 8018a8e:	4659      	mov	r1, fp
 8018a90:	f7e8 f83a 	bl	8000b08 <__aeabi_dcmpeq>
 8018a94:	2800      	cmp	r0, #0
 8018a96:	d1a4      	bne.n	80189e2 <_strtod_l+0x57a>
 8018a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a9a:	9300      	str	r3, [sp, #0]
 8018a9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018a9e:	462b      	mov	r3, r5
 8018aa0:	463a      	mov	r2, r7
 8018aa2:	4620      	mov	r0, r4
 8018aa4:	f002 f938 	bl	801ad18 <__s2b>
 8018aa8:	9009      	str	r0, [sp, #36]	; 0x24
 8018aaa:	2800      	cmp	r0, #0
 8018aac:	f43f af24 	beq.w	80188f8 <_strtod_l+0x490>
 8018ab0:	9b07      	ldr	r3, [sp, #28]
 8018ab2:	1b9e      	subs	r6, r3, r6
 8018ab4:	9b08      	ldr	r3, [sp, #32]
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	bfb4      	ite	lt
 8018aba:	4633      	movlt	r3, r6
 8018abc:	2300      	movge	r3, #0
 8018abe:	9310      	str	r3, [sp, #64]	; 0x40
 8018ac0:	9b08      	ldr	r3, [sp, #32]
 8018ac2:	2500      	movs	r5, #0
 8018ac4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018ac8:	9318      	str	r3, [sp, #96]	; 0x60
 8018aca:	462e      	mov	r6, r5
 8018acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ace:	4620      	mov	r0, r4
 8018ad0:	6859      	ldr	r1, [r3, #4]
 8018ad2:	f002 f875 	bl	801abc0 <_Balloc>
 8018ad6:	9007      	str	r0, [sp, #28]
 8018ad8:	2800      	cmp	r0, #0
 8018ada:	f43f af11 	beq.w	8018900 <_strtod_l+0x498>
 8018ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ae0:	691a      	ldr	r2, [r3, #16]
 8018ae2:	3202      	adds	r2, #2
 8018ae4:	f103 010c 	add.w	r1, r3, #12
 8018ae8:	0092      	lsls	r2, r2, #2
 8018aea:	300c      	adds	r0, #12
 8018aec:	f7fe fb4e 	bl	801718c <memcpy>
 8018af0:	ec4b ab10 	vmov	d0, sl, fp
 8018af4:	aa20      	add	r2, sp, #128	; 0x80
 8018af6:	a91f      	add	r1, sp, #124	; 0x7c
 8018af8:	4620      	mov	r0, r4
 8018afa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8018afe:	f002 fc47 	bl	801b390 <__d2b>
 8018b02:	901e      	str	r0, [sp, #120]	; 0x78
 8018b04:	2800      	cmp	r0, #0
 8018b06:	f43f aefb 	beq.w	8018900 <_strtod_l+0x498>
 8018b0a:	2101      	movs	r1, #1
 8018b0c:	4620      	mov	r0, r4
 8018b0e:	f002 f99d 	bl	801ae4c <__i2b>
 8018b12:	4606      	mov	r6, r0
 8018b14:	2800      	cmp	r0, #0
 8018b16:	f43f aef3 	beq.w	8018900 <_strtod_l+0x498>
 8018b1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018b1c:	9904      	ldr	r1, [sp, #16]
 8018b1e:	2b00      	cmp	r3, #0
 8018b20:	bfab      	itete	ge
 8018b22:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8018b24:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8018b26:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8018b28:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8018b2c:	bfac      	ite	ge
 8018b2e:	eb03 0902 	addge.w	r9, r3, r2
 8018b32:	1ad7      	sublt	r7, r2, r3
 8018b34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018b36:	eba3 0801 	sub.w	r8, r3, r1
 8018b3a:	4490      	add	r8, r2
 8018b3c:	4ba3      	ldr	r3, [pc, #652]	; (8018dcc <_strtod_l+0x964>)
 8018b3e:	f108 38ff 	add.w	r8, r8, #4294967295
 8018b42:	4598      	cmp	r8, r3
 8018b44:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8018b48:	f280 80cc 	bge.w	8018ce4 <_strtod_l+0x87c>
 8018b4c:	eba3 0308 	sub.w	r3, r3, r8
 8018b50:	2b1f      	cmp	r3, #31
 8018b52:	eba2 0203 	sub.w	r2, r2, r3
 8018b56:	f04f 0101 	mov.w	r1, #1
 8018b5a:	f300 80b6 	bgt.w	8018cca <_strtod_l+0x862>
 8018b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8018b62:	9311      	str	r3, [sp, #68]	; 0x44
 8018b64:	2300      	movs	r3, #0
 8018b66:	930c      	str	r3, [sp, #48]	; 0x30
 8018b68:	eb09 0802 	add.w	r8, r9, r2
 8018b6c:	9b04      	ldr	r3, [sp, #16]
 8018b6e:	45c1      	cmp	r9, r8
 8018b70:	4417      	add	r7, r2
 8018b72:	441f      	add	r7, r3
 8018b74:	464b      	mov	r3, r9
 8018b76:	bfa8      	it	ge
 8018b78:	4643      	movge	r3, r8
 8018b7a:	42bb      	cmp	r3, r7
 8018b7c:	bfa8      	it	ge
 8018b7e:	463b      	movge	r3, r7
 8018b80:	2b00      	cmp	r3, #0
 8018b82:	bfc2      	ittt	gt
 8018b84:	eba8 0803 	subgt.w	r8, r8, r3
 8018b88:	1aff      	subgt	r7, r7, r3
 8018b8a:	eba9 0903 	subgt.w	r9, r9, r3
 8018b8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018b90:	2b00      	cmp	r3, #0
 8018b92:	dd17      	ble.n	8018bc4 <_strtod_l+0x75c>
 8018b94:	4631      	mov	r1, r6
 8018b96:	461a      	mov	r2, r3
 8018b98:	4620      	mov	r0, r4
 8018b9a:	f002 fa13 	bl	801afc4 <__pow5mult>
 8018b9e:	4606      	mov	r6, r0
 8018ba0:	2800      	cmp	r0, #0
 8018ba2:	f43f aead 	beq.w	8018900 <_strtod_l+0x498>
 8018ba6:	4601      	mov	r1, r0
 8018ba8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8018baa:	4620      	mov	r0, r4
 8018bac:	f002 f964 	bl	801ae78 <__multiply>
 8018bb0:	900f      	str	r0, [sp, #60]	; 0x3c
 8018bb2:	2800      	cmp	r0, #0
 8018bb4:	f43f aea4 	beq.w	8018900 <_strtod_l+0x498>
 8018bb8:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018bba:	4620      	mov	r0, r4
 8018bbc:	f002 f840 	bl	801ac40 <_Bfree>
 8018bc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018bc2:	931e      	str	r3, [sp, #120]	; 0x78
 8018bc4:	f1b8 0f00 	cmp.w	r8, #0
 8018bc8:	f300 8091 	bgt.w	8018cee <_strtod_l+0x886>
 8018bcc:	9b08      	ldr	r3, [sp, #32]
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	dd08      	ble.n	8018be4 <_strtod_l+0x77c>
 8018bd2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018bd4:	9907      	ldr	r1, [sp, #28]
 8018bd6:	4620      	mov	r0, r4
 8018bd8:	f002 f9f4 	bl	801afc4 <__pow5mult>
 8018bdc:	9007      	str	r0, [sp, #28]
 8018bde:	2800      	cmp	r0, #0
 8018be0:	f43f ae8e 	beq.w	8018900 <_strtod_l+0x498>
 8018be4:	2f00      	cmp	r7, #0
 8018be6:	dd08      	ble.n	8018bfa <_strtod_l+0x792>
 8018be8:	9907      	ldr	r1, [sp, #28]
 8018bea:	463a      	mov	r2, r7
 8018bec:	4620      	mov	r0, r4
 8018bee:	f002 fa43 	bl	801b078 <__lshift>
 8018bf2:	9007      	str	r0, [sp, #28]
 8018bf4:	2800      	cmp	r0, #0
 8018bf6:	f43f ae83 	beq.w	8018900 <_strtod_l+0x498>
 8018bfa:	f1b9 0f00 	cmp.w	r9, #0
 8018bfe:	dd08      	ble.n	8018c12 <_strtod_l+0x7aa>
 8018c00:	4631      	mov	r1, r6
 8018c02:	464a      	mov	r2, r9
 8018c04:	4620      	mov	r0, r4
 8018c06:	f002 fa37 	bl	801b078 <__lshift>
 8018c0a:	4606      	mov	r6, r0
 8018c0c:	2800      	cmp	r0, #0
 8018c0e:	f43f ae77 	beq.w	8018900 <_strtod_l+0x498>
 8018c12:	9a07      	ldr	r2, [sp, #28]
 8018c14:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018c16:	4620      	mov	r0, r4
 8018c18:	f002 fab6 	bl	801b188 <__mdiff>
 8018c1c:	4605      	mov	r5, r0
 8018c1e:	2800      	cmp	r0, #0
 8018c20:	f43f ae6e 	beq.w	8018900 <_strtod_l+0x498>
 8018c24:	68c3      	ldr	r3, [r0, #12]
 8018c26:	930f      	str	r3, [sp, #60]	; 0x3c
 8018c28:	2300      	movs	r3, #0
 8018c2a:	60c3      	str	r3, [r0, #12]
 8018c2c:	4631      	mov	r1, r6
 8018c2e:	f002 fa8f 	bl	801b150 <__mcmp>
 8018c32:	2800      	cmp	r0, #0
 8018c34:	da65      	bge.n	8018d02 <_strtod_l+0x89a>
 8018c36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018c38:	ea53 030a 	orrs.w	r3, r3, sl
 8018c3c:	f040 8087 	bne.w	8018d4e <_strtod_l+0x8e6>
 8018c40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	f040 8082 	bne.w	8018d4e <_strtod_l+0x8e6>
 8018c4a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018c4e:	0d1b      	lsrs	r3, r3, #20
 8018c50:	051b      	lsls	r3, r3, #20
 8018c52:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8018c56:	d97a      	bls.n	8018d4e <_strtod_l+0x8e6>
 8018c58:	696b      	ldr	r3, [r5, #20]
 8018c5a:	b913      	cbnz	r3, 8018c62 <_strtod_l+0x7fa>
 8018c5c:	692b      	ldr	r3, [r5, #16]
 8018c5e:	2b01      	cmp	r3, #1
 8018c60:	dd75      	ble.n	8018d4e <_strtod_l+0x8e6>
 8018c62:	4629      	mov	r1, r5
 8018c64:	2201      	movs	r2, #1
 8018c66:	4620      	mov	r0, r4
 8018c68:	f002 fa06 	bl	801b078 <__lshift>
 8018c6c:	4631      	mov	r1, r6
 8018c6e:	4605      	mov	r5, r0
 8018c70:	f002 fa6e 	bl	801b150 <__mcmp>
 8018c74:	2800      	cmp	r0, #0
 8018c76:	dd6a      	ble.n	8018d4e <_strtod_l+0x8e6>
 8018c78:	9904      	ldr	r1, [sp, #16]
 8018c7a:	4a55      	ldr	r2, [pc, #340]	; (8018dd0 <_strtod_l+0x968>)
 8018c7c:	465b      	mov	r3, fp
 8018c7e:	2900      	cmp	r1, #0
 8018c80:	f000 8085 	beq.w	8018d8e <_strtod_l+0x926>
 8018c84:	ea02 010b 	and.w	r1, r2, fp
 8018c88:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8018c8c:	dc7f      	bgt.n	8018d8e <_strtod_l+0x926>
 8018c8e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8018c92:	f77f aeaa 	ble.w	80189ea <_strtod_l+0x582>
 8018c96:	4a4f      	ldr	r2, [pc, #316]	; (8018dd4 <_strtod_l+0x96c>)
 8018c98:	2300      	movs	r3, #0
 8018c9a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8018c9e:	4650      	mov	r0, sl
 8018ca0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8018ca4:	4659      	mov	r1, fp
 8018ca6:	f7e7 fcc7 	bl	8000638 <__aeabi_dmul>
 8018caa:	460b      	mov	r3, r1
 8018cac:	4303      	orrs	r3, r0
 8018cae:	bf08      	it	eq
 8018cb0:	2322      	moveq	r3, #34	; 0x22
 8018cb2:	4682      	mov	sl, r0
 8018cb4:	468b      	mov	fp, r1
 8018cb6:	bf08      	it	eq
 8018cb8:	6023      	streq	r3, [r4, #0]
 8018cba:	e62b      	b.n	8018914 <_strtod_l+0x4ac>
 8018cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8018cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8018cc4:	ea03 0a0a 	and.w	sl, r3, sl
 8018cc8:	e6de      	b.n	8018a88 <_strtod_l+0x620>
 8018cca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8018cce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8018cd2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8018cd6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8018cda:	fa01 f308 	lsl.w	r3, r1, r8
 8018cde:	930c      	str	r3, [sp, #48]	; 0x30
 8018ce0:	9111      	str	r1, [sp, #68]	; 0x44
 8018ce2:	e741      	b.n	8018b68 <_strtod_l+0x700>
 8018ce4:	2300      	movs	r3, #0
 8018ce6:	930c      	str	r3, [sp, #48]	; 0x30
 8018ce8:	2301      	movs	r3, #1
 8018cea:	9311      	str	r3, [sp, #68]	; 0x44
 8018cec:	e73c      	b.n	8018b68 <_strtod_l+0x700>
 8018cee:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018cf0:	4642      	mov	r2, r8
 8018cf2:	4620      	mov	r0, r4
 8018cf4:	f002 f9c0 	bl	801b078 <__lshift>
 8018cf8:	901e      	str	r0, [sp, #120]	; 0x78
 8018cfa:	2800      	cmp	r0, #0
 8018cfc:	f47f af66 	bne.w	8018bcc <_strtod_l+0x764>
 8018d00:	e5fe      	b.n	8018900 <_strtod_l+0x498>
 8018d02:	465f      	mov	r7, fp
 8018d04:	d16e      	bne.n	8018de4 <_strtod_l+0x97c>
 8018d06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018d08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018d0c:	b342      	cbz	r2, 8018d60 <_strtod_l+0x8f8>
 8018d0e:	4a32      	ldr	r2, [pc, #200]	; (8018dd8 <_strtod_l+0x970>)
 8018d10:	4293      	cmp	r3, r2
 8018d12:	d128      	bne.n	8018d66 <_strtod_l+0x8fe>
 8018d14:	9b04      	ldr	r3, [sp, #16]
 8018d16:	4650      	mov	r0, sl
 8018d18:	b1eb      	cbz	r3, 8018d56 <_strtod_l+0x8ee>
 8018d1a:	4a2d      	ldr	r2, [pc, #180]	; (8018dd0 <_strtod_l+0x968>)
 8018d1c:	403a      	ands	r2, r7
 8018d1e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8018d22:	f04f 31ff 	mov.w	r1, #4294967295
 8018d26:	d819      	bhi.n	8018d5c <_strtod_l+0x8f4>
 8018d28:	0d12      	lsrs	r2, r2, #20
 8018d2a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8018d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8018d32:	4298      	cmp	r0, r3
 8018d34:	d117      	bne.n	8018d66 <_strtod_l+0x8fe>
 8018d36:	4b29      	ldr	r3, [pc, #164]	; (8018ddc <_strtod_l+0x974>)
 8018d38:	429f      	cmp	r7, r3
 8018d3a:	d102      	bne.n	8018d42 <_strtod_l+0x8da>
 8018d3c:	3001      	adds	r0, #1
 8018d3e:	f43f addf 	beq.w	8018900 <_strtod_l+0x498>
 8018d42:	4b23      	ldr	r3, [pc, #140]	; (8018dd0 <_strtod_l+0x968>)
 8018d44:	403b      	ands	r3, r7
 8018d46:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8018d4a:	f04f 0a00 	mov.w	sl, #0
 8018d4e:	9b04      	ldr	r3, [sp, #16]
 8018d50:	2b00      	cmp	r3, #0
 8018d52:	d1a0      	bne.n	8018c96 <_strtod_l+0x82e>
 8018d54:	e5de      	b.n	8018914 <_strtod_l+0x4ac>
 8018d56:	f04f 33ff 	mov.w	r3, #4294967295
 8018d5a:	e7ea      	b.n	8018d32 <_strtod_l+0x8ca>
 8018d5c:	460b      	mov	r3, r1
 8018d5e:	e7e8      	b.n	8018d32 <_strtod_l+0x8ca>
 8018d60:	ea53 030a 	orrs.w	r3, r3, sl
 8018d64:	d088      	beq.n	8018c78 <_strtod_l+0x810>
 8018d66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018d68:	b1db      	cbz	r3, 8018da2 <_strtod_l+0x93a>
 8018d6a:	423b      	tst	r3, r7
 8018d6c:	d0ef      	beq.n	8018d4e <_strtod_l+0x8e6>
 8018d6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018d70:	9a04      	ldr	r2, [sp, #16]
 8018d72:	4650      	mov	r0, sl
 8018d74:	4659      	mov	r1, fp
 8018d76:	b1c3      	cbz	r3, 8018daa <_strtod_l+0x942>
 8018d78:	f7ff fb59 	bl	801842e <sulp>
 8018d7c:	4602      	mov	r2, r0
 8018d7e:	460b      	mov	r3, r1
 8018d80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018d84:	f7e7 faa2 	bl	80002cc <__adddf3>
 8018d88:	4682      	mov	sl, r0
 8018d8a:	468b      	mov	fp, r1
 8018d8c:	e7df      	b.n	8018d4e <_strtod_l+0x8e6>
 8018d8e:	4013      	ands	r3, r2
 8018d90:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8018d94:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8018d98:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8018d9c:	f04f 3aff 	mov.w	sl, #4294967295
 8018da0:	e7d5      	b.n	8018d4e <_strtod_l+0x8e6>
 8018da2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018da4:	ea13 0f0a 	tst.w	r3, sl
 8018da8:	e7e0      	b.n	8018d6c <_strtod_l+0x904>
 8018daa:	f7ff fb40 	bl	801842e <sulp>
 8018dae:	4602      	mov	r2, r0
 8018db0:	460b      	mov	r3, r1
 8018db2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018db6:	f7e7 fa87 	bl	80002c8 <__aeabi_dsub>
 8018dba:	2200      	movs	r2, #0
 8018dbc:	2300      	movs	r3, #0
 8018dbe:	4682      	mov	sl, r0
 8018dc0:	468b      	mov	fp, r1
 8018dc2:	f7e7 fea1 	bl	8000b08 <__aeabi_dcmpeq>
 8018dc6:	2800      	cmp	r0, #0
 8018dc8:	d0c1      	beq.n	8018d4e <_strtod_l+0x8e6>
 8018dca:	e60e      	b.n	80189ea <_strtod_l+0x582>
 8018dcc:	fffffc02 	.word	0xfffffc02
 8018dd0:	7ff00000 	.word	0x7ff00000
 8018dd4:	39500000 	.word	0x39500000
 8018dd8:	000fffff 	.word	0x000fffff
 8018ddc:	7fefffff 	.word	0x7fefffff
 8018de0:	0801d8f8 	.word	0x0801d8f8
 8018de4:	4631      	mov	r1, r6
 8018de6:	4628      	mov	r0, r5
 8018de8:	f002 fb2e 	bl	801b448 <__ratio>
 8018dec:	ec59 8b10 	vmov	r8, r9, d0
 8018df0:	ee10 0a10 	vmov	r0, s0
 8018df4:	2200      	movs	r2, #0
 8018df6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018dfa:	4649      	mov	r1, r9
 8018dfc:	f7e7 fe98 	bl	8000b30 <__aeabi_dcmple>
 8018e00:	2800      	cmp	r0, #0
 8018e02:	d07c      	beq.n	8018efe <_strtod_l+0xa96>
 8018e04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	d04c      	beq.n	8018ea4 <_strtod_l+0xa3c>
 8018e0a:	4b95      	ldr	r3, [pc, #596]	; (8019060 <_strtod_l+0xbf8>)
 8018e0c:	2200      	movs	r2, #0
 8018e0e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8018e12:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8019060 <_strtod_l+0xbf8>
 8018e16:	f04f 0800 	mov.w	r8, #0
 8018e1a:	4b92      	ldr	r3, [pc, #584]	; (8019064 <_strtod_l+0xbfc>)
 8018e1c:	403b      	ands	r3, r7
 8018e1e:	9311      	str	r3, [sp, #68]	; 0x44
 8018e20:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018e22:	4b91      	ldr	r3, [pc, #580]	; (8019068 <_strtod_l+0xc00>)
 8018e24:	429a      	cmp	r2, r3
 8018e26:	f040 80b2 	bne.w	8018f8e <_strtod_l+0xb26>
 8018e2a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018e2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018e32:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8018e36:	ec4b ab10 	vmov	d0, sl, fp
 8018e3a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8018e3e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018e42:	f002 fa29 	bl	801b298 <__ulp>
 8018e46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018e4a:	ec53 2b10 	vmov	r2, r3, d0
 8018e4e:	f7e7 fbf3 	bl	8000638 <__aeabi_dmul>
 8018e52:	4652      	mov	r2, sl
 8018e54:	465b      	mov	r3, fp
 8018e56:	f7e7 fa39 	bl	80002cc <__adddf3>
 8018e5a:	460b      	mov	r3, r1
 8018e5c:	4981      	ldr	r1, [pc, #516]	; (8019064 <_strtod_l+0xbfc>)
 8018e5e:	4a83      	ldr	r2, [pc, #524]	; (801906c <_strtod_l+0xc04>)
 8018e60:	4019      	ands	r1, r3
 8018e62:	4291      	cmp	r1, r2
 8018e64:	4682      	mov	sl, r0
 8018e66:	d95e      	bls.n	8018f26 <_strtod_l+0xabe>
 8018e68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018e6a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8018e6e:	4293      	cmp	r3, r2
 8018e70:	d103      	bne.n	8018e7a <_strtod_l+0xa12>
 8018e72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018e74:	3301      	adds	r3, #1
 8018e76:	f43f ad43 	beq.w	8018900 <_strtod_l+0x498>
 8018e7a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8019078 <_strtod_l+0xc10>
 8018e7e:	f04f 3aff 	mov.w	sl, #4294967295
 8018e82:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018e84:	4620      	mov	r0, r4
 8018e86:	f001 fedb 	bl	801ac40 <_Bfree>
 8018e8a:	9907      	ldr	r1, [sp, #28]
 8018e8c:	4620      	mov	r0, r4
 8018e8e:	f001 fed7 	bl	801ac40 <_Bfree>
 8018e92:	4631      	mov	r1, r6
 8018e94:	4620      	mov	r0, r4
 8018e96:	f001 fed3 	bl	801ac40 <_Bfree>
 8018e9a:	4629      	mov	r1, r5
 8018e9c:	4620      	mov	r0, r4
 8018e9e:	f001 fecf 	bl	801ac40 <_Bfree>
 8018ea2:	e613      	b.n	8018acc <_strtod_l+0x664>
 8018ea4:	f1ba 0f00 	cmp.w	sl, #0
 8018ea8:	d11b      	bne.n	8018ee2 <_strtod_l+0xa7a>
 8018eaa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018eae:	b9f3      	cbnz	r3, 8018eee <_strtod_l+0xa86>
 8018eb0:	4b6b      	ldr	r3, [pc, #428]	; (8019060 <_strtod_l+0xbf8>)
 8018eb2:	2200      	movs	r2, #0
 8018eb4:	4640      	mov	r0, r8
 8018eb6:	4649      	mov	r1, r9
 8018eb8:	f7e7 fe30 	bl	8000b1c <__aeabi_dcmplt>
 8018ebc:	b9d0      	cbnz	r0, 8018ef4 <_strtod_l+0xa8c>
 8018ebe:	4640      	mov	r0, r8
 8018ec0:	4649      	mov	r1, r9
 8018ec2:	4b6b      	ldr	r3, [pc, #428]	; (8019070 <_strtod_l+0xc08>)
 8018ec4:	2200      	movs	r2, #0
 8018ec6:	f7e7 fbb7 	bl	8000638 <__aeabi_dmul>
 8018eca:	4680      	mov	r8, r0
 8018ecc:	4689      	mov	r9, r1
 8018ece:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8018ed2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8018ed6:	931b      	str	r3, [sp, #108]	; 0x6c
 8018ed8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8018edc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8018ee0:	e79b      	b.n	8018e1a <_strtod_l+0x9b2>
 8018ee2:	f1ba 0f01 	cmp.w	sl, #1
 8018ee6:	d102      	bne.n	8018eee <_strtod_l+0xa86>
 8018ee8:	2f00      	cmp	r7, #0
 8018eea:	f43f ad7e 	beq.w	80189ea <_strtod_l+0x582>
 8018eee:	4b61      	ldr	r3, [pc, #388]	; (8019074 <_strtod_l+0xc0c>)
 8018ef0:	2200      	movs	r2, #0
 8018ef2:	e78c      	b.n	8018e0e <_strtod_l+0x9a6>
 8018ef4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8019070 <_strtod_l+0xc08>
 8018ef8:	f04f 0800 	mov.w	r8, #0
 8018efc:	e7e7      	b.n	8018ece <_strtod_l+0xa66>
 8018efe:	4b5c      	ldr	r3, [pc, #368]	; (8019070 <_strtod_l+0xc08>)
 8018f00:	4640      	mov	r0, r8
 8018f02:	4649      	mov	r1, r9
 8018f04:	2200      	movs	r2, #0
 8018f06:	f7e7 fb97 	bl	8000638 <__aeabi_dmul>
 8018f0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018f0c:	4680      	mov	r8, r0
 8018f0e:	4689      	mov	r9, r1
 8018f10:	b933      	cbnz	r3, 8018f20 <_strtod_l+0xab8>
 8018f12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018f16:	9012      	str	r0, [sp, #72]	; 0x48
 8018f18:	9313      	str	r3, [sp, #76]	; 0x4c
 8018f1a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8018f1e:	e7dd      	b.n	8018edc <_strtod_l+0xa74>
 8018f20:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8018f24:	e7f9      	b.n	8018f1a <_strtod_l+0xab2>
 8018f26:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8018f2a:	9b04      	ldr	r3, [sp, #16]
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	d1a8      	bne.n	8018e82 <_strtod_l+0xa1a>
 8018f30:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018f34:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018f36:	0d1b      	lsrs	r3, r3, #20
 8018f38:	051b      	lsls	r3, r3, #20
 8018f3a:	429a      	cmp	r2, r3
 8018f3c:	d1a1      	bne.n	8018e82 <_strtod_l+0xa1a>
 8018f3e:	4640      	mov	r0, r8
 8018f40:	4649      	mov	r1, r9
 8018f42:	f7e7 fed9 	bl	8000cf8 <__aeabi_d2lz>
 8018f46:	f7e7 fb49 	bl	80005dc <__aeabi_l2d>
 8018f4a:	4602      	mov	r2, r0
 8018f4c:	460b      	mov	r3, r1
 8018f4e:	4640      	mov	r0, r8
 8018f50:	4649      	mov	r1, r9
 8018f52:	f7e7 f9b9 	bl	80002c8 <__aeabi_dsub>
 8018f56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018f58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018f5c:	ea43 030a 	orr.w	r3, r3, sl
 8018f60:	4313      	orrs	r3, r2
 8018f62:	4680      	mov	r8, r0
 8018f64:	4689      	mov	r9, r1
 8018f66:	d053      	beq.n	8019010 <_strtod_l+0xba8>
 8018f68:	a335      	add	r3, pc, #212	; (adr r3, 8019040 <_strtod_l+0xbd8>)
 8018f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f6e:	f7e7 fdd5 	bl	8000b1c <__aeabi_dcmplt>
 8018f72:	2800      	cmp	r0, #0
 8018f74:	f47f acce 	bne.w	8018914 <_strtod_l+0x4ac>
 8018f78:	a333      	add	r3, pc, #204	; (adr r3, 8019048 <_strtod_l+0xbe0>)
 8018f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f7e:	4640      	mov	r0, r8
 8018f80:	4649      	mov	r1, r9
 8018f82:	f7e7 fde9 	bl	8000b58 <__aeabi_dcmpgt>
 8018f86:	2800      	cmp	r0, #0
 8018f88:	f43f af7b 	beq.w	8018e82 <_strtod_l+0xa1a>
 8018f8c:	e4c2      	b.n	8018914 <_strtod_l+0x4ac>
 8018f8e:	9b04      	ldr	r3, [sp, #16]
 8018f90:	b333      	cbz	r3, 8018fe0 <_strtod_l+0xb78>
 8018f92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018f94:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8018f98:	d822      	bhi.n	8018fe0 <_strtod_l+0xb78>
 8018f9a:	a32d      	add	r3, pc, #180	; (adr r3, 8019050 <_strtod_l+0xbe8>)
 8018f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fa0:	4640      	mov	r0, r8
 8018fa2:	4649      	mov	r1, r9
 8018fa4:	f7e7 fdc4 	bl	8000b30 <__aeabi_dcmple>
 8018fa8:	b1a0      	cbz	r0, 8018fd4 <_strtod_l+0xb6c>
 8018faa:	4649      	mov	r1, r9
 8018fac:	4640      	mov	r0, r8
 8018fae:	f7e7 fe1b 	bl	8000be8 <__aeabi_d2uiz>
 8018fb2:	2801      	cmp	r0, #1
 8018fb4:	bf38      	it	cc
 8018fb6:	2001      	movcc	r0, #1
 8018fb8:	f7e7 fac4 	bl	8000544 <__aeabi_ui2d>
 8018fbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018fbe:	4680      	mov	r8, r0
 8018fc0:	4689      	mov	r9, r1
 8018fc2:	bb13      	cbnz	r3, 801900a <_strtod_l+0xba2>
 8018fc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018fc8:	9014      	str	r0, [sp, #80]	; 0x50
 8018fca:	9315      	str	r3, [sp, #84]	; 0x54
 8018fcc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8018fd0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8018fd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018fd6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018fd8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8018fdc:	1a9b      	subs	r3, r3, r2
 8018fde:	930d      	str	r3, [sp, #52]	; 0x34
 8018fe0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018fe4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8018fe8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018fec:	f002 f954 	bl	801b298 <__ulp>
 8018ff0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018ff4:	ec53 2b10 	vmov	r2, r3, d0
 8018ff8:	f7e7 fb1e 	bl	8000638 <__aeabi_dmul>
 8018ffc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019000:	f7e7 f964 	bl	80002cc <__adddf3>
 8019004:	4682      	mov	sl, r0
 8019006:	468b      	mov	fp, r1
 8019008:	e78f      	b.n	8018f2a <_strtod_l+0xac2>
 801900a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801900e:	e7dd      	b.n	8018fcc <_strtod_l+0xb64>
 8019010:	a311      	add	r3, pc, #68	; (adr r3, 8019058 <_strtod_l+0xbf0>)
 8019012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019016:	f7e7 fd81 	bl	8000b1c <__aeabi_dcmplt>
 801901a:	e7b4      	b.n	8018f86 <_strtod_l+0xb1e>
 801901c:	2300      	movs	r3, #0
 801901e:	930e      	str	r3, [sp, #56]	; 0x38
 8019020:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8019022:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019024:	6013      	str	r3, [r2, #0]
 8019026:	f7ff ba65 	b.w	80184f4 <_strtod_l+0x8c>
 801902a:	2b65      	cmp	r3, #101	; 0x65
 801902c:	f43f ab5d 	beq.w	80186ea <_strtod_l+0x282>
 8019030:	2b45      	cmp	r3, #69	; 0x45
 8019032:	f43f ab5a 	beq.w	80186ea <_strtod_l+0x282>
 8019036:	2201      	movs	r2, #1
 8019038:	f7ff bb92 	b.w	8018760 <_strtod_l+0x2f8>
 801903c:	f3af 8000 	nop.w
 8019040:	94a03595 	.word	0x94a03595
 8019044:	3fdfffff 	.word	0x3fdfffff
 8019048:	35afe535 	.word	0x35afe535
 801904c:	3fe00000 	.word	0x3fe00000
 8019050:	ffc00000 	.word	0xffc00000
 8019054:	41dfffff 	.word	0x41dfffff
 8019058:	94a03595 	.word	0x94a03595
 801905c:	3fcfffff 	.word	0x3fcfffff
 8019060:	3ff00000 	.word	0x3ff00000
 8019064:	7ff00000 	.word	0x7ff00000
 8019068:	7fe00000 	.word	0x7fe00000
 801906c:	7c9fffff 	.word	0x7c9fffff
 8019070:	3fe00000 	.word	0x3fe00000
 8019074:	bff00000 	.word	0xbff00000
 8019078:	7fefffff 	.word	0x7fefffff

0801907c <_strtod_r>:
 801907c:	4b01      	ldr	r3, [pc, #4]	; (8019084 <_strtod_r+0x8>)
 801907e:	f7ff b9f3 	b.w	8018468 <_strtod_l>
 8019082:	bf00      	nop
 8019084:	20000160 	.word	0x20000160

08019088 <_strtol_l.isra.0>:
 8019088:	2b01      	cmp	r3, #1
 801908a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801908e:	d001      	beq.n	8019094 <_strtol_l.isra.0+0xc>
 8019090:	2b24      	cmp	r3, #36	; 0x24
 8019092:	d906      	bls.n	80190a2 <_strtol_l.isra.0+0x1a>
 8019094:	f7fd ff46 	bl	8016f24 <__errno>
 8019098:	2316      	movs	r3, #22
 801909a:	6003      	str	r3, [r0, #0]
 801909c:	2000      	movs	r0, #0
 801909e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190a2:	4f3a      	ldr	r7, [pc, #232]	; (801918c <_strtol_l.isra.0+0x104>)
 80190a4:	468e      	mov	lr, r1
 80190a6:	4676      	mov	r6, lr
 80190a8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80190ac:	5de5      	ldrb	r5, [r4, r7]
 80190ae:	f015 0508 	ands.w	r5, r5, #8
 80190b2:	d1f8      	bne.n	80190a6 <_strtol_l.isra.0+0x1e>
 80190b4:	2c2d      	cmp	r4, #45	; 0x2d
 80190b6:	d134      	bne.n	8019122 <_strtol_l.isra.0+0x9a>
 80190b8:	f89e 4000 	ldrb.w	r4, [lr]
 80190bc:	f04f 0801 	mov.w	r8, #1
 80190c0:	f106 0e02 	add.w	lr, r6, #2
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	d05c      	beq.n	8019182 <_strtol_l.isra.0+0xfa>
 80190c8:	2b10      	cmp	r3, #16
 80190ca:	d10c      	bne.n	80190e6 <_strtol_l.isra.0+0x5e>
 80190cc:	2c30      	cmp	r4, #48	; 0x30
 80190ce:	d10a      	bne.n	80190e6 <_strtol_l.isra.0+0x5e>
 80190d0:	f89e 4000 	ldrb.w	r4, [lr]
 80190d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80190d8:	2c58      	cmp	r4, #88	; 0x58
 80190da:	d14d      	bne.n	8019178 <_strtol_l.isra.0+0xf0>
 80190dc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80190e0:	2310      	movs	r3, #16
 80190e2:	f10e 0e02 	add.w	lr, lr, #2
 80190e6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80190ea:	f10c 3cff 	add.w	ip, ip, #4294967295
 80190ee:	2600      	movs	r6, #0
 80190f0:	fbbc f9f3 	udiv	r9, ip, r3
 80190f4:	4635      	mov	r5, r6
 80190f6:	fb03 ca19 	mls	sl, r3, r9, ip
 80190fa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80190fe:	2f09      	cmp	r7, #9
 8019100:	d818      	bhi.n	8019134 <_strtol_l.isra.0+0xac>
 8019102:	463c      	mov	r4, r7
 8019104:	42a3      	cmp	r3, r4
 8019106:	dd24      	ble.n	8019152 <_strtol_l.isra.0+0xca>
 8019108:	2e00      	cmp	r6, #0
 801910a:	db1f      	blt.n	801914c <_strtol_l.isra.0+0xc4>
 801910c:	45a9      	cmp	r9, r5
 801910e:	d31d      	bcc.n	801914c <_strtol_l.isra.0+0xc4>
 8019110:	d101      	bne.n	8019116 <_strtol_l.isra.0+0x8e>
 8019112:	45a2      	cmp	sl, r4
 8019114:	db1a      	blt.n	801914c <_strtol_l.isra.0+0xc4>
 8019116:	fb05 4503 	mla	r5, r5, r3, r4
 801911a:	2601      	movs	r6, #1
 801911c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8019120:	e7eb      	b.n	80190fa <_strtol_l.isra.0+0x72>
 8019122:	2c2b      	cmp	r4, #43	; 0x2b
 8019124:	bf08      	it	eq
 8019126:	f89e 4000 	ldrbeq.w	r4, [lr]
 801912a:	46a8      	mov	r8, r5
 801912c:	bf08      	it	eq
 801912e:	f106 0e02 	addeq.w	lr, r6, #2
 8019132:	e7c7      	b.n	80190c4 <_strtol_l.isra.0+0x3c>
 8019134:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8019138:	2f19      	cmp	r7, #25
 801913a:	d801      	bhi.n	8019140 <_strtol_l.isra.0+0xb8>
 801913c:	3c37      	subs	r4, #55	; 0x37
 801913e:	e7e1      	b.n	8019104 <_strtol_l.isra.0+0x7c>
 8019140:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8019144:	2f19      	cmp	r7, #25
 8019146:	d804      	bhi.n	8019152 <_strtol_l.isra.0+0xca>
 8019148:	3c57      	subs	r4, #87	; 0x57
 801914a:	e7db      	b.n	8019104 <_strtol_l.isra.0+0x7c>
 801914c:	f04f 36ff 	mov.w	r6, #4294967295
 8019150:	e7e4      	b.n	801911c <_strtol_l.isra.0+0x94>
 8019152:	2e00      	cmp	r6, #0
 8019154:	da05      	bge.n	8019162 <_strtol_l.isra.0+0xda>
 8019156:	2322      	movs	r3, #34	; 0x22
 8019158:	6003      	str	r3, [r0, #0]
 801915a:	4665      	mov	r5, ip
 801915c:	b942      	cbnz	r2, 8019170 <_strtol_l.isra.0+0xe8>
 801915e:	4628      	mov	r0, r5
 8019160:	e79d      	b.n	801909e <_strtol_l.isra.0+0x16>
 8019162:	f1b8 0f00 	cmp.w	r8, #0
 8019166:	d000      	beq.n	801916a <_strtol_l.isra.0+0xe2>
 8019168:	426d      	negs	r5, r5
 801916a:	2a00      	cmp	r2, #0
 801916c:	d0f7      	beq.n	801915e <_strtol_l.isra.0+0xd6>
 801916e:	b10e      	cbz	r6, 8019174 <_strtol_l.isra.0+0xec>
 8019170:	f10e 31ff 	add.w	r1, lr, #4294967295
 8019174:	6011      	str	r1, [r2, #0]
 8019176:	e7f2      	b.n	801915e <_strtol_l.isra.0+0xd6>
 8019178:	2430      	movs	r4, #48	; 0x30
 801917a:	2b00      	cmp	r3, #0
 801917c:	d1b3      	bne.n	80190e6 <_strtol_l.isra.0+0x5e>
 801917e:	2308      	movs	r3, #8
 8019180:	e7b1      	b.n	80190e6 <_strtol_l.isra.0+0x5e>
 8019182:	2c30      	cmp	r4, #48	; 0x30
 8019184:	d0a4      	beq.n	80190d0 <_strtol_l.isra.0+0x48>
 8019186:	230a      	movs	r3, #10
 8019188:	e7ad      	b.n	80190e6 <_strtol_l.isra.0+0x5e>
 801918a:	bf00      	nop
 801918c:	0801d731 	.word	0x0801d731

08019190 <_strtol_r>:
 8019190:	f7ff bf7a 	b.w	8019088 <_strtol_l.isra.0>

08019194 <strtol>:
 8019194:	4613      	mov	r3, r2
 8019196:	460a      	mov	r2, r1
 8019198:	4601      	mov	r1, r0
 801919a:	4802      	ldr	r0, [pc, #8]	; (80191a4 <strtol+0x10>)
 801919c:	6800      	ldr	r0, [r0, #0]
 801919e:	f7ff bf73 	b.w	8019088 <_strtol_l.isra.0>
 80191a2:	bf00      	nop
 80191a4:	200000f8 	.word	0x200000f8

080191a8 <_strtoul_l.isra.0>:
 80191a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80191ac:	4e3b      	ldr	r6, [pc, #236]	; (801929c <_strtoul_l.isra.0+0xf4>)
 80191ae:	4686      	mov	lr, r0
 80191b0:	468c      	mov	ip, r1
 80191b2:	4660      	mov	r0, ip
 80191b4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80191b8:	5da5      	ldrb	r5, [r4, r6]
 80191ba:	f015 0508 	ands.w	r5, r5, #8
 80191be:	d1f8      	bne.n	80191b2 <_strtoul_l.isra.0+0xa>
 80191c0:	2c2d      	cmp	r4, #45	; 0x2d
 80191c2:	d134      	bne.n	801922e <_strtoul_l.isra.0+0x86>
 80191c4:	f89c 4000 	ldrb.w	r4, [ip]
 80191c8:	f04f 0801 	mov.w	r8, #1
 80191cc:	f100 0c02 	add.w	ip, r0, #2
 80191d0:	2b00      	cmp	r3, #0
 80191d2:	d05e      	beq.n	8019292 <_strtoul_l.isra.0+0xea>
 80191d4:	2b10      	cmp	r3, #16
 80191d6:	d10c      	bne.n	80191f2 <_strtoul_l.isra.0+0x4a>
 80191d8:	2c30      	cmp	r4, #48	; 0x30
 80191da:	d10a      	bne.n	80191f2 <_strtoul_l.isra.0+0x4a>
 80191dc:	f89c 0000 	ldrb.w	r0, [ip]
 80191e0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80191e4:	2858      	cmp	r0, #88	; 0x58
 80191e6:	d14f      	bne.n	8019288 <_strtoul_l.isra.0+0xe0>
 80191e8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80191ec:	2310      	movs	r3, #16
 80191ee:	f10c 0c02 	add.w	ip, ip, #2
 80191f2:	f04f 37ff 	mov.w	r7, #4294967295
 80191f6:	2500      	movs	r5, #0
 80191f8:	fbb7 f7f3 	udiv	r7, r7, r3
 80191fc:	fb03 f907 	mul.w	r9, r3, r7
 8019200:	ea6f 0909 	mvn.w	r9, r9
 8019204:	4628      	mov	r0, r5
 8019206:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801920a:	2e09      	cmp	r6, #9
 801920c:	d818      	bhi.n	8019240 <_strtoul_l.isra.0+0x98>
 801920e:	4634      	mov	r4, r6
 8019210:	42a3      	cmp	r3, r4
 8019212:	dd24      	ble.n	801925e <_strtoul_l.isra.0+0xb6>
 8019214:	2d00      	cmp	r5, #0
 8019216:	db1f      	blt.n	8019258 <_strtoul_l.isra.0+0xb0>
 8019218:	4287      	cmp	r7, r0
 801921a:	d31d      	bcc.n	8019258 <_strtoul_l.isra.0+0xb0>
 801921c:	d101      	bne.n	8019222 <_strtoul_l.isra.0+0x7a>
 801921e:	45a1      	cmp	r9, r4
 8019220:	db1a      	blt.n	8019258 <_strtoul_l.isra.0+0xb0>
 8019222:	fb00 4003 	mla	r0, r0, r3, r4
 8019226:	2501      	movs	r5, #1
 8019228:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801922c:	e7eb      	b.n	8019206 <_strtoul_l.isra.0+0x5e>
 801922e:	2c2b      	cmp	r4, #43	; 0x2b
 8019230:	bf08      	it	eq
 8019232:	f89c 4000 	ldrbeq.w	r4, [ip]
 8019236:	46a8      	mov	r8, r5
 8019238:	bf08      	it	eq
 801923a:	f100 0c02 	addeq.w	ip, r0, #2
 801923e:	e7c7      	b.n	80191d0 <_strtoul_l.isra.0+0x28>
 8019240:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8019244:	2e19      	cmp	r6, #25
 8019246:	d801      	bhi.n	801924c <_strtoul_l.isra.0+0xa4>
 8019248:	3c37      	subs	r4, #55	; 0x37
 801924a:	e7e1      	b.n	8019210 <_strtoul_l.isra.0+0x68>
 801924c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8019250:	2e19      	cmp	r6, #25
 8019252:	d804      	bhi.n	801925e <_strtoul_l.isra.0+0xb6>
 8019254:	3c57      	subs	r4, #87	; 0x57
 8019256:	e7db      	b.n	8019210 <_strtoul_l.isra.0+0x68>
 8019258:	f04f 35ff 	mov.w	r5, #4294967295
 801925c:	e7e4      	b.n	8019228 <_strtoul_l.isra.0+0x80>
 801925e:	2d00      	cmp	r5, #0
 8019260:	da07      	bge.n	8019272 <_strtoul_l.isra.0+0xca>
 8019262:	2322      	movs	r3, #34	; 0x22
 8019264:	f8ce 3000 	str.w	r3, [lr]
 8019268:	f04f 30ff 	mov.w	r0, #4294967295
 801926c:	b942      	cbnz	r2, 8019280 <_strtoul_l.isra.0+0xd8>
 801926e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019272:	f1b8 0f00 	cmp.w	r8, #0
 8019276:	d000      	beq.n	801927a <_strtoul_l.isra.0+0xd2>
 8019278:	4240      	negs	r0, r0
 801927a:	2a00      	cmp	r2, #0
 801927c:	d0f7      	beq.n	801926e <_strtoul_l.isra.0+0xc6>
 801927e:	b10d      	cbz	r5, 8019284 <_strtoul_l.isra.0+0xdc>
 8019280:	f10c 31ff 	add.w	r1, ip, #4294967295
 8019284:	6011      	str	r1, [r2, #0]
 8019286:	e7f2      	b.n	801926e <_strtoul_l.isra.0+0xc6>
 8019288:	2430      	movs	r4, #48	; 0x30
 801928a:	2b00      	cmp	r3, #0
 801928c:	d1b1      	bne.n	80191f2 <_strtoul_l.isra.0+0x4a>
 801928e:	2308      	movs	r3, #8
 8019290:	e7af      	b.n	80191f2 <_strtoul_l.isra.0+0x4a>
 8019292:	2c30      	cmp	r4, #48	; 0x30
 8019294:	d0a2      	beq.n	80191dc <_strtoul_l.isra.0+0x34>
 8019296:	230a      	movs	r3, #10
 8019298:	e7ab      	b.n	80191f2 <_strtoul_l.isra.0+0x4a>
 801929a:	bf00      	nop
 801929c:	0801d731 	.word	0x0801d731

080192a0 <_strtoul_r>:
 80192a0:	f7ff bf82 	b.w	80191a8 <_strtoul_l.isra.0>

080192a4 <_vsniprintf_r>:
 80192a4:	b530      	push	{r4, r5, lr}
 80192a6:	1e14      	subs	r4, r2, #0
 80192a8:	4605      	mov	r5, r0
 80192aa:	b09b      	sub	sp, #108	; 0x6c
 80192ac:	4618      	mov	r0, r3
 80192ae:	da05      	bge.n	80192bc <_vsniprintf_r+0x18>
 80192b0:	238b      	movs	r3, #139	; 0x8b
 80192b2:	602b      	str	r3, [r5, #0]
 80192b4:	f04f 30ff 	mov.w	r0, #4294967295
 80192b8:	b01b      	add	sp, #108	; 0x6c
 80192ba:	bd30      	pop	{r4, r5, pc}
 80192bc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80192c0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80192c4:	bf14      	ite	ne
 80192c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80192ca:	4623      	moveq	r3, r4
 80192cc:	9302      	str	r3, [sp, #8]
 80192ce:	9305      	str	r3, [sp, #20]
 80192d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80192d4:	9100      	str	r1, [sp, #0]
 80192d6:	9104      	str	r1, [sp, #16]
 80192d8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80192dc:	4602      	mov	r2, r0
 80192de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80192e0:	4669      	mov	r1, sp
 80192e2:	4628      	mov	r0, r5
 80192e4:	f002 f9b8 	bl	801b658 <_svfiprintf_r>
 80192e8:	1c43      	adds	r3, r0, #1
 80192ea:	bfbc      	itt	lt
 80192ec:	238b      	movlt	r3, #139	; 0x8b
 80192ee:	602b      	strlt	r3, [r5, #0]
 80192f0:	2c00      	cmp	r4, #0
 80192f2:	d0e1      	beq.n	80192b8 <_vsniprintf_r+0x14>
 80192f4:	9b00      	ldr	r3, [sp, #0]
 80192f6:	2200      	movs	r2, #0
 80192f8:	701a      	strb	r2, [r3, #0]
 80192fa:	e7dd      	b.n	80192b8 <_vsniprintf_r+0x14>

080192fc <vsniprintf>:
 80192fc:	b507      	push	{r0, r1, r2, lr}
 80192fe:	9300      	str	r3, [sp, #0]
 8019300:	4613      	mov	r3, r2
 8019302:	460a      	mov	r2, r1
 8019304:	4601      	mov	r1, r0
 8019306:	4803      	ldr	r0, [pc, #12]	; (8019314 <vsniprintf+0x18>)
 8019308:	6800      	ldr	r0, [r0, #0]
 801930a:	f7ff ffcb 	bl	80192a4 <_vsniprintf_r>
 801930e:	b003      	add	sp, #12
 8019310:	f85d fb04 	ldr.w	pc, [sp], #4
 8019314:	200000f8 	.word	0x200000f8

08019318 <__swbuf_r>:
 8019318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801931a:	460e      	mov	r6, r1
 801931c:	4614      	mov	r4, r2
 801931e:	4605      	mov	r5, r0
 8019320:	b118      	cbz	r0, 801932a <__swbuf_r+0x12>
 8019322:	6983      	ldr	r3, [r0, #24]
 8019324:	b90b      	cbnz	r3, 801932a <__swbuf_r+0x12>
 8019326:	f7fd fe5b 	bl	8016fe0 <__sinit>
 801932a:	4b21      	ldr	r3, [pc, #132]	; (80193b0 <__swbuf_r+0x98>)
 801932c:	429c      	cmp	r4, r3
 801932e:	d12b      	bne.n	8019388 <__swbuf_r+0x70>
 8019330:	686c      	ldr	r4, [r5, #4]
 8019332:	69a3      	ldr	r3, [r4, #24]
 8019334:	60a3      	str	r3, [r4, #8]
 8019336:	89a3      	ldrh	r3, [r4, #12]
 8019338:	071a      	lsls	r2, r3, #28
 801933a:	d52f      	bpl.n	801939c <__swbuf_r+0x84>
 801933c:	6923      	ldr	r3, [r4, #16]
 801933e:	b36b      	cbz	r3, 801939c <__swbuf_r+0x84>
 8019340:	6923      	ldr	r3, [r4, #16]
 8019342:	6820      	ldr	r0, [r4, #0]
 8019344:	1ac0      	subs	r0, r0, r3
 8019346:	6963      	ldr	r3, [r4, #20]
 8019348:	b2f6      	uxtb	r6, r6
 801934a:	4283      	cmp	r3, r0
 801934c:	4637      	mov	r7, r6
 801934e:	dc04      	bgt.n	801935a <__swbuf_r+0x42>
 8019350:	4621      	mov	r1, r4
 8019352:	4628      	mov	r0, r5
 8019354:	f000 ffde 	bl	801a314 <_fflush_r>
 8019358:	bb30      	cbnz	r0, 80193a8 <__swbuf_r+0x90>
 801935a:	68a3      	ldr	r3, [r4, #8]
 801935c:	3b01      	subs	r3, #1
 801935e:	60a3      	str	r3, [r4, #8]
 8019360:	6823      	ldr	r3, [r4, #0]
 8019362:	1c5a      	adds	r2, r3, #1
 8019364:	6022      	str	r2, [r4, #0]
 8019366:	701e      	strb	r6, [r3, #0]
 8019368:	6963      	ldr	r3, [r4, #20]
 801936a:	3001      	adds	r0, #1
 801936c:	4283      	cmp	r3, r0
 801936e:	d004      	beq.n	801937a <__swbuf_r+0x62>
 8019370:	89a3      	ldrh	r3, [r4, #12]
 8019372:	07db      	lsls	r3, r3, #31
 8019374:	d506      	bpl.n	8019384 <__swbuf_r+0x6c>
 8019376:	2e0a      	cmp	r6, #10
 8019378:	d104      	bne.n	8019384 <__swbuf_r+0x6c>
 801937a:	4621      	mov	r1, r4
 801937c:	4628      	mov	r0, r5
 801937e:	f000 ffc9 	bl	801a314 <_fflush_r>
 8019382:	b988      	cbnz	r0, 80193a8 <__swbuf_r+0x90>
 8019384:	4638      	mov	r0, r7
 8019386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019388:	4b0a      	ldr	r3, [pc, #40]	; (80193b4 <__swbuf_r+0x9c>)
 801938a:	429c      	cmp	r4, r3
 801938c:	d101      	bne.n	8019392 <__swbuf_r+0x7a>
 801938e:	68ac      	ldr	r4, [r5, #8]
 8019390:	e7cf      	b.n	8019332 <__swbuf_r+0x1a>
 8019392:	4b09      	ldr	r3, [pc, #36]	; (80193b8 <__swbuf_r+0xa0>)
 8019394:	429c      	cmp	r4, r3
 8019396:	bf08      	it	eq
 8019398:	68ec      	ldreq	r4, [r5, #12]
 801939a:	e7ca      	b.n	8019332 <__swbuf_r+0x1a>
 801939c:	4621      	mov	r1, r4
 801939e:	4628      	mov	r0, r5
 80193a0:	f000 f81e 	bl	80193e0 <__swsetup_r>
 80193a4:	2800      	cmp	r0, #0
 80193a6:	d0cb      	beq.n	8019340 <__swbuf_r+0x28>
 80193a8:	f04f 37ff 	mov.w	r7, #4294967295
 80193ac:	e7ea      	b.n	8019384 <__swbuf_r+0x6c>
 80193ae:	bf00      	nop
 80193b0:	0801d854 	.word	0x0801d854
 80193b4:	0801d874 	.word	0x0801d874
 80193b8:	0801d834 	.word	0x0801d834

080193bc <_write_r>:
 80193bc:	b538      	push	{r3, r4, r5, lr}
 80193be:	4d07      	ldr	r5, [pc, #28]	; (80193dc <_write_r+0x20>)
 80193c0:	4604      	mov	r4, r0
 80193c2:	4608      	mov	r0, r1
 80193c4:	4611      	mov	r1, r2
 80193c6:	2200      	movs	r2, #0
 80193c8:	602a      	str	r2, [r5, #0]
 80193ca:	461a      	mov	r2, r3
 80193cc:	f002 ffc0 	bl	801c350 <_write>
 80193d0:	1c43      	adds	r3, r0, #1
 80193d2:	d102      	bne.n	80193da <_write_r+0x1e>
 80193d4:	682b      	ldr	r3, [r5, #0]
 80193d6:	b103      	cbz	r3, 80193da <_write_r+0x1e>
 80193d8:	6023      	str	r3, [r4, #0]
 80193da:	bd38      	pop	{r3, r4, r5, pc}
 80193dc:	2000d0c8 	.word	0x2000d0c8

080193e0 <__swsetup_r>:
 80193e0:	4b32      	ldr	r3, [pc, #200]	; (80194ac <__swsetup_r+0xcc>)
 80193e2:	b570      	push	{r4, r5, r6, lr}
 80193e4:	681d      	ldr	r5, [r3, #0]
 80193e6:	4606      	mov	r6, r0
 80193e8:	460c      	mov	r4, r1
 80193ea:	b125      	cbz	r5, 80193f6 <__swsetup_r+0x16>
 80193ec:	69ab      	ldr	r3, [r5, #24]
 80193ee:	b913      	cbnz	r3, 80193f6 <__swsetup_r+0x16>
 80193f0:	4628      	mov	r0, r5
 80193f2:	f7fd fdf5 	bl	8016fe0 <__sinit>
 80193f6:	4b2e      	ldr	r3, [pc, #184]	; (80194b0 <__swsetup_r+0xd0>)
 80193f8:	429c      	cmp	r4, r3
 80193fa:	d10f      	bne.n	801941c <__swsetup_r+0x3c>
 80193fc:	686c      	ldr	r4, [r5, #4]
 80193fe:	89a3      	ldrh	r3, [r4, #12]
 8019400:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019404:	0719      	lsls	r1, r3, #28
 8019406:	d42c      	bmi.n	8019462 <__swsetup_r+0x82>
 8019408:	06dd      	lsls	r5, r3, #27
 801940a:	d411      	bmi.n	8019430 <__swsetup_r+0x50>
 801940c:	2309      	movs	r3, #9
 801940e:	6033      	str	r3, [r6, #0]
 8019410:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019414:	81a3      	strh	r3, [r4, #12]
 8019416:	f04f 30ff 	mov.w	r0, #4294967295
 801941a:	e03e      	b.n	801949a <__swsetup_r+0xba>
 801941c:	4b25      	ldr	r3, [pc, #148]	; (80194b4 <__swsetup_r+0xd4>)
 801941e:	429c      	cmp	r4, r3
 8019420:	d101      	bne.n	8019426 <__swsetup_r+0x46>
 8019422:	68ac      	ldr	r4, [r5, #8]
 8019424:	e7eb      	b.n	80193fe <__swsetup_r+0x1e>
 8019426:	4b24      	ldr	r3, [pc, #144]	; (80194b8 <__swsetup_r+0xd8>)
 8019428:	429c      	cmp	r4, r3
 801942a:	bf08      	it	eq
 801942c:	68ec      	ldreq	r4, [r5, #12]
 801942e:	e7e6      	b.n	80193fe <__swsetup_r+0x1e>
 8019430:	0758      	lsls	r0, r3, #29
 8019432:	d512      	bpl.n	801945a <__swsetup_r+0x7a>
 8019434:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019436:	b141      	cbz	r1, 801944a <__swsetup_r+0x6a>
 8019438:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801943c:	4299      	cmp	r1, r3
 801943e:	d002      	beq.n	8019446 <__swsetup_r+0x66>
 8019440:	4630      	mov	r0, r6
 8019442:	f7fd fed3 	bl	80171ec <_free_r>
 8019446:	2300      	movs	r3, #0
 8019448:	6363      	str	r3, [r4, #52]	; 0x34
 801944a:	89a3      	ldrh	r3, [r4, #12]
 801944c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019450:	81a3      	strh	r3, [r4, #12]
 8019452:	2300      	movs	r3, #0
 8019454:	6063      	str	r3, [r4, #4]
 8019456:	6923      	ldr	r3, [r4, #16]
 8019458:	6023      	str	r3, [r4, #0]
 801945a:	89a3      	ldrh	r3, [r4, #12]
 801945c:	f043 0308 	orr.w	r3, r3, #8
 8019460:	81a3      	strh	r3, [r4, #12]
 8019462:	6923      	ldr	r3, [r4, #16]
 8019464:	b94b      	cbnz	r3, 801947a <__swsetup_r+0x9a>
 8019466:	89a3      	ldrh	r3, [r4, #12]
 8019468:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801946c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019470:	d003      	beq.n	801947a <__swsetup_r+0x9a>
 8019472:	4621      	mov	r1, r4
 8019474:	4630      	mov	r0, r6
 8019476:	f001 fb45 	bl	801ab04 <__smakebuf_r>
 801947a:	89a0      	ldrh	r0, [r4, #12]
 801947c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019480:	f010 0301 	ands.w	r3, r0, #1
 8019484:	d00a      	beq.n	801949c <__swsetup_r+0xbc>
 8019486:	2300      	movs	r3, #0
 8019488:	60a3      	str	r3, [r4, #8]
 801948a:	6963      	ldr	r3, [r4, #20]
 801948c:	425b      	negs	r3, r3
 801948e:	61a3      	str	r3, [r4, #24]
 8019490:	6923      	ldr	r3, [r4, #16]
 8019492:	b943      	cbnz	r3, 80194a6 <__swsetup_r+0xc6>
 8019494:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019498:	d1ba      	bne.n	8019410 <__swsetup_r+0x30>
 801949a:	bd70      	pop	{r4, r5, r6, pc}
 801949c:	0781      	lsls	r1, r0, #30
 801949e:	bf58      	it	pl
 80194a0:	6963      	ldrpl	r3, [r4, #20]
 80194a2:	60a3      	str	r3, [r4, #8]
 80194a4:	e7f4      	b.n	8019490 <__swsetup_r+0xb0>
 80194a6:	2000      	movs	r0, #0
 80194a8:	e7f7      	b.n	801949a <__swsetup_r+0xba>
 80194aa:	bf00      	nop
 80194ac:	200000f8 	.word	0x200000f8
 80194b0:	0801d854 	.word	0x0801d854
 80194b4:	0801d874 	.word	0x0801d874
 80194b8:	0801d834 	.word	0x0801d834

080194bc <__assert_func>:
 80194bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80194be:	4614      	mov	r4, r2
 80194c0:	461a      	mov	r2, r3
 80194c2:	4b09      	ldr	r3, [pc, #36]	; (80194e8 <__assert_func+0x2c>)
 80194c4:	681b      	ldr	r3, [r3, #0]
 80194c6:	4605      	mov	r5, r0
 80194c8:	68d8      	ldr	r0, [r3, #12]
 80194ca:	b14c      	cbz	r4, 80194e0 <__assert_func+0x24>
 80194cc:	4b07      	ldr	r3, [pc, #28]	; (80194ec <__assert_func+0x30>)
 80194ce:	9100      	str	r1, [sp, #0]
 80194d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80194d4:	4906      	ldr	r1, [pc, #24]	; (80194f0 <__assert_func+0x34>)
 80194d6:	462b      	mov	r3, r5
 80194d8:	f000 ff58 	bl	801a38c <fiprintf>
 80194dc:	f7fd fd1a 	bl	8016f14 <abort>
 80194e0:	4b04      	ldr	r3, [pc, #16]	; (80194f4 <__assert_func+0x38>)
 80194e2:	461c      	mov	r4, r3
 80194e4:	e7f3      	b.n	80194ce <__assert_func+0x12>
 80194e6:	bf00      	nop
 80194e8:	200000f8 	.word	0x200000f8
 80194ec:	0801d920 	.word	0x0801d920
 80194f0:	0801d92d 	.word	0x0801d92d
 80194f4:	0801d95b 	.word	0x0801d95b

080194f8 <_close_r>:
 80194f8:	b538      	push	{r3, r4, r5, lr}
 80194fa:	4d06      	ldr	r5, [pc, #24]	; (8019514 <_close_r+0x1c>)
 80194fc:	2300      	movs	r3, #0
 80194fe:	4604      	mov	r4, r0
 8019500:	4608      	mov	r0, r1
 8019502:	602b      	str	r3, [r5, #0]
 8019504:	f002 fede 	bl	801c2c4 <_close>
 8019508:	1c43      	adds	r3, r0, #1
 801950a:	d102      	bne.n	8019512 <_close_r+0x1a>
 801950c:	682b      	ldr	r3, [r5, #0]
 801950e:	b103      	cbz	r3, 8019512 <_close_r+0x1a>
 8019510:	6023      	str	r3, [r4, #0]
 8019512:	bd38      	pop	{r3, r4, r5, pc}
 8019514:	2000d0c8 	.word	0x2000d0c8

08019518 <quorem>:
 8019518:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801951c:	6903      	ldr	r3, [r0, #16]
 801951e:	690c      	ldr	r4, [r1, #16]
 8019520:	42a3      	cmp	r3, r4
 8019522:	4607      	mov	r7, r0
 8019524:	f2c0 8081 	blt.w	801962a <quorem+0x112>
 8019528:	3c01      	subs	r4, #1
 801952a:	f101 0814 	add.w	r8, r1, #20
 801952e:	f100 0514 	add.w	r5, r0, #20
 8019532:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019536:	9301      	str	r3, [sp, #4]
 8019538:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801953c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019540:	3301      	adds	r3, #1
 8019542:	429a      	cmp	r2, r3
 8019544:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8019548:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801954c:	fbb2 f6f3 	udiv	r6, r2, r3
 8019550:	d331      	bcc.n	80195b6 <quorem+0x9e>
 8019552:	f04f 0e00 	mov.w	lr, #0
 8019556:	4640      	mov	r0, r8
 8019558:	46ac      	mov	ip, r5
 801955a:	46f2      	mov	sl, lr
 801955c:	f850 2b04 	ldr.w	r2, [r0], #4
 8019560:	b293      	uxth	r3, r2
 8019562:	fb06 e303 	mla	r3, r6, r3, lr
 8019566:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801956a:	b29b      	uxth	r3, r3
 801956c:	ebaa 0303 	sub.w	r3, sl, r3
 8019570:	0c12      	lsrs	r2, r2, #16
 8019572:	f8dc a000 	ldr.w	sl, [ip]
 8019576:	fb06 e202 	mla	r2, r6, r2, lr
 801957a:	fa13 f38a 	uxtah	r3, r3, sl
 801957e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8019582:	fa1f fa82 	uxth.w	sl, r2
 8019586:	f8dc 2000 	ldr.w	r2, [ip]
 801958a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801958e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019592:	b29b      	uxth	r3, r3
 8019594:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019598:	4581      	cmp	r9, r0
 801959a:	f84c 3b04 	str.w	r3, [ip], #4
 801959e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80195a2:	d2db      	bcs.n	801955c <quorem+0x44>
 80195a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80195a8:	b92b      	cbnz	r3, 80195b6 <quorem+0x9e>
 80195aa:	9b01      	ldr	r3, [sp, #4]
 80195ac:	3b04      	subs	r3, #4
 80195ae:	429d      	cmp	r5, r3
 80195b0:	461a      	mov	r2, r3
 80195b2:	d32e      	bcc.n	8019612 <quorem+0xfa>
 80195b4:	613c      	str	r4, [r7, #16]
 80195b6:	4638      	mov	r0, r7
 80195b8:	f001 fdca 	bl	801b150 <__mcmp>
 80195bc:	2800      	cmp	r0, #0
 80195be:	db24      	blt.n	801960a <quorem+0xf2>
 80195c0:	3601      	adds	r6, #1
 80195c2:	4628      	mov	r0, r5
 80195c4:	f04f 0c00 	mov.w	ip, #0
 80195c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80195cc:	f8d0 e000 	ldr.w	lr, [r0]
 80195d0:	b293      	uxth	r3, r2
 80195d2:	ebac 0303 	sub.w	r3, ip, r3
 80195d6:	0c12      	lsrs	r2, r2, #16
 80195d8:	fa13 f38e 	uxtah	r3, r3, lr
 80195dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80195e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80195e4:	b29b      	uxth	r3, r3
 80195e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80195ea:	45c1      	cmp	r9, r8
 80195ec:	f840 3b04 	str.w	r3, [r0], #4
 80195f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80195f4:	d2e8      	bcs.n	80195c8 <quorem+0xb0>
 80195f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80195fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80195fe:	b922      	cbnz	r2, 801960a <quorem+0xf2>
 8019600:	3b04      	subs	r3, #4
 8019602:	429d      	cmp	r5, r3
 8019604:	461a      	mov	r2, r3
 8019606:	d30a      	bcc.n	801961e <quorem+0x106>
 8019608:	613c      	str	r4, [r7, #16]
 801960a:	4630      	mov	r0, r6
 801960c:	b003      	add	sp, #12
 801960e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019612:	6812      	ldr	r2, [r2, #0]
 8019614:	3b04      	subs	r3, #4
 8019616:	2a00      	cmp	r2, #0
 8019618:	d1cc      	bne.n	80195b4 <quorem+0x9c>
 801961a:	3c01      	subs	r4, #1
 801961c:	e7c7      	b.n	80195ae <quorem+0x96>
 801961e:	6812      	ldr	r2, [r2, #0]
 8019620:	3b04      	subs	r3, #4
 8019622:	2a00      	cmp	r2, #0
 8019624:	d1f0      	bne.n	8019608 <quorem+0xf0>
 8019626:	3c01      	subs	r4, #1
 8019628:	e7eb      	b.n	8019602 <quorem+0xea>
 801962a:	2000      	movs	r0, #0
 801962c:	e7ee      	b.n	801960c <quorem+0xf4>
	...

08019630 <_dtoa_r>:
 8019630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019634:	ed2d 8b02 	vpush	{d8}
 8019638:	ec57 6b10 	vmov	r6, r7, d0
 801963c:	b095      	sub	sp, #84	; 0x54
 801963e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8019640:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8019644:	9105      	str	r1, [sp, #20]
 8019646:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801964a:	4604      	mov	r4, r0
 801964c:	9209      	str	r2, [sp, #36]	; 0x24
 801964e:	930f      	str	r3, [sp, #60]	; 0x3c
 8019650:	b975      	cbnz	r5, 8019670 <_dtoa_r+0x40>
 8019652:	2010      	movs	r0, #16
 8019654:	f7fd fd8a 	bl	801716c <malloc>
 8019658:	4602      	mov	r2, r0
 801965a:	6260      	str	r0, [r4, #36]	; 0x24
 801965c:	b920      	cbnz	r0, 8019668 <_dtoa_r+0x38>
 801965e:	4bb2      	ldr	r3, [pc, #712]	; (8019928 <_dtoa_r+0x2f8>)
 8019660:	21ea      	movs	r1, #234	; 0xea
 8019662:	48b2      	ldr	r0, [pc, #712]	; (801992c <_dtoa_r+0x2fc>)
 8019664:	f7ff ff2a 	bl	80194bc <__assert_func>
 8019668:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801966c:	6005      	str	r5, [r0, #0]
 801966e:	60c5      	str	r5, [r0, #12]
 8019670:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019672:	6819      	ldr	r1, [r3, #0]
 8019674:	b151      	cbz	r1, 801968c <_dtoa_r+0x5c>
 8019676:	685a      	ldr	r2, [r3, #4]
 8019678:	604a      	str	r2, [r1, #4]
 801967a:	2301      	movs	r3, #1
 801967c:	4093      	lsls	r3, r2
 801967e:	608b      	str	r3, [r1, #8]
 8019680:	4620      	mov	r0, r4
 8019682:	f001 fadd 	bl	801ac40 <_Bfree>
 8019686:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019688:	2200      	movs	r2, #0
 801968a:	601a      	str	r2, [r3, #0]
 801968c:	1e3b      	subs	r3, r7, #0
 801968e:	bfb9      	ittee	lt
 8019690:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8019694:	9303      	strlt	r3, [sp, #12]
 8019696:	2300      	movge	r3, #0
 8019698:	f8c8 3000 	strge.w	r3, [r8]
 801969c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80196a0:	4ba3      	ldr	r3, [pc, #652]	; (8019930 <_dtoa_r+0x300>)
 80196a2:	bfbc      	itt	lt
 80196a4:	2201      	movlt	r2, #1
 80196a6:	f8c8 2000 	strlt.w	r2, [r8]
 80196aa:	ea33 0309 	bics.w	r3, r3, r9
 80196ae:	d11b      	bne.n	80196e8 <_dtoa_r+0xb8>
 80196b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80196b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80196b6:	6013      	str	r3, [r2, #0]
 80196b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80196bc:	4333      	orrs	r3, r6
 80196be:	f000 857a 	beq.w	801a1b6 <_dtoa_r+0xb86>
 80196c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80196c4:	b963      	cbnz	r3, 80196e0 <_dtoa_r+0xb0>
 80196c6:	4b9b      	ldr	r3, [pc, #620]	; (8019934 <_dtoa_r+0x304>)
 80196c8:	e024      	b.n	8019714 <_dtoa_r+0xe4>
 80196ca:	4b9b      	ldr	r3, [pc, #620]	; (8019938 <_dtoa_r+0x308>)
 80196cc:	9300      	str	r3, [sp, #0]
 80196ce:	3308      	adds	r3, #8
 80196d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80196d2:	6013      	str	r3, [r2, #0]
 80196d4:	9800      	ldr	r0, [sp, #0]
 80196d6:	b015      	add	sp, #84	; 0x54
 80196d8:	ecbd 8b02 	vpop	{d8}
 80196dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196e0:	4b94      	ldr	r3, [pc, #592]	; (8019934 <_dtoa_r+0x304>)
 80196e2:	9300      	str	r3, [sp, #0]
 80196e4:	3303      	adds	r3, #3
 80196e6:	e7f3      	b.n	80196d0 <_dtoa_r+0xa0>
 80196e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80196ec:	2200      	movs	r2, #0
 80196ee:	ec51 0b17 	vmov	r0, r1, d7
 80196f2:	2300      	movs	r3, #0
 80196f4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80196f8:	f7e7 fa06 	bl	8000b08 <__aeabi_dcmpeq>
 80196fc:	4680      	mov	r8, r0
 80196fe:	b158      	cbz	r0, 8019718 <_dtoa_r+0xe8>
 8019700:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019702:	2301      	movs	r3, #1
 8019704:	6013      	str	r3, [r2, #0]
 8019706:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019708:	2b00      	cmp	r3, #0
 801970a:	f000 8551 	beq.w	801a1b0 <_dtoa_r+0xb80>
 801970e:	488b      	ldr	r0, [pc, #556]	; (801993c <_dtoa_r+0x30c>)
 8019710:	6018      	str	r0, [r3, #0]
 8019712:	1e43      	subs	r3, r0, #1
 8019714:	9300      	str	r3, [sp, #0]
 8019716:	e7dd      	b.n	80196d4 <_dtoa_r+0xa4>
 8019718:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801971c:	aa12      	add	r2, sp, #72	; 0x48
 801971e:	a913      	add	r1, sp, #76	; 0x4c
 8019720:	4620      	mov	r0, r4
 8019722:	f001 fe35 	bl	801b390 <__d2b>
 8019726:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801972a:	4683      	mov	fp, r0
 801972c:	2d00      	cmp	r5, #0
 801972e:	d07c      	beq.n	801982a <_dtoa_r+0x1fa>
 8019730:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019732:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8019736:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801973a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801973e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8019742:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8019746:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801974a:	4b7d      	ldr	r3, [pc, #500]	; (8019940 <_dtoa_r+0x310>)
 801974c:	2200      	movs	r2, #0
 801974e:	4630      	mov	r0, r6
 8019750:	4639      	mov	r1, r7
 8019752:	f7e6 fdb9 	bl	80002c8 <__aeabi_dsub>
 8019756:	a36e      	add	r3, pc, #440	; (adr r3, 8019910 <_dtoa_r+0x2e0>)
 8019758:	e9d3 2300 	ldrd	r2, r3, [r3]
 801975c:	f7e6 ff6c 	bl	8000638 <__aeabi_dmul>
 8019760:	a36d      	add	r3, pc, #436	; (adr r3, 8019918 <_dtoa_r+0x2e8>)
 8019762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019766:	f7e6 fdb1 	bl	80002cc <__adddf3>
 801976a:	4606      	mov	r6, r0
 801976c:	4628      	mov	r0, r5
 801976e:	460f      	mov	r7, r1
 8019770:	f7e6 fef8 	bl	8000564 <__aeabi_i2d>
 8019774:	a36a      	add	r3, pc, #424	; (adr r3, 8019920 <_dtoa_r+0x2f0>)
 8019776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801977a:	f7e6 ff5d 	bl	8000638 <__aeabi_dmul>
 801977e:	4602      	mov	r2, r0
 8019780:	460b      	mov	r3, r1
 8019782:	4630      	mov	r0, r6
 8019784:	4639      	mov	r1, r7
 8019786:	f7e6 fda1 	bl	80002cc <__adddf3>
 801978a:	4606      	mov	r6, r0
 801978c:	460f      	mov	r7, r1
 801978e:	f7e7 fa03 	bl	8000b98 <__aeabi_d2iz>
 8019792:	2200      	movs	r2, #0
 8019794:	4682      	mov	sl, r0
 8019796:	2300      	movs	r3, #0
 8019798:	4630      	mov	r0, r6
 801979a:	4639      	mov	r1, r7
 801979c:	f7e7 f9be 	bl	8000b1c <__aeabi_dcmplt>
 80197a0:	b148      	cbz	r0, 80197b6 <_dtoa_r+0x186>
 80197a2:	4650      	mov	r0, sl
 80197a4:	f7e6 fede 	bl	8000564 <__aeabi_i2d>
 80197a8:	4632      	mov	r2, r6
 80197aa:	463b      	mov	r3, r7
 80197ac:	f7e7 f9ac 	bl	8000b08 <__aeabi_dcmpeq>
 80197b0:	b908      	cbnz	r0, 80197b6 <_dtoa_r+0x186>
 80197b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80197b6:	f1ba 0f16 	cmp.w	sl, #22
 80197ba:	d854      	bhi.n	8019866 <_dtoa_r+0x236>
 80197bc:	4b61      	ldr	r3, [pc, #388]	; (8019944 <_dtoa_r+0x314>)
 80197be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80197c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80197ca:	f7e7 f9a7 	bl	8000b1c <__aeabi_dcmplt>
 80197ce:	2800      	cmp	r0, #0
 80197d0:	d04b      	beq.n	801986a <_dtoa_r+0x23a>
 80197d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80197d6:	2300      	movs	r3, #0
 80197d8:	930e      	str	r3, [sp, #56]	; 0x38
 80197da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80197dc:	1b5d      	subs	r5, r3, r5
 80197de:	1e6b      	subs	r3, r5, #1
 80197e0:	9304      	str	r3, [sp, #16]
 80197e2:	bf43      	ittte	mi
 80197e4:	2300      	movmi	r3, #0
 80197e6:	f1c5 0801 	rsbmi	r8, r5, #1
 80197ea:	9304      	strmi	r3, [sp, #16]
 80197ec:	f04f 0800 	movpl.w	r8, #0
 80197f0:	f1ba 0f00 	cmp.w	sl, #0
 80197f4:	db3b      	blt.n	801986e <_dtoa_r+0x23e>
 80197f6:	9b04      	ldr	r3, [sp, #16]
 80197f8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80197fc:	4453      	add	r3, sl
 80197fe:	9304      	str	r3, [sp, #16]
 8019800:	2300      	movs	r3, #0
 8019802:	9306      	str	r3, [sp, #24]
 8019804:	9b05      	ldr	r3, [sp, #20]
 8019806:	2b09      	cmp	r3, #9
 8019808:	d869      	bhi.n	80198de <_dtoa_r+0x2ae>
 801980a:	2b05      	cmp	r3, #5
 801980c:	bfc4      	itt	gt
 801980e:	3b04      	subgt	r3, #4
 8019810:	9305      	strgt	r3, [sp, #20]
 8019812:	9b05      	ldr	r3, [sp, #20]
 8019814:	f1a3 0302 	sub.w	r3, r3, #2
 8019818:	bfcc      	ite	gt
 801981a:	2500      	movgt	r5, #0
 801981c:	2501      	movle	r5, #1
 801981e:	2b03      	cmp	r3, #3
 8019820:	d869      	bhi.n	80198f6 <_dtoa_r+0x2c6>
 8019822:	e8df f003 	tbb	[pc, r3]
 8019826:	4e2c      	.short	0x4e2c
 8019828:	5a4c      	.short	0x5a4c
 801982a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801982e:	441d      	add	r5, r3
 8019830:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8019834:	2b20      	cmp	r3, #32
 8019836:	bfc1      	itttt	gt
 8019838:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801983c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8019840:	fa09 f303 	lslgt.w	r3, r9, r3
 8019844:	fa26 f000 	lsrgt.w	r0, r6, r0
 8019848:	bfda      	itte	le
 801984a:	f1c3 0320 	rsble	r3, r3, #32
 801984e:	fa06 f003 	lslle.w	r0, r6, r3
 8019852:	4318      	orrgt	r0, r3
 8019854:	f7e6 fe76 	bl	8000544 <__aeabi_ui2d>
 8019858:	2301      	movs	r3, #1
 801985a:	4606      	mov	r6, r0
 801985c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8019860:	3d01      	subs	r5, #1
 8019862:	9310      	str	r3, [sp, #64]	; 0x40
 8019864:	e771      	b.n	801974a <_dtoa_r+0x11a>
 8019866:	2301      	movs	r3, #1
 8019868:	e7b6      	b.n	80197d8 <_dtoa_r+0x1a8>
 801986a:	900e      	str	r0, [sp, #56]	; 0x38
 801986c:	e7b5      	b.n	80197da <_dtoa_r+0x1aa>
 801986e:	f1ca 0300 	rsb	r3, sl, #0
 8019872:	9306      	str	r3, [sp, #24]
 8019874:	2300      	movs	r3, #0
 8019876:	eba8 080a 	sub.w	r8, r8, sl
 801987a:	930d      	str	r3, [sp, #52]	; 0x34
 801987c:	e7c2      	b.n	8019804 <_dtoa_r+0x1d4>
 801987e:	2300      	movs	r3, #0
 8019880:	9308      	str	r3, [sp, #32]
 8019882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019884:	2b00      	cmp	r3, #0
 8019886:	dc39      	bgt.n	80198fc <_dtoa_r+0x2cc>
 8019888:	f04f 0901 	mov.w	r9, #1
 801988c:	f8cd 9004 	str.w	r9, [sp, #4]
 8019890:	464b      	mov	r3, r9
 8019892:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8019896:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8019898:	2200      	movs	r2, #0
 801989a:	6042      	str	r2, [r0, #4]
 801989c:	2204      	movs	r2, #4
 801989e:	f102 0614 	add.w	r6, r2, #20
 80198a2:	429e      	cmp	r6, r3
 80198a4:	6841      	ldr	r1, [r0, #4]
 80198a6:	d92f      	bls.n	8019908 <_dtoa_r+0x2d8>
 80198a8:	4620      	mov	r0, r4
 80198aa:	f001 f989 	bl	801abc0 <_Balloc>
 80198ae:	9000      	str	r0, [sp, #0]
 80198b0:	2800      	cmp	r0, #0
 80198b2:	d14b      	bne.n	801994c <_dtoa_r+0x31c>
 80198b4:	4b24      	ldr	r3, [pc, #144]	; (8019948 <_dtoa_r+0x318>)
 80198b6:	4602      	mov	r2, r0
 80198b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80198bc:	e6d1      	b.n	8019662 <_dtoa_r+0x32>
 80198be:	2301      	movs	r3, #1
 80198c0:	e7de      	b.n	8019880 <_dtoa_r+0x250>
 80198c2:	2300      	movs	r3, #0
 80198c4:	9308      	str	r3, [sp, #32]
 80198c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198c8:	eb0a 0903 	add.w	r9, sl, r3
 80198cc:	f109 0301 	add.w	r3, r9, #1
 80198d0:	2b01      	cmp	r3, #1
 80198d2:	9301      	str	r3, [sp, #4]
 80198d4:	bfb8      	it	lt
 80198d6:	2301      	movlt	r3, #1
 80198d8:	e7dd      	b.n	8019896 <_dtoa_r+0x266>
 80198da:	2301      	movs	r3, #1
 80198dc:	e7f2      	b.n	80198c4 <_dtoa_r+0x294>
 80198de:	2501      	movs	r5, #1
 80198e0:	2300      	movs	r3, #0
 80198e2:	9305      	str	r3, [sp, #20]
 80198e4:	9508      	str	r5, [sp, #32]
 80198e6:	f04f 39ff 	mov.w	r9, #4294967295
 80198ea:	2200      	movs	r2, #0
 80198ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80198f0:	2312      	movs	r3, #18
 80198f2:	9209      	str	r2, [sp, #36]	; 0x24
 80198f4:	e7cf      	b.n	8019896 <_dtoa_r+0x266>
 80198f6:	2301      	movs	r3, #1
 80198f8:	9308      	str	r3, [sp, #32]
 80198fa:	e7f4      	b.n	80198e6 <_dtoa_r+0x2b6>
 80198fc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8019900:	f8cd 9004 	str.w	r9, [sp, #4]
 8019904:	464b      	mov	r3, r9
 8019906:	e7c6      	b.n	8019896 <_dtoa_r+0x266>
 8019908:	3101      	adds	r1, #1
 801990a:	6041      	str	r1, [r0, #4]
 801990c:	0052      	lsls	r2, r2, #1
 801990e:	e7c6      	b.n	801989e <_dtoa_r+0x26e>
 8019910:	636f4361 	.word	0x636f4361
 8019914:	3fd287a7 	.word	0x3fd287a7
 8019918:	8b60c8b3 	.word	0x8b60c8b3
 801991c:	3fc68a28 	.word	0x3fc68a28
 8019920:	509f79fb 	.word	0x509f79fb
 8019924:	3fd34413 	.word	0x3fd34413
 8019928:	0801d969 	.word	0x0801d969
 801992c:	0801d980 	.word	0x0801d980
 8019930:	7ff00000 	.word	0x7ff00000
 8019934:	0801d965 	.word	0x0801d965
 8019938:	0801d95c 	.word	0x0801d95c
 801993c:	0801dbe2 	.word	0x0801dbe2
 8019940:	3ff80000 	.word	0x3ff80000
 8019944:	0801daf8 	.word	0x0801daf8
 8019948:	0801d9df 	.word	0x0801d9df
 801994c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801994e:	9a00      	ldr	r2, [sp, #0]
 8019950:	601a      	str	r2, [r3, #0]
 8019952:	9b01      	ldr	r3, [sp, #4]
 8019954:	2b0e      	cmp	r3, #14
 8019956:	f200 80ad 	bhi.w	8019ab4 <_dtoa_r+0x484>
 801995a:	2d00      	cmp	r5, #0
 801995c:	f000 80aa 	beq.w	8019ab4 <_dtoa_r+0x484>
 8019960:	f1ba 0f00 	cmp.w	sl, #0
 8019964:	dd36      	ble.n	80199d4 <_dtoa_r+0x3a4>
 8019966:	4ac3      	ldr	r2, [pc, #780]	; (8019c74 <_dtoa_r+0x644>)
 8019968:	f00a 030f 	and.w	r3, sl, #15
 801996c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8019970:	ed93 7b00 	vldr	d7, [r3]
 8019974:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8019978:	ea4f 172a 	mov.w	r7, sl, asr #4
 801997c:	eeb0 8a47 	vmov.f32	s16, s14
 8019980:	eef0 8a67 	vmov.f32	s17, s15
 8019984:	d016      	beq.n	80199b4 <_dtoa_r+0x384>
 8019986:	4bbc      	ldr	r3, [pc, #752]	; (8019c78 <_dtoa_r+0x648>)
 8019988:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801998c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8019990:	f7e6 ff7c 	bl	800088c <__aeabi_ddiv>
 8019994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019998:	f007 070f 	and.w	r7, r7, #15
 801999c:	2503      	movs	r5, #3
 801999e:	4eb6      	ldr	r6, [pc, #728]	; (8019c78 <_dtoa_r+0x648>)
 80199a0:	b957      	cbnz	r7, 80199b8 <_dtoa_r+0x388>
 80199a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80199a6:	ec53 2b18 	vmov	r2, r3, d8
 80199aa:	f7e6 ff6f 	bl	800088c <__aeabi_ddiv>
 80199ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80199b2:	e029      	b.n	8019a08 <_dtoa_r+0x3d8>
 80199b4:	2502      	movs	r5, #2
 80199b6:	e7f2      	b.n	801999e <_dtoa_r+0x36e>
 80199b8:	07f9      	lsls	r1, r7, #31
 80199ba:	d508      	bpl.n	80199ce <_dtoa_r+0x39e>
 80199bc:	ec51 0b18 	vmov	r0, r1, d8
 80199c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80199c4:	f7e6 fe38 	bl	8000638 <__aeabi_dmul>
 80199c8:	ec41 0b18 	vmov	d8, r0, r1
 80199cc:	3501      	adds	r5, #1
 80199ce:	107f      	asrs	r7, r7, #1
 80199d0:	3608      	adds	r6, #8
 80199d2:	e7e5      	b.n	80199a0 <_dtoa_r+0x370>
 80199d4:	f000 80a6 	beq.w	8019b24 <_dtoa_r+0x4f4>
 80199d8:	f1ca 0600 	rsb	r6, sl, #0
 80199dc:	4ba5      	ldr	r3, [pc, #660]	; (8019c74 <_dtoa_r+0x644>)
 80199de:	4fa6      	ldr	r7, [pc, #664]	; (8019c78 <_dtoa_r+0x648>)
 80199e0:	f006 020f 	and.w	r2, r6, #15
 80199e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80199e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80199f0:	f7e6 fe22 	bl	8000638 <__aeabi_dmul>
 80199f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80199f8:	1136      	asrs	r6, r6, #4
 80199fa:	2300      	movs	r3, #0
 80199fc:	2502      	movs	r5, #2
 80199fe:	2e00      	cmp	r6, #0
 8019a00:	f040 8085 	bne.w	8019b0e <_dtoa_r+0x4de>
 8019a04:	2b00      	cmp	r3, #0
 8019a06:	d1d2      	bne.n	80199ae <_dtoa_r+0x37e>
 8019a08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	f000 808c 	beq.w	8019b28 <_dtoa_r+0x4f8>
 8019a10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8019a14:	4b99      	ldr	r3, [pc, #612]	; (8019c7c <_dtoa_r+0x64c>)
 8019a16:	2200      	movs	r2, #0
 8019a18:	4630      	mov	r0, r6
 8019a1a:	4639      	mov	r1, r7
 8019a1c:	f7e7 f87e 	bl	8000b1c <__aeabi_dcmplt>
 8019a20:	2800      	cmp	r0, #0
 8019a22:	f000 8081 	beq.w	8019b28 <_dtoa_r+0x4f8>
 8019a26:	9b01      	ldr	r3, [sp, #4]
 8019a28:	2b00      	cmp	r3, #0
 8019a2a:	d07d      	beq.n	8019b28 <_dtoa_r+0x4f8>
 8019a2c:	f1b9 0f00 	cmp.w	r9, #0
 8019a30:	dd3c      	ble.n	8019aac <_dtoa_r+0x47c>
 8019a32:	f10a 33ff 	add.w	r3, sl, #4294967295
 8019a36:	9307      	str	r3, [sp, #28]
 8019a38:	2200      	movs	r2, #0
 8019a3a:	4b91      	ldr	r3, [pc, #580]	; (8019c80 <_dtoa_r+0x650>)
 8019a3c:	4630      	mov	r0, r6
 8019a3e:	4639      	mov	r1, r7
 8019a40:	f7e6 fdfa 	bl	8000638 <__aeabi_dmul>
 8019a44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019a48:	3501      	adds	r5, #1
 8019a4a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8019a4e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8019a52:	4628      	mov	r0, r5
 8019a54:	f7e6 fd86 	bl	8000564 <__aeabi_i2d>
 8019a58:	4632      	mov	r2, r6
 8019a5a:	463b      	mov	r3, r7
 8019a5c:	f7e6 fdec 	bl	8000638 <__aeabi_dmul>
 8019a60:	4b88      	ldr	r3, [pc, #544]	; (8019c84 <_dtoa_r+0x654>)
 8019a62:	2200      	movs	r2, #0
 8019a64:	f7e6 fc32 	bl	80002cc <__adddf3>
 8019a68:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8019a6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019a70:	9303      	str	r3, [sp, #12]
 8019a72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019a74:	2b00      	cmp	r3, #0
 8019a76:	d15c      	bne.n	8019b32 <_dtoa_r+0x502>
 8019a78:	4b83      	ldr	r3, [pc, #524]	; (8019c88 <_dtoa_r+0x658>)
 8019a7a:	2200      	movs	r2, #0
 8019a7c:	4630      	mov	r0, r6
 8019a7e:	4639      	mov	r1, r7
 8019a80:	f7e6 fc22 	bl	80002c8 <__aeabi_dsub>
 8019a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019a88:	4606      	mov	r6, r0
 8019a8a:	460f      	mov	r7, r1
 8019a8c:	f7e7 f864 	bl	8000b58 <__aeabi_dcmpgt>
 8019a90:	2800      	cmp	r0, #0
 8019a92:	f040 8296 	bne.w	8019fc2 <_dtoa_r+0x992>
 8019a96:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8019a9a:	4630      	mov	r0, r6
 8019a9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019aa0:	4639      	mov	r1, r7
 8019aa2:	f7e7 f83b 	bl	8000b1c <__aeabi_dcmplt>
 8019aa6:	2800      	cmp	r0, #0
 8019aa8:	f040 8288 	bne.w	8019fbc <_dtoa_r+0x98c>
 8019aac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019ab0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8019ab4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	f2c0 8158 	blt.w	8019d6c <_dtoa_r+0x73c>
 8019abc:	f1ba 0f0e 	cmp.w	sl, #14
 8019ac0:	f300 8154 	bgt.w	8019d6c <_dtoa_r+0x73c>
 8019ac4:	4b6b      	ldr	r3, [pc, #428]	; (8019c74 <_dtoa_r+0x644>)
 8019ac6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8019aca:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ad0:	2b00      	cmp	r3, #0
 8019ad2:	f280 80e3 	bge.w	8019c9c <_dtoa_r+0x66c>
 8019ad6:	9b01      	ldr	r3, [sp, #4]
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	f300 80df 	bgt.w	8019c9c <_dtoa_r+0x66c>
 8019ade:	f040 826d 	bne.w	8019fbc <_dtoa_r+0x98c>
 8019ae2:	4b69      	ldr	r3, [pc, #420]	; (8019c88 <_dtoa_r+0x658>)
 8019ae4:	2200      	movs	r2, #0
 8019ae6:	4640      	mov	r0, r8
 8019ae8:	4649      	mov	r1, r9
 8019aea:	f7e6 fda5 	bl	8000638 <__aeabi_dmul>
 8019aee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019af2:	f7e7 f827 	bl	8000b44 <__aeabi_dcmpge>
 8019af6:	9e01      	ldr	r6, [sp, #4]
 8019af8:	4637      	mov	r7, r6
 8019afa:	2800      	cmp	r0, #0
 8019afc:	f040 8243 	bne.w	8019f86 <_dtoa_r+0x956>
 8019b00:	9d00      	ldr	r5, [sp, #0]
 8019b02:	2331      	movs	r3, #49	; 0x31
 8019b04:	f805 3b01 	strb.w	r3, [r5], #1
 8019b08:	f10a 0a01 	add.w	sl, sl, #1
 8019b0c:	e23f      	b.n	8019f8e <_dtoa_r+0x95e>
 8019b0e:	07f2      	lsls	r2, r6, #31
 8019b10:	d505      	bpl.n	8019b1e <_dtoa_r+0x4ee>
 8019b12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019b16:	f7e6 fd8f 	bl	8000638 <__aeabi_dmul>
 8019b1a:	3501      	adds	r5, #1
 8019b1c:	2301      	movs	r3, #1
 8019b1e:	1076      	asrs	r6, r6, #1
 8019b20:	3708      	adds	r7, #8
 8019b22:	e76c      	b.n	80199fe <_dtoa_r+0x3ce>
 8019b24:	2502      	movs	r5, #2
 8019b26:	e76f      	b.n	8019a08 <_dtoa_r+0x3d8>
 8019b28:	9b01      	ldr	r3, [sp, #4]
 8019b2a:	f8cd a01c 	str.w	sl, [sp, #28]
 8019b2e:	930c      	str	r3, [sp, #48]	; 0x30
 8019b30:	e78d      	b.n	8019a4e <_dtoa_r+0x41e>
 8019b32:	9900      	ldr	r1, [sp, #0]
 8019b34:	980c      	ldr	r0, [sp, #48]	; 0x30
 8019b36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019b38:	4b4e      	ldr	r3, [pc, #312]	; (8019c74 <_dtoa_r+0x644>)
 8019b3a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019b3e:	4401      	add	r1, r0
 8019b40:	9102      	str	r1, [sp, #8]
 8019b42:	9908      	ldr	r1, [sp, #32]
 8019b44:	eeb0 8a47 	vmov.f32	s16, s14
 8019b48:	eef0 8a67 	vmov.f32	s17, s15
 8019b4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019b50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8019b54:	2900      	cmp	r1, #0
 8019b56:	d045      	beq.n	8019be4 <_dtoa_r+0x5b4>
 8019b58:	494c      	ldr	r1, [pc, #304]	; (8019c8c <_dtoa_r+0x65c>)
 8019b5a:	2000      	movs	r0, #0
 8019b5c:	f7e6 fe96 	bl	800088c <__aeabi_ddiv>
 8019b60:	ec53 2b18 	vmov	r2, r3, d8
 8019b64:	f7e6 fbb0 	bl	80002c8 <__aeabi_dsub>
 8019b68:	9d00      	ldr	r5, [sp, #0]
 8019b6a:	ec41 0b18 	vmov	d8, r0, r1
 8019b6e:	4639      	mov	r1, r7
 8019b70:	4630      	mov	r0, r6
 8019b72:	f7e7 f811 	bl	8000b98 <__aeabi_d2iz>
 8019b76:	900c      	str	r0, [sp, #48]	; 0x30
 8019b78:	f7e6 fcf4 	bl	8000564 <__aeabi_i2d>
 8019b7c:	4602      	mov	r2, r0
 8019b7e:	460b      	mov	r3, r1
 8019b80:	4630      	mov	r0, r6
 8019b82:	4639      	mov	r1, r7
 8019b84:	f7e6 fba0 	bl	80002c8 <__aeabi_dsub>
 8019b88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019b8a:	3330      	adds	r3, #48	; 0x30
 8019b8c:	f805 3b01 	strb.w	r3, [r5], #1
 8019b90:	ec53 2b18 	vmov	r2, r3, d8
 8019b94:	4606      	mov	r6, r0
 8019b96:	460f      	mov	r7, r1
 8019b98:	f7e6 ffc0 	bl	8000b1c <__aeabi_dcmplt>
 8019b9c:	2800      	cmp	r0, #0
 8019b9e:	d165      	bne.n	8019c6c <_dtoa_r+0x63c>
 8019ba0:	4632      	mov	r2, r6
 8019ba2:	463b      	mov	r3, r7
 8019ba4:	4935      	ldr	r1, [pc, #212]	; (8019c7c <_dtoa_r+0x64c>)
 8019ba6:	2000      	movs	r0, #0
 8019ba8:	f7e6 fb8e 	bl	80002c8 <__aeabi_dsub>
 8019bac:	ec53 2b18 	vmov	r2, r3, d8
 8019bb0:	f7e6 ffb4 	bl	8000b1c <__aeabi_dcmplt>
 8019bb4:	2800      	cmp	r0, #0
 8019bb6:	f040 80b9 	bne.w	8019d2c <_dtoa_r+0x6fc>
 8019bba:	9b02      	ldr	r3, [sp, #8]
 8019bbc:	429d      	cmp	r5, r3
 8019bbe:	f43f af75 	beq.w	8019aac <_dtoa_r+0x47c>
 8019bc2:	4b2f      	ldr	r3, [pc, #188]	; (8019c80 <_dtoa_r+0x650>)
 8019bc4:	ec51 0b18 	vmov	r0, r1, d8
 8019bc8:	2200      	movs	r2, #0
 8019bca:	f7e6 fd35 	bl	8000638 <__aeabi_dmul>
 8019bce:	4b2c      	ldr	r3, [pc, #176]	; (8019c80 <_dtoa_r+0x650>)
 8019bd0:	ec41 0b18 	vmov	d8, r0, r1
 8019bd4:	2200      	movs	r2, #0
 8019bd6:	4630      	mov	r0, r6
 8019bd8:	4639      	mov	r1, r7
 8019bda:	f7e6 fd2d 	bl	8000638 <__aeabi_dmul>
 8019bde:	4606      	mov	r6, r0
 8019be0:	460f      	mov	r7, r1
 8019be2:	e7c4      	b.n	8019b6e <_dtoa_r+0x53e>
 8019be4:	ec51 0b17 	vmov	r0, r1, d7
 8019be8:	f7e6 fd26 	bl	8000638 <__aeabi_dmul>
 8019bec:	9b02      	ldr	r3, [sp, #8]
 8019bee:	9d00      	ldr	r5, [sp, #0]
 8019bf0:	930c      	str	r3, [sp, #48]	; 0x30
 8019bf2:	ec41 0b18 	vmov	d8, r0, r1
 8019bf6:	4639      	mov	r1, r7
 8019bf8:	4630      	mov	r0, r6
 8019bfa:	f7e6 ffcd 	bl	8000b98 <__aeabi_d2iz>
 8019bfe:	9011      	str	r0, [sp, #68]	; 0x44
 8019c00:	f7e6 fcb0 	bl	8000564 <__aeabi_i2d>
 8019c04:	4602      	mov	r2, r0
 8019c06:	460b      	mov	r3, r1
 8019c08:	4630      	mov	r0, r6
 8019c0a:	4639      	mov	r1, r7
 8019c0c:	f7e6 fb5c 	bl	80002c8 <__aeabi_dsub>
 8019c10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019c12:	3330      	adds	r3, #48	; 0x30
 8019c14:	f805 3b01 	strb.w	r3, [r5], #1
 8019c18:	9b02      	ldr	r3, [sp, #8]
 8019c1a:	429d      	cmp	r5, r3
 8019c1c:	4606      	mov	r6, r0
 8019c1e:	460f      	mov	r7, r1
 8019c20:	f04f 0200 	mov.w	r2, #0
 8019c24:	d134      	bne.n	8019c90 <_dtoa_r+0x660>
 8019c26:	4b19      	ldr	r3, [pc, #100]	; (8019c8c <_dtoa_r+0x65c>)
 8019c28:	ec51 0b18 	vmov	r0, r1, d8
 8019c2c:	f7e6 fb4e 	bl	80002cc <__adddf3>
 8019c30:	4602      	mov	r2, r0
 8019c32:	460b      	mov	r3, r1
 8019c34:	4630      	mov	r0, r6
 8019c36:	4639      	mov	r1, r7
 8019c38:	f7e6 ff8e 	bl	8000b58 <__aeabi_dcmpgt>
 8019c3c:	2800      	cmp	r0, #0
 8019c3e:	d175      	bne.n	8019d2c <_dtoa_r+0x6fc>
 8019c40:	ec53 2b18 	vmov	r2, r3, d8
 8019c44:	4911      	ldr	r1, [pc, #68]	; (8019c8c <_dtoa_r+0x65c>)
 8019c46:	2000      	movs	r0, #0
 8019c48:	f7e6 fb3e 	bl	80002c8 <__aeabi_dsub>
 8019c4c:	4602      	mov	r2, r0
 8019c4e:	460b      	mov	r3, r1
 8019c50:	4630      	mov	r0, r6
 8019c52:	4639      	mov	r1, r7
 8019c54:	f7e6 ff62 	bl	8000b1c <__aeabi_dcmplt>
 8019c58:	2800      	cmp	r0, #0
 8019c5a:	f43f af27 	beq.w	8019aac <_dtoa_r+0x47c>
 8019c5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019c60:	1e6b      	subs	r3, r5, #1
 8019c62:	930c      	str	r3, [sp, #48]	; 0x30
 8019c64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8019c68:	2b30      	cmp	r3, #48	; 0x30
 8019c6a:	d0f8      	beq.n	8019c5e <_dtoa_r+0x62e>
 8019c6c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8019c70:	e04a      	b.n	8019d08 <_dtoa_r+0x6d8>
 8019c72:	bf00      	nop
 8019c74:	0801daf8 	.word	0x0801daf8
 8019c78:	0801dad0 	.word	0x0801dad0
 8019c7c:	3ff00000 	.word	0x3ff00000
 8019c80:	40240000 	.word	0x40240000
 8019c84:	401c0000 	.word	0x401c0000
 8019c88:	40140000 	.word	0x40140000
 8019c8c:	3fe00000 	.word	0x3fe00000
 8019c90:	4baf      	ldr	r3, [pc, #700]	; (8019f50 <_dtoa_r+0x920>)
 8019c92:	f7e6 fcd1 	bl	8000638 <__aeabi_dmul>
 8019c96:	4606      	mov	r6, r0
 8019c98:	460f      	mov	r7, r1
 8019c9a:	e7ac      	b.n	8019bf6 <_dtoa_r+0x5c6>
 8019c9c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8019ca0:	9d00      	ldr	r5, [sp, #0]
 8019ca2:	4642      	mov	r2, r8
 8019ca4:	464b      	mov	r3, r9
 8019ca6:	4630      	mov	r0, r6
 8019ca8:	4639      	mov	r1, r7
 8019caa:	f7e6 fdef 	bl	800088c <__aeabi_ddiv>
 8019cae:	f7e6 ff73 	bl	8000b98 <__aeabi_d2iz>
 8019cb2:	9002      	str	r0, [sp, #8]
 8019cb4:	f7e6 fc56 	bl	8000564 <__aeabi_i2d>
 8019cb8:	4642      	mov	r2, r8
 8019cba:	464b      	mov	r3, r9
 8019cbc:	f7e6 fcbc 	bl	8000638 <__aeabi_dmul>
 8019cc0:	4602      	mov	r2, r0
 8019cc2:	460b      	mov	r3, r1
 8019cc4:	4630      	mov	r0, r6
 8019cc6:	4639      	mov	r1, r7
 8019cc8:	f7e6 fafe 	bl	80002c8 <__aeabi_dsub>
 8019ccc:	9e02      	ldr	r6, [sp, #8]
 8019cce:	9f01      	ldr	r7, [sp, #4]
 8019cd0:	3630      	adds	r6, #48	; 0x30
 8019cd2:	f805 6b01 	strb.w	r6, [r5], #1
 8019cd6:	9e00      	ldr	r6, [sp, #0]
 8019cd8:	1bae      	subs	r6, r5, r6
 8019cda:	42b7      	cmp	r7, r6
 8019cdc:	4602      	mov	r2, r0
 8019cde:	460b      	mov	r3, r1
 8019ce0:	d137      	bne.n	8019d52 <_dtoa_r+0x722>
 8019ce2:	f7e6 faf3 	bl	80002cc <__adddf3>
 8019ce6:	4642      	mov	r2, r8
 8019ce8:	464b      	mov	r3, r9
 8019cea:	4606      	mov	r6, r0
 8019cec:	460f      	mov	r7, r1
 8019cee:	f7e6 ff33 	bl	8000b58 <__aeabi_dcmpgt>
 8019cf2:	b9c8      	cbnz	r0, 8019d28 <_dtoa_r+0x6f8>
 8019cf4:	4642      	mov	r2, r8
 8019cf6:	464b      	mov	r3, r9
 8019cf8:	4630      	mov	r0, r6
 8019cfa:	4639      	mov	r1, r7
 8019cfc:	f7e6 ff04 	bl	8000b08 <__aeabi_dcmpeq>
 8019d00:	b110      	cbz	r0, 8019d08 <_dtoa_r+0x6d8>
 8019d02:	9b02      	ldr	r3, [sp, #8]
 8019d04:	07d9      	lsls	r1, r3, #31
 8019d06:	d40f      	bmi.n	8019d28 <_dtoa_r+0x6f8>
 8019d08:	4620      	mov	r0, r4
 8019d0a:	4659      	mov	r1, fp
 8019d0c:	f000 ff98 	bl	801ac40 <_Bfree>
 8019d10:	2300      	movs	r3, #0
 8019d12:	702b      	strb	r3, [r5, #0]
 8019d14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019d16:	f10a 0001 	add.w	r0, sl, #1
 8019d1a:	6018      	str	r0, [r3, #0]
 8019d1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	f43f acd8 	beq.w	80196d4 <_dtoa_r+0xa4>
 8019d24:	601d      	str	r5, [r3, #0]
 8019d26:	e4d5      	b.n	80196d4 <_dtoa_r+0xa4>
 8019d28:	f8cd a01c 	str.w	sl, [sp, #28]
 8019d2c:	462b      	mov	r3, r5
 8019d2e:	461d      	mov	r5, r3
 8019d30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019d34:	2a39      	cmp	r2, #57	; 0x39
 8019d36:	d108      	bne.n	8019d4a <_dtoa_r+0x71a>
 8019d38:	9a00      	ldr	r2, [sp, #0]
 8019d3a:	429a      	cmp	r2, r3
 8019d3c:	d1f7      	bne.n	8019d2e <_dtoa_r+0x6fe>
 8019d3e:	9a07      	ldr	r2, [sp, #28]
 8019d40:	9900      	ldr	r1, [sp, #0]
 8019d42:	3201      	adds	r2, #1
 8019d44:	9207      	str	r2, [sp, #28]
 8019d46:	2230      	movs	r2, #48	; 0x30
 8019d48:	700a      	strb	r2, [r1, #0]
 8019d4a:	781a      	ldrb	r2, [r3, #0]
 8019d4c:	3201      	adds	r2, #1
 8019d4e:	701a      	strb	r2, [r3, #0]
 8019d50:	e78c      	b.n	8019c6c <_dtoa_r+0x63c>
 8019d52:	4b7f      	ldr	r3, [pc, #508]	; (8019f50 <_dtoa_r+0x920>)
 8019d54:	2200      	movs	r2, #0
 8019d56:	f7e6 fc6f 	bl	8000638 <__aeabi_dmul>
 8019d5a:	2200      	movs	r2, #0
 8019d5c:	2300      	movs	r3, #0
 8019d5e:	4606      	mov	r6, r0
 8019d60:	460f      	mov	r7, r1
 8019d62:	f7e6 fed1 	bl	8000b08 <__aeabi_dcmpeq>
 8019d66:	2800      	cmp	r0, #0
 8019d68:	d09b      	beq.n	8019ca2 <_dtoa_r+0x672>
 8019d6a:	e7cd      	b.n	8019d08 <_dtoa_r+0x6d8>
 8019d6c:	9a08      	ldr	r2, [sp, #32]
 8019d6e:	2a00      	cmp	r2, #0
 8019d70:	f000 80c4 	beq.w	8019efc <_dtoa_r+0x8cc>
 8019d74:	9a05      	ldr	r2, [sp, #20]
 8019d76:	2a01      	cmp	r2, #1
 8019d78:	f300 80a8 	bgt.w	8019ecc <_dtoa_r+0x89c>
 8019d7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019d7e:	2a00      	cmp	r2, #0
 8019d80:	f000 80a0 	beq.w	8019ec4 <_dtoa_r+0x894>
 8019d84:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8019d88:	9e06      	ldr	r6, [sp, #24]
 8019d8a:	4645      	mov	r5, r8
 8019d8c:	9a04      	ldr	r2, [sp, #16]
 8019d8e:	2101      	movs	r1, #1
 8019d90:	441a      	add	r2, r3
 8019d92:	4620      	mov	r0, r4
 8019d94:	4498      	add	r8, r3
 8019d96:	9204      	str	r2, [sp, #16]
 8019d98:	f001 f858 	bl	801ae4c <__i2b>
 8019d9c:	4607      	mov	r7, r0
 8019d9e:	2d00      	cmp	r5, #0
 8019da0:	dd0b      	ble.n	8019dba <_dtoa_r+0x78a>
 8019da2:	9b04      	ldr	r3, [sp, #16]
 8019da4:	2b00      	cmp	r3, #0
 8019da6:	dd08      	ble.n	8019dba <_dtoa_r+0x78a>
 8019da8:	42ab      	cmp	r3, r5
 8019daa:	9a04      	ldr	r2, [sp, #16]
 8019dac:	bfa8      	it	ge
 8019dae:	462b      	movge	r3, r5
 8019db0:	eba8 0803 	sub.w	r8, r8, r3
 8019db4:	1aed      	subs	r5, r5, r3
 8019db6:	1ad3      	subs	r3, r2, r3
 8019db8:	9304      	str	r3, [sp, #16]
 8019dba:	9b06      	ldr	r3, [sp, #24]
 8019dbc:	b1fb      	cbz	r3, 8019dfe <_dtoa_r+0x7ce>
 8019dbe:	9b08      	ldr	r3, [sp, #32]
 8019dc0:	2b00      	cmp	r3, #0
 8019dc2:	f000 809f 	beq.w	8019f04 <_dtoa_r+0x8d4>
 8019dc6:	2e00      	cmp	r6, #0
 8019dc8:	dd11      	ble.n	8019dee <_dtoa_r+0x7be>
 8019dca:	4639      	mov	r1, r7
 8019dcc:	4632      	mov	r2, r6
 8019dce:	4620      	mov	r0, r4
 8019dd0:	f001 f8f8 	bl	801afc4 <__pow5mult>
 8019dd4:	465a      	mov	r2, fp
 8019dd6:	4601      	mov	r1, r0
 8019dd8:	4607      	mov	r7, r0
 8019dda:	4620      	mov	r0, r4
 8019ddc:	f001 f84c 	bl	801ae78 <__multiply>
 8019de0:	4659      	mov	r1, fp
 8019de2:	9007      	str	r0, [sp, #28]
 8019de4:	4620      	mov	r0, r4
 8019de6:	f000 ff2b 	bl	801ac40 <_Bfree>
 8019dea:	9b07      	ldr	r3, [sp, #28]
 8019dec:	469b      	mov	fp, r3
 8019dee:	9b06      	ldr	r3, [sp, #24]
 8019df0:	1b9a      	subs	r2, r3, r6
 8019df2:	d004      	beq.n	8019dfe <_dtoa_r+0x7ce>
 8019df4:	4659      	mov	r1, fp
 8019df6:	4620      	mov	r0, r4
 8019df8:	f001 f8e4 	bl	801afc4 <__pow5mult>
 8019dfc:	4683      	mov	fp, r0
 8019dfe:	2101      	movs	r1, #1
 8019e00:	4620      	mov	r0, r4
 8019e02:	f001 f823 	bl	801ae4c <__i2b>
 8019e06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	4606      	mov	r6, r0
 8019e0c:	dd7c      	ble.n	8019f08 <_dtoa_r+0x8d8>
 8019e0e:	461a      	mov	r2, r3
 8019e10:	4601      	mov	r1, r0
 8019e12:	4620      	mov	r0, r4
 8019e14:	f001 f8d6 	bl	801afc4 <__pow5mult>
 8019e18:	9b05      	ldr	r3, [sp, #20]
 8019e1a:	2b01      	cmp	r3, #1
 8019e1c:	4606      	mov	r6, r0
 8019e1e:	dd76      	ble.n	8019f0e <_dtoa_r+0x8de>
 8019e20:	2300      	movs	r3, #0
 8019e22:	9306      	str	r3, [sp, #24]
 8019e24:	6933      	ldr	r3, [r6, #16]
 8019e26:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8019e2a:	6918      	ldr	r0, [r3, #16]
 8019e2c:	f000 ffbe 	bl	801adac <__hi0bits>
 8019e30:	f1c0 0020 	rsb	r0, r0, #32
 8019e34:	9b04      	ldr	r3, [sp, #16]
 8019e36:	4418      	add	r0, r3
 8019e38:	f010 001f 	ands.w	r0, r0, #31
 8019e3c:	f000 8086 	beq.w	8019f4c <_dtoa_r+0x91c>
 8019e40:	f1c0 0320 	rsb	r3, r0, #32
 8019e44:	2b04      	cmp	r3, #4
 8019e46:	dd7f      	ble.n	8019f48 <_dtoa_r+0x918>
 8019e48:	f1c0 001c 	rsb	r0, r0, #28
 8019e4c:	9b04      	ldr	r3, [sp, #16]
 8019e4e:	4403      	add	r3, r0
 8019e50:	4480      	add	r8, r0
 8019e52:	4405      	add	r5, r0
 8019e54:	9304      	str	r3, [sp, #16]
 8019e56:	f1b8 0f00 	cmp.w	r8, #0
 8019e5a:	dd05      	ble.n	8019e68 <_dtoa_r+0x838>
 8019e5c:	4659      	mov	r1, fp
 8019e5e:	4642      	mov	r2, r8
 8019e60:	4620      	mov	r0, r4
 8019e62:	f001 f909 	bl	801b078 <__lshift>
 8019e66:	4683      	mov	fp, r0
 8019e68:	9b04      	ldr	r3, [sp, #16]
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	dd05      	ble.n	8019e7a <_dtoa_r+0x84a>
 8019e6e:	4631      	mov	r1, r6
 8019e70:	461a      	mov	r2, r3
 8019e72:	4620      	mov	r0, r4
 8019e74:	f001 f900 	bl	801b078 <__lshift>
 8019e78:	4606      	mov	r6, r0
 8019e7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019e7c:	2b00      	cmp	r3, #0
 8019e7e:	d069      	beq.n	8019f54 <_dtoa_r+0x924>
 8019e80:	4631      	mov	r1, r6
 8019e82:	4658      	mov	r0, fp
 8019e84:	f001 f964 	bl	801b150 <__mcmp>
 8019e88:	2800      	cmp	r0, #0
 8019e8a:	da63      	bge.n	8019f54 <_dtoa_r+0x924>
 8019e8c:	2300      	movs	r3, #0
 8019e8e:	4659      	mov	r1, fp
 8019e90:	220a      	movs	r2, #10
 8019e92:	4620      	mov	r0, r4
 8019e94:	f000 fef6 	bl	801ac84 <__multadd>
 8019e98:	9b08      	ldr	r3, [sp, #32]
 8019e9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019e9e:	4683      	mov	fp, r0
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	f000 818f 	beq.w	801a1c4 <_dtoa_r+0xb94>
 8019ea6:	4639      	mov	r1, r7
 8019ea8:	2300      	movs	r3, #0
 8019eaa:	220a      	movs	r2, #10
 8019eac:	4620      	mov	r0, r4
 8019eae:	f000 fee9 	bl	801ac84 <__multadd>
 8019eb2:	f1b9 0f00 	cmp.w	r9, #0
 8019eb6:	4607      	mov	r7, r0
 8019eb8:	f300 808e 	bgt.w	8019fd8 <_dtoa_r+0x9a8>
 8019ebc:	9b05      	ldr	r3, [sp, #20]
 8019ebe:	2b02      	cmp	r3, #2
 8019ec0:	dc50      	bgt.n	8019f64 <_dtoa_r+0x934>
 8019ec2:	e089      	b.n	8019fd8 <_dtoa_r+0x9a8>
 8019ec4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019ec6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8019eca:	e75d      	b.n	8019d88 <_dtoa_r+0x758>
 8019ecc:	9b01      	ldr	r3, [sp, #4]
 8019ece:	1e5e      	subs	r6, r3, #1
 8019ed0:	9b06      	ldr	r3, [sp, #24]
 8019ed2:	42b3      	cmp	r3, r6
 8019ed4:	bfbf      	itttt	lt
 8019ed6:	9b06      	ldrlt	r3, [sp, #24]
 8019ed8:	9606      	strlt	r6, [sp, #24]
 8019eda:	1af2      	sublt	r2, r6, r3
 8019edc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8019ede:	bfb6      	itet	lt
 8019ee0:	189b      	addlt	r3, r3, r2
 8019ee2:	1b9e      	subge	r6, r3, r6
 8019ee4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8019ee6:	9b01      	ldr	r3, [sp, #4]
 8019ee8:	bfb8      	it	lt
 8019eea:	2600      	movlt	r6, #0
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	bfb5      	itete	lt
 8019ef0:	eba8 0503 	sublt.w	r5, r8, r3
 8019ef4:	9b01      	ldrge	r3, [sp, #4]
 8019ef6:	2300      	movlt	r3, #0
 8019ef8:	4645      	movge	r5, r8
 8019efa:	e747      	b.n	8019d8c <_dtoa_r+0x75c>
 8019efc:	9e06      	ldr	r6, [sp, #24]
 8019efe:	9f08      	ldr	r7, [sp, #32]
 8019f00:	4645      	mov	r5, r8
 8019f02:	e74c      	b.n	8019d9e <_dtoa_r+0x76e>
 8019f04:	9a06      	ldr	r2, [sp, #24]
 8019f06:	e775      	b.n	8019df4 <_dtoa_r+0x7c4>
 8019f08:	9b05      	ldr	r3, [sp, #20]
 8019f0a:	2b01      	cmp	r3, #1
 8019f0c:	dc18      	bgt.n	8019f40 <_dtoa_r+0x910>
 8019f0e:	9b02      	ldr	r3, [sp, #8]
 8019f10:	b9b3      	cbnz	r3, 8019f40 <_dtoa_r+0x910>
 8019f12:	9b03      	ldr	r3, [sp, #12]
 8019f14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019f18:	b9a3      	cbnz	r3, 8019f44 <_dtoa_r+0x914>
 8019f1a:	9b03      	ldr	r3, [sp, #12]
 8019f1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019f20:	0d1b      	lsrs	r3, r3, #20
 8019f22:	051b      	lsls	r3, r3, #20
 8019f24:	b12b      	cbz	r3, 8019f32 <_dtoa_r+0x902>
 8019f26:	9b04      	ldr	r3, [sp, #16]
 8019f28:	3301      	adds	r3, #1
 8019f2a:	9304      	str	r3, [sp, #16]
 8019f2c:	f108 0801 	add.w	r8, r8, #1
 8019f30:	2301      	movs	r3, #1
 8019f32:	9306      	str	r3, [sp, #24]
 8019f34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019f36:	2b00      	cmp	r3, #0
 8019f38:	f47f af74 	bne.w	8019e24 <_dtoa_r+0x7f4>
 8019f3c:	2001      	movs	r0, #1
 8019f3e:	e779      	b.n	8019e34 <_dtoa_r+0x804>
 8019f40:	2300      	movs	r3, #0
 8019f42:	e7f6      	b.n	8019f32 <_dtoa_r+0x902>
 8019f44:	9b02      	ldr	r3, [sp, #8]
 8019f46:	e7f4      	b.n	8019f32 <_dtoa_r+0x902>
 8019f48:	d085      	beq.n	8019e56 <_dtoa_r+0x826>
 8019f4a:	4618      	mov	r0, r3
 8019f4c:	301c      	adds	r0, #28
 8019f4e:	e77d      	b.n	8019e4c <_dtoa_r+0x81c>
 8019f50:	40240000 	.word	0x40240000
 8019f54:	9b01      	ldr	r3, [sp, #4]
 8019f56:	2b00      	cmp	r3, #0
 8019f58:	dc38      	bgt.n	8019fcc <_dtoa_r+0x99c>
 8019f5a:	9b05      	ldr	r3, [sp, #20]
 8019f5c:	2b02      	cmp	r3, #2
 8019f5e:	dd35      	ble.n	8019fcc <_dtoa_r+0x99c>
 8019f60:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8019f64:	f1b9 0f00 	cmp.w	r9, #0
 8019f68:	d10d      	bne.n	8019f86 <_dtoa_r+0x956>
 8019f6a:	4631      	mov	r1, r6
 8019f6c:	464b      	mov	r3, r9
 8019f6e:	2205      	movs	r2, #5
 8019f70:	4620      	mov	r0, r4
 8019f72:	f000 fe87 	bl	801ac84 <__multadd>
 8019f76:	4601      	mov	r1, r0
 8019f78:	4606      	mov	r6, r0
 8019f7a:	4658      	mov	r0, fp
 8019f7c:	f001 f8e8 	bl	801b150 <__mcmp>
 8019f80:	2800      	cmp	r0, #0
 8019f82:	f73f adbd 	bgt.w	8019b00 <_dtoa_r+0x4d0>
 8019f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f88:	9d00      	ldr	r5, [sp, #0]
 8019f8a:	ea6f 0a03 	mvn.w	sl, r3
 8019f8e:	f04f 0800 	mov.w	r8, #0
 8019f92:	4631      	mov	r1, r6
 8019f94:	4620      	mov	r0, r4
 8019f96:	f000 fe53 	bl	801ac40 <_Bfree>
 8019f9a:	2f00      	cmp	r7, #0
 8019f9c:	f43f aeb4 	beq.w	8019d08 <_dtoa_r+0x6d8>
 8019fa0:	f1b8 0f00 	cmp.w	r8, #0
 8019fa4:	d005      	beq.n	8019fb2 <_dtoa_r+0x982>
 8019fa6:	45b8      	cmp	r8, r7
 8019fa8:	d003      	beq.n	8019fb2 <_dtoa_r+0x982>
 8019faa:	4641      	mov	r1, r8
 8019fac:	4620      	mov	r0, r4
 8019fae:	f000 fe47 	bl	801ac40 <_Bfree>
 8019fb2:	4639      	mov	r1, r7
 8019fb4:	4620      	mov	r0, r4
 8019fb6:	f000 fe43 	bl	801ac40 <_Bfree>
 8019fba:	e6a5      	b.n	8019d08 <_dtoa_r+0x6d8>
 8019fbc:	2600      	movs	r6, #0
 8019fbe:	4637      	mov	r7, r6
 8019fc0:	e7e1      	b.n	8019f86 <_dtoa_r+0x956>
 8019fc2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8019fc4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8019fc8:	4637      	mov	r7, r6
 8019fca:	e599      	b.n	8019b00 <_dtoa_r+0x4d0>
 8019fcc:	9b08      	ldr	r3, [sp, #32]
 8019fce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8019fd2:	2b00      	cmp	r3, #0
 8019fd4:	f000 80fd 	beq.w	801a1d2 <_dtoa_r+0xba2>
 8019fd8:	2d00      	cmp	r5, #0
 8019fda:	dd05      	ble.n	8019fe8 <_dtoa_r+0x9b8>
 8019fdc:	4639      	mov	r1, r7
 8019fde:	462a      	mov	r2, r5
 8019fe0:	4620      	mov	r0, r4
 8019fe2:	f001 f849 	bl	801b078 <__lshift>
 8019fe6:	4607      	mov	r7, r0
 8019fe8:	9b06      	ldr	r3, [sp, #24]
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	d05c      	beq.n	801a0a8 <_dtoa_r+0xa78>
 8019fee:	6879      	ldr	r1, [r7, #4]
 8019ff0:	4620      	mov	r0, r4
 8019ff2:	f000 fde5 	bl	801abc0 <_Balloc>
 8019ff6:	4605      	mov	r5, r0
 8019ff8:	b928      	cbnz	r0, 801a006 <_dtoa_r+0x9d6>
 8019ffa:	4b80      	ldr	r3, [pc, #512]	; (801a1fc <_dtoa_r+0xbcc>)
 8019ffc:	4602      	mov	r2, r0
 8019ffe:	f240 21ea 	movw	r1, #746	; 0x2ea
 801a002:	f7ff bb2e 	b.w	8019662 <_dtoa_r+0x32>
 801a006:	693a      	ldr	r2, [r7, #16]
 801a008:	3202      	adds	r2, #2
 801a00a:	0092      	lsls	r2, r2, #2
 801a00c:	f107 010c 	add.w	r1, r7, #12
 801a010:	300c      	adds	r0, #12
 801a012:	f7fd f8bb 	bl	801718c <memcpy>
 801a016:	2201      	movs	r2, #1
 801a018:	4629      	mov	r1, r5
 801a01a:	4620      	mov	r0, r4
 801a01c:	f001 f82c 	bl	801b078 <__lshift>
 801a020:	9b00      	ldr	r3, [sp, #0]
 801a022:	3301      	adds	r3, #1
 801a024:	9301      	str	r3, [sp, #4]
 801a026:	9b00      	ldr	r3, [sp, #0]
 801a028:	444b      	add	r3, r9
 801a02a:	9307      	str	r3, [sp, #28]
 801a02c:	9b02      	ldr	r3, [sp, #8]
 801a02e:	f003 0301 	and.w	r3, r3, #1
 801a032:	46b8      	mov	r8, r7
 801a034:	9306      	str	r3, [sp, #24]
 801a036:	4607      	mov	r7, r0
 801a038:	9b01      	ldr	r3, [sp, #4]
 801a03a:	4631      	mov	r1, r6
 801a03c:	3b01      	subs	r3, #1
 801a03e:	4658      	mov	r0, fp
 801a040:	9302      	str	r3, [sp, #8]
 801a042:	f7ff fa69 	bl	8019518 <quorem>
 801a046:	4603      	mov	r3, r0
 801a048:	3330      	adds	r3, #48	; 0x30
 801a04a:	9004      	str	r0, [sp, #16]
 801a04c:	4641      	mov	r1, r8
 801a04e:	4658      	mov	r0, fp
 801a050:	9308      	str	r3, [sp, #32]
 801a052:	f001 f87d 	bl	801b150 <__mcmp>
 801a056:	463a      	mov	r2, r7
 801a058:	4681      	mov	r9, r0
 801a05a:	4631      	mov	r1, r6
 801a05c:	4620      	mov	r0, r4
 801a05e:	f001 f893 	bl	801b188 <__mdiff>
 801a062:	68c2      	ldr	r2, [r0, #12]
 801a064:	9b08      	ldr	r3, [sp, #32]
 801a066:	4605      	mov	r5, r0
 801a068:	bb02      	cbnz	r2, 801a0ac <_dtoa_r+0xa7c>
 801a06a:	4601      	mov	r1, r0
 801a06c:	4658      	mov	r0, fp
 801a06e:	f001 f86f 	bl	801b150 <__mcmp>
 801a072:	9b08      	ldr	r3, [sp, #32]
 801a074:	4602      	mov	r2, r0
 801a076:	4629      	mov	r1, r5
 801a078:	4620      	mov	r0, r4
 801a07a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801a07e:	f000 fddf 	bl	801ac40 <_Bfree>
 801a082:	9b05      	ldr	r3, [sp, #20]
 801a084:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a086:	9d01      	ldr	r5, [sp, #4]
 801a088:	ea43 0102 	orr.w	r1, r3, r2
 801a08c:	9b06      	ldr	r3, [sp, #24]
 801a08e:	430b      	orrs	r3, r1
 801a090:	9b08      	ldr	r3, [sp, #32]
 801a092:	d10d      	bne.n	801a0b0 <_dtoa_r+0xa80>
 801a094:	2b39      	cmp	r3, #57	; 0x39
 801a096:	d029      	beq.n	801a0ec <_dtoa_r+0xabc>
 801a098:	f1b9 0f00 	cmp.w	r9, #0
 801a09c:	dd01      	ble.n	801a0a2 <_dtoa_r+0xa72>
 801a09e:	9b04      	ldr	r3, [sp, #16]
 801a0a0:	3331      	adds	r3, #49	; 0x31
 801a0a2:	9a02      	ldr	r2, [sp, #8]
 801a0a4:	7013      	strb	r3, [r2, #0]
 801a0a6:	e774      	b.n	8019f92 <_dtoa_r+0x962>
 801a0a8:	4638      	mov	r0, r7
 801a0aa:	e7b9      	b.n	801a020 <_dtoa_r+0x9f0>
 801a0ac:	2201      	movs	r2, #1
 801a0ae:	e7e2      	b.n	801a076 <_dtoa_r+0xa46>
 801a0b0:	f1b9 0f00 	cmp.w	r9, #0
 801a0b4:	db06      	blt.n	801a0c4 <_dtoa_r+0xa94>
 801a0b6:	9905      	ldr	r1, [sp, #20]
 801a0b8:	ea41 0909 	orr.w	r9, r1, r9
 801a0bc:	9906      	ldr	r1, [sp, #24]
 801a0be:	ea59 0101 	orrs.w	r1, r9, r1
 801a0c2:	d120      	bne.n	801a106 <_dtoa_r+0xad6>
 801a0c4:	2a00      	cmp	r2, #0
 801a0c6:	ddec      	ble.n	801a0a2 <_dtoa_r+0xa72>
 801a0c8:	4659      	mov	r1, fp
 801a0ca:	2201      	movs	r2, #1
 801a0cc:	4620      	mov	r0, r4
 801a0ce:	9301      	str	r3, [sp, #4]
 801a0d0:	f000 ffd2 	bl	801b078 <__lshift>
 801a0d4:	4631      	mov	r1, r6
 801a0d6:	4683      	mov	fp, r0
 801a0d8:	f001 f83a 	bl	801b150 <__mcmp>
 801a0dc:	2800      	cmp	r0, #0
 801a0de:	9b01      	ldr	r3, [sp, #4]
 801a0e0:	dc02      	bgt.n	801a0e8 <_dtoa_r+0xab8>
 801a0e2:	d1de      	bne.n	801a0a2 <_dtoa_r+0xa72>
 801a0e4:	07da      	lsls	r2, r3, #31
 801a0e6:	d5dc      	bpl.n	801a0a2 <_dtoa_r+0xa72>
 801a0e8:	2b39      	cmp	r3, #57	; 0x39
 801a0ea:	d1d8      	bne.n	801a09e <_dtoa_r+0xa6e>
 801a0ec:	9a02      	ldr	r2, [sp, #8]
 801a0ee:	2339      	movs	r3, #57	; 0x39
 801a0f0:	7013      	strb	r3, [r2, #0]
 801a0f2:	462b      	mov	r3, r5
 801a0f4:	461d      	mov	r5, r3
 801a0f6:	3b01      	subs	r3, #1
 801a0f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801a0fc:	2a39      	cmp	r2, #57	; 0x39
 801a0fe:	d050      	beq.n	801a1a2 <_dtoa_r+0xb72>
 801a100:	3201      	adds	r2, #1
 801a102:	701a      	strb	r2, [r3, #0]
 801a104:	e745      	b.n	8019f92 <_dtoa_r+0x962>
 801a106:	2a00      	cmp	r2, #0
 801a108:	dd03      	ble.n	801a112 <_dtoa_r+0xae2>
 801a10a:	2b39      	cmp	r3, #57	; 0x39
 801a10c:	d0ee      	beq.n	801a0ec <_dtoa_r+0xabc>
 801a10e:	3301      	adds	r3, #1
 801a110:	e7c7      	b.n	801a0a2 <_dtoa_r+0xa72>
 801a112:	9a01      	ldr	r2, [sp, #4]
 801a114:	9907      	ldr	r1, [sp, #28]
 801a116:	f802 3c01 	strb.w	r3, [r2, #-1]
 801a11a:	428a      	cmp	r2, r1
 801a11c:	d02a      	beq.n	801a174 <_dtoa_r+0xb44>
 801a11e:	4659      	mov	r1, fp
 801a120:	2300      	movs	r3, #0
 801a122:	220a      	movs	r2, #10
 801a124:	4620      	mov	r0, r4
 801a126:	f000 fdad 	bl	801ac84 <__multadd>
 801a12a:	45b8      	cmp	r8, r7
 801a12c:	4683      	mov	fp, r0
 801a12e:	f04f 0300 	mov.w	r3, #0
 801a132:	f04f 020a 	mov.w	r2, #10
 801a136:	4641      	mov	r1, r8
 801a138:	4620      	mov	r0, r4
 801a13a:	d107      	bne.n	801a14c <_dtoa_r+0xb1c>
 801a13c:	f000 fda2 	bl	801ac84 <__multadd>
 801a140:	4680      	mov	r8, r0
 801a142:	4607      	mov	r7, r0
 801a144:	9b01      	ldr	r3, [sp, #4]
 801a146:	3301      	adds	r3, #1
 801a148:	9301      	str	r3, [sp, #4]
 801a14a:	e775      	b.n	801a038 <_dtoa_r+0xa08>
 801a14c:	f000 fd9a 	bl	801ac84 <__multadd>
 801a150:	4639      	mov	r1, r7
 801a152:	4680      	mov	r8, r0
 801a154:	2300      	movs	r3, #0
 801a156:	220a      	movs	r2, #10
 801a158:	4620      	mov	r0, r4
 801a15a:	f000 fd93 	bl	801ac84 <__multadd>
 801a15e:	4607      	mov	r7, r0
 801a160:	e7f0      	b.n	801a144 <_dtoa_r+0xb14>
 801a162:	f1b9 0f00 	cmp.w	r9, #0
 801a166:	9a00      	ldr	r2, [sp, #0]
 801a168:	bfcc      	ite	gt
 801a16a:	464d      	movgt	r5, r9
 801a16c:	2501      	movle	r5, #1
 801a16e:	4415      	add	r5, r2
 801a170:	f04f 0800 	mov.w	r8, #0
 801a174:	4659      	mov	r1, fp
 801a176:	2201      	movs	r2, #1
 801a178:	4620      	mov	r0, r4
 801a17a:	9301      	str	r3, [sp, #4]
 801a17c:	f000 ff7c 	bl	801b078 <__lshift>
 801a180:	4631      	mov	r1, r6
 801a182:	4683      	mov	fp, r0
 801a184:	f000 ffe4 	bl	801b150 <__mcmp>
 801a188:	2800      	cmp	r0, #0
 801a18a:	dcb2      	bgt.n	801a0f2 <_dtoa_r+0xac2>
 801a18c:	d102      	bne.n	801a194 <_dtoa_r+0xb64>
 801a18e:	9b01      	ldr	r3, [sp, #4]
 801a190:	07db      	lsls	r3, r3, #31
 801a192:	d4ae      	bmi.n	801a0f2 <_dtoa_r+0xac2>
 801a194:	462b      	mov	r3, r5
 801a196:	461d      	mov	r5, r3
 801a198:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a19c:	2a30      	cmp	r2, #48	; 0x30
 801a19e:	d0fa      	beq.n	801a196 <_dtoa_r+0xb66>
 801a1a0:	e6f7      	b.n	8019f92 <_dtoa_r+0x962>
 801a1a2:	9a00      	ldr	r2, [sp, #0]
 801a1a4:	429a      	cmp	r2, r3
 801a1a6:	d1a5      	bne.n	801a0f4 <_dtoa_r+0xac4>
 801a1a8:	f10a 0a01 	add.w	sl, sl, #1
 801a1ac:	2331      	movs	r3, #49	; 0x31
 801a1ae:	e779      	b.n	801a0a4 <_dtoa_r+0xa74>
 801a1b0:	4b13      	ldr	r3, [pc, #76]	; (801a200 <_dtoa_r+0xbd0>)
 801a1b2:	f7ff baaf 	b.w	8019714 <_dtoa_r+0xe4>
 801a1b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	f47f aa86 	bne.w	80196ca <_dtoa_r+0x9a>
 801a1be:	4b11      	ldr	r3, [pc, #68]	; (801a204 <_dtoa_r+0xbd4>)
 801a1c0:	f7ff baa8 	b.w	8019714 <_dtoa_r+0xe4>
 801a1c4:	f1b9 0f00 	cmp.w	r9, #0
 801a1c8:	dc03      	bgt.n	801a1d2 <_dtoa_r+0xba2>
 801a1ca:	9b05      	ldr	r3, [sp, #20]
 801a1cc:	2b02      	cmp	r3, #2
 801a1ce:	f73f aec9 	bgt.w	8019f64 <_dtoa_r+0x934>
 801a1d2:	9d00      	ldr	r5, [sp, #0]
 801a1d4:	4631      	mov	r1, r6
 801a1d6:	4658      	mov	r0, fp
 801a1d8:	f7ff f99e 	bl	8019518 <quorem>
 801a1dc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801a1e0:	f805 3b01 	strb.w	r3, [r5], #1
 801a1e4:	9a00      	ldr	r2, [sp, #0]
 801a1e6:	1aaa      	subs	r2, r5, r2
 801a1e8:	4591      	cmp	r9, r2
 801a1ea:	ddba      	ble.n	801a162 <_dtoa_r+0xb32>
 801a1ec:	4659      	mov	r1, fp
 801a1ee:	2300      	movs	r3, #0
 801a1f0:	220a      	movs	r2, #10
 801a1f2:	4620      	mov	r0, r4
 801a1f4:	f000 fd46 	bl	801ac84 <__multadd>
 801a1f8:	4683      	mov	fp, r0
 801a1fa:	e7eb      	b.n	801a1d4 <_dtoa_r+0xba4>
 801a1fc:	0801d9df 	.word	0x0801d9df
 801a200:	0801dbe1 	.word	0x0801dbe1
 801a204:	0801d95c 	.word	0x0801d95c

0801a208 <__sflush_r>:
 801a208:	898a      	ldrh	r2, [r1, #12]
 801a20a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a20e:	4605      	mov	r5, r0
 801a210:	0710      	lsls	r0, r2, #28
 801a212:	460c      	mov	r4, r1
 801a214:	d458      	bmi.n	801a2c8 <__sflush_r+0xc0>
 801a216:	684b      	ldr	r3, [r1, #4]
 801a218:	2b00      	cmp	r3, #0
 801a21a:	dc05      	bgt.n	801a228 <__sflush_r+0x20>
 801a21c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a21e:	2b00      	cmp	r3, #0
 801a220:	dc02      	bgt.n	801a228 <__sflush_r+0x20>
 801a222:	2000      	movs	r0, #0
 801a224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a228:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a22a:	2e00      	cmp	r6, #0
 801a22c:	d0f9      	beq.n	801a222 <__sflush_r+0x1a>
 801a22e:	2300      	movs	r3, #0
 801a230:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a234:	682f      	ldr	r7, [r5, #0]
 801a236:	602b      	str	r3, [r5, #0]
 801a238:	d032      	beq.n	801a2a0 <__sflush_r+0x98>
 801a23a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a23c:	89a3      	ldrh	r3, [r4, #12]
 801a23e:	075a      	lsls	r2, r3, #29
 801a240:	d505      	bpl.n	801a24e <__sflush_r+0x46>
 801a242:	6863      	ldr	r3, [r4, #4]
 801a244:	1ac0      	subs	r0, r0, r3
 801a246:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a248:	b10b      	cbz	r3, 801a24e <__sflush_r+0x46>
 801a24a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a24c:	1ac0      	subs	r0, r0, r3
 801a24e:	2300      	movs	r3, #0
 801a250:	4602      	mov	r2, r0
 801a252:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a254:	6a21      	ldr	r1, [r4, #32]
 801a256:	4628      	mov	r0, r5
 801a258:	47b0      	blx	r6
 801a25a:	1c43      	adds	r3, r0, #1
 801a25c:	89a3      	ldrh	r3, [r4, #12]
 801a25e:	d106      	bne.n	801a26e <__sflush_r+0x66>
 801a260:	6829      	ldr	r1, [r5, #0]
 801a262:	291d      	cmp	r1, #29
 801a264:	d82c      	bhi.n	801a2c0 <__sflush_r+0xb8>
 801a266:	4a2a      	ldr	r2, [pc, #168]	; (801a310 <__sflush_r+0x108>)
 801a268:	40ca      	lsrs	r2, r1
 801a26a:	07d6      	lsls	r6, r2, #31
 801a26c:	d528      	bpl.n	801a2c0 <__sflush_r+0xb8>
 801a26e:	2200      	movs	r2, #0
 801a270:	6062      	str	r2, [r4, #4]
 801a272:	04d9      	lsls	r1, r3, #19
 801a274:	6922      	ldr	r2, [r4, #16]
 801a276:	6022      	str	r2, [r4, #0]
 801a278:	d504      	bpl.n	801a284 <__sflush_r+0x7c>
 801a27a:	1c42      	adds	r2, r0, #1
 801a27c:	d101      	bne.n	801a282 <__sflush_r+0x7a>
 801a27e:	682b      	ldr	r3, [r5, #0]
 801a280:	b903      	cbnz	r3, 801a284 <__sflush_r+0x7c>
 801a282:	6560      	str	r0, [r4, #84]	; 0x54
 801a284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a286:	602f      	str	r7, [r5, #0]
 801a288:	2900      	cmp	r1, #0
 801a28a:	d0ca      	beq.n	801a222 <__sflush_r+0x1a>
 801a28c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a290:	4299      	cmp	r1, r3
 801a292:	d002      	beq.n	801a29a <__sflush_r+0x92>
 801a294:	4628      	mov	r0, r5
 801a296:	f7fc ffa9 	bl	80171ec <_free_r>
 801a29a:	2000      	movs	r0, #0
 801a29c:	6360      	str	r0, [r4, #52]	; 0x34
 801a29e:	e7c1      	b.n	801a224 <__sflush_r+0x1c>
 801a2a0:	6a21      	ldr	r1, [r4, #32]
 801a2a2:	2301      	movs	r3, #1
 801a2a4:	4628      	mov	r0, r5
 801a2a6:	47b0      	blx	r6
 801a2a8:	1c41      	adds	r1, r0, #1
 801a2aa:	d1c7      	bne.n	801a23c <__sflush_r+0x34>
 801a2ac:	682b      	ldr	r3, [r5, #0]
 801a2ae:	2b00      	cmp	r3, #0
 801a2b0:	d0c4      	beq.n	801a23c <__sflush_r+0x34>
 801a2b2:	2b1d      	cmp	r3, #29
 801a2b4:	d001      	beq.n	801a2ba <__sflush_r+0xb2>
 801a2b6:	2b16      	cmp	r3, #22
 801a2b8:	d101      	bne.n	801a2be <__sflush_r+0xb6>
 801a2ba:	602f      	str	r7, [r5, #0]
 801a2bc:	e7b1      	b.n	801a222 <__sflush_r+0x1a>
 801a2be:	89a3      	ldrh	r3, [r4, #12]
 801a2c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a2c4:	81a3      	strh	r3, [r4, #12]
 801a2c6:	e7ad      	b.n	801a224 <__sflush_r+0x1c>
 801a2c8:	690f      	ldr	r7, [r1, #16]
 801a2ca:	2f00      	cmp	r7, #0
 801a2cc:	d0a9      	beq.n	801a222 <__sflush_r+0x1a>
 801a2ce:	0793      	lsls	r3, r2, #30
 801a2d0:	680e      	ldr	r6, [r1, #0]
 801a2d2:	bf08      	it	eq
 801a2d4:	694b      	ldreq	r3, [r1, #20]
 801a2d6:	600f      	str	r7, [r1, #0]
 801a2d8:	bf18      	it	ne
 801a2da:	2300      	movne	r3, #0
 801a2dc:	eba6 0807 	sub.w	r8, r6, r7
 801a2e0:	608b      	str	r3, [r1, #8]
 801a2e2:	f1b8 0f00 	cmp.w	r8, #0
 801a2e6:	dd9c      	ble.n	801a222 <__sflush_r+0x1a>
 801a2e8:	6a21      	ldr	r1, [r4, #32]
 801a2ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a2ec:	4643      	mov	r3, r8
 801a2ee:	463a      	mov	r2, r7
 801a2f0:	4628      	mov	r0, r5
 801a2f2:	47b0      	blx	r6
 801a2f4:	2800      	cmp	r0, #0
 801a2f6:	dc06      	bgt.n	801a306 <__sflush_r+0xfe>
 801a2f8:	89a3      	ldrh	r3, [r4, #12]
 801a2fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a2fe:	81a3      	strh	r3, [r4, #12]
 801a300:	f04f 30ff 	mov.w	r0, #4294967295
 801a304:	e78e      	b.n	801a224 <__sflush_r+0x1c>
 801a306:	4407      	add	r7, r0
 801a308:	eba8 0800 	sub.w	r8, r8, r0
 801a30c:	e7e9      	b.n	801a2e2 <__sflush_r+0xda>
 801a30e:	bf00      	nop
 801a310:	20400001 	.word	0x20400001

0801a314 <_fflush_r>:
 801a314:	b538      	push	{r3, r4, r5, lr}
 801a316:	690b      	ldr	r3, [r1, #16]
 801a318:	4605      	mov	r5, r0
 801a31a:	460c      	mov	r4, r1
 801a31c:	b913      	cbnz	r3, 801a324 <_fflush_r+0x10>
 801a31e:	2500      	movs	r5, #0
 801a320:	4628      	mov	r0, r5
 801a322:	bd38      	pop	{r3, r4, r5, pc}
 801a324:	b118      	cbz	r0, 801a32e <_fflush_r+0x1a>
 801a326:	6983      	ldr	r3, [r0, #24]
 801a328:	b90b      	cbnz	r3, 801a32e <_fflush_r+0x1a>
 801a32a:	f7fc fe59 	bl	8016fe0 <__sinit>
 801a32e:	4b14      	ldr	r3, [pc, #80]	; (801a380 <_fflush_r+0x6c>)
 801a330:	429c      	cmp	r4, r3
 801a332:	d11b      	bne.n	801a36c <_fflush_r+0x58>
 801a334:	686c      	ldr	r4, [r5, #4]
 801a336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a33a:	2b00      	cmp	r3, #0
 801a33c:	d0ef      	beq.n	801a31e <_fflush_r+0xa>
 801a33e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a340:	07d0      	lsls	r0, r2, #31
 801a342:	d404      	bmi.n	801a34e <_fflush_r+0x3a>
 801a344:	0599      	lsls	r1, r3, #22
 801a346:	d402      	bmi.n	801a34e <_fflush_r+0x3a>
 801a348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a34a:	f7fc ff0c 	bl	8017166 <__retarget_lock_acquire_recursive>
 801a34e:	4628      	mov	r0, r5
 801a350:	4621      	mov	r1, r4
 801a352:	f7ff ff59 	bl	801a208 <__sflush_r>
 801a356:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a358:	07da      	lsls	r2, r3, #31
 801a35a:	4605      	mov	r5, r0
 801a35c:	d4e0      	bmi.n	801a320 <_fflush_r+0xc>
 801a35e:	89a3      	ldrh	r3, [r4, #12]
 801a360:	059b      	lsls	r3, r3, #22
 801a362:	d4dd      	bmi.n	801a320 <_fflush_r+0xc>
 801a364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a366:	f7fc feff 	bl	8017168 <__retarget_lock_release_recursive>
 801a36a:	e7d9      	b.n	801a320 <_fflush_r+0xc>
 801a36c:	4b05      	ldr	r3, [pc, #20]	; (801a384 <_fflush_r+0x70>)
 801a36e:	429c      	cmp	r4, r3
 801a370:	d101      	bne.n	801a376 <_fflush_r+0x62>
 801a372:	68ac      	ldr	r4, [r5, #8]
 801a374:	e7df      	b.n	801a336 <_fflush_r+0x22>
 801a376:	4b04      	ldr	r3, [pc, #16]	; (801a388 <_fflush_r+0x74>)
 801a378:	429c      	cmp	r4, r3
 801a37a:	bf08      	it	eq
 801a37c:	68ec      	ldreq	r4, [r5, #12]
 801a37e:	e7da      	b.n	801a336 <_fflush_r+0x22>
 801a380:	0801d854 	.word	0x0801d854
 801a384:	0801d874 	.word	0x0801d874
 801a388:	0801d834 	.word	0x0801d834

0801a38c <fiprintf>:
 801a38c:	b40e      	push	{r1, r2, r3}
 801a38e:	b503      	push	{r0, r1, lr}
 801a390:	4601      	mov	r1, r0
 801a392:	ab03      	add	r3, sp, #12
 801a394:	4805      	ldr	r0, [pc, #20]	; (801a3ac <fiprintf+0x20>)
 801a396:	f853 2b04 	ldr.w	r2, [r3], #4
 801a39a:	6800      	ldr	r0, [r0, #0]
 801a39c:	9301      	str	r3, [sp, #4]
 801a39e:	f001 fc57 	bl	801bc50 <_vfiprintf_r>
 801a3a2:	b002      	add	sp, #8
 801a3a4:	f85d eb04 	ldr.w	lr, [sp], #4
 801a3a8:	b003      	add	sp, #12
 801a3aa:	4770      	bx	lr
 801a3ac:	200000f8 	.word	0x200000f8

0801a3b0 <rshift>:
 801a3b0:	6903      	ldr	r3, [r0, #16]
 801a3b2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801a3b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a3ba:	ea4f 1261 	mov.w	r2, r1, asr #5
 801a3be:	f100 0414 	add.w	r4, r0, #20
 801a3c2:	dd45      	ble.n	801a450 <rshift+0xa0>
 801a3c4:	f011 011f 	ands.w	r1, r1, #31
 801a3c8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801a3cc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801a3d0:	d10c      	bne.n	801a3ec <rshift+0x3c>
 801a3d2:	f100 0710 	add.w	r7, r0, #16
 801a3d6:	4629      	mov	r1, r5
 801a3d8:	42b1      	cmp	r1, r6
 801a3da:	d334      	bcc.n	801a446 <rshift+0x96>
 801a3dc:	1a9b      	subs	r3, r3, r2
 801a3de:	009b      	lsls	r3, r3, #2
 801a3e0:	1eea      	subs	r2, r5, #3
 801a3e2:	4296      	cmp	r6, r2
 801a3e4:	bf38      	it	cc
 801a3e6:	2300      	movcc	r3, #0
 801a3e8:	4423      	add	r3, r4
 801a3ea:	e015      	b.n	801a418 <rshift+0x68>
 801a3ec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801a3f0:	f1c1 0820 	rsb	r8, r1, #32
 801a3f4:	40cf      	lsrs	r7, r1
 801a3f6:	f105 0e04 	add.w	lr, r5, #4
 801a3fa:	46a1      	mov	r9, r4
 801a3fc:	4576      	cmp	r6, lr
 801a3fe:	46f4      	mov	ip, lr
 801a400:	d815      	bhi.n	801a42e <rshift+0x7e>
 801a402:	1a9b      	subs	r3, r3, r2
 801a404:	009a      	lsls	r2, r3, #2
 801a406:	3a04      	subs	r2, #4
 801a408:	3501      	adds	r5, #1
 801a40a:	42ae      	cmp	r6, r5
 801a40c:	bf38      	it	cc
 801a40e:	2200      	movcc	r2, #0
 801a410:	18a3      	adds	r3, r4, r2
 801a412:	50a7      	str	r7, [r4, r2]
 801a414:	b107      	cbz	r7, 801a418 <rshift+0x68>
 801a416:	3304      	adds	r3, #4
 801a418:	1b1a      	subs	r2, r3, r4
 801a41a:	42a3      	cmp	r3, r4
 801a41c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801a420:	bf08      	it	eq
 801a422:	2300      	moveq	r3, #0
 801a424:	6102      	str	r2, [r0, #16]
 801a426:	bf08      	it	eq
 801a428:	6143      	streq	r3, [r0, #20]
 801a42a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a42e:	f8dc c000 	ldr.w	ip, [ip]
 801a432:	fa0c fc08 	lsl.w	ip, ip, r8
 801a436:	ea4c 0707 	orr.w	r7, ip, r7
 801a43a:	f849 7b04 	str.w	r7, [r9], #4
 801a43e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801a442:	40cf      	lsrs	r7, r1
 801a444:	e7da      	b.n	801a3fc <rshift+0x4c>
 801a446:	f851 cb04 	ldr.w	ip, [r1], #4
 801a44a:	f847 cf04 	str.w	ip, [r7, #4]!
 801a44e:	e7c3      	b.n	801a3d8 <rshift+0x28>
 801a450:	4623      	mov	r3, r4
 801a452:	e7e1      	b.n	801a418 <rshift+0x68>

0801a454 <__hexdig_fun>:
 801a454:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801a458:	2b09      	cmp	r3, #9
 801a45a:	d802      	bhi.n	801a462 <__hexdig_fun+0xe>
 801a45c:	3820      	subs	r0, #32
 801a45e:	b2c0      	uxtb	r0, r0
 801a460:	4770      	bx	lr
 801a462:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801a466:	2b05      	cmp	r3, #5
 801a468:	d801      	bhi.n	801a46e <__hexdig_fun+0x1a>
 801a46a:	3847      	subs	r0, #71	; 0x47
 801a46c:	e7f7      	b.n	801a45e <__hexdig_fun+0xa>
 801a46e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801a472:	2b05      	cmp	r3, #5
 801a474:	d801      	bhi.n	801a47a <__hexdig_fun+0x26>
 801a476:	3827      	subs	r0, #39	; 0x27
 801a478:	e7f1      	b.n	801a45e <__hexdig_fun+0xa>
 801a47a:	2000      	movs	r0, #0
 801a47c:	4770      	bx	lr
	...

0801a480 <__gethex>:
 801a480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a484:	ed2d 8b02 	vpush	{d8}
 801a488:	b089      	sub	sp, #36	; 0x24
 801a48a:	ee08 0a10 	vmov	s16, r0
 801a48e:	9304      	str	r3, [sp, #16]
 801a490:	4bbc      	ldr	r3, [pc, #752]	; (801a784 <__gethex+0x304>)
 801a492:	681b      	ldr	r3, [r3, #0]
 801a494:	9301      	str	r3, [sp, #4]
 801a496:	4618      	mov	r0, r3
 801a498:	468b      	mov	fp, r1
 801a49a:	4690      	mov	r8, r2
 801a49c:	f7e5 feb2 	bl	8000204 <strlen>
 801a4a0:	9b01      	ldr	r3, [sp, #4]
 801a4a2:	f8db 2000 	ldr.w	r2, [fp]
 801a4a6:	4403      	add	r3, r0
 801a4a8:	4682      	mov	sl, r0
 801a4aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801a4ae:	9305      	str	r3, [sp, #20]
 801a4b0:	1c93      	adds	r3, r2, #2
 801a4b2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801a4b6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801a4ba:	32fe      	adds	r2, #254	; 0xfe
 801a4bc:	18d1      	adds	r1, r2, r3
 801a4be:	461f      	mov	r7, r3
 801a4c0:	f813 0b01 	ldrb.w	r0, [r3], #1
 801a4c4:	9100      	str	r1, [sp, #0]
 801a4c6:	2830      	cmp	r0, #48	; 0x30
 801a4c8:	d0f8      	beq.n	801a4bc <__gethex+0x3c>
 801a4ca:	f7ff ffc3 	bl	801a454 <__hexdig_fun>
 801a4ce:	4604      	mov	r4, r0
 801a4d0:	2800      	cmp	r0, #0
 801a4d2:	d13a      	bne.n	801a54a <__gethex+0xca>
 801a4d4:	9901      	ldr	r1, [sp, #4]
 801a4d6:	4652      	mov	r2, sl
 801a4d8:	4638      	mov	r0, r7
 801a4da:	f7fd ff96 	bl	801840a <strncmp>
 801a4de:	4605      	mov	r5, r0
 801a4e0:	2800      	cmp	r0, #0
 801a4e2:	d168      	bne.n	801a5b6 <__gethex+0x136>
 801a4e4:	f817 000a 	ldrb.w	r0, [r7, sl]
 801a4e8:	eb07 060a 	add.w	r6, r7, sl
 801a4ec:	f7ff ffb2 	bl	801a454 <__hexdig_fun>
 801a4f0:	2800      	cmp	r0, #0
 801a4f2:	d062      	beq.n	801a5ba <__gethex+0x13a>
 801a4f4:	4633      	mov	r3, r6
 801a4f6:	7818      	ldrb	r0, [r3, #0]
 801a4f8:	2830      	cmp	r0, #48	; 0x30
 801a4fa:	461f      	mov	r7, r3
 801a4fc:	f103 0301 	add.w	r3, r3, #1
 801a500:	d0f9      	beq.n	801a4f6 <__gethex+0x76>
 801a502:	f7ff ffa7 	bl	801a454 <__hexdig_fun>
 801a506:	2301      	movs	r3, #1
 801a508:	fab0 f480 	clz	r4, r0
 801a50c:	0964      	lsrs	r4, r4, #5
 801a50e:	4635      	mov	r5, r6
 801a510:	9300      	str	r3, [sp, #0]
 801a512:	463a      	mov	r2, r7
 801a514:	4616      	mov	r6, r2
 801a516:	3201      	adds	r2, #1
 801a518:	7830      	ldrb	r0, [r6, #0]
 801a51a:	f7ff ff9b 	bl	801a454 <__hexdig_fun>
 801a51e:	2800      	cmp	r0, #0
 801a520:	d1f8      	bne.n	801a514 <__gethex+0x94>
 801a522:	9901      	ldr	r1, [sp, #4]
 801a524:	4652      	mov	r2, sl
 801a526:	4630      	mov	r0, r6
 801a528:	f7fd ff6f 	bl	801840a <strncmp>
 801a52c:	b980      	cbnz	r0, 801a550 <__gethex+0xd0>
 801a52e:	b94d      	cbnz	r5, 801a544 <__gethex+0xc4>
 801a530:	eb06 050a 	add.w	r5, r6, sl
 801a534:	462a      	mov	r2, r5
 801a536:	4616      	mov	r6, r2
 801a538:	3201      	adds	r2, #1
 801a53a:	7830      	ldrb	r0, [r6, #0]
 801a53c:	f7ff ff8a 	bl	801a454 <__hexdig_fun>
 801a540:	2800      	cmp	r0, #0
 801a542:	d1f8      	bne.n	801a536 <__gethex+0xb6>
 801a544:	1bad      	subs	r5, r5, r6
 801a546:	00ad      	lsls	r5, r5, #2
 801a548:	e004      	b.n	801a554 <__gethex+0xd4>
 801a54a:	2400      	movs	r4, #0
 801a54c:	4625      	mov	r5, r4
 801a54e:	e7e0      	b.n	801a512 <__gethex+0x92>
 801a550:	2d00      	cmp	r5, #0
 801a552:	d1f7      	bne.n	801a544 <__gethex+0xc4>
 801a554:	7833      	ldrb	r3, [r6, #0]
 801a556:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a55a:	2b50      	cmp	r3, #80	; 0x50
 801a55c:	d13b      	bne.n	801a5d6 <__gethex+0x156>
 801a55e:	7873      	ldrb	r3, [r6, #1]
 801a560:	2b2b      	cmp	r3, #43	; 0x2b
 801a562:	d02c      	beq.n	801a5be <__gethex+0x13e>
 801a564:	2b2d      	cmp	r3, #45	; 0x2d
 801a566:	d02e      	beq.n	801a5c6 <__gethex+0x146>
 801a568:	1c71      	adds	r1, r6, #1
 801a56a:	f04f 0900 	mov.w	r9, #0
 801a56e:	7808      	ldrb	r0, [r1, #0]
 801a570:	f7ff ff70 	bl	801a454 <__hexdig_fun>
 801a574:	1e43      	subs	r3, r0, #1
 801a576:	b2db      	uxtb	r3, r3
 801a578:	2b18      	cmp	r3, #24
 801a57a:	d82c      	bhi.n	801a5d6 <__gethex+0x156>
 801a57c:	f1a0 0210 	sub.w	r2, r0, #16
 801a580:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801a584:	f7ff ff66 	bl	801a454 <__hexdig_fun>
 801a588:	1e43      	subs	r3, r0, #1
 801a58a:	b2db      	uxtb	r3, r3
 801a58c:	2b18      	cmp	r3, #24
 801a58e:	d91d      	bls.n	801a5cc <__gethex+0x14c>
 801a590:	f1b9 0f00 	cmp.w	r9, #0
 801a594:	d000      	beq.n	801a598 <__gethex+0x118>
 801a596:	4252      	negs	r2, r2
 801a598:	4415      	add	r5, r2
 801a59a:	f8cb 1000 	str.w	r1, [fp]
 801a59e:	b1e4      	cbz	r4, 801a5da <__gethex+0x15a>
 801a5a0:	9b00      	ldr	r3, [sp, #0]
 801a5a2:	2b00      	cmp	r3, #0
 801a5a4:	bf14      	ite	ne
 801a5a6:	2700      	movne	r7, #0
 801a5a8:	2706      	moveq	r7, #6
 801a5aa:	4638      	mov	r0, r7
 801a5ac:	b009      	add	sp, #36	; 0x24
 801a5ae:	ecbd 8b02 	vpop	{d8}
 801a5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5b6:	463e      	mov	r6, r7
 801a5b8:	4625      	mov	r5, r4
 801a5ba:	2401      	movs	r4, #1
 801a5bc:	e7ca      	b.n	801a554 <__gethex+0xd4>
 801a5be:	f04f 0900 	mov.w	r9, #0
 801a5c2:	1cb1      	adds	r1, r6, #2
 801a5c4:	e7d3      	b.n	801a56e <__gethex+0xee>
 801a5c6:	f04f 0901 	mov.w	r9, #1
 801a5ca:	e7fa      	b.n	801a5c2 <__gethex+0x142>
 801a5cc:	230a      	movs	r3, #10
 801a5ce:	fb03 0202 	mla	r2, r3, r2, r0
 801a5d2:	3a10      	subs	r2, #16
 801a5d4:	e7d4      	b.n	801a580 <__gethex+0x100>
 801a5d6:	4631      	mov	r1, r6
 801a5d8:	e7df      	b.n	801a59a <__gethex+0x11a>
 801a5da:	1bf3      	subs	r3, r6, r7
 801a5dc:	3b01      	subs	r3, #1
 801a5de:	4621      	mov	r1, r4
 801a5e0:	2b07      	cmp	r3, #7
 801a5e2:	dc0b      	bgt.n	801a5fc <__gethex+0x17c>
 801a5e4:	ee18 0a10 	vmov	r0, s16
 801a5e8:	f000 faea 	bl	801abc0 <_Balloc>
 801a5ec:	4604      	mov	r4, r0
 801a5ee:	b940      	cbnz	r0, 801a602 <__gethex+0x182>
 801a5f0:	4b65      	ldr	r3, [pc, #404]	; (801a788 <__gethex+0x308>)
 801a5f2:	4602      	mov	r2, r0
 801a5f4:	21de      	movs	r1, #222	; 0xde
 801a5f6:	4865      	ldr	r0, [pc, #404]	; (801a78c <__gethex+0x30c>)
 801a5f8:	f7fe ff60 	bl	80194bc <__assert_func>
 801a5fc:	3101      	adds	r1, #1
 801a5fe:	105b      	asrs	r3, r3, #1
 801a600:	e7ee      	b.n	801a5e0 <__gethex+0x160>
 801a602:	f100 0914 	add.w	r9, r0, #20
 801a606:	f04f 0b00 	mov.w	fp, #0
 801a60a:	f1ca 0301 	rsb	r3, sl, #1
 801a60e:	f8cd 9008 	str.w	r9, [sp, #8]
 801a612:	f8cd b000 	str.w	fp, [sp]
 801a616:	9306      	str	r3, [sp, #24]
 801a618:	42b7      	cmp	r7, r6
 801a61a:	d340      	bcc.n	801a69e <__gethex+0x21e>
 801a61c:	9802      	ldr	r0, [sp, #8]
 801a61e:	9b00      	ldr	r3, [sp, #0]
 801a620:	f840 3b04 	str.w	r3, [r0], #4
 801a624:	eba0 0009 	sub.w	r0, r0, r9
 801a628:	1080      	asrs	r0, r0, #2
 801a62a:	0146      	lsls	r6, r0, #5
 801a62c:	6120      	str	r0, [r4, #16]
 801a62e:	4618      	mov	r0, r3
 801a630:	f000 fbbc 	bl	801adac <__hi0bits>
 801a634:	1a30      	subs	r0, r6, r0
 801a636:	f8d8 6000 	ldr.w	r6, [r8]
 801a63a:	42b0      	cmp	r0, r6
 801a63c:	dd63      	ble.n	801a706 <__gethex+0x286>
 801a63e:	1b87      	subs	r7, r0, r6
 801a640:	4639      	mov	r1, r7
 801a642:	4620      	mov	r0, r4
 801a644:	f000 ff56 	bl	801b4f4 <__any_on>
 801a648:	4682      	mov	sl, r0
 801a64a:	b1a8      	cbz	r0, 801a678 <__gethex+0x1f8>
 801a64c:	1e7b      	subs	r3, r7, #1
 801a64e:	1159      	asrs	r1, r3, #5
 801a650:	f003 021f 	and.w	r2, r3, #31
 801a654:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801a658:	f04f 0a01 	mov.w	sl, #1
 801a65c:	fa0a f202 	lsl.w	r2, sl, r2
 801a660:	420a      	tst	r2, r1
 801a662:	d009      	beq.n	801a678 <__gethex+0x1f8>
 801a664:	4553      	cmp	r3, sl
 801a666:	dd05      	ble.n	801a674 <__gethex+0x1f4>
 801a668:	1eb9      	subs	r1, r7, #2
 801a66a:	4620      	mov	r0, r4
 801a66c:	f000 ff42 	bl	801b4f4 <__any_on>
 801a670:	2800      	cmp	r0, #0
 801a672:	d145      	bne.n	801a700 <__gethex+0x280>
 801a674:	f04f 0a02 	mov.w	sl, #2
 801a678:	4639      	mov	r1, r7
 801a67a:	4620      	mov	r0, r4
 801a67c:	f7ff fe98 	bl	801a3b0 <rshift>
 801a680:	443d      	add	r5, r7
 801a682:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801a686:	42ab      	cmp	r3, r5
 801a688:	da4c      	bge.n	801a724 <__gethex+0x2a4>
 801a68a:	ee18 0a10 	vmov	r0, s16
 801a68e:	4621      	mov	r1, r4
 801a690:	f000 fad6 	bl	801ac40 <_Bfree>
 801a694:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a696:	2300      	movs	r3, #0
 801a698:	6013      	str	r3, [r2, #0]
 801a69a:	27a3      	movs	r7, #163	; 0xa3
 801a69c:	e785      	b.n	801a5aa <__gethex+0x12a>
 801a69e:	1e73      	subs	r3, r6, #1
 801a6a0:	9a05      	ldr	r2, [sp, #20]
 801a6a2:	9303      	str	r3, [sp, #12]
 801a6a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801a6a8:	4293      	cmp	r3, r2
 801a6aa:	d019      	beq.n	801a6e0 <__gethex+0x260>
 801a6ac:	f1bb 0f20 	cmp.w	fp, #32
 801a6b0:	d107      	bne.n	801a6c2 <__gethex+0x242>
 801a6b2:	9b02      	ldr	r3, [sp, #8]
 801a6b4:	9a00      	ldr	r2, [sp, #0]
 801a6b6:	f843 2b04 	str.w	r2, [r3], #4
 801a6ba:	9302      	str	r3, [sp, #8]
 801a6bc:	2300      	movs	r3, #0
 801a6be:	9300      	str	r3, [sp, #0]
 801a6c0:	469b      	mov	fp, r3
 801a6c2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801a6c6:	f7ff fec5 	bl	801a454 <__hexdig_fun>
 801a6ca:	9b00      	ldr	r3, [sp, #0]
 801a6cc:	f000 000f 	and.w	r0, r0, #15
 801a6d0:	fa00 f00b 	lsl.w	r0, r0, fp
 801a6d4:	4303      	orrs	r3, r0
 801a6d6:	9300      	str	r3, [sp, #0]
 801a6d8:	f10b 0b04 	add.w	fp, fp, #4
 801a6dc:	9b03      	ldr	r3, [sp, #12]
 801a6de:	e00d      	b.n	801a6fc <__gethex+0x27c>
 801a6e0:	9b03      	ldr	r3, [sp, #12]
 801a6e2:	9a06      	ldr	r2, [sp, #24]
 801a6e4:	4413      	add	r3, r2
 801a6e6:	42bb      	cmp	r3, r7
 801a6e8:	d3e0      	bcc.n	801a6ac <__gethex+0x22c>
 801a6ea:	4618      	mov	r0, r3
 801a6ec:	9901      	ldr	r1, [sp, #4]
 801a6ee:	9307      	str	r3, [sp, #28]
 801a6f0:	4652      	mov	r2, sl
 801a6f2:	f7fd fe8a 	bl	801840a <strncmp>
 801a6f6:	9b07      	ldr	r3, [sp, #28]
 801a6f8:	2800      	cmp	r0, #0
 801a6fa:	d1d7      	bne.n	801a6ac <__gethex+0x22c>
 801a6fc:	461e      	mov	r6, r3
 801a6fe:	e78b      	b.n	801a618 <__gethex+0x198>
 801a700:	f04f 0a03 	mov.w	sl, #3
 801a704:	e7b8      	b.n	801a678 <__gethex+0x1f8>
 801a706:	da0a      	bge.n	801a71e <__gethex+0x29e>
 801a708:	1a37      	subs	r7, r6, r0
 801a70a:	4621      	mov	r1, r4
 801a70c:	ee18 0a10 	vmov	r0, s16
 801a710:	463a      	mov	r2, r7
 801a712:	f000 fcb1 	bl	801b078 <__lshift>
 801a716:	1bed      	subs	r5, r5, r7
 801a718:	4604      	mov	r4, r0
 801a71a:	f100 0914 	add.w	r9, r0, #20
 801a71e:	f04f 0a00 	mov.w	sl, #0
 801a722:	e7ae      	b.n	801a682 <__gethex+0x202>
 801a724:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801a728:	42a8      	cmp	r0, r5
 801a72a:	dd72      	ble.n	801a812 <__gethex+0x392>
 801a72c:	1b45      	subs	r5, r0, r5
 801a72e:	42ae      	cmp	r6, r5
 801a730:	dc36      	bgt.n	801a7a0 <__gethex+0x320>
 801a732:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801a736:	2b02      	cmp	r3, #2
 801a738:	d02a      	beq.n	801a790 <__gethex+0x310>
 801a73a:	2b03      	cmp	r3, #3
 801a73c:	d02c      	beq.n	801a798 <__gethex+0x318>
 801a73e:	2b01      	cmp	r3, #1
 801a740:	d115      	bne.n	801a76e <__gethex+0x2ee>
 801a742:	42ae      	cmp	r6, r5
 801a744:	d113      	bne.n	801a76e <__gethex+0x2ee>
 801a746:	2e01      	cmp	r6, #1
 801a748:	d10b      	bne.n	801a762 <__gethex+0x2e2>
 801a74a:	9a04      	ldr	r2, [sp, #16]
 801a74c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801a750:	6013      	str	r3, [r2, #0]
 801a752:	2301      	movs	r3, #1
 801a754:	6123      	str	r3, [r4, #16]
 801a756:	f8c9 3000 	str.w	r3, [r9]
 801a75a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a75c:	2762      	movs	r7, #98	; 0x62
 801a75e:	601c      	str	r4, [r3, #0]
 801a760:	e723      	b.n	801a5aa <__gethex+0x12a>
 801a762:	1e71      	subs	r1, r6, #1
 801a764:	4620      	mov	r0, r4
 801a766:	f000 fec5 	bl	801b4f4 <__any_on>
 801a76a:	2800      	cmp	r0, #0
 801a76c:	d1ed      	bne.n	801a74a <__gethex+0x2ca>
 801a76e:	ee18 0a10 	vmov	r0, s16
 801a772:	4621      	mov	r1, r4
 801a774:	f000 fa64 	bl	801ac40 <_Bfree>
 801a778:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a77a:	2300      	movs	r3, #0
 801a77c:	6013      	str	r3, [r2, #0]
 801a77e:	2750      	movs	r7, #80	; 0x50
 801a780:	e713      	b.n	801a5aa <__gethex+0x12a>
 801a782:	bf00      	nop
 801a784:	0801da5c 	.word	0x0801da5c
 801a788:	0801d9df 	.word	0x0801d9df
 801a78c:	0801d9f0 	.word	0x0801d9f0
 801a790:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a792:	2b00      	cmp	r3, #0
 801a794:	d1eb      	bne.n	801a76e <__gethex+0x2ee>
 801a796:	e7d8      	b.n	801a74a <__gethex+0x2ca>
 801a798:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a79a:	2b00      	cmp	r3, #0
 801a79c:	d1d5      	bne.n	801a74a <__gethex+0x2ca>
 801a79e:	e7e6      	b.n	801a76e <__gethex+0x2ee>
 801a7a0:	1e6f      	subs	r7, r5, #1
 801a7a2:	f1ba 0f00 	cmp.w	sl, #0
 801a7a6:	d131      	bne.n	801a80c <__gethex+0x38c>
 801a7a8:	b127      	cbz	r7, 801a7b4 <__gethex+0x334>
 801a7aa:	4639      	mov	r1, r7
 801a7ac:	4620      	mov	r0, r4
 801a7ae:	f000 fea1 	bl	801b4f4 <__any_on>
 801a7b2:	4682      	mov	sl, r0
 801a7b4:	117b      	asrs	r3, r7, #5
 801a7b6:	2101      	movs	r1, #1
 801a7b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801a7bc:	f007 071f 	and.w	r7, r7, #31
 801a7c0:	fa01 f707 	lsl.w	r7, r1, r7
 801a7c4:	421f      	tst	r7, r3
 801a7c6:	4629      	mov	r1, r5
 801a7c8:	4620      	mov	r0, r4
 801a7ca:	bf18      	it	ne
 801a7cc:	f04a 0a02 	orrne.w	sl, sl, #2
 801a7d0:	1b76      	subs	r6, r6, r5
 801a7d2:	f7ff fded 	bl	801a3b0 <rshift>
 801a7d6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801a7da:	2702      	movs	r7, #2
 801a7dc:	f1ba 0f00 	cmp.w	sl, #0
 801a7e0:	d048      	beq.n	801a874 <__gethex+0x3f4>
 801a7e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801a7e6:	2b02      	cmp	r3, #2
 801a7e8:	d015      	beq.n	801a816 <__gethex+0x396>
 801a7ea:	2b03      	cmp	r3, #3
 801a7ec:	d017      	beq.n	801a81e <__gethex+0x39e>
 801a7ee:	2b01      	cmp	r3, #1
 801a7f0:	d109      	bne.n	801a806 <__gethex+0x386>
 801a7f2:	f01a 0f02 	tst.w	sl, #2
 801a7f6:	d006      	beq.n	801a806 <__gethex+0x386>
 801a7f8:	f8d9 0000 	ldr.w	r0, [r9]
 801a7fc:	ea4a 0a00 	orr.w	sl, sl, r0
 801a800:	f01a 0f01 	tst.w	sl, #1
 801a804:	d10e      	bne.n	801a824 <__gethex+0x3a4>
 801a806:	f047 0710 	orr.w	r7, r7, #16
 801a80a:	e033      	b.n	801a874 <__gethex+0x3f4>
 801a80c:	f04f 0a01 	mov.w	sl, #1
 801a810:	e7d0      	b.n	801a7b4 <__gethex+0x334>
 801a812:	2701      	movs	r7, #1
 801a814:	e7e2      	b.n	801a7dc <__gethex+0x35c>
 801a816:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a818:	f1c3 0301 	rsb	r3, r3, #1
 801a81c:	9315      	str	r3, [sp, #84]	; 0x54
 801a81e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a820:	2b00      	cmp	r3, #0
 801a822:	d0f0      	beq.n	801a806 <__gethex+0x386>
 801a824:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801a828:	f104 0314 	add.w	r3, r4, #20
 801a82c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801a830:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801a834:	f04f 0c00 	mov.w	ip, #0
 801a838:	4618      	mov	r0, r3
 801a83a:	f853 2b04 	ldr.w	r2, [r3], #4
 801a83e:	f1b2 3fff 	cmp.w	r2, #4294967295
 801a842:	d01c      	beq.n	801a87e <__gethex+0x3fe>
 801a844:	3201      	adds	r2, #1
 801a846:	6002      	str	r2, [r0, #0]
 801a848:	2f02      	cmp	r7, #2
 801a84a:	f104 0314 	add.w	r3, r4, #20
 801a84e:	d13f      	bne.n	801a8d0 <__gethex+0x450>
 801a850:	f8d8 2000 	ldr.w	r2, [r8]
 801a854:	3a01      	subs	r2, #1
 801a856:	42b2      	cmp	r2, r6
 801a858:	d10a      	bne.n	801a870 <__gethex+0x3f0>
 801a85a:	1171      	asrs	r1, r6, #5
 801a85c:	2201      	movs	r2, #1
 801a85e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a862:	f006 061f 	and.w	r6, r6, #31
 801a866:	fa02 f606 	lsl.w	r6, r2, r6
 801a86a:	421e      	tst	r6, r3
 801a86c:	bf18      	it	ne
 801a86e:	4617      	movne	r7, r2
 801a870:	f047 0720 	orr.w	r7, r7, #32
 801a874:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a876:	601c      	str	r4, [r3, #0]
 801a878:	9b04      	ldr	r3, [sp, #16]
 801a87a:	601d      	str	r5, [r3, #0]
 801a87c:	e695      	b.n	801a5aa <__gethex+0x12a>
 801a87e:	4299      	cmp	r1, r3
 801a880:	f843 cc04 	str.w	ip, [r3, #-4]
 801a884:	d8d8      	bhi.n	801a838 <__gethex+0x3b8>
 801a886:	68a3      	ldr	r3, [r4, #8]
 801a888:	459b      	cmp	fp, r3
 801a88a:	db19      	blt.n	801a8c0 <__gethex+0x440>
 801a88c:	6861      	ldr	r1, [r4, #4]
 801a88e:	ee18 0a10 	vmov	r0, s16
 801a892:	3101      	adds	r1, #1
 801a894:	f000 f994 	bl	801abc0 <_Balloc>
 801a898:	4681      	mov	r9, r0
 801a89a:	b918      	cbnz	r0, 801a8a4 <__gethex+0x424>
 801a89c:	4b1a      	ldr	r3, [pc, #104]	; (801a908 <__gethex+0x488>)
 801a89e:	4602      	mov	r2, r0
 801a8a0:	2184      	movs	r1, #132	; 0x84
 801a8a2:	e6a8      	b.n	801a5f6 <__gethex+0x176>
 801a8a4:	6922      	ldr	r2, [r4, #16]
 801a8a6:	3202      	adds	r2, #2
 801a8a8:	f104 010c 	add.w	r1, r4, #12
 801a8ac:	0092      	lsls	r2, r2, #2
 801a8ae:	300c      	adds	r0, #12
 801a8b0:	f7fc fc6c 	bl	801718c <memcpy>
 801a8b4:	4621      	mov	r1, r4
 801a8b6:	ee18 0a10 	vmov	r0, s16
 801a8ba:	f000 f9c1 	bl	801ac40 <_Bfree>
 801a8be:	464c      	mov	r4, r9
 801a8c0:	6923      	ldr	r3, [r4, #16]
 801a8c2:	1c5a      	adds	r2, r3, #1
 801a8c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801a8c8:	6122      	str	r2, [r4, #16]
 801a8ca:	2201      	movs	r2, #1
 801a8cc:	615a      	str	r2, [r3, #20]
 801a8ce:	e7bb      	b.n	801a848 <__gethex+0x3c8>
 801a8d0:	6922      	ldr	r2, [r4, #16]
 801a8d2:	455a      	cmp	r2, fp
 801a8d4:	dd0b      	ble.n	801a8ee <__gethex+0x46e>
 801a8d6:	2101      	movs	r1, #1
 801a8d8:	4620      	mov	r0, r4
 801a8da:	f7ff fd69 	bl	801a3b0 <rshift>
 801a8de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801a8e2:	3501      	adds	r5, #1
 801a8e4:	42ab      	cmp	r3, r5
 801a8e6:	f6ff aed0 	blt.w	801a68a <__gethex+0x20a>
 801a8ea:	2701      	movs	r7, #1
 801a8ec:	e7c0      	b.n	801a870 <__gethex+0x3f0>
 801a8ee:	f016 061f 	ands.w	r6, r6, #31
 801a8f2:	d0fa      	beq.n	801a8ea <__gethex+0x46a>
 801a8f4:	449a      	add	sl, r3
 801a8f6:	f1c6 0620 	rsb	r6, r6, #32
 801a8fa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801a8fe:	f000 fa55 	bl	801adac <__hi0bits>
 801a902:	42b0      	cmp	r0, r6
 801a904:	dbe7      	blt.n	801a8d6 <__gethex+0x456>
 801a906:	e7f0      	b.n	801a8ea <__gethex+0x46a>
 801a908:	0801d9df 	.word	0x0801d9df

0801a90c <L_shift>:
 801a90c:	f1c2 0208 	rsb	r2, r2, #8
 801a910:	0092      	lsls	r2, r2, #2
 801a912:	b570      	push	{r4, r5, r6, lr}
 801a914:	f1c2 0620 	rsb	r6, r2, #32
 801a918:	6843      	ldr	r3, [r0, #4]
 801a91a:	6804      	ldr	r4, [r0, #0]
 801a91c:	fa03 f506 	lsl.w	r5, r3, r6
 801a920:	432c      	orrs	r4, r5
 801a922:	40d3      	lsrs	r3, r2
 801a924:	6004      	str	r4, [r0, #0]
 801a926:	f840 3f04 	str.w	r3, [r0, #4]!
 801a92a:	4288      	cmp	r0, r1
 801a92c:	d3f4      	bcc.n	801a918 <L_shift+0xc>
 801a92e:	bd70      	pop	{r4, r5, r6, pc}

0801a930 <__match>:
 801a930:	b530      	push	{r4, r5, lr}
 801a932:	6803      	ldr	r3, [r0, #0]
 801a934:	3301      	adds	r3, #1
 801a936:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a93a:	b914      	cbnz	r4, 801a942 <__match+0x12>
 801a93c:	6003      	str	r3, [r0, #0]
 801a93e:	2001      	movs	r0, #1
 801a940:	bd30      	pop	{r4, r5, pc}
 801a942:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a946:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801a94a:	2d19      	cmp	r5, #25
 801a94c:	bf98      	it	ls
 801a94e:	3220      	addls	r2, #32
 801a950:	42a2      	cmp	r2, r4
 801a952:	d0f0      	beq.n	801a936 <__match+0x6>
 801a954:	2000      	movs	r0, #0
 801a956:	e7f3      	b.n	801a940 <__match+0x10>

0801a958 <__hexnan>:
 801a958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a95c:	680b      	ldr	r3, [r1, #0]
 801a95e:	6801      	ldr	r1, [r0, #0]
 801a960:	115e      	asrs	r6, r3, #5
 801a962:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801a966:	f013 031f 	ands.w	r3, r3, #31
 801a96a:	b087      	sub	sp, #28
 801a96c:	bf18      	it	ne
 801a96e:	3604      	addne	r6, #4
 801a970:	2500      	movs	r5, #0
 801a972:	1f37      	subs	r7, r6, #4
 801a974:	4682      	mov	sl, r0
 801a976:	4690      	mov	r8, r2
 801a978:	9301      	str	r3, [sp, #4]
 801a97a:	f846 5c04 	str.w	r5, [r6, #-4]
 801a97e:	46b9      	mov	r9, r7
 801a980:	463c      	mov	r4, r7
 801a982:	9502      	str	r5, [sp, #8]
 801a984:	46ab      	mov	fp, r5
 801a986:	784a      	ldrb	r2, [r1, #1]
 801a988:	1c4b      	adds	r3, r1, #1
 801a98a:	9303      	str	r3, [sp, #12]
 801a98c:	b342      	cbz	r2, 801a9e0 <__hexnan+0x88>
 801a98e:	4610      	mov	r0, r2
 801a990:	9105      	str	r1, [sp, #20]
 801a992:	9204      	str	r2, [sp, #16]
 801a994:	f7ff fd5e 	bl	801a454 <__hexdig_fun>
 801a998:	2800      	cmp	r0, #0
 801a99a:	d14f      	bne.n	801aa3c <__hexnan+0xe4>
 801a99c:	9a04      	ldr	r2, [sp, #16]
 801a99e:	9905      	ldr	r1, [sp, #20]
 801a9a0:	2a20      	cmp	r2, #32
 801a9a2:	d818      	bhi.n	801a9d6 <__hexnan+0x7e>
 801a9a4:	9b02      	ldr	r3, [sp, #8]
 801a9a6:	459b      	cmp	fp, r3
 801a9a8:	dd13      	ble.n	801a9d2 <__hexnan+0x7a>
 801a9aa:	454c      	cmp	r4, r9
 801a9ac:	d206      	bcs.n	801a9bc <__hexnan+0x64>
 801a9ae:	2d07      	cmp	r5, #7
 801a9b0:	dc04      	bgt.n	801a9bc <__hexnan+0x64>
 801a9b2:	462a      	mov	r2, r5
 801a9b4:	4649      	mov	r1, r9
 801a9b6:	4620      	mov	r0, r4
 801a9b8:	f7ff ffa8 	bl	801a90c <L_shift>
 801a9bc:	4544      	cmp	r4, r8
 801a9be:	d950      	bls.n	801aa62 <__hexnan+0x10a>
 801a9c0:	2300      	movs	r3, #0
 801a9c2:	f1a4 0904 	sub.w	r9, r4, #4
 801a9c6:	f844 3c04 	str.w	r3, [r4, #-4]
 801a9ca:	f8cd b008 	str.w	fp, [sp, #8]
 801a9ce:	464c      	mov	r4, r9
 801a9d0:	461d      	mov	r5, r3
 801a9d2:	9903      	ldr	r1, [sp, #12]
 801a9d4:	e7d7      	b.n	801a986 <__hexnan+0x2e>
 801a9d6:	2a29      	cmp	r2, #41	; 0x29
 801a9d8:	d156      	bne.n	801aa88 <__hexnan+0x130>
 801a9da:	3102      	adds	r1, #2
 801a9dc:	f8ca 1000 	str.w	r1, [sl]
 801a9e0:	f1bb 0f00 	cmp.w	fp, #0
 801a9e4:	d050      	beq.n	801aa88 <__hexnan+0x130>
 801a9e6:	454c      	cmp	r4, r9
 801a9e8:	d206      	bcs.n	801a9f8 <__hexnan+0xa0>
 801a9ea:	2d07      	cmp	r5, #7
 801a9ec:	dc04      	bgt.n	801a9f8 <__hexnan+0xa0>
 801a9ee:	462a      	mov	r2, r5
 801a9f0:	4649      	mov	r1, r9
 801a9f2:	4620      	mov	r0, r4
 801a9f4:	f7ff ff8a 	bl	801a90c <L_shift>
 801a9f8:	4544      	cmp	r4, r8
 801a9fa:	d934      	bls.n	801aa66 <__hexnan+0x10e>
 801a9fc:	f1a8 0204 	sub.w	r2, r8, #4
 801aa00:	4623      	mov	r3, r4
 801aa02:	f853 1b04 	ldr.w	r1, [r3], #4
 801aa06:	f842 1f04 	str.w	r1, [r2, #4]!
 801aa0a:	429f      	cmp	r7, r3
 801aa0c:	d2f9      	bcs.n	801aa02 <__hexnan+0xaa>
 801aa0e:	1b3b      	subs	r3, r7, r4
 801aa10:	f023 0303 	bic.w	r3, r3, #3
 801aa14:	3304      	adds	r3, #4
 801aa16:	3401      	adds	r4, #1
 801aa18:	3e03      	subs	r6, #3
 801aa1a:	42b4      	cmp	r4, r6
 801aa1c:	bf88      	it	hi
 801aa1e:	2304      	movhi	r3, #4
 801aa20:	4443      	add	r3, r8
 801aa22:	2200      	movs	r2, #0
 801aa24:	f843 2b04 	str.w	r2, [r3], #4
 801aa28:	429f      	cmp	r7, r3
 801aa2a:	d2fb      	bcs.n	801aa24 <__hexnan+0xcc>
 801aa2c:	683b      	ldr	r3, [r7, #0]
 801aa2e:	b91b      	cbnz	r3, 801aa38 <__hexnan+0xe0>
 801aa30:	4547      	cmp	r7, r8
 801aa32:	d127      	bne.n	801aa84 <__hexnan+0x12c>
 801aa34:	2301      	movs	r3, #1
 801aa36:	603b      	str	r3, [r7, #0]
 801aa38:	2005      	movs	r0, #5
 801aa3a:	e026      	b.n	801aa8a <__hexnan+0x132>
 801aa3c:	3501      	adds	r5, #1
 801aa3e:	2d08      	cmp	r5, #8
 801aa40:	f10b 0b01 	add.w	fp, fp, #1
 801aa44:	dd06      	ble.n	801aa54 <__hexnan+0xfc>
 801aa46:	4544      	cmp	r4, r8
 801aa48:	d9c3      	bls.n	801a9d2 <__hexnan+0x7a>
 801aa4a:	2300      	movs	r3, #0
 801aa4c:	f844 3c04 	str.w	r3, [r4, #-4]
 801aa50:	2501      	movs	r5, #1
 801aa52:	3c04      	subs	r4, #4
 801aa54:	6822      	ldr	r2, [r4, #0]
 801aa56:	f000 000f 	and.w	r0, r0, #15
 801aa5a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801aa5e:	6022      	str	r2, [r4, #0]
 801aa60:	e7b7      	b.n	801a9d2 <__hexnan+0x7a>
 801aa62:	2508      	movs	r5, #8
 801aa64:	e7b5      	b.n	801a9d2 <__hexnan+0x7a>
 801aa66:	9b01      	ldr	r3, [sp, #4]
 801aa68:	2b00      	cmp	r3, #0
 801aa6a:	d0df      	beq.n	801aa2c <__hexnan+0xd4>
 801aa6c:	f04f 32ff 	mov.w	r2, #4294967295
 801aa70:	f1c3 0320 	rsb	r3, r3, #32
 801aa74:	fa22 f303 	lsr.w	r3, r2, r3
 801aa78:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801aa7c:	401a      	ands	r2, r3
 801aa7e:	f846 2c04 	str.w	r2, [r6, #-4]
 801aa82:	e7d3      	b.n	801aa2c <__hexnan+0xd4>
 801aa84:	3f04      	subs	r7, #4
 801aa86:	e7d1      	b.n	801aa2c <__hexnan+0xd4>
 801aa88:	2004      	movs	r0, #4
 801aa8a:	b007      	add	sp, #28
 801aa8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aa90 <_localeconv_r>:
 801aa90:	4800      	ldr	r0, [pc, #0]	; (801aa94 <_localeconv_r+0x4>)
 801aa92:	4770      	bx	lr
 801aa94:	20000250 	.word	0x20000250

0801aa98 <_lseek_r>:
 801aa98:	b538      	push	{r3, r4, r5, lr}
 801aa9a:	4d07      	ldr	r5, [pc, #28]	; (801aab8 <_lseek_r+0x20>)
 801aa9c:	4604      	mov	r4, r0
 801aa9e:	4608      	mov	r0, r1
 801aaa0:	4611      	mov	r1, r2
 801aaa2:	2200      	movs	r2, #0
 801aaa4:	602a      	str	r2, [r5, #0]
 801aaa6:	461a      	mov	r2, r3
 801aaa8:	f001 fc34 	bl	801c314 <_lseek>
 801aaac:	1c43      	adds	r3, r0, #1
 801aaae:	d102      	bne.n	801aab6 <_lseek_r+0x1e>
 801aab0:	682b      	ldr	r3, [r5, #0]
 801aab2:	b103      	cbz	r3, 801aab6 <_lseek_r+0x1e>
 801aab4:	6023      	str	r3, [r4, #0]
 801aab6:	bd38      	pop	{r3, r4, r5, pc}
 801aab8:	2000d0c8 	.word	0x2000d0c8

0801aabc <__swhatbuf_r>:
 801aabc:	b570      	push	{r4, r5, r6, lr}
 801aabe:	460e      	mov	r6, r1
 801aac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aac4:	2900      	cmp	r1, #0
 801aac6:	b096      	sub	sp, #88	; 0x58
 801aac8:	4614      	mov	r4, r2
 801aaca:	461d      	mov	r5, r3
 801aacc:	da07      	bge.n	801aade <__swhatbuf_r+0x22>
 801aace:	2300      	movs	r3, #0
 801aad0:	602b      	str	r3, [r5, #0]
 801aad2:	89b3      	ldrh	r3, [r6, #12]
 801aad4:	061a      	lsls	r2, r3, #24
 801aad6:	d410      	bmi.n	801aafa <__swhatbuf_r+0x3e>
 801aad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801aadc:	e00e      	b.n	801aafc <__swhatbuf_r+0x40>
 801aade:	466a      	mov	r2, sp
 801aae0:	f001 fbc6 	bl	801c270 <_fstat_r>
 801aae4:	2800      	cmp	r0, #0
 801aae6:	dbf2      	blt.n	801aace <__swhatbuf_r+0x12>
 801aae8:	9a01      	ldr	r2, [sp, #4]
 801aaea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801aaee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801aaf2:	425a      	negs	r2, r3
 801aaf4:	415a      	adcs	r2, r3
 801aaf6:	602a      	str	r2, [r5, #0]
 801aaf8:	e7ee      	b.n	801aad8 <__swhatbuf_r+0x1c>
 801aafa:	2340      	movs	r3, #64	; 0x40
 801aafc:	2000      	movs	r0, #0
 801aafe:	6023      	str	r3, [r4, #0]
 801ab00:	b016      	add	sp, #88	; 0x58
 801ab02:	bd70      	pop	{r4, r5, r6, pc}

0801ab04 <__smakebuf_r>:
 801ab04:	898b      	ldrh	r3, [r1, #12]
 801ab06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ab08:	079d      	lsls	r5, r3, #30
 801ab0a:	4606      	mov	r6, r0
 801ab0c:	460c      	mov	r4, r1
 801ab0e:	d507      	bpl.n	801ab20 <__smakebuf_r+0x1c>
 801ab10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ab14:	6023      	str	r3, [r4, #0]
 801ab16:	6123      	str	r3, [r4, #16]
 801ab18:	2301      	movs	r3, #1
 801ab1a:	6163      	str	r3, [r4, #20]
 801ab1c:	b002      	add	sp, #8
 801ab1e:	bd70      	pop	{r4, r5, r6, pc}
 801ab20:	ab01      	add	r3, sp, #4
 801ab22:	466a      	mov	r2, sp
 801ab24:	f7ff ffca 	bl	801aabc <__swhatbuf_r>
 801ab28:	9900      	ldr	r1, [sp, #0]
 801ab2a:	4605      	mov	r5, r0
 801ab2c:	4630      	mov	r0, r6
 801ab2e:	f7fc fbad 	bl	801728c <_malloc_r>
 801ab32:	b948      	cbnz	r0, 801ab48 <__smakebuf_r+0x44>
 801ab34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ab38:	059a      	lsls	r2, r3, #22
 801ab3a:	d4ef      	bmi.n	801ab1c <__smakebuf_r+0x18>
 801ab3c:	f023 0303 	bic.w	r3, r3, #3
 801ab40:	f043 0302 	orr.w	r3, r3, #2
 801ab44:	81a3      	strh	r3, [r4, #12]
 801ab46:	e7e3      	b.n	801ab10 <__smakebuf_r+0xc>
 801ab48:	4b0d      	ldr	r3, [pc, #52]	; (801ab80 <__smakebuf_r+0x7c>)
 801ab4a:	62b3      	str	r3, [r6, #40]	; 0x28
 801ab4c:	89a3      	ldrh	r3, [r4, #12]
 801ab4e:	6020      	str	r0, [r4, #0]
 801ab50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ab54:	81a3      	strh	r3, [r4, #12]
 801ab56:	9b00      	ldr	r3, [sp, #0]
 801ab58:	6163      	str	r3, [r4, #20]
 801ab5a:	9b01      	ldr	r3, [sp, #4]
 801ab5c:	6120      	str	r0, [r4, #16]
 801ab5e:	b15b      	cbz	r3, 801ab78 <__smakebuf_r+0x74>
 801ab60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ab64:	4630      	mov	r0, r6
 801ab66:	f001 fb95 	bl	801c294 <_isatty_r>
 801ab6a:	b128      	cbz	r0, 801ab78 <__smakebuf_r+0x74>
 801ab6c:	89a3      	ldrh	r3, [r4, #12]
 801ab6e:	f023 0303 	bic.w	r3, r3, #3
 801ab72:	f043 0301 	orr.w	r3, r3, #1
 801ab76:	81a3      	strh	r3, [r4, #12]
 801ab78:	89a0      	ldrh	r0, [r4, #12]
 801ab7a:	4305      	orrs	r5, r0
 801ab7c:	81a5      	strh	r5, [r4, #12]
 801ab7e:	e7cd      	b.n	801ab1c <__smakebuf_r+0x18>
 801ab80:	08016f79 	.word	0x08016f79

0801ab84 <__ascii_mbtowc>:
 801ab84:	b082      	sub	sp, #8
 801ab86:	b901      	cbnz	r1, 801ab8a <__ascii_mbtowc+0x6>
 801ab88:	a901      	add	r1, sp, #4
 801ab8a:	b142      	cbz	r2, 801ab9e <__ascii_mbtowc+0x1a>
 801ab8c:	b14b      	cbz	r3, 801aba2 <__ascii_mbtowc+0x1e>
 801ab8e:	7813      	ldrb	r3, [r2, #0]
 801ab90:	600b      	str	r3, [r1, #0]
 801ab92:	7812      	ldrb	r2, [r2, #0]
 801ab94:	1e10      	subs	r0, r2, #0
 801ab96:	bf18      	it	ne
 801ab98:	2001      	movne	r0, #1
 801ab9a:	b002      	add	sp, #8
 801ab9c:	4770      	bx	lr
 801ab9e:	4610      	mov	r0, r2
 801aba0:	e7fb      	b.n	801ab9a <__ascii_mbtowc+0x16>
 801aba2:	f06f 0001 	mvn.w	r0, #1
 801aba6:	e7f8      	b.n	801ab9a <__ascii_mbtowc+0x16>

0801aba8 <__malloc_lock>:
 801aba8:	4801      	ldr	r0, [pc, #4]	; (801abb0 <__malloc_lock+0x8>)
 801abaa:	f7fc badc 	b.w	8017166 <__retarget_lock_acquire_recursive>
 801abae:	bf00      	nop
 801abb0:	2000d0c0 	.word	0x2000d0c0

0801abb4 <__malloc_unlock>:
 801abb4:	4801      	ldr	r0, [pc, #4]	; (801abbc <__malloc_unlock+0x8>)
 801abb6:	f7fc bad7 	b.w	8017168 <__retarget_lock_release_recursive>
 801abba:	bf00      	nop
 801abbc:	2000d0c0 	.word	0x2000d0c0

0801abc0 <_Balloc>:
 801abc0:	b570      	push	{r4, r5, r6, lr}
 801abc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801abc4:	4604      	mov	r4, r0
 801abc6:	460d      	mov	r5, r1
 801abc8:	b976      	cbnz	r6, 801abe8 <_Balloc+0x28>
 801abca:	2010      	movs	r0, #16
 801abcc:	f7fc face 	bl	801716c <malloc>
 801abd0:	4602      	mov	r2, r0
 801abd2:	6260      	str	r0, [r4, #36]	; 0x24
 801abd4:	b920      	cbnz	r0, 801abe0 <_Balloc+0x20>
 801abd6:	4b18      	ldr	r3, [pc, #96]	; (801ac38 <_Balloc+0x78>)
 801abd8:	4818      	ldr	r0, [pc, #96]	; (801ac3c <_Balloc+0x7c>)
 801abda:	2166      	movs	r1, #102	; 0x66
 801abdc:	f7fe fc6e 	bl	80194bc <__assert_func>
 801abe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801abe4:	6006      	str	r6, [r0, #0]
 801abe6:	60c6      	str	r6, [r0, #12]
 801abe8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801abea:	68f3      	ldr	r3, [r6, #12]
 801abec:	b183      	cbz	r3, 801ac10 <_Balloc+0x50>
 801abee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801abf0:	68db      	ldr	r3, [r3, #12]
 801abf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801abf6:	b9b8      	cbnz	r0, 801ac28 <_Balloc+0x68>
 801abf8:	2101      	movs	r1, #1
 801abfa:	fa01 f605 	lsl.w	r6, r1, r5
 801abfe:	1d72      	adds	r2, r6, #5
 801ac00:	0092      	lsls	r2, r2, #2
 801ac02:	4620      	mov	r0, r4
 801ac04:	f000 fc97 	bl	801b536 <_calloc_r>
 801ac08:	b160      	cbz	r0, 801ac24 <_Balloc+0x64>
 801ac0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801ac0e:	e00e      	b.n	801ac2e <_Balloc+0x6e>
 801ac10:	2221      	movs	r2, #33	; 0x21
 801ac12:	2104      	movs	r1, #4
 801ac14:	4620      	mov	r0, r4
 801ac16:	f000 fc8e 	bl	801b536 <_calloc_r>
 801ac1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ac1c:	60f0      	str	r0, [r6, #12]
 801ac1e:	68db      	ldr	r3, [r3, #12]
 801ac20:	2b00      	cmp	r3, #0
 801ac22:	d1e4      	bne.n	801abee <_Balloc+0x2e>
 801ac24:	2000      	movs	r0, #0
 801ac26:	bd70      	pop	{r4, r5, r6, pc}
 801ac28:	6802      	ldr	r2, [r0, #0]
 801ac2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ac2e:	2300      	movs	r3, #0
 801ac30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ac34:	e7f7      	b.n	801ac26 <_Balloc+0x66>
 801ac36:	bf00      	nop
 801ac38:	0801d969 	.word	0x0801d969
 801ac3c:	0801da70 	.word	0x0801da70

0801ac40 <_Bfree>:
 801ac40:	b570      	push	{r4, r5, r6, lr}
 801ac42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801ac44:	4605      	mov	r5, r0
 801ac46:	460c      	mov	r4, r1
 801ac48:	b976      	cbnz	r6, 801ac68 <_Bfree+0x28>
 801ac4a:	2010      	movs	r0, #16
 801ac4c:	f7fc fa8e 	bl	801716c <malloc>
 801ac50:	4602      	mov	r2, r0
 801ac52:	6268      	str	r0, [r5, #36]	; 0x24
 801ac54:	b920      	cbnz	r0, 801ac60 <_Bfree+0x20>
 801ac56:	4b09      	ldr	r3, [pc, #36]	; (801ac7c <_Bfree+0x3c>)
 801ac58:	4809      	ldr	r0, [pc, #36]	; (801ac80 <_Bfree+0x40>)
 801ac5a:	218a      	movs	r1, #138	; 0x8a
 801ac5c:	f7fe fc2e 	bl	80194bc <__assert_func>
 801ac60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ac64:	6006      	str	r6, [r0, #0]
 801ac66:	60c6      	str	r6, [r0, #12]
 801ac68:	b13c      	cbz	r4, 801ac7a <_Bfree+0x3a>
 801ac6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801ac6c:	6862      	ldr	r2, [r4, #4]
 801ac6e:	68db      	ldr	r3, [r3, #12]
 801ac70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ac74:	6021      	str	r1, [r4, #0]
 801ac76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801ac7a:	bd70      	pop	{r4, r5, r6, pc}
 801ac7c:	0801d969 	.word	0x0801d969
 801ac80:	0801da70 	.word	0x0801da70

0801ac84 <__multadd>:
 801ac84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac88:	690e      	ldr	r6, [r1, #16]
 801ac8a:	4607      	mov	r7, r0
 801ac8c:	4698      	mov	r8, r3
 801ac8e:	460c      	mov	r4, r1
 801ac90:	f101 0014 	add.w	r0, r1, #20
 801ac94:	2300      	movs	r3, #0
 801ac96:	6805      	ldr	r5, [r0, #0]
 801ac98:	b2a9      	uxth	r1, r5
 801ac9a:	fb02 8101 	mla	r1, r2, r1, r8
 801ac9e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801aca2:	0c2d      	lsrs	r5, r5, #16
 801aca4:	fb02 c505 	mla	r5, r2, r5, ip
 801aca8:	b289      	uxth	r1, r1
 801acaa:	3301      	adds	r3, #1
 801acac:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801acb0:	429e      	cmp	r6, r3
 801acb2:	f840 1b04 	str.w	r1, [r0], #4
 801acb6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801acba:	dcec      	bgt.n	801ac96 <__multadd+0x12>
 801acbc:	f1b8 0f00 	cmp.w	r8, #0
 801acc0:	d022      	beq.n	801ad08 <__multadd+0x84>
 801acc2:	68a3      	ldr	r3, [r4, #8]
 801acc4:	42b3      	cmp	r3, r6
 801acc6:	dc19      	bgt.n	801acfc <__multadd+0x78>
 801acc8:	6861      	ldr	r1, [r4, #4]
 801acca:	4638      	mov	r0, r7
 801accc:	3101      	adds	r1, #1
 801acce:	f7ff ff77 	bl	801abc0 <_Balloc>
 801acd2:	4605      	mov	r5, r0
 801acd4:	b928      	cbnz	r0, 801ace2 <__multadd+0x5e>
 801acd6:	4602      	mov	r2, r0
 801acd8:	4b0d      	ldr	r3, [pc, #52]	; (801ad10 <__multadd+0x8c>)
 801acda:	480e      	ldr	r0, [pc, #56]	; (801ad14 <__multadd+0x90>)
 801acdc:	21b5      	movs	r1, #181	; 0xb5
 801acde:	f7fe fbed 	bl	80194bc <__assert_func>
 801ace2:	6922      	ldr	r2, [r4, #16]
 801ace4:	3202      	adds	r2, #2
 801ace6:	f104 010c 	add.w	r1, r4, #12
 801acea:	0092      	lsls	r2, r2, #2
 801acec:	300c      	adds	r0, #12
 801acee:	f7fc fa4d 	bl	801718c <memcpy>
 801acf2:	4621      	mov	r1, r4
 801acf4:	4638      	mov	r0, r7
 801acf6:	f7ff ffa3 	bl	801ac40 <_Bfree>
 801acfa:	462c      	mov	r4, r5
 801acfc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801ad00:	3601      	adds	r6, #1
 801ad02:	f8c3 8014 	str.w	r8, [r3, #20]
 801ad06:	6126      	str	r6, [r4, #16]
 801ad08:	4620      	mov	r0, r4
 801ad0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad0e:	bf00      	nop
 801ad10:	0801d9df 	.word	0x0801d9df
 801ad14:	0801da70 	.word	0x0801da70

0801ad18 <__s2b>:
 801ad18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad1c:	460c      	mov	r4, r1
 801ad1e:	4615      	mov	r5, r2
 801ad20:	461f      	mov	r7, r3
 801ad22:	2209      	movs	r2, #9
 801ad24:	3308      	adds	r3, #8
 801ad26:	4606      	mov	r6, r0
 801ad28:	fb93 f3f2 	sdiv	r3, r3, r2
 801ad2c:	2100      	movs	r1, #0
 801ad2e:	2201      	movs	r2, #1
 801ad30:	429a      	cmp	r2, r3
 801ad32:	db09      	blt.n	801ad48 <__s2b+0x30>
 801ad34:	4630      	mov	r0, r6
 801ad36:	f7ff ff43 	bl	801abc0 <_Balloc>
 801ad3a:	b940      	cbnz	r0, 801ad4e <__s2b+0x36>
 801ad3c:	4602      	mov	r2, r0
 801ad3e:	4b19      	ldr	r3, [pc, #100]	; (801ada4 <__s2b+0x8c>)
 801ad40:	4819      	ldr	r0, [pc, #100]	; (801ada8 <__s2b+0x90>)
 801ad42:	21ce      	movs	r1, #206	; 0xce
 801ad44:	f7fe fbba 	bl	80194bc <__assert_func>
 801ad48:	0052      	lsls	r2, r2, #1
 801ad4a:	3101      	adds	r1, #1
 801ad4c:	e7f0      	b.n	801ad30 <__s2b+0x18>
 801ad4e:	9b08      	ldr	r3, [sp, #32]
 801ad50:	6143      	str	r3, [r0, #20]
 801ad52:	2d09      	cmp	r5, #9
 801ad54:	f04f 0301 	mov.w	r3, #1
 801ad58:	6103      	str	r3, [r0, #16]
 801ad5a:	dd16      	ble.n	801ad8a <__s2b+0x72>
 801ad5c:	f104 0909 	add.w	r9, r4, #9
 801ad60:	46c8      	mov	r8, r9
 801ad62:	442c      	add	r4, r5
 801ad64:	f818 3b01 	ldrb.w	r3, [r8], #1
 801ad68:	4601      	mov	r1, r0
 801ad6a:	3b30      	subs	r3, #48	; 0x30
 801ad6c:	220a      	movs	r2, #10
 801ad6e:	4630      	mov	r0, r6
 801ad70:	f7ff ff88 	bl	801ac84 <__multadd>
 801ad74:	45a0      	cmp	r8, r4
 801ad76:	d1f5      	bne.n	801ad64 <__s2b+0x4c>
 801ad78:	f1a5 0408 	sub.w	r4, r5, #8
 801ad7c:	444c      	add	r4, r9
 801ad7e:	1b2d      	subs	r5, r5, r4
 801ad80:	1963      	adds	r3, r4, r5
 801ad82:	42bb      	cmp	r3, r7
 801ad84:	db04      	blt.n	801ad90 <__s2b+0x78>
 801ad86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ad8a:	340a      	adds	r4, #10
 801ad8c:	2509      	movs	r5, #9
 801ad8e:	e7f6      	b.n	801ad7e <__s2b+0x66>
 801ad90:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ad94:	4601      	mov	r1, r0
 801ad96:	3b30      	subs	r3, #48	; 0x30
 801ad98:	220a      	movs	r2, #10
 801ad9a:	4630      	mov	r0, r6
 801ad9c:	f7ff ff72 	bl	801ac84 <__multadd>
 801ada0:	e7ee      	b.n	801ad80 <__s2b+0x68>
 801ada2:	bf00      	nop
 801ada4:	0801d9df 	.word	0x0801d9df
 801ada8:	0801da70 	.word	0x0801da70

0801adac <__hi0bits>:
 801adac:	0c03      	lsrs	r3, r0, #16
 801adae:	041b      	lsls	r3, r3, #16
 801adb0:	b9d3      	cbnz	r3, 801ade8 <__hi0bits+0x3c>
 801adb2:	0400      	lsls	r0, r0, #16
 801adb4:	2310      	movs	r3, #16
 801adb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801adba:	bf04      	itt	eq
 801adbc:	0200      	lsleq	r0, r0, #8
 801adbe:	3308      	addeq	r3, #8
 801adc0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801adc4:	bf04      	itt	eq
 801adc6:	0100      	lsleq	r0, r0, #4
 801adc8:	3304      	addeq	r3, #4
 801adca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801adce:	bf04      	itt	eq
 801add0:	0080      	lsleq	r0, r0, #2
 801add2:	3302      	addeq	r3, #2
 801add4:	2800      	cmp	r0, #0
 801add6:	db05      	blt.n	801ade4 <__hi0bits+0x38>
 801add8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801addc:	f103 0301 	add.w	r3, r3, #1
 801ade0:	bf08      	it	eq
 801ade2:	2320      	moveq	r3, #32
 801ade4:	4618      	mov	r0, r3
 801ade6:	4770      	bx	lr
 801ade8:	2300      	movs	r3, #0
 801adea:	e7e4      	b.n	801adb6 <__hi0bits+0xa>

0801adec <__lo0bits>:
 801adec:	6803      	ldr	r3, [r0, #0]
 801adee:	f013 0207 	ands.w	r2, r3, #7
 801adf2:	4601      	mov	r1, r0
 801adf4:	d00b      	beq.n	801ae0e <__lo0bits+0x22>
 801adf6:	07da      	lsls	r2, r3, #31
 801adf8:	d424      	bmi.n	801ae44 <__lo0bits+0x58>
 801adfa:	0798      	lsls	r0, r3, #30
 801adfc:	bf49      	itett	mi
 801adfe:	085b      	lsrmi	r3, r3, #1
 801ae00:	089b      	lsrpl	r3, r3, #2
 801ae02:	2001      	movmi	r0, #1
 801ae04:	600b      	strmi	r3, [r1, #0]
 801ae06:	bf5c      	itt	pl
 801ae08:	600b      	strpl	r3, [r1, #0]
 801ae0a:	2002      	movpl	r0, #2
 801ae0c:	4770      	bx	lr
 801ae0e:	b298      	uxth	r0, r3
 801ae10:	b9b0      	cbnz	r0, 801ae40 <__lo0bits+0x54>
 801ae12:	0c1b      	lsrs	r3, r3, #16
 801ae14:	2010      	movs	r0, #16
 801ae16:	f013 0fff 	tst.w	r3, #255	; 0xff
 801ae1a:	bf04      	itt	eq
 801ae1c:	0a1b      	lsreq	r3, r3, #8
 801ae1e:	3008      	addeq	r0, #8
 801ae20:	071a      	lsls	r2, r3, #28
 801ae22:	bf04      	itt	eq
 801ae24:	091b      	lsreq	r3, r3, #4
 801ae26:	3004      	addeq	r0, #4
 801ae28:	079a      	lsls	r2, r3, #30
 801ae2a:	bf04      	itt	eq
 801ae2c:	089b      	lsreq	r3, r3, #2
 801ae2e:	3002      	addeq	r0, #2
 801ae30:	07da      	lsls	r2, r3, #31
 801ae32:	d403      	bmi.n	801ae3c <__lo0bits+0x50>
 801ae34:	085b      	lsrs	r3, r3, #1
 801ae36:	f100 0001 	add.w	r0, r0, #1
 801ae3a:	d005      	beq.n	801ae48 <__lo0bits+0x5c>
 801ae3c:	600b      	str	r3, [r1, #0]
 801ae3e:	4770      	bx	lr
 801ae40:	4610      	mov	r0, r2
 801ae42:	e7e8      	b.n	801ae16 <__lo0bits+0x2a>
 801ae44:	2000      	movs	r0, #0
 801ae46:	4770      	bx	lr
 801ae48:	2020      	movs	r0, #32
 801ae4a:	4770      	bx	lr

0801ae4c <__i2b>:
 801ae4c:	b510      	push	{r4, lr}
 801ae4e:	460c      	mov	r4, r1
 801ae50:	2101      	movs	r1, #1
 801ae52:	f7ff feb5 	bl	801abc0 <_Balloc>
 801ae56:	4602      	mov	r2, r0
 801ae58:	b928      	cbnz	r0, 801ae66 <__i2b+0x1a>
 801ae5a:	4b05      	ldr	r3, [pc, #20]	; (801ae70 <__i2b+0x24>)
 801ae5c:	4805      	ldr	r0, [pc, #20]	; (801ae74 <__i2b+0x28>)
 801ae5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801ae62:	f7fe fb2b 	bl	80194bc <__assert_func>
 801ae66:	2301      	movs	r3, #1
 801ae68:	6144      	str	r4, [r0, #20]
 801ae6a:	6103      	str	r3, [r0, #16]
 801ae6c:	bd10      	pop	{r4, pc}
 801ae6e:	bf00      	nop
 801ae70:	0801d9df 	.word	0x0801d9df
 801ae74:	0801da70 	.word	0x0801da70

0801ae78 <__multiply>:
 801ae78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae7c:	4614      	mov	r4, r2
 801ae7e:	690a      	ldr	r2, [r1, #16]
 801ae80:	6923      	ldr	r3, [r4, #16]
 801ae82:	429a      	cmp	r2, r3
 801ae84:	bfb8      	it	lt
 801ae86:	460b      	movlt	r3, r1
 801ae88:	460d      	mov	r5, r1
 801ae8a:	bfbc      	itt	lt
 801ae8c:	4625      	movlt	r5, r4
 801ae8e:	461c      	movlt	r4, r3
 801ae90:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801ae94:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801ae98:	68ab      	ldr	r3, [r5, #8]
 801ae9a:	6869      	ldr	r1, [r5, #4]
 801ae9c:	eb0a 0709 	add.w	r7, sl, r9
 801aea0:	42bb      	cmp	r3, r7
 801aea2:	b085      	sub	sp, #20
 801aea4:	bfb8      	it	lt
 801aea6:	3101      	addlt	r1, #1
 801aea8:	f7ff fe8a 	bl	801abc0 <_Balloc>
 801aeac:	b930      	cbnz	r0, 801aebc <__multiply+0x44>
 801aeae:	4602      	mov	r2, r0
 801aeb0:	4b42      	ldr	r3, [pc, #264]	; (801afbc <__multiply+0x144>)
 801aeb2:	4843      	ldr	r0, [pc, #268]	; (801afc0 <__multiply+0x148>)
 801aeb4:	f240 115d 	movw	r1, #349	; 0x15d
 801aeb8:	f7fe fb00 	bl	80194bc <__assert_func>
 801aebc:	f100 0614 	add.w	r6, r0, #20
 801aec0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801aec4:	4633      	mov	r3, r6
 801aec6:	2200      	movs	r2, #0
 801aec8:	4543      	cmp	r3, r8
 801aeca:	d31e      	bcc.n	801af0a <__multiply+0x92>
 801aecc:	f105 0c14 	add.w	ip, r5, #20
 801aed0:	f104 0314 	add.w	r3, r4, #20
 801aed4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801aed8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801aedc:	9202      	str	r2, [sp, #8]
 801aede:	ebac 0205 	sub.w	r2, ip, r5
 801aee2:	3a15      	subs	r2, #21
 801aee4:	f022 0203 	bic.w	r2, r2, #3
 801aee8:	3204      	adds	r2, #4
 801aeea:	f105 0115 	add.w	r1, r5, #21
 801aeee:	458c      	cmp	ip, r1
 801aef0:	bf38      	it	cc
 801aef2:	2204      	movcc	r2, #4
 801aef4:	9201      	str	r2, [sp, #4]
 801aef6:	9a02      	ldr	r2, [sp, #8]
 801aef8:	9303      	str	r3, [sp, #12]
 801aefa:	429a      	cmp	r2, r3
 801aefc:	d808      	bhi.n	801af10 <__multiply+0x98>
 801aefe:	2f00      	cmp	r7, #0
 801af00:	dc55      	bgt.n	801afae <__multiply+0x136>
 801af02:	6107      	str	r7, [r0, #16]
 801af04:	b005      	add	sp, #20
 801af06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af0a:	f843 2b04 	str.w	r2, [r3], #4
 801af0e:	e7db      	b.n	801aec8 <__multiply+0x50>
 801af10:	f8b3 a000 	ldrh.w	sl, [r3]
 801af14:	f1ba 0f00 	cmp.w	sl, #0
 801af18:	d020      	beq.n	801af5c <__multiply+0xe4>
 801af1a:	f105 0e14 	add.w	lr, r5, #20
 801af1e:	46b1      	mov	r9, r6
 801af20:	2200      	movs	r2, #0
 801af22:	f85e 4b04 	ldr.w	r4, [lr], #4
 801af26:	f8d9 b000 	ldr.w	fp, [r9]
 801af2a:	b2a1      	uxth	r1, r4
 801af2c:	fa1f fb8b 	uxth.w	fp, fp
 801af30:	fb0a b101 	mla	r1, sl, r1, fp
 801af34:	4411      	add	r1, r2
 801af36:	f8d9 2000 	ldr.w	r2, [r9]
 801af3a:	0c24      	lsrs	r4, r4, #16
 801af3c:	0c12      	lsrs	r2, r2, #16
 801af3e:	fb0a 2404 	mla	r4, sl, r4, r2
 801af42:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801af46:	b289      	uxth	r1, r1
 801af48:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801af4c:	45f4      	cmp	ip, lr
 801af4e:	f849 1b04 	str.w	r1, [r9], #4
 801af52:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801af56:	d8e4      	bhi.n	801af22 <__multiply+0xaa>
 801af58:	9901      	ldr	r1, [sp, #4]
 801af5a:	5072      	str	r2, [r6, r1]
 801af5c:	9a03      	ldr	r2, [sp, #12]
 801af5e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801af62:	3304      	adds	r3, #4
 801af64:	f1b9 0f00 	cmp.w	r9, #0
 801af68:	d01f      	beq.n	801afaa <__multiply+0x132>
 801af6a:	6834      	ldr	r4, [r6, #0]
 801af6c:	f105 0114 	add.w	r1, r5, #20
 801af70:	46b6      	mov	lr, r6
 801af72:	f04f 0a00 	mov.w	sl, #0
 801af76:	880a      	ldrh	r2, [r1, #0]
 801af78:	f8be b002 	ldrh.w	fp, [lr, #2]
 801af7c:	fb09 b202 	mla	r2, r9, r2, fp
 801af80:	4492      	add	sl, r2
 801af82:	b2a4      	uxth	r4, r4
 801af84:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801af88:	f84e 4b04 	str.w	r4, [lr], #4
 801af8c:	f851 4b04 	ldr.w	r4, [r1], #4
 801af90:	f8be 2000 	ldrh.w	r2, [lr]
 801af94:	0c24      	lsrs	r4, r4, #16
 801af96:	fb09 2404 	mla	r4, r9, r4, r2
 801af9a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801af9e:	458c      	cmp	ip, r1
 801afa0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801afa4:	d8e7      	bhi.n	801af76 <__multiply+0xfe>
 801afa6:	9a01      	ldr	r2, [sp, #4]
 801afa8:	50b4      	str	r4, [r6, r2]
 801afaa:	3604      	adds	r6, #4
 801afac:	e7a3      	b.n	801aef6 <__multiply+0x7e>
 801afae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801afb2:	2b00      	cmp	r3, #0
 801afb4:	d1a5      	bne.n	801af02 <__multiply+0x8a>
 801afb6:	3f01      	subs	r7, #1
 801afb8:	e7a1      	b.n	801aefe <__multiply+0x86>
 801afba:	bf00      	nop
 801afbc:	0801d9df 	.word	0x0801d9df
 801afc0:	0801da70 	.word	0x0801da70

0801afc4 <__pow5mult>:
 801afc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801afc8:	4615      	mov	r5, r2
 801afca:	f012 0203 	ands.w	r2, r2, #3
 801afce:	4606      	mov	r6, r0
 801afd0:	460f      	mov	r7, r1
 801afd2:	d007      	beq.n	801afe4 <__pow5mult+0x20>
 801afd4:	4c25      	ldr	r4, [pc, #148]	; (801b06c <__pow5mult+0xa8>)
 801afd6:	3a01      	subs	r2, #1
 801afd8:	2300      	movs	r3, #0
 801afda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801afde:	f7ff fe51 	bl	801ac84 <__multadd>
 801afe2:	4607      	mov	r7, r0
 801afe4:	10ad      	asrs	r5, r5, #2
 801afe6:	d03d      	beq.n	801b064 <__pow5mult+0xa0>
 801afe8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801afea:	b97c      	cbnz	r4, 801b00c <__pow5mult+0x48>
 801afec:	2010      	movs	r0, #16
 801afee:	f7fc f8bd 	bl	801716c <malloc>
 801aff2:	4602      	mov	r2, r0
 801aff4:	6270      	str	r0, [r6, #36]	; 0x24
 801aff6:	b928      	cbnz	r0, 801b004 <__pow5mult+0x40>
 801aff8:	4b1d      	ldr	r3, [pc, #116]	; (801b070 <__pow5mult+0xac>)
 801affa:	481e      	ldr	r0, [pc, #120]	; (801b074 <__pow5mult+0xb0>)
 801affc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801b000:	f7fe fa5c 	bl	80194bc <__assert_func>
 801b004:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b008:	6004      	str	r4, [r0, #0]
 801b00a:	60c4      	str	r4, [r0, #12]
 801b00c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801b010:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b014:	b94c      	cbnz	r4, 801b02a <__pow5mult+0x66>
 801b016:	f240 2171 	movw	r1, #625	; 0x271
 801b01a:	4630      	mov	r0, r6
 801b01c:	f7ff ff16 	bl	801ae4c <__i2b>
 801b020:	2300      	movs	r3, #0
 801b022:	f8c8 0008 	str.w	r0, [r8, #8]
 801b026:	4604      	mov	r4, r0
 801b028:	6003      	str	r3, [r0, #0]
 801b02a:	f04f 0900 	mov.w	r9, #0
 801b02e:	07eb      	lsls	r3, r5, #31
 801b030:	d50a      	bpl.n	801b048 <__pow5mult+0x84>
 801b032:	4639      	mov	r1, r7
 801b034:	4622      	mov	r2, r4
 801b036:	4630      	mov	r0, r6
 801b038:	f7ff ff1e 	bl	801ae78 <__multiply>
 801b03c:	4639      	mov	r1, r7
 801b03e:	4680      	mov	r8, r0
 801b040:	4630      	mov	r0, r6
 801b042:	f7ff fdfd 	bl	801ac40 <_Bfree>
 801b046:	4647      	mov	r7, r8
 801b048:	106d      	asrs	r5, r5, #1
 801b04a:	d00b      	beq.n	801b064 <__pow5mult+0xa0>
 801b04c:	6820      	ldr	r0, [r4, #0]
 801b04e:	b938      	cbnz	r0, 801b060 <__pow5mult+0x9c>
 801b050:	4622      	mov	r2, r4
 801b052:	4621      	mov	r1, r4
 801b054:	4630      	mov	r0, r6
 801b056:	f7ff ff0f 	bl	801ae78 <__multiply>
 801b05a:	6020      	str	r0, [r4, #0]
 801b05c:	f8c0 9000 	str.w	r9, [r0]
 801b060:	4604      	mov	r4, r0
 801b062:	e7e4      	b.n	801b02e <__pow5mult+0x6a>
 801b064:	4638      	mov	r0, r7
 801b066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b06a:	bf00      	nop
 801b06c:	0801dbc0 	.word	0x0801dbc0
 801b070:	0801d969 	.word	0x0801d969
 801b074:	0801da70 	.word	0x0801da70

0801b078 <__lshift>:
 801b078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b07c:	460c      	mov	r4, r1
 801b07e:	6849      	ldr	r1, [r1, #4]
 801b080:	6923      	ldr	r3, [r4, #16]
 801b082:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b086:	68a3      	ldr	r3, [r4, #8]
 801b088:	4607      	mov	r7, r0
 801b08a:	4691      	mov	r9, r2
 801b08c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b090:	f108 0601 	add.w	r6, r8, #1
 801b094:	42b3      	cmp	r3, r6
 801b096:	db0b      	blt.n	801b0b0 <__lshift+0x38>
 801b098:	4638      	mov	r0, r7
 801b09a:	f7ff fd91 	bl	801abc0 <_Balloc>
 801b09e:	4605      	mov	r5, r0
 801b0a0:	b948      	cbnz	r0, 801b0b6 <__lshift+0x3e>
 801b0a2:	4602      	mov	r2, r0
 801b0a4:	4b28      	ldr	r3, [pc, #160]	; (801b148 <__lshift+0xd0>)
 801b0a6:	4829      	ldr	r0, [pc, #164]	; (801b14c <__lshift+0xd4>)
 801b0a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 801b0ac:	f7fe fa06 	bl	80194bc <__assert_func>
 801b0b0:	3101      	adds	r1, #1
 801b0b2:	005b      	lsls	r3, r3, #1
 801b0b4:	e7ee      	b.n	801b094 <__lshift+0x1c>
 801b0b6:	2300      	movs	r3, #0
 801b0b8:	f100 0114 	add.w	r1, r0, #20
 801b0bc:	f100 0210 	add.w	r2, r0, #16
 801b0c0:	4618      	mov	r0, r3
 801b0c2:	4553      	cmp	r3, sl
 801b0c4:	db33      	blt.n	801b12e <__lshift+0xb6>
 801b0c6:	6920      	ldr	r0, [r4, #16]
 801b0c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b0cc:	f104 0314 	add.w	r3, r4, #20
 801b0d0:	f019 091f 	ands.w	r9, r9, #31
 801b0d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b0d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b0dc:	d02b      	beq.n	801b136 <__lshift+0xbe>
 801b0de:	f1c9 0e20 	rsb	lr, r9, #32
 801b0e2:	468a      	mov	sl, r1
 801b0e4:	2200      	movs	r2, #0
 801b0e6:	6818      	ldr	r0, [r3, #0]
 801b0e8:	fa00 f009 	lsl.w	r0, r0, r9
 801b0ec:	4302      	orrs	r2, r0
 801b0ee:	f84a 2b04 	str.w	r2, [sl], #4
 801b0f2:	f853 2b04 	ldr.w	r2, [r3], #4
 801b0f6:	459c      	cmp	ip, r3
 801b0f8:	fa22 f20e 	lsr.w	r2, r2, lr
 801b0fc:	d8f3      	bhi.n	801b0e6 <__lshift+0x6e>
 801b0fe:	ebac 0304 	sub.w	r3, ip, r4
 801b102:	3b15      	subs	r3, #21
 801b104:	f023 0303 	bic.w	r3, r3, #3
 801b108:	3304      	adds	r3, #4
 801b10a:	f104 0015 	add.w	r0, r4, #21
 801b10e:	4584      	cmp	ip, r0
 801b110:	bf38      	it	cc
 801b112:	2304      	movcc	r3, #4
 801b114:	50ca      	str	r2, [r1, r3]
 801b116:	b10a      	cbz	r2, 801b11c <__lshift+0xa4>
 801b118:	f108 0602 	add.w	r6, r8, #2
 801b11c:	3e01      	subs	r6, #1
 801b11e:	4638      	mov	r0, r7
 801b120:	612e      	str	r6, [r5, #16]
 801b122:	4621      	mov	r1, r4
 801b124:	f7ff fd8c 	bl	801ac40 <_Bfree>
 801b128:	4628      	mov	r0, r5
 801b12a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b12e:	f842 0f04 	str.w	r0, [r2, #4]!
 801b132:	3301      	adds	r3, #1
 801b134:	e7c5      	b.n	801b0c2 <__lshift+0x4a>
 801b136:	3904      	subs	r1, #4
 801b138:	f853 2b04 	ldr.w	r2, [r3], #4
 801b13c:	f841 2f04 	str.w	r2, [r1, #4]!
 801b140:	459c      	cmp	ip, r3
 801b142:	d8f9      	bhi.n	801b138 <__lshift+0xc0>
 801b144:	e7ea      	b.n	801b11c <__lshift+0xa4>
 801b146:	bf00      	nop
 801b148:	0801d9df 	.word	0x0801d9df
 801b14c:	0801da70 	.word	0x0801da70

0801b150 <__mcmp>:
 801b150:	b530      	push	{r4, r5, lr}
 801b152:	6902      	ldr	r2, [r0, #16]
 801b154:	690c      	ldr	r4, [r1, #16]
 801b156:	1b12      	subs	r2, r2, r4
 801b158:	d10e      	bne.n	801b178 <__mcmp+0x28>
 801b15a:	f100 0314 	add.w	r3, r0, #20
 801b15e:	3114      	adds	r1, #20
 801b160:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801b164:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801b168:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801b16c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801b170:	42a5      	cmp	r5, r4
 801b172:	d003      	beq.n	801b17c <__mcmp+0x2c>
 801b174:	d305      	bcc.n	801b182 <__mcmp+0x32>
 801b176:	2201      	movs	r2, #1
 801b178:	4610      	mov	r0, r2
 801b17a:	bd30      	pop	{r4, r5, pc}
 801b17c:	4283      	cmp	r3, r0
 801b17e:	d3f3      	bcc.n	801b168 <__mcmp+0x18>
 801b180:	e7fa      	b.n	801b178 <__mcmp+0x28>
 801b182:	f04f 32ff 	mov.w	r2, #4294967295
 801b186:	e7f7      	b.n	801b178 <__mcmp+0x28>

0801b188 <__mdiff>:
 801b188:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b18c:	460c      	mov	r4, r1
 801b18e:	4606      	mov	r6, r0
 801b190:	4611      	mov	r1, r2
 801b192:	4620      	mov	r0, r4
 801b194:	4617      	mov	r7, r2
 801b196:	f7ff ffdb 	bl	801b150 <__mcmp>
 801b19a:	1e05      	subs	r5, r0, #0
 801b19c:	d110      	bne.n	801b1c0 <__mdiff+0x38>
 801b19e:	4629      	mov	r1, r5
 801b1a0:	4630      	mov	r0, r6
 801b1a2:	f7ff fd0d 	bl	801abc0 <_Balloc>
 801b1a6:	b930      	cbnz	r0, 801b1b6 <__mdiff+0x2e>
 801b1a8:	4b39      	ldr	r3, [pc, #228]	; (801b290 <__mdiff+0x108>)
 801b1aa:	4602      	mov	r2, r0
 801b1ac:	f240 2132 	movw	r1, #562	; 0x232
 801b1b0:	4838      	ldr	r0, [pc, #224]	; (801b294 <__mdiff+0x10c>)
 801b1b2:	f7fe f983 	bl	80194bc <__assert_func>
 801b1b6:	2301      	movs	r3, #1
 801b1b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b1bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1c0:	bfa4      	itt	ge
 801b1c2:	463b      	movge	r3, r7
 801b1c4:	4627      	movge	r7, r4
 801b1c6:	4630      	mov	r0, r6
 801b1c8:	6879      	ldr	r1, [r7, #4]
 801b1ca:	bfa6      	itte	ge
 801b1cc:	461c      	movge	r4, r3
 801b1ce:	2500      	movge	r5, #0
 801b1d0:	2501      	movlt	r5, #1
 801b1d2:	f7ff fcf5 	bl	801abc0 <_Balloc>
 801b1d6:	b920      	cbnz	r0, 801b1e2 <__mdiff+0x5a>
 801b1d8:	4b2d      	ldr	r3, [pc, #180]	; (801b290 <__mdiff+0x108>)
 801b1da:	4602      	mov	r2, r0
 801b1dc:	f44f 7110 	mov.w	r1, #576	; 0x240
 801b1e0:	e7e6      	b.n	801b1b0 <__mdiff+0x28>
 801b1e2:	693e      	ldr	r6, [r7, #16]
 801b1e4:	60c5      	str	r5, [r0, #12]
 801b1e6:	6925      	ldr	r5, [r4, #16]
 801b1e8:	f107 0114 	add.w	r1, r7, #20
 801b1ec:	f104 0914 	add.w	r9, r4, #20
 801b1f0:	f100 0e14 	add.w	lr, r0, #20
 801b1f4:	f107 0210 	add.w	r2, r7, #16
 801b1f8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801b1fc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801b200:	46f2      	mov	sl, lr
 801b202:	2700      	movs	r7, #0
 801b204:	f859 3b04 	ldr.w	r3, [r9], #4
 801b208:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801b20c:	fa1f f883 	uxth.w	r8, r3
 801b210:	fa17 f78b 	uxtah	r7, r7, fp
 801b214:	0c1b      	lsrs	r3, r3, #16
 801b216:	eba7 0808 	sub.w	r8, r7, r8
 801b21a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801b21e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801b222:	fa1f f888 	uxth.w	r8, r8
 801b226:	141f      	asrs	r7, r3, #16
 801b228:	454d      	cmp	r5, r9
 801b22a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801b22e:	f84a 3b04 	str.w	r3, [sl], #4
 801b232:	d8e7      	bhi.n	801b204 <__mdiff+0x7c>
 801b234:	1b2b      	subs	r3, r5, r4
 801b236:	3b15      	subs	r3, #21
 801b238:	f023 0303 	bic.w	r3, r3, #3
 801b23c:	3304      	adds	r3, #4
 801b23e:	3415      	adds	r4, #21
 801b240:	42a5      	cmp	r5, r4
 801b242:	bf38      	it	cc
 801b244:	2304      	movcc	r3, #4
 801b246:	4419      	add	r1, r3
 801b248:	4473      	add	r3, lr
 801b24a:	469e      	mov	lr, r3
 801b24c:	460d      	mov	r5, r1
 801b24e:	4565      	cmp	r5, ip
 801b250:	d30e      	bcc.n	801b270 <__mdiff+0xe8>
 801b252:	f10c 0203 	add.w	r2, ip, #3
 801b256:	1a52      	subs	r2, r2, r1
 801b258:	f022 0203 	bic.w	r2, r2, #3
 801b25c:	3903      	subs	r1, #3
 801b25e:	458c      	cmp	ip, r1
 801b260:	bf38      	it	cc
 801b262:	2200      	movcc	r2, #0
 801b264:	441a      	add	r2, r3
 801b266:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801b26a:	b17b      	cbz	r3, 801b28c <__mdiff+0x104>
 801b26c:	6106      	str	r6, [r0, #16]
 801b26e:	e7a5      	b.n	801b1bc <__mdiff+0x34>
 801b270:	f855 8b04 	ldr.w	r8, [r5], #4
 801b274:	fa17 f488 	uxtah	r4, r7, r8
 801b278:	1422      	asrs	r2, r4, #16
 801b27a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801b27e:	b2a4      	uxth	r4, r4
 801b280:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801b284:	f84e 4b04 	str.w	r4, [lr], #4
 801b288:	1417      	asrs	r7, r2, #16
 801b28a:	e7e0      	b.n	801b24e <__mdiff+0xc6>
 801b28c:	3e01      	subs	r6, #1
 801b28e:	e7ea      	b.n	801b266 <__mdiff+0xde>
 801b290:	0801d9df 	.word	0x0801d9df
 801b294:	0801da70 	.word	0x0801da70

0801b298 <__ulp>:
 801b298:	b082      	sub	sp, #8
 801b29a:	ed8d 0b00 	vstr	d0, [sp]
 801b29e:	9b01      	ldr	r3, [sp, #4]
 801b2a0:	4912      	ldr	r1, [pc, #72]	; (801b2ec <__ulp+0x54>)
 801b2a2:	4019      	ands	r1, r3
 801b2a4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801b2a8:	2900      	cmp	r1, #0
 801b2aa:	dd05      	ble.n	801b2b8 <__ulp+0x20>
 801b2ac:	2200      	movs	r2, #0
 801b2ae:	460b      	mov	r3, r1
 801b2b0:	ec43 2b10 	vmov	d0, r2, r3
 801b2b4:	b002      	add	sp, #8
 801b2b6:	4770      	bx	lr
 801b2b8:	4249      	negs	r1, r1
 801b2ba:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801b2be:	ea4f 5021 	mov.w	r0, r1, asr #20
 801b2c2:	f04f 0200 	mov.w	r2, #0
 801b2c6:	f04f 0300 	mov.w	r3, #0
 801b2ca:	da04      	bge.n	801b2d6 <__ulp+0x3e>
 801b2cc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801b2d0:	fa41 f300 	asr.w	r3, r1, r0
 801b2d4:	e7ec      	b.n	801b2b0 <__ulp+0x18>
 801b2d6:	f1a0 0114 	sub.w	r1, r0, #20
 801b2da:	291e      	cmp	r1, #30
 801b2dc:	bfda      	itte	le
 801b2de:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801b2e2:	fa20 f101 	lsrle.w	r1, r0, r1
 801b2e6:	2101      	movgt	r1, #1
 801b2e8:	460a      	mov	r2, r1
 801b2ea:	e7e1      	b.n	801b2b0 <__ulp+0x18>
 801b2ec:	7ff00000 	.word	0x7ff00000

0801b2f0 <__b2d>:
 801b2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b2f2:	6905      	ldr	r5, [r0, #16]
 801b2f4:	f100 0714 	add.w	r7, r0, #20
 801b2f8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801b2fc:	1f2e      	subs	r6, r5, #4
 801b2fe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801b302:	4620      	mov	r0, r4
 801b304:	f7ff fd52 	bl	801adac <__hi0bits>
 801b308:	f1c0 0320 	rsb	r3, r0, #32
 801b30c:	280a      	cmp	r0, #10
 801b30e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801b38c <__b2d+0x9c>
 801b312:	600b      	str	r3, [r1, #0]
 801b314:	dc14      	bgt.n	801b340 <__b2d+0x50>
 801b316:	f1c0 0e0b 	rsb	lr, r0, #11
 801b31a:	fa24 f10e 	lsr.w	r1, r4, lr
 801b31e:	42b7      	cmp	r7, r6
 801b320:	ea41 030c 	orr.w	r3, r1, ip
 801b324:	bf34      	ite	cc
 801b326:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801b32a:	2100      	movcs	r1, #0
 801b32c:	3015      	adds	r0, #21
 801b32e:	fa04 f000 	lsl.w	r0, r4, r0
 801b332:	fa21 f10e 	lsr.w	r1, r1, lr
 801b336:	ea40 0201 	orr.w	r2, r0, r1
 801b33a:	ec43 2b10 	vmov	d0, r2, r3
 801b33e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b340:	42b7      	cmp	r7, r6
 801b342:	bf3a      	itte	cc
 801b344:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801b348:	f1a5 0608 	subcc.w	r6, r5, #8
 801b34c:	2100      	movcs	r1, #0
 801b34e:	380b      	subs	r0, #11
 801b350:	d017      	beq.n	801b382 <__b2d+0x92>
 801b352:	f1c0 0c20 	rsb	ip, r0, #32
 801b356:	fa04 f500 	lsl.w	r5, r4, r0
 801b35a:	42be      	cmp	r6, r7
 801b35c:	fa21 f40c 	lsr.w	r4, r1, ip
 801b360:	ea45 0504 	orr.w	r5, r5, r4
 801b364:	bf8c      	ite	hi
 801b366:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801b36a:	2400      	movls	r4, #0
 801b36c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801b370:	fa01 f000 	lsl.w	r0, r1, r0
 801b374:	fa24 f40c 	lsr.w	r4, r4, ip
 801b378:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801b37c:	ea40 0204 	orr.w	r2, r0, r4
 801b380:	e7db      	b.n	801b33a <__b2d+0x4a>
 801b382:	ea44 030c 	orr.w	r3, r4, ip
 801b386:	460a      	mov	r2, r1
 801b388:	e7d7      	b.n	801b33a <__b2d+0x4a>
 801b38a:	bf00      	nop
 801b38c:	3ff00000 	.word	0x3ff00000

0801b390 <__d2b>:
 801b390:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b394:	4689      	mov	r9, r1
 801b396:	2101      	movs	r1, #1
 801b398:	ec57 6b10 	vmov	r6, r7, d0
 801b39c:	4690      	mov	r8, r2
 801b39e:	f7ff fc0f 	bl	801abc0 <_Balloc>
 801b3a2:	4604      	mov	r4, r0
 801b3a4:	b930      	cbnz	r0, 801b3b4 <__d2b+0x24>
 801b3a6:	4602      	mov	r2, r0
 801b3a8:	4b25      	ldr	r3, [pc, #148]	; (801b440 <__d2b+0xb0>)
 801b3aa:	4826      	ldr	r0, [pc, #152]	; (801b444 <__d2b+0xb4>)
 801b3ac:	f240 310a 	movw	r1, #778	; 0x30a
 801b3b0:	f7fe f884 	bl	80194bc <__assert_func>
 801b3b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801b3b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801b3bc:	bb35      	cbnz	r5, 801b40c <__d2b+0x7c>
 801b3be:	2e00      	cmp	r6, #0
 801b3c0:	9301      	str	r3, [sp, #4]
 801b3c2:	d028      	beq.n	801b416 <__d2b+0x86>
 801b3c4:	4668      	mov	r0, sp
 801b3c6:	9600      	str	r6, [sp, #0]
 801b3c8:	f7ff fd10 	bl	801adec <__lo0bits>
 801b3cc:	9900      	ldr	r1, [sp, #0]
 801b3ce:	b300      	cbz	r0, 801b412 <__d2b+0x82>
 801b3d0:	9a01      	ldr	r2, [sp, #4]
 801b3d2:	f1c0 0320 	rsb	r3, r0, #32
 801b3d6:	fa02 f303 	lsl.w	r3, r2, r3
 801b3da:	430b      	orrs	r3, r1
 801b3dc:	40c2      	lsrs	r2, r0
 801b3de:	6163      	str	r3, [r4, #20]
 801b3e0:	9201      	str	r2, [sp, #4]
 801b3e2:	9b01      	ldr	r3, [sp, #4]
 801b3e4:	61a3      	str	r3, [r4, #24]
 801b3e6:	2b00      	cmp	r3, #0
 801b3e8:	bf14      	ite	ne
 801b3ea:	2202      	movne	r2, #2
 801b3ec:	2201      	moveq	r2, #1
 801b3ee:	6122      	str	r2, [r4, #16]
 801b3f0:	b1d5      	cbz	r5, 801b428 <__d2b+0x98>
 801b3f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801b3f6:	4405      	add	r5, r0
 801b3f8:	f8c9 5000 	str.w	r5, [r9]
 801b3fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801b400:	f8c8 0000 	str.w	r0, [r8]
 801b404:	4620      	mov	r0, r4
 801b406:	b003      	add	sp, #12
 801b408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b40c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b410:	e7d5      	b.n	801b3be <__d2b+0x2e>
 801b412:	6161      	str	r1, [r4, #20]
 801b414:	e7e5      	b.n	801b3e2 <__d2b+0x52>
 801b416:	a801      	add	r0, sp, #4
 801b418:	f7ff fce8 	bl	801adec <__lo0bits>
 801b41c:	9b01      	ldr	r3, [sp, #4]
 801b41e:	6163      	str	r3, [r4, #20]
 801b420:	2201      	movs	r2, #1
 801b422:	6122      	str	r2, [r4, #16]
 801b424:	3020      	adds	r0, #32
 801b426:	e7e3      	b.n	801b3f0 <__d2b+0x60>
 801b428:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b42c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801b430:	f8c9 0000 	str.w	r0, [r9]
 801b434:	6918      	ldr	r0, [r3, #16]
 801b436:	f7ff fcb9 	bl	801adac <__hi0bits>
 801b43a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801b43e:	e7df      	b.n	801b400 <__d2b+0x70>
 801b440:	0801d9df 	.word	0x0801d9df
 801b444:	0801da70 	.word	0x0801da70

0801b448 <__ratio>:
 801b448:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b44c:	4688      	mov	r8, r1
 801b44e:	4669      	mov	r1, sp
 801b450:	4681      	mov	r9, r0
 801b452:	f7ff ff4d 	bl	801b2f0 <__b2d>
 801b456:	a901      	add	r1, sp, #4
 801b458:	4640      	mov	r0, r8
 801b45a:	ec55 4b10 	vmov	r4, r5, d0
 801b45e:	f7ff ff47 	bl	801b2f0 <__b2d>
 801b462:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b466:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801b46a:	eba3 0c02 	sub.w	ip, r3, r2
 801b46e:	e9dd 3200 	ldrd	r3, r2, [sp]
 801b472:	1a9b      	subs	r3, r3, r2
 801b474:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801b478:	ec51 0b10 	vmov	r0, r1, d0
 801b47c:	2b00      	cmp	r3, #0
 801b47e:	bfd6      	itet	le
 801b480:	460a      	movle	r2, r1
 801b482:	462a      	movgt	r2, r5
 801b484:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801b488:	468b      	mov	fp, r1
 801b48a:	462f      	mov	r7, r5
 801b48c:	bfd4      	ite	le
 801b48e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801b492:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801b496:	4620      	mov	r0, r4
 801b498:	ee10 2a10 	vmov	r2, s0
 801b49c:	465b      	mov	r3, fp
 801b49e:	4639      	mov	r1, r7
 801b4a0:	f7e5 f9f4 	bl	800088c <__aeabi_ddiv>
 801b4a4:	ec41 0b10 	vmov	d0, r0, r1
 801b4a8:	b003      	add	sp, #12
 801b4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b4ae <__copybits>:
 801b4ae:	3901      	subs	r1, #1
 801b4b0:	b570      	push	{r4, r5, r6, lr}
 801b4b2:	1149      	asrs	r1, r1, #5
 801b4b4:	6914      	ldr	r4, [r2, #16]
 801b4b6:	3101      	adds	r1, #1
 801b4b8:	f102 0314 	add.w	r3, r2, #20
 801b4bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801b4c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801b4c4:	1f05      	subs	r5, r0, #4
 801b4c6:	42a3      	cmp	r3, r4
 801b4c8:	d30c      	bcc.n	801b4e4 <__copybits+0x36>
 801b4ca:	1aa3      	subs	r3, r4, r2
 801b4cc:	3b11      	subs	r3, #17
 801b4ce:	f023 0303 	bic.w	r3, r3, #3
 801b4d2:	3211      	adds	r2, #17
 801b4d4:	42a2      	cmp	r2, r4
 801b4d6:	bf88      	it	hi
 801b4d8:	2300      	movhi	r3, #0
 801b4da:	4418      	add	r0, r3
 801b4dc:	2300      	movs	r3, #0
 801b4de:	4288      	cmp	r0, r1
 801b4e0:	d305      	bcc.n	801b4ee <__copybits+0x40>
 801b4e2:	bd70      	pop	{r4, r5, r6, pc}
 801b4e4:	f853 6b04 	ldr.w	r6, [r3], #4
 801b4e8:	f845 6f04 	str.w	r6, [r5, #4]!
 801b4ec:	e7eb      	b.n	801b4c6 <__copybits+0x18>
 801b4ee:	f840 3b04 	str.w	r3, [r0], #4
 801b4f2:	e7f4      	b.n	801b4de <__copybits+0x30>

0801b4f4 <__any_on>:
 801b4f4:	f100 0214 	add.w	r2, r0, #20
 801b4f8:	6900      	ldr	r0, [r0, #16]
 801b4fa:	114b      	asrs	r3, r1, #5
 801b4fc:	4298      	cmp	r0, r3
 801b4fe:	b510      	push	{r4, lr}
 801b500:	db11      	blt.n	801b526 <__any_on+0x32>
 801b502:	dd0a      	ble.n	801b51a <__any_on+0x26>
 801b504:	f011 011f 	ands.w	r1, r1, #31
 801b508:	d007      	beq.n	801b51a <__any_on+0x26>
 801b50a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801b50e:	fa24 f001 	lsr.w	r0, r4, r1
 801b512:	fa00 f101 	lsl.w	r1, r0, r1
 801b516:	428c      	cmp	r4, r1
 801b518:	d10b      	bne.n	801b532 <__any_on+0x3e>
 801b51a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b51e:	4293      	cmp	r3, r2
 801b520:	d803      	bhi.n	801b52a <__any_on+0x36>
 801b522:	2000      	movs	r0, #0
 801b524:	bd10      	pop	{r4, pc}
 801b526:	4603      	mov	r3, r0
 801b528:	e7f7      	b.n	801b51a <__any_on+0x26>
 801b52a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801b52e:	2900      	cmp	r1, #0
 801b530:	d0f5      	beq.n	801b51e <__any_on+0x2a>
 801b532:	2001      	movs	r0, #1
 801b534:	e7f6      	b.n	801b524 <__any_on+0x30>

0801b536 <_calloc_r>:
 801b536:	b513      	push	{r0, r1, r4, lr}
 801b538:	434a      	muls	r2, r1
 801b53a:	4611      	mov	r1, r2
 801b53c:	9201      	str	r2, [sp, #4]
 801b53e:	f7fb fea5 	bl	801728c <_malloc_r>
 801b542:	4604      	mov	r4, r0
 801b544:	b118      	cbz	r0, 801b54e <_calloc_r+0x18>
 801b546:	9a01      	ldr	r2, [sp, #4]
 801b548:	2100      	movs	r1, #0
 801b54a:	f7fb fe47 	bl	80171dc <memset>
 801b54e:	4620      	mov	r0, r4
 801b550:	b002      	add	sp, #8
 801b552:	bd10      	pop	{r4, pc}

0801b554 <_realloc_r>:
 801b554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b556:	4607      	mov	r7, r0
 801b558:	4614      	mov	r4, r2
 801b55a:	460e      	mov	r6, r1
 801b55c:	b921      	cbnz	r1, 801b568 <_realloc_r+0x14>
 801b55e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801b562:	4611      	mov	r1, r2
 801b564:	f7fb be92 	b.w	801728c <_malloc_r>
 801b568:	b922      	cbnz	r2, 801b574 <_realloc_r+0x20>
 801b56a:	f7fb fe3f 	bl	80171ec <_free_r>
 801b56e:	4625      	mov	r5, r4
 801b570:	4628      	mov	r0, r5
 801b572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b574:	f000 fe9e 	bl	801c2b4 <_malloc_usable_size_r>
 801b578:	42a0      	cmp	r0, r4
 801b57a:	d20f      	bcs.n	801b59c <_realloc_r+0x48>
 801b57c:	4621      	mov	r1, r4
 801b57e:	4638      	mov	r0, r7
 801b580:	f7fb fe84 	bl	801728c <_malloc_r>
 801b584:	4605      	mov	r5, r0
 801b586:	2800      	cmp	r0, #0
 801b588:	d0f2      	beq.n	801b570 <_realloc_r+0x1c>
 801b58a:	4631      	mov	r1, r6
 801b58c:	4622      	mov	r2, r4
 801b58e:	f7fb fdfd 	bl	801718c <memcpy>
 801b592:	4631      	mov	r1, r6
 801b594:	4638      	mov	r0, r7
 801b596:	f7fb fe29 	bl	80171ec <_free_r>
 801b59a:	e7e9      	b.n	801b570 <_realloc_r+0x1c>
 801b59c:	4635      	mov	r5, r6
 801b59e:	e7e7      	b.n	801b570 <_realloc_r+0x1c>

0801b5a0 <__ssputs_r>:
 801b5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b5a4:	688e      	ldr	r6, [r1, #8]
 801b5a6:	429e      	cmp	r6, r3
 801b5a8:	4682      	mov	sl, r0
 801b5aa:	460c      	mov	r4, r1
 801b5ac:	4690      	mov	r8, r2
 801b5ae:	461f      	mov	r7, r3
 801b5b0:	d838      	bhi.n	801b624 <__ssputs_r+0x84>
 801b5b2:	898a      	ldrh	r2, [r1, #12]
 801b5b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b5b8:	d032      	beq.n	801b620 <__ssputs_r+0x80>
 801b5ba:	6825      	ldr	r5, [r4, #0]
 801b5bc:	6909      	ldr	r1, [r1, #16]
 801b5be:	eba5 0901 	sub.w	r9, r5, r1
 801b5c2:	6965      	ldr	r5, [r4, #20]
 801b5c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b5c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b5cc:	3301      	adds	r3, #1
 801b5ce:	444b      	add	r3, r9
 801b5d0:	106d      	asrs	r5, r5, #1
 801b5d2:	429d      	cmp	r5, r3
 801b5d4:	bf38      	it	cc
 801b5d6:	461d      	movcc	r5, r3
 801b5d8:	0553      	lsls	r3, r2, #21
 801b5da:	d531      	bpl.n	801b640 <__ssputs_r+0xa0>
 801b5dc:	4629      	mov	r1, r5
 801b5de:	f7fb fe55 	bl	801728c <_malloc_r>
 801b5e2:	4606      	mov	r6, r0
 801b5e4:	b950      	cbnz	r0, 801b5fc <__ssputs_r+0x5c>
 801b5e6:	230c      	movs	r3, #12
 801b5e8:	f8ca 3000 	str.w	r3, [sl]
 801b5ec:	89a3      	ldrh	r3, [r4, #12]
 801b5ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b5f2:	81a3      	strh	r3, [r4, #12]
 801b5f4:	f04f 30ff 	mov.w	r0, #4294967295
 801b5f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b5fc:	6921      	ldr	r1, [r4, #16]
 801b5fe:	464a      	mov	r2, r9
 801b600:	f7fb fdc4 	bl	801718c <memcpy>
 801b604:	89a3      	ldrh	r3, [r4, #12]
 801b606:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b60a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b60e:	81a3      	strh	r3, [r4, #12]
 801b610:	6126      	str	r6, [r4, #16]
 801b612:	6165      	str	r5, [r4, #20]
 801b614:	444e      	add	r6, r9
 801b616:	eba5 0509 	sub.w	r5, r5, r9
 801b61a:	6026      	str	r6, [r4, #0]
 801b61c:	60a5      	str	r5, [r4, #8]
 801b61e:	463e      	mov	r6, r7
 801b620:	42be      	cmp	r6, r7
 801b622:	d900      	bls.n	801b626 <__ssputs_r+0x86>
 801b624:	463e      	mov	r6, r7
 801b626:	4632      	mov	r2, r6
 801b628:	6820      	ldr	r0, [r4, #0]
 801b62a:	4641      	mov	r1, r8
 801b62c:	f7fb fdbc 	bl	80171a8 <memmove>
 801b630:	68a3      	ldr	r3, [r4, #8]
 801b632:	6822      	ldr	r2, [r4, #0]
 801b634:	1b9b      	subs	r3, r3, r6
 801b636:	4432      	add	r2, r6
 801b638:	60a3      	str	r3, [r4, #8]
 801b63a:	6022      	str	r2, [r4, #0]
 801b63c:	2000      	movs	r0, #0
 801b63e:	e7db      	b.n	801b5f8 <__ssputs_r+0x58>
 801b640:	462a      	mov	r2, r5
 801b642:	f7ff ff87 	bl	801b554 <_realloc_r>
 801b646:	4606      	mov	r6, r0
 801b648:	2800      	cmp	r0, #0
 801b64a:	d1e1      	bne.n	801b610 <__ssputs_r+0x70>
 801b64c:	6921      	ldr	r1, [r4, #16]
 801b64e:	4650      	mov	r0, sl
 801b650:	f7fb fdcc 	bl	80171ec <_free_r>
 801b654:	e7c7      	b.n	801b5e6 <__ssputs_r+0x46>
	...

0801b658 <_svfiprintf_r>:
 801b658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b65c:	4698      	mov	r8, r3
 801b65e:	898b      	ldrh	r3, [r1, #12]
 801b660:	061b      	lsls	r3, r3, #24
 801b662:	b09d      	sub	sp, #116	; 0x74
 801b664:	4607      	mov	r7, r0
 801b666:	460d      	mov	r5, r1
 801b668:	4614      	mov	r4, r2
 801b66a:	d50e      	bpl.n	801b68a <_svfiprintf_r+0x32>
 801b66c:	690b      	ldr	r3, [r1, #16]
 801b66e:	b963      	cbnz	r3, 801b68a <_svfiprintf_r+0x32>
 801b670:	2140      	movs	r1, #64	; 0x40
 801b672:	f7fb fe0b 	bl	801728c <_malloc_r>
 801b676:	6028      	str	r0, [r5, #0]
 801b678:	6128      	str	r0, [r5, #16]
 801b67a:	b920      	cbnz	r0, 801b686 <_svfiprintf_r+0x2e>
 801b67c:	230c      	movs	r3, #12
 801b67e:	603b      	str	r3, [r7, #0]
 801b680:	f04f 30ff 	mov.w	r0, #4294967295
 801b684:	e0d1      	b.n	801b82a <_svfiprintf_r+0x1d2>
 801b686:	2340      	movs	r3, #64	; 0x40
 801b688:	616b      	str	r3, [r5, #20]
 801b68a:	2300      	movs	r3, #0
 801b68c:	9309      	str	r3, [sp, #36]	; 0x24
 801b68e:	2320      	movs	r3, #32
 801b690:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b694:	f8cd 800c 	str.w	r8, [sp, #12]
 801b698:	2330      	movs	r3, #48	; 0x30
 801b69a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801b844 <_svfiprintf_r+0x1ec>
 801b69e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b6a2:	f04f 0901 	mov.w	r9, #1
 801b6a6:	4623      	mov	r3, r4
 801b6a8:	469a      	mov	sl, r3
 801b6aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b6ae:	b10a      	cbz	r2, 801b6b4 <_svfiprintf_r+0x5c>
 801b6b0:	2a25      	cmp	r2, #37	; 0x25
 801b6b2:	d1f9      	bne.n	801b6a8 <_svfiprintf_r+0x50>
 801b6b4:	ebba 0b04 	subs.w	fp, sl, r4
 801b6b8:	d00b      	beq.n	801b6d2 <_svfiprintf_r+0x7a>
 801b6ba:	465b      	mov	r3, fp
 801b6bc:	4622      	mov	r2, r4
 801b6be:	4629      	mov	r1, r5
 801b6c0:	4638      	mov	r0, r7
 801b6c2:	f7ff ff6d 	bl	801b5a0 <__ssputs_r>
 801b6c6:	3001      	adds	r0, #1
 801b6c8:	f000 80aa 	beq.w	801b820 <_svfiprintf_r+0x1c8>
 801b6cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b6ce:	445a      	add	r2, fp
 801b6d0:	9209      	str	r2, [sp, #36]	; 0x24
 801b6d2:	f89a 3000 	ldrb.w	r3, [sl]
 801b6d6:	2b00      	cmp	r3, #0
 801b6d8:	f000 80a2 	beq.w	801b820 <_svfiprintf_r+0x1c8>
 801b6dc:	2300      	movs	r3, #0
 801b6de:	f04f 32ff 	mov.w	r2, #4294967295
 801b6e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b6e6:	f10a 0a01 	add.w	sl, sl, #1
 801b6ea:	9304      	str	r3, [sp, #16]
 801b6ec:	9307      	str	r3, [sp, #28]
 801b6ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b6f2:	931a      	str	r3, [sp, #104]	; 0x68
 801b6f4:	4654      	mov	r4, sl
 801b6f6:	2205      	movs	r2, #5
 801b6f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b6fc:	4851      	ldr	r0, [pc, #324]	; (801b844 <_svfiprintf_r+0x1ec>)
 801b6fe:	f7e4 fd8f 	bl	8000220 <memchr>
 801b702:	9a04      	ldr	r2, [sp, #16]
 801b704:	b9d8      	cbnz	r0, 801b73e <_svfiprintf_r+0xe6>
 801b706:	06d0      	lsls	r0, r2, #27
 801b708:	bf44      	itt	mi
 801b70a:	2320      	movmi	r3, #32
 801b70c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b710:	0711      	lsls	r1, r2, #28
 801b712:	bf44      	itt	mi
 801b714:	232b      	movmi	r3, #43	; 0x2b
 801b716:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b71a:	f89a 3000 	ldrb.w	r3, [sl]
 801b71e:	2b2a      	cmp	r3, #42	; 0x2a
 801b720:	d015      	beq.n	801b74e <_svfiprintf_r+0xf6>
 801b722:	9a07      	ldr	r2, [sp, #28]
 801b724:	4654      	mov	r4, sl
 801b726:	2000      	movs	r0, #0
 801b728:	f04f 0c0a 	mov.w	ip, #10
 801b72c:	4621      	mov	r1, r4
 801b72e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b732:	3b30      	subs	r3, #48	; 0x30
 801b734:	2b09      	cmp	r3, #9
 801b736:	d94e      	bls.n	801b7d6 <_svfiprintf_r+0x17e>
 801b738:	b1b0      	cbz	r0, 801b768 <_svfiprintf_r+0x110>
 801b73a:	9207      	str	r2, [sp, #28]
 801b73c:	e014      	b.n	801b768 <_svfiprintf_r+0x110>
 801b73e:	eba0 0308 	sub.w	r3, r0, r8
 801b742:	fa09 f303 	lsl.w	r3, r9, r3
 801b746:	4313      	orrs	r3, r2
 801b748:	9304      	str	r3, [sp, #16]
 801b74a:	46a2      	mov	sl, r4
 801b74c:	e7d2      	b.n	801b6f4 <_svfiprintf_r+0x9c>
 801b74e:	9b03      	ldr	r3, [sp, #12]
 801b750:	1d19      	adds	r1, r3, #4
 801b752:	681b      	ldr	r3, [r3, #0]
 801b754:	9103      	str	r1, [sp, #12]
 801b756:	2b00      	cmp	r3, #0
 801b758:	bfbb      	ittet	lt
 801b75a:	425b      	neglt	r3, r3
 801b75c:	f042 0202 	orrlt.w	r2, r2, #2
 801b760:	9307      	strge	r3, [sp, #28]
 801b762:	9307      	strlt	r3, [sp, #28]
 801b764:	bfb8      	it	lt
 801b766:	9204      	strlt	r2, [sp, #16]
 801b768:	7823      	ldrb	r3, [r4, #0]
 801b76a:	2b2e      	cmp	r3, #46	; 0x2e
 801b76c:	d10c      	bne.n	801b788 <_svfiprintf_r+0x130>
 801b76e:	7863      	ldrb	r3, [r4, #1]
 801b770:	2b2a      	cmp	r3, #42	; 0x2a
 801b772:	d135      	bne.n	801b7e0 <_svfiprintf_r+0x188>
 801b774:	9b03      	ldr	r3, [sp, #12]
 801b776:	1d1a      	adds	r2, r3, #4
 801b778:	681b      	ldr	r3, [r3, #0]
 801b77a:	9203      	str	r2, [sp, #12]
 801b77c:	2b00      	cmp	r3, #0
 801b77e:	bfb8      	it	lt
 801b780:	f04f 33ff 	movlt.w	r3, #4294967295
 801b784:	3402      	adds	r4, #2
 801b786:	9305      	str	r3, [sp, #20]
 801b788:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801b854 <_svfiprintf_r+0x1fc>
 801b78c:	7821      	ldrb	r1, [r4, #0]
 801b78e:	2203      	movs	r2, #3
 801b790:	4650      	mov	r0, sl
 801b792:	f7e4 fd45 	bl	8000220 <memchr>
 801b796:	b140      	cbz	r0, 801b7aa <_svfiprintf_r+0x152>
 801b798:	2340      	movs	r3, #64	; 0x40
 801b79a:	eba0 000a 	sub.w	r0, r0, sl
 801b79e:	fa03 f000 	lsl.w	r0, r3, r0
 801b7a2:	9b04      	ldr	r3, [sp, #16]
 801b7a4:	4303      	orrs	r3, r0
 801b7a6:	3401      	adds	r4, #1
 801b7a8:	9304      	str	r3, [sp, #16]
 801b7aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b7ae:	4826      	ldr	r0, [pc, #152]	; (801b848 <_svfiprintf_r+0x1f0>)
 801b7b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b7b4:	2206      	movs	r2, #6
 801b7b6:	f7e4 fd33 	bl	8000220 <memchr>
 801b7ba:	2800      	cmp	r0, #0
 801b7bc:	d038      	beq.n	801b830 <_svfiprintf_r+0x1d8>
 801b7be:	4b23      	ldr	r3, [pc, #140]	; (801b84c <_svfiprintf_r+0x1f4>)
 801b7c0:	bb1b      	cbnz	r3, 801b80a <_svfiprintf_r+0x1b2>
 801b7c2:	9b03      	ldr	r3, [sp, #12]
 801b7c4:	3307      	adds	r3, #7
 801b7c6:	f023 0307 	bic.w	r3, r3, #7
 801b7ca:	3308      	adds	r3, #8
 801b7cc:	9303      	str	r3, [sp, #12]
 801b7ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7d0:	4433      	add	r3, r6
 801b7d2:	9309      	str	r3, [sp, #36]	; 0x24
 801b7d4:	e767      	b.n	801b6a6 <_svfiprintf_r+0x4e>
 801b7d6:	fb0c 3202 	mla	r2, ip, r2, r3
 801b7da:	460c      	mov	r4, r1
 801b7dc:	2001      	movs	r0, #1
 801b7de:	e7a5      	b.n	801b72c <_svfiprintf_r+0xd4>
 801b7e0:	2300      	movs	r3, #0
 801b7e2:	3401      	adds	r4, #1
 801b7e4:	9305      	str	r3, [sp, #20]
 801b7e6:	4619      	mov	r1, r3
 801b7e8:	f04f 0c0a 	mov.w	ip, #10
 801b7ec:	4620      	mov	r0, r4
 801b7ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b7f2:	3a30      	subs	r2, #48	; 0x30
 801b7f4:	2a09      	cmp	r2, #9
 801b7f6:	d903      	bls.n	801b800 <_svfiprintf_r+0x1a8>
 801b7f8:	2b00      	cmp	r3, #0
 801b7fa:	d0c5      	beq.n	801b788 <_svfiprintf_r+0x130>
 801b7fc:	9105      	str	r1, [sp, #20]
 801b7fe:	e7c3      	b.n	801b788 <_svfiprintf_r+0x130>
 801b800:	fb0c 2101 	mla	r1, ip, r1, r2
 801b804:	4604      	mov	r4, r0
 801b806:	2301      	movs	r3, #1
 801b808:	e7f0      	b.n	801b7ec <_svfiprintf_r+0x194>
 801b80a:	ab03      	add	r3, sp, #12
 801b80c:	9300      	str	r3, [sp, #0]
 801b80e:	462a      	mov	r2, r5
 801b810:	4b0f      	ldr	r3, [pc, #60]	; (801b850 <_svfiprintf_r+0x1f8>)
 801b812:	a904      	add	r1, sp, #16
 801b814:	4638      	mov	r0, r7
 801b816:	f7fb fe33 	bl	8017480 <_printf_float>
 801b81a:	1c42      	adds	r2, r0, #1
 801b81c:	4606      	mov	r6, r0
 801b81e:	d1d6      	bne.n	801b7ce <_svfiprintf_r+0x176>
 801b820:	89ab      	ldrh	r3, [r5, #12]
 801b822:	065b      	lsls	r3, r3, #25
 801b824:	f53f af2c 	bmi.w	801b680 <_svfiprintf_r+0x28>
 801b828:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b82a:	b01d      	add	sp, #116	; 0x74
 801b82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b830:	ab03      	add	r3, sp, #12
 801b832:	9300      	str	r3, [sp, #0]
 801b834:	462a      	mov	r2, r5
 801b836:	4b06      	ldr	r3, [pc, #24]	; (801b850 <_svfiprintf_r+0x1f8>)
 801b838:	a904      	add	r1, sp, #16
 801b83a:	4638      	mov	r0, r7
 801b83c:	f7fc f8c4 	bl	80179c8 <_printf_i>
 801b840:	e7eb      	b.n	801b81a <_svfiprintf_r+0x1c2>
 801b842:	bf00      	nop
 801b844:	0801dbcc 	.word	0x0801dbcc
 801b848:	0801dbd6 	.word	0x0801dbd6
 801b84c:	08017481 	.word	0x08017481
 801b850:	0801b5a1 	.word	0x0801b5a1
 801b854:	0801dbd2 	.word	0x0801dbd2

0801b858 <_sungetc_r>:
 801b858:	b538      	push	{r3, r4, r5, lr}
 801b85a:	1c4b      	adds	r3, r1, #1
 801b85c:	4614      	mov	r4, r2
 801b85e:	d103      	bne.n	801b868 <_sungetc_r+0x10>
 801b860:	f04f 35ff 	mov.w	r5, #4294967295
 801b864:	4628      	mov	r0, r5
 801b866:	bd38      	pop	{r3, r4, r5, pc}
 801b868:	8993      	ldrh	r3, [r2, #12]
 801b86a:	f023 0320 	bic.w	r3, r3, #32
 801b86e:	8193      	strh	r3, [r2, #12]
 801b870:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b872:	6852      	ldr	r2, [r2, #4]
 801b874:	b2cd      	uxtb	r5, r1
 801b876:	b18b      	cbz	r3, 801b89c <_sungetc_r+0x44>
 801b878:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b87a:	4293      	cmp	r3, r2
 801b87c:	dd08      	ble.n	801b890 <_sungetc_r+0x38>
 801b87e:	6823      	ldr	r3, [r4, #0]
 801b880:	1e5a      	subs	r2, r3, #1
 801b882:	6022      	str	r2, [r4, #0]
 801b884:	f803 5c01 	strb.w	r5, [r3, #-1]
 801b888:	6863      	ldr	r3, [r4, #4]
 801b88a:	3301      	adds	r3, #1
 801b88c:	6063      	str	r3, [r4, #4]
 801b88e:	e7e9      	b.n	801b864 <_sungetc_r+0xc>
 801b890:	4621      	mov	r1, r4
 801b892:	f000 fca5 	bl	801c1e0 <__submore>
 801b896:	2800      	cmp	r0, #0
 801b898:	d0f1      	beq.n	801b87e <_sungetc_r+0x26>
 801b89a:	e7e1      	b.n	801b860 <_sungetc_r+0x8>
 801b89c:	6921      	ldr	r1, [r4, #16]
 801b89e:	6823      	ldr	r3, [r4, #0]
 801b8a0:	b151      	cbz	r1, 801b8b8 <_sungetc_r+0x60>
 801b8a2:	4299      	cmp	r1, r3
 801b8a4:	d208      	bcs.n	801b8b8 <_sungetc_r+0x60>
 801b8a6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801b8aa:	42a9      	cmp	r1, r5
 801b8ac:	d104      	bne.n	801b8b8 <_sungetc_r+0x60>
 801b8ae:	3b01      	subs	r3, #1
 801b8b0:	3201      	adds	r2, #1
 801b8b2:	6023      	str	r3, [r4, #0]
 801b8b4:	6062      	str	r2, [r4, #4]
 801b8b6:	e7d5      	b.n	801b864 <_sungetc_r+0xc>
 801b8b8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801b8bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b8c0:	6363      	str	r3, [r4, #52]	; 0x34
 801b8c2:	2303      	movs	r3, #3
 801b8c4:	63a3      	str	r3, [r4, #56]	; 0x38
 801b8c6:	4623      	mov	r3, r4
 801b8c8:	f803 5f46 	strb.w	r5, [r3, #70]!
 801b8cc:	6023      	str	r3, [r4, #0]
 801b8ce:	2301      	movs	r3, #1
 801b8d0:	e7dc      	b.n	801b88c <_sungetc_r+0x34>

0801b8d2 <__ssrefill_r>:
 801b8d2:	b510      	push	{r4, lr}
 801b8d4:	460c      	mov	r4, r1
 801b8d6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801b8d8:	b169      	cbz	r1, 801b8f6 <__ssrefill_r+0x24>
 801b8da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b8de:	4299      	cmp	r1, r3
 801b8e0:	d001      	beq.n	801b8e6 <__ssrefill_r+0x14>
 801b8e2:	f7fb fc83 	bl	80171ec <_free_r>
 801b8e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b8e8:	6063      	str	r3, [r4, #4]
 801b8ea:	2000      	movs	r0, #0
 801b8ec:	6360      	str	r0, [r4, #52]	; 0x34
 801b8ee:	b113      	cbz	r3, 801b8f6 <__ssrefill_r+0x24>
 801b8f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801b8f2:	6023      	str	r3, [r4, #0]
 801b8f4:	bd10      	pop	{r4, pc}
 801b8f6:	6923      	ldr	r3, [r4, #16]
 801b8f8:	6023      	str	r3, [r4, #0]
 801b8fa:	2300      	movs	r3, #0
 801b8fc:	6063      	str	r3, [r4, #4]
 801b8fe:	89a3      	ldrh	r3, [r4, #12]
 801b900:	f043 0320 	orr.w	r3, r3, #32
 801b904:	81a3      	strh	r3, [r4, #12]
 801b906:	f04f 30ff 	mov.w	r0, #4294967295
 801b90a:	e7f3      	b.n	801b8f4 <__ssrefill_r+0x22>

0801b90c <__ssvfiscanf_r>:
 801b90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b910:	460c      	mov	r4, r1
 801b912:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801b916:	2100      	movs	r1, #0
 801b918:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801b91c:	49b2      	ldr	r1, [pc, #712]	; (801bbe8 <__ssvfiscanf_r+0x2dc>)
 801b91e:	91a0      	str	r1, [sp, #640]	; 0x280
 801b920:	f10d 0804 	add.w	r8, sp, #4
 801b924:	49b1      	ldr	r1, [pc, #708]	; (801bbec <__ssvfiscanf_r+0x2e0>)
 801b926:	4fb2      	ldr	r7, [pc, #712]	; (801bbf0 <__ssvfiscanf_r+0x2e4>)
 801b928:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801bbf4 <__ssvfiscanf_r+0x2e8>
 801b92c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801b930:	4606      	mov	r6, r0
 801b932:	91a1      	str	r1, [sp, #644]	; 0x284
 801b934:	9300      	str	r3, [sp, #0]
 801b936:	f892 a000 	ldrb.w	sl, [r2]
 801b93a:	f1ba 0f00 	cmp.w	sl, #0
 801b93e:	f000 8151 	beq.w	801bbe4 <__ssvfiscanf_r+0x2d8>
 801b942:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801b946:	f013 0308 	ands.w	r3, r3, #8
 801b94a:	f102 0501 	add.w	r5, r2, #1
 801b94e:	d019      	beq.n	801b984 <__ssvfiscanf_r+0x78>
 801b950:	6863      	ldr	r3, [r4, #4]
 801b952:	2b00      	cmp	r3, #0
 801b954:	dd0f      	ble.n	801b976 <__ssvfiscanf_r+0x6a>
 801b956:	6823      	ldr	r3, [r4, #0]
 801b958:	781a      	ldrb	r2, [r3, #0]
 801b95a:	5cba      	ldrb	r2, [r7, r2]
 801b95c:	0712      	lsls	r2, r2, #28
 801b95e:	d401      	bmi.n	801b964 <__ssvfiscanf_r+0x58>
 801b960:	462a      	mov	r2, r5
 801b962:	e7e8      	b.n	801b936 <__ssvfiscanf_r+0x2a>
 801b964:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801b966:	3201      	adds	r2, #1
 801b968:	9245      	str	r2, [sp, #276]	; 0x114
 801b96a:	6862      	ldr	r2, [r4, #4]
 801b96c:	3301      	adds	r3, #1
 801b96e:	3a01      	subs	r2, #1
 801b970:	6062      	str	r2, [r4, #4]
 801b972:	6023      	str	r3, [r4, #0]
 801b974:	e7ec      	b.n	801b950 <__ssvfiscanf_r+0x44>
 801b976:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801b978:	4621      	mov	r1, r4
 801b97a:	4630      	mov	r0, r6
 801b97c:	4798      	blx	r3
 801b97e:	2800      	cmp	r0, #0
 801b980:	d0e9      	beq.n	801b956 <__ssvfiscanf_r+0x4a>
 801b982:	e7ed      	b.n	801b960 <__ssvfiscanf_r+0x54>
 801b984:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 801b988:	f040 8083 	bne.w	801ba92 <__ssvfiscanf_r+0x186>
 801b98c:	9341      	str	r3, [sp, #260]	; 0x104
 801b98e:	9343      	str	r3, [sp, #268]	; 0x10c
 801b990:	7853      	ldrb	r3, [r2, #1]
 801b992:	2b2a      	cmp	r3, #42	; 0x2a
 801b994:	bf02      	ittt	eq
 801b996:	2310      	moveq	r3, #16
 801b998:	1c95      	addeq	r5, r2, #2
 801b99a:	9341      	streq	r3, [sp, #260]	; 0x104
 801b99c:	220a      	movs	r2, #10
 801b99e:	46ab      	mov	fp, r5
 801b9a0:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801b9a4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801b9a8:	2b09      	cmp	r3, #9
 801b9aa:	d91d      	bls.n	801b9e8 <__ssvfiscanf_r+0xdc>
 801b9ac:	4891      	ldr	r0, [pc, #580]	; (801bbf4 <__ssvfiscanf_r+0x2e8>)
 801b9ae:	2203      	movs	r2, #3
 801b9b0:	f7e4 fc36 	bl	8000220 <memchr>
 801b9b4:	b140      	cbz	r0, 801b9c8 <__ssvfiscanf_r+0xbc>
 801b9b6:	2301      	movs	r3, #1
 801b9b8:	eba0 0009 	sub.w	r0, r0, r9
 801b9bc:	fa03 f000 	lsl.w	r0, r3, r0
 801b9c0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801b9c2:	4318      	orrs	r0, r3
 801b9c4:	9041      	str	r0, [sp, #260]	; 0x104
 801b9c6:	465d      	mov	r5, fp
 801b9c8:	f815 3b01 	ldrb.w	r3, [r5], #1
 801b9cc:	2b78      	cmp	r3, #120	; 0x78
 801b9ce:	d806      	bhi.n	801b9de <__ssvfiscanf_r+0xd2>
 801b9d0:	2b57      	cmp	r3, #87	; 0x57
 801b9d2:	d810      	bhi.n	801b9f6 <__ssvfiscanf_r+0xea>
 801b9d4:	2b25      	cmp	r3, #37	; 0x25
 801b9d6:	d05c      	beq.n	801ba92 <__ssvfiscanf_r+0x186>
 801b9d8:	d856      	bhi.n	801ba88 <__ssvfiscanf_r+0x17c>
 801b9da:	2b00      	cmp	r3, #0
 801b9dc:	d074      	beq.n	801bac8 <__ssvfiscanf_r+0x1bc>
 801b9de:	2303      	movs	r3, #3
 801b9e0:	9347      	str	r3, [sp, #284]	; 0x11c
 801b9e2:	230a      	movs	r3, #10
 801b9e4:	9342      	str	r3, [sp, #264]	; 0x108
 801b9e6:	e081      	b.n	801baec <__ssvfiscanf_r+0x1e0>
 801b9e8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801b9ea:	fb02 1303 	mla	r3, r2, r3, r1
 801b9ee:	3b30      	subs	r3, #48	; 0x30
 801b9f0:	9343      	str	r3, [sp, #268]	; 0x10c
 801b9f2:	465d      	mov	r5, fp
 801b9f4:	e7d3      	b.n	801b99e <__ssvfiscanf_r+0x92>
 801b9f6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801b9fa:	2a20      	cmp	r2, #32
 801b9fc:	d8ef      	bhi.n	801b9de <__ssvfiscanf_r+0xd2>
 801b9fe:	a101      	add	r1, pc, #4	; (adr r1, 801ba04 <__ssvfiscanf_r+0xf8>)
 801ba00:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801ba04:	0801bad7 	.word	0x0801bad7
 801ba08:	0801b9df 	.word	0x0801b9df
 801ba0c:	0801b9df 	.word	0x0801b9df
 801ba10:	0801bb35 	.word	0x0801bb35
 801ba14:	0801b9df 	.word	0x0801b9df
 801ba18:	0801b9df 	.word	0x0801b9df
 801ba1c:	0801b9df 	.word	0x0801b9df
 801ba20:	0801b9df 	.word	0x0801b9df
 801ba24:	0801b9df 	.word	0x0801b9df
 801ba28:	0801b9df 	.word	0x0801b9df
 801ba2c:	0801b9df 	.word	0x0801b9df
 801ba30:	0801bb4b 	.word	0x0801bb4b
 801ba34:	0801bb21 	.word	0x0801bb21
 801ba38:	0801ba8f 	.word	0x0801ba8f
 801ba3c:	0801ba8f 	.word	0x0801ba8f
 801ba40:	0801ba8f 	.word	0x0801ba8f
 801ba44:	0801b9df 	.word	0x0801b9df
 801ba48:	0801bb25 	.word	0x0801bb25
 801ba4c:	0801b9df 	.word	0x0801b9df
 801ba50:	0801b9df 	.word	0x0801b9df
 801ba54:	0801b9df 	.word	0x0801b9df
 801ba58:	0801b9df 	.word	0x0801b9df
 801ba5c:	0801bb5b 	.word	0x0801bb5b
 801ba60:	0801bb2d 	.word	0x0801bb2d
 801ba64:	0801bacf 	.word	0x0801bacf
 801ba68:	0801b9df 	.word	0x0801b9df
 801ba6c:	0801b9df 	.word	0x0801b9df
 801ba70:	0801bb57 	.word	0x0801bb57
 801ba74:	0801b9df 	.word	0x0801b9df
 801ba78:	0801bb21 	.word	0x0801bb21
 801ba7c:	0801b9df 	.word	0x0801b9df
 801ba80:	0801b9df 	.word	0x0801b9df
 801ba84:	0801bad7 	.word	0x0801bad7
 801ba88:	3b45      	subs	r3, #69	; 0x45
 801ba8a:	2b02      	cmp	r3, #2
 801ba8c:	d8a7      	bhi.n	801b9de <__ssvfiscanf_r+0xd2>
 801ba8e:	2305      	movs	r3, #5
 801ba90:	e02b      	b.n	801baea <__ssvfiscanf_r+0x1de>
 801ba92:	6863      	ldr	r3, [r4, #4]
 801ba94:	2b00      	cmp	r3, #0
 801ba96:	dd0d      	ble.n	801bab4 <__ssvfiscanf_r+0x1a8>
 801ba98:	6823      	ldr	r3, [r4, #0]
 801ba9a:	781a      	ldrb	r2, [r3, #0]
 801ba9c:	4552      	cmp	r2, sl
 801ba9e:	f040 80a1 	bne.w	801bbe4 <__ssvfiscanf_r+0x2d8>
 801baa2:	3301      	adds	r3, #1
 801baa4:	6862      	ldr	r2, [r4, #4]
 801baa6:	6023      	str	r3, [r4, #0]
 801baa8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801baaa:	3a01      	subs	r2, #1
 801baac:	3301      	adds	r3, #1
 801baae:	6062      	str	r2, [r4, #4]
 801bab0:	9345      	str	r3, [sp, #276]	; 0x114
 801bab2:	e755      	b.n	801b960 <__ssvfiscanf_r+0x54>
 801bab4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801bab6:	4621      	mov	r1, r4
 801bab8:	4630      	mov	r0, r6
 801baba:	4798      	blx	r3
 801babc:	2800      	cmp	r0, #0
 801babe:	d0eb      	beq.n	801ba98 <__ssvfiscanf_r+0x18c>
 801bac0:	9844      	ldr	r0, [sp, #272]	; 0x110
 801bac2:	2800      	cmp	r0, #0
 801bac4:	f040 8084 	bne.w	801bbd0 <__ssvfiscanf_r+0x2c4>
 801bac8:	f04f 30ff 	mov.w	r0, #4294967295
 801bacc:	e086      	b.n	801bbdc <__ssvfiscanf_r+0x2d0>
 801bace:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801bad0:	f042 0220 	orr.w	r2, r2, #32
 801bad4:	9241      	str	r2, [sp, #260]	; 0x104
 801bad6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801bad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801badc:	9241      	str	r2, [sp, #260]	; 0x104
 801bade:	2210      	movs	r2, #16
 801bae0:	2b6f      	cmp	r3, #111	; 0x6f
 801bae2:	9242      	str	r2, [sp, #264]	; 0x108
 801bae4:	bf34      	ite	cc
 801bae6:	2303      	movcc	r3, #3
 801bae8:	2304      	movcs	r3, #4
 801baea:	9347      	str	r3, [sp, #284]	; 0x11c
 801baec:	6863      	ldr	r3, [r4, #4]
 801baee:	2b00      	cmp	r3, #0
 801baf0:	dd41      	ble.n	801bb76 <__ssvfiscanf_r+0x26a>
 801baf2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801baf4:	0659      	lsls	r1, r3, #25
 801baf6:	d404      	bmi.n	801bb02 <__ssvfiscanf_r+0x1f6>
 801baf8:	6823      	ldr	r3, [r4, #0]
 801bafa:	781a      	ldrb	r2, [r3, #0]
 801bafc:	5cba      	ldrb	r2, [r7, r2]
 801bafe:	0712      	lsls	r2, r2, #28
 801bb00:	d440      	bmi.n	801bb84 <__ssvfiscanf_r+0x278>
 801bb02:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801bb04:	2b02      	cmp	r3, #2
 801bb06:	dc4f      	bgt.n	801bba8 <__ssvfiscanf_r+0x29c>
 801bb08:	466b      	mov	r3, sp
 801bb0a:	4622      	mov	r2, r4
 801bb0c:	a941      	add	r1, sp, #260	; 0x104
 801bb0e:	4630      	mov	r0, r6
 801bb10:	f000 f9ce 	bl	801beb0 <_scanf_chars>
 801bb14:	2801      	cmp	r0, #1
 801bb16:	d065      	beq.n	801bbe4 <__ssvfiscanf_r+0x2d8>
 801bb18:	2802      	cmp	r0, #2
 801bb1a:	f47f af21 	bne.w	801b960 <__ssvfiscanf_r+0x54>
 801bb1e:	e7cf      	b.n	801bac0 <__ssvfiscanf_r+0x1b4>
 801bb20:	220a      	movs	r2, #10
 801bb22:	e7dd      	b.n	801bae0 <__ssvfiscanf_r+0x1d4>
 801bb24:	2300      	movs	r3, #0
 801bb26:	9342      	str	r3, [sp, #264]	; 0x108
 801bb28:	2303      	movs	r3, #3
 801bb2a:	e7de      	b.n	801baea <__ssvfiscanf_r+0x1de>
 801bb2c:	2308      	movs	r3, #8
 801bb2e:	9342      	str	r3, [sp, #264]	; 0x108
 801bb30:	2304      	movs	r3, #4
 801bb32:	e7da      	b.n	801baea <__ssvfiscanf_r+0x1de>
 801bb34:	4629      	mov	r1, r5
 801bb36:	4640      	mov	r0, r8
 801bb38:	f000 fb18 	bl	801c16c <__sccl>
 801bb3c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801bb3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bb42:	9341      	str	r3, [sp, #260]	; 0x104
 801bb44:	4605      	mov	r5, r0
 801bb46:	2301      	movs	r3, #1
 801bb48:	e7cf      	b.n	801baea <__ssvfiscanf_r+0x1de>
 801bb4a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801bb4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bb50:	9341      	str	r3, [sp, #260]	; 0x104
 801bb52:	2300      	movs	r3, #0
 801bb54:	e7c9      	b.n	801baea <__ssvfiscanf_r+0x1de>
 801bb56:	2302      	movs	r3, #2
 801bb58:	e7c7      	b.n	801baea <__ssvfiscanf_r+0x1de>
 801bb5a:	9841      	ldr	r0, [sp, #260]	; 0x104
 801bb5c:	06c3      	lsls	r3, r0, #27
 801bb5e:	f53f aeff 	bmi.w	801b960 <__ssvfiscanf_r+0x54>
 801bb62:	9b00      	ldr	r3, [sp, #0]
 801bb64:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801bb66:	1d19      	adds	r1, r3, #4
 801bb68:	9100      	str	r1, [sp, #0]
 801bb6a:	681b      	ldr	r3, [r3, #0]
 801bb6c:	07c0      	lsls	r0, r0, #31
 801bb6e:	bf4c      	ite	mi
 801bb70:	801a      	strhmi	r2, [r3, #0]
 801bb72:	601a      	strpl	r2, [r3, #0]
 801bb74:	e6f4      	b.n	801b960 <__ssvfiscanf_r+0x54>
 801bb76:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801bb78:	4621      	mov	r1, r4
 801bb7a:	4630      	mov	r0, r6
 801bb7c:	4798      	blx	r3
 801bb7e:	2800      	cmp	r0, #0
 801bb80:	d0b7      	beq.n	801baf2 <__ssvfiscanf_r+0x1e6>
 801bb82:	e79d      	b.n	801bac0 <__ssvfiscanf_r+0x1b4>
 801bb84:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801bb86:	3201      	adds	r2, #1
 801bb88:	9245      	str	r2, [sp, #276]	; 0x114
 801bb8a:	6862      	ldr	r2, [r4, #4]
 801bb8c:	3a01      	subs	r2, #1
 801bb8e:	2a00      	cmp	r2, #0
 801bb90:	6062      	str	r2, [r4, #4]
 801bb92:	dd02      	ble.n	801bb9a <__ssvfiscanf_r+0x28e>
 801bb94:	3301      	adds	r3, #1
 801bb96:	6023      	str	r3, [r4, #0]
 801bb98:	e7ae      	b.n	801baf8 <__ssvfiscanf_r+0x1ec>
 801bb9a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801bb9c:	4621      	mov	r1, r4
 801bb9e:	4630      	mov	r0, r6
 801bba0:	4798      	blx	r3
 801bba2:	2800      	cmp	r0, #0
 801bba4:	d0a8      	beq.n	801baf8 <__ssvfiscanf_r+0x1ec>
 801bba6:	e78b      	b.n	801bac0 <__ssvfiscanf_r+0x1b4>
 801bba8:	2b04      	cmp	r3, #4
 801bbaa:	dc06      	bgt.n	801bbba <__ssvfiscanf_r+0x2ae>
 801bbac:	466b      	mov	r3, sp
 801bbae:	4622      	mov	r2, r4
 801bbb0:	a941      	add	r1, sp, #260	; 0x104
 801bbb2:	4630      	mov	r0, r6
 801bbb4:	f000 f9d4 	bl	801bf60 <_scanf_i>
 801bbb8:	e7ac      	b.n	801bb14 <__ssvfiscanf_r+0x208>
 801bbba:	4b0f      	ldr	r3, [pc, #60]	; (801bbf8 <__ssvfiscanf_r+0x2ec>)
 801bbbc:	2b00      	cmp	r3, #0
 801bbbe:	f43f aecf 	beq.w	801b960 <__ssvfiscanf_r+0x54>
 801bbc2:	466b      	mov	r3, sp
 801bbc4:	4622      	mov	r2, r4
 801bbc6:	a941      	add	r1, sp, #260	; 0x104
 801bbc8:	4630      	mov	r0, r6
 801bbca:	f7fc f823 	bl	8017c14 <_scanf_float>
 801bbce:	e7a1      	b.n	801bb14 <__ssvfiscanf_r+0x208>
 801bbd0:	89a3      	ldrh	r3, [r4, #12]
 801bbd2:	f013 0f40 	tst.w	r3, #64	; 0x40
 801bbd6:	bf18      	it	ne
 801bbd8:	f04f 30ff 	movne.w	r0, #4294967295
 801bbdc:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801bbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbe4:	9844      	ldr	r0, [sp, #272]	; 0x110
 801bbe6:	e7f9      	b.n	801bbdc <__ssvfiscanf_r+0x2d0>
 801bbe8:	0801b859 	.word	0x0801b859
 801bbec:	0801b8d3 	.word	0x0801b8d3
 801bbf0:	0801d731 	.word	0x0801d731
 801bbf4:	0801dbd2 	.word	0x0801dbd2
 801bbf8:	08017c15 	.word	0x08017c15

0801bbfc <__sfputc_r>:
 801bbfc:	6893      	ldr	r3, [r2, #8]
 801bbfe:	3b01      	subs	r3, #1
 801bc00:	2b00      	cmp	r3, #0
 801bc02:	b410      	push	{r4}
 801bc04:	6093      	str	r3, [r2, #8]
 801bc06:	da08      	bge.n	801bc1a <__sfputc_r+0x1e>
 801bc08:	6994      	ldr	r4, [r2, #24]
 801bc0a:	42a3      	cmp	r3, r4
 801bc0c:	db01      	blt.n	801bc12 <__sfputc_r+0x16>
 801bc0e:	290a      	cmp	r1, #10
 801bc10:	d103      	bne.n	801bc1a <__sfputc_r+0x1e>
 801bc12:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bc16:	f7fd bb7f 	b.w	8019318 <__swbuf_r>
 801bc1a:	6813      	ldr	r3, [r2, #0]
 801bc1c:	1c58      	adds	r0, r3, #1
 801bc1e:	6010      	str	r0, [r2, #0]
 801bc20:	7019      	strb	r1, [r3, #0]
 801bc22:	4608      	mov	r0, r1
 801bc24:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bc28:	4770      	bx	lr

0801bc2a <__sfputs_r>:
 801bc2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc2c:	4606      	mov	r6, r0
 801bc2e:	460f      	mov	r7, r1
 801bc30:	4614      	mov	r4, r2
 801bc32:	18d5      	adds	r5, r2, r3
 801bc34:	42ac      	cmp	r4, r5
 801bc36:	d101      	bne.n	801bc3c <__sfputs_r+0x12>
 801bc38:	2000      	movs	r0, #0
 801bc3a:	e007      	b.n	801bc4c <__sfputs_r+0x22>
 801bc3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bc40:	463a      	mov	r2, r7
 801bc42:	4630      	mov	r0, r6
 801bc44:	f7ff ffda 	bl	801bbfc <__sfputc_r>
 801bc48:	1c43      	adds	r3, r0, #1
 801bc4a:	d1f3      	bne.n	801bc34 <__sfputs_r+0xa>
 801bc4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bc50 <_vfiprintf_r>:
 801bc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc54:	460d      	mov	r5, r1
 801bc56:	b09d      	sub	sp, #116	; 0x74
 801bc58:	4614      	mov	r4, r2
 801bc5a:	4698      	mov	r8, r3
 801bc5c:	4606      	mov	r6, r0
 801bc5e:	b118      	cbz	r0, 801bc68 <_vfiprintf_r+0x18>
 801bc60:	6983      	ldr	r3, [r0, #24]
 801bc62:	b90b      	cbnz	r3, 801bc68 <_vfiprintf_r+0x18>
 801bc64:	f7fb f9bc 	bl	8016fe0 <__sinit>
 801bc68:	4b89      	ldr	r3, [pc, #548]	; (801be90 <_vfiprintf_r+0x240>)
 801bc6a:	429d      	cmp	r5, r3
 801bc6c:	d11b      	bne.n	801bca6 <_vfiprintf_r+0x56>
 801bc6e:	6875      	ldr	r5, [r6, #4]
 801bc70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bc72:	07d9      	lsls	r1, r3, #31
 801bc74:	d405      	bmi.n	801bc82 <_vfiprintf_r+0x32>
 801bc76:	89ab      	ldrh	r3, [r5, #12]
 801bc78:	059a      	lsls	r2, r3, #22
 801bc7a:	d402      	bmi.n	801bc82 <_vfiprintf_r+0x32>
 801bc7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bc7e:	f7fb fa72 	bl	8017166 <__retarget_lock_acquire_recursive>
 801bc82:	89ab      	ldrh	r3, [r5, #12]
 801bc84:	071b      	lsls	r3, r3, #28
 801bc86:	d501      	bpl.n	801bc8c <_vfiprintf_r+0x3c>
 801bc88:	692b      	ldr	r3, [r5, #16]
 801bc8a:	b9eb      	cbnz	r3, 801bcc8 <_vfiprintf_r+0x78>
 801bc8c:	4629      	mov	r1, r5
 801bc8e:	4630      	mov	r0, r6
 801bc90:	f7fd fba6 	bl	80193e0 <__swsetup_r>
 801bc94:	b1c0      	cbz	r0, 801bcc8 <_vfiprintf_r+0x78>
 801bc96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bc98:	07dc      	lsls	r4, r3, #31
 801bc9a:	d50e      	bpl.n	801bcba <_vfiprintf_r+0x6a>
 801bc9c:	f04f 30ff 	mov.w	r0, #4294967295
 801bca0:	b01d      	add	sp, #116	; 0x74
 801bca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bca6:	4b7b      	ldr	r3, [pc, #492]	; (801be94 <_vfiprintf_r+0x244>)
 801bca8:	429d      	cmp	r5, r3
 801bcaa:	d101      	bne.n	801bcb0 <_vfiprintf_r+0x60>
 801bcac:	68b5      	ldr	r5, [r6, #8]
 801bcae:	e7df      	b.n	801bc70 <_vfiprintf_r+0x20>
 801bcb0:	4b79      	ldr	r3, [pc, #484]	; (801be98 <_vfiprintf_r+0x248>)
 801bcb2:	429d      	cmp	r5, r3
 801bcb4:	bf08      	it	eq
 801bcb6:	68f5      	ldreq	r5, [r6, #12]
 801bcb8:	e7da      	b.n	801bc70 <_vfiprintf_r+0x20>
 801bcba:	89ab      	ldrh	r3, [r5, #12]
 801bcbc:	0598      	lsls	r0, r3, #22
 801bcbe:	d4ed      	bmi.n	801bc9c <_vfiprintf_r+0x4c>
 801bcc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bcc2:	f7fb fa51 	bl	8017168 <__retarget_lock_release_recursive>
 801bcc6:	e7e9      	b.n	801bc9c <_vfiprintf_r+0x4c>
 801bcc8:	2300      	movs	r3, #0
 801bcca:	9309      	str	r3, [sp, #36]	; 0x24
 801bccc:	2320      	movs	r3, #32
 801bcce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bcd2:	f8cd 800c 	str.w	r8, [sp, #12]
 801bcd6:	2330      	movs	r3, #48	; 0x30
 801bcd8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801be9c <_vfiprintf_r+0x24c>
 801bcdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bce0:	f04f 0901 	mov.w	r9, #1
 801bce4:	4623      	mov	r3, r4
 801bce6:	469a      	mov	sl, r3
 801bce8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bcec:	b10a      	cbz	r2, 801bcf2 <_vfiprintf_r+0xa2>
 801bcee:	2a25      	cmp	r2, #37	; 0x25
 801bcf0:	d1f9      	bne.n	801bce6 <_vfiprintf_r+0x96>
 801bcf2:	ebba 0b04 	subs.w	fp, sl, r4
 801bcf6:	d00b      	beq.n	801bd10 <_vfiprintf_r+0xc0>
 801bcf8:	465b      	mov	r3, fp
 801bcfa:	4622      	mov	r2, r4
 801bcfc:	4629      	mov	r1, r5
 801bcfe:	4630      	mov	r0, r6
 801bd00:	f7ff ff93 	bl	801bc2a <__sfputs_r>
 801bd04:	3001      	adds	r0, #1
 801bd06:	f000 80aa 	beq.w	801be5e <_vfiprintf_r+0x20e>
 801bd0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bd0c:	445a      	add	r2, fp
 801bd0e:	9209      	str	r2, [sp, #36]	; 0x24
 801bd10:	f89a 3000 	ldrb.w	r3, [sl]
 801bd14:	2b00      	cmp	r3, #0
 801bd16:	f000 80a2 	beq.w	801be5e <_vfiprintf_r+0x20e>
 801bd1a:	2300      	movs	r3, #0
 801bd1c:	f04f 32ff 	mov.w	r2, #4294967295
 801bd20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bd24:	f10a 0a01 	add.w	sl, sl, #1
 801bd28:	9304      	str	r3, [sp, #16]
 801bd2a:	9307      	str	r3, [sp, #28]
 801bd2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bd30:	931a      	str	r3, [sp, #104]	; 0x68
 801bd32:	4654      	mov	r4, sl
 801bd34:	2205      	movs	r2, #5
 801bd36:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bd3a:	4858      	ldr	r0, [pc, #352]	; (801be9c <_vfiprintf_r+0x24c>)
 801bd3c:	f7e4 fa70 	bl	8000220 <memchr>
 801bd40:	9a04      	ldr	r2, [sp, #16]
 801bd42:	b9d8      	cbnz	r0, 801bd7c <_vfiprintf_r+0x12c>
 801bd44:	06d1      	lsls	r1, r2, #27
 801bd46:	bf44      	itt	mi
 801bd48:	2320      	movmi	r3, #32
 801bd4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bd4e:	0713      	lsls	r3, r2, #28
 801bd50:	bf44      	itt	mi
 801bd52:	232b      	movmi	r3, #43	; 0x2b
 801bd54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bd58:	f89a 3000 	ldrb.w	r3, [sl]
 801bd5c:	2b2a      	cmp	r3, #42	; 0x2a
 801bd5e:	d015      	beq.n	801bd8c <_vfiprintf_r+0x13c>
 801bd60:	9a07      	ldr	r2, [sp, #28]
 801bd62:	4654      	mov	r4, sl
 801bd64:	2000      	movs	r0, #0
 801bd66:	f04f 0c0a 	mov.w	ip, #10
 801bd6a:	4621      	mov	r1, r4
 801bd6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bd70:	3b30      	subs	r3, #48	; 0x30
 801bd72:	2b09      	cmp	r3, #9
 801bd74:	d94e      	bls.n	801be14 <_vfiprintf_r+0x1c4>
 801bd76:	b1b0      	cbz	r0, 801bda6 <_vfiprintf_r+0x156>
 801bd78:	9207      	str	r2, [sp, #28]
 801bd7a:	e014      	b.n	801bda6 <_vfiprintf_r+0x156>
 801bd7c:	eba0 0308 	sub.w	r3, r0, r8
 801bd80:	fa09 f303 	lsl.w	r3, r9, r3
 801bd84:	4313      	orrs	r3, r2
 801bd86:	9304      	str	r3, [sp, #16]
 801bd88:	46a2      	mov	sl, r4
 801bd8a:	e7d2      	b.n	801bd32 <_vfiprintf_r+0xe2>
 801bd8c:	9b03      	ldr	r3, [sp, #12]
 801bd8e:	1d19      	adds	r1, r3, #4
 801bd90:	681b      	ldr	r3, [r3, #0]
 801bd92:	9103      	str	r1, [sp, #12]
 801bd94:	2b00      	cmp	r3, #0
 801bd96:	bfbb      	ittet	lt
 801bd98:	425b      	neglt	r3, r3
 801bd9a:	f042 0202 	orrlt.w	r2, r2, #2
 801bd9e:	9307      	strge	r3, [sp, #28]
 801bda0:	9307      	strlt	r3, [sp, #28]
 801bda2:	bfb8      	it	lt
 801bda4:	9204      	strlt	r2, [sp, #16]
 801bda6:	7823      	ldrb	r3, [r4, #0]
 801bda8:	2b2e      	cmp	r3, #46	; 0x2e
 801bdaa:	d10c      	bne.n	801bdc6 <_vfiprintf_r+0x176>
 801bdac:	7863      	ldrb	r3, [r4, #1]
 801bdae:	2b2a      	cmp	r3, #42	; 0x2a
 801bdb0:	d135      	bne.n	801be1e <_vfiprintf_r+0x1ce>
 801bdb2:	9b03      	ldr	r3, [sp, #12]
 801bdb4:	1d1a      	adds	r2, r3, #4
 801bdb6:	681b      	ldr	r3, [r3, #0]
 801bdb8:	9203      	str	r2, [sp, #12]
 801bdba:	2b00      	cmp	r3, #0
 801bdbc:	bfb8      	it	lt
 801bdbe:	f04f 33ff 	movlt.w	r3, #4294967295
 801bdc2:	3402      	adds	r4, #2
 801bdc4:	9305      	str	r3, [sp, #20]
 801bdc6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801beac <_vfiprintf_r+0x25c>
 801bdca:	7821      	ldrb	r1, [r4, #0]
 801bdcc:	2203      	movs	r2, #3
 801bdce:	4650      	mov	r0, sl
 801bdd0:	f7e4 fa26 	bl	8000220 <memchr>
 801bdd4:	b140      	cbz	r0, 801bde8 <_vfiprintf_r+0x198>
 801bdd6:	2340      	movs	r3, #64	; 0x40
 801bdd8:	eba0 000a 	sub.w	r0, r0, sl
 801bddc:	fa03 f000 	lsl.w	r0, r3, r0
 801bde0:	9b04      	ldr	r3, [sp, #16]
 801bde2:	4303      	orrs	r3, r0
 801bde4:	3401      	adds	r4, #1
 801bde6:	9304      	str	r3, [sp, #16]
 801bde8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bdec:	482c      	ldr	r0, [pc, #176]	; (801bea0 <_vfiprintf_r+0x250>)
 801bdee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bdf2:	2206      	movs	r2, #6
 801bdf4:	f7e4 fa14 	bl	8000220 <memchr>
 801bdf8:	2800      	cmp	r0, #0
 801bdfa:	d03f      	beq.n	801be7c <_vfiprintf_r+0x22c>
 801bdfc:	4b29      	ldr	r3, [pc, #164]	; (801bea4 <_vfiprintf_r+0x254>)
 801bdfe:	bb1b      	cbnz	r3, 801be48 <_vfiprintf_r+0x1f8>
 801be00:	9b03      	ldr	r3, [sp, #12]
 801be02:	3307      	adds	r3, #7
 801be04:	f023 0307 	bic.w	r3, r3, #7
 801be08:	3308      	adds	r3, #8
 801be0a:	9303      	str	r3, [sp, #12]
 801be0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be0e:	443b      	add	r3, r7
 801be10:	9309      	str	r3, [sp, #36]	; 0x24
 801be12:	e767      	b.n	801bce4 <_vfiprintf_r+0x94>
 801be14:	fb0c 3202 	mla	r2, ip, r2, r3
 801be18:	460c      	mov	r4, r1
 801be1a:	2001      	movs	r0, #1
 801be1c:	e7a5      	b.n	801bd6a <_vfiprintf_r+0x11a>
 801be1e:	2300      	movs	r3, #0
 801be20:	3401      	adds	r4, #1
 801be22:	9305      	str	r3, [sp, #20]
 801be24:	4619      	mov	r1, r3
 801be26:	f04f 0c0a 	mov.w	ip, #10
 801be2a:	4620      	mov	r0, r4
 801be2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801be30:	3a30      	subs	r2, #48	; 0x30
 801be32:	2a09      	cmp	r2, #9
 801be34:	d903      	bls.n	801be3e <_vfiprintf_r+0x1ee>
 801be36:	2b00      	cmp	r3, #0
 801be38:	d0c5      	beq.n	801bdc6 <_vfiprintf_r+0x176>
 801be3a:	9105      	str	r1, [sp, #20]
 801be3c:	e7c3      	b.n	801bdc6 <_vfiprintf_r+0x176>
 801be3e:	fb0c 2101 	mla	r1, ip, r1, r2
 801be42:	4604      	mov	r4, r0
 801be44:	2301      	movs	r3, #1
 801be46:	e7f0      	b.n	801be2a <_vfiprintf_r+0x1da>
 801be48:	ab03      	add	r3, sp, #12
 801be4a:	9300      	str	r3, [sp, #0]
 801be4c:	462a      	mov	r2, r5
 801be4e:	4b16      	ldr	r3, [pc, #88]	; (801bea8 <_vfiprintf_r+0x258>)
 801be50:	a904      	add	r1, sp, #16
 801be52:	4630      	mov	r0, r6
 801be54:	f7fb fb14 	bl	8017480 <_printf_float>
 801be58:	4607      	mov	r7, r0
 801be5a:	1c78      	adds	r0, r7, #1
 801be5c:	d1d6      	bne.n	801be0c <_vfiprintf_r+0x1bc>
 801be5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801be60:	07d9      	lsls	r1, r3, #31
 801be62:	d405      	bmi.n	801be70 <_vfiprintf_r+0x220>
 801be64:	89ab      	ldrh	r3, [r5, #12]
 801be66:	059a      	lsls	r2, r3, #22
 801be68:	d402      	bmi.n	801be70 <_vfiprintf_r+0x220>
 801be6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801be6c:	f7fb f97c 	bl	8017168 <__retarget_lock_release_recursive>
 801be70:	89ab      	ldrh	r3, [r5, #12]
 801be72:	065b      	lsls	r3, r3, #25
 801be74:	f53f af12 	bmi.w	801bc9c <_vfiprintf_r+0x4c>
 801be78:	9809      	ldr	r0, [sp, #36]	; 0x24
 801be7a:	e711      	b.n	801bca0 <_vfiprintf_r+0x50>
 801be7c:	ab03      	add	r3, sp, #12
 801be7e:	9300      	str	r3, [sp, #0]
 801be80:	462a      	mov	r2, r5
 801be82:	4b09      	ldr	r3, [pc, #36]	; (801bea8 <_vfiprintf_r+0x258>)
 801be84:	a904      	add	r1, sp, #16
 801be86:	4630      	mov	r0, r6
 801be88:	f7fb fd9e 	bl	80179c8 <_printf_i>
 801be8c:	e7e4      	b.n	801be58 <_vfiprintf_r+0x208>
 801be8e:	bf00      	nop
 801be90:	0801d854 	.word	0x0801d854
 801be94:	0801d874 	.word	0x0801d874
 801be98:	0801d834 	.word	0x0801d834
 801be9c:	0801dbcc 	.word	0x0801dbcc
 801bea0:	0801dbd6 	.word	0x0801dbd6
 801bea4:	08017481 	.word	0x08017481
 801bea8:	0801bc2b 	.word	0x0801bc2b
 801beac:	0801dbd2 	.word	0x0801dbd2

0801beb0 <_scanf_chars>:
 801beb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801beb4:	4615      	mov	r5, r2
 801beb6:	688a      	ldr	r2, [r1, #8]
 801beb8:	4680      	mov	r8, r0
 801beba:	460c      	mov	r4, r1
 801bebc:	b932      	cbnz	r2, 801becc <_scanf_chars+0x1c>
 801bebe:	698a      	ldr	r2, [r1, #24]
 801bec0:	2a00      	cmp	r2, #0
 801bec2:	bf0c      	ite	eq
 801bec4:	2201      	moveq	r2, #1
 801bec6:	f04f 32ff 	movne.w	r2, #4294967295
 801beca:	608a      	str	r2, [r1, #8]
 801becc:	6822      	ldr	r2, [r4, #0]
 801bece:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801bf5c <_scanf_chars+0xac>
 801bed2:	06d1      	lsls	r1, r2, #27
 801bed4:	bf5f      	itttt	pl
 801bed6:	681a      	ldrpl	r2, [r3, #0]
 801bed8:	1d11      	addpl	r1, r2, #4
 801beda:	6019      	strpl	r1, [r3, #0]
 801bedc:	6816      	ldrpl	r6, [r2, #0]
 801bede:	2700      	movs	r7, #0
 801bee0:	69a0      	ldr	r0, [r4, #24]
 801bee2:	b188      	cbz	r0, 801bf08 <_scanf_chars+0x58>
 801bee4:	2801      	cmp	r0, #1
 801bee6:	d107      	bne.n	801bef8 <_scanf_chars+0x48>
 801bee8:	682b      	ldr	r3, [r5, #0]
 801beea:	781a      	ldrb	r2, [r3, #0]
 801beec:	6963      	ldr	r3, [r4, #20]
 801beee:	5c9b      	ldrb	r3, [r3, r2]
 801bef0:	b953      	cbnz	r3, 801bf08 <_scanf_chars+0x58>
 801bef2:	bb27      	cbnz	r7, 801bf3e <_scanf_chars+0x8e>
 801bef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bef8:	2802      	cmp	r0, #2
 801befa:	d120      	bne.n	801bf3e <_scanf_chars+0x8e>
 801befc:	682b      	ldr	r3, [r5, #0]
 801befe:	781b      	ldrb	r3, [r3, #0]
 801bf00:	f813 3009 	ldrb.w	r3, [r3, r9]
 801bf04:	071b      	lsls	r3, r3, #28
 801bf06:	d41a      	bmi.n	801bf3e <_scanf_chars+0x8e>
 801bf08:	6823      	ldr	r3, [r4, #0]
 801bf0a:	06da      	lsls	r2, r3, #27
 801bf0c:	bf5e      	ittt	pl
 801bf0e:	682b      	ldrpl	r3, [r5, #0]
 801bf10:	781b      	ldrbpl	r3, [r3, #0]
 801bf12:	f806 3b01 	strbpl.w	r3, [r6], #1
 801bf16:	682a      	ldr	r2, [r5, #0]
 801bf18:	686b      	ldr	r3, [r5, #4]
 801bf1a:	3201      	adds	r2, #1
 801bf1c:	602a      	str	r2, [r5, #0]
 801bf1e:	68a2      	ldr	r2, [r4, #8]
 801bf20:	3b01      	subs	r3, #1
 801bf22:	3a01      	subs	r2, #1
 801bf24:	606b      	str	r3, [r5, #4]
 801bf26:	3701      	adds	r7, #1
 801bf28:	60a2      	str	r2, [r4, #8]
 801bf2a:	b142      	cbz	r2, 801bf3e <_scanf_chars+0x8e>
 801bf2c:	2b00      	cmp	r3, #0
 801bf2e:	dcd7      	bgt.n	801bee0 <_scanf_chars+0x30>
 801bf30:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801bf34:	4629      	mov	r1, r5
 801bf36:	4640      	mov	r0, r8
 801bf38:	4798      	blx	r3
 801bf3a:	2800      	cmp	r0, #0
 801bf3c:	d0d0      	beq.n	801bee0 <_scanf_chars+0x30>
 801bf3e:	6823      	ldr	r3, [r4, #0]
 801bf40:	f013 0310 	ands.w	r3, r3, #16
 801bf44:	d105      	bne.n	801bf52 <_scanf_chars+0xa2>
 801bf46:	68e2      	ldr	r2, [r4, #12]
 801bf48:	3201      	adds	r2, #1
 801bf4a:	60e2      	str	r2, [r4, #12]
 801bf4c:	69a2      	ldr	r2, [r4, #24]
 801bf4e:	b102      	cbz	r2, 801bf52 <_scanf_chars+0xa2>
 801bf50:	7033      	strb	r3, [r6, #0]
 801bf52:	6923      	ldr	r3, [r4, #16]
 801bf54:	441f      	add	r7, r3
 801bf56:	6127      	str	r7, [r4, #16]
 801bf58:	2000      	movs	r0, #0
 801bf5a:	e7cb      	b.n	801bef4 <_scanf_chars+0x44>
 801bf5c:	0801d731 	.word	0x0801d731

0801bf60 <_scanf_i>:
 801bf60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf64:	4698      	mov	r8, r3
 801bf66:	4b74      	ldr	r3, [pc, #464]	; (801c138 <_scanf_i+0x1d8>)
 801bf68:	460c      	mov	r4, r1
 801bf6a:	4682      	mov	sl, r0
 801bf6c:	4616      	mov	r6, r2
 801bf6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801bf72:	b087      	sub	sp, #28
 801bf74:	ab03      	add	r3, sp, #12
 801bf76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801bf7a:	4b70      	ldr	r3, [pc, #448]	; (801c13c <_scanf_i+0x1dc>)
 801bf7c:	69a1      	ldr	r1, [r4, #24]
 801bf7e:	4a70      	ldr	r2, [pc, #448]	; (801c140 <_scanf_i+0x1e0>)
 801bf80:	2903      	cmp	r1, #3
 801bf82:	bf18      	it	ne
 801bf84:	461a      	movne	r2, r3
 801bf86:	68a3      	ldr	r3, [r4, #8]
 801bf88:	9201      	str	r2, [sp, #4]
 801bf8a:	1e5a      	subs	r2, r3, #1
 801bf8c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801bf90:	bf88      	it	hi
 801bf92:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801bf96:	4627      	mov	r7, r4
 801bf98:	bf82      	ittt	hi
 801bf9a:	eb03 0905 	addhi.w	r9, r3, r5
 801bf9e:	f240 135d 	movwhi	r3, #349	; 0x15d
 801bfa2:	60a3      	strhi	r3, [r4, #8]
 801bfa4:	f857 3b1c 	ldr.w	r3, [r7], #28
 801bfa8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801bfac:	bf98      	it	ls
 801bfae:	f04f 0900 	movls.w	r9, #0
 801bfb2:	6023      	str	r3, [r4, #0]
 801bfb4:	463d      	mov	r5, r7
 801bfb6:	f04f 0b00 	mov.w	fp, #0
 801bfba:	6831      	ldr	r1, [r6, #0]
 801bfbc:	ab03      	add	r3, sp, #12
 801bfbe:	7809      	ldrb	r1, [r1, #0]
 801bfc0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801bfc4:	2202      	movs	r2, #2
 801bfc6:	f7e4 f92b 	bl	8000220 <memchr>
 801bfca:	b328      	cbz	r0, 801c018 <_scanf_i+0xb8>
 801bfcc:	f1bb 0f01 	cmp.w	fp, #1
 801bfd0:	d159      	bne.n	801c086 <_scanf_i+0x126>
 801bfd2:	6862      	ldr	r2, [r4, #4]
 801bfd4:	b92a      	cbnz	r2, 801bfe2 <_scanf_i+0x82>
 801bfd6:	6822      	ldr	r2, [r4, #0]
 801bfd8:	2308      	movs	r3, #8
 801bfda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801bfde:	6063      	str	r3, [r4, #4]
 801bfe0:	6022      	str	r2, [r4, #0]
 801bfe2:	6822      	ldr	r2, [r4, #0]
 801bfe4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801bfe8:	6022      	str	r2, [r4, #0]
 801bfea:	68a2      	ldr	r2, [r4, #8]
 801bfec:	1e51      	subs	r1, r2, #1
 801bfee:	60a1      	str	r1, [r4, #8]
 801bff0:	b192      	cbz	r2, 801c018 <_scanf_i+0xb8>
 801bff2:	6832      	ldr	r2, [r6, #0]
 801bff4:	1c51      	adds	r1, r2, #1
 801bff6:	6031      	str	r1, [r6, #0]
 801bff8:	7812      	ldrb	r2, [r2, #0]
 801bffa:	f805 2b01 	strb.w	r2, [r5], #1
 801bffe:	6872      	ldr	r2, [r6, #4]
 801c000:	3a01      	subs	r2, #1
 801c002:	2a00      	cmp	r2, #0
 801c004:	6072      	str	r2, [r6, #4]
 801c006:	dc07      	bgt.n	801c018 <_scanf_i+0xb8>
 801c008:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801c00c:	4631      	mov	r1, r6
 801c00e:	4650      	mov	r0, sl
 801c010:	4790      	blx	r2
 801c012:	2800      	cmp	r0, #0
 801c014:	f040 8085 	bne.w	801c122 <_scanf_i+0x1c2>
 801c018:	f10b 0b01 	add.w	fp, fp, #1
 801c01c:	f1bb 0f03 	cmp.w	fp, #3
 801c020:	d1cb      	bne.n	801bfba <_scanf_i+0x5a>
 801c022:	6863      	ldr	r3, [r4, #4]
 801c024:	b90b      	cbnz	r3, 801c02a <_scanf_i+0xca>
 801c026:	230a      	movs	r3, #10
 801c028:	6063      	str	r3, [r4, #4]
 801c02a:	6863      	ldr	r3, [r4, #4]
 801c02c:	4945      	ldr	r1, [pc, #276]	; (801c144 <_scanf_i+0x1e4>)
 801c02e:	6960      	ldr	r0, [r4, #20]
 801c030:	1ac9      	subs	r1, r1, r3
 801c032:	f000 f89b 	bl	801c16c <__sccl>
 801c036:	f04f 0b00 	mov.w	fp, #0
 801c03a:	68a3      	ldr	r3, [r4, #8]
 801c03c:	6822      	ldr	r2, [r4, #0]
 801c03e:	2b00      	cmp	r3, #0
 801c040:	d03d      	beq.n	801c0be <_scanf_i+0x15e>
 801c042:	6831      	ldr	r1, [r6, #0]
 801c044:	6960      	ldr	r0, [r4, #20]
 801c046:	f891 c000 	ldrb.w	ip, [r1]
 801c04a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801c04e:	2800      	cmp	r0, #0
 801c050:	d035      	beq.n	801c0be <_scanf_i+0x15e>
 801c052:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801c056:	d124      	bne.n	801c0a2 <_scanf_i+0x142>
 801c058:	0510      	lsls	r0, r2, #20
 801c05a:	d522      	bpl.n	801c0a2 <_scanf_i+0x142>
 801c05c:	f10b 0b01 	add.w	fp, fp, #1
 801c060:	f1b9 0f00 	cmp.w	r9, #0
 801c064:	d003      	beq.n	801c06e <_scanf_i+0x10e>
 801c066:	3301      	adds	r3, #1
 801c068:	f109 39ff 	add.w	r9, r9, #4294967295
 801c06c:	60a3      	str	r3, [r4, #8]
 801c06e:	6873      	ldr	r3, [r6, #4]
 801c070:	3b01      	subs	r3, #1
 801c072:	2b00      	cmp	r3, #0
 801c074:	6073      	str	r3, [r6, #4]
 801c076:	dd1b      	ble.n	801c0b0 <_scanf_i+0x150>
 801c078:	6833      	ldr	r3, [r6, #0]
 801c07a:	3301      	adds	r3, #1
 801c07c:	6033      	str	r3, [r6, #0]
 801c07e:	68a3      	ldr	r3, [r4, #8]
 801c080:	3b01      	subs	r3, #1
 801c082:	60a3      	str	r3, [r4, #8]
 801c084:	e7d9      	b.n	801c03a <_scanf_i+0xda>
 801c086:	f1bb 0f02 	cmp.w	fp, #2
 801c08a:	d1ae      	bne.n	801bfea <_scanf_i+0x8a>
 801c08c:	6822      	ldr	r2, [r4, #0]
 801c08e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801c092:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801c096:	d1bf      	bne.n	801c018 <_scanf_i+0xb8>
 801c098:	2310      	movs	r3, #16
 801c09a:	6063      	str	r3, [r4, #4]
 801c09c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801c0a0:	e7a2      	b.n	801bfe8 <_scanf_i+0x88>
 801c0a2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801c0a6:	6022      	str	r2, [r4, #0]
 801c0a8:	780b      	ldrb	r3, [r1, #0]
 801c0aa:	f805 3b01 	strb.w	r3, [r5], #1
 801c0ae:	e7de      	b.n	801c06e <_scanf_i+0x10e>
 801c0b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801c0b4:	4631      	mov	r1, r6
 801c0b6:	4650      	mov	r0, sl
 801c0b8:	4798      	blx	r3
 801c0ba:	2800      	cmp	r0, #0
 801c0bc:	d0df      	beq.n	801c07e <_scanf_i+0x11e>
 801c0be:	6823      	ldr	r3, [r4, #0]
 801c0c0:	05d9      	lsls	r1, r3, #23
 801c0c2:	d50d      	bpl.n	801c0e0 <_scanf_i+0x180>
 801c0c4:	42bd      	cmp	r5, r7
 801c0c6:	d909      	bls.n	801c0dc <_scanf_i+0x17c>
 801c0c8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801c0cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c0d0:	4632      	mov	r2, r6
 801c0d2:	4650      	mov	r0, sl
 801c0d4:	4798      	blx	r3
 801c0d6:	f105 39ff 	add.w	r9, r5, #4294967295
 801c0da:	464d      	mov	r5, r9
 801c0dc:	42bd      	cmp	r5, r7
 801c0de:	d028      	beq.n	801c132 <_scanf_i+0x1d2>
 801c0e0:	6822      	ldr	r2, [r4, #0]
 801c0e2:	f012 0210 	ands.w	r2, r2, #16
 801c0e6:	d113      	bne.n	801c110 <_scanf_i+0x1b0>
 801c0e8:	702a      	strb	r2, [r5, #0]
 801c0ea:	6863      	ldr	r3, [r4, #4]
 801c0ec:	9e01      	ldr	r6, [sp, #4]
 801c0ee:	4639      	mov	r1, r7
 801c0f0:	4650      	mov	r0, sl
 801c0f2:	47b0      	blx	r6
 801c0f4:	f8d8 3000 	ldr.w	r3, [r8]
 801c0f8:	6821      	ldr	r1, [r4, #0]
 801c0fa:	1d1a      	adds	r2, r3, #4
 801c0fc:	f8c8 2000 	str.w	r2, [r8]
 801c100:	f011 0f20 	tst.w	r1, #32
 801c104:	681b      	ldr	r3, [r3, #0]
 801c106:	d00f      	beq.n	801c128 <_scanf_i+0x1c8>
 801c108:	6018      	str	r0, [r3, #0]
 801c10a:	68e3      	ldr	r3, [r4, #12]
 801c10c:	3301      	adds	r3, #1
 801c10e:	60e3      	str	r3, [r4, #12]
 801c110:	1bed      	subs	r5, r5, r7
 801c112:	44ab      	add	fp, r5
 801c114:	6925      	ldr	r5, [r4, #16]
 801c116:	445d      	add	r5, fp
 801c118:	6125      	str	r5, [r4, #16]
 801c11a:	2000      	movs	r0, #0
 801c11c:	b007      	add	sp, #28
 801c11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c122:	f04f 0b00 	mov.w	fp, #0
 801c126:	e7ca      	b.n	801c0be <_scanf_i+0x15e>
 801c128:	07ca      	lsls	r2, r1, #31
 801c12a:	bf4c      	ite	mi
 801c12c:	8018      	strhmi	r0, [r3, #0]
 801c12e:	6018      	strpl	r0, [r3, #0]
 801c130:	e7eb      	b.n	801c10a <_scanf_i+0x1aa>
 801c132:	2001      	movs	r0, #1
 801c134:	e7f2      	b.n	801c11c <_scanf_i+0x1bc>
 801c136:	bf00      	nop
 801c138:	0801d4d0 	.word	0x0801d4d0
 801c13c:	080192a1 	.word	0x080192a1
 801c140:	08019191 	.word	0x08019191
 801c144:	0801dbf6 	.word	0x0801dbf6

0801c148 <_read_r>:
 801c148:	b538      	push	{r3, r4, r5, lr}
 801c14a:	4d07      	ldr	r5, [pc, #28]	; (801c168 <_read_r+0x20>)
 801c14c:	4604      	mov	r4, r0
 801c14e:	4608      	mov	r0, r1
 801c150:	4611      	mov	r1, r2
 801c152:	2200      	movs	r2, #0
 801c154:	602a      	str	r2, [r5, #0]
 801c156:	461a      	mov	r2, r3
 801c158:	f000 f8e4 	bl	801c324 <_read>
 801c15c:	1c43      	adds	r3, r0, #1
 801c15e:	d102      	bne.n	801c166 <_read_r+0x1e>
 801c160:	682b      	ldr	r3, [r5, #0]
 801c162:	b103      	cbz	r3, 801c166 <_read_r+0x1e>
 801c164:	6023      	str	r3, [r4, #0]
 801c166:	bd38      	pop	{r3, r4, r5, pc}
 801c168:	2000d0c8 	.word	0x2000d0c8

0801c16c <__sccl>:
 801c16c:	b570      	push	{r4, r5, r6, lr}
 801c16e:	780b      	ldrb	r3, [r1, #0]
 801c170:	4604      	mov	r4, r0
 801c172:	2b5e      	cmp	r3, #94	; 0x5e
 801c174:	bf0b      	itete	eq
 801c176:	784b      	ldrbeq	r3, [r1, #1]
 801c178:	1c48      	addne	r0, r1, #1
 801c17a:	1c88      	addeq	r0, r1, #2
 801c17c:	2200      	movne	r2, #0
 801c17e:	bf08      	it	eq
 801c180:	2201      	moveq	r2, #1
 801c182:	1e61      	subs	r1, r4, #1
 801c184:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801c188:	f801 2f01 	strb.w	r2, [r1, #1]!
 801c18c:	42a9      	cmp	r1, r5
 801c18e:	d1fb      	bne.n	801c188 <__sccl+0x1c>
 801c190:	b90b      	cbnz	r3, 801c196 <__sccl+0x2a>
 801c192:	3801      	subs	r0, #1
 801c194:	bd70      	pop	{r4, r5, r6, pc}
 801c196:	f082 0101 	eor.w	r1, r2, #1
 801c19a:	54e1      	strb	r1, [r4, r3]
 801c19c:	1c42      	adds	r2, r0, #1
 801c19e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801c1a2:	2d2d      	cmp	r5, #45	; 0x2d
 801c1a4:	f102 36ff 	add.w	r6, r2, #4294967295
 801c1a8:	4610      	mov	r0, r2
 801c1aa:	d006      	beq.n	801c1ba <__sccl+0x4e>
 801c1ac:	2d5d      	cmp	r5, #93	; 0x5d
 801c1ae:	d0f1      	beq.n	801c194 <__sccl+0x28>
 801c1b0:	b90d      	cbnz	r5, 801c1b6 <__sccl+0x4a>
 801c1b2:	4630      	mov	r0, r6
 801c1b4:	e7ee      	b.n	801c194 <__sccl+0x28>
 801c1b6:	462b      	mov	r3, r5
 801c1b8:	e7ef      	b.n	801c19a <__sccl+0x2e>
 801c1ba:	7816      	ldrb	r6, [r2, #0]
 801c1bc:	2e5d      	cmp	r6, #93	; 0x5d
 801c1be:	d0fa      	beq.n	801c1b6 <__sccl+0x4a>
 801c1c0:	42b3      	cmp	r3, r6
 801c1c2:	dcf8      	bgt.n	801c1b6 <__sccl+0x4a>
 801c1c4:	4618      	mov	r0, r3
 801c1c6:	3001      	adds	r0, #1
 801c1c8:	4286      	cmp	r6, r0
 801c1ca:	5421      	strb	r1, [r4, r0]
 801c1cc:	dcfb      	bgt.n	801c1c6 <__sccl+0x5a>
 801c1ce:	43d8      	mvns	r0, r3
 801c1d0:	4430      	add	r0, r6
 801c1d2:	1c5d      	adds	r5, r3, #1
 801c1d4:	42b3      	cmp	r3, r6
 801c1d6:	bfa8      	it	ge
 801c1d8:	2000      	movge	r0, #0
 801c1da:	182b      	adds	r3, r5, r0
 801c1dc:	3202      	adds	r2, #2
 801c1de:	e7de      	b.n	801c19e <__sccl+0x32>

0801c1e0 <__submore>:
 801c1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c1e4:	460c      	mov	r4, r1
 801c1e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801c1e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c1ec:	4299      	cmp	r1, r3
 801c1ee:	d11d      	bne.n	801c22c <__submore+0x4c>
 801c1f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801c1f4:	f7fb f84a 	bl	801728c <_malloc_r>
 801c1f8:	b918      	cbnz	r0, 801c202 <__submore+0x22>
 801c1fa:	f04f 30ff 	mov.w	r0, #4294967295
 801c1fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c206:	63a3      	str	r3, [r4, #56]	; 0x38
 801c208:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801c20c:	6360      	str	r0, [r4, #52]	; 0x34
 801c20e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801c212:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801c216:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801c21a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801c21e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801c222:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801c226:	6020      	str	r0, [r4, #0]
 801c228:	2000      	movs	r0, #0
 801c22a:	e7e8      	b.n	801c1fe <__submore+0x1e>
 801c22c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801c22e:	0077      	lsls	r7, r6, #1
 801c230:	463a      	mov	r2, r7
 801c232:	f7ff f98f 	bl	801b554 <_realloc_r>
 801c236:	4605      	mov	r5, r0
 801c238:	2800      	cmp	r0, #0
 801c23a:	d0de      	beq.n	801c1fa <__submore+0x1a>
 801c23c:	eb00 0806 	add.w	r8, r0, r6
 801c240:	4601      	mov	r1, r0
 801c242:	4632      	mov	r2, r6
 801c244:	4640      	mov	r0, r8
 801c246:	f7fa ffa1 	bl	801718c <memcpy>
 801c24a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801c24e:	f8c4 8000 	str.w	r8, [r4]
 801c252:	e7e9      	b.n	801c228 <__submore+0x48>

0801c254 <__ascii_wctomb>:
 801c254:	b149      	cbz	r1, 801c26a <__ascii_wctomb+0x16>
 801c256:	2aff      	cmp	r2, #255	; 0xff
 801c258:	bf85      	ittet	hi
 801c25a:	238a      	movhi	r3, #138	; 0x8a
 801c25c:	6003      	strhi	r3, [r0, #0]
 801c25e:	700a      	strbls	r2, [r1, #0]
 801c260:	f04f 30ff 	movhi.w	r0, #4294967295
 801c264:	bf98      	it	ls
 801c266:	2001      	movls	r0, #1
 801c268:	4770      	bx	lr
 801c26a:	4608      	mov	r0, r1
 801c26c:	4770      	bx	lr
	...

0801c270 <_fstat_r>:
 801c270:	b538      	push	{r3, r4, r5, lr}
 801c272:	4d07      	ldr	r5, [pc, #28]	; (801c290 <_fstat_r+0x20>)
 801c274:	2300      	movs	r3, #0
 801c276:	4604      	mov	r4, r0
 801c278:	4608      	mov	r0, r1
 801c27a:	4611      	mov	r1, r2
 801c27c:	602b      	str	r3, [r5, #0]
 801c27e:	f000 f829 	bl	801c2d4 <_fstat>
 801c282:	1c43      	adds	r3, r0, #1
 801c284:	d102      	bne.n	801c28c <_fstat_r+0x1c>
 801c286:	682b      	ldr	r3, [r5, #0]
 801c288:	b103      	cbz	r3, 801c28c <_fstat_r+0x1c>
 801c28a:	6023      	str	r3, [r4, #0]
 801c28c:	bd38      	pop	{r3, r4, r5, pc}
 801c28e:	bf00      	nop
 801c290:	2000d0c8 	.word	0x2000d0c8

0801c294 <_isatty_r>:
 801c294:	b538      	push	{r3, r4, r5, lr}
 801c296:	4d06      	ldr	r5, [pc, #24]	; (801c2b0 <_isatty_r+0x1c>)
 801c298:	2300      	movs	r3, #0
 801c29a:	4604      	mov	r4, r0
 801c29c:	4608      	mov	r0, r1
 801c29e:	602b      	str	r3, [r5, #0]
 801c2a0:	f000 f828 	bl	801c2f4 <_isatty>
 801c2a4:	1c43      	adds	r3, r0, #1
 801c2a6:	d102      	bne.n	801c2ae <_isatty_r+0x1a>
 801c2a8:	682b      	ldr	r3, [r5, #0]
 801c2aa:	b103      	cbz	r3, 801c2ae <_isatty_r+0x1a>
 801c2ac:	6023      	str	r3, [r4, #0]
 801c2ae:	bd38      	pop	{r3, r4, r5, pc}
 801c2b0:	2000d0c8 	.word	0x2000d0c8

0801c2b4 <_malloc_usable_size_r>:
 801c2b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c2b8:	1f18      	subs	r0, r3, #4
 801c2ba:	2b00      	cmp	r3, #0
 801c2bc:	bfbc      	itt	lt
 801c2be:	580b      	ldrlt	r3, [r1, r0]
 801c2c0:	18c0      	addlt	r0, r0, r3
 801c2c2:	4770      	bx	lr

0801c2c4 <_close>:
 801c2c4:	4b02      	ldr	r3, [pc, #8]	; (801c2d0 <_close+0xc>)
 801c2c6:	2258      	movs	r2, #88	; 0x58
 801c2c8:	601a      	str	r2, [r3, #0]
 801c2ca:	f04f 30ff 	mov.w	r0, #4294967295
 801c2ce:	4770      	bx	lr
 801c2d0:	2000d0c8 	.word	0x2000d0c8

0801c2d4 <_fstat>:
 801c2d4:	4b02      	ldr	r3, [pc, #8]	; (801c2e0 <_fstat+0xc>)
 801c2d6:	2258      	movs	r2, #88	; 0x58
 801c2d8:	601a      	str	r2, [r3, #0]
 801c2da:	f04f 30ff 	mov.w	r0, #4294967295
 801c2de:	4770      	bx	lr
 801c2e0:	2000d0c8 	.word	0x2000d0c8

0801c2e4 <_getpid>:
 801c2e4:	4b02      	ldr	r3, [pc, #8]	; (801c2f0 <_getpid+0xc>)
 801c2e6:	2258      	movs	r2, #88	; 0x58
 801c2e8:	601a      	str	r2, [r3, #0]
 801c2ea:	f04f 30ff 	mov.w	r0, #4294967295
 801c2ee:	4770      	bx	lr
 801c2f0:	2000d0c8 	.word	0x2000d0c8

0801c2f4 <_isatty>:
 801c2f4:	4b02      	ldr	r3, [pc, #8]	; (801c300 <_isatty+0xc>)
 801c2f6:	2258      	movs	r2, #88	; 0x58
 801c2f8:	601a      	str	r2, [r3, #0]
 801c2fa:	2000      	movs	r0, #0
 801c2fc:	4770      	bx	lr
 801c2fe:	bf00      	nop
 801c300:	2000d0c8 	.word	0x2000d0c8

0801c304 <_kill>:
 801c304:	4b02      	ldr	r3, [pc, #8]	; (801c310 <_kill+0xc>)
 801c306:	2258      	movs	r2, #88	; 0x58
 801c308:	601a      	str	r2, [r3, #0]
 801c30a:	f04f 30ff 	mov.w	r0, #4294967295
 801c30e:	4770      	bx	lr
 801c310:	2000d0c8 	.word	0x2000d0c8

0801c314 <_lseek>:
 801c314:	4b02      	ldr	r3, [pc, #8]	; (801c320 <_lseek+0xc>)
 801c316:	2258      	movs	r2, #88	; 0x58
 801c318:	601a      	str	r2, [r3, #0]
 801c31a:	f04f 30ff 	mov.w	r0, #4294967295
 801c31e:	4770      	bx	lr
 801c320:	2000d0c8 	.word	0x2000d0c8

0801c324 <_read>:
 801c324:	4b02      	ldr	r3, [pc, #8]	; (801c330 <_read+0xc>)
 801c326:	2258      	movs	r2, #88	; 0x58
 801c328:	601a      	str	r2, [r3, #0]
 801c32a:	f04f 30ff 	mov.w	r0, #4294967295
 801c32e:	4770      	bx	lr
 801c330:	2000d0c8 	.word	0x2000d0c8

0801c334 <_sbrk>:
 801c334:	4b04      	ldr	r3, [pc, #16]	; (801c348 <_sbrk+0x14>)
 801c336:	6819      	ldr	r1, [r3, #0]
 801c338:	4602      	mov	r2, r0
 801c33a:	b909      	cbnz	r1, 801c340 <_sbrk+0xc>
 801c33c:	4903      	ldr	r1, [pc, #12]	; (801c34c <_sbrk+0x18>)
 801c33e:	6019      	str	r1, [r3, #0]
 801c340:	6818      	ldr	r0, [r3, #0]
 801c342:	4402      	add	r2, r0
 801c344:	601a      	str	r2, [r3, #0]
 801c346:	4770      	bx	lr
 801c348:	20008598 	.word	0x20008598
 801c34c:	2000d0d0 	.word	0x2000d0d0

0801c350 <_write>:
 801c350:	4b02      	ldr	r3, [pc, #8]	; (801c35c <_write+0xc>)
 801c352:	2258      	movs	r2, #88	; 0x58
 801c354:	601a      	str	r2, [r3, #0]
 801c356:	f04f 30ff 	mov.w	r0, #4294967295
 801c35a:	4770      	bx	lr
 801c35c:	2000d0c8 	.word	0x2000d0c8

0801c360 <_exit>:
 801c360:	e7fe      	b.n	801c360 <_exit>
	...

0801c364 <_init>:
 801c364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c366:	bf00      	nop
 801c368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c36a:	bc08      	pop	{r3}
 801c36c:	469e      	mov	lr, r3
 801c36e:	4770      	bx	lr

0801c370 <_fini>:
 801c370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c372:	bf00      	nop
 801c374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c376:	bc08      	pop	{r3}
 801c378:	469e      	mov	lr, r3
 801c37a:	4770      	bx	lr
