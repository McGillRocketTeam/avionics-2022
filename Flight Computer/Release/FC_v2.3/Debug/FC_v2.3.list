
FC_v2.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017d58  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001324  08017f08  08017f08  00027f08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801922c  0801922c  00030254  2**0
                  CONTENTS
  4 .ARM          00000008  0801922c  0801922c  0002922c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019234  08019234  00030254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019234  08019234  00029234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019238  08019238  00029238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  0801923c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030254  2**0
                  CONTENTS
 10 .bss          000066d0  20000254  20000254  00030254  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  20006924  20006924  00030254  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030254  2**0
                  CONTENTS, READONLY
 13 .debug_info   00051a0f  00000000  00000000  00030284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008434  00000000  00000000  00081c93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000035b0  00000000  00000000  0008a0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000032c8  00000000  00000000  0008d678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031d2c  00000000  00000000  00090940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003f111  00000000  00000000  000c266c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010c70d  00000000  00000000  0010177d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0020de8a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000fd44  00000000  00000000  0020dee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  0021dc24  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  0021dcf0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000254 	.word	0x20000254
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08017ef0 	.word	0x08017ef0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000258 	.word	0x20000258
 80001ec:	08017ef0 	.word	0x08017ef0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <println>:

#include <MRT_helpers.h>
#include <MRT_setup.h>
#include <tim.h>

void println(char* s){
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff f8eb 	bl	80001f0 <strlen>
 800101a:	4603      	mov	r3, r0
 800101c:	b29a      	uxth	r2, r3
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	4806      	ldr	r0, [pc, #24]	; (8001040 <println+0x34>)
 8001026:	f00a f856 	bl	800b0d6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	2202      	movs	r2, #2
 8001030:	4904      	ldr	r1, [pc, #16]	; (8001044 <println+0x38>)
 8001032:	4803      	ldr	r0, [pc, #12]	; (8001040 <println+0x34>)
 8001034:	f00a f84f 	bl	800b0d6 <HAL_UART_Transmit>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20005234 	.word	0x20005234
 8001044:	08017f08 	.word	0x08017f08

08001048 <print>:

void print(char* s){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff f8cd 	bl	80001f0 <strlen>
 8001056:	4603      	mov	r3, r0
 8001058:	b29a      	uxth	r2, r3
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	4803      	ldr	r0, [pc, #12]	; (8001070 <print+0x28>)
 8001062:	f00a f838 	bl	800b0d6 <HAL_UART_Transmit>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20005234 	.word	0x20005234

08001074 <MRT_Init>:


//**************************************************//
//PUBLIC FUNCTIONS

void MRT_Init(void){
 8001074:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001078:	b0c8      	sub	sp, #288	; 0x120
 800107a:	af04      	add	r7, sp, #16
	print("\r\n\r\n/********MRT Init********/\r\n");
 800107c:	48b2      	ldr	r0, [pc, #712]	; (8001348 <MRT_Init+0x2d4>)
 800107e:	f7ff ffe3 	bl	8001048 <print>

	MRT_Reinitialize_Peripherals();
 8001082:	f000 fa87 	bl	8001594 <MRT_Reinitialize_Peripherals>
	MRT_external_flash_Init();
 8001086:	f001 fc0b 	bl	80028a0 <MRT_external_flash_Init>
	MRT_reset_info();
 800108a:	f000 f98b 	bl	80013a4 <MRT_reset_info>
	print("OK\r\n");
	#endif

	//RTC
	HAL_IWDG_Refresh(&hiwdg);
	MRT_rtc_Init();
 800108e:	f002 fce1 	bl	8003a54 <MRT_rtc_Init>
	#if MEMORY_THREAD

		//SD card
		#if SD_CARD_
			HAL_IWDG_Refresh(&hiwdg);
			sd_init_dynamic_filename("FC", "", filename);
 8001092:	4aae      	ldr	r2, [pc, #696]	; (800134c <MRT_Init+0x2d8>)
 8001094:	49ae      	ldr	r1, [pc, #696]	; (8001350 <MRT_Init+0x2dc>)
 8001096:	48af      	ldr	r0, [pc, #700]	; (8001354 <MRT_Init+0x2e0>)
 8001098:	f001 fd70 	bl	8002b7c <sd_init_dynamic_filename>
		#endif

		//LSM6DSR
		#if LSM6DSR_
		HAL_IWDG_Refresh(&hiwdg);
		hlsm6dsr = MRT_LSM6DSR_Setup(&LSM6DSR_I2C, MRT_LSM6DSR_ID);
 800109c:	4cae      	ldr	r4, [pc, #696]	; (8001358 <MRT_Init+0x2e4>)
 800109e:	463b      	mov	r3, r7
 80010a0:	226a      	movs	r2, #106	; 0x6a
 80010a2:	49ae      	ldr	r1, [pc, #696]	; (800135c <MRT_Init+0x2e8>)
 80010a4:	4618      	mov	r0, r3
 80010a6:	f002 fe93 	bl	8003dd0 <MRT_LSM6DSR_Setup>
 80010aa:	463a      	mov	r2, r7
 80010ac:	4623      	mov	r3, r4
 80010ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80010b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		#endif

		//LPS22HH
		#if LPS22HH_
		HAL_IWDG_Refresh(&hiwdg);
		hlps22hh = MRT_LPS22HH_Setup(&LPS22HH_I2C, MRT_LPS22HH_ID);
 80010b4:	4caa      	ldr	r4, [pc, #680]	; (8001360 <MRT_Init+0x2ec>)
 80010b6:	463b      	mov	r3, r7
 80010b8:	22b3      	movs	r2, #179	; 0xb3
 80010ba:	49a8      	ldr	r1, [pc, #672]	; (800135c <MRT_Init+0x2e8>)
 80010bc:	4618      	mov	r0, r3
 80010be:	f003 f80d 	bl	80040dc <MRT_LPS22HH_Setup>
 80010c2:	463a      	mov	r2, r7
 80010c4:	4623      	mov	r3, r4
 80010c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80010c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		#endif

		//GPS
		#if GPS_
		HAL_IWDG_Refresh(&hiwdg);
		GPS_init(&GPS_UART, &DEBUG_UART);
 80010cc:	49a5      	ldr	r1, [pc, #660]	; (8001364 <MRT_Init+0x2f0>)
 80010ce:	48a6      	ldr	r0, [pc, #664]	; (8001368 <MRT_Init+0x2f4>)
 80010d0:	f003 fb42 	bl	8004758 <GPS_init>

#define TX_BUF_DIM 256
char buffer[TX_BUF_DIM];

	while(1){
		HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 80010d4:	2201      	movs	r2, #1
 80010d6:	2104      	movs	r1, #4
 80010d8:	48a4      	ldr	r0, [pc, #656]	; (800136c <MRT_Init+0x2f8>)
 80010da:	f004 ff15 	bl	8005f08 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80010de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010e2:	f004 f9ed 	bl	80054c0 <HAL_Delay>

		  //GPS
		  GPS_Poll(&gps_latitude, &gps_longitude, &gps_time);
 80010e6:	4aa2      	ldr	r2, [pc, #648]	; (8001370 <MRT_Init+0x2fc>)
 80010e8:	49a2      	ldr	r1, [pc, #648]	; (8001374 <MRT_Init+0x300>)
 80010ea:	48a3      	ldr	r0, [pc, #652]	; (8001378 <MRT_Init+0x304>)
 80010ec:	f003 f8d2 	bl	8004294 <GPS_Poll>

	  	  //LSM6DSR
	  	  MRT_LSM6DSR_getAcceleration(hlsm6dsr,acceleration_mg);
 80010f0:	4a99      	ldr	r2, [pc, #612]	; (8001358 <MRT_Init+0x2e4>)
 80010f2:	4ba2      	ldr	r3, [pc, #648]	; (800137c <MRT_Init+0x308>)
 80010f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80010f6:	f002 ff01 	bl	8003efc <MRT_LSM6DSR_getAcceleration>
	  	  MRT_LSM6DSR_getAngularRate(hlsm6dsr,angular_rate_mdps);
 80010fa:	4a97      	ldr	r2, [pc, #604]	; (8001358 <MRT_Init+0x2e4>)
 80010fc:	4ba0      	ldr	r3, [pc, #640]	; (8001380 <MRT_Init+0x30c>)
 80010fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001100:	f002 ff6c 	bl	8003fdc <MRT_LSM6DSR_getAngularRate>
		  MRT_LSM6DSR_getTemperature(hlsm6dsr,&lsm6dsr_temperature_degC);
 8001104:	4a94      	ldr	r2, [pc, #592]	; (8001358 <MRT_Init+0x2e4>)
 8001106:	4b9f      	ldr	r3, [pc, #636]	; (8001384 <MRT_Init+0x310>)
 8001108:	ca07      	ldmia	r2, {r0, r1, r2}
 800110a:	f002 ff3d 	bl	8003f88 <MRT_LSM6DSR_getTemperature>

		  //LPS22HH
		  MRT_LPS22HH_getTemperature(hlps22hh,&lps22hh_temperature_degC);
 800110e:	4a94      	ldr	r2, [pc, #592]	; (8001360 <MRT_Init+0x2ec>)
 8001110:	4b9d      	ldr	r3, [pc, #628]	; (8001388 <MRT_Init+0x314>)
 8001112:	ca07      	ldmia	r2, {r0, r1, r2}
 8001114:	f003 f894 	bl	8004240 <MRT_LPS22HH_getTemperature>
		  MRT_LPS22HH_getPressure(hlps22hh, &pressure_hPa);
 8001118:	4a91      	ldr	r2, [pc, #580]	; (8001360 <MRT_Init+0x2ec>)
 800111a:	4b9c      	ldr	r3, [pc, #624]	; (800138c <MRT_Init+0x318>)
 800111c:	ca07      	ldmia	r2, {r0, r1, r2}
 800111e:	f003 f863 	bl	80041e8 <MRT_LPS22HH_getPressure>




		  //GPS
		  memset(buffer, 0, TX_BUF_DIM);
 8001122:	f107 0310 	add.w	r3, r7, #16
 8001126:	f44f 7280 	mov.w	r2, #256	; 0x100
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f011 fe58 	bl	8012de2 <memset>
		  sprintf(buffer,"Alt: %.2f   Long: %.2f   Time: %.0f\r\n",gps_latitude, gps_longitude, gps_time);
 8001132:	4b91      	ldr	r3, [pc, #580]	; (8001378 <MRT_Init+0x304>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fa16 	bl	8000568 <__aeabi_f2d>
 800113c:	4680      	mov	r8, r0
 800113e:	4689      	mov	r9, r1
 8001140:	4b8c      	ldr	r3, [pc, #560]	; (8001374 <MRT_Init+0x300>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fa0f 	bl	8000568 <__aeabi_f2d>
 800114a:	4604      	mov	r4, r0
 800114c:	460d      	mov	r5, r1
 800114e:	4b88      	ldr	r3, [pc, #544]	; (8001370 <MRT_Init+0x2fc>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fa08 	bl	8000568 <__aeabi_f2d>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	f107 0010 	add.w	r0, r7, #16
 8001160:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001164:	e9cd 4500 	strd	r4, r5, [sp]
 8001168:	4642      	mov	r2, r8
 800116a:	464b      	mov	r3, r9
 800116c:	4988      	ldr	r1, [pc, #544]	; (8001390 <MRT_Init+0x31c>)
 800116e:	f012 fdb9 	bl	8013ce4 <siprintf>
		  HAL_UART_Transmit(&DEBUG_UART,buffer,strlen(buffer),HAL_MAX_DELAY);
 8001172:	f107 0310 	add.w	r3, r7, #16
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f83a 	bl	80001f0 <strlen>
 800117c:	4603      	mov	r3, r0
 800117e:	b29a      	uxth	r2, r3
 8001180:	f107 0110 	add.w	r1, r7, #16
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
 8001188:	4876      	ldr	r0, [pc, #472]	; (8001364 <MRT_Init+0x2f0>)
 800118a:	f009 ffa4 	bl	800b0d6 <HAL_UART_Transmit>

		  //LSM6DSR
		  memset(buffer, 0, TX_BUF_DIM);
 800118e:	f107 0310 	add.w	r3, r7, #16
 8001192:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f011 fe22 	bl	8012de2 <memset>
		  sprintf(buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 800119e:	4b77      	ldr	r3, [pc, #476]	; (800137c <MRT_Init+0x308>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f9e0 	bl	8000568 <__aeabi_f2d>
 80011a8:	4680      	mov	r8, r0
 80011aa:	4689      	mov	r9, r1
 80011ac:	4b73      	ldr	r3, [pc, #460]	; (800137c <MRT_Init+0x308>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f9d9 	bl	8000568 <__aeabi_f2d>
 80011b6:	4604      	mov	r4, r0
 80011b8:	460d      	mov	r5, r1
 80011ba:	4b70      	ldr	r3, [pc, #448]	; (800137c <MRT_Init+0x308>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f9d2 	bl	8000568 <__aeabi_f2d>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	f107 0010 	add.w	r0, r7, #16
 80011cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80011d0:	e9cd 4500 	strd	r4, r5, [sp]
 80011d4:	4642      	mov	r2, r8
 80011d6:	464b      	mov	r3, r9
 80011d8:	496e      	ldr	r1, [pc, #440]	; (8001394 <MRT_Init+0x320>)
 80011da:	f012 fd83 	bl	8013ce4 <siprintf>
		  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff f804 	bl	80001f0 <strlen>
 80011e8:	4603      	mov	r3, r0
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	f107 0110 	add.w	r1, r7, #16
 80011f0:	f04f 33ff 	mov.w	r3, #4294967295
 80011f4:	485b      	ldr	r0, [pc, #364]	; (8001364 <MRT_Init+0x2f0>)
 80011f6:	f009 ff6e 	bl	800b0d6 <HAL_UART_Transmit>

		  memset(buffer, 0, TX_BUF_DIM);
 80011fa:	f107 0310 	add.w	r3, r7, #16
 80011fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f011 fdec 	bl	8012de2 <memset>
		  sprintf(buffer,"Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 800120a:	4b5d      	ldr	r3, [pc, #372]	; (8001380 <MRT_Init+0x30c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f9aa 	bl	8000568 <__aeabi_f2d>
 8001214:	4680      	mov	r8, r0
 8001216:	4689      	mov	r9, r1
 8001218:	4b59      	ldr	r3, [pc, #356]	; (8001380 <MRT_Init+0x30c>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff f9a3 	bl	8000568 <__aeabi_f2d>
 8001222:	4604      	mov	r4, r0
 8001224:	460d      	mov	r5, r1
 8001226:	4b56      	ldr	r3, [pc, #344]	; (8001380 <MRT_Init+0x30c>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff f99c 	bl	8000568 <__aeabi_f2d>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	f107 0010 	add.w	r0, r7, #16
 8001238:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800123c:	e9cd 4500 	strd	r4, r5, [sp]
 8001240:	4642      	mov	r2, r8
 8001242:	464b      	mov	r3, r9
 8001244:	4954      	ldr	r1, [pc, #336]	; (8001398 <MRT_Init+0x324>)
 8001246:	f012 fd4d 	bl	8013ce4 <siprintf>
		  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	4618      	mov	r0, r3
 8001250:	f7fe ffce 	bl	80001f0 <strlen>
 8001254:	4603      	mov	r3, r0
 8001256:	b29a      	uxth	r2, r3
 8001258:	f107 0110 	add.w	r1, r7, #16
 800125c:	f04f 33ff 	mov.w	r3, #4294967295
 8001260:	4840      	ldr	r0, [pc, #256]	; (8001364 <MRT_Init+0x2f0>)
 8001262:	f009 ff38 	bl	800b0d6 <HAL_UART_Transmit>

		  memset(buffer, 0, TX_BUF_DIM);
 8001266:	f107 0310 	add.w	r3, r7, #16
 800126a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f011 fdb6 	bl	8012de2 <memset>
		  sprintf(buffer, "Temperature [degC]:%6.2f\r\n", lsm6dsr_temperature_degC);
 8001276:	4b43      	ldr	r3, [pc, #268]	; (8001384 <MRT_Init+0x310>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f974 	bl	8000568 <__aeabi_f2d>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	f107 0010 	add.w	r0, r7, #16
 8001288:	4944      	ldr	r1, [pc, #272]	; (800139c <MRT_Init+0x328>)
 800128a:	f012 fd2b 	bl	8013ce4 <siprintf>
		  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 800128e:	f107 0310 	add.w	r3, r7, #16
 8001292:	4618      	mov	r0, r3
 8001294:	f7fe ffac 	bl	80001f0 <strlen>
 8001298:	4603      	mov	r3, r0
 800129a:	b29a      	uxth	r2, r3
 800129c:	f107 0110 	add.w	r1, r7, #16
 80012a0:	f04f 33ff 	mov.w	r3, #4294967295
 80012a4:	482f      	ldr	r0, [pc, #188]	; (8001364 <MRT_Init+0x2f0>)
 80012a6:	f009 ff16 	bl	800b0d6 <HAL_UART_Transmit>


		  //LPS22HH
		  memset(buffer, 0, TX_BUF_DIM);
 80012aa:	f107 0310 	add.w	r3, r7, #16
 80012ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012b2:	2100      	movs	r1, #0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f011 fd94 	bl	8012de2 <memset>
		  sprintf(buffer,"Pressure [hPa]:%6.2f\r\n",pressure_hPa);
 80012ba:	4b34      	ldr	r3, [pc, #208]	; (800138c <MRT_Init+0x318>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff f952 	bl	8000568 <__aeabi_f2d>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	f107 0010 	add.w	r0, r7, #16
 80012cc:	4934      	ldr	r1, [pc, #208]	; (80013a0 <MRT_Init+0x32c>)
 80012ce:	f012 fd09 	bl	8013ce4 <siprintf>
		  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 80012d2:	f107 0310 	add.w	r3, r7, #16
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7fe ff8a 	bl	80001f0 <strlen>
 80012dc:	4603      	mov	r3, r0
 80012de:	b29a      	uxth	r2, r3
 80012e0:	f107 0110 	add.w	r1, r7, #16
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295
 80012e8:	481e      	ldr	r0, [pc, #120]	; (8001364 <MRT_Init+0x2f0>)
 80012ea:	f009 fef4 	bl	800b0d6 <HAL_UART_Transmit>

		  memset(buffer, 0, TX_BUF_DIM);
 80012ee:	f107 0310 	add.w	r3, r7, #16
 80012f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f011 fd72 	bl	8012de2 <memset>
		  sprintf(buffer, "Temperature [degC]:%6.2f\r\n", lps22hh_temperature_degC);
 80012fe:	4b22      	ldr	r3, [pc, #136]	; (8001388 <MRT_Init+0x314>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f930 	bl	8000568 <__aeabi_f2d>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	f107 0010 	add.w	r0, r7, #16
 8001310:	4922      	ldr	r1, [pc, #136]	; (800139c <MRT_Init+0x328>)
 8001312:	f012 fce7 	bl	8013ce4 <siprintf>
		  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 8001316:	f107 0310 	add.w	r3, r7, #16
 800131a:	4618      	mov	r0, r3
 800131c:	f7fe ff68 	bl	80001f0 <strlen>
 8001320:	4603      	mov	r3, r0
 8001322:	b29a      	uxth	r2, r3
 8001324:	f107 0110 	add.w	r1, r7, #16
 8001328:	f04f 33ff 	mov.w	r3, #4294967295
 800132c:	480d      	ldr	r0, [pc, #52]	; (8001364 <MRT_Init+0x2f0>)
 800132e:	f009 fed2 	bl	800b0d6 <HAL_UART_Transmit>

		HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	2104      	movs	r1, #4
 8001336:	480d      	ldr	r0, [pc, #52]	; (800136c <MRT_Init+0x2f8>)
 8001338:	f004 fde6 	bl	8005f08 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800133c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001340:	f004 f8be 	bl	80054c0 <HAL_Delay>
		HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8001344:	e6c6      	b.n	80010d4 <MRT_Init+0x60>
 8001346:	bf00      	nop
 8001348:	08017f0c 	.word	0x08017f0c
 800134c:	20004f38 	.word	0x20004f38
 8001350:	08017f30 	.word	0x08017f30
 8001354:	08017f34 	.word	0x08017f34
 8001358:	20005f50 	.word	0x20005f50
 800135c:	20004f90 	.word	0x20004f90
 8001360:	20005f5c 	.word	0x20005f5c
 8001364:	20005234 	.word	0x20005234
 8001368:	20005278 	.word	0x20005278
 800136c:	40020800 	.word	0x40020800
 8001370:	20005f4c 	.word	0x20005f4c
 8001374:	20005f44 	.word	0x20005f44
 8001378:	20005f40 	.word	0x20005f40
 800137c:	20005f80 	.word	0x20005f80
 8001380:	20005f34 	.word	0x20005f34
 8001384:	20005f78 	.word	0x20005f78
 8001388:	20005f70 	.word	0x20005f70
 800138c:	20005f30 	.word	0x20005f30
 8001390:	08017f38 	.word	0x08017f38
 8001394:	08017f60 	.word	0x08017f60
 8001398:	08017f88 	.word	0x08017f88
 800139c:	08017fb0 	.word	0x08017fb0
 80013a0:	08017fcc 	.word	0x08017fcc

080013a4 <MRT_reset_info>:
	}

}


void MRT_reset_info(void){
 80013a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a6:	b0a7      	sub	sp, #156	; 0x9c
 80013a8:	af04      	add	r7, sp, #16

	  char buffer[100];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\nPrevious RTC time: %i:%i:%i\r\n",reset_flag, wu_flag, iwdg_flag, prev_hours, prev_min, prev_sec);
 80013aa:	4b62      	ldr	r3, [pc, #392]	; (8001534 <MRT_reset_info+0x190>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	461d      	mov	r5, r3
 80013b0:	4b61      	ldr	r3, [pc, #388]	; (8001538 <MRT_reset_info+0x194>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	461e      	mov	r6, r3
 80013b6:	4b61      	ldr	r3, [pc, #388]	; (800153c <MRT_reset_info+0x198>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	461a      	mov	r2, r3
 80013bc:	4b60      	ldr	r3, [pc, #384]	; (8001540 <MRT_reset_info+0x19c>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	4619      	mov	r1, r3
 80013c2:	4b60      	ldr	r3, [pc, #384]	; (8001544 <MRT_reset_info+0x1a0>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	461c      	mov	r4, r3
 80013c8:	4b5f      	ldr	r3, [pc, #380]	; (8001548 <MRT_reset_info+0x1a4>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	f107 0020 	add.w	r0, r7, #32
 80013d0:	9303      	str	r3, [sp, #12]
 80013d2:	9402      	str	r4, [sp, #8]
 80013d4:	9101      	str	r1, [sp, #4]
 80013d6:	9200      	str	r2, [sp, #0]
 80013d8:	4633      	mov	r3, r6
 80013da:	462a      	mov	r2, r5
 80013dc:	495b      	ldr	r1, [pc, #364]	; (800154c <MRT_reset_info+0x1a8>)
 80013de:	f012 fc81 	bl	8013ce4 <siprintf>
	  print(buffer);
 80013e2:	f107 0320 	add.w	r3, r7, #32
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fe2e 	bl	8001048 <print>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 80013ec:	4b53      	ldr	r3, [pc, #332]	; (800153c <MRT_reset_info+0x198>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d11a      	bne.n	800142a <MRT_reset_info+0x86>
		  print("Deactivating IWDG\r\n");
 80013f4:	4856      	ldr	r0, [pc, #344]	; (8001550 <MRT_reset_info+0x1ac>)
 80013f6:	f7ff fe27 	bl	8001048 <print>

		  iwdg_flag = 0; //Flip flag
 80013fa:	4b50      	ldr	r3, [pc, #320]	; (800153c <MRT_reset_info+0x198>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
		  flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8001400:	4b4e      	ldr	r3, [pc, #312]	; (800153c <MRT_reset_info+0x198>)
 8001402:	781a      	ldrb	r2, [r3, #0]
 8001404:	4b53      	ldr	r3, [pc, #332]	; (8001554 <MRT_reset_info+0x1b0>)
 8001406:	709a      	strb	r2, [r3, #2]
		  W25qxx_EraseSector(1);
 8001408:	2001      	movs	r0, #1
 800140a:	f002 f81f 	bl	800344c <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 800140e:	2305      	movs	r3, #5
 8001410:	2200      	movs	r2, #0
 8001412:	2101      	movs	r1, #1
 8001414:	484f      	ldr	r0, [pc, #316]	; (8001554 <MRT_reset_info+0x1b0>)
 8001416:	f002 f963 	bl	80036e0 <W25qxx_WriteSector>

		  HAL_Delay(1000);
 800141a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800141e:	f004 f84f 	bl	80054c0 <HAL_Delay>

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 8001422:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 8001426:	f002 fbd9 	bl	8003bdc <MRT_StandByMode>
	  }


	  //Check if we are after waking up (and at which wake up we are at)
	  if (wu_flag>0){
 800142a:	4b43      	ldr	r3, [pc, #268]	; (8001538 <MRT_reset_info+0x194>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d02b      	beq.n	800148a <MRT_reset_info+0xe6>
		  char buf[30];
		  sprintf(buf, "FC wake up %i\r\n", wu_flag);
 8001432:	4b41      	ldr	r3, [pc, #260]	; (8001538 <MRT_reset_info+0x194>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	461a      	mov	r2, r3
 8001438:	463b      	mov	r3, r7
 800143a:	4947      	ldr	r1, [pc, #284]	; (8001558 <MRT_reset_info+0x1b4>)
 800143c:	4618      	mov	r0, r3
 800143e:	f012 fc51 	bl	8013ce4 <siprintf>
		  print(buf);
 8001442:	463b      	mov	r3, r7
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fdff 	bl	8001048 <print>

		  print("Resetting RTC time\r\n");
 800144a:	4844      	ldr	r0, [pc, #272]	; (800155c <MRT_reset_info+0x1b8>)
 800144c:	f7ff fdfc 	bl	8001048 <print>

		  //Clear RTC time (last recorded)
		  W25qxx_EraseSector(2);
 8001450:	2002      	movs	r0, #2
 8001452:	f001 fffb 	bl	800344c <W25qxx_EraseSector>
		  W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, 2, RTC_TIME_OFFSET, 3);
 8001456:	2303      	movs	r3, #3
 8001458:	2200      	movs	r2, #0
 800145a:	2102      	movs	r1, #2
 800145c:	4840      	ldr	r0, [pc, #256]	; (8001560 <MRT_reset_info+0x1bc>)
 800145e:	f002 f93f 	bl	80036e0 <W25qxx_WriteSector>

		  //Update variables (to 0)
		  for (int i = 0; i < 3; i++){
 8001462:	2300      	movs	r3, #0
 8001464:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001468:	e00b      	b.n	8001482 <MRT_reset_info+0xde>
			  *flash_time[i] = 0x0;
 800146a:	4a3e      	ldr	r2, [pc, #248]	; (8001564 <MRT_reset_info+0x1c0>)
 800146c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 3; i++){
 8001478:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800147c:	3301      	adds	r3, #1
 800147e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001482:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001486:	2b02      	cmp	r3, #2
 8001488:	ddef      	ble.n	800146a <MRT_reset_info+0xc6>

	  }


	  //Check if we start from the beginning
	  if (reset_flag==0){
 800148a:	4b2a      	ldr	r3, [pc, #168]	; (8001534 <MRT_reset_info+0x190>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d112      	bne.n	80014b8 <MRT_reset_info+0x114>
		  print("FC restarted\r\n");
 8001492:	4835      	ldr	r0, [pc, #212]	; (8001568 <MRT_reset_info+0x1c4>)
 8001494:	f7ff fdd8 	bl	8001048 <print>

		  reset_flag = 1; //Flip flag
 8001498:	4b26      	ldr	r3, [pc, #152]	; (8001534 <MRT_reset_info+0x190>)
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
	      flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 800149e:	4b25      	ldr	r3, [pc, #148]	; (8001534 <MRT_reset_info+0x190>)
 80014a0:	781a      	ldrb	r2, [r3, #0]
 80014a2:	4b2c      	ldr	r3, [pc, #176]	; (8001554 <MRT_reset_info+0x1b0>)
 80014a4:	701a      	strb	r2, [r3, #0]
		  W25qxx_EraseSector(1);
 80014a6:	2001      	movs	r0, #1
 80014a8:	f001 ffd0 	bl	800344c <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80014ac:	2305      	movs	r3, #5
 80014ae:	2200      	movs	r2, #0
 80014b0:	2101      	movs	r1, #1
 80014b2:	4828      	ldr	r0, [pc, #160]	; (8001554 <MRT_reset_info+0x1b0>)
 80014b4:	f002 f914 	bl	80036e0 <W25qxx_WriteSector>
	  }


	  //Check if before or after apogee
	  if (apogee_flag == 0){
 80014b8:	4b2c      	ldr	r3, [pc, #176]	; (800156c <MRT_reset_info+0x1c8>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d103      	bne.n	80014c8 <MRT_reset_info+0x124>
		  print("Pre-apogee\r\n");
 80014c0:	482b      	ldr	r0, [pc, #172]	; (8001570 <MRT_reset_info+0x1cc>)
 80014c2:	f7ff fdc1 	bl	8001048 <print>
 80014c6:	e006      	b.n	80014d6 <MRT_reset_info+0x132>
	  }
	  else if(apogee_flag==1){
 80014c8:	4b28      	ldr	r3, [pc, #160]	; (800156c <MRT_reset_info+0x1c8>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d102      	bne.n	80014d6 <MRT_reset_info+0x132>
		  print("Post-apogee\r\n");
 80014d0:	4828      	ldr	r0, [pc, #160]	; (8001574 <MRT_reset_info+0x1d0>)
 80014d2:	f7ff fdb9 	bl	8001048 <print>
	  }


	  //Check ejection stage
	  print("Ejection Stage: ");
 80014d6:	4828      	ldr	r0, [pc, #160]	; (8001578 <MRT_reset_info+0x1d4>)
 80014d8:	f7ff fdb6 	bl	8001048 <print>
	  if (ejection_state_flag==0){
 80014dc:	4b27      	ldr	r3, [pc, #156]	; (800157c <MRT_reset_info+0x1d8>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d103      	bne.n	80014ec <MRT_reset_info+0x148>
		  print("Pad\r\n");
 80014e4:	4826      	ldr	r0, [pc, #152]	; (8001580 <MRT_reset_info+0x1dc>)
 80014e6:	f7ff fdaf 	bl	8001048 <print>
		  print("Main descent\r\n");
	  }
	  else if(ejection_state_flag==4){
		  print("Landed\r\n");
	  }
}
 80014ea:	e01e      	b.n	800152a <MRT_reset_info+0x186>
	  else if(ejection_state_flag==1){
 80014ec:	4b23      	ldr	r3, [pc, #140]	; (800157c <MRT_reset_info+0x1d8>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d103      	bne.n	80014fc <MRT_reset_info+0x158>
		  print("Boost\r\n");
 80014f4:	4823      	ldr	r0, [pc, #140]	; (8001584 <MRT_reset_info+0x1e0>)
 80014f6:	f7ff fda7 	bl	8001048 <print>
}
 80014fa:	e016      	b.n	800152a <MRT_reset_info+0x186>
	  else if(ejection_state_flag==2){
 80014fc:	4b1f      	ldr	r3, [pc, #124]	; (800157c <MRT_reset_info+0x1d8>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b02      	cmp	r3, #2
 8001502:	d103      	bne.n	800150c <MRT_reset_info+0x168>
		  print("Drogue descent\r\n");
 8001504:	4820      	ldr	r0, [pc, #128]	; (8001588 <MRT_reset_info+0x1e4>)
 8001506:	f7ff fd9f 	bl	8001048 <print>
}
 800150a:	e00e      	b.n	800152a <MRT_reset_info+0x186>
	  else if(ejection_state_flag==3){
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <MRT_reset_info+0x1d8>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b03      	cmp	r3, #3
 8001512:	d103      	bne.n	800151c <MRT_reset_info+0x178>
		  print("Main descent\r\n");
 8001514:	481d      	ldr	r0, [pc, #116]	; (800158c <MRT_reset_info+0x1e8>)
 8001516:	f7ff fd97 	bl	8001048 <print>
}
 800151a:	e006      	b.n	800152a <MRT_reset_info+0x186>
	  else if(ejection_state_flag==4){
 800151c:	4b17      	ldr	r3, [pc, #92]	; (800157c <MRT_reset_info+0x1d8>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b04      	cmp	r3, #4
 8001522:	d102      	bne.n	800152a <MRT_reset_info+0x186>
		  print("Landed\r\n");
 8001524:	481a      	ldr	r0, [pc, #104]	; (8001590 <MRT_reset_info+0x1ec>)
 8001526:	f7ff fd8f 	bl	8001048 <print>
}
 800152a:	bf00      	nop
 800152c:	378c      	adds	r7, #140	; 0x8c
 800152e:	46bd      	mov	sp, r7
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	bf00      	nop
 8001534:	20000270 	.word	0x20000270
 8001538:	20000271 	.word	0x20000271
 800153c:	20000272 	.word	0x20000272
 8001540:	20000275 	.word	0x20000275
 8001544:	20000276 	.word	0x20000276
 8001548:	20000277 	.word	0x20000277
 800154c:	08017fe4 	.word	0x08017fe4
 8001550:	08018024 	.word	0x08018024
 8001554:	200052c4 	.word	0x200052c4
 8001558:	08018038 	.word	0x08018038
 800155c:	08018048 	.word	0x08018048
 8001560:	20000278 	.word	0x20000278
 8001564:	20000018 	.word	0x20000018
 8001568:	08018060 	.word	0x08018060
 800156c:	20000273 	.word	0x20000273
 8001570:	08018070 	.word	0x08018070
 8001574:	08018080 	.word	0x08018080
 8001578:	08018090 	.word	0x08018090
 800157c:	20000274 	.word	0x20000274
 8001580:	080180a4 	.word	0x080180a4
 8001584:	080180ac 	.word	0x080180ac
 8001588:	080180b4 	.word	0x080180b4
 800158c:	080180c8 	.word	0x080180c8
 8001590:	080180d8 	.word	0x080180d8

08001594 <MRT_Reinitialize_Peripherals>:


//**************************************************//
//PRIVATE FUNCTIONS

void MRT_Reinitialize_Peripherals(void){
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
	  /*
	   * Reinitialize all peripherals
	   */

	  print("Reinitializing Peripherals...");
 8001598:	482f      	ldr	r0, [pc, #188]	; (8001658 <MRT_Reinitialize_Peripherals+0xc4>)
 800159a:	f7ff fd55 	bl	8001048 <print>

	  // reset LEDs
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	2102      	movs	r1, #2
 80015a2:	482e      	ldr	r0, [pc, #184]	; (800165c <MRT_Reinitialize_Peripherals+0xc8>)
 80015a4:	f004 fcb0 	bl	8005f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2104      	movs	r1, #4
 80015ac:	482b      	ldr	r0, [pc, #172]	; (800165c <MRT_Reinitialize_Peripherals+0xc8>)
 80015ae:	f004 fcab 	bl	8005f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2108      	movs	r1, #8
 80015b6:	4829      	ldr	r0, [pc, #164]	; (800165c <MRT_Reinitialize_Peripherals+0xc8>)
 80015b8:	f004 fca6 	bl	8005f08 <HAL_GPIO_WritePin>

	  // reset recovery pyro pins
	  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 80015bc:	2201      	movs	r2, #1
 80015be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015c2:	4827      	ldr	r0, [pc, #156]	; (8001660 <MRT_Reinitialize_Peripherals+0xcc>)
 80015c4:	f004 fca0 	bl	8005f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 80015c8:	2200      	movs	r2, #0
 80015ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ce:	4824      	ldr	r0, [pc, #144]	; (8001660 <MRT_Reinitialize_Peripherals+0xcc>)
 80015d0:	f004 fc9a 	bl	8005f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 80015d4:	2200      	movs	r2, #0
 80015d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015da:	4821      	ldr	r0, [pc, #132]	; (8001660 <MRT_Reinitialize_Peripherals+0xcc>)
 80015dc:	f004 fc94 	bl	8005f08 <HAL_GPIO_WritePin>

	  // reset prop pyro pins
	  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 80015e0:	2201      	movs	r2, #1
 80015e2:	2102      	movs	r1, #2
 80015e4:	481e      	ldr	r0, [pc, #120]	; (8001660 <MRT_Reinitialize_Peripherals+0xcc>)
 80015e6:	f004 fc8f 	bl	8005f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 80015ea:	2200      	movs	r2, #0
 80015ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015f0:	481c      	ldr	r0, [pc, #112]	; (8001664 <MRT_Reinitialize_Peripherals+0xd0>)
 80015f2:	f004 fc89 	bl	8005f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 80015f6:	2200      	movs	r2, #0
 80015f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015fc:	4819      	ldr	r0, [pc, #100]	; (8001664 <MRT_Reinitialize_Peripherals+0xd0>)
 80015fe:	f004 fc83 	bl	8005f08 <HAL_GPIO_WritePin>

	  // reset 12 V buck converter enable pin (disable converter)
	  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 8001602:	2200      	movs	r2, #0
 8001604:	2104      	movs	r1, #4
 8001606:	4818      	ldr	r0, [pc, #96]	; (8001668 <MRT_Reinitialize_Peripherals+0xd4>)
 8001608:	f004 fc7e 	bl	8005f08 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
	  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


	  // reset payload EN signal
	  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 800160c:	2200      	movs	r2, #0
 800160e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001612:	4815      	ldr	r0, [pc, #84]	; (8001668 <MRT_Reinitialize_Peripherals+0xd4>)
 8001614:	f004 fc78 	bl	8005f08 <HAL_GPIO_WritePin>

	  // set CS pin for thermocouple chip high
	  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

	  // set power off for VR
	  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 8001618:	2200      	movs	r2, #0
 800161a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800161e:	4810      	ldr	r0, [pc, #64]	; (8001660 <MRT_Reinitialize_Peripherals+0xcc>)
 8001620:	f004 fc72 	bl	8005f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 8001624:	2200      	movs	r2, #0
 8001626:	2180      	movs	r1, #128	; 0x80
 8001628:	4810      	ldr	r0, [pc, #64]	; (800166c <MRT_Reinitialize_Peripherals+0xd8>)
 800162a:	f004 fc6d 	bl	8005f08 <HAL_GPIO_WritePin>

	  // FLASH set CS, WP and IO3 pins high
	  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 800162e:	2201      	movs	r2, #1
 8001630:	2140      	movs	r1, #64	; 0x40
 8001632:	480e      	ldr	r0, [pc, #56]	; (800166c <MRT_Reinitialize_Peripherals+0xd8>)
 8001634:	f004 fc68 	bl	8005f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 8001638:	2201      	movs	r2, #1
 800163a:	2120      	movs	r1, #32
 800163c:	480b      	ldr	r0, [pc, #44]	; (800166c <MRT_Reinitialize_Peripherals+0xd8>)
 800163e:	f004 fc63 	bl	8005f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 8001642:	2201      	movs	r2, #1
 8001644:	2110      	movs	r1, #16
 8001646:	4809      	ldr	r0, [pc, #36]	; (800166c <MRT_Reinitialize_Peripherals+0xd8>)
 8001648:	f004 fc5e 	bl	8005f08 <HAL_GPIO_WritePin>

	  print("OK\r\n");
 800164c:	4808      	ldr	r0, [pc, #32]	; (8001670 <MRT_Reinitialize_Peripherals+0xdc>)
 800164e:	f7ff fcfb 	bl	8001048 <print>
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	080180e4 	.word	0x080180e4
 800165c:	40020800 	.word	0x40020800
 8001660:	40021800 	.word	0x40021800
 8001664:	40021400 	.word	0x40021400
 8001668:	40021000 	.word	0x40021000
 800166c:	40020c00 	.word	0x40020c00
 8001670:	08018104 	.word	0x08018104

08001674 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800167a:	463b      	mov	r3, r7
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001686:	4b21      	ldr	r3, [pc, #132]	; (800170c <MX_ADC1_Init+0x98>)
 8001688:	4a21      	ldr	r2, [pc, #132]	; (8001710 <MX_ADC1_Init+0x9c>)
 800168a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800168c:	4b1f      	ldr	r3, [pc, #124]	; (800170c <MX_ADC1_Init+0x98>)
 800168e:	2200      	movs	r2, #0
 8001690:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001692:	4b1e      	ldr	r3, [pc, #120]	; (800170c <MX_ADC1_Init+0x98>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001698:	4b1c      	ldr	r3, [pc, #112]	; (800170c <MX_ADC1_Init+0x98>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800169e:	4b1b      	ldr	r3, [pc, #108]	; (800170c <MX_ADC1_Init+0x98>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <MX_ADC1_Init+0x98>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016ac:	4b17      	ldr	r3, [pc, #92]	; (800170c <MX_ADC1_Init+0x98>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016b2:	4b16      	ldr	r3, [pc, #88]	; (800170c <MX_ADC1_Init+0x98>)
 80016b4:	4a17      	ldr	r2, [pc, #92]	; (8001714 <MX_ADC1_Init+0xa0>)
 80016b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <MX_ADC1_Init+0x98>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80016be:	4b13      	ldr	r3, [pc, #76]	; (800170c <MX_ADC1_Init+0x98>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <MX_ADC1_Init+0x98>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <MX_ADC1_Init+0x98>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016d2:	480e      	ldr	r0, [pc, #56]	; (800170c <MX_ADC1_Init+0x98>)
 80016d4:	f003 ff18 	bl	8005508 <HAL_ADC_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80016de:	f000 fbc5 	bl	8001e6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80016e2:	2306      	movs	r3, #6
 80016e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016e6:	2301      	movs	r3, #1
 80016e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016ee:	463b      	mov	r3, r7
 80016f0:	4619      	mov	r1, r3
 80016f2:	4806      	ldr	r0, [pc, #24]	; (800170c <MX_ADC1_Init+0x98>)
 80016f4:	f003 ff4c 	bl	8005590 <HAL_ADC_ConfigChannel>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80016fe:	f000 fbb5 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20004f48 	.word	0x20004f48
 8001710:	40012000 	.word	0x40012000
 8001714:	0f000001 	.word	0x0f000001

08001718 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	; 0x28
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a17      	ldr	r2, [pc, #92]	; (8001794 <HAL_ADC_MspInit+0x7c>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d127      	bne.n	800178a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	4b16      	ldr	r3, [pc, #88]	; (8001798 <HAL_ADC_MspInit+0x80>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	4a15      	ldr	r2, [pc, #84]	; (8001798 <HAL_ADC_MspInit+0x80>)
 8001744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001748:	6453      	str	r3, [r2, #68]	; 0x44
 800174a:	4b13      	ldr	r3, [pc, #76]	; (8001798 <HAL_ADC_MspInit+0x80>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <HAL_ADC_MspInit+0x80>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a0e      	ldr	r2, [pc, #56]	; (8001798 <HAL_ADC_MspInit+0x80>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <HAL_ADC_MspInit+0x80>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 8001772:	2340      	movs	r3, #64	; 0x40
 8001774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001776:	2303      	movs	r3, #3
 8001778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	4619      	mov	r1, r3
 8001784:	4805      	ldr	r0, [pc, #20]	; (800179c <HAL_ADC_MspInit+0x84>)
 8001786:	f004 fa13 	bl	8005bb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800178a:	bf00      	nop
 800178c:	3728      	adds	r7, #40	; 0x28
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40012000 	.word	0x40012000
 8001798:	40023800 	.word	0x40023800
 800179c:	40020000 	.word	0x40020000

080017a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08e      	sub	sp, #56	; 0x38
 80017a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
 80017b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
 80017ba:	4bb5      	ldr	r3, [pc, #724]	; (8001a90 <MX_GPIO_Init+0x2f0>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4ab4      	ldr	r2, [pc, #720]	; (8001a90 <MX_GPIO_Init+0x2f0>)
 80017c0:	f043 0310 	orr.w	r3, r3, #16
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4bb2      	ldr	r3, [pc, #712]	; (8001a90 <MX_GPIO_Init+0x2f0>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0310 	and.w	r3, r3, #16
 80017ce:	623b      	str	r3, [r7, #32]
 80017d0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
 80017d6:	4bae      	ldr	r3, [pc, #696]	; (8001a90 <MX_GPIO_Init+0x2f0>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4aad      	ldr	r2, [pc, #692]	; (8001a90 <MX_GPIO_Init+0x2f0>)
 80017dc:	f043 0304 	orr.w	r3, r3, #4
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4bab      	ldr	r3, [pc, #684]	; (8001a90 <MX_GPIO_Init+0x2f0>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0304 	and.w	r3, r3, #4
 80017ea:	61fb      	str	r3, [r7, #28]
 80017ec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	61bb      	str	r3, [r7, #24]
 80017f2:	4ba7      	ldr	r3, [pc, #668]	; (8001a90 <MX_GPIO_Init+0x2f0>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4aa6      	ldr	r2, [pc, #664]	; (8001a90 <MX_GPIO_Init+0x2f0>)
 80017f8:	f043 0320 	orr.w	r3, r3, #32
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4ba4      	ldr	r3, [pc, #656]	; (8001a90 <MX_GPIO_Init+0x2f0>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0320 	and.w	r3, r3, #32
 8001806:	61bb      	str	r3, [r7, #24]
 8001808:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	4ba0      	ldr	r3, [pc, #640]	; (8001a90 <MX_GPIO_Init+0x2f0>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a9f      	ldr	r2, [pc, #636]	; (8001a90 <MX_GPIO_Init+0x2f0>)
 8001814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b9d      	ldr	r3, [pc, #628]	; (8001a90 <MX_GPIO_Init+0x2f0>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	4b99      	ldr	r3, [pc, #612]	; (8001a90 <MX_GPIO_Init+0x2f0>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a98      	ldr	r2, [pc, #608]	; (8001a90 <MX_GPIO_Init+0x2f0>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b96      	ldr	r3, [pc, #600]	; (8001a90 <MX_GPIO_Init+0x2f0>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	4b92      	ldr	r3, [pc, #584]	; (8001a90 <MX_GPIO_Init+0x2f0>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a91      	ldr	r2, [pc, #580]	; (8001a90 <MX_GPIO_Init+0x2f0>)
 800184c:	f043 0302 	orr.w	r3, r3, #2
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b8f      	ldr	r3, [pc, #572]	; (8001a90 <MX_GPIO_Init+0x2f0>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	4b8b      	ldr	r3, [pc, #556]	; (8001a90 <MX_GPIO_Init+0x2f0>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a8a      	ldr	r2, [pc, #552]	; (8001a90 <MX_GPIO_Init+0x2f0>)
 8001868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b88      	ldr	r3, [pc, #544]	; (8001a90 <MX_GPIO_Init+0x2f0>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	4b84      	ldr	r3, [pc, #528]	; (8001a90 <MX_GPIO_Init+0x2f0>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a83      	ldr	r2, [pc, #524]	; (8001a90 <MX_GPIO_Init+0x2f0>)
 8001884:	f043 0308 	orr.w	r3, r3, #8
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b81      	ldr	r3, [pc, #516]	; (8001a90 <MX_GPIO_Init+0x2f0>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 8001896:	2200      	movs	r2, #0
 8001898:	f248 4184 	movw	r1, #33924	; 0x8484
 800189c:	487d      	ldr	r0, [pc, #500]	; (8001a94 <MX_GPIO_Init+0x2f4>)
 800189e:	f004 fb33 	bl	8005f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 80018a2:	2200      	movs	r2, #0
 80018a4:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 80018a8:	487b      	ldr	r0, [pc, #492]	; (8001a98 <MX_GPIO_Init+0x2f8>)
 80018aa:	f004 fb2d 	bl	8005f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80018b4:	4879      	ldr	r0, [pc, #484]	; (8001a9c <MX_GPIO_Init+0x2fc>)
 80018b6:	f004 fb27 	bl	8005f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2108      	movs	r1, #8
 80018be:	4878      	ldr	r0, [pc, #480]	; (8001aa0 <MX_GPIO_Init+0x300>)
 80018c0:	f004 fb22 	bl	8005f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 80018c4:	2200      	movs	r2, #0
 80018c6:	f645 2126 	movw	r1, #23078	; 0x5a26
 80018ca:	4876      	ldr	r0, [pc, #472]	; (8001aa4 <MX_GPIO_Init+0x304>)
 80018cc:	f004 fb1c 	bl	8005f08 <HAL_GPIO_WritePin>
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin, GPIO_PIN_RESET);
 80018d0:	2200      	movs	r2, #0
 80018d2:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 80018d6:	4874      	ldr	r0, [pc, #464]	; (8001aa8 <MX_GPIO_Init+0x308>)
 80018d8:	f004 fb16 	bl	8005f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80018dc:	2200      	movs	r2, #0
 80018de:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 80018e2:	4872      	ldr	r0, [pc, #456]	; (8001aac <MX_GPIO_Init+0x30c>)
 80018e4:	f004 fb10 	bl	8005f08 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 80018e8:	f248 4384 	movw	r3, #33924	; 0x8484
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ee:	2301      	movs	r3, #1
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	2300      	movs	r3, #0
 80018f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018fe:	4619      	mov	r1, r3
 8001900:	4864      	ldr	r0, [pc, #400]	; (8001a94 <MX_GPIO_Init+0x2f4>)
 8001902:	f004 f955 	bl	8005bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 8001906:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190c:	2301      	movs	r3, #1
 800190e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191c:	4619      	mov	r1, r3
 800191e:	485e      	ldr	r0, [pc, #376]	; (8001a98 <MX_GPIO_Init+0x2f8>)
 8001920:	f004 f946 	bl	8005bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8001924:	2301      	movs	r3, #1
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001928:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800192c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 8001932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001936:	4619      	mov	r1, r3
 8001938:	4858      	ldr	r0, [pc, #352]	; (8001a9c <MX_GPIO_Init+0x2fc>)
 800193a:	f004 f939 	bl	8005bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 800193e:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001944:	2301      	movs	r3, #1
 8001946:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194c:	2300      	movs	r3, #0
 800194e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001954:	4619      	mov	r1, r3
 8001956:	4851      	ldr	r0, [pc, #324]	; (8001a9c <MX_GPIO_Init+0x2fc>)
 8001958:	f004 f92a 	bl	8005bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 800195c:	2308      	movs	r3, #8
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001960:	2301      	movs	r3, #1
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 800196c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001970:	4619      	mov	r1, r3
 8001972:	484b      	ldr	r0, [pc, #300]	; (8001aa0 <MX_GPIO_Init+0x300>)
 8001974:	f004 f91c 	bl	8005bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8001978:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800197e:	2300      	movs	r3, #0
 8001980:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	4619      	mov	r1, r3
 800198c:	4843      	ldr	r0, [pc, #268]	; (8001a9c <MX_GPIO_Init+0x2fc>)
 800198e:	f004 f90f 	bl	8005bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 8001992:	2302      	movs	r3, #2
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001996:	2300      	movs	r3, #0
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 800199e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a2:	4619      	mov	r1, r3
 80019a4:	4840      	ldr	r0, [pc, #256]	; (8001aa8 <MX_GPIO_Init+0x308>)
 80019a6:	f004 f903 	bl	8005bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 80019aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b0:	2300      	movs	r3, #0
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 80019b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019bc:	4619      	mov	r1, r3
 80019be:	4836      	ldr	r0, [pc, #216]	; (8001a98 <MX_GPIO_Init+0x2f8>)
 80019c0:	f004 f8f6 	bl	8005bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|IN_EJ_Main_Cont_Pin
 80019c4:	f242 4319 	movw	r3, #9241	; 0x2419
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
                          |IN_EJ_Drogue_Cont_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ca:	2300      	movs	r3, #0
 80019cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d6:	4619      	mov	r1, r3
 80019d8:	4832      	ldr	r0, [pc, #200]	; (8001aa4 <MX_GPIO_Init+0x304>)
 80019da:	f004 f8e9 	bl	8005bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 80019de:	f645 2326 	movw	r3, #23078	; 0x5a26
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e4:	2301      	movs	r3, #1
 80019e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ec:	2300      	movs	r3, #0
 80019ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f4:	4619      	mov	r1, r3
 80019f6:	482b      	ldr	r0, [pc, #172]	; (8001aa4 <MX_GPIO_Init+0x304>)
 80019f8:	f004 f8da 	bl	8005bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 80019fc:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a02:	2300      	movs	r3, #0
 8001a04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4820      	ldr	r0, [pc, #128]	; (8001a94 <MX_GPIO_Init+0x2f4>)
 8001a12:	f004 f8cd 	bl	8005bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB8 PBPin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin;
 8001a16:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2300      	movs	r3, #0
 8001a26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	481e      	ldr	r0, [pc, #120]	; (8001aa8 <MX_GPIO_Init+0x308>)
 8001a30:	f004 f8be 	bl	8005bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8001a34:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a42:	2300      	movs	r3, #0
 8001a44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4817      	ldr	r0, [pc, #92]	; (8001aac <MX_GPIO_Init+0x30c>)
 8001a4e:	f004 f8af 	bl	8005bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8001a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8001a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a64:	4619      	mov	r1, r3
 8001a66:	4811      	ldr	r0, [pc, #68]	; (8001aac <MX_GPIO_Init+0x30c>)
 8001a68:	f004 f8a2 	bl	8005bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 8001a6c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a72:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a80:	4619      	mov	r1, r3
 8001a82:	4808      	ldr	r0, [pc, #32]	; (8001aa4 <MX_GPIO_Init+0x304>)
 8001a84:	f004 f894 	bl	8005bb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2105      	movs	r1, #5
 8001a8c:	2006      	movs	r0, #6
 8001a8e:	e00f      	b.n	8001ab0 <MX_GPIO_Init+0x310>
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40021400 	.word	0x40021400
 8001a9c:	40020800 	.word	0x40020800
 8001aa0:	40020000 	.word	0x40020000
 8001aa4:	40021800 	.word	0x40021800
 8001aa8:	40020400 	.word	0x40020400
 8001aac:	40020c00 	.word	0x40020c00
 8001ab0:	f004 f854 	bl	8005b5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001ab4:	2006      	movs	r0, #6
 8001ab6:	f004 f86d 	bl	8005b94 <HAL_NVIC_EnableIRQ>

}
 8001aba:	bf00      	nop
 8001abc:	3738      	adds	r7, #56	; 0x38
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop

08001ac4 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <MX_I2C2_Init+0x74>)
 8001aca:	4a1c      	ldr	r2, [pc, #112]	; (8001b3c <MX_I2C2_Init+0x78>)
 8001acc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001ace:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <MX_I2C2_Init+0x74>)
 8001ad0:	4a1b      	ldr	r2, [pc, #108]	; (8001b40 <MX_I2C2_Init+0x7c>)
 8001ad2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <MX_I2C2_Init+0x74>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001ada:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <MX_I2C2_Init+0x74>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ae0:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <MX_I2C2_Init+0x74>)
 8001ae2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ae6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ae8:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <MX_I2C2_Init+0x74>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001aee:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <MX_I2C2_Init+0x74>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001af4:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <MX_I2C2_Init+0x74>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001afa:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <MX_I2C2_Init+0x74>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b00:	480d      	ldr	r0, [pc, #52]	; (8001b38 <MX_I2C2_Init+0x74>)
 8001b02:	f004 fa3f 	bl	8005f84 <HAL_I2C_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b0c:	f000 f9ae 	bl	8001e6c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b10:	2100      	movs	r1, #0
 8001b12:	4809      	ldr	r0, [pc, #36]	; (8001b38 <MX_I2C2_Init+0x74>)
 8001b14:	f005 f9f5 	bl	8006f02 <HAL_I2CEx_ConfigAnalogFilter>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001b1e:	f000 f9a5 	bl	8001e6c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001b22:	2100      	movs	r1, #0
 8001b24:	4804      	ldr	r0, [pc, #16]	; (8001b38 <MX_I2C2_Init+0x74>)
 8001b26:	f005 fa28 	bl	8006f7a <HAL_I2CEx_ConfigDigitalFilter>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001b30:	f000 f99c 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20004fe4 	.word	0x20004fe4
 8001b3c:	40005800 	.word	0x40005800
 8001b40:	000186a0 	.word	0x000186a0

08001b44 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001b48:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <MX_I2C3_Init+0x74>)
 8001b4a:	4a1c      	ldr	r2, [pc, #112]	; (8001bbc <MX_I2C3_Init+0x78>)
 8001b4c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001b4e:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <MX_I2C3_Init+0x74>)
 8001b50:	4a1b      	ldr	r2, [pc, #108]	; (8001bc0 <MX_I2C3_Init+0x7c>)
 8001b52:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b54:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <MX_I2C3_Init+0x74>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001b5a:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <MX_I2C3_Init+0x74>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b60:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <MX_I2C3_Init+0x74>)
 8001b62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b66:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b68:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <MX_I2C3_Init+0x74>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001b6e:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <MX_I2C3_Init+0x74>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b74:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <MX_I2C3_Init+0x74>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <MX_I2C3_Init+0x74>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001b80:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <MX_I2C3_Init+0x74>)
 8001b82:	f004 f9ff 	bl	8005f84 <HAL_I2C_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001b8c:	f000 f96e 	bl	8001e6c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b90:	2100      	movs	r1, #0
 8001b92:	4809      	ldr	r0, [pc, #36]	; (8001bb8 <MX_I2C3_Init+0x74>)
 8001b94:	f005 f9b5 	bl	8006f02 <HAL_I2CEx_ConfigAnalogFilter>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001b9e:	f000 f965 	bl	8001e6c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4804      	ldr	r0, [pc, #16]	; (8001bb8 <MX_I2C3_Init+0x74>)
 8001ba6:	f005 f9e8 	bl	8006f7a <HAL_I2CEx_ConfigDigitalFilter>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001bb0:	f000 f95c 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20004f90 	.word	0x20004f90
 8001bbc:	40005c00 	.word	0x40005c00
 8001bc0:	000186a0 	.word	0x000186a0

08001bc4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08c      	sub	sp, #48	; 0x30
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 031c 	add.w	r3, r7, #28
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a42      	ldr	r2, [pc, #264]	; (8001cec <HAL_I2C_MspInit+0x128>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d12d      	bne.n	8001c42 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	61bb      	str	r3, [r7, #24]
 8001bea:	4b41      	ldr	r3, [pc, #260]	; (8001cf0 <HAL_I2C_MspInit+0x12c>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4a40      	ldr	r2, [pc, #256]	; (8001cf0 <HAL_I2C_MspInit+0x12c>)
 8001bf0:	f043 0302 	orr.w	r3, r3, #2
 8001bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf6:	4b3e      	ldr	r3, [pc, #248]	; (8001cf0 <HAL_I2C_MspInit+0x12c>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	61bb      	str	r3, [r7, #24]
 8001c00:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c02:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c08:	2312      	movs	r3, #18
 8001c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c10:	2303      	movs	r3, #3
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c14:	2304      	movs	r3, #4
 8001c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c18:	f107 031c 	add.w	r3, r7, #28
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4835      	ldr	r0, [pc, #212]	; (8001cf4 <HAL_I2C_MspInit+0x130>)
 8001c20:	f003 ffc6 	bl	8005bb0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	4b31      	ldr	r3, [pc, #196]	; (8001cf0 <HAL_I2C_MspInit+0x12c>)
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	4a30      	ldr	r2, [pc, #192]	; (8001cf0 <HAL_I2C_MspInit+0x12c>)
 8001c2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c32:	6413      	str	r3, [r2, #64]	; 0x40
 8001c34:	4b2e      	ldr	r3, [pc, #184]	; (8001cf0 <HAL_I2C_MspInit+0x12c>)
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001c40:	e050      	b.n	8001ce4 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a2c      	ldr	r2, [pc, #176]	; (8001cf8 <HAL_I2C_MspInit+0x134>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d14b      	bne.n	8001ce4 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	4b27      	ldr	r3, [pc, #156]	; (8001cf0 <HAL_I2C_MspInit+0x12c>)
 8001c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c54:	4a26      	ldr	r2, [pc, #152]	; (8001cf0 <HAL_I2C_MspInit+0x12c>)
 8001c56:	f043 0304 	orr.w	r3, r3, #4
 8001c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5c:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <HAL_I2C_MspInit+0x12c>)
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	4b20      	ldr	r3, [pc, #128]	; (8001cf0 <HAL_I2C_MspInit+0x12c>)
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c70:	4a1f      	ldr	r2, [pc, #124]	; (8001cf0 <HAL_I2C_MspInit+0x12c>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6313      	str	r3, [r2, #48]	; 0x30
 8001c78:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <HAL_I2C_MspInit+0x12c>)
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c8a:	2312      	movs	r3, #18
 8001c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c92:	2303      	movs	r3, #3
 8001c94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c96:	2304      	movs	r3, #4
 8001c98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c9a:	f107 031c 	add.w	r3, r7, #28
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4816      	ldr	r0, [pc, #88]	; (8001cfc <HAL_I2C_MspInit+0x138>)
 8001ca2:	f003 ff85 	bl	8005bb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ca6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cac:	2312      	movs	r3, #18
 8001cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cb8:	2304      	movs	r3, #4
 8001cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbc:	f107 031c 	add.w	r3, r7, #28
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	480f      	ldr	r0, [pc, #60]	; (8001d00 <HAL_I2C_MspInit+0x13c>)
 8001cc4:	f003 ff74 	bl	8005bb0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <HAL_I2C_MspInit+0x12c>)
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	4a07      	ldr	r2, [pc, #28]	; (8001cf0 <HAL_I2C_MspInit+0x12c>)
 8001cd2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cd6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <HAL_I2C_MspInit+0x12c>)
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
}
 8001ce4:	bf00      	nop
 8001ce6:	3730      	adds	r7, #48	; 0x30
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40005800 	.word	0x40005800
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40020400 	.word	0x40020400
 8001cf8:	40005c00 	.word	0x40005c00
 8001cfc:	40020800 	.word	0x40020800
 8001d00:	40020000 	.word	0x40020000

08001d04 <main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int main(void){
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
	MRT_STM_Init();
 8001d08:	f000 f87c 	bl	8001e04 <MRT_STM_Init>
	println("\r\n\r\nSTM Init...OK");
 8001d0c:	4805      	ldr	r0, [pc, #20]	; (8001d24 <main+0x20>)
 8001d0e:	f7ff f97d 	bl	800100c <println>

	MRT_Init();
 8001d12:	f7ff f9af 	bl	8001074 <MRT_Init>

	println("\r\n/****Starting FC****/\r\n");
 8001d16:	4804      	ldr	r0, [pc, #16]	; (8001d28 <main+0x24>)
 8001d18:	f7ff f978 	bl	800100c <println>

	return 1;
 8001d1c:	2301      	movs	r3, #1
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	0801810c 	.word	0x0801810c
 8001d28:	08018120 	.word	0x08018120

08001d2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b094      	sub	sp, #80	; 0x50
 8001d30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d32:	f107 0320 	add.w	r3, r7, #32
 8001d36:	2230      	movs	r2, #48	; 0x30
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f011 f851 	bl	8012de2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d50:	2300      	movs	r3, #0
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	4b29      	ldr	r3, [pc, #164]	; (8001dfc <SystemClock_Config+0xd0>)
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	4a28      	ldr	r2, [pc, #160]	; (8001dfc <SystemClock_Config+0xd0>)
 8001d5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d60:	4b26      	ldr	r3, [pc, #152]	; (8001dfc <SystemClock_Config+0xd0>)
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	4b23      	ldr	r3, [pc, #140]	; (8001e00 <SystemClock_Config+0xd4>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d78:	4a21      	ldr	r2, [pc, #132]	; (8001e00 <SystemClock_Config+0xd4>)
 8001d7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d7e:	6013      	str	r3, [r2, #0]
 8001d80:	4b1f      	ldr	r3, [pc, #124]	; (8001e00 <SystemClock_Config+0xd4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d88:	607b      	str	r3, [r7, #4]
 8001d8a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001d8c:	2309      	movs	r3, #9
 8001d8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001d96:	2301      	movs	r3, #1
 8001d98:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001da2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001da4:	2308      	movs	r3, #8
 8001da6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001da8:	2348      	movs	r3, #72	; 0x48
 8001daa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dac:	2302      	movs	r3, #2
 8001dae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001db0:	2303      	movs	r3, #3
 8001db2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001db4:	f107 0320 	add.w	r3, r7, #32
 8001db8:	4618      	mov	r0, r3
 8001dba:	f006 f8d5 	bl	8007f68 <HAL_RCC_OscConfig>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001dc4:	f000 f852 	bl	8001e6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dc8:	230f      	movs	r3, #15
 8001dca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001dde:	f107 030c 	add.w	r3, r7, #12
 8001de2:	2100      	movs	r1, #0
 8001de4:	4618      	mov	r0, r3
 8001de6:	f006 fb37 	bl	8008458 <HAL_RCC_ClockConfig>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001df0:	f000 f83c 	bl	8001e6c <Error_Handler>
  }
}
 8001df4:	bf00      	nop
 8001df6:	3750      	adds	r7, #80	; 0x50
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40007000 	.word	0x40007000

08001e04 <MRT_STM_Init>:

/* USER CODE BEGIN 4 */

void MRT_STM_Init(void){
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
	HAL_Init();
 8001e08:	f003 fb18 	bl	800543c <HAL_Init>
	SystemClock_Config();
 8001e0c:	f7ff ff8e 	bl	8001d2c <SystemClock_Config>

	MX_GPIO_Init();
 8001e10:	f7ff fcc6 	bl	80017a0 <MX_GPIO_Init>
	MX_ADC1_Init();
 8001e14:	f7ff fc2e 	bl	8001674 <MX_ADC1_Init>
	MX_I2C2_Init();
 8001e18:	f7ff fe54 	bl	8001ac4 <MX_I2C2_Init>
	MX_I2C3_Init();
 8001e1c:	f7ff fe92 	bl	8001b44 <MX_I2C3_Init>
	MX_SPI2_Init();
 8001e20:	f000 f8e8 	bl	8001ff4 <MX_SPI2_Init>
	MX_SPI4_Init();
 8001e24:	f000 f91c 	bl	8002060 <MX_SPI4_Init>
	MX_SPI5_Init();
 8001e28:	f000 f950 	bl	80020cc <MX_SPI5_Init>
	MX_TIM2_Init();
 8001e2c:	f000 fb0e 	bl	800244c <MX_TIM2_Init>
	MX_UART8_Init();
 8001e30:	f000 fbda 	bl	80025e8 <MX_UART8_Init>
	MX_USART3_UART_Init();
 8001e34:	f000 fc02 	bl	800263c <MX_USART3_UART_Init>
	MX_USART6_UART_Init();
 8001e38:	f000 fc2a 	bl	8002690 <MX_USART6_UART_Init>
	MX_RTC_Init();
 8001e3c:	f000 f81c 	bl	8001e78 <MX_RTC_Init>
	//MX_IWDG_Init(); TODO ADDED IN MRT_Init()
	MX_FATFS_Init();
 8001e40:	f00a fc70 	bl	800c724 <MX_FATFS_Init>
}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a04      	ldr	r2, [pc, #16]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d101      	bne.n	8001e5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e5a:	f003 fb11 	bl	8005480 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40001000 	.word	0x40001000

08001e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e70:	b672      	cpsid	i
}
 8001e72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e74:	e7fe      	b.n	8001e74 <Error_Handler+0x8>
	...

08001e78 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b090      	sub	sp, #64	; 0x40
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001e7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]
 8001e8a:	60da      	str	r2, [r3, #12]
 8001e8c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001e8e:	2300      	movs	r3, #0
 8001e90:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001e92:	463b      	mov	r3, r7
 8001e94:	2228      	movs	r2, #40	; 0x28
 8001e96:	2100      	movs	r1, #0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f010 ffa2 	bl	8012de2 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e9e:	4b3a      	ldr	r3, [pc, #232]	; (8001f88 <MX_RTC_Init+0x110>)
 8001ea0:	4a3a      	ldr	r2, [pc, #232]	; (8001f8c <MX_RTC_Init+0x114>)
 8001ea2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ea4:	4b38      	ldr	r3, [pc, #224]	; (8001f88 <MX_RTC_Init+0x110>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001eaa:	4b37      	ldr	r3, [pc, #220]	; (8001f88 <MX_RTC_Init+0x110>)
 8001eac:	227f      	movs	r2, #127	; 0x7f
 8001eae:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001eb0:	4b35      	ldr	r3, [pc, #212]	; (8001f88 <MX_RTC_Init+0x110>)
 8001eb2:	22ff      	movs	r2, #255	; 0xff
 8001eb4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001eb6:	4b34      	ldr	r3, [pc, #208]	; (8001f88 <MX_RTC_Init+0x110>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ebc:	4b32      	ldr	r3, [pc, #200]	; (8001f88 <MX_RTC_Init+0x110>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ec2:	4b31      	ldr	r3, [pc, #196]	; (8001f88 <MX_RTC_Init+0x110>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ec8:	482f      	ldr	r0, [pc, #188]	; (8001f88 <MX_RTC_Init+0x110>)
 8001eca:	f006 feaf 	bl	8008c2c <HAL_RTC_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001ed4:	f7ff ffca 	bl	8001e6c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001eea:	2300      	movs	r3, #0
 8001eec:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001ef2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4823      	ldr	r0, [pc, #140]	; (8001f88 <MX_RTC_Init+0x110>)
 8001efc:	f006 ff27 	bl	8008d4e <HAL_RTC_SetTime>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001f06:	f7ff ffb1 	bl	8001e6c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001f10:	2301      	movs	r3, #1
 8001f12:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001f16:	2301      	movs	r3, #1
 8001f18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001f22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f26:	2201      	movs	r2, #1
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4817      	ldr	r0, [pc, #92]	; (8001f88 <MX_RTC_Init+0x110>)
 8001f2c:	f006 ffcc 	bl	8008ec8 <HAL_RTC_SetDate>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001f36:	f7ff ff99 	bl	8001e6c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001f64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001f6a:	463b      	mov	r3, r7
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4805      	ldr	r0, [pc, #20]	; (8001f88 <MX_RTC_Init+0x110>)
 8001f72:	f007 f851 	bl	8009018 <HAL_RTC_SetAlarm_IT>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001f7c:	f7ff ff76 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f80:	bf00      	nop
 8001f82:	3740      	adds	r7, #64	; 0x40
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20005038 	.word	0x20005038
 8001f8c:	40002800 	.word	0x40002800

08001f90 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08e      	sub	sp, #56	; 0x38
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f98:	f107 0308 	add.w	r3, r7, #8
 8001f9c:	2230      	movs	r2, #48	; 0x30
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f010 ff1e 	bl	8012de2 <memset>
  if(rtcHandle->Instance==RTC)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a10      	ldr	r2, [pc, #64]	; (8001fec <HAL_RTC_MspInit+0x5c>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d119      	bne.n	8001fe4 <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001fb0:	2320      	movs	r3, #32
 8001fb2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001fb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fb8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fba:	f107 0308 	add.w	r3, r7, #8
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f006 fc76 	bl	80088b0 <HAL_RCCEx_PeriphCLKConfig>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001fca:	f7ff ff4f 	bl	8001e6c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001fce:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <HAL_RTC_MspInit+0x60>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2105      	movs	r1, #5
 8001fd8:	2029      	movs	r0, #41	; 0x29
 8001fda:	f003 fdbf 	bl	8005b5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001fde:	2029      	movs	r0, #41	; 0x29
 8001fe0:	f003 fdd8 	bl	8005b94 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	3738      	adds	r7, #56	; 0x38
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40002800 	.word	0x40002800
 8001ff0:	42470e3c 	.word	0x42470e3c

08001ff4 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001ff8:	4b17      	ldr	r3, [pc, #92]	; (8002058 <MX_SPI2_Init+0x64>)
 8001ffa:	4a18      	ldr	r2, [pc, #96]	; (800205c <MX_SPI2_Init+0x68>)
 8001ffc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ffe:	4b16      	ldr	r3, [pc, #88]	; (8002058 <MX_SPI2_Init+0x64>)
 8002000:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002004:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002006:	4b14      	ldr	r3, [pc, #80]	; (8002058 <MX_SPI2_Init+0x64>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800200c:	4b12      	ldr	r3, [pc, #72]	; (8002058 <MX_SPI2_Init+0x64>)
 800200e:	2200      	movs	r2, #0
 8002010:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002012:	4b11      	ldr	r3, [pc, #68]	; (8002058 <MX_SPI2_Init+0x64>)
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002018:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <MX_SPI2_Init+0x64>)
 800201a:	2200      	movs	r2, #0
 800201c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800201e:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <MX_SPI2_Init+0x64>)
 8002020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002024:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002026:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <MX_SPI2_Init+0x64>)
 8002028:	2200      	movs	r2, #0
 800202a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800202c:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <MX_SPI2_Init+0x64>)
 800202e:	2200      	movs	r2, #0
 8002030:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <MX_SPI2_Init+0x64>)
 8002034:	2200      	movs	r2, #0
 8002036:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002038:	4b07      	ldr	r3, [pc, #28]	; (8002058 <MX_SPI2_Init+0x64>)
 800203a:	2200      	movs	r2, #0
 800203c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <MX_SPI2_Init+0x64>)
 8002040:	220a      	movs	r2, #10
 8002042:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002044:	4804      	ldr	r0, [pc, #16]	; (8002058 <MX_SPI2_Init+0x64>)
 8002046:	f007 fb03 	bl	8009650 <HAL_SPI_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002050:	f7ff ff0c 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20005058 	.word	0x20005058
 800205c:	40003800 	.word	0x40003800

08002060 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002064:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <MX_SPI4_Init+0x64>)
 8002066:	4a18      	ldr	r2, [pc, #96]	; (80020c8 <MX_SPI4_Init+0x68>)
 8002068:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800206a:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <MX_SPI4_Init+0x64>)
 800206c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002070:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002072:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <MX_SPI4_Init+0x64>)
 8002074:	2200      	movs	r2, #0
 8002076:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002078:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <MX_SPI4_Init+0x64>)
 800207a:	2200      	movs	r2, #0
 800207c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800207e:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <MX_SPI4_Init+0x64>)
 8002080:	2200      	movs	r2, #0
 8002082:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002084:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <MX_SPI4_Init+0x64>)
 8002086:	2200      	movs	r2, #0
 8002088:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800208a:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <MX_SPI4_Init+0x64>)
 800208c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002090:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002092:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <MX_SPI4_Init+0x64>)
 8002094:	2200      	movs	r2, #0
 8002096:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002098:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <MX_SPI4_Init+0x64>)
 800209a:	2200      	movs	r2, #0
 800209c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800209e:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <MX_SPI4_Init+0x64>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020a4:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <MX_SPI4_Init+0x64>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <MX_SPI4_Init+0x64>)
 80020ac:	220a      	movs	r2, #10
 80020ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80020b0:	4804      	ldr	r0, [pc, #16]	; (80020c4 <MX_SPI4_Init+0x64>)
 80020b2:	f007 facd 	bl	8009650 <HAL_SPI_Init>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80020bc:	f7ff fed6 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20005108 	.word	0x20005108
 80020c8:	40013400 	.word	0x40013400

080020cc <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80020d0:	4b17      	ldr	r3, [pc, #92]	; (8002130 <MX_SPI5_Init+0x64>)
 80020d2:	4a18      	ldr	r2, [pc, #96]	; (8002134 <MX_SPI5_Init+0x68>)
 80020d4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80020d6:	4b16      	ldr	r3, [pc, #88]	; (8002130 <MX_SPI5_Init+0x64>)
 80020d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020dc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80020de:	4b14      	ldr	r3, [pc, #80]	; (8002130 <MX_SPI5_Init+0x64>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80020e4:	4b12      	ldr	r3, [pc, #72]	; (8002130 <MX_SPI5_Init+0x64>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020ea:	4b11      	ldr	r3, [pc, #68]	; (8002130 <MX_SPI5_Init+0x64>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020f0:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <MX_SPI5_Init+0x64>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80020f6:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <MX_SPI5_Init+0x64>)
 80020f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020fc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020fe:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <MX_SPI5_Init+0x64>)
 8002100:	2200      	movs	r2, #0
 8002102:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002104:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <MX_SPI5_Init+0x64>)
 8002106:	2200      	movs	r2, #0
 8002108:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <MX_SPI5_Init+0x64>)
 800210c:	2200      	movs	r2, #0
 800210e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002110:	4b07      	ldr	r3, [pc, #28]	; (8002130 <MX_SPI5_Init+0x64>)
 8002112:	2200      	movs	r2, #0
 8002114:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <MX_SPI5_Init+0x64>)
 8002118:	220a      	movs	r2, #10
 800211a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800211c:	4804      	ldr	r0, [pc, #16]	; (8002130 <MX_SPI5_Init+0x64>)
 800211e:	f007 fa97 	bl	8009650 <HAL_SPI_Init>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002128:	f7ff fea0 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800212c:	bf00      	nop
 800212e:	bd80      	pop	{r7, pc}
 8002130:	200050b0 	.word	0x200050b0
 8002134:	40015000 	.word	0x40015000

08002138 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08e      	sub	sp, #56	; 0x38
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a4c      	ldr	r2, [pc, #304]	; (8002288 <HAL_SPI_MspInit+0x150>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d12d      	bne.n	80021b6 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	623b      	str	r3, [r7, #32]
 800215e:	4b4b      	ldr	r3, [pc, #300]	; (800228c <HAL_SPI_MspInit+0x154>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	4a4a      	ldr	r2, [pc, #296]	; (800228c <HAL_SPI_MspInit+0x154>)
 8002164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002168:	6413      	str	r3, [r2, #64]	; 0x40
 800216a:	4b48      	ldr	r3, [pc, #288]	; (800228c <HAL_SPI_MspInit+0x154>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002172:	623b      	str	r3, [r7, #32]
 8002174:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
 800217a:	4b44      	ldr	r3, [pc, #272]	; (800228c <HAL_SPI_MspInit+0x154>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a43      	ldr	r2, [pc, #268]	; (800228c <HAL_SPI_MspInit+0x154>)
 8002180:	f043 0302 	orr.w	r3, r3, #2
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b41      	ldr	r3, [pc, #260]	; (800228c <HAL_SPI_MspInit+0x154>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	61fb      	str	r3, [r7, #28]
 8002190:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002192:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002198:	2302      	movs	r3, #2
 800219a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a0:	2303      	movs	r3, #3
 80021a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021a4:	2305      	movs	r3, #5
 80021a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ac:	4619      	mov	r1, r3
 80021ae:	4838      	ldr	r0, [pc, #224]	; (8002290 <HAL_SPI_MspInit+0x158>)
 80021b0:	f003 fcfe 	bl	8005bb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80021b4:	e064      	b.n	8002280 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI4)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a36      	ldr	r2, [pc, #216]	; (8002294 <HAL_SPI_MspInit+0x15c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d12d      	bne.n	800221c <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80021c0:	2300      	movs	r3, #0
 80021c2:	61bb      	str	r3, [r7, #24]
 80021c4:	4b31      	ldr	r3, [pc, #196]	; (800228c <HAL_SPI_MspInit+0x154>)
 80021c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c8:	4a30      	ldr	r2, [pc, #192]	; (800228c <HAL_SPI_MspInit+0x154>)
 80021ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021ce:	6453      	str	r3, [r2, #68]	; 0x44
 80021d0:	4b2e      	ldr	r3, [pc, #184]	; (800228c <HAL_SPI_MspInit+0x154>)
 80021d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021d8:	61bb      	str	r3, [r7, #24]
 80021da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	4b2a      	ldr	r3, [pc, #168]	; (800228c <HAL_SPI_MspInit+0x154>)
 80021e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e4:	4a29      	ldr	r2, [pc, #164]	; (800228c <HAL_SPI_MspInit+0x154>)
 80021e6:	f043 0310 	orr.w	r3, r3, #16
 80021ea:	6313      	str	r3, [r2, #48]	; 0x30
 80021ec:	4b27      	ldr	r3, [pc, #156]	; (800228c <HAL_SPI_MspInit+0x154>)
 80021ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f0:	f003 0310 	and.w	r3, r3, #16
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80021f8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fe:	2302      	movs	r3, #2
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002206:	2303      	movs	r3, #3
 8002208:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800220a:	2305      	movs	r3, #5
 800220c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800220e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002212:	4619      	mov	r1, r3
 8002214:	4820      	ldr	r0, [pc, #128]	; (8002298 <HAL_SPI_MspInit+0x160>)
 8002216:	f003 fccb 	bl	8005bb0 <HAL_GPIO_Init>
}
 800221a:	e031      	b.n	8002280 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI5)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a1e      	ldr	r2, [pc, #120]	; (800229c <HAL_SPI_MspInit+0x164>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d12c      	bne.n	8002280 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	4b18      	ldr	r3, [pc, #96]	; (800228c <HAL_SPI_MspInit+0x154>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	4a17      	ldr	r2, [pc, #92]	; (800228c <HAL_SPI_MspInit+0x154>)
 8002230:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002234:	6453      	str	r3, [r2, #68]	; 0x44
 8002236:	4b15      	ldr	r3, [pc, #84]	; (800228c <HAL_SPI_MspInit+0x154>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	4b11      	ldr	r3, [pc, #68]	; (800228c <HAL_SPI_MspInit+0x154>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	4a10      	ldr	r2, [pc, #64]	; (800228c <HAL_SPI_MspInit+0x154>)
 800224c:	f043 0320 	orr.w	r3, r3, #32
 8002250:	6313      	str	r3, [r2, #48]	; 0x30
 8002252:	4b0e      	ldr	r3, [pc, #56]	; (800228c <HAL_SPI_MspInit+0x154>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	f003 0320 	and.w	r3, r3, #32
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800225e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002262:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002264:	2302      	movs	r3, #2
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226c:	2303      	movs	r3, #3
 800226e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002270:	2305      	movs	r3, #5
 8002272:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002278:	4619      	mov	r1, r3
 800227a:	4809      	ldr	r0, [pc, #36]	; (80022a0 <HAL_SPI_MspInit+0x168>)
 800227c:	f003 fc98 	bl	8005bb0 <HAL_GPIO_Init>
}
 8002280:	bf00      	nop
 8002282:	3738      	adds	r7, #56	; 0x38
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40003800 	.word	0x40003800
 800228c:	40023800 	.word	0x40023800
 8002290:	40020400 	.word	0x40020400
 8002294:	40013400 	.word	0x40013400
 8002298:	40021000 	.word	0x40021000
 800229c:	40015000 	.word	0x40015000
 80022a0:	40021400 	.word	0x40021400

080022a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	607b      	str	r3, [r7, #4]
 80022ae:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <HAL_MspInit+0x54>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	4a11      	ldr	r2, [pc, #68]	; (80022f8 <HAL_MspInit+0x54>)
 80022b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022b8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ba:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <HAL_MspInit+0x54>)
 80022bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c2:	607b      	str	r3, [r7, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	603b      	str	r3, [r7, #0]
 80022ca:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <HAL_MspInit+0x54>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <HAL_MspInit+0x54>)
 80022d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d4:	6413      	str	r3, [r2, #64]	; 0x40
 80022d6:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <HAL_MspInit+0x54>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80022e2:	2200      	movs	r2, #0
 80022e4:	210f      	movs	r1, #15
 80022e6:	f06f 0001 	mvn.w	r0, #1
 80022ea:	f003 fc37 	bl	8005b5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40023800 	.word	0x40023800

080022fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08c      	sub	sp, #48	; 0x30
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800230c:	2200      	movs	r2, #0
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	2036      	movs	r0, #54	; 0x36
 8002312:	f003 fc23 	bl	8005b5c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002316:	2036      	movs	r0, #54	; 0x36
 8002318:	f003 fc3c 	bl	8005b94 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800231c:	2300      	movs	r3, #0
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	4b1f      	ldr	r3, [pc, #124]	; (80023a0 <HAL_InitTick+0xa4>)
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	4a1e      	ldr	r2, [pc, #120]	; (80023a0 <HAL_InitTick+0xa4>)
 8002326:	f043 0310 	orr.w	r3, r3, #16
 800232a:	6413      	str	r3, [r2, #64]	; 0x40
 800232c:	4b1c      	ldr	r3, [pc, #112]	; (80023a0 <HAL_InitTick+0xa4>)
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002338:	f107 0210 	add.w	r2, r7, #16
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	4611      	mov	r1, r2
 8002342:	4618      	mov	r0, r3
 8002344:	f006 fa82 	bl	800884c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002348:	f006 fa58 	bl	80087fc <HAL_RCC_GetPCLK1Freq>
 800234c:	4603      	mov	r3, r0
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002354:	4a13      	ldr	r2, [pc, #76]	; (80023a4 <HAL_InitTick+0xa8>)
 8002356:	fba2 2303 	umull	r2, r3, r2, r3
 800235a:	0c9b      	lsrs	r3, r3, #18
 800235c:	3b01      	subs	r3, #1
 800235e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002360:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <HAL_InitTick+0xac>)
 8002362:	4a12      	ldr	r2, [pc, #72]	; (80023ac <HAL_InitTick+0xb0>)
 8002364:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002366:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <HAL_InitTick+0xac>)
 8002368:	f240 32e7 	movw	r2, #999	; 0x3e7
 800236c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <HAL_InitTick+0xac>)
 8002370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002372:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <HAL_InitTick+0xac>)
 8002376:	2200      	movs	r2, #0
 8002378:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800237a:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_InitTick+0xac>)
 800237c:	2200      	movs	r2, #0
 800237e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002380:	4809      	ldr	r0, [pc, #36]	; (80023a8 <HAL_InitTick+0xac>)
 8002382:	f007 ff0d 	bl	800a1a0 <HAL_TIM_Base_Init>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d104      	bne.n	8002396 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800238c:	4806      	ldr	r0, [pc, #24]	; (80023a8 <HAL_InitTick+0xac>)
 800238e:	f007 ff57 	bl	800a240 <HAL_TIM_Base_Start_IT>
 8002392:	4603      	mov	r3, r0
 8002394:	e000      	b.n	8002398 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
}
 8002398:	4618      	mov	r0, r3
 800239a:	3730      	adds	r7, #48	; 0x30
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40023800 	.word	0x40023800
 80023a4:	431bde83 	.word	0x431bde83
 80023a8:	20005160 	.word	0x20005160
 80023ac:	40001000 	.word	0x40001000

080023b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023b4:	e7fe      	b.n	80023b4 <NMI_Handler+0x4>

080023b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ba:	e7fe      	b.n	80023ba <HardFault_Handler+0x4>

080023bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c0:	e7fe      	b.n	80023c0 <MemManage_Handler+0x4>

080023c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023c6:	e7fe      	b.n	80023c6 <BusFault_Handler+0x4>

080023c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023cc:	e7fe      	b.n	80023cc <UsageFault_Handler+0x4>

080023ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80023e0:	2001      	movs	r0, #1
 80023e2:	f003 fdab 	bl	8005f3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80023f0:	4802      	ldr	r0, [pc, #8]	; (80023fc <RTC_Alarm_IRQHandler+0x10>)
 80023f2:	f006 ff49 	bl	8009288 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20005038 	.word	0x20005038

08002400 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002404:	4802      	ldr	r0, [pc, #8]	; (8002410 <TIM6_DAC_IRQHandler+0x10>)
 8002406:	f007 ffe4 	bl	800a3d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20005160 	.word	0x20005160

08002414 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002418:	4802      	ldr	r0, [pc, #8]	; (8002424 <OTG_FS_IRQHandler+0x10>)
 800241a:	f004 fded 	bl	8006ff8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	2000650c 	.word	0x2000650c

08002428 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800242c:	4b06      	ldr	r3, [pc, #24]	; (8002448 <SystemInit+0x20>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002432:	4a05      	ldr	r2, [pc, #20]	; (8002448 <SystemInit+0x20>)
 8002434:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002438:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08e      	sub	sp, #56	; 0x38
 8002450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	605a      	str	r2, [r3, #4]
 800245c:	609a      	str	r2, [r3, #8]
 800245e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002460:	f107 0320 	add.w	r3, r7, #32
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800246a:	1d3b      	adds	r3, r7, #4
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	611a      	str	r2, [r3, #16]
 8002478:	615a      	str	r2, [r3, #20]
 800247a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800247c:	4b2d      	ldr	r3, [pc, #180]	; (8002534 <MX_TIM2_Init+0xe8>)
 800247e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002482:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8002484:	4b2b      	ldr	r3, [pc, #172]	; (8002534 <MX_TIM2_Init+0xe8>)
 8002486:	2259      	movs	r2, #89	; 0x59
 8002488:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800248a:	4b2a      	ldr	r3, [pc, #168]	; (8002534 <MX_TIM2_Init+0xe8>)
 800248c:	2200      	movs	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 8002490:	4b28      	ldr	r3, [pc, #160]	; (8002534 <MX_TIM2_Init+0xe8>)
 8002492:	f240 128f 	movw	r2, #399	; 0x18f
 8002496:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002498:	4b26      	ldr	r3, [pc, #152]	; (8002534 <MX_TIM2_Init+0xe8>)
 800249a:	2200      	movs	r2, #0
 800249c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800249e:	4b25      	ldr	r3, [pc, #148]	; (8002534 <MX_TIM2_Init+0xe8>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024a4:	4823      	ldr	r0, [pc, #140]	; (8002534 <MX_TIM2_Init+0xe8>)
 80024a6:	f007 fe7b 	bl	800a1a0 <HAL_TIM_Base_Init>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80024b0:	f7ff fcdc 	bl	8001e6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024be:	4619      	mov	r1, r3
 80024c0:	481c      	ldr	r0, [pc, #112]	; (8002534 <MX_TIM2_Init+0xe8>)
 80024c2:	f008 f951 	bl	800a768 <HAL_TIM_ConfigClockSource>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80024cc:	f7ff fcce 	bl	8001e6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80024d0:	4818      	ldr	r0, [pc, #96]	; (8002534 <MX_TIM2_Init+0xe8>)
 80024d2:	f007 ff25 	bl	800a320 <HAL_TIM_PWM_Init>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80024dc:	f7ff fcc6 	bl	8001e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80024e0:	2320      	movs	r3, #32
 80024e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024e4:	2300      	movs	r3, #0
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024e8:	f107 0320 	add.w	r3, r7, #32
 80024ec:	4619      	mov	r1, r3
 80024ee:	4811      	ldr	r0, [pc, #68]	; (8002534 <MX_TIM2_Init+0xe8>)
 80024f0:	f008 fd14 	bl	800af1c <HAL_TIMEx_MasterConfigSynchronization>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80024fa:	f7ff fcb7 	bl	8001e6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024fe:	2360      	movs	r3, #96	; 0x60
 8002500:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8002502:	2364      	movs	r3, #100	; 0x64
 8002504:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800250e:	1d3b      	adds	r3, r7, #4
 8002510:	2208      	movs	r2, #8
 8002512:	4619      	mov	r1, r3
 8002514:	4807      	ldr	r0, [pc, #28]	; (8002534 <MX_TIM2_Init+0xe8>)
 8002516:	f008 f865 	bl	800a5e4 <HAL_TIM_PWM_ConfigChannel>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002520:	f7ff fca4 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002524:	4803      	ldr	r0, [pc, #12]	; (8002534 <MX_TIM2_Init+0xe8>)
 8002526:	f000 f827 	bl	8002578 <HAL_TIM_MspPostInit>

}
 800252a:	bf00      	nop
 800252c:	3738      	adds	r7, #56	; 0x38
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	200051a8 	.word	0x200051a8

08002538 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002548:	d10d      	bne.n	8002566 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	4b09      	ldr	r3, [pc, #36]	; (8002574 <HAL_TIM_Base_MspInit+0x3c>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	4a08      	ldr	r2, [pc, #32]	; (8002574 <HAL_TIM_Base_MspInit+0x3c>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6413      	str	r3, [r2, #64]	; 0x40
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_TIM_Base_MspInit+0x3c>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002566:	bf00      	nop
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	40023800 	.word	0x40023800

08002578 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b088      	sub	sp, #32
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002580:	f107 030c 	add.w	r3, r7, #12
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	60da      	str	r2, [r3, #12]
 800258e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002598:	d11d      	bne.n	80025d6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <HAL_TIM_MspPostInit+0x68>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	4a0f      	ldr	r2, [pc, #60]	; (80025e0 <HAL_TIM_MspPostInit+0x68>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6313      	str	r3, [r2, #48]	; 0x30
 80025aa:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <HAL_TIM_MspPostInit+0x68>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 80025b6:	2304      	movs	r3, #4
 80025b8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ba:	2302      	movs	r3, #2
 80025bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c2:	2300      	movs	r3, #0
 80025c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025c6:	2301      	movs	r3, #1
 80025c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80025ca:	f107 030c 	add.w	r3, r7, #12
 80025ce:	4619      	mov	r1, r3
 80025d0:	4804      	ldr	r0, [pc, #16]	; (80025e4 <HAL_TIM_MspPostInit+0x6c>)
 80025d2:	f003 faed 	bl	8005bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80025d6:	bf00      	nop
 80025d8:	3720      	adds	r7, #32
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40020000 	.word	0x40020000

080025e8 <MX_UART8_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART8 init function */
void MX_UART8_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80025ec:	4b11      	ldr	r3, [pc, #68]	; (8002634 <MX_UART8_Init+0x4c>)
 80025ee:	4a12      	ldr	r2, [pc, #72]	; (8002638 <MX_UART8_Init+0x50>)
 80025f0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <MX_UART8_Init+0x4c>)
 80025f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025f8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80025fa:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <MX_UART8_Init+0x4c>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <MX_UART8_Init+0x4c>)
 8002602:	2200      	movs	r2, #0
 8002604:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002606:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <MX_UART8_Init+0x4c>)
 8002608:	2200      	movs	r2, #0
 800260a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800260c:	4b09      	ldr	r3, [pc, #36]	; (8002634 <MX_UART8_Init+0x4c>)
 800260e:	220c      	movs	r2, #12
 8002610:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002612:	4b08      	ldr	r3, [pc, #32]	; (8002634 <MX_UART8_Init+0x4c>)
 8002614:	2200      	movs	r2, #0
 8002616:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002618:	4b06      	ldr	r3, [pc, #24]	; (8002634 <MX_UART8_Init+0x4c>)
 800261a:	2200      	movs	r2, #0
 800261c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800261e:	4805      	ldr	r0, [pc, #20]	; (8002634 <MX_UART8_Init+0x4c>)
 8002620:	f008 fd0c 	bl	800b03c <HAL_UART_Init>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_UART8_Init+0x46>
  {
    Error_Handler();
 800262a:	f7ff fc1f 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20005234 	.word	0x20005234
 8002638:	40007c00 	.word	0x40007c00

0800263c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002640:	4b11      	ldr	r3, [pc, #68]	; (8002688 <MX_USART3_UART_Init+0x4c>)
 8002642:	4a12      	ldr	r2, [pc, #72]	; (800268c <MX_USART3_UART_Init+0x50>)
 8002644:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <MX_USART3_UART_Init+0x4c>)
 8002648:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800264c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800264e:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <MX_USART3_UART_Init+0x4c>)
 8002650:	2200      	movs	r2, #0
 8002652:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002654:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <MX_USART3_UART_Init+0x4c>)
 8002656:	2200      	movs	r2, #0
 8002658:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800265a:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <MX_USART3_UART_Init+0x4c>)
 800265c:	2200      	movs	r2, #0
 800265e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002660:	4b09      	ldr	r3, [pc, #36]	; (8002688 <MX_USART3_UART_Init+0x4c>)
 8002662:	220c      	movs	r2, #12
 8002664:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002666:	4b08      	ldr	r3, [pc, #32]	; (8002688 <MX_USART3_UART_Init+0x4c>)
 8002668:	2200      	movs	r2, #0
 800266a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800266c:	4b06      	ldr	r3, [pc, #24]	; (8002688 <MX_USART3_UART_Init+0x4c>)
 800266e:	2200      	movs	r2, #0
 8002670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002672:	4805      	ldr	r0, [pc, #20]	; (8002688 <MX_USART3_UART_Init+0x4c>)
 8002674:	f008 fce2 	bl	800b03c <HAL_UART_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800267e:	f7ff fbf5 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	200051f0 	.word	0x200051f0
 800268c:	40004800 	.word	0x40004800

08002690 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002694:	4b11      	ldr	r3, [pc, #68]	; (80026dc <MX_USART6_UART_Init+0x4c>)
 8002696:	4a12      	ldr	r2, [pc, #72]	; (80026e0 <MX_USART6_UART_Init+0x50>)
 8002698:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800269a:	4b10      	ldr	r3, [pc, #64]	; (80026dc <MX_USART6_UART_Init+0x4c>)
 800269c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80026a0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80026a2:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <MX_USART6_UART_Init+0x4c>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <MX_USART6_UART_Init+0x4c>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80026ae:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <MX_USART6_UART_Init+0x4c>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80026b4:	4b09      	ldr	r3, [pc, #36]	; (80026dc <MX_USART6_UART_Init+0x4c>)
 80026b6:	220c      	movs	r2, #12
 80026b8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ba:	4b08      	ldr	r3, [pc, #32]	; (80026dc <MX_USART6_UART_Init+0x4c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <MX_USART6_UART_Init+0x4c>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80026c6:	4805      	ldr	r0, [pc, #20]	; (80026dc <MX_USART6_UART_Init+0x4c>)
 80026c8:	f008 fcb8 	bl	800b03c <HAL_UART_Init>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80026d2:	f7ff fbcb 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20005278 	.word	0x20005278
 80026e0:	40011400 	.word	0x40011400

080026e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08e      	sub	sp, #56	; 0x38
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a4b      	ldr	r2, [pc, #300]	; (8002830 <HAL_UART_MspInit+0x14c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d12c      	bne.n	8002760 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	623b      	str	r3, [r7, #32]
 800270a:	4b4a      	ldr	r3, [pc, #296]	; (8002834 <HAL_UART_MspInit+0x150>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	4a49      	ldr	r2, [pc, #292]	; (8002834 <HAL_UART_MspInit+0x150>)
 8002710:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002714:	6413      	str	r3, [r2, #64]	; 0x40
 8002716:	4b47      	ldr	r3, [pc, #284]	; (8002834 <HAL_UART_MspInit+0x150>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800271e:	623b      	str	r3, [r7, #32]
 8002720:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	61fb      	str	r3, [r7, #28]
 8002726:	4b43      	ldr	r3, [pc, #268]	; (8002834 <HAL_UART_MspInit+0x150>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	4a42      	ldr	r2, [pc, #264]	; (8002834 <HAL_UART_MspInit+0x150>)
 800272c:	f043 0310 	orr.w	r3, r3, #16
 8002730:	6313      	str	r3, [r2, #48]	; 0x30
 8002732:	4b40      	ldr	r3, [pc, #256]	; (8002834 <HAL_UART_MspInit+0x150>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f003 0310 	and.w	r3, r3, #16
 800273a:	61fb      	str	r3, [r7, #28]
 800273c:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 800273e:	2303      	movs	r3, #3
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002742:	2302      	movs	r3, #2
 8002744:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	2300      	movs	r3, #0
 8002748:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274a:	2303      	movs	r3, #3
 800274c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800274e:	2308      	movs	r3, #8
 8002750:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002756:	4619      	mov	r1, r3
 8002758:	4837      	ldr	r0, [pc, #220]	; (8002838 <HAL_UART_MspInit+0x154>)
 800275a:	f003 fa29 	bl	8005bb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800275e:	e063      	b.n	8002828 <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART3)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a35      	ldr	r2, [pc, #212]	; (800283c <HAL_UART_MspInit+0x158>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d12d      	bne.n	80027c6 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	4b31      	ldr	r3, [pc, #196]	; (8002834 <HAL_UART_MspInit+0x150>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4a30      	ldr	r2, [pc, #192]	; (8002834 <HAL_UART_MspInit+0x150>)
 8002774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002778:	6413      	str	r3, [r2, #64]	; 0x40
 800277a:	4b2e      	ldr	r3, [pc, #184]	; (8002834 <HAL_UART_MspInit+0x150>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002782:	61bb      	str	r3, [r7, #24]
 8002784:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	4b2a      	ldr	r3, [pc, #168]	; (8002834 <HAL_UART_MspInit+0x150>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	4a29      	ldr	r2, [pc, #164]	; (8002834 <HAL_UART_MspInit+0x150>)
 8002790:	f043 0308 	orr.w	r3, r3, #8
 8002794:	6313      	str	r3, [r2, #48]	; 0x30
 8002796:	4b27      	ldr	r3, [pc, #156]	; (8002834 <HAL_UART_MspInit+0x150>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 80027a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a8:	2302      	movs	r3, #2
 80027aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b0:	2303      	movs	r3, #3
 80027b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027b4:	2307      	movs	r3, #7
 80027b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027bc:	4619      	mov	r1, r3
 80027be:	4820      	ldr	r0, [pc, #128]	; (8002840 <HAL_UART_MspInit+0x15c>)
 80027c0:	f003 f9f6 	bl	8005bb0 <HAL_GPIO_Init>
}
 80027c4:	e030      	b.n	8002828 <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART6)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a1e      	ldr	r2, [pc, #120]	; (8002844 <HAL_UART_MspInit+0x160>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d12b      	bne.n	8002828 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 80027d0:	2300      	movs	r3, #0
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	4b17      	ldr	r3, [pc, #92]	; (8002834 <HAL_UART_MspInit+0x150>)
 80027d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d8:	4a16      	ldr	r2, [pc, #88]	; (8002834 <HAL_UART_MspInit+0x150>)
 80027da:	f043 0320 	orr.w	r3, r3, #32
 80027de:	6453      	str	r3, [r2, #68]	; 0x44
 80027e0:	4b14      	ldr	r3, [pc, #80]	; (8002834 <HAL_UART_MspInit+0x150>)
 80027e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e4:	f003 0320 	and.w	r3, r3, #32
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ec:	2300      	movs	r3, #0
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	4b10      	ldr	r3, [pc, #64]	; (8002834 <HAL_UART_MspInit+0x150>)
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	4a0f      	ldr	r2, [pc, #60]	; (8002834 <HAL_UART_MspInit+0x150>)
 80027f6:	f043 0304 	orr.w	r3, r3, #4
 80027fa:	6313      	str	r3, [r2, #48]	; 0x30
 80027fc:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <HAL_UART_MspInit+0x150>)
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8002808:	23c0      	movs	r3, #192	; 0xc0
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280c:	2302      	movs	r3, #2
 800280e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002814:	2303      	movs	r3, #3
 8002816:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002818:	2308      	movs	r3, #8
 800281a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800281c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002820:	4619      	mov	r1, r3
 8002822:	4809      	ldr	r0, [pc, #36]	; (8002848 <HAL_UART_MspInit+0x164>)
 8002824:	f003 f9c4 	bl	8005bb0 <HAL_GPIO_Init>
}
 8002828:	bf00      	nop
 800282a:	3738      	adds	r7, #56	; 0x38
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40007c00 	.word	0x40007c00
 8002834:	40023800 	.word	0x40023800
 8002838:	40021000 	.word	0x40021000
 800283c:	40004800 	.word	0x40004800
 8002840:	40020c00 	.word	0x40020c00
 8002844:	40011400 	.word	0x40011400
 8002848:	40020800 	.word	0x40020800

0800284c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800284c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002884 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002850:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002852:	e003      	b.n	800285c <LoopCopyDataInit>

08002854 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002854:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002856:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002858:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800285a:	3104      	adds	r1, #4

0800285c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800285c:	480b      	ldr	r0, [pc, #44]	; (800288c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800285e:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002860:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002862:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002864:	d3f6      	bcc.n	8002854 <CopyDataInit>
  ldr  r2, =_sbss
 8002866:	4a0b      	ldr	r2, [pc, #44]	; (8002894 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002868:	e002      	b.n	8002870 <LoopFillZerobss>

0800286a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800286a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800286c:	f842 3b04 	str.w	r3, [r2], #4

08002870 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002870:	4b09      	ldr	r3, [pc, #36]	; (8002898 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002872:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002874:	d3f9      	bcc.n	800286a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002876:	f7ff fdd7 	bl	8002428 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800287a:	f010 fa7d 	bl	8012d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800287e:	f7ff fa41 	bl	8001d04 <main>
  bx  lr    
 8002882:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002884:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002888:	0801923c 	.word	0x0801923c
  ldr  r0, =_sdata
 800288c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002890:	20000254 	.word	0x20000254
  ldr  r2, =_sbss
 8002894:	20000254 	.word	0x20000254
  ldr  r3, = _ebss
 8002898:	20006924 	.word	0x20006924

0800289c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800289c:	e7fe      	b.n	800289c <ADC_IRQHandler>
	...

080028a0 <MRT_external_flash_Init>:


//**************************************************//
//FUNCTIONS

void MRT_external_flash_Init(void){
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0

	for (int i = 0; i < NB_OF_FLAGS; i++){
 80028a6:	2300      	movs	r3, #0
 80028a8:	607b      	str	r3, [r7, #4]
 80028aa:	e007      	b.n	80028bc <MRT_external_flash_Init+0x1c>
		FLAGS_NULL_BUFFER[i] = 0; //Setup the flags null buffer for the correct number of values
 80028ac:	4a0e      	ldr	r2, [pc, #56]	; (80028e8 <MRT_external_flash_Init+0x48>)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4413      	add	r3, r2
 80028b2:	2200      	movs	r2, #0
 80028b4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3301      	adds	r3, #1
 80028ba:	607b      	str	r3, [r7, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b04      	cmp	r3, #4
 80028c0:	ddf4      	ble.n	80028ac <MRT_external_flash_Init+0xc>
	}

	if (!W25qxx_Init()) {
 80028c2:	f000 fc71 	bl	80031a8 <W25qxx_Init>
 80028c6:	4603      	mov	r3, r0
 80028c8:	f083 0301 	eor.w	r3, r3, #1
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MRT_external_flash_Init+0x36>
		Error_Handler(); // hangs and blinks LEDF
 80028d2:	f7ff facb 	bl	8001e6c <Error_Handler>
	}
	MRT_check_for_wake_up(); //Needs to be called before getFlags() and after the W25xx_Init()
 80028d6:	f001 f8f9 	bl	8003acc <MRT_check_for_wake_up>
	MRT_get_flags();
 80028da:	f000 f807 	bl	80028ec <MRT_get_flags>
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	200052bc 	.word	0x200052bc

080028ec <MRT_get_flags>:




void MRT_get_flags(void){
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0

	//Retrieve flags
	W25qxx_ReadSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80028f0:	2305      	movs	r3, #5
 80028f2:	2200      	movs	r2, #0
 80028f4:	2101      	movs	r1, #1
 80028f6:	486a      	ldr	r0, [pc, #424]	; (8002aa0 <MRT_get_flags+0x1b4>)
 80028f8:	f001 f830 	bl	800395c <W25qxx_ReadSector>

	//Retrieve RTC time (last recorded)
	W25qxx_ReadSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 80028fc:	2303      	movs	r3, #3
 80028fe:	2200      	movs	r2, #0
 8002900:	2102      	movs	r1, #2
 8002902:	4868      	ldr	r0, [pc, #416]	; (8002aa4 <MRT_get_flags+0x1b8>)
 8002904:	f001 f82a 	bl	800395c <W25qxx_ReadSector>

	//If RTC detected a wake up, update the flash memory
	if (wu_flag == 1){
 8002908:	4b67      	ldr	r3, [pc, #412]	; (8002aa8 <MRT_get_flags+0x1bc>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d10e      	bne.n	800292e <MRT_get_flags+0x42>
		//Write the new number of wake up to external flash
		flash_flags_buffer[WU_FLAG_OFFSET] = flash_flags_buffer[WU_FLAG_OFFSET] + 1; //Update number of wake up
 8002910:	4b63      	ldr	r3, [pc, #396]	; (8002aa0 <MRT_get_flags+0x1b4>)
 8002912:	785b      	ldrb	r3, [r3, #1]
 8002914:	3301      	adds	r3, #1
 8002916:	b2da      	uxtb	r2, r3
 8002918:	4b61      	ldr	r3, [pc, #388]	; (8002aa0 <MRT_get_flags+0x1b4>)
 800291a:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 800291c:	2001      	movs	r0, #1
 800291e:	f000 fd95 	bl	800344c <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002922:	2305      	movs	r3, #5
 8002924:	2200      	movs	r2, #0
 8002926:	2101      	movs	r1, #1
 8002928:	485d      	ldr	r0, [pc, #372]	; (8002aa0 <MRT_get_flags+0x1b4>)
 800292a:	f000 fed9 	bl	80036e0 <W25qxx_WriteSector>
	}

	//Assign each value read to their variable
	 MRT_update_flags_values();
 800292e:	f000 f8cb 	bl	8002ac8 <MRT_update_flags_values>


	//Check flags values
	//Reset flag
	if (reset_flag != 0 && reset_flag !=1){ //If random value (none was written)
 8002932:	4b5e      	ldr	r3, [pc, #376]	; (8002aac <MRT_get_flags+0x1c0>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d013      	beq.n	8002962 <MRT_get_flags+0x76>
 800293a:	4b5c      	ldr	r3, [pc, #368]	; (8002aac <MRT_get_flags+0x1c0>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d00f      	beq.n	8002962 <MRT_get_flags+0x76>
		reset_flag = 0;
 8002942:	4b5a      	ldr	r3, [pc, #360]	; (8002aac <MRT_get_flags+0x1c0>)
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 8002948:	4b58      	ldr	r3, [pc, #352]	; (8002aac <MRT_get_flags+0x1c0>)
 800294a:	781a      	ldrb	r2, [r3, #0]
 800294c:	4b54      	ldr	r3, [pc, #336]	; (8002aa0 <MRT_get_flags+0x1b4>)
 800294e:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(1);
 8002950:	2001      	movs	r0, #1
 8002952:	f000 fd7b 	bl	800344c <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002956:	2305      	movs	r3, #5
 8002958:	2200      	movs	r2, #0
 800295a:	2101      	movs	r1, #1
 800295c:	4850      	ldr	r0, [pc, #320]	; (8002aa0 <MRT_get_flags+0x1b4>)
 800295e:	f000 febf 	bl	80036e0 <W25qxx_WriteSector>
	}

	//Wake up flag
	if (wu_flag != 0 && wu_flag !=1 && wu_flag !=2){ //If random value (none was written)
 8002962:	4b51      	ldr	r3, [pc, #324]	; (8002aa8 <MRT_get_flags+0x1bc>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d017      	beq.n	800299a <MRT_get_flags+0xae>
 800296a:	4b4f      	ldr	r3, [pc, #316]	; (8002aa8 <MRT_get_flags+0x1bc>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d013      	beq.n	800299a <MRT_get_flags+0xae>
 8002972:	4b4d      	ldr	r3, [pc, #308]	; (8002aa8 <MRT_get_flags+0x1bc>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d00f      	beq.n	800299a <MRT_get_flags+0xae>
		wu_flag = 0;
 800297a:	4b4b      	ldr	r3, [pc, #300]	; (8002aa8 <MRT_get_flags+0x1bc>)
 800297c:	2200      	movs	r2, #0
 800297e:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[WU_FLAG_OFFSET] = wu_flag;
 8002980:	4b49      	ldr	r3, [pc, #292]	; (8002aa8 <MRT_get_flags+0x1bc>)
 8002982:	781a      	ldrb	r2, [r3, #0]
 8002984:	4b46      	ldr	r3, [pc, #280]	; (8002aa0 <MRT_get_flags+0x1b4>)
 8002986:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 8002988:	2001      	movs	r0, #1
 800298a:	f000 fd5f 	bl	800344c <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 800298e:	2305      	movs	r3, #5
 8002990:	2200      	movs	r2, #0
 8002992:	2101      	movs	r1, #1
 8002994:	4842      	ldr	r0, [pc, #264]	; (8002aa0 <MRT_get_flags+0x1b4>)
 8002996:	f000 fea3 	bl	80036e0 <W25qxx_WriteSector>
	}

	//IWDG flag
	if (iwdg_flag != 0 && iwdg_flag !=1){ //If random value (none was written)
 800299a:	4b45      	ldr	r3, [pc, #276]	; (8002ab0 <MRT_get_flags+0x1c4>)
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d013      	beq.n	80029ca <MRT_get_flags+0xde>
 80029a2:	4b43      	ldr	r3, [pc, #268]	; (8002ab0 <MRT_get_flags+0x1c4>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d00f      	beq.n	80029ca <MRT_get_flags+0xde>
		iwdg_flag = 0;
 80029aa:	4b41      	ldr	r3, [pc, #260]	; (8002ab0 <MRT_get_flags+0x1c4>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 80029b0:	4b3f      	ldr	r3, [pc, #252]	; (8002ab0 <MRT_get_flags+0x1c4>)
 80029b2:	781a      	ldrb	r2, [r3, #0]
 80029b4:	4b3a      	ldr	r3, [pc, #232]	; (8002aa0 <MRT_get_flags+0x1b4>)
 80029b6:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(1);
 80029b8:	2001      	movs	r0, #1
 80029ba:	f000 fd47 	bl	800344c <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80029be:	2305      	movs	r3, #5
 80029c0:	2200      	movs	r2, #0
 80029c2:	2101      	movs	r1, #1
 80029c4:	4836      	ldr	r0, [pc, #216]	; (8002aa0 <MRT_get_flags+0x1b4>)
 80029c6:	f000 fe8b 	bl	80036e0 <W25qxx_WriteSector>
	}

	//Apogee flag
	if (apogee_flag != 0 && apogee_flag !=1){ //If random value (none was written)
 80029ca:	4b3a      	ldr	r3, [pc, #232]	; (8002ab4 <MRT_get_flags+0x1c8>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d013      	beq.n	80029fa <MRT_get_flags+0x10e>
 80029d2:	4b38      	ldr	r3, [pc, #224]	; (8002ab4 <MRT_get_flags+0x1c8>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d00f      	beq.n	80029fa <MRT_get_flags+0x10e>
		apogee_flag = 0;
 80029da:	4b36      	ldr	r3, [pc, #216]	; (8002ab4 <MRT_get_flags+0x1c8>)
 80029dc:	2200      	movs	r2, #0
 80029de:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[APOGEE_FLAG_OFFSET] = apogee_flag;
 80029e0:	4b34      	ldr	r3, [pc, #208]	; (8002ab4 <MRT_get_flags+0x1c8>)
 80029e2:	781a      	ldrb	r2, [r3, #0]
 80029e4:	4b2e      	ldr	r3, [pc, #184]	; (8002aa0 <MRT_get_flags+0x1b4>)
 80029e6:	70da      	strb	r2, [r3, #3]
		W25qxx_EraseSector(1);
 80029e8:	2001      	movs	r0, #1
 80029ea:	f000 fd2f 	bl	800344c <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80029ee:	2305      	movs	r3, #5
 80029f0:	2200      	movs	r2, #0
 80029f2:	2101      	movs	r1, #1
 80029f4:	482a      	ldr	r0, [pc, #168]	; (8002aa0 <MRT_get_flags+0x1b4>)
 80029f6:	f000 fe73 	bl	80036e0 <W25qxx_WriteSector>
	}

	//Ejection state flag
	if (!(ejection_state_flag >= 0 && ejection_state_flag <=4)){ //If random value (none was written)
 80029fa:	4b2f      	ldr	r3, [pc, #188]	; (8002ab8 <MRT_get_flags+0x1cc>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d90f      	bls.n	8002a22 <MRT_get_flags+0x136>
		ejection_state_flag = 0;
 8002a02:	4b2d      	ldr	r3, [pc, #180]	; (8002ab8 <MRT_get_flags+0x1cc>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[EJECTION_STATE_FLAG_OFFSET] = ejection_state_flag;
 8002a08:	4b2b      	ldr	r3, [pc, #172]	; (8002ab8 <MRT_get_flags+0x1cc>)
 8002a0a:	781a      	ldrb	r2, [r3, #0]
 8002a0c:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <MRT_get_flags+0x1b4>)
 8002a0e:	711a      	strb	r2, [r3, #4]
		W25qxx_EraseSector(1);
 8002a10:	2001      	movs	r0, #1
 8002a12:	f000 fd1b 	bl	800344c <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002a16:	2305      	movs	r3, #5
 8002a18:	2200      	movs	r2, #0
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	4820      	ldr	r0, [pc, #128]	; (8002aa0 <MRT_get_flags+0x1b4>)
 8002a1e:	f000 fe5f 	bl	80036e0 <W25qxx_WriteSector>
	}


	//Check RTC time values
	//Hours
	if (!(prev_hours >= 0 && prev_hours < 24)){ //If random value (none was written)
 8002a22:	4b26      	ldr	r3, [pc, #152]	; (8002abc <MRT_get_flags+0x1d0>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b17      	cmp	r3, #23
 8002a28:	d90f      	bls.n	8002a4a <MRT_get_flags+0x15e>
		prev_hours = 0;
 8002a2a:	4b24      	ldr	r3, [pc, #144]	; (8002abc <MRT_get_flags+0x1d0>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_HOURS_OFFSET] = prev_hours;
 8002a30:	4b22      	ldr	r3, [pc, #136]	; (8002abc <MRT_get_flags+0x1d0>)
 8002a32:	781a      	ldrb	r2, [r3, #0]
 8002a34:	4b1b      	ldr	r3, [pc, #108]	; (8002aa4 <MRT_get_flags+0x1b8>)
 8002a36:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(2);
 8002a38:	2002      	movs	r0, #2
 8002a3a:	f000 fd07 	bl	800344c <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8002a3e:	2303      	movs	r3, #3
 8002a40:	2200      	movs	r2, #0
 8002a42:	2102      	movs	r1, #2
 8002a44:	4817      	ldr	r0, [pc, #92]	; (8002aa4 <MRT_get_flags+0x1b8>)
 8002a46:	f000 fe4b 	bl	80036e0 <W25qxx_WriteSector>
	}

	//Minutes
	if (!(prev_min >= 0 && prev_min < 60)){ //If random value (none was written)
 8002a4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <MRT_get_flags+0x1d4>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b3b      	cmp	r3, #59	; 0x3b
 8002a50:	d90f      	bls.n	8002a72 <MRT_get_flags+0x186>
		prev_min = 0;
 8002a52:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <MRT_get_flags+0x1d4>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_MIN_OFFSET] = prev_min;
 8002a58:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <MRT_get_flags+0x1d4>)
 8002a5a:	781a      	ldrb	r2, [r3, #0]
 8002a5c:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <MRT_get_flags+0x1b8>)
 8002a5e:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(2);
 8002a60:	2002      	movs	r0, #2
 8002a62:	f000 fcf3 	bl	800344c <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8002a66:	2303      	movs	r3, #3
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2102      	movs	r1, #2
 8002a6c:	480d      	ldr	r0, [pc, #52]	; (8002aa4 <MRT_get_flags+0x1b8>)
 8002a6e:	f000 fe37 	bl	80036e0 <W25qxx_WriteSector>
	}

	//Seconds
	if (!(prev_sec >= 0 && prev_sec < 60)){ //If random value (none was written)
 8002a72:	4b14      	ldr	r3, [pc, #80]	; (8002ac4 <MRT_get_flags+0x1d8>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	2b3b      	cmp	r3, #59	; 0x3b
 8002a78:	d90f      	bls.n	8002a9a <MRT_get_flags+0x1ae>
		prev_sec = 0;
 8002a7a:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <MRT_get_flags+0x1d8>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_SEC_OFFSET] = prev_sec;
 8002a80:	4b10      	ldr	r3, [pc, #64]	; (8002ac4 <MRT_get_flags+0x1d8>)
 8002a82:	781a      	ldrb	r2, [r3, #0]
 8002a84:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <MRT_get_flags+0x1b8>)
 8002a86:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(2);
 8002a88:	2002      	movs	r0, #2
 8002a8a:	f000 fcdf 	bl	800344c <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8002a8e:	2303      	movs	r3, #3
 8002a90:	2200      	movs	r2, #0
 8002a92:	2102      	movs	r1, #2
 8002a94:	4803      	ldr	r0, [pc, #12]	; (8002aa4 <MRT_get_flags+0x1b8>)
 8002a96:	f000 fe23 	bl	80036e0 <W25qxx_WriteSector>
	}
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	200052c4 	.word	0x200052c4
 8002aa4:	200052cc 	.word	0x200052cc
 8002aa8:	20000271 	.word	0x20000271
 8002aac:	20000270 	.word	0x20000270
 8002ab0:	20000272 	.word	0x20000272
 8002ab4:	20000273 	.word	0x20000273
 8002ab8:	20000274 	.word	0x20000274
 8002abc:	20000275 	.word	0x20000275
 8002ac0:	20000276 	.word	0x20000276
 8002ac4:	20000277 	.word	0x20000277

08002ac8 <MRT_update_flags_values>:
		flash_time_buffer[i] = *flash_time[i];
	}
}


void MRT_update_flags_values(void){
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8002ace:	2300      	movs	r3, #0
 8002ad0:	607b      	str	r3, [r7, #4]
 8002ad2:	e00b      	b.n	8002aec <MRT_update_flags_values+0x24>
		*flash_flags[i] = flash_flags_buffer[i];
 8002ad4:	4a13      	ldr	r2, [pc, #76]	; (8002b24 <MRT_update_flags_values+0x5c>)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002adc:	4912      	ldr	r1, [pc, #72]	; (8002b28 <MRT_update_flags_values+0x60>)
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	440a      	add	r2, r1
 8002ae2:	7812      	ldrb	r2, [r2, #0]
 8002ae4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	607b      	str	r3, [r7, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	ddf0      	ble.n	8002ad4 <MRT_update_flags_values+0xc>
	}
	for (int i = 0; i < 3; i++){
 8002af2:	2300      	movs	r3, #0
 8002af4:	603b      	str	r3, [r7, #0]
 8002af6:	e00b      	b.n	8002b10 <MRT_update_flags_values+0x48>
		*flash_time[i] = flash_time_buffer[i];
 8002af8:	4a0c      	ldr	r2, [pc, #48]	; (8002b2c <MRT_update_flags_values+0x64>)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b00:	490b      	ldr	r1, [pc, #44]	; (8002b30 <MRT_update_flags_values+0x68>)
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	440a      	add	r2, r1
 8002b06:	7812      	ldrb	r2, [r2, #0]
 8002b08:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++){
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	603b      	str	r3, [r7, #0]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	ddf0      	ble.n	8002af8 <MRT_update_flags_values+0x30>
	}
}
 8002b16:	bf00      	nop
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	20000004 	.word	0x20000004
 8002b28:	200052c4 	.word	0x200052c4
 8002b2c:	20000018 	.word	0x20000018
 8002b30:	200052cc 	.word	0x200052cc

08002b34 <myprintf>:


uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value);
void str2upper(char* string, char* upper);

void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 8002b34:	b40f      	push	{r0, r1, r2, r3}
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8002b3c:	f107 0314 	add.w	r3, r7, #20
 8002b40:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b4a:	480a      	ldr	r0, [pc, #40]	; (8002b74 <myprintf+0x40>)
 8002b4c:	f012 f860 	bl	8014c10 <vsniprintf>
  va_end(args);

  //CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
  HAL_UART_Transmit(&DEBUG_UART, (uint8_t*)buffer, strlen(buffer), -1);
 8002b50:	4808      	ldr	r0, [pc, #32]	; (8002b74 <myprintf+0x40>)
 8002b52:	f7fd fb4d 	bl	80001f0 <strlen>
 8002b56:	4603      	mov	r3, r0
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b5e:	4905      	ldr	r1, [pc, #20]	; (8002b74 <myprintf+0x40>)
 8002b60:	4805      	ldr	r0, [pc, #20]	; (8002b78 <myprintf+0x44>)
 8002b62:	f008 fab8 	bl	800b0d6 <HAL_UART_Transmit>

}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b70:	b004      	add	sp, #16
 8002b72:	4770      	bx	lr
 8002b74:	2000027c 	.word	0x2000027c
 8002b78:	20005234 	.word	0x20005234

08002b7c <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08a      	sub	sp, #40	; 0x28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 8002b88:	2201      	movs	r2, #1
 8002b8a:	4932      	ldr	r1, [pc, #200]	; (8002c54 <sd_init_dynamic_filename+0xd8>)
 8002b8c:	4832      	ldr	r0, [pc, #200]	; (8002c58 <sd_init_dynamic_filename+0xdc>)
 8002b8e:	f00c fd09 	bl	800f5a4 <f_mount>
 8002b92:	4603      	mov	r3, r0
 8002b94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 8002b98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 8002ba0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	482d      	ldr	r0, [pc, #180]	; (8002c5c <sd_init_dynamic_filename+0xe0>)
 8002ba8:	f7ff ffc4 	bl	8002b34 <myprintf>
		return fres;
 8002bac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bb0:	e04b      	b.n	8002c4a <sd_init_dynamic_filename+0xce>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 8002bb6:	f107 0320 	add.w	r3, r7, #32
 8002bba:	461a      	mov	r2, r3
 8002bbc:	68f9      	ldr	r1, [r7, #12]
 8002bbe:	4825      	ldr	r0, [pc, #148]	; (8002c54 <sd_init_dynamic_filename+0xd8>)
 8002bc0:	f000 f884 	bl	8002ccc <scan_files>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "fc%06lu.txt", max_used_value + 1);
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	f107 0310 	add.w	r3, r7, #16
 8002bd2:	4923      	ldr	r1, [pc, #140]	; (8002c60 <sd_init_dynamic_filename+0xe4>)
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f011 f885 	bl	8013ce4 <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 8002bda:	f107 0310 	add.w	r3, r7, #16
 8002bde:	4619      	mov	r1, r3
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f011 f910 	bl	8013e06 <strcpy>
 8002be6:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8002be8:	f107 0310 	add.w	r3, r7, #16
 8002bec:	221a      	movs	r2, #26
 8002bee:	4619      	mov	r1, r3
 8002bf0:	481c      	ldr	r0, [pc, #112]	; (8002c64 <sd_init_dynamic_filename+0xe8>)
 8002bf2:	f00c fd3b 	bl	800f66c <f_open>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 8002bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d11a      	bne.n	8002c3a <sd_init_dynamic_filename+0xbe>
		myprintf("I was able to open filename.txt for writing\r\n");
 8002c04:	4818      	ldr	r0, [pc, #96]	; (8002c68 <sd_init_dynamic_filename+0xec>)
 8002c06:	f7ff ff95 	bl	8002b34 <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8002c0a:	4b16      	ldr	r3, [pc, #88]	; (8002c64 <sd_init_dynamic_filename+0xe8>)
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4814      	ldr	r0, [pc, #80]	; (8002c64 <sd_init_dynamic_filename+0xe8>)
 8002c12:	f00d f94c 	bl	800feae <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 8002c16:	4915      	ldr	r1, [pc, #84]	; (8002c6c <sd_init_dynamic_filename+0xf0>)
 8002c18:	4815      	ldr	r0, [pc, #84]	; (8002c70 <sd_init_dynamic_filename+0xf4>)
 8002c1a:	f011 f863 	bl	8013ce4 <siprintf>
	sd_write(&fil, msg_buffer);
 8002c1e:	4914      	ldr	r1, [pc, #80]	; (8002c70 <sd_init_dynamic_filename+0xf4>)
 8002c20:	4810      	ldr	r0, [pc, #64]	; (8002c64 <sd_init_dynamic_filename+0xe8>)
 8002c22:	f000 f829 	bl	8002c78 <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 8002c26:	68b9      	ldr	r1, [r7, #8]
 8002c28:	480e      	ldr	r0, [pc, #56]	; (8002c64 <sd_init_dynamic_filename+0xe8>)
 8002c2a:	f000 f825 	bl	8002c78 <sd_write>
	f_close(&fil);
 8002c2e:	480d      	ldr	r0, [pc, #52]	; (8002c64 <sd_init_dynamic_filename+0xe8>)
 8002c30:	f00d f90e 	bl	800fe50 <f_close>

	return fres;
 8002c34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c38:	e007      	b.n	8002c4a <sd_init_dynamic_filename+0xce>
		myprintf("f_open error (%i)\r\n", fres);
 8002c3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c3e:	4619      	mov	r1, r3
 8002c40:	480c      	ldr	r0, [pc, #48]	; (8002c74 <sd_init_dynamic_filename+0xf8>)
 8002c42:	f7ff ff77 	bl	8002b34 <myprintf>
		return fres;
 8002c46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3728      	adds	r7, #40	; 0x28
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	0801813c 	.word	0x0801813c
 8002c58:	200052d0 	.word	0x200052d0
 8002c5c:	08018140 	.word	0x08018140
 8002c60:	080181bc 	.word	0x080181bc
 8002c64:	20005cd8 	.word	0x20005cd8
 8002c68:	08018158 	.word	0x08018158
 8002c6c:	0801819c 	.word	0x0801819c
 8002c70:	20005504 	.word	0x20005504
 8002c74:	08018188 	.word	0x08018188

08002c78 <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 8002c82:	6838      	ldr	r0, [r7, #0]
 8002c84:	f7fd fab4 	bl	80001f0 <strlen>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	f107 0308 	add.w	r3, r7, #8
 8002c8e:	6839      	ldr	r1, [r7, #0]
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f00c feb0 	bl	800f9f6 <f_write>
 8002c96:	4603      	mov	r3, r0
 8002c98:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d107      	bne.n	8002cb0 <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4807      	ldr	r0, [pc, #28]	; (8002cc4 <sd_write+0x4c>)
 8002ca6:	f7ff ff45 	bl	8002b34 <myprintf>
		return bytesWrote;
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	b25b      	sxtb	r3, r3
 8002cae:	e004      	b.n	8002cba <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 8002cb0:	4805      	ldr	r0, [pc, #20]	; (8002cc8 <sd_write+0x50>)
 8002cb2:	f7ff ff3f 	bl	8002b34 <myprintf>
		return -1;
 8002cb6:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	080181c8 	.word	0x080181c8
 8002cc8:	080181ec 	.word	0x080181ec

08002ccc <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 8002ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cce:	b099      	sub	sp, #100	; 0x64
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	466b      	mov	r3, sp
 8002cda:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 8002cdc:	68b8      	ldr	r0, [r7, #8]
 8002cde:	f7fd fa87 	bl	80001f0 <strlen>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 8002ce8:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8002cec:	4623      	mov	r3, r4
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	65bb      	str	r3, [r7, #88]	; 0x58
 8002cf2:	b2e0      	uxtb	r0, r4
 8002cf4:	f04f 0100 	mov.w	r1, #0
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	00cb      	lsls	r3, r1, #3
 8002d02:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002d06:	00c2      	lsls	r2, r0, #3
 8002d08:	b2e0      	uxtb	r0, r4
 8002d0a:	f04f 0100 	mov.w	r1, #0
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	00cb      	lsls	r3, r1, #3
 8002d18:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002d1c:	00c2      	lsls	r2, r0, #3
 8002d1e:	4623      	mov	r3, r4
 8002d20:	3307      	adds	r3, #7
 8002d22:	08db      	lsrs	r3, r3, #3
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	ebad 0d03 	sub.w	sp, sp, r3
 8002d2a:	466b      	mov	r3, sp
 8002d2c:	3300      	adds	r3, #0
 8002d2e:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 8002d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d32:	4619      	mov	r1, r3
 8002d34:	68b8      	ldr	r0, [r7, #8]
 8002d36:	f000 f8ff 	bl	8002f38 <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 8002d44:	f107 0318 	add.w	r3, r7, #24
 8002d48:	68f9      	ldr	r1, [r7, #12]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f00d fb02 	bl	8010354 <f_opendir>
 8002d50:	4603      	mov	r3, r0
 8002d52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 8002d56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d16c      	bne.n	8002e38 <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8002d5e:	f107 0318 	add.w	r3, r7, #24
 8002d62:	4939      	ldr	r1, [pc, #228]	; (8002e48 <scan_files+0x17c>)
 8002d64:	4618      	mov	r0, r3
 8002d66:	f00d fb99 	bl	801049c <f_readdir>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8002d70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d15a      	bne.n	8002e2e <scan_files+0x162>
 8002d78:	4b33      	ldr	r3, [pc, #204]	; (8002e48 <scan_files+0x17c>)
 8002d7a:	7a5b      	ldrb	r3, [r3, #9]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d056      	beq.n	8002e2e <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8002d80:	4b31      	ldr	r3, [pc, #196]	; (8002e48 <scan_files+0x17c>)
 8002d82:	7a1b      	ldrb	r3, [r3, #8]
 8002d84:	f003 0310 	and.w	r3, r3, #16
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d14e      	bne.n	8002e2a <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 8002d8c:	466b      	mov	r3, sp
 8002d8e:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 8002d90:	482e      	ldr	r0, [pc, #184]	; (8002e4c <scan_files+0x180>)
 8002d92:	f7fd fa2d 	bl	80001f0 <strlen>
 8002d96:	4604      	mov	r4, r0
 8002d98:	4623      	mov	r3, r4
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	653b      	str	r3, [r7, #80]	; 0x50
 8002d9e:	4620      	mov	r0, r4
 8002da0:	f04f 0100 	mov.w	r1, #0
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	f04f 0300 	mov.w	r3, #0
 8002dac:	00cb      	lsls	r3, r1, #3
 8002dae:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002db2:	00c2      	lsls	r2, r0, #3
 8002db4:	4620      	mov	r0, r4
 8002db6:	f04f 0100 	mov.w	r1, #0
 8002dba:	f04f 0200 	mov.w	r2, #0
 8002dbe:	f04f 0300 	mov.w	r3, #0
 8002dc2:	00cb      	lsls	r3, r1, #3
 8002dc4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002dc8:	00c2      	lsls	r2, r0, #3
 8002dca:	1de3      	adds	r3, r4, #7
 8002dcc:	08db      	lsrs	r3, r3, #3
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	ebad 0d03 	sub.w	sp, sp, r3
 8002dd4:	466b      	mov	r3, sp
 8002dd6:	3300      	adds	r3, #0
 8002dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 8002dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ddc:	4619      	mov	r1, r3
 8002dde:	481b      	ldr	r0, [pc, #108]	; (8002e4c <scan_files+0x180>)
 8002de0:	f000 f8aa 	bl	8002f38 <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 8002de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002de6:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8002dea:	4619      	mov	r1, r3
 8002dec:	4817      	ldr	r0, [pc, #92]	; (8002e4c <scan_files+0x180>)
 8002dee:	f011 f812 	bl	8013e16 <strncmp>
 8002df2:	4603      	mov	r3, r0
 8002df4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 8002df8:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d112      	bne.n	8002e26 <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 8002e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e02:	f107 0214 	add.w	r2, r7, #20
 8002e06:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 f820 	bl	8002e50 <extract_filename_suffix>
 8002e10:	4603      	mov	r3, r0
 8002e12:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d202      	bcs.n	8002e26 <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	46b5      	mov	sp, r6
 8002e28:	e799      	b.n	8002d5e <scan_files+0x92>
            	continue; // don't enter directory
 8002e2a:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8002e2c:	e797      	b.n	8002d5e <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 8002e2e:	f107 0318 	add.w	r3, r7, #24
 8002e32:	4618      	mov	r0, r3
 8002e34:	f00d fb07 	bl	8010446 <f_closedir>
    }

    return res;
 8002e38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002e3c:	46ad      	mov	sp, r5
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3764      	adds	r7, #100	; 0x64
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e46:	bf00      	nop
 8002e48:	2000037c 	.word	0x2000037c
 8002e4c:	20000385 	.word	0x20000385

08002e50 <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 8002e50:	b5b0      	push	{r4, r5, r7, lr}
 8002e52:	b088      	sub	sp, #32
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	607a      	str	r2, [r7, #4]
 8002e5c:	72fb      	strb	r3, [r7, #11]
 8002e5e:	466b      	mov	r3, sp
 8002e60:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f7fd f9c4 	bl	80001f0 <strlen>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 8002e6c:	2308      	movs	r3, #8
 8002e6e:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 8002e70:	7f7c      	ldrb	r4, [r7, #29]
 8002e72:	4623      	mov	r3, r4
 8002e74:	3b01      	subs	r3, #1
 8002e76:	61bb      	str	r3, [r7, #24]
 8002e78:	b2e0      	uxtb	r0, r4
 8002e7a:	f04f 0100 	mov.w	r1, #0
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	00cb      	lsls	r3, r1, #3
 8002e88:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002e8c:	00c2      	lsls	r2, r0, #3
 8002e8e:	b2e0      	uxtb	r0, r4
 8002e90:	f04f 0100 	mov.w	r1, #0
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	00cb      	lsls	r3, r1, #3
 8002e9e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002ea2:	00c2      	lsls	r2, r0, #3
 8002ea4:	4623      	mov	r3, r4
 8002ea6:	3307      	adds	r3, #7
 8002ea8:	08db      	lsrs	r3, r3, #3
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	ebad 0d03 	sub.w	sp, sp, r3
 8002eb0:	466b      	mov	r3, sp
 8002eb2:	3300      	adds	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	77fb      	strb	r3, [r7, #31]
 8002eba:	e014      	b.n	8002ee6 <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 8002ebc:	7afb      	ldrb	r3, [r7, #11]
 8002ebe:	1e5a      	subs	r2, r3, #1
 8002ec0:	7ffb      	ldrb	r3, [r7, #31]
 8002ec2:	441a      	add	r2, r3
 8002ec4:	7fbb      	ldrb	r3, [r7, #30]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	da11      	bge.n	8002ef0 <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 8002ecc:	7afa      	ldrb	r2, [r7, #11]
 8002ece:	7ffb      	ldrb	r3, [r7, #31]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	441a      	add	r2, r3
 8002ed8:	7ffb      	ldrb	r3, [r7, #31]
 8002eda:	7811      	ldrb	r1, [r2, #0]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 8002ee0:	7ffb      	ldrb	r3, [r7, #31]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	77fb      	strb	r3, [r7, #31]
 8002ee6:	7ffa      	ldrb	r2, [r7, #31]
 8002ee8:	7f7b      	ldrb	r3, [r7, #29]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d3e6      	bcc.n	8002ebc <extract_filename_suffix+0x6c>
 8002eee:	e000      	b.n	8002ef2 <extract_filename_suffix+0xa2>
		}
		else break;
 8002ef0:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f107 0110 	add.w	r1, r7, #16
 8002ef8:	220a      	movs	r2, #10
 8002efa:	4618      	mov	r0, r3
 8002efc:	f011 fe52 	bl	8014ba4 <strtol>
 8002f00:	4603      	mov	r3, r0
 8002f02:	461a      	mov	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d00a      	beq.n	8002f26 <extract_filename_suffix+0xd6>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f18:	d005      	beq.n	8002f26 <extract_filename_suffix+0xd6>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d101      	bne.n	8002f2a <extract_filename_suffix+0xda>
	{
		return 1;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <extract_filename_suffix+0xdc>
	}

	return 0;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	46ad      	mov	sp, r5
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3720      	adds	r7, #32
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002f38 <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 8002f38:	b590      	push	{r4, r7, lr}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8002f42:	2300      	movs	r3, #0
 8002f44:	73fb      	strb	r3, [r7, #15]
 8002f46:	e019      	b.n	8002f7c <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	73bb      	strb	r3, [r7, #14]
 8002f52:	7bbb      	ldrb	r3, [r7, #14]
 8002f54:	3301      	adds	r3, #1
 8002f56:	4a0f      	ldr	r2, [pc, #60]	; (8002f94 <str2upper+0x5c>)
 8002f58:	4413      	add	r3, r2
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	f003 0303 	and.w	r3, r3, #3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d102      	bne.n	8002f6a <str2upper+0x32>
 8002f64:	7bbb      	ldrb	r3, [r7, #14]
 8002f66:	3b20      	subs	r3, #32
 8002f68:	e000      	b.n	8002f6c <str2upper+0x34>
 8002f6a:	7bbb      	ldrb	r3, [r7, #14]
 8002f6c:	7bfa      	ldrb	r2, [r7, #15]
 8002f6e:	6839      	ldr	r1, [r7, #0]
 8002f70:	440a      	add	r2, r1
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
 8002f7c:	7bfc      	ldrb	r4, [r7, #15]
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fd f936 	bl	80001f0 <strlen>
 8002f84:	4603      	mov	r3, r0
 8002f86:	429c      	cmp	r4, r3
 8002f88:	d3de      	bcc.n	8002f48 <str2upper+0x10>
	}
}
 8002f8a:	bf00      	nop
 8002f8c:	bf00      	nop
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd90      	pop	{r4, r7, pc}
 8002f94:	08018d60 	.word	0x08018d60

08002f98 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af02      	add	r7, sp, #8
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8002fa2:	f107 020f 	add.w	r2, r7, #15
 8002fa6:	1df9      	adds	r1, r7, #7
 8002fa8:	2364      	movs	r3, #100	; 0x64
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	2301      	movs	r3, #1
 8002fae:	4804      	ldr	r0, [pc, #16]	; (8002fc0 <W25qxx_Spi+0x28>)
 8002fb0:	f006 fe24 	bl	8009bfc <HAL_SPI_TransmitReceive>
	return ret;
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	200050b0 	.word	0x200050b0

08002fc4 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60bb      	str	r3, [r7, #8]
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	607b      	str	r3, [r7, #4]
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2140      	movs	r1, #64	; 0x40
 8002fde:	4813      	ldr	r0, [pc, #76]	; (800302c <W25qxx_ReadID+0x68>)
 8002fe0:	f002 ff92 	bl	8005f08 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8002fe4:	209f      	movs	r0, #159	; 0x9f
 8002fe6:	f7ff ffd7 	bl	8002f98 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002fea:	20a5      	movs	r0, #165	; 0xa5
 8002fec:	f7ff ffd4 	bl	8002f98 <W25qxx_Spi>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002ff4:	20a5      	movs	r0, #165	; 0xa5
 8002ff6:	f7ff ffcf 	bl	8002f98 <W25qxx_Spi>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002ffe:	20a5      	movs	r0, #165	; 0xa5
 8003000:	f7ff ffca 	bl	8002f98 <W25qxx_Spi>
 8003004:	4603      	mov	r3, r0
 8003006:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003008:	2201      	movs	r2, #1
 800300a:	2140      	movs	r1, #64	; 0x40
 800300c:	4807      	ldr	r0, [pc, #28]	; (800302c <W25qxx_ReadID+0x68>)
 800300e:	f002 ff7b 	bl	8005f08 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	041a      	lsls	r2, r3, #16
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	021b      	lsls	r3, r3, #8
 800301a:	4313      	orrs	r3, r2
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	4313      	orrs	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]
	return Temp;
 8003022:	68fb      	ldr	r3, [r7, #12]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40020c00 	.word	0x40020c00

08003030 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8003030:	b590      	push	{r4, r7, lr}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003036:	2200      	movs	r2, #0
 8003038:	2140      	movs	r1, #64	; 0x40
 800303a:	4816      	ldr	r0, [pc, #88]	; (8003094 <W25qxx_ReadUniqID+0x64>)
 800303c:	f002 ff64 	bl	8005f08 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8003040:	204b      	movs	r0, #75	; 0x4b
 8003042:	f7ff ffa9 	bl	8002f98 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003046:	2300      	movs	r3, #0
 8003048:	71fb      	strb	r3, [r7, #7]
 800304a:	e005      	b.n	8003058 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800304c:	20a5      	movs	r0, #165	; 0xa5
 800304e:	f7ff ffa3 	bl	8002f98 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003052:	79fb      	ldrb	r3, [r7, #7]
 8003054:	3301      	adds	r3, #1
 8003056:	71fb      	strb	r3, [r7, #7]
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	2b03      	cmp	r3, #3
 800305c:	d9f6      	bls.n	800304c <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 800305e:	2300      	movs	r3, #0
 8003060:	71bb      	strb	r3, [r7, #6]
 8003062:	e00b      	b.n	800307c <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003064:	79bc      	ldrb	r4, [r7, #6]
 8003066:	20a5      	movs	r0, #165	; 0xa5
 8003068:	f7ff ff96 	bl	8002f98 <W25qxx_Spi>
 800306c:	4603      	mov	r3, r0
 800306e:	461a      	mov	r2, r3
 8003070:	4b09      	ldr	r3, [pc, #36]	; (8003098 <W25qxx_ReadUniqID+0x68>)
 8003072:	4423      	add	r3, r4
 8003074:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8003076:	79bb      	ldrb	r3, [r7, #6]
 8003078:	3301      	adds	r3, #1
 800307a:	71bb      	strb	r3, [r7, #6]
 800307c:	79bb      	ldrb	r3, [r7, #6]
 800307e:	2b07      	cmp	r3, #7
 8003080:	d9f0      	bls.n	8003064 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003082:	2201      	movs	r2, #1
 8003084:	2140      	movs	r1, #64	; 0x40
 8003086:	4803      	ldr	r0, [pc, #12]	; (8003094 <W25qxx_ReadUniqID+0x64>)
 8003088:	f002 ff3e 	bl	8005f08 <HAL_GPIO_WritePin>
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	bd90      	pop	{r4, r7, pc}
 8003094:	40020c00 	.word	0x40020c00
 8003098:	20005f08 	.word	0x20005f08

0800309c <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80030a0:	2200      	movs	r2, #0
 80030a2:	2140      	movs	r1, #64	; 0x40
 80030a4:	4807      	ldr	r0, [pc, #28]	; (80030c4 <W25qxx_WriteEnable+0x28>)
 80030a6:	f002 ff2f 	bl	8005f08 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 80030aa:	2006      	movs	r0, #6
 80030ac:	f7ff ff74 	bl	8002f98 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80030b0:	2201      	movs	r2, #1
 80030b2:	2140      	movs	r1, #64	; 0x40
 80030b4:	4803      	ldr	r0, [pc, #12]	; (80030c4 <W25qxx_WriteEnable+0x28>)
 80030b6:	f002 ff27 	bl	8005f08 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 80030ba:	2001      	movs	r0, #1
 80030bc:	f00d fae4 	bl	8010688 <osDelay>
}
 80030c0:	bf00      	nop
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40020c00 	.word	0x40020c00

080030c8 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 80030d2:	2300      	movs	r3, #0
 80030d4:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80030d6:	2200      	movs	r2, #0
 80030d8:	2140      	movs	r1, #64	; 0x40
 80030da:	481c      	ldr	r0, [pc, #112]	; (800314c <W25qxx_ReadStatusRegister+0x84>)
 80030dc:	f002 ff14 	bl	8005f08 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 80030e0:	79fb      	ldrb	r3, [r7, #7]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d10c      	bne.n	8003100 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 80030e6:	2005      	movs	r0, #5
 80030e8:	f7ff ff56 	bl	8002f98 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80030ec:	20a5      	movs	r0, #165	; 0xa5
 80030ee:	f7ff ff53 	bl	8002f98 <W25qxx_Spi>
 80030f2:	4603      	mov	r3, r0
 80030f4:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 80030f6:	4a16      	ldr	r2, [pc, #88]	; (8003150 <W25qxx_ReadStatusRegister+0x88>)
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80030fe:	e01b      	b.n	8003138 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8003100:	79fb      	ldrb	r3, [r7, #7]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d10c      	bne.n	8003120 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8003106:	2035      	movs	r0, #53	; 0x35
 8003108:	f7ff ff46 	bl	8002f98 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800310c:	20a5      	movs	r0, #165	; 0xa5
 800310e:	f7ff ff43 	bl	8002f98 <W25qxx_Spi>
 8003112:	4603      	mov	r3, r0
 8003114:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8003116:	4a0e      	ldr	r2, [pc, #56]	; (8003150 <W25qxx_ReadStatusRegister+0x88>)
 8003118:	7bfb      	ldrb	r3, [r7, #15]
 800311a:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 800311e:	e00b      	b.n	8003138 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8003120:	2015      	movs	r0, #21
 8003122:	f7ff ff39 	bl	8002f98 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003126:	20a5      	movs	r0, #165	; 0xa5
 8003128:	f7ff ff36 	bl	8002f98 <W25qxx_Spi>
 800312c:	4603      	mov	r3, r0
 800312e:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8003130:	4a07      	ldr	r2, [pc, #28]	; (8003150 <W25qxx_ReadStatusRegister+0x88>)
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003138:	2201      	movs	r2, #1
 800313a:	2140      	movs	r1, #64	; 0x40
 800313c:	4803      	ldr	r0, [pc, #12]	; (800314c <W25qxx_ReadStatusRegister+0x84>)
 800313e:	f002 fee3 	bl	8005f08 <HAL_GPIO_WritePin>
	return status;
 8003142:	7bfb      	ldrb	r3, [r7, #15]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40020c00 	.word	0x40020c00
 8003150:	20005f08 	.word	0x20005f08

08003154 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8003158:	2001      	movs	r0, #1
 800315a:	f00d fa95 	bl	8010688 <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800315e:	2200      	movs	r2, #0
 8003160:	2140      	movs	r1, #64	; 0x40
 8003162:	480f      	ldr	r0, [pc, #60]	; (80031a0 <W25qxx_WaitForWriteEnd+0x4c>)
 8003164:	f002 fed0 	bl	8005f08 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8003168:	2005      	movs	r0, #5
 800316a:	f7ff ff15 	bl	8002f98 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800316e:	20a5      	movs	r0, #165	; 0xa5
 8003170:	f7ff ff12 	bl	8002f98 <W25qxx_Spi>
 8003174:	4603      	mov	r3, r0
 8003176:	461a      	mov	r2, r3
 8003178:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <W25qxx_WaitForWriteEnd+0x50>)
 800317a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 800317e:	2001      	movs	r0, #1
 8003180:	f00d fa82 	bl	8010688 <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8003184:	4b07      	ldr	r3, [pc, #28]	; (80031a4 <W25qxx_WaitForWriteEnd+0x50>)
 8003186:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1ed      	bne.n	800316e <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003192:	2201      	movs	r2, #1
 8003194:	2140      	movs	r1, #64	; 0x40
 8003196:	4802      	ldr	r0, [pc, #8]	; (80031a0 <W25qxx_WaitForWriteEnd+0x4c>)
 8003198:	f002 feb6 	bl	8005f08 <HAL_GPIO_WritePin>
}
 800319c:	bf00      	nop
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40020c00 	.word	0x40020c00
 80031a4:	20005f08 	.word	0x20005f08

080031a8 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 80031ae:	4b90      	ldr	r3, [pc, #576]	; (80033f0 <W25qxx_Init+0x248>)
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 80031b6:	e002      	b.n	80031be <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 80031b8:	2001      	movs	r0, #1
 80031ba:	f00d fa65 	bl	8010688 <osDelay>
	while (HAL_GetTick() < 100)
 80031be:	f002 f973 	bl	80054a8 <HAL_GetTick>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b63      	cmp	r3, #99	; 0x63
 80031c6:	d9f7      	bls.n	80031b8 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80031c8:	2201      	movs	r2, #1
 80031ca:	2140      	movs	r1, #64	; 0x40
 80031cc:	4889      	ldr	r0, [pc, #548]	; (80033f4 <W25qxx_Init+0x24c>)
 80031ce:	f002 fe9b 	bl	8005f08 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 80031d2:	2064      	movs	r0, #100	; 0x64
 80031d4:	f00d fa58 	bl	8010688 <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 80031d8:	4887      	ldr	r0, [pc, #540]	; (80033f8 <W25qxx_Init+0x250>)
 80031da:	f010 fd65 	bl	8013ca8 <puts>
#endif
	id = W25qxx_ReadID();
 80031de:	f7ff fef1 	bl	8002fc4 <W25qxx_ReadID>
 80031e2:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	4885      	ldr	r0, [pc, #532]	; (80033fc <W25qxx_Init+0x254>)
 80031e8:	f010 fcd8 	bl	8013b9c <iprintf>
#endif
	switch (id & 0x000000FF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	3b11      	subs	r3, #17
 80031f2:	2b0f      	cmp	r3, #15
 80031f4:	f200 808b 	bhi.w	800330e <W25qxx_Init+0x166>
 80031f8:	a201      	add	r2, pc, #4	; (adr r2, 8003200 <W25qxx_Init+0x58>)
 80031fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fe:	bf00      	nop
 8003200:	080032fb 	.word	0x080032fb
 8003204:	080032e7 	.word	0x080032e7
 8003208:	080032d3 	.word	0x080032d3
 800320c:	080032bf 	.word	0x080032bf
 8003210:	080032ab 	.word	0x080032ab
 8003214:	08003297 	.word	0x08003297
 8003218:	08003283 	.word	0x08003283
 800321c:	0800326d 	.word	0x0800326d
 8003220:	08003257 	.word	0x08003257
 8003224:	0800330f 	.word	0x0800330f
 8003228:	0800330f 	.word	0x0800330f
 800322c:	0800330f 	.word	0x0800330f
 8003230:	0800330f 	.word	0x0800330f
 8003234:	0800330f 	.word	0x0800330f
 8003238:	0800330f 	.word	0x0800330f
 800323c:	08003241 	.word	0x08003241
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8003240:	4b6b      	ldr	r3, [pc, #428]	; (80033f0 <W25qxx_Init+0x248>)
 8003242:	220a      	movs	r2, #10
 8003244:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8003246:	4b6a      	ldr	r3, [pc, #424]	; (80033f0 <W25qxx_Init+0x248>)
 8003248:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800324c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 800324e:	486c      	ldr	r0, [pc, #432]	; (8003400 <W25qxx_Init+0x258>)
 8003250:	f010 fd2a 	bl	8013ca8 <puts>
#endif
		break;
 8003254:	e064      	b.n	8003320 <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8003256:	4b66      	ldr	r3, [pc, #408]	; (80033f0 <W25qxx_Init+0x248>)
 8003258:	2209      	movs	r2, #9
 800325a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 800325c:	4b64      	ldr	r3, [pc, #400]	; (80033f0 <W25qxx_Init+0x248>)
 800325e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003262:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 8003264:	4867      	ldr	r0, [pc, #412]	; (8003404 <W25qxx_Init+0x25c>)
 8003266:	f010 fd1f 	bl	8013ca8 <puts>
#endif
		break;
 800326a:	e059      	b.n	8003320 <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 800326c:	4b60      	ldr	r3, [pc, #384]	; (80033f0 <W25qxx_Init+0x248>)
 800326e:	2208      	movs	r2, #8
 8003270:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8003272:	4b5f      	ldr	r3, [pc, #380]	; (80033f0 <W25qxx_Init+0x248>)
 8003274:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003278:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 800327a:	4863      	ldr	r0, [pc, #396]	; (8003408 <W25qxx_Init+0x260>)
 800327c:	f010 fd14 	bl	8013ca8 <puts>
#endif
		break;
 8003280:	e04e      	b.n	8003320 <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8003282:	4b5b      	ldr	r3, [pc, #364]	; (80033f0 <W25qxx_Init+0x248>)
 8003284:	2207      	movs	r2, #7
 8003286:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8003288:	4b59      	ldr	r3, [pc, #356]	; (80033f0 <W25qxx_Init+0x248>)
 800328a:	2280      	movs	r2, #128	; 0x80
 800328c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 800328e:	485f      	ldr	r0, [pc, #380]	; (800340c <W25qxx_Init+0x264>)
 8003290:	f010 fd0a 	bl	8013ca8 <puts>
#endif
		break;
 8003294:	e044      	b.n	8003320 <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8003296:	4b56      	ldr	r3, [pc, #344]	; (80033f0 <W25qxx_Init+0x248>)
 8003298:	2206      	movs	r2, #6
 800329a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 800329c:	4b54      	ldr	r3, [pc, #336]	; (80033f0 <W25qxx_Init+0x248>)
 800329e:	2240      	movs	r2, #64	; 0x40
 80032a0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 80032a2:	485b      	ldr	r0, [pc, #364]	; (8003410 <W25qxx_Init+0x268>)
 80032a4:	f010 fd00 	bl	8013ca8 <puts>
#endif
		break;
 80032a8:	e03a      	b.n	8003320 <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 80032aa:	4b51      	ldr	r3, [pc, #324]	; (80033f0 <W25qxx_Init+0x248>)
 80032ac:	2205      	movs	r2, #5
 80032ae:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 80032b0:	4b4f      	ldr	r3, [pc, #316]	; (80033f0 <W25qxx_Init+0x248>)
 80032b2:	2220      	movs	r2, #32
 80032b4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 80032b6:	4857      	ldr	r0, [pc, #348]	; (8003414 <W25qxx_Init+0x26c>)
 80032b8:	f010 fcf6 	bl	8013ca8 <puts>
#endif
		break;
 80032bc:	e030      	b.n	8003320 <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 80032be:	4b4c      	ldr	r3, [pc, #304]	; (80033f0 <W25qxx_Init+0x248>)
 80032c0:	2204      	movs	r2, #4
 80032c2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 80032c4:	4b4a      	ldr	r3, [pc, #296]	; (80033f0 <W25qxx_Init+0x248>)
 80032c6:	2210      	movs	r2, #16
 80032c8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 80032ca:	4853      	ldr	r0, [pc, #332]	; (8003418 <W25qxx_Init+0x270>)
 80032cc:	f010 fcec 	bl	8013ca8 <puts>
#endif
		break;
 80032d0:	e026      	b.n	8003320 <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 80032d2:	4b47      	ldr	r3, [pc, #284]	; (80033f0 <W25qxx_Init+0x248>)
 80032d4:	2203      	movs	r2, #3
 80032d6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 80032d8:	4b45      	ldr	r3, [pc, #276]	; (80033f0 <W25qxx_Init+0x248>)
 80032da:	2208      	movs	r2, #8
 80032dc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 80032de:	484f      	ldr	r0, [pc, #316]	; (800341c <W25qxx_Init+0x274>)
 80032e0:	f010 fce2 	bl	8013ca8 <puts>
#endif
		break;
 80032e4:	e01c      	b.n	8003320 <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 80032e6:	4b42      	ldr	r3, [pc, #264]	; (80033f0 <W25qxx_Init+0x248>)
 80032e8:	2202      	movs	r2, #2
 80032ea:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 80032ec:	4b40      	ldr	r3, [pc, #256]	; (80033f0 <W25qxx_Init+0x248>)
 80032ee:	2204      	movs	r2, #4
 80032f0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 80032f2:	484b      	ldr	r0, [pc, #300]	; (8003420 <W25qxx_Init+0x278>)
 80032f4:	f010 fcd8 	bl	8013ca8 <puts>
#endif
		break;
 80032f8:	e012      	b.n	8003320 <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 80032fa:	4b3d      	ldr	r3, [pc, #244]	; (80033f0 <W25qxx_Init+0x248>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8003300:	4b3b      	ldr	r3, [pc, #236]	; (80033f0 <W25qxx_Init+0x248>)
 8003302:	2202      	movs	r2, #2
 8003304:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 8003306:	4847      	ldr	r0, [pc, #284]	; (8003424 <W25qxx_Init+0x27c>)
 8003308:	f010 fcce 	bl	8013ca8 <puts>
#endif
		break;
 800330c:	e008      	b.n	8003320 <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 800330e:	4846      	ldr	r0, [pc, #280]	; (8003428 <W25qxx_Init+0x280>)
 8003310:	f010 fcca 	bl	8013ca8 <puts>
#endif
		w25qxx.Lock = 0;
 8003314:	4b36      	ldr	r3, [pc, #216]	; (80033f0 <W25qxx_Init+0x248>)
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 800331c:	2300      	movs	r3, #0
 800331e:	e063      	b.n	80033e8 <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 8003320:	4b33      	ldr	r3, [pc, #204]	; (80033f0 <W25qxx_Init+0x248>)
 8003322:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003326:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8003328:	4b31      	ldr	r3, [pc, #196]	; (80033f0 <W25qxx_Init+0x248>)
 800332a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800332e:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8003330:	4b2f      	ldr	r3, [pc, #188]	; (80033f0 <W25qxx_Init+0x248>)
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	4a2e      	ldr	r2, [pc, #184]	; (80033f0 <W25qxx_Init+0x248>)
 8003338:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 800333a:	4b2d      	ldr	r3, [pc, #180]	; (80033f0 <W25qxx_Init+0x248>)
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	4a2c      	ldr	r2, [pc, #176]	; (80033f0 <W25qxx_Init+0x248>)
 8003340:	6912      	ldr	r2, [r2, #16]
 8003342:	fb02 f303 	mul.w	r3, r2, r3
 8003346:	4a2a      	ldr	r2, [pc, #168]	; (80033f0 <W25qxx_Init+0x248>)
 8003348:	8952      	ldrh	r2, [r2, #10]
 800334a:	fbb3 f3f2 	udiv	r3, r3, r2
 800334e:	4a28      	ldr	r2, [pc, #160]	; (80033f0 <W25qxx_Init+0x248>)
 8003350:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8003352:	4b27      	ldr	r3, [pc, #156]	; (80033f0 <W25qxx_Init+0x248>)
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	011b      	lsls	r3, r3, #4
 8003358:	4a25      	ldr	r2, [pc, #148]	; (80033f0 <W25qxx_Init+0x248>)
 800335a:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 800335c:	4b24      	ldr	r3, [pc, #144]	; (80033f0 <W25qxx_Init+0x248>)
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	4a23      	ldr	r2, [pc, #140]	; (80033f0 <W25qxx_Init+0x248>)
 8003362:	6912      	ldr	r2, [r2, #16]
 8003364:	fb02 f303 	mul.w	r3, r2, r3
 8003368:	0a9b      	lsrs	r3, r3, #10
 800336a:	4a21      	ldr	r2, [pc, #132]	; (80033f0 <W25qxx_Init+0x248>)
 800336c:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 800336e:	f7ff fe5f 	bl	8003030 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8003372:	2001      	movs	r0, #1
 8003374:	f7ff fea8 	bl	80030c8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8003378:	2002      	movs	r0, #2
 800337a:	f7ff fea5 	bl	80030c8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 800337e:	2003      	movs	r0, #3
 8003380:	f7ff fea2 	bl	80030c8 <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 8003384:	4b1a      	ldr	r3, [pc, #104]	; (80033f0 <W25qxx_Init+0x248>)
 8003386:	895b      	ldrh	r3, [r3, #10]
 8003388:	4619      	mov	r1, r3
 800338a:	4828      	ldr	r0, [pc, #160]	; (800342c <W25qxx_Init+0x284>)
 800338c:	f010 fc06 	bl	8013b9c <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 8003390:	4b17      	ldr	r3, [pc, #92]	; (80033f0 <W25qxx_Init+0x248>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	4619      	mov	r1, r3
 8003396:	4826      	ldr	r0, [pc, #152]	; (8003430 <W25qxx_Init+0x288>)
 8003398:	f010 fc00 	bl	8013b9c <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 800339c:	4b14      	ldr	r3, [pc, #80]	; (80033f0 <W25qxx_Init+0x248>)
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	4619      	mov	r1, r3
 80033a2:	4824      	ldr	r0, [pc, #144]	; (8003434 <W25qxx_Init+0x28c>)
 80033a4:	f010 fbfa 	bl	8013b9c <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 80033a8:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <W25qxx_Init+0x248>)
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	4619      	mov	r1, r3
 80033ae:	4822      	ldr	r0, [pc, #136]	; (8003438 <W25qxx_Init+0x290>)
 80033b0:	f010 fbf4 	bl	8013b9c <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 80033b4:	4b0e      	ldr	r3, [pc, #56]	; (80033f0 <W25qxx_Init+0x248>)
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	4619      	mov	r1, r3
 80033ba:	4820      	ldr	r0, [pc, #128]	; (800343c <W25qxx_Init+0x294>)
 80033bc:	f010 fbee 	bl	8013b9c <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <W25qxx_Init+0x248>)
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	4619      	mov	r1, r3
 80033c6:	481e      	ldr	r0, [pc, #120]	; (8003440 <W25qxx_Init+0x298>)
 80033c8:	f010 fbe8 	bl	8013b9c <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 80033cc:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <W25qxx_Init+0x248>)
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	4619      	mov	r1, r3
 80033d2:	481c      	ldr	r0, [pc, #112]	; (8003444 <W25qxx_Init+0x29c>)
 80033d4:	f010 fbe2 	bl	8013b9c <iprintf>
	printf("w25qxx Init Done\r\n");
 80033d8:	481b      	ldr	r0, [pc, #108]	; (8003448 <W25qxx_Init+0x2a0>)
 80033da:	f010 fc65 	bl	8013ca8 <puts>
#endif
	w25qxx.Lock = 0;
 80033de:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <W25qxx_Init+0x248>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 80033e6:	2301      	movs	r3, #1
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	20005f08 	.word	0x20005f08
 80033f4:	40020c00 	.word	0x40020c00
 80033f8:	08018204 	.word	0x08018204
 80033fc:	0801821c 	.word	0x0801821c
 8003400:	08018230 	.word	0x08018230
 8003404:	08018248 	.word	0x08018248
 8003408:	08018260 	.word	0x08018260
 800340c:	08018278 	.word	0x08018278
 8003410:	08018290 	.word	0x08018290
 8003414:	080182a8 	.word	0x080182a8
 8003418:	080182c0 	.word	0x080182c0
 800341c:	080182d8 	.word	0x080182d8
 8003420:	080182f0 	.word	0x080182f0
 8003424:	08018308 	.word	0x08018308
 8003428:	08018320 	.word	0x08018320
 800342c:	08018334 	.word	0x08018334
 8003430:	08018354 	.word	0x08018354
 8003434:	0801836c 	.word	0x0801836c
 8003438:	0801838c 	.word	0x0801838c
 800343c:	080183a8 	.word	0x080183a8
 8003440:	080183c8 	.word	0x080183c8
 8003444:	080183e4 	.word	0x080183e4
 8003448:	08018404 	.word	0x08018404

0800344c <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8003454:	e002      	b.n	800345c <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8003456:	2001      	movs	r0, #1
 8003458:	f00d f916 	bl	8010688 <osDelay>
	while (w25qxx.Lock == 1)
 800345c:	4b2d      	ldr	r3, [pc, #180]	; (8003514 <W25qxx_EraseSector+0xc8>)
 800345e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003462:	2b01      	cmp	r3, #1
 8003464:	d0f7      	beq.n	8003456 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8003466:	4b2b      	ldr	r3, [pc, #172]	; (8003514 <W25qxx_EraseSector+0xc8>)
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 800346e:	f002 f81b 	bl	80054a8 <HAL_GetTick>
 8003472:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	4828      	ldr	r0, [pc, #160]	; (8003518 <W25qxx_EraseSector+0xcc>)
 8003478:	f010 fb90 	bl	8013b9c <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 800347c:	f7ff fe6a 	bl	8003154 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8003480:	4b24      	ldr	r3, [pc, #144]	; (8003514 <W25qxx_EraseSector+0xc8>)
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	fb02 f303 	mul.w	r3, r2, r3
 800348a:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 800348c:	f7ff fe06 	bl	800309c <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003490:	2200      	movs	r2, #0
 8003492:	2140      	movs	r1, #64	; 0x40
 8003494:	4821      	ldr	r0, [pc, #132]	; (800351c <W25qxx_EraseSector+0xd0>)
 8003496:	f002 fd37 	bl	8005f08 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800349a:	4b1e      	ldr	r3, [pc, #120]	; (8003514 <W25qxx_EraseSector+0xc8>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d909      	bls.n	80034b6 <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 80034a2:	2021      	movs	r0, #33	; 0x21
 80034a4:	f7ff fd78 	bl	8002f98 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	0e1b      	lsrs	r3, r3, #24
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff fd72 	bl	8002f98 <W25qxx_Spi>
 80034b4:	e002      	b.n	80034bc <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 80034b6:	2020      	movs	r0, #32
 80034b8:	f7ff fd6e 	bl	8002f98 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	0c1b      	lsrs	r3, r3, #16
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff fd68 	bl	8002f98 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	0a1b      	lsrs	r3, r3, #8
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff fd62 	bl	8002f98 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff fd5d 	bl	8002f98 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80034de:	2201      	movs	r2, #1
 80034e0:	2140      	movs	r1, #64	; 0x40
 80034e2:	480e      	ldr	r0, [pc, #56]	; (800351c <W25qxx_EraseSector+0xd0>)
 80034e4:	f002 fd10 	bl	8005f08 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80034e8:	f7ff fe34 	bl	8003154 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 80034ec:	f001 ffdc 	bl	80054a8 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	4619      	mov	r1, r3
 80034f8:	4809      	ldr	r0, [pc, #36]	; (8003520 <W25qxx_EraseSector+0xd4>)
 80034fa:	f010 fb4f 	bl	8013b9c <iprintf>
#endif
	W25qxx_Delay(1);
 80034fe:	2001      	movs	r0, #1
 8003500:	f00d f8c2 	bl	8010688 <osDelay>
	w25qxx.Lock = 0;
 8003504:	4b03      	ldr	r3, [pc, #12]	; (8003514 <W25qxx_EraseSector+0xc8>)
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800350c:	bf00      	nop
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	20005f08 	.word	0x20005f08
 8003518:	0801845c 	.word	0x0801845c
 800351c:	40020c00 	.word	0x40020c00
 8003520:	08018480 	.word	0x08018480

08003524 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 800352c:	4b07      	ldr	r3, [pc, #28]	; (800354c <W25qxx_SectorToPage+0x28>)
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	fb02 f303 	mul.w	r3, r2, r3
 8003536:	4a05      	ldr	r2, [pc, #20]	; (800354c <W25qxx_SectorToPage+0x28>)
 8003538:	8952      	ldrh	r2, [r2, #10]
 800353a:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800353e:	4618      	mov	r0, r3
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	20005f08 	.word	0x20005f08

08003550 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800355e:	e002      	b.n	8003566 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8003560:	2001      	movs	r0, #1
 8003562:	f00d f891 	bl	8010688 <osDelay>
	while (w25qxx.Lock == 1)
 8003566:	4b57      	ldr	r3, [pc, #348]	; (80036c4 <W25qxx_WritePage+0x174>)
 8003568:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800356c:	2b01      	cmp	r3, #1
 800356e:	d0f7      	beq.n	8003560 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8003570:	4b54      	ldr	r3, [pc, #336]	; (80036c4 <W25qxx_WritePage+0x174>)
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4413      	add	r3, r2
 800357e:	4a51      	ldr	r2, [pc, #324]	; (80036c4 <W25qxx_WritePage+0x174>)
 8003580:	8952      	ldrh	r2, [r2, #10]
 8003582:	4293      	cmp	r3, r2
 8003584:	d802      	bhi.n	800358c <W25qxx_WritePage+0x3c>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d105      	bne.n	8003598 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800358c:	4b4d      	ldr	r3, [pc, #308]	; (80036c4 <W25qxx_WritePage+0x174>)
 800358e:	895b      	ldrh	r3, [r3, #10]
 8003590:	461a      	mov	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	4413      	add	r3, r2
 800359e:	4a49      	ldr	r2, [pc, #292]	; (80036c4 <W25qxx_WritePage+0x174>)
 80035a0:	8952      	ldrh	r2, [r2, #10]
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d905      	bls.n	80035b2 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80035a6:	4b47      	ldr	r3, [pc, #284]	; (80036c4 <W25qxx_WritePage+0x174>)
 80035a8:	895b      	ldrh	r3, [r3, #10]
 80035aa:	461a      	mov	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	68b9      	ldr	r1, [r7, #8]
 80035b8:	4843      	ldr	r0, [pc, #268]	; (80036c8 <W25qxx_WritePage+0x178>)
 80035ba:	f010 faef 	bl	8013b9c <iprintf>
	W25qxx_Delay(100);
 80035be:	2064      	movs	r0, #100	; 0x64
 80035c0:	f00d f862 	bl	8010688 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 80035c4:	f001 ff70 	bl	80054a8 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 80035ca:	f7ff fdc3 	bl	8003154 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 80035ce:	f7ff fd65 	bl	800309c <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80035d2:	2200      	movs	r2, #0
 80035d4:	2140      	movs	r1, #64	; 0x40
 80035d6:	483d      	ldr	r0, [pc, #244]	; (80036cc <W25qxx_WritePage+0x17c>)
 80035d8:	f002 fc96 	bl	8005f08 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 80035dc:	4b39      	ldr	r3, [pc, #228]	; (80036c4 <W25qxx_WritePage+0x174>)
 80035de:	895b      	ldrh	r3, [r3, #10]
 80035e0:	461a      	mov	r2, r3
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	fb03 f302 	mul.w	r3, r3, r2
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	4413      	add	r3, r2
 80035ec:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 80035ee:	4b35      	ldr	r3, [pc, #212]	; (80036c4 <W25qxx_WritePage+0x174>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d909      	bls.n	800360a <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 80035f6:	2012      	movs	r0, #18
 80035f8:	f7ff fcce 	bl	8002f98 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	0e1b      	lsrs	r3, r3, #24
 8003600:	b2db      	uxtb	r3, r3
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff fcc8 	bl	8002f98 <W25qxx_Spi>
 8003608:	e002      	b.n	8003610 <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 800360a:	2002      	movs	r0, #2
 800360c:	f7ff fcc4 	bl	8002f98 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	0c1b      	lsrs	r3, r3, #16
 8003614:	b2db      	uxtb	r3, r3
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff fcbe 	bl	8002f98 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	0a1b      	lsrs	r3, r3, #8
 8003620:	b2db      	uxtb	r3, r3
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff fcb8 	bl	8002f98 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	b2db      	uxtb	r3, r3
 800362c:	4618      	mov	r0, r3
 800362e:	f7ff fcb3 	bl	8002f98 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	b29a      	uxth	r2, r3
 8003636:	2364      	movs	r3, #100	; 0x64
 8003638:	68f9      	ldr	r1, [r7, #12]
 800363a:	4825      	ldr	r0, [pc, #148]	; (80036d0 <W25qxx_WritePage+0x180>)
 800363c:	f006 f891 	bl	8009762 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003640:	2201      	movs	r2, #1
 8003642:	2140      	movs	r1, #64	; 0x40
 8003644:	4821      	ldr	r0, [pc, #132]	; (80036cc <W25qxx_WritePage+0x17c>)
 8003646:	f002 fc5f 	bl	8005f08 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800364a:	f7ff fd83 	bl	8003154 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 800364e:	f001 ff2b 	bl	80054a8 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 800365a:	2300      	movs	r3, #0
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	e018      	b.n	8003692 <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	2b00      	cmp	r3, #0
 8003668:	d108      	bne.n	800367c <W25qxx_WritePage+0x12c>
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2b02      	cmp	r3, #2
 800366e:	d905      	bls.n	800367c <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 8003670:	4818      	ldr	r0, [pc, #96]	; (80036d4 <W25qxx_WritePage+0x184>)
 8003672:	f010 fb19 	bl	8013ca8 <puts>
			W25qxx_Delay(10);
 8003676:	200a      	movs	r0, #10
 8003678:	f00d f806 	bl	8010688 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	4413      	add	r3, r2
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	4619      	mov	r1, r3
 8003686:	4814      	ldr	r0, [pc, #80]	; (80036d8 <W25qxx_WritePage+0x188>)
 8003688:	f010 fa88 	bl	8013b9c <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	3301      	adds	r3, #1
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d3e2      	bcc.n	8003660 <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 800369a:	480e      	ldr	r0, [pc, #56]	; (80036d4 <W25qxx_WritePage+0x184>)
 800369c:	f010 fb04 	bl	8013ca8 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 80036a0:	6939      	ldr	r1, [r7, #16]
 80036a2:	480e      	ldr	r0, [pc, #56]	; (80036dc <W25qxx_WritePage+0x18c>)
 80036a4:	f010 fa7a 	bl	8013b9c <iprintf>
	W25qxx_Delay(100);
 80036a8:	2064      	movs	r0, #100	; 0x64
 80036aa:	f00c ffed 	bl	8010688 <osDelay>
#endif
	W25qxx_Delay(1);
 80036ae:	2001      	movs	r0, #1
 80036b0:	f00c ffea 	bl	8010688 <osDelay>
	w25qxx.Lock = 0;
 80036b4:	4b03      	ldr	r3, [pc, #12]	; (80036c4 <W25qxx_WritePage+0x174>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80036bc:	bf00      	nop
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	20005f08 	.word	0x20005f08
 80036c8:	080186e4 	.word	0x080186e4
 80036cc:	40020c00 	.word	0x40020c00
 80036d0:	200050b0 	.word	0x200050b0
 80036d4:	08018720 	.word	0x08018720
 80036d8:	08018724 	.word	0x08018724
 80036dc:	0801872c 	.word	0x0801872c

080036e0 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b088      	sub	sp, #32
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 80036ee:	4b36      	ldr	r3, [pc, #216]	; (80037c8 <W25qxx_WriteSector+0xe8>)
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d802      	bhi.n	80036fe <W25qxx_WriteSector+0x1e>
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d102      	bne.n	8003704 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 80036fe:	4b32      	ldr	r3, [pc, #200]	; (80037c8 <W25qxx_WriteSector+0xe8>)
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	68b9      	ldr	r1, [r7, #8]
 800370a:	4830      	ldr	r0, [pc, #192]	; (80037cc <W25qxx_WriteSector+0xec>)
 800370c:	f010 fa46 	bl	8013b9c <iprintf>
	W25qxx_Delay(100);
 8003710:	2064      	movs	r0, #100	; 0x64
 8003712:	f00c ffb9 	bl	8010688 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8003716:	4b2c      	ldr	r3, [pc, #176]	; (80037c8 <W25qxx_WriteSector+0xe8>)
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	429a      	cmp	r2, r3
 800371e:	d306      	bcc.n	800372e <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 8003720:	482b      	ldr	r0, [pc, #172]	; (80037d0 <W25qxx_WriteSector+0xf0>)
 8003722:	f010 fac1 	bl	8013ca8 <puts>
		W25qxx_Delay(100);
 8003726:	2064      	movs	r0, #100	; 0x64
 8003728:	f00c ffae 	bl	8010688 <osDelay>
#endif
		return;
 800372c:	e048      	b.n	80037c0 <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	441a      	add	r2, r3
 8003734:	4b24      	ldr	r3, [pc, #144]	; (80037c8 <W25qxx_WriteSector+0xe8>)
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	429a      	cmp	r2, r3
 800373a:	d905      	bls.n	8003748 <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 800373c:	4b22      	ldr	r3, [pc, #136]	; (80037c8 <W25qxx_WriteSector+0xe8>)
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	61bb      	str	r3, [r7, #24]
 8003746:	e001      	b.n	800374c <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 800374c:	68b8      	ldr	r0, [r7, #8]
 800374e:	f7ff fee9 	bl	8003524 <W25qxx_SectorToPage>
 8003752:	4602      	mov	r2, r0
 8003754:	4b1c      	ldr	r3, [pc, #112]	; (80037c8 <W25qxx_WriteSector+0xe8>)
 8003756:	895b      	ldrh	r3, [r3, #10]
 8003758:	4619      	mov	r1, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003760:	4413      	add	r3, r2
 8003762:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8003764:	4b18      	ldr	r3, [pc, #96]	; (80037c8 <W25qxx_WriteSector+0xe8>)
 8003766:	895b      	ldrh	r3, [r3, #10]
 8003768:	461a      	mov	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003770:	fb02 f201 	mul.w	r2, r2, r1
 8003774:	1a9b      	subs	r3, r3, r2
 8003776:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	69f9      	ldr	r1, [r7, #28]
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f7ff fee6 	bl	8003550 <W25qxx_WritePage>
		StartPage++;
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	3301      	adds	r3, #1
 8003788:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 800378a:	4b0f      	ldr	r3, [pc, #60]	; (80037c8 <W25qxx_WriteSector+0xe8>)
 800378c:	895b      	ldrh	r3, [r3, #10]
 800378e:	461a      	mov	r2, r3
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	1a9a      	subs	r2, r3, r2
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	4413      	add	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800379a:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <W25qxx_WriteSector+0xe8>)
 800379c:	895b      	ldrh	r3, [r3, #10]
 800379e:	461a      	mov	r2, r3
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	4413      	add	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	dce1      	bgt.n	8003778 <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 80037b4:	4807      	ldr	r0, [pc, #28]	; (80037d4 <W25qxx_WriteSector+0xf4>)
 80037b6:	f010 fa77 	bl	8013ca8 <puts>
	W25qxx_Delay(100);
 80037ba:	2064      	movs	r0, #100	; 0x64
 80037bc:	f00c ff64 	bl	8010688 <osDelay>
#endif
}
 80037c0:	3720      	adds	r7, #32
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20005f08 	.word	0x20005f08
 80037cc:	08018750 	.word	0x08018750
 80037d0:	08018790 	.word	0x08018790
 80037d4:	080187b0 	.word	0x080187b0

080037d8 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
 80037e4:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80037e6:	e002      	b.n	80037ee <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 80037e8:	2001      	movs	r0, #1
 80037ea:	f00c ff4d 	bl	8010688 <osDelay>
	while (w25qxx.Lock == 1)
 80037ee:	4b54      	ldr	r3, [pc, #336]	; (8003940 <W25qxx_ReadPage+0x168>)
 80037f0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d0f7      	beq.n	80037e8 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 80037f8:	4b51      	ldr	r3, [pc, #324]	; (8003940 <W25qxx_ReadPage+0x168>)
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8003800:	4b4f      	ldr	r3, [pc, #316]	; (8003940 <W25qxx_ReadPage+0x168>)
 8003802:	895b      	ldrh	r3, [r3, #10]
 8003804:	461a      	mov	r2, r3
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	4293      	cmp	r3, r2
 800380a:	d802      	bhi.n	8003812 <W25qxx_ReadPage+0x3a>
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d102      	bne.n	8003818 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8003812:	4b4b      	ldr	r3, [pc, #300]	; (8003940 <W25qxx_ReadPage+0x168>)
 8003814:	895b      	ldrh	r3, [r3, #10]
 8003816:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	4413      	add	r3, r2
 800381e:	4a48      	ldr	r2, [pc, #288]	; (8003940 <W25qxx_ReadPage+0x168>)
 8003820:	8952      	ldrh	r2, [r2, #10]
 8003822:	4293      	cmp	r3, r2
 8003824:	d905      	bls.n	8003832 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003826:	4b46      	ldr	r3, [pc, #280]	; (8003940 <W25qxx_ReadPage+0x168>)
 8003828:	895b      	ldrh	r3, [r3, #10]
 800382a:	461a      	mov	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	68b9      	ldr	r1, [r7, #8]
 8003838:	4842      	ldr	r0, [pc, #264]	; (8003944 <W25qxx_ReadPage+0x16c>)
 800383a:	f010 f9af 	bl	8013b9c <iprintf>
	W25qxx_Delay(100);
 800383e:	2064      	movs	r0, #100	; 0x64
 8003840:	f00c ff22 	bl	8010688 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8003844:	f001 fe30 	bl	80054a8 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800384a:	4b3d      	ldr	r3, [pc, #244]	; (8003940 <W25qxx_ReadPage+0x168>)
 800384c:	895b      	ldrh	r3, [r3, #10]
 800384e:	461a      	mov	r2, r3
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	fb03 f302 	mul.w	r3, r3, r2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	4413      	add	r3, r2
 800385a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800385c:	2200      	movs	r2, #0
 800385e:	2140      	movs	r1, #64	; 0x40
 8003860:	4839      	ldr	r0, [pc, #228]	; (8003948 <W25qxx_ReadPage+0x170>)
 8003862:	f002 fb51 	bl	8005f08 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8003866:	4b36      	ldr	r3, [pc, #216]	; (8003940 <W25qxx_ReadPage+0x168>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	2b08      	cmp	r3, #8
 800386c:	d909      	bls.n	8003882 <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 800386e:	200c      	movs	r0, #12
 8003870:	f7ff fb92 	bl	8002f98 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	0e1b      	lsrs	r3, r3, #24
 8003878:	b2db      	uxtb	r3, r3
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff fb8c 	bl	8002f98 <W25qxx_Spi>
 8003880:	e002      	b.n	8003888 <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8003882:	200b      	movs	r0, #11
 8003884:	f7ff fb88 	bl	8002f98 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	0c1b      	lsrs	r3, r3, #16
 800388c:	b2db      	uxtb	r3, r3
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff fb82 	bl	8002f98 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	0a1b      	lsrs	r3, r3, #8
 8003898:	b2db      	uxtb	r3, r3
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff fb7c 	bl	8002f98 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff fb77 	bl	8002f98 <W25qxx_Spi>
	W25qxx_Spi(0);
 80038aa:	2000      	movs	r0, #0
 80038ac:	f7ff fb74 	bl	8002f98 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	2364      	movs	r3, #100	; 0x64
 80038b6:	68f9      	ldr	r1, [r7, #12]
 80038b8:	4824      	ldr	r0, [pc, #144]	; (800394c <W25qxx_ReadPage+0x174>)
 80038ba:	f006 f88e 	bl	80099da <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80038be:	2201      	movs	r2, #1
 80038c0:	2140      	movs	r1, #64	; 0x40
 80038c2:	4821      	ldr	r0, [pc, #132]	; (8003948 <W25qxx_ReadPage+0x170>)
 80038c4:	f002 fb20 	bl	8005f08 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 80038c8:	f001 fdee 	bl	80054a8 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 80038d4:	2300      	movs	r3, #0
 80038d6:	617b      	str	r3, [r7, #20]
 80038d8:	e018      	b.n	800390c <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d108      	bne.n	80038f6 <W25qxx_ReadPage+0x11e>
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d905      	bls.n	80038f6 <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 80038ea:	4819      	ldr	r0, [pc, #100]	; (8003950 <W25qxx_ReadPage+0x178>)
 80038ec:	f010 f9dc 	bl	8013ca8 <puts>
			W25qxx_Delay(10);
 80038f0:	200a      	movs	r0, #10
 80038f2:	f00c fec9 	bl	8010688 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	4413      	add	r3, r2
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	4619      	mov	r1, r3
 8003900:	4814      	ldr	r0, [pc, #80]	; (8003954 <W25qxx_ReadPage+0x17c>)
 8003902:	f010 f94b 	bl	8013b9c <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	3301      	adds	r3, #1
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	429a      	cmp	r2, r3
 8003912:	d3e2      	bcc.n	80038da <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 8003914:	480e      	ldr	r0, [pc, #56]	; (8003950 <W25qxx_ReadPage+0x178>)
 8003916:	f010 f9c7 	bl	8013ca8 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 800391a:	6939      	ldr	r1, [r7, #16]
 800391c:	480e      	ldr	r0, [pc, #56]	; (8003958 <W25qxx_ReadPage+0x180>)
 800391e:	f010 f93d 	bl	8013b9c <iprintf>
	W25qxx_Delay(100);
 8003922:	2064      	movs	r0, #100	; 0x64
 8003924:	f00c feb0 	bl	8010688 <osDelay>
#endif
	W25qxx_Delay(1);
 8003928:	2001      	movs	r0, #1
 800392a:	f00c fead 	bl	8010688 <osDelay>
	w25qxx.Lock = 0;
 800392e:	4b04      	ldr	r3, [pc, #16]	; (8003940 <W25qxx_ReadPage+0x168>)
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003936:	bf00      	nop
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20005f08 	.word	0x20005f08
 8003944:	080188fc 	.word	0x080188fc
 8003948:	40020c00 	.word	0x40020c00
 800394c:	200050b0 	.word	0x200050b0
 8003950:	08018720 	.word	0x08018720
 8003954:	08018724 	.word	0x08018724
 8003958:	08018938 	.word	0x08018938

0800395c <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b088      	sub	sp, #32
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
 8003968:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 800396a:	4b36      	ldr	r3, [pc, #216]	; (8003a44 <W25qxx_ReadSector+0xe8>)
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	429a      	cmp	r2, r3
 8003972:	d802      	bhi.n	800397a <W25qxx_ReadSector+0x1e>
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d102      	bne.n	8003980 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 800397a:	4b32      	ldr	r3, [pc, #200]	; (8003a44 <W25qxx_ReadSector+0xe8>)
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	68b9      	ldr	r1, [r7, #8]
 8003986:	4830      	ldr	r0, [pc, #192]	; (8003a48 <W25qxx_ReadSector+0xec>)
 8003988:	f010 f908 	bl	8013b9c <iprintf>
	W25qxx_Delay(100);
 800398c:	2064      	movs	r0, #100	; 0x64
 800398e:	f00c fe7b 	bl	8010688 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8003992:	4b2c      	ldr	r3, [pc, #176]	; (8003a44 <W25qxx_ReadSector+0xe8>)
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	429a      	cmp	r2, r3
 800399a:	d306      	bcc.n	80039aa <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 800399c:	482b      	ldr	r0, [pc, #172]	; (8003a4c <W25qxx_ReadSector+0xf0>)
 800399e:	f010 f983 	bl	8013ca8 <puts>
		W25qxx_Delay(100);
 80039a2:	2064      	movs	r0, #100	; 0x64
 80039a4:	f00c fe70 	bl	8010688 <osDelay>
#endif
		return;
 80039a8:	e048      	b.n	8003a3c <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	441a      	add	r2, r3
 80039b0:	4b24      	ldr	r3, [pc, #144]	; (8003a44 <W25qxx_ReadSector+0xe8>)
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d905      	bls.n	80039c4 <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 80039b8:	4b22      	ldr	r3, [pc, #136]	; (8003a44 <W25qxx_ReadSector+0xe8>)
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	61bb      	str	r3, [r7, #24]
 80039c2:	e001      	b.n	80039c8 <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80039c8:	68b8      	ldr	r0, [r7, #8]
 80039ca:	f7ff fdab 	bl	8003524 <W25qxx_SectorToPage>
 80039ce:	4602      	mov	r2, r0
 80039d0:	4b1c      	ldr	r3, [pc, #112]	; (8003a44 <W25qxx_ReadSector+0xe8>)
 80039d2:	895b      	ldrh	r3, [r3, #10]
 80039d4:	4619      	mov	r1, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80039dc:	4413      	add	r3, r2
 80039de:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80039e0:	4b18      	ldr	r3, [pc, #96]	; (8003a44 <W25qxx_ReadSector+0xe8>)
 80039e2:	895b      	ldrh	r3, [r3, #10]
 80039e4:	461a      	mov	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80039ec:	fb02 f201 	mul.w	r2, r2, r1
 80039f0:	1a9b      	subs	r3, r3, r2
 80039f2:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	69f9      	ldr	r1, [r7, #28]
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f7ff feec 	bl	80037d8 <W25qxx_ReadPage>
		StartPage++;
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	3301      	adds	r3, #1
 8003a04:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8003a06:	4b0f      	ldr	r3, [pc, #60]	; (8003a44 <W25qxx_ReadSector+0xe8>)
 8003a08:	895b      	ldrh	r3, [r3, #10]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	1a9a      	subs	r2, r3, r2
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	4413      	add	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8003a16:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <W25qxx_ReadSector+0xe8>)
 8003a18:	895b      	ldrh	r3, [r3, #10]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	4413      	add	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	dce1      	bgt.n	80039f4 <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 8003a30:	4807      	ldr	r0, [pc, #28]	; (8003a50 <W25qxx_ReadSector+0xf4>)
 8003a32:	f010 f939 	bl	8013ca8 <puts>
	W25qxx_Delay(100);
 8003a36:	2064      	movs	r0, #100	; 0x64
 8003a38:	f00c fe26 	bl	8010688 <osDelay>
#endif
}
 8003a3c:	3720      	adds	r7, #32
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	20005f08 	.word	0x20005f08
 8003a48:	0801895c 	.word	0x0801895c
 8003a4c:	0801899c 	.word	0x0801899c
 8003a50:	080189bc 	.word	0x080189bc

08003a54 <MRT_rtc_Init>:


//**************************************************//
//FUNCTIONS

void MRT_rtc_Init(void){
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0

	print("Setting RTC to previous time...");
 8003a58:	4815      	ldr	r0, [pc, #84]	; (8003ab0 <MRT_rtc_Init+0x5c>)
 8003a5a:	f7fd faf5 	bl	8001048 <print>
	MRT_set_rtc(prev_hours,prev_min,prev_sec);
 8003a5e:	4b15      	ldr	r3, [pc, #84]	; (8003ab4 <MRT_rtc_Init+0x60>)
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	4b14      	ldr	r3, [pc, #80]	; (8003ab8 <MRT_rtc_Init+0x64>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4b14      	ldr	r3, [pc, #80]	; (8003abc <MRT_rtc_Init+0x68>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f000 f8e8 	bl	8003c44 <MRT_set_rtc>
	print("OK\r\n");
 8003a74:	4812      	ldr	r0, [pc, #72]	; (8003ac0 <MRT_rtc_Init+0x6c>)
 8003a76:	f7fd fae7 	bl	8001048 <print>

	#if ALARM_A_ACTIVE
		print("Setting alarmA...");
 8003a7a:	4812      	ldr	r0, [pc, #72]	; (8003ac4 <MRT_rtc_Init+0x70>)
 8003a7c:	f7fd fae4 	bl	8001048 <print>
		HAL_Delay(2000); //To make sure that when you set the Alarm it doesn't go off automatically
 8003a80:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003a84:	f001 fd1c 	bl	80054c0 <HAL_Delay>
		if (wu_flag == 0){
 8003a88:	4b0f      	ldr	r3, [pc, #60]	; (8003ac8 <MRT_rtc_Init+0x74>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d105      	bne.n	8003a9c <MRT_rtc_Init+0x48>
			MRT_set_alarmA(PRE_WHEN_SLEEP_TIME_HOURS, PRE_WHEN_SLEEP_TIME_MIN, PRE_WHEN_SLEEP_TIME_SEC);
 8003a90:	2200      	movs	r2, #0
 8003a92:	211e      	movs	r1, #30
 8003a94:	2004      	movs	r0, #4
 8003a96:	f000 f91b 	bl	8003cd0 <MRT_set_alarmA>
 8003a9a:	e004      	b.n	8003aa6 <MRT_rtc_Init+0x52>
		}
		else{
			MRT_set_alarmA(POST_WHEN_SLEEP_TIME_HOURS, POST_WHEN_SLEEP_TIME_MIN, POST_WHEN_SLEEP_TIME_SEC);
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	200e      	movs	r0, #14
 8003aa2:	f000 f915 	bl	8003cd0 <MRT_set_alarmA>
		}
		print("OK\r\n");
 8003aa6:	4806      	ldr	r0, [pc, #24]	; (8003ac0 <MRT_rtc_Init+0x6c>)
 8003aa8:	f7fd face 	bl	8001048 <print>
	#endif
}
 8003aac:	bf00      	nop
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	08018a50 	.word	0x08018a50
 8003ab4:	20000275 	.word	0x20000275
 8003ab8:	20000276 	.word	0x20000276
 8003abc:	20000277 	.word	0x20000277
 8003ac0:	08018a70 	.word	0x08018a70
 8003ac4:	08018a78 	.word	0x08018a78
 8003ac8:	20000271 	.word	0x20000271

08003acc <MRT_check_for_wake_up>:


void MRT_check_for_wake_up(void){
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8003ad0:	4b0e      	ldr	r3, [pc, #56]	; (8003b0c <MRT_check_for_wake_up+0x40>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d112      	bne.n	8003b02 <MRT_check_for_wake_up+0x36>
	{

		wu_flag = 1;
 8003adc:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <MRT_check_for_wake_up+0x44>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8003ae2:	4b0a      	ldr	r3, [pc, #40]	; (8003b0c <MRT_check_for_wake_up+0x40>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a09      	ldr	r2, [pc, #36]	; (8003b0c <MRT_check_for_wake_up+0x40>)
 8003ae8:	f043 0308 	orr.w	r3, r3, #8
 8003aec:	6013      	str	r3, [r2, #0]

		print("Wakeup from the STANDBY MODE\r\n");
 8003aee:	4809      	ldr	r0, [pc, #36]	; (8003b14 <MRT_check_for_wake_up+0x48>)
 8003af0:	f7fd faaa 	bl	8001048 <print>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8003af4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003af8:	f004 fa0a 	bl	8007f10 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc); //TODO hrtc from rtc.h (should we pass it as an argument instead?)
 8003afc:	4806      	ldr	r0, [pc, #24]	; (8003b18 <MRT_check_for_wake_up+0x4c>)
 8003afe:	f005 fd45 	bl	800958c <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_clear_alarms_flags();
 8003b02:	f000 f80b 	bl	8003b1c <MRT_clear_alarms_flags>
}
 8003b06:	bf00      	nop
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40007000 	.word	0x40007000
 8003b10:	20000271 	.word	0x20000271
 8003b14:	08018a8c 	.word	0x08018a8c
 8003b18:	20005038 	.word	0x20005038

08003b1c <MRT_clear_alarms_flags>:



void MRT_clear_alarms_flags(void){
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	print("Clearing the flags\r\n");
 8003b20:	482a      	ldr	r0, [pc, #168]	; (8003bcc <MRT_clear_alarms_flags+0xb0>)
 8003b22:	f7fd fa91 	bl	8001048 <print>

	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8003b26:	4b2a      	ldr	r3, [pc, #168]	; (8003bd0 <MRT_clear_alarms_flags+0xb4>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	22ca      	movs	r2, #202	; 0xca
 8003b2c:	625a      	str	r2, [r3, #36]	; 0x24
 8003b2e:	4b28      	ldr	r3, [pc, #160]	; (8003bd0 <MRT_clear_alarms_flags+0xb4>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2253      	movs	r2, #83	; 0x53
 8003b34:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8003b36:	e008      	b.n	8003b4a <MRT_clear_alarms_flags+0x2e>
		//print("Clearing alarm A flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8003b38:	4b25      	ldr	r3, [pc, #148]	; (8003bd0 <MRT_clear_alarms_flags+0xb4>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	4b23      	ldr	r3, [pc, #140]	; (8003bd0 <MRT_clear_alarms_flags+0xb4>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003b48:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8003b4a:	4b21      	ldr	r3, [pc, #132]	; (8003bd0 <MRT_clear_alarms_flags+0xb4>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1ef      	bne.n	8003b38 <MRT_clear_alarms_flags+0x1c>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8003b58:	4b1d      	ldr	r3, [pc, #116]	; (8003bd0 <MRT_clear_alarms_flags+0xb4>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	22ff      	movs	r2, #255	; 0xff
 8003b5e:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003b60:	4b1c      	ldr	r3, [pc, #112]	; (8003bd4 <MRT_clear_alarms_flags+0xb8>)
 8003b62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b66:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8003b68:	4b19      	ldr	r3, [pc, #100]	; (8003bd0 <MRT_clear_alarms_flags+0xb4>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	22ca      	movs	r2, #202	; 0xca
 8003b6e:	625a      	str	r2, [r3, #36]	; 0x24
 8003b70:	4b17      	ldr	r3, [pc, #92]	; (8003bd0 <MRT_clear_alarms_flags+0xb4>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2253      	movs	r2, #83	; 0x53
 8003b76:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8003b78:	e008      	b.n	8003b8c <MRT_clear_alarms_flags+0x70>
		//print("Clearing alarm B flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 8003b7a:	4b15      	ldr	r3, [pc, #84]	; (8003bd0 <MRT_clear_alarms_flags+0xb4>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	4b13      	ldr	r3, [pc, #76]	; (8003bd0 <MRT_clear_alarms_flags+0xb4>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003b8a:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8003b8c:	4b10      	ldr	r3, [pc, #64]	; (8003bd0 <MRT_clear_alarms_flags+0xb4>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1ef      	bne.n	8003b7a <MRT_clear_alarms_flags+0x5e>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8003b9a:	4b0d      	ldr	r3, [pc, #52]	; (8003bd0 <MRT_clear_alarms_flags+0xb4>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	22ff      	movs	r2, #255	; 0xff
 8003ba0:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003ba2:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <MRT_clear_alarms_flags+0xb8>)
 8003ba4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ba8:	615a      	str	r2, [r3, #20]

	/* Clear the WU FLAG */
	//print("Clearing wake up flag\r\n");
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8003baa:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <MRT_clear_alarms_flags+0xbc>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a0a      	ldr	r2, [pc, #40]	; (8003bd8 <MRT_clear_alarms_flags+0xbc>)
 8003bb0:	f043 0304 	orr.w	r3, r3, #4
 8003bb4:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//print("Clearing RTC wake up flag\r\n");
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8003bb6:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <MRT_clear_alarms_flags+0xb4>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	4b04      	ldr	r3, [pc, #16]	; (8003bd0 <MRT_clear_alarms_flags+0xb4>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003bc6:	60da      	str	r2, [r3, #12]
}
 8003bc8:	bf00      	nop
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	08018aac 	.word	0x08018aac
 8003bd0:	20005038 	.word	0x20005038
 8003bd4:	40013c00 	.word	0x40013c00
 8003bd8:	40007000 	.word	0x40007000

08003bdc <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode(uint32_t seconds){
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b0a4      	sub	sp, #144	; 0x90
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
	print("\r\n/*****StandByMode*****/\r\n");
 8003be4:	4813      	ldr	r0, [pc, #76]	; (8003c34 <MRT_StandByMode+0x58>)
 8003be6:	f7fd fa2f 	bl	8001048 <print>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8003bea:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003bee:	f004 f97d 	bl	8007eec <HAL_PWR_EnableWakeUpPin>

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_clear_alarms_flags();
 8003bf2:	f7ff ff93 	bl	8003b1c <MRT_clear_alarms_flags>

	//Setup RTC wake up timer
	println("Setting up RTCW");
 8003bf6:	4810      	ldr	r0, [pc, #64]	; (8003c38 <MRT_StandByMode+0x5c>)
 8003bf8:	f7fd fa08 	bl	800100c <println>
	  Error_Handler();
	}
	*/

	char* msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds",seconds);
 8003bfc:	f107 0308 	add.w	r3, r7, #8
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	490e      	ldr	r1, [pc, #56]	; (8003c3c <MRT_StandByMode+0x60>)
 8003c04:	4618      	mov	r0, r3
 8003c06:	f010 f86d 	bl	8013ce4 <siprintf>
	println(msg);
 8003c0a:	f107 0308 	add.w	r3, r7, #8
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fd f9fc 	bl	800100c <println>

	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8003c14:	2204      	movs	r2, #4
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	4809      	ldr	r0, [pc, #36]	; (8003c40 <MRT_StandByMode+0x64>)
 8003c1a:	f005 fbf7 	bl	800940c <HAL_RTCEx_SetWakeUpTimer_IT>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <MRT_StandByMode+0x4c>
	{
	  Error_Handler();
 8003c24:	f7fe f922 	bl	8001e6c <Error_Handler>
	}

	HAL_PWR_EnterSTANDBYMode();
 8003c28:	f004 f986 	bl	8007f38 <HAL_PWR_EnterSTANDBYMode>
}
 8003c2c:	bf00      	nop
 8003c2e:	3790      	adds	r7, #144	; 0x90
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	08018ac4 	.word	0x08018ac4
 8003c38:	08018ae0 	.word	0x08018ae0
 8003c3c:	08018af0 	.word	0x08018af0
 8003c40:	20005038 	.word	0x20005038

08003c44 <MRT_set_rtc>:




void MRT_set_rtc(uint8_t h, uint8_t m, uint8_t s){
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	71fb      	strb	r3, [r7, #7]
 8003c4e:	460b      	mov	r3, r1
 8003c50:	71bb      	strb	r3, [r7, #6]
 8003c52:	4613      	mov	r3, r2
 8003c54:	717b      	strb	r3, [r7, #5]
	  /** Initialize RTC and set the Time and Date
	  */
	  RTC_TimeTypeDef sTime;

	  sTime.Hours = int_to_hex_table[h];
 8003c56:	79fb      	ldrb	r3, [r7, #7]
 8003c58:	4a1a      	ldr	r2, [pc, #104]	; (8003cc4 <MRT_set_rtc+0x80>)
 8003c5a:	5cd3      	ldrb	r3, [r2, r3]
 8003c5c:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = int_to_hex_table[m];
 8003c5e:	79bb      	ldrb	r3, [r7, #6]
 8003c60:	4a18      	ldr	r2, [pc, #96]	; (8003cc4 <MRT_set_rtc+0x80>)
 8003c62:	5cd3      	ldrb	r3, [r2, r3]
 8003c64:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = int_to_hex_table[s];
 8003c66:	797b      	ldrb	r3, [r7, #5]
 8003c68:	4a16      	ldr	r2, [pc, #88]	; (8003cc4 <MRT_set_rtc+0x80>)
 8003c6a:	5cd3      	ldrb	r3, [r2, r3]
 8003c6c:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003c72:	2300      	movs	r3, #0
 8003c74:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003c76:	f107 030c 	add.w	r3, r7, #12
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4812      	ldr	r0, [pc, #72]	; (8003cc8 <MRT_set_rtc+0x84>)
 8003c80:	f005 f865 	bl	8008d4e <HAL_RTC_SetTime>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <MRT_set_rtc+0x4a>
	  {
	    Error_Handler();
 8003c8a:	f7fe f8ef 	bl	8001e6c <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003c8e:	4b0f      	ldr	r3, [pc, #60]	; (8003ccc <MRT_set_rtc+0x88>)
 8003c90:	2201      	movs	r2, #1
 8003c92:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 8003c94:	4b0d      	ldr	r3, [pc, #52]	; (8003ccc <MRT_set_rtc+0x88>)
 8003c96:	2201      	movs	r2, #1
 8003c98:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 8003c9a:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <MRT_set_rtc+0x88>)
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 8003ca0:	4b0a      	ldr	r3, [pc, #40]	; (8003ccc <MRT_set_rtc+0x88>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	4908      	ldr	r1, [pc, #32]	; (8003ccc <MRT_set_rtc+0x88>)
 8003caa:	4807      	ldr	r0, [pc, #28]	; (8003cc8 <MRT_set_rtc+0x84>)
 8003cac:	f005 f90c 	bl	8008ec8 <HAL_RTC_SetDate>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <MRT_set_rtc+0x76>
	  {
	    Error_Handler();
 8003cb6:	f7fe f8d9 	bl	8001e6c <Error_Handler>
	  }
}
 8003cba:	bf00      	nop
 8003cbc:	3720      	adds	r7, #32
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20000024 	.word	0x20000024
 8003cc8:	20005038 	.word	0x20005038
 8003ccc:	20000394 	.word	0x20000394

08003cd0 <MRT_set_alarmA>:



void MRT_set_alarmA(uint8_t h, uint8_t m, uint8_t s){
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	71fb      	strb	r3, [r7, #7]
 8003cda:	460b      	mov	r3, r1
 8003cdc:	71bb      	strb	r3, [r7, #6]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 8003ce2:	79fb      	ldrb	r3, [r7, #7]
 8003ce4:	4a1a      	ldr	r2, [pc, #104]	; (8003d50 <MRT_set_alarmA+0x80>)
 8003ce6:	5cd2      	ldrb	r2, [r2, r3]
 8003ce8:	4b1a      	ldr	r3, [pc, #104]	; (8003d54 <MRT_set_alarmA+0x84>)
 8003cea:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 8003cec:	79bb      	ldrb	r3, [r7, #6]
 8003cee:	4a18      	ldr	r2, [pc, #96]	; (8003d50 <MRT_set_alarmA+0x80>)
 8003cf0:	5cd2      	ldrb	r2, [r2, r3]
 8003cf2:	4b18      	ldr	r3, [pc, #96]	; (8003d54 <MRT_set_alarmA+0x84>)
 8003cf4:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 8003cf6:	797b      	ldrb	r3, [r7, #5]
 8003cf8:	4a15      	ldr	r2, [pc, #84]	; (8003d50 <MRT_set_alarmA+0x80>)
 8003cfa:	5cd2      	ldrb	r2, [r2, r3]
 8003cfc:	4b15      	ldr	r3, [pc, #84]	; (8003d54 <MRT_set_alarmA+0x84>)
 8003cfe:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 8003d00:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <MRT_set_alarmA+0x84>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003d06:	4b13      	ldr	r3, [pc, #76]	; (8003d54 <MRT_set_alarmA+0x84>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003d0c:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <MRT_set_alarmA+0x84>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003d12:	4b10      	ldr	r3, [pc, #64]	; (8003d54 <MRT_set_alarmA+0x84>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003d18:	4b0e      	ldr	r3, [pc, #56]	; (8003d54 <MRT_set_alarmA+0x84>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003d1e:	4b0d      	ldr	r3, [pc, #52]	; (8003d54 <MRT_set_alarmA+0x84>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <MRT_set_alarmA+0x84>)
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 8003d2c:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <MRT_set_alarmA+0x84>)
 8003d2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d32:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003d34:	2201      	movs	r2, #1
 8003d36:	4907      	ldr	r1, [pc, #28]	; (8003d54 <MRT_set_alarmA+0x84>)
 8003d38:	4807      	ldr	r0, [pc, #28]	; (8003d58 <MRT_set_alarmA+0x88>)
 8003d3a:	f005 f96d 	bl	8009018 <HAL_RTC_SetAlarm_IT>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <MRT_set_alarmA+0x78>
	  {
	    Error_Handler();
 8003d44:	f7fe f892 	bl	8001e6c <Error_Handler>
	  }
}
 8003d48:	bf00      	nop
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	20000024 	.word	0x20000024
 8003d54:	20000398 	.word	0x20000398
 8003d58:	20005038 	.word	0x20005038

08003d5c <lsm_write>:


//**************************************************//
//LSM6DSR

static int32_t lsm_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af04      	add	r7, sp, #16
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	607a      	str	r2, [r7, #4]
 8003d66:	461a      	mov	r2, r3
 8003d68:	460b      	mov	r3, r1
 8003d6a:	72fb      	strb	r3, [r7, #11]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8003d70:	7afb      	ldrb	r3, [r7, #11]
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d78:	9302      	str	r3, [sp, #8]
 8003d7a:	893b      	ldrh	r3, [r7, #8]
 8003d7c:	9301      	str	r3, [sp, #4]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	2301      	movs	r3, #1
 8003d84:	21d5      	movs	r1, #213	; 0xd5
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f002 fa40 	bl	800620c <HAL_I2C_Mem_Write>
  return 0;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <lsm_read>:

static int32_t lsm_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b088      	sub	sp, #32
 8003d9a:	af04      	add	r7, sp, #16
 8003d9c:	60f8      	str	r0, [r7, #12]
 8003d9e:	607a      	str	r2, [r7, #4]
 8003da0:	461a      	mov	r2, r3
 8003da2:	460b      	mov	r3, r1
 8003da4:	72fb      	strb	r3, [r7, #11]
 8003da6:	4613      	mov	r3, r2
 8003da8:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8003daa:	7afb      	ldrb	r3, [r7, #11]
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003db2:	9302      	str	r3, [sp, #8]
 8003db4:	893b      	ldrh	r3, [r7, #8]
 8003db6:	9301      	str	r3, [sp, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	21d5      	movs	r1, #213	; 0xd5
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f002 fb1d 	bl	8006400 <HAL_I2C_Mem_Read>
  return 0;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <MRT_LSM6DSR_Setup>:


stmdev_ctx_t  MRT_LSM6DSR_Setup(I2C_HandleTypeDef* SENSOR_BUS, uint8_t LSM_ID ) {
 8003dd0:	b590      	push	{r4, r7, lr}
 8003dd2:	b08b      	sub	sp, #44	; 0x2c
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	71fb      	strb	r3, [r7, #7]

	  println("LSM6DSR Setup Starts");
 8003dde:	483b      	ldr	r0, [pc, #236]	; (8003ecc <MRT_LSM6DSR_Setup+0xfc>)
 8003de0:	f7fd f914 	bl	800100c <println>

	  stmdev_ctx_t lsm_ctx;

	  /* Initialize mems driver interface */
	  lsm_ctx.write_reg = lsm_write;
 8003de4:	4b3a      	ldr	r3, [pc, #232]	; (8003ed0 <MRT_LSM6DSR_Setup+0x100>)
 8003de6:	61fb      	str	r3, [r7, #28]
	  lsm_ctx.read_reg = lsm_read;
 8003de8:	4b3a      	ldr	r3, [pc, #232]	; (8003ed4 <MRT_LSM6DSR_Setup+0x104>)
 8003dea:	623b      	str	r3, [r7, #32]
	  lsm_ctx.handle = SENSOR_BUS;
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	627b      	str	r3, [r7, #36]	; 0x24
	  /* Wait sensor boot time */
	  HAL_Delay(LSM6DSR_BOOT_TIME);
 8003df0:	2064      	movs	r0, #100	; 0x64
 8003df2:	f001 fb65 	bl	80054c0 <HAL_Delay>
	  /* Check device ID */
	  lsm6dsr_device_id_get(&lsm_ctx, &lsm_whoamI);
 8003df6:	f107 031c 	add.w	r3, r7, #28
 8003dfa:	4937      	ldr	r1, [pc, #220]	; (8003ed8 <MRT_LSM6DSR_Setup+0x108>)
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f001 fa59 	bl	80052b4 <lsm6dsr_device_id_get>

	  print("Checking Sensor ID...");
 8003e02:	4836      	ldr	r0, [pc, #216]	; (8003edc <MRT_LSM6DSR_Setup+0x10c>)
 8003e04:	f7fd f920 	bl	8001048 <print>
	  //if (lsm_whoamI != LSM6DSR_ID){ ORIGINAL
	  if (lsm_whoamI != LSM_ID){
 8003e08:	4b33      	ldr	r3, [pc, #204]	; (8003ed8 <MRT_LSM6DSR_Setup+0x108>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	79fa      	ldrb	r2, [r7, #7]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d017      	beq.n	8003e42 <MRT_LSM6DSR_Setup+0x72>
		  println("NOT OK");
 8003e12:	4833      	ldr	r0, [pc, #204]	; (8003ee0 <MRT_LSM6DSR_Setup+0x110>)
 8003e14:	f7fd f8fa 	bl	800100c <println>
		  print("This Device is: ");
 8003e18:	4832      	ldr	r0, [pc, #200]	; (8003ee4 <MRT_LSM6DSR_Setup+0x114>)
 8003e1a:	f7fd f915 	bl	8001048 <print>

		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lsm_whoamI);
 8003e1e:	4b2e      	ldr	r3, [pc, #184]	; (8003ed8 <MRT_LSM6DSR_Setup+0x108>)
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	461a      	mov	r2, r3
 8003e24:	f107 0310 	add.w	r3, r7, #16
 8003e28:	492f      	ldr	r1, [pc, #188]	; (8003ee8 <MRT_LSM6DSR_Setup+0x118>)
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f00f ff5a 	bl	8013ce4 <siprintf>
		  print(buffer);
 8003e30:	f107 0310 	add.w	r3, r7, #16
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7fd f907 	bl	8001048 <print>

		  println("\n\rProgram Terminated\n\r");
 8003e3a:	482c      	ldr	r0, [pc, #176]	; (8003eec <MRT_LSM6DSR_Setup+0x11c>)
 8003e3c:	f7fd f8e6 	bl	800100c <println>
		  while(1);
 8003e40:	e7fe      	b.n	8003e40 <MRT_LSM6DSR_Setup+0x70>
	  }
	  println("OK");
 8003e42:	482b      	ldr	r0, [pc, #172]	; (8003ef0 <MRT_LSM6DSR_Setup+0x120>)
 8003e44:	f7fd f8e2 	bl	800100c <println>

	  /* Restore default configuration */
	  lsm6dsr_reset_set(&lsm_ctx, PROPERTY_ENABLE);
 8003e48:	f107 031c 	add.w	r3, r7, #28
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f001 fa41 	bl	80052d6 <lsm6dsr_reset_set>
	  HAL_Delay(500);
 8003e54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e58:	f001 fb32 	bl	80054c0 <HAL_Delay>
	  do {
	    lsm6dsr_reset_get(&lsm_ctx, &lsm_rst);
 8003e5c:	f107 031c 	add.w	r3, r7, #28
 8003e60:	4924      	ldr	r1, [pc, #144]	; (8003ef4 <MRT_LSM6DSR_Setup+0x124>)
 8003e62:	4618      	mov	r0, r3
 8003e64:	f001 fa5d 	bl	8005322 <lsm6dsr_reset_get>
	  } while (lsm_rst);
 8003e68:	4b22      	ldr	r3, [pc, #136]	; (8003ef4 <MRT_LSM6DSR_Setup+0x124>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1f5      	bne.n	8003e5c <MRT_LSM6DSR_Setup+0x8c>

	  /* Disable I3C interface */
	  //TODO JASPER lsm6dsr_i3c_disable_set(&lsm_ctx, LSM6DSR_I3C_DISABLE);

	  /* Enable Block Data Update */
	  lsm6dsr_block_data_update_set(&lsm_ctx, PROPERTY_ENABLE);
 8003e70:	f107 031c 	add.w	r3, r7, #28
 8003e74:	2101      	movs	r1, #1
 8003e76:	4618      	mov	r0, r3
 8003e78:	f001 f8cc 	bl	8005014 <lsm6dsr_block_data_update_set>
	  /* Set Output Data Rate */
	  lsm6dsr_xl_data_rate_set(&lsm_ctx, LSM6DSR_XL_ODR_12Hz5);
 8003e7c:	f107 031c 	add.w	r3, r7, #28
 8003e80:	2101      	movs	r1, #1
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 fea8 	bl	8004bd8 <lsm6dsr_xl_data_rate_set>
	  lsm6dsr_gy_data_rate_set(&lsm_ctx, LSM6DSR_GY_ODR_12Hz5);
 8003e88:	f107 031c 	add.w	r3, r7, #28
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 ffc4 	bl	8004e1c <lsm6dsr_gy_data_rate_set>
	  /* Set full scale */
	  lsm6dsr_xl_full_scale_set(&lsm_ctx, LSM6DSR_2g);
 8003e94:	f107 031c 	add.w	r3, r7, #28
 8003e98:	2100      	movs	r1, #0
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fe76 	bl	8004b8c <lsm6dsr_xl_full_scale_set>
	  lsm6dsr_gy_full_scale_set(&lsm_ctx, LSM6DSR_2000dps);
 8003ea0:	f107 031c 	add.w	r3, r7, #28
 8003ea4:	210c      	movs	r1, #12
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 ff92 	bl	8004dd0 <lsm6dsr_gy_full_scale_set>
	  /* Configure filtering chain(No aux interface)
	   * Accelerometer - LPF1 + LPF2 path
	   */
	  //TODO JASPER lsm6dsr_xl_hp_path_on_out_set(&lsm_ctx, LSM6DSR_LP_ODR_DIV_100);
	  //TODO JASPER lsm6dsr_xl_filter_lp2_set(&lsm_ctx, PROPERTY_ENABLE);
	  println("LSM6DSR Setup Ends");
 8003eac:	4812      	ldr	r0, [pc, #72]	; (8003ef8 <MRT_LSM6DSR_Setup+0x128>)
 8003eae:	f7fd f8ad 	bl	800100c <println>

	  return lsm_ctx;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	461c      	mov	r4, r3
 8003eb6:	f107 031c 	add.w	r3, r7, #28
 8003eba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ebe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	372c      	adds	r7, #44	; 0x2c
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd90      	pop	{r4, r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	08018b10 	.word	0x08018b10
 8003ed0:	08003d5d 	.word	0x08003d5d
 8003ed4:	08003d97 	.word	0x08003d97
 8003ed8:	20005f74 	.word	0x20005f74
 8003edc:	08018b28 	.word	0x08018b28
 8003ee0:	08018b40 	.word	0x08018b40
 8003ee4:	08018b48 	.word	0x08018b48
 8003ee8:	08018b5c 	.word	0x08018b5c
 8003eec:	08018b64 	.word	0x08018b64
 8003ef0:	08018b7c 	.word	0x08018b7c
 8003ef4:	20005f8d 	.word	0x20005f8d
 8003ef8:	08018b80 	.word	0x08018b80

08003efc <MRT_LSM6DSR_getAcceleration>:


/*
 * Get acceleration values
 */
void MRT_LSM6DSR_getAcceleration(stmdev_ctx_t lsm_ctx,float acceleration_mg[3]){
 8003efc:	b590      	push	{r4, r7, lr}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	1d3c      	adds	r4, r7, #4
 8003f04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003f08:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_xl_flag_data_ready_get(&lsm_ctx, &reg);
 8003f0a:	f107 0217 	add.w	r2, r7, #23
 8003f0e:	1d3b      	adds	r3, r7, #4
 8003f10:	4611      	mov	r1, r2
 8003f12:	4618      	mov	r0, r3
 8003f14:	f001 f8a4 	bl	8005060 <lsm6dsr_xl_flag_data_ready_get>

		//if (reg.status_reg.gda) {
	    if(reg){
 8003f18:	7dfb      	ldrb	r3, [r7, #23]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d02d      	beq.n	8003f7a <MRT_LSM6DSR_getAcceleration+0x7e>
		/* Read magnetic field data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8003f1e:	2206      	movs	r2, #6
 8003f20:	2100      	movs	r1, #0
 8003f22:	4818      	ldr	r0, [pc, #96]	; (8003f84 <MRT_LSM6DSR_getAcceleration+0x88>)
 8003f24:	f00e ff5d 	bl	8012de2 <memset>
        lsm6dsr_acceleration_raw_get(&lsm_ctx, data_raw_acceleration);
 8003f28:	1d3b      	adds	r3, r7, #4
 8003f2a:	4916      	ldr	r1, [pc, #88]	; (8003f84 <MRT_LSM6DSR_getAcceleration+0x88>)
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f001 f950 	bl	80051d2 <lsm6dsr_acceleration_raw_get>
        acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(
 8003f32:	4b14      	ldr	r3, [pc, #80]	; (8003f84 <MRT_LSM6DSR_getAcceleration+0x88>)
 8003f34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 fddb 	bl	8004af4 <lsm6dsr_from_fs2g_to_mg>
 8003f3e:	eef0 7a40 	vmov.f32	s15, s0
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	edc3 7a00 	vstr	s15, [r3]
                               data_raw_acceleration[0]);
        acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(
 8003f48:	4b0e      	ldr	r3, [pc, #56]	; (8003f84 <MRT_LSM6DSR_getAcceleration+0x88>)
 8003f4a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	1d1c      	adds	r4, r3, #4
 8003f52:	4610      	mov	r0, r2
 8003f54:	f000 fdce 	bl	8004af4 <lsm6dsr_from_fs2g_to_mg>
 8003f58:	eef0 7a40 	vmov.f32	s15, s0
 8003f5c:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[1]);
        acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(
 8003f60:	4b08      	ldr	r3, [pc, #32]	; (8003f84 <MRT_LSM6DSR_getAcceleration+0x88>)
 8003f62:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	f103 0408 	add.w	r4, r3, #8
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	f000 fdc1 	bl	8004af4 <lsm6dsr_from_fs2g_to_mg>
 8003f72:	eef0 7a40 	vmov.f32	s15, s0
 8003f76:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[2]);
      }
}
 8003f7a:	bf00      	nop
 8003f7c:	371c      	adds	r7, #28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd90      	pop	{r4, r7, pc}
 8003f82:	bf00      	nop
 8003f84:	20005f68 	.word	0x20005f68

08003f88 <MRT_LSM6DSR_getTemperature>:

/*
 * Get temperature value
 */
void MRT_LSM6DSR_getTemperature(stmdev_ctx_t lsm_ctx,float* temperature_degC){
 8003f88:	b590      	push	{r4, r7, lr}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	1d3c      	adds	r4, r7, #4
 8003f90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003f94:	603b      	str	r3, [r7, #0]
	//lsm6dsr_reg_t reg;
	//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    uint8_t reg;
    lsm6dsr_temp_flag_data_ready_get(&lsm_ctx, &reg);
 8003f96:	f107 0217 	add.w	r2, r7, #23
 8003f9a:	1d3b      	adds	r3, r7, #4
 8003f9c:	4611      	mov	r1, r2
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f001 f890 	bl	80050c4 <lsm6dsr_temp_flag_data_ready_get>

	//if (reg.status_reg.tda) {
    if(reg){
 8003fa4:	7dfb      	ldrb	r3, [r7, #23]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d012      	beq.n	8003fd0 <MRT_LSM6DSR_getTemperature+0x48>
 8003faa:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <MRT_LSM6DSR_getTemperature+0x50>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	801a      	strh	r2, [r3, #0]
		//Read temperature data
		memset(&lsm_data_raw_temperature, 0x00, sizeof(int16_t));
		lsm6dsr_temperature_raw_get(&lsm_ctx, &lsm_data_raw_temperature);
 8003fb0:	1d3b      	adds	r3, r7, #4
 8003fb2:	4909      	ldr	r1, [pc, #36]	; (8003fd8 <MRT_LSM6DSR_getTemperature+0x50>)
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f001 f89e 	bl	80050f6 <lsm6dsr_temperature_raw_get>
		*temperature_degC = lsm6dsr_from_lsb_to_celsius(lsm_data_raw_temperature);
 8003fba:	4b07      	ldr	r3, [pc, #28]	; (8003fd8 <MRT_LSM6DSR_getTemperature+0x50>)
 8003fbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 fdc7 	bl	8004b54 <lsm6dsr_from_lsb_to_celsius>
 8003fc6:	eef0 7a40 	vmov.f32	s15, s0
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	edc3 7a00 	vstr	s15, [r3]

	}
}
 8003fd0:	bf00      	nop
 8003fd2:	371c      	adds	r7, #28
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd90      	pop	{r4, r7, pc}
 8003fd8:	20005f6e 	.word	0x20005f6e

08003fdc <MRT_LSM6DSR_getAngularRate>:


/*
 * Get angular rate values
 */
void MRT_LSM6DSR_getAngularRate(stmdev_ctx_t lsm_ctx,float angular_rate_mdps[3]){
 8003fdc:	b590      	push	{r4, r7, lr}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	1d3c      	adds	r4, r7, #4
 8003fe4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003fe8:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_gy_flag_data_ready_get(&lsm_ctx, &reg);
 8003fea:	f107 0217 	add.w	r2, r7, #23
 8003fee:	1d3b      	adds	r3, r7, #4
 8003ff0:	4611      	mov	r1, r2
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f001 f84d 	bl	8005092 <lsm6dsr_gy_flag_data_ready_get>

		//if (reg.status_reg.xlda) {
	    if(reg){
 8003ff8:	7dfb      	ldrb	r3, [r7, #23]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d02d      	beq.n	800405a <MRT_LSM6DSR_getAngularRate+0x7e>
		/* Read magnetic field data */
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8003ffe:	2206      	movs	r2, #6
 8004000:	2100      	movs	r1, #0
 8004002:	4818      	ldr	r0, [pc, #96]	; (8004064 <MRT_LSM6DSR_getAngularRate+0x88>)
 8004004:	f00e feed 	bl	8012de2 <memset>
		lsm6dsr_angular_rate_raw_get(&lsm_ctx, data_raw_angular_rate);
 8004008:	1d3b      	adds	r3, r7, #4
 800400a:	4916      	ldr	r1, [pc, #88]	; (8004064 <MRT_LSM6DSR_getAngularRate+0x88>)
 800400c:	4618      	mov	r0, r3
 800400e:	f001 f895 	bl	800513c <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8004012:	4b14      	ldr	r3, [pc, #80]	; (8004064 <MRT_LSM6DSR_getAngularRate+0x88>)
 8004014:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004018:	4618      	mov	r0, r3
 800401a:	f000 fd83 	bl	8004b24 <lsm6dsr_from_fs2000dps_to_mdps>
 800401e:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[0] =
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	edc3 7a00 	vstr	s15, [r3]
		angular_rate_mdps[1] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8004028:	4b0e      	ldr	r3, [pc, #56]	; (8004064 <MRT_LSM6DSR_getAngularRate+0x88>)
 800402a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
		angular_rate_mdps[1] =
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	1d1c      	adds	r4, r3, #4
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8004032:	4610      	mov	r0, r2
 8004034:	f000 fd76 	bl	8004b24 <lsm6dsr_from_fs2000dps_to_mdps>
 8004038:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[1] =
 800403c:	edc4 7a00 	vstr	s15, [r4]
		angular_rate_mdps[2] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8004040:	4b08      	ldr	r3, [pc, #32]	; (8004064 <MRT_LSM6DSR_getAngularRate+0x88>)
 8004042:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		angular_rate_mdps[2] =
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	f103 0408 	add.w	r4, r3, #8
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 800404c:	4610      	mov	r0, r2
 800404e:	f000 fd69 	bl	8004b24 <lsm6dsr_from_fs2000dps_to_mdps>
 8004052:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[2] =
 8004056:	edc4 7a00 	vstr	s15, [r4]
		fs2000dps_to_mdps
		*/

		}

}
 800405a:	bf00      	nop
 800405c:	371c      	adds	r7, #28
 800405e:	46bd      	mov	sp, r7
 8004060:	bd90      	pop	{r4, r7, pc}
 8004062:	bf00      	nop
 8004064:	20005f90 	.word	0x20005f90

08004068 <lps_write>:


//**************************************************//
//LPS22HH

static int32_t lps_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 8004068:	b580      	push	{r7, lr}
 800406a:	b088      	sub	sp, #32
 800406c:	af04      	add	r7, sp, #16
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	607a      	str	r2, [r7, #4]
 8004072:	461a      	mov	r2, r3
 8004074:	460b      	mov	r3, r1
 8004076:	72fb      	strb	r3, [r7, #11]
 8004078:	4613      	mov	r3, r2
 800407a:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 800407c:	7afb      	ldrb	r3, [r7, #11]
 800407e:	b29a      	uxth	r2, r3
 8004080:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004084:	9302      	str	r3, [sp, #8]
 8004086:	893b      	ldrh	r3, [r7, #8]
 8004088:	9301      	str	r3, [sp, #4]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	2301      	movs	r3, #1
 8004090:	21b9      	movs	r1, #185	; 0xb9
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f002 f8ba 	bl	800620c <HAL_I2C_Mem_Write>
  return 0;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <lps_read>:

static int32_t lps_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b088      	sub	sp, #32
 80040a6:	af04      	add	r7, sp, #16
 80040a8:	60f8      	str	r0, [r7, #12]
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	461a      	mov	r2, r3
 80040ae:	460b      	mov	r3, r1
 80040b0:	72fb      	strb	r3, [r7, #11]
 80040b2:	4613      	mov	r3, r2
 80040b4:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80040b6:	7afb      	ldrb	r3, [r7, #11]
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040be:	9302      	str	r3, [sp, #8]
 80040c0:	893b      	ldrh	r3, [r7, #8]
 80040c2:	9301      	str	r3, [sp, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	2301      	movs	r3, #1
 80040ca:	21b9      	movs	r1, #185	; 0xb9
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f002 f997 	bl	8006400 <HAL_I2C_Mem_Read>
  return 0;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <MRT_LPS22HH_Setup>:


stmdev_ctx_t  MRT_LPS22HH_Setup(I2C_HandleTypeDef* SENSOR_BUS, uint8_t LPS_ID){
 80040dc:	b590      	push	{r4, r7, lr}
 80040de:	b08d      	sub	sp, #52	; 0x34
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	4613      	mov	r3, r2
 80040e8:	71fb      	strb	r3, [r7, #7]
	  println("LPS22HH Setup Starts");
 80040ea:	4833      	ldr	r0, [pc, #204]	; (80041b8 <MRT_LPS22HH_Setup+0xdc>)
 80040ec:	f7fc ff8e 	bl	800100c <println>

	  stmdev_ctx_t lps_ctx;

	  lps22hh_reg_t reg;
	  /* Initialize mems driver interface */
	  lps_ctx.write_reg = lps_write;
 80040f0:	4b32      	ldr	r3, [pc, #200]	; (80041bc <MRT_LPS22HH_Setup+0xe0>)
 80040f2:	627b      	str	r3, [r7, #36]	; 0x24
	  lps_ctx.read_reg = lps_read;
 80040f4:	4b32      	ldr	r3, [pc, #200]	; (80041c0 <MRT_LPS22HH_Setup+0xe4>)
 80040f6:	62bb      	str	r3, [r7, #40]	; 0x28
	  lps_ctx.handle = SENSOR_BUS;
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	  /* Wait sensor boot time */
	  HAL_Delay(LPS22HH_BOOT_TIME);
 80040fc:	2064      	movs	r0, #100	; 0x64
 80040fe:	f001 f9df 	bl	80054c0 <HAL_Delay>
	  /* Check device ID */
	  lps_whoamI = 0;
 8004102:	4b30      	ldr	r3, [pc, #192]	; (80041c4 <MRT_LPS22HH_Setup+0xe8>)
 8004104:	2200      	movs	r2, #0
 8004106:	701a      	strb	r2, [r3, #0]
	  lps22hh_device_id_get(&lps_ctx, &lps_whoamI);
 8004108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800410c:	492d      	ldr	r1, [pc, #180]	; (80041c4 <MRT_LPS22HH_Setup+0xe8>)
 800410e:	4618      	mov	r0, r3
 8004110:	f000 fc6f 	bl	80049f2 <lps22hh_device_id_get>


	  print("Checking Sensor ID...");
 8004114:	482c      	ldr	r0, [pc, #176]	; (80041c8 <MRT_LPS22HH_Setup+0xec>)
 8004116:	f7fc ff97 	bl	8001048 <print>
	  //if ( lps_whoamI != LPS22HH_ID ){ ORIGINAL
	  if ( lps_whoamI != LPS_ID ){
 800411a:	4b2a      	ldr	r3, [pc, #168]	; (80041c4 <MRT_LPS22HH_Setup+0xe8>)
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	79fa      	ldrb	r2, [r7, #7]
 8004120:	429a      	cmp	r2, r3
 8004122:	d017      	beq.n	8004154 <MRT_LPS22HH_Setup+0x78>
		  println("NOT OK");
 8004124:	4829      	ldr	r0, [pc, #164]	; (80041cc <MRT_LPS22HH_Setup+0xf0>)
 8004126:	f7fc ff71 	bl	800100c <println>
		  print("This Device is: ");
 800412a:	4829      	ldr	r0, [pc, #164]	; (80041d0 <MRT_LPS22HH_Setup+0xf4>)
 800412c:	f7fc ff8c 	bl	8001048 <print>

		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lps_whoamI);
 8004130:	4b24      	ldr	r3, [pc, #144]	; (80041c4 <MRT_LPS22HH_Setup+0xe8>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	461a      	mov	r2, r3
 8004136:	f107 0314 	add.w	r3, r7, #20
 800413a:	4926      	ldr	r1, [pc, #152]	; (80041d4 <MRT_LPS22HH_Setup+0xf8>)
 800413c:	4618      	mov	r0, r3
 800413e:	f00f fdd1 	bl	8013ce4 <siprintf>
		  print(buffer);
 8004142:	f107 0314 	add.w	r3, r7, #20
 8004146:	4618      	mov	r0, r3
 8004148:	f7fc ff7e 	bl	8001048 <print>

		  println("\n\rProgram Terminated\n\r");
 800414c:	4822      	ldr	r0, [pc, #136]	; (80041d8 <MRT_LPS22HH_Setup+0xfc>)
 800414e:	f7fc ff5d 	bl	800100c <println>
		  while(1);
 8004152:	e7fe      	b.n	8004152 <MRT_LPS22HH_Setup+0x76>
	  }
	  println("OK");
 8004154:	4821      	ldr	r0, [pc, #132]	; (80041dc <MRT_LPS22HH_Setup+0x100>)
 8004156:	f7fc ff59 	bl	800100c <println>

	  /* Restore default configuration */
	  lps22hh_reset_set(&lps_ctx, PROPERTY_ENABLE);
 800415a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800415e:	2101      	movs	r1, #1
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fc57 	bl	8004a14 <lps22hh_reset_set>
	  HAL_Delay(500);
 8004166:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800416a:	f001 f9a9 	bl	80054c0 <HAL_Delay>
	  do {
	    lps22hh_reset_get(&lps_ctx, &lps_rst);
 800416e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004172:	491b      	ldr	r1, [pc, #108]	; (80041e0 <MRT_LPS22HH_Setup+0x104>)
 8004174:	4618      	mov	r0, r3
 8004176:	f000 fc73 	bl	8004a60 <lps22hh_reset_get>
	  } while (lps_rst);
 800417a:	4b19      	ldr	r3, [pc, #100]	; (80041e0 <MRT_LPS22HH_Setup+0x104>)
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1f5      	bne.n	800416e <MRT_LPS22HH_Setup+0x92>


	  /* Enable Block Data Update */
	  lps22hh_block_data_update_set(&lps_ctx, PROPERTY_ENABLE);
 8004182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004186:	2101      	movs	r1, #1
 8004188:	4618      	mov	r0, r3
 800418a:	f000 fb59 	bl	8004840 <lps22hh_block_data_update_set>

	  /* Set Output Data Rate */
	  lps22hh_data_rate_set(&lps_ctx, LPS22HH_75_Hz_LOW_NOISE);
 800418e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004192:	2115      	movs	r1, #21
 8004194:	4618      	mov	r0, r3
 8004196:	f000 fb79 	bl	800488c <lps22hh_data_rate_set>
	  println("LPS22HH Setup Ends");
 800419a:	4812      	ldr	r0, [pc, #72]	; (80041e4 <MRT_LPS22HH_Setup+0x108>)
 800419c:	f7fc ff36 	bl	800100c <println>

	  return lps_ctx;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	461c      	mov	r4, r3
 80041a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80041ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	}
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	3734      	adds	r7, #52	; 0x34
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd90      	pop	{r4, r7, pc}
 80041b8:	08018b94 	.word	0x08018b94
 80041bc:	08004069 	.word	0x08004069
 80041c0:	080040a3 	.word	0x080040a3
 80041c4:	20005f8c 	.word	0x20005f8c
 80041c8:	08018b28 	.word	0x08018b28
 80041cc:	08018b40 	.word	0x08018b40
 80041d0:	08018b48 	.word	0x08018b48
 80041d4:	08018b5c 	.word	0x08018b5c
 80041d8:	08018b64 	.word	0x08018b64
 80041dc:	08018b7c 	.word	0x08018b7c
 80041e0:	20005f48 	.word	0x20005f48
 80041e4:	08018bac 	.word	0x08018bac

080041e8 <MRT_LPS22HH_getPressure>:



void MRT_LPS22HH_getPressure(stmdev_ctx_t lps_ctx,float* pressure){
 80041e8:	b590      	push	{r4, r7, lr}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	1d3c      	adds	r4, r7, #4
 80041f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80041f4:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 80041f6:	f107 0214 	add.w	r2, r7, #20
 80041fa:	1d38      	adds	r0, r7, #4
 80041fc:	2301      	movs	r3, #1
 80041fe:	2127      	movs	r1, #39	; 0x27
 8004200:	f000 fabc 	bl	800477c <lps22hh_read_reg>

	//uint8_t reg;
	//lps22hh_press_flag_data_ready_get(&lps_ctx, &reg);

	if (reg.status.p_da) {
 8004204:	7d3b      	ldrb	r3, [r7, #20]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	d011      	beq.n	8004234 <MRT_LPS22HH_getPressure+0x4c>
 8004210:	4b0a      	ldr	r3, [pc, #40]	; (800423c <MRT_LPS22HH_getPressure+0x54>)
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]
	//if (reg) {
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t)); //TODO CAN CAUSE AN HARDFAULT
	  lps22hh_pressure_raw_get(&lps_ctx, &data_raw_pressure);
 8004216:	1d3b      	adds	r3, r7, #4
 8004218:	4908      	ldr	r1, [pc, #32]	; (800423c <MRT_LPS22HH_getPressure+0x54>)
 800421a:	4618      	mov	r0, r3
 800421c:	f000 fb9d 	bl	800495a <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8004220:	4b06      	ldr	r3, [pc, #24]	; (800423c <MRT_LPS22HH_getPressure+0x54>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4618      	mov	r0, r3
 8004226:	f000 fad9 	bl	80047dc <lps22hh_from_lsb_to_hpa>
 800422a:	eef0 7a40 	vmov.f32	s15, s0
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8004234:	bf00      	nop
 8004236:	371c      	adds	r7, #28
 8004238:	46bd      	mov	sp, r7
 800423a:	bd90      	pop	{r4, r7, pc}
 800423c:	20005f98 	.word	0x20005f98

08004240 <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(stmdev_ctx_t lps_ctx,float* temperature_degC){
 8004240:	b590      	push	{r4, r7, lr}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	1d3c      	adds	r4, r7, #4
 8004248:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800424c:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	//lps22hh_reg_t reg;
	//lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);

	uint8_t reg;
	lps22hh_temp_flag_data_ready_get(&lps_ctx, &reg);
 800424e:	f107 0217 	add.w	r2, r7, #23
 8004252:	1d3b      	adds	r3, r7, #4
 8004254:	4611      	mov	r1, r2
 8004256:	4618      	mov	r0, r3
 8004258:	f000 fb66 	bl	8004928 <lps22hh_temp_flag_data_ready_get>

	//if (reg.status.t_da) {
	if (reg) {
 800425c:	7dfb      	ldrb	r3, [r7, #23]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d012      	beq.n	8004288 <MRT_LPS22HH_getTemperature+0x48>
 8004262:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <MRT_LPS22HH_getTemperature+0x50>)
 8004264:	2200      	movs	r2, #0
 8004266:	801a      	strh	r2, [r3, #0]
	  memset(&lps_data_raw_temperature, 0x00, sizeof(int16_t));
	  lps22hh_temperature_raw_get(&lps_ctx, &lps_data_raw_temperature);
 8004268:	1d3b      	adds	r3, r7, #4
 800426a:	4909      	ldr	r1, [pc, #36]	; (8004290 <MRT_LPS22HH_getTemperature+0x50>)
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fb9d 	bl	80049ac <lps22hh_temperature_raw_get>
	  *temperature_degC = lps22hh_from_lsb_to_celsius(lps_data_raw_temperature);
 8004272:	4b07      	ldr	r3, [pc, #28]	; (8004290 <MRT_LPS22HH_getTemperature+0x50>)
 8004274:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004278:	4618      	mov	r0, r3
 800427a:	f000 fac7 	bl	800480c <lps22hh_from_lsb_to_celsius>
 800427e:	eef0 7a40 	vmov.f32	s15, s0
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8004288:	bf00      	nop
 800428a:	371c      	adds	r7, #28
 800428c:	46bd      	mov	sp, r7
 800428e:	bd90      	pop	{r4, r7, pc}
 8004290:	20005f7c 	.word	0x20005f7c

08004294 <GPS_Poll>:
UART_HandleTypeDef* SERIAL_USART;



void GPS_Poll(float *latitude, float *longitude, float *time)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b08c      	sub	sp, #48	; 0x30
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 80042a0:	2364      	movs	r3, #100	; 0x64
 80042a2:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 80042a4:	2300      	movs	r3, #0
 80042a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 80042a8:	2300      	movs	r3, #0
 80042aa:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 80042ac:	e073      	b.n	8004396 <GPS_Poll+0x102>
		HAL_UART_Receive(GPS_USART, (uint8_t*)&rx_current, 1, 100);
 80042ae:	4b3f      	ldr	r3, [pc, #252]	; (80043ac <GPS_Poll+0x118>)
 80042b0:	6818      	ldr	r0, [r3, #0]
 80042b2:	2364      	movs	r3, #100	; 0x64
 80042b4:	2201      	movs	r2, #1
 80042b6:	493e      	ldr	r1, [pc, #248]	; (80043b0 <GPS_Poll+0x11c>)
 80042b8:	f006 ff9f 	bl	800b1fa <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 80042bc:	4b3c      	ldr	r3, [pc, #240]	; (80043b0 <GPS_Poll+0x11c>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	2b0a      	cmp	r3, #10
 80042c2:	d00f      	beq.n	80042e4 <GPS_Poll+0x50>
 80042c4:	4b3b      	ldr	r3, [pc, #236]	; (80043b4 <GPS_Poll+0x120>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	2b63      	cmp	r3, #99	; 0x63
 80042ca:	d80b      	bhi.n	80042e4 <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 80042cc:	4b39      	ldr	r3, [pc, #228]	; (80043b4 <GPS_Poll+0x120>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	1c5a      	adds	r2, r3, #1
 80042d2:	b2d1      	uxtb	r1, r2
 80042d4:	4a37      	ldr	r2, [pc, #220]	; (80043b4 <GPS_Poll+0x120>)
 80042d6:	7011      	strb	r1, [r2, #0]
 80042d8:	461a      	mov	r2, r3
 80042da:	4b35      	ldr	r3, [pc, #212]	; (80043b0 <GPS_Poll+0x11c>)
 80042dc:	7819      	ldrb	r1, [r3, #0]
 80042de:	4b36      	ldr	r3, [pc, #216]	; (80043b8 <GPS_Poll+0x124>)
 80042e0:	5499      	strb	r1, [r3, r2]
 80042e2:	e021      	b.n	8004328 <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 80042e4:	4834      	ldr	r0, [pc, #208]	; (80043b8 <GPS_Poll+0x124>)
 80042e6:	f000 f86b 	bl	80043c0 <GPS_validate>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d013      	beq.n	8004318 <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 80042f0:	4831      	ldr	r0, [pc, #196]	; (80043b8 <GPS_Poll+0x124>)
 80042f2:	f000 f8c7 	bl	8004484 <GPS_parse>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00d      	beq.n	8004318 <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 80042fc:	4b2f      	ldr	r3, [pc, #188]	; (80043bc <GPS_Poll+0x128>)
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 8004304:	4b2d      	ldr	r3, [pc, #180]	; (80043bc <GPS_Poll+0x128>)
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 800430c:	4b2b      	ldr	r3, [pc, #172]	; (80043bc <GPS_Poll+0x128>)
 800430e:	695a      	ldr	r2, [r3, #20]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	601a      	str	r2, [r3, #0]
					done = 1;
 8004314:	2301      	movs	r3, #1
 8004316:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 8004318:	4b26      	ldr	r3, [pc, #152]	; (80043b4 <GPS_Poll+0x120>)
 800431a:	2200      	movs	r2, #0
 800431c:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 800431e:	2264      	movs	r2, #100	; 0x64
 8004320:	2100      	movs	r1, #0
 8004322:	4825      	ldr	r0, [pc, #148]	; (80043b8 <GPS_Poll+0x124>)
 8004324:	f00e fd5d 	bl	8012de2 <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS_USART);
 8004328:	2300      	movs	r3, #0
 800432a:	623b      	str	r3, [r7, #32]
 800432c:	4b1f      	ldr	r3, [pc, #124]	; (80043ac <GPS_Poll+0x118>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	623b      	str	r3, [r7, #32]
 8004336:	4b1d      	ldr	r3, [pc, #116]	; (80043ac <GPS_Poll+0x118>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	623b      	str	r3, [r7, #32]
 8004340:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS_USART);
 8004342:	2300      	movs	r3, #0
 8004344:	61fb      	str	r3, [r7, #28]
 8004346:	4b19      	ldr	r3, [pc, #100]	; (80043ac <GPS_Poll+0x118>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	61fb      	str	r3, [r7, #28]
 8004350:	4b16      	ldr	r3, [pc, #88]	; (80043ac <GPS_Poll+0x118>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	61fb      	str	r3, [r7, #28]
 800435a:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS_USART);
 800435c:	2300      	movs	r3, #0
 800435e:	61bb      	str	r3, [r7, #24]
 8004360:	4b12      	ldr	r3, [pc, #72]	; (80043ac <GPS_Poll+0x118>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	61bb      	str	r3, [r7, #24]
 800436a:	4b10      	ldr	r3, [pc, #64]	; (80043ac <GPS_Poll+0x118>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	61bb      	str	r3, [r7, #24]
 8004374:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS_USART);
 8004376:	2300      	movs	r3, #0
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	4b0c      	ldr	r3, [pc, #48]	; (80043ac <GPS_Poll+0x118>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	4b09      	ldr	r3, [pc, #36]	; (80043ac <GPS_Poll+0x118>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	617b      	str	r3, [r7, #20]
 800438e:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 8004390:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004392:	3301      	adds	r3, #1
 8004394:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 8004396:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004398:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800439a:	429a      	cmp	r2, r3
 800439c:	d202      	bcs.n	80043a4 <GPS_Poll+0x110>
 800439e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d084      	beq.n	80042ae <GPS_Poll+0x1a>
	}
}
 80043a4:	bf00      	nop
 80043a6:	3730      	adds	r7, #48	; 0x30
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	20004f34 	.word	0x20004f34
 80043b0:	200003c0 	.word	0x200003c0
 80043b4:	200003c1 	.word	0x200003c1
 80043b8:	20005ff4 	.word	0x20005ff4
 80043bc:	20005f9c 	.word	0x20005f9c

080043c0 <GPS_validate>:

int GPS_validate(char *nmeastr){
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 80043c8:	2300      	movs	r3, #0
 80043ca:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 80043cc:	2300      	movs	r3, #0
 80043ce:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	4413      	add	r3, r2
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	2b24      	cmp	r3, #36	; 0x24
 80043da:	d103      	bne.n	80043e4 <GPS_validate+0x24>
        i++;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	3301      	adds	r3, #1
 80043e0:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80043e2:	e00c      	b.n	80043fe <GPS_validate+0x3e>
        return 0;
 80043e4:	2300      	movs	r3, #0
 80043e6:	e047      	b.n	8004478 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	4413      	add	r3, r2
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	4053      	eors	r3, r2
 80043f6:	613b      	str	r3, [r7, #16]
        i++;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	3301      	adds	r3, #1
 80043fc:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	4413      	add	r3, r2
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d008      	beq.n	800441c <GPS_validate+0x5c>
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	4413      	add	r3, r2
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	2b2a      	cmp	r3, #42	; 0x2a
 8004414:	d002      	beq.n	800441c <GPS_validate+0x5c>
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2b4a      	cmp	r3, #74	; 0x4a
 800441a:	dde5      	ble.n	80043e8 <GPS_validate+0x28>
    }

    if(i >= 75){
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	2b4a      	cmp	r3, #74	; 0x4a
 8004420:	dd01      	ble.n	8004426 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 8004422:	2300      	movs	r3, #0
 8004424:	e028      	b.n	8004478 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	4413      	add	r3, r2
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	2b2a      	cmp	r3, #42	; 0x2a
 8004430:	d119      	bne.n	8004466 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	3301      	adds	r3, #1
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	4413      	add	r3, r2
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	3302      	adds	r3, #2
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	4413      	add	r3, r2
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 800444a:	2300      	movs	r3, #0
 800444c:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 800444e:	f107 0308 	add.w	r3, r7, #8
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	490a      	ldr	r1, [pc, #40]	; (8004480 <GPS_validate+0xc0>)
 8004456:	4618      	mov	r0, r3
 8004458:	f00f fc44 	bl	8013ce4 <siprintf>
    return((checkcalcstr[0] == check[0])
 800445c:	7a3a      	ldrb	r2, [r7, #8]
 800445e:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8004460:	429a      	cmp	r2, r3
 8004462:	d108      	bne.n	8004476 <GPS_validate+0xb6>
 8004464:	e001      	b.n	800446a <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8004466:	2300      	movs	r3, #0
 8004468:	e006      	b.n	8004478 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800446a:	7a7a      	ldrb	r2, [r7, #9]
 800446c:	7b7b      	ldrb	r3, [r7, #13]
 800446e:	429a      	cmp	r2, r3
 8004470:	d101      	bne.n	8004476 <GPS_validate+0xb6>
 8004472:	2301      	movs	r3, #1
 8004474:	e000      	b.n	8004478 <GPS_validate+0xb8>
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3718      	adds	r7, #24
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	08018bc0 	.word	0x08018bc0

08004484 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 8004484:	b580      	push	{r7, lr}
 8004486:	b08a      	sub	sp, #40	; 0x28
 8004488:	af08      	add	r7, sp, #32
 800448a:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 800448c:	2206      	movs	r2, #6
 800448e:	496d      	ldr	r1, [pc, #436]	; (8004644 <GPS_parse+0x1c0>)
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f00f fcc0 	bl	8013e16 <strncmp>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d139      	bne.n	8004510 <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 800449c:	4b6a      	ldr	r3, [pc, #424]	; (8004648 <GPS_parse+0x1c4>)
 800449e:	9307      	str	r3, [sp, #28]
 80044a0:	4b6a      	ldr	r3, [pc, #424]	; (800464c <GPS_parse+0x1c8>)
 80044a2:	9306      	str	r3, [sp, #24]
 80044a4:	4b6a      	ldr	r3, [pc, #424]	; (8004650 <GPS_parse+0x1cc>)
 80044a6:	9305      	str	r3, [sp, #20]
 80044a8:	4b6a      	ldr	r3, [pc, #424]	; (8004654 <GPS_parse+0x1d0>)
 80044aa:	9304      	str	r3, [sp, #16]
 80044ac:	4b6a      	ldr	r3, [pc, #424]	; (8004658 <GPS_parse+0x1d4>)
 80044ae:	9303      	str	r3, [sp, #12]
 80044b0:	4b6a      	ldr	r3, [pc, #424]	; (800465c <GPS_parse+0x1d8>)
 80044b2:	9302      	str	r3, [sp, #8]
 80044b4:	4b6a      	ldr	r3, [pc, #424]	; (8004660 <GPS_parse+0x1dc>)
 80044b6:	9301      	str	r3, [sp, #4]
 80044b8:	4b6a      	ldr	r3, [pc, #424]	; (8004664 <GPS_parse+0x1e0>)
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	4b6a      	ldr	r3, [pc, #424]	; (8004668 <GPS_parse+0x1e4>)
 80044be:	4a6b      	ldr	r2, [pc, #428]	; (800466c <GPS_parse+0x1e8>)
 80044c0:	496b      	ldr	r1, [pc, #428]	; (8004670 <GPS_parse+0x1ec>)
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f00f fc2e 	bl	8013d24 <siscanf>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f340 80b5 	ble.w	800463a <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80044d0:	4b68      	ldr	r3, [pc, #416]	; (8004674 <GPS_parse+0x1f0>)
 80044d2:	edd3 7a04 	vldr	s15, [r3, #16]
 80044d6:	4b67      	ldr	r3, [pc, #412]	; (8004674 <GPS_parse+0x1f0>)
 80044d8:	7e1b      	ldrb	r3, [r3, #24]
 80044da:	4618      	mov	r0, r3
 80044dc:	eeb0 0a67 	vmov.f32	s0, s15
 80044e0:	f000 f8ec 	bl	80046bc <GPS_nmea_to_dec>
 80044e4:	eef0 7a40 	vmov.f32	s15, s0
 80044e8:	4b62      	ldr	r3, [pc, #392]	; (8004674 <GPS_parse+0x1f0>)
 80044ea:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80044ee:	4b61      	ldr	r3, [pc, #388]	; (8004674 <GPS_parse+0x1f0>)
 80044f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80044f4:	4b5f      	ldr	r3, [pc, #380]	; (8004674 <GPS_parse+0x1f0>)
 80044f6:	7e5b      	ldrb	r3, [r3, #25]
 80044f8:	4618      	mov	r0, r3
 80044fa:	eeb0 0a67 	vmov.f32	s0, s15
 80044fe:	f000 f8dd 	bl	80046bc <GPS_nmea_to_dec>
 8004502:	eef0 7a40 	vmov.f32	s15, s0
 8004506:	4b5b      	ldr	r3, [pc, #364]	; (8004674 <GPS_parse+0x1f0>)
 8004508:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 800450c:	2301      	movs	r3, #1
 800450e:	e095      	b.n	800463c <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 8004510:	2206      	movs	r2, #6
 8004512:	4959      	ldr	r1, [pc, #356]	; (8004678 <GPS_parse+0x1f4>)
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f00f fc7e 	bl	8013e16 <strncmp>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d134      	bne.n	800458a <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 8004520:	4b56      	ldr	r3, [pc, #344]	; (800467c <GPS_parse+0x1f8>)
 8004522:	9305      	str	r3, [sp, #20]
 8004524:	4b56      	ldr	r3, [pc, #344]	; (8004680 <GPS_parse+0x1fc>)
 8004526:	9304      	str	r3, [sp, #16]
 8004528:	4b56      	ldr	r3, [pc, #344]	; (8004684 <GPS_parse+0x200>)
 800452a:	9303      	str	r3, [sp, #12]
 800452c:	4b4b      	ldr	r3, [pc, #300]	; (800465c <GPS_parse+0x1d8>)
 800452e:	9302      	str	r3, [sp, #8]
 8004530:	4b4b      	ldr	r3, [pc, #300]	; (8004660 <GPS_parse+0x1dc>)
 8004532:	9301      	str	r3, [sp, #4]
 8004534:	4b4b      	ldr	r3, [pc, #300]	; (8004664 <GPS_parse+0x1e0>)
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	4b4b      	ldr	r3, [pc, #300]	; (8004668 <GPS_parse+0x1e4>)
 800453a:	4a4c      	ldr	r2, [pc, #304]	; (800466c <GPS_parse+0x1e8>)
 800453c:	4952      	ldr	r1, [pc, #328]	; (8004688 <GPS_parse+0x204>)
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f00f fbf0 	bl	8013d24 <siscanf>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	dd77      	ble.n	800463a <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800454a:	4b4a      	ldr	r3, [pc, #296]	; (8004674 <GPS_parse+0x1f0>)
 800454c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004550:	4b48      	ldr	r3, [pc, #288]	; (8004674 <GPS_parse+0x1f0>)
 8004552:	7e1b      	ldrb	r3, [r3, #24]
 8004554:	4618      	mov	r0, r3
 8004556:	eeb0 0a67 	vmov.f32	s0, s15
 800455a:	f000 f8af 	bl	80046bc <GPS_nmea_to_dec>
 800455e:	eef0 7a40 	vmov.f32	s15, s0
 8004562:	4b44      	ldr	r3, [pc, #272]	; (8004674 <GPS_parse+0x1f0>)
 8004564:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8004568:	4b42      	ldr	r3, [pc, #264]	; (8004674 <GPS_parse+0x1f0>)
 800456a:	edd3 7a03 	vldr	s15, [r3, #12]
 800456e:	4b41      	ldr	r3, [pc, #260]	; (8004674 <GPS_parse+0x1f0>)
 8004570:	7e5b      	ldrb	r3, [r3, #25]
 8004572:	4618      	mov	r0, r3
 8004574:	eeb0 0a67 	vmov.f32	s0, s15
 8004578:	f000 f8a0 	bl	80046bc <GPS_nmea_to_dec>
 800457c:	eef0 7a40 	vmov.f32	s15, s0
 8004580:	4b3c      	ldr	r3, [pc, #240]	; (8004674 <GPS_parse+0x1f0>)
 8004582:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8004586:	2301      	movs	r3, #1
 8004588:	e058      	b.n	800463c <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 800458a:	2206      	movs	r2, #6
 800458c:	493f      	ldr	r1, [pc, #252]	; (800468c <GPS_parse+0x208>)
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f00f fc41 	bl	8013e16 <strncmp>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d130      	bne.n	80045fc <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 800459a:	4b3d      	ldr	r3, [pc, #244]	; (8004690 <GPS_parse+0x20c>)
 800459c:	9303      	str	r3, [sp, #12]
 800459e:	4b33      	ldr	r3, [pc, #204]	; (800466c <GPS_parse+0x1e8>)
 80045a0:	9302      	str	r3, [sp, #8]
 80045a2:	4b2e      	ldr	r3, [pc, #184]	; (800465c <GPS_parse+0x1d8>)
 80045a4:	9301      	str	r3, [sp, #4]
 80045a6:	4b2e      	ldr	r3, [pc, #184]	; (8004660 <GPS_parse+0x1dc>)
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	4b2e      	ldr	r3, [pc, #184]	; (8004664 <GPS_parse+0x1e0>)
 80045ac:	4a2e      	ldr	r2, [pc, #184]	; (8004668 <GPS_parse+0x1e4>)
 80045ae:	4939      	ldr	r1, [pc, #228]	; (8004694 <GPS_parse+0x210>)
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f00f fbb7 	bl	8013d24 <siscanf>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	dd3e      	ble.n	800463a <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80045bc:	4b2d      	ldr	r3, [pc, #180]	; (8004674 <GPS_parse+0x1f0>)
 80045be:	edd3 7a04 	vldr	s15, [r3, #16]
 80045c2:	4b2c      	ldr	r3, [pc, #176]	; (8004674 <GPS_parse+0x1f0>)
 80045c4:	7e1b      	ldrb	r3, [r3, #24]
 80045c6:	4618      	mov	r0, r3
 80045c8:	eeb0 0a67 	vmov.f32	s0, s15
 80045cc:	f000 f876 	bl	80046bc <GPS_nmea_to_dec>
 80045d0:	eef0 7a40 	vmov.f32	s15, s0
 80045d4:	4b27      	ldr	r3, [pc, #156]	; (8004674 <GPS_parse+0x1f0>)
 80045d6:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80045da:	4b26      	ldr	r3, [pc, #152]	; (8004674 <GPS_parse+0x1f0>)
 80045dc:	edd3 7a03 	vldr	s15, [r3, #12]
 80045e0:	4b24      	ldr	r3, [pc, #144]	; (8004674 <GPS_parse+0x1f0>)
 80045e2:	7e5b      	ldrb	r3, [r3, #25]
 80045e4:	4618      	mov	r0, r3
 80045e6:	eeb0 0a67 	vmov.f32	s0, s15
 80045ea:	f000 f867 	bl	80046bc <GPS_nmea_to_dec>
 80045ee:	eef0 7a40 	vmov.f32	s15, s0
 80045f2:	4b20      	ldr	r3, [pc, #128]	; (8004674 <GPS_parse+0x1f0>)
 80045f4:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e01f      	b.n	800463c <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 80045fc:	2206      	movs	r2, #6
 80045fe:	4926      	ldr	r1, [pc, #152]	; (8004698 <GPS_parse+0x214>)
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f00f fc08 	bl	8013e16 <strncmp>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d116      	bne.n	800463a <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 800460c:	4b23      	ldr	r3, [pc, #140]	; (800469c <GPS_parse+0x218>)
 800460e:	9305      	str	r3, [sp, #20]
 8004610:	4b23      	ldr	r3, [pc, #140]	; (80046a0 <GPS_parse+0x21c>)
 8004612:	9304      	str	r3, [sp, #16]
 8004614:	4b23      	ldr	r3, [pc, #140]	; (80046a4 <GPS_parse+0x220>)
 8004616:	9303      	str	r3, [sp, #12]
 8004618:	4b1a      	ldr	r3, [pc, #104]	; (8004684 <GPS_parse+0x200>)
 800461a:	9302      	str	r3, [sp, #8]
 800461c:	4b22      	ldr	r3, [pc, #136]	; (80046a8 <GPS_parse+0x224>)
 800461e:	9301      	str	r3, [sp, #4]
 8004620:	4b22      	ldr	r3, [pc, #136]	; (80046ac <GPS_parse+0x228>)
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	4b22      	ldr	r3, [pc, #136]	; (80046b0 <GPS_parse+0x22c>)
 8004626:	4a23      	ldr	r2, [pc, #140]	; (80046b4 <GPS_parse+0x230>)
 8004628:	4923      	ldr	r1, [pc, #140]	; (80046b8 <GPS_parse+0x234>)
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f00f fb7a 	bl	8013d24 <siscanf>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	dd01      	ble.n	800463a <GPS_parse+0x1b6>
            return 0;
 8004636:	2300      	movs	r3, #0
 8004638:	e000      	b.n	800463c <GPS_parse+0x1b8>
    }
    return 0;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	08018bc8 	.word	0x08018bc8
 8004648:	20005fc8 	.word	0x20005fc8
 800464c:	20005fc4 	.word	0x20005fc4
 8004650:	20005fc0 	.word	0x20005fc0
 8004654:	20005fbc 	.word	0x20005fbc
 8004658:	20005fb8 	.word	0x20005fb8
 800465c:	20005fb5 	.word	0x20005fb5
 8004660:	20005fa8 	.word	0x20005fa8
 8004664:	20005fb4 	.word	0x20005fb4
 8004668:	20005fac 	.word	0x20005fac
 800466c:	20005fb0 	.word	0x20005fb0
 8004670:	08018bd0 	.word	0x08018bd0
 8004674:	20005f9c 	.word	0x20005f9c
 8004678:	08018bf8 	.word	0x08018bf8
 800467c:	20005fd4 	.word	0x20005fd4
 8004680:	20005fd0 	.word	0x20005fd0
 8004684:	20005fcc 	.word	0x20005fcc
 8004688:	08018c00 	.word	0x08018c00
 800468c:	08018c20 	.word	0x08018c20
 8004690:	20005fd8 	.word	0x20005fd8
 8004694:	08018c28 	.word	0x08018c28
 8004698:	08018c44 	.word	0x08018c44
 800469c:	20005ff0 	.word	0x20005ff0
 80046a0:	20005fec 	.word	0x20005fec
 80046a4:	20005fe9 	.word	0x20005fe9
 80046a8:	20005fe8 	.word	0x20005fe8
 80046ac:	20005fe4 	.word	0x20005fe4
 80046b0:	20005fe0 	.word	0x20005fe0
 80046b4:	20005fdc 	.word	0x20005fdc
 80046b8:	08018c4c 	.word	0x08018c4c

080046bc <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 80046bc:	b480      	push	{r7}
 80046be:	b087      	sub	sp, #28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80046c6:	4603      	mov	r3, r0
 80046c8:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 80046ca:	ed97 7a01 	vldr	s14, [r7, #4]
 80046ce:	eddf 6a20 	vldr	s13, [pc, #128]	; 8004750 <GPS_nmea_to_dec+0x94>
 80046d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046da:	ee17 3a90 	vmov	r3, s15
 80046de:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	2264      	movs	r2, #100	; 0x64
 80046e4:	fb02 f303 	mul.w	r3, r2, r3
 80046e8:	ee07 3a90 	vmov	s15, r3
 80046ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046f0:	ed97 7a01 	vldr	s14, [r7, #4]
 80046f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046f8:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 80046fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8004700:	eddf 6a14 	vldr	s13, [pc, #80]	; 8004754 <GPS_nmea_to_dec+0x98>
 8004704:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004708:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	ee07 3a90 	vmov	s15, r3
 8004712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004716:	ed97 7a02 	vldr	s14, [r7, #8]
 800471a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800471e:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8004722:	78fb      	ldrb	r3, [r7, #3]
 8004724:	2b53      	cmp	r3, #83	; 0x53
 8004726:	d002      	beq.n	800472e <GPS_nmea_to_dec+0x72>
 8004728:	78fb      	ldrb	r3, [r7, #3]
 800472a:	2b57      	cmp	r3, #87	; 0x57
 800472c:	d105      	bne.n	800473a <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 800472e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004732:	eef1 7a67 	vneg.f32	s15, s15
 8004736:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	ee07 3a90 	vmov	s15, r3
}
 8004740:	eeb0 0a67 	vmov.f32	s0, s15
 8004744:	371c      	adds	r7, #28
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	42c80000 	.word	0x42c80000
 8004754:	42700000 	.word	0x42700000

08004758 <GPS_init>:
		}
	}
}


void GPS_init(UART_HandleTypeDef* data_uart){
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
	GPS_USART = data_uart;
 8004760:	4a04      	ldr	r2, [pc, #16]	; (8004774 <GPS_init+0x1c>)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6013      	str	r3, [r2, #0]
	print("GPS Init\r\n");
 8004766:	4804      	ldr	r0, [pc, #16]	; (8004778 <GPS_init+0x20>)
 8004768:	f7fc fc6e 	bl	8001048 <print>
}
 800476c:	bf00      	nop
 800476e:	3708      	adds	r7, #8
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	20004f34 	.word	0x20004f34
 8004778:	08018c6c 	.word	0x08018c6c

0800477c <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800477c:	b590      	push	{r4, r7, lr}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	607a      	str	r2, [r7, #4]
 8004786:	461a      	mov	r2, r3
 8004788:	460b      	mov	r3, r1
 800478a:	72fb      	strb	r3, [r7, #11]
 800478c:	4613      	mov	r3, r2
 800478e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	685c      	ldr	r4, [r3, #4]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6898      	ldr	r0, [r3, #8]
 8004798:	893b      	ldrh	r3, [r7, #8]
 800479a:	7af9      	ldrb	r1, [r7, #11]
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	47a0      	blx	r4
 80047a0:	6178      	str	r0, [r7, #20]

  return ret;
 80047a2:	697b      	ldr	r3, [r7, #20]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	371c      	adds	r7, #28
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd90      	pop	{r4, r7, pc}

080047ac <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80047ac:	b590      	push	{r4, r7, lr}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	607a      	str	r2, [r7, #4]
 80047b6:	461a      	mov	r2, r3
 80047b8:	460b      	mov	r3, r1
 80047ba:	72fb      	strb	r3, [r7, #11]
 80047bc:	4613      	mov	r3, r2
 80047be:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681c      	ldr	r4, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6898      	ldr	r0, [r3, #8]
 80047c8:	893b      	ldrh	r3, [r7, #8]
 80047ca:	7af9      	ldrb	r1, [r7, #11]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	47a0      	blx	r4
 80047d0:	6178      	str	r0, [r7, #20]

  return ret;
 80047d2:	697b      	ldr	r3, [r7, #20]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	371c      	adds	r7, #28
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd90      	pop	{r4, r7, pc}

080047dc <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	ee07 3a90 	vmov	s15, r3
 80047ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ee:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004808 <lps22hh_from_lsb_to_hpa+0x2c>
 80047f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80047f6:	eef0 7a66 	vmov.f32	s15, s13
}
 80047fa:	eeb0 0a67 	vmov.f32	s0, s15
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	49800000 	.word	0x49800000

0800480c <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	4603      	mov	r3, r0
 8004814:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8004816:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004822:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800483c <lps22hh_from_lsb_to_celsius+0x30>
 8004826:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800482a:	eef0 7a66 	vmov.f32	s15, s13
}
 800482e:	eeb0 0a67 	vmov.f32	s0, s15
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	42c80000 	.word	0x42c80000

08004840 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	460b      	mov	r3, r1
 800484a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800484c:	f107 0208 	add.w	r2, r7, #8
 8004850:	2301      	movs	r3, #1
 8004852:	2110      	movs	r1, #16
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff ff91 	bl	800477c <lps22hh_read_reg>
 800485a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10f      	bne.n	8004882 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004862:	78fb      	ldrb	r3, [r7, #3]
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	b2da      	uxtb	r2, r3
 800486a:	7a3b      	ldrb	r3, [r7, #8]
 800486c:	f362 0341 	bfi	r3, r2, #1, #1
 8004870:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8004872:	f107 0208 	add.w	r2, r7, #8
 8004876:	2301      	movs	r3, #1
 8004878:	2110      	movs	r1, #16
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7ff ff96 	bl	80047ac <lps22hh_write_reg>
 8004880:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004882:	68fb      	ldr	r3, [r7, #12]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	460b      	mov	r3, r1
 8004896:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004898:	f107 0210 	add.w	r2, r7, #16
 800489c:	2301      	movs	r3, #1
 800489e:	2110      	movs	r1, #16
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f7ff ff6b 	bl	800477c <lps22hh_read_reg>
 80048a6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d107      	bne.n	80048be <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80048ae:	f107 020c 	add.w	r2, r7, #12
 80048b2:	2301      	movs	r3, #1
 80048b4:	2111      	movs	r1, #17
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff ff60 	bl	800477c <lps22hh_read_reg>
 80048bc:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10f      	bne.n	80048e4 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80048c4:	78fb      	ldrb	r3, [r7, #3]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	7c3b      	ldrb	r3, [r7, #16]
 80048ce:	f362 1306 	bfi	r3, r2, #4, #3
 80048d2:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80048d4:	f107 0210 	add.w	r2, r7, #16
 80048d8:	2301      	movs	r3, #1
 80048da:	2110      	movs	r1, #16
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7ff ff65 	bl	80047ac <lps22hh_write_reg>
 80048e2:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d119      	bne.n	800491e <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 80048ea:	78fb      	ldrb	r3, [r7, #3]
 80048ec:	091b      	lsrs	r3, r3, #4
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	7b3b      	ldrb	r3, [r7, #12]
 80048f6:	f362 0341 	bfi	r3, r2, #1, #1
 80048fa:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 80048fc:	78fb      	ldrb	r3, [r7, #3]
 80048fe:	08db      	lsrs	r3, r3, #3
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	b2da      	uxtb	r2, r3
 8004906:	7b3b      	ldrb	r3, [r7, #12]
 8004908:	f362 0300 	bfi	r3, r2, #0, #1
 800490c:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800490e:	f107 020c 	add.w	r2, r7, #12
 8004912:	2301      	movs	r3, #1
 8004914:	2111      	movs	r1, #17
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7ff ff48 	bl	80047ac <lps22hh_write_reg>
 800491c:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800491e:	697b      	ldr	r3, [r7, #20]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8004932:	f107 0208 	add.w	r2, r7, #8
 8004936:	2301      	movs	r3, #1
 8004938:	2127      	movs	r1, #39	; 0x27
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7ff ff1e 	bl	800477c <lps22hh_read_reg>
 8004940:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 8004942:	7a3b      	ldrb	r3, [r7, #8]
 8004944:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004948:	b2db      	uxtb	r3, r3
 800494a:	461a      	mov	r2, r3
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	701a      	strb	r2, [r3, #0]

  return ret;
 8004950:	68fb      	ldr	r3, [r7, #12]
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b084      	sub	sp, #16
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8004964:	f107 0208 	add.w	r2, r7, #8
 8004968:	2303      	movs	r3, #3
 800496a:	2128      	movs	r1, #40	; 0x28
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7ff ff05 	bl	800477c <lps22hh_read_reg>
 8004972:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8004974:	7abb      	ldrb	r3, [r7, #10]
 8004976:	461a      	mov	r2, r3
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	021b      	lsls	r3, r3, #8
 8004982:	7a7a      	ldrb	r2, [r7, #9]
 8004984:	441a      	add	r2, r3
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	021b      	lsls	r3, r3, #8
 8004990:	7a3a      	ldrb	r2, [r7, #8]
 8004992:	441a      	add	r2, r3
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	021a      	lsls	r2, r3, #8
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	601a      	str	r2, [r3, #0]

  return ret;
 80049a2:	68fb      	ldr	r3, [r7, #12]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 80049b6:	f107 0208 	add.w	r2, r7, #8
 80049ba:	2302      	movs	r3, #2
 80049bc:	212b      	movs	r1, #43	; 0x2b
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7ff fedc 	bl	800477c <lps22hh_read_reg>
 80049c4:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 80049c6:	7a7b      	ldrb	r3, [r7, #9]
 80049c8:	b21a      	sxth	r2, r3
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	021b      	lsls	r3, r3, #8
 80049d8:	b29a      	uxth	r2, r3
 80049da:	7a3b      	ldrb	r3, [r7, #8]
 80049dc:	b29b      	uxth	r3, r3
 80049de:	4413      	add	r3, r2
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	b21a      	sxth	r2, r3
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	801a      	strh	r2, [r3, #0]

  return ret;
 80049e8:	68fb      	ldr	r3, [r7, #12]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b084      	sub	sp, #16
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 80049fc:	2301      	movs	r3, #1
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	210f      	movs	r1, #15
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7ff feba 	bl	800477c <lps22hh_read_reg>
 8004a08:	60f8      	str	r0, [r7, #12]

  return ret;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8004a20:	f107 0208 	add.w	r2, r7, #8
 8004a24:	2301      	movs	r3, #1
 8004a26:	2111      	movs	r1, #17
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7ff fea7 	bl	800477c <lps22hh_read_reg>
 8004a2e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10f      	bne.n	8004a56 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8004a36:	78fb      	ldrb	r3, [r7, #3]
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	b2da      	uxtb	r2, r3
 8004a3e:	7a3b      	ldrb	r3, [r7, #8]
 8004a40:	f362 0382 	bfi	r3, r2, #2, #1
 8004a44:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8004a46:	f107 0208 	add.w	r2, r7, #8
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	2111      	movs	r1, #17
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7ff feac 	bl	80047ac <lps22hh_write_reg>
 8004a54:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004a56:	68fb      	ldr	r3, [r7, #12]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8004a6a:	f107 0208 	add.w	r2, r7, #8
 8004a6e:	2301      	movs	r3, #1
 8004a70:	2111      	movs	r1, #17
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7ff fe82 	bl	800477c <lps22hh_read_reg>
 8004a78:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8004a7a:	7a3b      	ldrb	r3, [r7, #8]
 8004a7c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	461a      	mov	r2, r3
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	701a      	strb	r2, [r3, #0]

  return ret;
 8004a88:	68fb      	ldr	r3, [r7, #12]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004a92:	b590      	push	{r4, r7, lr}
 8004a94:	b087      	sub	sp, #28
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	607a      	str	r2, [r7, #4]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	72fb      	strb	r3, [r7, #11]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	685c      	ldr	r4, [r3, #4]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6898      	ldr	r0, [r3, #8]
 8004aae:	893b      	ldrh	r3, [r7, #8]
 8004ab0:	7af9      	ldrb	r1, [r7, #11]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	47a0      	blx	r4
 8004ab6:	6178      	str	r0, [r7, #20]

  return ret;
 8004ab8:	697b      	ldr	r3, [r7, #20]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	371c      	adds	r7, #28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd90      	pop	{r4, r7, pc}

08004ac2 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004ac2:	b590      	push	{r4, r7, lr}
 8004ac4:	b087      	sub	sp, #28
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	60f8      	str	r0, [r7, #12]
 8004aca:	607a      	str	r2, [r7, #4]
 8004acc:	461a      	mov	r2, r3
 8004ace:	460b      	mov	r3, r1
 8004ad0:	72fb      	strb	r3, [r7, #11]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681c      	ldr	r4, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6898      	ldr	r0, [r3, #8]
 8004ade:	893b      	ldrh	r3, [r7, #8]
 8004ae0:	7af9      	ldrb	r1, [r7, #11]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	47a0      	blx	r4
 8004ae6:	6178      	str	r0, [r7, #20]

  return ret;
 8004ae8:	697b      	ldr	r3, [r7, #20]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	371c      	adds	r7, #28
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd90      	pop	{r4, r7, pc}
	...

08004af4 <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	4603      	mov	r3, r0
 8004afc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8004afe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b02:	ee07 3a90 	vmov	s15, r3
 8004b06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b0a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004b20 <lsm6dsr_from_fs2g_to_mg+0x2c>
 8004b0e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004b12:	eeb0 0a67 	vmov.f32	s0, s15
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	3d79db23 	.word	0x3d79db23

08004b24 <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8004b2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b32:	ee07 3a90 	vmov	s15, r3
 8004b36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b3a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004b50 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 8004b3e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004b42:	eeb0 0a67 	vmov.f32	s0, s15
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	428c0000 	.word	0x428c0000

08004b54 <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8004b5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b62:	ee07 3a90 	vmov	s15, r3
 8004b66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b6a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8004b88 <lsm6dsr_from_lsb_to_celsius+0x34>
 8004b6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b72:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004b76:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8004b7a:	eeb0 0a67 	vmov.f32	s0, s15
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	43800000 	.word	0x43800000

08004b8c <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	460b      	mov	r3, r1
 8004b96:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8004b98:	f107 0208 	add.w	r2, r7, #8
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	2110      	movs	r1, #16
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7ff ff76 	bl	8004a92 <lsm6dsr_read_reg>
 8004ba6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10f      	bne.n	8004bce <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8004bae:	78fb      	ldrb	r3, [r7, #3]
 8004bb0:	f003 0303 	and.w	r3, r3, #3
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	7a3b      	ldrb	r3, [r7, #8]
 8004bb8:	f362 0383 	bfi	r3, r2, #2, #2
 8004bbc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8004bbe:	f107 0208 	add.w	r2, r7, #8
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	2110      	movs	r1, #16
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7ff ff7b 	bl	8004ac2 <lsm6dsr_write_reg>
 8004bcc:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8004bce:	68fb      	ldr	r3, [r7, #12]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	460b      	mov	r3, r1
 8004be2:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8004be4:	78fb      	ldrb	r3, [r7, #3]
 8004be6:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8004be8:	f107 030c 	add.w	r3, r7, #12
 8004bec:	4619      	mov	r1, r3
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fbb0 	bl	8005354 <lsm6dsr_fsm_enable_get>
 8004bf4:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f040 80c4 	bne.w	8004d86 <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004bfe:	7b3b      	ldrb	r3, [r7, #12]
 8004c00:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004c04:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004c06:	7b3b      	ldrb	r3, [r7, #12]
 8004c08:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004c0c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004c12:	7b3b      	ldrb	r3, [r7, #12]
 8004c14:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004c18:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004c1e:	7b3b      	ldrb	r3, [r7, #12]
 8004c20:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004c24:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004c26:	4313      	orrs	r3, r2
 8004c28:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004c2a:	7b3b      	ldrb	r3, [r7, #12]
 8004c2c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004c30:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004c32:	4313      	orrs	r3, r2
 8004c34:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004c36:	7b3b      	ldrb	r3, [r7, #12]
 8004c38:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004c3c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004c42:	7b3b      	ldrb	r3, [r7, #12]
 8004c44:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004c48:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004c4e:	7b3b      	ldrb	r3, [r7, #12]
 8004c50:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004c54:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004c56:	4313      	orrs	r3, r2
 8004c58:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004c5a:	7b7b      	ldrb	r3, [r7, #13]
 8004c5c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004c60:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004c62:	4313      	orrs	r3, r2
 8004c64:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004c66:	7b7b      	ldrb	r3, [r7, #13]
 8004c68:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004c6c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004c72:	7b7b      	ldrb	r3, [r7, #13]
 8004c74:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004c78:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004c7e:	7b7b      	ldrb	r3, [r7, #13]
 8004c80:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004c84:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004c86:	4313      	orrs	r3, r2
 8004c88:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004c8a:	7b7b      	ldrb	r3, [r7, #13]
 8004c8c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004c90:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004c92:	4313      	orrs	r3, r2
 8004c94:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004c96:	7b7b      	ldrb	r3, [r7, #13]
 8004c98:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004c9c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004ca2:	7b7b      	ldrb	r3, [r7, #13]
 8004ca4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004ca8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004caa:	4313      	orrs	r3, r2
 8004cac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004cae:	7b7b      	ldrb	r3, [r7, #13]
 8004cb0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004cb4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d163      	bne.n	8004d86 <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8004cbe:	f107 030b 	add.w	r3, r7, #11
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 fb71 	bl	80053ac <lsm6dsr_fsm_data_rate_get>
 8004cca:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d159      	bne.n	8004d86 <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8004cd2:	7afb      	ldrb	r3, [r7, #11]
 8004cd4:	2b03      	cmp	r3, #3
 8004cd6:	d853      	bhi.n	8004d80 <lsm6dsr_xl_data_rate_set+0x1a8>
 8004cd8:	a201      	add	r2, pc, #4	; (adr r2, 8004ce0 <lsm6dsr_xl_data_rate_set+0x108>)
 8004cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cde:	bf00      	nop
 8004ce0:	08004cf1 	.word	0x08004cf1
 8004ce4:	08004d03 	.word	0x08004d03
 8004ce8:	08004d21 	.word	0x08004d21
 8004cec:	08004d4b 	.word	0x08004d4b
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8004cf0:	78fb      	ldrb	r3, [r7, #3]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d102      	bne.n	8004cfc <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004cfa:	e045      	b.n	8004d88 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004cfc:	78fb      	ldrb	r3, [r7, #3]
 8004cfe:	75fb      	strb	r3, [r7, #23]
            break;
 8004d00:	e042      	b.n	8004d88 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8004d02:	78fb      	ldrb	r3, [r7, #3]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d102      	bne.n	8004d0e <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8004d08:	2302      	movs	r3, #2
 8004d0a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004d0c:	e03c      	b.n	8004d88 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8004d0e:	78fb      	ldrb	r3, [r7, #3]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d102      	bne.n	8004d1a <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8004d14:	2302      	movs	r3, #2
 8004d16:	75fb      	strb	r3, [r7, #23]
            break;
 8004d18:	e036      	b.n	8004d88 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004d1a:	78fb      	ldrb	r3, [r7, #3]
 8004d1c:	75fb      	strb	r3, [r7, #23]
            break;
 8004d1e:	e033      	b.n	8004d88 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8004d20:	78fb      	ldrb	r3, [r7, #3]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d102      	bne.n	8004d2c <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8004d26:	2303      	movs	r3, #3
 8004d28:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004d2a:	e02d      	b.n	8004d88 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8004d2c:	78fb      	ldrb	r3, [r7, #3]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d102      	bne.n	8004d38 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8004d32:	2303      	movs	r3, #3
 8004d34:	75fb      	strb	r3, [r7, #23]
            break;
 8004d36:	e027      	b.n	8004d88 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8004d38:	78fb      	ldrb	r3, [r7, #3]
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d102      	bne.n	8004d44 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	75fb      	strb	r3, [r7, #23]
            break;
 8004d42:	e021      	b.n	8004d88 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004d44:	78fb      	ldrb	r3, [r7, #3]
 8004d46:	75fb      	strb	r3, [r7, #23]
            break;
 8004d48:	e01e      	b.n	8004d88 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8004d4a:	78fb      	ldrb	r3, [r7, #3]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d102      	bne.n	8004d56 <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8004d50:	2304      	movs	r3, #4
 8004d52:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004d54:	e018      	b.n	8004d88 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8004d56:	78fb      	ldrb	r3, [r7, #3]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d102      	bne.n	8004d62 <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8004d5c:	2304      	movs	r3, #4
 8004d5e:	75fb      	strb	r3, [r7, #23]
            break;
 8004d60:	e012      	b.n	8004d88 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8004d62:	78fb      	ldrb	r3, [r7, #3]
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d102      	bne.n	8004d6e <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8004d68:	2304      	movs	r3, #4
 8004d6a:	75fb      	strb	r3, [r7, #23]
            break;
 8004d6c:	e00c      	b.n	8004d88 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 8004d6e:	78fb      	ldrb	r3, [r7, #3]
 8004d70:	2b03      	cmp	r3, #3
 8004d72:	d102      	bne.n	8004d7a <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8004d74:	2304      	movs	r3, #4
 8004d76:	75fb      	strb	r3, [r7, #23]
            break;
 8004d78:	e006      	b.n	8004d88 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004d7a:	78fb      	ldrb	r3, [r7, #3]
 8004d7c:	75fb      	strb	r3, [r7, #23]
            break;
 8004d7e:	e003      	b.n	8004d88 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8004d80:	78fb      	ldrb	r3, [r7, #3]
 8004d82:	75fb      	strb	r3, [r7, #23]
            break;
 8004d84:	e000      	b.n	8004d88 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 8004d86:	bf00      	nop
    }
  }

  if (ret == 0)
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d107      	bne.n	8004d9e <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8004d8e:	f107 0208 	add.w	r2, r7, #8
 8004d92:	2301      	movs	r3, #1
 8004d94:	2110      	movs	r1, #16
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7ff fe7b 	bl	8004a92 <lsm6dsr_read_reg>
 8004d9c:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10f      	bne.n	8004dc4 <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8004da4:	7dfb      	ldrb	r3, [r7, #23]
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	7a3b      	ldrb	r3, [r7, #8]
 8004dae:	f362 1307 	bfi	r3, r2, #4, #4
 8004db2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8004db4:	f107 0208 	add.w	r2, r7, #8
 8004db8:	2301      	movs	r3, #1
 8004dba:	2110      	movs	r1, #16
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7ff fe80 	bl	8004ac2 <lsm6dsr_write_reg>
 8004dc2:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8004dc4:	693b      	ldr	r3, [r7, #16]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3718      	adds	r7, #24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop

08004dd0 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004ddc:	f107 0208 	add.w	r2, r7, #8
 8004de0:	2301      	movs	r3, #1
 8004de2:	2111      	movs	r1, #17
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7ff fe54 	bl	8004a92 <lsm6dsr_read_reg>
 8004dea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10f      	bne.n	8004e12 <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8004df2:	78fb      	ldrb	r3, [r7, #3]
 8004df4:	f003 030f 	and.w	r3, r3, #15
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	7a3b      	ldrb	r3, [r7, #8]
 8004dfc:	f362 0303 	bfi	r3, r2, #0, #4
 8004e00:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004e02:	f107 0208 	add.w	r2, r7, #8
 8004e06:	2301      	movs	r3, #1
 8004e08:	2111      	movs	r1, #17
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7ff fe59 	bl	8004ac2 <lsm6dsr_write_reg>
 8004e10:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004e12:	68fb      	ldr	r3, [r7, #12]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	460b      	mov	r3, r1
 8004e26:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 8004e28:	78fb      	ldrb	r3, [r7, #3]
 8004e2a:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8004e2c:	f107 030c 	add.w	r3, r7, #12
 8004e30:	4619      	mov	r1, r3
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 fa8e 	bl	8005354 <lsm6dsr_fsm_enable_get>
 8004e38:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f040 80c4 	bne.w	8004fca <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004e42:	7b3b      	ldrb	r3, [r7, #12]
 8004e44:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004e48:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004e4a:	7b3b      	ldrb	r3, [r7, #12]
 8004e4c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004e50:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004e52:	4313      	orrs	r3, r2
 8004e54:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004e56:	7b3b      	ldrb	r3, [r7, #12]
 8004e58:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004e5c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004e62:	7b3b      	ldrb	r3, [r7, #12]
 8004e64:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004e68:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004e6e:	7b3b      	ldrb	r3, [r7, #12]
 8004e70:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004e74:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004e76:	4313      	orrs	r3, r2
 8004e78:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004e7a:	7b3b      	ldrb	r3, [r7, #12]
 8004e7c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004e80:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004e82:	4313      	orrs	r3, r2
 8004e84:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004e86:	7b3b      	ldrb	r3, [r7, #12]
 8004e88:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004e8c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004e92:	7b3b      	ldrb	r3, [r7, #12]
 8004e94:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004e98:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004e9e:	7b7b      	ldrb	r3, [r7, #13]
 8004ea0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004ea4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004eaa:	7b7b      	ldrb	r3, [r7, #13]
 8004eac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004eb0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004eb6:	7b7b      	ldrb	r3, [r7, #13]
 8004eb8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004ebc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004ec2:	7b7b      	ldrb	r3, [r7, #13]
 8004ec4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004ec8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004ece:	7b7b      	ldrb	r3, [r7, #13]
 8004ed0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004ed4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004eda:	7b7b      	ldrb	r3, [r7, #13]
 8004edc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004ee0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004ee6:	7b7b      	ldrb	r3, [r7, #13]
 8004ee8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004eec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004ef2:	7b7b      	ldrb	r3, [r7, #13]
 8004ef4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004ef8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004efa:	4313      	orrs	r3, r2
 8004efc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d163      	bne.n	8004fca <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8004f02:	f107 030b 	add.w	r3, r7, #11
 8004f06:	4619      	mov	r1, r3
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 fa4f 	bl	80053ac <lsm6dsr_fsm_data_rate_get>
 8004f0e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d159      	bne.n	8004fca <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8004f16:	7afb      	ldrb	r3, [r7, #11]
 8004f18:	2b03      	cmp	r3, #3
 8004f1a:	d853      	bhi.n	8004fc4 <lsm6dsr_gy_data_rate_set+0x1a8>
 8004f1c:	a201      	add	r2, pc, #4	; (adr r2, 8004f24 <lsm6dsr_gy_data_rate_set+0x108>)
 8004f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f22:	bf00      	nop
 8004f24:	08004f35 	.word	0x08004f35
 8004f28:	08004f47 	.word	0x08004f47
 8004f2c:	08004f65 	.word	0x08004f65
 8004f30:	08004f8f 	.word	0x08004f8f
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 8004f34:	78fb      	ldrb	r3, [r7, #3]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d102      	bne.n	8004f40 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004f3e:	e045      	b.n	8004fcc <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004f40:	78fb      	ldrb	r3, [r7, #3]
 8004f42:	75fb      	strb	r3, [r7, #23]
            break;
 8004f44:	e042      	b.n	8004fcc <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8004f46:	78fb      	ldrb	r3, [r7, #3]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d102      	bne.n	8004f52 <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004f50:	e03c      	b.n	8004fcc <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8004f52:	78fb      	ldrb	r3, [r7, #3]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d102      	bne.n	8004f5e <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8004f58:	2302      	movs	r3, #2
 8004f5a:	75fb      	strb	r3, [r7, #23]
            break;
 8004f5c:	e036      	b.n	8004fcc <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004f5e:	78fb      	ldrb	r3, [r7, #3]
 8004f60:	75fb      	strb	r3, [r7, #23]
            break;
 8004f62:	e033      	b.n	8004fcc <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8004f64:	78fb      	ldrb	r3, [r7, #3]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d102      	bne.n	8004f70 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004f6e:	e02d      	b.n	8004fcc <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8004f70:	78fb      	ldrb	r3, [r7, #3]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d102      	bne.n	8004f7c <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8004f76:	2303      	movs	r3, #3
 8004f78:	75fb      	strb	r3, [r7, #23]
            break;
 8004f7a:	e027      	b.n	8004fcc <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8004f7c:	78fb      	ldrb	r3, [r7, #3]
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d102      	bne.n	8004f88 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8004f82:	2303      	movs	r3, #3
 8004f84:	75fb      	strb	r3, [r7, #23]
            break;
 8004f86:	e021      	b.n	8004fcc <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004f88:	78fb      	ldrb	r3, [r7, #3]
 8004f8a:	75fb      	strb	r3, [r7, #23]
            break;
 8004f8c:	e01e      	b.n	8004fcc <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8004f8e:	78fb      	ldrb	r3, [r7, #3]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d102      	bne.n	8004f9a <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8004f94:	2304      	movs	r3, #4
 8004f96:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004f98:	e018      	b.n	8004fcc <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8004f9a:	78fb      	ldrb	r3, [r7, #3]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d102      	bne.n	8004fa6 <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8004fa0:	2304      	movs	r3, #4
 8004fa2:	75fb      	strb	r3, [r7, #23]
            break;
 8004fa4:	e012      	b.n	8004fcc <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8004fa6:	78fb      	ldrb	r3, [r7, #3]
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d102      	bne.n	8004fb2 <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8004fac:	2304      	movs	r3, #4
 8004fae:	75fb      	strb	r3, [r7, #23]
            break;
 8004fb0:	e00c      	b.n	8004fcc <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 8004fb2:	78fb      	ldrb	r3, [r7, #3]
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d102      	bne.n	8004fbe <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8004fb8:	2304      	movs	r3, #4
 8004fba:	75fb      	strb	r3, [r7, #23]
            break;
 8004fbc:	e006      	b.n	8004fcc <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004fbe:	78fb      	ldrb	r3, [r7, #3]
 8004fc0:	75fb      	strb	r3, [r7, #23]
            break;
 8004fc2:	e003      	b.n	8004fcc <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8004fc4:	78fb      	ldrb	r3, [r7, #3]
 8004fc6:	75fb      	strb	r3, [r7, #23]
            break;
 8004fc8:	e000      	b.n	8004fcc <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 8004fca:	bf00      	nop
    }
  }

  if (ret == 0)
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d107      	bne.n	8004fe2 <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004fd2:	f107 0208 	add.w	r2, r7, #8
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	2111      	movs	r1, #17
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7ff fd59 	bl	8004a92 <lsm6dsr_read_reg>
 8004fe0:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10f      	bne.n	8005008 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8004fe8:	7dfb      	ldrb	r3, [r7, #23]
 8004fea:	f003 030f 	and.w	r3, r3, #15
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	7a3b      	ldrb	r3, [r7, #8]
 8004ff2:	f362 1307 	bfi	r3, r2, #4, #4
 8004ff6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004ff8:	f107 0208 	add.w	r2, r7, #8
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	2111      	movs	r1, #17
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7ff fd5e 	bl	8004ac2 <lsm6dsr_write_reg>
 8005006:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8005008:	693b      	ldr	r3, [r7, #16]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3718      	adds	r7, #24
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop

08005014 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	460b      	mov	r3, r1
 800501e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005020:	f107 0208 	add.w	r2, r7, #8
 8005024:	2301      	movs	r3, #1
 8005026:	2112      	movs	r1, #18
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7ff fd32 	bl	8004a92 <lsm6dsr_read_reg>
 800502e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10f      	bne.n	8005056 <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8005036:	78fb      	ldrb	r3, [r7, #3]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	b2da      	uxtb	r2, r3
 800503e:	7a3b      	ldrb	r3, [r7, #8]
 8005040:	f362 1386 	bfi	r3, r2, #6, #1
 8005044:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005046:	f107 0208 	add.w	r2, r7, #8
 800504a:	2301      	movs	r3, #1
 800504c:	2112      	movs	r1, #18
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7ff fd37 	bl	8004ac2 <lsm6dsr_write_reg>
 8005054:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005056:	68fb      	ldr	r3, [r7, #12]
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 800506a:	f107 0208 	add.w	r2, r7, #8
 800506e:	2301      	movs	r3, #1
 8005070:	211e      	movs	r1, #30
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7ff fd0d 	bl	8004a92 <lsm6dsr_read_reg>
 8005078:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 800507a:	7a3b      	ldrb	r3, [r7, #8]
 800507c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005080:	b2db      	uxtb	r3, r3
 8005082:	461a      	mov	r2, r3
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	701a      	strb	r2, [r3, #0]

  return ret;
 8005088:	68fb      	ldr	r3, [r7, #12]
}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b084      	sub	sp, #16
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
 800509a:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 800509c:	f107 0208 	add.w	r2, r7, #8
 80050a0:	2301      	movs	r3, #1
 80050a2:	211e      	movs	r1, #30
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7ff fcf4 	bl	8004a92 <lsm6dsr_read_reg>
 80050aa:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 80050ac:	7a3b      	ldrb	r3, [r7, #8]
 80050ae:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	461a      	mov	r2, r3
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	701a      	strb	r2, [r3, #0]

  return ret;
 80050ba:	68fb      	ldr	r3, [r7, #12]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 80050ce:	f107 0208 	add.w	r2, r7, #8
 80050d2:	2301      	movs	r3, #1
 80050d4:	211e      	movs	r1, #30
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7ff fcdb 	bl	8004a92 <lsm6dsr_read_reg>
 80050dc:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 80050de:	7a3b      	ldrb	r3, [r7, #8]
 80050e0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	461a      	mov	r2, r3
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	701a      	strb	r2, [r3, #0]

  return ret;
 80050ec:	68fb      	ldr	r3, [r7, #12]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b084      	sub	sp, #16
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
 80050fe:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 8005100:	f107 0208 	add.w	r2, r7, #8
 8005104:	2302      	movs	r3, #2
 8005106:	2120      	movs	r1, #32
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7ff fcc2 	bl	8004a92 <lsm6dsr_read_reg>
 800510e:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 8005110:	7a7b      	ldrb	r3, [r7, #9]
 8005112:	b21a      	sxth	r2, r3
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800511e:	b29b      	uxth	r3, r3
 8005120:	021b      	lsls	r3, r3, #8
 8005122:	b29a      	uxth	r2, r3
 8005124:	7a3b      	ldrb	r3, [r7, #8]
 8005126:	b29b      	uxth	r3, r3
 8005128:	4413      	add	r3, r2
 800512a:	b29b      	uxth	r3, r3
 800512c:	b21a      	sxth	r2, r3
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	801a      	strh	r2, [r3, #0]

  return ret;
 8005132:	68fb      	ldr	r3, [r7, #12]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 8005146:	f107 020c 	add.w	r2, r7, #12
 800514a:	2306      	movs	r3, #6
 800514c:	2122      	movs	r1, #34	; 0x22
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7ff fc9f 	bl	8004a92 <lsm6dsr_read_reg>
 8005154:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005156:	7b7b      	ldrb	r3, [r7, #13]
 8005158:	b21a      	sxth	r2, r3
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005164:	b29b      	uxth	r3, r3
 8005166:	021b      	lsls	r3, r3, #8
 8005168:	b29a      	uxth	r2, r3
 800516a:	7b3b      	ldrb	r3, [r7, #12]
 800516c:	b29b      	uxth	r3, r3
 800516e:	4413      	add	r3, r2
 8005170:	b29b      	uxth	r3, r3
 8005172:	b21a      	sxth	r2, r3
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005178:	7bfa      	ldrb	r2, [r7, #15]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	3302      	adds	r3, #2
 800517e:	b212      	sxth	r2, r2
 8005180:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	3302      	adds	r3, #2
 8005186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800518a:	b29b      	uxth	r3, r3
 800518c:	021b      	lsls	r3, r3, #8
 800518e:	b29a      	uxth	r2, r3
 8005190:	7bbb      	ldrb	r3, [r7, #14]
 8005192:	b29b      	uxth	r3, r3
 8005194:	4413      	add	r3, r2
 8005196:	b29a      	uxth	r2, r3
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	3302      	adds	r3, #2
 800519c:	b212      	sxth	r2, r2
 800519e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80051a0:	7c7a      	ldrb	r2, [r7, #17]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	3304      	adds	r3, #4
 80051a6:	b212      	sxth	r2, r2
 80051a8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	3304      	adds	r3, #4
 80051ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	021b      	lsls	r3, r3, #8
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	7c3b      	ldrb	r3, [r7, #16]
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	4413      	add	r3, r2
 80051be:	b29a      	uxth	r2, r3
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	3304      	adds	r3, #4
 80051c4:	b212      	sxth	r2, r2
 80051c6:	801a      	strh	r2, [r3, #0]

  return ret;
 80051c8:	697b      	ldr	r3, [r7, #20]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b086      	sub	sp, #24
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
 80051da:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 80051dc:	f107 020c 	add.w	r2, r7, #12
 80051e0:	2306      	movs	r3, #6
 80051e2:	2128      	movs	r1, #40	; 0x28
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff fc54 	bl	8004a92 <lsm6dsr_read_reg>
 80051ea:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80051ec:	7b7b      	ldrb	r3, [r7, #13]
 80051ee:	b21a      	sxth	r2, r3
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	021b      	lsls	r3, r3, #8
 80051fe:	b29a      	uxth	r2, r3
 8005200:	7b3b      	ldrb	r3, [r7, #12]
 8005202:	b29b      	uxth	r3, r3
 8005204:	4413      	add	r3, r2
 8005206:	b29b      	uxth	r3, r3
 8005208:	b21a      	sxth	r2, r3
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800520e:	7bfa      	ldrb	r2, [r7, #15]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	3302      	adds	r3, #2
 8005214:	b212      	sxth	r2, r2
 8005216:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	3302      	adds	r3, #2
 800521c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005220:	b29b      	uxth	r3, r3
 8005222:	021b      	lsls	r3, r3, #8
 8005224:	b29a      	uxth	r2, r3
 8005226:	7bbb      	ldrb	r3, [r7, #14]
 8005228:	b29b      	uxth	r3, r3
 800522a:	4413      	add	r3, r2
 800522c:	b29a      	uxth	r2, r3
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	3302      	adds	r3, #2
 8005232:	b212      	sxth	r2, r2
 8005234:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005236:	7c7a      	ldrb	r2, [r7, #17]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	3304      	adds	r3, #4
 800523c:	b212      	sxth	r2, r2
 800523e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	3304      	adds	r3, #4
 8005244:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005248:	b29b      	uxth	r3, r3
 800524a:	021b      	lsls	r3, r3, #8
 800524c:	b29a      	uxth	r2, r3
 800524e:	7c3b      	ldrb	r3, [r7, #16]
 8005250:	b29b      	uxth	r3, r3
 8005252:	4413      	add	r3, r2
 8005254:	b29a      	uxth	r2, r3
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	3304      	adds	r3, #4
 800525a:	b212      	sxth	r2, r2
 800525c:	801a      	strh	r2, [r3, #0]

  return ret;
 800525e:	697b      	ldr	r3, [r7, #20]
}
 8005260:	4618      	mov	r0, r3
 8005262:	3718      	adds	r7, #24
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	460b      	mov	r3, r1
 8005272:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8005274:	f107 0208 	add.w	r2, r7, #8
 8005278:	2301      	movs	r3, #1
 800527a:	2101      	movs	r1, #1
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7ff fc08 	bl	8004a92 <lsm6dsr_read_reg>
 8005282:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10f      	bne.n	80052aa <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 800528a:	78fb      	ldrb	r3, [r7, #3]
 800528c:	f003 0303 	and.w	r3, r3, #3
 8005290:	b2da      	uxtb	r2, r3
 8005292:	7a3b      	ldrb	r3, [r7, #8]
 8005294:	f362 1387 	bfi	r3, r2, #6, #2
 8005298:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 800529a:	f107 0208 	add.w	r2, r7, #8
 800529e:	2301      	movs	r3, #1
 80052a0:	2101      	movs	r1, #1
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7ff fc0d 	bl	8004ac2 <lsm6dsr_write_reg>
 80052a8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 80052aa:	68fb      	ldr	r3, [r7, #12]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 80052be:	2301      	movs	r3, #1
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	210f      	movs	r1, #15
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f7ff fbe4 	bl	8004a92 <lsm6dsr_read_reg>
 80052ca:	60f8      	str	r0, [r7, #12]

  return ret;
 80052cc:	68fb      	ldr	r3, [r7, #12]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b084      	sub	sp, #16
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	460b      	mov	r3, r1
 80052e0:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80052e2:	f107 0208 	add.w	r2, r7, #8
 80052e6:	2301      	movs	r3, #1
 80052e8:	2112      	movs	r1, #18
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7ff fbd1 	bl	8004a92 <lsm6dsr_read_reg>
 80052f0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10f      	bne.n	8005318 <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 80052f8:	78fb      	ldrb	r3, [r7, #3]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	7a3b      	ldrb	r3, [r7, #8]
 8005302:	f362 0300 	bfi	r3, r2, #0, #1
 8005306:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005308:	f107 0208 	add.w	r2, r7, #8
 800530c:	2301      	movs	r3, #1
 800530e:	2112      	movs	r1, #18
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f7ff fbd6 	bl	8004ac2 <lsm6dsr_write_reg>
 8005316:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005318:	68fb      	ldr	r3, [r7, #12]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b084      	sub	sp, #16
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800532c:	f107 0208 	add.w	r2, r7, #8
 8005330:	2301      	movs	r3, #1
 8005332:	2112      	movs	r1, #18
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7ff fbac 	bl	8004a92 <lsm6dsr_read_reg>
 800533a:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 800533c:	7a3b      	ldrb	r3, [r7, #8]
 800533e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005342:	b2db      	uxtb	r3, r3
 8005344:	461a      	mov	r2, r3
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	701a      	strb	r2, [r3, #0]

  return ret;
 800534a:	68fb      	ldr	r3, [r7, #12]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800535e:	2102      	movs	r1, #2
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7ff ff81 	bl	8005268 <lsm6dsr_mem_bank_set>
 8005366:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d106      	bne.n	800537c <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 800536e:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 8005370:	2301      	movs	r3, #1
 8005372:	2146      	movs	r1, #70	; 0x46
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7ff fb8c 	bl	8004a92 <lsm6dsr_read_reg>
 800537a:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d107      	bne.n	8005392 <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 8005386:	2301      	movs	r3, #1
 8005388:	2147      	movs	r1, #71	; 0x47
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7ff fb81 	bl	8004a92 <lsm6dsr_read_reg>
 8005390:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d104      	bne.n	80053a2 <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8005398:	2100      	movs	r1, #0
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7ff ff64 	bl	8005268 <lsm6dsr_mem_bank_set>
 80053a0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80053a2:	68fb      	ldr	r3, [r7, #12]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80053b6:	2102      	movs	r1, #2
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7ff ff55 	bl	8005268 <lsm6dsr_mem_bank_set>
 80053be:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d107      	bne.n	80053d6 <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 80053c6:	f107 0208 	add.w	r2, r7, #8
 80053ca:	2301      	movs	r3, #1
 80053cc:	215f      	movs	r1, #95	; 0x5f
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7ff fb5f 	bl	8004a92 <lsm6dsr_read_reg>
 80053d4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d104      	bne.n	80053e6 <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 80053dc:	2100      	movs	r1, #0
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7ff ff42 	bl	8005268 <lsm6dsr_mem_bank_set>
 80053e4:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 80053e6:	7a3b      	ldrb	r3, [r7, #8]
 80053e8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b03      	cmp	r3, #3
 80053f0:	d81a      	bhi.n	8005428 <lsm6dsr_fsm_data_rate_get+0x7c>
 80053f2:	a201      	add	r2, pc, #4	; (adr r2, 80053f8 <lsm6dsr_fsm_data_rate_get+0x4c>)
 80053f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f8:	08005409 	.word	0x08005409
 80053fc:	08005411 	.word	0x08005411
 8005400:	08005419 	.word	0x08005419
 8005404:	08005421 	.word	0x08005421
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2200      	movs	r2, #0
 800540c:	701a      	strb	r2, [r3, #0]
      break;
 800540e:	e00f      	b.n	8005430 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	2201      	movs	r2, #1
 8005414:	701a      	strb	r2, [r3, #0]
      break;
 8005416:	e00b      	b.n	8005430 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2202      	movs	r2, #2
 800541c:	701a      	strb	r2, [r3, #0]
      break;
 800541e:	e007      	b.n	8005430 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	2203      	movs	r2, #3
 8005424:	701a      	strb	r2, [r3, #0]
      break;
 8005426:	e003      	b.n	8005430 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	2200      	movs	r2, #0
 800542c:	701a      	strb	r2, [r3, #0]
      break;
 800542e:	bf00      	nop
  }

  return ret;
 8005430:	68fb      	ldr	r3, [r7, #12]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop

0800543c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005440:	4b0e      	ldr	r3, [pc, #56]	; (800547c <HAL_Init+0x40>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a0d      	ldr	r2, [pc, #52]	; (800547c <HAL_Init+0x40>)
 8005446:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800544a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800544c:	4b0b      	ldr	r3, [pc, #44]	; (800547c <HAL_Init+0x40>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a0a      	ldr	r2, [pc, #40]	; (800547c <HAL_Init+0x40>)
 8005452:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005456:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005458:	4b08      	ldr	r3, [pc, #32]	; (800547c <HAL_Init+0x40>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a07      	ldr	r2, [pc, #28]	; (800547c <HAL_Init+0x40>)
 800545e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005462:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005464:	2003      	movs	r0, #3
 8005466:	f000 fb6e 	bl	8005b46 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800546a:	2000      	movs	r0, #0
 800546c:	f7fc ff46 	bl	80022fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005470:	f7fc ff18 	bl	80022a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	40023c00 	.word	0x40023c00

08005480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005480:	b480      	push	{r7}
 8005482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005484:	4b06      	ldr	r3, [pc, #24]	; (80054a0 <HAL_IncTick+0x20>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	461a      	mov	r2, r3
 800548a:	4b06      	ldr	r3, [pc, #24]	; (80054a4 <HAL_IncTick+0x24>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4413      	add	r3, r2
 8005490:	4a04      	ldr	r2, [pc, #16]	; (80054a4 <HAL_IncTick+0x24>)
 8005492:	6013      	str	r3, [r2, #0]
}
 8005494:	bf00      	nop
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	20000064 	.word	0x20000064
 80054a4:	2000605c 	.word	0x2000605c

080054a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054a8:	b480      	push	{r7}
 80054aa:	af00      	add	r7, sp, #0
  return uwTick;
 80054ac:	4b03      	ldr	r3, [pc, #12]	; (80054bc <HAL_GetTick+0x14>)
 80054ae:	681b      	ldr	r3, [r3, #0]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	2000605c 	.word	0x2000605c

080054c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054c8:	f7ff ffee 	bl	80054a8 <HAL_GetTick>
 80054cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d8:	d005      	beq.n	80054e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80054da:	4b0a      	ldr	r3, [pc, #40]	; (8005504 <HAL_Delay+0x44>)
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	461a      	mov	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4413      	add	r3, r2
 80054e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80054e6:	bf00      	nop
 80054e8:	f7ff ffde 	bl	80054a8 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d8f7      	bhi.n	80054e8 <HAL_Delay+0x28>
  {
  }
}
 80054f8:	bf00      	nop
 80054fa:	bf00      	nop
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	20000064 	.word	0x20000064

08005508 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005510:	2300      	movs	r3, #0
 8005512:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e033      	b.n	8005586 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	2b00      	cmp	r3, #0
 8005524:	d109      	bne.n	800553a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7fc f8f6 	bl	8001718 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	f003 0310 	and.w	r3, r3, #16
 8005542:	2b00      	cmp	r3, #0
 8005544:	d118      	bne.n	8005578 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800554e:	f023 0302 	bic.w	r3, r3, #2
 8005552:	f043 0202 	orr.w	r2, r3, #2
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f94a 	bl	80057f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556a:	f023 0303 	bic.w	r3, r3, #3
 800556e:	f043 0201 	orr.w	r2, r3, #1
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	641a      	str	r2, [r3, #64]	; 0x40
 8005576:	e001      	b.n	800557c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005584:	7bfb      	ldrb	r3, [r7, #15]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
	...

08005590 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800559a:	2300      	movs	r3, #0
 800559c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d101      	bne.n	80055ac <HAL_ADC_ConfigChannel+0x1c>
 80055a8:	2302      	movs	r3, #2
 80055aa:	e113      	b.n	80057d4 <HAL_ADC_ConfigChannel+0x244>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b09      	cmp	r3, #9
 80055ba:	d925      	bls.n	8005608 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68d9      	ldr	r1, [r3, #12]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	461a      	mov	r2, r3
 80055ca:	4613      	mov	r3, r2
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	4413      	add	r3, r2
 80055d0:	3b1e      	subs	r3, #30
 80055d2:	2207      	movs	r2, #7
 80055d4:	fa02 f303 	lsl.w	r3, r2, r3
 80055d8:	43da      	mvns	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	400a      	ands	r2, r1
 80055e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68d9      	ldr	r1, [r3, #12]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	4618      	mov	r0, r3
 80055f4:	4603      	mov	r3, r0
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	4403      	add	r3, r0
 80055fa:	3b1e      	subs	r3, #30
 80055fc:	409a      	lsls	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	60da      	str	r2, [r3, #12]
 8005606:	e022      	b.n	800564e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6919      	ldr	r1, [r3, #16]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	b29b      	uxth	r3, r3
 8005614:	461a      	mov	r2, r3
 8005616:	4613      	mov	r3, r2
 8005618:	005b      	lsls	r3, r3, #1
 800561a:	4413      	add	r3, r2
 800561c:	2207      	movs	r2, #7
 800561e:	fa02 f303 	lsl.w	r3, r2, r3
 8005622:	43da      	mvns	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	400a      	ands	r2, r1
 800562a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6919      	ldr	r1, [r3, #16]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	689a      	ldr	r2, [r3, #8]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	b29b      	uxth	r3, r3
 800563c:	4618      	mov	r0, r3
 800563e:	4603      	mov	r3, r0
 8005640:	005b      	lsls	r3, r3, #1
 8005642:	4403      	add	r3, r0
 8005644:	409a      	lsls	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	2b06      	cmp	r3, #6
 8005654:	d824      	bhi.n	80056a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	4613      	mov	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	3b05      	subs	r3, #5
 8005668:	221f      	movs	r2, #31
 800566a:	fa02 f303 	lsl.w	r3, r2, r3
 800566e:	43da      	mvns	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	400a      	ands	r2, r1
 8005676:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	b29b      	uxth	r3, r3
 8005684:	4618      	mov	r0, r3
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	4613      	mov	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	3b05      	subs	r3, #5
 8005692:	fa00 f203 	lsl.w	r2, r0, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	430a      	orrs	r2, r1
 800569c:	635a      	str	r2, [r3, #52]	; 0x34
 800569e:	e04c      	b.n	800573a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	2b0c      	cmp	r3, #12
 80056a6:	d824      	bhi.n	80056f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	4613      	mov	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	3b23      	subs	r3, #35	; 0x23
 80056ba:	221f      	movs	r2, #31
 80056bc:	fa02 f303 	lsl.w	r3, r2, r3
 80056c0:	43da      	mvns	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	400a      	ands	r2, r1
 80056c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	4618      	mov	r0, r3
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	4613      	mov	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4413      	add	r3, r2
 80056e2:	3b23      	subs	r3, #35	; 0x23
 80056e4:	fa00 f203 	lsl.w	r2, r0, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	631a      	str	r2, [r3, #48]	; 0x30
 80056f0:	e023      	b.n	800573a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	4613      	mov	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	3b41      	subs	r3, #65	; 0x41
 8005704:	221f      	movs	r2, #31
 8005706:	fa02 f303 	lsl.w	r3, r2, r3
 800570a:	43da      	mvns	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	400a      	ands	r2, r1
 8005712:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	b29b      	uxth	r3, r3
 8005720:	4618      	mov	r0, r3
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	4613      	mov	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4413      	add	r3, r2
 800572c:	3b41      	subs	r3, #65	; 0x41
 800572e:	fa00 f203 	lsl.w	r2, r0, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800573a:	4b29      	ldr	r3, [pc, #164]	; (80057e0 <HAL_ADC_ConfigChannel+0x250>)
 800573c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a28      	ldr	r2, [pc, #160]	; (80057e4 <HAL_ADC_ConfigChannel+0x254>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d10f      	bne.n	8005768 <HAL_ADC_ConfigChannel+0x1d8>
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b12      	cmp	r3, #18
 800574e:	d10b      	bne.n	8005768 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a1d      	ldr	r2, [pc, #116]	; (80057e4 <HAL_ADC_ConfigChannel+0x254>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d12b      	bne.n	80057ca <HAL_ADC_ConfigChannel+0x23a>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a1c      	ldr	r2, [pc, #112]	; (80057e8 <HAL_ADC_ConfigChannel+0x258>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d003      	beq.n	8005784 <HAL_ADC_ConfigChannel+0x1f4>
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b11      	cmp	r3, #17
 8005782:	d122      	bne.n	80057ca <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a11      	ldr	r2, [pc, #68]	; (80057e8 <HAL_ADC_ConfigChannel+0x258>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d111      	bne.n	80057ca <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80057a6:	4b11      	ldr	r3, [pc, #68]	; (80057ec <HAL_ADC_ConfigChannel+0x25c>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a11      	ldr	r2, [pc, #68]	; (80057f0 <HAL_ADC_ConfigChannel+0x260>)
 80057ac:	fba2 2303 	umull	r2, r3, r2, r3
 80057b0:	0c9a      	lsrs	r2, r3, #18
 80057b2:	4613      	mov	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80057bc:	e002      	b.n	80057c4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	3b01      	subs	r3, #1
 80057c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1f9      	bne.n	80057be <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	40012300 	.word	0x40012300
 80057e4:	40012000 	.word	0x40012000
 80057e8:	10000012 	.word	0x10000012
 80057ec:	20000000 	.word	0x20000000
 80057f0:	431bde83 	.word	0x431bde83

080057f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80057fc:	4b79      	ldr	r3, [pc, #484]	; (80059e4 <ADC_Init+0x1f0>)
 80057fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	431a      	orrs	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005828:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6859      	ldr	r1, [r3, #4]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	021a      	lsls	r2, r3, #8
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800584c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6859      	ldr	r1, [r3, #4]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689a      	ldr	r2, [r3, #8]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	430a      	orrs	r2, r1
 800585e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	689a      	ldr	r2, [r3, #8]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800586e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6899      	ldr	r1, [r3, #8]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	430a      	orrs	r2, r1
 8005880:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005886:	4a58      	ldr	r2, [pc, #352]	; (80059e8 <ADC_Init+0x1f4>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d022      	beq.n	80058d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800589a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6899      	ldr	r1, [r3, #8]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80058bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6899      	ldr	r1, [r3, #8]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	609a      	str	r2, [r3, #8]
 80058d0:	e00f      	b.n	80058f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80058e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689a      	ldr	r2, [r3, #8]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80058f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f022 0202 	bic.w	r2, r2, #2
 8005900:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6899      	ldr	r1, [r3, #8]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	7e1b      	ldrb	r3, [r3, #24]
 800590c:	005a      	lsls	r2, r3, #1
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	430a      	orrs	r2, r1
 8005914:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 3020 	ldrb.w	r3, [r3, #32]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d01b      	beq.n	8005958 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800592e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800593e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6859      	ldr	r1, [r3, #4]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594a:	3b01      	subs	r3, #1
 800594c:	035a      	lsls	r2, r3, #13
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	605a      	str	r2, [r3, #4]
 8005956:	e007      	b.n	8005968 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005966:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005976:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	3b01      	subs	r3, #1
 8005984:	051a      	lsls	r2, r3, #20
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	430a      	orrs	r2, r1
 800598c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	689a      	ldr	r2, [r3, #8]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800599c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6899      	ldr	r1, [r3, #8]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80059aa:	025a      	lsls	r2, r3, #9
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689a      	ldr	r2, [r3, #8]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6899      	ldr	r1, [r3, #8]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	029a      	lsls	r2, r3, #10
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	430a      	orrs	r2, r1
 80059d6:	609a      	str	r2, [r3, #8]
}
 80059d8:	bf00      	nop
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr
 80059e4:	40012300 	.word	0x40012300
 80059e8:	0f000001 	.word	0x0f000001

080059ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f003 0307 	and.w	r3, r3, #7
 80059fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059fc:	4b0c      	ldr	r3, [pc, #48]	; (8005a30 <__NVIC_SetPriorityGrouping+0x44>)
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a08:	4013      	ands	r3, r2
 8005a0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a1e:	4a04      	ldr	r2, [pc, #16]	; (8005a30 <__NVIC_SetPriorityGrouping+0x44>)
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	60d3      	str	r3, [r2, #12]
}
 8005a24:	bf00      	nop
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	e000ed00 	.word	0xe000ed00

08005a34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a34:	b480      	push	{r7}
 8005a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a38:	4b04      	ldr	r3, [pc, #16]	; (8005a4c <__NVIC_GetPriorityGrouping+0x18>)
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	0a1b      	lsrs	r3, r3, #8
 8005a3e:	f003 0307 	and.w	r3, r3, #7
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	e000ed00 	.word	0xe000ed00

08005a50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	4603      	mov	r3, r0
 8005a58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	db0b      	blt.n	8005a7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a62:	79fb      	ldrb	r3, [r7, #7]
 8005a64:	f003 021f 	and.w	r2, r3, #31
 8005a68:	4907      	ldr	r1, [pc, #28]	; (8005a88 <__NVIC_EnableIRQ+0x38>)
 8005a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a6e:	095b      	lsrs	r3, r3, #5
 8005a70:	2001      	movs	r0, #1
 8005a72:	fa00 f202 	lsl.w	r2, r0, r2
 8005a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005a7a:	bf00      	nop
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	e000e100 	.word	0xe000e100

08005a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	4603      	mov	r3, r0
 8005a94:	6039      	str	r1, [r7, #0]
 8005a96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	db0a      	blt.n	8005ab6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	490c      	ldr	r1, [pc, #48]	; (8005ad8 <__NVIC_SetPriority+0x4c>)
 8005aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aaa:	0112      	lsls	r2, r2, #4
 8005aac:	b2d2      	uxtb	r2, r2
 8005aae:	440b      	add	r3, r1
 8005ab0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ab4:	e00a      	b.n	8005acc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	b2da      	uxtb	r2, r3
 8005aba:	4908      	ldr	r1, [pc, #32]	; (8005adc <__NVIC_SetPriority+0x50>)
 8005abc:	79fb      	ldrb	r3, [r7, #7]
 8005abe:	f003 030f 	and.w	r3, r3, #15
 8005ac2:	3b04      	subs	r3, #4
 8005ac4:	0112      	lsls	r2, r2, #4
 8005ac6:	b2d2      	uxtb	r2, r2
 8005ac8:	440b      	add	r3, r1
 8005aca:	761a      	strb	r2, [r3, #24]
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	e000e100 	.word	0xe000e100
 8005adc:	e000ed00 	.word	0xe000ed00

08005ae0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b089      	sub	sp, #36	; 0x24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f003 0307 	and.w	r3, r3, #7
 8005af2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	f1c3 0307 	rsb	r3, r3, #7
 8005afa:	2b04      	cmp	r3, #4
 8005afc:	bf28      	it	cs
 8005afe:	2304      	movcs	r3, #4
 8005b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	3304      	adds	r3, #4
 8005b06:	2b06      	cmp	r3, #6
 8005b08:	d902      	bls.n	8005b10 <NVIC_EncodePriority+0x30>
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	3b03      	subs	r3, #3
 8005b0e:	e000      	b.n	8005b12 <NVIC_EncodePriority+0x32>
 8005b10:	2300      	movs	r3, #0
 8005b12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b14:	f04f 32ff 	mov.w	r2, #4294967295
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1e:	43da      	mvns	r2, r3
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	401a      	ands	r2, r3
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b28:	f04f 31ff 	mov.w	r1, #4294967295
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b32:	43d9      	mvns	r1, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b38:	4313      	orrs	r3, r2
         );
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3724      	adds	r7, #36	; 0x24
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr

08005b46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b082      	sub	sp, #8
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7ff ff4c 	bl	80059ec <__NVIC_SetPriorityGrouping>
}
 8005b54:	bf00      	nop
 8005b56:	3708      	adds	r7, #8
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	4603      	mov	r3, r0
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b6e:	f7ff ff61 	bl	8005a34 <__NVIC_GetPriorityGrouping>
 8005b72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	68b9      	ldr	r1, [r7, #8]
 8005b78:	6978      	ldr	r0, [r7, #20]
 8005b7a:	f7ff ffb1 	bl	8005ae0 <NVIC_EncodePriority>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b84:	4611      	mov	r1, r2
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7ff ff80 	bl	8005a8c <__NVIC_SetPriority>
}
 8005b8c:	bf00      	nop
 8005b8e:	3718      	adds	r7, #24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7ff ff54 	bl	8005a50 <__NVIC_EnableIRQ>
}
 8005ba8:	bf00      	nop
 8005baa:	3708      	adds	r7, #8
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b089      	sub	sp, #36	; 0x24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	61fb      	str	r3, [r7, #28]
 8005bca:	e177      	b.n	8005ebc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005bcc:	2201      	movs	r2, #1
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	4013      	ands	r3, r2
 8005bde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	f040 8166 	bne.w	8005eb6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f003 0303 	and.w	r3, r3, #3
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d005      	beq.n	8005c02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d130      	bne.n	8005c64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	005b      	lsls	r3, r3, #1
 8005c0c:	2203      	movs	r2, #3
 8005c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c12:	43db      	mvns	r3, r3
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	4013      	ands	r3, r2
 8005c18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	68da      	ldr	r2, [r3, #12]
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	fa02 f303 	lsl.w	r3, r2, r3
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c38:	2201      	movs	r2, #1
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c40:	43db      	mvns	r3, r3
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	4013      	ands	r3, r2
 8005c46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	091b      	lsrs	r3, r3, #4
 8005c4e:	f003 0201 	and.w	r2, r3, #1
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	fa02 f303 	lsl.w	r3, r2, r3
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f003 0303 	and.w	r3, r3, #3
 8005c6c:	2b03      	cmp	r3, #3
 8005c6e:	d017      	beq.n	8005ca0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	005b      	lsls	r3, r3, #1
 8005c7a:	2203      	movs	r2, #3
 8005c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c80:	43db      	mvns	r3, r3
 8005c82:	69ba      	ldr	r2, [r7, #24]
 8005c84:	4013      	ands	r3, r2
 8005c86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	005b      	lsls	r3, r3, #1
 8005c90:	fa02 f303 	lsl.w	r3, r2, r3
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f003 0303 	and.w	r3, r3, #3
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d123      	bne.n	8005cf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	08da      	lsrs	r2, r3, #3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	3208      	adds	r2, #8
 8005cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	f003 0307 	and.w	r3, r3, #7
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	220f      	movs	r2, #15
 8005cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc8:	43db      	mvns	r3, r3
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	4013      	ands	r3, r2
 8005cce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	691a      	ldr	r2, [r3, #16]
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	f003 0307 	and.w	r3, r3, #7
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	08da      	lsrs	r2, r3, #3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	3208      	adds	r2, #8
 8005cee:	69b9      	ldr	r1, [r7, #24]
 8005cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	2203      	movs	r2, #3
 8005d00:	fa02 f303 	lsl.w	r3, r2, r3
 8005d04:	43db      	mvns	r3, r3
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	4013      	ands	r3, r2
 8005d0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f003 0203 	and.w	r2, r3, #3
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	005b      	lsls	r3, r3, #1
 8005d18:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	69ba      	ldr	r2, [r7, #24]
 8005d26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 80c0 	beq.w	8005eb6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d36:	2300      	movs	r3, #0
 8005d38:	60fb      	str	r3, [r7, #12]
 8005d3a:	4b66      	ldr	r3, [pc, #408]	; (8005ed4 <HAL_GPIO_Init+0x324>)
 8005d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d3e:	4a65      	ldr	r2, [pc, #404]	; (8005ed4 <HAL_GPIO_Init+0x324>)
 8005d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d44:	6453      	str	r3, [r2, #68]	; 0x44
 8005d46:	4b63      	ldr	r3, [pc, #396]	; (8005ed4 <HAL_GPIO_Init+0x324>)
 8005d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d52:	4a61      	ldr	r2, [pc, #388]	; (8005ed8 <HAL_GPIO_Init+0x328>)
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	089b      	lsrs	r3, r3, #2
 8005d58:	3302      	adds	r3, #2
 8005d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	f003 0303 	and.w	r3, r3, #3
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	220f      	movs	r2, #15
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	43db      	mvns	r3, r3
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	4013      	ands	r3, r2
 8005d74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a58      	ldr	r2, [pc, #352]	; (8005edc <HAL_GPIO_Init+0x32c>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d037      	beq.n	8005dee <HAL_GPIO_Init+0x23e>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a57      	ldr	r2, [pc, #348]	; (8005ee0 <HAL_GPIO_Init+0x330>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d031      	beq.n	8005dea <HAL_GPIO_Init+0x23a>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a56      	ldr	r2, [pc, #344]	; (8005ee4 <HAL_GPIO_Init+0x334>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d02b      	beq.n	8005de6 <HAL_GPIO_Init+0x236>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a55      	ldr	r2, [pc, #340]	; (8005ee8 <HAL_GPIO_Init+0x338>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d025      	beq.n	8005de2 <HAL_GPIO_Init+0x232>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a54      	ldr	r2, [pc, #336]	; (8005eec <HAL_GPIO_Init+0x33c>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d01f      	beq.n	8005dde <HAL_GPIO_Init+0x22e>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a53      	ldr	r2, [pc, #332]	; (8005ef0 <HAL_GPIO_Init+0x340>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d019      	beq.n	8005dda <HAL_GPIO_Init+0x22a>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a52      	ldr	r2, [pc, #328]	; (8005ef4 <HAL_GPIO_Init+0x344>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d013      	beq.n	8005dd6 <HAL_GPIO_Init+0x226>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a51      	ldr	r2, [pc, #324]	; (8005ef8 <HAL_GPIO_Init+0x348>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d00d      	beq.n	8005dd2 <HAL_GPIO_Init+0x222>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a50      	ldr	r2, [pc, #320]	; (8005efc <HAL_GPIO_Init+0x34c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d007      	beq.n	8005dce <HAL_GPIO_Init+0x21e>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a4f      	ldr	r2, [pc, #316]	; (8005f00 <HAL_GPIO_Init+0x350>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d101      	bne.n	8005dca <HAL_GPIO_Init+0x21a>
 8005dc6:	2309      	movs	r3, #9
 8005dc8:	e012      	b.n	8005df0 <HAL_GPIO_Init+0x240>
 8005dca:	230a      	movs	r3, #10
 8005dcc:	e010      	b.n	8005df0 <HAL_GPIO_Init+0x240>
 8005dce:	2308      	movs	r3, #8
 8005dd0:	e00e      	b.n	8005df0 <HAL_GPIO_Init+0x240>
 8005dd2:	2307      	movs	r3, #7
 8005dd4:	e00c      	b.n	8005df0 <HAL_GPIO_Init+0x240>
 8005dd6:	2306      	movs	r3, #6
 8005dd8:	e00a      	b.n	8005df0 <HAL_GPIO_Init+0x240>
 8005dda:	2305      	movs	r3, #5
 8005ddc:	e008      	b.n	8005df0 <HAL_GPIO_Init+0x240>
 8005dde:	2304      	movs	r3, #4
 8005de0:	e006      	b.n	8005df0 <HAL_GPIO_Init+0x240>
 8005de2:	2303      	movs	r3, #3
 8005de4:	e004      	b.n	8005df0 <HAL_GPIO_Init+0x240>
 8005de6:	2302      	movs	r3, #2
 8005de8:	e002      	b.n	8005df0 <HAL_GPIO_Init+0x240>
 8005dea:	2301      	movs	r3, #1
 8005dec:	e000      	b.n	8005df0 <HAL_GPIO_Init+0x240>
 8005dee:	2300      	movs	r3, #0
 8005df0:	69fa      	ldr	r2, [r7, #28]
 8005df2:	f002 0203 	and.w	r2, r2, #3
 8005df6:	0092      	lsls	r2, r2, #2
 8005df8:	4093      	lsls	r3, r2
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e00:	4935      	ldr	r1, [pc, #212]	; (8005ed8 <HAL_GPIO_Init+0x328>)
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	089b      	lsrs	r3, r3, #2
 8005e06:	3302      	adds	r3, #2
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e0e:	4b3d      	ldr	r3, [pc, #244]	; (8005f04 <HAL_GPIO_Init+0x354>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	43db      	mvns	r3, r3
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e32:	4a34      	ldr	r2, [pc, #208]	; (8005f04 <HAL_GPIO_Init+0x354>)
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005e38:	4b32      	ldr	r3, [pc, #200]	; (8005f04 <HAL_GPIO_Init+0x354>)
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	43db      	mvns	r3, r3
 8005e42:	69ba      	ldr	r2, [r7, #24]
 8005e44:	4013      	ands	r3, r2
 8005e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d003      	beq.n	8005e5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e5c:	4a29      	ldr	r2, [pc, #164]	; (8005f04 <HAL_GPIO_Init+0x354>)
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e62:	4b28      	ldr	r3, [pc, #160]	; (8005f04 <HAL_GPIO_Init+0x354>)
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	43db      	mvns	r3, r3
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e86:	4a1f      	ldr	r2, [pc, #124]	; (8005f04 <HAL_GPIO_Init+0x354>)
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e8c:	4b1d      	ldr	r3, [pc, #116]	; (8005f04 <HAL_GPIO_Init+0x354>)
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	43db      	mvns	r3, r3
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	4013      	ands	r3, r2
 8005e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d003      	beq.n	8005eb0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005eb0:	4a14      	ldr	r2, [pc, #80]	; (8005f04 <HAL_GPIO_Init+0x354>)
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	61fb      	str	r3, [r7, #28]
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	2b0f      	cmp	r3, #15
 8005ec0:	f67f ae84 	bls.w	8005bcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ec4:	bf00      	nop
 8005ec6:	bf00      	nop
 8005ec8:	3724      	adds	r7, #36	; 0x24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	40023800 	.word	0x40023800
 8005ed8:	40013800 	.word	0x40013800
 8005edc:	40020000 	.word	0x40020000
 8005ee0:	40020400 	.word	0x40020400
 8005ee4:	40020800 	.word	0x40020800
 8005ee8:	40020c00 	.word	0x40020c00
 8005eec:	40021000 	.word	0x40021000
 8005ef0:	40021400 	.word	0x40021400
 8005ef4:	40021800 	.word	0x40021800
 8005ef8:	40021c00 	.word	0x40021c00
 8005efc:	40022000 	.word	0x40022000
 8005f00:	40022400 	.word	0x40022400
 8005f04:	40013c00 	.word	0x40013c00

08005f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	460b      	mov	r3, r1
 8005f12:	807b      	strh	r3, [r7, #2]
 8005f14:	4613      	mov	r3, r2
 8005f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f18:	787b      	ldrb	r3, [r7, #1]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f1e:	887a      	ldrh	r2, [r7, #2]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f24:	e003      	b.n	8005f2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f26:	887b      	ldrh	r3, [r7, #2]
 8005f28:	041a      	lsls	r2, r3, #16
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	619a      	str	r2, [r3, #24]
}
 8005f2e:	bf00      	nop
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
	...

08005f3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	4603      	mov	r3, r0
 8005f44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005f46:	4b08      	ldr	r3, [pc, #32]	; (8005f68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f48:	695a      	ldr	r2, [r3, #20]
 8005f4a:	88fb      	ldrh	r3, [r7, #6]
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d006      	beq.n	8005f60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005f52:	4a05      	ldr	r2, [pc, #20]	; (8005f68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f54:	88fb      	ldrh	r3, [r7, #6]
 8005f56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005f58:	88fb      	ldrh	r3, [r7, #6]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 f806 	bl	8005f6c <HAL_GPIO_EXTI_Callback>
  }
}
 8005f60:	bf00      	nop
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	40013c00 	.word	0x40013c00

08005f6c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	4603      	mov	r3, r0
 8005f74:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005f76:	bf00      	nop
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
	...

08005f84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e12b      	b.n	80061ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d106      	bne.n	8005fb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7fb fe0a 	bl	8001bc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2224      	movs	r2, #36	; 0x24
 8005fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 0201 	bic.w	r2, r2, #1
 8005fc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fe6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005fe8:	f002 fc08 	bl	80087fc <HAL_RCC_GetPCLK1Freq>
 8005fec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	4a81      	ldr	r2, [pc, #516]	; (80061f8 <HAL_I2C_Init+0x274>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d807      	bhi.n	8006008 <HAL_I2C_Init+0x84>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	4a80      	ldr	r2, [pc, #512]	; (80061fc <HAL_I2C_Init+0x278>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	bf94      	ite	ls
 8006000:	2301      	movls	r3, #1
 8006002:	2300      	movhi	r3, #0
 8006004:	b2db      	uxtb	r3, r3
 8006006:	e006      	b.n	8006016 <HAL_I2C_Init+0x92>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4a7d      	ldr	r2, [pc, #500]	; (8006200 <HAL_I2C_Init+0x27c>)
 800600c:	4293      	cmp	r3, r2
 800600e:	bf94      	ite	ls
 8006010:	2301      	movls	r3, #1
 8006012:	2300      	movhi	r3, #0
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d001      	beq.n	800601e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e0e7      	b.n	80061ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	4a78      	ldr	r2, [pc, #480]	; (8006204 <HAL_I2C_Init+0x280>)
 8006022:	fba2 2303 	umull	r2, r3, r2, r3
 8006026:	0c9b      	lsrs	r3, r3, #18
 8006028:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	430a      	orrs	r2, r1
 800603c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	6a1b      	ldr	r3, [r3, #32]
 8006044:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	4a6a      	ldr	r2, [pc, #424]	; (80061f8 <HAL_I2C_Init+0x274>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d802      	bhi.n	8006058 <HAL_I2C_Init+0xd4>
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	3301      	adds	r3, #1
 8006056:	e009      	b.n	800606c <HAL_I2C_Init+0xe8>
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800605e:	fb02 f303 	mul.w	r3, r2, r3
 8006062:	4a69      	ldr	r2, [pc, #420]	; (8006208 <HAL_I2C_Init+0x284>)
 8006064:	fba2 2303 	umull	r2, r3, r2, r3
 8006068:	099b      	lsrs	r3, r3, #6
 800606a:	3301      	adds	r3, #1
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	6812      	ldr	r2, [r2, #0]
 8006070:	430b      	orrs	r3, r1
 8006072:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800607e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	495c      	ldr	r1, [pc, #368]	; (80061f8 <HAL_I2C_Init+0x274>)
 8006088:	428b      	cmp	r3, r1
 800608a:	d819      	bhi.n	80060c0 <HAL_I2C_Init+0x13c>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	1e59      	subs	r1, r3, #1
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	fbb1 f3f3 	udiv	r3, r1, r3
 800609a:	1c59      	adds	r1, r3, #1
 800609c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80060a0:	400b      	ands	r3, r1
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00a      	beq.n	80060bc <HAL_I2C_Init+0x138>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	1e59      	subs	r1, r3, #1
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	005b      	lsls	r3, r3, #1
 80060b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80060b4:	3301      	adds	r3, #1
 80060b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060ba:	e051      	b.n	8006160 <HAL_I2C_Init+0x1dc>
 80060bc:	2304      	movs	r3, #4
 80060be:	e04f      	b.n	8006160 <HAL_I2C_Init+0x1dc>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d111      	bne.n	80060ec <HAL_I2C_Init+0x168>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	1e58      	subs	r0, r3, #1
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6859      	ldr	r1, [r3, #4]
 80060d0:	460b      	mov	r3, r1
 80060d2:	005b      	lsls	r3, r3, #1
 80060d4:	440b      	add	r3, r1
 80060d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80060da:	3301      	adds	r3, #1
 80060dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	bf0c      	ite	eq
 80060e4:	2301      	moveq	r3, #1
 80060e6:	2300      	movne	r3, #0
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	e012      	b.n	8006112 <HAL_I2C_Init+0x18e>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	1e58      	subs	r0, r3, #1
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6859      	ldr	r1, [r3, #4]
 80060f4:	460b      	mov	r3, r1
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	440b      	add	r3, r1
 80060fa:	0099      	lsls	r1, r3, #2
 80060fc:	440b      	add	r3, r1
 80060fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006102:	3301      	adds	r3, #1
 8006104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006108:	2b00      	cmp	r3, #0
 800610a:	bf0c      	ite	eq
 800610c:	2301      	moveq	r3, #1
 800610e:	2300      	movne	r3, #0
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d001      	beq.n	800611a <HAL_I2C_Init+0x196>
 8006116:	2301      	movs	r3, #1
 8006118:	e022      	b.n	8006160 <HAL_I2C_Init+0x1dc>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10e      	bne.n	8006140 <HAL_I2C_Init+0x1bc>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	1e58      	subs	r0, r3, #1
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6859      	ldr	r1, [r3, #4]
 800612a:	460b      	mov	r3, r1
 800612c:	005b      	lsls	r3, r3, #1
 800612e:	440b      	add	r3, r1
 8006130:	fbb0 f3f3 	udiv	r3, r0, r3
 8006134:	3301      	adds	r3, #1
 8006136:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800613a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800613e:	e00f      	b.n	8006160 <HAL_I2C_Init+0x1dc>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	1e58      	subs	r0, r3, #1
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6859      	ldr	r1, [r3, #4]
 8006148:	460b      	mov	r3, r1
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	440b      	add	r3, r1
 800614e:	0099      	lsls	r1, r3, #2
 8006150:	440b      	add	r3, r1
 8006152:	fbb0 f3f3 	udiv	r3, r0, r3
 8006156:	3301      	adds	r3, #1
 8006158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800615c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006160:	6879      	ldr	r1, [r7, #4]
 8006162:	6809      	ldr	r1, [r1, #0]
 8006164:	4313      	orrs	r3, r2
 8006166:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	69da      	ldr	r2, [r3, #28]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	431a      	orrs	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	430a      	orrs	r2, r1
 8006182:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800618e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	6911      	ldr	r1, [r2, #16]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	68d2      	ldr	r2, [r2, #12]
 800619a:	4311      	orrs	r1, r2
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6812      	ldr	r2, [r2, #0]
 80061a0:	430b      	orrs	r3, r1
 80061a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	695a      	ldr	r2, [r3, #20]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	431a      	orrs	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	430a      	orrs	r2, r1
 80061be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f042 0201 	orr.w	r2, r2, #1
 80061ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2220      	movs	r2, #32
 80061da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	000186a0 	.word	0x000186a0
 80061fc:	001e847f 	.word	0x001e847f
 8006200:	003d08ff 	.word	0x003d08ff
 8006204:	431bde83 	.word	0x431bde83
 8006208:	10624dd3 	.word	0x10624dd3

0800620c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b088      	sub	sp, #32
 8006210:	af02      	add	r7, sp, #8
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	4608      	mov	r0, r1
 8006216:	4611      	mov	r1, r2
 8006218:	461a      	mov	r2, r3
 800621a:	4603      	mov	r3, r0
 800621c:	817b      	strh	r3, [r7, #10]
 800621e:	460b      	mov	r3, r1
 8006220:	813b      	strh	r3, [r7, #8]
 8006222:	4613      	mov	r3, r2
 8006224:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006226:	f7ff f93f 	bl	80054a8 <HAL_GetTick>
 800622a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b20      	cmp	r3, #32
 8006236:	f040 80d9 	bne.w	80063ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	2319      	movs	r3, #25
 8006240:	2201      	movs	r2, #1
 8006242:	496d      	ldr	r1, [pc, #436]	; (80063f8 <HAL_I2C_Mem_Write+0x1ec>)
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f000 fc7f 	bl	8006b48 <I2C_WaitOnFlagUntilTimeout>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d001      	beq.n	8006254 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006250:	2302      	movs	r3, #2
 8006252:	e0cc      	b.n	80063ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800625a:	2b01      	cmp	r3, #1
 800625c:	d101      	bne.n	8006262 <HAL_I2C_Mem_Write+0x56>
 800625e:	2302      	movs	r3, #2
 8006260:	e0c5      	b.n	80063ee <HAL_I2C_Mem_Write+0x1e2>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0301 	and.w	r3, r3, #1
 8006274:	2b01      	cmp	r3, #1
 8006276:	d007      	beq.n	8006288 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f042 0201 	orr.w	r2, r2, #1
 8006286:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006296:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2221      	movs	r2, #33	; 0x21
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2240      	movs	r2, #64	; 0x40
 80062a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6a3a      	ldr	r2, [r7, #32]
 80062b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80062b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062be:	b29a      	uxth	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	4a4d      	ldr	r2, [pc, #308]	; (80063fc <HAL_I2C_Mem_Write+0x1f0>)
 80062c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80062ca:	88f8      	ldrh	r0, [r7, #6]
 80062cc:	893a      	ldrh	r2, [r7, #8]
 80062ce:	8979      	ldrh	r1, [r7, #10]
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	9301      	str	r3, [sp, #4]
 80062d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d6:	9300      	str	r3, [sp, #0]
 80062d8:	4603      	mov	r3, r0
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f000 fab6 	bl	800684c <I2C_RequestMemoryWrite>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d052      	beq.n	800638c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e081      	b.n	80063ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f000 fd00 	bl	8006cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00d      	beq.n	8006316 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fe:	2b04      	cmp	r3, #4
 8006300:	d107      	bne.n	8006312 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006310:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e06b      	b.n	80063ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631a:	781a      	ldrb	r2, [r3, #0]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006326:	1c5a      	adds	r2, r3, #1
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006330:	3b01      	subs	r3, #1
 8006332:	b29a      	uxth	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800633c:	b29b      	uxth	r3, r3
 800633e:	3b01      	subs	r3, #1
 8006340:	b29a      	uxth	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	695b      	ldr	r3, [r3, #20]
 800634c:	f003 0304 	and.w	r3, r3, #4
 8006350:	2b04      	cmp	r3, #4
 8006352:	d11b      	bne.n	800638c <HAL_I2C_Mem_Write+0x180>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006358:	2b00      	cmp	r3, #0
 800635a:	d017      	beq.n	800638c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	781a      	ldrb	r2, [r3, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636c:	1c5a      	adds	r2, r3, #1
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006376:	3b01      	subs	r3, #1
 8006378:	b29a      	uxth	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006382:	b29b      	uxth	r3, r3
 8006384:	3b01      	subs	r3, #1
 8006386:	b29a      	uxth	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1aa      	bne.n	80062ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 fcec 	bl	8006d76 <I2C_WaitOnBTFFlagUntilTimeout>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00d      	beq.n	80063c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a8:	2b04      	cmp	r3, #4
 80063aa:	d107      	bne.n	80063bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e016      	b.n	80063ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2220      	movs	r2, #32
 80063d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	e000      	b.n	80063ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80063ec:	2302      	movs	r3, #2
  }
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3718      	adds	r7, #24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	00100002 	.word	0x00100002
 80063fc:	ffff0000 	.word	0xffff0000

08006400 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b08c      	sub	sp, #48	; 0x30
 8006404:	af02      	add	r7, sp, #8
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	4608      	mov	r0, r1
 800640a:	4611      	mov	r1, r2
 800640c:	461a      	mov	r2, r3
 800640e:	4603      	mov	r3, r0
 8006410:	817b      	strh	r3, [r7, #10]
 8006412:	460b      	mov	r3, r1
 8006414:	813b      	strh	r3, [r7, #8]
 8006416:	4613      	mov	r3, r2
 8006418:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800641a:	f7ff f845 	bl	80054a8 <HAL_GetTick>
 800641e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b20      	cmp	r3, #32
 800642a:	f040 8208 	bne.w	800683e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006430:	9300      	str	r3, [sp, #0]
 8006432:	2319      	movs	r3, #25
 8006434:	2201      	movs	r2, #1
 8006436:	497b      	ldr	r1, [pc, #492]	; (8006624 <HAL_I2C_Mem_Read+0x224>)
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f000 fb85 	bl	8006b48 <I2C_WaitOnFlagUntilTimeout>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006444:	2302      	movs	r3, #2
 8006446:	e1fb      	b.n	8006840 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800644e:	2b01      	cmp	r3, #1
 8006450:	d101      	bne.n	8006456 <HAL_I2C_Mem_Read+0x56>
 8006452:	2302      	movs	r3, #2
 8006454:	e1f4      	b.n	8006840 <HAL_I2C_Mem_Read+0x440>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0301 	and.w	r3, r3, #1
 8006468:	2b01      	cmp	r3, #1
 800646a:	d007      	beq.n	800647c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f042 0201 	orr.w	r2, r2, #1
 800647a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800648a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2222      	movs	r2, #34	; 0x22
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2240      	movs	r2, #64	; 0x40
 8006498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80064ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4a5b      	ldr	r2, [pc, #364]	; (8006628 <HAL_I2C_Mem_Read+0x228>)
 80064bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80064be:	88f8      	ldrh	r0, [r7, #6]
 80064c0:	893a      	ldrh	r2, [r7, #8]
 80064c2:	8979      	ldrh	r1, [r7, #10]
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	9301      	str	r3, [sp, #4]
 80064c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	4603      	mov	r3, r0
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 fa52 	bl	8006978 <I2C_RequestMemoryRead>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e1b0      	b.n	8006840 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d113      	bne.n	800650e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064e6:	2300      	movs	r3, #0
 80064e8:	623b      	str	r3, [r7, #32]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	695b      	ldr	r3, [r3, #20]
 80064f0:	623b      	str	r3, [r7, #32]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	623b      	str	r3, [r7, #32]
 80064fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800650a:	601a      	str	r2, [r3, #0]
 800650c:	e184      	b.n	8006818 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006512:	2b01      	cmp	r3, #1
 8006514:	d11b      	bne.n	800654e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006524:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006526:	2300      	movs	r3, #0
 8006528:	61fb      	str	r3, [r7, #28]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	695b      	ldr	r3, [r3, #20]
 8006530:	61fb      	str	r3, [r7, #28]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	61fb      	str	r3, [r7, #28]
 800653a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	e164      	b.n	8006818 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006552:	2b02      	cmp	r3, #2
 8006554:	d11b      	bne.n	800658e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006564:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006574:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006576:	2300      	movs	r3, #0
 8006578:	61bb      	str	r3, [r7, #24]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	695b      	ldr	r3, [r3, #20]
 8006580:	61bb      	str	r3, [r7, #24]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	61bb      	str	r3, [r7, #24]
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	e144      	b.n	8006818 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800658e:	2300      	movs	r3, #0
 8006590:	617b      	str	r3, [r7, #20]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	695b      	ldr	r3, [r3, #20]
 8006598:	617b      	str	r3, [r7, #20]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80065a4:	e138      	b.n	8006818 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065aa:	2b03      	cmp	r3, #3
 80065ac:	f200 80f1 	bhi.w	8006792 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d123      	bne.n	8006600 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f000 fc1b 	bl	8006df8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d001      	beq.n	80065cc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e139      	b.n	8006840 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	691a      	ldr	r2, [r3, #16]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d6:	b2d2      	uxtb	r2, r2
 80065d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065de:	1c5a      	adds	r2, r3, #1
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065e8:	3b01      	subs	r3, #1
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	3b01      	subs	r3, #1
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80065fe:	e10b      	b.n	8006818 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006604:	2b02      	cmp	r3, #2
 8006606:	d14e      	bne.n	80066a6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660e:	2200      	movs	r2, #0
 8006610:	4906      	ldr	r1, [pc, #24]	; (800662c <HAL_I2C_Mem_Read+0x22c>)
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f000 fa98 	bl	8006b48 <I2C_WaitOnFlagUntilTimeout>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d008      	beq.n	8006630 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e10e      	b.n	8006840 <HAL_I2C_Mem_Read+0x440>
 8006622:	bf00      	nop
 8006624:	00100002 	.word	0x00100002
 8006628:	ffff0000 	.word	0xffff0000
 800662c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800663e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	691a      	ldr	r2, [r3, #16]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664a:	b2d2      	uxtb	r2, r2
 800664c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800665c:	3b01      	subs	r3, #1
 800665e:	b29a      	uxth	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006668:	b29b      	uxth	r3, r3
 800666a:	3b01      	subs	r3, #1
 800666c:	b29a      	uxth	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	691a      	ldr	r2, [r3, #16]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667c:	b2d2      	uxtb	r2, r2
 800667e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006684:	1c5a      	adds	r2, r3, #1
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800668e:	3b01      	subs	r3, #1
 8006690:	b29a      	uxth	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800669a:	b29b      	uxth	r3, r3
 800669c:	3b01      	subs	r3, #1
 800669e:	b29a      	uxth	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066a4:	e0b8      	b.n	8006818 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ac:	2200      	movs	r2, #0
 80066ae:	4966      	ldr	r1, [pc, #408]	; (8006848 <HAL_I2C_Mem_Read+0x448>)
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f000 fa49 	bl	8006b48 <I2C_WaitOnFlagUntilTimeout>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e0bf      	b.n	8006840 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	691a      	ldr	r2, [r3, #16]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066da:	b2d2      	uxtb	r2, r2
 80066dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e2:	1c5a      	adds	r2, r3, #1
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ec:	3b01      	subs	r3, #1
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	3b01      	subs	r3, #1
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006708:	2200      	movs	r2, #0
 800670a:	494f      	ldr	r1, [pc, #316]	; (8006848 <HAL_I2C_Mem_Read+0x448>)
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 fa1b 	bl	8006b48 <I2C_WaitOnFlagUntilTimeout>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e091      	b.n	8006840 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800672a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	691a      	ldr	r2, [r3, #16]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006736:	b2d2      	uxtb	r2, r2
 8006738:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673e:	1c5a      	adds	r2, r3, #1
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006748:	3b01      	subs	r3, #1
 800674a:	b29a      	uxth	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006754:	b29b      	uxth	r3, r3
 8006756:	3b01      	subs	r3, #1
 8006758:	b29a      	uxth	r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	691a      	ldr	r2, [r3, #16]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006768:	b2d2      	uxtb	r2, r2
 800676a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006770:	1c5a      	adds	r2, r3, #1
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800677a:	3b01      	subs	r3, #1
 800677c:	b29a      	uxth	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006786:	b29b      	uxth	r3, r3
 8006788:	3b01      	subs	r3, #1
 800678a:	b29a      	uxth	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006790:	e042      	b.n	8006818 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006794:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f000 fb2e 	bl	8006df8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d001      	beq.n	80067a6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e04c      	b.n	8006840 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	691a      	ldr	r2, [r3, #16]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b0:	b2d2      	uxtb	r2, r2
 80067b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b8:	1c5a      	adds	r2, r3, #1
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067c2:	3b01      	subs	r3, #1
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	3b01      	subs	r3, #1
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	f003 0304 	and.w	r3, r3, #4
 80067e2:	2b04      	cmp	r3, #4
 80067e4:	d118      	bne.n	8006818 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	691a      	ldr	r2, [r3, #16]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f0:	b2d2      	uxtb	r2, r2
 80067f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f8:	1c5a      	adds	r2, r3, #1
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006802:	3b01      	subs	r3, #1
 8006804:	b29a      	uxth	r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800680e:	b29b      	uxth	r3, r3
 8006810:	3b01      	subs	r3, #1
 8006812:	b29a      	uxth	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800681c:	2b00      	cmp	r3, #0
 800681e:	f47f aec2 	bne.w	80065a6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2220      	movs	r2, #32
 8006826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	e000      	b.n	8006840 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800683e:	2302      	movs	r3, #2
  }
}
 8006840:	4618      	mov	r0, r3
 8006842:	3728      	adds	r7, #40	; 0x28
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	00010004 	.word	0x00010004

0800684c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b088      	sub	sp, #32
 8006850:	af02      	add	r7, sp, #8
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	4608      	mov	r0, r1
 8006856:	4611      	mov	r1, r2
 8006858:	461a      	mov	r2, r3
 800685a:	4603      	mov	r3, r0
 800685c:	817b      	strh	r3, [r7, #10]
 800685e:	460b      	mov	r3, r1
 8006860:	813b      	strh	r3, [r7, #8]
 8006862:	4613      	mov	r3, r2
 8006864:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006874:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	6a3b      	ldr	r3, [r7, #32]
 800687c:	2200      	movs	r2, #0
 800687e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f000 f960 	bl	8006b48 <I2C_WaitOnFlagUntilTimeout>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00d      	beq.n	80068aa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800689c:	d103      	bne.n	80068a6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e05f      	b.n	800696a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80068aa:	897b      	ldrh	r3, [r7, #10]
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	461a      	mov	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80068b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	6a3a      	ldr	r2, [r7, #32]
 80068be:	492d      	ldr	r1, [pc, #180]	; (8006974 <I2C_RequestMemoryWrite+0x128>)
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 f998 	bl	8006bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d001      	beq.n	80068d0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e04c      	b.n	800696a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068d0:	2300      	movs	r3, #0
 80068d2:	617b      	str	r3, [r7, #20]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	617b      	str	r3, [r7, #20]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	617b      	str	r3, [r7, #20]
 80068e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068e8:	6a39      	ldr	r1, [r7, #32]
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f000 fa02 	bl	8006cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00d      	beq.n	8006912 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fa:	2b04      	cmp	r3, #4
 80068fc:	d107      	bne.n	800690e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800690c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e02b      	b.n	800696a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006912:	88fb      	ldrh	r3, [r7, #6]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d105      	bne.n	8006924 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006918:	893b      	ldrh	r3, [r7, #8]
 800691a:	b2da      	uxtb	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	611a      	str	r2, [r3, #16]
 8006922:	e021      	b.n	8006968 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006924:	893b      	ldrh	r3, [r7, #8]
 8006926:	0a1b      	lsrs	r3, r3, #8
 8006928:	b29b      	uxth	r3, r3
 800692a:	b2da      	uxtb	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006934:	6a39      	ldr	r1, [r7, #32]
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f000 f9dc 	bl	8006cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00d      	beq.n	800695e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006946:	2b04      	cmp	r3, #4
 8006948:	d107      	bne.n	800695a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006958:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e005      	b.n	800696a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800695e:	893b      	ldrh	r3, [r7, #8]
 8006960:	b2da      	uxtb	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3718      	adds	r7, #24
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	00010002 	.word	0x00010002

08006978 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b088      	sub	sp, #32
 800697c:	af02      	add	r7, sp, #8
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	4608      	mov	r0, r1
 8006982:	4611      	mov	r1, r2
 8006984:	461a      	mov	r2, r3
 8006986:	4603      	mov	r3, r0
 8006988:	817b      	strh	r3, [r7, #10]
 800698a:	460b      	mov	r3, r1
 800698c:	813b      	strh	r3, [r7, #8]
 800698e:	4613      	mov	r3, r2
 8006990:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069a0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f000 f8c2 	bl	8006b48 <I2C_WaitOnFlagUntilTimeout>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00d      	beq.n	80069e6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069d8:	d103      	bne.n	80069e2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e0aa      	b.n	8006b3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80069e6:	897b      	ldrh	r3, [r7, #10]
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	461a      	mov	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80069f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	6a3a      	ldr	r2, [r7, #32]
 80069fa:	4952      	ldr	r1, [pc, #328]	; (8006b44 <I2C_RequestMemoryRead+0x1cc>)
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f000 f8fa 	bl	8006bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d001      	beq.n	8006a0c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e097      	b.n	8006b3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	617b      	str	r3, [r7, #20]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	617b      	str	r3, [r7, #20]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	617b      	str	r3, [r7, #20]
 8006a20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a24:	6a39      	ldr	r1, [r7, #32]
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f000 f964 	bl	8006cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00d      	beq.n	8006a4e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a36:	2b04      	cmp	r3, #4
 8006a38:	d107      	bne.n	8006a4a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e076      	b.n	8006b3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a4e:	88fb      	ldrh	r3, [r7, #6]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d105      	bne.n	8006a60 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a54:	893b      	ldrh	r3, [r7, #8]
 8006a56:	b2da      	uxtb	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	611a      	str	r2, [r3, #16]
 8006a5e:	e021      	b.n	8006aa4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006a60:	893b      	ldrh	r3, [r7, #8]
 8006a62:	0a1b      	lsrs	r3, r3, #8
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	b2da      	uxtb	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a70:	6a39      	ldr	r1, [r7, #32]
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f000 f93e 	bl	8006cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00d      	beq.n	8006a9a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a82:	2b04      	cmp	r3, #4
 8006a84:	d107      	bne.n	8006a96 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e050      	b.n	8006b3c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a9a:	893b      	ldrh	r3, [r7, #8]
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aa6:	6a39      	ldr	r1, [r7, #32]
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 f923 	bl	8006cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00d      	beq.n	8006ad0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab8:	2b04      	cmp	r3, #4
 8006aba:	d107      	bne.n	8006acc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e035      	b.n	8006b3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ade:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	6a3b      	ldr	r3, [r7, #32]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f000 f82b 	bl	8006b48 <I2C_WaitOnFlagUntilTimeout>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00d      	beq.n	8006b14 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b06:	d103      	bne.n	8006b10 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e013      	b.n	8006b3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006b14:	897b      	ldrh	r3, [r7, #10]
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	f043 0301 	orr.w	r3, r3, #1
 8006b1c:	b2da      	uxtb	r2, r3
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b26:	6a3a      	ldr	r2, [r7, #32]
 8006b28:	4906      	ldr	r1, [pc, #24]	; (8006b44 <I2C_RequestMemoryRead+0x1cc>)
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	f000 f863 	bl	8006bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e000      	b.n	8006b3c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3718      	adds	r7, #24
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	00010002 	.word	0x00010002

08006b48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	603b      	str	r3, [r7, #0]
 8006b54:	4613      	mov	r3, r2
 8006b56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b58:	e025      	b.n	8006ba6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b60:	d021      	beq.n	8006ba6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b62:	f7fe fca1 	bl	80054a8 <HAL_GetTick>
 8006b66:	4602      	mov	r2, r0
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	683a      	ldr	r2, [r7, #0]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d302      	bcc.n	8006b78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d116      	bne.n	8006ba6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2220      	movs	r2, #32
 8006b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b92:	f043 0220 	orr.w	r2, r3, #32
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e023      	b.n	8006bee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	0c1b      	lsrs	r3, r3, #16
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d10d      	bne.n	8006bcc <I2C_WaitOnFlagUntilTimeout+0x84>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	43da      	mvns	r2, r3
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	bf0c      	ite	eq
 8006bc2:	2301      	moveq	r3, #1
 8006bc4:	2300      	movne	r3, #0
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	461a      	mov	r2, r3
 8006bca:	e00c      	b.n	8006be6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	43da      	mvns	r2, r3
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	bf0c      	ite	eq
 8006bde:	2301      	moveq	r3, #1
 8006be0:	2300      	movne	r3, #0
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	461a      	mov	r2, r3
 8006be6:	79fb      	ldrb	r3, [r7, #7]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d0b6      	beq.n	8006b5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b084      	sub	sp, #16
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	60f8      	str	r0, [r7, #12]
 8006bfe:	60b9      	str	r1, [r7, #8]
 8006c00:	607a      	str	r2, [r7, #4]
 8006c02:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c04:	e051      	b.n	8006caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c14:	d123      	bne.n	8006c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c24:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c2e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2220      	movs	r2, #32
 8006c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4a:	f043 0204 	orr.w	r2, r3, #4
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e046      	b.n	8006cec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c64:	d021      	beq.n	8006caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c66:	f7fe fc1f 	bl	80054a8 <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d302      	bcc.n	8006c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d116      	bne.n	8006caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2220      	movs	r2, #32
 8006c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c96:	f043 0220 	orr.w	r2, r3, #32
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e020      	b.n	8006cec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	0c1b      	lsrs	r3, r3, #16
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d10c      	bne.n	8006cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	695b      	ldr	r3, [r3, #20]
 8006cba:	43da      	mvns	r2, r3
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	bf14      	ite	ne
 8006cc6:	2301      	movne	r3, #1
 8006cc8:	2300      	moveq	r3, #0
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	e00b      	b.n	8006ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	43da      	mvns	r2, r3
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	4013      	ands	r3, r2
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	bf14      	ite	ne
 8006ce0:	2301      	movne	r3, #1
 8006ce2:	2300      	moveq	r3, #0
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d18d      	bne.n	8006c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d00:	e02d      	b.n	8006d5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f000 f8ce 	bl	8006ea4 <I2C_IsAcknowledgeFailed>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e02d      	b.n	8006d6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d18:	d021      	beq.n	8006d5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d1a:	f7fe fbc5 	bl	80054a8 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d302      	bcc.n	8006d30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d116      	bne.n	8006d5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2220      	movs	r2, #32
 8006d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4a:	f043 0220 	orr.w	r2, r3, #32
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e007      	b.n	8006d6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	695b      	ldr	r3, [r3, #20]
 8006d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d68:	2b80      	cmp	r3, #128	; 0x80
 8006d6a:	d1ca      	bne.n	8006d02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b084      	sub	sp, #16
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	60f8      	str	r0, [r7, #12]
 8006d7e:	60b9      	str	r1, [r7, #8]
 8006d80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d82:	e02d      	b.n	8006de0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f000 f88d 	bl	8006ea4 <I2C_IsAcknowledgeFailed>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d001      	beq.n	8006d94 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e02d      	b.n	8006df0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d9a:	d021      	beq.n	8006de0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d9c:	f7fe fb84 	bl	80054a8 <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	68ba      	ldr	r2, [r7, #8]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d302      	bcc.n	8006db2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d116      	bne.n	8006de0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2220      	movs	r2, #32
 8006dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dcc:	f043 0220 	orr.w	r2, r3, #32
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e007      	b.n	8006df0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	f003 0304 	and.w	r3, r3, #4
 8006dea:	2b04      	cmp	r3, #4
 8006dec:	d1ca      	bne.n	8006d84 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e04:	e042      	b.n	8006e8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	695b      	ldr	r3, [r3, #20]
 8006e0c:	f003 0310 	and.w	r3, r3, #16
 8006e10:	2b10      	cmp	r3, #16
 8006e12:	d119      	bne.n	8006e48 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f06f 0210 	mvn.w	r2, #16
 8006e1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2220      	movs	r2, #32
 8006e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e029      	b.n	8006e9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e48:	f7fe fb2e 	bl	80054a8 <HAL_GetTick>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d302      	bcc.n	8006e5e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d116      	bne.n	8006e8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2220      	movs	r2, #32
 8006e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e78:	f043 0220 	orr.w	r2, r3, #32
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e007      	b.n	8006e9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e96:	2b40      	cmp	r3, #64	; 0x40
 8006e98:	d1b5      	bne.n	8006e06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eba:	d11b      	bne.n	8006ef4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ec4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2220      	movs	r2, #32
 8006ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee0:	f043 0204 	orr.w	r2, r3, #4
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e000      	b.n	8006ef6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	370c      	adds	r7, #12
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b083      	sub	sp, #12
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
 8006f0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b20      	cmp	r3, #32
 8006f16:	d129      	bne.n	8006f6c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2224      	movs	r2, #36	; 0x24
 8006f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f022 0201 	bic.w	r2, r2, #1
 8006f2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f022 0210 	bic.w	r2, r2, #16
 8006f3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	683a      	ldr	r2, [r7, #0]
 8006f4c:	430a      	orrs	r2, r1
 8006f4e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f042 0201 	orr.w	r2, r2, #1
 8006f5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2220      	movs	r2, #32
 8006f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	e000      	b.n	8006f6e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006f6c:	2302      	movs	r3, #2
  }
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b085      	sub	sp, #20
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006f84:	2300      	movs	r3, #0
 8006f86:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	2b20      	cmp	r3, #32
 8006f92:	d12a      	bne.n	8006fea <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2224      	movs	r2, #36	; 0x24
 8006f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f022 0201 	bic.w	r2, r2, #1
 8006faa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006fb4:	89fb      	ldrh	r3, [r7, #14]
 8006fb6:	f023 030f 	bic.w	r3, r3, #15
 8006fba:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	89fb      	ldrh	r3, [r7, #14]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	89fa      	ldrh	r2, [r7, #14]
 8006fcc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f042 0201 	orr.w	r2, r2, #1
 8006fdc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2220      	movs	r2, #32
 8006fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	e000      	b.n	8006fec <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006fea:	2302      	movs	r3, #2
  }
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3714      	adds	r7, #20
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006ff8:	b590      	push	{r4, r7, lr}
 8006ffa:	b08d      	sub	sp, #52	; 0x34
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4618      	mov	r0, r3
 8007010:	f005 faf8 	bl	800c604 <USB_GetMode>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	f040 839d 	bne.w	8007756 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4618      	mov	r0, r3
 8007022:	f005 fa5c 	bl	800c4de <USB_ReadInterrupts>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	f000 8393 	beq.w	8007754 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4618      	mov	r0, r3
 8007034:	f005 fa53 	bl	800c4de <USB_ReadInterrupts>
 8007038:	4603      	mov	r3, r0
 800703a:	f003 0302 	and.w	r3, r3, #2
 800703e:	2b02      	cmp	r3, #2
 8007040:	d107      	bne.n	8007052 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	695a      	ldr	r2, [r3, #20]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f002 0202 	and.w	r2, r2, #2
 8007050:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4618      	mov	r0, r3
 8007058:	f005 fa41 	bl	800c4de <USB_ReadInterrupts>
 800705c:	4603      	mov	r3, r0
 800705e:	f003 0310 	and.w	r3, r3, #16
 8007062:	2b10      	cmp	r3, #16
 8007064:	d161      	bne.n	800712a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	699a      	ldr	r2, [r3, #24]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f022 0210 	bic.w	r2, r2, #16
 8007074:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	f003 020f 	and.w	r2, r3, #15
 8007082:	4613      	mov	r3, r2
 8007084:	00db      	lsls	r3, r3, #3
 8007086:	1a9b      	subs	r3, r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	4413      	add	r3, r2
 8007092:	3304      	adds	r3, #4
 8007094:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	0c5b      	lsrs	r3, r3, #17
 800709a:	f003 030f 	and.w	r3, r3, #15
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d124      	bne.n	80070ec <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80070a2:	69ba      	ldr	r2, [r7, #24]
 80070a4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80070a8:	4013      	ands	r3, r2
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d035      	beq.n	800711a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	091b      	lsrs	r3, r3, #4
 80070b6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80070b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070bc:	b29b      	uxth	r3, r3
 80070be:	461a      	mov	r2, r3
 80070c0:	6a38      	ldr	r0, [r7, #32]
 80070c2:	f005 f8ba 	bl	800c23a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	68da      	ldr	r2, [r3, #12]
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	091b      	lsrs	r3, r3, #4
 80070ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070d2:	441a      	add	r2, r3
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	699a      	ldr	r2, [r3, #24]
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	091b      	lsrs	r3, r3, #4
 80070e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070e4:	441a      	add	r2, r3
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	619a      	str	r2, [r3, #24]
 80070ea:	e016      	b.n	800711a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	0c5b      	lsrs	r3, r3, #17
 80070f0:	f003 030f 	and.w	r3, r3, #15
 80070f4:	2b06      	cmp	r3, #6
 80070f6:	d110      	bne.n	800711a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80070fe:	2208      	movs	r2, #8
 8007100:	4619      	mov	r1, r3
 8007102:	6a38      	ldr	r0, [r7, #32]
 8007104:	f005 f899 	bl	800c23a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	699a      	ldr	r2, [r3, #24]
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	091b      	lsrs	r3, r3, #4
 8007110:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007114:	441a      	add	r2, r3
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	699a      	ldr	r2, [r3, #24]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f042 0210 	orr.w	r2, r2, #16
 8007128:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4618      	mov	r0, r3
 8007130:	f005 f9d5 	bl	800c4de <USB_ReadInterrupts>
 8007134:	4603      	mov	r3, r0
 8007136:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800713a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800713e:	d16e      	bne.n	800721e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8007140:	2300      	movs	r3, #0
 8007142:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4618      	mov	r0, r3
 800714a:	f005 f9db 	bl	800c504 <USB_ReadDevAllOutEpInterrupt>
 800714e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007150:	e062      	b.n	8007218 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007154:	f003 0301 	and.w	r3, r3, #1
 8007158:	2b00      	cmp	r3, #0
 800715a:	d057      	beq.n	800720c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007162:	b2d2      	uxtb	r2, r2
 8007164:	4611      	mov	r1, r2
 8007166:	4618      	mov	r0, r3
 8007168:	f005 fa00 	bl	800c56c <USB_ReadDevOutEPInterrupt>
 800716c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00c      	beq.n	8007192 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717a:	015a      	lsls	r2, r3, #5
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	4413      	add	r3, r2
 8007180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007184:	461a      	mov	r2, r3
 8007186:	2301      	movs	r3, #1
 8007188:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800718a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fd4f 	bl	8007c30 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	f003 0308 	and.w	r3, r3, #8
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00c      	beq.n	80071b6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a8:	461a      	mov	r2, r3
 80071aa:	2308      	movs	r3, #8
 80071ac:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80071ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fe49 	bl	8007e48 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	f003 0310 	and.w	r3, r3, #16
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d008      	beq.n	80071d2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071cc:	461a      	mov	r2, r3
 80071ce:	2310      	movs	r3, #16
 80071d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	f003 0320 	and.w	r3, r3, #32
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d008      	beq.n	80071ee <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80071dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071de:	015a      	lsls	r2, r3, #5
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	4413      	add	r3, r2
 80071e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e8:	461a      	mov	r2, r3
 80071ea:	2320      	movs	r3, #32
 80071ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d009      	beq.n	800720c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007204:	461a      	mov	r2, r3
 8007206:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800720a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800720c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720e:	3301      	adds	r3, #1
 8007210:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007214:	085b      	lsrs	r3, r3, #1
 8007216:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721a:	2b00      	cmp	r3, #0
 800721c:	d199      	bne.n	8007152 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4618      	mov	r0, r3
 8007224:	f005 f95b 	bl	800c4de <USB_ReadInterrupts>
 8007228:	4603      	mov	r3, r0
 800722a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800722e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007232:	f040 80c0 	bne.w	80073b6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4618      	mov	r0, r3
 800723c:	f005 f97c 	bl	800c538 <USB_ReadDevAllInEpInterrupt>
 8007240:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007242:	2300      	movs	r3, #0
 8007244:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007246:	e0b2      	b.n	80073ae <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	2b00      	cmp	r3, #0
 8007250:	f000 80a7 	beq.w	80073a2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800725a:	b2d2      	uxtb	r2, r2
 800725c:	4611      	mov	r1, r2
 800725e:	4618      	mov	r0, r3
 8007260:	f005 f9a2 	bl	800c5a8 <USB_ReadDevInEPInterrupt>
 8007264:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	f003 0301 	and.w	r3, r3, #1
 800726c:	2b00      	cmp	r3, #0
 800726e:	d057      	beq.n	8007320 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007272:	f003 030f 	and.w	r3, r3, #15
 8007276:	2201      	movs	r2, #1
 8007278:	fa02 f303 	lsl.w	r3, r2, r3
 800727c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007284:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	43db      	mvns	r3, r3
 800728a:	69f9      	ldr	r1, [r7, #28]
 800728c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007290:	4013      	ands	r3, r2
 8007292:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007296:	015a      	lsls	r2, r3, #5
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	4413      	add	r3, r2
 800729c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a0:	461a      	mov	r2, r3
 80072a2:	2301      	movs	r3, #1
 80072a4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d132      	bne.n	8007314 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80072ae:	6879      	ldr	r1, [r7, #4]
 80072b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072b2:	4613      	mov	r3, r2
 80072b4:	00db      	lsls	r3, r3, #3
 80072b6:	1a9b      	subs	r3, r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	440b      	add	r3, r1
 80072bc:	3348      	adds	r3, #72	; 0x48
 80072be:	6819      	ldr	r1, [r3, #0]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072c4:	4613      	mov	r3, r2
 80072c6:	00db      	lsls	r3, r3, #3
 80072c8:	1a9b      	subs	r3, r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4403      	add	r3, r0
 80072ce:	3344      	adds	r3, #68	; 0x44
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4419      	add	r1, r3
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072d8:	4613      	mov	r3, r2
 80072da:	00db      	lsls	r3, r3, #3
 80072dc:	1a9b      	subs	r3, r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4403      	add	r3, r0
 80072e2:	3348      	adds	r3, #72	; 0x48
 80072e4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d113      	bne.n	8007314 <HAL_PCD_IRQHandler+0x31c>
 80072ec:	6879      	ldr	r1, [r7, #4]
 80072ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072f0:	4613      	mov	r3, r2
 80072f2:	00db      	lsls	r3, r3, #3
 80072f4:	1a9b      	subs	r3, r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	440b      	add	r3, r1
 80072fa:	3350      	adds	r3, #80	; 0x50
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d108      	bne.n	8007314 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6818      	ldr	r0, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800730c:	461a      	mov	r2, r3
 800730e:	2101      	movs	r1, #1
 8007310:	f005 f9aa 	bl	800c668 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007316:	b2db      	uxtb	r3, r3
 8007318:	4619      	mov	r1, r3
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f00b fa45 	bl	80127aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	f003 0308 	and.w	r3, r3, #8
 8007326:	2b00      	cmp	r3, #0
 8007328:	d008      	beq.n	800733c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800732a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732c:	015a      	lsls	r2, r3, #5
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	4413      	add	r3, r2
 8007332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007336:	461a      	mov	r2, r3
 8007338:	2308      	movs	r3, #8
 800733a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	f003 0310 	and.w	r3, r3, #16
 8007342:	2b00      	cmp	r3, #0
 8007344:	d008      	beq.n	8007358 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	015a      	lsls	r2, r3, #5
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	4413      	add	r3, r2
 800734e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007352:	461a      	mov	r2, r3
 8007354:	2310      	movs	r3, #16
 8007356:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800735e:	2b00      	cmp	r3, #0
 8007360:	d008      	beq.n	8007374 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007364:	015a      	lsls	r2, r3, #5
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	4413      	add	r3, r2
 800736a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800736e:	461a      	mov	r2, r3
 8007370:	2340      	movs	r3, #64	; 0x40
 8007372:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	f003 0302 	and.w	r3, r3, #2
 800737a:	2b00      	cmp	r3, #0
 800737c:	d008      	beq.n	8007390 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	4413      	add	r3, r2
 8007386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800738a:	461a      	mov	r2, r3
 800738c:	2302      	movs	r3, #2
 800738e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007396:	2b00      	cmp	r3, #0
 8007398:	d003      	beq.n	80073a2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800739a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 fbb9 	bl	8007b14 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80073a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a4:	3301      	adds	r3, #1
 80073a6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80073a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073aa:	085b      	lsrs	r3, r3, #1
 80073ac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80073ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f47f af49 	bne.w	8007248 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4618      	mov	r0, r3
 80073bc:	f005 f88f 	bl	800c4de <USB_ReadInterrupts>
 80073c0:	4603      	mov	r3, r0
 80073c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073ca:	d122      	bne.n	8007412 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	69fa      	ldr	r2, [r7, #28]
 80073d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073da:	f023 0301 	bic.w	r3, r3, #1
 80073de:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d108      	bne.n	80073fc <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80073f2:	2100      	movs	r1, #0
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fd6d 	bl	8007ed4 <HAL_PCDEx_LPM_Callback>
 80073fa:	e002      	b.n	8007402 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f00b fa4b 	bl	8012898 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	695a      	ldr	r2, [r3, #20]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007410:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4618      	mov	r0, r3
 8007418:	f005 f861 	bl	800c4de <USB_ReadInterrupts>
 800741c:	4603      	mov	r3, r0
 800741e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007422:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007426:	d112      	bne.n	800744e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	f003 0301 	and.w	r3, r3, #1
 8007434:	2b01      	cmp	r3, #1
 8007436:	d102      	bne.n	800743e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f00b fa07 	bl	801284c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	695a      	ldr	r2, [r3, #20]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800744c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4618      	mov	r0, r3
 8007454:	f005 f843 	bl	800c4de <USB_ReadInterrupts>
 8007458:	4603      	mov	r3, r0
 800745a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800745e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007462:	f040 80c7 	bne.w	80075f4 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	69fa      	ldr	r2, [r7, #28]
 8007470:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007474:	f023 0301 	bic.w	r3, r3, #1
 8007478:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2110      	movs	r1, #16
 8007480:	4618      	mov	r0, r3
 8007482:	f004 fa35 	bl	800b8f0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007486:	2300      	movs	r3, #0
 8007488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800748a:	e056      	b.n	800753a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800748c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748e:	015a      	lsls	r2, r3, #5
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	4413      	add	r3, r2
 8007494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007498:	461a      	mov	r2, r3
 800749a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800749e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80074a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a2:	015a      	lsls	r2, r3, #5
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	4413      	add	r3, r2
 80074a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074b0:	0151      	lsls	r1, r2, #5
 80074b2:	69fa      	ldr	r2, [r7, #28]
 80074b4:	440a      	add	r2, r1
 80074b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80074be:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80074c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c2:	015a      	lsls	r2, r3, #5
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	4413      	add	r3, r2
 80074c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074d0:	0151      	lsls	r1, r2, #5
 80074d2:	69fa      	ldr	r2, [r7, #28]
 80074d4:	440a      	add	r2, r1
 80074d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80074de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80074e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e2:	015a      	lsls	r2, r3, #5
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	4413      	add	r3, r2
 80074e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ec:	461a      	mov	r2, r3
 80074ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80074f2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80074f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f6:	015a      	lsls	r2, r3, #5
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007504:	0151      	lsls	r1, r2, #5
 8007506:	69fa      	ldr	r2, [r7, #28]
 8007508:	440a      	add	r2, r1
 800750a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800750e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007512:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007516:	015a      	lsls	r2, r3, #5
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	4413      	add	r3, r2
 800751c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007524:	0151      	lsls	r1, r2, #5
 8007526:	69fa      	ldr	r2, [r7, #28]
 8007528:	440a      	add	r2, r1
 800752a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800752e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007532:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007536:	3301      	adds	r3, #1
 8007538:	62fb      	str	r3, [r7, #44]	; 0x2c
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007540:	429a      	cmp	r2, r3
 8007542:	d3a3      	bcc.n	800748c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800754a:	69db      	ldr	r3, [r3, #28]
 800754c:	69fa      	ldr	r2, [r7, #28]
 800754e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007552:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007556:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755c:	2b00      	cmp	r3, #0
 800755e:	d016      	beq.n	800758e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800756a:	69fa      	ldr	r2, [r7, #28]
 800756c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007570:	f043 030b 	orr.w	r3, r3, #11
 8007574:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800757e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007580:	69fa      	ldr	r2, [r7, #28]
 8007582:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007586:	f043 030b 	orr.w	r3, r3, #11
 800758a:	6453      	str	r3, [r2, #68]	; 0x44
 800758c:	e015      	b.n	80075ba <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	69fa      	ldr	r2, [r7, #28]
 8007598:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800759c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80075a0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80075a4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	69fa      	ldr	r2, [r7, #28]
 80075b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075b4:	f043 030b 	orr.w	r3, r3, #11
 80075b8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	69fa      	ldr	r2, [r7, #28]
 80075c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075c8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80075cc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6818      	ldr	r0, [r3, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80075de:	461a      	mov	r2, r3
 80075e0:	f005 f842 	bl	800c668 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	695a      	ldr	r2, [r3, #20]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80075f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4618      	mov	r0, r3
 80075fa:	f004 ff70 	bl	800c4de <USB_ReadInterrupts>
 80075fe:	4603      	mov	r3, r0
 8007600:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007608:	d124      	bne.n	8007654 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4618      	mov	r0, r3
 8007610:	f005 f806 	bl	800c620 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4618      	mov	r0, r3
 800761a:	f004 f98d 	bl	800b938 <USB_GetDevSpeed>
 800761e:	4603      	mov	r3, r0
 8007620:	461a      	mov	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681c      	ldr	r4, [r3, #0]
 800762a:	f001 f8db 	bl	80087e4 <HAL_RCC_GetHCLKFreq>
 800762e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007634:	b2db      	uxtb	r3, r3
 8007636:	461a      	mov	r2, r3
 8007638:	4620      	mov	r0, r4
 800763a:	f004 f8b7 	bl	800b7ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f00b f8db 	bl	80127fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	695a      	ldr	r2, [r3, #20]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007652:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4618      	mov	r0, r3
 800765a:	f004 ff40 	bl	800c4de <USB_ReadInterrupts>
 800765e:	4603      	mov	r3, r0
 8007660:	f003 0308 	and.w	r3, r3, #8
 8007664:	2b08      	cmp	r3, #8
 8007666:	d10a      	bne.n	800767e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f00b f8b8 	bl	80127de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	695a      	ldr	r2, [r3, #20]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f002 0208 	and.w	r2, r2, #8
 800767c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4618      	mov	r0, r3
 8007684:	f004 ff2b 	bl	800c4de <USB_ReadInterrupts>
 8007688:	4603      	mov	r3, r0
 800768a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800768e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007692:	d10f      	bne.n	80076b4 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007694:	2300      	movs	r3, #0
 8007696:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769a:	b2db      	uxtb	r3, r3
 800769c:	4619      	mov	r1, r3
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f00b f91a 	bl	80128d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	695a      	ldr	r2, [r3, #20]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80076b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4618      	mov	r0, r3
 80076ba:	f004 ff10 	bl	800c4de <USB_ReadInterrupts>
 80076be:	4603      	mov	r3, r0
 80076c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076c8:	d10f      	bne.n	80076ea <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80076ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	4619      	mov	r1, r3
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f00b f8ed 	bl	80128b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	695a      	ldr	r2, [r3, #20]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80076e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4618      	mov	r0, r3
 80076f0:	f004 fef5 	bl	800c4de <USB_ReadInterrupts>
 80076f4:	4603      	mov	r3, r0
 80076f6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80076fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076fe:	d10a      	bne.n	8007716 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f00b f8fb 	bl	80128fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	695a      	ldr	r2, [r3, #20]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007714:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4618      	mov	r0, r3
 800771c:	f004 fedf 	bl	800c4de <USB_ReadInterrupts>
 8007720:	4603      	mov	r3, r0
 8007722:	f003 0304 	and.w	r3, r3, #4
 8007726:	2b04      	cmp	r3, #4
 8007728:	d115      	bne.n	8007756 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	f003 0304 	and.w	r3, r3, #4
 8007738:	2b00      	cmp	r3, #0
 800773a:	d002      	beq.n	8007742 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f00b f8eb 	bl	8012918 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	6859      	ldr	r1, [r3, #4]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	69ba      	ldr	r2, [r7, #24]
 800774e:	430a      	orrs	r2, r1
 8007750:	605a      	str	r2, [r3, #4]
 8007752:	e000      	b.n	8007756 <HAL_PCD_IRQHandler+0x75e>
      return;
 8007754:	bf00      	nop
    }
  }
}
 8007756:	3734      	adds	r7, #52	; 0x34
 8007758:	46bd      	mov	sp, r7
 800775a:	bd90      	pop	{r4, r7, pc}

0800775c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	460b      	mov	r3, r1
 8007766:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800776e:	2b01      	cmp	r3, #1
 8007770:	d101      	bne.n	8007776 <HAL_PCD_SetAddress+0x1a>
 8007772:	2302      	movs	r3, #2
 8007774:	e013      	b.n	800779e <HAL_PCD_SetAddress+0x42>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	78fa      	ldrb	r2, [r7, #3]
 8007782:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	78fa      	ldrb	r2, [r7, #3]
 800778c:	4611      	mov	r1, r2
 800778e:	4618      	mov	r0, r3
 8007790:	f004 fe7f 	bl	800c492 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b084      	sub	sp, #16
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
 80077ae:	4608      	mov	r0, r1
 80077b0:	4611      	mov	r1, r2
 80077b2:	461a      	mov	r2, r3
 80077b4:	4603      	mov	r3, r0
 80077b6:	70fb      	strb	r3, [r7, #3]
 80077b8:	460b      	mov	r3, r1
 80077ba:	803b      	strh	r3, [r7, #0]
 80077bc:	4613      	mov	r3, r2
 80077be:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80077c0:	2300      	movs	r3, #0
 80077c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80077c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	da0f      	bge.n	80077ec <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80077cc:	78fb      	ldrb	r3, [r7, #3]
 80077ce:	f003 020f 	and.w	r2, r3, #15
 80077d2:	4613      	mov	r3, r2
 80077d4:	00db      	lsls	r3, r3, #3
 80077d6:	1a9b      	subs	r3, r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	3338      	adds	r3, #56	; 0x38
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	4413      	add	r3, r2
 80077e0:	3304      	adds	r3, #4
 80077e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2201      	movs	r2, #1
 80077e8:	705a      	strb	r2, [r3, #1]
 80077ea:	e00f      	b.n	800780c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80077ec:	78fb      	ldrb	r3, [r7, #3]
 80077ee:	f003 020f 	and.w	r2, r3, #15
 80077f2:	4613      	mov	r3, r2
 80077f4:	00db      	lsls	r3, r3, #3
 80077f6:	1a9b      	subs	r3, r3, r2
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	4413      	add	r3, r2
 8007802:	3304      	adds	r3, #4
 8007804:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800780c:	78fb      	ldrb	r3, [r7, #3]
 800780e:	f003 030f 	and.w	r3, r3, #15
 8007812:	b2da      	uxtb	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007818:	883a      	ldrh	r2, [r7, #0]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	78ba      	ldrb	r2, [r7, #2]
 8007822:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	785b      	ldrb	r3, [r3, #1]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d004      	beq.n	8007836 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	b29a      	uxth	r2, r3
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007836:	78bb      	ldrb	r3, [r7, #2]
 8007838:	2b02      	cmp	r3, #2
 800783a:	d102      	bne.n	8007842 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007848:	2b01      	cmp	r3, #1
 800784a:	d101      	bne.n	8007850 <HAL_PCD_EP_Open+0xaa>
 800784c:	2302      	movs	r3, #2
 800784e:	e00e      	b.n	800786e <HAL_PCD_EP_Open+0xc8>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68f9      	ldr	r1, [r7, #12]
 800785e:	4618      	mov	r0, r3
 8007860:	f004 f88f 	bl	800b982 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800786c:	7afb      	ldrb	r3, [r7, #11]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b086      	sub	sp, #24
 800787a:	af00      	add	r7, sp, #0
 800787c:	60f8      	str	r0, [r7, #12]
 800787e:	607a      	str	r2, [r7, #4]
 8007880:	603b      	str	r3, [r7, #0]
 8007882:	460b      	mov	r3, r1
 8007884:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007886:	7afb      	ldrb	r3, [r7, #11]
 8007888:	f003 020f 	and.w	r2, r3, #15
 800788c:	4613      	mov	r3, r2
 800788e:	00db      	lsls	r3, r3, #3
 8007890:	1a9b      	subs	r3, r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	4413      	add	r3, r2
 800789c:	3304      	adds	r3, #4
 800789e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	683a      	ldr	r2, [r7, #0]
 80078aa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	2200      	movs	r2, #0
 80078b0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	2200      	movs	r2, #0
 80078b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80078b8:	7afb      	ldrb	r3, [r7, #11]
 80078ba:	f003 030f 	and.w	r3, r3, #15
 80078be:	b2da      	uxtb	r2, r3
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d102      	bne.n	80078d2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80078d2:	7afb      	ldrb	r3, [r7, #11]
 80078d4:	f003 030f 	and.w	r3, r3, #15
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d109      	bne.n	80078f0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6818      	ldr	r0, [r3, #0]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	461a      	mov	r2, r3
 80078e8:	6979      	ldr	r1, [r7, #20]
 80078ea:	f004 fb15 	bl	800bf18 <USB_EP0StartXfer>
 80078ee:	e008      	b.n	8007902 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6818      	ldr	r0, [r3, #0]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	461a      	mov	r2, r3
 80078fc:	6979      	ldr	r1, [r7, #20]
 80078fe:	f004 f8c7 	bl	800ba90 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007902:	2300      	movs	r3, #0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3718      	adds	r7, #24
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b086      	sub	sp, #24
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	607a      	str	r2, [r7, #4]
 8007916:	603b      	str	r3, [r7, #0]
 8007918:	460b      	mov	r3, r1
 800791a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800791c:	7afb      	ldrb	r3, [r7, #11]
 800791e:	f003 020f 	and.w	r2, r3, #15
 8007922:	4613      	mov	r3, r2
 8007924:	00db      	lsls	r3, r3, #3
 8007926:	1a9b      	subs	r3, r3, r2
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	3338      	adds	r3, #56	; 0x38
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	4413      	add	r3, r2
 8007930:	3304      	adds	r3, #4
 8007932:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	683a      	ldr	r2, [r7, #0]
 800793e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	2200      	movs	r2, #0
 8007944:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	2201      	movs	r2, #1
 800794a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800794c:	7afb      	ldrb	r3, [r7, #11]
 800794e:	f003 030f 	and.w	r3, r3, #15
 8007952:	b2da      	uxtb	r2, r3
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d102      	bne.n	8007966 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007966:	7afb      	ldrb	r3, [r7, #11]
 8007968:	f003 030f 	and.w	r3, r3, #15
 800796c:	2b00      	cmp	r3, #0
 800796e:	d109      	bne.n	8007984 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6818      	ldr	r0, [r3, #0]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	b2db      	uxtb	r3, r3
 800797a:	461a      	mov	r2, r3
 800797c:	6979      	ldr	r1, [r7, #20]
 800797e:	f004 facb 	bl	800bf18 <USB_EP0StartXfer>
 8007982:	e008      	b.n	8007996 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6818      	ldr	r0, [r3, #0]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	b2db      	uxtb	r3, r3
 800798e:	461a      	mov	r2, r3
 8007990:	6979      	ldr	r1, [r7, #20]
 8007992:	f004 f87d 	bl	800ba90 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3718      	adds	r7, #24
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	460b      	mov	r3, r1
 80079aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80079ac:	78fb      	ldrb	r3, [r7, #3]
 80079ae:	f003 020f 	and.w	r2, r3, #15
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d901      	bls.n	80079be <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e050      	b.n	8007a60 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80079be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	da0f      	bge.n	80079e6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80079c6:	78fb      	ldrb	r3, [r7, #3]
 80079c8:	f003 020f 	and.w	r2, r3, #15
 80079cc:	4613      	mov	r3, r2
 80079ce:	00db      	lsls	r3, r3, #3
 80079d0:	1a9b      	subs	r3, r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	3338      	adds	r3, #56	; 0x38
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	4413      	add	r3, r2
 80079da:	3304      	adds	r3, #4
 80079dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2201      	movs	r2, #1
 80079e2:	705a      	strb	r2, [r3, #1]
 80079e4:	e00d      	b.n	8007a02 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80079e6:	78fa      	ldrb	r2, [r7, #3]
 80079e8:	4613      	mov	r3, r2
 80079ea:	00db      	lsls	r3, r3, #3
 80079ec:	1a9b      	subs	r3, r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	4413      	add	r3, r2
 80079f8:	3304      	adds	r3, #4
 80079fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2201      	movs	r2, #1
 8007a06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a08:	78fb      	ldrb	r3, [r7, #3]
 8007a0a:	f003 030f 	and.w	r3, r3, #15
 8007a0e:	b2da      	uxtb	r2, r3
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d101      	bne.n	8007a22 <HAL_PCD_EP_SetStall+0x82>
 8007a1e:	2302      	movs	r3, #2
 8007a20:	e01e      	b.n	8007a60 <HAL_PCD_EP_SetStall+0xc0>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68f9      	ldr	r1, [r7, #12]
 8007a30:	4618      	mov	r0, r3
 8007a32:	f004 fc5a 	bl	800c2ea <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007a36:	78fb      	ldrb	r3, [r7, #3]
 8007a38:	f003 030f 	and.w	r3, r3, #15
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10a      	bne.n	8007a56 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6818      	ldr	r0, [r3, #0]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	b2d9      	uxtb	r1, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007a50:	461a      	mov	r2, r3
 8007a52:	f004 fe09 	bl	800c668 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	460b      	mov	r3, r1
 8007a72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007a74:	78fb      	ldrb	r3, [r7, #3]
 8007a76:	f003 020f 	and.w	r2, r3, #15
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d901      	bls.n	8007a86 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e042      	b.n	8007b0c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007a86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	da0f      	bge.n	8007aae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a8e:	78fb      	ldrb	r3, [r7, #3]
 8007a90:	f003 020f 	and.w	r2, r3, #15
 8007a94:	4613      	mov	r3, r2
 8007a96:	00db      	lsls	r3, r3, #3
 8007a98:	1a9b      	subs	r3, r3, r2
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	3338      	adds	r3, #56	; 0x38
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	3304      	adds	r3, #4
 8007aa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	705a      	strb	r2, [r3, #1]
 8007aac:	e00f      	b.n	8007ace <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007aae:	78fb      	ldrb	r3, [r7, #3]
 8007ab0:	f003 020f 	and.w	r2, r3, #15
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	00db      	lsls	r3, r3, #3
 8007ab8:	1a9b      	subs	r3, r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ad4:	78fb      	ldrb	r3, [r7, #3]
 8007ad6:	f003 030f 	and.w	r3, r3, #15
 8007ada:	b2da      	uxtb	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d101      	bne.n	8007aee <HAL_PCD_EP_ClrStall+0x86>
 8007aea:	2302      	movs	r3, #2
 8007aec:	e00e      	b.n	8007b0c <HAL_PCD_EP_ClrStall+0xa4>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68f9      	ldr	r1, [r7, #12]
 8007afc:	4618      	mov	r0, r3
 8007afe:	f004 fc62 	bl	800c3c6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b08a      	sub	sp, #40	; 0x28
 8007b18:	af02      	add	r7, sp, #8
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007b28:	683a      	ldr	r2, [r7, #0]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	00db      	lsls	r3, r3, #3
 8007b2e:	1a9b      	subs	r3, r3, r2
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	3338      	adds	r3, #56	; 0x38
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	4413      	add	r3, r2
 8007b38:	3304      	adds	r3, #4
 8007b3a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	699a      	ldr	r2, [r3, #24]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	695b      	ldr	r3, [r3, #20]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d901      	bls.n	8007b4c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e06c      	b.n	8007c26 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	695a      	ldr	r2, [r3, #20]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	699b      	ldr	r3, [r3, #24]
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	69fa      	ldr	r2, [r7, #28]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d902      	bls.n	8007b68 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	3303      	adds	r3, #3
 8007b6c:	089b      	lsrs	r3, r3, #2
 8007b6e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007b70:	e02b      	b.n	8007bca <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	695a      	ldr	r2, [r3, #20]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	69fa      	ldr	r2, [r7, #28]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d902      	bls.n	8007b8e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	3303      	adds	r3, #3
 8007b92:	089b      	lsrs	r3, r3, #2
 8007b94:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	68d9      	ldr	r1, [r3, #12]
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	b2da      	uxtb	r2, r3
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	4603      	mov	r3, r0
 8007bac:	6978      	ldr	r0, [r7, #20]
 8007bae:	f004 fb06 	bl	800c1be <USB_WritePacket>

    ep->xfer_buff  += len;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	68da      	ldr	r2, [r3, #12]
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	441a      	add	r2, r3
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	699a      	ldr	r2, [r3, #24]
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	441a      	add	r2, r3
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	015a      	lsls	r2, r3, #5
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	69ba      	ldr	r2, [r7, #24]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d809      	bhi.n	8007bf4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	699a      	ldr	r2, [r3, #24]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d203      	bcs.n	8007bf4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	695b      	ldr	r3, [r3, #20]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1be      	bne.n	8007b72 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	695a      	ldr	r2, [r3, #20]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	699b      	ldr	r3, [r3, #24]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d811      	bhi.n	8007c24 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	f003 030f 	and.w	r3, r3, #15
 8007c06:	2201      	movs	r2, #1
 8007c08:	fa02 f303 	lsl.w	r3, r2, r3
 8007c0c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	43db      	mvns	r3, r3
 8007c1a:	6939      	ldr	r1, [r7, #16]
 8007c1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c20:	4013      	ands	r3, r2
 8007c22:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3720      	adds	r7, #32
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
	...

08007c30 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	333c      	adds	r3, #60	; 0x3c
 8007c48:	3304      	adds	r3, #4
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	015a      	lsls	r2, r3, #5
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	4413      	add	r3, r2
 8007c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	f040 80a0 	bne.w	8007da8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	f003 0308 	and.w	r3, r3, #8
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d015      	beq.n	8007c9e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	4a72      	ldr	r2, [pc, #456]	; (8007e40 <PCD_EP_OutXfrComplete_int+0x210>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	f240 80dd 	bls.w	8007e36 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f000 80d7 	beq.w	8007e36 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	015a      	lsls	r2, r3, #5
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	4413      	add	r3, r2
 8007c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c94:	461a      	mov	r2, r3
 8007c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c9a:	6093      	str	r3, [r2, #8]
 8007c9c:	e0cb      	b.n	8007e36 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	f003 0320 	and.w	r3, r3, #32
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d009      	beq.n	8007cbc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	015a      	lsls	r2, r3, #5
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	4413      	add	r3, r2
 8007cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	2320      	movs	r3, #32
 8007cb8:	6093      	str	r3, [r2, #8]
 8007cba:	e0bc      	b.n	8007e36 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f040 80b7 	bne.w	8007e36 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	4a5d      	ldr	r2, [pc, #372]	; (8007e40 <PCD_EP_OutXfrComplete_int+0x210>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d90f      	bls.n	8007cf0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00a      	beq.n	8007cf0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	015a      	lsls	r2, r3, #5
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cec:	6093      	str	r3, [r2, #8]
 8007cee:	e0a2      	b.n	8007e36 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007cf0:	6879      	ldr	r1, [r7, #4]
 8007cf2:	683a      	ldr	r2, [r7, #0]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	00db      	lsls	r3, r3, #3
 8007cf8:	1a9b      	subs	r3, r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	440b      	add	r3, r1
 8007cfe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007d02:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	0159      	lsls	r1, r3, #5
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	440b      	add	r3, r1
 8007d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007d16:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	683a      	ldr	r2, [r7, #0]
 8007d1c:	4613      	mov	r3, r2
 8007d1e:	00db      	lsls	r3, r3, #3
 8007d20:	1a9b      	subs	r3, r3, r2
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	4403      	add	r3, r0
 8007d26:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007d2a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007d2c:	6879      	ldr	r1, [r7, #4]
 8007d2e:	683a      	ldr	r2, [r7, #0]
 8007d30:	4613      	mov	r3, r2
 8007d32:	00db      	lsls	r3, r3, #3
 8007d34:	1a9b      	subs	r3, r3, r2
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	440b      	add	r3, r1
 8007d3a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007d3e:	6819      	ldr	r1, [r3, #0]
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	4613      	mov	r3, r2
 8007d46:	00db      	lsls	r3, r3, #3
 8007d48:	1a9b      	subs	r3, r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4403      	add	r3, r0
 8007d4e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4419      	add	r1, r3
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	683a      	ldr	r2, [r7, #0]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	00db      	lsls	r3, r3, #3
 8007d5e:	1a9b      	subs	r3, r3, r2
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4403      	add	r3, r0
 8007d64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007d68:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d114      	bne.n	8007d9a <PCD_EP_OutXfrComplete_int+0x16a>
 8007d70:	6879      	ldr	r1, [r7, #4]
 8007d72:	683a      	ldr	r2, [r7, #0]
 8007d74:	4613      	mov	r3, r2
 8007d76:	00db      	lsls	r3, r3, #3
 8007d78:	1a9b      	subs	r3, r3, r2
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	440b      	add	r3, r1
 8007d7e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d108      	bne.n	8007d9a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6818      	ldr	r0, [r3, #0]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007d92:	461a      	mov	r2, r3
 8007d94:	2101      	movs	r1, #1
 8007d96:	f004 fc67 	bl	800c668 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	4619      	mov	r1, r3
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f00a fce7 	bl	8012774 <HAL_PCD_DataOutStageCallback>
 8007da6:	e046      	b.n	8007e36 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	4a26      	ldr	r2, [pc, #152]	; (8007e44 <PCD_EP_OutXfrComplete_int+0x214>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d124      	bne.n	8007dfa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00a      	beq.n	8007dd0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	015a      	lsls	r2, r3, #5
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dcc:	6093      	str	r3, [r2, #8]
 8007dce:	e032      	b.n	8007e36 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	f003 0320 	and.w	r3, r3, #32
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d008      	beq.n	8007dec <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	015a      	lsls	r2, r3, #5
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	4413      	add	r3, r2
 8007de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de6:	461a      	mov	r2, r3
 8007de8:	2320      	movs	r3, #32
 8007dea:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	4619      	mov	r1, r3
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f00a fcbe 	bl	8012774 <HAL_PCD_DataOutStageCallback>
 8007df8:	e01d      	b.n	8007e36 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d114      	bne.n	8007e2a <PCD_EP_OutXfrComplete_int+0x1fa>
 8007e00:	6879      	ldr	r1, [r7, #4]
 8007e02:	683a      	ldr	r2, [r7, #0]
 8007e04:	4613      	mov	r3, r2
 8007e06:	00db      	lsls	r3, r3, #3
 8007e08:	1a9b      	subs	r3, r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	440b      	add	r3, r1
 8007e0e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d108      	bne.n	8007e2a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6818      	ldr	r0, [r3, #0]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007e22:	461a      	mov	r2, r3
 8007e24:	2100      	movs	r1, #0
 8007e26:	f004 fc1f 	bl	800c668 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	4619      	mov	r1, r3
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f00a fc9f 	bl	8012774 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3718      	adds	r7, #24
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	4f54300a 	.word	0x4f54300a
 8007e44:	4f54310a 	.word	0x4f54310a

08007e48 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b086      	sub	sp, #24
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	333c      	adds	r3, #60	; 0x3c
 8007e60:	3304      	adds	r3, #4
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	015a      	lsls	r2, r3, #5
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	4a15      	ldr	r2, [pc, #84]	; (8007ed0 <PCD_EP_OutSetupPacket_int+0x88>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d90e      	bls.n	8007e9c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d009      	beq.n	8007e9c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	015a      	lsls	r2, r3, #5
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	4413      	add	r3, r2
 8007e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e94:	461a      	mov	r2, r3
 8007e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e9a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f00a fc57 	bl	8012750 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	4a0a      	ldr	r2, [pc, #40]	; (8007ed0 <PCD_EP_OutSetupPacket_int+0x88>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d90c      	bls.n	8007ec4 <PCD_EP_OutSetupPacket_int+0x7c>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d108      	bne.n	8007ec4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6818      	ldr	r0, [r3, #0]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	2101      	movs	r1, #1
 8007ec0:	f004 fbd2 	bl	800c668 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3718      	adds	r7, #24
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	4f54300a 	.word	0x4f54300a

08007ed4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	460b      	mov	r3, r1
 8007ede:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8007ef4:	4b05      	ldr	r3, [pc, #20]	; (8007f0c <HAL_PWR_EnableWakeUpPin+0x20>)
 8007ef6:	685a      	ldr	r2, [r3, #4]
 8007ef8:	4904      	ldr	r1, [pc, #16]	; (8007f0c <HAL_PWR_EnableWakeUpPin+0x20>)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	604b      	str	r3, [r1, #4]
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr
 8007f0c:	40007000 	.word	0x40007000

08007f10 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8007f18:	4b06      	ldr	r3, [pc, #24]	; (8007f34 <HAL_PWR_DisableWakeUpPin+0x24>)
 8007f1a:	685a      	ldr	r2, [r3, #4]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	43db      	mvns	r3, r3
 8007f20:	4904      	ldr	r1, [pc, #16]	; (8007f34 <HAL_PWR_DisableWakeUpPin+0x24>)
 8007f22:	4013      	ands	r3, r2
 8007f24:	604b      	str	r3, [r1, #4]
}
 8007f26:	bf00      	nop
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	40007000 	.word	0x40007000

08007f38 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8007f3c:	4b08      	ldr	r3, [pc, #32]	; (8007f60 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a07      	ldr	r2, [pc, #28]	; (8007f60 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8007f42:	f043 0302 	orr.w	r3, r3, #2
 8007f46:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007f48:	4b06      	ldr	r3, [pc, #24]	; (8007f64 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	4a05      	ldr	r2, [pc, #20]	; (8007f64 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8007f4e:	f043 0304 	orr.w	r3, r3, #4
 8007f52:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8007f54:	bf30      	wfi
}
 8007f56:	bf00      	nop
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr
 8007f60:	40007000 	.word	0x40007000
 8007f64:	e000ed00 	.word	0xe000ed00

08007f68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b086      	sub	sp, #24
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d101      	bne.n	8007f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	e264      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 0301 	and.w	r3, r3, #1
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d075      	beq.n	8008072 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f86:	4ba3      	ldr	r3, [pc, #652]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	f003 030c 	and.w	r3, r3, #12
 8007f8e:	2b04      	cmp	r3, #4
 8007f90:	d00c      	beq.n	8007fac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f92:	4ba0      	ldr	r3, [pc, #640]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f9a:	2b08      	cmp	r3, #8
 8007f9c:	d112      	bne.n	8007fc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f9e:	4b9d      	ldr	r3, [pc, #628]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007faa:	d10b      	bne.n	8007fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fac:	4b99      	ldr	r3, [pc, #612]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d05b      	beq.n	8008070 <HAL_RCC_OscConfig+0x108>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d157      	bne.n	8008070 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e23f      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fcc:	d106      	bne.n	8007fdc <HAL_RCC_OscConfig+0x74>
 8007fce:	4b91      	ldr	r3, [pc, #580]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a90      	ldr	r2, [pc, #576]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8007fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fd8:	6013      	str	r3, [r2, #0]
 8007fda:	e01d      	b.n	8008018 <HAL_RCC_OscConfig+0xb0>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007fe4:	d10c      	bne.n	8008000 <HAL_RCC_OscConfig+0x98>
 8007fe6:	4b8b      	ldr	r3, [pc, #556]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a8a      	ldr	r2, [pc, #552]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8007fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ff0:	6013      	str	r3, [r2, #0]
 8007ff2:	4b88      	ldr	r3, [pc, #544]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a87      	ldr	r2, [pc, #540]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8007ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ffc:	6013      	str	r3, [r2, #0]
 8007ffe:	e00b      	b.n	8008018 <HAL_RCC_OscConfig+0xb0>
 8008000:	4b84      	ldr	r3, [pc, #528]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a83      	ldr	r2, [pc, #524]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8008006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800800a:	6013      	str	r3, [r2, #0]
 800800c:	4b81      	ldr	r3, [pc, #516]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a80      	ldr	r2, [pc, #512]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8008012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d013      	beq.n	8008048 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008020:	f7fd fa42 	bl	80054a8 <HAL_GetTick>
 8008024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008026:	e008      	b.n	800803a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008028:	f7fd fa3e 	bl	80054a8 <HAL_GetTick>
 800802c:	4602      	mov	r2, r0
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	2b64      	cmp	r3, #100	; 0x64
 8008034:	d901      	bls.n	800803a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008036:	2303      	movs	r3, #3
 8008038:	e204      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800803a:	4b76      	ldr	r3, [pc, #472]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008042:	2b00      	cmp	r3, #0
 8008044:	d0f0      	beq.n	8008028 <HAL_RCC_OscConfig+0xc0>
 8008046:	e014      	b.n	8008072 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008048:	f7fd fa2e 	bl	80054a8 <HAL_GetTick>
 800804c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800804e:	e008      	b.n	8008062 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008050:	f7fd fa2a 	bl	80054a8 <HAL_GetTick>
 8008054:	4602      	mov	r2, r0
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	2b64      	cmp	r3, #100	; 0x64
 800805c:	d901      	bls.n	8008062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800805e:	2303      	movs	r3, #3
 8008060:	e1f0      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008062:	4b6c      	ldr	r3, [pc, #432]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800806a:	2b00      	cmp	r3, #0
 800806c:	d1f0      	bne.n	8008050 <HAL_RCC_OscConfig+0xe8>
 800806e:	e000      	b.n	8008072 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f003 0302 	and.w	r3, r3, #2
 800807a:	2b00      	cmp	r3, #0
 800807c:	d063      	beq.n	8008146 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800807e:	4b65      	ldr	r3, [pc, #404]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	f003 030c 	and.w	r3, r3, #12
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00b      	beq.n	80080a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800808a:	4b62      	ldr	r3, [pc, #392]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008092:	2b08      	cmp	r3, #8
 8008094:	d11c      	bne.n	80080d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008096:	4b5f      	ldr	r3, [pc, #380]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d116      	bne.n	80080d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080a2:	4b5c      	ldr	r3, [pc, #368]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 0302 	and.w	r3, r3, #2
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d005      	beq.n	80080ba <HAL_RCC_OscConfig+0x152>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d001      	beq.n	80080ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	e1c4      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080ba:	4b56      	ldr	r3, [pc, #344]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	00db      	lsls	r3, r3, #3
 80080c8:	4952      	ldr	r1, [pc, #328]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 80080ca:	4313      	orrs	r3, r2
 80080cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080ce:	e03a      	b.n	8008146 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d020      	beq.n	800811a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80080d8:	4b4f      	ldr	r3, [pc, #316]	; (8008218 <HAL_RCC_OscConfig+0x2b0>)
 80080da:	2201      	movs	r2, #1
 80080dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080de:	f7fd f9e3 	bl	80054a8 <HAL_GetTick>
 80080e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080e4:	e008      	b.n	80080f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080e6:	f7fd f9df 	bl	80054a8 <HAL_GetTick>
 80080ea:	4602      	mov	r2, r0
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	1ad3      	subs	r3, r2, r3
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d901      	bls.n	80080f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80080f4:	2303      	movs	r3, #3
 80080f6:	e1a5      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080f8:	4b46      	ldr	r3, [pc, #280]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 0302 	and.w	r3, r3, #2
 8008100:	2b00      	cmp	r3, #0
 8008102:	d0f0      	beq.n	80080e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008104:	4b43      	ldr	r3, [pc, #268]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	00db      	lsls	r3, r3, #3
 8008112:	4940      	ldr	r1, [pc, #256]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8008114:	4313      	orrs	r3, r2
 8008116:	600b      	str	r3, [r1, #0]
 8008118:	e015      	b.n	8008146 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800811a:	4b3f      	ldr	r3, [pc, #252]	; (8008218 <HAL_RCC_OscConfig+0x2b0>)
 800811c:	2200      	movs	r2, #0
 800811e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008120:	f7fd f9c2 	bl	80054a8 <HAL_GetTick>
 8008124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008126:	e008      	b.n	800813a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008128:	f7fd f9be 	bl	80054a8 <HAL_GetTick>
 800812c:	4602      	mov	r2, r0
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	2b02      	cmp	r3, #2
 8008134:	d901      	bls.n	800813a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008136:	2303      	movs	r3, #3
 8008138:	e184      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800813a:	4b36      	ldr	r3, [pc, #216]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 0302 	and.w	r3, r3, #2
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1f0      	bne.n	8008128 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f003 0308 	and.w	r3, r3, #8
 800814e:	2b00      	cmp	r3, #0
 8008150:	d030      	beq.n	80081b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	695b      	ldr	r3, [r3, #20]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d016      	beq.n	8008188 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800815a:	4b30      	ldr	r3, [pc, #192]	; (800821c <HAL_RCC_OscConfig+0x2b4>)
 800815c:	2201      	movs	r2, #1
 800815e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008160:	f7fd f9a2 	bl	80054a8 <HAL_GetTick>
 8008164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008166:	e008      	b.n	800817a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008168:	f7fd f99e 	bl	80054a8 <HAL_GetTick>
 800816c:	4602      	mov	r2, r0
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	2b02      	cmp	r3, #2
 8008174:	d901      	bls.n	800817a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	e164      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800817a:	4b26      	ldr	r3, [pc, #152]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 800817c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800817e:	f003 0302 	and.w	r3, r3, #2
 8008182:	2b00      	cmp	r3, #0
 8008184:	d0f0      	beq.n	8008168 <HAL_RCC_OscConfig+0x200>
 8008186:	e015      	b.n	80081b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008188:	4b24      	ldr	r3, [pc, #144]	; (800821c <HAL_RCC_OscConfig+0x2b4>)
 800818a:	2200      	movs	r2, #0
 800818c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800818e:	f7fd f98b 	bl	80054a8 <HAL_GetTick>
 8008192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008194:	e008      	b.n	80081a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008196:	f7fd f987 	bl	80054a8 <HAL_GetTick>
 800819a:	4602      	mov	r2, r0
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d901      	bls.n	80081a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80081a4:	2303      	movs	r3, #3
 80081a6:	e14d      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081a8:	4b1a      	ldr	r3, [pc, #104]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 80081aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081ac:	f003 0302 	and.w	r3, r3, #2
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1f0      	bne.n	8008196 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 0304 	and.w	r3, r3, #4
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f000 80a0 	beq.w	8008302 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081c2:	2300      	movs	r3, #0
 80081c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081c6:	4b13      	ldr	r3, [pc, #76]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 80081c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d10f      	bne.n	80081f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081d2:	2300      	movs	r3, #0
 80081d4:	60bb      	str	r3, [r7, #8]
 80081d6:	4b0f      	ldr	r3, [pc, #60]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 80081d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081da:	4a0e      	ldr	r2, [pc, #56]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 80081dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081e0:	6413      	str	r3, [r2, #64]	; 0x40
 80081e2:	4b0c      	ldr	r3, [pc, #48]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 80081e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081ea:	60bb      	str	r3, [r7, #8]
 80081ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081ee:	2301      	movs	r3, #1
 80081f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081f2:	4b0b      	ldr	r3, [pc, #44]	; (8008220 <HAL_RCC_OscConfig+0x2b8>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d121      	bne.n	8008242 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80081fe:	4b08      	ldr	r3, [pc, #32]	; (8008220 <HAL_RCC_OscConfig+0x2b8>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a07      	ldr	r2, [pc, #28]	; (8008220 <HAL_RCC_OscConfig+0x2b8>)
 8008204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008208:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800820a:	f7fd f94d 	bl	80054a8 <HAL_GetTick>
 800820e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008210:	e011      	b.n	8008236 <HAL_RCC_OscConfig+0x2ce>
 8008212:	bf00      	nop
 8008214:	40023800 	.word	0x40023800
 8008218:	42470000 	.word	0x42470000
 800821c:	42470e80 	.word	0x42470e80
 8008220:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008224:	f7fd f940 	bl	80054a8 <HAL_GetTick>
 8008228:	4602      	mov	r2, r0
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	2b02      	cmp	r3, #2
 8008230:	d901      	bls.n	8008236 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008232:	2303      	movs	r3, #3
 8008234:	e106      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008236:	4b85      	ldr	r3, [pc, #532]	; (800844c <HAL_RCC_OscConfig+0x4e4>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800823e:	2b00      	cmp	r3, #0
 8008240:	d0f0      	beq.n	8008224 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	2b01      	cmp	r3, #1
 8008248:	d106      	bne.n	8008258 <HAL_RCC_OscConfig+0x2f0>
 800824a:	4b81      	ldr	r3, [pc, #516]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 800824c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800824e:	4a80      	ldr	r2, [pc, #512]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 8008250:	f043 0301 	orr.w	r3, r3, #1
 8008254:	6713      	str	r3, [r2, #112]	; 0x70
 8008256:	e01c      	b.n	8008292 <HAL_RCC_OscConfig+0x32a>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	2b05      	cmp	r3, #5
 800825e:	d10c      	bne.n	800827a <HAL_RCC_OscConfig+0x312>
 8008260:	4b7b      	ldr	r3, [pc, #492]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 8008262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008264:	4a7a      	ldr	r2, [pc, #488]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 8008266:	f043 0304 	orr.w	r3, r3, #4
 800826a:	6713      	str	r3, [r2, #112]	; 0x70
 800826c:	4b78      	ldr	r3, [pc, #480]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 800826e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008270:	4a77      	ldr	r2, [pc, #476]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 8008272:	f043 0301 	orr.w	r3, r3, #1
 8008276:	6713      	str	r3, [r2, #112]	; 0x70
 8008278:	e00b      	b.n	8008292 <HAL_RCC_OscConfig+0x32a>
 800827a:	4b75      	ldr	r3, [pc, #468]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 800827c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800827e:	4a74      	ldr	r2, [pc, #464]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 8008280:	f023 0301 	bic.w	r3, r3, #1
 8008284:	6713      	str	r3, [r2, #112]	; 0x70
 8008286:	4b72      	ldr	r3, [pc, #456]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 8008288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800828a:	4a71      	ldr	r2, [pc, #452]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 800828c:	f023 0304 	bic.w	r3, r3, #4
 8008290:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d015      	beq.n	80082c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800829a:	f7fd f905 	bl	80054a8 <HAL_GetTick>
 800829e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082a0:	e00a      	b.n	80082b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082a2:	f7fd f901 	bl	80054a8 <HAL_GetTick>
 80082a6:	4602      	mov	r2, r0
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d901      	bls.n	80082b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80082b4:	2303      	movs	r3, #3
 80082b6:	e0c5      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082b8:	4b65      	ldr	r3, [pc, #404]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 80082ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082bc:	f003 0302 	and.w	r3, r3, #2
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d0ee      	beq.n	80082a2 <HAL_RCC_OscConfig+0x33a>
 80082c4:	e014      	b.n	80082f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082c6:	f7fd f8ef 	bl	80054a8 <HAL_GetTick>
 80082ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082cc:	e00a      	b.n	80082e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082ce:	f7fd f8eb 	bl	80054a8 <HAL_GetTick>
 80082d2:	4602      	mov	r2, r0
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	1ad3      	subs	r3, r2, r3
 80082d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80082dc:	4293      	cmp	r3, r2
 80082de:	d901      	bls.n	80082e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80082e0:	2303      	movs	r3, #3
 80082e2:	e0af      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082e4:	4b5a      	ldr	r3, [pc, #360]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 80082e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082e8:	f003 0302 	and.w	r3, r3, #2
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1ee      	bne.n	80082ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80082f0:	7dfb      	ldrb	r3, [r7, #23]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d105      	bne.n	8008302 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082f6:	4b56      	ldr	r3, [pc, #344]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 80082f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fa:	4a55      	ldr	r2, [pc, #340]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 80082fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008300:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	2b00      	cmp	r3, #0
 8008308:	f000 809b 	beq.w	8008442 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800830c:	4b50      	ldr	r3, [pc, #320]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	f003 030c 	and.w	r3, r3, #12
 8008314:	2b08      	cmp	r3, #8
 8008316:	d05c      	beq.n	80083d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	699b      	ldr	r3, [r3, #24]
 800831c:	2b02      	cmp	r3, #2
 800831e:	d141      	bne.n	80083a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008320:	4b4c      	ldr	r3, [pc, #304]	; (8008454 <HAL_RCC_OscConfig+0x4ec>)
 8008322:	2200      	movs	r2, #0
 8008324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008326:	f7fd f8bf 	bl	80054a8 <HAL_GetTick>
 800832a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800832c:	e008      	b.n	8008340 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800832e:	f7fd f8bb 	bl	80054a8 <HAL_GetTick>
 8008332:	4602      	mov	r2, r0
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	2b02      	cmp	r3, #2
 800833a:	d901      	bls.n	8008340 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800833c:	2303      	movs	r3, #3
 800833e:	e081      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008340:	4b43      	ldr	r3, [pc, #268]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008348:	2b00      	cmp	r3, #0
 800834a:	d1f0      	bne.n	800832e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	69da      	ldr	r2, [r3, #28]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6a1b      	ldr	r3, [r3, #32]
 8008354:	431a      	orrs	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835a:	019b      	lsls	r3, r3, #6
 800835c:	431a      	orrs	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008362:	085b      	lsrs	r3, r3, #1
 8008364:	3b01      	subs	r3, #1
 8008366:	041b      	lsls	r3, r3, #16
 8008368:	431a      	orrs	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800836e:	061b      	lsls	r3, r3, #24
 8008370:	4937      	ldr	r1, [pc, #220]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 8008372:	4313      	orrs	r3, r2
 8008374:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008376:	4b37      	ldr	r3, [pc, #220]	; (8008454 <HAL_RCC_OscConfig+0x4ec>)
 8008378:	2201      	movs	r2, #1
 800837a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800837c:	f7fd f894 	bl	80054a8 <HAL_GetTick>
 8008380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008382:	e008      	b.n	8008396 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008384:	f7fd f890 	bl	80054a8 <HAL_GetTick>
 8008388:	4602      	mov	r2, r0
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	1ad3      	subs	r3, r2, r3
 800838e:	2b02      	cmp	r3, #2
 8008390:	d901      	bls.n	8008396 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008392:	2303      	movs	r3, #3
 8008394:	e056      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008396:	4b2e      	ldr	r3, [pc, #184]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d0f0      	beq.n	8008384 <HAL_RCC_OscConfig+0x41c>
 80083a2:	e04e      	b.n	8008442 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083a4:	4b2b      	ldr	r3, [pc, #172]	; (8008454 <HAL_RCC_OscConfig+0x4ec>)
 80083a6:	2200      	movs	r2, #0
 80083a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083aa:	f7fd f87d 	bl	80054a8 <HAL_GetTick>
 80083ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083b0:	e008      	b.n	80083c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083b2:	f7fd f879 	bl	80054a8 <HAL_GetTick>
 80083b6:	4602      	mov	r2, r0
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	1ad3      	subs	r3, r2, r3
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d901      	bls.n	80083c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80083c0:	2303      	movs	r3, #3
 80083c2:	e03f      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083c4:	4b22      	ldr	r3, [pc, #136]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1f0      	bne.n	80083b2 <HAL_RCC_OscConfig+0x44a>
 80083d0:	e037      	b.n	8008442 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d101      	bne.n	80083de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e032      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80083de:	4b1c      	ldr	r3, [pc, #112]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	699b      	ldr	r3, [r3, #24]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d028      	beq.n	800843e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d121      	bne.n	800843e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008404:	429a      	cmp	r2, r3
 8008406:	d11a      	bne.n	800843e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800840e:	4013      	ands	r3, r2
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008414:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008416:	4293      	cmp	r3, r2
 8008418:	d111      	bne.n	800843e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008424:	085b      	lsrs	r3, r3, #1
 8008426:	3b01      	subs	r3, #1
 8008428:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800842a:	429a      	cmp	r2, r3
 800842c:	d107      	bne.n	800843e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008438:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800843a:	429a      	cmp	r2, r3
 800843c:	d001      	beq.n	8008442 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	e000      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	3718      	adds	r7, #24
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}
 800844c:	40007000 	.word	0x40007000
 8008450:	40023800 	.word	0x40023800
 8008454:	42470060 	.word	0x42470060

08008458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d101      	bne.n	800846c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	e0cc      	b.n	8008606 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800846c:	4b68      	ldr	r3, [pc, #416]	; (8008610 <HAL_RCC_ClockConfig+0x1b8>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 030f 	and.w	r3, r3, #15
 8008474:	683a      	ldr	r2, [r7, #0]
 8008476:	429a      	cmp	r2, r3
 8008478:	d90c      	bls.n	8008494 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800847a:	4b65      	ldr	r3, [pc, #404]	; (8008610 <HAL_RCC_ClockConfig+0x1b8>)
 800847c:	683a      	ldr	r2, [r7, #0]
 800847e:	b2d2      	uxtb	r2, r2
 8008480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008482:	4b63      	ldr	r3, [pc, #396]	; (8008610 <HAL_RCC_ClockConfig+0x1b8>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 030f 	and.w	r3, r3, #15
 800848a:	683a      	ldr	r2, [r7, #0]
 800848c:	429a      	cmp	r2, r3
 800848e:	d001      	beq.n	8008494 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e0b8      	b.n	8008606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 0302 	and.w	r3, r3, #2
 800849c:	2b00      	cmp	r3, #0
 800849e:	d020      	beq.n	80084e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 0304 	and.w	r3, r3, #4
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d005      	beq.n	80084b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80084ac:	4b59      	ldr	r3, [pc, #356]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	4a58      	ldr	r2, [pc, #352]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 80084b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80084b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0308 	and.w	r3, r3, #8
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d005      	beq.n	80084d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80084c4:	4b53      	ldr	r3, [pc, #332]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	4a52      	ldr	r2, [pc, #328]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 80084ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80084ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084d0:	4b50      	ldr	r3, [pc, #320]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	494d      	ldr	r1, [pc, #308]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 80084de:	4313      	orrs	r3, r2
 80084e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f003 0301 	and.w	r3, r3, #1
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d044      	beq.n	8008578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d107      	bne.n	8008506 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084f6:	4b47      	ldr	r3, [pc, #284]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d119      	bne.n	8008536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	e07f      	b.n	8008606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	2b02      	cmp	r3, #2
 800850c:	d003      	beq.n	8008516 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008512:	2b03      	cmp	r3, #3
 8008514:	d107      	bne.n	8008526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008516:	4b3f      	ldr	r3, [pc, #252]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800851e:	2b00      	cmp	r3, #0
 8008520:	d109      	bne.n	8008536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e06f      	b.n	8008606 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008526:	4b3b      	ldr	r3, [pc, #236]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f003 0302 	and.w	r3, r3, #2
 800852e:	2b00      	cmp	r3, #0
 8008530:	d101      	bne.n	8008536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	e067      	b.n	8008606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008536:	4b37      	ldr	r3, [pc, #220]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	f023 0203 	bic.w	r2, r3, #3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	4934      	ldr	r1, [pc, #208]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 8008544:	4313      	orrs	r3, r2
 8008546:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008548:	f7fc ffae 	bl	80054a8 <HAL_GetTick>
 800854c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800854e:	e00a      	b.n	8008566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008550:	f7fc ffaa 	bl	80054a8 <HAL_GetTick>
 8008554:	4602      	mov	r2, r0
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	f241 3288 	movw	r2, #5000	; 0x1388
 800855e:	4293      	cmp	r3, r2
 8008560:	d901      	bls.n	8008566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008562:	2303      	movs	r3, #3
 8008564:	e04f      	b.n	8008606 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008566:	4b2b      	ldr	r3, [pc, #172]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	f003 020c 	and.w	r2, r3, #12
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	429a      	cmp	r2, r3
 8008576:	d1eb      	bne.n	8008550 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008578:	4b25      	ldr	r3, [pc, #148]	; (8008610 <HAL_RCC_ClockConfig+0x1b8>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 030f 	and.w	r3, r3, #15
 8008580:	683a      	ldr	r2, [r7, #0]
 8008582:	429a      	cmp	r2, r3
 8008584:	d20c      	bcs.n	80085a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008586:	4b22      	ldr	r3, [pc, #136]	; (8008610 <HAL_RCC_ClockConfig+0x1b8>)
 8008588:	683a      	ldr	r2, [r7, #0]
 800858a:	b2d2      	uxtb	r2, r2
 800858c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800858e:	4b20      	ldr	r3, [pc, #128]	; (8008610 <HAL_RCC_ClockConfig+0x1b8>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f003 030f 	and.w	r3, r3, #15
 8008596:	683a      	ldr	r2, [r7, #0]
 8008598:	429a      	cmp	r2, r3
 800859a:	d001      	beq.n	80085a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	e032      	b.n	8008606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f003 0304 	and.w	r3, r3, #4
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d008      	beq.n	80085be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80085ac:	4b19      	ldr	r3, [pc, #100]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	4916      	ldr	r1, [pc, #88]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 80085ba:	4313      	orrs	r3, r2
 80085bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 0308 	and.w	r3, r3, #8
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d009      	beq.n	80085de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80085ca:	4b12      	ldr	r3, [pc, #72]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	00db      	lsls	r3, r3, #3
 80085d8:	490e      	ldr	r1, [pc, #56]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 80085da:	4313      	orrs	r3, r2
 80085dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80085de:	f000 f821 	bl	8008624 <HAL_RCC_GetSysClockFreq>
 80085e2:	4602      	mov	r2, r0
 80085e4:	4b0b      	ldr	r3, [pc, #44]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	091b      	lsrs	r3, r3, #4
 80085ea:	f003 030f 	and.w	r3, r3, #15
 80085ee:	490a      	ldr	r1, [pc, #40]	; (8008618 <HAL_RCC_ClockConfig+0x1c0>)
 80085f0:	5ccb      	ldrb	r3, [r1, r3]
 80085f2:	fa22 f303 	lsr.w	r3, r2, r3
 80085f6:	4a09      	ldr	r2, [pc, #36]	; (800861c <HAL_RCC_ClockConfig+0x1c4>)
 80085f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80085fa:	4b09      	ldr	r3, [pc, #36]	; (8008620 <HAL_RCC_ClockConfig+0x1c8>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4618      	mov	r0, r3
 8008600:	f7f9 fe7c 	bl	80022fc <HAL_InitTick>

  return HAL_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	40023c00 	.word	0x40023c00
 8008614:	40023800 	.word	0x40023800
 8008618:	08018cc8 	.word	0x08018cc8
 800861c:	20000000 	.word	0x20000000
 8008620:	20000060 	.word	0x20000060

08008624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008624:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008628:	b084      	sub	sp, #16
 800862a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800862c:	2300      	movs	r3, #0
 800862e:	607b      	str	r3, [r7, #4]
 8008630:	2300      	movs	r3, #0
 8008632:	60fb      	str	r3, [r7, #12]
 8008634:	2300      	movs	r3, #0
 8008636:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008638:	2300      	movs	r3, #0
 800863a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800863c:	4b67      	ldr	r3, [pc, #412]	; (80087dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	f003 030c 	and.w	r3, r3, #12
 8008644:	2b08      	cmp	r3, #8
 8008646:	d00d      	beq.n	8008664 <HAL_RCC_GetSysClockFreq+0x40>
 8008648:	2b08      	cmp	r3, #8
 800864a:	f200 80bd 	bhi.w	80087c8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800864e:	2b00      	cmp	r3, #0
 8008650:	d002      	beq.n	8008658 <HAL_RCC_GetSysClockFreq+0x34>
 8008652:	2b04      	cmp	r3, #4
 8008654:	d003      	beq.n	800865e <HAL_RCC_GetSysClockFreq+0x3a>
 8008656:	e0b7      	b.n	80087c8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008658:	4b61      	ldr	r3, [pc, #388]	; (80087e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800865a:	60bb      	str	r3, [r7, #8]
       break;
 800865c:	e0b7      	b.n	80087ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800865e:	4b60      	ldr	r3, [pc, #384]	; (80087e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008660:	60bb      	str	r3, [r7, #8]
      break;
 8008662:	e0b4      	b.n	80087ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008664:	4b5d      	ldr	r3, [pc, #372]	; (80087dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800866c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800866e:	4b5b      	ldr	r3, [pc, #364]	; (80087dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008676:	2b00      	cmp	r3, #0
 8008678:	d04d      	beq.n	8008716 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800867a:	4b58      	ldr	r3, [pc, #352]	; (80087dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	099b      	lsrs	r3, r3, #6
 8008680:	461a      	mov	r2, r3
 8008682:	f04f 0300 	mov.w	r3, #0
 8008686:	f240 10ff 	movw	r0, #511	; 0x1ff
 800868a:	f04f 0100 	mov.w	r1, #0
 800868e:	ea02 0800 	and.w	r8, r2, r0
 8008692:	ea03 0901 	and.w	r9, r3, r1
 8008696:	4640      	mov	r0, r8
 8008698:	4649      	mov	r1, r9
 800869a:	f04f 0200 	mov.w	r2, #0
 800869e:	f04f 0300 	mov.w	r3, #0
 80086a2:	014b      	lsls	r3, r1, #5
 80086a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80086a8:	0142      	lsls	r2, r0, #5
 80086aa:	4610      	mov	r0, r2
 80086ac:	4619      	mov	r1, r3
 80086ae:	ebb0 0008 	subs.w	r0, r0, r8
 80086b2:	eb61 0109 	sbc.w	r1, r1, r9
 80086b6:	f04f 0200 	mov.w	r2, #0
 80086ba:	f04f 0300 	mov.w	r3, #0
 80086be:	018b      	lsls	r3, r1, #6
 80086c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80086c4:	0182      	lsls	r2, r0, #6
 80086c6:	1a12      	subs	r2, r2, r0
 80086c8:	eb63 0301 	sbc.w	r3, r3, r1
 80086cc:	f04f 0000 	mov.w	r0, #0
 80086d0:	f04f 0100 	mov.w	r1, #0
 80086d4:	00d9      	lsls	r1, r3, #3
 80086d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80086da:	00d0      	lsls	r0, r2, #3
 80086dc:	4602      	mov	r2, r0
 80086de:	460b      	mov	r3, r1
 80086e0:	eb12 0208 	adds.w	r2, r2, r8
 80086e4:	eb43 0309 	adc.w	r3, r3, r9
 80086e8:	f04f 0000 	mov.w	r0, #0
 80086ec:	f04f 0100 	mov.w	r1, #0
 80086f0:	0299      	lsls	r1, r3, #10
 80086f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80086f6:	0290      	lsls	r0, r2, #10
 80086f8:	4602      	mov	r2, r0
 80086fa:	460b      	mov	r3, r1
 80086fc:	4610      	mov	r0, r2
 80086fe:	4619      	mov	r1, r3
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	461a      	mov	r2, r3
 8008704:	f04f 0300 	mov.w	r3, #0
 8008708:	f7f8 face 	bl	8000ca8 <__aeabi_uldivmod>
 800870c:	4602      	mov	r2, r0
 800870e:	460b      	mov	r3, r1
 8008710:	4613      	mov	r3, r2
 8008712:	60fb      	str	r3, [r7, #12]
 8008714:	e04a      	b.n	80087ac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008716:	4b31      	ldr	r3, [pc, #196]	; (80087dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	099b      	lsrs	r3, r3, #6
 800871c:	461a      	mov	r2, r3
 800871e:	f04f 0300 	mov.w	r3, #0
 8008722:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008726:	f04f 0100 	mov.w	r1, #0
 800872a:	ea02 0400 	and.w	r4, r2, r0
 800872e:	ea03 0501 	and.w	r5, r3, r1
 8008732:	4620      	mov	r0, r4
 8008734:	4629      	mov	r1, r5
 8008736:	f04f 0200 	mov.w	r2, #0
 800873a:	f04f 0300 	mov.w	r3, #0
 800873e:	014b      	lsls	r3, r1, #5
 8008740:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008744:	0142      	lsls	r2, r0, #5
 8008746:	4610      	mov	r0, r2
 8008748:	4619      	mov	r1, r3
 800874a:	1b00      	subs	r0, r0, r4
 800874c:	eb61 0105 	sbc.w	r1, r1, r5
 8008750:	f04f 0200 	mov.w	r2, #0
 8008754:	f04f 0300 	mov.w	r3, #0
 8008758:	018b      	lsls	r3, r1, #6
 800875a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800875e:	0182      	lsls	r2, r0, #6
 8008760:	1a12      	subs	r2, r2, r0
 8008762:	eb63 0301 	sbc.w	r3, r3, r1
 8008766:	f04f 0000 	mov.w	r0, #0
 800876a:	f04f 0100 	mov.w	r1, #0
 800876e:	00d9      	lsls	r1, r3, #3
 8008770:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008774:	00d0      	lsls	r0, r2, #3
 8008776:	4602      	mov	r2, r0
 8008778:	460b      	mov	r3, r1
 800877a:	1912      	adds	r2, r2, r4
 800877c:	eb45 0303 	adc.w	r3, r5, r3
 8008780:	f04f 0000 	mov.w	r0, #0
 8008784:	f04f 0100 	mov.w	r1, #0
 8008788:	0299      	lsls	r1, r3, #10
 800878a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800878e:	0290      	lsls	r0, r2, #10
 8008790:	4602      	mov	r2, r0
 8008792:	460b      	mov	r3, r1
 8008794:	4610      	mov	r0, r2
 8008796:	4619      	mov	r1, r3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	461a      	mov	r2, r3
 800879c:	f04f 0300 	mov.w	r3, #0
 80087a0:	f7f8 fa82 	bl	8000ca8 <__aeabi_uldivmod>
 80087a4:	4602      	mov	r2, r0
 80087a6:	460b      	mov	r3, r1
 80087a8:	4613      	mov	r3, r2
 80087aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80087ac:	4b0b      	ldr	r3, [pc, #44]	; (80087dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	0c1b      	lsrs	r3, r3, #16
 80087b2:	f003 0303 	and.w	r3, r3, #3
 80087b6:	3301      	adds	r3, #1
 80087b8:	005b      	lsls	r3, r3, #1
 80087ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80087bc:	68fa      	ldr	r2, [r7, #12]
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087c4:	60bb      	str	r3, [r7, #8]
      break;
 80087c6:	e002      	b.n	80087ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80087c8:	4b05      	ldr	r3, [pc, #20]	; (80087e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80087ca:	60bb      	str	r3, [r7, #8]
      break;
 80087cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80087ce:	68bb      	ldr	r3, [r7, #8]
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3710      	adds	r7, #16
 80087d4:	46bd      	mov	sp, r7
 80087d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80087da:	bf00      	nop
 80087dc:	40023800 	.word	0x40023800
 80087e0:	00f42400 	.word	0x00f42400

080087e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087e4:	b480      	push	{r7}
 80087e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80087e8:	4b03      	ldr	r3, [pc, #12]	; (80087f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80087ea:	681b      	ldr	r3, [r3, #0]
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	20000000 	.word	0x20000000

080087fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008800:	f7ff fff0 	bl	80087e4 <HAL_RCC_GetHCLKFreq>
 8008804:	4602      	mov	r2, r0
 8008806:	4b05      	ldr	r3, [pc, #20]	; (800881c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	0a9b      	lsrs	r3, r3, #10
 800880c:	f003 0307 	and.w	r3, r3, #7
 8008810:	4903      	ldr	r1, [pc, #12]	; (8008820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008812:	5ccb      	ldrb	r3, [r1, r3]
 8008814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008818:	4618      	mov	r0, r3
 800881a:	bd80      	pop	{r7, pc}
 800881c:	40023800 	.word	0x40023800
 8008820:	08018cd8 	.word	0x08018cd8

08008824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008828:	f7ff ffdc 	bl	80087e4 <HAL_RCC_GetHCLKFreq>
 800882c:	4602      	mov	r2, r0
 800882e:	4b05      	ldr	r3, [pc, #20]	; (8008844 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	0b5b      	lsrs	r3, r3, #13
 8008834:	f003 0307 	and.w	r3, r3, #7
 8008838:	4903      	ldr	r1, [pc, #12]	; (8008848 <HAL_RCC_GetPCLK2Freq+0x24>)
 800883a:	5ccb      	ldrb	r3, [r1, r3]
 800883c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008840:	4618      	mov	r0, r3
 8008842:	bd80      	pop	{r7, pc}
 8008844:	40023800 	.word	0x40023800
 8008848:	08018cd8 	.word	0x08018cd8

0800884c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	220f      	movs	r2, #15
 800885a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800885c:	4b12      	ldr	r3, [pc, #72]	; (80088a8 <HAL_RCC_GetClockConfig+0x5c>)
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	f003 0203 	and.w	r2, r3, #3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008868:	4b0f      	ldr	r3, [pc, #60]	; (80088a8 <HAL_RCC_GetClockConfig+0x5c>)
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008874:	4b0c      	ldr	r3, [pc, #48]	; (80088a8 <HAL_RCC_GetClockConfig+0x5c>)
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008880:	4b09      	ldr	r3, [pc, #36]	; (80088a8 <HAL_RCC_GetClockConfig+0x5c>)
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	08db      	lsrs	r3, r3, #3
 8008886:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800888e:	4b07      	ldr	r3, [pc, #28]	; (80088ac <HAL_RCC_GetClockConfig+0x60>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f003 020f 	and.w	r2, r3, #15
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	601a      	str	r2, [r3, #0]
}
 800889a:	bf00      	nop
 800889c:	370c      	adds	r7, #12
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop
 80088a8:	40023800 	.word	0x40023800
 80088ac:	40023c00 	.word	0x40023c00

080088b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80088b8:	2300      	movs	r3, #0
 80088ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80088bc:	2300      	movs	r3, #0
 80088be:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 0301 	and.w	r3, r3, #1
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d10b      	bne.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d105      	bne.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d075      	beq.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80088e4:	4bad      	ldr	r3, [pc, #692]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80088e6:	2200      	movs	r2, #0
 80088e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80088ea:	f7fc fddd 	bl	80054a8 <HAL_GetTick>
 80088ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80088f0:	e008      	b.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80088f2:	f7fc fdd9 	bl	80054a8 <HAL_GetTick>
 80088f6:	4602      	mov	r2, r0
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	1ad3      	subs	r3, r2, r3
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	d901      	bls.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008900:	2303      	movs	r3, #3
 8008902:	e18b      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008904:	4ba6      	ldr	r3, [pc, #664]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800890c:	2b00      	cmp	r3, #0
 800890e:	d1f0      	bne.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 0301 	and.w	r3, r3, #1
 8008918:	2b00      	cmp	r3, #0
 800891a:	d009      	beq.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	019a      	lsls	r2, r3, #6
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	071b      	lsls	r3, r3, #28
 8008928:	499d      	ldr	r1, [pc, #628]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800892a:	4313      	orrs	r3, r2
 800892c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 0302 	and.w	r3, r3, #2
 8008938:	2b00      	cmp	r3, #0
 800893a:	d01f      	beq.n	800897c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800893c:	4b98      	ldr	r3, [pc, #608]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800893e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008942:	0f1b      	lsrs	r3, r3, #28
 8008944:	f003 0307 	and.w	r3, r3, #7
 8008948:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	019a      	lsls	r2, r3, #6
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	061b      	lsls	r3, r3, #24
 8008956:	431a      	orrs	r2, r3
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	071b      	lsls	r3, r3, #28
 800895c:	4990      	ldr	r1, [pc, #576]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800895e:	4313      	orrs	r3, r2
 8008960:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008964:	4b8e      	ldr	r3, [pc, #568]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008966:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800896a:	f023 021f 	bic.w	r2, r3, #31
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	69db      	ldr	r3, [r3, #28]
 8008972:	3b01      	subs	r3, #1
 8008974:	498a      	ldr	r1, [pc, #552]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008976:	4313      	orrs	r3, r2
 8008978:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00d      	beq.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	019a      	lsls	r2, r3, #6
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	061b      	lsls	r3, r3, #24
 8008994:	431a      	orrs	r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	071b      	lsls	r3, r3, #28
 800899c:	4980      	ldr	r1, [pc, #512]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800899e:	4313      	orrs	r3, r2
 80089a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80089a4:	4b7d      	ldr	r3, [pc, #500]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80089a6:	2201      	movs	r2, #1
 80089a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80089aa:	f7fc fd7d 	bl	80054a8 <HAL_GetTick>
 80089ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80089b0:	e008      	b.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80089b2:	f7fc fd79 	bl	80054a8 <HAL_GetTick>
 80089b6:	4602      	mov	r2, r0
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	1ad3      	subs	r3, r2, r3
 80089bc:	2b02      	cmp	r3, #2
 80089be:	d901      	bls.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80089c0:	2303      	movs	r3, #3
 80089c2:	e12b      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80089c4:	4b76      	ldr	r3, [pc, #472]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d0f0      	beq.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 0304 	and.w	r3, r3, #4
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d105      	bne.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d079      	beq.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80089e8:	4b6e      	ldr	r3, [pc, #440]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80089ea:	2200      	movs	r2, #0
 80089ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80089ee:	f7fc fd5b 	bl	80054a8 <HAL_GetTick>
 80089f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80089f4:	e008      	b.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80089f6:	f7fc fd57 	bl	80054a8 <HAL_GetTick>
 80089fa:	4602      	mov	r2, r0
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	1ad3      	subs	r3, r2, r3
 8008a00:	2b02      	cmp	r3, #2
 8008a02:	d901      	bls.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a04:	2303      	movs	r3, #3
 8008a06:	e109      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008a08:	4b65      	ldr	r3, [pc, #404]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a14:	d0ef      	beq.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f003 0304 	and.w	r3, r3, #4
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d020      	beq.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008a22:	4b5f      	ldr	r3, [pc, #380]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a28:	0f1b      	lsrs	r3, r3, #28
 8008a2a:	f003 0307 	and.w	r3, r3, #7
 8008a2e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	691b      	ldr	r3, [r3, #16]
 8008a34:	019a      	lsls	r2, r3, #6
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	695b      	ldr	r3, [r3, #20]
 8008a3a:	061b      	lsls	r3, r3, #24
 8008a3c:	431a      	orrs	r2, r3
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	071b      	lsls	r3, r3, #28
 8008a42:	4957      	ldr	r1, [pc, #348]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008a44:	4313      	orrs	r3, r2
 8008a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008a4a:	4b55      	ldr	r3, [pc, #340]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a50:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a1b      	ldr	r3, [r3, #32]
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	021b      	lsls	r3, r3, #8
 8008a5c:	4950      	ldr	r1, [pc, #320]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 0308 	and.w	r3, r3, #8
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d01e      	beq.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008a70:	4b4b      	ldr	r3, [pc, #300]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a76:	0e1b      	lsrs	r3, r3, #24
 8008a78:	f003 030f 	and.w	r3, r3, #15
 8008a7c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	019a      	lsls	r2, r3, #6
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	061b      	lsls	r3, r3, #24
 8008a88:	431a      	orrs	r2, r3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	699b      	ldr	r3, [r3, #24]
 8008a8e:	071b      	lsls	r3, r3, #28
 8008a90:	4943      	ldr	r1, [pc, #268]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008a92:	4313      	orrs	r3, r2
 8008a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008a98:	4b41      	ldr	r3, [pc, #260]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a9e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa6:	493e      	ldr	r1, [pc, #248]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008aae:	4b3d      	ldr	r3, [pc, #244]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008ab4:	f7fc fcf8 	bl	80054a8 <HAL_GetTick>
 8008ab8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008aba:	e008      	b.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008abc:	f7fc fcf4 	bl	80054a8 <HAL_GetTick>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	d901      	bls.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008aca:	2303      	movs	r3, #3
 8008acc:	e0a6      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008ace:	4b34      	ldr	r3, [pc, #208]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ad6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ada:	d1ef      	bne.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 0320 	and.w	r3, r3, #32
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f000 808d 	beq.w	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008aea:	2300      	movs	r3, #0
 8008aec:	60fb      	str	r3, [r7, #12]
 8008aee:	4b2c      	ldr	r3, [pc, #176]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af2:	4a2b      	ldr	r2, [pc, #172]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008af8:	6413      	str	r3, [r2, #64]	; 0x40
 8008afa:	4b29      	ldr	r3, [pc, #164]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b02:	60fb      	str	r3, [r7, #12]
 8008b04:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008b06:	4b28      	ldr	r3, [pc, #160]	; (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a27      	ldr	r2, [pc, #156]	; (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b10:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008b12:	f7fc fcc9 	bl	80054a8 <HAL_GetTick>
 8008b16:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008b18:	e008      	b.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008b1a:	f7fc fcc5 	bl	80054a8 <HAL_GetTick>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	1ad3      	subs	r3, r2, r3
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d901      	bls.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	e077      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008b2c:	4b1e      	ldr	r3, [pc, #120]	; (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d0f0      	beq.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008b38:	4b19      	ldr	r3, [pc, #100]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b40:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d039      	beq.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b50:	693a      	ldr	r2, [r7, #16]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d032      	beq.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008b56:	4b12      	ldr	r3, [pc, #72]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b5e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008b60:	4b12      	ldr	r3, [pc, #72]	; (8008bac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008b62:	2201      	movs	r2, #1
 8008b64:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008b66:	4b11      	ldr	r3, [pc, #68]	; (8008bac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008b68:	2200      	movs	r2, #0
 8008b6a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008b6c:	4a0c      	ldr	r2, [pc, #48]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008b72:	4b0b      	ldr	r3, [pc, #44]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b76:	f003 0301 	and.w	r3, r3, #1
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d11e      	bne.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008b7e:	f7fc fc93 	bl	80054a8 <HAL_GetTick>
 8008b82:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b84:	e014      	b.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b86:	f7fc fc8f 	bl	80054a8 <HAL_GetTick>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	1ad3      	subs	r3, r2, r3
 8008b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d90b      	bls.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8008b98:	2303      	movs	r3, #3
 8008b9a:	e03f      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8008b9c:	42470068 	.word	0x42470068
 8008ba0:	40023800 	.word	0x40023800
 8008ba4:	42470070 	.word	0x42470070
 8008ba8:	40007000 	.word	0x40007000
 8008bac:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008bb0:	4b1c      	ldr	r3, [pc, #112]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb4:	f003 0302 	and.w	r3, r3, #2
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d0e4      	beq.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bc8:	d10d      	bne.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8008bca:	4b16      	ldr	r3, [pc, #88]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bde:	4911      	ldr	r1, [pc, #68]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008be0:	4313      	orrs	r3, r2
 8008be2:	608b      	str	r3, [r1, #8]
 8008be4:	e005      	b.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008be6:	4b0f      	ldr	r3, [pc, #60]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	4a0e      	ldr	r2, [pc, #56]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008bec:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008bf0:	6093      	str	r3, [r2, #8]
 8008bf2:	4b0c      	ldr	r3, [pc, #48]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008bf4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bfe:	4909      	ldr	r1, [pc, #36]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008c00:	4313      	orrs	r3, r2
 8008c02:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f003 0310 	and.w	r3, r3, #16
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d004      	beq.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008c16:	4b04      	ldr	r3, [pc, #16]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008c18:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3718      	adds	r7, #24
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	40023800 	.word	0x40023800
 8008c28:	424711e0 	.word	0x424711e0

08008c2c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d101      	bne.n	8008c3e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e083      	b.n	8008d46 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	7f5b      	ldrb	r3, [r3, #29]
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d105      	bne.n	8008c54 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f7f9 f99e 	bl	8001f90 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2202      	movs	r2, #2
 8008c58:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	22ca      	movs	r2, #202	; 0xca
 8008c60:	625a      	str	r2, [r3, #36]	; 0x24
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2253      	movs	r2, #83	; 0x53
 8008c68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 fb84 	bl	8009378 <RTC_EnterInitMode>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d008      	beq.n	8008c88 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	22ff      	movs	r2, #255	; 0xff
 8008c7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2204      	movs	r2, #4
 8008c82:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	e05e      	b.n	8008d46 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	6812      	ldr	r2, [r2, #0]
 8008c92:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c9a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	6899      	ldr	r1, [r3, #8]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	685a      	ldr	r2, [r3, #4]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	431a      	orrs	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	695b      	ldr	r3, [r3, #20]
 8008cb0:	431a      	orrs	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	430a      	orrs	r2, r1
 8008cb8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	68d2      	ldr	r2, [r2, #12]
 8008cc2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	6919      	ldr	r1, [r3, #16]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	041a      	lsls	r2, r3, #16
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	430a      	orrs	r2, r1
 8008cd6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	68da      	ldr	r2, [r3, #12]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ce6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	f003 0320 	and.w	r3, r3, #32
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d10e      	bne.n	8008d14 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fb16 	bl	8009328 <HAL_RTC_WaitForSynchro>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d008      	beq.n	8008d14 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	22ff      	movs	r2, #255	; 0xff
 8008d08:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2204      	movs	r2, #4
 8008d0e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008d10:	2301      	movs	r3, #1
 8008d12:	e018      	b.n	8008d46 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008d22:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	699a      	ldr	r2, [r3, #24]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	430a      	orrs	r2, r1
 8008d34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	22ff      	movs	r2, #255	; 0xff
 8008d3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2201      	movs	r2, #1
 8008d42:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008d44:	2300      	movs	r3, #0
  }
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3708      	adds	r7, #8
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008d4e:	b590      	push	{r4, r7, lr}
 8008d50:	b087      	sub	sp, #28
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	60f8      	str	r0, [r7, #12]
 8008d56:	60b9      	str	r1, [r7, #8]
 8008d58:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	7f1b      	ldrb	r3, [r3, #28]
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d101      	bne.n	8008d6a <HAL_RTC_SetTime+0x1c>
 8008d66:	2302      	movs	r3, #2
 8008d68:	e0aa      	b.n	8008ec0 <HAL_RTC_SetTime+0x172>
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2202      	movs	r2, #2
 8008d74:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d126      	bne.n	8008dca <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d102      	bne.n	8008d90 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	4618      	mov	r0, r3
 8008d96:	f000 fb1b 	bl	80093d0 <RTC_ByteToBcd2>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	785b      	ldrb	r3, [r3, #1]
 8008da2:	4618      	mov	r0, r3
 8008da4:	f000 fb14 	bl	80093d0 <RTC_ByteToBcd2>
 8008da8:	4603      	mov	r3, r0
 8008daa:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008dac:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	789b      	ldrb	r3, [r3, #2]
 8008db2:	4618      	mov	r0, r3
 8008db4:	f000 fb0c 	bl	80093d0 <RTC_ByteToBcd2>
 8008db8:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008dba:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	78db      	ldrb	r3, [r3, #3]
 8008dc2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	617b      	str	r3, [r7, #20]
 8008dc8:	e018      	b.n	8008dfc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d102      	bne.n	8008dde <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	785b      	ldrb	r3, [r3, #1]
 8008de8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008dea:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008dec:	68ba      	ldr	r2, [r7, #8]
 8008dee:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008df0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	78db      	ldrb	r3, [r3, #3]
 8008df6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	22ca      	movs	r2, #202	; 0xca
 8008e02:	625a      	str	r2, [r3, #36]	; 0x24
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2253      	movs	r2, #83	; 0x53
 8008e0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f000 fab3 	bl	8009378 <RTC_EnterInitMode>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00b      	beq.n	8008e30 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	22ff      	movs	r2, #255	; 0xff
 8008e1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2204      	movs	r2, #4
 8008e24:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e047      	b.n	8008ec0 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008e3a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008e3e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	689a      	ldr	r2, [r3, #8]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008e4e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	6899      	ldr	r1, [r3, #8]
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	68da      	ldr	r2, [r3, #12]
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	431a      	orrs	r2, r3
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	430a      	orrs	r2, r1
 8008e66:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	68da      	ldr	r2, [r3, #12]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e76:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	f003 0320 	and.w	r3, r3, #32
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d111      	bne.n	8008eaa <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	f000 fa4e 	bl	8009328 <HAL_RTC_WaitForSynchro>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00b      	beq.n	8008eaa <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	22ff      	movs	r2, #255	; 0xff
 8008e98:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2204      	movs	r2, #4
 8008e9e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e00a      	b.n	8008ec0 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	22ff      	movs	r2, #255	; 0xff
 8008eb0:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008ebe:	2300      	movs	r3, #0
  }
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	371c      	adds	r7, #28
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd90      	pop	{r4, r7, pc}

08008ec8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008ec8:	b590      	push	{r4, r7, lr}
 8008eca:	b087      	sub	sp, #28
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	7f1b      	ldrb	r3, [r3, #28]
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d101      	bne.n	8008ee4 <HAL_RTC_SetDate+0x1c>
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	e094      	b.n	800900e <HAL_RTC_SetDate+0x146>
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2202      	movs	r2, #2
 8008eee:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d10e      	bne.n	8008f14 <HAL_RTC_SetDate+0x4c>
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	785b      	ldrb	r3, [r3, #1]
 8008efa:	f003 0310 	and.w	r3, r3, #16
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d008      	beq.n	8008f14 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	785b      	ldrb	r3, [r3, #1]
 8008f06:	f023 0310 	bic.w	r3, r3, #16
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	330a      	adds	r3, #10
 8008f0e:	b2da      	uxtb	r2, r3
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d11c      	bne.n	8008f54 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	78db      	ldrb	r3, [r3, #3]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f000 fa56 	bl	80093d0 <RTC_ByteToBcd2>
 8008f24:	4603      	mov	r3, r0
 8008f26:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	785b      	ldrb	r3, [r3, #1]
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f000 fa4f 	bl	80093d0 <RTC_ByteToBcd2>
 8008f32:	4603      	mov	r3, r0
 8008f34:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008f36:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	789b      	ldrb	r3, [r3, #2]
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f000 fa47 	bl	80093d0 <RTC_ByteToBcd2>
 8008f42:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008f44:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	617b      	str	r3, [r7, #20]
 8008f52:	e00e      	b.n	8008f72 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	78db      	ldrb	r3, [r3, #3]
 8008f58:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	785b      	ldrb	r3, [r3, #1]
 8008f5e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008f60:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008f62:	68ba      	ldr	r2, [r7, #8]
 8008f64:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8008f66:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	22ca      	movs	r2, #202	; 0xca
 8008f78:	625a      	str	r2, [r3, #36]	; 0x24
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2253      	movs	r2, #83	; 0x53
 8008f80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f000 f9f8 	bl	8009378 <RTC_EnterInitMode>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d00b      	beq.n	8008fa6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	22ff      	movs	r2, #255	; 0xff
 8008f94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2204      	movs	r2, #4
 8008f9a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e033      	b.n	800900e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008fb0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008fb4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	68da      	ldr	r2, [r3, #12]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008fc4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	f003 0320 	and.w	r3, r3, #32
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d111      	bne.n	8008ff8 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f000 f9a7 	bl	8009328 <HAL_RTC_WaitForSynchro>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00b      	beq.n	8008ff8 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	22ff      	movs	r2, #255	; 0xff
 8008fe6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2204      	movs	r2, #4
 8008fec:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e00a      	b.n	800900e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	22ff      	movs	r2, #255	; 0xff
 8008ffe:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2201      	movs	r2, #1
 8009004:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2200      	movs	r2, #0
 800900a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800900c:	2300      	movs	r3, #0
  }
}
 800900e:	4618      	mov	r0, r3
 8009010:	371c      	adds	r7, #28
 8009012:	46bd      	mov	sp, r7
 8009014:	bd90      	pop	{r4, r7, pc}
	...

08009018 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009018:	b590      	push	{r4, r7, lr}
 800901a:	b089      	sub	sp, #36	; 0x24
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8009024:	2300      	movs	r3, #0
 8009026:	61fb      	str	r3, [r7, #28]
 8009028:	2300      	movs	r3, #0
 800902a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800902c:	4b93      	ldr	r3, [pc, #588]	; (800927c <HAL_RTC_SetAlarm_IT+0x264>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a93      	ldr	r2, [pc, #588]	; (8009280 <HAL_RTC_SetAlarm_IT+0x268>)
 8009032:	fba2 2303 	umull	r2, r3, r2, r3
 8009036:	0adb      	lsrs	r3, r3, #11
 8009038:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800903c:	fb02 f303 	mul.w	r3, r2, r3
 8009040:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	7f1b      	ldrb	r3, [r3, #28]
 8009046:	2b01      	cmp	r3, #1
 8009048:	d101      	bne.n	800904e <HAL_RTC_SetAlarm_IT+0x36>
 800904a:	2302      	movs	r3, #2
 800904c:	e111      	b.n	8009272 <HAL_RTC_SetAlarm_IT+0x25a>
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2201      	movs	r2, #1
 8009052:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2202      	movs	r2, #2
 8009058:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d137      	bne.n	80090d0 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800906a:	2b00      	cmp	r3, #0
 800906c:	d102      	bne.n	8009074 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	2200      	movs	r2, #0
 8009072:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	4618      	mov	r0, r3
 800907a:	f000 f9a9 	bl	80093d0 <RTC_ByteToBcd2>
 800907e:	4603      	mov	r3, r0
 8009080:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	785b      	ldrb	r3, [r3, #1]
 8009086:	4618      	mov	r0, r3
 8009088:	f000 f9a2 	bl	80093d0 <RTC_ByteToBcd2>
 800908c:	4603      	mov	r3, r0
 800908e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8009090:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	789b      	ldrb	r3, [r3, #2]
 8009096:	4618      	mov	r0, r3
 8009098:	f000 f99a 	bl	80093d0 <RTC_ByteToBcd2>
 800909c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800909e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	78db      	ldrb	r3, [r3, #3]
 80090a6:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80090a8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090b2:	4618      	mov	r0, r3
 80090b4:	f000 f98c 	bl	80093d0 <RTC_ByteToBcd2>
 80090b8:	4603      	mov	r3, r0
 80090ba:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80090bc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80090c4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80090ca:	4313      	orrs	r3, r2
 80090cc:	61fb      	str	r3, [r7, #28]
 80090ce:	e023      	b.n	8009118 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d102      	bne.n	80090e4 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	2200      	movs	r2, #0
 80090e2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	785b      	ldrb	r3, [r3, #1]
 80090ee:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80090f0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80090f2:	68ba      	ldr	r2, [r7, #8]
 80090f4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80090f6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	78db      	ldrb	r3, [r3, #3]
 80090fc:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80090fe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009106:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009108:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800910e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8009114:	4313      	orrs	r3, r2
 8009116:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	685a      	ldr	r2, [r3, #4]
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	699b      	ldr	r3, [r3, #24]
 8009120:	4313      	orrs	r3, r2
 8009122:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	22ca      	movs	r2, #202	; 0xca
 800912a:	625a      	str	r2, [r3, #36]	; 0x24
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2253      	movs	r2, #83	; 0x53
 8009132:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800913c:	d141      	bne.n	80091c2 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	689a      	ldr	r2, [r3, #8]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800914c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	b2da      	uxtb	r2, r3
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800915e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	1e5a      	subs	r2, r3, #1
 8009164:	617a      	str	r2, [r7, #20]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d10b      	bne.n	8009182 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	22ff      	movs	r2, #255	; 0xff
 8009170:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2203      	movs	r2, #3
 8009176:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2200      	movs	r2, #0
 800917c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800917e:	2303      	movs	r3, #3
 8009180:	e077      	b.n	8009272 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	f003 0301 	and.w	r3, r3, #1
 800918c:	2b00      	cmp	r3, #0
 800918e:	d0e7      	beq.n	8009160 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	69fa      	ldr	r2, [r7, #28]
 8009196:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	69ba      	ldr	r2, [r7, #24]
 800919e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	689a      	ldr	r2, [r3, #8]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80091ae:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	689a      	ldr	r2, [r3, #8]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80091be:	609a      	str	r2, [r3, #8]
 80091c0:	e040      	b.n	8009244 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	689a      	ldr	r2, [r3, #8]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80091d0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	b2da      	uxtb	r2, r3
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f462 7220 	orn	r2, r2, #640	; 0x280
 80091e2:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	1e5a      	subs	r2, r3, #1
 80091e8:	617a      	str	r2, [r7, #20]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d10b      	bne.n	8009206 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	22ff      	movs	r2, #255	; 0xff
 80091f4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2203      	movs	r2, #3
 80091fa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2200      	movs	r2, #0
 8009200:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009202:	2303      	movs	r3, #3
 8009204:	e035      	b.n	8009272 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	f003 0302 	and.w	r3, r3, #2
 8009210:	2b00      	cmp	r3, #0
 8009212:	d0e7      	beq.n	80091e4 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	69fa      	ldr	r2, [r7, #28]
 800921a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	69ba      	ldr	r2, [r7, #24]
 8009222:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	689a      	ldr	r2, [r3, #8]
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009232:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	689a      	ldr	r2, [r3, #8]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009242:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8009244:	4b0f      	ldr	r3, [pc, #60]	; (8009284 <HAL_RTC_SetAlarm_IT+0x26c>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a0e      	ldr	r2, [pc, #56]	; (8009284 <HAL_RTC_SetAlarm_IT+0x26c>)
 800924a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800924e:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8009250:	4b0c      	ldr	r3, [pc, #48]	; (8009284 <HAL_RTC_SetAlarm_IT+0x26c>)
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	4a0b      	ldr	r2, [pc, #44]	; (8009284 <HAL_RTC_SetAlarm_IT+0x26c>)
 8009256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800925a:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	22ff      	movs	r2, #255	; 0xff
 8009262:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2201      	movs	r2, #1
 8009268:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3724      	adds	r7, #36	; 0x24
 8009276:	46bd      	mov	sp, r7
 8009278:	bd90      	pop	{r4, r7, pc}
 800927a:	bf00      	nop
 800927c:	20000000 	.word	0x20000000
 8009280:	10624dd3 	.word	0x10624dd3
 8009284:	40013c00 	.word	0x40013c00

08009288 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800929a:	2b00      	cmp	r3, #0
 800929c:	d012      	beq.n	80092c4 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00b      	beq.n	80092c4 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 f831 	bl	8009314 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	b2da      	uxtb	r2, r3
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80092c2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d012      	beq.n	80092f8 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00b      	beq.n	80092f8 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 f9ab 	bl	800963c <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	b2da      	uxtb	r2, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f462 7220 	orn	r2, r2, #640	; 0x280
 80092f6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80092f8:	4b05      	ldr	r3, [pc, #20]	; (8009310 <HAL_RTC_AlarmIRQHandler+0x88>)
 80092fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80092fe:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	775a      	strb	r2, [r3, #29]
}
 8009306:	bf00      	nop
 8009308:	3708      	adds	r7, #8
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	40013c00 	.word	0x40013c00

08009314 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800931c:	bf00      	nop
 800931e:	370c      	adds	r7, #12
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009330:	2300      	movs	r3, #0
 8009332:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	68da      	ldr	r2, [r3, #12]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009342:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009344:	f7fc f8b0 	bl	80054a8 <HAL_GetTick>
 8009348:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800934a:	e009      	b.n	8009360 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800934c:	f7fc f8ac 	bl	80054a8 <HAL_GetTick>
 8009350:	4602      	mov	r2, r0
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800935a:	d901      	bls.n	8009360 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800935c:	2303      	movs	r3, #3
 800935e:	e007      	b.n	8009370 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	f003 0320 	and.w	r3, r3, #32
 800936a:	2b00      	cmp	r3, #0
 800936c:	d0ee      	beq.n	800934c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009380:	2300      	movs	r3, #0
 8009382:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800938e:	2b00      	cmp	r3, #0
 8009390:	d119      	bne.n	80093c6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f04f 32ff 	mov.w	r2, #4294967295
 800939a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800939c:	f7fc f884 	bl	80054a8 <HAL_GetTick>
 80093a0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80093a2:	e009      	b.n	80093b8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80093a4:	f7fc f880 	bl	80054a8 <HAL_GetTick>
 80093a8:	4602      	mov	r2, r0
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	1ad3      	subs	r3, r2, r3
 80093ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093b2:	d901      	bls.n	80093b8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80093b4:	2303      	movs	r3, #3
 80093b6:	e007      	b.n	80093c8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d0ee      	beq.n	80093a4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80093c6:	2300      	movs	r3, #0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3710      	adds	r7, #16
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	4603      	mov	r3, r0
 80093d8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80093da:	2300      	movs	r3, #0
 80093dc:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80093de:	e005      	b.n	80093ec <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	3301      	adds	r3, #1
 80093e4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80093e6:	79fb      	ldrb	r3, [r7, #7]
 80093e8:	3b0a      	subs	r3, #10
 80093ea:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80093ec:	79fb      	ldrb	r3, [r7, #7]
 80093ee:	2b09      	cmp	r3, #9
 80093f0:	d8f6      	bhi.n	80093e0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	011b      	lsls	r3, r3, #4
 80093f8:	b2da      	uxtb	r2, r3
 80093fa:	79fb      	ldrb	r3, [r7, #7]
 80093fc:	4313      	orrs	r3, r2
 80093fe:	b2db      	uxtb	r3, r3
}
 8009400:	4618      	mov	r0, r3
 8009402:	3714      	adds	r7, #20
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800940c:	b480      	push	{r7}
 800940e:	b087      	sub	sp, #28
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	7f1b      	ldrb	r3, [r3, #28]
 800941c:	2b01      	cmp	r3, #1
 800941e:	d101      	bne.n	8009424 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 8009420:	2302      	movs	r3, #2
 8009422:	e0a6      	b.n	8009572 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2201      	movs	r2, #1
 8009428:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2202      	movs	r2, #2
 800942e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	22ca      	movs	r2, #202	; 0xca
 8009436:	625a      	str	r2, [r3, #36]	; 0x24
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2253      	movs	r2, #83	; 0x53
 800943e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800944a:	2b00      	cmp	r3, #0
 800944c:	d022      	beq.n	8009494 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800944e:	4b4c      	ldr	r3, [pc, #304]	; (8009580 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a4c      	ldr	r2, [pc, #304]	; (8009584 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8009454:	fba2 2303 	umull	r2, r3, r2, r3
 8009458:	0adb      	lsrs	r3, r3, #11
 800945a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800945e:	fb02 f303 	mul.w	r3, r2, r3
 8009462:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	1e5a      	subs	r2, r3, #1
 8009468:	617a      	str	r2, [r7, #20]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d10b      	bne.n	8009486 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	22ff      	movs	r2, #255	; 0xff
 8009474:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2203      	movs	r2, #3
 800947a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2200      	movs	r2, #0
 8009480:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009482:	2303      	movs	r3, #3
 8009484:	e075      	b.n	8009572 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	f003 0304 	and.w	r3, r3, #4
 8009490:	2b00      	cmp	r3, #0
 8009492:	d1e7      	bne.n	8009464 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	689a      	ldr	r2, [r3, #8]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094a2:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 80094a4:	4b36      	ldr	r3, [pc, #216]	; (8009580 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a36      	ldr	r2, [pc, #216]	; (8009584 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 80094aa:	fba2 2303 	umull	r2, r3, r2, r3
 80094ae:	0adb      	lsrs	r3, r3, #11
 80094b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80094b4:	fb02 f303 	mul.w	r3, r2, r3
 80094b8:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	1e5a      	subs	r2, r3, #1
 80094be:	617a      	str	r2, [r7, #20]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d10b      	bne.n	80094dc <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	22ff      	movs	r2, #255	; 0xff
 80094ca:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2203      	movs	r2, #3
 80094d0:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2200      	movs	r2, #0
 80094d6:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80094d8:	2303      	movs	r3, #3
 80094da:	e04a      	b.n	8009572 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	f003 0304 	and.w	r3, r3, #4
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d0e7      	beq.n	80094ba <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	68ba      	ldr	r2, [r7, #8]
 80094f0:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	689a      	ldr	r2, [r3, #8]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f022 0207 	bic.w	r2, r2, #7
 8009500:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	6899      	ldr	r1, [r3, #8]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	430a      	orrs	r2, r1
 8009510:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8009512:	4b1d      	ldr	r3, [pc, #116]	; (8009588 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a1c      	ldr	r2, [pc, #112]	; (8009588 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8009518:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800951c:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800951e:	4b1a      	ldr	r3, [pc, #104]	; (8009588 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	4a19      	ldr	r2, [pc, #100]	; (8009588 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8009524:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009528:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	b2da      	uxtb	r2, r3
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800953a:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	689a      	ldr	r2, [r3, #8]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800954a:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	689a      	ldr	r2, [r3, #8]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800955a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	22ff      	movs	r2, #255	; 0xff
 8009562:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2201      	movs	r2, #1
 8009568:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2200      	movs	r2, #0
 800956e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	371c      	adds	r7, #28
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	20000000 	.word	0x20000000
 8009584:	10624dd3 	.word	0x10624dd3
 8009588:	40013c00 	.word	0x40013c00

0800958c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009594:	2300      	movs	r3, #0
 8009596:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	7f1b      	ldrb	r3, [r3, #28]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d101      	bne.n	80095a4 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 80095a0:	2302      	movs	r3, #2
 80095a2:	e047      	b.n	8009634 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2201      	movs	r2, #1
 80095a8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2202      	movs	r2, #2
 80095ae:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	22ca      	movs	r2, #202	; 0xca
 80095b6:	625a      	str	r2, [r3, #36]	; 0x24
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2253      	movs	r2, #83	; 0x53
 80095be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	689a      	ldr	r2, [r3, #8]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095ce:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	689a      	ldr	r2, [r3, #8]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80095de:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 80095e0:	f7fb ff62 	bl	80054a8 <HAL_GetTick>
 80095e4:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 80095e6:	e013      	b.n	8009610 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80095e8:	f7fb ff5e 	bl	80054a8 <HAL_GetTick>
 80095ec:	4602      	mov	r2, r0
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	1ad3      	subs	r3, r2, r3
 80095f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095f6:	d90b      	bls.n	8009610 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	22ff      	movs	r2, #255	; 0xff
 80095fe:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2203      	movs	r2, #3
 8009604:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800960c:	2303      	movs	r3, #3
 800960e:	e011      	b.n	8009634 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	f003 0304 	and.w	r3, r3, #4
 800961a:	2b00      	cmp	r3, #0
 800961c:	d0e4      	beq.n	80095e8 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	22ff      	movs	r2, #255	; 0xff
 8009624:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2201      	movs	r2, #1
 800962a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009632:	2300      	movs	r3, #0
}
 8009634:	4618      	mov	r0, r3
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8009644:	bf00      	nop
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d101      	bne.n	8009662 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800965e:	2301      	movs	r3, #1
 8009660:	e07b      	b.n	800975a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009666:	2b00      	cmp	r3, #0
 8009668:	d108      	bne.n	800967c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009672:	d009      	beq.n	8009688 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	61da      	str	r2, [r3, #28]
 800967a:	e005      	b.n	8009688 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009694:	b2db      	uxtb	r3, r3
 8009696:	2b00      	cmp	r3, #0
 8009698:	d106      	bne.n	80096a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f7f8 fd48 	bl	8002138 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2202      	movs	r2, #2
 80096ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80096d0:	431a      	orrs	r2, r3
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096da:	431a      	orrs	r2, r3
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	691b      	ldr	r3, [r3, #16]
 80096e0:	f003 0302 	and.w	r3, r3, #2
 80096e4:	431a      	orrs	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	695b      	ldr	r3, [r3, #20]
 80096ea:	f003 0301 	and.w	r3, r3, #1
 80096ee:	431a      	orrs	r2, r3
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	699b      	ldr	r3, [r3, #24]
 80096f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80096f8:	431a      	orrs	r2, r3
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	69db      	ldr	r3, [r3, #28]
 80096fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009702:	431a      	orrs	r2, r3
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6a1b      	ldr	r3, [r3, #32]
 8009708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800970c:	ea42 0103 	orr.w	r1, r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009714:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	430a      	orrs	r2, r1
 800971e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	699b      	ldr	r3, [r3, #24]
 8009724:	0c1b      	lsrs	r3, r3, #16
 8009726:	f003 0104 	and.w	r1, r3, #4
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972e:	f003 0210 	and.w	r2, r3, #16
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	430a      	orrs	r2, r1
 8009738:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	69da      	ldr	r2, [r3, #28]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009748:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3708      	adds	r7, #8
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b088      	sub	sp, #32
 8009766:	af00      	add	r7, sp, #0
 8009768:	60f8      	str	r0, [r7, #12]
 800976a:	60b9      	str	r1, [r7, #8]
 800976c:	603b      	str	r3, [r7, #0]
 800976e:	4613      	mov	r3, r2
 8009770:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009772:	2300      	movs	r3, #0
 8009774:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800977c:	2b01      	cmp	r3, #1
 800977e:	d101      	bne.n	8009784 <HAL_SPI_Transmit+0x22>
 8009780:	2302      	movs	r3, #2
 8009782:	e126      	b.n	80099d2 <HAL_SPI_Transmit+0x270>
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2201      	movs	r2, #1
 8009788:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800978c:	f7fb fe8c 	bl	80054a8 <HAL_GetTick>
 8009790:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009792:	88fb      	ldrh	r3, [r7, #6]
 8009794:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800979c:	b2db      	uxtb	r3, r3
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d002      	beq.n	80097a8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80097a2:	2302      	movs	r3, #2
 80097a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80097a6:	e10b      	b.n	80099c0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d002      	beq.n	80097b4 <HAL_SPI_Transmit+0x52>
 80097ae:	88fb      	ldrh	r3, [r7, #6]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d102      	bne.n	80097ba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80097b8:	e102      	b.n	80099c0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2203      	movs	r2, #3
 80097be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2200      	movs	r2, #0
 80097c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	68ba      	ldr	r2, [r7, #8]
 80097cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	88fa      	ldrh	r2, [r7, #6]
 80097d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	88fa      	ldrh	r2, [r7, #6]
 80097d8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2200      	movs	r2, #0
 80097de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2200      	movs	r2, #0
 80097e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2200      	movs	r2, #0
 80097ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2200      	movs	r2, #0
 80097f0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2200      	movs	r2, #0
 80097f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009800:	d10f      	bne.n	8009822 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009810:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009820:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800982c:	2b40      	cmp	r3, #64	; 0x40
 800982e:	d007      	beq.n	8009840 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	681a      	ldr	r2, [r3, #0]
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800983e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009848:	d14b      	bne.n	80098e2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d002      	beq.n	8009858 <HAL_SPI_Transmit+0xf6>
 8009852:	8afb      	ldrh	r3, [r7, #22]
 8009854:	2b01      	cmp	r3, #1
 8009856:	d13e      	bne.n	80098d6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800985c:	881a      	ldrh	r2, [r3, #0]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009868:	1c9a      	adds	r2, r3, #2
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009872:	b29b      	uxth	r3, r3
 8009874:	3b01      	subs	r3, #1
 8009876:	b29a      	uxth	r2, r3
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800987c:	e02b      	b.n	80098d6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	689b      	ldr	r3, [r3, #8]
 8009884:	f003 0302 	and.w	r3, r3, #2
 8009888:	2b02      	cmp	r3, #2
 800988a:	d112      	bne.n	80098b2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009890:	881a      	ldrh	r2, [r3, #0]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800989c:	1c9a      	adds	r2, r3, #2
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	3b01      	subs	r3, #1
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80098b0:	e011      	b.n	80098d6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80098b2:	f7fb fdf9 	bl	80054a8 <HAL_GetTick>
 80098b6:	4602      	mov	r2, r0
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	1ad3      	subs	r3, r2, r3
 80098bc:	683a      	ldr	r2, [r7, #0]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d803      	bhi.n	80098ca <HAL_SPI_Transmit+0x168>
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098c8:	d102      	bne.n	80098d0 <HAL_SPI_Transmit+0x16e>
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d102      	bne.n	80098d6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80098d0:	2303      	movs	r3, #3
 80098d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80098d4:	e074      	b.n	80099c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098da:	b29b      	uxth	r3, r3
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d1ce      	bne.n	800987e <HAL_SPI_Transmit+0x11c>
 80098e0:	e04c      	b.n	800997c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d002      	beq.n	80098f0 <HAL_SPI_Transmit+0x18e>
 80098ea:	8afb      	ldrh	r3, [r7, #22]
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d140      	bne.n	8009972 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	330c      	adds	r3, #12
 80098fa:	7812      	ldrb	r2, [r2, #0]
 80098fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009902:	1c5a      	adds	r2, r3, #1
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800990c:	b29b      	uxth	r3, r3
 800990e:	3b01      	subs	r3, #1
 8009910:	b29a      	uxth	r2, r3
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009916:	e02c      	b.n	8009972 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	f003 0302 	and.w	r3, r3, #2
 8009922:	2b02      	cmp	r3, #2
 8009924:	d113      	bne.n	800994e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	330c      	adds	r3, #12
 8009930:	7812      	ldrb	r2, [r2, #0]
 8009932:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009938:	1c5a      	adds	r2, r3, #1
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009942:	b29b      	uxth	r3, r3
 8009944:	3b01      	subs	r3, #1
 8009946:	b29a      	uxth	r2, r3
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	86da      	strh	r2, [r3, #54]	; 0x36
 800994c:	e011      	b.n	8009972 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800994e:	f7fb fdab 	bl	80054a8 <HAL_GetTick>
 8009952:	4602      	mov	r2, r0
 8009954:	69bb      	ldr	r3, [r7, #24]
 8009956:	1ad3      	subs	r3, r2, r3
 8009958:	683a      	ldr	r2, [r7, #0]
 800995a:	429a      	cmp	r2, r3
 800995c:	d803      	bhi.n	8009966 <HAL_SPI_Transmit+0x204>
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009964:	d102      	bne.n	800996c <HAL_SPI_Transmit+0x20a>
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d102      	bne.n	8009972 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800996c:	2303      	movs	r3, #3
 800996e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009970:	e026      	b.n	80099c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009976:	b29b      	uxth	r3, r3
 8009978:	2b00      	cmp	r3, #0
 800997a:	d1cd      	bne.n	8009918 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800997c:	69ba      	ldr	r2, [r7, #24]
 800997e:	6839      	ldr	r1, [r7, #0]
 8009980:	68f8      	ldr	r0, [r7, #12]
 8009982:	f000 fbcb 	bl	800a11c <SPI_EndRxTxTransaction>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d002      	beq.n	8009992 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2220      	movs	r2, #32
 8009990:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d10a      	bne.n	80099b0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800999a:	2300      	movs	r3, #0
 800999c:	613b      	str	r3, [r7, #16]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	613b      	str	r3, [r7, #16]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	613b      	str	r3, [r7, #16]
 80099ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d002      	beq.n	80099be <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80099b8:	2301      	movs	r3, #1
 80099ba:	77fb      	strb	r3, [r7, #31]
 80099bc:	e000      	b.n	80099c0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80099be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80099d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3720      	adds	r7, #32
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}

080099da <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099da:	b580      	push	{r7, lr}
 80099dc:	b088      	sub	sp, #32
 80099de:	af02      	add	r7, sp, #8
 80099e0:	60f8      	str	r0, [r7, #12]
 80099e2:	60b9      	str	r1, [r7, #8]
 80099e4:	603b      	str	r3, [r7, #0]
 80099e6:	4613      	mov	r3, r2
 80099e8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80099ea:	2300      	movs	r3, #0
 80099ec:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099f6:	d112      	bne.n	8009a1e <HAL_SPI_Receive+0x44>
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d10e      	bne.n	8009a1e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2204      	movs	r2, #4
 8009a04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009a08:	88fa      	ldrh	r2, [r7, #6]
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	9300      	str	r3, [sp, #0]
 8009a0e:	4613      	mov	r3, r2
 8009a10:	68ba      	ldr	r2, [r7, #8]
 8009a12:	68b9      	ldr	r1, [r7, #8]
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	f000 f8f1 	bl	8009bfc <HAL_SPI_TransmitReceive>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	e0ea      	b.n	8009bf4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d101      	bne.n	8009a2c <HAL_SPI_Receive+0x52>
 8009a28:	2302      	movs	r3, #2
 8009a2a:	e0e3      	b.n	8009bf4 <HAL_SPI_Receive+0x21a>
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a34:	f7fb fd38 	bl	80054a8 <HAL_GetTick>
 8009a38:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d002      	beq.n	8009a4c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009a46:	2302      	movs	r3, #2
 8009a48:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009a4a:	e0ca      	b.n	8009be2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d002      	beq.n	8009a58 <HAL_SPI_Receive+0x7e>
 8009a52:	88fb      	ldrh	r3, [r7, #6]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d102      	bne.n	8009a5e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009a5c:	e0c1      	b.n	8009be2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2204      	movs	r2, #4
 8009a62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	68ba      	ldr	r2, [r7, #8]
 8009a70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	88fa      	ldrh	r2, [r7, #6]
 8009a76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	88fa      	ldrh	r2, [r7, #6]
 8009a7c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2200      	movs	r2, #0
 8009a82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2200      	movs	r2, #0
 8009a94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009aa4:	d10f      	bne.n	8009ac6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ab4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009ac4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ad0:	2b40      	cmp	r3, #64	; 0x40
 8009ad2:	d007      	beq.n	8009ae4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ae2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d162      	bne.n	8009bb2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009aec:	e02e      	b.n	8009b4c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	f003 0301 	and.w	r3, r3, #1
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d115      	bne.n	8009b28 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f103 020c 	add.w	r2, r3, #12
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b08:	7812      	ldrb	r2, [r2, #0]
 8009b0a:	b2d2      	uxtb	r2, r2
 8009b0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b12:	1c5a      	adds	r2, r3, #1
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	3b01      	subs	r3, #1
 8009b20:	b29a      	uxth	r2, r3
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009b26:	e011      	b.n	8009b4c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b28:	f7fb fcbe 	bl	80054a8 <HAL_GetTick>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	1ad3      	subs	r3, r2, r3
 8009b32:	683a      	ldr	r2, [r7, #0]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d803      	bhi.n	8009b40 <HAL_SPI_Receive+0x166>
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b3e:	d102      	bne.n	8009b46 <HAL_SPI_Receive+0x16c>
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d102      	bne.n	8009b4c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009b46:	2303      	movs	r3, #3
 8009b48:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009b4a:	e04a      	b.n	8009be2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d1cb      	bne.n	8009aee <HAL_SPI_Receive+0x114>
 8009b56:	e031      	b.n	8009bbc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	689b      	ldr	r3, [r3, #8]
 8009b5e:	f003 0301 	and.w	r3, r3, #1
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d113      	bne.n	8009b8e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	68da      	ldr	r2, [r3, #12]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b70:	b292      	uxth	r2, r2
 8009b72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b78:	1c9a      	adds	r2, r3, #2
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	3b01      	subs	r3, #1
 8009b86:	b29a      	uxth	r2, r3
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009b8c:	e011      	b.n	8009bb2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b8e:	f7fb fc8b 	bl	80054a8 <HAL_GetTick>
 8009b92:	4602      	mov	r2, r0
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	1ad3      	subs	r3, r2, r3
 8009b98:	683a      	ldr	r2, [r7, #0]
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d803      	bhi.n	8009ba6 <HAL_SPI_Receive+0x1cc>
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ba4:	d102      	bne.n	8009bac <HAL_SPI_Receive+0x1d2>
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d102      	bne.n	8009bb2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009bac:	2303      	movs	r3, #3
 8009bae:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009bb0:	e017      	b.n	8009be2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d1cd      	bne.n	8009b58 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009bbc:	693a      	ldr	r2, [r7, #16]
 8009bbe:	6839      	ldr	r1, [r7, #0]
 8009bc0:	68f8      	ldr	r0, [r7, #12]
 8009bc2:	f000 fa45 	bl	800a050 <SPI_EndRxTransaction>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d002      	beq.n	8009bd2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2220      	movs	r2, #32
 8009bd0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d002      	beq.n	8009be0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	75fb      	strb	r3, [r7, #23]
 8009bde:	e000      	b.n	8009be2 <HAL_SPI_Receive+0x208>
  }

error :
 8009be0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2201      	movs	r2, #1
 8009be6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2200      	movs	r2, #0
 8009bee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3718      	adds	r7, #24
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b08c      	sub	sp, #48	; 0x30
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	607a      	str	r2, [r7, #4]
 8009c08:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d101      	bne.n	8009c22 <HAL_SPI_TransmitReceive+0x26>
 8009c1e:	2302      	movs	r3, #2
 8009c20:	e18a      	b.n	8009f38 <HAL_SPI_TransmitReceive+0x33c>
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2201      	movs	r2, #1
 8009c26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c2a:	f7fb fc3d 	bl	80054a8 <HAL_GetTick>
 8009c2e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009c40:	887b      	ldrh	r3, [r7, #2]
 8009c42:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009c44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d00f      	beq.n	8009c6c <HAL_SPI_TransmitReceive+0x70>
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c52:	d107      	bne.n	8009c64 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d103      	bne.n	8009c64 <HAL_SPI_TransmitReceive+0x68>
 8009c5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c60:	2b04      	cmp	r3, #4
 8009c62:	d003      	beq.n	8009c6c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009c64:	2302      	movs	r3, #2
 8009c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009c6a:	e15b      	b.n	8009f24 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d005      	beq.n	8009c7e <HAL_SPI_TransmitReceive+0x82>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d002      	beq.n	8009c7e <HAL_SPI_TransmitReceive+0x82>
 8009c78:	887b      	ldrh	r3, [r7, #2]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d103      	bne.n	8009c86 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009c84:	e14e      	b.n	8009f24 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	2b04      	cmp	r3, #4
 8009c90:	d003      	beq.n	8009c9a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2205      	movs	r2, #5
 8009c96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	887a      	ldrh	r2, [r7, #2]
 8009caa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	887a      	ldrh	r2, [r7, #2]
 8009cb0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	68ba      	ldr	r2, [r7, #8]
 8009cb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	887a      	ldrh	r2, [r7, #2]
 8009cbc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	887a      	ldrh	r2, [r7, #2]
 8009cc2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cda:	2b40      	cmp	r3, #64	; 0x40
 8009cdc:	d007      	beq.n	8009cee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	681a      	ldr	r2, [r3, #0]
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009cec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cf6:	d178      	bne.n	8009dea <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d002      	beq.n	8009d06 <HAL_SPI_TransmitReceive+0x10a>
 8009d00:	8b7b      	ldrh	r3, [r7, #26]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d166      	bne.n	8009dd4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d0a:	881a      	ldrh	r2, [r3, #0]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d16:	1c9a      	adds	r2, r3, #2
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	3b01      	subs	r3, #1
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d2a:	e053      	b.n	8009dd4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	f003 0302 	and.w	r3, r3, #2
 8009d36:	2b02      	cmp	r3, #2
 8009d38:	d11b      	bne.n	8009d72 <HAL_SPI_TransmitReceive+0x176>
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d016      	beq.n	8009d72 <HAL_SPI_TransmitReceive+0x176>
 8009d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d113      	bne.n	8009d72 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d4e:	881a      	ldrh	r2, [r3, #0]
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d5a:	1c9a      	adds	r2, r3, #2
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	3b01      	subs	r3, #1
 8009d68:	b29a      	uxth	r2, r3
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	f003 0301 	and.w	r3, r3, #1
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d119      	bne.n	8009db4 <HAL_SPI_TransmitReceive+0x1b8>
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d014      	beq.n	8009db4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	68da      	ldr	r2, [r3, #12]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d94:	b292      	uxth	r2, r2
 8009d96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d9c:	1c9a      	adds	r2, r3, #2
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	3b01      	subs	r3, #1
 8009daa:	b29a      	uxth	r2, r3
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009db0:	2301      	movs	r3, #1
 8009db2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009db4:	f7fb fb78 	bl	80054a8 <HAL_GetTick>
 8009db8:	4602      	mov	r2, r0
 8009dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbc:	1ad3      	subs	r3, r2, r3
 8009dbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d807      	bhi.n	8009dd4 <HAL_SPI_TransmitReceive+0x1d8>
 8009dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dca:	d003      	beq.n	8009dd4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009dcc:	2303      	movs	r3, #3
 8009dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009dd2:	e0a7      	b.n	8009f24 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d1a6      	bne.n	8009d2c <HAL_SPI_TransmitReceive+0x130>
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d1a1      	bne.n	8009d2c <HAL_SPI_TransmitReceive+0x130>
 8009de8:	e07c      	b.n	8009ee4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d002      	beq.n	8009df8 <HAL_SPI_TransmitReceive+0x1fc>
 8009df2:	8b7b      	ldrh	r3, [r7, #26]
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d16b      	bne.n	8009ed0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	330c      	adds	r3, #12
 8009e02:	7812      	ldrb	r2, [r2, #0]
 8009e04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e0a:	1c5a      	adds	r2, r3, #1
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	3b01      	subs	r3, #1
 8009e18:	b29a      	uxth	r2, r3
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e1e:	e057      	b.n	8009ed0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	689b      	ldr	r3, [r3, #8]
 8009e26:	f003 0302 	and.w	r3, r3, #2
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	d11c      	bne.n	8009e68 <HAL_SPI_TransmitReceive+0x26c>
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d017      	beq.n	8009e68 <HAL_SPI_TransmitReceive+0x26c>
 8009e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d114      	bne.n	8009e68 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	330c      	adds	r3, #12
 8009e48:	7812      	ldrb	r2, [r2, #0]
 8009e4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e50:	1c5a      	adds	r2, r3, #1
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	b29a      	uxth	r2, r3
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009e64:	2300      	movs	r3, #0
 8009e66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	f003 0301 	and.w	r3, r3, #1
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	d119      	bne.n	8009eaa <HAL_SPI_TransmitReceive+0x2ae>
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d014      	beq.n	8009eaa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	68da      	ldr	r2, [r3, #12]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e8a:	b2d2      	uxtb	r2, r2
 8009e8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e92:	1c5a      	adds	r2, r3, #1
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	3b01      	subs	r3, #1
 8009ea0:	b29a      	uxth	r2, r3
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009eaa:	f7fb fafd 	bl	80054a8 <HAL_GetTick>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb2:	1ad3      	subs	r3, r2, r3
 8009eb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d803      	bhi.n	8009ec2 <HAL_SPI_TransmitReceive+0x2c6>
 8009eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ec0:	d102      	bne.n	8009ec8 <HAL_SPI_TransmitReceive+0x2cc>
 8009ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d103      	bne.n	8009ed0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009ec8:	2303      	movs	r3, #3
 8009eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009ece:	e029      	b.n	8009f24 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d1a2      	bne.n	8009e20 <HAL_SPI_TransmitReceive+0x224>
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d19d      	bne.n	8009e20 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ee6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ee8:	68f8      	ldr	r0, [r7, #12]
 8009eea:	f000 f917 	bl	800a11c <SPI_EndRxTxTransaction>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d006      	beq.n	8009f02 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2220      	movs	r2, #32
 8009efe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009f00:	e010      	b.n	8009f24 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d10b      	bne.n	8009f22 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	617b      	str	r3, [r7, #20]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	617b      	str	r3, [r7, #20]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	689b      	ldr	r3, [r3, #8]
 8009f1c:	617b      	str	r3, [r7, #20]
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	e000      	b.n	8009f24 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009f22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2201      	movs	r2, #1
 8009f28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009f34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3730      	adds	r7, #48	; 0x30
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b088      	sub	sp, #32
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	603b      	str	r3, [r7, #0]
 8009f4c:	4613      	mov	r3, r2
 8009f4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009f50:	f7fb faaa 	bl	80054a8 <HAL_GetTick>
 8009f54:	4602      	mov	r2, r0
 8009f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f58:	1a9b      	subs	r3, r3, r2
 8009f5a:	683a      	ldr	r2, [r7, #0]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009f60:	f7fb faa2 	bl	80054a8 <HAL_GetTick>
 8009f64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009f66:	4b39      	ldr	r3, [pc, #228]	; (800a04c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	015b      	lsls	r3, r3, #5
 8009f6c:	0d1b      	lsrs	r3, r3, #20
 8009f6e:	69fa      	ldr	r2, [r7, #28]
 8009f70:	fb02 f303 	mul.w	r3, r2, r3
 8009f74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009f76:	e054      	b.n	800a022 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f7e:	d050      	beq.n	800a022 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009f80:	f7fb fa92 	bl	80054a8 <HAL_GetTick>
 8009f84:	4602      	mov	r2, r0
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	1ad3      	subs	r3, r2, r3
 8009f8a:	69fa      	ldr	r2, [r7, #28]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d902      	bls.n	8009f96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d13d      	bne.n	800a012 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	685a      	ldr	r2, [r3, #4]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009fa4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009fae:	d111      	bne.n	8009fd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fb8:	d004      	beq.n	8009fc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fc2:	d107      	bne.n	8009fd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009fd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fdc:	d10f      	bne.n	8009ffe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009fec:	601a      	str	r2, [r3, #0]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009ffc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2201      	movs	r2, #1
 800a002:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2200      	movs	r2, #0
 800a00a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a00e:	2303      	movs	r3, #3
 800a010:	e017      	b.n	800a042 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d101      	bne.n	800a01c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a018:	2300      	movs	r3, #0
 800a01a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	3b01      	subs	r3, #1
 800a020:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	689a      	ldr	r2, [r3, #8]
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	4013      	ands	r3, r2
 800a02c:	68ba      	ldr	r2, [r7, #8]
 800a02e:	429a      	cmp	r2, r3
 800a030:	bf0c      	ite	eq
 800a032:	2301      	moveq	r3, #1
 800a034:	2300      	movne	r3, #0
 800a036:	b2db      	uxtb	r3, r3
 800a038:	461a      	mov	r2, r3
 800a03a:	79fb      	ldrb	r3, [r7, #7]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d19b      	bne.n	8009f78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3720      	adds	r7, #32
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	20000000 	.word	0x20000000

0800a050 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b086      	sub	sp, #24
 800a054:	af02      	add	r7, sp, #8
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a064:	d111      	bne.n	800a08a <SPI_EndRxTransaction+0x3a>
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	689b      	ldr	r3, [r3, #8]
 800a06a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a06e:	d004      	beq.n	800a07a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	689b      	ldr	r3, [r3, #8]
 800a074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a078:	d107      	bne.n	800a08a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	681a      	ldr	r2, [r3, #0]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a088:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a092:	d12a      	bne.n	800a0ea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a09c:	d012      	beq.n	800a0c4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	9300      	str	r3, [sp, #0]
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	2180      	movs	r1, #128	; 0x80
 800a0a8:	68f8      	ldr	r0, [r7, #12]
 800a0aa:	f7ff ff49 	bl	8009f40 <SPI_WaitFlagStateUntilTimeout>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d02d      	beq.n	800a110 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0b8:	f043 0220 	orr.w	r2, r3, #32
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a0c0:	2303      	movs	r3, #3
 800a0c2:	e026      	b.n	800a112 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	9300      	str	r3, [sp, #0]
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	2101      	movs	r1, #1
 800a0ce:	68f8      	ldr	r0, [r7, #12]
 800a0d0:	f7ff ff36 	bl	8009f40 <SPI_WaitFlagStateUntilTimeout>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d01a      	beq.n	800a110 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0de:	f043 0220 	orr.w	r2, r3, #32
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a0e6:	2303      	movs	r3, #3
 800a0e8:	e013      	b.n	800a112 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	9300      	str	r3, [sp, #0]
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	2101      	movs	r1, #1
 800a0f4:	68f8      	ldr	r0, [r7, #12]
 800a0f6:	f7ff ff23 	bl	8009f40 <SPI_WaitFlagStateUntilTimeout>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d007      	beq.n	800a110 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a104:	f043 0220 	orr.w	r2, r3, #32
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a10c:	2303      	movs	r3, #3
 800a10e:	e000      	b.n	800a112 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a110:	2300      	movs	r3, #0
}
 800a112:	4618      	mov	r0, r3
 800a114:	3710      	adds	r7, #16
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
	...

0800a11c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b088      	sub	sp, #32
 800a120:	af02      	add	r7, sp, #8
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	60b9      	str	r1, [r7, #8]
 800a126:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a128:	4b1b      	ldr	r3, [pc, #108]	; (800a198 <SPI_EndRxTxTransaction+0x7c>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a1b      	ldr	r2, [pc, #108]	; (800a19c <SPI_EndRxTxTransaction+0x80>)
 800a12e:	fba2 2303 	umull	r2, r3, r2, r3
 800a132:	0d5b      	lsrs	r3, r3, #21
 800a134:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a138:	fb02 f303 	mul.w	r3, r2, r3
 800a13c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a146:	d112      	bne.n	800a16e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	9300      	str	r3, [sp, #0]
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	2200      	movs	r2, #0
 800a150:	2180      	movs	r1, #128	; 0x80
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f7ff fef4 	bl	8009f40 <SPI_WaitFlagStateUntilTimeout>
 800a158:	4603      	mov	r3, r0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d016      	beq.n	800a18c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a162:	f043 0220 	orr.w	r2, r3, #32
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a16a:	2303      	movs	r3, #3
 800a16c:	e00f      	b.n	800a18e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d00a      	beq.n	800a18a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	3b01      	subs	r3, #1
 800a178:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a184:	2b80      	cmp	r3, #128	; 0x80
 800a186:	d0f2      	beq.n	800a16e <SPI_EndRxTxTransaction+0x52>
 800a188:	e000      	b.n	800a18c <SPI_EndRxTxTransaction+0x70>
        break;
 800a18a:	bf00      	nop
  }

  return HAL_OK;
 800a18c:	2300      	movs	r3, #0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3718      	adds	r7, #24
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	20000000 	.word	0x20000000
 800a19c:	165e9f81 	.word	0x165e9f81

0800a1a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d101      	bne.n	800a1b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e041      	b.n	800a236 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d106      	bne.n	800a1cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f7f8 f9b6 	bl	8002538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2202      	movs	r2, #2
 800a1d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	3304      	adds	r3, #4
 800a1dc:	4619      	mov	r1, r3
 800a1de:	4610      	mov	r0, r2
 800a1e0:	f000 fbb2 	bl	800a948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2201      	movs	r2, #1
 800a200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2201      	movs	r2, #1
 800a208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2201      	movs	r2, #1
 800a210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2201      	movs	r2, #1
 800a218:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2201      	movs	r2, #1
 800a220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2201      	movs	r2, #1
 800a228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2201      	movs	r2, #1
 800a230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3708      	adds	r7, #8
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
	...

0800a240 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a240:	b480      	push	{r7}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a24e:	b2db      	uxtb	r3, r3
 800a250:	2b01      	cmp	r3, #1
 800a252:	d001      	beq.n	800a258 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a254:	2301      	movs	r3, #1
 800a256:	e04e      	b.n	800a2f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2202      	movs	r2, #2
 800a25c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	68da      	ldr	r2, [r3, #12]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f042 0201 	orr.w	r2, r2, #1
 800a26e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a23      	ldr	r2, [pc, #140]	; (800a304 <HAL_TIM_Base_Start_IT+0xc4>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d022      	beq.n	800a2c0 <HAL_TIM_Base_Start_IT+0x80>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a282:	d01d      	beq.n	800a2c0 <HAL_TIM_Base_Start_IT+0x80>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a1f      	ldr	r2, [pc, #124]	; (800a308 <HAL_TIM_Base_Start_IT+0xc8>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d018      	beq.n	800a2c0 <HAL_TIM_Base_Start_IT+0x80>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4a1e      	ldr	r2, [pc, #120]	; (800a30c <HAL_TIM_Base_Start_IT+0xcc>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d013      	beq.n	800a2c0 <HAL_TIM_Base_Start_IT+0x80>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a1c      	ldr	r2, [pc, #112]	; (800a310 <HAL_TIM_Base_Start_IT+0xd0>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d00e      	beq.n	800a2c0 <HAL_TIM_Base_Start_IT+0x80>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a1b      	ldr	r2, [pc, #108]	; (800a314 <HAL_TIM_Base_Start_IT+0xd4>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d009      	beq.n	800a2c0 <HAL_TIM_Base_Start_IT+0x80>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a19      	ldr	r2, [pc, #100]	; (800a318 <HAL_TIM_Base_Start_IT+0xd8>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d004      	beq.n	800a2c0 <HAL_TIM_Base_Start_IT+0x80>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a18      	ldr	r2, [pc, #96]	; (800a31c <HAL_TIM_Base_Start_IT+0xdc>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d111      	bne.n	800a2e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	f003 0307 	and.w	r3, r3, #7
 800a2ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2b06      	cmp	r3, #6
 800a2d0:	d010      	beq.n	800a2f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f042 0201 	orr.w	r2, r2, #1
 800a2e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2e2:	e007      	b.n	800a2f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f042 0201 	orr.w	r2, r2, #1
 800a2f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3714      	adds	r7, #20
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr
 800a302:	bf00      	nop
 800a304:	40010000 	.word	0x40010000
 800a308:	40000400 	.word	0x40000400
 800a30c:	40000800 	.word	0x40000800
 800a310:	40000c00 	.word	0x40000c00
 800a314:	40010400 	.word	0x40010400
 800a318:	40014000 	.word	0x40014000
 800a31c:	40001800 	.word	0x40001800

0800a320 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d101      	bne.n	800a332 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	e041      	b.n	800a3b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d106      	bne.n	800a34c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f000 f839 	bl	800a3be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2202      	movs	r2, #2
 800a350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	3304      	adds	r3, #4
 800a35c:	4619      	mov	r1, r3
 800a35e:	4610      	mov	r0, r2
 800a360:	f000 faf2 	bl	800a948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2201      	movs	r2, #1
 800a368:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2201      	movs	r2, #1
 800a370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2201      	movs	r2, #1
 800a378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2201      	movs	r2, #1
 800a380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2201      	movs	r2, #1
 800a388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2201      	movs	r2, #1
 800a390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2201      	movs	r2, #1
 800a3a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a3b4:	2300      	movs	r3, #0
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3708      	adds	r7, #8
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}

0800a3be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a3be:	b480      	push	{r7}
 800a3c0:	b083      	sub	sp, #12
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a3c6:	bf00      	nop
 800a3c8:	370c      	adds	r7, #12
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr

0800a3d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b082      	sub	sp, #8
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	691b      	ldr	r3, [r3, #16]
 800a3e0:	f003 0302 	and.w	r3, r3, #2
 800a3e4:	2b02      	cmp	r3, #2
 800a3e6:	d122      	bne.n	800a42e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	68db      	ldr	r3, [r3, #12]
 800a3ee:	f003 0302 	and.w	r3, r3, #2
 800a3f2:	2b02      	cmp	r3, #2
 800a3f4:	d11b      	bne.n	800a42e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f06f 0202 	mvn.w	r2, #2
 800a3fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2201      	movs	r2, #1
 800a404:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	699b      	ldr	r3, [r3, #24]
 800a40c:	f003 0303 	and.w	r3, r3, #3
 800a410:	2b00      	cmp	r3, #0
 800a412:	d003      	beq.n	800a41c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 fa78 	bl	800a90a <HAL_TIM_IC_CaptureCallback>
 800a41a:	e005      	b.n	800a428 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f000 fa6a 	bl	800a8f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 fa7b 	bl	800a91e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2200      	movs	r2, #0
 800a42c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	691b      	ldr	r3, [r3, #16]
 800a434:	f003 0304 	and.w	r3, r3, #4
 800a438:	2b04      	cmp	r3, #4
 800a43a:	d122      	bne.n	800a482 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	68db      	ldr	r3, [r3, #12]
 800a442:	f003 0304 	and.w	r3, r3, #4
 800a446:	2b04      	cmp	r3, #4
 800a448:	d11b      	bne.n	800a482 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f06f 0204 	mvn.w	r2, #4
 800a452:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2202      	movs	r2, #2
 800a458:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	699b      	ldr	r3, [r3, #24]
 800a460:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a464:	2b00      	cmp	r3, #0
 800a466:	d003      	beq.n	800a470 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 fa4e 	bl	800a90a <HAL_TIM_IC_CaptureCallback>
 800a46e:	e005      	b.n	800a47c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 fa40 	bl	800a8f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 fa51 	bl	800a91e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2200      	movs	r2, #0
 800a480:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	691b      	ldr	r3, [r3, #16]
 800a488:	f003 0308 	and.w	r3, r3, #8
 800a48c:	2b08      	cmp	r3, #8
 800a48e:	d122      	bne.n	800a4d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	f003 0308 	and.w	r3, r3, #8
 800a49a:	2b08      	cmp	r3, #8
 800a49c:	d11b      	bne.n	800a4d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f06f 0208 	mvn.w	r2, #8
 800a4a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2204      	movs	r2, #4
 800a4ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	69db      	ldr	r3, [r3, #28]
 800a4b4:	f003 0303 	and.w	r3, r3, #3
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d003      	beq.n	800a4c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 fa24 	bl	800a90a <HAL_TIM_IC_CaptureCallback>
 800a4c2:	e005      	b.n	800a4d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 fa16 	bl	800a8f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f000 fa27 	bl	800a91e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	691b      	ldr	r3, [r3, #16]
 800a4dc:	f003 0310 	and.w	r3, r3, #16
 800a4e0:	2b10      	cmp	r3, #16
 800a4e2:	d122      	bne.n	800a52a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	f003 0310 	and.w	r3, r3, #16
 800a4ee:	2b10      	cmp	r3, #16
 800a4f0:	d11b      	bne.n	800a52a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f06f 0210 	mvn.w	r2, #16
 800a4fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2208      	movs	r2, #8
 800a500:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	69db      	ldr	r3, [r3, #28]
 800a508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d003      	beq.n	800a518 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 f9fa 	bl	800a90a <HAL_TIM_IC_CaptureCallback>
 800a516:	e005      	b.n	800a524 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 f9ec 	bl	800a8f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f000 f9fd 	bl	800a91e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2200      	movs	r2, #0
 800a528:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	691b      	ldr	r3, [r3, #16]
 800a530:	f003 0301 	and.w	r3, r3, #1
 800a534:	2b01      	cmp	r3, #1
 800a536:	d10e      	bne.n	800a556 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	f003 0301 	and.w	r3, r3, #1
 800a542:	2b01      	cmp	r3, #1
 800a544:	d107      	bne.n	800a556 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f06f 0201 	mvn.w	r2, #1
 800a54e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f7f7 fc79 	bl	8001e48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	691b      	ldr	r3, [r3, #16]
 800a55c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a560:	2b80      	cmp	r3, #128	; 0x80
 800a562:	d10e      	bne.n	800a582 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	68db      	ldr	r3, [r3, #12]
 800a56a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a56e:	2b80      	cmp	r3, #128	; 0x80
 800a570:	d107      	bne.n	800a582 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a57a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 fd53 	bl	800b028 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a58c:	2b40      	cmp	r3, #64	; 0x40
 800a58e:	d10e      	bne.n	800a5ae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a59a:	2b40      	cmp	r3, #64	; 0x40
 800a59c:	d107      	bne.n	800a5ae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a5a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 f9c2 	bl	800a932 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	691b      	ldr	r3, [r3, #16]
 800a5b4:	f003 0320 	and.w	r3, r3, #32
 800a5b8:	2b20      	cmp	r3, #32
 800a5ba:	d10e      	bne.n	800a5da <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	f003 0320 	and.w	r3, r3, #32
 800a5c6:	2b20      	cmp	r3, #32
 800a5c8:	d107      	bne.n	800a5da <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f06f 0220 	mvn.w	r2, #32
 800a5d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 fd1d 	bl	800b014 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a5da:	bf00      	nop
 800a5dc:	3708      	adds	r7, #8
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
	...

0800a5e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b086      	sub	sp, #24
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d101      	bne.n	800a602 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a5fe:	2302      	movs	r3, #2
 800a600:	e0ae      	b.n	800a760 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2201      	movs	r2, #1
 800a606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2b0c      	cmp	r3, #12
 800a60e:	f200 809f 	bhi.w	800a750 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a612:	a201      	add	r2, pc, #4	; (adr r2, 800a618 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a618:	0800a64d 	.word	0x0800a64d
 800a61c:	0800a751 	.word	0x0800a751
 800a620:	0800a751 	.word	0x0800a751
 800a624:	0800a751 	.word	0x0800a751
 800a628:	0800a68d 	.word	0x0800a68d
 800a62c:	0800a751 	.word	0x0800a751
 800a630:	0800a751 	.word	0x0800a751
 800a634:	0800a751 	.word	0x0800a751
 800a638:	0800a6cf 	.word	0x0800a6cf
 800a63c:	0800a751 	.word	0x0800a751
 800a640:	0800a751 	.word	0x0800a751
 800a644:	0800a751 	.word	0x0800a751
 800a648:	0800a70f 	.word	0x0800a70f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	68b9      	ldr	r1, [r7, #8]
 800a652:	4618      	mov	r0, r3
 800a654:	f000 fa18 	bl	800aa88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	699a      	ldr	r2, [r3, #24]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f042 0208 	orr.w	r2, r2, #8
 800a666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	699a      	ldr	r2, [r3, #24]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f022 0204 	bic.w	r2, r2, #4
 800a676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	6999      	ldr	r1, [r3, #24]
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	691a      	ldr	r2, [r3, #16]
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	430a      	orrs	r2, r1
 800a688:	619a      	str	r2, [r3, #24]
      break;
 800a68a:	e064      	b.n	800a756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	68b9      	ldr	r1, [r7, #8]
 800a692:	4618      	mov	r0, r3
 800a694:	f000 fa68 	bl	800ab68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	699a      	ldr	r2, [r3, #24]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a6a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	699a      	ldr	r2, [r3, #24]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	6999      	ldr	r1, [r3, #24]
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	691b      	ldr	r3, [r3, #16]
 800a6c2:	021a      	lsls	r2, r3, #8
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	430a      	orrs	r2, r1
 800a6ca:	619a      	str	r2, [r3, #24]
      break;
 800a6cc:	e043      	b.n	800a756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	68b9      	ldr	r1, [r7, #8]
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f000 fabd 	bl	800ac54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	69da      	ldr	r2, [r3, #28]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f042 0208 	orr.w	r2, r2, #8
 800a6e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	69da      	ldr	r2, [r3, #28]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f022 0204 	bic.w	r2, r2, #4
 800a6f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	69d9      	ldr	r1, [r3, #28]
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	691a      	ldr	r2, [r3, #16]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	430a      	orrs	r2, r1
 800a70a:	61da      	str	r2, [r3, #28]
      break;
 800a70c:	e023      	b.n	800a756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	68b9      	ldr	r1, [r7, #8]
 800a714:	4618      	mov	r0, r3
 800a716:	f000 fb11 	bl	800ad3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	69da      	ldr	r2, [r3, #28]
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	69da      	ldr	r2, [r3, #28]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	69d9      	ldr	r1, [r3, #28]
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	691b      	ldr	r3, [r3, #16]
 800a744:	021a      	lsls	r2, r3, #8
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	430a      	orrs	r2, r1
 800a74c:	61da      	str	r2, [r3, #28]
      break;
 800a74e:	e002      	b.n	800a756 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a750:	2301      	movs	r3, #1
 800a752:	75fb      	strb	r3, [r7, #23]
      break;
 800a754:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2200      	movs	r2, #0
 800a75a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a75e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a760:	4618      	mov	r0, r3
 800a762:	3718      	adds	r7, #24
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b084      	sub	sp, #16
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a772:	2300      	movs	r3, #0
 800a774:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d101      	bne.n	800a784 <HAL_TIM_ConfigClockSource+0x1c>
 800a780:	2302      	movs	r3, #2
 800a782:	e0b4      	b.n	800a8ee <HAL_TIM_ConfigClockSource+0x186>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2201      	movs	r2, #1
 800a788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2202      	movs	r2, #2
 800a790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	689b      	ldr	r3, [r3, #8]
 800a79a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a7a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a7aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	68ba      	ldr	r2, [r7, #8]
 800a7b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7bc:	d03e      	beq.n	800a83c <HAL_TIM_ConfigClockSource+0xd4>
 800a7be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7c2:	f200 8087 	bhi.w	800a8d4 <HAL_TIM_ConfigClockSource+0x16c>
 800a7c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7ca:	f000 8086 	beq.w	800a8da <HAL_TIM_ConfigClockSource+0x172>
 800a7ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7d2:	d87f      	bhi.n	800a8d4 <HAL_TIM_ConfigClockSource+0x16c>
 800a7d4:	2b70      	cmp	r3, #112	; 0x70
 800a7d6:	d01a      	beq.n	800a80e <HAL_TIM_ConfigClockSource+0xa6>
 800a7d8:	2b70      	cmp	r3, #112	; 0x70
 800a7da:	d87b      	bhi.n	800a8d4 <HAL_TIM_ConfigClockSource+0x16c>
 800a7dc:	2b60      	cmp	r3, #96	; 0x60
 800a7de:	d050      	beq.n	800a882 <HAL_TIM_ConfigClockSource+0x11a>
 800a7e0:	2b60      	cmp	r3, #96	; 0x60
 800a7e2:	d877      	bhi.n	800a8d4 <HAL_TIM_ConfigClockSource+0x16c>
 800a7e4:	2b50      	cmp	r3, #80	; 0x50
 800a7e6:	d03c      	beq.n	800a862 <HAL_TIM_ConfigClockSource+0xfa>
 800a7e8:	2b50      	cmp	r3, #80	; 0x50
 800a7ea:	d873      	bhi.n	800a8d4 <HAL_TIM_ConfigClockSource+0x16c>
 800a7ec:	2b40      	cmp	r3, #64	; 0x40
 800a7ee:	d058      	beq.n	800a8a2 <HAL_TIM_ConfigClockSource+0x13a>
 800a7f0:	2b40      	cmp	r3, #64	; 0x40
 800a7f2:	d86f      	bhi.n	800a8d4 <HAL_TIM_ConfigClockSource+0x16c>
 800a7f4:	2b30      	cmp	r3, #48	; 0x30
 800a7f6:	d064      	beq.n	800a8c2 <HAL_TIM_ConfigClockSource+0x15a>
 800a7f8:	2b30      	cmp	r3, #48	; 0x30
 800a7fa:	d86b      	bhi.n	800a8d4 <HAL_TIM_ConfigClockSource+0x16c>
 800a7fc:	2b20      	cmp	r3, #32
 800a7fe:	d060      	beq.n	800a8c2 <HAL_TIM_ConfigClockSource+0x15a>
 800a800:	2b20      	cmp	r3, #32
 800a802:	d867      	bhi.n	800a8d4 <HAL_TIM_ConfigClockSource+0x16c>
 800a804:	2b00      	cmp	r3, #0
 800a806:	d05c      	beq.n	800a8c2 <HAL_TIM_ConfigClockSource+0x15a>
 800a808:	2b10      	cmp	r3, #16
 800a80a:	d05a      	beq.n	800a8c2 <HAL_TIM_ConfigClockSource+0x15a>
 800a80c:	e062      	b.n	800a8d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6818      	ldr	r0, [r3, #0]
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	6899      	ldr	r1, [r3, #8]
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	685a      	ldr	r2, [r3, #4]
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	f000 fb5d 	bl	800aedc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	689b      	ldr	r3, [r3, #8]
 800a828:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a830:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	68ba      	ldr	r2, [r7, #8]
 800a838:	609a      	str	r2, [r3, #8]
      break;
 800a83a:	e04f      	b.n	800a8dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6818      	ldr	r0, [r3, #0]
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	6899      	ldr	r1, [r3, #8]
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	685a      	ldr	r2, [r3, #4]
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	f000 fb46 	bl	800aedc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	689a      	ldr	r2, [r3, #8]
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a85e:	609a      	str	r2, [r3, #8]
      break;
 800a860:	e03c      	b.n	800a8dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6818      	ldr	r0, [r3, #0]
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	6859      	ldr	r1, [r3, #4]
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	68db      	ldr	r3, [r3, #12]
 800a86e:	461a      	mov	r2, r3
 800a870:	f000 faba 	bl	800ade8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	2150      	movs	r1, #80	; 0x50
 800a87a:	4618      	mov	r0, r3
 800a87c:	f000 fb13 	bl	800aea6 <TIM_ITRx_SetConfig>
      break;
 800a880:	e02c      	b.n	800a8dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6818      	ldr	r0, [r3, #0]
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	6859      	ldr	r1, [r3, #4]
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	68db      	ldr	r3, [r3, #12]
 800a88e:	461a      	mov	r2, r3
 800a890:	f000 fad9 	bl	800ae46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	2160      	movs	r1, #96	; 0x60
 800a89a:	4618      	mov	r0, r3
 800a89c:	f000 fb03 	bl	800aea6 <TIM_ITRx_SetConfig>
      break;
 800a8a0:	e01c      	b.n	800a8dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6818      	ldr	r0, [r3, #0]
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	6859      	ldr	r1, [r3, #4]
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	68db      	ldr	r3, [r3, #12]
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	f000 fa9a 	bl	800ade8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	2140      	movs	r1, #64	; 0x40
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f000 faf3 	bl	800aea6 <TIM_ITRx_SetConfig>
      break;
 800a8c0:	e00c      	b.n	800a8dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	4610      	mov	r0, r2
 800a8ce:	f000 faea 	bl	800aea6 <TIM_ITRx_SetConfig>
      break;
 800a8d2:	e003      	b.n	800a8dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	73fb      	strb	r3, [r7, #15]
      break;
 800a8d8:	e000      	b.n	800a8dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a8da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a8ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3710      	adds	r7, #16
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}

0800a8f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a8f6:	b480      	push	{r7}
 800a8f8:	b083      	sub	sp, #12
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a8fe:	bf00      	nop
 800a900:	370c      	adds	r7, #12
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr

0800a90a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a90a:	b480      	push	{r7}
 800a90c:	b083      	sub	sp, #12
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a912:	bf00      	nop
 800a914:	370c      	adds	r7, #12
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr

0800a91e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a91e:	b480      	push	{r7}
 800a920:	b083      	sub	sp, #12
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a926:	bf00      	nop
 800a928:	370c      	adds	r7, #12
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr

0800a932 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a932:	b480      	push	{r7}
 800a934:	b083      	sub	sp, #12
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a93a:	bf00      	nop
 800a93c:	370c      	adds	r7, #12
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr
	...

0800a948 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a948:	b480      	push	{r7}
 800a94a:	b085      	sub	sp, #20
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	4a40      	ldr	r2, [pc, #256]	; (800aa5c <TIM_Base_SetConfig+0x114>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d013      	beq.n	800a988 <TIM_Base_SetConfig+0x40>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a966:	d00f      	beq.n	800a988 <TIM_Base_SetConfig+0x40>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	4a3d      	ldr	r2, [pc, #244]	; (800aa60 <TIM_Base_SetConfig+0x118>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d00b      	beq.n	800a988 <TIM_Base_SetConfig+0x40>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	4a3c      	ldr	r2, [pc, #240]	; (800aa64 <TIM_Base_SetConfig+0x11c>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d007      	beq.n	800a988 <TIM_Base_SetConfig+0x40>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	4a3b      	ldr	r2, [pc, #236]	; (800aa68 <TIM_Base_SetConfig+0x120>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d003      	beq.n	800a988 <TIM_Base_SetConfig+0x40>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	4a3a      	ldr	r2, [pc, #232]	; (800aa6c <TIM_Base_SetConfig+0x124>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d108      	bne.n	800a99a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a98e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	68fa      	ldr	r2, [r7, #12]
 800a996:	4313      	orrs	r3, r2
 800a998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	4a2f      	ldr	r2, [pc, #188]	; (800aa5c <TIM_Base_SetConfig+0x114>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d02b      	beq.n	800a9fa <TIM_Base_SetConfig+0xb2>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9a8:	d027      	beq.n	800a9fa <TIM_Base_SetConfig+0xb2>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	4a2c      	ldr	r2, [pc, #176]	; (800aa60 <TIM_Base_SetConfig+0x118>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d023      	beq.n	800a9fa <TIM_Base_SetConfig+0xb2>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	4a2b      	ldr	r2, [pc, #172]	; (800aa64 <TIM_Base_SetConfig+0x11c>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d01f      	beq.n	800a9fa <TIM_Base_SetConfig+0xb2>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	4a2a      	ldr	r2, [pc, #168]	; (800aa68 <TIM_Base_SetConfig+0x120>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d01b      	beq.n	800a9fa <TIM_Base_SetConfig+0xb2>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	4a29      	ldr	r2, [pc, #164]	; (800aa6c <TIM_Base_SetConfig+0x124>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d017      	beq.n	800a9fa <TIM_Base_SetConfig+0xb2>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	4a28      	ldr	r2, [pc, #160]	; (800aa70 <TIM_Base_SetConfig+0x128>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d013      	beq.n	800a9fa <TIM_Base_SetConfig+0xb2>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	4a27      	ldr	r2, [pc, #156]	; (800aa74 <TIM_Base_SetConfig+0x12c>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d00f      	beq.n	800a9fa <TIM_Base_SetConfig+0xb2>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	4a26      	ldr	r2, [pc, #152]	; (800aa78 <TIM_Base_SetConfig+0x130>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d00b      	beq.n	800a9fa <TIM_Base_SetConfig+0xb2>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	4a25      	ldr	r2, [pc, #148]	; (800aa7c <TIM_Base_SetConfig+0x134>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d007      	beq.n	800a9fa <TIM_Base_SetConfig+0xb2>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4a24      	ldr	r2, [pc, #144]	; (800aa80 <TIM_Base_SetConfig+0x138>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d003      	beq.n	800a9fa <TIM_Base_SetConfig+0xb2>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	4a23      	ldr	r2, [pc, #140]	; (800aa84 <TIM_Base_SetConfig+0x13c>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d108      	bne.n	800aa0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	68fa      	ldr	r2, [r7, #12]
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	695b      	ldr	r3, [r3, #20]
 800aa16:	4313      	orrs	r3, r2
 800aa18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	68fa      	ldr	r2, [r7, #12]
 800aa1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	689a      	ldr	r2, [r3, #8]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	4a0a      	ldr	r2, [pc, #40]	; (800aa5c <TIM_Base_SetConfig+0x114>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d003      	beq.n	800aa40 <TIM_Base_SetConfig+0xf8>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	4a0c      	ldr	r2, [pc, #48]	; (800aa6c <TIM_Base_SetConfig+0x124>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d103      	bne.n	800aa48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	691a      	ldr	r2, [r3, #16]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	615a      	str	r2, [r3, #20]
}
 800aa4e:	bf00      	nop
 800aa50:	3714      	adds	r7, #20
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop
 800aa5c:	40010000 	.word	0x40010000
 800aa60:	40000400 	.word	0x40000400
 800aa64:	40000800 	.word	0x40000800
 800aa68:	40000c00 	.word	0x40000c00
 800aa6c:	40010400 	.word	0x40010400
 800aa70:	40014000 	.word	0x40014000
 800aa74:	40014400 	.word	0x40014400
 800aa78:	40014800 	.word	0x40014800
 800aa7c:	40001800 	.word	0x40001800
 800aa80:	40001c00 	.word	0x40001c00
 800aa84:	40002000 	.word	0x40002000

0800aa88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b087      	sub	sp, #28
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6a1b      	ldr	r3, [r3, #32]
 800aa96:	f023 0201 	bic.w	r2, r3, #1
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6a1b      	ldr	r3, [r3, #32]
 800aaa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	699b      	ldr	r3, [r3, #24]
 800aaae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f023 0303 	bic.w	r3, r3, #3
 800aabe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	68fa      	ldr	r2, [r7, #12]
 800aac6:	4313      	orrs	r3, r2
 800aac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	f023 0302 	bic.w	r3, r3, #2
 800aad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	689b      	ldr	r3, [r3, #8]
 800aad6:	697a      	ldr	r2, [r7, #20]
 800aad8:	4313      	orrs	r3, r2
 800aada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	4a20      	ldr	r2, [pc, #128]	; (800ab60 <TIM_OC1_SetConfig+0xd8>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d003      	beq.n	800aaec <TIM_OC1_SetConfig+0x64>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	4a1f      	ldr	r2, [pc, #124]	; (800ab64 <TIM_OC1_SetConfig+0xdc>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d10c      	bne.n	800ab06 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	f023 0308 	bic.w	r3, r3, #8
 800aaf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	697a      	ldr	r2, [r7, #20]
 800aafa:	4313      	orrs	r3, r2
 800aafc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	f023 0304 	bic.w	r3, r3, #4
 800ab04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4a15      	ldr	r2, [pc, #84]	; (800ab60 <TIM_OC1_SetConfig+0xd8>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d003      	beq.n	800ab16 <TIM_OC1_SetConfig+0x8e>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	4a14      	ldr	r2, [pc, #80]	; (800ab64 <TIM_OC1_SetConfig+0xdc>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d111      	bne.n	800ab3a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	695b      	ldr	r3, [r3, #20]
 800ab2a:	693a      	ldr	r2, [r7, #16]
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	699b      	ldr	r3, [r3, #24]
 800ab34:	693a      	ldr	r2, [r7, #16]
 800ab36:	4313      	orrs	r3, r2
 800ab38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	693a      	ldr	r2, [r7, #16]
 800ab3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	68fa      	ldr	r2, [r7, #12]
 800ab44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	685a      	ldr	r2, [r3, #4]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	697a      	ldr	r2, [r7, #20]
 800ab52:	621a      	str	r2, [r3, #32]
}
 800ab54:	bf00      	nop
 800ab56:	371c      	adds	r7, #28
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr
 800ab60:	40010000 	.word	0x40010000
 800ab64:	40010400 	.word	0x40010400

0800ab68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b087      	sub	sp, #28
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6a1b      	ldr	r3, [r3, #32]
 800ab76:	f023 0210 	bic.w	r2, r3, #16
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6a1b      	ldr	r3, [r3, #32]
 800ab82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	699b      	ldr	r3, [r3, #24]
 800ab8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	021b      	lsls	r3, r3, #8
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	4313      	orrs	r3, r2
 800abaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	f023 0320 	bic.w	r3, r3, #32
 800abb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	011b      	lsls	r3, r3, #4
 800abba:	697a      	ldr	r2, [r7, #20]
 800abbc:	4313      	orrs	r3, r2
 800abbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	4a22      	ldr	r2, [pc, #136]	; (800ac4c <TIM_OC2_SetConfig+0xe4>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d003      	beq.n	800abd0 <TIM_OC2_SetConfig+0x68>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	4a21      	ldr	r2, [pc, #132]	; (800ac50 <TIM_OC2_SetConfig+0xe8>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d10d      	bne.n	800abec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	68db      	ldr	r3, [r3, #12]
 800abdc:	011b      	lsls	r3, r3, #4
 800abde:	697a      	ldr	r2, [r7, #20]
 800abe0:	4313      	orrs	r3, r2
 800abe2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	4a17      	ldr	r2, [pc, #92]	; (800ac4c <TIM_OC2_SetConfig+0xe4>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d003      	beq.n	800abfc <TIM_OC2_SetConfig+0x94>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	4a16      	ldr	r2, [pc, #88]	; (800ac50 <TIM_OC2_SetConfig+0xe8>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d113      	bne.n	800ac24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ac02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ac0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	695b      	ldr	r3, [r3, #20]
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	693a      	ldr	r2, [r7, #16]
 800ac14:	4313      	orrs	r3, r2
 800ac16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	699b      	ldr	r3, [r3, #24]
 800ac1c:	009b      	lsls	r3, r3, #2
 800ac1e:	693a      	ldr	r2, [r7, #16]
 800ac20:	4313      	orrs	r3, r2
 800ac22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	693a      	ldr	r2, [r7, #16]
 800ac28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	68fa      	ldr	r2, [r7, #12]
 800ac2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	685a      	ldr	r2, [r3, #4]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	697a      	ldr	r2, [r7, #20]
 800ac3c:	621a      	str	r2, [r3, #32]
}
 800ac3e:	bf00      	nop
 800ac40:	371c      	adds	r7, #28
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr
 800ac4a:	bf00      	nop
 800ac4c:	40010000 	.word	0x40010000
 800ac50:	40010400 	.word	0x40010400

0800ac54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b087      	sub	sp, #28
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6a1b      	ldr	r3, [r3, #32]
 800ac62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6a1b      	ldr	r3, [r3, #32]
 800ac6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	69db      	ldr	r3, [r3, #28]
 800ac7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f023 0303 	bic.w	r3, r3, #3
 800ac8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	4313      	orrs	r3, r2
 800ac94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ac9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	689b      	ldr	r3, [r3, #8]
 800aca2:	021b      	lsls	r3, r3, #8
 800aca4:	697a      	ldr	r2, [r7, #20]
 800aca6:	4313      	orrs	r3, r2
 800aca8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4a21      	ldr	r2, [pc, #132]	; (800ad34 <TIM_OC3_SetConfig+0xe0>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d003      	beq.n	800acba <TIM_OC3_SetConfig+0x66>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4a20      	ldr	r2, [pc, #128]	; (800ad38 <TIM_OC3_SetConfig+0xe4>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d10d      	bne.n	800acd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800acc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	68db      	ldr	r3, [r3, #12]
 800acc6:	021b      	lsls	r3, r3, #8
 800acc8:	697a      	ldr	r2, [r7, #20]
 800acca:	4313      	orrs	r3, r2
 800accc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800acd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	4a16      	ldr	r2, [pc, #88]	; (800ad34 <TIM_OC3_SetConfig+0xe0>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d003      	beq.n	800ace6 <TIM_OC3_SetConfig+0x92>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	4a15      	ldr	r2, [pc, #84]	; (800ad38 <TIM_OC3_SetConfig+0xe4>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d113      	bne.n	800ad0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800acf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	695b      	ldr	r3, [r3, #20]
 800acfa:	011b      	lsls	r3, r3, #4
 800acfc:	693a      	ldr	r2, [r7, #16]
 800acfe:	4313      	orrs	r3, r2
 800ad00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	699b      	ldr	r3, [r3, #24]
 800ad06:	011b      	lsls	r3, r3, #4
 800ad08:	693a      	ldr	r2, [r7, #16]
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	693a      	ldr	r2, [r7, #16]
 800ad12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	68fa      	ldr	r2, [r7, #12]
 800ad18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	685a      	ldr	r2, [r3, #4]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	697a      	ldr	r2, [r7, #20]
 800ad26:	621a      	str	r2, [r3, #32]
}
 800ad28:	bf00      	nop
 800ad2a:	371c      	adds	r7, #28
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr
 800ad34:	40010000 	.word	0x40010000
 800ad38:	40010400 	.word	0x40010400

0800ad3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b087      	sub	sp, #28
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6a1b      	ldr	r3, [r3, #32]
 800ad4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6a1b      	ldr	r3, [r3, #32]
 800ad56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	69db      	ldr	r3, [r3, #28]
 800ad62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	021b      	lsls	r3, r3, #8
 800ad7a:	68fa      	ldr	r2, [r7, #12]
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ad86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	689b      	ldr	r3, [r3, #8]
 800ad8c:	031b      	lsls	r3, r3, #12
 800ad8e:	693a      	ldr	r2, [r7, #16]
 800ad90:	4313      	orrs	r3, r2
 800ad92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	4a12      	ldr	r2, [pc, #72]	; (800ade0 <TIM_OC4_SetConfig+0xa4>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d003      	beq.n	800ada4 <TIM_OC4_SetConfig+0x68>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	4a11      	ldr	r2, [pc, #68]	; (800ade4 <TIM_OC4_SetConfig+0xa8>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d109      	bne.n	800adb8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800adaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	695b      	ldr	r3, [r3, #20]
 800adb0:	019b      	lsls	r3, r3, #6
 800adb2:	697a      	ldr	r2, [r7, #20]
 800adb4:	4313      	orrs	r3, r2
 800adb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	697a      	ldr	r2, [r7, #20]
 800adbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	68fa      	ldr	r2, [r7, #12]
 800adc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	685a      	ldr	r2, [r3, #4]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	693a      	ldr	r2, [r7, #16]
 800add0:	621a      	str	r2, [r3, #32]
}
 800add2:	bf00      	nop
 800add4:	371c      	adds	r7, #28
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr
 800adde:	bf00      	nop
 800ade0:	40010000 	.word	0x40010000
 800ade4:	40010400 	.word	0x40010400

0800ade8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ade8:	b480      	push	{r7}
 800adea:	b087      	sub	sp, #28
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	6a1b      	ldr	r3, [r3, #32]
 800adf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	6a1b      	ldr	r3, [r3, #32]
 800adfe:	f023 0201 	bic.w	r2, r3, #1
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	699b      	ldr	r3, [r3, #24]
 800ae0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	011b      	lsls	r3, r3, #4
 800ae18:	693a      	ldr	r2, [r7, #16]
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	f023 030a 	bic.w	r3, r3, #10
 800ae24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ae26:	697a      	ldr	r2, [r7, #20]
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	693a      	ldr	r2, [r7, #16]
 800ae32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	697a      	ldr	r2, [r7, #20]
 800ae38:	621a      	str	r2, [r3, #32]
}
 800ae3a:	bf00      	nop
 800ae3c:	371c      	adds	r7, #28
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr

0800ae46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae46:	b480      	push	{r7}
 800ae48:	b087      	sub	sp, #28
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	60f8      	str	r0, [r7, #12]
 800ae4e:	60b9      	str	r1, [r7, #8]
 800ae50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	6a1b      	ldr	r3, [r3, #32]
 800ae56:	f023 0210 	bic.w	r2, r3, #16
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	699b      	ldr	r3, [r3, #24]
 800ae62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	6a1b      	ldr	r3, [r3, #32]
 800ae68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	031b      	lsls	r3, r3, #12
 800ae76:	697a      	ldr	r2, [r7, #20]
 800ae78:	4313      	orrs	r3, r2
 800ae7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ae82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	011b      	lsls	r3, r3, #4
 800ae88:	693a      	ldr	r2, [r7, #16]
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	697a      	ldr	r2, [r7, #20]
 800ae92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	693a      	ldr	r2, [r7, #16]
 800ae98:	621a      	str	r2, [r3, #32]
}
 800ae9a:	bf00      	nop
 800ae9c:	371c      	adds	r7, #28
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr

0800aea6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aea6:	b480      	push	{r7}
 800aea8:	b085      	sub	sp, #20
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
 800aeae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	689b      	ldr	r3, [r3, #8]
 800aeb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aebc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aebe:	683a      	ldr	r2, [r7, #0]
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	4313      	orrs	r3, r2
 800aec4:	f043 0307 	orr.w	r3, r3, #7
 800aec8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	609a      	str	r2, [r3, #8]
}
 800aed0:	bf00      	nop
 800aed2:	3714      	adds	r7, #20
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr

0800aedc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aedc:	b480      	push	{r7}
 800aede:	b087      	sub	sp, #28
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	607a      	str	r2, [r7, #4]
 800aee8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	689b      	ldr	r3, [r3, #8]
 800aeee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aef6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	021a      	lsls	r2, r3, #8
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	431a      	orrs	r2, r3
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	4313      	orrs	r3, r2
 800af04:	697a      	ldr	r2, [r7, #20]
 800af06:	4313      	orrs	r3, r2
 800af08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	697a      	ldr	r2, [r7, #20]
 800af0e:	609a      	str	r2, [r3, #8]
}
 800af10:	bf00      	nop
 800af12:	371c      	adds	r7, #28
 800af14:	46bd      	mov	sp, r7
 800af16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1a:	4770      	bx	lr

0800af1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b085      	sub	sp, #20
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	d101      	bne.n	800af34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af30:	2302      	movs	r3, #2
 800af32:	e05a      	b.n	800afea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2201      	movs	r2, #1
 800af38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2202      	movs	r2, #2
 800af40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	685b      	ldr	r3, [r3, #4]
 800af4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	68fa      	ldr	r2, [r7, #12]
 800af62:	4313      	orrs	r3, r2
 800af64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	68fa      	ldr	r2, [r7, #12]
 800af6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a21      	ldr	r2, [pc, #132]	; (800aff8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d022      	beq.n	800afbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af80:	d01d      	beq.n	800afbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4a1d      	ldr	r2, [pc, #116]	; (800affc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d018      	beq.n	800afbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a1b      	ldr	r2, [pc, #108]	; (800b000 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d013      	beq.n	800afbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4a1a      	ldr	r2, [pc, #104]	; (800b004 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d00e      	beq.n	800afbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4a18      	ldr	r2, [pc, #96]	; (800b008 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d009      	beq.n	800afbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4a17      	ldr	r2, [pc, #92]	; (800b00c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d004      	beq.n	800afbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4a15      	ldr	r2, [pc, #84]	; (800b010 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d10c      	bne.n	800afd8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	68ba      	ldr	r2, [r7, #8]
 800afcc:	4313      	orrs	r3, r2
 800afce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	68ba      	ldr	r2, [r7, #8]
 800afd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2201      	movs	r2, #1
 800afdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2200      	movs	r2, #0
 800afe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800afe8:	2300      	movs	r3, #0
}
 800afea:	4618      	mov	r0, r3
 800afec:	3714      	adds	r7, #20
 800afee:	46bd      	mov	sp, r7
 800aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff4:	4770      	bx	lr
 800aff6:	bf00      	nop
 800aff8:	40010000 	.word	0x40010000
 800affc:	40000400 	.word	0x40000400
 800b000:	40000800 	.word	0x40000800
 800b004:	40000c00 	.word	0x40000c00
 800b008:	40010400 	.word	0x40010400
 800b00c:	40014000 	.word	0x40014000
 800b010:	40001800 	.word	0x40001800

0800b014 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b014:	b480      	push	{r7}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b01c:	bf00      	nop
 800b01e:	370c      	adds	r7, #12
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr

0800b028 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b028:	b480      	push	{r7}
 800b02a:	b083      	sub	sp, #12
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b030:	bf00      	nop
 800b032:	370c      	adds	r7, #12
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d101      	bne.n	800b04e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b04a:	2301      	movs	r3, #1
 800b04c:	e03f      	b.n	800b0ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b054:	b2db      	uxtb	r3, r3
 800b056:	2b00      	cmp	r3, #0
 800b058:	d106      	bne.n	800b068 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2200      	movs	r2, #0
 800b05e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f7f7 fb3e 	bl	80026e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2224      	movs	r2, #36	; 0x24
 800b06c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	68da      	ldr	r2, [r3, #12]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b07e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f000 f9cb 	bl	800b41c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	691a      	ldr	r2, [r3, #16]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b094:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	695a      	ldr	r2, [r3, #20]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b0a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	68da      	ldr	r2, [r3, #12]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b0b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2220      	movs	r2, #32
 800b0c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2220      	movs	r2, #32
 800b0c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b0cc:	2300      	movs	r3, #0
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3708      	adds	r7, #8
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}

0800b0d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b0d6:	b580      	push	{r7, lr}
 800b0d8:	b08a      	sub	sp, #40	; 0x28
 800b0da:	af02      	add	r7, sp, #8
 800b0dc:	60f8      	str	r0, [r7, #12]
 800b0de:	60b9      	str	r1, [r7, #8]
 800b0e0:	603b      	str	r3, [r7, #0]
 800b0e2:	4613      	mov	r3, r2
 800b0e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	2b20      	cmp	r3, #32
 800b0f4:	d17c      	bne.n	800b1f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d002      	beq.n	800b102 <HAL_UART_Transmit+0x2c>
 800b0fc:	88fb      	ldrh	r3, [r7, #6]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d101      	bne.n	800b106 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b102:	2301      	movs	r3, #1
 800b104:	e075      	b.n	800b1f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d101      	bne.n	800b114 <HAL_UART_Transmit+0x3e>
 800b110:	2302      	movs	r3, #2
 800b112:	e06e      	b.n	800b1f2 <HAL_UART_Transmit+0x11c>
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2201      	movs	r2, #1
 800b118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2200      	movs	r2, #0
 800b120:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2221      	movs	r2, #33	; 0x21
 800b126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b12a:	f7fa f9bd 	bl	80054a8 <HAL_GetTick>
 800b12e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	88fa      	ldrh	r2, [r7, #6]
 800b134:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	88fa      	ldrh	r2, [r7, #6]
 800b13a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	689b      	ldr	r3, [r3, #8]
 800b140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b144:	d108      	bne.n	800b158 <HAL_UART_Transmit+0x82>
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	691b      	ldr	r3, [r3, #16]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d104      	bne.n	800b158 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b14e:	2300      	movs	r3, #0
 800b150:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	61bb      	str	r3, [r7, #24]
 800b156:	e003      	b.n	800b160 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b15c:	2300      	movs	r3, #0
 800b15e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2200      	movs	r2, #0
 800b164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b168:	e02a      	b.n	800b1c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	9300      	str	r3, [sp, #0]
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	2200      	movs	r2, #0
 800b172:	2180      	movs	r1, #128	; 0x80
 800b174:	68f8      	ldr	r0, [r7, #12]
 800b176:	f000 f8e2 	bl	800b33e <UART_WaitOnFlagUntilTimeout>
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d001      	beq.n	800b184 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b180:	2303      	movs	r3, #3
 800b182:	e036      	b.n	800b1f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b184:	69fb      	ldr	r3, [r7, #28]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d10b      	bne.n	800b1a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b18a:	69bb      	ldr	r3, [r7, #24]
 800b18c:	881b      	ldrh	r3, [r3, #0]
 800b18e:	461a      	mov	r2, r3
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b198:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b19a:	69bb      	ldr	r3, [r7, #24]
 800b19c:	3302      	adds	r3, #2
 800b19e:	61bb      	str	r3, [r7, #24]
 800b1a0:	e007      	b.n	800b1b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b1a2:	69fb      	ldr	r3, [r7, #28]
 800b1a4:	781a      	ldrb	r2, [r3, #0]
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b1ac:	69fb      	ldr	r3, [r7, #28]
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b1b6:	b29b      	uxth	r3, r3
 800b1b8:	3b01      	subs	r3, #1
 800b1ba:	b29a      	uxth	r2, r3
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d1cf      	bne.n	800b16a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	9300      	str	r3, [sp, #0]
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	2140      	movs	r1, #64	; 0x40
 800b1d4:	68f8      	ldr	r0, [r7, #12]
 800b1d6:	f000 f8b2 	bl	800b33e <UART_WaitOnFlagUntilTimeout>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d001      	beq.n	800b1e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b1e0:	2303      	movs	r3, #3
 800b1e2:	e006      	b.n	800b1f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2220      	movs	r2, #32
 800b1e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	e000      	b.n	800b1f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b1f0:	2302      	movs	r3, #2
  }
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3720      	adds	r7, #32
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}

0800b1fa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	b08a      	sub	sp, #40	; 0x28
 800b1fe:	af02      	add	r7, sp, #8
 800b200:	60f8      	str	r0, [r7, #12]
 800b202:	60b9      	str	r1, [r7, #8]
 800b204:	603b      	str	r3, [r7, #0]
 800b206:	4613      	mov	r3, r2
 800b208:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b20a:	2300      	movs	r3, #0
 800b20c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b214:	b2db      	uxtb	r3, r3
 800b216:	2b20      	cmp	r3, #32
 800b218:	f040 808c 	bne.w	800b334 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d002      	beq.n	800b228 <HAL_UART_Receive+0x2e>
 800b222:	88fb      	ldrh	r3, [r7, #6]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d101      	bne.n	800b22c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800b228:	2301      	movs	r3, #1
 800b22a:	e084      	b.n	800b336 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b232:	2b01      	cmp	r3, #1
 800b234:	d101      	bne.n	800b23a <HAL_UART_Receive+0x40>
 800b236:	2302      	movs	r3, #2
 800b238:	e07d      	b.n	800b336 <HAL_UART_Receive+0x13c>
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2201      	movs	r2, #1
 800b23e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2200      	movs	r2, #0
 800b246:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2222      	movs	r2, #34	; 0x22
 800b24c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2200      	movs	r2, #0
 800b254:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b256:	f7fa f927 	bl	80054a8 <HAL_GetTick>
 800b25a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	88fa      	ldrh	r2, [r7, #6]
 800b260:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	88fa      	ldrh	r2, [r7, #6]
 800b266:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	689b      	ldr	r3, [r3, #8]
 800b26c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b270:	d108      	bne.n	800b284 <HAL_UART_Receive+0x8a>
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	691b      	ldr	r3, [r3, #16]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d104      	bne.n	800b284 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800b27a:	2300      	movs	r3, #0
 800b27c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	61bb      	str	r3, [r7, #24]
 800b282:	e003      	b.n	800b28c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b288:	2300      	movs	r3, #0
 800b28a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2200      	movs	r2, #0
 800b290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800b294:	e043      	b.n	800b31e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	9300      	str	r3, [sp, #0]
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	2200      	movs	r2, #0
 800b29e:	2120      	movs	r1, #32
 800b2a0:	68f8      	ldr	r0, [r7, #12]
 800b2a2:	f000 f84c 	bl	800b33e <UART_WaitOnFlagUntilTimeout>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d001      	beq.n	800b2b0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800b2ac:	2303      	movs	r3, #3
 800b2ae:	e042      	b.n	800b336 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800b2b0:	69fb      	ldr	r3, [r7, #28]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d10c      	bne.n	800b2d0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2c2:	b29a      	uxth	r2, r3
 800b2c4:	69bb      	ldr	r3, [r7, #24]
 800b2c6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b2c8:	69bb      	ldr	r3, [r7, #24]
 800b2ca:	3302      	adds	r3, #2
 800b2cc:	61bb      	str	r3, [r7, #24]
 800b2ce:	e01f      	b.n	800b310 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	689b      	ldr	r3, [r3, #8]
 800b2d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2d8:	d007      	beq.n	800b2ea <HAL_UART_Receive+0xf0>
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	689b      	ldr	r3, [r3, #8]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d10a      	bne.n	800b2f8 <HAL_UART_Receive+0xfe>
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	691b      	ldr	r3, [r3, #16]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d106      	bne.n	800b2f8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	b2da      	uxtb	r2, r3
 800b2f2:	69fb      	ldr	r3, [r7, #28]
 800b2f4:	701a      	strb	r2, [r3, #0]
 800b2f6:	e008      	b.n	800b30a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b304:	b2da      	uxtb	r2, r3
 800b306:	69fb      	ldr	r3, [r7, #28]
 800b308:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800b30a:	69fb      	ldr	r3, [r7, #28]
 800b30c:	3301      	adds	r3, #1
 800b30e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b314:	b29b      	uxth	r3, r3
 800b316:	3b01      	subs	r3, #1
 800b318:	b29a      	uxth	r2, r3
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b322:	b29b      	uxth	r3, r3
 800b324:	2b00      	cmp	r3, #0
 800b326:	d1b6      	bne.n	800b296 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2220      	movs	r2, #32
 800b32c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800b330:	2300      	movs	r3, #0
 800b332:	e000      	b.n	800b336 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800b334:	2302      	movs	r3, #2
  }
}
 800b336:	4618      	mov	r0, r3
 800b338:	3720      	adds	r7, #32
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}

0800b33e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b33e:	b580      	push	{r7, lr}
 800b340:	b090      	sub	sp, #64	; 0x40
 800b342:	af00      	add	r7, sp, #0
 800b344:	60f8      	str	r0, [r7, #12]
 800b346:	60b9      	str	r1, [r7, #8]
 800b348:	603b      	str	r3, [r7, #0]
 800b34a:	4613      	mov	r3, r2
 800b34c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b34e:	e050      	b.n	800b3f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b352:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b356:	d04c      	beq.n	800b3f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d007      	beq.n	800b36e <UART_WaitOnFlagUntilTimeout+0x30>
 800b35e:	f7fa f8a3 	bl	80054a8 <HAL_GetTick>
 800b362:	4602      	mov	r2, r0
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	1ad3      	subs	r3, r2, r3
 800b368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d241      	bcs.n	800b3f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	330c      	adds	r3, #12
 800b374:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b378:	e853 3f00 	ldrex	r3, [r3]
 800b37c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b380:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b384:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	330c      	adds	r3, #12
 800b38c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b38e:	637a      	str	r2, [r7, #52]	; 0x34
 800b390:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b392:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b394:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b396:	e841 2300 	strex	r3, r2, [r1]
 800b39a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d1e5      	bne.n	800b36e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	3314      	adds	r3, #20
 800b3a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	e853 3f00 	ldrex	r3, [r3]
 800b3b0:	613b      	str	r3, [r7, #16]
   return(result);
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	f023 0301 	bic.w	r3, r3, #1
 800b3b8:	63bb      	str	r3, [r7, #56]	; 0x38
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	3314      	adds	r3, #20
 800b3c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3c2:	623a      	str	r2, [r7, #32]
 800b3c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c6:	69f9      	ldr	r1, [r7, #28]
 800b3c8:	6a3a      	ldr	r2, [r7, #32]
 800b3ca:	e841 2300 	strex	r3, r2, [r1]
 800b3ce:	61bb      	str	r3, [r7, #24]
   return(result);
 800b3d0:	69bb      	ldr	r3, [r7, #24]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d1e5      	bne.n	800b3a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2220      	movs	r2, #32
 800b3da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2220      	movs	r2, #32
 800b3e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b3ee:	2303      	movs	r3, #3
 800b3f0:	e00f      	b.n	800b412 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	681a      	ldr	r2, [r3, #0]
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	4013      	ands	r3, r2
 800b3fc:	68ba      	ldr	r2, [r7, #8]
 800b3fe:	429a      	cmp	r2, r3
 800b400:	bf0c      	ite	eq
 800b402:	2301      	moveq	r3, #1
 800b404:	2300      	movne	r3, #0
 800b406:	b2db      	uxtb	r3, r3
 800b408:	461a      	mov	r2, r3
 800b40a:	79fb      	ldrb	r3, [r7, #7]
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d09f      	beq.n	800b350 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b410:	2300      	movs	r3, #0
}
 800b412:	4618      	mov	r0, r3
 800b414:	3740      	adds	r7, #64	; 0x40
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
	...

0800b41c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b420:	b09f      	sub	sp, #124	; 0x7c
 800b422:	af00      	add	r7, sp, #0
 800b424:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	691b      	ldr	r3, [r3, #16]
 800b42c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b432:	68d9      	ldr	r1, [r3, #12]
 800b434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b436:	681a      	ldr	r2, [r3, #0]
 800b438:	ea40 0301 	orr.w	r3, r0, r1
 800b43c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b43e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b440:	689a      	ldr	r2, [r3, #8]
 800b442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b444:	691b      	ldr	r3, [r3, #16]
 800b446:	431a      	orrs	r2, r3
 800b448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b44a:	695b      	ldr	r3, [r3, #20]
 800b44c:	431a      	orrs	r2, r3
 800b44e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b450:	69db      	ldr	r3, [r3, #28]
 800b452:	4313      	orrs	r3, r2
 800b454:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800b456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	68db      	ldr	r3, [r3, #12]
 800b45c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b460:	f021 010c 	bic.w	r1, r1, #12
 800b464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b466:	681a      	ldr	r2, [r3, #0]
 800b468:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b46a:	430b      	orrs	r3, r1
 800b46c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b46e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	695b      	ldr	r3, [r3, #20]
 800b474:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b47a:	6999      	ldr	r1, [r3, #24]
 800b47c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	ea40 0301 	orr.w	r3, r0, r1
 800b484:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	4bc5      	ldr	r3, [pc, #788]	; (800b7a0 <UART_SetConfig+0x384>)
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d004      	beq.n	800b49a <UART_SetConfig+0x7e>
 800b490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b492:	681a      	ldr	r2, [r3, #0]
 800b494:	4bc3      	ldr	r3, [pc, #780]	; (800b7a4 <UART_SetConfig+0x388>)
 800b496:	429a      	cmp	r2, r3
 800b498:	d103      	bne.n	800b4a2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b49a:	f7fd f9c3 	bl	8008824 <HAL_RCC_GetPCLK2Freq>
 800b49e:	6778      	str	r0, [r7, #116]	; 0x74
 800b4a0:	e002      	b.n	800b4a8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b4a2:	f7fd f9ab 	bl	80087fc <HAL_RCC_GetPCLK1Freq>
 800b4a6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b4a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4aa:	69db      	ldr	r3, [r3, #28]
 800b4ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4b0:	f040 80b6 	bne.w	800b620 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b4b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b4b6:	461c      	mov	r4, r3
 800b4b8:	f04f 0500 	mov.w	r5, #0
 800b4bc:	4622      	mov	r2, r4
 800b4be:	462b      	mov	r3, r5
 800b4c0:	1891      	adds	r1, r2, r2
 800b4c2:	6439      	str	r1, [r7, #64]	; 0x40
 800b4c4:	415b      	adcs	r3, r3
 800b4c6:	647b      	str	r3, [r7, #68]	; 0x44
 800b4c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b4cc:	1912      	adds	r2, r2, r4
 800b4ce:	eb45 0303 	adc.w	r3, r5, r3
 800b4d2:	f04f 0000 	mov.w	r0, #0
 800b4d6:	f04f 0100 	mov.w	r1, #0
 800b4da:	00d9      	lsls	r1, r3, #3
 800b4dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b4e0:	00d0      	lsls	r0, r2, #3
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	1911      	adds	r1, r2, r4
 800b4e8:	6639      	str	r1, [r7, #96]	; 0x60
 800b4ea:	416b      	adcs	r3, r5
 800b4ec:	667b      	str	r3, [r7, #100]	; 0x64
 800b4ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	f04f 0300 	mov.w	r3, #0
 800b4f8:	1891      	adds	r1, r2, r2
 800b4fa:	63b9      	str	r1, [r7, #56]	; 0x38
 800b4fc:	415b      	adcs	r3, r3
 800b4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b500:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b504:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800b508:	f7f5 fbce 	bl	8000ca8 <__aeabi_uldivmod>
 800b50c:	4602      	mov	r2, r0
 800b50e:	460b      	mov	r3, r1
 800b510:	4ba5      	ldr	r3, [pc, #660]	; (800b7a8 <UART_SetConfig+0x38c>)
 800b512:	fba3 2302 	umull	r2, r3, r3, r2
 800b516:	095b      	lsrs	r3, r3, #5
 800b518:	011e      	lsls	r6, r3, #4
 800b51a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b51c:	461c      	mov	r4, r3
 800b51e:	f04f 0500 	mov.w	r5, #0
 800b522:	4622      	mov	r2, r4
 800b524:	462b      	mov	r3, r5
 800b526:	1891      	adds	r1, r2, r2
 800b528:	6339      	str	r1, [r7, #48]	; 0x30
 800b52a:	415b      	adcs	r3, r3
 800b52c:	637b      	str	r3, [r7, #52]	; 0x34
 800b52e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b532:	1912      	adds	r2, r2, r4
 800b534:	eb45 0303 	adc.w	r3, r5, r3
 800b538:	f04f 0000 	mov.w	r0, #0
 800b53c:	f04f 0100 	mov.w	r1, #0
 800b540:	00d9      	lsls	r1, r3, #3
 800b542:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b546:	00d0      	lsls	r0, r2, #3
 800b548:	4602      	mov	r2, r0
 800b54a:	460b      	mov	r3, r1
 800b54c:	1911      	adds	r1, r2, r4
 800b54e:	65b9      	str	r1, [r7, #88]	; 0x58
 800b550:	416b      	adcs	r3, r5
 800b552:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b556:	685b      	ldr	r3, [r3, #4]
 800b558:	461a      	mov	r2, r3
 800b55a:	f04f 0300 	mov.w	r3, #0
 800b55e:	1891      	adds	r1, r2, r2
 800b560:	62b9      	str	r1, [r7, #40]	; 0x28
 800b562:	415b      	adcs	r3, r3
 800b564:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b566:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b56a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800b56e:	f7f5 fb9b 	bl	8000ca8 <__aeabi_uldivmod>
 800b572:	4602      	mov	r2, r0
 800b574:	460b      	mov	r3, r1
 800b576:	4b8c      	ldr	r3, [pc, #560]	; (800b7a8 <UART_SetConfig+0x38c>)
 800b578:	fba3 1302 	umull	r1, r3, r3, r2
 800b57c:	095b      	lsrs	r3, r3, #5
 800b57e:	2164      	movs	r1, #100	; 0x64
 800b580:	fb01 f303 	mul.w	r3, r1, r3
 800b584:	1ad3      	subs	r3, r2, r3
 800b586:	00db      	lsls	r3, r3, #3
 800b588:	3332      	adds	r3, #50	; 0x32
 800b58a:	4a87      	ldr	r2, [pc, #540]	; (800b7a8 <UART_SetConfig+0x38c>)
 800b58c:	fba2 2303 	umull	r2, r3, r2, r3
 800b590:	095b      	lsrs	r3, r3, #5
 800b592:	005b      	lsls	r3, r3, #1
 800b594:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b598:	441e      	add	r6, r3
 800b59a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b59c:	4618      	mov	r0, r3
 800b59e:	f04f 0100 	mov.w	r1, #0
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	1894      	adds	r4, r2, r2
 800b5a8:	623c      	str	r4, [r7, #32]
 800b5aa:	415b      	adcs	r3, r3
 800b5ac:	627b      	str	r3, [r7, #36]	; 0x24
 800b5ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b5b2:	1812      	adds	r2, r2, r0
 800b5b4:	eb41 0303 	adc.w	r3, r1, r3
 800b5b8:	f04f 0400 	mov.w	r4, #0
 800b5bc:	f04f 0500 	mov.w	r5, #0
 800b5c0:	00dd      	lsls	r5, r3, #3
 800b5c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b5c6:	00d4      	lsls	r4, r2, #3
 800b5c8:	4622      	mov	r2, r4
 800b5ca:	462b      	mov	r3, r5
 800b5cc:	1814      	adds	r4, r2, r0
 800b5ce:	653c      	str	r4, [r7, #80]	; 0x50
 800b5d0:	414b      	adcs	r3, r1
 800b5d2:	657b      	str	r3, [r7, #84]	; 0x54
 800b5d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	461a      	mov	r2, r3
 800b5da:	f04f 0300 	mov.w	r3, #0
 800b5de:	1891      	adds	r1, r2, r2
 800b5e0:	61b9      	str	r1, [r7, #24]
 800b5e2:	415b      	adcs	r3, r3
 800b5e4:	61fb      	str	r3, [r7, #28]
 800b5e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b5ea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b5ee:	f7f5 fb5b 	bl	8000ca8 <__aeabi_uldivmod>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	4b6c      	ldr	r3, [pc, #432]	; (800b7a8 <UART_SetConfig+0x38c>)
 800b5f8:	fba3 1302 	umull	r1, r3, r3, r2
 800b5fc:	095b      	lsrs	r3, r3, #5
 800b5fe:	2164      	movs	r1, #100	; 0x64
 800b600:	fb01 f303 	mul.w	r3, r1, r3
 800b604:	1ad3      	subs	r3, r2, r3
 800b606:	00db      	lsls	r3, r3, #3
 800b608:	3332      	adds	r3, #50	; 0x32
 800b60a:	4a67      	ldr	r2, [pc, #412]	; (800b7a8 <UART_SetConfig+0x38c>)
 800b60c:	fba2 2303 	umull	r2, r3, r2, r3
 800b610:	095b      	lsrs	r3, r3, #5
 800b612:	f003 0207 	and.w	r2, r3, #7
 800b616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4432      	add	r2, r6
 800b61c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b61e:	e0b9      	b.n	800b794 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b620:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b622:	461c      	mov	r4, r3
 800b624:	f04f 0500 	mov.w	r5, #0
 800b628:	4622      	mov	r2, r4
 800b62a:	462b      	mov	r3, r5
 800b62c:	1891      	adds	r1, r2, r2
 800b62e:	6139      	str	r1, [r7, #16]
 800b630:	415b      	adcs	r3, r3
 800b632:	617b      	str	r3, [r7, #20]
 800b634:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b638:	1912      	adds	r2, r2, r4
 800b63a:	eb45 0303 	adc.w	r3, r5, r3
 800b63e:	f04f 0000 	mov.w	r0, #0
 800b642:	f04f 0100 	mov.w	r1, #0
 800b646:	00d9      	lsls	r1, r3, #3
 800b648:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b64c:	00d0      	lsls	r0, r2, #3
 800b64e:	4602      	mov	r2, r0
 800b650:	460b      	mov	r3, r1
 800b652:	eb12 0804 	adds.w	r8, r2, r4
 800b656:	eb43 0905 	adc.w	r9, r3, r5
 800b65a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	4618      	mov	r0, r3
 800b660:	f04f 0100 	mov.w	r1, #0
 800b664:	f04f 0200 	mov.w	r2, #0
 800b668:	f04f 0300 	mov.w	r3, #0
 800b66c:	008b      	lsls	r3, r1, #2
 800b66e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b672:	0082      	lsls	r2, r0, #2
 800b674:	4640      	mov	r0, r8
 800b676:	4649      	mov	r1, r9
 800b678:	f7f5 fb16 	bl	8000ca8 <__aeabi_uldivmod>
 800b67c:	4602      	mov	r2, r0
 800b67e:	460b      	mov	r3, r1
 800b680:	4b49      	ldr	r3, [pc, #292]	; (800b7a8 <UART_SetConfig+0x38c>)
 800b682:	fba3 2302 	umull	r2, r3, r3, r2
 800b686:	095b      	lsrs	r3, r3, #5
 800b688:	011e      	lsls	r6, r3, #4
 800b68a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b68c:	4618      	mov	r0, r3
 800b68e:	f04f 0100 	mov.w	r1, #0
 800b692:	4602      	mov	r2, r0
 800b694:	460b      	mov	r3, r1
 800b696:	1894      	adds	r4, r2, r2
 800b698:	60bc      	str	r4, [r7, #8]
 800b69a:	415b      	adcs	r3, r3
 800b69c:	60fb      	str	r3, [r7, #12]
 800b69e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b6a2:	1812      	adds	r2, r2, r0
 800b6a4:	eb41 0303 	adc.w	r3, r1, r3
 800b6a8:	f04f 0400 	mov.w	r4, #0
 800b6ac:	f04f 0500 	mov.w	r5, #0
 800b6b0:	00dd      	lsls	r5, r3, #3
 800b6b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b6b6:	00d4      	lsls	r4, r2, #3
 800b6b8:	4622      	mov	r2, r4
 800b6ba:	462b      	mov	r3, r5
 800b6bc:	1814      	adds	r4, r2, r0
 800b6be:	64bc      	str	r4, [r7, #72]	; 0x48
 800b6c0:	414b      	adcs	r3, r1
 800b6c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b6c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f04f 0100 	mov.w	r1, #0
 800b6ce:	f04f 0200 	mov.w	r2, #0
 800b6d2:	f04f 0300 	mov.w	r3, #0
 800b6d6:	008b      	lsls	r3, r1, #2
 800b6d8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b6dc:	0082      	lsls	r2, r0, #2
 800b6de:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b6e2:	f7f5 fae1 	bl	8000ca8 <__aeabi_uldivmod>
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	460b      	mov	r3, r1
 800b6ea:	4b2f      	ldr	r3, [pc, #188]	; (800b7a8 <UART_SetConfig+0x38c>)
 800b6ec:	fba3 1302 	umull	r1, r3, r3, r2
 800b6f0:	095b      	lsrs	r3, r3, #5
 800b6f2:	2164      	movs	r1, #100	; 0x64
 800b6f4:	fb01 f303 	mul.w	r3, r1, r3
 800b6f8:	1ad3      	subs	r3, r2, r3
 800b6fa:	011b      	lsls	r3, r3, #4
 800b6fc:	3332      	adds	r3, #50	; 0x32
 800b6fe:	4a2a      	ldr	r2, [pc, #168]	; (800b7a8 <UART_SetConfig+0x38c>)
 800b700:	fba2 2303 	umull	r2, r3, r2, r3
 800b704:	095b      	lsrs	r3, r3, #5
 800b706:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b70a:	441e      	add	r6, r3
 800b70c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b70e:	4618      	mov	r0, r3
 800b710:	f04f 0100 	mov.w	r1, #0
 800b714:	4602      	mov	r2, r0
 800b716:	460b      	mov	r3, r1
 800b718:	1894      	adds	r4, r2, r2
 800b71a:	603c      	str	r4, [r7, #0]
 800b71c:	415b      	adcs	r3, r3
 800b71e:	607b      	str	r3, [r7, #4]
 800b720:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b724:	1812      	adds	r2, r2, r0
 800b726:	eb41 0303 	adc.w	r3, r1, r3
 800b72a:	f04f 0400 	mov.w	r4, #0
 800b72e:	f04f 0500 	mov.w	r5, #0
 800b732:	00dd      	lsls	r5, r3, #3
 800b734:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b738:	00d4      	lsls	r4, r2, #3
 800b73a:	4622      	mov	r2, r4
 800b73c:	462b      	mov	r3, r5
 800b73e:	eb12 0a00 	adds.w	sl, r2, r0
 800b742:	eb43 0b01 	adc.w	fp, r3, r1
 800b746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	4618      	mov	r0, r3
 800b74c:	f04f 0100 	mov.w	r1, #0
 800b750:	f04f 0200 	mov.w	r2, #0
 800b754:	f04f 0300 	mov.w	r3, #0
 800b758:	008b      	lsls	r3, r1, #2
 800b75a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b75e:	0082      	lsls	r2, r0, #2
 800b760:	4650      	mov	r0, sl
 800b762:	4659      	mov	r1, fp
 800b764:	f7f5 faa0 	bl	8000ca8 <__aeabi_uldivmod>
 800b768:	4602      	mov	r2, r0
 800b76a:	460b      	mov	r3, r1
 800b76c:	4b0e      	ldr	r3, [pc, #56]	; (800b7a8 <UART_SetConfig+0x38c>)
 800b76e:	fba3 1302 	umull	r1, r3, r3, r2
 800b772:	095b      	lsrs	r3, r3, #5
 800b774:	2164      	movs	r1, #100	; 0x64
 800b776:	fb01 f303 	mul.w	r3, r1, r3
 800b77a:	1ad3      	subs	r3, r2, r3
 800b77c:	011b      	lsls	r3, r3, #4
 800b77e:	3332      	adds	r3, #50	; 0x32
 800b780:	4a09      	ldr	r2, [pc, #36]	; (800b7a8 <UART_SetConfig+0x38c>)
 800b782:	fba2 2303 	umull	r2, r3, r2, r3
 800b786:	095b      	lsrs	r3, r3, #5
 800b788:	f003 020f 	and.w	r2, r3, #15
 800b78c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4432      	add	r2, r6
 800b792:	609a      	str	r2, [r3, #8]
}
 800b794:	bf00      	nop
 800b796:	377c      	adds	r7, #124	; 0x7c
 800b798:	46bd      	mov	sp, r7
 800b79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b79e:	bf00      	nop
 800b7a0:	40011000 	.word	0x40011000
 800b7a4:	40011400 	.word	0x40011400
 800b7a8:	51eb851f 	.word	0x51eb851f

0800b7ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b087      	sub	sp, #28
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	60b9      	str	r1, [r7, #8]
 800b7b6:	4613      	mov	r3, r2
 800b7b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b7ba:	79fb      	ldrb	r3, [r7, #7]
 800b7bc:	2b02      	cmp	r3, #2
 800b7be:	d165      	bne.n	800b88c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	4a41      	ldr	r2, [pc, #260]	; (800b8c8 <USB_SetTurnaroundTime+0x11c>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d906      	bls.n	800b7d6 <USB_SetTurnaroundTime+0x2a>
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	4a40      	ldr	r2, [pc, #256]	; (800b8cc <USB_SetTurnaroundTime+0x120>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d202      	bcs.n	800b7d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b7d0:	230f      	movs	r3, #15
 800b7d2:	617b      	str	r3, [r7, #20]
 800b7d4:	e062      	b.n	800b89c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	4a3c      	ldr	r2, [pc, #240]	; (800b8cc <USB_SetTurnaroundTime+0x120>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d306      	bcc.n	800b7ec <USB_SetTurnaroundTime+0x40>
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	4a3b      	ldr	r2, [pc, #236]	; (800b8d0 <USB_SetTurnaroundTime+0x124>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d202      	bcs.n	800b7ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b7e6:	230e      	movs	r3, #14
 800b7e8:	617b      	str	r3, [r7, #20]
 800b7ea:	e057      	b.n	800b89c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	4a38      	ldr	r2, [pc, #224]	; (800b8d0 <USB_SetTurnaroundTime+0x124>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d306      	bcc.n	800b802 <USB_SetTurnaroundTime+0x56>
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	4a37      	ldr	r2, [pc, #220]	; (800b8d4 <USB_SetTurnaroundTime+0x128>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d202      	bcs.n	800b802 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b7fc:	230d      	movs	r3, #13
 800b7fe:	617b      	str	r3, [r7, #20]
 800b800:	e04c      	b.n	800b89c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	4a33      	ldr	r2, [pc, #204]	; (800b8d4 <USB_SetTurnaroundTime+0x128>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d306      	bcc.n	800b818 <USB_SetTurnaroundTime+0x6c>
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	4a32      	ldr	r2, [pc, #200]	; (800b8d8 <USB_SetTurnaroundTime+0x12c>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d802      	bhi.n	800b818 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b812:	230c      	movs	r3, #12
 800b814:	617b      	str	r3, [r7, #20]
 800b816:	e041      	b.n	800b89c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	4a2f      	ldr	r2, [pc, #188]	; (800b8d8 <USB_SetTurnaroundTime+0x12c>)
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d906      	bls.n	800b82e <USB_SetTurnaroundTime+0x82>
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	4a2e      	ldr	r2, [pc, #184]	; (800b8dc <USB_SetTurnaroundTime+0x130>)
 800b824:	4293      	cmp	r3, r2
 800b826:	d802      	bhi.n	800b82e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b828:	230b      	movs	r3, #11
 800b82a:	617b      	str	r3, [r7, #20]
 800b82c:	e036      	b.n	800b89c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	4a2a      	ldr	r2, [pc, #168]	; (800b8dc <USB_SetTurnaroundTime+0x130>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d906      	bls.n	800b844 <USB_SetTurnaroundTime+0x98>
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	4a29      	ldr	r2, [pc, #164]	; (800b8e0 <USB_SetTurnaroundTime+0x134>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d802      	bhi.n	800b844 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b83e:	230a      	movs	r3, #10
 800b840:	617b      	str	r3, [r7, #20]
 800b842:	e02b      	b.n	800b89c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	4a26      	ldr	r2, [pc, #152]	; (800b8e0 <USB_SetTurnaroundTime+0x134>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d906      	bls.n	800b85a <USB_SetTurnaroundTime+0xae>
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	4a25      	ldr	r2, [pc, #148]	; (800b8e4 <USB_SetTurnaroundTime+0x138>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d202      	bcs.n	800b85a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b854:	2309      	movs	r3, #9
 800b856:	617b      	str	r3, [r7, #20]
 800b858:	e020      	b.n	800b89c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	4a21      	ldr	r2, [pc, #132]	; (800b8e4 <USB_SetTurnaroundTime+0x138>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d306      	bcc.n	800b870 <USB_SetTurnaroundTime+0xc4>
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	4a20      	ldr	r2, [pc, #128]	; (800b8e8 <USB_SetTurnaroundTime+0x13c>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d802      	bhi.n	800b870 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b86a:	2308      	movs	r3, #8
 800b86c:	617b      	str	r3, [r7, #20]
 800b86e:	e015      	b.n	800b89c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	4a1d      	ldr	r2, [pc, #116]	; (800b8e8 <USB_SetTurnaroundTime+0x13c>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d906      	bls.n	800b886 <USB_SetTurnaroundTime+0xda>
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	4a1c      	ldr	r2, [pc, #112]	; (800b8ec <USB_SetTurnaroundTime+0x140>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d202      	bcs.n	800b886 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b880:	2307      	movs	r3, #7
 800b882:	617b      	str	r3, [r7, #20]
 800b884:	e00a      	b.n	800b89c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b886:	2306      	movs	r3, #6
 800b888:	617b      	str	r3, [r7, #20]
 800b88a:	e007      	b.n	800b89c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b88c:	79fb      	ldrb	r3, [r7, #7]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d102      	bne.n	800b898 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b892:	2309      	movs	r3, #9
 800b894:	617b      	str	r3, [r7, #20]
 800b896:	e001      	b.n	800b89c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b898:	2309      	movs	r3, #9
 800b89a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	68db      	ldr	r3, [r3, #12]
 800b8a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	68da      	ldr	r2, [r3, #12]
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	029b      	lsls	r3, r3, #10
 800b8b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b8b4:	431a      	orrs	r2, r3
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b8ba:	2300      	movs	r3, #0
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	371c      	adds	r7, #28
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr
 800b8c8:	00d8acbf 	.word	0x00d8acbf
 800b8cc:	00e4e1c0 	.word	0x00e4e1c0
 800b8d0:	00f42400 	.word	0x00f42400
 800b8d4:	01067380 	.word	0x01067380
 800b8d8:	011a499f 	.word	0x011a499f
 800b8dc:	01312cff 	.word	0x01312cff
 800b8e0:	014ca43f 	.word	0x014ca43f
 800b8e4:	016e3600 	.word	0x016e3600
 800b8e8:	01a6ab1f 	.word	0x01a6ab1f
 800b8ec:	01e84800 	.word	0x01e84800

0800b8f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b085      	sub	sp, #20
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	019b      	lsls	r3, r3, #6
 800b902:	f043 0220 	orr.w	r2, r3, #32
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	3301      	adds	r3, #1
 800b90e:	60fb      	str	r3, [r7, #12]
 800b910:	4a08      	ldr	r2, [pc, #32]	; (800b934 <USB_FlushTxFifo+0x44>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d901      	bls.n	800b91a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800b916:	2303      	movs	r3, #3
 800b918:	e006      	b.n	800b928 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	691b      	ldr	r3, [r3, #16]
 800b91e:	f003 0320 	and.w	r3, r3, #32
 800b922:	2b20      	cmp	r3, #32
 800b924:	d0f1      	beq.n	800b90a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b926:	2300      	movs	r3, #0
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3714      	adds	r7, #20
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr
 800b934:	00030d40 	.word	0x00030d40

0800b938 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b938:	b480      	push	{r7}
 800b93a:	b087      	sub	sp, #28
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b94a:	689b      	ldr	r3, [r3, #8]
 800b94c:	f003 0306 	and.w	r3, r3, #6
 800b950:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d102      	bne.n	800b95e <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b958:	2300      	movs	r3, #0
 800b95a:	75fb      	strb	r3, [r7, #23]
 800b95c:	e00a      	b.n	800b974 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2b02      	cmp	r3, #2
 800b962:	d002      	beq.n	800b96a <USB_GetDevSpeed+0x32>
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	2b06      	cmp	r3, #6
 800b968:	d102      	bne.n	800b970 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b96a:	2302      	movs	r3, #2
 800b96c:	75fb      	strb	r3, [r7, #23]
 800b96e:	e001      	b.n	800b974 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b970:	230f      	movs	r3, #15
 800b972:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b974:	7dfb      	ldrb	r3, [r7, #23]
}
 800b976:	4618      	mov	r0, r3
 800b978:	371c      	adds	r7, #28
 800b97a:	46bd      	mov	sp, r7
 800b97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b980:	4770      	bx	lr

0800b982 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b982:	b480      	push	{r7}
 800b984:	b085      	sub	sp, #20
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
 800b98a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	785b      	ldrb	r3, [r3, #1]
 800b99a:	2b01      	cmp	r3, #1
 800b99c:	d13a      	bne.n	800ba14 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9a4:	69da      	ldr	r2, [r3, #28]
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	f003 030f 	and.w	r3, r3, #15
 800b9ae:	2101      	movs	r1, #1
 800b9b0:	fa01 f303 	lsl.w	r3, r1, r3
 800b9b4:	b29b      	uxth	r3, r3
 800b9b6:	68f9      	ldr	r1, [r7, #12]
 800b9b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	015a      	lsls	r2, r3, #5
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	4413      	add	r3, r2
 800b9c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d155      	bne.n	800ba82 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	015a      	lsls	r2, r3, #5
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	4413      	add	r3, r2
 800b9de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9e2:	681a      	ldr	r2, [r3, #0]
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	689b      	ldr	r3, [r3, #8]
 800b9e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	78db      	ldrb	r3, [r3, #3]
 800b9f0:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b9f2:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	059b      	lsls	r3, r3, #22
 800b9f8:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	68ba      	ldr	r2, [r7, #8]
 800b9fe:	0151      	lsls	r1, r2, #5
 800ba00:	68fa      	ldr	r2, [r7, #12]
 800ba02:	440a      	add	r2, r1
 800ba04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba10:	6013      	str	r3, [r2, #0]
 800ba12:	e036      	b.n	800ba82 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba1a:	69da      	ldr	r2, [r3, #28]
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	781b      	ldrb	r3, [r3, #0]
 800ba20:	f003 030f 	and.w	r3, r3, #15
 800ba24:	2101      	movs	r1, #1
 800ba26:	fa01 f303 	lsl.w	r3, r1, r3
 800ba2a:	041b      	lsls	r3, r3, #16
 800ba2c:	68f9      	ldr	r1, [r7, #12]
 800ba2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba32:	4313      	orrs	r3, r2
 800ba34:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	015a      	lsls	r2, r3, #5
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	4413      	add	r3, r2
 800ba3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d11a      	bne.n	800ba82 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	015a      	lsls	r2, r3, #5
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	4413      	add	r3, r2
 800ba54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	78db      	ldrb	r3, [r3, #3]
 800ba66:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ba68:	430b      	orrs	r3, r1
 800ba6a:	4313      	orrs	r3, r2
 800ba6c:	68ba      	ldr	r2, [r7, #8]
 800ba6e:	0151      	lsls	r1, r2, #5
 800ba70:	68fa      	ldr	r2, [r7, #12]
 800ba72:	440a      	add	r2, r1
 800ba74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba80:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ba82:	2300      	movs	r3, #0
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3714      	adds	r7, #20
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8e:	4770      	bx	lr

0800ba90 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b08a      	sub	sp, #40	; 0x28
 800ba94:	af02      	add	r7, sp, #8
 800ba96:	60f8      	str	r0, [r7, #12]
 800ba98:	60b9      	str	r1, [r7, #8]
 800ba9a:	4613      	mov	r3, r2
 800ba9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	785b      	ldrb	r3, [r3, #1]
 800baac:	2b01      	cmp	r3, #1
 800baae:	f040 815c 	bne.w	800bd6a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	695b      	ldr	r3, [r3, #20]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d132      	bne.n	800bb20 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800baba:	69bb      	ldr	r3, [r7, #24]
 800babc:	015a      	lsls	r2, r3, #5
 800babe:	69fb      	ldr	r3, [r7, #28]
 800bac0:	4413      	add	r3, r2
 800bac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bac6:	691b      	ldr	r3, [r3, #16]
 800bac8:	69ba      	ldr	r2, [r7, #24]
 800baca:	0151      	lsls	r1, r2, #5
 800bacc:	69fa      	ldr	r2, [r7, #28]
 800bace:	440a      	add	r2, r1
 800bad0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bad4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bad8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800badc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bade:	69bb      	ldr	r3, [r7, #24]
 800bae0:	015a      	lsls	r2, r3, #5
 800bae2:	69fb      	ldr	r3, [r7, #28]
 800bae4:	4413      	add	r3, r2
 800bae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baea:	691b      	ldr	r3, [r3, #16]
 800baec:	69ba      	ldr	r2, [r7, #24]
 800baee:	0151      	lsls	r1, r2, #5
 800baf0:	69fa      	ldr	r2, [r7, #28]
 800baf2:	440a      	add	r2, r1
 800baf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800baf8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bafc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bafe:	69bb      	ldr	r3, [r7, #24]
 800bb00:	015a      	lsls	r2, r3, #5
 800bb02:	69fb      	ldr	r3, [r7, #28]
 800bb04:	4413      	add	r3, r2
 800bb06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb0a:	691b      	ldr	r3, [r3, #16]
 800bb0c:	69ba      	ldr	r2, [r7, #24]
 800bb0e:	0151      	lsls	r1, r2, #5
 800bb10:	69fa      	ldr	r2, [r7, #28]
 800bb12:	440a      	add	r2, r1
 800bb14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb18:	0cdb      	lsrs	r3, r3, #19
 800bb1a:	04db      	lsls	r3, r3, #19
 800bb1c:	6113      	str	r3, [r2, #16]
 800bb1e:	e074      	b.n	800bc0a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bb20:	69bb      	ldr	r3, [r7, #24]
 800bb22:	015a      	lsls	r2, r3, #5
 800bb24:	69fb      	ldr	r3, [r7, #28]
 800bb26:	4413      	add	r3, r2
 800bb28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb2c:	691b      	ldr	r3, [r3, #16]
 800bb2e:	69ba      	ldr	r2, [r7, #24]
 800bb30:	0151      	lsls	r1, r2, #5
 800bb32:	69fa      	ldr	r2, [r7, #28]
 800bb34:	440a      	add	r2, r1
 800bb36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb3a:	0cdb      	lsrs	r3, r3, #19
 800bb3c:	04db      	lsls	r3, r3, #19
 800bb3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bb40:	69bb      	ldr	r3, [r7, #24]
 800bb42:	015a      	lsls	r2, r3, #5
 800bb44:	69fb      	ldr	r3, [r7, #28]
 800bb46:	4413      	add	r3, r2
 800bb48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb4c:	691b      	ldr	r3, [r3, #16]
 800bb4e:	69ba      	ldr	r2, [r7, #24]
 800bb50:	0151      	lsls	r1, r2, #5
 800bb52:	69fa      	ldr	r2, [r7, #28]
 800bb54:	440a      	add	r2, r1
 800bb56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bb5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bb62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bb64:	69bb      	ldr	r3, [r7, #24]
 800bb66:	015a      	lsls	r2, r3, #5
 800bb68:	69fb      	ldr	r3, [r7, #28]
 800bb6a:	4413      	add	r3, r2
 800bb6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb70:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	6959      	ldr	r1, [r3, #20]
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	689b      	ldr	r3, [r3, #8]
 800bb7a:	440b      	add	r3, r1
 800bb7c:	1e59      	subs	r1, r3, #1
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	689b      	ldr	r3, [r3, #8]
 800bb82:	fbb1 f3f3 	udiv	r3, r1, r3
 800bb86:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bb88:	4b9d      	ldr	r3, [pc, #628]	; (800be00 <USB_EPStartXfer+0x370>)
 800bb8a:	400b      	ands	r3, r1
 800bb8c:	69b9      	ldr	r1, [r7, #24]
 800bb8e:	0148      	lsls	r0, r1, #5
 800bb90:	69f9      	ldr	r1, [r7, #28]
 800bb92:	4401      	add	r1, r0
 800bb94:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bb9c:	69bb      	ldr	r3, [r7, #24]
 800bb9e:	015a      	lsls	r2, r3, #5
 800bba0:	69fb      	ldr	r3, [r7, #28]
 800bba2:	4413      	add	r3, r2
 800bba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bba8:	691a      	ldr	r2, [r3, #16]
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	695b      	ldr	r3, [r3, #20]
 800bbae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bbb2:	69b9      	ldr	r1, [r7, #24]
 800bbb4:	0148      	lsls	r0, r1, #5
 800bbb6:	69f9      	ldr	r1, [r7, #28]
 800bbb8:	4401      	add	r1, r0
 800bbba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	78db      	ldrb	r3, [r3, #3]
 800bbc6:	2b01      	cmp	r3, #1
 800bbc8:	d11f      	bne.n	800bc0a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bbca:	69bb      	ldr	r3, [r7, #24]
 800bbcc:	015a      	lsls	r2, r3, #5
 800bbce:	69fb      	ldr	r3, [r7, #28]
 800bbd0:	4413      	add	r3, r2
 800bbd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbd6:	691b      	ldr	r3, [r3, #16]
 800bbd8:	69ba      	ldr	r2, [r7, #24]
 800bbda:	0151      	lsls	r1, r2, #5
 800bbdc:	69fa      	ldr	r2, [r7, #28]
 800bbde:	440a      	add	r2, r1
 800bbe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbe4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800bbe8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bbea:	69bb      	ldr	r3, [r7, #24]
 800bbec:	015a      	lsls	r2, r3, #5
 800bbee:	69fb      	ldr	r3, [r7, #28]
 800bbf0:	4413      	add	r3, r2
 800bbf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbf6:	691b      	ldr	r3, [r3, #16]
 800bbf8:	69ba      	ldr	r2, [r7, #24]
 800bbfa:	0151      	lsls	r1, r2, #5
 800bbfc:	69fa      	ldr	r2, [r7, #28]
 800bbfe:	440a      	add	r2, r1
 800bc00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bc08:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800bc0a:	79fb      	ldrb	r3, [r7, #7]
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d14b      	bne.n	800bca8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	691b      	ldr	r3, [r3, #16]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d009      	beq.n	800bc2c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bc18:	69bb      	ldr	r3, [r7, #24]
 800bc1a:	015a      	lsls	r2, r3, #5
 800bc1c:	69fb      	ldr	r3, [r7, #28]
 800bc1e:	4413      	add	r3, r2
 800bc20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc24:	461a      	mov	r2, r3
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	691b      	ldr	r3, [r3, #16]
 800bc2a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	78db      	ldrb	r3, [r3, #3]
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d128      	bne.n	800bc86 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bc34:	69fb      	ldr	r3, [r7, #28]
 800bc36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc3a:	689b      	ldr	r3, [r3, #8]
 800bc3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d110      	bne.n	800bc66 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bc44:	69bb      	ldr	r3, [r7, #24]
 800bc46:	015a      	lsls	r2, r3, #5
 800bc48:	69fb      	ldr	r3, [r7, #28]
 800bc4a:	4413      	add	r3, r2
 800bc4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	69ba      	ldr	r2, [r7, #24]
 800bc54:	0151      	lsls	r1, r2, #5
 800bc56:	69fa      	ldr	r2, [r7, #28]
 800bc58:	440a      	add	r2, r1
 800bc5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bc62:	6013      	str	r3, [r2, #0]
 800bc64:	e00f      	b.n	800bc86 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bc66:	69bb      	ldr	r3, [r7, #24]
 800bc68:	015a      	lsls	r2, r3, #5
 800bc6a:	69fb      	ldr	r3, [r7, #28]
 800bc6c:	4413      	add	r3, r2
 800bc6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	69ba      	ldr	r2, [r7, #24]
 800bc76:	0151      	lsls	r1, r2, #5
 800bc78:	69fa      	ldr	r2, [r7, #28]
 800bc7a:	440a      	add	r2, r1
 800bc7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc84:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bc86:	69bb      	ldr	r3, [r7, #24]
 800bc88:	015a      	lsls	r2, r3, #5
 800bc8a:	69fb      	ldr	r3, [r7, #28]
 800bc8c:	4413      	add	r3, r2
 800bc8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	69ba      	ldr	r2, [r7, #24]
 800bc96:	0151      	lsls	r1, r2, #5
 800bc98:	69fa      	ldr	r2, [r7, #28]
 800bc9a:	440a      	add	r2, r1
 800bc9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bca0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bca4:	6013      	str	r3, [r2, #0]
 800bca6:	e12f      	b.n	800bf08 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bca8:	69bb      	ldr	r3, [r7, #24]
 800bcaa:	015a      	lsls	r2, r3, #5
 800bcac:	69fb      	ldr	r3, [r7, #28]
 800bcae:	4413      	add	r3, r2
 800bcb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	69ba      	ldr	r2, [r7, #24]
 800bcb8:	0151      	lsls	r1, r2, #5
 800bcba:	69fa      	ldr	r2, [r7, #28]
 800bcbc:	440a      	add	r2, r1
 800bcbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcc2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bcc6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	78db      	ldrb	r3, [r3, #3]
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d015      	beq.n	800bcfc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	695b      	ldr	r3, [r3, #20]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	f000 8117 	beq.w	800bf08 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bcda:	69fb      	ldr	r3, [r7, #28]
 800bcdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	781b      	ldrb	r3, [r3, #0]
 800bce6:	f003 030f 	and.w	r3, r3, #15
 800bcea:	2101      	movs	r1, #1
 800bcec:	fa01 f303 	lsl.w	r3, r1, r3
 800bcf0:	69f9      	ldr	r1, [r7, #28]
 800bcf2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	634b      	str	r3, [r1, #52]	; 0x34
 800bcfa:	e105      	b.n	800bf08 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bcfc:	69fb      	ldr	r3, [r7, #28]
 800bcfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd02:	689b      	ldr	r3, [r3, #8]
 800bd04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d110      	bne.n	800bd2e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bd0c:	69bb      	ldr	r3, [r7, #24]
 800bd0e:	015a      	lsls	r2, r3, #5
 800bd10:	69fb      	ldr	r3, [r7, #28]
 800bd12:	4413      	add	r3, r2
 800bd14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	69ba      	ldr	r2, [r7, #24]
 800bd1c:	0151      	lsls	r1, r2, #5
 800bd1e:	69fa      	ldr	r2, [r7, #28]
 800bd20:	440a      	add	r2, r1
 800bd22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bd2a:	6013      	str	r3, [r2, #0]
 800bd2c:	e00f      	b.n	800bd4e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bd2e:	69bb      	ldr	r3, [r7, #24]
 800bd30:	015a      	lsls	r2, r3, #5
 800bd32:	69fb      	ldr	r3, [r7, #28]
 800bd34:	4413      	add	r3, r2
 800bd36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	69ba      	ldr	r2, [r7, #24]
 800bd3e:	0151      	lsls	r1, r2, #5
 800bd40:	69fa      	ldr	r2, [r7, #28]
 800bd42:	440a      	add	r2, r1
 800bd44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd4c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	68d9      	ldr	r1, [r3, #12]
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	781a      	ldrb	r2, [r3, #0]
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	695b      	ldr	r3, [r3, #20]
 800bd5a:	b298      	uxth	r0, r3
 800bd5c:	79fb      	ldrb	r3, [r7, #7]
 800bd5e:	9300      	str	r3, [sp, #0]
 800bd60:	4603      	mov	r3, r0
 800bd62:	68f8      	ldr	r0, [r7, #12]
 800bd64:	f000 fa2b 	bl	800c1be <USB_WritePacket>
 800bd68:	e0ce      	b.n	800bf08 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bd6a:	69bb      	ldr	r3, [r7, #24]
 800bd6c:	015a      	lsls	r2, r3, #5
 800bd6e:	69fb      	ldr	r3, [r7, #28]
 800bd70:	4413      	add	r3, r2
 800bd72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd76:	691b      	ldr	r3, [r3, #16]
 800bd78:	69ba      	ldr	r2, [r7, #24]
 800bd7a:	0151      	lsls	r1, r2, #5
 800bd7c:	69fa      	ldr	r2, [r7, #28]
 800bd7e:	440a      	add	r2, r1
 800bd80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd84:	0cdb      	lsrs	r3, r3, #19
 800bd86:	04db      	lsls	r3, r3, #19
 800bd88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bd8a:	69bb      	ldr	r3, [r7, #24]
 800bd8c:	015a      	lsls	r2, r3, #5
 800bd8e:	69fb      	ldr	r3, [r7, #28]
 800bd90:	4413      	add	r3, r2
 800bd92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd96:	691b      	ldr	r3, [r3, #16]
 800bd98:	69ba      	ldr	r2, [r7, #24]
 800bd9a:	0151      	lsls	r1, r2, #5
 800bd9c:	69fa      	ldr	r2, [r7, #28]
 800bd9e:	440a      	add	r2, r1
 800bda0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bda4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bda8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bdac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	695b      	ldr	r3, [r3, #20]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d126      	bne.n	800be04 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bdb6:	69bb      	ldr	r3, [r7, #24]
 800bdb8:	015a      	lsls	r2, r3, #5
 800bdba:	69fb      	ldr	r3, [r7, #28]
 800bdbc:	4413      	add	r3, r2
 800bdbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdc2:	691a      	ldr	r2, [r3, #16]
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	689b      	ldr	r3, [r3, #8]
 800bdc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bdcc:	69b9      	ldr	r1, [r7, #24]
 800bdce:	0148      	lsls	r0, r1, #5
 800bdd0:	69f9      	ldr	r1, [r7, #28]
 800bdd2:	4401      	add	r1, r0
 800bdd4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bdd8:	4313      	orrs	r3, r2
 800bdda:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bddc:	69bb      	ldr	r3, [r7, #24]
 800bdde:	015a      	lsls	r2, r3, #5
 800bde0:	69fb      	ldr	r3, [r7, #28]
 800bde2:	4413      	add	r3, r2
 800bde4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bde8:	691b      	ldr	r3, [r3, #16]
 800bdea:	69ba      	ldr	r2, [r7, #24]
 800bdec:	0151      	lsls	r1, r2, #5
 800bdee:	69fa      	ldr	r2, [r7, #28]
 800bdf0:	440a      	add	r2, r1
 800bdf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdf6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bdfa:	6113      	str	r3, [r2, #16]
 800bdfc:	e036      	b.n	800be6c <USB_EPStartXfer+0x3dc>
 800bdfe:	bf00      	nop
 800be00:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	695a      	ldr	r2, [r3, #20]
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	689b      	ldr	r3, [r3, #8]
 800be0c:	4413      	add	r3, r2
 800be0e:	1e5a      	subs	r2, r3, #1
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	689b      	ldr	r3, [r3, #8]
 800be14:	fbb2 f3f3 	udiv	r3, r2, r3
 800be18:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800be1a:	69bb      	ldr	r3, [r7, #24]
 800be1c:	015a      	lsls	r2, r3, #5
 800be1e:	69fb      	ldr	r3, [r7, #28]
 800be20:	4413      	add	r3, r2
 800be22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be26:	691a      	ldr	r2, [r3, #16]
 800be28:	8afb      	ldrh	r3, [r7, #22]
 800be2a:	04d9      	lsls	r1, r3, #19
 800be2c:	4b39      	ldr	r3, [pc, #228]	; (800bf14 <USB_EPStartXfer+0x484>)
 800be2e:	400b      	ands	r3, r1
 800be30:	69b9      	ldr	r1, [r7, #24]
 800be32:	0148      	lsls	r0, r1, #5
 800be34:	69f9      	ldr	r1, [r7, #28]
 800be36:	4401      	add	r1, r0
 800be38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800be3c:	4313      	orrs	r3, r2
 800be3e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800be40:	69bb      	ldr	r3, [r7, #24]
 800be42:	015a      	lsls	r2, r3, #5
 800be44:	69fb      	ldr	r3, [r7, #28]
 800be46:	4413      	add	r3, r2
 800be48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be4c:	691a      	ldr	r2, [r3, #16]
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	8af9      	ldrh	r1, [r7, #22]
 800be54:	fb01 f303 	mul.w	r3, r1, r3
 800be58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be5c:	69b9      	ldr	r1, [r7, #24]
 800be5e:	0148      	lsls	r0, r1, #5
 800be60:	69f9      	ldr	r1, [r7, #28]
 800be62:	4401      	add	r1, r0
 800be64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800be68:	4313      	orrs	r3, r2
 800be6a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800be6c:	79fb      	ldrb	r3, [r7, #7]
 800be6e:	2b01      	cmp	r3, #1
 800be70:	d10d      	bne.n	800be8e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	68db      	ldr	r3, [r3, #12]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d009      	beq.n	800be8e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	68d9      	ldr	r1, [r3, #12]
 800be7e:	69bb      	ldr	r3, [r7, #24]
 800be80:	015a      	lsls	r2, r3, #5
 800be82:	69fb      	ldr	r3, [r7, #28]
 800be84:	4413      	add	r3, r2
 800be86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be8a:	460a      	mov	r2, r1
 800be8c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	78db      	ldrb	r3, [r3, #3]
 800be92:	2b01      	cmp	r3, #1
 800be94:	d128      	bne.n	800bee8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800be96:	69fb      	ldr	r3, [r7, #28]
 800be98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be9c:	689b      	ldr	r3, [r3, #8]
 800be9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d110      	bne.n	800bec8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bea6:	69bb      	ldr	r3, [r7, #24]
 800bea8:	015a      	lsls	r2, r3, #5
 800beaa:	69fb      	ldr	r3, [r7, #28]
 800beac:	4413      	add	r3, r2
 800beae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	69ba      	ldr	r2, [r7, #24]
 800beb6:	0151      	lsls	r1, r2, #5
 800beb8:	69fa      	ldr	r2, [r7, #28]
 800beba:	440a      	add	r2, r1
 800bebc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bec0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bec4:	6013      	str	r3, [r2, #0]
 800bec6:	e00f      	b.n	800bee8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bec8:	69bb      	ldr	r3, [r7, #24]
 800beca:	015a      	lsls	r2, r3, #5
 800becc:	69fb      	ldr	r3, [r7, #28]
 800bece:	4413      	add	r3, r2
 800bed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	69ba      	ldr	r2, [r7, #24]
 800bed8:	0151      	lsls	r1, r2, #5
 800beda:	69fa      	ldr	r2, [r7, #28]
 800bedc:	440a      	add	r2, r1
 800bede:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bee6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bee8:	69bb      	ldr	r3, [r7, #24]
 800beea:	015a      	lsls	r2, r3, #5
 800beec:	69fb      	ldr	r3, [r7, #28]
 800beee:	4413      	add	r3, r2
 800bef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	69ba      	ldr	r2, [r7, #24]
 800bef8:	0151      	lsls	r1, r2, #5
 800befa:	69fa      	ldr	r2, [r7, #28]
 800befc:	440a      	add	r2, r1
 800befe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bf06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bf08:	2300      	movs	r3, #0
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3720      	adds	r7, #32
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
 800bf12:	bf00      	nop
 800bf14:	1ff80000 	.word	0x1ff80000

0800bf18 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b087      	sub	sp, #28
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	60f8      	str	r0, [r7, #12]
 800bf20:	60b9      	str	r1, [r7, #8]
 800bf22:	4613      	mov	r3, r2
 800bf24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	785b      	ldrb	r3, [r3, #1]
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	f040 80cd 	bne.w	800c0d4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	695b      	ldr	r3, [r3, #20]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d132      	bne.n	800bfa8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	015a      	lsls	r2, r3, #5
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	4413      	add	r3, r2
 800bf4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf4e:	691b      	ldr	r3, [r3, #16]
 800bf50:	693a      	ldr	r2, [r7, #16]
 800bf52:	0151      	lsls	r1, r2, #5
 800bf54:	697a      	ldr	r2, [r7, #20]
 800bf56:	440a      	add	r2, r1
 800bf58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bf60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bf64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	015a      	lsls	r2, r3, #5
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	4413      	add	r3, r2
 800bf6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf72:	691b      	ldr	r3, [r3, #16]
 800bf74:	693a      	ldr	r2, [r7, #16]
 800bf76:	0151      	lsls	r1, r2, #5
 800bf78:	697a      	ldr	r2, [r7, #20]
 800bf7a:	440a      	add	r2, r1
 800bf7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	015a      	lsls	r2, r3, #5
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	4413      	add	r3, r2
 800bf8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf92:	691b      	ldr	r3, [r3, #16]
 800bf94:	693a      	ldr	r2, [r7, #16]
 800bf96:	0151      	lsls	r1, r2, #5
 800bf98:	697a      	ldr	r2, [r7, #20]
 800bf9a:	440a      	add	r2, r1
 800bf9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfa0:	0cdb      	lsrs	r3, r3, #19
 800bfa2:	04db      	lsls	r3, r3, #19
 800bfa4:	6113      	str	r3, [r2, #16]
 800bfa6:	e04e      	b.n	800c046 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	015a      	lsls	r2, r3, #5
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	4413      	add	r3, r2
 800bfb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfb4:	691b      	ldr	r3, [r3, #16]
 800bfb6:	693a      	ldr	r2, [r7, #16]
 800bfb8:	0151      	lsls	r1, r2, #5
 800bfba:	697a      	ldr	r2, [r7, #20]
 800bfbc:	440a      	add	r2, r1
 800bfbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfc2:	0cdb      	lsrs	r3, r3, #19
 800bfc4:	04db      	lsls	r3, r3, #19
 800bfc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	015a      	lsls	r2, r3, #5
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	4413      	add	r3, r2
 800bfd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfd4:	691b      	ldr	r3, [r3, #16]
 800bfd6:	693a      	ldr	r2, [r7, #16]
 800bfd8:	0151      	lsls	r1, r2, #5
 800bfda:	697a      	ldr	r2, [r7, #20]
 800bfdc:	440a      	add	r2, r1
 800bfde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfe2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bfe6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bfea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	695a      	ldr	r2, [r3, #20]
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	689b      	ldr	r3, [r3, #8]
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d903      	bls.n	800c000 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	689a      	ldr	r2, [r3, #8]
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	015a      	lsls	r2, r3, #5
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	4413      	add	r3, r2
 800c008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c00c:	691b      	ldr	r3, [r3, #16]
 800c00e:	693a      	ldr	r2, [r7, #16]
 800c010:	0151      	lsls	r1, r2, #5
 800c012:	697a      	ldr	r2, [r7, #20]
 800c014:	440a      	add	r2, r1
 800c016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c01a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c01e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	015a      	lsls	r2, r3, #5
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	4413      	add	r3, r2
 800c028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c02c:	691a      	ldr	r2, [r3, #16]
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	695b      	ldr	r3, [r3, #20]
 800c032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c036:	6939      	ldr	r1, [r7, #16]
 800c038:	0148      	lsls	r0, r1, #5
 800c03a:	6979      	ldr	r1, [r7, #20]
 800c03c:	4401      	add	r1, r0
 800c03e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c042:	4313      	orrs	r3, r2
 800c044:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c046:	79fb      	ldrb	r3, [r7, #7]
 800c048:	2b01      	cmp	r3, #1
 800c04a:	d11e      	bne.n	800c08a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	691b      	ldr	r3, [r3, #16]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d009      	beq.n	800c068 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	015a      	lsls	r2, r3, #5
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	4413      	add	r3, r2
 800c05c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c060:	461a      	mov	r2, r3
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	691b      	ldr	r3, [r3, #16]
 800c066:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	015a      	lsls	r2, r3, #5
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	4413      	add	r3, r2
 800c070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	693a      	ldr	r2, [r7, #16]
 800c078:	0151      	lsls	r1, r2, #5
 800c07a:	697a      	ldr	r2, [r7, #20]
 800c07c:	440a      	add	r2, r1
 800c07e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c082:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c086:	6013      	str	r3, [r2, #0]
 800c088:	e092      	b.n	800c1b0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	015a      	lsls	r2, r3, #5
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	4413      	add	r3, r2
 800c092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	693a      	ldr	r2, [r7, #16]
 800c09a:	0151      	lsls	r1, r2, #5
 800c09c:	697a      	ldr	r2, [r7, #20]
 800c09e:	440a      	add	r2, r1
 800c0a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c0a8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	695b      	ldr	r3, [r3, #20]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d07e      	beq.n	800c1b0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	781b      	ldrb	r3, [r3, #0]
 800c0be:	f003 030f 	and.w	r3, r3, #15
 800c0c2:	2101      	movs	r1, #1
 800c0c4:	fa01 f303 	lsl.w	r3, r1, r3
 800c0c8:	6979      	ldr	r1, [r7, #20]
 800c0ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	634b      	str	r3, [r1, #52]	; 0x34
 800c0d2:	e06d      	b.n	800c1b0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	015a      	lsls	r2, r3, #5
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	4413      	add	r3, r2
 800c0dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0e0:	691b      	ldr	r3, [r3, #16]
 800c0e2:	693a      	ldr	r2, [r7, #16]
 800c0e4:	0151      	lsls	r1, r2, #5
 800c0e6:	697a      	ldr	r2, [r7, #20]
 800c0e8:	440a      	add	r2, r1
 800c0ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0ee:	0cdb      	lsrs	r3, r3, #19
 800c0f0:	04db      	lsls	r3, r3, #19
 800c0f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	015a      	lsls	r2, r3, #5
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	4413      	add	r3, r2
 800c0fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c100:	691b      	ldr	r3, [r3, #16]
 800c102:	693a      	ldr	r2, [r7, #16]
 800c104:	0151      	lsls	r1, r2, #5
 800c106:	697a      	ldr	r2, [r7, #20]
 800c108:	440a      	add	r2, r1
 800c10a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c10e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c112:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c116:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	695b      	ldr	r3, [r3, #20]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d003      	beq.n	800c128 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	689a      	ldr	r2, [r3, #8]
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	015a      	lsls	r2, r3, #5
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	4413      	add	r3, r2
 800c130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c134:	691b      	ldr	r3, [r3, #16]
 800c136:	693a      	ldr	r2, [r7, #16]
 800c138:	0151      	lsls	r1, r2, #5
 800c13a:	697a      	ldr	r2, [r7, #20]
 800c13c:	440a      	add	r2, r1
 800c13e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c142:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c146:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	015a      	lsls	r2, r3, #5
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	4413      	add	r3, r2
 800c150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c154:	691a      	ldr	r2, [r3, #16]
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c15e:	6939      	ldr	r1, [r7, #16]
 800c160:	0148      	lsls	r0, r1, #5
 800c162:	6979      	ldr	r1, [r7, #20]
 800c164:	4401      	add	r1, r0
 800c166:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c16a:	4313      	orrs	r3, r2
 800c16c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c16e:	79fb      	ldrb	r3, [r7, #7]
 800c170:	2b01      	cmp	r3, #1
 800c172:	d10d      	bne.n	800c190 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	68db      	ldr	r3, [r3, #12]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d009      	beq.n	800c190 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	68d9      	ldr	r1, [r3, #12]
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	015a      	lsls	r2, r3, #5
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	4413      	add	r3, r2
 800c188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c18c:	460a      	mov	r2, r1
 800c18e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	015a      	lsls	r2, r3, #5
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	4413      	add	r3, r2
 800c198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	693a      	ldr	r2, [r7, #16]
 800c1a0:	0151      	lsls	r1, r2, #5
 800c1a2:	697a      	ldr	r2, [r7, #20]
 800c1a4:	440a      	add	r2, r1
 800c1a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c1ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c1b0:	2300      	movs	r3, #0
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	371c      	adds	r7, #28
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1bc:	4770      	bx	lr

0800c1be <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c1be:	b480      	push	{r7}
 800c1c0:	b089      	sub	sp, #36	; 0x24
 800c1c2:	af00      	add	r7, sp, #0
 800c1c4:	60f8      	str	r0, [r7, #12]
 800c1c6:	60b9      	str	r1, [r7, #8]
 800c1c8:	4611      	mov	r1, r2
 800c1ca:	461a      	mov	r2, r3
 800c1cc:	460b      	mov	r3, r1
 800c1ce:	71fb      	strb	r3, [r7, #7]
 800c1d0:	4613      	mov	r3, r2
 800c1d2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c1dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d123      	bne.n	800c22c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c1e4:	88bb      	ldrh	r3, [r7, #4]
 800c1e6:	3303      	adds	r3, #3
 800c1e8:	089b      	lsrs	r3, r3, #2
 800c1ea:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	61bb      	str	r3, [r7, #24]
 800c1f0:	e018      	b.n	800c224 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c1f2:	79fb      	ldrb	r3, [r7, #7]
 800c1f4:	031a      	lsls	r2, r3, #12
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	4413      	add	r3, r2
 800c1fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1fe:	461a      	mov	r2, r3
 800c200:	69fb      	ldr	r3, [r7, #28]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c206:	69fb      	ldr	r3, [r7, #28]
 800c208:	3301      	adds	r3, #1
 800c20a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c20c:	69fb      	ldr	r3, [r7, #28]
 800c20e:	3301      	adds	r3, #1
 800c210:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c212:	69fb      	ldr	r3, [r7, #28]
 800c214:	3301      	adds	r3, #1
 800c216:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c218:	69fb      	ldr	r3, [r7, #28]
 800c21a:	3301      	adds	r3, #1
 800c21c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c21e:	69bb      	ldr	r3, [r7, #24]
 800c220:	3301      	adds	r3, #1
 800c222:	61bb      	str	r3, [r7, #24]
 800c224:	69ba      	ldr	r2, [r7, #24]
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	429a      	cmp	r2, r3
 800c22a:	d3e2      	bcc.n	800c1f2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c22c:	2300      	movs	r3, #0
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3724      	adds	r7, #36	; 0x24
 800c232:	46bd      	mov	sp, r7
 800c234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c238:	4770      	bx	lr

0800c23a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c23a:	b480      	push	{r7}
 800c23c:	b08b      	sub	sp, #44	; 0x2c
 800c23e:	af00      	add	r7, sp, #0
 800c240:	60f8      	str	r0, [r7, #12]
 800c242:	60b9      	str	r1, [r7, #8]
 800c244:	4613      	mov	r3, r2
 800c246:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c250:	88fb      	ldrh	r3, [r7, #6]
 800c252:	089b      	lsrs	r3, r3, #2
 800c254:	b29b      	uxth	r3, r3
 800c256:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c258:	88fb      	ldrh	r3, [r7, #6]
 800c25a:	f003 0303 	and.w	r3, r3, #3
 800c25e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c260:	2300      	movs	r3, #0
 800c262:	623b      	str	r3, [r7, #32]
 800c264:	e014      	b.n	800c290 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c266:	69bb      	ldr	r3, [r7, #24]
 800c268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c26c:	681a      	ldr	r2, [r3, #0]
 800c26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c270:	601a      	str	r2, [r3, #0]
    pDest++;
 800c272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c274:	3301      	adds	r3, #1
 800c276:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27a:	3301      	adds	r3, #1
 800c27c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c280:	3301      	adds	r3, #1
 800c282:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c286:	3301      	adds	r3, #1
 800c288:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c28a:	6a3b      	ldr	r3, [r7, #32]
 800c28c:	3301      	adds	r3, #1
 800c28e:	623b      	str	r3, [r7, #32]
 800c290:	6a3a      	ldr	r2, [r7, #32]
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	429a      	cmp	r2, r3
 800c296:	d3e6      	bcc.n	800c266 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c298:	8bfb      	ldrh	r3, [r7, #30]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d01e      	beq.n	800c2dc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c2a2:	69bb      	ldr	r3, [r7, #24]
 800c2a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	f107 0310 	add.w	r3, r7, #16
 800c2ae:	6812      	ldr	r2, [r2, #0]
 800c2b0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c2b2:	693a      	ldr	r2, [r7, #16]
 800c2b4:	6a3b      	ldr	r3, [r7, #32]
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	00db      	lsls	r3, r3, #3
 800c2ba:	fa22 f303 	lsr.w	r3, r2, r3
 800c2be:	b2da      	uxtb	r2, r3
 800c2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c2:	701a      	strb	r2, [r3, #0]
      i++;
 800c2c4:	6a3b      	ldr	r3, [r7, #32]
 800c2c6:	3301      	adds	r3, #1
 800c2c8:	623b      	str	r3, [r7, #32]
      pDest++;
 800c2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c2d0:	8bfb      	ldrh	r3, [r7, #30]
 800c2d2:	3b01      	subs	r3, #1
 800c2d4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c2d6:	8bfb      	ldrh	r3, [r7, #30]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d1ea      	bne.n	800c2b2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	372c      	adds	r7, #44	; 0x2c
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr

0800c2ea <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c2ea:	b480      	push	{r7}
 800c2ec:	b085      	sub	sp, #20
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	6078      	str	r0, [r7, #4]
 800c2f2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	785b      	ldrb	r3, [r3, #1]
 800c302:	2b01      	cmp	r3, #1
 800c304:	d12c      	bne.n	800c360 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	015a      	lsls	r2, r3, #5
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	4413      	add	r3, r2
 800c30e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	2b00      	cmp	r3, #0
 800c316:	db12      	blt.n	800c33e <USB_EPSetStall+0x54>
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d00f      	beq.n	800c33e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	015a      	lsls	r2, r3, #5
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	4413      	add	r3, r2
 800c326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	68ba      	ldr	r2, [r7, #8]
 800c32e:	0151      	lsls	r1, r2, #5
 800c330:	68fa      	ldr	r2, [r7, #12]
 800c332:	440a      	add	r2, r1
 800c334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c338:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c33c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	015a      	lsls	r2, r3, #5
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	4413      	add	r3, r2
 800c346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	68ba      	ldr	r2, [r7, #8]
 800c34e:	0151      	lsls	r1, r2, #5
 800c350:	68fa      	ldr	r2, [r7, #12]
 800c352:	440a      	add	r2, r1
 800c354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c358:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c35c:	6013      	str	r3, [r2, #0]
 800c35e:	e02b      	b.n	800c3b8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	015a      	lsls	r2, r3, #5
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	4413      	add	r3, r2
 800c368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	db12      	blt.n	800c398 <USB_EPSetStall+0xae>
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d00f      	beq.n	800c398 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	015a      	lsls	r2, r3, #5
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	4413      	add	r3, r2
 800c380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	68ba      	ldr	r2, [r7, #8]
 800c388:	0151      	lsls	r1, r2, #5
 800c38a:	68fa      	ldr	r2, [r7, #12]
 800c38c:	440a      	add	r2, r1
 800c38e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c392:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c396:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	015a      	lsls	r2, r3, #5
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	4413      	add	r3, r2
 800c3a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	68ba      	ldr	r2, [r7, #8]
 800c3a8:	0151      	lsls	r1, r2, #5
 800c3aa:	68fa      	ldr	r2, [r7, #12]
 800c3ac:	440a      	add	r2, r1
 800c3ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c3b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c3b8:	2300      	movs	r3, #0
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3714      	adds	r7, #20
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c4:	4770      	bx	lr

0800c3c6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c3c6:	b480      	push	{r7}
 800c3c8:	b085      	sub	sp, #20
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	6078      	str	r0, [r7, #4]
 800c3ce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	781b      	ldrb	r3, [r3, #0]
 800c3d8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	785b      	ldrb	r3, [r3, #1]
 800c3de:	2b01      	cmp	r3, #1
 800c3e0:	d128      	bne.n	800c434 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	015a      	lsls	r2, r3, #5
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	4413      	add	r3, r2
 800c3ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	68ba      	ldr	r2, [r7, #8]
 800c3f2:	0151      	lsls	r1, r2, #5
 800c3f4:	68fa      	ldr	r2, [r7, #12]
 800c3f6:	440a      	add	r2, r1
 800c3f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c400:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	78db      	ldrb	r3, [r3, #3]
 800c406:	2b03      	cmp	r3, #3
 800c408:	d003      	beq.n	800c412 <USB_EPClearStall+0x4c>
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	78db      	ldrb	r3, [r3, #3]
 800c40e:	2b02      	cmp	r3, #2
 800c410:	d138      	bne.n	800c484 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	015a      	lsls	r2, r3, #5
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	4413      	add	r3, r2
 800c41a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	68ba      	ldr	r2, [r7, #8]
 800c422:	0151      	lsls	r1, r2, #5
 800c424:	68fa      	ldr	r2, [r7, #12]
 800c426:	440a      	add	r2, r1
 800c428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c42c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c430:	6013      	str	r3, [r2, #0]
 800c432:	e027      	b.n	800c484 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	015a      	lsls	r2, r3, #5
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	4413      	add	r3, r2
 800c43c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	68ba      	ldr	r2, [r7, #8]
 800c444:	0151      	lsls	r1, r2, #5
 800c446:	68fa      	ldr	r2, [r7, #12]
 800c448:	440a      	add	r2, r1
 800c44a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c44e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c452:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	78db      	ldrb	r3, [r3, #3]
 800c458:	2b03      	cmp	r3, #3
 800c45a:	d003      	beq.n	800c464 <USB_EPClearStall+0x9e>
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	78db      	ldrb	r3, [r3, #3]
 800c460:	2b02      	cmp	r3, #2
 800c462:	d10f      	bne.n	800c484 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	015a      	lsls	r2, r3, #5
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	4413      	add	r3, r2
 800c46c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	68ba      	ldr	r2, [r7, #8]
 800c474:	0151      	lsls	r1, r2, #5
 800c476:	68fa      	ldr	r2, [r7, #12]
 800c478:	440a      	add	r2, r1
 800c47a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c47e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c482:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c484:	2300      	movs	r3, #0
}
 800c486:	4618      	mov	r0, r3
 800c488:	3714      	adds	r7, #20
 800c48a:	46bd      	mov	sp, r7
 800c48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c490:	4770      	bx	lr

0800c492 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c492:	b480      	push	{r7}
 800c494:	b085      	sub	sp, #20
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
 800c49a:	460b      	mov	r3, r1
 800c49c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	68fa      	ldr	r2, [r7, #12]
 800c4ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c4b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c4b4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4bc:	681a      	ldr	r2, [r3, #0]
 800c4be:	78fb      	ldrb	r3, [r7, #3]
 800c4c0:	011b      	lsls	r3, r3, #4
 800c4c2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c4c6:	68f9      	ldr	r1, [r7, #12]
 800c4c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4cc:	4313      	orrs	r3, r2
 800c4ce:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c4d0:	2300      	movs	r3, #0
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3714      	adds	r7, #20
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4dc:	4770      	bx	lr

0800c4de <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c4de:	b480      	push	{r7}
 800c4e0:	b085      	sub	sp, #20
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	695b      	ldr	r3, [r3, #20]
 800c4ea:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	699b      	ldr	r3, [r3, #24]
 800c4f0:	68fa      	ldr	r2, [r7, #12]
 800c4f2:	4013      	ands	r3, r2
 800c4f4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3714      	adds	r7, #20
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr

0800c504 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c504:	b480      	push	{r7}
 800c506:	b085      	sub	sp, #20
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c516:	699b      	ldr	r3, [r3, #24]
 800c518:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c520:	69db      	ldr	r3, [r3, #28]
 800c522:	68ba      	ldr	r2, [r7, #8]
 800c524:	4013      	ands	r3, r2
 800c526:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	0c1b      	lsrs	r3, r3, #16
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3714      	adds	r7, #20
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr

0800c538 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c538:	b480      	push	{r7}
 800c53a:	b085      	sub	sp, #20
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c54a:	699b      	ldr	r3, [r3, #24]
 800c54c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c554:	69db      	ldr	r3, [r3, #28]
 800c556:	68ba      	ldr	r2, [r7, #8]
 800c558:	4013      	ands	r3, r2
 800c55a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	b29b      	uxth	r3, r3
}
 800c560:	4618      	mov	r0, r3
 800c562:	3714      	adds	r7, #20
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr

0800c56c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b085      	sub	sp, #20
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	460b      	mov	r3, r1
 800c576:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c57c:	78fb      	ldrb	r3, [r7, #3]
 800c57e:	015a      	lsls	r2, r3, #5
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	4413      	add	r3, r2
 800c584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c588:	689b      	ldr	r3, [r3, #8]
 800c58a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c592:	695b      	ldr	r3, [r3, #20]
 800c594:	68ba      	ldr	r2, [r7, #8]
 800c596:	4013      	ands	r3, r2
 800c598:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c59a:	68bb      	ldr	r3, [r7, #8]
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3714      	adds	r7, #20
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr

0800c5a8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b087      	sub	sp, #28
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	460b      	mov	r3, r1
 800c5b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5be:	691b      	ldr	r3, [r3, #16]
 800c5c0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5ca:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c5cc:	78fb      	ldrb	r3, [r7, #3]
 800c5ce:	f003 030f 	and.w	r3, r3, #15
 800c5d2:	68fa      	ldr	r2, [r7, #12]
 800c5d4:	fa22 f303 	lsr.w	r3, r2, r3
 800c5d8:	01db      	lsls	r3, r3, #7
 800c5da:	b2db      	uxtb	r3, r3
 800c5dc:	693a      	ldr	r2, [r7, #16]
 800c5de:	4313      	orrs	r3, r2
 800c5e0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c5e2:	78fb      	ldrb	r3, [r7, #3]
 800c5e4:	015a      	lsls	r2, r3, #5
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	4413      	add	r3, r2
 800c5ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5ee:	689b      	ldr	r3, [r3, #8]
 800c5f0:	693a      	ldr	r2, [r7, #16]
 800c5f2:	4013      	ands	r3, r2
 800c5f4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c5f6:	68bb      	ldr	r3, [r7, #8]
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	371c      	adds	r7, #28
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c602:	4770      	bx	lr

0800c604 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c604:	b480      	push	{r7}
 800c606:	b083      	sub	sp, #12
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	695b      	ldr	r3, [r3, #20]
 800c610:	f003 0301 	and.w	r3, r3, #1
}
 800c614:	4618      	mov	r0, r3
 800c616:	370c      	adds	r7, #12
 800c618:	46bd      	mov	sp, r7
 800c61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61e:	4770      	bx	lr

0800c620 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c620:	b480      	push	{r7}
 800c622:	b085      	sub	sp, #20
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	68fa      	ldr	r2, [r7, #12]
 800c636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c63a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c63e:	f023 0307 	bic.w	r3, r3, #7
 800c642:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c64a:	685b      	ldr	r3, [r3, #4]
 800c64c:	68fa      	ldr	r2, [r7, #12]
 800c64e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c656:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c658:	2300      	movs	r3, #0
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3714      	adds	r7, #20
 800c65e:	46bd      	mov	sp, r7
 800c660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c664:	4770      	bx	lr
	...

0800c668 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c668:	b480      	push	{r7}
 800c66a:	b087      	sub	sp, #28
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	60f8      	str	r0, [r7, #12]
 800c670:	460b      	mov	r3, r1
 800c672:	607a      	str	r2, [r7, #4]
 800c674:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	333c      	adds	r3, #60	; 0x3c
 800c67e:	3304      	adds	r3, #4
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	4a26      	ldr	r2, [pc, #152]	; (800c720 <USB_EP0_OutStart+0xb8>)
 800c688:	4293      	cmp	r3, r2
 800c68a:	d90a      	bls.n	800c6a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c698:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c69c:	d101      	bne.n	800c6a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	e037      	b.n	800c712 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6b4:	691b      	ldr	r3, [r3, #16]
 800c6b6:	697a      	ldr	r2, [r7, #20]
 800c6b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c6c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6c8:	691b      	ldr	r3, [r3, #16]
 800c6ca:	697a      	ldr	r2, [r7, #20]
 800c6cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6d0:	f043 0318 	orr.w	r3, r3, #24
 800c6d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6dc:	691b      	ldr	r3, [r3, #16]
 800c6de:	697a      	ldr	r2, [r7, #20]
 800c6e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c6e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c6ea:	7afb      	ldrb	r3, [r7, #11]
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d10f      	bne.n	800c710 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	697a      	ldr	r2, [r7, #20]
 800c706:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c70a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c70e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c710:	2300      	movs	r3, #0
}
 800c712:	4618      	mov	r0, r3
 800c714:	371c      	adds	r7, #28
 800c716:	46bd      	mov	sp, r7
 800c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71c:	4770      	bx	lr
 800c71e:	bf00      	nop
 800c720:	4f54300a 	.word	0x4f54300a

0800c724 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800c728:	4904      	ldr	r1, [pc, #16]	; (800c73c <MX_FATFS_Init+0x18>)
 800c72a:	4805      	ldr	r0, [pc, #20]	; (800c740 <MX_FATFS_Init+0x1c>)
 800c72c:	f003 ff46 	bl	80105bc <FATFS_LinkDriver>
 800c730:	4603      	mov	r3, r0
 800c732:	461a      	mov	r2, r3
 800c734:	4b03      	ldr	r3, [pc, #12]	; (800c744 <MX_FATFS_Init+0x20>)
 800c736:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c738:	bf00      	nop
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	20006060 	.word	0x20006060
 800c740:	20000068 	.word	0x20000068
 800c744:	20006064 	.word	0x20006064

0800c748 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c748:	b480      	push	{r7}
 800c74a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c74c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c74e:	4618      	mov	r0, r3
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800c758:	b480      	push	{r7}
 800c75a:	b083      	sub	sp, #12
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	4603      	mov	r3, r0
 800c760:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800c762:	4b06      	ldr	r3, [pc, #24]	; (800c77c <USER_initialize+0x24>)
 800c764:	2201      	movs	r2, #1
 800c766:	701a      	strb	r2, [r3, #0]
    return Stat;
 800c768:	4b04      	ldr	r3, [pc, #16]	; (800c77c <USER_initialize+0x24>)
 800c76a:	781b      	ldrb	r3, [r3, #0]
 800c76c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800c76e:	4618      	mov	r0, r3
 800c770:	370c      	adds	r7, #12
 800c772:	46bd      	mov	sp, r7
 800c774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c778:	4770      	bx	lr
 800c77a:	bf00      	nop
 800c77c:	20000065 	.word	0x20000065

0800c780 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800c780:	b480      	push	{r7}
 800c782:	b083      	sub	sp, #12
 800c784:	af00      	add	r7, sp, #0
 800c786:	4603      	mov	r3, r0
 800c788:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800c78a:	4b06      	ldr	r3, [pc, #24]	; (800c7a4 <USER_status+0x24>)
 800c78c:	2201      	movs	r2, #1
 800c78e:	701a      	strb	r2, [r3, #0]
    return Stat;
 800c790:	4b04      	ldr	r3, [pc, #16]	; (800c7a4 <USER_status+0x24>)
 800c792:	781b      	ldrb	r3, [r3, #0]
 800c794:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800c796:	4618      	mov	r0, r3
 800c798:	370c      	adds	r7, #12
 800c79a:	46bd      	mov	sp, r7
 800c79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a0:	4770      	bx	lr
 800c7a2:	bf00      	nop
 800c7a4:	20000065 	.word	0x20000065

0800c7a8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b085      	sub	sp, #20
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	60b9      	str	r1, [r7, #8]
 800c7b0:	607a      	str	r2, [r7, #4]
 800c7b2:	603b      	str	r3, [r7, #0]
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800c7b8:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3714      	adds	r7, #20
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr

0800c7c6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800c7c6:	b480      	push	{r7}
 800c7c8:	b085      	sub	sp, #20
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	60b9      	str	r1, [r7, #8]
 800c7ce:	607a      	str	r2, [r7, #4]
 800c7d0:	603b      	str	r3, [r7, #0]
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800c7d6:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3714      	adds	r7, #20
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr

0800c7e4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b085      	sub	sp, #20
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	603a      	str	r2, [r7, #0]
 800c7ee:	71fb      	strb	r3, [r7, #7]
 800c7f0:	460b      	mov	r3, r1
 800c7f2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	73fb      	strb	r3, [r7, #15]
    return res;
 800c7f8:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3714      	adds	r7, #20
 800c7fe:	46bd      	mov	sp, r7
 800c800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c804:	4770      	bx	lr

0800c806 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c806:	b480      	push	{r7}
 800c808:	b083      	sub	sp, #12
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c80e:	2300      	movs	r3, #0
}
 800c810:	4618      	mov	r0, r3
 800c812:	370c      	adds	r7, #12
 800c814:	46bd      	mov	sp, r7
 800c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81a:	4770      	bx	lr

0800c81c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b084      	sub	sp, #16
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	460b      	mov	r3, r1
 800c826:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c828:	2303      	movs	r3, #3
 800c82a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c832:	2b00      	cmp	r3, #0
 800c834:	d009      	beq.n	800c84a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	78fa      	ldrb	r2, [r7, #3]
 800c840:	4611      	mov	r1, r2
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	4798      	blx	r3
 800c846:	4603      	mov	r3, r0
 800c848:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c84a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	3710      	adds	r7, #16
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}

0800c854 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b082      	sub	sp, #8
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	460b      	mov	r3, r1
 800c85e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c866:	2b00      	cmp	r3, #0
 800c868:	d007      	beq.n	800c87a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c870:	685b      	ldr	r3, [r3, #4]
 800c872:	78fa      	ldrb	r2, [r7, #3]
 800c874:	4611      	mov	r1, r2
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	4798      	blx	r3
  }

  return USBD_OK;
 800c87a:	2300      	movs	r3, #0
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3708      	adds	r7, #8
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}

0800c884 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b084      	sub	sp, #16
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c894:	6839      	ldr	r1, [r7, #0]
 800c896:	4618      	mov	r0, r3
 800c898:	f000 ff90 	bl	800d7bc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2201      	movs	r2, #1
 800c8a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c8b8:	f003 031f 	and.w	r3, r3, #31
 800c8bc:	2b02      	cmp	r3, #2
 800c8be:	d01a      	beq.n	800c8f6 <USBD_LL_SetupStage+0x72>
 800c8c0:	2b02      	cmp	r3, #2
 800c8c2:	d822      	bhi.n	800c90a <USBD_LL_SetupStage+0x86>
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d002      	beq.n	800c8ce <USBD_LL_SetupStage+0x4a>
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	d00a      	beq.n	800c8e2 <USBD_LL_SetupStage+0x5e>
 800c8cc:	e01d      	b.n	800c90a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f000 fa62 	bl	800cda0 <USBD_StdDevReq>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	73fb      	strb	r3, [r7, #15]
      break;
 800c8e0:	e020      	b.n	800c924 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f000 fac6 	bl	800ce7c <USBD_StdItfReq>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	73fb      	strb	r3, [r7, #15]
      break;
 800c8f4:	e016      	b.n	800c924 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c8fc:	4619      	mov	r1, r3
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 fb05 	bl	800cf0e <USBD_StdEPReq>
 800c904:	4603      	mov	r3, r0
 800c906:	73fb      	strb	r3, [r7, #15]
      break;
 800c908:	e00c      	b.n	800c924 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c910:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c914:	b2db      	uxtb	r3, r3
 800c916:	4619      	mov	r1, r3
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f006 f831 	bl	8012980 <USBD_LL_StallEP>
 800c91e:	4603      	mov	r3, r0
 800c920:	73fb      	strb	r3, [r7, #15]
      break;
 800c922:	bf00      	nop
  }

  return ret;
 800c924:	7bfb      	ldrb	r3, [r7, #15]
}
 800c926:	4618      	mov	r0, r3
 800c928:	3710      	adds	r7, #16
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}

0800c92e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c92e:	b580      	push	{r7, lr}
 800c930:	b086      	sub	sp, #24
 800c932:	af00      	add	r7, sp, #0
 800c934:	60f8      	str	r0, [r7, #12]
 800c936:	460b      	mov	r3, r1
 800c938:	607a      	str	r2, [r7, #4]
 800c93a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c93c:	7afb      	ldrb	r3, [r7, #11]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d138      	bne.n	800c9b4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c948:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c950:	2b03      	cmp	r3, #3
 800c952:	d14a      	bne.n	800c9ea <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c954:	693b      	ldr	r3, [r7, #16]
 800c956:	689a      	ldr	r2, [r3, #8]
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	68db      	ldr	r3, [r3, #12]
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d913      	bls.n	800c988 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	689a      	ldr	r2, [r3, #8]
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	68db      	ldr	r3, [r3, #12]
 800c968:	1ad2      	subs	r2, r2, r3
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	68da      	ldr	r2, [r3, #12]
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	689b      	ldr	r3, [r3, #8]
 800c976:	4293      	cmp	r3, r2
 800c978:	bf28      	it	cs
 800c97a:	4613      	movcs	r3, r2
 800c97c:	461a      	mov	r2, r3
 800c97e:	6879      	ldr	r1, [r7, #4]
 800c980:	68f8      	ldr	r0, [r7, #12]
 800c982:	f000 ff92 	bl	800d8aa <USBD_CtlContinueRx>
 800c986:	e030      	b.n	800c9ea <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c98e:	b2db      	uxtb	r3, r3
 800c990:	2b03      	cmp	r3, #3
 800c992:	d10b      	bne.n	800c9ac <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c99a:	691b      	ldr	r3, [r3, #16]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d005      	beq.n	800c9ac <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9a6:	691b      	ldr	r3, [r3, #16]
 800c9a8:	68f8      	ldr	r0, [r7, #12]
 800c9aa:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c9ac:	68f8      	ldr	r0, [r7, #12]
 800c9ae:	f000 ff8d 	bl	800d8cc <USBD_CtlSendStatus>
 800c9b2:	e01a      	b.n	800c9ea <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	2b03      	cmp	r3, #3
 800c9be:	d114      	bne.n	800c9ea <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9c6:	699b      	ldr	r3, [r3, #24]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d00e      	beq.n	800c9ea <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9d2:	699b      	ldr	r3, [r3, #24]
 800c9d4:	7afa      	ldrb	r2, [r7, #11]
 800c9d6:	4611      	mov	r1, r2
 800c9d8:	68f8      	ldr	r0, [r7, #12]
 800c9da:	4798      	blx	r3
 800c9dc:	4603      	mov	r3, r0
 800c9de:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c9e0:	7dfb      	ldrb	r3, [r7, #23]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d001      	beq.n	800c9ea <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c9e6:	7dfb      	ldrb	r3, [r7, #23]
 800c9e8:	e000      	b.n	800c9ec <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c9ea:	2300      	movs	r3, #0
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3718      	adds	r7, #24
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}

0800c9f4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b086      	sub	sp, #24
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	60f8      	str	r0, [r7, #12]
 800c9fc:	460b      	mov	r3, r1
 800c9fe:	607a      	str	r2, [r7, #4]
 800ca00:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ca02:	7afb      	ldrb	r3, [r7, #11]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d16b      	bne.n	800cae0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	3314      	adds	r3, #20
 800ca0c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ca14:	2b02      	cmp	r3, #2
 800ca16:	d156      	bne.n	800cac6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	689a      	ldr	r2, [r3, #8]
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	68db      	ldr	r3, [r3, #12]
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d914      	bls.n	800ca4e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	689a      	ldr	r2, [r3, #8]
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	68db      	ldr	r3, [r3, #12]
 800ca2c:	1ad2      	subs	r2, r2, r3
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	689b      	ldr	r3, [r3, #8]
 800ca36:	461a      	mov	r2, r3
 800ca38:	6879      	ldr	r1, [r7, #4]
 800ca3a:	68f8      	ldr	r0, [r7, #12]
 800ca3c:	f000 ff24 	bl	800d888 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca40:	2300      	movs	r3, #0
 800ca42:	2200      	movs	r2, #0
 800ca44:	2100      	movs	r1, #0
 800ca46:	68f8      	ldr	r0, [r7, #12]
 800ca48:	f006 f844 	bl	8012ad4 <USBD_LL_PrepareReceive>
 800ca4c:	e03b      	b.n	800cac6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	68da      	ldr	r2, [r3, #12]
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	689b      	ldr	r3, [r3, #8]
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d11c      	bne.n	800ca94 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	685a      	ldr	r2, [r3, #4]
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ca62:	429a      	cmp	r2, r3
 800ca64:	d316      	bcc.n	800ca94 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	685a      	ldr	r2, [r3, #4]
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d20f      	bcs.n	800ca94 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ca74:	2200      	movs	r2, #0
 800ca76:	2100      	movs	r1, #0
 800ca78:	68f8      	ldr	r0, [r7, #12]
 800ca7a:	f000 ff05 	bl	800d888 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	2200      	movs	r2, #0
 800ca82:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca86:	2300      	movs	r3, #0
 800ca88:	2200      	movs	r2, #0
 800ca8a:	2100      	movs	r1, #0
 800ca8c:	68f8      	ldr	r0, [r7, #12]
 800ca8e:	f006 f821 	bl	8012ad4 <USBD_LL_PrepareReceive>
 800ca92:	e018      	b.n	800cac6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca9a:	b2db      	uxtb	r3, r3
 800ca9c:	2b03      	cmp	r3, #3
 800ca9e:	d10b      	bne.n	800cab8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800caa6:	68db      	ldr	r3, [r3, #12]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d005      	beq.n	800cab8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cab2:	68db      	ldr	r3, [r3, #12]
 800cab4:	68f8      	ldr	r0, [r7, #12]
 800cab6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cab8:	2180      	movs	r1, #128	; 0x80
 800caba:	68f8      	ldr	r0, [r7, #12]
 800cabc:	f005 ff60 	bl	8012980 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cac0:	68f8      	ldr	r0, [r7, #12]
 800cac2:	f000 ff16 	bl	800d8f2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800cacc:	2b01      	cmp	r3, #1
 800cace:	d122      	bne.n	800cb16 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800cad0:	68f8      	ldr	r0, [r7, #12]
 800cad2:	f7ff fe98 	bl	800c806 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2200      	movs	r2, #0
 800cada:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800cade:	e01a      	b.n	800cb16 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cae6:	b2db      	uxtb	r3, r3
 800cae8:	2b03      	cmp	r3, #3
 800caea:	d114      	bne.n	800cb16 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800caf2:	695b      	ldr	r3, [r3, #20]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d00e      	beq.n	800cb16 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cafe:	695b      	ldr	r3, [r3, #20]
 800cb00:	7afa      	ldrb	r2, [r7, #11]
 800cb02:	4611      	mov	r1, r2
 800cb04:	68f8      	ldr	r0, [r7, #12]
 800cb06:	4798      	blx	r3
 800cb08:	4603      	mov	r3, r0
 800cb0a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800cb0c:	7dfb      	ldrb	r3, [r7, #23]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d001      	beq.n	800cb16 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800cb12:	7dfb      	ldrb	r3, [r7, #23]
 800cb14:	e000      	b.n	800cb18 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800cb16:	2300      	movs	r3, #0
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3718      	adds	r7, #24
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}

0800cb20 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b082      	sub	sp, #8
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2200      	movs	r2, #0
 800cb34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2200      	movs	r2, #0
 800cb42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d101      	bne.n	800cb54 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800cb50:	2303      	movs	r3, #3
 800cb52:	e02f      	b.n	800cbb4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d00f      	beq.n	800cb7e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d009      	beq.n	800cb7e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb70:	685b      	ldr	r3, [r3, #4]
 800cb72:	687a      	ldr	r2, [r7, #4]
 800cb74:	6852      	ldr	r2, [r2, #4]
 800cb76:	b2d2      	uxtb	r2, r2
 800cb78:	4611      	mov	r1, r2
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cb7e:	2340      	movs	r3, #64	; 0x40
 800cb80:	2200      	movs	r2, #0
 800cb82:	2100      	movs	r1, #0
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f005 fed5 	bl	8012934 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2201      	movs	r2, #1
 800cb8e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2240      	movs	r2, #64	; 0x40
 800cb96:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cb9a:	2340      	movs	r3, #64	; 0x40
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	2180      	movs	r1, #128	; 0x80
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f005 fec7 	bl	8012934 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2201      	movs	r2, #1
 800cbaa:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2240      	movs	r2, #64	; 0x40
 800cbb0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800cbb2:	2300      	movs	r3, #0
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3708      	adds	r7, #8
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b083      	sub	sp, #12
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	460b      	mov	r3, r1
 800cbc6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	78fa      	ldrb	r2, [r7, #3]
 800cbcc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cbce:	2300      	movs	r3, #0
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	370c      	adds	r7, #12
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr

0800cbdc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b083      	sub	sp, #12
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbea:	b2da      	uxtb	r2, r3
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2204      	movs	r2, #4
 800cbf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cbfa:	2300      	movs	r3, #0
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	370c      	adds	r7, #12
 800cc00:	46bd      	mov	sp, r7
 800cc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc06:	4770      	bx	lr

0800cc08 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b083      	sub	sp, #12
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc16:	b2db      	uxtb	r3, r3
 800cc18:	2b04      	cmp	r3, #4
 800cc1a:	d106      	bne.n	800cc2a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800cc22:	b2da      	uxtb	r2, r3
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800cc2a:	2300      	movs	r3, #0
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	370c      	adds	r7, #12
 800cc30:	46bd      	mov	sp, r7
 800cc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc36:	4770      	bx	lr

0800cc38 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d101      	bne.n	800cc4e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800cc4a:	2303      	movs	r3, #3
 800cc4c:	e012      	b.n	800cc74 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc54:	b2db      	uxtb	r3, r3
 800cc56:	2b03      	cmp	r3, #3
 800cc58:	d10b      	bne.n	800cc72 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc60:	69db      	ldr	r3, [r3, #28]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d005      	beq.n	800cc72 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc6c:	69db      	ldr	r3, [r3, #28]
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cc72:	2300      	movs	r3, #0
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3708      	adds	r7, #8
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}

0800cc7c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b082      	sub	sp, #8
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	460b      	mov	r3, r1
 800cc86:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d101      	bne.n	800cc96 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800cc92:	2303      	movs	r3, #3
 800cc94:	e014      	b.n	800ccc0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc9c:	b2db      	uxtb	r3, r3
 800cc9e:	2b03      	cmp	r3, #3
 800cca0:	d10d      	bne.n	800ccbe <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cca8:	6a1b      	ldr	r3, [r3, #32]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d007      	beq.n	800ccbe <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccb4:	6a1b      	ldr	r3, [r3, #32]
 800ccb6:	78fa      	ldrb	r2, [r7, #3]
 800ccb8:	4611      	mov	r1, r2
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ccbe:	2300      	movs	r3, #0
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3708      	adds	r7, #8
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b082      	sub	sp, #8
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d101      	bne.n	800cce2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ccde:	2303      	movs	r3, #3
 800cce0:	e014      	b.n	800cd0c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cce8:	b2db      	uxtb	r3, r3
 800ccea:	2b03      	cmp	r3, #3
 800ccec:	d10d      	bne.n	800cd0a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d007      	beq.n	800cd0a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd02:	78fa      	ldrb	r2, [r7, #3]
 800cd04:	4611      	mov	r1, r2
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cd0a:	2300      	movs	r3, #0
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3708      	adds	r7, #8
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}

0800cd14 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cd14:	b480      	push	{r7}
 800cd16:	b083      	sub	sp, #12
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cd1c:	2300      	movs	r3, #0
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	370c      	adds	r7, #12
 800cd22:	46bd      	mov	sp, r7
 800cd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd28:	4770      	bx	lr

0800cd2a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cd2a:	b580      	push	{r7, lr}
 800cd2c:	b082      	sub	sp, #8
 800cd2e:	af00      	add	r7, sp, #0
 800cd30:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2201      	movs	r2, #1
 800cd36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d009      	beq.n	800cd58 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd4a:	685b      	ldr	r3, [r3, #4]
 800cd4c:	687a      	ldr	r2, [r7, #4]
 800cd4e:	6852      	ldr	r2, [r2, #4]
 800cd50:	b2d2      	uxtb	r2, r2
 800cd52:	4611      	mov	r1, r2
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	4798      	blx	r3
  }

  return USBD_OK;
 800cd58:	2300      	movs	r3, #0
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3708      	adds	r7, #8
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}

0800cd62 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cd62:	b480      	push	{r7}
 800cd64:	b087      	sub	sp, #28
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	3301      	adds	r3, #1
 800cd78:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	781b      	ldrb	r3, [r3, #0]
 800cd7e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cd80:	8a3b      	ldrh	r3, [r7, #16]
 800cd82:	021b      	lsls	r3, r3, #8
 800cd84:	b21a      	sxth	r2, r3
 800cd86:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cd8a:	4313      	orrs	r3, r2
 800cd8c:	b21b      	sxth	r3, r3
 800cd8e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cd90:	89fb      	ldrh	r3, [r7, #14]
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	371c      	adds	r7, #28
 800cd96:	46bd      	mov	sp, r7
 800cd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9c:	4770      	bx	lr
	...

0800cda0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b084      	sub	sp, #16
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
 800cda8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	781b      	ldrb	r3, [r3, #0]
 800cdb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cdb6:	2b40      	cmp	r3, #64	; 0x40
 800cdb8:	d005      	beq.n	800cdc6 <USBD_StdDevReq+0x26>
 800cdba:	2b40      	cmp	r3, #64	; 0x40
 800cdbc:	d853      	bhi.n	800ce66 <USBD_StdDevReq+0xc6>
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d00b      	beq.n	800cdda <USBD_StdDevReq+0x3a>
 800cdc2:	2b20      	cmp	r3, #32
 800cdc4:	d14f      	bne.n	800ce66 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdcc:	689b      	ldr	r3, [r3, #8]
 800cdce:	6839      	ldr	r1, [r7, #0]
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	4798      	blx	r3
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	73fb      	strb	r3, [r7, #15]
      break;
 800cdd8:	e04a      	b.n	800ce70 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	785b      	ldrb	r3, [r3, #1]
 800cdde:	2b09      	cmp	r3, #9
 800cde0:	d83b      	bhi.n	800ce5a <USBD_StdDevReq+0xba>
 800cde2:	a201      	add	r2, pc, #4	; (adr r2, 800cde8 <USBD_StdDevReq+0x48>)
 800cde4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cde8:	0800ce3d 	.word	0x0800ce3d
 800cdec:	0800ce51 	.word	0x0800ce51
 800cdf0:	0800ce5b 	.word	0x0800ce5b
 800cdf4:	0800ce47 	.word	0x0800ce47
 800cdf8:	0800ce5b 	.word	0x0800ce5b
 800cdfc:	0800ce1b 	.word	0x0800ce1b
 800ce00:	0800ce11 	.word	0x0800ce11
 800ce04:	0800ce5b 	.word	0x0800ce5b
 800ce08:	0800ce33 	.word	0x0800ce33
 800ce0c:	0800ce25 	.word	0x0800ce25
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ce10:	6839      	ldr	r1, [r7, #0]
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f000 f9de 	bl	800d1d4 <USBD_GetDescriptor>
          break;
 800ce18:	e024      	b.n	800ce64 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ce1a:	6839      	ldr	r1, [r7, #0]
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f000 fb43 	bl	800d4a8 <USBD_SetAddress>
          break;
 800ce22:	e01f      	b.n	800ce64 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ce24:	6839      	ldr	r1, [r7, #0]
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f000 fb82 	bl	800d530 <USBD_SetConfig>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	73fb      	strb	r3, [r7, #15]
          break;
 800ce30:	e018      	b.n	800ce64 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ce32:	6839      	ldr	r1, [r7, #0]
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	f000 fc21 	bl	800d67c <USBD_GetConfig>
          break;
 800ce3a:	e013      	b.n	800ce64 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ce3c:	6839      	ldr	r1, [r7, #0]
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f000 fc52 	bl	800d6e8 <USBD_GetStatus>
          break;
 800ce44:	e00e      	b.n	800ce64 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ce46:	6839      	ldr	r1, [r7, #0]
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f000 fc81 	bl	800d750 <USBD_SetFeature>
          break;
 800ce4e:	e009      	b.n	800ce64 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ce50:	6839      	ldr	r1, [r7, #0]
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f000 fc90 	bl	800d778 <USBD_ClrFeature>
          break;
 800ce58:	e004      	b.n	800ce64 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ce5a:	6839      	ldr	r1, [r7, #0]
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f000 fce7 	bl	800d830 <USBD_CtlError>
          break;
 800ce62:	bf00      	nop
      }
      break;
 800ce64:	e004      	b.n	800ce70 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ce66:	6839      	ldr	r1, [r7, #0]
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f000 fce1 	bl	800d830 <USBD_CtlError>
      break;
 800ce6e:	bf00      	nop
  }

  return ret;
 800ce70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	3710      	adds	r7, #16
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
 800ce7a:	bf00      	nop

0800ce7c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b084      	sub	sp, #16
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce86:	2300      	movs	r3, #0
 800ce88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	781b      	ldrb	r3, [r3, #0]
 800ce8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ce92:	2b40      	cmp	r3, #64	; 0x40
 800ce94:	d005      	beq.n	800cea2 <USBD_StdItfReq+0x26>
 800ce96:	2b40      	cmp	r3, #64	; 0x40
 800ce98:	d82f      	bhi.n	800cefa <USBD_StdItfReq+0x7e>
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d001      	beq.n	800cea2 <USBD_StdItfReq+0x26>
 800ce9e:	2b20      	cmp	r3, #32
 800cea0:	d12b      	bne.n	800cefa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cea8:	b2db      	uxtb	r3, r3
 800ceaa:	3b01      	subs	r3, #1
 800ceac:	2b02      	cmp	r3, #2
 800ceae:	d81d      	bhi.n	800ceec <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	889b      	ldrh	r3, [r3, #4]
 800ceb4:	b2db      	uxtb	r3, r3
 800ceb6:	2b01      	cmp	r3, #1
 800ceb8:	d813      	bhi.n	800cee2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cec0:	689b      	ldr	r3, [r3, #8]
 800cec2:	6839      	ldr	r1, [r7, #0]
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	4798      	blx	r3
 800cec8:	4603      	mov	r3, r0
 800ceca:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	88db      	ldrh	r3, [r3, #6]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d110      	bne.n	800cef6 <USBD_StdItfReq+0x7a>
 800ced4:	7bfb      	ldrb	r3, [r7, #15]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d10d      	bne.n	800cef6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f000 fcf6 	bl	800d8cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cee0:	e009      	b.n	800cef6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800cee2:	6839      	ldr	r1, [r7, #0]
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f000 fca3 	bl	800d830 <USBD_CtlError>
          break;
 800ceea:	e004      	b.n	800cef6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ceec:	6839      	ldr	r1, [r7, #0]
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f000 fc9e 	bl	800d830 <USBD_CtlError>
          break;
 800cef4:	e000      	b.n	800cef8 <USBD_StdItfReq+0x7c>
          break;
 800cef6:	bf00      	nop
      }
      break;
 800cef8:	e004      	b.n	800cf04 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800cefa:	6839      	ldr	r1, [r7, #0]
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f000 fc97 	bl	800d830 <USBD_CtlError>
      break;
 800cf02:	bf00      	nop
  }

  return ret;
 800cf04:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3710      	adds	r7, #16
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}

0800cf0e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf0e:	b580      	push	{r7, lr}
 800cf10:	b084      	sub	sp, #16
 800cf12:	af00      	add	r7, sp, #0
 800cf14:	6078      	str	r0, [r7, #4]
 800cf16:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	889b      	ldrh	r3, [r3, #4]
 800cf20:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cf2a:	2b40      	cmp	r3, #64	; 0x40
 800cf2c:	d007      	beq.n	800cf3e <USBD_StdEPReq+0x30>
 800cf2e:	2b40      	cmp	r3, #64	; 0x40
 800cf30:	f200 8145 	bhi.w	800d1be <USBD_StdEPReq+0x2b0>
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d00c      	beq.n	800cf52 <USBD_StdEPReq+0x44>
 800cf38:	2b20      	cmp	r3, #32
 800cf3a:	f040 8140 	bne.w	800d1be <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf44:	689b      	ldr	r3, [r3, #8]
 800cf46:	6839      	ldr	r1, [r7, #0]
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	4798      	blx	r3
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	73fb      	strb	r3, [r7, #15]
      break;
 800cf50:	e13a      	b.n	800d1c8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	785b      	ldrb	r3, [r3, #1]
 800cf56:	2b03      	cmp	r3, #3
 800cf58:	d007      	beq.n	800cf6a <USBD_StdEPReq+0x5c>
 800cf5a:	2b03      	cmp	r3, #3
 800cf5c:	f300 8129 	bgt.w	800d1b2 <USBD_StdEPReq+0x2a4>
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d07f      	beq.n	800d064 <USBD_StdEPReq+0x156>
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d03c      	beq.n	800cfe2 <USBD_StdEPReq+0xd4>
 800cf68:	e123      	b.n	800d1b2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf70:	b2db      	uxtb	r3, r3
 800cf72:	2b02      	cmp	r3, #2
 800cf74:	d002      	beq.n	800cf7c <USBD_StdEPReq+0x6e>
 800cf76:	2b03      	cmp	r3, #3
 800cf78:	d016      	beq.n	800cfa8 <USBD_StdEPReq+0x9a>
 800cf7a:	e02c      	b.n	800cfd6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cf7c:	7bbb      	ldrb	r3, [r7, #14]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d00d      	beq.n	800cf9e <USBD_StdEPReq+0x90>
 800cf82:	7bbb      	ldrb	r3, [r7, #14]
 800cf84:	2b80      	cmp	r3, #128	; 0x80
 800cf86:	d00a      	beq.n	800cf9e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cf88:	7bbb      	ldrb	r3, [r7, #14]
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f005 fcf7 	bl	8012980 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cf92:	2180      	movs	r1, #128	; 0x80
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f005 fcf3 	bl	8012980 <USBD_LL_StallEP>
 800cf9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cf9c:	e020      	b.n	800cfe0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800cf9e:	6839      	ldr	r1, [r7, #0]
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f000 fc45 	bl	800d830 <USBD_CtlError>
              break;
 800cfa6:	e01b      	b.n	800cfe0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	885b      	ldrh	r3, [r3, #2]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d10e      	bne.n	800cfce <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cfb0:	7bbb      	ldrb	r3, [r7, #14]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d00b      	beq.n	800cfce <USBD_StdEPReq+0xc0>
 800cfb6:	7bbb      	ldrb	r3, [r7, #14]
 800cfb8:	2b80      	cmp	r3, #128	; 0x80
 800cfba:	d008      	beq.n	800cfce <USBD_StdEPReq+0xc0>
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	88db      	ldrh	r3, [r3, #6]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d104      	bne.n	800cfce <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cfc4:	7bbb      	ldrb	r3, [r7, #14]
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f005 fcd9 	bl	8012980 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f000 fc7c 	bl	800d8cc <USBD_CtlSendStatus>

              break;
 800cfd4:	e004      	b.n	800cfe0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800cfd6:	6839      	ldr	r1, [r7, #0]
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f000 fc29 	bl	800d830 <USBD_CtlError>
              break;
 800cfde:	bf00      	nop
          }
          break;
 800cfe0:	e0ec      	b.n	800d1bc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfe8:	b2db      	uxtb	r3, r3
 800cfea:	2b02      	cmp	r3, #2
 800cfec:	d002      	beq.n	800cff4 <USBD_StdEPReq+0xe6>
 800cfee:	2b03      	cmp	r3, #3
 800cff0:	d016      	beq.n	800d020 <USBD_StdEPReq+0x112>
 800cff2:	e030      	b.n	800d056 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cff4:	7bbb      	ldrb	r3, [r7, #14]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d00d      	beq.n	800d016 <USBD_StdEPReq+0x108>
 800cffa:	7bbb      	ldrb	r3, [r7, #14]
 800cffc:	2b80      	cmp	r3, #128	; 0x80
 800cffe:	d00a      	beq.n	800d016 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d000:	7bbb      	ldrb	r3, [r7, #14]
 800d002:	4619      	mov	r1, r3
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f005 fcbb 	bl	8012980 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d00a:	2180      	movs	r1, #128	; 0x80
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f005 fcb7 	bl	8012980 <USBD_LL_StallEP>
 800d012:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d014:	e025      	b.n	800d062 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800d016:	6839      	ldr	r1, [r7, #0]
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f000 fc09 	bl	800d830 <USBD_CtlError>
              break;
 800d01e:	e020      	b.n	800d062 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	885b      	ldrh	r3, [r3, #2]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d11b      	bne.n	800d060 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d028:	7bbb      	ldrb	r3, [r7, #14]
 800d02a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d004      	beq.n	800d03c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d032:	7bbb      	ldrb	r3, [r7, #14]
 800d034:	4619      	mov	r1, r3
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f005 fcc1 	bl	80129be <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f000 fc45 	bl	800d8cc <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d048:	689b      	ldr	r3, [r3, #8]
 800d04a:	6839      	ldr	r1, [r7, #0]
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	4798      	blx	r3
 800d050:	4603      	mov	r3, r0
 800d052:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800d054:	e004      	b.n	800d060 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800d056:	6839      	ldr	r1, [r7, #0]
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f000 fbe9 	bl	800d830 <USBD_CtlError>
              break;
 800d05e:	e000      	b.n	800d062 <USBD_StdEPReq+0x154>
              break;
 800d060:	bf00      	nop
          }
          break;
 800d062:	e0ab      	b.n	800d1bc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d06a:	b2db      	uxtb	r3, r3
 800d06c:	2b02      	cmp	r3, #2
 800d06e:	d002      	beq.n	800d076 <USBD_StdEPReq+0x168>
 800d070:	2b03      	cmp	r3, #3
 800d072:	d032      	beq.n	800d0da <USBD_StdEPReq+0x1cc>
 800d074:	e097      	b.n	800d1a6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d076:	7bbb      	ldrb	r3, [r7, #14]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d007      	beq.n	800d08c <USBD_StdEPReq+0x17e>
 800d07c:	7bbb      	ldrb	r3, [r7, #14]
 800d07e:	2b80      	cmp	r3, #128	; 0x80
 800d080:	d004      	beq.n	800d08c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800d082:	6839      	ldr	r1, [r7, #0]
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f000 fbd3 	bl	800d830 <USBD_CtlError>
                break;
 800d08a:	e091      	b.n	800d1b0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d08c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d090:	2b00      	cmp	r3, #0
 800d092:	da0b      	bge.n	800d0ac <USBD_StdEPReq+0x19e>
 800d094:	7bbb      	ldrb	r3, [r7, #14]
 800d096:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d09a:	4613      	mov	r3, r2
 800d09c:	009b      	lsls	r3, r3, #2
 800d09e:	4413      	add	r3, r2
 800d0a0:	009b      	lsls	r3, r3, #2
 800d0a2:	3310      	adds	r3, #16
 800d0a4:	687a      	ldr	r2, [r7, #4]
 800d0a6:	4413      	add	r3, r2
 800d0a8:	3304      	adds	r3, #4
 800d0aa:	e00b      	b.n	800d0c4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d0ac:	7bbb      	ldrb	r3, [r7, #14]
 800d0ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d0b2:	4613      	mov	r3, r2
 800d0b4:	009b      	lsls	r3, r3, #2
 800d0b6:	4413      	add	r3, r2
 800d0b8:	009b      	lsls	r3, r3, #2
 800d0ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d0be:	687a      	ldr	r2, [r7, #4]
 800d0c0:	4413      	add	r3, r2
 800d0c2:	3304      	adds	r3, #4
 800d0c4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	2202      	movs	r2, #2
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f000 fbbd 	bl	800d852 <USBD_CtlSendData>
              break;
 800d0d8:	e06a      	b.n	800d1b0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d0da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	da11      	bge.n	800d106 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d0e2:	7bbb      	ldrb	r3, [r7, #14]
 800d0e4:	f003 020f 	and.w	r2, r3, #15
 800d0e8:	6879      	ldr	r1, [r7, #4]
 800d0ea:	4613      	mov	r3, r2
 800d0ec:	009b      	lsls	r3, r3, #2
 800d0ee:	4413      	add	r3, r2
 800d0f0:	009b      	lsls	r3, r3, #2
 800d0f2:	440b      	add	r3, r1
 800d0f4:	3324      	adds	r3, #36	; 0x24
 800d0f6:	881b      	ldrh	r3, [r3, #0]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d117      	bne.n	800d12c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d0fc:	6839      	ldr	r1, [r7, #0]
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f000 fb96 	bl	800d830 <USBD_CtlError>
                  break;
 800d104:	e054      	b.n	800d1b0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d106:	7bbb      	ldrb	r3, [r7, #14]
 800d108:	f003 020f 	and.w	r2, r3, #15
 800d10c:	6879      	ldr	r1, [r7, #4]
 800d10e:	4613      	mov	r3, r2
 800d110:	009b      	lsls	r3, r3, #2
 800d112:	4413      	add	r3, r2
 800d114:	009b      	lsls	r3, r3, #2
 800d116:	440b      	add	r3, r1
 800d118:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d11c:	881b      	ldrh	r3, [r3, #0]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d104      	bne.n	800d12c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d122:	6839      	ldr	r1, [r7, #0]
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f000 fb83 	bl	800d830 <USBD_CtlError>
                  break;
 800d12a:	e041      	b.n	800d1b0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d12c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d130:	2b00      	cmp	r3, #0
 800d132:	da0b      	bge.n	800d14c <USBD_StdEPReq+0x23e>
 800d134:	7bbb      	ldrb	r3, [r7, #14]
 800d136:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d13a:	4613      	mov	r3, r2
 800d13c:	009b      	lsls	r3, r3, #2
 800d13e:	4413      	add	r3, r2
 800d140:	009b      	lsls	r3, r3, #2
 800d142:	3310      	adds	r3, #16
 800d144:	687a      	ldr	r2, [r7, #4]
 800d146:	4413      	add	r3, r2
 800d148:	3304      	adds	r3, #4
 800d14a:	e00b      	b.n	800d164 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d14c:	7bbb      	ldrb	r3, [r7, #14]
 800d14e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d152:	4613      	mov	r3, r2
 800d154:	009b      	lsls	r3, r3, #2
 800d156:	4413      	add	r3, r2
 800d158:	009b      	lsls	r3, r3, #2
 800d15a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d15e:	687a      	ldr	r2, [r7, #4]
 800d160:	4413      	add	r3, r2
 800d162:	3304      	adds	r3, #4
 800d164:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d166:	7bbb      	ldrb	r3, [r7, #14]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d002      	beq.n	800d172 <USBD_StdEPReq+0x264>
 800d16c:	7bbb      	ldrb	r3, [r7, #14]
 800d16e:	2b80      	cmp	r3, #128	; 0x80
 800d170:	d103      	bne.n	800d17a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	2200      	movs	r2, #0
 800d176:	601a      	str	r2, [r3, #0]
 800d178:	e00e      	b.n	800d198 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d17a:	7bbb      	ldrb	r3, [r7, #14]
 800d17c:	4619      	mov	r1, r3
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f005 fc3c 	bl	80129fc <USBD_LL_IsStallEP>
 800d184:	4603      	mov	r3, r0
 800d186:	2b00      	cmp	r3, #0
 800d188:	d003      	beq.n	800d192 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	2201      	movs	r2, #1
 800d18e:	601a      	str	r2, [r3, #0]
 800d190:	e002      	b.n	800d198 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800d192:	68bb      	ldr	r3, [r7, #8]
 800d194:	2200      	movs	r2, #0
 800d196:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	2202      	movs	r2, #2
 800d19c:	4619      	mov	r1, r3
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f000 fb57 	bl	800d852 <USBD_CtlSendData>
              break;
 800d1a4:	e004      	b.n	800d1b0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800d1a6:	6839      	ldr	r1, [r7, #0]
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f000 fb41 	bl	800d830 <USBD_CtlError>
              break;
 800d1ae:	bf00      	nop
          }
          break;
 800d1b0:	e004      	b.n	800d1bc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800d1b2:	6839      	ldr	r1, [r7, #0]
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f000 fb3b 	bl	800d830 <USBD_CtlError>
          break;
 800d1ba:	bf00      	nop
      }
      break;
 800d1bc:	e004      	b.n	800d1c8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800d1be:	6839      	ldr	r1, [r7, #0]
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f000 fb35 	bl	800d830 <USBD_CtlError>
      break;
 800d1c6:	bf00      	nop
  }

  return ret;
 800d1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3710      	adds	r7, #16
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
	...

0800d1d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b084      	sub	sp, #16
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	885b      	ldrh	r3, [r3, #2]
 800d1ee:	0a1b      	lsrs	r3, r3, #8
 800d1f0:	b29b      	uxth	r3, r3
 800d1f2:	3b01      	subs	r3, #1
 800d1f4:	2b06      	cmp	r3, #6
 800d1f6:	f200 8128 	bhi.w	800d44a <USBD_GetDescriptor+0x276>
 800d1fa:	a201      	add	r2, pc, #4	; (adr r2, 800d200 <USBD_GetDescriptor+0x2c>)
 800d1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d200:	0800d21d 	.word	0x0800d21d
 800d204:	0800d235 	.word	0x0800d235
 800d208:	0800d275 	.word	0x0800d275
 800d20c:	0800d44b 	.word	0x0800d44b
 800d210:	0800d44b 	.word	0x0800d44b
 800d214:	0800d3eb 	.word	0x0800d3eb
 800d218:	0800d417 	.word	0x0800d417
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	687a      	ldr	r2, [r7, #4]
 800d226:	7c12      	ldrb	r2, [r2, #16]
 800d228:	f107 0108 	add.w	r1, r7, #8
 800d22c:	4610      	mov	r0, r2
 800d22e:	4798      	blx	r3
 800d230:	60f8      	str	r0, [r7, #12]
      break;
 800d232:	e112      	b.n	800d45a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	7c1b      	ldrb	r3, [r3, #16]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d10d      	bne.n	800d258 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d244:	f107 0208 	add.w	r2, r7, #8
 800d248:	4610      	mov	r0, r2
 800d24a:	4798      	blx	r3
 800d24c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	3301      	adds	r3, #1
 800d252:	2202      	movs	r2, #2
 800d254:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d256:	e100      	b.n	800d45a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d260:	f107 0208 	add.w	r2, r7, #8
 800d264:	4610      	mov	r0, r2
 800d266:	4798      	blx	r3
 800d268:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	3301      	adds	r3, #1
 800d26e:	2202      	movs	r2, #2
 800d270:	701a      	strb	r2, [r3, #0]
      break;
 800d272:	e0f2      	b.n	800d45a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	885b      	ldrh	r3, [r3, #2]
 800d278:	b2db      	uxtb	r3, r3
 800d27a:	2b05      	cmp	r3, #5
 800d27c:	f200 80ac 	bhi.w	800d3d8 <USBD_GetDescriptor+0x204>
 800d280:	a201      	add	r2, pc, #4	; (adr r2, 800d288 <USBD_GetDescriptor+0xb4>)
 800d282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d286:	bf00      	nop
 800d288:	0800d2a1 	.word	0x0800d2a1
 800d28c:	0800d2d5 	.word	0x0800d2d5
 800d290:	0800d309 	.word	0x0800d309
 800d294:	0800d33d 	.word	0x0800d33d
 800d298:	0800d371 	.word	0x0800d371
 800d29c:	0800d3a5 	.word	0x0800d3a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d2a6:	685b      	ldr	r3, [r3, #4]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d00b      	beq.n	800d2c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	687a      	ldr	r2, [r7, #4]
 800d2b6:	7c12      	ldrb	r2, [r2, #16]
 800d2b8:	f107 0108 	add.w	r1, r7, #8
 800d2bc:	4610      	mov	r0, r2
 800d2be:	4798      	blx	r3
 800d2c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d2c2:	e091      	b.n	800d3e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d2c4:	6839      	ldr	r1, [r7, #0]
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f000 fab2 	bl	800d830 <USBD_CtlError>
            err++;
 800d2cc:	7afb      	ldrb	r3, [r7, #11]
 800d2ce:	3301      	adds	r3, #1
 800d2d0:	72fb      	strb	r3, [r7, #11]
          break;
 800d2d2:	e089      	b.n	800d3e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d2da:	689b      	ldr	r3, [r3, #8]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d00b      	beq.n	800d2f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d2e6:	689b      	ldr	r3, [r3, #8]
 800d2e8:	687a      	ldr	r2, [r7, #4]
 800d2ea:	7c12      	ldrb	r2, [r2, #16]
 800d2ec:	f107 0108 	add.w	r1, r7, #8
 800d2f0:	4610      	mov	r0, r2
 800d2f2:	4798      	blx	r3
 800d2f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d2f6:	e077      	b.n	800d3e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d2f8:	6839      	ldr	r1, [r7, #0]
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f000 fa98 	bl	800d830 <USBD_CtlError>
            err++;
 800d300:	7afb      	ldrb	r3, [r7, #11]
 800d302:	3301      	adds	r3, #1
 800d304:	72fb      	strb	r3, [r7, #11]
          break;
 800d306:	e06f      	b.n	800d3e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d30e:	68db      	ldr	r3, [r3, #12]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d00b      	beq.n	800d32c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d31a:	68db      	ldr	r3, [r3, #12]
 800d31c:	687a      	ldr	r2, [r7, #4]
 800d31e:	7c12      	ldrb	r2, [r2, #16]
 800d320:	f107 0108 	add.w	r1, r7, #8
 800d324:	4610      	mov	r0, r2
 800d326:	4798      	blx	r3
 800d328:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d32a:	e05d      	b.n	800d3e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d32c:	6839      	ldr	r1, [r7, #0]
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f000 fa7e 	bl	800d830 <USBD_CtlError>
            err++;
 800d334:	7afb      	ldrb	r3, [r7, #11]
 800d336:	3301      	adds	r3, #1
 800d338:	72fb      	strb	r3, [r7, #11]
          break;
 800d33a:	e055      	b.n	800d3e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d342:	691b      	ldr	r3, [r3, #16]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d00b      	beq.n	800d360 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d34e:	691b      	ldr	r3, [r3, #16]
 800d350:	687a      	ldr	r2, [r7, #4]
 800d352:	7c12      	ldrb	r2, [r2, #16]
 800d354:	f107 0108 	add.w	r1, r7, #8
 800d358:	4610      	mov	r0, r2
 800d35a:	4798      	blx	r3
 800d35c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d35e:	e043      	b.n	800d3e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d360:	6839      	ldr	r1, [r7, #0]
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f000 fa64 	bl	800d830 <USBD_CtlError>
            err++;
 800d368:	7afb      	ldrb	r3, [r7, #11]
 800d36a:	3301      	adds	r3, #1
 800d36c:	72fb      	strb	r3, [r7, #11]
          break;
 800d36e:	e03b      	b.n	800d3e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d376:	695b      	ldr	r3, [r3, #20]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d00b      	beq.n	800d394 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d382:	695b      	ldr	r3, [r3, #20]
 800d384:	687a      	ldr	r2, [r7, #4]
 800d386:	7c12      	ldrb	r2, [r2, #16]
 800d388:	f107 0108 	add.w	r1, r7, #8
 800d38c:	4610      	mov	r0, r2
 800d38e:	4798      	blx	r3
 800d390:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d392:	e029      	b.n	800d3e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d394:	6839      	ldr	r1, [r7, #0]
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f000 fa4a 	bl	800d830 <USBD_CtlError>
            err++;
 800d39c:	7afb      	ldrb	r3, [r7, #11]
 800d39e:	3301      	adds	r3, #1
 800d3a0:	72fb      	strb	r3, [r7, #11]
          break;
 800d3a2:	e021      	b.n	800d3e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d3aa:	699b      	ldr	r3, [r3, #24]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d00b      	beq.n	800d3c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d3b6:	699b      	ldr	r3, [r3, #24]
 800d3b8:	687a      	ldr	r2, [r7, #4]
 800d3ba:	7c12      	ldrb	r2, [r2, #16]
 800d3bc:	f107 0108 	add.w	r1, r7, #8
 800d3c0:	4610      	mov	r0, r2
 800d3c2:	4798      	blx	r3
 800d3c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d3c6:	e00f      	b.n	800d3e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d3c8:	6839      	ldr	r1, [r7, #0]
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f000 fa30 	bl	800d830 <USBD_CtlError>
            err++;
 800d3d0:	7afb      	ldrb	r3, [r7, #11]
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	72fb      	strb	r3, [r7, #11]
          break;
 800d3d6:	e007      	b.n	800d3e8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d3d8:	6839      	ldr	r1, [r7, #0]
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f000 fa28 	bl	800d830 <USBD_CtlError>
          err++;
 800d3e0:	7afb      	ldrb	r3, [r7, #11]
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800d3e6:	bf00      	nop
      }
      break;
 800d3e8:	e037      	b.n	800d45a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	7c1b      	ldrb	r3, [r3, #16]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d109      	bne.n	800d406 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3fa:	f107 0208 	add.w	r2, r7, #8
 800d3fe:	4610      	mov	r0, r2
 800d400:	4798      	blx	r3
 800d402:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d404:	e029      	b.n	800d45a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d406:	6839      	ldr	r1, [r7, #0]
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f000 fa11 	bl	800d830 <USBD_CtlError>
        err++;
 800d40e:	7afb      	ldrb	r3, [r7, #11]
 800d410:	3301      	adds	r3, #1
 800d412:	72fb      	strb	r3, [r7, #11]
      break;
 800d414:	e021      	b.n	800d45a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	7c1b      	ldrb	r3, [r3, #16]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d10d      	bne.n	800d43a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d426:	f107 0208 	add.w	r2, r7, #8
 800d42a:	4610      	mov	r0, r2
 800d42c:	4798      	blx	r3
 800d42e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	3301      	adds	r3, #1
 800d434:	2207      	movs	r2, #7
 800d436:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d438:	e00f      	b.n	800d45a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d43a:	6839      	ldr	r1, [r7, #0]
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f000 f9f7 	bl	800d830 <USBD_CtlError>
        err++;
 800d442:	7afb      	ldrb	r3, [r7, #11]
 800d444:	3301      	adds	r3, #1
 800d446:	72fb      	strb	r3, [r7, #11]
      break;
 800d448:	e007      	b.n	800d45a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d44a:	6839      	ldr	r1, [r7, #0]
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f000 f9ef 	bl	800d830 <USBD_CtlError>
      err++;
 800d452:	7afb      	ldrb	r3, [r7, #11]
 800d454:	3301      	adds	r3, #1
 800d456:	72fb      	strb	r3, [r7, #11]
      break;
 800d458:	bf00      	nop
  }

  if (err != 0U)
 800d45a:	7afb      	ldrb	r3, [r7, #11]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d11e      	bne.n	800d49e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	88db      	ldrh	r3, [r3, #6]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d016      	beq.n	800d496 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d468:	893b      	ldrh	r3, [r7, #8]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d00e      	beq.n	800d48c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	88da      	ldrh	r2, [r3, #6]
 800d472:	893b      	ldrh	r3, [r7, #8]
 800d474:	4293      	cmp	r3, r2
 800d476:	bf28      	it	cs
 800d478:	4613      	movcs	r3, r2
 800d47a:	b29b      	uxth	r3, r3
 800d47c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d47e:	893b      	ldrh	r3, [r7, #8]
 800d480:	461a      	mov	r2, r3
 800d482:	68f9      	ldr	r1, [r7, #12]
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f000 f9e4 	bl	800d852 <USBD_CtlSendData>
 800d48a:	e009      	b.n	800d4a0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d48c:	6839      	ldr	r1, [r7, #0]
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f000 f9ce 	bl	800d830 <USBD_CtlError>
 800d494:	e004      	b.n	800d4a0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	f000 fa18 	bl	800d8cc <USBD_CtlSendStatus>
 800d49c:	e000      	b.n	800d4a0 <USBD_GetDescriptor+0x2cc>
    return;
 800d49e:	bf00      	nop
  }
}
 800d4a0:	3710      	adds	r7, #16
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
 800d4a6:	bf00      	nop

0800d4a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b084      	sub	sp, #16
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
 800d4b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	889b      	ldrh	r3, [r3, #4]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d131      	bne.n	800d51e <USBD_SetAddress+0x76>
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	88db      	ldrh	r3, [r3, #6]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d12d      	bne.n	800d51e <USBD_SetAddress+0x76>
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	885b      	ldrh	r3, [r3, #2]
 800d4c6:	2b7f      	cmp	r3, #127	; 0x7f
 800d4c8:	d829      	bhi.n	800d51e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	885b      	ldrh	r3, [r3, #2]
 800d4ce:	b2db      	uxtb	r3, r3
 800d4d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4dc:	b2db      	uxtb	r3, r3
 800d4de:	2b03      	cmp	r3, #3
 800d4e0:	d104      	bne.n	800d4ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d4e2:	6839      	ldr	r1, [r7, #0]
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f000 f9a3 	bl	800d830 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4ea:	e01d      	b.n	800d528 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	7bfa      	ldrb	r2, [r7, #15]
 800d4f0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d4f4:	7bfb      	ldrb	r3, [r7, #15]
 800d4f6:	4619      	mov	r1, r3
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f005 faab 	bl	8012a54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f000 f9e4 	bl	800d8cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d504:	7bfb      	ldrb	r3, [r7, #15]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d004      	beq.n	800d514 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2202      	movs	r2, #2
 800d50e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d512:	e009      	b.n	800d528 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2201      	movs	r2, #1
 800d518:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d51c:	e004      	b.n	800d528 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d51e:	6839      	ldr	r1, [r7, #0]
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f000 f985 	bl	800d830 <USBD_CtlError>
  }
}
 800d526:	bf00      	nop
 800d528:	bf00      	nop
 800d52a:	3710      	adds	r7, #16
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}

0800d530 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b084      	sub	sp, #16
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
 800d538:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d53a:	2300      	movs	r3, #0
 800d53c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	885b      	ldrh	r3, [r3, #2]
 800d542:	b2da      	uxtb	r2, r3
 800d544:	4b4c      	ldr	r3, [pc, #304]	; (800d678 <USBD_SetConfig+0x148>)
 800d546:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d548:	4b4b      	ldr	r3, [pc, #300]	; (800d678 <USBD_SetConfig+0x148>)
 800d54a:	781b      	ldrb	r3, [r3, #0]
 800d54c:	2b01      	cmp	r3, #1
 800d54e:	d905      	bls.n	800d55c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d550:	6839      	ldr	r1, [r7, #0]
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f000 f96c 	bl	800d830 <USBD_CtlError>
    return USBD_FAIL;
 800d558:	2303      	movs	r3, #3
 800d55a:	e088      	b.n	800d66e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d562:	b2db      	uxtb	r3, r3
 800d564:	2b02      	cmp	r3, #2
 800d566:	d002      	beq.n	800d56e <USBD_SetConfig+0x3e>
 800d568:	2b03      	cmp	r3, #3
 800d56a:	d025      	beq.n	800d5b8 <USBD_SetConfig+0x88>
 800d56c:	e071      	b.n	800d652 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d56e:	4b42      	ldr	r3, [pc, #264]	; (800d678 <USBD_SetConfig+0x148>)
 800d570:	781b      	ldrb	r3, [r3, #0]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d01c      	beq.n	800d5b0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d576:	4b40      	ldr	r3, [pc, #256]	; (800d678 <USBD_SetConfig+0x148>)
 800d578:	781b      	ldrb	r3, [r3, #0]
 800d57a:	461a      	mov	r2, r3
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d580:	4b3d      	ldr	r3, [pc, #244]	; (800d678 <USBD_SetConfig+0x148>)
 800d582:	781b      	ldrb	r3, [r3, #0]
 800d584:	4619      	mov	r1, r3
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f7ff f948 	bl	800c81c <USBD_SetClassConfig>
 800d58c:	4603      	mov	r3, r0
 800d58e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d590:	7bfb      	ldrb	r3, [r7, #15]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d004      	beq.n	800d5a0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d596:	6839      	ldr	r1, [r7, #0]
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f000 f949 	bl	800d830 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d59e:	e065      	b.n	800d66c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f000 f993 	bl	800d8cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2203      	movs	r2, #3
 800d5aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d5ae:	e05d      	b.n	800d66c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f000 f98b 	bl	800d8cc <USBD_CtlSendStatus>
      break;
 800d5b6:	e059      	b.n	800d66c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d5b8:	4b2f      	ldr	r3, [pc, #188]	; (800d678 <USBD_SetConfig+0x148>)
 800d5ba:	781b      	ldrb	r3, [r3, #0]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d112      	bne.n	800d5e6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2202      	movs	r2, #2
 800d5c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d5c8:	4b2b      	ldr	r3, [pc, #172]	; (800d678 <USBD_SetConfig+0x148>)
 800d5ca:	781b      	ldrb	r3, [r3, #0]
 800d5cc:	461a      	mov	r2, r3
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d5d2:	4b29      	ldr	r3, [pc, #164]	; (800d678 <USBD_SetConfig+0x148>)
 800d5d4:	781b      	ldrb	r3, [r3, #0]
 800d5d6:	4619      	mov	r1, r3
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f7ff f93b 	bl	800c854 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f000 f974 	bl	800d8cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d5e4:	e042      	b.n	800d66c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d5e6:	4b24      	ldr	r3, [pc, #144]	; (800d678 <USBD_SetConfig+0x148>)
 800d5e8:	781b      	ldrb	r3, [r3, #0]
 800d5ea:	461a      	mov	r2, r3
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	685b      	ldr	r3, [r3, #4]
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	d02a      	beq.n	800d64a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	685b      	ldr	r3, [r3, #4]
 800d5f8:	b2db      	uxtb	r3, r3
 800d5fa:	4619      	mov	r1, r3
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f7ff f929 	bl	800c854 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d602:	4b1d      	ldr	r3, [pc, #116]	; (800d678 <USBD_SetConfig+0x148>)
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	461a      	mov	r2, r3
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d60c:	4b1a      	ldr	r3, [pc, #104]	; (800d678 <USBD_SetConfig+0x148>)
 800d60e:	781b      	ldrb	r3, [r3, #0]
 800d610:	4619      	mov	r1, r3
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f7ff f902 	bl	800c81c <USBD_SetClassConfig>
 800d618:	4603      	mov	r3, r0
 800d61a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d61c:	7bfb      	ldrb	r3, [r7, #15]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d00f      	beq.n	800d642 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d622:	6839      	ldr	r1, [r7, #0]
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f000 f903 	bl	800d830 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	685b      	ldr	r3, [r3, #4]
 800d62e:	b2db      	uxtb	r3, r3
 800d630:	4619      	mov	r1, r3
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f7ff f90e 	bl	800c854 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2202      	movs	r2, #2
 800d63c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d640:	e014      	b.n	800d66c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f000 f942 	bl	800d8cc <USBD_CtlSendStatus>
      break;
 800d648:	e010      	b.n	800d66c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f000 f93e 	bl	800d8cc <USBD_CtlSendStatus>
      break;
 800d650:	e00c      	b.n	800d66c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d652:	6839      	ldr	r1, [r7, #0]
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f000 f8eb 	bl	800d830 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d65a:	4b07      	ldr	r3, [pc, #28]	; (800d678 <USBD_SetConfig+0x148>)
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	4619      	mov	r1, r3
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f7ff f8f7 	bl	800c854 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d666:	2303      	movs	r3, #3
 800d668:	73fb      	strb	r3, [r7, #15]
      break;
 800d66a:	bf00      	nop
  }

  return ret;
 800d66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3710      	adds	r7, #16
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
 800d676:	bf00      	nop
 800d678:	200003c2 	.word	0x200003c2

0800d67c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b082      	sub	sp, #8
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	88db      	ldrh	r3, [r3, #6]
 800d68a:	2b01      	cmp	r3, #1
 800d68c:	d004      	beq.n	800d698 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d68e:	6839      	ldr	r1, [r7, #0]
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f000 f8cd 	bl	800d830 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d696:	e023      	b.n	800d6e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d69e:	b2db      	uxtb	r3, r3
 800d6a0:	2b02      	cmp	r3, #2
 800d6a2:	dc02      	bgt.n	800d6aa <USBD_GetConfig+0x2e>
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	dc03      	bgt.n	800d6b0 <USBD_GetConfig+0x34>
 800d6a8:	e015      	b.n	800d6d6 <USBD_GetConfig+0x5a>
 800d6aa:	2b03      	cmp	r3, #3
 800d6ac:	d00b      	beq.n	800d6c6 <USBD_GetConfig+0x4a>
 800d6ae:	e012      	b.n	800d6d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	3308      	adds	r3, #8
 800d6ba:	2201      	movs	r2, #1
 800d6bc:	4619      	mov	r1, r3
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f000 f8c7 	bl	800d852 <USBD_CtlSendData>
        break;
 800d6c4:	e00c      	b.n	800d6e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	3304      	adds	r3, #4
 800d6ca:	2201      	movs	r2, #1
 800d6cc:	4619      	mov	r1, r3
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f000 f8bf 	bl	800d852 <USBD_CtlSendData>
        break;
 800d6d4:	e004      	b.n	800d6e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d6d6:	6839      	ldr	r1, [r7, #0]
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f000 f8a9 	bl	800d830 <USBD_CtlError>
        break;
 800d6de:	bf00      	nop
}
 800d6e0:	bf00      	nop
 800d6e2:	3708      	adds	r7, #8
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}

0800d6e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b082      	sub	sp, #8
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6f8:	b2db      	uxtb	r3, r3
 800d6fa:	3b01      	subs	r3, #1
 800d6fc:	2b02      	cmp	r3, #2
 800d6fe:	d81e      	bhi.n	800d73e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	88db      	ldrh	r3, [r3, #6]
 800d704:	2b02      	cmp	r3, #2
 800d706:	d004      	beq.n	800d712 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d708:	6839      	ldr	r1, [r7, #0]
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f000 f890 	bl	800d830 <USBD_CtlError>
        break;
 800d710:	e01a      	b.n	800d748 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2201      	movs	r2, #1
 800d716:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d005      	beq.n	800d72e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	68db      	ldr	r3, [r3, #12]
 800d726:	f043 0202 	orr.w	r2, r3, #2
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	330c      	adds	r3, #12
 800d732:	2202      	movs	r2, #2
 800d734:	4619      	mov	r1, r3
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f000 f88b 	bl	800d852 <USBD_CtlSendData>
      break;
 800d73c:	e004      	b.n	800d748 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d73e:	6839      	ldr	r1, [r7, #0]
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f000 f875 	bl	800d830 <USBD_CtlError>
      break;
 800d746:	bf00      	nop
  }
}
 800d748:	bf00      	nop
 800d74a:	3708      	adds	r7, #8
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b082      	sub	sp, #8
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	885b      	ldrh	r3, [r3, #2]
 800d75e:	2b01      	cmp	r3, #1
 800d760:	d106      	bne.n	800d770 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2201      	movs	r2, #1
 800d766:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f000 f8ae 	bl	800d8cc <USBD_CtlSendStatus>
  }
}
 800d770:	bf00      	nop
 800d772:	3708      	adds	r7, #8
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}

0800d778 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b082      	sub	sp, #8
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
 800d780:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d788:	b2db      	uxtb	r3, r3
 800d78a:	3b01      	subs	r3, #1
 800d78c:	2b02      	cmp	r3, #2
 800d78e:	d80b      	bhi.n	800d7a8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	885b      	ldrh	r3, [r3, #2]
 800d794:	2b01      	cmp	r3, #1
 800d796:	d10c      	bne.n	800d7b2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2200      	movs	r2, #0
 800d79c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f000 f893 	bl	800d8cc <USBD_CtlSendStatus>
      }
      break;
 800d7a6:	e004      	b.n	800d7b2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d7a8:	6839      	ldr	r1, [r7, #0]
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f000 f840 	bl	800d830 <USBD_CtlError>
      break;
 800d7b0:	e000      	b.n	800d7b4 <USBD_ClrFeature+0x3c>
      break;
 800d7b2:	bf00      	nop
  }
}
 800d7b4:	bf00      	nop
 800d7b6:	3708      	adds	r7, #8
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}

0800d7bc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b084      	sub	sp, #16
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
 800d7c4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	781a      	ldrb	r2, [r3, #0]
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	3301      	adds	r3, #1
 800d7d6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	781a      	ldrb	r2, [r3, #0]
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d7e6:	68f8      	ldr	r0, [r7, #12]
 800d7e8:	f7ff fabb 	bl	800cd62 <SWAPBYTE>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	461a      	mov	r2, r3
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	3301      	adds	r3, #1
 800d7f8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d800:	68f8      	ldr	r0, [r7, #12]
 800d802:	f7ff faae 	bl	800cd62 <SWAPBYTE>
 800d806:	4603      	mov	r3, r0
 800d808:	461a      	mov	r2, r3
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	3301      	adds	r3, #1
 800d812:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	3301      	adds	r3, #1
 800d818:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d81a:	68f8      	ldr	r0, [r7, #12]
 800d81c:	f7ff faa1 	bl	800cd62 <SWAPBYTE>
 800d820:	4603      	mov	r3, r0
 800d822:	461a      	mov	r2, r3
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	80da      	strh	r2, [r3, #6]
}
 800d828:	bf00      	nop
 800d82a:	3710      	adds	r7, #16
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}

0800d830 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b082      	sub	sp, #8
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
 800d838:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d83a:	2180      	movs	r1, #128	; 0x80
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f005 f89f 	bl	8012980 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d842:	2100      	movs	r1, #0
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f005 f89b 	bl	8012980 <USBD_LL_StallEP>
}
 800d84a:	bf00      	nop
 800d84c:	3708      	adds	r7, #8
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}

0800d852 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d852:	b580      	push	{r7, lr}
 800d854:	b084      	sub	sp, #16
 800d856:	af00      	add	r7, sp, #0
 800d858:	60f8      	str	r0, [r7, #12]
 800d85a:	60b9      	str	r1, [r7, #8]
 800d85c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	2202      	movs	r2, #2
 800d862:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	687a      	ldr	r2, [r7, #4]
 800d86a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	687a      	ldr	r2, [r7, #4]
 800d870:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	68ba      	ldr	r2, [r7, #8]
 800d876:	2100      	movs	r1, #0
 800d878:	68f8      	ldr	r0, [r7, #12]
 800d87a:	f005 f90a 	bl	8012a92 <USBD_LL_Transmit>

  return USBD_OK;
 800d87e:	2300      	movs	r3, #0
}
 800d880:	4618      	mov	r0, r3
 800d882:	3710      	adds	r7, #16
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}

0800d888 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b084      	sub	sp, #16
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	60f8      	str	r0, [r7, #12]
 800d890:	60b9      	str	r1, [r7, #8]
 800d892:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	68ba      	ldr	r2, [r7, #8]
 800d898:	2100      	movs	r1, #0
 800d89a:	68f8      	ldr	r0, [r7, #12]
 800d89c:	f005 f8f9 	bl	8012a92 <USBD_LL_Transmit>

  return USBD_OK;
 800d8a0:	2300      	movs	r3, #0
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3710      	adds	r7, #16
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}

0800d8aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d8aa:	b580      	push	{r7, lr}
 800d8ac:	b084      	sub	sp, #16
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	60f8      	str	r0, [r7, #12]
 800d8b2:	60b9      	str	r1, [r7, #8]
 800d8b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	68ba      	ldr	r2, [r7, #8]
 800d8ba:	2100      	movs	r1, #0
 800d8bc:	68f8      	ldr	r0, [r7, #12]
 800d8be:	f005 f909 	bl	8012ad4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d8c2:	2300      	movs	r3, #0
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3710      	adds	r7, #16
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}

0800d8cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b082      	sub	sp, #8
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2204      	movs	r2, #4
 800d8d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d8dc:	2300      	movs	r3, #0
 800d8de:	2200      	movs	r2, #0
 800d8e0:	2100      	movs	r1, #0
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f005 f8d5 	bl	8012a92 <USBD_LL_Transmit>

  return USBD_OK;
 800d8e8:	2300      	movs	r3, #0
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3708      	adds	r7, #8
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}

0800d8f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d8f2:	b580      	push	{r7, lr}
 800d8f4:	b082      	sub	sp, #8
 800d8f6:	af00      	add	r7, sp, #0
 800d8f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2205      	movs	r2, #5
 800d8fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d902:	2300      	movs	r3, #0
 800d904:	2200      	movs	r2, #0
 800d906:	2100      	movs	r1, #0
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f005 f8e3 	bl	8012ad4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d90e:	2300      	movs	r3, #0
}
 800d910:	4618      	mov	r0, r3
 800d912:	3708      	adds	r7, #8
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}

0800d918 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b084      	sub	sp, #16
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	4603      	mov	r3, r0
 800d920:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d922:	79fb      	ldrb	r3, [r7, #7]
 800d924:	4a08      	ldr	r2, [pc, #32]	; (800d948 <disk_status+0x30>)
 800d926:	009b      	lsls	r3, r3, #2
 800d928:	4413      	add	r3, r2
 800d92a:	685b      	ldr	r3, [r3, #4]
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	79fa      	ldrb	r2, [r7, #7]
 800d930:	4905      	ldr	r1, [pc, #20]	; (800d948 <disk_status+0x30>)
 800d932:	440a      	add	r2, r1
 800d934:	7a12      	ldrb	r2, [r2, #8]
 800d936:	4610      	mov	r0, r2
 800d938:	4798      	blx	r3
 800d93a:	4603      	mov	r3, r0
 800d93c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d93e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d940:	4618      	mov	r0, r3
 800d942:	3710      	adds	r7, #16
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}
 800d948:	200003ec 	.word	0x200003ec

0800d94c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b084      	sub	sp, #16
 800d950:	af00      	add	r7, sp, #0
 800d952:	4603      	mov	r3, r0
 800d954:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d956:	2300      	movs	r3, #0
 800d958:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d95a:	79fb      	ldrb	r3, [r7, #7]
 800d95c:	4a0d      	ldr	r2, [pc, #52]	; (800d994 <disk_initialize+0x48>)
 800d95e:	5cd3      	ldrb	r3, [r2, r3]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d111      	bne.n	800d988 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d964:	79fb      	ldrb	r3, [r7, #7]
 800d966:	4a0b      	ldr	r2, [pc, #44]	; (800d994 <disk_initialize+0x48>)
 800d968:	2101      	movs	r1, #1
 800d96a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d96c:	79fb      	ldrb	r3, [r7, #7]
 800d96e:	4a09      	ldr	r2, [pc, #36]	; (800d994 <disk_initialize+0x48>)
 800d970:	009b      	lsls	r3, r3, #2
 800d972:	4413      	add	r3, r2
 800d974:	685b      	ldr	r3, [r3, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	79fa      	ldrb	r2, [r7, #7]
 800d97a:	4906      	ldr	r1, [pc, #24]	; (800d994 <disk_initialize+0x48>)
 800d97c:	440a      	add	r2, r1
 800d97e:	7a12      	ldrb	r2, [r2, #8]
 800d980:	4610      	mov	r0, r2
 800d982:	4798      	blx	r3
 800d984:	4603      	mov	r3, r0
 800d986:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d988:	7bfb      	ldrb	r3, [r7, #15]
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3710      	adds	r7, #16
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
 800d992:	bf00      	nop
 800d994:	200003ec 	.word	0x200003ec

0800d998 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d998:	b590      	push	{r4, r7, lr}
 800d99a:	b087      	sub	sp, #28
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	60b9      	str	r1, [r7, #8]
 800d9a0:	607a      	str	r2, [r7, #4]
 800d9a2:	603b      	str	r3, [r7, #0]
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d9a8:	7bfb      	ldrb	r3, [r7, #15]
 800d9aa:	4a0a      	ldr	r2, [pc, #40]	; (800d9d4 <disk_read+0x3c>)
 800d9ac:	009b      	lsls	r3, r3, #2
 800d9ae:	4413      	add	r3, r2
 800d9b0:	685b      	ldr	r3, [r3, #4]
 800d9b2:	689c      	ldr	r4, [r3, #8]
 800d9b4:	7bfb      	ldrb	r3, [r7, #15]
 800d9b6:	4a07      	ldr	r2, [pc, #28]	; (800d9d4 <disk_read+0x3c>)
 800d9b8:	4413      	add	r3, r2
 800d9ba:	7a18      	ldrb	r0, [r3, #8]
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	68b9      	ldr	r1, [r7, #8]
 800d9c2:	47a0      	blx	r4
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	75fb      	strb	r3, [r7, #23]
  return res;
 800d9c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	371c      	adds	r7, #28
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd90      	pop	{r4, r7, pc}
 800d9d2:	bf00      	nop
 800d9d4:	200003ec 	.word	0x200003ec

0800d9d8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d9d8:	b590      	push	{r4, r7, lr}
 800d9da:	b087      	sub	sp, #28
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	60b9      	str	r1, [r7, #8]
 800d9e0:	607a      	str	r2, [r7, #4]
 800d9e2:	603b      	str	r3, [r7, #0]
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d9e8:	7bfb      	ldrb	r3, [r7, #15]
 800d9ea:	4a0a      	ldr	r2, [pc, #40]	; (800da14 <disk_write+0x3c>)
 800d9ec:	009b      	lsls	r3, r3, #2
 800d9ee:	4413      	add	r3, r2
 800d9f0:	685b      	ldr	r3, [r3, #4]
 800d9f2:	68dc      	ldr	r4, [r3, #12]
 800d9f4:	7bfb      	ldrb	r3, [r7, #15]
 800d9f6:	4a07      	ldr	r2, [pc, #28]	; (800da14 <disk_write+0x3c>)
 800d9f8:	4413      	add	r3, r2
 800d9fa:	7a18      	ldrb	r0, [r3, #8]
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	687a      	ldr	r2, [r7, #4]
 800da00:	68b9      	ldr	r1, [r7, #8]
 800da02:	47a0      	blx	r4
 800da04:	4603      	mov	r3, r0
 800da06:	75fb      	strb	r3, [r7, #23]
  return res;
 800da08:	7dfb      	ldrb	r3, [r7, #23]
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	371c      	adds	r7, #28
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd90      	pop	{r4, r7, pc}
 800da12:	bf00      	nop
 800da14:	200003ec 	.word	0x200003ec

0800da18 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	4603      	mov	r3, r0
 800da20:	603a      	str	r2, [r7, #0]
 800da22:	71fb      	strb	r3, [r7, #7]
 800da24:	460b      	mov	r3, r1
 800da26:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800da28:	79fb      	ldrb	r3, [r7, #7]
 800da2a:	4a09      	ldr	r2, [pc, #36]	; (800da50 <disk_ioctl+0x38>)
 800da2c:	009b      	lsls	r3, r3, #2
 800da2e:	4413      	add	r3, r2
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	691b      	ldr	r3, [r3, #16]
 800da34:	79fa      	ldrb	r2, [r7, #7]
 800da36:	4906      	ldr	r1, [pc, #24]	; (800da50 <disk_ioctl+0x38>)
 800da38:	440a      	add	r2, r1
 800da3a:	7a10      	ldrb	r0, [r2, #8]
 800da3c:	79b9      	ldrb	r1, [r7, #6]
 800da3e:	683a      	ldr	r2, [r7, #0]
 800da40:	4798      	blx	r3
 800da42:	4603      	mov	r3, r0
 800da44:	73fb      	strb	r3, [r7, #15]
  return res;
 800da46:	7bfb      	ldrb	r3, [r7, #15]
}
 800da48:	4618      	mov	r0, r3
 800da4a:	3710      	adds	r7, #16
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}
 800da50:	200003ec 	.word	0x200003ec

0800da54 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800da54:	b480      	push	{r7}
 800da56:	b085      	sub	sp, #20
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	3301      	adds	r3, #1
 800da60:	781b      	ldrb	r3, [r3, #0]
 800da62:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800da64:	89fb      	ldrh	r3, [r7, #14]
 800da66:	021b      	lsls	r3, r3, #8
 800da68:	b21a      	sxth	r2, r3
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	781b      	ldrb	r3, [r3, #0]
 800da6e:	b21b      	sxth	r3, r3
 800da70:	4313      	orrs	r3, r2
 800da72:	b21b      	sxth	r3, r3
 800da74:	81fb      	strh	r3, [r7, #14]
	return rv;
 800da76:	89fb      	ldrh	r3, [r7, #14]
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3714      	adds	r7, #20
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr

0800da84 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800da84:	b480      	push	{r7}
 800da86:	b085      	sub	sp, #20
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	3303      	adds	r3, #3
 800da90:	781b      	ldrb	r3, [r3, #0]
 800da92:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	021b      	lsls	r3, r3, #8
 800da98:	687a      	ldr	r2, [r7, #4]
 800da9a:	3202      	adds	r2, #2
 800da9c:	7812      	ldrb	r2, [r2, #0]
 800da9e:	4313      	orrs	r3, r2
 800daa0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	021b      	lsls	r3, r3, #8
 800daa6:	687a      	ldr	r2, [r7, #4]
 800daa8:	3201      	adds	r2, #1
 800daaa:	7812      	ldrb	r2, [r2, #0]
 800daac:	4313      	orrs	r3, r2
 800daae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	021b      	lsls	r3, r3, #8
 800dab4:	687a      	ldr	r2, [r7, #4]
 800dab6:	7812      	ldrb	r2, [r2, #0]
 800dab8:	4313      	orrs	r3, r2
 800daba:	60fb      	str	r3, [r7, #12]
	return rv;
 800dabc:	68fb      	ldr	r3, [r7, #12]
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3714      	adds	r7, #20
 800dac2:	46bd      	mov	sp, r7
 800dac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac8:	4770      	bx	lr

0800daca <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800daca:	b480      	push	{r7}
 800dacc:	b083      	sub	sp, #12
 800dace:	af00      	add	r7, sp, #0
 800dad0:	6078      	str	r0, [r7, #4]
 800dad2:	460b      	mov	r3, r1
 800dad4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	1c5a      	adds	r2, r3, #1
 800dada:	607a      	str	r2, [r7, #4]
 800dadc:	887a      	ldrh	r2, [r7, #2]
 800dade:	b2d2      	uxtb	r2, r2
 800dae0:	701a      	strb	r2, [r3, #0]
 800dae2:	887b      	ldrh	r3, [r7, #2]
 800dae4:	0a1b      	lsrs	r3, r3, #8
 800dae6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	1c5a      	adds	r2, r3, #1
 800daec:	607a      	str	r2, [r7, #4]
 800daee:	887a      	ldrh	r2, [r7, #2]
 800daf0:	b2d2      	uxtb	r2, r2
 800daf2:	701a      	strb	r2, [r3, #0]
}
 800daf4:	bf00      	nop
 800daf6:	370c      	adds	r7, #12
 800daf8:	46bd      	mov	sp, r7
 800dafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafe:	4770      	bx	lr

0800db00 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800db00:	b480      	push	{r7}
 800db02:	b083      	sub	sp, #12
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
 800db08:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	1c5a      	adds	r2, r3, #1
 800db0e:	607a      	str	r2, [r7, #4]
 800db10:	683a      	ldr	r2, [r7, #0]
 800db12:	b2d2      	uxtb	r2, r2
 800db14:	701a      	strb	r2, [r3, #0]
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	0a1b      	lsrs	r3, r3, #8
 800db1a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	1c5a      	adds	r2, r3, #1
 800db20:	607a      	str	r2, [r7, #4]
 800db22:	683a      	ldr	r2, [r7, #0]
 800db24:	b2d2      	uxtb	r2, r2
 800db26:	701a      	strb	r2, [r3, #0]
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	0a1b      	lsrs	r3, r3, #8
 800db2c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	1c5a      	adds	r2, r3, #1
 800db32:	607a      	str	r2, [r7, #4]
 800db34:	683a      	ldr	r2, [r7, #0]
 800db36:	b2d2      	uxtb	r2, r2
 800db38:	701a      	strb	r2, [r3, #0]
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	0a1b      	lsrs	r3, r3, #8
 800db3e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	1c5a      	adds	r2, r3, #1
 800db44:	607a      	str	r2, [r7, #4]
 800db46:	683a      	ldr	r2, [r7, #0]
 800db48:	b2d2      	uxtb	r2, r2
 800db4a:	701a      	strb	r2, [r3, #0]
}
 800db4c:	bf00      	nop
 800db4e:	370c      	adds	r7, #12
 800db50:	46bd      	mov	sp, r7
 800db52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db56:	4770      	bx	lr

0800db58 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800db58:	b480      	push	{r7}
 800db5a:	b087      	sub	sp, #28
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	60f8      	str	r0, [r7, #12]
 800db60:	60b9      	str	r1, [r7, #8]
 800db62:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d00d      	beq.n	800db8e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800db72:	693a      	ldr	r2, [r7, #16]
 800db74:	1c53      	adds	r3, r2, #1
 800db76:	613b      	str	r3, [r7, #16]
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	1c59      	adds	r1, r3, #1
 800db7c:	6179      	str	r1, [r7, #20]
 800db7e:	7812      	ldrb	r2, [r2, #0]
 800db80:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	3b01      	subs	r3, #1
 800db86:	607b      	str	r3, [r7, #4]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d1f1      	bne.n	800db72 <mem_cpy+0x1a>
	}
}
 800db8e:	bf00      	nop
 800db90:	371c      	adds	r7, #28
 800db92:	46bd      	mov	sp, r7
 800db94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db98:	4770      	bx	lr

0800db9a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800db9a:	b480      	push	{r7}
 800db9c:	b087      	sub	sp, #28
 800db9e:	af00      	add	r7, sp, #0
 800dba0:	60f8      	str	r0, [r7, #12]
 800dba2:	60b9      	str	r1, [r7, #8]
 800dba4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	1c5a      	adds	r2, r3, #1
 800dbae:	617a      	str	r2, [r7, #20]
 800dbb0:	68ba      	ldr	r2, [r7, #8]
 800dbb2:	b2d2      	uxtb	r2, r2
 800dbb4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	3b01      	subs	r3, #1
 800dbba:	607b      	str	r3, [r7, #4]
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d1f3      	bne.n	800dbaa <mem_set+0x10>
}
 800dbc2:	bf00      	nop
 800dbc4:	bf00      	nop
 800dbc6:	371c      	adds	r7, #28
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbce:	4770      	bx	lr

0800dbd0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800dbd0:	b480      	push	{r7}
 800dbd2:	b089      	sub	sp, #36	; 0x24
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	60f8      	str	r0, [r7, #12]
 800dbd8:	60b9      	str	r1, [r7, #8]
 800dbda:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	61fb      	str	r3, [r7, #28]
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800dbe8:	69fb      	ldr	r3, [r7, #28]
 800dbea:	1c5a      	adds	r2, r3, #1
 800dbec:	61fa      	str	r2, [r7, #28]
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	69bb      	ldr	r3, [r7, #24]
 800dbf4:	1c5a      	adds	r2, r3, #1
 800dbf6:	61ba      	str	r2, [r7, #24]
 800dbf8:	781b      	ldrb	r3, [r3, #0]
 800dbfa:	1acb      	subs	r3, r1, r3
 800dbfc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	3b01      	subs	r3, #1
 800dc02:	607b      	str	r3, [r7, #4]
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d002      	beq.n	800dc10 <mem_cmp+0x40>
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d0eb      	beq.n	800dbe8 <mem_cmp+0x18>

	return r;
 800dc10:	697b      	ldr	r3, [r7, #20]
}
 800dc12:	4618      	mov	r0, r3
 800dc14:	3724      	adds	r7, #36	; 0x24
 800dc16:	46bd      	mov	sp, r7
 800dc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1c:	4770      	bx	lr

0800dc1e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800dc1e:	b480      	push	{r7}
 800dc20:	b083      	sub	sp, #12
 800dc22:	af00      	add	r7, sp, #0
 800dc24:	6078      	str	r0, [r7, #4]
 800dc26:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800dc28:	e002      	b.n	800dc30 <chk_chr+0x12>
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	3301      	adds	r3, #1
 800dc2e:	607b      	str	r3, [r7, #4]
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d005      	beq.n	800dc44 <chk_chr+0x26>
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	781b      	ldrb	r3, [r3, #0]
 800dc3c:	461a      	mov	r2, r3
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	4293      	cmp	r3, r2
 800dc42:	d1f2      	bne.n	800dc2a <chk_chr+0xc>
	return *str;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	781b      	ldrb	r3, [r3, #0]
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	370c      	adds	r7, #12
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc52:	4770      	bx	lr

0800dc54 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b082      	sub	sp, #8
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d009      	beq.n	800dc76 <lock_fs+0x22>
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	68db      	ldr	r3, [r3, #12]
 800dc66:	4618      	mov	r0, r3
 800dc68:	f002 fcde 	bl	8010628 <ff_req_grant>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d001      	beq.n	800dc76 <lock_fs+0x22>
 800dc72:	2301      	movs	r3, #1
 800dc74:	e000      	b.n	800dc78 <lock_fs+0x24>
 800dc76:	2300      	movs	r3, #0
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3708      	adds	r7, #8
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}

0800dc80 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b082      	sub	sp, #8
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	460b      	mov	r3, r1
 800dc8a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d00d      	beq.n	800dcae <unlock_fs+0x2e>
 800dc92:	78fb      	ldrb	r3, [r7, #3]
 800dc94:	2b0c      	cmp	r3, #12
 800dc96:	d00a      	beq.n	800dcae <unlock_fs+0x2e>
 800dc98:	78fb      	ldrb	r3, [r7, #3]
 800dc9a:	2b0b      	cmp	r3, #11
 800dc9c:	d007      	beq.n	800dcae <unlock_fs+0x2e>
 800dc9e:	78fb      	ldrb	r3, [r7, #3]
 800dca0:	2b0f      	cmp	r3, #15
 800dca2:	d004      	beq.n	800dcae <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	68db      	ldr	r3, [r3, #12]
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f002 fcd2 	bl	8010652 <ff_rel_grant>
	}
}
 800dcae:	bf00      	nop
 800dcb0:	3708      	adds	r7, #8
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}
	...

0800dcb8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b085      	sub	sp, #20
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
 800dcc0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	60bb      	str	r3, [r7, #8]
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	60fb      	str	r3, [r7, #12]
 800dcca:	e029      	b.n	800dd20 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800dccc:	4a27      	ldr	r2, [pc, #156]	; (800dd6c <chk_lock+0xb4>)
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	011b      	lsls	r3, r3, #4
 800dcd2:	4413      	add	r3, r2
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d01d      	beq.n	800dd16 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800dcda:	4a24      	ldr	r2, [pc, #144]	; (800dd6c <chk_lock+0xb4>)
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	011b      	lsls	r3, r3, #4
 800dce0:	4413      	add	r3, r2
 800dce2:	681a      	ldr	r2, [r3, #0]
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	429a      	cmp	r2, r3
 800dcea:	d116      	bne.n	800dd1a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800dcec:	4a1f      	ldr	r2, [pc, #124]	; (800dd6c <chk_lock+0xb4>)
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	011b      	lsls	r3, r3, #4
 800dcf2:	4413      	add	r3, r2
 800dcf4:	3304      	adds	r3, #4
 800dcf6:	681a      	ldr	r2, [r3, #0]
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	d10c      	bne.n	800dd1a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800dd00:	4a1a      	ldr	r2, [pc, #104]	; (800dd6c <chk_lock+0xb4>)
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	011b      	lsls	r3, r3, #4
 800dd06:	4413      	add	r3, r2
 800dd08:	3308      	adds	r3, #8
 800dd0a:	681a      	ldr	r2, [r3, #0]
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800dd10:	429a      	cmp	r2, r3
 800dd12:	d102      	bne.n	800dd1a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800dd14:	e007      	b.n	800dd26 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800dd16:	2301      	movs	r3, #1
 800dd18:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	3301      	adds	r3, #1
 800dd1e:	60fb      	str	r3, [r7, #12]
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	2b01      	cmp	r3, #1
 800dd24:	d9d2      	bls.n	800dccc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	2b02      	cmp	r3, #2
 800dd2a:	d109      	bne.n	800dd40 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d102      	bne.n	800dd38 <chk_lock+0x80>
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	2b02      	cmp	r3, #2
 800dd36:	d101      	bne.n	800dd3c <chk_lock+0x84>
 800dd38:	2300      	movs	r3, #0
 800dd3a:	e010      	b.n	800dd5e <chk_lock+0xa6>
 800dd3c:	2312      	movs	r3, #18
 800dd3e:	e00e      	b.n	800dd5e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d108      	bne.n	800dd58 <chk_lock+0xa0>
 800dd46:	4a09      	ldr	r2, [pc, #36]	; (800dd6c <chk_lock+0xb4>)
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	011b      	lsls	r3, r3, #4
 800dd4c:	4413      	add	r3, r2
 800dd4e:	330c      	adds	r3, #12
 800dd50:	881b      	ldrh	r3, [r3, #0]
 800dd52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd56:	d101      	bne.n	800dd5c <chk_lock+0xa4>
 800dd58:	2310      	movs	r3, #16
 800dd5a:	e000      	b.n	800dd5e <chk_lock+0xa6>
 800dd5c:	2300      	movs	r3, #0
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3714      	adds	r7, #20
 800dd62:	46bd      	mov	sp, r7
 800dd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd68:	4770      	bx	lr
 800dd6a:	bf00      	nop
 800dd6c:	200003cc 	.word	0x200003cc

0800dd70 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800dd70:	b480      	push	{r7}
 800dd72:	b083      	sub	sp, #12
 800dd74:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800dd76:	2300      	movs	r3, #0
 800dd78:	607b      	str	r3, [r7, #4]
 800dd7a:	e002      	b.n	800dd82 <enq_lock+0x12>
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	3301      	adds	r3, #1
 800dd80:	607b      	str	r3, [r7, #4]
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2b01      	cmp	r3, #1
 800dd86:	d806      	bhi.n	800dd96 <enq_lock+0x26>
 800dd88:	4a09      	ldr	r2, [pc, #36]	; (800ddb0 <enq_lock+0x40>)
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	011b      	lsls	r3, r3, #4
 800dd8e:	4413      	add	r3, r2
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d1f2      	bne.n	800dd7c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2b02      	cmp	r3, #2
 800dd9a:	bf14      	ite	ne
 800dd9c:	2301      	movne	r3, #1
 800dd9e:	2300      	moveq	r3, #0
 800dda0:	b2db      	uxtb	r3, r3
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	370c      	adds	r7, #12
 800dda6:	46bd      	mov	sp, r7
 800dda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddac:	4770      	bx	lr
 800ddae:	bf00      	nop
 800ddb0:	200003cc 	.word	0x200003cc

0800ddb4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ddb4:	b480      	push	{r7}
 800ddb6:	b085      	sub	sp, #20
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
 800ddbc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	60fb      	str	r3, [r7, #12]
 800ddc2:	e01f      	b.n	800de04 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ddc4:	4a41      	ldr	r2, [pc, #260]	; (800decc <inc_lock+0x118>)
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	011b      	lsls	r3, r3, #4
 800ddca:	4413      	add	r3, r2
 800ddcc:	681a      	ldr	r2, [r3, #0]
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	429a      	cmp	r2, r3
 800ddd4:	d113      	bne.n	800ddfe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ddd6:	4a3d      	ldr	r2, [pc, #244]	; (800decc <inc_lock+0x118>)
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	011b      	lsls	r3, r3, #4
 800dddc:	4413      	add	r3, r2
 800ddde:	3304      	adds	r3, #4
 800dde0:	681a      	ldr	r2, [r3, #0]
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800dde6:	429a      	cmp	r2, r3
 800dde8:	d109      	bne.n	800ddfe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ddea:	4a38      	ldr	r2, [pc, #224]	; (800decc <inc_lock+0x118>)
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	011b      	lsls	r3, r3, #4
 800ddf0:	4413      	add	r3, r2
 800ddf2:	3308      	adds	r3, #8
 800ddf4:	681a      	ldr	r2, [r3, #0]
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	d006      	beq.n	800de0c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	3301      	adds	r3, #1
 800de02:	60fb      	str	r3, [r7, #12]
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	2b01      	cmp	r3, #1
 800de08:	d9dc      	bls.n	800ddc4 <inc_lock+0x10>
 800de0a:	e000      	b.n	800de0e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800de0c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2b02      	cmp	r3, #2
 800de12:	d132      	bne.n	800de7a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800de14:	2300      	movs	r3, #0
 800de16:	60fb      	str	r3, [r7, #12]
 800de18:	e002      	b.n	800de20 <inc_lock+0x6c>
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	3301      	adds	r3, #1
 800de1e:	60fb      	str	r3, [r7, #12]
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	2b01      	cmp	r3, #1
 800de24:	d806      	bhi.n	800de34 <inc_lock+0x80>
 800de26:	4a29      	ldr	r2, [pc, #164]	; (800decc <inc_lock+0x118>)
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	011b      	lsls	r3, r3, #4
 800de2c:	4413      	add	r3, r2
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d1f2      	bne.n	800de1a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2b02      	cmp	r3, #2
 800de38:	d101      	bne.n	800de3e <inc_lock+0x8a>
 800de3a:	2300      	movs	r3, #0
 800de3c:	e040      	b.n	800dec0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681a      	ldr	r2, [r3, #0]
 800de42:	4922      	ldr	r1, [pc, #136]	; (800decc <inc_lock+0x118>)
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	011b      	lsls	r3, r3, #4
 800de48:	440b      	add	r3, r1
 800de4a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	689a      	ldr	r2, [r3, #8]
 800de50:	491e      	ldr	r1, [pc, #120]	; (800decc <inc_lock+0x118>)
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	011b      	lsls	r3, r3, #4
 800de56:	440b      	add	r3, r1
 800de58:	3304      	adds	r3, #4
 800de5a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	695a      	ldr	r2, [r3, #20]
 800de60:	491a      	ldr	r1, [pc, #104]	; (800decc <inc_lock+0x118>)
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	011b      	lsls	r3, r3, #4
 800de66:	440b      	add	r3, r1
 800de68:	3308      	adds	r3, #8
 800de6a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800de6c:	4a17      	ldr	r2, [pc, #92]	; (800decc <inc_lock+0x118>)
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	011b      	lsls	r3, r3, #4
 800de72:	4413      	add	r3, r2
 800de74:	330c      	adds	r3, #12
 800de76:	2200      	movs	r2, #0
 800de78:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d009      	beq.n	800de94 <inc_lock+0xe0>
 800de80:	4a12      	ldr	r2, [pc, #72]	; (800decc <inc_lock+0x118>)
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	011b      	lsls	r3, r3, #4
 800de86:	4413      	add	r3, r2
 800de88:	330c      	adds	r3, #12
 800de8a:	881b      	ldrh	r3, [r3, #0]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d001      	beq.n	800de94 <inc_lock+0xe0>
 800de90:	2300      	movs	r3, #0
 800de92:	e015      	b.n	800dec0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d108      	bne.n	800deac <inc_lock+0xf8>
 800de9a:	4a0c      	ldr	r2, [pc, #48]	; (800decc <inc_lock+0x118>)
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	011b      	lsls	r3, r3, #4
 800dea0:	4413      	add	r3, r2
 800dea2:	330c      	adds	r3, #12
 800dea4:	881b      	ldrh	r3, [r3, #0]
 800dea6:	3301      	adds	r3, #1
 800dea8:	b29a      	uxth	r2, r3
 800deaa:	e001      	b.n	800deb0 <inc_lock+0xfc>
 800deac:	f44f 7280 	mov.w	r2, #256	; 0x100
 800deb0:	4906      	ldr	r1, [pc, #24]	; (800decc <inc_lock+0x118>)
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	011b      	lsls	r3, r3, #4
 800deb6:	440b      	add	r3, r1
 800deb8:	330c      	adds	r3, #12
 800deba:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	3301      	adds	r3, #1
}
 800dec0:	4618      	mov	r0, r3
 800dec2:	3714      	adds	r7, #20
 800dec4:	46bd      	mov	sp, r7
 800dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deca:	4770      	bx	lr
 800decc:	200003cc 	.word	0x200003cc

0800ded0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ded0:	b480      	push	{r7}
 800ded2:	b085      	sub	sp, #20
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	3b01      	subs	r3, #1
 800dedc:	607b      	str	r3, [r7, #4]
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	2b01      	cmp	r3, #1
 800dee2:	d825      	bhi.n	800df30 <dec_lock+0x60>
		n = Files[i].ctr;
 800dee4:	4a17      	ldr	r2, [pc, #92]	; (800df44 <dec_lock+0x74>)
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	011b      	lsls	r3, r3, #4
 800deea:	4413      	add	r3, r2
 800deec:	330c      	adds	r3, #12
 800deee:	881b      	ldrh	r3, [r3, #0]
 800def0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800def2:	89fb      	ldrh	r3, [r7, #14]
 800def4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800def8:	d101      	bne.n	800defe <dec_lock+0x2e>
 800defa:	2300      	movs	r3, #0
 800defc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800defe:	89fb      	ldrh	r3, [r7, #14]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d002      	beq.n	800df0a <dec_lock+0x3a>
 800df04:	89fb      	ldrh	r3, [r7, #14]
 800df06:	3b01      	subs	r3, #1
 800df08:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800df0a:	4a0e      	ldr	r2, [pc, #56]	; (800df44 <dec_lock+0x74>)
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	011b      	lsls	r3, r3, #4
 800df10:	4413      	add	r3, r2
 800df12:	330c      	adds	r3, #12
 800df14:	89fa      	ldrh	r2, [r7, #14]
 800df16:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800df18:	89fb      	ldrh	r3, [r7, #14]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d105      	bne.n	800df2a <dec_lock+0x5a>
 800df1e:	4a09      	ldr	r2, [pc, #36]	; (800df44 <dec_lock+0x74>)
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	011b      	lsls	r3, r3, #4
 800df24:	4413      	add	r3, r2
 800df26:	2200      	movs	r2, #0
 800df28:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800df2a:	2300      	movs	r3, #0
 800df2c:	737b      	strb	r3, [r7, #13]
 800df2e:	e001      	b.n	800df34 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800df30:	2302      	movs	r3, #2
 800df32:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800df34:	7b7b      	ldrb	r3, [r7, #13]
}
 800df36:	4618      	mov	r0, r3
 800df38:	3714      	adds	r7, #20
 800df3a:	46bd      	mov	sp, r7
 800df3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df40:	4770      	bx	lr
 800df42:	bf00      	nop
 800df44:	200003cc 	.word	0x200003cc

0800df48 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800df48:	b480      	push	{r7}
 800df4a:	b085      	sub	sp, #20
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800df50:	2300      	movs	r3, #0
 800df52:	60fb      	str	r3, [r7, #12]
 800df54:	e010      	b.n	800df78 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800df56:	4a0d      	ldr	r2, [pc, #52]	; (800df8c <clear_lock+0x44>)
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	011b      	lsls	r3, r3, #4
 800df5c:	4413      	add	r3, r2
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	687a      	ldr	r2, [r7, #4]
 800df62:	429a      	cmp	r2, r3
 800df64:	d105      	bne.n	800df72 <clear_lock+0x2a>
 800df66:	4a09      	ldr	r2, [pc, #36]	; (800df8c <clear_lock+0x44>)
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	011b      	lsls	r3, r3, #4
 800df6c:	4413      	add	r3, r2
 800df6e:	2200      	movs	r2, #0
 800df70:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	3301      	adds	r3, #1
 800df76:	60fb      	str	r3, [r7, #12]
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	2b01      	cmp	r3, #1
 800df7c:	d9eb      	bls.n	800df56 <clear_lock+0xe>
	}
}
 800df7e:	bf00      	nop
 800df80:	bf00      	nop
 800df82:	3714      	adds	r7, #20
 800df84:	46bd      	mov	sp, r7
 800df86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8a:	4770      	bx	lr
 800df8c:	200003cc 	.word	0x200003cc

0800df90 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b086      	sub	sp, #24
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800df98:	2300      	movs	r3, #0
 800df9a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	78db      	ldrb	r3, [r3, #3]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d034      	beq.n	800e00e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfa8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	7858      	ldrb	r0, [r3, #1]
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	697a      	ldr	r2, [r7, #20]
 800dfb8:	f7ff fd0e 	bl	800d9d8 <disk_write>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d002      	beq.n	800dfc8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	73fb      	strb	r3, [r7, #15]
 800dfc6:	e022      	b.n	800e00e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfd2:	697a      	ldr	r2, [r7, #20]
 800dfd4:	1ad2      	subs	r2, r2, r3
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	69db      	ldr	r3, [r3, #28]
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	d217      	bcs.n	800e00e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	789b      	ldrb	r3, [r3, #2]
 800dfe2:	613b      	str	r3, [r7, #16]
 800dfe4:	e010      	b.n	800e008 <sync_window+0x78>
					wsect += fs->fsize;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	69db      	ldr	r3, [r3, #28]
 800dfea:	697a      	ldr	r2, [r7, #20]
 800dfec:	4413      	add	r3, r2
 800dfee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	7858      	ldrb	r0, [r3, #1]
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dffa:	2301      	movs	r3, #1
 800dffc:	697a      	ldr	r2, [r7, #20]
 800dffe:	f7ff fceb 	bl	800d9d8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e002:	693b      	ldr	r3, [r7, #16]
 800e004:	3b01      	subs	r3, #1
 800e006:	613b      	str	r3, [r7, #16]
 800e008:	693b      	ldr	r3, [r7, #16]
 800e00a:	2b01      	cmp	r3, #1
 800e00c:	d8eb      	bhi.n	800dfe6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e00e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e010:	4618      	mov	r0, r3
 800e012:	3718      	adds	r7, #24
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}

0800e018 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b084      	sub	sp, #16
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e022:	2300      	movs	r3, #0
 800e024:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e02a:	683a      	ldr	r2, [r7, #0]
 800e02c:	429a      	cmp	r2, r3
 800e02e:	d01b      	beq.n	800e068 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f7ff ffad 	bl	800df90 <sync_window>
 800e036:	4603      	mov	r3, r0
 800e038:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e03a:	7bfb      	ldrb	r3, [r7, #15]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d113      	bne.n	800e068 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	7858      	ldrb	r0, [r3, #1]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e04a:	2301      	movs	r3, #1
 800e04c:	683a      	ldr	r2, [r7, #0]
 800e04e:	f7ff fca3 	bl	800d998 <disk_read>
 800e052:	4603      	mov	r3, r0
 800e054:	2b00      	cmp	r3, #0
 800e056:	d004      	beq.n	800e062 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e058:	f04f 33ff 	mov.w	r3, #4294967295
 800e05c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e05e:	2301      	movs	r3, #1
 800e060:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	683a      	ldr	r2, [r7, #0]
 800e066:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800e068:	7bfb      	ldrb	r3, [r7, #15]
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3710      	adds	r7, #16
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}
	...

0800e074 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b084      	sub	sp, #16
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f7ff ff87 	bl	800df90 <sync_window>
 800e082:	4603      	mov	r3, r0
 800e084:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e086:	7bfb      	ldrb	r3, [r7, #15]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d158      	bne.n	800e13e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	781b      	ldrb	r3, [r3, #0]
 800e090:	2b03      	cmp	r3, #3
 800e092:	d148      	bne.n	800e126 <sync_fs+0xb2>
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	791b      	ldrb	r3, [r3, #4]
 800e098:	2b01      	cmp	r3, #1
 800e09a:	d144      	bne.n	800e126 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	3334      	adds	r3, #52	; 0x34
 800e0a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e0a4:	2100      	movs	r1, #0
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f7ff fd77 	bl	800db9a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	3334      	adds	r3, #52	; 0x34
 800e0b0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e0b4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f7ff fd06 	bl	800daca <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	3334      	adds	r3, #52	; 0x34
 800e0c2:	4921      	ldr	r1, [pc, #132]	; (800e148 <sync_fs+0xd4>)
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f7ff fd1b 	bl	800db00 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	3334      	adds	r3, #52	; 0x34
 800e0ce:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e0d2:	491e      	ldr	r1, [pc, #120]	; (800e14c <sync_fs+0xd8>)
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f7ff fd13 	bl	800db00 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	3334      	adds	r3, #52	; 0x34
 800e0de:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	695b      	ldr	r3, [r3, #20]
 800e0e6:	4619      	mov	r1, r3
 800e0e8:	4610      	mov	r0, r2
 800e0ea:	f7ff fd09 	bl	800db00 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	3334      	adds	r3, #52	; 0x34
 800e0f2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	691b      	ldr	r3, [r3, #16]
 800e0fa:	4619      	mov	r1, r3
 800e0fc:	4610      	mov	r0, r2
 800e0fe:	f7ff fcff 	bl	800db00 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6a1b      	ldr	r3, [r3, #32]
 800e106:	1c5a      	adds	r2, r3, #1
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	7858      	ldrb	r0, [r3, #1]
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e11a:	2301      	movs	r3, #1
 800e11c:	f7ff fc5c 	bl	800d9d8 <disk_write>
			fs->fsi_flag = 0;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2200      	movs	r2, #0
 800e124:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	785b      	ldrb	r3, [r3, #1]
 800e12a:	2200      	movs	r2, #0
 800e12c:	2100      	movs	r1, #0
 800e12e:	4618      	mov	r0, r3
 800e130:	f7ff fc72 	bl	800da18 <disk_ioctl>
 800e134:	4603      	mov	r3, r0
 800e136:	2b00      	cmp	r3, #0
 800e138:	d001      	beq.n	800e13e <sync_fs+0xca>
 800e13a:	2301      	movs	r3, #1
 800e13c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e140:	4618      	mov	r0, r3
 800e142:	3710      	adds	r7, #16
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}
 800e148:	41615252 	.word	0x41615252
 800e14c:	61417272 	.word	0x61417272

0800e150 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e150:	b480      	push	{r7}
 800e152:	b083      	sub	sp, #12
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	3b02      	subs	r3, #2
 800e15e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	699b      	ldr	r3, [r3, #24]
 800e164:	3b02      	subs	r3, #2
 800e166:	683a      	ldr	r2, [r7, #0]
 800e168:	429a      	cmp	r2, r3
 800e16a:	d301      	bcc.n	800e170 <clust2sect+0x20>
 800e16c:	2300      	movs	r3, #0
 800e16e:	e008      	b.n	800e182 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	895b      	ldrh	r3, [r3, #10]
 800e174:	461a      	mov	r2, r3
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	fb03 f202 	mul.w	r2, r3, r2
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e180:	4413      	add	r3, r2
}
 800e182:	4618      	mov	r0, r3
 800e184:	370c      	adds	r7, #12
 800e186:	46bd      	mov	sp, r7
 800e188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18c:	4770      	bx	lr

0800e18e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e18e:	b580      	push	{r7, lr}
 800e190:	b086      	sub	sp, #24
 800e192:	af00      	add	r7, sp, #0
 800e194:	6078      	str	r0, [r7, #4]
 800e196:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	2b01      	cmp	r3, #1
 800e1a2:	d904      	bls.n	800e1ae <get_fat+0x20>
 800e1a4:	693b      	ldr	r3, [r7, #16]
 800e1a6:	699b      	ldr	r3, [r3, #24]
 800e1a8:	683a      	ldr	r2, [r7, #0]
 800e1aa:	429a      	cmp	r2, r3
 800e1ac:	d302      	bcc.n	800e1b4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e1ae:	2301      	movs	r3, #1
 800e1b0:	617b      	str	r3, [r7, #20]
 800e1b2:	e08f      	b.n	800e2d4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e1b4:	f04f 33ff 	mov.w	r3, #4294967295
 800e1b8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e1ba:	693b      	ldr	r3, [r7, #16]
 800e1bc:	781b      	ldrb	r3, [r3, #0]
 800e1be:	2b03      	cmp	r3, #3
 800e1c0:	d062      	beq.n	800e288 <get_fat+0xfa>
 800e1c2:	2b03      	cmp	r3, #3
 800e1c4:	dc7c      	bgt.n	800e2c0 <get_fat+0x132>
 800e1c6:	2b01      	cmp	r3, #1
 800e1c8:	d002      	beq.n	800e1d0 <get_fat+0x42>
 800e1ca:	2b02      	cmp	r3, #2
 800e1cc:	d042      	beq.n	800e254 <get_fat+0xc6>
 800e1ce:	e077      	b.n	800e2c0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	60fb      	str	r3, [r7, #12]
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	085b      	lsrs	r3, r3, #1
 800e1d8:	68fa      	ldr	r2, [r7, #12]
 800e1da:	4413      	add	r3, r2
 800e1dc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	0a5b      	lsrs	r3, r3, #9
 800e1e6:	4413      	add	r3, r2
 800e1e8:	4619      	mov	r1, r3
 800e1ea:	6938      	ldr	r0, [r7, #16]
 800e1ec:	f7ff ff14 	bl	800e018 <move_window>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d167      	bne.n	800e2c6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	1c5a      	adds	r2, r3, #1
 800e1fa:	60fa      	str	r2, [r7, #12]
 800e1fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e200:	693a      	ldr	r2, [r7, #16]
 800e202:	4413      	add	r3, r2
 800e204:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e208:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e20a:	693b      	ldr	r3, [r7, #16]
 800e20c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	0a5b      	lsrs	r3, r3, #9
 800e212:	4413      	add	r3, r2
 800e214:	4619      	mov	r1, r3
 800e216:	6938      	ldr	r0, [r7, #16]
 800e218:	f7ff fefe 	bl	800e018 <move_window>
 800e21c:	4603      	mov	r3, r0
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d153      	bne.n	800e2ca <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e228:	693a      	ldr	r2, [r7, #16]
 800e22a:	4413      	add	r3, r2
 800e22c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e230:	021b      	lsls	r3, r3, #8
 800e232:	461a      	mov	r2, r3
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	4313      	orrs	r3, r2
 800e238:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	f003 0301 	and.w	r3, r3, #1
 800e240:	2b00      	cmp	r3, #0
 800e242:	d002      	beq.n	800e24a <get_fat+0xbc>
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	091b      	lsrs	r3, r3, #4
 800e248:	e002      	b.n	800e250 <get_fat+0xc2>
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e250:	617b      	str	r3, [r7, #20]
			break;
 800e252:	e03f      	b.n	800e2d4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e254:	693b      	ldr	r3, [r7, #16]
 800e256:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	0a1b      	lsrs	r3, r3, #8
 800e25c:	4413      	add	r3, r2
 800e25e:	4619      	mov	r1, r3
 800e260:	6938      	ldr	r0, [r7, #16]
 800e262:	f7ff fed9 	bl	800e018 <move_window>
 800e266:	4603      	mov	r3, r0
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d130      	bne.n	800e2ce <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e26c:	693b      	ldr	r3, [r7, #16]
 800e26e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	005b      	lsls	r3, r3, #1
 800e276:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e27a:	4413      	add	r3, r2
 800e27c:	4618      	mov	r0, r3
 800e27e:	f7ff fbe9 	bl	800da54 <ld_word>
 800e282:	4603      	mov	r3, r0
 800e284:	617b      	str	r3, [r7, #20]
			break;
 800e286:	e025      	b.n	800e2d4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e288:	693b      	ldr	r3, [r7, #16]
 800e28a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	09db      	lsrs	r3, r3, #7
 800e290:	4413      	add	r3, r2
 800e292:	4619      	mov	r1, r3
 800e294:	6938      	ldr	r0, [r7, #16]
 800e296:	f7ff febf 	bl	800e018 <move_window>
 800e29a:	4603      	mov	r3, r0
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d118      	bne.n	800e2d2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	009b      	lsls	r3, r3, #2
 800e2aa:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e2ae:	4413      	add	r3, r2
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f7ff fbe7 	bl	800da84 <ld_dword>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e2bc:	617b      	str	r3, [r7, #20]
			break;
 800e2be:	e009      	b.n	800e2d4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	617b      	str	r3, [r7, #20]
 800e2c4:	e006      	b.n	800e2d4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e2c6:	bf00      	nop
 800e2c8:	e004      	b.n	800e2d4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e2ca:	bf00      	nop
 800e2cc:	e002      	b.n	800e2d4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e2ce:	bf00      	nop
 800e2d0:	e000      	b.n	800e2d4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e2d2:	bf00      	nop
		}
	}

	return val;
 800e2d4:	697b      	ldr	r3, [r7, #20]
}
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	3718      	adds	r7, #24
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	bd80      	pop	{r7, pc}

0800e2de <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e2de:	b590      	push	{r4, r7, lr}
 800e2e0:	b089      	sub	sp, #36	; 0x24
 800e2e2:	af00      	add	r7, sp, #0
 800e2e4:	60f8      	str	r0, [r7, #12]
 800e2e6:	60b9      	str	r1, [r7, #8]
 800e2e8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e2ea:	2302      	movs	r3, #2
 800e2ec:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e2ee:	68bb      	ldr	r3, [r7, #8]
 800e2f0:	2b01      	cmp	r3, #1
 800e2f2:	f240 80d2 	bls.w	800e49a <put_fat+0x1bc>
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	699b      	ldr	r3, [r3, #24]
 800e2fa:	68ba      	ldr	r2, [r7, #8]
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	f080 80cc 	bcs.w	800e49a <put_fat+0x1bc>
		switch (fs->fs_type) {
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	781b      	ldrb	r3, [r3, #0]
 800e306:	2b03      	cmp	r3, #3
 800e308:	f000 8096 	beq.w	800e438 <put_fat+0x15a>
 800e30c:	2b03      	cmp	r3, #3
 800e30e:	f300 80cd 	bgt.w	800e4ac <put_fat+0x1ce>
 800e312:	2b01      	cmp	r3, #1
 800e314:	d002      	beq.n	800e31c <put_fat+0x3e>
 800e316:	2b02      	cmp	r3, #2
 800e318:	d06e      	beq.n	800e3f8 <put_fat+0x11a>
 800e31a:	e0c7      	b.n	800e4ac <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	61bb      	str	r3, [r7, #24]
 800e320:	69bb      	ldr	r3, [r7, #24]
 800e322:	085b      	lsrs	r3, r3, #1
 800e324:	69ba      	ldr	r2, [r7, #24]
 800e326:	4413      	add	r3, r2
 800e328:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e32e:	69bb      	ldr	r3, [r7, #24]
 800e330:	0a5b      	lsrs	r3, r3, #9
 800e332:	4413      	add	r3, r2
 800e334:	4619      	mov	r1, r3
 800e336:	68f8      	ldr	r0, [r7, #12]
 800e338:	f7ff fe6e 	bl	800e018 <move_window>
 800e33c:	4603      	mov	r3, r0
 800e33e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e340:	7ffb      	ldrb	r3, [r7, #31]
 800e342:	2b00      	cmp	r3, #0
 800e344:	f040 80ab 	bne.w	800e49e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e34e:	69bb      	ldr	r3, [r7, #24]
 800e350:	1c59      	adds	r1, r3, #1
 800e352:	61b9      	str	r1, [r7, #24]
 800e354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e358:	4413      	add	r3, r2
 800e35a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	f003 0301 	and.w	r3, r3, #1
 800e362:	2b00      	cmp	r3, #0
 800e364:	d00d      	beq.n	800e382 <put_fat+0xa4>
 800e366:	697b      	ldr	r3, [r7, #20]
 800e368:	781b      	ldrb	r3, [r3, #0]
 800e36a:	b25b      	sxtb	r3, r3
 800e36c:	f003 030f 	and.w	r3, r3, #15
 800e370:	b25a      	sxtb	r2, r3
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	b2db      	uxtb	r3, r3
 800e376:	011b      	lsls	r3, r3, #4
 800e378:	b25b      	sxtb	r3, r3
 800e37a:	4313      	orrs	r3, r2
 800e37c:	b25b      	sxtb	r3, r3
 800e37e:	b2db      	uxtb	r3, r3
 800e380:	e001      	b.n	800e386 <put_fat+0xa8>
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	b2db      	uxtb	r3, r3
 800e386:	697a      	ldr	r2, [r7, #20]
 800e388:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	2201      	movs	r2, #1
 800e38e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e394:	69bb      	ldr	r3, [r7, #24]
 800e396:	0a5b      	lsrs	r3, r3, #9
 800e398:	4413      	add	r3, r2
 800e39a:	4619      	mov	r1, r3
 800e39c:	68f8      	ldr	r0, [r7, #12]
 800e39e:	f7ff fe3b 	bl	800e018 <move_window>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e3a6:	7ffb      	ldrb	r3, [r7, #31]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d17a      	bne.n	800e4a2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e3b2:	69bb      	ldr	r3, [r7, #24]
 800e3b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3b8:	4413      	add	r3, r2
 800e3ba:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	f003 0301 	and.w	r3, r3, #1
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d003      	beq.n	800e3ce <put_fat+0xf0>
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	091b      	lsrs	r3, r3, #4
 800e3ca:	b2db      	uxtb	r3, r3
 800e3cc:	e00e      	b.n	800e3ec <put_fat+0x10e>
 800e3ce:	697b      	ldr	r3, [r7, #20]
 800e3d0:	781b      	ldrb	r3, [r3, #0]
 800e3d2:	b25b      	sxtb	r3, r3
 800e3d4:	f023 030f 	bic.w	r3, r3, #15
 800e3d8:	b25a      	sxtb	r2, r3
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	0a1b      	lsrs	r3, r3, #8
 800e3de:	b25b      	sxtb	r3, r3
 800e3e0:	f003 030f 	and.w	r3, r3, #15
 800e3e4:	b25b      	sxtb	r3, r3
 800e3e6:	4313      	orrs	r3, r2
 800e3e8:	b25b      	sxtb	r3, r3
 800e3ea:	b2db      	uxtb	r3, r3
 800e3ec:	697a      	ldr	r2, [r7, #20]
 800e3ee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	2201      	movs	r2, #1
 800e3f4:	70da      	strb	r2, [r3, #3]
			break;
 800e3f6:	e059      	b.n	800e4ac <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e3fc:	68bb      	ldr	r3, [r7, #8]
 800e3fe:	0a1b      	lsrs	r3, r3, #8
 800e400:	4413      	add	r3, r2
 800e402:	4619      	mov	r1, r3
 800e404:	68f8      	ldr	r0, [r7, #12]
 800e406:	f7ff fe07 	bl	800e018 <move_window>
 800e40a:	4603      	mov	r3, r0
 800e40c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e40e:	7ffb      	ldrb	r3, [r7, #31]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d148      	bne.n	800e4a6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	005b      	lsls	r3, r3, #1
 800e41e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e422:	4413      	add	r3, r2
 800e424:	687a      	ldr	r2, [r7, #4]
 800e426:	b292      	uxth	r2, r2
 800e428:	4611      	mov	r1, r2
 800e42a:	4618      	mov	r0, r3
 800e42c:	f7ff fb4d 	bl	800daca <st_word>
			fs->wflag = 1;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	2201      	movs	r2, #1
 800e434:	70da      	strb	r2, [r3, #3]
			break;
 800e436:	e039      	b.n	800e4ac <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	09db      	lsrs	r3, r3, #7
 800e440:	4413      	add	r3, r2
 800e442:	4619      	mov	r1, r3
 800e444:	68f8      	ldr	r0, [r7, #12]
 800e446:	f7ff fde7 	bl	800e018 <move_window>
 800e44a:	4603      	mov	r3, r0
 800e44c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e44e:	7ffb      	ldrb	r3, [r7, #31]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d12a      	bne.n	800e4aa <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	009b      	lsls	r3, r3, #2
 800e464:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e468:	4413      	add	r3, r2
 800e46a:	4618      	mov	r0, r3
 800e46c:	f7ff fb0a 	bl	800da84 <ld_dword>
 800e470:	4603      	mov	r3, r0
 800e472:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e476:	4323      	orrs	r3, r4
 800e478:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	009b      	lsls	r3, r3, #2
 800e484:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e488:	4413      	add	r3, r2
 800e48a:	6879      	ldr	r1, [r7, #4]
 800e48c:	4618      	mov	r0, r3
 800e48e:	f7ff fb37 	bl	800db00 <st_dword>
			fs->wflag = 1;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	2201      	movs	r2, #1
 800e496:	70da      	strb	r2, [r3, #3]
			break;
 800e498:	e008      	b.n	800e4ac <put_fat+0x1ce>
		}
	}
 800e49a:	bf00      	nop
 800e49c:	e006      	b.n	800e4ac <put_fat+0x1ce>
			if (res != FR_OK) break;
 800e49e:	bf00      	nop
 800e4a0:	e004      	b.n	800e4ac <put_fat+0x1ce>
			if (res != FR_OK) break;
 800e4a2:	bf00      	nop
 800e4a4:	e002      	b.n	800e4ac <put_fat+0x1ce>
			if (res != FR_OK) break;
 800e4a6:	bf00      	nop
 800e4a8:	e000      	b.n	800e4ac <put_fat+0x1ce>
			if (res != FR_OK) break;
 800e4aa:	bf00      	nop
	return res;
 800e4ac:	7ffb      	ldrb	r3, [r7, #31]
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3724      	adds	r7, #36	; 0x24
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd90      	pop	{r4, r7, pc}

0800e4b6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e4b6:	b580      	push	{r7, lr}
 800e4b8:	b088      	sub	sp, #32
 800e4ba:	af00      	add	r7, sp, #0
 800e4bc:	60f8      	str	r0, [r7, #12]
 800e4be:	60b9      	str	r1, [r7, #8]
 800e4c0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	2b01      	cmp	r3, #1
 800e4d0:	d904      	bls.n	800e4dc <remove_chain+0x26>
 800e4d2:	69bb      	ldr	r3, [r7, #24]
 800e4d4:	699b      	ldr	r3, [r3, #24]
 800e4d6:	68ba      	ldr	r2, [r7, #8]
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	d301      	bcc.n	800e4e0 <remove_chain+0x2a>
 800e4dc:	2302      	movs	r3, #2
 800e4de:	e04b      	b.n	800e578 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d00c      	beq.n	800e500 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e4e6:	f04f 32ff 	mov.w	r2, #4294967295
 800e4ea:	6879      	ldr	r1, [r7, #4]
 800e4ec:	69b8      	ldr	r0, [r7, #24]
 800e4ee:	f7ff fef6 	bl	800e2de <put_fat>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e4f6:	7ffb      	ldrb	r3, [r7, #31]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d001      	beq.n	800e500 <remove_chain+0x4a>
 800e4fc:	7ffb      	ldrb	r3, [r7, #31]
 800e4fe:	e03b      	b.n	800e578 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e500:	68b9      	ldr	r1, [r7, #8]
 800e502:	68f8      	ldr	r0, [r7, #12]
 800e504:	f7ff fe43 	bl	800e18e <get_fat>
 800e508:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d031      	beq.n	800e574 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	2b01      	cmp	r3, #1
 800e514:	d101      	bne.n	800e51a <remove_chain+0x64>
 800e516:	2302      	movs	r3, #2
 800e518:	e02e      	b.n	800e578 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e51a:	697b      	ldr	r3, [r7, #20]
 800e51c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e520:	d101      	bne.n	800e526 <remove_chain+0x70>
 800e522:	2301      	movs	r3, #1
 800e524:	e028      	b.n	800e578 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e526:	2200      	movs	r2, #0
 800e528:	68b9      	ldr	r1, [r7, #8]
 800e52a:	69b8      	ldr	r0, [r7, #24]
 800e52c:	f7ff fed7 	bl	800e2de <put_fat>
 800e530:	4603      	mov	r3, r0
 800e532:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e534:	7ffb      	ldrb	r3, [r7, #31]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d001      	beq.n	800e53e <remove_chain+0x88>
 800e53a:	7ffb      	ldrb	r3, [r7, #31]
 800e53c:	e01c      	b.n	800e578 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e53e:	69bb      	ldr	r3, [r7, #24]
 800e540:	695a      	ldr	r2, [r3, #20]
 800e542:	69bb      	ldr	r3, [r7, #24]
 800e544:	699b      	ldr	r3, [r3, #24]
 800e546:	3b02      	subs	r3, #2
 800e548:	429a      	cmp	r2, r3
 800e54a:	d20b      	bcs.n	800e564 <remove_chain+0xae>
			fs->free_clst++;
 800e54c:	69bb      	ldr	r3, [r7, #24]
 800e54e:	695b      	ldr	r3, [r3, #20]
 800e550:	1c5a      	adds	r2, r3, #1
 800e552:	69bb      	ldr	r3, [r7, #24]
 800e554:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800e556:	69bb      	ldr	r3, [r7, #24]
 800e558:	791b      	ldrb	r3, [r3, #4]
 800e55a:	f043 0301 	orr.w	r3, r3, #1
 800e55e:	b2da      	uxtb	r2, r3
 800e560:	69bb      	ldr	r3, [r7, #24]
 800e562:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e564:	697b      	ldr	r3, [r7, #20]
 800e566:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e568:	69bb      	ldr	r3, [r7, #24]
 800e56a:	699b      	ldr	r3, [r3, #24]
 800e56c:	68ba      	ldr	r2, [r7, #8]
 800e56e:	429a      	cmp	r2, r3
 800e570:	d3c6      	bcc.n	800e500 <remove_chain+0x4a>
 800e572:	e000      	b.n	800e576 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e574:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e576:	2300      	movs	r3, #0
}
 800e578:	4618      	mov	r0, r3
 800e57a:	3720      	adds	r7, #32
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd80      	pop	{r7, pc}

0800e580 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b088      	sub	sp, #32
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
 800e588:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d10d      	bne.n	800e5b2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	691b      	ldr	r3, [r3, #16]
 800e59a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e59c:	69bb      	ldr	r3, [r7, #24]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d004      	beq.n	800e5ac <create_chain+0x2c>
 800e5a2:	693b      	ldr	r3, [r7, #16]
 800e5a4:	699b      	ldr	r3, [r3, #24]
 800e5a6:	69ba      	ldr	r2, [r7, #24]
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d31b      	bcc.n	800e5e4 <create_chain+0x64>
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	61bb      	str	r3, [r7, #24]
 800e5b0:	e018      	b.n	800e5e4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e5b2:	6839      	ldr	r1, [r7, #0]
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f7ff fdea 	bl	800e18e <get_fat>
 800e5ba:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	2b01      	cmp	r3, #1
 800e5c0:	d801      	bhi.n	800e5c6 <create_chain+0x46>
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	e070      	b.n	800e6a8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5cc:	d101      	bne.n	800e5d2 <create_chain+0x52>
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	e06a      	b.n	800e6a8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	699b      	ldr	r3, [r3, #24]
 800e5d6:	68fa      	ldr	r2, [r7, #12]
 800e5d8:	429a      	cmp	r2, r3
 800e5da:	d201      	bcs.n	800e5e0 <create_chain+0x60>
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	e063      	b.n	800e6a8 <create_chain+0x128>
		scl = clst;
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e5e4:	69bb      	ldr	r3, [r7, #24]
 800e5e6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e5e8:	69fb      	ldr	r3, [r7, #28]
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e5ee:	693b      	ldr	r3, [r7, #16]
 800e5f0:	699b      	ldr	r3, [r3, #24]
 800e5f2:	69fa      	ldr	r2, [r7, #28]
 800e5f4:	429a      	cmp	r2, r3
 800e5f6:	d307      	bcc.n	800e608 <create_chain+0x88>
				ncl = 2;
 800e5f8:	2302      	movs	r3, #2
 800e5fa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e5fc:	69fa      	ldr	r2, [r7, #28]
 800e5fe:	69bb      	ldr	r3, [r7, #24]
 800e600:	429a      	cmp	r2, r3
 800e602:	d901      	bls.n	800e608 <create_chain+0x88>
 800e604:	2300      	movs	r3, #0
 800e606:	e04f      	b.n	800e6a8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e608:	69f9      	ldr	r1, [r7, #28]
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f7ff fdbf 	bl	800e18e <get_fat>
 800e610:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d00e      	beq.n	800e636 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	2b01      	cmp	r3, #1
 800e61c:	d003      	beq.n	800e626 <create_chain+0xa6>
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e624:	d101      	bne.n	800e62a <create_chain+0xaa>
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	e03e      	b.n	800e6a8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e62a:	69fa      	ldr	r2, [r7, #28]
 800e62c:	69bb      	ldr	r3, [r7, #24]
 800e62e:	429a      	cmp	r2, r3
 800e630:	d1da      	bne.n	800e5e8 <create_chain+0x68>
 800e632:	2300      	movs	r3, #0
 800e634:	e038      	b.n	800e6a8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e636:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e638:	f04f 32ff 	mov.w	r2, #4294967295
 800e63c:	69f9      	ldr	r1, [r7, #28]
 800e63e:	6938      	ldr	r0, [r7, #16]
 800e640:	f7ff fe4d 	bl	800e2de <put_fat>
 800e644:	4603      	mov	r3, r0
 800e646:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e648:	7dfb      	ldrb	r3, [r7, #23]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d109      	bne.n	800e662 <create_chain+0xe2>
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d006      	beq.n	800e662 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e654:	69fa      	ldr	r2, [r7, #28]
 800e656:	6839      	ldr	r1, [r7, #0]
 800e658:	6938      	ldr	r0, [r7, #16]
 800e65a:	f7ff fe40 	bl	800e2de <put_fat>
 800e65e:	4603      	mov	r3, r0
 800e660:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e662:	7dfb      	ldrb	r3, [r7, #23]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d116      	bne.n	800e696 <create_chain+0x116>
		fs->last_clst = ncl;
 800e668:	693b      	ldr	r3, [r7, #16]
 800e66a:	69fa      	ldr	r2, [r7, #28]
 800e66c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e66e:	693b      	ldr	r3, [r7, #16]
 800e670:	695a      	ldr	r2, [r3, #20]
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	699b      	ldr	r3, [r3, #24]
 800e676:	3b02      	subs	r3, #2
 800e678:	429a      	cmp	r2, r3
 800e67a:	d804      	bhi.n	800e686 <create_chain+0x106>
 800e67c:	693b      	ldr	r3, [r7, #16]
 800e67e:	695b      	ldr	r3, [r3, #20]
 800e680:	1e5a      	subs	r2, r3, #1
 800e682:	693b      	ldr	r3, [r7, #16]
 800e684:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800e686:	693b      	ldr	r3, [r7, #16]
 800e688:	791b      	ldrb	r3, [r3, #4]
 800e68a:	f043 0301 	orr.w	r3, r3, #1
 800e68e:	b2da      	uxtb	r2, r3
 800e690:	693b      	ldr	r3, [r7, #16]
 800e692:	711a      	strb	r2, [r3, #4]
 800e694:	e007      	b.n	800e6a6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e696:	7dfb      	ldrb	r3, [r7, #23]
 800e698:	2b01      	cmp	r3, #1
 800e69a:	d102      	bne.n	800e6a2 <create_chain+0x122>
 800e69c:	f04f 33ff 	mov.w	r3, #4294967295
 800e6a0:	e000      	b.n	800e6a4 <create_chain+0x124>
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e6a6:	69fb      	ldr	r3, [r7, #28]
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3720      	adds	r7, #32
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}

0800e6b0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e6b0:	b480      	push	{r7}
 800e6b2:	b087      	sub	sp, #28
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
 800e6b8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6c4:	3304      	adds	r3, #4
 800e6c6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	0a5b      	lsrs	r3, r3, #9
 800e6cc:	68fa      	ldr	r2, [r7, #12]
 800e6ce:	8952      	ldrh	r2, [r2, #10]
 800e6d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800e6d4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e6d6:	693b      	ldr	r3, [r7, #16]
 800e6d8:	1d1a      	adds	r2, r3, #4
 800e6da:	613a      	str	r2, [r7, #16]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d101      	bne.n	800e6ea <clmt_clust+0x3a>
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	e010      	b.n	800e70c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800e6ea:	697a      	ldr	r2, [r7, #20]
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d307      	bcc.n	800e702 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800e6f2:	697a      	ldr	r2, [r7, #20]
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	1ad3      	subs	r3, r2, r3
 800e6f8:	617b      	str	r3, [r7, #20]
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	3304      	adds	r3, #4
 800e6fe:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e700:	e7e9      	b.n	800e6d6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800e702:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	681a      	ldr	r2, [r3, #0]
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	4413      	add	r3, r2
}
 800e70c:	4618      	mov	r0, r3
 800e70e:	371c      	adds	r7, #28
 800e710:	46bd      	mov	sp, r7
 800e712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e716:	4770      	bx	lr

0800e718 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b086      	sub	sp, #24
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
 800e720:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e72e:	d204      	bcs.n	800e73a <dir_sdi+0x22>
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	f003 031f 	and.w	r3, r3, #31
 800e736:	2b00      	cmp	r3, #0
 800e738:	d001      	beq.n	800e73e <dir_sdi+0x26>
		return FR_INT_ERR;
 800e73a:	2302      	movs	r3, #2
 800e73c:	e063      	b.n	800e806 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	683a      	ldr	r2, [r7, #0]
 800e742:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	689b      	ldr	r3, [r3, #8]
 800e748:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e74a:	697b      	ldr	r3, [r7, #20]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d106      	bne.n	800e75e <dir_sdi+0x46>
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	781b      	ldrb	r3, [r3, #0]
 800e754:	2b02      	cmp	r3, #2
 800e756:	d902      	bls.n	800e75e <dir_sdi+0x46>
		clst = fs->dirbase;
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e75c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d10c      	bne.n	800e77e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	095b      	lsrs	r3, r3, #5
 800e768:	693a      	ldr	r2, [r7, #16]
 800e76a:	8912      	ldrh	r2, [r2, #8]
 800e76c:	4293      	cmp	r3, r2
 800e76e:	d301      	bcc.n	800e774 <dir_sdi+0x5c>
 800e770:	2302      	movs	r3, #2
 800e772:	e048      	b.n	800e806 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800e774:	693b      	ldr	r3, [r7, #16]
 800e776:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	61da      	str	r2, [r3, #28]
 800e77c:	e029      	b.n	800e7d2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e77e:	693b      	ldr	r3, [r7, #16]
 800e780:	895b      	ldrh	r3, [r3, #10]
 800e782:	025b      	lsls	r3, r3, #9
 800e784:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e786:	e019      	b.n	800e7bc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	6979      	ldr	r1, [r7, #20]
 800e78c:	4618      	mov	r0, r3
 800e78e:	f7ff fcfe 	bl	800e18e <get_fat>
 800e792:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e79a:	d101      	bne.n	800e7a0 <dir_sdi+0x88>
 800e79c:	2301      	movs	r3, #1
 800e79e:	e032      	b.n	800e806 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	2b01      	cmp	r3, #1
 800e7a4:	d904      	bls.n	800e7b0 <dir_sdi+0x98>
 800e7a6:	693b      	ldr	r3, [r7, #16]
 800e7a8:	699b      	ldr	r3, [r3, #24]
 800e7aa:	697a      	ldr	r2, [r7, #20]
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d301      	bcc.n	800e7b4 <dir_sdi+0x9c>
 800e7b0:	2302      	movs	r3, #2
 800e7b2:	e028      	b.n	800e806 <dir_sdi+0xee>
			ofs -= csz;
 800e7b4:	683a      	ldr	r2, [r7, #0]
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	1ad3      	subs	r3, r2, r3
 800e7ba:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e7bc:	683a      	ldr	r2, [r7, #0]
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d2e1      	bcs.n	800e788 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800e7c4:	6979      	ldr	r1, [r7, #20]
 800e7c6:	6938      	ldr	r0, [r7, #16]
 800e7c8:	f7ff fcc2 	bl	800e150 <clust2sect>
 800e7cc:	4602      	mov	r2, r0
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	697a      	ldr	r2, [r7, #20]
 800e7d6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	69db      	ldr	r3, [r3, #28]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d101      	bne.n	800e7e4 <dir_sdi+0xcc>
 800e7e0:	2302      	movs	r3, #2
 800e7e2:	e010      	b.n	800e806 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	69da      	ldr	r2, [r3, #28]
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	0a5b      	lsrs	r3, r3, #9
 800e7ec:	441a      	add	r2, r3
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e7f2:	693b      	ldr	r3, [r7, #16]
 800e7f4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7fe:	441a      	add	r2, r3
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e804:	2300      	movs	r3, #0
}
 800e806:	4618      	mov	r0, r3
 800e808:	3718      	adds	r7, #24
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}

0800e80e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e80e:	b580      	push	{r7, lr}
 800e810:	b086      	sub	sp, #24
 800e812:	af00      	add	r7, sp, #0
 800e814:	6078      	str	r0, [r7, #4]
 800e816:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	695b      	ldr	r3, [r3, #20]
 800e822:	3320      	adds	r3, #32
 800e824:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	69db      	ldr	r3, [r3, #28]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d003      	beq.n	800e836 <dir_next+0x28>
 800e82e:	68bb      	ldr	r3, [r7, #8]
 800e830:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e834:	d301      	bcc.n	800e83a <dir_next+0x2c>
 800e836:	2304      	movs	r3, #4
 800e838:	e0aa      	b.n	800e990 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e840:	2b00      	cmp	r3, #0
 800e842:	f040 8098 	bne.w	800e976 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	69db      	ldr	r3, [r3, #28]
 800e84a:	1c5a      	adds	r2, r3, #1
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	699b      	ldr	r3, [r3, #24]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d10b      	bne.n	800e870 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e858:	68bb      	ldr	r3, [r7, #8]
 800e85a:	095b      	lsrs	r3, r3, #5
 800e85c:	68fa      	ldr	r2, [r7, #12]
 800e85e:	8912      	ldrh	r2, [r2, #8]
 800e860:	4293      	cmp	r3, r2
 800e862:	f0c0 8088 	bcc.w	800e976 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2200      	movs	r2, #0
 800e86a:	61da      	str	r2, [r3, #28]
 800e86c:	2304      	movs	r3, #4
 800e86e:	e08f      	b.n	800e990 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	0a5b      	lsrs	r3, r3, #9
 800e874:	68fa      	ldr	r2, [r7, #12]
 800e876:	8952      	ldrh	r2, [r2, #10]
 800e878:	3a01      	subs	r2, #1
 800e87a:	4013      	ands	r3, r2
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d17a      	bne.n	800e976 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e880:	687a      	ldr	r2, [r7, #4]
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	699b      	ldr	r3, [r3, #24]
 800e886:	4619      	mov	r1, r3
 800e888:	4610      	mov	r0, r2
 800e88a:	f7ff fc80 	bl	800e18e <get_fat>
 800e88e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e890:	697b      	ldr	r3, [r7, #20]
 800e892:	2b01      	cmp	r3, #1
 800e894:	d801      	bhi.n	800e89a <dir_next+0x8c>
 800e896:	2302      	movs	r3, #2
 800e898:	e07a      	b.n	800e990 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8a0:	d101      	bne.n	800e8a6 <dir_next+0x98>
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	e074      	b.n	800e990 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	699b      	ldr	r3, [r3, #24]
 800e8aa:	697a      	ldr	r2, [r7, #20]
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d358      	bcc.n	800e962 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d104      	bne.n	800e8c0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	61da      	str	r2, [r3, #28]
 800e8bc:	2304      	movs	r3, #4
 800e8be:	e067      	b.n	800e990 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e8c0:	687a      	ldr	r2, [r7, #4]
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	699b      	ldr	r3, [r3, #24]
 800e8c6:	4619      	mov	r1, r3
 800e8c8:	4610      	mov	r0, r2
 800e8ca:	f7ff fe59 	bl	800e580 <create_chain>
 800e8ce:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e8d0:	697b      	ldr	r3, [r7, #20]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d101      	bne.n	800e8da <dir_next+0xcc>
 800e8d6:	2307      	movs	r3, #7
 800e8d8:	e05a      	b.n	800e990 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e8da:	697b      	ldr	r3, [r7, #20]
 800e8dc:	2b01      	cmp	r3, #1
 800e8de:	d101      	bne.n	800e8e4 <dir_next+0xd6>
 800e8e0:	2302      	movs	r3, #2
 800e8e2:	e055      	b.n	800e990 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e8e4:	697b      	ldr	r3, [r7, #20]
 800e8e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8ea:	d101      	bne.n	800e8f0 <dir_next+0xe2>
 800e8ec:	2301      	movs	r3, #1
 800e8ee:	e04f      	b.n	800e990 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e8f0:	68f8      	ldr	r0, [r7, #12]
 800e8f2:	f7ff fb4d 	bl	800df90 <sync_window>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d001      	beq.n	800e900 <dir_next+0xf2>
 800e8fc:	2301      	movs	r3, #1
 800e8fe:	e047      	b.n	800e990 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	3334      	adds	r3, #52	; 0x34
 800e904:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e908:	2100      	movs	r1, #0
 800e90a:	4618      	mov	r0, r3
 800e90c:	f7ff f945 	bl	800db9a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e910:	2300      	movs	r3, #0
 800e912:	613b      	str	r3, [r7, #16]
 800e914:	6979      	ldr	r1, [r7, #20]
 800e916:	68f8      	ldr	r0, [r7, #12]
 800e918:	f7ff fc1a 	bl	800e150 <clust2sect>
 800e91c:	4602      	mov	r2, r0
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	631a      	str	r2, [r3, #48]	; 0x30
 800e922:	e012      	b.n	800e94a <dir_next+0x13c>
						fs->wflag = 1;
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	2201      	movs	r2, #1
 800e928:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e92a:	68f8      	ldr	r0, [r7, #12]
 800e92c:	f7ff fb30 	bl	800df90 <sync_window>
 800e930:	4603      	mov	r3, r0
 800e932:	2b00      	cmp	r3, #0
 800e934:	d001      	beq.n	800e93a <dir_next+0x12c>
 800e936:	2301      	movs	r3, #1
 800e938:	e02a      	b.n	800e990 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	3301      	adds	r3, #1
 800e93e:	613b      	str	r3, [r7, #16]
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e944:	1c5a      	adds	r2, r3, #1
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	631a      	str	r2, [r3, #48]	; 0x30
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	895b      	ldrh	r3, [r3, #10]
 800e94e:	461a      	mov	r2, r3
 800e950:	693b      	ldr	r3, [r7, #16]
 800e952:	4293      	cmp	r3, r2
 800e954:	d3e6      	bcc.n	800e924 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	1ad2      	subs	r2, r2, r3
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	697a      	ldr	r2, [r7, #20]
 800e966:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e968:	6979      	ldr	r1, [r7, #20]
 800e96a:	68f8      	ldr	r0, [r7, #12]
 800e96c:	f7ff fbf0 	bl	800e150 <clust2sect>
 800e970:	4602      	mov	r2, r0
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	68ba      	ldr	r2, [r7, #8]
 800e97a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e988:	441a      	add	r2, r3
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e98e:	2300      	movs	r3, #0
}
 800e990:	4618      	mov	r0, r3
 800e992:	3718      	adds	r7, #24
 800e994:	46bd      	mov	sp, r7
 800e996:	bd80      	pop	{r7, pc}

0800e998 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b086      	sub	sp, #24
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e9a8:	2100      	movs	r1, #0
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f7ff feb4 	bl	800e718 <dir_sdi>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e9b4:	7dfb      	ldrb	r3, [r7, #23]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d12b      	bne.n	800ea12 <dir_alloc+0x7a>
		n = 0;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	69db      	ldr	r3, [r3, #28]
 800e9c2:	4619      	mov	r1, r3
 800e9c4:	68f8      	ldr	r0, [r7, #12]
 800e9c6:	f7ff fb27 	bl	800e018 <move_window>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e9ce:	7dfb      	ldrb	r3, [r7, #23]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d11d      	bne.n	800ea10 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6a1b      	ldr	r3, [r3, #32]
 800e9d8:	781b      	ldrb	r3, [r3, #0]
 800e9da:	2be5      	cmp	r3, #229	; 0xe5
 800e9dc:	d004      	beq.n	800e9e8 <dir_alloc+0x50>
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	6a1b      	ldr	r3, [r3, #32]
 800e9e2:	781b      	ldrb	r3, [r3, #0]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d107      	bne.n	800e9f8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e9e8:	693b      	ldr	r3, [r7, #16]
 800e9ea:	3301      	adds	r3, #1
 800e9ec:	613b      	str	r3, [r7, #16]
 800e9ee:	693a      	ldr	r2, [r7, #16]
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	429a      	cmp	r2, r3
 800e9f4:	d102      	bne.n	800e9fc <dir_alloc+0x64>
 800e9f6:	e00c      	b.n	800ea12 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e9fc:	2101      	movs	r1, #1
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	f7ff ff05 	bl	800e80e <dir_next>
 800ea04:	4603      	mov	r3, r0
 800ea06:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ea08:	7dfb      	ldrb	r3, [r7, #23]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d0d7      	beq.n	800e9be <dir_alloc+0x26>
 800ea0e:	e000      	b.n	800ea12 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ea10:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ea12:	7dfb      	ldrb	r3, [r7, #23]
 800ea14:	2b04      	cmp	r3, #4
 800ea16:	d101      	bne.n	800ea1c <dir_alloc+0x84>
 800ea18:	2307      	movs	r3, #7
 800ea1a:	75fb      	strb	r3, [r7, #23]
	return res;
 800ea1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea1e:	4618      	mov	r0, r3
 800ea20:	3718      	adds	r7, #24
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}

0800ea26 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ea26:	b580      	push	{r7, lr}
 800ea28:	b084      	sub	sp, #16
 800ea2a:	af00      	add	r7, sp, #0
 800ea2c:	6078      	str	r0, [r7, #4]
 800ea2e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	331a      	adds	r3, #26
 800ea34:	4618      	mov	r0, r3
 800ea36:	f7ff f80d 	bl	800da54 <ld_word>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	781b      	ldrb	r3, [r3, #0]
 800ea42:	2b03      	cmp	r3, #3
 800ea44:	d109      	bne.n	800ea5a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	3314      	adds	r3, #20
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7ff f802 	bl	800da54 <ld_word>
 800ea50:	4603      	mov	r3, r0
 800ea52:	041b      	lsls	r3, r3, #16
 800ea54:	68fa      	ldr	r2, [r7, #12]
 800ea56:	4313      	orrs	r3, r2
 800ea58:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
}
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	3710      	adds	r7, #16
 800ea60:	46bd      	mov	sp, r7
 800ea62:	bd80      	pop	{r7, pc}

0800ea64 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b084      	sub	sp, #16
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	60f8      	str	r0, [r7, #12]
 800ea6c:	60b9      	str	r1, [r7, #8]
 800ea6e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	331a      	adds	r3, #26
 800ea74:	687a      	ldr	r2, [r7, #4]
 800ea76:	b292      	uxth	r2, r2
 800ea78:	4611      	mov	r1, r2
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f7ff f825 	bl	800daca <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	781b      	ldrb	r3, [r3, #0]
 800ea84:	2b03      	cmp	r3, #3
 800ea86:	d109      	bne.n	800ea9c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ea88:	68bb      	ldr	r3, [r7, #8]
 800ea8a:	f103 0214 	add.w	r2, r3, #20
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	0c1b      	lsrs	r3, r3, #16
 800ea92:	b29b      	uxth	r3, r3
 800ea94:	4619      	mov	r1, r3
 800ea96:	4610      	mov	r0, r2
 800ea98:	f7ff f817 	bl	800daca <st_word>
	}
}
 800ea9c:	bf00      	nop
 800ea9e:	3710      	adds	r7, #16
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}

0800eaa4 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b086      	sub	sp, #24
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800eaae:	2304      	movs	r3, #4
 800eab0:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800eab8:	e03c      	b.n	800eb34 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	69db      	ldr	r3, [r3, #28]
 800eabe:	4619      	mov	r1, r3
 800eac0:	6938      	ldr	r0, [r7, #16]
 800eac2:	f7ff faa9 	bl	800e018 <move_window>
 800eac6:	4603      	mov	r3, r0
 800eac8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800eaca:	7dfb      	ldrb	r3, [r7, #23]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d136      	bne.n	800eb3e <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6a1b      	ldr	r3, [r3, #32]
 800ead4:	781b      	ldrb	r3, [r3, #0]
 800ead6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800ead8:	7bfb      	ldrb	r3, [r7, #15]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d102      	bne.n	800eae4 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800eade:	2304      	movs	r3, #4
 800eae0:	75fb      	strb	r3, [r7, #23]
 800eae2:	e031      	b.n	800eb48 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	6a1b      	ldr	r3, [r3, #32]
 800eae8:	330b      	adds	r3, #11
 800eaea:	781b      	ldrb	r3, [r3, #0]
 800eaec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eaf0:	73bb      	strb	r3, [r7, #14]
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	7bba      	ldrb	r2, [r7, #14]
 800eaf6:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800eaf8:	7bfb      	ldrb	r3, [r7, #15]
 800eafa:	2be5      	cmp	r3, #229	; 0xe5
 800eafc:	d011      	beq.n	800eb22 <dir_read+0x7e>
 800eafe:	7bfb      	ldrb	r3, [r7, #15]
 800eb00:	2b2e      	cmp	r3, #46	; 0x2e
 800eb02:	d00e      	beq.n	800eb22 <dir_read+0x7e>
 800eb04:	7bbb      	ldrb	r3, [r7, #14]
 800eb06:	2b0f      	cmp	r3, #15
 800eb08:	d00b      	beq.n	800eb22 <dir_read+0x7e>
 800eb0a:	7bbb      	ldrb	r3, [r7, #14]
 800eb0c:	f023 0320 	bic.w	r3, r3, #32
 800eb10:	2b08      	cmp	r3, #8
 800eb12:	bf0c      	ite	eq
 800eb14:	2301      	moveq	r3, #1
 800eb16:	2300      	movne	r3, #0
 800eb18:	b2db      	uxtb	r3, r3
 800eb1a:	461a      	mov	r2, r3
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	4293      	cmp	r3, r2
 800eb20:	d00f      	beq.n	800eb42 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800eb22:	2100      	movs	r1, #0
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f7ff fe72 	bl	800e80e <dir_next>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800eb2e:	7dfb      	ldrb	r3, [r7, #23]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d108      	bne.n	800eb46 <dir_read+0xa2>
	while (dp->sect) {
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	69db      	ldr	r3, [r3, #28]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d1be      	bne.n	800eaba <dir_read+0x16>
 800eb3c:	e004      	b.n	800eb48 <dir_read+0xa4>
		if (res != FR_OK) break;
 800eb3e:	bf00      	nop
 800eb40:	e002      	b.n	800eb48 <dir_read+0xa4>
				break;
 800eb42:	bf00      	nop
 800eb44:	e000      	b.n	800eb48 <dir_read+0xa4>
		if (res != FR_OK) break;
 800eb46:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800eb48:	7dfb      	ldrb	r3, [r7, #23]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d002      	beq.n	800eb54 <dir_read+0xb0>
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2200      	movs	r2, #0
 800eb52:	61da      	str	r2, [r3, #28]
	return res;
 800eb54:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	3718      	adds	r7, #24
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd80      	pop	{r7, pc}

0800eb5e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800eb5e:	b580      	push	{r7, lr}
 800eb60:	b086      	sub	sp, #24
 800eb62:	af00      	add	r7, sp, #0
 800eb64:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800eb6c:	2100      	movs	r1, #0
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	f7ff fdd2 	bl	800e718 <dir_sdi>
 800eb74:	4603      	mov	r3, r0
 800eb76:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800eb78:	7dfb      	ldrb	r3, [r7, #23]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d001      	beq.n	800eb82 <dir_find+0x24>
 800eb7e:	7dfb      	ldrb	r3, [r7, #23]
 800eb80:	e03e      	b.n	800ec00 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	69db      	ldr	r3, [r3, #28]
 800eb86:	4619      	mov	r1, r3
 800eb88:	6938      	ldr	r0, [r7, #16]
 800eb8a:	f7ff fa45 	bl	800e018 <move_window>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800eb92:	7dfb      	ldrb	r3, [r7, #23]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d12f      	bne.n	800ebf8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6a1b      	ldr	r3, [r3, #32]
 800eb9c:	781b      	ldrb	r3, [r3, #0]
 800eb9e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800eba0:	7bfb      	ldrb	r3, [r7, #15]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d102      	bne.n	800ebac <dir_find+0x4e>
 800eba6:	2304      	movs	r3, #4
 800eba8:	75fb      	strb	r3, [r7, #23]
 800ebaa:	e028      	b.n	800ebfe <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	6a1b      	ldr	r3, [r3, #32]
 800ebb0:	330b      	adds	r3, #11
 800ebb2:	781b      	ldrb	r3, [r3, #0]
 800ebb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ebb8:	b2da      	uxtb	r2, r3
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6a1b      	ldr	r3, [r3, #32]
 800ebc2:	330b      	adds	r3, #11
 800ebc4:	781b      	ldrb	r3, [r3, #0]
 800ebc6:	f003 0308 	and.w	r3, r3, #8
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d10a      	bne.n	800ebe4 <dir_find+0x86>
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6a18      	ldr	r0, [r3, #32]
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	3324      	adds	r3, #36	; 0x24
 800ebd6:	220b      	movs	r2, #11
 800ebd8:	4619      	mov	r1, r3
 800ebda:	f7fe fff9 	bl	800dbd0 <mem_cmp>
 800ebde:	4603      	mov	r3, r0
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d00b      	beq.n	800ebfc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ebe4:	2100      	movs	r1, #0
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f7ff fe11 	bl	800e80e <dir_next>
 800ebec:	4603      	mov	r3, r0
 800ebee:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ebf0:	7dfb      	ldrb	r3, [r7, #23]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d0c5      	beq.n	800eb82 <dir_find+0x24>
 800ebf6:	e002      	b.n	800ebfe <dir_find+0xa0>
		if (res != FR_OK) break;
 800ebf8:	bf00      	nop
 800ebfa:	e000      	b.n	800ebfe <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ebfc:	bf00      	nop

	return res;
 800ebfe:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec00:	4618      	mov	r0, r3
 800ec02:	3718      	adds	r7, #24
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bd80      	pop	{r7, pc}

0800ec08 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b084      	sub	sp, #16
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ec16:	2101      	movs	r1, #1
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	f7ff febd 	bl	800e998 <dir_alloc>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ec22:	7bfb      	ldrb	r3, [r7, #15]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d11c      	bne.n	800ec62 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	69db      	ldr	r3, [r3, #28]
 800ec2c:	4619      	mov	r1, r3
 800ec2e:	68b8      	ldr	r0, [r7, #8]
 800ec30:	f7ff f9f2 	bl	800e018 <move_window>
 800ec34:	4603      	mov	r3, r0
 800ec36:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ec38:	7bfb      	ldrb	r3, [r7, #15]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d111      	bne.n	800ec62 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6a1b      	ldr	r3, [r3, #32]
 800ec42:	2220      	movs	r2, #32
 800ec44:	2100      	movs	r1, #0
 800ec46:	4618      	mov	r0, r3
 800ec48:	f7fe ffa7 	bl	800db9a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	6a18      	ldr	r0, [r3, #32]
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	3324      	adds	r3, #36	; 0x24
 800ec54:	220b      	movs	r2, #11
 800ec56:	4619      	mov	r1, r3
 800ec58:	f7fe ff7e 	bl	800db58 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ec5c:	68bb      	ldr	r3, [r7, #8]
 800ec5e:	2201      	movs	r2, #1
 800ec60:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ec62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3710      	adds	r7, #16
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}

0800ec6c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b086      	sub	sp, #24
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	2200      	movs	r2, #0
 800ec7a:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	69db      	ldr	r3, [r3, #28]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d04e      	beq.n	800ed22 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800ec84:	2300      	movs	r3, #0
 800ec86:	613b      	str	r3, [r7, #16]
 800ec88:	693b      	ldr	r3, [r7, #16]
 800ec8a:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800ec8c:	e021      	b.n	800ecd2 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	6a1a      	ldr	r2, [r3, #32]
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	1c59      	adds	r1, r3, #1
 800ec96:	6179      	str	r1, [r7, #20]
 800ec98:	4413      	add	r3, r2
 800ec9a:	781b      	ldrb	r3, [r3, #0]
 800ec9c:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800ec9e:	7bfb      	ldrb	r3, [r7, #15]
 800eca0:	2b20      	cmp	r3, #32
 800eca2:	d100      	bne.n	800eca6 <get_fileinfo+0x3a>
 800eca4:	e015      	b.n	800ecd2 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800eca6:	7bfb      	ldrb	r3, [r7, #15]
 800eca8:	2b05      	cmp	r3, #5
 800ecaa:	d101      	bne.n	800ecb0 <get_fileinfo+0x44>
 800ecac:	23e5      	movs	r3, #229	; 0xe5
 800ecae:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	2b09      	cmp	r3, #9
 800ecb4:	d106      	bne.n	800ecc4 <get_fileinfo+0x58>
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	1c5a      	adds	r2, r3, #1
 800ecba:	613a      	str	r2, [r7, #16]
 800ecbc:	683a      	ldr	r2, [r7, #0]
 800ecbe:	4413      	add	r3, r2
 800ecc0:	222e      	movs	r2, #46	; 0x2e
 800ecc2:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800ecc4:	693b      	ldr	r3, [r7, #16]
 800ecc6:	1c5a      	adds	r2, r3, #1
 800ecc8:	613a      	str	r2, [r7, #16]
 800ecca:	683a      	ldr	r2, [r7, #0]
 800eccc:	4413      	add	r3, r2
 800ecce:	7bfa      	ldrb	r2, [r7, #15]
 800ecd0:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	2b0a      	cmp	r3, #10
 800ecd6:	d9da      	bls.n	800ec8e <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800ecd8:	683a      	ldr	r2, [r7, #0]
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	4413      	add	r3, r2
 800ecde:	3309      	adds	r3, #9
 800ece0:	2200      	movs	r2, #0
 800ece2:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	6a1b      	ldr	r3, [r3, #32]
 800ece8:	7ada      	ldrb	r2, [r3, #11]
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	6a1b      	ldr	r3, [r3, #32]
 800ecf2:	331c      	adds	r3, #28
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f7fe fec5 	bl	800da84 <ld_dword>
 800ecfa:	4602      	mov	r2, r0
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	6a1b      	ldr	r3, [r3, #32]
 800ed04:	3316      	adds	r3, #22
 800ed06:	4618      	mov	r0, r3
 800ed08:	f7fe febc 	bl	800da84 <ld_dword>
 800ed0c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	b29a      	uxth	r2, r3
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	80da      	strh	r2, [r3, #6]
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	0c1b      	lsrs	r3, r3, #16
 800ed1a:	b29a      	uxth	r2, r3
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	809a      	strh	r2, [r3, #4]
 800ed20:	e000      	b.n	800ed24 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ed22:	bf00      	nop
}
 800ed24:	3718      	adds	r7, #24
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}
	...

0800ed2c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b088      	sub	sp, #32
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
 800ed34:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ed36:	683b      	ldr	r3, [r7, #0]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	60fb      	str	r3, [r7, #12]
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	3324      	adds	r3, #36	; 0x24
 800ed40:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ed42:	220b      	movs	r2, #11
 800ed44:	2120      	movs	r1, #32
 800ed46:	68b8      	ldr	r0, [r7, #8]
 800ed48:	f7fe ff27 	bl	800db9a <mem_set>
	si = i = 0; ni = 8;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	613b      	str	r3, [r7, #16]
 800ed50:	693b      	ldr	r3, [r7, #16]
 800ed52:	61fb      	str	r3, [r7, #28]
 800ed54:	2308      	movs	r3, #8
 800ed56:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ed58:	69fb      	ldr	r3, [r7, #28]
 800ed5a:	1c5a      	adds	r2, r3, #1
 800ed5c:	61fa      	str	r2, [r7, #28]
 800ed5e:	68fa      	ldr	r2, [r7, #12]
 800ed60:	4413      	add	r3, r2
 800ed62:	781b      	ldrb	r3, [r3, #0]
 800ed64:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ed66:	7efb      	ldrb	r3, [r7, #27]
 800ed68:	2b20      	cmp	r3, #32
 800ed6a:	d94e      	bls.n	800ee0a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ed6c:	7efb      	ldrb	r3, [r7, #27]
 800ed6e:	2b2f      	cmp	r3, #47	; 0x2f
 800ed70:	d006      	beq.n	800ed80 <create_name+0x54>
 800ed72:	7efb      	ldrb	r3, [r7, #27]
 800ed74:	2b5c      	cmp	r3, #92	; 0x5c
 800ed76:	d110      	bne.n	800ed9a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ed78:	e002      	b.n	800ed80 <create_name+0x54>
 800ed7a:	69fb      	ldr	r3, [r7, #28]
 800ed7c:	3301      	adds	r3, #1
 800ed7e:	61fb      	str	r3, [r7, #28]
 800ed80:	68fa      	ldr	r2, [r7, #12]
 800ed82:	69fb      	ldr	r3, [r7, #28]
 800ed84:	4413      	add	r3, r2
 800ed86:	781b      	ldrb	r3, [r3, #0]
 800ed88:	2b2f      	cmp	r3, #47	; 0x2f
 800ed8a:	d0f6      	beq.n	800ed7a <create_name+0x4e>
 800ed8c:	68fa      	ldr	r2, [r7, #12]
 800ed8e:	69fb      	ldr	r3, [r7, #28]
 800ed90:	4413      	add	r3, r2
 800ed92:	781b      	ldrb	r3, [r3, #0]
 800ed94:	2b5c      	cmp	r3, #92	; 0x5c
 800ed96:	d0f0      	beq.n	800ed7a <create_name+0x4e>
			break;
 800ed98:	e038      	b.n	800ee0c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ed9a:	7efb      	ldrb	r3, [r7, #27]
 800ed9c:	2b2e      	cmp	r3, #46	; 0x2e
 800ed9e:	d003      	beq.n	800eda8 <create_name+0x7c>
 800eda0:	693a      	ldr	r2, [r7, #16]
 800eda2:	697b      	ldr	r3, [r7, #20]
 800eda4:	429a      	cmp	r2, r3
 800eda6:	d30c      	bcc.n	800edc2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800eda8:	697b      	ldr	r3, [r7, #20]
 800edaa:	2b0b      	cmp	r3, #11
 800edac:	d002      	beq.n	800edb4 <create_name+0x88>
 800edae:	7efb      	ldrb	r3, [r7, #27]
 800edb0:	2b2e      	cmp	r3, #46	; 0x2e
 800edb2:	d001      	beq.n	800edb8 <create_name+0x8c>
 800edb4:	2306      	movs	r3, #6
 800edb6:	e044      	b.n	800ee42 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800edb8:	2308      	movs	r3, #8
 800edba:	613b      	str	r3, [r7, #16]
 800edbc:	230b      	movs	r3, #11
 800edbe:	617b      	str	r3, [r7, #20]
			continue;
 800edc0:	e022      	b.n	800ee08 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800edc2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	da04      	bge.n	800edd4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800edca:	7efb      	ldrb	r3, [r7, #27]
 800edcc:	3b80      	subs	r3, #128	; 0x80
 800edce:	4a1f      	ldr	r2, [pc, #124]	; (800ee4c <create_name+0x120>)
 800edd0:	5cd3      	ldrb	r3, [r2, r3]
 800edd2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800edd4:	7efb      	ldrb	r3, [r7, #27]
 800edd6:	4619      	mov	r1, r3
 800edd8:	481d      	ldr	r0, [pc, #116]	; (800ee50 <create_name+0x124>)
 800edda:	f7fe ff20 	bl	800dc1e <chk_chr>
 800edde:	4603      	mov	r3, r0
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d001      	beq.n	800ede8 <create_name+0xbc>
 800ede4:	2306      	movs	r3, #6
 800ede6:	e02c      	b.n	800ee42 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ede8:	7efb      	ldrb	r3, [r7, #27]
 800edea:	2b60      	cmp	r3, #96	; 0x60
 800edec:	d905      	bls.n	800edfa <create_name+0xce>
 800edee:	7efb      	ldrb	r3, [r7, #27]
 800edf0:	2b7a      	cmp	r3, #122	; 0x7a
 800edf2:	d802      	bhi.n	800edfa <create_name+0xce>
 800edf4:	7efb      	ldrb	r3, [r7, #27]
 800edf6:	3b20      	subs	r3, #32
 800edf8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800edfa:	693b      	ldr	r3, [r7, #16]
 800edfc:	1c5a      	adds	r2, r3, #1
 800edfe:	613a      	str	r2, [r7, #16]
 800ee00:	68ba      	ldr	r2, [r7, #8]
 800ee02:	4413      	add	r3, r2
 800ee04:	7efa      	ldrb	r2, [r7, #27]
 800ee06:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ee08:	e7a6      	b.n	800ed58 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ee0a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ee0c:	68fa      	ldr	r2, [r7, #12]
 800ee0e:	69fb      	ldr	r3, [r7, #28]
 800ee10:	441a      	add	r2, r3
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ee16:	693b      	ldr	r3, [r7, #16]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d101      	bne.n	800ee20 <create_name+0xf4>
 800ee1c:	2306      	movs	r3, #6
 800ee1e:	e010      	b.n	800ee42 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	2be5      	cmp	r3, #229	; 0xe5
 800ee26:	d102      	bne.n	800ee2e <create_name+0x102>
 800ee28:	68bb      	ldr	r3, [r7, #8]
 800ee2a:	2205      	movs	r2, #5
 800ee2c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ee2e:	7efb      	ldrb	r3, [r7, #27]
 800ee30:	2b20      	cmp	r3, #32
 800ee32:	d801      	bhi.n	800ee38 <create_name+0x10c>
 800ee34:	2204      	movs	r2, #4
 800ee36:	e000      	b.n	800ee3a <create_name+0x10e>
 800ee38:	2200      	movs	r2, #0
 800ee3a:	68bb      	ldr	r3, [r7, #8]
 800ee3c:	330b      	adds	r3, #11
 800ee3e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ee40:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	3720      	adds	r7, #32
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}
 800ee4a:	bf00      	nop
 800ee4c:	08018ce0 	.word	0x08018ce0
 800ee50:	08018c78 	.word	0x08018c78

0800ee54 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b086      	sub	sp, #24
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
 800ee5c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ee62:	693b      	ldr	r3, [r7, #16]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ee68:	e002      	b.n	800ee70 <follow_path+0x1c>
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	3301      	adds	r3, #1
 800ee6e:	603b      	str	r3, [r7, #0]
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	781b      	ldrb	r3, [r3, #0]
 800ee74:	2b2f      	cmp	r3, #47	; 0x2f
 800ee76:	d0f8      	beq.n	800ee6a <follow_path+0x16>
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	781b      	ldrb	r3, [r3, #0]
 800ee7c:	2b5c      	cmp	r3, #92	; 0x5c
 800ee7e:	d0f4      	beq.n	800ee6a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ee80:	693b      	ldr	r3, [r7, #16]
 800ee82:	2200      	movs	r2, #0
 800ee84:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ee86:	683b      	ldr	r3, [r7, #0]
 800ee88:	781b      	ldrb	r3, [r3, #0]
 800ee8a:	2b1f      	cmp	r3, #31
 800ee8c:	d80a      	bhi.n	800eea4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	2280      	movs	r2, #128	; 0x80
 800ee92:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ee96:	2100      	movs	r1, #0
 800ee98:	6878      	ldr	r0, [r7, #4]
 800ee9a:	f7ff fc3d 	bl	800e718 <dir_sdi>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	75fb      	strb	r3, [r7, #23]
 800eea2:	e043      	b.n	800ef2c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800eea4:	463b      	mov	r3, r7
 800eea6:	4619      	mov	r1, r3
 800eea8:	6878      	ldr	r0, [r7, #4]
 800eeaa:	f7ff ff3f 	bl	800ed2c <create_name>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800eeb2:	7dfb      	ldrb	r3, [r7, #23]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d134      	bne.n	800ef22 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f7ff fe50 	bl	800eb5e <dir_find>
 800eebe:	4603      	mov	r3, r0
 800eec0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eec8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800eeca:	7dfb      	ldrb	r3, [r7, #23]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d00a      	beq.n	800eee6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800eed0:	7dfb      	ldrb	r3, [r7, #23]
 800eed2:	2b04      	cmp	r3, #4
 800eed4:	d127      	bne.n	800ef26 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800eed6:	7afb      	ldrb	r3, [r7, #11]
 800eed8:	f003 0304 	and.w	r3, r3, #4
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d122      	bne.n	800ef26 <follow_path+0xd2>
 800eee0:	2305      	movs	r3, #5
 800eee2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800eee4:	e01f      	b.n	800ef26 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800eee6:	7afb      	ldrb	r3, [r7, #11]
 800eee8:	f003 0304 	and.w	r3, r3, #4
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d11c      	bne.n	800ef2a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800eef0:	693b      	ldr	r3, [r7, #16]
 800eef2:	799b      	ldrb	r3, [r3, #6]
 800eef4:	f003 0310 	and.w	r3, r3, #16
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d102      	bne.n	800ef02 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800eefc:	2305      	movs	r3, #5
 800eefe:	75fb      	strb	r3, [r7, #23]
 800ef00:	e014      	b.n	800ef2c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	695b      	ldr	r3, [r3, #20]
 800ef0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef10:	4413      	add	r3, r2
 800ef12:	4619      	mov	r1, r3
 800ef14:	68f8      	ldr	r0, [r7, #12]
 800ef16:	f7ff fd86 	bl	800ea26 <ld_clust>
 800ef1a:	4602      	mov	r2, r0
 800ef1c:	693b      	ldr	r3, [r7, #16]
 800ef1e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ef20:	e7c0      	b.n	800eea4 <follow_path+0x50>
			if (res != FR_OK) break;
 800ef22:	bf00      	nop
 800ef24:	e002      	b.n	800ef2c <follow_path+0xd8>
				break;
 800ef26:	bf00      	nop
 800ef28:	e000      	b.n	800ef2c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ef2a:	bf00      	nop
			}
		}
	}

	return res;
 800ef2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef2e:	4618      	mov	r0, r3
 800ef30:	3718      	adds	r7, #24
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}

0800ef36 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ef36:	b480      	push	{r7}
 800ef38:	b087      	sub	sp, #28
 800ef3a:	af00      	add	r7, sp, #0
 800ef3c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ef3e:	f04f 33ff 	mov.w	r3, #4294967295
 800ef42:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d031      	beq.n	800efb0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	617b      	str	r3, [r7, #20]
 800ef52:	e002      	b.n	800ef5a <get_ldnumber+0x24>
 800ef54:	697b      	ldr	r3, [r7, #20]
 800ef56:	3301      	adds	r3, #1
 800ef58:	617b      	str	r3, [r7, #20]
 800ef5a:	697b      	ldr	r3, [r7, #20]
 800ef5c:	781b      	ldrb	r3, [r3, #0]
 800ef5e:	2b20      	cmp	r3, #32
 800ef60:	d903      	bls.n	800ef6a <get_ldnumber+0x34>
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	781b      	ldrb	r3, [r3, #0]
 800ef66:	2b3a      	cmp	r3, #58	; 0x3a
 800ef68:	d1f4      	bne.n	800ef54 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ef6a:	697b      	ldr	r3, [r7, #20]
 800ef6c:	781b      	ldrb	r3, [r3, #0]
 800ef6e:	2b3a      	cmp	r3, #58	; 0x3a
 800ef70:	d11c      	bne.n	800efac <get_ldnumber+0x76>
			tp = *path;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	1c5a      	adds	r2, r3, #1
 800ef7c:	60fa      	str	r2, [r7, #12]
 800ef7e:	781b      	ldrb	r3, [r3, #0]
 800ef80:	3b30      	subs	r3, #48	; 0x30
 800ef82:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ef84:	68bb      	ldr	r3, [r7, #8]
 800ef86:	2b09      	cmp	r3, #9
 800ef88:	d80e      	bhi.n	800efa8 <get_ldnumber+0x72>
 800ef8a:	68fa      	ldr	r2, [r7, #12]
 800ef8c:	697b      	ldr	r3, [r7, #20]
 800ef8e:	429a      	cmp	r2, r3
 800ef90:	d10a      	bne.n	800efa8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ef92:	68bb      	ldr	r3, [r7, #8]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d107      	bne.n	800efa8 <get_ldnumber+0x72>
					vol = (int)i;
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ef9c:	697b      	ldr	r3, [r7, #20]
 800ef9e:	3301      	adds	r3, #1
 800efa0:	617b      	str	r3, [r7, #20]
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	697a      	ldr	r2, [r7, #20]
 800efa6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800efa8:	693b      	ldr	r3, [r7, #16]
 800efaa:	e002      	b.n	800efb2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800efac:	2300      	movs	r3, #0
 800efae:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800efb0:	693b      	ldr	r3, [r7, #16]
}
 800efb2:	4618      	mov	r0, r3
 800efb4:	371c      	adds	r7, #28
 800efb6:	46bd      	mov	sp, r7
 800efb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbc:	4770      	bx	lr
	...

0800efc0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b082      	sub	sp, #8
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
 800efc8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2200      	movs	r2, #0
 800efce:	70da      	strb	r2, [r3, #3]
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	f04f 32ff 	mov.w	r2, #4294967295
 800efd6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800efd8:	6839      	ldr	r1, [r7, #0]
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	f7ff f81c 	bl	800e018 <move_window>
 800efe0:	4603      	mov	r3, r0
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d001      	beq.n	800efea <check_fs+0x2a>
 800efe6:	2304      	movs	r3, #4
 800efe8:	e038      	b.n	800f05c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	3334      	adds	r3, #52	; 0x34
 800efee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800eff2:	4618      	mov	r0, r3
 800eff4:	f7fe fd2e 	bl	800da54 <ld_word>
 800eff8:	4603      	mov	r3, r0
 800effa:	461a      	mov	r2, r3
 800effc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f000:	429a      	cmp	r2, r3
 800f002:	d001      	beq.n	800f008 <check_fs+0x48>
 800f004:	2303      	movs	r3, #3
 800f006:	e029      	b.n	800f05c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f00e:	2be9      	cmp	r3, #233	; 0xe9
 800f010:	d009      	beq.n	800f026 <check_fs+0x66>
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f018:	2beb      	cmp	r3, #235	; 0xeb
 800f01a:	d11e      	bne.n	800f05a <check_fs+0x9a>
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800f022:	2b90      	cmp	r3, #144	; 0x90
 800f024:	d119      	bne.n	800f05a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	3334      	adds	r3, #52	; 0x34
 800f02a:	3336      	adds	r3, #54	; 0x36
 800f02c:	4618      	mov	r0, r3
 800f02e:	f7fe fd29 	bl	800da84 <ld_dword>
 800f032:	4603      	mov	r3, r0
 800f034:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f038:	4a0a      	ldr	r2, [pc, #40]	; (800f064 <check_fs+0xa4>)
 800f03a:	4293      	cmp	r3, r2
 800f03c:	d101      	bne.n	800f042 <check_fs+0x82>
 800f03e:	2300      	movs	r3, #0
 800f040:	e00c      	b.n	800f05c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	3334      	adds	r3, #52	; 0x34
 800f046:	3352      	adds	r3, #82	; 0x52
 800f048:	4618      	mov	r0, r3
 800f04a:	f7fe fd1b 	bl	800da84 <ld_dword>
 800f04e:	4603      	mov	r3, r0
 800f050:	4a05      	ldr	r2, [pc, #20]	; (800f068 <check_fs+0xa8>)
 800f052:	4293      	cmp	r3, r2
 800f054:	d101      	bne.n	800f05a <check_fs+0x9a>
 800f056:	2300      	movs	r3, #0
 800f058:	e000      	b.n	800f05c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f05a:	2302      	movs	r3, #2
}
 800f05c:	4618      	mov	r0, r3
 800f05e:	3708      	adds	r7, #8
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}
 800f064:	00544146 	.word	0x00544146
 800f068:	33544146 	.word	0x33544146

0800f06c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b096      	sub	sp, #88	; 0x58
 800f070:	af00      	add	r7, sp, #0
 800f072:	60f8      	str	r0, [r7, #12]
 800f074:	60b9      	str	r1, [r7, #8]
 800f076:	4613      	mov	r3, r2
 800f078:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f07a:	68bb      	ldr	r3, [r7, #8]
 800f07c:	2200      	movs	r2, #0
 800f07e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f080:	68f8      	ldr	r0, [r7, #12]
 800f082:	f7ff ff58 	bl	800ef36 <get_ldnumber>
 800f086:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	da01      	bge.n	800f092 <find_volume+0x26>
 800f08e:	230b      	movs	r3, #11
 800f090:	e236      	b.n	800f500 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f092:	4aac      	ldr	r2, [pc, #688]	; (800f344 <find_volume+0x2d8>)
 800f094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f09a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d101      	bne.n	800f0a6 <find_volume+0x3a>
 800f0a2:	230c      	movs	r3, #12
 800f0a4:	e22c      	b.n	800f500 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800f0a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f0a8:	f7fe fdd4 	bl	800dc54 <lock_fs>
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d101      	bne.n	800f0b6 <find_volume+0x4a>
 800f0b2:	230f      	movs	r3, #15
 800f0b4:	e224      	b.n	800f500 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f0ba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f0bc:	79fb      	ldrb	r3, [r7, #7]
 800f0be:	f023 0301 	bic.w	r3, r3, #1
 800f0c2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0c6:	781b      	ldrb	r3, [r3, #0]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d01a      	beq.n	800f102 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800f0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ce:	785b      	ldrb	r3, [r3, #1]
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f7fe fc21 	bl	800d918 <disk_status>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f0dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f0e0:	f003 0301 	and.w	r3, r3, #1
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d10c      	bne.n	800f102 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f0e8:	79fb      	ldrb	r3, [r7, #7]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d007      	beq.n	800f0fe <find_volume+0x92>
 800f0ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f0f2:	f003 0304 	and.w	r3, r3, #4
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d001      	beq.n	800f0fe <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800f0fa:	230a      	movs	r3, #10
 800f0fc:	e200      	b.n	800f500 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800f0fe:	2300      	movs	r3, #0
 800f100:	e1fe      	b.n	800f500 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f104:	2200      	movs	r2, #0
 800f106:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f10a:	b2da      	uxtb	r2, r3
 800f10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f10e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f112:	785b      	ldrb	r3, [r3, #1]
 800f114:	4618      	mov	r0, r3
 800f116:	f7fe fc19 	bl	800d94c <disk_initialize>
 800f11a:	4603      	mov	r3, r0
 800f11c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f120:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f124:	f003 0301 	and.w	r3, r3, #1
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d001      	beq.n	800f130 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f12c:	2303      	movs	r3, #3
 800f12e:	e1e7      	b.n	800f500 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f130:	79fb      	ldrb	r3, [r7, #7]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d007      	beq.n	800f146 <find_volume+0xda>
 800f136:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f13a:	f003 0304 	and.w	r3, r3, #4
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d001      	beq.n	800f146 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800f142:	230a      	movs	r3, #10
 800f144:	e1dc      	b.n	800f500 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f146:	2300      	movs	r3, #0
 800f148:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f14a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f14c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f14e:	f7ff ff37 	bl	800efc0 <check_fs>
 800f152:	4603      	mov	r3, r0
 800f154:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f158:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f15c:	2b02      	cmp	r3, #2
 800f15e:	d14b      	bne.n	800f1f8 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f160:	2300      	movs	r3, #0
 800f162:	643b      	str	r3, [r7, #64]	; 0x40
 800f164:	e01f      	b.n	800f1a6 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f168:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f16c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f16e:	011b      	lsls	r3, r3, #4
 800f170:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f174:	4413      	add	r3, r2
 800f176:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f17a:	3304      	adds	r3, #4
 800f17c:	781b      	ldrb	r3, [r3, #0]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d006      	beq.n	800f190 <find_volume+0x124>
 800f182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f184:	3308      	adds	r3, #8
 800f186:	4618      	mov	r0, r3
 800f188:	f7fe fc7c 	bl	800da84 <ld_dword>
 800f18c:	4602      	mov	r2, r0
 800f18e:	e000      	b.n	800f192 <find_volume+0x126>
 800f190:	2200      	movs	r2, #0
 800f192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f194:	009b      	lsls	r3, r3, #2
 800f196:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f19a:	440b      	add	r3, r1
 800f19c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f1a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1a2:	3301      	adds	r3, #1
 800f1a4:	643b      	str	r3, [r7, #64]	; 0x40
 800f1a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1a8:	2b03      	cmp	r3, #3
 800f1aa:	d9dc      	bls.n	800f166 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f1b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d002      	beq.n	800f1bc <find_volume+0x150>
 800f1b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1b8:	3b01      	subs	r3, #1
 800f1ba:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f1bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1be:	009b      	lsls	r3, r3, #2
 800f1c0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f1c4:	4413      	add	r3, r2
 800f1c6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f1ca:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f1cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d005      	beq.n	800f1de <find_volume+0x172>
 800f1d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f1d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f1d6:	f7ff fef3 	bl	800efc0 <check_fs>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	e000      	b.n	800f1e0 <find_volume+0x174>
 800f1de:	2303      	movs	r3, #3
 800f1e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f1e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f1e8:	2b01      	cmp	r3, #1
 800f1ea:	d905      	bls.n	800f1f8 <find_volume+0x18c>
 800f1ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1ee:	3301      	adds	r3, #1
 800f1f0:	643b      	str	r3, [r7, #64]	; 0x40
 800f1f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1f4:	2b03      	cmp	r3, #3
 800f1f6:	d9e1      	bls.n	800f1bc <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f1f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f1fc:	2b04      	cmp	r3, #4
 800f1fe:	d101      	bne.n	800f204 <find_volume+0x198>
 800f200:	2301      	movs	r3, #1
 800f202:	e17d      	b.n	800f500 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f204:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f208:	2b01      	cmp	r3, #1
 800f20a:	d901      	bls.n	800f210 <find_volume+0x1a4>
 800f20c:	230d      	movs	r3, #13
 800f20e:	e177      	b.n	800f500 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f212:	3334      	adds	r3, #52	; 0x34
 800f214:	330b      	adds	r3, #11
 800f216:	4618      	mov	r0, r3
 800f218:	f7fe fc1c 	bl	800da54 <ld_word>
 800f21c:	4603      	mov	r3, r0
 800f21e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f222:	d001      	beq.n	800f228 <find_volume+0x1bc>
 800f224:	230d      	movs	r3, #13
 800f226:	e16b      	b.n	800f500 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f22a:	3334      	adds	r3, #52	; 0x34
 800f22c:	3316      	adds	r3, #22
 800f22e:	4618      	mov	r0, r3
 800f230:	f7fe fc10 	bl	800da54 <ld_word>
 800f234:	4603      	mov	r3, r0
 800f236:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d106      	bne.n	800f24c <find_volume+0x1e0>
 800f23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f240:	3334      	adds	r3, #52	; 0x34
 800f242:	3324      	adds	r3, #36	; 0x24
 800f244:	4618      	mov	r0, r3
 800f246:	f7fe fc1d 	bl	800da84 <ld_dword>
 800f24a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f24e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f250:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f254:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800f258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f25a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f25e:	789b      	ldrb	r3, [r3, #2]
 800f260:	2b01      	cmp	r3, #1
 800f262:	d005      	beq.n	800f270 <find_volume+0x204>
 800f264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f266:	789b      	ldrb	r3, [r3, #2]
 800f268:	2b02      	cmp	r3, #2
 800f26a:	d001      	beq.n	800f270 <find_volume+0x204>
 800f26c:	230d      	movs	r3, #13
 800f26e:	e147      	b.n	800f500 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f272:	789b      	ldrb	r3, [r3, #2]
 800f274:	461a      	mov	r2, r3
 800f276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f278:	fb02 f303 	mul.w	r3, r2, r3
 800f27c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f280:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f284:	b29a      	uxth	r2, r3
 800f286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f288:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f28c:	895b      	ldrh	r3, [r3, #10]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d008      	beq.n	800f2a4 <find_volume+0x238>
 800f292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f294:	895b      	ldrh	r3, [r3, #10]
 800f296:	461a      	mov	r2, r3
 800f298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f29a:	895b      	ldrh	r3, [r3, #10]
 800f29c:	3b01      	subs	r3, #1
 800f29e:	4013      	ands	r3, r2
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d001      	beq.n	800f2a8 <find_volume+0x23c>
 800f2a4:	230d      	movs	r3, #13
 800f2a6:	e12b      	b.n	800f500 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2aa:	3334      	adds	r3, #52	; 0x34
 800f2ac:	3311      	adds	r3, #17
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f7fe fbd0 	bl	800da54 <ld_word>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	461a      	mov	r2, r3
 800f2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2be:	891b      	ldrh	r3, [r3, #8]
 800f2c0:	f003 030f 	and.w	r3, r3, #15
 800f2c4:	b29b      	uxth	r3, r3
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d001      	beq.n	800f2ce <find_volume+0x262>
 800f2ca:	230d      	movs	r3, #13
 800f2cc:	e118      	b.n	800f500 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2d0:	3334      	adds	r3, #52	; 0x34
 800f2d2:	3313      	adds	r3, #19
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	f7fe fbbd 	bl	800da54 <ld_word>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f2de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d106      	bne.n	800f2f2 <find_volume+0x286>
 800f2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2e6:	3334      	adds	r3, #52	; 0x34
 800f2e8:	3320      	adds	r3, #32
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f7fe fbca 	bl	800da84 <ld_dword>
 800f2f0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f4:	3334      	adds	r3, #52	; 0x34
 800f2f6:	330e      	adds	r3, #14
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f7fe fbab 	bl	800da54 <ld_word>
 800f2fe:	4603      	mov	r3, r0
 800f300:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f302:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f304:	2b00      	cmp	r3, #0
 800f306:	d101      	bne.n	800f30c <find_volume+0x2a0>
 800f308:	230d      	movs	r3, #13
 800f30a:	e0f9      	b.n	800f500 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f30c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f30e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f310:	4413      	add	r3, r2
 800f312:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f314:	8912      	ldrh	r2, [r2, #8]
 800f316:	0912      	lsrs	r2, r2, #4
 800f318:	b292      	uxth	r2, r2
 800f31a:	4413      	add	r3, r2
 800f31c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f31e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f322:	429a      	cmp	r2, r3
 800f324:	d201      	bcs.n	800f32a <find_volume+0x2be>
 800f326:	230d      	movs	r3, #13
 800f328:	e0ea      	b.n	800f500 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f32a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f32e:	1ad3      	subs	r3, r2, r3
 800f330:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f332:	8952      	ldrh	r2, [r2, #10]
 800f334:	fbb3 f3f2 	udiv	r3, r3, r2
 800f338:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d103      	bne.n	800f348 <find_volume+0x2dc>
 800f340:	230d      	movs	r3, #13
 800f342:	e0dd      	b.n	800f500 <find_volume+0x494>
 800f344:	200003c4 	.word	0x200003c4
		fmt = FS_FAT32;
 800f348:	2303      	movs	r3, #3
 800f34a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f350:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f354:	4293      	cmp	r3, r2
 800f356:	d802      	bhi.n	800f35e <find_volume+0x2f2>
 800f358:	2302      	movs	r3, #2
 800f35a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f360:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f364:	4293      	cmp	r3, r2
 800f366:	d802      	bhi.n	800f36e <find_volume+0x302>
 800f368:	2301      	movs	r3, #1
 800f36a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f370:	1c9a      	adds	r2, r3, #2
 800f372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f374:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800f376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f378:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f37a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f37c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f37e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f380:	441a      	add	r2, r3
 800f382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f384:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800f386:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f38a:	441a      	add	r2, r3
 800f38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f38e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800f390:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f394:	2b03      	cmp	r3, #3
 800f396:	d11e      	bne.n	800f3d6 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f39a:	3334      	adds	r3, #52	; 0x34
 800f39c:	332a      	adds	r3, #42	; 0x2a
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f7fe fb58 	bl	800da54 <ld_word>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d001      	beq.n	800f3ae <find_volume+0x342>
 800f3aa:	230d      	movs	r3, #13
 800f3ac:	e0a8      	b.n	800f500 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3b0:	891b      	ldrh	r3, [r3, #8]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d001      	beq.n	800f3ba <find_volume+0x34e>
 800f3b6:	230d      	movs	r3, #13
 800f3b8:	e0a2      	b.n	800f500 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3bc:	3334      	adds	r3, #52	; 0x34
 800f3be:	332c      	adds	r3, #44	; 0x2c
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f7fe fb5f 	bl	800da84 <ld_dword>
 800f3c6:	4602      	mov	r2, r0
 800f3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ca:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ce:	699b      	ldr	r3, [r3, #24]
 800f3d0:	009b      	lsls	r3, r3, #2
 800f3d2:	647b      	str	r3, [r7, #68]	; 0x44
 800f3d4:	e01f      	b.n	800f416 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3d8:	891b      	ldrh	r3, [r3, #8]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d101      	bne.n	800f3e2 <find_volume+0x376>
 800f3de:	230d      	movs	r3, #13
 800f3e0:	e08e      	b.n	800f500 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f3e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3e8:	441a      	add	r2, r3
 800f3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ec:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f3ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f3f2:	2b02      	cmp	r3, #2
 800f3f4:	d103      	bne.n	800f3fe <find_volume+0x392>
 800f3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3f8:	699b      	ldr	r3, [r3, #24]
 800f3fa:	005b      	lsls	r3, r3, #1
 800f3fc:	e00a      	b.n	800f414 <find_volume+0x3a8>
 800f3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f400:	699a      	ldr	r2, [r3, #24]
 800f402:	4613      	mov	r3, r2
 800f404:	005b      	lsls	r3, r3, #1
 800f406:	4413      	add	r3, r2
 800f408:	085a      	lsrs	r2, r3, #1
 800f40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f40c:	699b      	ldr	r3, [r3, #24]
 800f40e:	f003 0301 	and.w	r3, r3, #1
 800f412:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f414:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f418:	69da      	ldr	r2, [r3, #28]
 800f41a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f41c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800f420:	0a5b      	lsrs	r3, r3, #9
 800f422:	429a      	cmp	r2, r3
 800f424:	d201      	bcs.n	800f42a <find_volume+0x3be>
 800f426:	230d      	movs	r3, #13
 800f428:	e06a      	b.n	800f500 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f42c:	f04f 32ff 	mov.w	r2, #4294967295
 800f430:	615a      	str	r2, [r3, #20]
 800f432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f434:	695a      	ldr	r2, [r3, #20]
 800f436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f438:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800f43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f43c:	2280      	movs	r2, #128	; 0x80
 800f43e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f440:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f444:	2b03      	cmp	r3, #3
 800f446:	d149      	bne.n	800f4dc <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f44a:	3334      	adds	r3, #52	; 0x34
 800f44c:	3330      	adds	r3, #48	; 0x30
 800f44e:	4618      	mov	r0, r3
 800f450:	f7fe fb00 	bl	800da54 <ld_word>
 800f454:	4603      	mov	r3, r0
 800f456:	2b01      	cmp	r3, #1
 800f458:	d140      	bne.n	800f4dc <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f45a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f45c:	3301      	adds	r3, #1
 800f45e:	4619      	mov	r1, r3
 800f460:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f462:	f7fe fdd9 	bl	800e018 <move_window>
 800f466:	4603      	mov	r3, r0
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d137      	bne.n	800f4dc <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800f46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f46e:	2200      	movs	r2, #0
 800f470:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f474:	3334      	adds	r3, #52	; 0x34
 800f476:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f47a:	4618      	mov	r0, r3
 800f47c:	f7fe faea 	bl	800da54 <ld_word>
 800f480:	4603      	mov	r3, r0
 800f482:	461a      	mov	r2, r3
 800f484:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f488:	429a      	cmp	r2, r3
 800f48a:	d127      	bne.n	800f4dc <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f48e:	3334      	adds	r3, #52	; 0x34
 800f490:	4618      	mov	r0, r3
 800f492:	f7fe faf7 	bl	800da84 <ld_dword>
 800f496:	4603      	mov	r3, r0
 800f498:	4a1b      	ldr	r2, [pc, #108]	; (800f508 <find_volume+0x49c>)
 800f49a:	4293      	cmp	r3, r2
 800f49c:	d11e      	bne.n	800f4dc <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4a0:	3334      	adds	r3, #52	; 0x34
 800f4a2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f7fe faec 	bl	800da84 <ld_dword>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	4a17      	ldr	r2, [pc, #92]	; (800f50c <find_volume+0x4a0>)
 800f4b0:	4293      	cmp	r3, r2
 800f4b2:	d113      	bne.n	800f4dc <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4b6:	3334      	adds	r3, #52	; 0x34
 800f4b8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f7fe fae1 	bl	800da84 <ld_dword>
 800f4c2:	4602      	mov	r2, r0
 800f4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4c6:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ca:	3334      	adds	r3, #52	; 0x34
 800f4cc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f7fe fad7 	bl	800da84 <ld_dword>
 800f4d6:	4602      	mov	r2, r0
 800f4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4da:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4de:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f4e2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f4e4:	4b0a      	ldr	r3, [pc, #40]	; (800f510 <find_volume+0x4a4>)
 800f4e6:	881b      	ldrh	r3, [r3, #0]
 800f4e8:	3301      	adds	r3, #1
 800f4ea:	b29a      	uxth	r2, r3
 800f4ec:	4b08      	ldr	r3, [pc, #32]	; (800f510 <find_volume+0x4a4>)
 800f4ee:	801a      	strh	r2, [r3, #0]
 800f4f0:	4b07      	ldr	r3, [pc, #28]	; (800f510 <find_volume+0x4a4>)
 800f4f2:	881a      	ldrh	r2, [r3, #0]
 800f4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4f6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f4f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f4fa:	f7fe fd25 	bl	800df48 <clear_lock>
#endif
	return FR_OK;
 800f4fe:	2300      	movs	r3, #0
}
 800f500:	4618      	mov	r0, r3
 800f502:	3758      	adds	r7, #88	; 0x58
 800f504:	46bd      	mov	sp, r7
 800f506:	bd80      	pop	{r7, pc}
 800f508:	41615252 	.word	0x41615252
 800f50c:	61417272 	.word	0x61417272
 800f510:	200003c8 	.word	0x200003c8

0800f514 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b084      	sub	sp, #16
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
 800f51c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f51e:	2309      	movs	r3, #9
 800f520:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d02e      	beq.n	800f586 <validate+0x72>
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d02a      	beq.n	800f586 <validate+0x72>
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	781b      	ldrb	r3, [r3, #0]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d025      	beq.n	800f586 <validate+0x72>
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	889a      	ldrh	r2, [r3, #4]
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	88db      	ldrh	r3, [r3, #6]
 800f544:	429a      	cmp	r2, r3
 800f546:	d11e      	bne.n	800f586 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	4618      	mov	r0, r3
 800f54e:	f7fe fb81 	bl	800dc54 <lock_fs>
 800f552:	4603      	mov	r3, r0
 800f554:	2b00      	cmp	r3, #0
 800f556:	d014      	beq.n	800f582 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	785b      	ldrb	r3, [r3, #1]
 800f55e:	4618      	mov	r0, r3
 800f560:	f7fe f9da 	bl	800d918 <disk_status>
 800f564:	4603      	mov	r3, r0
 800f566:	f003 0301 	and.w	r3, r3, #1
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d102      	bne.n	800f574 <validate+0x60>
				res = FR_OK;
 800f56e:	2300      	movs	r3, #0
 800f570:	73fb      	strb	r3, [r7, #15]
 800f572:	e008      	b.n	800f586 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	2100      	movs	r1, #0
 800f57a:	4618      	mov	r0, r3
 800f57c:	f7fe fb80 	bl	800dc80 <unlock_fs>
 800f580:	e001      	b.n	800f586 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800f582:	230f      	movs	r3, #15
 800f584:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f586:	7bfb      	ldrb	r3, [r7, #15]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d102      	bne.n	800f592 <validate+0x7e>
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	e000      	b.n	800f594 <validate+0x80>
 800f592:	2300      	movs	r3, #0
 800f594:	683a      	ldr	r2, [r7, #0]
 800f596:	6013      	str	r3, [r2, #0]
	return res;
 800f598:	7bfb      	ldrb	r3, [r7, #15]
}
 800f59a:	4618      	mov	r0, r3
 800f59c:	3710      	adds	r7, #16
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd80      	pop	{r7, pc}
	...

0800f5a4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b088      	sub	sp, #32
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	60f8      	str	r0, [r7, #12]
 800f5ac:	60b9      	str	r1, [r7, #8]
 800f5ae:	4613      	mov	r3, r2
 800f5b0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f5b6:	f107 0310 	add.w	r3, r7, #16
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f7ff fcbb 	bl	800ef36 <get_ldnumber>
 800f5c0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f5c2:	69fb      	ldr	r3, [r7, #28]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	da01      	bge.n	800f5cc <f_mount+0x28>
 800f5c8:	230b      	movs	r3, #11
 800f5ca:	e048      	b.n	800f65e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f5cc:	4a26      	ldr	r2, [pc, #152]	; (800f668 <f_mount+0xc4>)
 800f5ce:	69fb      	ldr	r3, [r7, #28]
 800f5d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5d4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f5d6:	69bb      	ldr	r3, [r7, #24]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d00f      	beq.n	800f5fc <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f5dc:	69b8      	ldr	r0, [r7, #24]
 800f5de:	f7fe fcb3 	bl	800df48 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800f5e2:	69bb      	ldr	r3, [r7, #24]
 800f5e4:	68db      	ldr	r3, [r3, #12]
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f001 f812 	bl	8010610 <ff_del_syncobj>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d101      	bne.n	800f5f6 <f_mount+0x52>
 800f5f2:	2302      	movs	r3, #2
 800f5f4:	e033      	b.n	800f65e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f5f6:	69bb      	ldr	r3, [r7, #24]
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d00f      	beq.n	800f622 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	2200      	movs	r2, #0
 800f606:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800f608:	69fb      	ldr	r3, [r7, #28]
 800f60a:	b2da      	uxtb	r2, r3
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	330c      	adds	r3, #12
 800f610:	4619      	mov	r1, r3
 800f612:	4610      	mov	r0, r2
 800f614:	f000 ffe1 	bl	80105da <ff_cre_syncobj>
 800f618:	4603      	mov	r3, r0
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d101      	bne.n	800f622 <f_mount+0x7e>
 800f61e:	2302      	movs	r3, #2
 800f620:	e01d      	b.n	800f65e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f622:	68fa      	ldr	r2, [r7, #12]
 800f624:	4910      	ldr	r1, [pc, #64]	; (800f668 <f_mount+0xc4>)
 800f626:	69fb      	ldr	r3, [r7, #28]
 800f628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d002      	beq.n	800f638 <f_mount+0x94>
 800f632:	79fb      	ldrb	r3, [r7, #7]
 800f634:	2b01      	cmp	r3, #1
 800f636:	d001      	beq.n	800f63c <f_mount+0x98>
 800f638:	2300      	movs	r3, #0
 800f63a:	e010      	b.n	800f65e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f63c:	f107 010c 	add.w	r1, r7, #12
 800f640:	f107 0308 	add.w	r3, r7, #8
 800f644:	2200      	movs	r2, #0
 800f646:	4618      	mov	r0, r3
 800f648:	f7ff fd10 	bl	800f06c <find_volume>
 800f64c:	4603      	mov	r3, r0
 800f64e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	7dfa      	ldrb	r2, [r7, #23]
 800f654:	4611      	mov	r1, r2
 800f656:	4618      	mov	r0, r3
 800f658:	f7fe fb12 	bl	800dc80 <unlock_fs>
 800f65c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f65e:	4618      	mov	r0, r3
 800f660:	3720      	adds	r7, #32
 800f662:	46bd      	mov	sp, r7
 800f664:	bd80      	pop	{r7, pc}
 800f666:	bf00      	nop
 800f668:	200003c4 	.word	0x200003c4

0800f66c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b098      	sub	sp, #96	; 0x60
 800f670:	af00      	add	r7, sp, #0
 800f672:	60f8      	str	r0, [r7, #12]
 800f674:	60b9      	str	r1, [r7, #8]
 800f676:	4613      	mov	r3, r2
 800f678:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d101      	bne.n	800f684 <f_open+0x18>
 800f680:	2309      	movs	r3, #9
 800f682:	e1b4      	b.n	800f9ee <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f684:	79fb      	ldrb	r3, [r7, #7]
 800f686:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f68a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f68c:	79fa      	ldrb	r2, [r7, #7]
 800f68e:	f107 0110 	add.w	r1, r7, #16
 800f692:	f107 0308 	add.w	r3, r7, #8
 800f696:	4618      	mov	r0, r3
 800f698:	f7ff fce8 	bl	800f06c <find_volume>
 800f69c:	4603      	mov	r3, r0
 800f69e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800f6a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	f040 8191 	bne.w	800f9ce <f_open+0x362>
		dj.obj.fs = fs;
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f6b0:	68ba      	ldr	r2, [r7, #8]
 800f6b2:	f107 0314 	add.w	r3, r7, #20
 800f6b6:	4611      	mov	r1, r2
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f7ff fbcb 	bl	800ee54 <follow_path>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f6c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d11a      	bne.n	800f702 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f6cc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f6d0:	b25b      	sxtb	r3, r3
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	da03      	bge.n	800f6de <f_open+0x72>
				res = FR_INVALID_NAME;
 800f6d6:	2306      	movs	r3, #6
 800f6d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f6dc:	e011      	b.n	800f702 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f6de:	79fb      	ldrb	r3, [r7, #7]
 800f6e0:	f023 0301 	bic.w	r3, r3, #1
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	bf14      	ite	ne
 800f6e8:	2301      	movne	r3, #1
 800f6ea:	2300      	moveq	r3, #0
 800f6ec:	b2db      	uxtb	r3, r3
 800f6ee:	461a      	mov	r2, r3
 800f6f0:	f107 0314 	add.w	r3, r7, #20
 800f6f4:	4611      	mov	r1, r2
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f7fe fade 	bl	800dcb8 <chk_lock>
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f702:	79fb      	ldrb	r3, [r7, #7]
 800f704:	f003 031c 	and.w	r3, r3, #28
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d07f      	beq.n	800f80c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f70c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f710:	2b00      	cmp	r3, #0
 800f712:	d017      	beq.n	800f744 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f714:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f718:	2b04      	cmp	r3, #4
 800f71a:	d10e      	bne.n	800f73a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f71c:	f7fe fb28 	bl	800dd70 <enq_lock>
 800f720:	4603      	mov	r3, r0
 800f722:	2b00      	cmp	r3, #0
 800f724:	d006      	beq.n	800f734 <f_open+0xc8>
 800f726:	f107 0314 	add.w	r3, r7, #20
 800f72a:	4618      	mov	r0, r3
 800f72c:	f7ff fa6c 	bl	800ec08 <dir_register>
 800f730:	4603      	mov	r3, r0
 800f732:	e000      	b.n	800f736 <f_open+0xca>
 800f734:	2312      	movs	r3, #18
 800f736:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f73a:	79fb      	ldrb	r3, [r7, #7]
 800f73c:	f043 0308 	orr.w	r3, r3, #8
 800f740:	71fb      	strb	r3, [r7, #7]
 800f742:	e010      	b.n	800f766 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f744:	7ebb      	ldrb	r3, [r7, #26]
 800f746:	f003 0311 	and.w	r3, r3, #17
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d003      	beq.n	800f756 <f_open+0xea>
					res = FR_DENIED;
 800f74e:	2307      	movs	r3, #7
 800f750:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f754:	e007      	b.n	800f766 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f756:	79fb      	ldrb	r3, [r7, #7]
 800f758:	f003 0304 	and.w	r3, r3, #4
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d002      	beq.n	800f766 <f_open+0xfa>
 800f760:	2308      	movs	r3, #8
 800f762:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f766:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d168      	bne.n	800f840 <f_open+0x1d4>
 800f76e:	79fb      	ldrb	r3, [r7, #7]
 800f770:	f003 0308 	and.w	r3, r3, #8
 800f774:	2b00      	cmp	r3, #0
 800f776:	d063      	beq.n	800f840 <f_open+0x1d4>
				dw = GET_FATTIME();
 800f778:	f7fc ffe6 	bl	800c748 <get_fattime>
 800f77c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f77e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f780:	330e      	adds	r3, #14
 800f782:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f784:	4618      	mov	r0, r3
 800f786:	f7fe f9bb 	bl	800db00 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f78a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f78c:	3316      	adds	r3, #22
 800f78e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f790:	4618      	mov	r0, r3
 800f792:	f7fe f9b5 	bl	800db00 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f798:	330b      	adds	r3, #11
 800f79a:	2220      	movs	r2, #32
 800f79c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f79e:	693b      	ldr	r3, [r7, #16]
 800f7a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f7a2:	4611      	mov	r1, r2
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f7ff f93e 	bl	800ea26 <ld_clust>
 800f7aa:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f7ac:	693b      	ldr	r3, [r7, #16]
 800f7ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	f7ff f956 	bl	800ea64 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f7b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7ba:	331c      	adds	r3, #28
 800f7bc:	2100      	movs	r1, #0
 800f7be:	4618      	mov	r0, r3
 800f7c0:	f7fe f99e 	bl	800db00 <st_dword>
					fs->wflag = 1;
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	2201      	movs	r2, #1
 800f7c8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f7ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d037      	beq.n	800f840 <f_open+0x1d4>
						dw = fs->winsect;
 800f7d0:	693b      	ldr	r3, [r7, #16]
 800f7d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7d4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800f7d6:	f107 0314 	add.w	r3, r7, #20
 800f7da:	2200      	movs	r2, #0
 800f7dc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f7fe fe69 	bl	800e4b6 <remove_chain>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800f7ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d126      	bne.n	800f840 <f_open+0x1d4>
							res = move_window(fs, dw);
 800f7f2:	693b      	ldr	r3, [r7, #16]
 800f7f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f7fe fc0e 	bl	800e018 <move_window>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f802:	693b      	ldr	r3, [r7, #16]
 800f804:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f806:	3a01      	subs	r2, #1
 800f808:	611a      	str	r2, [r3, #16]
 800f80a:	e019      	b.n	800f840 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f80c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f810:	2b00      	cmp	r3, #0
 800f812:	d115      	bne.n	800f840 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f814:	7ebb      	ldrb	r3, [r7, #26]
 800f816:	f003 0310 	and.w	r3, r3, #16
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d003      	beq.n	800f826 <f_open+0x1ba>
					res = FR_NO_FILE;
 800f81e:	2304      	movs	r3, #4
 800f820:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f824:	e00c      	b.n	800f840 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f826:	79fb      	ldrb	r3, [r7, #7]
 800f828:	f003 0302 	and.w	r3, r3, #2
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d007      	beq.n	800f840 <f_open+0x1d4>
 800f830:	7ebb      	ldrb	r3, [r7, #26]
 800f832:	f003 0301 	and.w	r3, r3, #1
 800f836:	2b00      	cmp	r3, #0
 800f838:	d002      	beq.n	800f840 <f_open+0x1d4>
						res = FR_DENIED;
 800f83a:	2307      	movs	r3, #7
 800f83c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800f840:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f844:	2b00      	cmp	r3, #0
 800f846:	d128      	bne.n	800f89a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f848:	79fb      	ldrb	r3, [r7, #7]
 800f84a:	f003 0308 	and.w	r3, r3, #8
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d003      	beq.n	800f85a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f852:	79fb      	ldrb	r3, [r7, #7]
 800f854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f858:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f85a:	693b      	ldr	r3, [r7, #16]
 800f85c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f868:	79fb      	ldrb	r3, [r7, #7]
 800f86a:	f023 0301 	bic.w	r3, r3, #1
 800f86e:	2b00      	cmp	r3, #0
 800f870:	bf14      	ite	ne
 800f872:	2301      	movne	r3, #1
 800f874:	2300      	moveq	r3, #0
 800f876:	b2db      	uxtb	r3, r3
 800f878:	461a      	mov	r2, r3
 800f87a:	f107 0314 	add.w	r3, r7, #20
 800f87e:	4611      	mov	r1, r2
 800f880:	4618      	mov	r0, r3
 800f882:	f7fe fa97 	bl	800ddb4 <inc_lock>
 800f886:	4602      	mov	r2, r0
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	691b      	ldr	r3, [r3, #16]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d102      	bne.n	800f89a <f_open+0x22e>
 800f894:	2302      	movs	r3, #2
 800f896:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f89a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	f040 8095 	bne.w	800f9ce <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f8a4:	693b      	ldr	r3, [r7, #16]
 800f8a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f8a8:	4611      	mov	r1, r2
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f7ff f8bb 	bl	800ea26 <ld_clust>
 800f8b0:	4602      	mov	r2, r0
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f8b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8b8:	331c      	adds	r3, #28
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f7fe f8e2 	bl	800da84 <ld_dword>
 800f8c0:	4602      	mov	r2, r0
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f8cc:	693a      	ldr	r2, [r7, #16]
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f8d2:	693b      	ldr	r3, [r7, #16]
 800f8d4:	88da      	ldrh	r2, [r3, #6]
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	79fa      	ldrb	r2, [r7, #7]
 800f8de:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	3330      	adds	r3, #48	; 0x30
 800f8f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f8fa:	2100      	movs	r1, #0
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	f7fe f94c 	bl	800db9a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f902:	79fb      	ldrb	r3, [r7, #7]
 800f904:	f003 0320 	and.w	r3, r3, #32
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d060      	beq.n	800f9ce <f_open+0x362>
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	68db      	ldr	r3, [r3, #12]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d05c      	beq.n	800f9ce <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	68da      	ldr	r2, [r3, #12]
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f91c:	693b      	ldr	r3, [r7, #16]
 800f91e:	895b      	ldrh	r3, [r3, #10]
 800f920:	025b      	lsls	r3, r3, #9
 800f922:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	689b      	ldr	r3, [r3, #8]
 800f928:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	68db      	ldr	r3, [r3, #12]
 800f92e:	657b      	str	r3, [r7, #84]	; 0x54
 800f930:	e016      	b.n	800f960 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f936:	4618      	mov	r0, r3
 800f938:	f7fe fc29 	bl	800e18e <get_fat>
 800f93c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800f93e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f940:	2b01      	cmp	r3, #1
 800f942:	d802      	bhi.n	800f94a <f_open+0x2de>
 800f944:	2302      	movs	r3, #2
 800f946:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f94a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f94c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f950:	d102      	bne.n	800f958 <f_open+0x2ec>
 800f952:	2301      	movs	r3, #1
 800f954:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f958:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f95a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f95c:	1ad3      	subs	r3, r2, r3
 800f95e:	657b      	str	r3, [r7, #84]	; 0x54
 800f960:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f964:	2b00      	cmp	r3, #0
 800f966:	d103      	bne.n	800f970 <f_open+0x304>
 800f968:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f96a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f96c:	429a      	cmp	r2, r3
 800f96e:	d8e0      	bhi.n	800f932 <f_open+0x2c6>
				}
				fp->clust = clst;
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f974:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f976:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d127      	bne.n	800f9ce <f_open+0x362>
 800f97e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f984:	2b00      	cmp	r3, #0
 800f986:	d022      	beq.n	800f9ce <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f988:	693b      	ldr	r3, [r7, #16]
 800f98a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f98c:	4618      	mov	r0, r3
 800f98e:	f7fe fbdf 	bl	800e150 <clust2sect>
 800f992:	6478      	str	r0, [r7, #68]	; 0x44
 800f994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f996:	2b00      	cmp	r3, #0
 800f998:	d103      	bne.n	800f9a2 <f_open+0x336>
						res = FR_INT_ERR;
 800f99a:	2302      	movs	r3, #2
 800f99c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f9a0:	e015      	b.n	800f9ce <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f9a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f9a4:	0a5a      	lsrs	r2, r3, #9
 800f9a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9a8:	441a      	add	r2, r3
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f9ae:	693b      	ldr	r3, [r7, #16]
 800f9b0:	7858      	ldrb	r0, [r3, #1]
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	6a1a      	ldr	r2, [r3, #32]
 800f9bc:	2301      	movs	r3, #1
 800f9be:	f7fd ffeb 	bl	800d998 <disk_read>
 800f9c2:	4603      	mov	r3, r0
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d002      	beq.n	800f9ce <f_open+0x362>
 800f9c8:	2301      	movs	r3, #1
 800f9ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f9ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d002      	beq.n	800f9dc <f_open+0x370>
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	2200      	movs	r2, #0
 800f9da:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f9dc:	693b      	ldr	r3, [r7, #16]
 800f9de:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800f9e2:	4611      	mov	r1, r2
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f7fe f94b 	bl	800dc80 <unlock_fs>
 800f9ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	3760      	adds	r7, #96	; 0x60
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	bd80      	pop	{r7, pc}

0800f9f6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f9f6:	b580      	push	{r7, lr}
 800f9f8:	b08c      	sub	sp, #48	; 0x30
 800f9fa:	af00      	add	r7, sp, #0
 800f9fc:	60f8      	str	r0, [r7, #12]
 800f9fe:	60b9      	str	r1, [r7, #8]
 800fa00:	607a      	str	r2, [r7, #4]
 800fa02:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800fa08:	683b      	ldr	r3, [r7, #0]
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	f107 0210 	add.w	r2, r7, #16
 800fa14:	4611      	mov	r1, r2
 800fa16:	4618      	mov	r0, r3
 800fa18:	f7ff fd7c 	bl	800f514 <validate>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fa22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d107      	bne.n	800fa3a <f_write+0x44>
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	7d5b      	ldrb	r3, [r3, #21]
 800fa2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800fa32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d009      	beq.n	800fa4e <f_write+0x58>
 800fa3a:	693b      	ldr	r3, [r7, #16]
 800fa3c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800fa40:	4611      	mov	r1, r2
 800fa42:	4618      	mov	r0, r3
 800fa44:	f7fe f91c 	bl	800dc80 <unlock_fs>
 800fa48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fa4c:	e173      	b.n	800fd36 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	7d1b      	ldrb	r3, [r3, #20]
 800fa52:	f003 0302 	and.w	r3, r3, #2
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d106      	bne.n	800fa68 <f_write+0x72>
 800fa5a:	693b      	ldr	r3, [r7, #16]
 800fa5c:	2107      	movs	r1, #7
 800fa5e:	4618      	mov	r0, r3
 800fa60:	f7fe f90e 	bl	800dc80 <unlock_fs>
 800fa64:	2307      	movs	r3, #7
 800fa66:	e166      	b.n	800fd36 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	699a      	ldr	r2, [r3, #24]
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	441a      	add	r2, r3
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	699b      	ldr	r3, [r3, #24]
 800fa74:	429a      	cmp	r2, r3
 800fa76:	f080 814b 	bcs.w	800fd10 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	699b      	ldr	r3, [r3, #24]
 800fa7e:	43db      	mvns	r3, r3
 800fa80:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800fa82:	e145      	b.n	800fd10 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	699b      	ldr	r3, [r3, #24]
 800fa88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	f040 8101 	bne.w	800fc94 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	699b      	ldr	r3, [r3, #24]
 800fa96:	0a5b      	lsrs	r3, r3, #9
 800fa98:	693a      	ldr	r2, [r7, #16]
 800fa9a:	8952      	ldrh	r2, [r2, #10]
 800fa9c:	3a01      	subs	r2, #1
 800fa9e:	4013      	ands	r3, r2
 800faa0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800faa2:	69bb      	ldr	r3, [r7, #24]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d14d      	bne.n	800fb44 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	699b      	ldr	r3, [r3, #24]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d10c      	bne.n	800faca <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	689b      	ldr	r3, [r3, #8]
 800fab4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800fab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d11a      	bne.n	800faf2 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	2100      	movs	r1, #0
 800fac0:	4618      	mov	r0, r3
 800fac2:	f7fe fd5d 	bl	800e580 <create_chain>
 800fac6:	62b8      	str	r0, [r7, #40]	; 0x28
 800fac8:	e013      	b.n	800faf2 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800face:	2b00      	cmp	r3, #0
 800fad0:	d007      	beq.n	800fae2 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	699b      	ldr	r3, [r3, #24]
 800fad6:	4619      	mov	r1, r3
 800fad8:	68f8      	ldr	r0, [r7, #12]
 800fada:	f7fe fde9 	bl	800e6b0 <clmt_clust>
 800fade:	62b8      	str	r0, [r7, #40]	; 0x28
 800fae0:	e007      	b.n	800faf2 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800fae2:	68fa      	ldr	r2, [r7, #12]
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	69db      	ldr	r3, [r3, #28]
 800fae8:	4619      	mov	r1, r3
 800faea:	4610      	mov	r0, r2
 800faec:	f7fe fd48 	bl	800e580 <create_chain>
 800faf0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800faf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	f000 8110 	beq.w	800fd1a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fafc:	2b01      	cmp	r3, #1
 800fafe:	d109      	bne.n	800fb14 <f_write+0x11e>
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	2202      	movs	r2, #2
 800fb04:	755a      	strb	r2, [r3, #21]
 800fb06:	693b      	ldr	r3, [r7, #16]
 800fb08:	2102      	movs	r1, #2
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f7fe f8b8 	bl	800dc80 <unlock_fs>
 800fb10:	2302      	movs	r3, #2
 800fb12:	e110      	b.n	800fd36 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fb14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb1a:	d109      	bne.n	800fb30 <f_write+0x13a>
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	2201      	movs	r2, #1
 800fb20:	755a      	strb	r2, [r3, #21]
 800fb22:	693b      	ldr	r3, [r7, #16]
 800fb24:	2101      	movs	r1, #1
 800fb26:	4618      	mov	r0, r3
 800fb28:	f7fe f8aa 	bl	800dc80 <unlock_fs>
 800fb2c:	2301      	movs	r3, #1
 800fb2e:	e102      	b.n	800fd36 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb34:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	689b      	ldr	r3, [r3, #8]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d102      	bne.n	800fb44 <f_write+0x14e>
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb42:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	7d1b      	ldrb	r3, [r3, #20]
 800fb48:	b25b      	sxtb	r3, r3
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	da1d      	bge.n	800fb8a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fb4e:	693b      	ldr	r3, [r7, #16]
 800fb50:	7858      	ldrb	r0, [r3, #1]
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	6a1a      	ldr	r2, [r3, #32]
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	f7fd ff3b 	bl	800d9d8 <disk_write>
 800fb62:	4603      	mov	r3, r0
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d009      	beq.n	800fb7c <f_write+0x186>
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	2201      	movs	r2, #1
 800fb6c:	755a      	strb	r2, [r3, #21]
 800fb6e:	693b      	ldr	r3, [r7, #16]
 800fb70:	2101      	movs	r1, #1
 800fb72:	4618      	mov	r0, r3
 800fb74:	f7fe f884 	bl	800dc80 <unlock_fs>
 800fb78:	2301      	movs	r3, #1
 800fb7a:	e0dc      	b.n	800fd36 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	7d1b      	ldrb	r3, [r3, #20]
 800fb80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fb84:	b2da      	uxtb	r2, r3
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fb8a:	693a      	ldr	r2, [r7, #16]
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	69db      	ldr	r3, [r3, #28]
 800fb90:	4619      	mov	r1, r3
 800fb92:	4610      	mov	r0, r2
 800fb94:	f7fe fadc 	bl	800e150 <clust2sect>
 800fb98:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d109      	bne.n	800fbb4 <f_write+0x1be>
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	2202      	movs	r2, #2
 800fba4:	755a      	strb	r2, [r3, #21]
 800fba6:	693b      	ldr	r3, [r7, #16]
 800fba8:	2102      	movs	r1, #2
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f7fe f868 	bl	800dc80 <unlock_fs>
 800fbb0:	2302      	movs	r3, #2
 800fbb2:	e0c0      	b.n	800fd36 <f_write+0x340>
			sect += csect;
 800fbb4:	697a      	ldr	r2, [r7, #20]
 800fbb6:	69bb      	ldr	r3, [r7, #24]
 800fbb8:	4413      	add	r3, r2
 800fbba:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	0a5b      	lsrs	r3, r3, #9
 800fbc0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800fbc2:	6a3b      	ldr	r3, [r7, #32]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d041      	beq.n	800fc4c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fbc8:	69ba      	ldr	r2, [r7, #24]
 800fbca:	6a3b      	ldr	r3, [r7, #32]
 800fbcc:	4413      	add	r3, r2
 800fbce:	693a      	ldr	r2, [r7, #16]
 800fbd0:	8952      	ldrh	r2, [r2, #10]
 800fbd2:	4293      	cmp	r3, r2
 800fbd4:	d905      	bls.n	800fbe2 <f_write+0x1ec>
					cc = fs->csize - csect;
 800fbd6:	693b      	ldr	r3, [r7, #16]
 800fbd8:	895b      	ldrh	r3, [r3, #10]
 800fbda:	461a      	mov	r2, r3
 800fbdc:	69bb      	ldr	r3, [r7, #24]
 800fbde:	1ad3      	subs	r3, r2, r3
 800fbe0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fbe2:	693b      	ldr	r3, [r7, #16]
 800fbe4:	7858      	ldrb	r0, [r3, #1]
 800fbe6:	6a3b      	ldr	r3, [r7, #32]
 800fbe8:	697a      	ldr	r2, [r7, #20]
 800fbea:	69f9      	ldr	r1, [r7, #28]
 800fbec:	f7fd fef4 	bl	800d9d8 <disk_write>
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d009      	beq.n	800fc0a <f_write+0x214>
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	2201      	movs	r2, #1
 800fbfa:	755a      	strb	r2, [r3, #21]
 800fbfc:	693b      	ldr	r3, [r7, #16]
 800fbfe:	2101      	movs	r1, #1
 800fc00:	4618      	mov	r0, r3
 800fc02:	f7fe f83d 	bl	800dc80 <unlock_fs>
 800fc06:	2301      	movs	r3, #1
 800fc08:	e095      	b.n	800fd36 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	6a1a      	ldr	r2, [r3, #32]
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	1ad3      	subs	r3, r2, r3
 800fc12:	6a3a      	ldr	r2, [r7, #32]
 800fc14:	429a      	cmp	r2, r3
 800fc16:	d915      	bls.n	800fc44 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	6a1a      	ldr	r2, [r3, #32]
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	1ad3      	subs	r3, r2, r3
 800fc26:	025b      	lsls	r3, r3, #9
 800fc28:	69fa      	ldr	r2, [r7, #28]
 800fc2a:	4413      	add	r3, r2
 800fc2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fc30:	4619      	mov	r1, r3
 800fc32:	f7fd ff91 	bl	800db58 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	7d1b      	ldrb	r3, [r3, #20]
 800fc3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc3e:	b2da      	uxtb	r2, r3
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800fc44:	6a3b      	ldr	r3, [r7, #32]
 800fc46:	025b      	lsls	r3, r3, #9
 800fc48:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800fc4a:	e044      	b.n	800fcd6 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	6a1b      	ldr	r3, [r3, #32]
 800fc50:	697a      	ldr	r2, [r7, #20]
 800fc52:	429a      	cmp	r2, r3
 800fc54:	d01b      	beq.n	800fc8e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	699a      	ldr	r2, [r3, #24]
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fc5e:	429a      	cmp	r2, r3
 800fc60:	d215      	bcs.n	800fc8e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800fc62:	693b      	ldr	r3, [r7, #16]
 800fc64:	7858      	ldrb	r0, [r3, #1]
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fc6c:	2301      	movs	r3, #1
 800fc6e:	697a      	ldr	r2, [r7, #20]
 800fc70:	f7fd fe92 	bl	800d998 <disk_read>
 800fc74:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d009      	beq.n	800fc8e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	2201      	movs	r2, #1
 800fc7e:	755a      	strb	r2, [r3, #21]
 800fc80:	693b      	ldr	r3, [r7, #16]
 800fc82:	2101      	movs	r1, #1
 800fc84:	4618      	mov	r0, r3
 800fc86:	f7fd fffb 	bl	800dc80 <unlock_fs>
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	e053      	b.n	800fd36 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	697a      	ldr	r2, [r7, #20]
 800fc92:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	699b      	ldr	r3, [r3, #24]
 800fc98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc9c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800fca0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800fca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	429a      	cmp	r2, r3
 800fca8:	d901      	bls.n	800fcae <f_write+0x2b8>
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	699b      	ldr	r3, [r3, #24]
 800fcb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fcbc:	4413      	add	r3, r2
 800fcbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcc0:	69f9      	ldr	r1, [r7, #28]
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f7fd ff48 	bl	800db58 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	7d1b      	ldrb	r3, [r3, #20]
 800fccc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fcd0:	b2da      	uxtb	r2, r3
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800fcd6:	69fa      	ldr	r2, [r7, #28]
 800fcd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcda:	4413      	add	r3, r2
 800fcdc:	61fb      	str	r3, [r7, #28]
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	699a      	ldr	r2, [r3, #24]
 800fce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fce4:	441a      	add	r2, r3
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	619a      	str	r2, [r3, #24]
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	68da      	ldr	r2, [r3, #12]
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	699b      	ldr	r3, [r3, #24]
 800fcf2:	429a      	cmp	r2, r3
 800fcf4:	bf38      	it	cc
 800fcf6:	461a      	movcc	r2, r3
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	60da      	str	r2, [r3, #12]
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	681a      	ldr	r2, [r3, #0]
 800fd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd02:	441a      	add	r2, r3
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	601a      	str	r2, [r3, #0]
 800fd08:	687a      	ldr	r2, [r7, #4]
 800fd0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd0c:	1ad3      	subs	r3, r2, r3
 800fd0e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	f47f aeb6 	bne.w	800fa84 <f_write+0x8e>
 800fd18:	e000      	b.n	800fd1c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fd1a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	7d1b      	ldrb	r3, [r3, #20]
 800fd20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd24:	b2da      	uxtb	r2, r3
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800fd2a:	693b      	ldr	r3, [r7, #16]
 800fd2c:	2100      	movs	r1, #0
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f7fd ffa6 	bl	800dc80 <unlock_fs>
 800fd34:	2300      	movs	r3, #0
}
 800fd36:	4618      	mov	r0, r3
 800fd38:	3730      	adds	r7, #48	; 0x30
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd80      	pop	{r7, pc}

0800fd3e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fd3e:	b580      	push	{r7, lr}
 800fd40:	b086      	sub	sp, #24
 800fd42:	af00      	add	r7, sp, #0
 800fd44:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	f107 0208 	add.w	r2, r7, #8
 800fd4c:	4611      	mov	r1, r2
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f7ff fbe0 	bl	800f514 <validate>
 800fd54:	4603      	mov	r3, r0
 800fd56:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fd58:	7dfb      	ldrb	r3, [r7, #23]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d16d      	bne.n	800fe3a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	7d1b      	ldrb	r3, [r3, #20]
 800fd62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d067      	beq.n	800fe3a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	7d1b      	ldrb	r3, [r3, #20]
 800fd6e:	b25b      	sxtb	r3, r3
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	da1a      	bge.n	800fdaa <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800fd74:	68bb      	ldr	r3, [r7, #8]
 800fd76:	7858      	ldrb	r0, [r3, #1]
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	6a1a      	ldr	r2, [r3, #32]
 800fd82:	2301      	movs	r3, #1
 800fd84:	f7fd fe28 	bl	800d9d8 <disk_write>
 800fd88:	4603      	mov	r3, r0
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d006      	beq.n	800fd9c <f_sync+0x5e>
 800fd8e:	68bb      	ldr	r3, [r7, #8]
 800fd90:	2101      	movs	r1, #1
 800fd92:	4618      	mov	r0, r3
 800fd94:	f7fd ff74 	bl	800dc80 <unlock_fs>
 800fd98:	2301      	movs	r3, #1
 800fd9a:	e055      	b.n	800fe48 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	7d1b      	ldrb	r3, [r3, #20]
 800fda0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fda4:	b2da      	uxtb	r2, r3
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800fdaa:	f7fc fccd 	bl	800c748 <get_fattime>
 800fdae:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800fdb0:	68ba      	ldr	r2, [r7, #8]
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdb6:	4619      	mov	r1, r3
 800fdb8:	4610      	mov	r0, r2
 800fdba:	f7fe f92d 	bl	800e018 <move_window>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800fdc2:	7dfb      	ldrb	r3, [r7, #23]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d138      	bne.n	800fe3a <f_sync+0xfc>
					dir = fp->dir_ptr;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdcc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	330b      	adds	r3, #11
 800fdd2:	781a      	ldrb	r2, [r3, #0]
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	330b      	adds	r3, #11
 800fdd8:	f042 0220 	orr.w	r2, r2, #32
 800fddc:	b2d2      	uxtb	r2, r2
 800fdde:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	6818      	ldr	r0, [r3, #0]
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	689b      	ldr	r3, [r3, #8]
 800fde8:	461a      	mov	r2, r3
 800fdea:	68f9      	ldr	r1, [r7, #12]
 800fdec:	f7fe fe3a 	bl	800ea64 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	f103 021c 	add.w	r2, r3, #28
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	68db      	ldr	r3, [r3, #12]
 800fdfa:	4619      	mov	r1, r3
 800fdfc:	4610      	mov	r0, r2
 800fdfe:	f7fd fe7f 	bl	800db00 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	3316      	adds	r3, #22
 800fe06:	6939      	ldr	r1, [r7, #16]
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f7fd fe79 	bl	800db00 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	3312      	adds	r3, #18
 800fe12:	2100      	movs	r1, #0
 800fe14:	4618      	mov	r0, r3
 800fe16:	f7fd fe58 	bl	800daca <st_word>
					fs->wflag = 1;
 800fe1a:	68bb      	ldr	r3, [r7, #8]
 800fe1c:	2201      	movs	r2, #1
 800fe1e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fe20:	68bb      	ldr	r3, [r7, #8]
 800fe22:	4618      	mov	r0, r3
 800fe24:	f7fe f926 	bl	800e074 <sync_fs>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	7d1b      	ldrb	r3, [r3, #20]
 800fe30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe34:	b2da      	uxtb	r2, r3
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800fe3a:	68bb      	ldr	r3, [r7, #8]
 800fe3c:	7dfa      	ldrb	r2, [r7, #23]
 800fe3e:	4611      	mov	r1, r2
 800fe40:	4618      	mov	r0, r3
 800fe42:	f7fd ff1d 	bl	800dc80 <unlock_fs>
 800fe46:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe48:	4618      	mov	r0, r3
 800fe4a:	3718      	adds	r7, #24
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd80      	pop	{r7, pc}

0800fe50 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b084      	sub	sp, #16
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800fe58:	6878      	ldr	r0, [r7, #4]
 800fe5a:	f7ff ff70 	bl	800fd3e <f_sync>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800fe62:	7bfb      	ldrb	r3, [r7, #15]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d11d      	bne.n	800fea4 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f107 0208 	add.w	r2, r7, #8
 800fe6e:	4611      	mov	r1, r2
 800fe70:	4618      	mov	r0, r3
 800fe72:	f7ff fb4f 	bl	800f514 <validate>
 800fe76:	4603      	mov	r3, r0
 800fe78:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fe7a:	7bfb      	ldrb	r3, [r7, #15]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d111      	bne.n	800fea4 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	691b      	ldr	r3, [r3, #16]
 800fe84:	4618      	mov	r0, r3
 800fe86:	f7fe f823 	bl	800ded0 <dec_lock>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800fe8e:	7bfb      	ldrb	r3, [r7, #15]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d102      	bne.n	800fe9a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2200      	movs	r2, #0
 800fe98:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800fe9a:	68bb      	ldr	r3, [r7, #8]
 800fe9c:	2100      	movs	r1, #0
 800fe9e:	4618      	mov	r0, r3
 800fea0:	f7fd feee 	bl	800dc80 <unlock_fs>
#endif
		}
	}
	return res;
 800fea4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fea6:	4618      	mov	r0, r3
 800fea8:	3710      	adds	r7, #16
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}

0800feae <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800feae:	b580      	push	{r7, lr}
 800feb0:	b090      	sub	sp, #64	; 0x40
 800feb2:	af00      	add	r7, sp, #0
 800feb4:	6078      	str	r0, [r7, #4]
 800feb6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f107 0208 	add.w	r2, r7, #8
 800febe:	4611      	mov	r1, r2
 800fec0:	4618      	mov	r0, r3
 800fec2:	f7ff fb27 	bl	800f514 <validate>
 800fec6:	4603      	mov	r3, r0
 800fec8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800fecc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d103      	bne.n	800fedc <f_lseek+0x2e>
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	7d5b      	ldrb	r3, [r3, #21]
 800fed8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800fedc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d009      	beq.n	800fef8 <f_lseek+0x4a>
 800fee4:	68bb      	ldr	r3, [r7, #8]
 800fee6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800feea:	4611      	mov	r1, r2
 800feec:	4618      	mov	r0, r3
 800feee:	f7fd fec7 	bl	800dc80 <unlock_fs>
 800fef2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fef6:	e229      	b.n	801034c <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	f000 80ea 	beq.w	80100d6 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff08:	d164      	bne.n	800ffd4 <f_lseek+0x126>
			tbl = fp->cltbl;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff0e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ff10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff12:	1d1a      	adds	r2, r3, #4
 800ff14:	627a      	str	r2, [r7, #36]	; 0x24
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	617b      	str	r3, [r7, #20]
 800ff1a:	2302      	movs	r3, #2
 800ff1c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	689b      	ldr	r3, [r3, #8]
 800ff22:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800ff24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d044      	beq.n	800ffb4 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ff2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff2c:	613b      	str	r3, [r7, #16]
 800ff2e:	2300      	movs	r3, #0
 800ff30:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff34:	3302      	adds	r3, #2
 800ff36:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800ff38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff3a:	60fb      	str	r3, [r7, #12]
 800ff3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff3e:	3301      	adds	r3, #1
 800ff40:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ff46:	4618      	mov	r0, r3
 800ff48:	f7fe f921 	bl	800e18e <get_fat>
 800ff4c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ff4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff50:	2b01      	cmp	r3, #1
 800ff52:	d809      	bhi.n	800ff68 <f_lseek+0xba>
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2202      	movs	r2, #2
 800ff58:	755a      	strb	r2, [r3, #21]
 800ff5a:	68bb      	ldr	r3, [r7, #8]
 800ff5c:	2102      	movs	r1, #2
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f7fd fe8e 	bl	800dc80 <unlock_fs>
 800ff64:	2302      	movs	r3, #2
 800ff66:	e1f1      	b.n	801034c <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ff68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff6e:	d109      	bne.n	800ff84 <f_lseek+0xd6>
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2201      	movs	r2, #1
 800ff74:	755a      	strb	r2, [r3, #21]
 800ff76:	68bb      	ldr	r3, [r7, #8]
 800ff78:	2101      	movs	r1, #1
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	f7fd fe80 	bl	800dc80 <unlock_fs>
 800ff80:	2301      	movs	r3, #1
 800ff82:	e1e3      	b.n	801034c <f_lseek+0x49e>
					} while (cl == pcl + 1);
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	3301      	adds	r3, #1
 800ff88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff8a:	429a      	cmp	r2, r3
 800ff8c:	d0d4      	beq.n	800ff38 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ff8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff90:	697b      	ldr	r3, [r7, #20]
 800ff92:	429a      	cmp	r2, r3
 800ff94:	d809      	bhi.n	800ffaa <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 800ff96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff98:	1d1a      	adds	r2, r3, #4
 800ff9a:	627a      	str	r2, [r7, #36]	; 0x24
 800ff9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff9e:	601a      	str	r2, [r3, #0]
 800ffa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffa2:	1d1a      	adds	r2, r3, #4
 800ffa4:	627a      	str	r2, [r7, #36]	; 0x24
 800ffa6:	693a      	ldr	r2, [r7, #16]
 800ffa8:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	699b      	ldr	r3, [r3, #24]
 800ffae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ffb0:	429a      	cmp	r2, r3
 800ffb2:	d3ba      	bcc.n	800ff2a <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ffba:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800ffbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ffbe:	697b      	ldr	r3, [r7, #20]
 800ffc0:	429a      	cmp	r2, r3
 800ffc2:	d803      	bhi.n	800ffcc <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 800ffc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	601a      	str	r2, [r3, #0]
 800ffca:	e1b6      	b.n	801033a <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ffcc:	2311      	movs	r3, #17
 800ffce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ffd2:	e1b2      	b.n	801033a <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	68db      	ldr	r3, [r3, #12]
 800ffd8:	683a      	ldr	r2, [r7, #0]
 800ffda:	429a      	cmp	r2, r3
 800ffdc:	d902      	bls.n	800ffe4 <f_lseek+0x136>
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	68db      	ldr	r3, [r3, #12]
 800ffe2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	683a      	ldr	r2, [r7, #0]
 800ffe8:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800ffea:	683b      	ldr	r3, [r7, #0]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	f000 81a4 	beq.w	801033a <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800fff2:	683b      	ldr	r3, [r7, #0]
 800fff4:	3b01      	subs	r3, #1
 800fff6:	4619      	mov	r1, r3
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f7fe fb59 	bl	800e6b0 <clmt_clust>
 800fffe:	4602      	mov	r2, r0
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8010004:	68ba      	ldr	r2, [r7, #8]
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	69db      	ldr	r3, [r3, #28]
 801000a:	4619      	mov	r1, r3
 801000c:	4610      	mov	r0, r2
 801000e:	f7fe f89f 	bl	800e150 <clust2sect>
 8010012:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010014:	69bb      	ldr	r3, [r7, #24]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d109      	bne.n	801002e <f_lseek+0x180>
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	2202      	movs	r2, #2
 801001e:	755a      	strb	r2, [r3, #21]
 8010020:	68bb      	ldr	r3, [r7, #8]
 8010022:	2102      	movs	r1, #2
 8010024:	4618      	mov	r0, r3
 8010026:	f7fd fe2b 	bl	800dc80 <unlock_fs>
 801002a:	2302      	movs	r3, #2
 801002c:	e18e      	b.n	801034c <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801002e:	683b      	ldr	r3, [r7, #0]
 8010030:	3b01      	subs	r3, #1
 8010032:	0a5b      	lsrs	r3, r3, #9
 8010034:	68ba      	ldr	r2, [r7, #8]
 8010036:	8952      	ldrh	r2, [r2, #10]
 8010038:	3a01      	subs	r2, #1
 801003a:	4013      	ands	r3, r2
 801003c:	69ba      	ldr	r2, [r7, #24]
 801003e:	4413      	add	r3, r2
 8010040:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	699b      	ldr	r3, [r3, #24]
 8010046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801004a:	2b00      	cmp	r3, #0
 801004c:	f000 8175 	beq.w	801033a <f_lseek+0x48c>
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	6a1b      	ldr	r3, [r3, #32]
 8010054:	69ba      	ldr	r2, [r7, #24]
 8010056:	429a      	cmp	r2, r3
 8010058:	f000 816f 	beq.w	801033a <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	7d1b      	ldrb	r3, [r3, #20]
 8010060:	b25b      	sxtb	r3, r3
 8010062:	2b00      	cmp	r3, #0
 8010064:	da1d      	bge.n	80100a2 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010066:	68bb      	ldr	r3, [r7, #8]
 8010068:	7858      	ldrb	r0, [r3, #1]
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	6a1a      	ldr	r2, [r3, #32]
 8010074:	2301      	movs	r3, #1
 8010076:	f7fd fcaf 	bl	800d9d8 <disk_write>
 801007a:	4603      	mov	r3, r0
 801007c:	2b00      	cmp	r3, #0
 801007e:	d009      	beq.n	8010094 <f_lseek+0x1e6>
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	2201      	movs	r2, #1
 8010084:	755a      	strb	r2, [r3, #21]
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	2101      	movs	r1, #1
 801008a:	4618      	mov	r0, r3
 801008c:	f7fd fdf8 	bl	800dc80 <unlock_fs>
 8010090:	2301      	movs	r3, #1
 8010092:	e15b      	b.n	801034c <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	7d1b      	ldrb	r3, [r3, #20]
 8010098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801009c:	b2da      	uxtb	r2, r3
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	7858      	ldrb	r0, [r3, #1]
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80100ac:	2301      	movs	r3, #1
 80100ae:	69ba      	ldr	r2, [r7, #24]
 80100b0:	f7fd fc72 	bl	800d998 <disk_read>
 80100b4:	4603      	mov	r3, r0
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d009      	beq.n	80100ce <f_lseek+0x220>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	2201      	movs	r2, #1
 80100be:	755a      	strb	r2, [r3, #21]
 80100c0:	68bb      	ldr	r3, [r7, #8]
 80100c2:	2101      	movs	r1, #1
 80100c4:	4618      	mov	r0, r3
 80100c6:	f7fd fddb 	bl	800dc80 <unlock_fs>
 80100ca:	2301      	movs	r3, #1
 80100cc:	e13e      	b.n	801034c <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	69ba      	ldr	r2, [r7, #24]
 80100d2:	621a      	str	r2, [r3, #32]
 80100d4:	e131      	b.n	801033a <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	68db      	ldr	r3, [r3, #12]
 80100da:	683a      	ldr	r2, [r7, #0]
 80100dc:	429a      	cmp	r2, r3
 80100de:	d908      	bls.n	80100f2 <f_lseek+0x244>
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	7d1b      	ldrb	r3, [r3, #20]
 80100e4:	f003 0302 	and.w	r3, r3, #2
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d102      	bne.n	80100f2 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	68db      	ldr	r3, [r3, #12]
 80100f0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	699b      	ldr	r3, [r3, #24]
 80100f6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80100f8:	2300      	movs	r3, #0
 80100fa:	637b      	str	r3, [r7, #52]	; 0x34
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010100:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8010102:	683b      	ldr	r3, [r7, #0]
 8010104:	2b00      	cmp	r3, #0
 8010106:	f000 80c0 	beq.w	801028a <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801010a:	68bb      	ldr	r3, [r7, #8]
 801010c:	895b      	ldrh	r3, [r3, #10]
 801010e:	025b      	lsls	r3, r3, #9
 8010110:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010112:	6a3b      	ldr	r3, [r7, #32]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d01b      	beq.n	8010150 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010118:	683b      	ldr	r3, [r7, #0]
 801011a:	1e5a      	subs	r2, r3, #1
 801011c:	69fb      	ldr	r3, [r7, #28]
 801011e:	fbb2 f2f3 	udiv	r2, r2, r3
 8010122:	6a3b      	ldr	r3, [r7, #32]
 8010124:	1e59      	subs	r1, r3, #1
 8010126:	69fb      	ldr	r3, [r7, #28]
 8010128:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801012c:	429a      	cmp	r2, r3
 801012e:	d30f      	bcc.n	8010150 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010130:	6a3b      	ldr	r3, [r7, #32]
 8010132:	1e5a      	subs	r2, r3, #1
 8010134:	69fb      	ldr	r3, [r7, #28]
 8010136:	425b      	negs	r3, r3
 8010138:	401a      	ands	r2, r3
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	699b      	ldr	r3, [r3, #24]
 8010142:	683a      	ldr	r2, [r7, #0]
 8010144:	1ad3      	subs	r3, r2, r3
 8010146:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	69db      	ldr	r3, [r3, #28]
 801014c:	63bb      	str	r3, [r7, #56]	; 0x38
 801014e:	e02c      	b.n	80101aa <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	689b      	ldr	r3, [r3, #8]
 8010154:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010158:	2b00      	cmp	r3, #0
 801015a:	d123      	bne.n	80101a4 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	2100      	movs	r1, #0
 8010160:	4618      	mov	r0, r3
 8010162:	f7fe fa0d 	bl	800e580 <create_chain>
 8010166:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801016a:	2b01      	cmp	r3, #1
 801016c:	d109      	bne.n	8010182 <f_lseek+0x2d4>
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2202      	movs	r2, #2
 8010172:	755a      	strb	r2, [r3, #21]
 8010174:	68bb      	ldr	r3, [r7, #8]
 8010176:	2102      	movs	r1, #2
 8010178:	4618      	mov	r0, r3
 801017a:	f7fd fd81 	bl	800dc80 <unlock_fs>
 801017e:	2302      	movs	r3, #2
 8010180:	e0e4      	b.n	801034c <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010188:	d109      	bne.n	801019e <f_lseek+0x2f0>
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	2201      	movs	r2, #1
 801018e:	755a      	strb	r2, [r3, #21]
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	2101      	movs	r1, #1
 8010194:	4618      	mov	r0, r3
 8010196:	f7fd fd73 	bl	800dc80 <unlock_fs>
 801019a:	2301      	movs	r3, #1
 801019c:	e0d6      	b.n	801034c <f_lseek+0x49e>
					fp->obj.sclust = clst;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80101a2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80101a8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80101aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d06c      	beq.n	801028a <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 80101b0:	e044      	b.n	801023c <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 80101b2:	683a      	ldr	r2, [r7, #0]
 80101b4:	69fb      	ldr	r3, [r7, #28]
 80101b6:	1ad3      	subs	r3, r2, r3
 80101b8:	603b      	str	r3, [r7, #0]
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	699a      	ldr	r2, [r3, #24]
 80101be:	69fb      	ldr	r3, [r7, #28]
 80101c0:	441a      	add	r2, r3
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	7d1b      	ldrb	r3, [r3, #20]
 80101ca:	f003 0302 	and.w	r3, r3, #2
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d00b      	beq.n	80101ea <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80101d6:	4618      	mov	r0, r3
 80101d8:	f7fe f9d2 	bl	800e580 <create_chain>
 80101dc:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80101de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d108      	bne.n	80101f6 <f_lseek+0x348>
							ofs = 0; break;
 80101e4:	2300      	movs	r3, #0
 80101e6:	603b      	str	r3, [r7, #0]
 80101e8:	e02c      	b.n	8010244 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80101ee:	4618      	mov	r0, r3
 80101f0:	f7fd ffcd 	bl	800e18e <get_fat>
 80101f4:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80101f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101fc:	d109      	bne.n	8010212 <f_lseek+0x364>
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	2201      	movs	r2, #1
 8010202:	755a      	strb	r2, [r3, #21]
 8010204:	68bb      	ldr	r3, [r7, #8]
 8010206:	2101      	movs	r1, #1
 8010208:	4618      	mov	r0, r3
 801020a:	f7fd fd39 	bl	800dc80 <unlock_fs>
 801020e:	2301      	movs	r3, #1
 8010210:	e09c      	b.n	801034c <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8010212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010214:	2b01      	cmp	r3, #1
 8010216:	d904      	bls.n	8010222 <f_lseek+0x374>
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	699b      	ldr	r3, [r3, #24]
 801021c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801021e:	429a      	cmp	r2, r3
 8010220:	d309      	bcc.n	8010236 <f_lseek+0x388>
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	2202      	movs	r2, #2
 8010226:	755a      	strb	r2, [r3, #21]
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	2102      	movs	r1, #2
 801022c:	4618      	mov	r0, r3
 801022e:	f7fd fd27 	bl	800dc80 <unlock_fs>
 8010232:	2302      	movs	r3, #2
 8010234:	e08a      	b.n	801034c <f_lseek+0x49e>
					fp->clust = clst;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801023a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801023c:	683a      	ldr	r2, [r7, #0]
 801023e:	69fb      	ldr	r3, [r7, #28]
 8010240:	429a      	cmp	r2, r3
 8010242:	d8b6      	bhi.n	80101b2 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	699a      	ldr	r2, [r3, #24]
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	441a      	add	r2, r3
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8010250:	683b      	ldr	r3, [r7, #0]
 8010252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010256:	2b00      	cmp	r3, #0
 8010258:	d017      	beq.n	801028a <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801025e:	4618      	mov	r0, r3
 8010260:	f7fd ff76 	bl	800e150 <clust2sect>
 8010264:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8010266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010268:	2b00      	cmp	r3, #0
 801026a:	d109      	bne.n	8010280 <f_lseek+0x3d2>
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2202      	movs	r2, #2
 8010270:	755a      	strb	r2, [r3, #21]
 8010272:	68bb      	ldr	r3, [r7, #8]
 8010274:	2102      	movs	r1, #2
 8010276:	4618      	mov	r0, r3
 8010278:	f7fd fd02 	bl	800dc80 <unlock_fs>
 801027c:	2302      	movs	r3, #2
 801027e:	e065      	b.n	801034c <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	0a5b      	lsrs	r3, r3, #9
 8010284:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010286:	4413      	add	r3, r2
 8010288:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	699a      	ldr	r2, [r3, #24]
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	68db      	ldr	r3, [r3, #12]
 8010292:	429a      	cmp	r2, r3
 8010294:	d90a      	bls.n	80102ac <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	699a      	ldr	r2, [r3, #24]
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	7d1b      	ldrb	r3, [r3, #20]
 80102a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102a6:	b2da      	uxtb	r2, r3
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	699b      	ldr	r3, [r3, #24]
 80102b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d040      	beq.n	801033a <f_lseek+0x48c>
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	6a1b      	ldr	r3, [r3, #32]
 80102bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102be:	429a      	cmp	r2, r3
 80102c0:	d03b      	beq.n	801033a <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	7d1b      	ldrb	r3, [r3, #20]
 80102c6:	b25b      	sxtb	r3, r3
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	da1d      	bge.n	8010308 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80102cc:	68bb      	ldr	r3, [r7, #8]
 80102ce:	7858      	ldrb	r0, [r3, #1]
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	6a1a      	ldr	r2, [r3, #32]
 80102da:	2301      	movs	r3, #1
 80102dc:	f7fd fb7c 	bl	800d9d8 <disk_write>
 80102e0:	4603      	mov	r3, r0
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d009      	beq.n	80102fa <f_lseek+0x44c>
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	2201      	movs	r2, #1
 80102ea:	755a      	strb	r2, [r3, #21]
 80102ec:	68bb      	ldr	r3, [r7, #8]
 80102ee:	2101      	movs	r1, #1
 80102f0:	4618      	mov	r0, r3
 80102f2:	f7fd fcc5 	bl	800dc80 <unlock_fs>
 80102f6:	2301      	movs	r3, #1
 80102f8:	e028      	b.n	801034c <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	7d1b      	ldrb	r3, [r3, #20]
 80102fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010302:	b2da      	uxtb	r2, r3
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010308:	68bb      	ldr	r3, [r7, #8]
 801030a:	7858      	ldrb	r0, [r3, #1]
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010312:	2301      	movs	r3, #1
 8010314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010316:	f7fd fb3f 	bl	800d998 <disk_read>
 801031a:	4603      	mov	r3, r0
 801031c:	2b00      	cmp	r3, #0
 801031e:	d009      	beq.n	8010334 <f_lseek+0x486>
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	2201      	movs	r2, #1
 8010324:	755a      	strb	r2, [r3, #21]
 8010326:	68bb      	ldr	r3, [r7, #8]
 8010328:	2101      	movs	r1, #1
 801032a:	4618      	mov	r0, r3
 801032c:	f7fd fca8 	bl	800dc80 <unlock_fs>
 8010330:	2301      	movs	r3, #1
 8010332:	e00b      	b.n	801034c <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010338:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801033a:	68bb      	ldr	r3, [r7, #8]
 801033c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010340:	4611      	mov	r1, r2
 8010342:	4618      	mov	r0, r3
 8010344:	f7fd fc9c 	bl	800dc80 <unlock_fs>
 8010348:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801034c:	4618      	mov	r0, r3
 801034e:	3740      	adds	r7, #64	; 0x40
 8010350:	46bd      	mov	sp, r7
 8010352:	bd80      	pop	{r7, pc}

08010354 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010354:	b580      	push	{r7, lr}
 8010356:	b086      	sub	sp, #24
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
 801035c:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d101      	bne.n	8010368 <f_opendir+0x14>
 8010364:	2309      	movs	r3, #9
 8010366:	e06a      	b.n	801043e <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801036c:	f107 010c 	add.w	r1, r7, #12
 8010370:	463b      	mov	r3, r7
 8010372:	2200      	movs	r2, #0
 8010374:	4618      	mov	r0, r3
 8010376:	f7fe fe79 	bl	800f06c <find_volume>
 801037a:	4603      	mov	r3, r0
 801037c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801037e:	7dfb      	ldrb	r3, [r7, #23]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d14f      	bne.n	8010424 <f_opendir+0xd0>
		obj->fs = fs;
 8010384:	68fa      	ldr	r2, [r7, #12]
 8010386:	693b      	ldr	r3, [r7, #16]
 8010388:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801038a:	683b      	ldr	r3, [r7, #0]
 801038c:	4619      	mov	r1, r3
 801038e:	6878      	ldr	r0, [r7, #4]
 8010390:	f7fe fd60 	bl	800ee54 <follow_path>
 8010394:	4603      	mov	r3, r0
 8010396:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8010398:	7dfb      	ldrb	r3, [r7, #23]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d13d      	bne.n	801041a <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80103a4:	b25b      	sxtb	r3, r3
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	db12      	blt.n	80103d0 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80103aa:	693b      	ldr	r3, [r7, #16]
 80103ac:	799b      	ldrb	r3, [r3, #6]
 80103ae:	f003 0310 	and.w	r3, r3, #16
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d00a      	beq.n	80103cc <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80103b6:	68fa      	ldr	r2, [r7, #12]
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	6a1b      	ldr	r3, [r3, #32]
 80103bc:	4619      	mov	r1, r3
 80103be:	4610      	mov	r0, r2
 80103c0:	f7fe fb31 	bl	800ea26 <ld_clust>
 80103c4:	4602      	mov	r2, r0
 80103c6:	693b      	ldr	r3, [r7, #16]
 80103c8:	609a      	str	r2, [r3, #8]
 80103ca:	e001      	b.n	80103d0 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80103cc:	2305      	movs	r3, #5
 80103ce:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80103d0:	7dfb      	ldrb	r3, [r7, #23]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d121      	bne.n	801041a <f_opendir+0xc6>
				obj->id = fs->id;
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	88da      	ldrh	r2, [r3, #6]
 80103da:	693b      	ldr	r3, [r7, #16]
 80103dc:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80103de:	2100      	movs	r1, #0
 80103e0:	6878      	ldr	r0, [r7, #4]
 80103e2:	f7fe f999 	bl	800e718 <dir_sdi>
 80103e6:	4603      	mov	r3, r0
 80103e8:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80103ea:	7dfb      	ldrb	r3, [r7, #23]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d114      	bne.n	801041a <f_opendir+0xc6>
					if (obj->sclust) {
 80103f0:	693b      	ldr	r3, [r7, #16]
 80103f2:	689b      	ldr	r3, [r3, #8]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d00d      	beq.n	8010414 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80103f8:	2100      	movs	r1, #0
 80103fa:	6878      	ldr	r0, [r7, #4]
 80103fc:	f7fd fcda 	bl	800ddb4 <inc_lock>
 8010400:	4602      	mov	r2, r0
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8010406:	693b      	ldr	r3, [r7, #16]
 8010408:	691b      	ldr	r3, [r3, #16]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d105      	bne.n	801041a <f_opendir+0xc6>
 801040e:	2312      	movs	r3, #18
 8010410:	75fb      	strb	r3, [r7, #23]
 8010412:	e002      	b.n	801041a <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8010414:	693b      	ldr	r3, [r7, #16]
 8010416:	2200      	movs	r2, #0
 8010418:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801041a:	7dfb      	ldrb	r3, [r7, #23]
 801041c:	2b04      	cmp	r3, #4
 801041e:	d101      	bne.n	8010424 <f_opendir+0xd0>
 8010420:	2305      	movs	r3, #5
 8010422:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8010424:	7dfb      	ldrb	r3, [r7, #23]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d002      	beq.n	8010430 <f_opendir+0xdc>
 801042a:	693b      	ldr	r3, [r7, #16]
 801042c:	2200      	movs	r2, #0
 801042e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	7dfa      	ldrb	r2, [r7, #23]
 8010434:	4611      	mov	r1, r2
 8010436:	4618      	mov	r0, r3
 8010438:	f7fd fc22 	bl	800dc80 <unlock_fs>
 801043c:	7dfb      	ldrb	r3, [r7, #23]
}
 801043e:	4618      	mov	r0, r3
 8010440:	3718      	adds	r7, #24
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}

08010446 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8010446:	b580      	push	{r7, lr}
 8010448:	b084      	sub	sp, #16
 801044a:	af00      	add	r7, sp, #0
 801044c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	f107 0208 	add.w	r2, r7, #8
 8010454:	4611      	mov	r1, r2
 8010456:	4618      	mov	r0, r3
 8010458:	f7ff f85c 	bl	800f514 <validate>
 801045c:	4603      	mov	r3, r0
 801045e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010460:	7bfb      	ldrb	r3, [r7, #15]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d115      	bne.n	8010492 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	691b      	ldr	r3, [r3, #16]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d006      	beq.n	801047c <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	691b      	ldr	r3, [r3, #16]
 8010472:	4618      	mov	r0, r3
 8010474:	f7fd fd2c 	bl	800ded0 <dec_lock>
 8010478:	4603      	mov	r3, r0
 801047a:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 801047c:	7bfb      	ldrb	r3, [r7, #15]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d102      	bne.n	8010488 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	2200      	movs	r2, #0
 8010486:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8010488:	68bb      	ldr	r3, [r7, #8]
 801048a:	2100      	movs	r1, #0
 801048c:	4618      	mov	r0, r3
 801048e:	f7fd fbf7 	bl	800dc80 <unlock_fs>
#endif
	}
	return res;
 8010492:	7bfb      	ldrb	r3, [r7, #15]
}
 8010494:	4618      	mov	r0, r3
 8010496:	3710      	adds	r7, #16
 8010498:	46bd      	mov	sp, r7
 801049a:	bd80      	pop	{r7, pc}

0801049c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801049c:	b580      	push	{r7, lr}
 801049e:	b084      	sub	sp, #16
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
 80104a4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	f107 0208 	add.w	r2, r7, #8
 80104ac:	4611      	mov	r1, r2
 80104ae:	4618      	mov	r0, r3
 80104b0:	f7ff f830 	bl	800f514 <validate>
 80104b4:	4603      	mov	r3, r0
 80104b6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80104b8:	7bfb      	ldrb	r3, [r7, #15]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d126      	bne.n	801050c <f_readdir+0x70>
		if (!fno) {
 80104be:	683b      	ldr	r3, [r7, #0]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d106      	bne.n	80104d2 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80104c4:	2100      	movs	r1, #0
 80104c6:	6878      	ldr	r0, [r7, #4]
 80104c8:	f7fe f926 	bl	800e718 <dir_sdi>
 80104cc:	4603      	mov	r3, r0
 80104ce:	73fb      	strb	r3, [r7, #15]
 80104d0:	e01c      	b.n	801050c <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80104d2:	2100      	movs	r1, #0
 80104d4:	6878      	ldr	r0, [r7, #4]
 80104d6:	f7fe fae5 	bl	800eaa4 <dir_read>
 80104da:	4603      	mov	r3, r0
 80104dc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80104de:	7bfb      	ldrb	r3, [r7, #15]
 80104e0:	2b04      	cmp	r3, #4
 80104e2:	d101      	bne.n	80104e8 <f_readdir+0x4c>
 80104e4:	2300      	movs	r3, #0
 80104e6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80104e8:	7bfb      	ldrb	r3, [r7, #15]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d10e      	bne.n	801050c <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80104ee:	6839      	ldr	r1, [r7, #0]
 80104f0:	6878      	ldr	r0, [r7, #4]
 80104f2:	f7fe fbbb 	bl	800ec6c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80104f6:	2100      	movs	r1, #0
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f7fe f988 	bl	800e80e <dir_next>
 80104fe:	4603      	mov	r3, r0
 8010500:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8010502:	7bfb      	ldrb	r3, [r7, #15]
 8010504:	2b04      	cmp	r3, #4
 8010506:	d101      	bne.n	801050c <f_readdir+0x70>
 8010508:	2300      	movs	r3, #0
 801050a:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	7bfa      	ldrb	r2, [r7, #15]
 8010510:	4611      	mov	r1, r2
 8010512:	4618      	mov	r0, r3
 8010514:	f7fd fbb4 	bl	800dc80 <unlock_fs>
 8010518:	7bfb      	ldrb	r3, [r7, #15]
}
 801051a:	4618      	mov	r0, r3
 801051c:	3710      	adds	r7, #16
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}
	...

08010524 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010524:	b480      	push	{r7}
 8010526:	b087      	sub	sp, #28
 8010528:	af00      	add	r7, sp, #0
 801052a:	60f8      	str	r0, [r7, #12]
 801052c:	60b9      	str	r1, [r7, #8]
 801052e:	4613      	mov	r3, r2
 8010530:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010532:	2301      	movs	r3, #1
 8010534:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010536:	2300      	movs	r3, #0
 8010538:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801053a:	4b1f      	ldr	r3, [pc, #124]	; (80105b8 <FATFS_LinkDriverEx+0x94>)
 801053c:	7a5b      	ldrb	r3, [r3, #9]
 801053e:	b2db      	uxtb	r3, r3
 8010540:	2b00      	cmp	r3, #0
 8010542:	d131      	bne.n	80105a8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010544:	4b1c      	ldr	r3, [pc, #112]	; (80105b8 <FATFS_LinkDriverEx+0x94>)
 8010546:	7a5b      	ldrb	r3, [r3, #9]
 8010548:	b2db      	uxtb	r3, r3
 801054a:	461a      	mov	r2, r3
 801054c:	4b1a      	ldr	r3, [pc, #104]	; (80105b8 <FATFS_LinkDriverEx+0x94>)
 801054e:	2100      	movs	r1, #0
 8010550:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010552:	4b19      	ldr	r3, [pc, #100]	; (80105b8 <FATFS_LinkDriverEx+0x94>)
 8010554:	7a5b      	ldrb	r3, [r3, #9]
 8010556:	b2db      	uxtb	r3, r3
 8010558:	4a17      	ldr	r2, [pc, #92]	; (80105b8 <FATFS_LinkDriverEx+0x94>)
 801055a:	009b      	lsls	r3, r3, #2
 801055c:	4413      	add	r3, r2
 801055e:	68fa      	ldr	r2, [r7, #12]
 8010560:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010562:	4b15      	ldr	r3, [pc, #84]	; (80105b8 <FATFS_LinkDriverEx+0x94>)
 8010564:	7a5b      	ldrb	r3, [r3, #9]
 8010566:	b2db      	uxtb	r3, r3
 8010568:	461a      	mov	r2, r3
 801056a:	4b13      	ldr	r3, [pc, #76]	; (80105b8 <FATFS_LinkDriverEx+0x94>)
 801056c:	4413      	add	r3, r2
 801056e:	79fa      	ldrb	r2, [r7, #7]
 8010570:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010572:	4b11      	ldr	r3, [pc, #68]	; (80105b8 <FATFS_LinkDriverEx+0x94>)
 8010574:	7a5b      	ldrb	r3, [r3, #9]
 8010576:	b2db      	uxtb	r3, r3
 8010578:	1c5a      	adds	r2, r3, #1
 801057a:	b2d1      	uxtb	r1, r2
 801057c:	4a0e      	ldr	r2, [pc, #56]	; (80105b8 <FATFS_LinkDriverEx+0x94>)
 801057e:	7251      	strb	r1, [r2, #9]
 8010580:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010582:	7dbb      	ldrb	r3, [r7, #22]
 8010584:	3330      	adds	r3, #48	; 0x30
 8010586:	b2da      	uxtb	r2, r3
 8010588:	68bb      	ldr	r3, [r7, #8]
 801058a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801058c:	68bb      	ldr	r3, [r7, #8]
 801058e:	3301      	adds	r3, #1
 8010590:	223a      	movs	r2, #58	; 0x3a
 8010592:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010594:	68bb      	ldr	r3, [r7, #8]
 8010596:	3302      	adds	r3, #2
 8010598:	222f      	movs	r2, #47	; 0x2f
 801059a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	3303      	adds	r3, #3
 80105a0:	2200      	movs	r2, #0
 80105a2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80105a4:	2300      	movs	r3, #0
 80105a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80105a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80105aa:	4618      	mov	r0, r3
 80105ac:	371c      	adds	r7, #28
 80105ae:	46bd      	mov	sp, r7
 80105b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b4:	4770      	bx	lr
 80105b6:	bf00      	nop
 80105b8:	200003ec 	.word	0x200003ec

080105bc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b082      	sub	sp, #8
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
 80105c4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80105c6:	2200      	movs	r2, #0
 80105c8:	6839      	ldr	r1, [r7, #0]
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f7ff ffaa 	bl	8010524 <FATFS_LinkDriverEx>
 80105d0:	4603      	mov	r3, r0
}
 80105d2:	4618      	mov	r0, r3
 80105d4:	3708      	adds	r7, #8
 80105d6:	46bd      	mov	sp, r7
 80105d8:	bd80      	pop	{r7, pc}

080105da <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80105da:	b580      	push	{r7, lr}
 80105dc:	b084      	sub	sp, #16
 80105de:	af00      	add	r7, sp, #0
 80105e0:	4603      	mov	r3, r0
 80105e2:	6039      	str	r1, [r7, #0]
 80105e4:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 80105e6:	2200      	movs	r2, #0
 80105e8:	2101      	movs	r1, #1
 80105ea:	2001      	movs	r0, #1
 80105ec:	f000 f867 	bl	80106be <osSemaphoreNew>
 80105f0:	4602      	mov	r2, r0
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 80105f6:	683b      	ldr	r3, [r7, #0]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	bf14      	ite	ne
 80105fe:	2301      	movne	r3, #1
 8010600:	2300      	moveq	r3, #0
 8010602:	b2db      	uxtb	r3, r3
 8010604:	60fb      	str	r3, [r7, #12]

    return ret;
 8010606:	68fb      	ldr	r3, [r7, #12]
}
 8010608:	4618      	mov	r0, r3
 801060a:	3710      	adds	r7, #16
 801060c:	46bd      	mov	sp, r7
 801060e:	bd80      	pop	{r7, pc}

08010610 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b082      	sub	sp, #8
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8010618:	6878      	ldr	r0, [r7, #4]
 801061a:	f000 f96f 	bl	80108fc <osSemaphoreDelete>
#endif
    return 1;
 801061e:	2301      	movs	r3, #1
}
 8010620:	4618      	mov	r0, r3
 8010622:	3708      	adds	r7, #8
 8010624:	46bd      	mov	sp, r7
 8010626:	bd80      	pop	{r7, pc}

08010628 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b084      	sub	sp, #16
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8010630:	2300      	movs	r3, #0
 8010632:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8010634:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010638:	6878      	ldr	r0, [r7, #4]
 801063a:	f000 f8c9 	bl	80107d0 <osSemaphoreAcquire>
 801063e:	4603      	mov	r3, r0
 8010640:	2b00      	cmp	r3, #0
 8010642:	d101      	bne.n	8010648 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8010644:	2301      	movs	r3, #1
 8010646:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8010648:	68fb      	ldr	r3, [r7, #12]
}
 801064a:	4618      	mov	r0, r3
 801064c:	3710      	adds	r7, #16
 801064e:	46bd      	mov	sp, r7
 8010650:	bd80      	pop	{r7, pc}

08010652 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8010652:	b580      	push	{r7, lr}
 8010654:	b082      	sub	sp, #8
 8010656:	af00      	add	r7, sp, #0
 8010658:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 801065a:	6878      	ldr	r0, [r7, #4]
 801065c:	f000 f90a 	bl	8010874 <osSemaphoreRelease>
#endif
}
 8010660:	bf00      	nop
 8010662:	3708      	adds	r7, #8
 8010664:	46bd      	mov	sp, r7
 8010666:	bd80      	pop	{r7, pc}

08010668 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8010668:	b580      	push	{r7, lr}
 801066a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801066c:	4b05      	ldr	r3, [pc, #20]	; (8010684 <SysTick_Handler+0x1c>)
 801066e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8010670:	f001 fb9a 	bl	8011da8 <xTaskGetSchedulerState>
 8010674:	4603      	mov	r3, r0
 8010676:	2b01      	cmp	r3, #1
 8010678:	d001      	beq.n	801067e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801067a:	f001 fe1d 	bl	80122b8 <xPortSysTickHandler>
  }
}
 801067e:	bf00      	nop
 8010680:	bd80      	pop	{r7, pc}
 8010682:	bf00      	nop
 8010684:	e000e010 	.word	0xe000e010

08010688 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8010688:	b580      	push	{r7, lr}
 801068a:	b084      	sub	sp, #16
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010690:	f3ef 8305 	mrs	r3, IPSR
 8010694:	60bb      	str	r3, [r7, #8]
  return(result);
 8010696:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010698:	2b00      	cmp	r3, #0
 801069a:	d003      	beq.n	80106a4 <osDelay+0x1c>
    stat = osErrorISR;
 801069c:	f06f 0305 	mvn.w	r3, #5
 80106a0:	60fb      	str	r3, [r7, #12]
 80106a2:	e007      	b.n	80106b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80106a4:	2300      	movs	r3, #0
 80106a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d002      	beq.n	80106b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80106ae:	6878      	ldr	r0, [r7, #4]
 80106b0:	f001 f850 	bl	8011754 <vTaskDelay>
    }
  }

  return (stat);
 80106b4:	68fb      	ldr	r3, [r7, #12]
}
 80106b6:	4618      	mov	r0, r3
 80106b8:	3710      	adds	r7, #16
 80106ba:	46bd      	mov	sp, r7
 80106bc:	bd80      	pop	{r7, pc}

080106be <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80106be:	b580      	push	{r7, lr}
 80106c0:	b08a      	sub	sp, #40	; 0x28
 80106c2:	af02      	add	r7, sp, #8
 80106c4:	60f8      	str	r0, [r7, #12]
 80106c6:	60b9      	str	r1, [r7, #8]
 80106c8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80106ca:	2300      	movs	r3, #0
 80106cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80106ce:	f3ef 8305 	mrs	r3, IPSR
 80106d2:	613b      	str	r3, [r7, #16]
  return(result);
 80106d4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d175      	bne.n	80107c6 <osSemaphoreNew+0x108>
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d072      	beq.n	80107c6 <osSemaphoreNew+0x108>
 80106e0:	68ba      	ldr	r2, [r7, #8]
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	429a      	cmp	r2, r3
 80106e6:	d86e      	bhi.n	80107c6 <osSemaphoreNew+0x108>
    mem = -1;
 80106e8:	f04f 33ff 	mov.w	r3, #4294967295
 80106ec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d015      	beq.n	8010720 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	689b      	ldr	r3, [r3, #8]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d006      	beq.n	801070a <osSemaphoreNew+0x4c>
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	68db      	ldr	r3, [r3, #12]
 8010700:	2b4f      	cmp	r3, #79	; 0x4f
 8010702:	d902      	bls.n	801070a <osSemaphoreNew+0x4c>
        mem = 1;
 8010704:	2301      	movs	r3, #1
 8010706:	61bb      	str	r3, [r7, #24]
 8010708:	e00c      	b.n	8010724 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	689b      	ldr	r3, [r3, #8]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d108      	bne.n	8010724 <osSemaphoreNew+0x66>
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	68db      	ldr	r3, [r3, #12]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d104      	bne.n	8010724 <osSemaphoreNew+0x66>
          mem = 0;
 801071a:	2300      	movs	r3, #0
 801071c:	61bb      	str	r3, [r7, #24]
 801071e:	e001      	b.n	8010724 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8010720:	2300      	movs	r3, #0
 8010722:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8010724:	69bb      	ldr	r3, [r7, #24]
 8010726:	f1b3 3fff 	cmp.w	r3, #4294967295
 801072a:	d04c      	beq.n	80107c6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	2b01      	cmp	r3, #1
 8010730:	d128      	bne.n	8010784 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8010732:	69bb      	ldr	r3, [r7, #24]
 8010734:	2b01      	cmp	r3, #1
 8010736:	d10a      	bne.n	801074e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	689b      	ldr	r3, [r3, #8]
 801073c:	2203      	movs	r2, #3
 801073e:	9200      	str	r2, [sp, #0]
 8010740:	2200      	movs	r2, #0
 8010742:	2100      	movs	r1, #0
 8010744:	2001      	movs	r0, #1
 8010746:	f000 fa0d 	bl	8010b64 <xQueueGenericCreateStatic>
 801074a:	61f8      	str	r0, [r7, #28]
 801074c:	e005      	b.n	801075a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 801074e:	2203      	movs	r2, #3
 8010750:	2100      	movs	r1, #0
 8010752:	2001      	movs	r0, #1
 8010754:	f000 fa7e 	bl	8010c54 <xQueueGenericCreate>
 8010758:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 801075a:	69fb      	ldr	r3, [r7, #28]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d022      	beq.n	80107a6 <osSemaphoreNew+0xe8>
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d01f      	beq.n	80107a6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010766:	2300      	movs	r3, #0
 8010768:	2200      	movs	r2, #0
 801076a:	2100      	movs	r1, #0
 801076c:	69f8      	ldr	r0, [r7, #28]
 801076e:	f000 fb39 	bl	8010de4 <xQueueGenericSend>
 8010772:	4603      	mov	r3, r0
 8010774:	2b01      	cmp	r3, #1
 8010776:	d016      	beq.n	80107a6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8010778:	69f8      	ldr	r0, [r7, #28]
 801077a:	f000 fe4b 	bl	8011414 <vQueueDelete>
            hSemaphore = NULL;
 801077e:	2300      	movs	r3, #0
 8010780:	61fb      	str	r3, [r7, #28]
 8010782:	e010      	b.n	80107a6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8010784:	69bb      	ldr	r3, [r7, #24]
 8010786:	2b01      	cmp	r3, #1
 8010788:	d108      	bne.n	801079c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	689b      	ldr	r3, [r3, #8]
 801078e:	461a      	mov	r2, r3
 8010790:	68b9      	ldr	r1, [r7, #8]
 8010792:	68f8      	ldr	r0, [r7, #12]
 8010794:	f000 fabb 	bl	8010d0e <xQueueCreateCountingSemaphoreStatic>
 8010798:	61f8      	str	r0, [r7, #28]
 801079a:	e004      	b.n	80107a6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801079c:	68b9      	ldr	r1, [r7, #8]
 801079e:	68f8      	ldr	r0, [r7, #12]
 80107a0:	f000 faec 	bl	8010d7c <xQueueCreateCountingSemaphore>
 80107a4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80107a6:	69fb      	ldr	r3, [r7, #28]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d00c      	beq.n	80107c6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d003      	beq.n	80107ba <osSemaphoreNew+0xfc>
          name = attr->name;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	617b      	str	r3, [r7, #20]
 80107b8:	e001      	b.n	80107be <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80107ba:	2300      	movs	r3, #0
 80107bc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80107be:	6979      	ldr	r1, [r7, #20]
 80107c0:	69f8      	ldr	r0, [r7, #28]
 80107c2:	f000 ff73 	bl	80116ac <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80107c6:	69fb      	ldr	r3, [r7, #28]
}
 80107c8:	4618      	mov	r0, r3
 80107ca:	3720      	adds	r7, #32
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd80      	pop	{r7, pc}

080107d0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b086      	sub	sp, #24
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
 80107d8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80107de:	2300      	movs	r3, #0
 80107e0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80107e2:	693b      	ldr	r3, [r7, #16]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d103      	bne.n	80107f0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80107e8:	f06f 0303 	mvn.w	r3, #3
 80107ec:	617b      	str	r3, [r7, #20]
 80107ee:	e039      	b.n	8010864 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80107f0:	f3ef 8305 	mrs	r3, IPSR
 80107f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80107f6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d022      	beq.n	8010842 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80107fc:	683b      	ldr	r3, [r7, #0]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d003      	beq.n	801080a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8010802:	f06f 0303 	mvn.w	r3, #3
 8010806:	617b      	str	r3, [r7, #20]
 8010808:	e02c      	b.n	8010864 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 801080a:	2300      	movs	r3, #0
 801080c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801080e:	f107 0308 	add.w	r3, r7, #8
 8010812:	461a      	mov	r2, r3
 8010814:	2100      	movs	r1, #0
 8010816:	6938      	ldr	r0, [r7, #16]
 8010818:	f000 fd7c 	bl	8011314 <xQueueReceiveFromISR>
 801081c:	4603      	mov	r3, r0
 801081e:	2b01      	cmp	r3, #1
 8010820:	d003      	beq.n	801082a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8010822:	f06f 0302 	mvn.w	r3, #2
 8010826:	617b      	str	r3, [r7, #20]
 8010828:	e01c      	b.n	8010864 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 801082a:	68bb      	ldr	r3, [r7, #8]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d019      	beq.n	8010864 <osSemaphoreAcquire+0x94>
 8010830:	4b0f      	ldr	r3, [pc, #60]	; (8010870 <osSemaphoreAcquire+0xa0>)
 8010832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010836:	601a      	str	r2, [r3, #0]
 8010838:	f3bf 8f4f 	dsb	sy
 801083c:	f3bf 8f6f 	isb	sy
 8010840:	e010      	b.n	8010864 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8010842:	6839      	ldr	r1, [r7, #0]
 8010844:	6938      	ldr	r0, [r7, #16]
 8010846:	f000 fc59 	bl	80110fc <xQueueSemaphoreTake>
 801084a:	4603      	mov	r3, r0
 801084c:	2b01      	cmp	r3, #1
 801084e:	d009      	beq.n	8010864 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d003      	beq.n	801085e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8010856:	f06f 0301 	mvn.w	r3, #1
 801085a:	617b      	str	r3, [r7, #20]
 801085c:	e002      	b.n	8010864 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 801085e:	f06f 0302 	mvn.w	r3, #2
 8010862:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8010864:	697b      	ldr	r3, [r7, #20]
}
 8010866:	4618      	mov	r0, r3
 8010868:	3718      	adds	r7, #24
 801086a:	46bd      	mov	sp, r7
 801086c:	bd80      	pop	{r7, pc}
 801086e:	bf00      	nop
 8010870:	e000ed04 	.word	0xe000ed04

08010874 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8010874:	b580      	push	{r7, lr}
 8010876:	b086      	sub	sp, #24
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010880:	2300      	movs	r3, #0
 8010882:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8010884:	693b      	ldr	r3, [r7, #16]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d103      	bne.n	8010892 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801088a:	f06f 0303 	mvn.w	r3, #3
 801088e:	617b      	str	r3, [r7, #20]
 8010890:	e02c      	b.n	80108ec <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010892:	f3ef 8305 	mrs	r3, IPSR
 8010896:	60fb      	str	r3, [r7, #12]
  return(result);
 8010898:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801089a:	2b00      	cmp	r3, #0
 801089c:	d01a      	beq.n	80108d4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 801089e:	2300      	movs	r3, #0
 80108a0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80108a2:	f107 0308 	add.w	r3, r7, #8
 80108a6:	4619      	mov	r1, r3
 80108a8:	6938      	ldr	r0, [r7, #16]
 80108aa:	f000 fb99 	bl	8010fe0 <xQueueGiveFromISR>
 80108ae:	4603      	mov	r3, r0
 80108b0:	2b01      	cmp	r3, #1
 80108b2:	d003      	beq.n	80108bc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80108b4:	f06f 0302 	mvn.w	r3, #2
 80108b8:	617b      	str	r3, [r7, #20]
 80108ba:	e017      	b.n	80108ec <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80108bc:	68bb      	ldr	r3, [r7, #8]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d014      	beq.n	80108ec <osSemaphoreRelease+0x78>
 80108c2:	4b0d      	ldr	r3, [pc, #52]	; (80108f8 <osSemaphoreRelease+0x84>)
 80108c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108c8:	601a      	str	r2, [r3, #0]
 80108ca:	f3bf 8f4f 	dsb	sy
 80108ce:	f3bf 8f6f 	isb	sy
 80108d2:	e00b      	b.n	80108ec <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80108d4:	2300      	movs	r3, #0
 80108d6:	2200      	movs	r2, #0
 80108d8:	2100      	movs	r1, #0
 80108da:	6938      	ldr	r0, [r7, #16]
 80108dc:	f000 fa82 	bl	8010de4 <xQueueGenericSend>
 80108e0:	4603      	mov	r3, r0
 80108e2:	2b01      	cmp	r3, #1
 80108e4:	d002      	beq.n	80108ec <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80108e6:	f06f 0302 	mvn.w	r3, #2
 80108ea:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80108ec:	697b      	ldr	r3, [r7, #20]
}
 80108ee:	4618      	mov	r0, r3
 80108f0:	3718      	adds	r7, #24
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bd80      	pop	{r7, pc}
 80108f6:	bf00      	nop
 80108f8:	e000ed04 	.word	0xe000ed04

080108fc <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b086      	sub	sp, #24
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010908:	f3ef 8305 	mrs	r3, IPSR
 801090c:	60fb      	str	r3, [r7, #12]
  return(result);
 801090e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8010910:	2b00      	cmp	r3, #0
 8010912:	d003      	beq.n	801091c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8010914:	f06f 0305 	mvn.w	r3, #5
 8010918:	617b      	str	r3, [r7, #20]
 801091a:	e00e      	b.n	801093a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 801091c:	693b      	ldr	r3, [r7, #16]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d103      	bne.n	801092a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8010922:	f06f 0303 	mvn.w	r3, #3
 8010926:	617b      	str	r3, [r7, #20]
 8010928:	e007      	b.n	801093a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 801092a:	6938      	ldr	r0, [r7, #16]
 801092c:	f000 fee8 	bl	8011700 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8010930:	2300      	movs	r3, #0
 8010932:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8010934:	6938      	ldr	r0, [r7, #16]
 8010936:	f000 fd6d 	bl	8011414 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 801093a:	697b      	ldr	r3, [r7, #20]
}
 801093c:	4618      	mov	r0, r3
 801093e:	3718      	adds	r7, #24
 8010940:	46bd      	mov	sp, r7
 8010942:	bd80      	pop	{r7, pc}

08010944 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010944:	b480      	push	{r7}
 8010946:	b083      	sub	sp, #12
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	f103 0208 	add.w	r2, r3, #8
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f04f 32ff 	mov.w	r2, #4294967295
 801095c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	f103 0208 	add.w	r2, r3, #8
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	f103 0208 	add.w	r2, r3, #8
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	2200      	movs	r2, #0
 8010976:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010978:	bf00      	nop
 801097a:	370c      	adds	r7, #12
 801097c:	46bd      	mov	sp, r7
 801097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010982:	4770      	bx	lr

08010984 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010984:	b480      	push	{r7}
 8010986:	b085      	sub	sp, #20
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
 801098c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	685b      	ldr	r3, [r3, #4]
 8010992:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010994:	683b      	ldr	r3, [r7, #0]
 8010996:	68fa      	ldr	r2, [r7, #12]
 8010998:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	689a      	ldr	r2, [r3, #8]
 801099e:	683b      	ldr	r3, [r7, #0]
 80109a0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	689b      	ldr	r3, [r3, #8]
 80109a6:	683a      	ldr	r2, [r7, #0]
 80109a8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	683a      	ldr	r2, [r7, #0]
 80109ae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80109b0:	683b      	ldr	r3, [r7, #0]
 80109b2:	687a      	ldr	r2, [r7, #4]
 80109b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	1c5a      	adds	r2, r3, #1
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	601a      	str	r2, [r3, #0]
}
 80109c0:	bf00      	nop
 80109c2:	3714      	adds	r7, #20
 80109c4:	46bd      	mov	sp, r7
 80109c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ca:	4770      	bx	lr

080109cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80109cc:	b480      	push	{r7}
 80109ce:	b085      	sub	sp, #20
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
 80109d4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80109d6:	683b      	ldr	r3, [r7, #0]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80109dc:	68bb      	ldr	r3, [r7, #8]
 80109de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109e2:	d103      	bne.n	80109ec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	691b      	ldr	r3, [r3, #16]
 80109e8:	60fb      	str	r3, [r7, #12]
 80109ea:	e00c      	b.n	8010a06 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	3308      	adds	r3, #8
 80109f0:	60fb      	str	r3, [r7, #12]
 80109f2:	e002      	b.n	80109fa <vListInsert+0x2e>
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	685b      	ldr	r3, [r3, #4]
 80109f8:	60fb      	str	r3, [r7, #12]
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	685b      	ldr	r3, [r3, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	68ba      	ldr	r2, [r7, #8]
 8010a02:	429a      	cmp	r2, r3
 8010a04:	d2f6      	bcs.n	80109f4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	685a      	ldr	r2, [r3, #4]
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010a0e:	683b      	ldr	r3, [r7, #0]
 8010a10:	685b      	ldr	r3, [r3, #4]
 8010a12:	683a      	ldr	r2, [r7, #0]
 8010a14:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	68fa      	ldr	r2, [r7, #12]
 8010a1a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	683a      	ldr	r2, [r7, #0]
 8010a20:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	687a      	ldr	r2, [r7, #4]
 8010a26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	1c5a      	adds	r2, r3, #1
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	601a      	str	r2, [r3, #0]
}
 8010a32:	bf00      	nop
 8010a34:	3714      	adds	r7, #20
 8010a36:	46bd      	mov	sp, r7
 8010a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3c:	4770      	bx	lr

08010a3e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010a3e:	b480      	push	{r7}
 8010a40:	b085      	sub	sp, #20
 8010a42:	af00      	add	r7, sp, #0
 8010a44:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	691b      	ldr	r3, [r3, #16]
 8010a4a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	685b      	ldr	r3, [r3, #4]
 8010a50:	687a      	ldr	r2, [r7, #4]
 8010a52:	6892      	ldr	r2, [r2, #8]
 8010a54:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	689b      	ldr	r3, [r3, #8]
 8010a5a:	687a      	ldr	r2, [r7, #4]
 8010a5c:	6852      	ldr	r2, [r2, #4]
 8010a5e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	685b      	ldr	r3, [r3, #4]
 8010a64:	687a      	ldr	r2, [r7, #4]
 8010a66:	429a      	cmp	r2, r3
 8010a68:	d103      	bne.n	8010a72 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	689a      	ldr	r2, [r3, #8]
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	2200      	movs	r2, #0
 8010a76:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	1e5a      	subs	r2, r3, #1
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	681b      	ldr	r3, [r3, #0]
}
 8010a86:	4618      	mov	r0, r3
 8010a88:	3714      	adds	r7, #20
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a90:	4770      	bx	lr
	...

08010a94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b084      	sub	sp, #16
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
 8010a9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d10a      	bne.n	8010abe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aac:	f383 8811 	msr	BASEPRI, r3
 8010ab0:	f3bf 8f6f 	isb	sy
 8010ab4:	f3bf 8f4f 	dsb	sy
 8010ab8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010aba:	bf00      	nop
 8010abc:	e7fe      	b.n	8010abc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010abe:	f001 fb6b 	bl	8012198 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	681a      	ldr	r2, [r3, #0]
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010aca:	68f9      	ldr	r1, [r7, #12]
 8010acc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010ace:	fb01 f303 	mul.w	r3, r1, r3
 8010ad2:	441a      	add	r2, r3
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	2200      	movs	r2, #0
 8010adc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	681a      	ldr	r2, [r3, #0]
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	681a      	ldr	r2, [r3, #0]
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010aee:	3b01      	subs	r3, #1
 8010af0:	68f9      	ldr	r1, [r7, #12]
 8010af2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010af4:	fb01 f303 	mul.w	r3, r1, r3
 8010af8:	441a      	add	r2, r3
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	22ff      	movs	r2, #255	; 0xff
 8010b02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	22ff      	movs	r2, #255	; 0xff
 8010b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d114      	bne.n	8010b3e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	691b      	ldr	r3, [r3, #16]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d01a      	beq.n	8010b52 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	3310      	adds	r3, #16
 8010b20:	4618      	mov	r0, r3
 8010b22:	f001 f839 	bl	8011b98 <xTaskRemoveFromEventList>
 8010b26:	4603      	mov	r3, r0
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d012      	beq.n	8010b52 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010b2c:	4b0c      	ldr	r3, [pc, #48]	; (8010b60 <xQueueGenericReset+0xcc>)
 8010b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b32:	601a      	str	r2, [r3, #0]
 8010b34:	f3bf 8f4f 	dsb	sy
 8010b38:	f3bf 8f6f 	isb	sy
 8010b3c:	e009      	b.n	8010b52 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	3310      	adds	r3, #16
 8010b42:	4618      	mov	r0, r3
 8010b44:	f7ff fefe 	bl	8010944 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	3324      	adds	r3, #36	; 0x24
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	f7ff fef9 	bl	8010944 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010b52:	f001 fb51 	bl	80121f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010b56:	2301      	movs	r3, #1
}
 8010b58:	4618      	mov	r0, r3
 8010b5a:	3710      	adds	r7, #16
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	bd80      	pop	{r7, pc}
 8010b60:	e000ed04 	.word	0xe000ed04

08010b64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b08e      	sub	sp, #56	; 0x38
 8010b68:	af02      	add	r7, sp, #8
 8010b6a:	60f8      	str	r0, [r7, #12]
 8010b6c:	60b9      	str	r1, [r7, #8]
 8010b6e:	607a      	str	r2, [r7, #4]
 8010b70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d10a      	bne.n	8010b8e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b7c:	f383 8811 	msr	BASEPRI, r3
 8010b80:	f3bf 8f6f 	isb	sy
 8010b84:	f3bf 8f4f 	dsb	sy
 8010b88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010b8a:	bf00      	nop
 8010b8c:	e7fe      	b.n	8010b8c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010b8e:	683b      	ldr	r3, [r7, #0]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d10a      	bne.n	8010baa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8010b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b98:	f383 8811 	msr	BASEPRI, r3
 8010b9c:	f3bf 8f6f 	isb	sy
 8010ba0:	f3bf 8f4f 	dsb	sy
 8010ba4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010ba6:	bf00      	nop
 8010ba8:	e7fe      	b.n	8010ba8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d002      	beq.n	8010bb6 <xQueueGenericCreateStatic+0x52>
 8010bb0:	68bb      	ldr	r3, [r7, #8]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d001      	beq.n	8010bba <xQueueGenericCreateStatic+0x56>
 8010bb6:	2301      	movs	r3, #1
 8010bb8:	e000      	b.n	8010bbc <xQueueGenericCreateStatic+0x58>
 8010bba:	2300      	movs	r3, #0
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d10a      	bne.n	8010bd6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bc4:	f383 8811 	msr	BASEPRI, r3
 8010bc8:	f3bf 8f6f 	isb	sy
 8010bcc:	f3bf 8f4f 	dsb	sy
 8010bd0:	623b      	str	r3, [r7, #32]
}
 8010bd2:	bf00      	nop
 8010bd4:	e7fe      	b.n	8010bd4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d102      	bne.n	8010be2 <xQueueGenericCreateStatic+0x7e>
 8010bdc:	68bb      	ldr	r3, [r7, #8]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d101      	bne.n	8010be6 <xQueueGenericCreateStatic+0x82>
 8010be2:	2301      	movs	r3, #1
 8010be4:	e000      	b.n	8010be8 <xQueueGenericCreateStatic+0x84>
 8010be6:	2300      	movs	r3, #0
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d10a      	bne.n	8010c02 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8010bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bf0:	f383 8811 	msr	BASEPRI, r3
 8010bf4:	f3bf 8f6f 	isb	sy
 8010bf8:	f3bf 8f4f 	dsb	sy
 8010bfc:	61fb      	str	r3, [r7, #28]
}
 8010bfe:	bf00      	nop
 8010c00:	e7fe      	b.n	8010c00 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010c02:	2350      	movs	r3, #80	; 0x50
 8010c04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010c06:	697b      	ldr	r3, [r7, #20]
 8010c08:	2b50      	cmp	r3, #80	; 0x50
 8010c0a:	d00a      	beq.n	8010c22 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8010c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c10:	f383 8811 	msr	BASEPRI, r3
 8010c14:	f3bf 8f6f 	isb	sy
 8010c18:	f3bf 8f4f 	dsb	sy
 8010c1c:	61bb      	str	r3, [r7, #24]
}
 8010c1e:	bf00      	nop
 8010c20:	e7fe      	b.n	8010c20 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010c22:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010c24:	683b      	ldr	r3, [r7, #0]
 8010c26:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d00d      	beq.n	8010c4a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c30:	2201      	movs	r2, #1
 8010c32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010c36:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c3c:	9300      	str	r3, [sp, #0]
 8010c3e:	4613      	mov	r3, r2
 8010c40:	687a      	ldr	r2, [r7, #4]
 8010c42:	68b9      	ldr	r1, [r7, #8]
 8010c44:	68f8      	ldr	r0, [r7, #12]
 8010c46:	f000 f83f 	bl	8010cc8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	3730      	adds	r7, #48	; 0x30
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd80      	pop	{r7, pc}

08010c54 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b08a      	sub	sp, #40	; 0x28
 8010c58:	af02      	add	r7, sp, #8
 8010c5a:	60f8      	str	r0, [r7, #12]
 8010c5c:	60b9      	str	r1, [r7, #8]
 8010c5e:	4613      	mov	r3, r2
 8010c60:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d10a      	bne.n	8010c7e <xQueueGenericCreate+0x2a>
	__asm volatile
 8010c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c6c:	f383 8811 	msr	BASEPRI, r3
 8010c70:	f3bf 8f6f 	isb	sy
 8010c74:	f3bf 8f4f 	dsb	sy
 8010c78:	613b      	str	r3, [r7, #16]
}
 8010c7a:	bf00      	nop
 8010c7c:	e7fe      	b.n	8010c7c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	68ba      	ldr	r2, [r7, #8]
 8010c82:	fb02 f303 	mul.w	r3, r2, r3
 8010c86:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010c88:	69fb      	ldr	r3, [r7, #28]
 8010c8a:	3350      	adds	r3, #80	; 0x50
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	f001 fb75 	bl	801237c <pvPortMalloc>
 8010c92:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010c94:	69bb      	ldr	r3, [r7, #24]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d011      	beq.n	8010cbe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010c9a:	69bb      	ldr	r3, [r7, #24]
 8010c9c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	3350      	adds	r3, #80	; 0x50
 8010ca2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010ca4:	69bb      	ldr	r3, [r7, #24]
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010cac:	79fa      	ldrb	r2, [r7, #7]
 8010cae:	69bb      	ldr	r3, [r7, #24]
 8010cb0:	9300      	str	r3, [sp, #0]
 8010cb2:	4613      	mov	r3, r2
 8010cb4:	697a      	ldr	r2, [r7, #20]
 8010cb6:	68b9      	ldr	r1, [r7, #8]
 8010cb8:	68f8      	ldr	r0, [r7, #12]
 8010cba:	f000 f805 	bl	8010cc8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010cbe:	69bb      	ldr	r3, [r7, #24]
	}
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	3720      	adds	r7, #32
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd80      	pop	{r7, pc}

08010cc8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b084      	sub	sp, #16
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	60f8      	str	r0, [r7, #12]
 8010cd0:	60b9      	str	r1, [r7, #8]
 8010cd2:	607a      	str	r2, [r7, #4]
 8010cd4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010cd6:	68bb      	ldr	r3, [r7, #8]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d103      	bne.n	8010ce4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010cdc:	69bb      	ldr	r3, [r7, #24]
 8010cde:	69ba      	ldr	r2, [r7, #24]
 8010ce0:	601a      	str	r2, [r3, #0]
 8010ce2:	e002      	b.n	8010cea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010ce4:	69bb      	ldr	r3, [r7, #24]
 8010ce6:	687a      	ldr	r2, [r7, #4]
 8010ce8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010cea:	69bb      	ldr	r3, [r7, #24]
 8010cec:	68fa      	ldr	r2, [r7, #12]
 8010cee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010cf0:	69bb      	ldr	r3, [r7, #24]
 8010cf2:	68ba      	ldr	r2, [r7, #8]
 8010cf4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010cf6:	2101      	movs	r1, #1
 8010cf8:	69b8      	ldr	r0, [r7, #24]
 8010cfa:	f7ff fecb 	bl	8010a94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010cfe:	69bb      	ldr	r3, [r7, #24]
 8010d00:	78fa      	ldrb	r2, [r7, #3]
 8010d02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010d06:	bf00      	nop
 8010d08:	3710      	adds	r7, #16
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	bd80      	pop	{r7, pc}

08010d0e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8010d0e:	b580      	push	{r7, lr}
 8010d10:	b08a      	sub	sp, #40	; 0x28
 8010d12:	af02      	add	r7, sp, #8
 8010d14:	60f8      	str	r0, [r7, #12]
 8010d16:	60b9      	str	r1, [r7, #8]
 8010d18:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d10a      	bne.n	8010d36 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8010d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d24:	f383 8811 	msr	BASEPRI, r3
 8010d28:	f3bf 8f6f 	isb	sy
 8010d2c:	f3bf 8f4f 	dsb	sy
 8010d30:	61bb      	str	r3, [r7, #24]
}
 8010d32:	bf00      	nop
 8010d34:	e7fe      	b.n	8010d34 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010d36:	68ba      	ldr	r2, [r7, #8]
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	429a      	cmp	r2, r3
 8010d3c:	d90a      	bls.n	8010d54 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8010d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d42:	f383 8811 	msr	BASEPRI, r3
 8010d46:	f3bf 8f6f 	isb	sy
 8010d4a:	f3bf 8f4f 	dsb	sy
 8010d4e:	617b      	str	r3, [r7, #20]
}
 8010d50:	bf00      	nop
 8010d52:	e7fe      	b.n	8010d52 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010d54:	2302      	movs	r3, #2
 8010d56:	9300      	str	r3, [sp, #0]
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	2100      	movs	r1, #0
 8010d5e:	68f8      	ldr	r0, [r7, #12]
 8010d60:	f7ff ff00 	bl	8010b64 <xQueueGenericCreateStatic>
 8010d64:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8010d66:	69fb      	ldr	r3, [r7, #28]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d002      	beq.n	8010d72 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010d6c:	69fb      	ldr	r3, [r7, #28]
 8010d6e:	68ba      	ldr	r2, [r7, #8]
 8010d70:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010d72:	69fb      	ldr	r3, [r7, #28]
	}
 8010d74:	4618      	mov	r0, r3
 8010d76:	3720      	adds	r7, #32
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	bd80      	pop	{r7, pc}

08010d7c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b086      	sub	sp, #24
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
 8010d84:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d10a      	bne.n	8010da2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8010d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d90:	f383 8811 	msr	BASEPRI, r3
 8010d94:	f3bf 8f6f 	isb	sy
 8010d98:	f3bf 8f4f 	dsb	sy
 8010d9c:	613b      	str	r3, [r7, #16]
}
 8010d9e:	bf00      	nop
 8010da0:	e7fe      	b.n	8010da0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010da2:	683a      	ldr	r2, [r7, #0]
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	429a      	cmp	r2, r3
 8010da8:	d90a      	bls.n	8010dc0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8010daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dae:	f383 8811 	msr	BASEPRI, r3
 8010db2:	f3bf 8f6f 	isb	sy
 8010db6:	f3bf 8f4f 	dsb	sy
 8010dba:	60fb      	str	r3, [r7, #12]
}
 8010dbc:	bf00      	nop
 8010dbe:	e7fe      	b.n	8010dbe <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010dc0:	2202      	movs	r2, #2
 8010dc2:	2100      	movs	r1, #0
 8010dc4:	6878      	ldr	r0, [r7, #4]
 8010dc6:	f7ff ff45 	bl	8010c54 <xQueueGenericCreate>
 8010dca:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8010dcc:	697b      	ldr	r3, [r7, #20]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d002      	beq.n	8010dd8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010dd2:	697b      	ldr	r3, [r7, #20]
 8010dd4:	683a      	ldr	r2, [r7, #0]
 8010dd6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010dd8:	697b      	ldr	r3, [r7, #20]
	}
 8010dda:	4618      	mov	r0, r3
 8010ddc:	3718      	adds	r7, #24
 8010dde:	46bd      	mov	sp, r7
 8010de0:	bd80      	pop	{r7, pc}
	...

08010de4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b08e      	sub	sp, #56	; 0x38
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	60f8      	str	r0, [r7, #12]
 8010dec:	60b9      	str	r1, [r7, #8]
 8010dee:	607a      	str	r2, [r7, #4]
 8010df0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010df2:	2300      	movs	r3, #0
 8010df4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d10a      	bne.n	8010e16 <xQueueGenericSend+0x32>
	__asm volatile
 8010e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e04:	f383 8811 	msr	BASEPRI, r3
 8010e08:	f3bf 8f6f 	isb	sy
 8010e0c:	f3bf 8f4f 	dsb	sy
 8010e10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010e12:	bf00      	nop
 8010e14:	e7fe      	b.n	8010e14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010e16:	68bb      	ldr	r3, [r7, #8]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d103      	bne.n	8010e24 <xQueueGenericSend+0x40>
 8010e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d101      	bne.n	8010e28 <xQueueGenericSend+0x44>
 8010e24:	2301      	movs	r3, #1
 8010e26:	e000      	b.n	8010e2a <xQueueGenericSend+0x46>
 8010e28:	2300      	movs	r3, #0
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d10a      	bne.n	8010e44 <xQueueGenericSend+0x60>
	__asm volatile
 8010e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e32:	f383 8811 	msr	BASEPRI, r3
 8010e36:	f3bf 8f6f 	isb	sy
 8010e3a:	f3bf 8f4f 	dsb	sy
 8010e3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010e40:	bf00      	nop
 8010e42:	e7fe      	b.n	8010e42 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010e44:	683b      	ldr	r3, [r7, #0]
 8010e46:	2b02      	cmp	r3, #2
 8010e48:	d103      	bne.n	8010e52 <xQueueGenericSend+0x6e>
 8010e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e4e:	2b01      	cmp	r3, #1
 8010e50:	d101      	bne.n	8010e56 <xQueueGenericSend+0x72>
 8010e52:	2301      	movs	r3, #1
 8010e54:	e000      	b.n	8010e58 <xQueueGenericSend+0x74>
 8010e56:	2300      	movs	r3, #0
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d10a      	bne.n	8010e72 <xQueueGenericSend+0x8e>
	__asm volatile
 8010e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e60:	f383 8811 	msr	BASEPRI, r3
 8010e64:	f3bf 8f6f 	isb	sy
 8010e68:	f3bf 8f4f 	dsb	sy
 8010e6c:	623b      	str	r3, [r7, #32]
}
 8010e6e:	bf00      	nop
 8010e70:	e7fe      	b.n	8010e70 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010e72:	f000 ff99 	bl	8011da8 <xTaskGetSchedulerState>
 8010e76:	4603      	mov	r3, r0
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d102      	bne.n	8010e82 <xQueueGenericSend+0x9e>
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d101      	bne.n	8010e86 <xQueueGenericSend+0xa2>
 8010e82:	2301      	movs	r3, #1
 8010e84:	e000      	b.n	8010e88 <xQueueGenericSend+0xa4>
 8010e86:	2300      	movs	r3, #0
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d10a      	bne.n	8010ea2 <xQueueGenericSend+0xbe>
	__asm volatile
 8010e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e90:	f383 8811 	msr	BASEPRI, r3
 8010e94:	f3bf 8f6f 	isb	sy
 8010e98:	f3bf 8f4f 	dsb	sy
 8010e9c:	61fb      	str	r3, [r7, #28]
}
 8010e9e:	bf00      	nop
 8010ea0:	e7fe      	b.n	8010ea0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010ea2:	f001 f979 	bl	8012198 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010eae:	429a      	cmp	r2, r3
 8010eb0:	d302      	bcc.n	8010eb8 <xQueueGenericSend+0xd4>
 8010eb2:	683b      	ldr	r3, [r7, #0]
 8010eb4:	2b02      	cmp	r3, #2
 8010eb6:	d129      	bne.n	8010f0c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010eb8:	683a      	ldr	r2, [r7, #0]
 8010eba:	68b9      	ldr	r1, [r7, #8]
 8010ebc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ebe:	f000 fae4 	bl	801148a <prvCopyDataToQueue>
 8010ec2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d010      	beq.n	8010eee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ece:	3324      	adds	r3, #36	; 0x24
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f000 fe61 	bl	8011b98 <xTaskRemoveFromEventList>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d013      	beq.n	8010f04 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010edc:	4b3f      	ldr	r3, [pc, #252]	; (8010fdc <xQueueGenericSend+0x1f8>)
 8010ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ee2:	601a      	str	r2, [r3, #0]
 8010ee4:	f3bf 8f4f 	dsb	sy
 8010ee8:	f3bf 8f6f 	isb	sy
 8010eec:	e00a      	b.n	8010f04 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d007      	beq.n	8010f04 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010ef4:	4b39      	ldr	r3, [pc, #228]	; (8010fdc <xQueueGenericSend+0x1f8>)
 8010ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010efa:	601a      	str	r2, [r3, #0]
 8010efc:	f3bf 8f4f 	dsb	sy
 8010f00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010f04:	f001 f978 	bl	80121f8 <vPortExitCritical>
				return pdPASS;
 8010f08:	2301      	movs	r3, #1
 8010f0a:	e063      	b.n	8010fd4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d103      	bne.n	8010f1a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010f12:	f001 f971 	bl	80121f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010f16:	2300      	movs	r3, #0
 8010f18:	e05c      	b.n	8010fd4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d106      	bne.n	8010f2e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010f20:	f107 0314 	add.w	r3, r7, #20
 8010f24:	4618      	mov	r0, r3
 8010f26:	f000 fe9b 	bl	8011c60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010f2a:	2301      	movs	r3, #1
 8010f2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010f2e:	f001 f963 	bl	80121f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010f32:	f000 fc43 	bl	80117bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010f36:	f001 f92f 	bl	8012198 <vPortEnterCritical>
 8010f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010f40:	b25b      	sxtb	r3, r3
 8010f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f46:	d103      	bne.n	8010f50 <xQueueGenericSend+0x16c>
 8010f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010f56:	b25b      	sxtb	r3, r3
 8010f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f5c:	d103      	bne.n	8010f66 <xQueueGenericSend+0x182>
 8010f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f60:	2200      	movs	r2, #0
 8010f62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010f66:	f001 f947 	bl	80121f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010f6a:	1d3a      	adds	r2, r7, #4
 8010f6c:	f107 0314 	add.w	r3, r7, #20
 8010f70:	4611      	mov	r1, r2
 8010f72:	4618      	mov	r0, r3
 8010f74:	f000 fe8a 	bl	8011c8c <xTaskCheckForTimeOut>
 8010f78:	4603      	mov	r3, r0
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d124      	bne.n	8010fc8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010f7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f80:	f000 fb7b 	bl	801167a <prvIsQueueFull>
 8010f84:	4603      	mov	r3, r0
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d018      	beq.n	8010fbc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f8c:	3310      	adds	r3, #16
 8010f8e:	687a      	ldr	r2, [r7, #4]
 8010f90:	4611      	mov	r1, r2
 8010f92:	4618      	mov	r0, r3
 8010f94:	f000 fddc 	bl	8011b50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f9a:	f000 fb06 	bl	80115aa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010f9e:	f000 fc1b 	bl	80117d8 <xTaskResumeAll>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	f47f af7c 	bne.w	8010ea2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8010faa:	4b0c      	ldr	r3, [pc, #48]	; (8010fdc <xQueueGenericSend+0x1f8>)
 8010fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fb0:	601a      	str	r2, [r3, #0]
 8010fb2:	f3bf 8f4f 	dsb	sy
 8010fb6:	f3bf 8f6f 	isb	sy
 8010fba:	e772      	b.n	8010ea2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010fbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010fbe:	f000 faf4 	bl	80115aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010fc2:	f000 fc09 	bl	80117d8 <xTaskResumeAll>
 8010fc6:	e76c      	b.n	8010ea2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010fc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010fca:	f000 faee 	bl	80115aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010fce:	f000 fc03 	bl	80117d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010fd2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	3738      	adds	r7, #56	; 0x38
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	bd80      	pop	{r7, pc}
 8010fdc:	e000ed04 	.word	0xe000ed04

08010fe0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b08e      	sub	sp, #56	; 0x38
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
 8010fe8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d10a      	bne.n	801100a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8010ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ff8:	f383 8811 	msr	BASEPRI, r3
 8010ffc:	f3bf 8f6f 	isb	sy
 8011000:	f3bf 8f4f 	dsb	sy
 8011004:	623b      	str	r3, [r7, #32]
}
 8011006:	bf00      	nop
 8011008:	e7fe      	b.n	8011008 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801100a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801100e:	2b00      	cmp	r3, #0
 8011010:	d00a      	beq.n	8011028 <xQueueGiveFromISR+0x48>
	__asm volatile
 8011012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011016:	f383 8811 	msr	BASEPRI, r3
 801101a:	f3bf 8f6f 	isb	sy
 801101e:	f3bf 8f4f 	dsb	sy
 8011022:	61fb      	str	r3, [r7, #28]
}
 8011024:	bf00      	nop
 8011026:	e7fe      	b.n	8011026 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d103      	bne.n	8011038 <xQueueGiveFromISR+0x58>
 8011030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011032:	689b      	ldr	r3, [r3, #8]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d101      	bne.n	801103c <xQueueGiveFromISR+0x5c>
 8011038:	2301      	movs	r3, #1
 801103a:	e000      	b.n	801103e <xQueueGiveFromISR+0x5e>
 801103c:	2300      	movs	r3, #0
 801103e:	2b00      	cmp	r3, #0
 8011040:	d10a      	bne.n	8011058 <xQueueGiveFromISR+0x78>
	__asm volatile
 8011042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011046:	f383 8811 	msr	BASEPRI, r3
 801104a:	f3bf 8f6f 	isb	sy
 801104e:	f3bf 8f4f 	dsb	sy
 8011052:	61bb      	str	r3, [r7, #24]
}
 8011054:	bf00      	nop
 8011056:	e7fe      	b.n	8011056 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011058:	f001 f950 	bl	80122fc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801105c:	f3ef 8211 	mrs	r2, BASEPRI
 8011060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011064:	f383 8811 	msr	BASEPRI, r3
 8011068:	f3bf 8f6f 	isb	sy
 801106c:	f3bf 8f4f 	dsb	sy
 8011070:	617a      	str	r2, [r7, #20]
 8011072:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011074:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011076:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801107a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801107c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801107e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011084:	429a      	cmp	r2, r3
 8011086:	d22b      	bcs.n	80110e0 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801108a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801108e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011094:	1c5a      	adds	r2, r3, #1
 8011096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011098:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801109a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801109e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110a2:	d112      	bne.n	80110ca <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80110a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d016      	beq.n	80110da <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80110ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110ae:	3324      	adds	r3, #36	; 0x24
 80110b0:	4618      	mov	r0, r3
 80110b2:	f000 fd71 	bl	8011b98 <xTaskRemoveFromEventList>
 80110b6:	4603      	mov	r3, r0
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d00e      	beq.n	80110da <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d00b      	beq.n	80110da <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80110c2:	683b      	ldr	r3, [r7, #0]
 80110c4:	2201      	movs	r2, #1
 80110c6:	601a      	str	r2, [r3, #0]
 80110c8:	e007      	b.n	80110da <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80110ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80110ce:	3301      	adds	r3, #1
 80110d0:	b2db      	uxtb	r3, r3
 80110d2:	b25a      	sxtb	r2, r3
 80110d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80110da:	2301      	movs	r3, #1
 80110dc:	637b      	str	r3, [r7, #52]	; 0x34
 80110de:	e001      	b.n	80110e4 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80110e0:	2300      	movs	r3, #0
 80110e2:	637b      	str	r3, [r7, #52]	; 0x34
 80110e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110e6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80110ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80110f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80110f2:	4618      	mov	r0, r3
 80110f4:	3738      	adds	r7, #56	; 0x38
 80110f6:	46bd      	mov	sp, r7
 80110f8:	bd80      	pop	{r7, pc}
	...

080110fc <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b08e      	sub	sp, #56	; 0x38
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
 8011104:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011106:	2300      	movs	r3, #0
 8011108:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801110e:	2300      	movs	r3, #0
 8011110:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011114:	2b00      	cmp	r3, #0
 8011116:	d10a      	bne.n	801112e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8011118:	f04f 0350 	mov.w	r3, #80	; 0x50
 801111c:	f383 8811 	msr	BASEPRI, r3
 8011120:	f3bf 8f6f 	isb	sy
 8011124:	f3bf 8f4f 	dsb	sy
 8011128:	623b      	str	r3, [r7, #32]
}
 801112a:	bf00      	nop
 801112c:	e7fe      	b.n	801112c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801112e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011132:	2b00      	cmp	r3, #0
 8011134:	d00a      	beq.n	801114c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8011136:	f04f 0350 	mov.w	r3, #80	; 0x50
 801113a:	f383 8811 	msr	BASEPRI, r3
 801113e:	f3bf 8f6f 	isb	sy
 8011142:	f3bf 8f4f 	dsb	sy
 8011146:	61fb      	str	r3, [r7, #28]
}
 8011148:	bf00      	nop
 801114a:	e7fe      	b.n	801114a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801114c:	f000 fe2c 	bl	8011da8 <xTaskGetSchedulerState>
 8011150:	4603      	mov	r3, r0
 8011152:	2b00      	cmp	r3, #0
 8011154:	d102      	bne.n	801115c <xQueueSemaphoreTake+0x60>
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d101      	bne.n	8011160 <xQueueSemaphoreTake+0x64>
 801115c:	2301      	movs	r3, #1
 801115e:	e000      	b.n	8011162 <xQueueSemaphoreTake+0x66>
 8011160:	2300      	movs	r3, #0
 8011162:	2b00      	cmp	r3, #0
 8011164:	d10a      	bne.n	801117c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8011166:	f04f 0350 	mov.w	r3, #80	; 0x50
 801116a:	f383 8811 	msr	BASEPRI, r3
 801116e:	f3bf 8f6f 	isb	sy
 8011172:	f3bf 8f4f 	dsb	sy
 8011176:	61bb      	str	r3, [r7, #24]
}
 8011178:	bf00      	nop
 801117a:	e7fe      	b.n	801117a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801117c:	f001 f80c 	bl	8012198 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011184:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011188:	2b00      	cmp	r3, #0
 801118a:	d024      	beq.n	80111d6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801118c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801118e:	1e5a      	subs	r2, r3, #1
 8011190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011192:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d104      	bne.n	80111a6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801119c:	f000 ff7a 	bl	8012094 <pvTaskIncrementMutexHeldCount>
 80111a0:	4602      	mov	r2, r0
 80111a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111a4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80111a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111a8:	691b      	ldr	r3, [r3, #16]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d00f      	beq.n	80111ce <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80111ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111b0:	3310      	adds	r3, #16
 80111b2:	4618      	mov	r0, r3
 80111b4:	f000 fcf0 	bl	8011b98 <xTaskRemoveFromEventList>
 80111b8:	4603      	mov	r3, r0
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d007      	beq.n	80111ce <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80111be:	4b54      	ldr	r3, [pc, #336]	; (8011310 <xQueueSemaphoreTake+0x214>)
 80111c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111c4:	601a      	str	r2, [r3, #0]
 80111c6:	f3bf 8f4f 	dsb	sy
 80111ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80111ce:	f001 f813 	bl	80121f8 <vPortExitCritical>
				return pdPASS;
 80111d2:	2301      	movs	r3, #1
 80111d4:	e097      	b.n	8011306 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80111d6:	683b      	ldr	r3, [r7, #0]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d111      	bne.n	8011200 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80111dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d00a      	beq.n	80111f8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80111e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111e6:	f383 8811 	msr	BASEPRI, r3
 80111ea:	f3bf 8f6f 	isb	sy
 80111ee:	f3bf 8f4f 	dsb	sy
 80111f2:	617b      	str	r3, [r7, #20]
}
 80111f4:	bf00      	nop
 80111f6:	e7fe      	b.n	80111f6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80111f8:	f000 fffe 	bl	80121f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80111fc:	2300      	movs	r3, #0
 80111fe:	e082      	b.n	8011306 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011202:	2b00      	cmp	r3, #0
 8011204:	d106      	bne.n	8011214 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011206:	f107 030c 	add.w	r3, r7, #12
 801120a:	4618      	mov	r0, r3
 801120c:	f000 fd28 	bl	8011c60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011210:	2301      	movs	r3, #1
 8011212:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011214:	f000 fff0 	bl	80121f8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011218:	f000 fad0 	bl	80117bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801121c:	f000 ffbc 	bl	8012198 <vPortEnterCritical>
 8011220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011222:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011226:	b25b      	sxtb	r3, r3
 8011228:	f1b3 3fff 	cmp.w	r3, #4294967295
 801122c:	d103      	bne.n	8011236 <xQueueSemaphoreTake+0x13a>
 801122e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011230:	2200      	movs	r2, #0
 8011232:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011238:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801123c:	b25b      	sxtb	r3, r3
 801123e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011242:	d103      	bne.n	801124c <xQueueSemaphoreTake+0x150>
 8011244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011246:	2200      	movs	r2, #0
 8011248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801124c:	f000 ffd4 	bl	80121f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011250:	463a      	mov	r2, r7
 8011252:	f107 030c 	add.w	r3, r7, #12
 8011256:	4611      	mov	r1, r2
 8011258:	4618      	mov	r0, r3
 801125a:	f000 fd17 	bl	8011c8c <xTaskCheckForTimeOut>
 801125e:	4603      	mov	r3, r0
 8011260:	2b00      	cmp	r3, #0
 8011262:	d132      	bne.n	80112ca <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011264:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011266:	f000 f9f2 	bl	801164e <prvIsQueueEmpty>
 801126a:	4603      	mov	r3, r0
 801126c:	2b00      	cmp	r3, #0
 801126e:	d026      	beq.n	80112be <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d109      	bne.n	801128c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8011278:	f000 ff8e 	bl	8012198 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801127c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801127e:	689b      	ldr	r3, [r3, #8]
 8011280:	4618      	mov	r0, r3
 8011282:	f000 fdaf 	bl	8011de4 <xTaskPriorityInherit>
 8011286:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011288:	f000 ffb6 	bl	80121f8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801128c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801128e:	3324      	adds	r3, #36	; 0x24
 8011290:	683a      	ldr	r2, [r7, #0]
 8011292:	4611      	mov	r1, r2
 8011294:	4618      	mov	r0, r3
 8011296:	f000 fc5b 	bl	8011b50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801129a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801129c:	f000 f985 	bl	80115aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80112a0:	f000 fa9a 	bl	80117d8 <xTaskResumeAll>
 80112a4:	4603      	mov	r3, r0
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	f47f af68 	bne.w	801117c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80112ac:	4b18      	ldr	r3, [pc, #96]	; (8011310 <xQueueSemaphoreTake+0x214>)
 80112ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112b2:	601a      	str	r2, [r3, #0]
 80112b4:	f3bf 8f4f 	dsb	sy
 80112b8:	f3bf 8f6f 	isb	sy
 80112bc:	e75e      	b.n	801117c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80112be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112c0:	f000 f973 	bl	80115aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80112c4:	f000 fa88 	bl	80117d8 <xTaskResumeAll>
 80112c8:	e758      	b.n	801117c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80112ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112cc:	f000 f96d 	bl	80115aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80112d0:	f000 fa82 	bl	80117d8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80112d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112d6:	f000 f9ba 	bl	801164e <prvIsQueueEmpty>
 80112da:	4603      	mov	r3, r0
 80112dc:	2b00      	cmp	r3, #0
 80112de:	f43f af4d 	beq.w	801117c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80112e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d00d      	beq.n	8011304 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80112e8:	f000 ff56 	bl	8012198 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80112ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112ee:	f000 f8b4 	bl	801145a <prvGetDisinheritPriorityAfterTimeout>
 80112f2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80112f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f6:	689b      	ldr	r3, [r3, #8]
 80112f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80112fa:	4618      	mov	r0, r3
 80112fc:	f000 fe48 	bl	8011f90 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011300:	f000 ff7a 	bl	80121f8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011304:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011306:	4618      	mov	r0, r3
 8011308:	3738      	adds	r7, #56	; 0x38
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}
 801130e:	bf00      	nop
 8011310:	e000ed04 	.word	0xe000ed04

08011314 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b08e      	sub	sp, #56	; 0x38
 8011318:	af00      	add	r7, sp, #0
 801131a:	60f8      	str	r0, [r7, #12]
 801131c:	60b9      	str	r1, [r7, #8]
 801131e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011326:	2b00      	cmp	r3, #0
 8011328:	d10a      	bne.n	8011340 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801132a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801132e:	f383 8811 	msr	BASEPRI, r3
 8011332:	f3bf 8f6f 	isb	sy
 8011336:	f3bf 8f4f 	dsb	sy
 801133a:	623b      	str	r3, [r7, #32]
}
 801133c:	bf00      	nop
 801133e:	e7fe      	b.n	801133e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011340:	68bb      	ldr	r3, [r7, #8]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d103      	bne.n	801134e <xQueueReceiveFromISR+0x3a>
 8011346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801134a:	2b00      	cmp	r3, #0
 801134c:	d101      	bne.n	8011352 <xQueueReceiveFromISR+0x3e>
 801134e:	2301      	movs	r3, #1
 8011350:	e000      	b.n	8011354 <xQueueReceiveFromISR+0x40>
 8011352:	2300      	movs	r3, #0
 8011354:	2b00      	cmp	r3, #0
 8011356:	d10a      	bne.n	801136e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8011358:	f04f 0350 	mov.w	r3, #80	; 0x50
 801135c:	f383 8811 	msr	BASEPRI, r3
 8011360:	f3bf 8f6f 	isb	sy
 8011364:	f3bf 8f4f 	dsb	sy
 8011368:	61fb      	str	r3, [r7, #28]
}
 801136a:	bf00      	nop
 801136c:	e7fe      	b.n	801136c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801136e:	f000 ffc5 	bl	80122fc <vPortValidateInterruptPriority>
	__asm volatile
 8011372:	f3ef 8211 	mrs	r2, BASEPRI
 8011376:	f04f 0350 	mov.w	r3, #80	; 0x50
 801137a:	f383 8811 	msr	BASEPRI, r3
 801137e:	f3bf 8f6f 	isb	sy
 8011382:	f3bf 8f4f 	dsb	sy
 8011386:	61ba      	str	r2, [r7, #24]
 8011388:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801138a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801138c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801138e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011392:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011396:	2b00      	cmp	r3, #0
 8011398:	d02f      	beq.n	80113fa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801139a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801139c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80113a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80113a4:	68b9      	ldr	r1, [r7, #8]
 80113a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80113a8:	f000 f8d9 	bl	801155e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80113ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ae:	1e5a      	subs	r2, r3, #1
 80113b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80113b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80113b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113bc:	d112      	bne.n	80113e4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80113be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113c0:	691b      	ldr	r3, [r3, #16]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d016      	beq.n	80113f4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80113c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113c8:	3310      	adds	r3, #16
 80113ca:	4618      	mov	r0, r3
 80113cc:	f000 fbe4 	bl	8011b98 <xTaskRemoveFromEventList>
 80113d0:	4603      	mov	r3, r0
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d00e      	beq.n	80113f4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d00b      	beq.n	80113f4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	2201      	movs	r2, #1
 80113e0:	601a      	str	r2, [r3, #0]
 80113e2:	e007      	b.n	80113f4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80113e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80113e8:	3301      	adds	r3, #1
 80113ea:	b2db      	uxtb	r3, r3
 80113ec:	b25a      	sxtb	r2, r3
 80113ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80113f4:	2301      	movs	r3, #1
 80113f6:	637b      	str	r3, [r7, #52]	; 0x34
 80113f8:	e001      	b.n	80113fe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80113fa:	2300      	movs	r3, #0
 80113fc:	637b      	str	r3, [r7, #52]	; 0x34
 80113fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011400:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011402:	693b      	ldr	r3, [r7, #16]
 8011404:	f383 8811 	msr	BASEPRI, r3
}
 8011408:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801140a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801140c:	4618      	mov	r0, r3
 801140e:	3738      	adds	r7, #56	; 0x38
 8011410:	46bd      	mov	sp, r7
 8011412:	bd80      	pop	{r7, pc}

08011414 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b084      	sub	sp, #16
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d10a      	bne.n	801143c <vQueueDelete+0x28>
	__asm volatile
 8011426:	f04f 0350 	mov.w	r3, #80	; 0x50
 801142a:	f383 8811 	msr	BASEPRI, r3
 801142e:	f3bf 8f6f 	isb	sy
 8011432:	f3bf 8f4f 	dsb	sy
 8011436:	60bb      	str	r3, [r7, #8]
}
 8011438:	bf00      	nop
 801143a:	e7fe      	b.n	801143a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801143c:	68f8      	ldr	r0, [r7, #12]
 801143e:	f000 f95f 	bl	8011700 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8011448:	2b00      	cmp	r3, #0
 801144a:	d102      	bne.n	8011452 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 801144c:	68f8      	ldr	r0, [r7, #12]
 801144e:	f001 f861 	bl	8012514 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011452:	bf00      	nop
 8011454:	3710      	adds	r7, #16
 8011456:	46bd      	mov	sp, r7
 8011458:	bd80      	pop	{r7, pc}

0801145a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801145a:	b480      	push	{r7}
 801145c:	b085      	sub	sp, #20
 801145e:	af00      	add	r7, sp, #0
 8011460:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011466:	2b00      	cmp	r3, #0
 8011468:	d006      	beq.n	8011478 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8011474:	60fb      	str	r3, [r7, #12]
 8011476:	e001      	b.n	801147c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011478:	2300      	movs	r3, #0
 801147a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801147c:	68fb      	ldr	r3, [r7, #12]
	}
 801147e:	4618      	mov	r0, r3
 8011480:	3714      	adds	r7, #20
 8011482:	46bd      	mov	sp, r7
 8011484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011488:	4770      	bx	lr

0801148a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801148a:	b580      	push	{r7, lr}
 801148c:	b086      	sub	sp, #24
 801148e:	af00      	add	r7, sp, #0
 8011490:	60f8      	str	r0, [r7, #12]
 8011492:	60b9      	str	r1, [r7, #8]
 8011494:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011496:	2300      	movs	r3, #0
 8011498:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801149e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d10d      	bne.n	80114c4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d14d      	bne.n	801154c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	689b      	ldr	r3, [r3, #8]
 80114b4:	4618      	mov	r0, r3
 80114b6:	f000 fcfd 	bl	8011eb4 <xTaskPriorityDisinherit>
 80114ba:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	2200      	movs	r2, #0
 80114c0:	609a      	str	r2, [r3, #8]
 80114c2:	e043      	b.n	801154c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d119      	bne.n	80114fe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	6858      	ldr	r0, [r3, #4]
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114d2:	461a      	mov	r2, r3
 80114d4:	68b9      	ldr	r1, [r7, #8]
 80114d6:	f001 fc76 	bl	8012dc6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	685a      	ldr	r2, [r3, #4]
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114e2:	441a      	add	r2, r3
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	685a      	ldr	r2, [r3, #4]
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	689b      	ldr	r3, [r3, #8]
 80114f0:	429a      	cmp	r2, r3
 80114f2:	d32b      	bcc.n	801154c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	681a      	ldr	r2, [r3, #0]
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	605a      	str	r2, [r3, #4]
 80114fc:	e026      	b.n	801154c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	68d8      	ldr	r0, [r3, #12]
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011506:	461a      	mov	r2, r3
 8011508:	68b9      	ldr	r1, [r7, #8]
 801150a:	f001 fc5c 	bl	8012dc6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	68da      	ldr	r2, [r3, #12]
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011516:	425b      	negs	r3, r3
 8011518:	441a      	add	r2, r3
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	68da      	ldr	r2, [r3, #12]
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	429a      	cmp	r2, r3
 8011528:	d207      	bcs.n	801153a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	689a      	ldr	r2, [r3, #8]
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011532:	425b      	negs	r3, r3
 8011534:	441a      	add	r2, r3
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	2b02      	cmp	r3, #2
 801153e:	d105      	bne.n	801154c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011540:	693b      	ldr	r3, [r7, #16]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d002      	beq.n	801154c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011546:	693b      	ldr	r3, [r7, #16]
 8011548:	3b01      	subs	r3, #1
 801154a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801154c:	693b      	ldr	r3, [r7, #16]
 801154e:	1c5a      	adds	r2, r3, #1
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011554:	697b      	ldr	r3, [r7, #20]
}
 8011556:	4618      	mov	r0, r3
 8011558:	3718      	adds	r7, #24
 801155a:	46bd      	mov	sp, r7
 801155c:	bd80      	pop	{r7, pc}

0801155e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801155e:	b580      	push	{r7, lr}
 8011560:	b082      	sub	sp, #8
 8011562:	af00      	add	r7, sp, #0
 8011564:	6078      	str	r0, [r7, #4]
 8011566:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801156c:	2b00      	cmp	r3, #0
 801156e:	d018      	beq.n	80115a2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	68da      	ldr	r2, [r3, #12]
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011578:	441a      	add	r2, r3
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	68da      	ldr	r2, [r3, #12]
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	689b      	ldr	r3, [r3, #8]
 8011586:	429a      	cmp	r2, r3
 8011588:	d303      	bcc.n	8011592 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681a      	ldr	r2, [r3, #0]
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	68d9      	ldr	r1, [r3, #12]
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801159a:	461a      	mov	r2, r3
 801159c:	6838      	ldr	r0, [r7, #0]
 801159e:	f001 fc12 	bl	8012dc6 <memcpy>
	}
}
 80115a2:	bf00      	nop
 80115a4:	3708      	adds	r7, #8
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bd80      	pop	{r7, pc}

080115aa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80115aa:	b580      	push	{r7, lr}
 80115ac:	b084      	sub	sp, #16
 80115ae:	af00      	add	r7, sp, #0
 80115b0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80115b2:	f000 fdf1 	bl	8012198 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80115bc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80115be:	e011      	b.n	80115e4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d012      	beq.n	80115ee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	3324      	adds	r3, #36	; 0x24
 80115cc:	4618      	mov	r0, r3
 80115ce:	f000 fae3 	bl	8011b98 <xTaskRemoveFromEventList>
 80115d2:	4603      	mov	r3, r0
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d001      	beq.n	80115dc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80115d8:	f000 fbba 	bl	8011d50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80115dc:	7bfb      	ldrb	r3, [r7, #15]
 80115de:	3b01      	subs	r3, #1
 80115e0:	b2db      	uxtb	r3, r3
 80115e2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80115e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	dce9      	bgt.n	80115c0 <prvUnlockQueue+0x16>
 80115ec:	e000      	b.n	80115f0 <prvUnlockQueue+0x46>
					break;
 80115ee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	22ff      	movs	r2, #255	; 0xff
 80115f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80115f8:	f000 fdfe 	bl	80121f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80115fc:	f000 fdcc 	bl	8012198 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011606:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011608:	e011      	b.n	801162e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	691b      	ldr	r3, [r3, #16]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d012      	beq.n	8011638 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	3310      	adds	r3, #16
 8011616:	4618      	mov	r0, r3
 8011618:	f000 fabe 	bl	8011b98 <xTaskRemoveFromEventList>
 801161c:	4603      	mov	r3, r0
 801161e:	2b00      	cmp	r3, #0
 8011620:	d001      	beq.n	8011626 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011622:	f000 fb95 	bl	8011d50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011626:	7bbb      	ldrb	r3, [r7, #14]
 8011628:	3b01      	subs	r3, #1
 801162a:	b2db      	uxtb	r3, r3
 801162c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801162e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011632:	2b00      	cmp	r3, #0
 8011634:	dce9      	bgt.n	801160a <prvUnlockQueue+0x60>
 8011636:	e000      	b.n	801163a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011638:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	22ff      	movs	r2, #255	; 0xff
 801163e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011642:	f000 fdd9 	bl	80121f8 <vPortExitCritical>
}
 8011646:	bf00      	nop
 8011648:	3710      	adds	r7, #16
 801164a:	46bd      	mov	sp, r7
 801164c:	bd80      	pop	{r7, pc}

0801164e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801164e:	b580      	push	{r7, lr}
 8011650:	b084      	sub	sp, #16
 8011652:	af00      	add	r7, sp, #0
 8011654:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011656:	f000 fd9f 	bl	8012198 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801165e:	2b00      	cmp	r3, #0
 8011660:	d102      	bne.n	8011668 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011662:	2301      	movs	r3, #1
 8011664:	60fb      	str	r3, [r7, #12]
 8011666:	e001      	b.n	801166c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011668:	2300      	movs	r3, #0
 801166a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801166c:	f000 fdc4 	bl	80121f8 <vPortExitCritical>

	return xReturn;
 8011670:	68fb      	ldr	r3, [r7, #12]
}
 8011672:	4618      	mov	r0, r3
 8011674:	3710      	adds	r7, #16
 8011676:	46bd      	mov	sp, r7
 8011678:	bd80      	pop	{r7, pc}

0801167a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801167a:	b580      	push	{r7, lr}
 801167c:	b084      	sub	sp, #16
 801167e:	af00      	add	r7, sp, #0
 8011680:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011682:	f000 fd89 	bl	8012198 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801168e:	429a      	cmp	r2, r3
 8011690:	d102      	bne.n	8011698 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011692:	2301      	movs	r3, #1
 8011694:	60fb      	str	r3, [r7, #12]
 8011696:	e001      	b.n	801169c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011698:	2300      	movs	r3, #0
 801169a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801169c:	f000 fdac 	bl	80121f8 <vPortExitCritical>

	return xReturn;
 80116a0:	68fb      	ldr	r3, [r7, #12]
}
 80116a2:	4618      	mov	r0, r3
 80116a4:	3710      	adds	r7, #16
 80116a6:	46bd      	mov	sp, r7
 80116a8:	bd80      	pop	{r7, pc}
	...

080116ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80116ac:	b480      	push	{r7}
 80116ae:	b085      	sub	sp, #20
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
 80116b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80116b6:	2300      	movs	r3, #0
 80116b8:	60fb      	str	r3, [r7, #12]
 80116ba:	e014      	b.n	80116e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80116bc:	4a0f      	ldr	r2, [pc, #60]	; (80116fc <vQueueAddToRegistry+0x50>)
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d10b      	bne.n	80116e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80116c8:	490c      	ldr	r1, [pc, #48]	; (80116fc <vQueueAddToRegistry+0x50>)
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	683a      	ldr	r2, [r7, #0]
 80116ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80116d2:	4a0a      	ldr	r2, [pc, #40]	; (80116fc <vQueueAddToRegistry+0x50>)
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	00db      	lsls	r3, r3, #3
 80116d8:	4413      	add	r3, r2
 80116da:	687a      	ldr	r2, [r7, #4]
 80116dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80116de:	e006      	b.n	80116ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	3301      	adds	r3, #1
 80116e4:	60fb      	str	r3, [r7, #12]
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	2b07      	cmp	r3, #7
 80116ea:	d9e7      	bls.n	80116bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80116ec:	bf00      	nop
 80116ee:	bf00      	nop
 80116f0:	3714      	adds	r7, #20
 80116f2:	46bd      	mov	sp, r7
 80116f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f8:	4770      	bx	lr
 80116fa:	bf00      	nop
 80116fc:	200064cc 	.word	0x200064cc

08011700 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011700:	b480      	push	{r7}
 8011702:	b085      	sub	sp, #20
 8011704:	af00      	add	r7, sp, #0
 8011706:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011708:	2300      	movs	r3, #0
 801170a:	60fb      	str	r3, [r7, #12]
 801170c:	e016      	b.n	801173c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801170e:	4a10      	ldr	r2, [pc, #64]	; (8011750 <vQueueUnregisterQueue+0x50>)
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	00db      	lsls	r3, r3, #3
 8011714:	4413      	add	r3, r2
 8011716:	685b      	ldr	r3, [r3, #4]
 8011718:	687a      	ldr	r2, [r7, #4]
 801171a:	429a      	cmp	r2, r3
 801171c:	d10b      	bne.n	8011736 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801171e:	4a0c      	ldr	r2, [pc, #48]	; (8011750 <vQueueUnregisterQueue+0x50>)
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	2100      	movs	r1, #0
 8011724:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011728:	4a09      	ldr	r2, [pc, #36]	; (8011750 <vQueueUnregisterQueue+0x50>)
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	00db      	lsls	r3, r3, #3
 801172e:	4413      	add	r3, r2
 8011730:	2200      	movs	r2, #0
 8011732:	605a      	str	r2, [r3, #4]
				break;
 8011734:	e006      	b.n	8011744 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	3301      	adds	r3, #1
 801173a:	60fb      	str	r3, [r7, #12]
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	2b07      	cmp	r3, #7
 8011740:	d9e5      	bls.n	801170e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8011742:	bf00      	nop
 8011744:	bf00      	nop
 8011746:	3714      	adds	r7, #20
 8011748:	46bd      	mov	sp, r7
 801174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174e:	4770      	bx	lr
 8011750:	200064cc 	.word	0x200064cc

08011754 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011754:	b580      	push	{r7, lr}
 8011756:	b084      	sub	sp, #16
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801175c:	2300      	movs	r3, #0
 801175e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d017      	beq.n	8011796 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011766:	4b13      	ldr	r3, [pc, #76]	; (80117b4 <vTaskDelay+0x60>)
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d00a      	beq.n	8011784 <vTaskDelay+0x30>
	__asm volatile
 801176e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011772:	f383 8811 	msr	BASEPRI, r3
 8011776:	f3bf 8f6f 	isb	sy
 801177a:	f3bf 8f4f 	dsb	sy
 801177e:	60bb      	str	r3, [r7, #8]
}
 8011780:	bf00      	nop
 8011782:	e7fe      	b.n	8011782 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011784:	f000 f81a 	bl	80117bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011788:	2100      	movs	r1, #0
 801178a:	6878      	ldr	r0, [r7, #4]
 801178c:	f000 fc96 	bl	80120bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011790:	f000 f822 	bl	80117d8 <xTaskResumeAll>
 8011794:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d107      	bne.n	80117ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801179c:	4b06      	ldr	r3, [pc, #24]	; (80117b8 <vTaskDelay+0x64>)
 801179e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117a2:	601a      	str	r2, [r3, #0]
 80117a4:	f3bf 8f4f 	dsb	sy
 80117a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80117ac:	bf00      	nop
 80117ae:	3710      	adds	r7, #16
 80117b0:	46bd      	mov	sp, r7
 80117b2:	bd80      	pop	{r7, pc}
 80117b4:	200008ac 	.word	0x200008ac
 80117b8:	e000ed04 	.word	0xe000ed04

080117bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80117bc:	b480      	push	{r7}
 80117be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80117c0:	4b04      	ldr	r3, [pc, #16]	; (80117d4 <vTaskSuspendAll+0x18>)
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	3301      	adds	r3, #1
 80117c6:	4a03      	ldr	r2, [pc, #12]	; (80117d4 <vTaskSuspendAll+0x18>)
 80117c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80117ca:	bf00      	nop
 80117cc:	46bd      	mov	sp, r7
 80117ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d2:	4770      	bx	lr
 80117d4:	200008ac 	.word	0x200008ac

080117d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b084      	sub	sp, #16
 80117dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80117de:	2300      	movs	r3, #0
 80117e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80117e2:	2300      	movs	r3, #0
 80117e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80117e6:	4b42      	ldr	r3, [pc, #264]	; (80118f0 <xTaskResumeAll+0x118>)
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d10a      	bne.n	8011804 <xTaskResumeAll+0x2c>
	__asm volatile
 80117ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117f2:	f383 8811 	msr	BASEPRI, r3
 80117f6:	f3bf 8f6f 	isb	sy
 80117fa:	f3bf 8f4f 	dsb	sy
 80117fe:	603b      	str	r3, [r7, #0]
}
 8011800:	bf00      	nop
 8011802:	e7fe      	b.n	8011802 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011804:	f000 fcc8 	bl	8012198 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011808:	4b39      	ldr	r3, [pc, #228]	; (80118f0 <xTaskResumeAll+0x118>)
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	3b01      	subs	r3, #1
 801180e:	4a38      	ldr	r2, [pc, #224]	; (80118f0 <xTaskResumeAll+0x118>)
 8011810:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011812:	4b37      	ldr	r3, [pc, #220]	; (80118f0 <xTaskResumeAll+0x118>)
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d162      	bne.n	80118e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801181a:	4b36      	ldr	r3, [pc, #216]	; (80118f4 <xTaskResumeAll+0x11c>)
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d05e      	beq.n	80118e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011822:	e02f      	b.n	8011884 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011824:	4b34      	ldr	r3, [pc, #208]	; (80118f8 <xTaskResumeAll+0x120>)
 8011826:	68db      	ldr	r3, [r3, #12]
 8011828:	68db      	ldr	r3, [r3, #12]
 801182a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	3318      	adds	r3, #24
 8011830:	4618      	mov	r0, r3
 8011832:	f7ff f904 	bl	8010a3e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	3304      	adds	r3, #4
 801183a:	4618      	mov	r0, r3
 801183c:	f7ff f8ff 	bl	8010a3e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011844:	4b2d      	ldr	r3, [pc, #180]	; (80118fc <xTaskResumeAll+0x124>)
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	429a      	cmp	r2, r3
 801184a:	d903      	bls.n	8011854 <xTaskResumeAll+0x7c>
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011850:	4a2a      	ldr	r2, [pc, #168]	; (80118fc <xTaskResumeAll+0x124>)
 8011852:	6013      	str	r3, [r2, #0]
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011858:	4613      	mov	r3, r2
 801185a:	009b      	lsls	r3, r3, #2
 801185c:	4413      	add	r3, r2
 801185e:	009b      	lsls	r3, r3, #2
 8011860:	4a27      	ldr	r2, [pc, #156]	; (8011900 <xTaskResumeAll+0x128>)
 8011862:	441a      	add	r2, r3
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	3304      	adds	r3, #4
 8011868:	4619      	mov	r1, r3
 801186a:	4610      	mov	r0, r2
 801186c:	f7ff f88a 	bl	8010984 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011874:	4b23      	ldr	r3, [pc, #140]	; (8011904 <xTaskResumeAll+0x12c>)
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801187a:	429a      	cmp	r2, r3
 801187c:	d302      	bcc.n	8011884 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801187e:	4b22      	ldr	r3, [pc, #136]	; (8011908 <xTaskResumeAll+0x130>)
 8011880:	2201      	movs	r2, #1
 8011882:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011884:	4b1c      	ldr	r3, [pc, #112]	; (80118f8 <xTaskResumeAll+0x120>)
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	2b00      	cmp	r3, #0
 801188a:	d1cb      	bne.n	8011824 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d001      	beq.n	8011896 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011892:	f000 fa69 	bl	8011d68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011896:	4b1d      	ldr	r3, [pc, #116]	; (801190c <xTaskResumeAll+0x134>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d010      	beq.n	80118c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80118a2:	f000 f837 	bl	8011914 <xTaskIncrementTick>
 80118a6:	4603      	mov	r3, r0
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d002      	beq.n	80118b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80118ac:	4b16      	ldr	r3, [pc, #88]	; (8011908 <xTaskResumeAll+0x130>)
 80118ae:	2201      	movs	r2, #1
 80118b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	3b01      	subs	r3, #1
 80118b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d1f1      	bne.n	80118a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80118be:	4b13      	ldr	r3, [pc, #76]	; (801190c <xTaskResumeAll+0x134>)
 80118c0:	2200      	movs	r2, #0
 80118c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80118c4:	4b10      	ldr	r3, [pc, #64]	; (8011908 <xTaskResumeAll+0x130>)
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d009      	beq.n	80118e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80118cc:	2301      	movs	r3, #1
 80118ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80118d0:	4b0f      	ldr	r3, [pc, #60]	; (8011910 <xTaskResumeAll+0x138>)
 80118d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118d6:	601a      	str	r2, [r3, #0]
 80118d8:	f3bf 8f4f 	dsb	sy
 80118dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80118e0:	f000 fc8a 	bl	80121f8 <vPortExitCritical>

	return xAlreadyYielded;
 80118e4:	68bb      	ldr	r3, [r7, #8]
}
 80118e6:	4618      	mov	r0, r3
 80118e8:	3710      	adds	r7, #16
 80118ea:	46bd      	mov	sp, r7
 80118ec:	bd80      	pop	{r7, pc}
 80118ee:	bf00      	nop
 80118f0:	200008ac 	.word	0x200008ac
 80118f4:	2000088c 	.word	0x2000088c
 80118f8:	20000864 	.word	0x20000864
 80118fc:	20000894 	.word	0x20000894
 8011900:	200003fc 	.word	0x200003fc
 8011904:	200003f8 	.word	0x200003f8
 8011908:	200008a0 	.word	0x200008a0
 801190c:	2000089c 	.word	0x2000089c
 8011910:	e000ed04 	.word	0xe000ed04

08011914 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b086      	sub	sp, #24
 8011918:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801191a:	2300      	movs	r3, #0
 801191c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801191e:	4b4f      	ldr	r3, [pc, #316]	; (8011a5c <xTaskIncrementTick+0x148>)
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	2b00      	cmp	r3, #0
 8011924:	f040 808f 	bne.w	8011a46 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011928:	4b4d      	ldr	r3, [pc, #308]	; (8011a60 <xTaskIncrementTick+0x14c>)
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	3301      	adds	r3, #1
 801192e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011930:	4a4b      	ldr	r2, [pc, #300]	; (8011a60 <xTaskIncrementTick+0x14c>)
 8011932:	693b      	ldr	r3, [r7, #16]
 8011934:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011936:	693b      	ldr	r3, [r7, #16]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d120      	bne.n	801197e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801193c:	4b49      	ldr	r3, [pc, #292]	; (8011a64 <xTaskIncrementTick+0x150>)
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d00a      	beq.n	801195c <xTaskIncrementTick+0x48>
	__asm volatile
 8011946:	f04f 0350 	mov.w	r3, #80	; 0x50
 801194a:	f383 8811 	msr	BASEPRI, r3
 801194e:	f3bf 8f6f 	isb	sy
 8011952:	f3bf 8f4f 	dsb	sy
 8011956:	603b      	str	r3, [r7, #0]
}
 8011958:	bf00      	nop
 801195a:	e7fe      	b.n	801195a <xTaskIncrementTick+0x46>
 801195c:	4b41      	ldr	r3, [pc, #260]	; (8011a64 <xTaskIncrementTick+0x150>)
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	60fb      	str	r3, [r7, #12]
 8011962:	4b41      	ldr	r3, [pc, #260]	; (8011a68 <xTaskIncrementTick+0x154>)
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	4a3f      	ldr	r2, [pc, #252]	; (8011a64 <xTaskIncrementTick+0x150>)
 8011968:	6013      	str	r3, [r2, #0]
 801196a:	4a3f      	ldr	r2, [pc, #252]	; (8011a68 <xTaskIncrementTick+0x154>)
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	6013      	str	r3, [r2, #0]
 8011970:	4b3e      	ldr	r3, [pc, #248]	; (8011a6c <xTaskIncrementTick+0x158>)
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	3301      	adds	r3, #1
 8011976:	4a3d      	ldr	r2, [pc, #244]	; (8011a6c <xTaskIncrementTick+0x158>)
 8011978:	6013      	str	r3, [r2, #0]
 801197a:	f000 f9f5 	bl	8011d68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801197e:	4b3c      	ldr	r3, [pc, #240]	; (8011a70 <xTaskIncrementTick+0x15c>)
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	693a      	ldr	r2, [r7, #16]
 8011984:	429a      	cmp	r2, r3
 8011986:	d349      	bcc.n	8011a1c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011988:	4b36      	ldr	r3, [pc, #216]	; (8011a64 <xTaskIncrementTick+0x150>)
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d104      	bne.n	801199c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011992:	4b37      	ldr	r3, [pc, #220]	; (8011a70 <xTaskIncrementTick+0x15c>)
 8011994:	f04f 32ff 	mov.w	r2, #4294967295
 8011998:	601a      	str	r2, [r3, #0]
					break;
 801199a:	e03f      	b.n	8011a1c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801199c:	4b31      	ldr	r3, [pc, #196]	; (8011a64 <xTaskIncrementTick+0x150>)
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	68db      	ldr	r3, [r3, #12]
 80119a2:	68db      	ldr	r3, [r3, #12]
 80119a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80119a6:	68bb      	ldr	r3, [r7, #8]
 80119a8:	685b      	ldr	r3, [r3, #4]
 80119aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80119ac:	693a      	ldr	r2, [r7, #16]
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	429a      	cmp	r2, r3
 80119b2:	d203      	bcs.n	80119bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80119b4:	4a2e      	ldr	r2, [pc, #184]	; (8011a70 <xTaskIncrementTick+0x15c>)
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80119ba:	e02f      	b.n	8011a1c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80119bc:	68bb      	ldr	r3, [r7, #8]
 80119be:	3304      	adds	r3, #4
 80119c0:	4618      	mov	r0, r3
 80119c2:	f7ff f83c 	bl	8010a3e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80119c6:	68bb      	ldr	r3, [r7, #8]
 80119c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d004      	beq.n	80119d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80119ce:	68bb      	ldr	r3, [r7, #8]
 80119d0:	3318      	adds	r3, #24
 80119d2:	4618      	mov	r0, r3
 80119d4:	f7ff f833 	bl	8010a3e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80119d8:	68bb      	ldr	r3, [r7, #8]
 80119da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119dc:	4b25      	ldr	r3, [pc, #148]	; (8011a74 <xTaskIncrementTick+0x160>)
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	429a      	cmp	r2, r3
 80119e2:	d903      	bls.n	80119ec <xTaskIncrementTick+0xd8>
 80119e4:	68bb      	ldr	r3, [r7, #8]
 80119e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119e8:	4a22      	ldr	r2, [pc, #136]	; (8011a74 <xTaskIncrementTick+0x160>)
 80119ea:	6013      	str	r3, [r2, #0]
 80119ec:	68bb      	ldr	r3, [r7, #8]
 80119ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119f0:	4613      	mov	r3, r2
 80119f2:	009b      	lsls	r3, r3, #2
 80119f4:	4413      	add	r3, r2
 80119f6:	009b      	lsls	r3, r3, #2
 80119f8:	4a1f      	ldr	r2, [pc, #124]	; (8011a78 <xTaskIncrementTick+0x164>)
 80119fa:	441a      	add	r2, r3
 80119fc:	68bb      	ldr	r3, [r7, #8]
 80119fe:	3304      	adds	r3, #4
 8011a00:	4619      	mov	r1, r3
 8011a02:	4610      	mov	r0, r2
 8011a04:	f7fe ffbe 	bl	8010984 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011a08:	68bb      	ldr	r3, [r7, #8]
 8011a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a0c:	4b1b      	ldr	r3, [pc, #108]	; (8011a7c <xTaskIncrementTick+0x168>)
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a12:	429a      	cmp	r2, r3
 8011a14:	d3b8      	bcc.n	8011988 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011a16:	2301      	movs	r3, #1
 8011a18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011a1a:	e7b5      	b.n	8011988 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011a1c:	4b17      	ldr	r3, [pc, #92]	; (8011a7c <xTaskIncrementTick+0x168>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a22:	4915      	ldr	r1, [pc, #84]	; (8011a78 <xTaskIncrementTick+0x164>)
 8011a24:	4613      	mov	r3, r2
 8011a26:	009b      	lsls	r3, r3, #2
 8011a28:	4413      	add	r3, r2
 8011a2a:	009b      	lsls	r3, r3, #2
 8011a2c:	440b      	add	r3, r1
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	2b01      	cmp	r3, #1
 8011a32:	d901      	bls.n	8011a38 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011a34:	2301      	movs	r3, #1
 8011a36:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011a38:	4b11      	ldr	r3, [pc, #68]	; (8011a80 <xTaskIncrementTick+0x16c>)
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d007      	beq.n	8011a50 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011a40:	2301      	movs	r3, #1
 8011a42:	617b      	str	r3, [r7, #20]
 8011a44:	e004      	b.n	8011a50 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011a46:	4b0f      	ldr	r3, [pc, #60]	; (8011a84 <xTaskIncrementTick+0x170>)
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	3301      	adds	r3, #1
 8011a4c:	4a0d      	ldr	r2, [pc, #52]	; (8011a84 <xTaskIncrementTick+0x170>)
 8011a4e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011a50:	697b      	ldr	r3, [r7, #20]
}
 8011a52:	4618      	mov	r0, r3
 8011a54:	3718      	adds	r7, #24
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bd80      	pop	{r7, pc}
 8011a5a:	bf00      	nop
 8011a5c:	200008ac 	.word	0x200008ac
 8011a60:	20000890 	.word	0x20000890
 8011a64:	2000085c 	.word	0x2000085c
 8011a68:	20000860 	.word	0x20000860
 8011a6c:	200008a4 	.word	0x200008a4
 8011a70:	200008a8 	.word	0x200008a8
 8011a74:	20000894 	.word	0x20000894
 8011a78:	200003fc 	.word	0x200003fc
 8011a7c:	200003f8 	.word	0x200003f8
 8011a80:	200008a0 	.word	0x200008a0
 8011a84:	2000089c 	.word	0x2000089c

08011a88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011a88:	b480      	push	{r7}
 8011a8a:	b085      	sub	sp, #20
 8011a8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011a8e:	4b2a      	ldr	r3, [pc, #168]	; (8011b38 <vTaskSwitchContext+0xb0>)
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d003      	beq.n	8011a9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011a96:	4b29      	ldr	r3, [pc, #164]	; (8011b3c <vTaskSwitchContext+0xb4>)
 8011a98:	2201      	movs	r2, #1
 8011a9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011a9c:	e046      	b.n	8011b2c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8011a9e:	4b27      	ldr	r3, [pc, #156]	; (8011b3c <vTaskSwitchContext+0xb4>)
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011aa4:	4b26      	ldr	r3, [pc, #152]	; (8011b40 <vTaskSwitchContext+0xb8>)
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	60fb      	str	r3, [r7, #12]
 8011aaa:	e010      	b.n	8011ace <vTaskSwitchContext+0x46>
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d10a      	bne.n	8011ac8 <vTaskSwitchContext+0x40>
	__asm volatile
 8011ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ab6:	f383 8811 	msr	BASEPRI, r3
 8011aba:	f3bf 8f6f 	isb	sy
 8011abe:	f3bf 8f4f 	dsb	sy
 8011ac2:	607b      	str	r3, [r7, #4]
}
 8011ac4:	bf00      	nop
 8011ac6:	e7fe      	b.n	8011ac6 <vTaskSwitchContext+0x3e>
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	3b01      	subs	r3, #1
 8011acc:	60fb      	str	r3, [r7, #12]
 8011ace:	491d      	ldr	r1, [pc, #116]	; (8011b44 <vTaskSwitchContext+0xbc>)
 8011ad0:	68fa      	ldr	r2, [r7, #12]
 8011ad2:	4613      	mov	r3, r2
 8011ad4:	009b      	lsls	r3, r3, #2
 8011ad6:	4413      	add	r3, r2
 8011ad8:	009b      	lsls	r3, r3, #2
 8011ada:	440b      	add	r3, r1
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d0e4      	beq.n	8011aac <vTaskSwitchContext+0x24>
 8011ae2:	68fa      	ldr	r2, [r7, #12]
 8011ae4:	4613      	mov	r3, r2
 8011ae6:	009b      	lsls	r3, r3, #2
 8011ae8:	4413      	add	r3, r2
 8011aea:	009b      	lsls	r3, r3, #2
 8011aec:	4a15      	ldr	r2, [pc, #84]	; (8011b44 <vTaskSwitchContext+0xbc>)
 8011aee:	4413      	add	r3, r2
 8011af0:	60bb      	str	r3, [r7, #8]
 8011af2:	68bb      	ldr	r3, [r7, #8]
 8011af4:	685b      	ldr	r3, [r3, #4]
 8011af6:	685a      	ldr	r2, [r3, #4]
 8011af8:	68bb      	ldr	r3, [r7, #8]
 8011afa:	605a      	str	r2, [r3, #4]
 8011afc:	68bb      	ldr	r3, [r7, #8]
 8011afe:	685a      	ldr	r2, [r3, #4]
 8011b00:	68bb      	ldr	r3, [r7, #8]
 8011b02:	3308      	adds	r3, #8
 8011b04:	429a      	cmp	r2, r3
 8011b06:	d104      	bne.n	8011b12 <vTaskSwitchContext+0x8a>
 8011b08:	68bb      	ldr	r3, [r7, #8]
 8011b0a:	685b      	ldr	r3, [r3, #4]
 8011b0c:	685a      	ldr	r2, [r3, #4]
 8011b0e:	68bb      	ldr	r3, [r7, #8]
 8011b10:	605a      	str	r2, [r3, #4]
 8011b12:	68bb      	ldr	r3, [r7, #8]
 8011b14:	685b      	ldr	r3, [r3, #4]
 8011b16:	68db      	ldr	r3, [r3, #12]
 8011b18:	4a0b      	ldr	r2, [pc, #44]	; (8011b48 <vTaskSwitchContext+0xc0>)
 8011b1a:	6013      	str	r3, [r2, #0]
 8011b1c:	4a08      	ldr	r2, [pc, #32]	; (8011b40 <vTaskSwitchContext+0xb8>)
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011b22:	4b09      	ldr	r3, [pc, #36]	; (8011b48 <vTaskSwitchContext+0xc0>)
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	3354      	adds	r3, #84	; 0x54
 8011b28:	4a08      	ldr	r2, [pc, #32]	; (8011b4c <vTaskSwitchContext+0xc4>)
 8011b2a:	6013      	str	r3, [r2, #0]
}
 8011b2c:	bf00      	nop
 8011b2e:	3714      	adds	r7, #20
 8011b30:	46bd      	mov	sp, r7
 8011b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b36:	4770      	bx	lr
 8011b38:	200008ac 	.word	0x200008ac
 8011b3c:	200008a0 	.word	0x200008a0
 8011b40:	20000894 	.word	0x20000894
 8011b44:	200003fc 	.word	0x200003fc
 8011b48:	200003f8 	.word	0x200003f8
 8011b4c:	20000080 	.word	0x20000080

08011b50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b084      	sub	sp, #16
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
 8011b58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d10a      	bne.n	8011b76 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b64:	f383 8811 	msr	BASEPRI, r3
 8011b68:	f3bf 8f6f 	isb	sy
 8011b6c:	f3bf 8f4f 	dsb	sy
 8011b70:	60fb      	str	r3, [r7, #12]
}
 8011b72:	bf00      	nop
 8011b74:	e7fe      	b.n	8011b74 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011b76:	4b07      	ldr	r3, [pc, #28]	; (8011b94 <vTaskPlaceOnEventList+0x44>)
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	3318      	adds	r3, #24
 8011b7c:	4619      	mov	r1, r3
 8011b7e:	6878      	ldr	r0, [r7, #4]
 8011b80:	f7fe ff24 	bl	80109cc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011b84:	2101      	movs	r1, #1
 8011b86:	6838      	ldr	r0, [r7, #0]
 8011b88:	f000 fa98 	bl	80120bc <prvAddCurrentTaskToDelayedList>
}
 8011b8c:	bf00      	nop
 8011b8e:	3710      	adds	r7, #16
 8011b90:	46bd      	mov	sp, r7
 8011b92:	bd80      	pop	{r7, pc}
 8011b94:	200003f8 	.word	0x200003f8

08011b98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011b98:	b580      	push	{r7, lr}
 8011b9a:	b086      	sub	sp, #24
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	68db      	ldr	r3, [r3, #12]
 8011ba4:	68db      	ldr	r3, [r3, #12]
 8011ba6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011ba8:	693b      	ldr	r3, [r7, #16]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d10a      	bne.n	8011bc4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bb2:	f383 8811 	msr	BASEPRI, r3
 8011bb6:	f3bf 8f6f 	isb	sy
 8011bba:	f3bf 8f4f 	dsb	sy
 8011bbe:	60fb      	str	r3, [r7, #12]
}
 8011bc0:	bf00      	nop
 8011bc2:	e7fe      	b.n	8011bc2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011bc4:	693b      	ldr	r3, [r7, #16]
 8011bc6:	3318      	adds	r3, #24
 8011bc8:	4618      	mov	r0, r3
 8011bca:	f7fe ff38 	bl	8010a3e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011bce:	4b1e      	ldr	r3, [pc, #120]	; (8011c48 <xTaskRemoveFromEventList+0xb0>)
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d11d      	bne.n	8011c12 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011bd6:	693b      	ldr	r3, [r7, #16]
 8011bd8:	3304      	adds	r3, #4
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f7fe ff2f 	bl	8010a3e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011be0:	693b      	ldr	r3, [r7, #16]
 8011be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011be4:	4b19      	ldr	r3, [pc, #100]	; (8011c4c <xTaskRemoveFromEventList+0xb4>)
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	429a      	cmp	r2, r3
 8011bea:	d903      	bls.n	8011bf4 <xTaskRemoveFromEventList+0x5c>
 8011bec:	693b      	ldr	r3, [r7, #16]
 8011bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bf0:	4a16      	ldr	r2, [pc, #88]	; (8011c4c <xTaskRemoveFromEventList+0xb4>)
 8011bf2:	6013      	str	r3, [r2, #0]
 8011bf4:	693b      	ldr	r3, [r7, #16]
 8011bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bf8:	4613      	mov	r3, r2
 8011bfa:	009b      	lsls	r3, r3, #2
 8011bfc:	4413      	add	r3, r2
 8011bfe:	009b      	lsls	r3, r3, #2
 8011c00:	4a13      	ldr	r2, [pc, #76]	; (8011c50 <xTaskRemoveFromEventList+0xb8>)
 8011c02:	441a      	add	r2, r3
 8011c04:	693b      	ldr	r3, [r7, #16]
 8011c06:	3304      	adds	r3, #4
 8011c08:	4619      	mov	r1, r3
 8011c0a:	4610      	mov	r0, r2
 8011c0c:	f7fe feba 	bl	8010984 <vListInsertEnd>
 8011c10:	e005      	b.n	8011c1e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011c12:	693b      	ldr	r3, [r7, #16]
 8011c14:	3318      	adds	r3, #24
 8011c16:	4619      	mov	r1, r3
 8011c18:	480e      	ldr	r0, [pc, #56]	; (8011c54 <xTaskRemoveFromEventList+0xbc>)
 8011c1a:	f7fe feb3 	bl	8010984 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011c1e:	693b      	ldr	r3, [r7, #16]
 8011c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c22:	4b0d      	ldr	r3, [pc, #52]	; (8011c58 <xTaskRemoveFromEventList+0xc0>)
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c28:	429a      	cmp	r2, r3
 8011c2a:	d905      	bls.n	8011c38 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011c2c:	2301      	movs	r3, #1
 8011c2e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011c30:	4b0a      	ldr	r3, [pc, #40]	; (8011c5c <xTaskRemoveFromEventList+0xc4>)
 8011c32:	2201      	movs	r2, #1
 8011c34:	601a      	str	r2, [r3, #0]
 8011c36:	e001      	b.n	8011c3c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011c38:	2300      	movs	r3, #0
 8011c3a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011c3c:	697b      	ldr	r3, [r7, #20]
}
 8011c3e:	4618      	mov	r0, r3
 8011c40:	3718      	adds	r7, #24
 8011c42:	46bd      	mov	sp, r7
 8011c44:	bd80      	pop	{r7, pc}
 8011c46:	bf00      	nop
 8011c48:	200008ac 	.word	0x200008ac
 8011c4c:	20000894 	.word	0x20000894
 8011c50:	200003fc 	.word	0x200003fc
 8011c54:	20000864 	.word	0x20000864
 8011c58:	200003f8 	.word	0x200003f8
 8011c5c:	200008a0 	.word	0x200008a0

08011c60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011c60:	b480      	push	{r7}
 8011c62:	b083      	sub	sp, #12
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011c68:	4b06      	ldr	r3, [pc, #24]	; (8011c84 <vTaskInternalSetTimeOutState+0x24>)
 8011c6a:	681a      	ldr	r2, [r3, #0]
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011c70:	4b05      	ldr	r3, [pc, #20]	; (8011c88 <vTaskInternalSetTimeOutState+0x28>)
 8011c72:	681a      	ldr	r2, [r3, #0]
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	605a      	str	r2, [r3, #4]
}
 8011c78:	bf00      	nop
 8011c7a:	370c      	adds	r7, #12
 8011c7c:	46bd      	mov	sp, r7
 8011c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c82:	4770      	bx	lr
 8011c84:	200008a4 	.word	0x200008a4
 8011c88:	20000890 	.word	0x20000890

08011c8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b088      	sub	sp, #32
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
 8011c94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d10a      	bne.n	8011cb2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ca0:	f383 8811 	msr	BASEPRI, r3
 8011ca4:	f3bf 8f6f 	isb	sy
 8011ca8:	f3bf 8f4f 	dsb	sy
 8011cac:	613b      	str	r3, [r7, #16]
}
 8011cae:	bf00      	nop
 8011cb0:	e7fe      	b.n	8011cb0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011cb2:	683b      	ldr	r3, [r7, #0]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d10a      	bne.n	8011cce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cbc:	f383 8811 	msr	BASEPRI, r3
 8011cc0:	f3bf 8f6f 	isb	sy
 8011cc4:	f3bf 8f4f 	dsb	sy
 8011cc8:	60fb      	str	r3, [r7, #12]
}
 8011cca:	bf00      	nop
 8011ccc:	e7fe      	b.n	8011ccc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011cce:	f000 fa63 	bl	8012198 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011cd2:	4b1d      	ldr	r3, [pc, #116]	; (8011d48 <xTaskCheckForTimeOut+0xbc>)
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	685b      	ldr	r3, [r3, #4]
 8011cdc:	69ba      	ldr	r2, [r7, #24]
 8011cde:	1ad3      	subs	r3, r2, r3
 8011ce0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011ce2:	683b      	ldr	r3, [r7, #0]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cea:	d102      	bne.n	8011cf2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011cec:	2300      	movs	r3, #0
 8011cee:	61fb      	str	r3, [r7, #28]
 8011cf0:	e023      	b.n	8011d3a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	681a      	ldr	r2, [r3, #0]
 8011cf6:	4b15      	ldr	r3, [pc, #84]	; (8011d4c <xTaskCheckForTimeOut+0xc0>)
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	429a      	cmp	r2, r3
 8011cfc:	d007      	beq.n	8011d0e <xTaskCheckForTimeOut+0x82>
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	685b      	ldr	r3, [r3, #4]
 8011d02:	69ba      	ldr	r2, [r7, #24]
 8011d04:	429a      	cmp	r2, r3
 8011d06:	d302      	bcc.n	8011d0e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011d08:	2301      	movs	r3, #1
 8011d0a:	61fb      	str	r3, [r7, #28]
 8011d0c:	e015      	b.n	8011d3a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011d0e:	683b      	ldr	r3, [r7, #0]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	697a      	ldr	r2, [r7, #20]
 8011d14:	429a      	cmp	r2, r3
 8011d16:	d20b      	bcs.n	8011d30 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011d18:	683b      	ldr	r3, [r7, #0]
 8011d1a:	681a      	ldr	r2, [r3, #0]
 8011d1c:	697b      	ldr	r3, [r7, #20]
 8011d1e:	1ad2      	subs	r2, r2, r3
 8011d20:	683b      	ldr	r3, [r7, #0]
 8011d22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011d24:	6878      	ldr	r0, [r7, #4]
 8011d26:	f7ff ff9b 	bl	8011c60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	61fb      	str	r3, [r7, #28]
 8011d2e:	e004      	b.n	8011d3a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011d30:	683b      	ldr	r3, [r7, #0]
 8011d32:	2200      	movs	r2, #0
 8011d34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011d36:	2301      	movs	r3, #1
 8011d38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011d3a:	f000 fa5d 	bl	80121f8 <vPortExitCritical>

	return xReturn;
 8011d3e:	69fb      	ldr	r3, [r7, #28]
}
 8011d40:	4618      	mov	r0, r3
 8011d42:	3720      	adds	r7, #32
 8011d44:	46bd      	mov	sp, r7
 8011d46:	bd80      	pop	{r7, pc}
 8011d48:	20000890 	.word	0x20000890
 8011d4c:	200008a4 	.word	0x200008a4

08011d50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011d50:	b480      	push	{r7}
 8011d52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011d54:	4b03      	ldr	r3, [pc, #12]	; (8011d64 <vTaskMissedYield+0x14>)
 8011d56:	2201      	movs	r2, #1
 8011d58:	601a      	str	r2, [r3, #0]
}
 8011d5a:	bf00      	nop
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d62:	4770      	bx	lr
 8011d64:	200008a0 	.word	0x200008a0

08011d68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011d68:	b480      	push	{r7}
 8011d6a:	b083      	sub	sp, #12
 8011d6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011d6e:	4b0c      	ldr	r3, [pc, #48]	; (8011da0 <prvResetNextTaskUnblockTime+0x38>)
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d104      	bne.n	8011d82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011d78:	4b0a      	ldr	r3, [pc, #40]	; (8011da4 <prvResetNextTaskUnblockTime+0x3c>)
 8011d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8011d7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011d80:	e008      	b.n	8011d94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d82:	4b07      	ldr	r3, [pc, #28]	; (8011da0 <prvResetNextTaskUnblockTime+0x38>)
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	68db      	ldr	r3, [r3, #12]
 8011d88:	68db      	ldr	r3, [r3, #12]
 8011d8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	685b      	ldr	r3, [r3, #4]
 8011d90:	4a04      	ldr	r2, [pc, #16]	; (8011da4 <prvResetNextTaskUnblockTime+0x3c>)
 8011d92:	6013      	str	r3, [r2, #0]
}
 8011d94:	bf00      	nop
 8011d96:	370c      	adds	r7, #12
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9e:	4770      	bx	lr
 8011da0:	2000085c 	.word	0x2000085c
 8011da4:	200008a8 	.word	0x200008a8

08011da8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011da8:	b480      	push	{r7}
 8011daa:	b083      	sub	sp, #12
 8011dac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011dae:	4b0b      	ldr	r3, [pc, #44]	; (8011ddc <xTaskGetSchedulerState+0x34>)
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d102      	bne.n	8011dbc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011db6:	2301      	movs	r3, #1
 8011db8:	607b      	str	r3, [r7, #4]
 8011dba:	e008      	b.n	8011dce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011dbc:	4b08      	ldr	r3, [pc, #32]	; (8011de0 <xTaskGetSchedulerState+0x38>)
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d102      	bne.n	8011dca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011dc4:	2302      	movs	r3, #2
 8011dc6:	607b      	str	r3, [r7, #4]
 8011dc8:	e001      	b.n	8011dce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011dca:	2300      	movs	r3, #0
 8011dcc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011dce:	687b      	ldr	r3, [r7, #4]
	}
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	370c      	adds	r7, #12
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dda:	4770      	bx	lr
 8011ddc:	20000898 	.word	0x20000898
 8011de0:	200008ac 	.word	0x200008ac

08011de4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b084      	sub	sp, #16
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011df0:	2300      	movs	r3, #0
 8011df2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d051      	beq.n	8011e9e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011dfa:	68bb      	ldr	r3, [r7, #8]
 8011dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dfe:	4b2a      	ldr	r3, [pc, #168]	; (8011ea8 <xTaskPriorityInherit+0xc4>)
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e04:	429a      	cmp	r2, r3
 8011e06:	d241      	bcs.n	8011e8c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011e08:	68bb      	ldr	r3, [r7, #8]
 8011e0a:	699b      	ldr	r3, [r3, #24]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	db06      	blt.n	8011e1e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e10:	4b25      	ldr	r3, [pc, #148]	; (8011ea8 <xTaskPriorityInherit+0xc4>)
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011e1a:	68bb      	ldr	r3, [r7, #8]
 8011e1c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011e1e:	68bb      	ldr	r3, [r7, #8]
 8011e20:	6959      	ldr	r1, [r3, #20]
 8011e22:	68bb      	ldr	r3, [r7, #8]
 8011e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e26:	4613      	mov	r3, r2
 8011e28:	009b      	lsls	r3, r3, #2
 8011e2a:	4413      	add	r3, r2
 8011e2c:	009b      	lsls	r3, r3, #2
 8011e2e:	4a1f      	ldr	r2, [pc, #124]	; (8011eac <xTaskPriorityInherit+0xc8>)
 8011e30:	4413      	add	r3, r2
 8011e32:	4299      	cmp	r1, r3
 8011e34:	d122      	bne.n	8011e7c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011e36:	68bb      	ldr	r3, [r7, #8]
 8011e38:	3304      	adds	r3, #4
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f7fe fdff 	bl	8010a3e <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011e40:	4b19      	ldr	r3, [pc, #100]	; (8011ea8 <xTaskPriorityInherit+0xc4>)
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e46:	68bb      	ldr	r3, [r7, #8]
 8011e48:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011e4a:	68bb      	ldr	r3, [r7, #8]
 8011e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e4e:	4b18      	ldr	r3, [pc, #96]	; (8011eb0 <xTaskPriorityInherit+0xcc>)
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	429a      	cmp	r2, r3
 8011e54:	d903      	bls.n	8011e5e <xTaskPriorityInherit+0x7a>
 8011e56:	68bb      	ldr	r3, [r7, #8]
 8011e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e5a:	4a15      	ldr	r2, [pc, #84]	; (8011eb0 <xTaskPriorityInherit+0xcc>)
 8011e5c:	6013      	str	r3, [r2, #0]
 8011e5e:	68bb      	ldr	r3, [r7, #8]
 8011e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e62:	4613      	mov	r3, r2
 8011e64:	009b      	lsls	r3, r3, #2
 8011e66:	4413      	add	r3, r2
 8011e68:	009b      	lsls	r3, r3, #2
 8011e6a:	4a10      	ldr	r2, [pc, #64]	; (8011eac <xTaskPriorityInherit+0xc8>)
 8011e6c:	441a      	add	r2, r3
 8011e6e:	68bb      	ldr	r3, [r7, #8]
 8011e70:	3304      	adds	r3, #4
 8011e72:	4619      	mov	r1, r3
 8011e74:	4610      	mov	r0, r2
 8011e76:	f7fe fd85 	bl	8010984 <vListInsertEnd>
 8011e7a:	e004      	b.n	8011e86 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011e7c:	4b0a      	ldr	r3, [pc, #40]	; (8011ea8 <xTaskPriorityInherit+0xc4>)
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e82:	68bb      	ldr	r3, [r7, #8]
 8011e84:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011e86:	2301      	movs	r3, #1
 8011e88:	60fb      	str	r3, [r7, #12]
 8011e8a:	e008      	b.n	8011e9e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011e8c:	68bb      	ldr	r3, [r7, #8]
 8011e8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011e90:	4b05      	ldr	r3, [pc, #20]	; (8011ea8 <xTaskPriorityInherit+0xc4>)
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e96:	429a      	cmp	r2, r3
 8011e98:	d201      	bcs.n	8011e9e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011e9a:	2301      	movs	r3, #1
 8011e9c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011e9e:	68fb      	ldr	r3, [r7, #12]
	}
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	3710      	adds	r7, #16
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	bd80      	pop	{r7, pc}
 8011ea8:	200003f8 	.word	0x200003f8
 8011eac:	200003fc 	.word	0x200003fc
 8011eb0:	20000894 	.word	0x20000894

08011eb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b086      	sub	sp, #24
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d056      	beq.n	8011f78 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011eca:	4b2e      	ldr	r3, [pc, #184]	; (8011f84 <xTaskPriorityDisinherit+0xd0>)
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	693a      	ldr	r2, [r7, #16]
 8011ed0:	429a      	cmp	r2, r3
 8011ed2:	d00a      	beq.n	8011eea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ed8:	f383 8811 	msr	BASEPRI, r3
 8011edc:	f3bf 8f6f 	isb	sy
 8011ee0:	f3bf 8f4f 	dsb	sy
 8011ee4:	60fb      	str	r3, [r7, #12]
}
 8011ee6:	bf00      	nop
 8011ee8:	e7fe      	b.n	8011ee8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011eea:	693b      	ldr	r3, [r7, #16]
 8011eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d10a      	bne.n	8011f08 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ef6:	f383 8811 	msr	BASEPRI, r3
 8011efa:	f3bf 8f6f 	isb	sy
 8011efe:	f3bf 8f4f 	dsb	sy
 8011f02:	60bb      	str	r3, [r7, #8]
}
 8011f04:	bf00      	nop
 8011f06:	e7fe      	b.n	8011f06 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011f08:	693b      	ldr	r3, [r7, #16]
 8011f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f0c:	1e5a      	subs	r2, r3, #1
 8011f0e:	693b      	ldr	r3, [r7, #16]
 8011f10:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011f12:	693b      	ldr	r3, [r7, #16]
 8011f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f16:	693b      	ldr	r3, [r7, #16]
 8011f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011f1a:	429a      	cmp	r2, r3
 8011f1c:	d02c      	beq.n	8011f78 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011f1e:	693b      	ldr	r3, [r7, #16]
 8011f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d128      	bne.n	8011f78 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011f26:	693b      	ldr	r3, [r7, #16]
 8011f28:	3304      	adds	r3, #4
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	f7fe fd87 	bl	8010a3e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011f30:	693b      	ldr	r3, [r7, #16]
 8011f32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011f34:	693b      	ldr	r3, [r7, #16]
 8011f36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011f38:	693b      	ldr	r3, [r7, #16]
 8011f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011f40:	693b      	ldr	r3, [r7, #16]
 8011f42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011f44:	693b      	ldr	r3, [r7, #16]
 8011f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f48:	4b0f      	ldr	r3, [pc, #60]	; (8011f88 <xTaskPriorityDisinherit+0xd4>)
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	429a      	cmp	r2, r3
 8011f4e:	d903      	bls.n	8011f58 <xTaskPriorityDisinherit+0xa4>
 8011f50:	693b      	ldr	r3, [r7, #16]
 8011f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f54:	4a0c      	ldr	r2, [pc, #48]	; (8011f88 <xTaskPriorityDisinherit+0xd4>)
 8011f56:	6013      	str	r3, [r2, #0]
 8011f58:	693b      	ldr	r3, [r7, #16]
 8011f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f5c:	4613      	mov	r3, r2
 8011f5e:	009b      	lsls	r3, r3, #2
 8011f60:	4413      	add	r3, r2
 8011f62:	009b      	lsls	r3, r3, #2
 8011f64:	4a09      	ldr	r2, [pc, #36]	; (8011f8c <xTaskPriorityDisinherit+0xd8>)
 8011f66:	441a      	add	r2, r3
 8011f68:	693b      	ldr	r3, [r7, #16]
 8011f6a:	3304      	adds	r3, #4
 8011f6c:	4619      	mov	r1, r3
 8011f6e:	4610      	mov	r0, r2
 8011f70:	f7fe fd08 	bl	8010984 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011f74:	2301      	movs	r3, #1
 8011f76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011f78:	697b      	ldr	r3, [r7, #20]
	}
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	3718      	adds	r7, #24
 8011f7e:	46bd      	mov	sp, r7
 8011f80:	bd80      	pop	{r7, pc}
 8011f82:	bf00      	nop
 8011f84:	200003f8 	.word	0x200003f8
 8011f88:	20000894 	.word	0x20000894
 8011f8c:	200003fc 	.word	0x200003fc

08011f90 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b088      	sub	sp, #32
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
 8011f98:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011f9e:	2301      	movs	r3, #1
 8011fa0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d06a      	beq.n	801207e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011fa8:	69bb      	ldr	r3, [r7, #24]
 8011faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d10a      	bne.n	8011fc6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8011fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fb4:	f383 8811 	msr	BASEPRI, r3
 8011fb8:	f3bf 8f6f 	isb	sy
 8011fbc:	f3bf 8f4f 	dsb	sy
 8011fc0:	60fb      	str	r3, [r7, #12]
}
 8011fc2:	bf00      	nop
 8011fc4:	e7fe      	b.n	8011fc4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011fc6:	69bb      	ldr	r3, [r7, #24]
 8011fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011fca:	683a      	ldr	r2, [r7, #0]
 8011fcc:	429a      	cmp	r2, r3
 8011fce:	d902      	bls.n	8011fd6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011fd0:	683b      	ldr	r3, [r7, #0]
 8011fd2:	61fb      	str	r3, [r7, #28]
 8011fd4:	e002      	b.n	8011fdc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011fd6:	69bb      	ldr	r3, [r7, #24]
 8011fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011fda:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011fdc:	69bb      	ldr	r3, [r7, #24]
 8011fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fe0:	69fa      	ldr	r2, [r7, #28]
 8011fe2:	429a      	cmp	r2, r3
 8011fe4:	d04b      	beq.n	801207e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011fe6:	69bb      	ldr	r3, [r7, #24]
 8011fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011fea:	697a      	ldr	r2, [r7, #20]
 8011fec:	429a      	cmp	r2, r3
 8011fee:	d146      	bne.n	801207e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011ff0:	4b25      	ldr	r3, [pc, #148]	; (8012088 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	69ba      	ldr	r2, [r7, #24]
 8011ff6:	429a      	cmp	r2, r3
 8011ff8:	d10a      	bne.n	8012010 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8011ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ffe:	f383 8811 	msr	BASEPRI, r3
 8012002:	f3bf 8f6f 	isb	sy
 8012006:	f3bf 8f4f 	dsb	sy
 801200a:	60bb      	str	r3, [r7, #8]
}
 801200c:	bf00      	nop
 801200e:	e7fe      	b.n	801200e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012010:	69bb      	ldr	r3, [r7, #24]
 8012012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012014:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012016:	69bb      	ldr	r3, [r7, #24]
 8012018:	69fa      	ldr	r2, [r7, #28]
 801201a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801201c:	69bb      	ldr	r3, [r7, #24]
 801201e:	699b      	ldr	r3, [r3, #24]
 8012020:	2b00      	cmp	r3, #0
 8012022:	db04      	blt.n	801202e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012024:	69fb      	ldr	r3, [r7, #28]
 8012026:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801202a:	69bb      	ldr	r3, [r7, #24]
 801202c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801202e:	69bb      	ldr	r3, [r7, #24]
 8012030:	6959      	ldr	r1, [r3, #20]
 8012032:	693a      	ldr	r2, [r7, #16]
 8012034:	4613      	mov	r3, r2
 8012036:	009b      	lsls	r3, r3, #2
 8012038:	4413      	add	r3, r2
 801203a:	009b      	lsls	r3, r3, #2
 801203c:	4a13      	ldr	r2, [pc, #76]	; (801208c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801203e:	4413      	add	r3, r2
 8012040:	4299      	cmp	r1, r3
 8012042:	d11c      	bne.n	801207e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012044:	69bb      	ldr	r3, [r7, #24]
 8012046:	3304      	adds	r3, #4
 8012048:	4618      	mov	r0, r3
 801204a:	f7fe fcf8 	bl	8010a3e <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801204e:	69bb      	ldr	r3, [r7, #24]
 8012050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012052:	4b0f      	ldr	r3, [pc, #60]	; (8012090 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	429a      	cmp	r2, r3
 8012058:	d903      	bls.n	8012062 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801205a:	69bb      	ldr	r3, [r7, #24]
 801205c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801205e:	4a0c      	ldr	r2, [pc, #48]	; (8012090 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012060:	6013      	str	r3, [r2, #0]
 8012062:	69bb      	ldr	r3, [r7, #24]
 8012064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012066:	4613      	mov	r3, r2
 8012068:	009b      	lsls	r3, r3, #2
 801206a:	4413      	add	r3, r2
 801206c:	009b      	lsls	r3, r3, #2
 801206e:	4a07      	ldr	r2, [pc, #28]	; (801208c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012070:	441a      	add	r2, r3
 8012072:	69bb      	ldr	r3, [r7, #24]
 8012074:	3304      	adds	r3, #4
 8012076:	4619      	mov	r1, r3
 8012078:	4610      	mov	r0, r2
 801207a:	f7fe fc83 	bl	8010984 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801207e:	bf00      	nop
 8012080:	3720      	adds	r7, #32
 8012082:	46bd      	mov	sp, r7
 8012084:	bd80      	pop	{r7, pc}
 8012086:	bf00      	nop
 8012088:	200003f8 	.word	0x200003f8
 801208c:	200003fc 	.word	0x200003fc
 8012090:	20000894 	.word	0x20000894

08012094 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012094:	b480      	push	{r7}
 8012096:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012098:	4b07      	ldr	r3, [pc, #28]	; (80120b8 <pvTaskIncrementMutexHeldCount+0x24>)
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d004      	beq.n	80120aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80120a0:	4b05      	ldr	r3, [pc, #20]	; (80120b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80120a6:	3201      	adds	r2, #1
 80120a8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80120aa:	4b03      	ldr	r3, [pc, #12]	; (80120b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80120ac:	681b      	ldr	r3, [r3, #0]
	}
 80120ae:	4618      	mov	r0, r3
 80120b0:	46bd      	mov	sp, r7
 80120b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b6:	4770      	bx	lr
 80120b8:	200003f8 	.word	0x200003f8

080120bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b084      	sub	sp, #16
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
 80120c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80120c6:	4b21      	ldr	r3, [pc, #132]	; (801214c <prvAddCurrentTaskToDelayedList+0x90>)
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80120cc:	4b20      	ldr	r3, [pc, #128]	; (8012150 <prvAddCurrentTaskToDelayedList+0x94>)
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	3304      	adds	r3, #4
 80120d2:	4618      	mov	r0, r3
 80120d4:	f7fe fcb3 	bl	8010a3e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120de:	d10a      	bne.n	80120f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80120e0:	683b      	ldr	r3, [r7, #0]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d007      	beq.n	80120f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80120e6:	4b1a      	ldr	r3, [pc, #104]	; (8012150 <prvAddCurrentTaskToDelayedList+0x94>)
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	3304      	adds	r3, #4
 80120ec:	4619      	mov	r1, r3
 80120ee:	4819      	ldr	r0, [pc, #100]	; (8012154 <prvAddCurrentTaskToDelayedList+0x98>)
 80120f0:	f7fe fc48 	bl	8010984 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80120f4:	e026      	b.n	8012144 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80120f6:	68fa      	ldr	r2, [r7, #12]
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	4413      	add	r3, r2
 80120fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80120fe:	4b14      	ldr	r3, [pc, #80]	; (8012150 <prvAddCurrentTaskToDelayedList+0x94>)
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	68ba      	ldr	r2, [r7, #8]
 8012104:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012106:	68ba      	ldr	r2, [r7, #8]
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	429a      	cmp	r2, r3
 801210c:	d209      	bcs.n	8012122 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801210e:	4b12      	ldr	r3, [pc, #72]	; (8012158 <prvAddCurrentTaskToDelayedList+0x9c>)
 8012110:	681a      	ldr	r2, [r3, #0]
 8012112:	4b0f      	ldr	r3, [pc, #60]	; (8012150 <prvAddCurrentTaskToDelayedList+0x94>)
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	3304      	adds	r3, #4
 8012118:	4619      	mov	r1, r3
 801211a:	4610      	mov	r0, r2
 801211c:	f7fe fc56 	bl	80109cc <vListInsert>
}
 8012120:	e010      	b.n	8012144 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012122:	4b0e      	ldr	r3, [pc, #56]	; (801215c <prvAddCurrentTaskToDelayedList+0xa0>)
 8012124:	681a      	ldr	r2, [r3, #0]
 8012126:	4b0a      	ldr	r3, [pc, #40]	; (8012150 <prvAddCurrentTaskToDelayedList+0x94>)
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	3304      	adds	r3, #4
 801212c:	4619      	mov	r1, r3
 801212e:	4610      	mov	r0, r2
 8012130:	f7fe fc4c 	bl	80109cc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012134:	4b0a      	ldr	r3, [pc, #40]	; (8012160 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	68ba      	ldr	r2, [r7, #8]
 801213a:	429a      	cmp	r2, r3
 801213c:	d202      	bcs.n	8012144 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801213e:	4a08      	ldr	r2, [pc, #32]	; (8012160 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012140:	68bb      	ldr	r3, [r7, #8]
 8012142:	6013      	str	r3, [r2, #0]
}
 8012144:	bf00      	nop
 8012146:	3710      	adds	r7, #16
 8012148:	46bd      	mov	sp, r7
 801214a:	bd80      	pop	{r7, pc}
 801214c:	20000890 	.word	0x20000890
 8012150:	200003f8 	.word	0x200003f8
 8012154:	20000878 	.word	0x20000878
 8012158:	20000860 	.word	0x20000860
 801215c:	2000085c 	.word	0x2000085c
 8012160:	200008a8 	.word	0x200008a8
	...

08012170 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012170:	4b07      	ldr	r3, [pc, #28]	; (8012190 <pxCurrentTCBConst2>)
 8012172:	6819      	ldr	r1, [r3, #0]
 8012174:	6808      	ldr	r0, [r1, #0]
 8012176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801217a:	f380 8809 	msr	PSP, r0
 801217e:	f3bf 8f6f 	isb	sy
 8012182:	f04f 0000 	mov.w	r0, #0
 8012186:	f380 8811 	msr	BASEPRI, r0
 801218a:	4770      	bx	lr
 801218c:	f3af 8000 	nop.w

08012190 <pxCurrentTCBConst2>:
 8012190:	200003f8 	.word	0x200003f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012194:	bf00      	nop
 8012196:	bf00      	nop

08012198 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012198:	b480      	push	{r7}
 801219a:	b083      	sub	sp, #12
 801219c:	af00      	add	r7, sp, #0
	__asm volatile
 801219e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121a2:	f383 8811 	msr	BASEPRI, r3
 80121a6:	f3bf 8f6f 	isb	sy
 80121aa:	f3bf 8f4f 	dsb	sy
 80121ae:	607b      	str	r3, [r7, #4]
}
 80121b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80121b2:	4b0f      	ldr	r3, [pc, #60]	; (80121f0 <vPortEnterCritical+0x58>)
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	3301      	adds	r3, #1
 80121b8:	4a0d      	ldr	r2, [pc, #52]	; (80121f0 <vPortEnterCritical+0x58>)
 80121ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80121bc:	4b0c      	ldr	r3, [pc, #48]	; (80121f0 <vPortEnterCritical+0x58>)
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	2b01      	cmp	r3, #1
 80121c2:	d10f      	bne.n	80121e4 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80121c4:	4b0b      	ldr	r3, [pc, #44]	; (80121f4 <vPortEnterCritical+0x5c>)
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	b2db      	uxtb	r3, r3
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d00a      	beq.n	80121e4 <vPortEnterCritical+0x4c>
	__asm volatile
 80121ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121d2:	f383 8811 	msr	BASEPRI, r3
 80121d6:	f3bf 8f6f 	isb	sy
 80121da:	f3bf 8f4f 	dsb	sy
 80121de:	603b      	str	r3, [r7, #0]
}
 80121e0:	bf00      	nop
 80121e2:	e7fe      	b.n	80121e2 <vPortEnterCritical+0x4a>
	}
}
 80121e4:	bf00      	nop
 80121e6:	370c      	adds	r7, #12
 80121e8:	46bd      	mov	sp, r7
 80121ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ee:	4770      	bx	lr
 80121f0:	2000007c 	.word	0x2000007c
 80121f4:	e000ed04 	.word	0xe000ed04

080121f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80121f8:	b480      	push	{r7}
 80121fa:	b083      	sub	sp, #12
 80121fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80121fe:	4b12      	ldr	r3, [pc, #72]	; (8012248 <vPortExitCritical+0x50>)
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d10a      	bne.n	801221c <vPortExitCritical+0x24>
	__asm volatile
 8012206:	f04f 0350 	mov.w	r3, #80	; 0x50
 801220a:	f383 8811 	msr	BASEPRI, r3
 801220e:	f3bf 8f6f 	isb	sy
 8012212:	f3bf 8f4f 	dsb	sy
 8012216:	607b      	str	r3, [r7, #4]
}
 8012218:	bf00      	nop
 801221a:	e7fe      	b.n	801221a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801221c:	4b0a      	ldr	r3, [pc, #40]	; (8012248 <vPortExitCritical+0x50>)
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	3b01      	subs	r3, #1
 8012222:	4a09      	ldr	r2, [pc, #36]	; (8012248 <vPortExitCritical+0x50>)
 8012224:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012226:	4b08      	ldr	r3, [pc, #32]	; (8012248 <vPortExitCritical+0x50>)
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d105      	bne.n	801223a <vPortExitCritical+0x42>
 801222e:	2300      	movs	r3, #0
 8012230:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012232:	683b      	ldr	r3, [r7, #0]
 8012234:	f383 8811 	msr	BASEPRI, r3
}
 8012238:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801223a:	bf00      	nop
 801223c:	370c      	adds	r7, #12
 801223e:	46bd      	mov	sp, r7
 8012240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012244:	4770      	bx	lr
 8012246:	bf00      	nop
 8012248:	2000007c 	.word	0x2000007c
 801224c:	00000000 	.word	0x00000000

08012250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012250:	f3ef 8009 	mrs	r0, PSP
 8012254:	f3bf 8f6f 	isb	sy
 8012258:	4b15      	ldr	r3, [pc, #84]	; (80122b0 <pxCurrentTCBConst>)
 801225a:	681a      	ldr	r2, [r3, #0]
 801225c:	f01e 0f10 	tst.w	lr, #16
 8012260:	bf08      	it	eq
 8012262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801226a:	6010      	str	r0, [r2, #0]
 801226c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012270:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012274:	f380 8811 	msr	BASEPRI, r0
 8012278:	f3bf 8f4f 	dsb	sy
 801227c:	f3bf 8f6f 	isb	sy
 8012280:	f7ff fc02 	bl	8011a88 <vTaskSwitchContext>
 8012284:	f04f 0000 	mov.w	r0, #0
 8012288:	f380 8811 	msr	BASEPRI, r0
 801228c:	bc09      	pop	{r0, r3}
 801228e:	6819      	ldr	r1, [r3, #0]
 8012290:	6808      	ldr	r0, [r1, #0]
 8012292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012296:	f01e 0f10 	tst.w	lr, #16
 801229a:	bf08      	it	eq
 801229c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80122a0:	f380 8809 	msr	PSP, r0
 80122a4:	f3bf 8f6f 	isb	sy
 80122a8:	4770      	bx	lr
 80122aa:	bf00      	nop
 80122ac:	f3af 8000 	nop.w

080122b0 <pxCurrentTCBConst>:
 80122b0:	200003f8 	.word	0x200003f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80122b4:	bf00      	nop
 80122b6:	bf00      	nop

080122b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80122b8:	b580      	push	{r7, lr}
 80122ba:	b082      	sub	sp, #8
 80122bc:	af00      	add	r7, sp, #0
	__asm volatile
 80122be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122c2:	f383 8811 	msr	BASEPRI, r3
 80122c6:	f3bf 8f6f 	isb	sy
 80122ca:	f3bf 8f4f 	dsb	sy
 80122ce:	607b      	str	r3, [r7, #4]
}
 80122d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80122d2:	f7ff fb1f 	bl	8011914 <xTaskIncrementTick>
 80122d6:	4603      	mov	r3, r0
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d003      	beq.n	80122e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80122dc:	4b06      	ldr	r3, [pc, #24]	; (80122f8 <xPortSysTickHandler+0x40>)
 80122de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122e2:	601a      	str	r2, [r3, #0]
 80122e4:	2300      	movs	r3, #0
 80122e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80122e8:	683b      	ldr	r3, [r7, #0]
 80122ea:	f383 8811 	msr	BASEPRI, r3
}
 80122ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80122f0:	bf00      	nop
 80122f2:	3708      	adds	r7, #8
 80122f4:	46bd      	mov	sp, r7
 80122f6:	bd80      	pop	{r7, pc}
 80122f8:	e000ed04 	.word	0xe000ed04

080122fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80122fc:	b480      	push	{r7}
 80122fe:	b085      	sub	sp, #20
 8012300:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012302:	f3ef 8305 	mrs	r3, IPSR
 8012306:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	2b0f      	cmp	r3, #15
 801230c:	d914      	bls.n	8012338 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801230e:	4a17      	ldr	r2, [pc, #92]	; (801236c <vPortValidateInterruptPriority+0x70>)
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	4413      	add	r3, r2
 8012314:	781b      	ldrb	r3, [r3, #0]
 8012316:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012318:	4b15      	ldr	r3, [pc, #84]	; (8012370 <vPortValidateInterruptPriority+0x74>)
 801231a:	781b      	ldrb	r3, [r3, #0]
 801231c:	7afa      	ldrb	r2, [r7, #11]
 801231e:	429a      	cmp	r2, r3
 8012320:	d20a      	bcs.n	8012338 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8012322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012326:	f383 8811 	msr	BASEPRI, r3
 801232a:	f3bf 8f6f 	isb	sy
 801232e:	f3bf 8f4f 	dsb	sy
 8012332:	607b      	str	r3, [r7, #4]
}
 8012334:	bf00      	nop
 8012336:	e7fe      	b.n	8012336 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012338:	4b0e      	ldr	r3, [pc, #56]	; (8012374 <vPortValidateInterruptPriority+0x78>)
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012340:	4b0d      	ldr	r3, [pc, #52]	; (8012378 <vPortValidateInterruptPriority+0x7c>)
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	429a      	cmp	r2, r3
 8012346:	d90a      	bls.n	801235e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801234c:	f383 8811 	msr	BASEPRI, r3
 8012350:	f3bf 8f6f 	isb	sy
 8012354:	f3bf 8f4f 	dsb	sy
 8012358:	603b      	str	r3, [r7, #0]
}
 801235a:	bf00      	nop
 801235c:	e7fe      	b.n	801235c <vPortValidateInterruptPriority+0x60>
	}
 801235e:	bf00      	nop
 8012360:	3714      	adds	r7, #20
 8012362:	46bd      	mov	sp, r7
 8012364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012368:	4770      	bx	lr
 801236a:	bf00      	nop
 801236c:	e000e3f0 	.word	0xe000e3f0
 8012370:	200008b0 	.word	0x200008b0
 8012374:	e000ed0c 	.word	0xe000ed0c
 8012378:	200008b4 	.word	0x200008b4

0801237c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801237c:	b580      	push	{r7, lr}
 801237e:	b08a      	sub	sp, #40	; 0x28
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012384:	2300      	movs	r3, #0
 8012386:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012388:	f7ff fa18 	bl	80117bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801238c:	4b5b      	ldr	r3, [pc, #364]	; (80124fc <pvPortMalloc+0x180>)
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d101      	bne.n	8012398 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012394:	f000 f920 	bl	80125d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012398:	4b59      	ldr	r3, [pc, #356]	; (8012500 <pvPortMalloc+0x184>)
 801239a:	681a      	ldr	r2, [r3, #0]
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	4013      	ands	r3, r2
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	f040 8093 	bne.w	80124cc <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d01d      	beq.n	80123e8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80123ac:	2208      	movs	r2, #8
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	4413      	add	r3, r2
 80123b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	f003 0307 	and.w	r3, r3, #7
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d014      	beq.n	80123e8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	f023 0307 	bic.w	r3, r3, #7
 80123c4:	3308      	adds	r3, #8
 80123c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	f003 0307 	and.w	r3, r3, #7
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d00a      	beq.n	80123e8 <pvPortMalloc+0x6c>
	__asm volatile
 80123d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123d6:	f383 8811 	msr	BASEPRI, r3
 80123da:	f3bf 8f6f 	isb	sy
 80123de:	f3bf 8f4f 	dsb	sy
 80123e2:	617b      	str	r3, [r7, #20]
}
 80123e4:	bf00      	nop
 80123e6:	e7fe      	b.n	80123e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d06e      	beq.n	80124cc <pvPortMalloc+0x150>
 80123ee:	4b45      	ldr	r3, [pc, #276]	; (8012504 <pvPortMalloc+0x188>)
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	687a      	ldr	r2, [r7, #4]
 80123f4:	429a      	cmp	r2, r3
 80123f6:	d869      	bhi.n	80124cc <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80123f8:	4b43      	ldr	r3, [pc, #268]	; (8012508 <pvPortMalloc+0x18c>)
 80123fa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80123fc:	4b42      	ldr	r3, [pc, #264]	; (8012508 <pvPortMalloc+0x18c>)
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012402:	e004      	b.n	801240e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012406:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012410:	685b      	ldr	r3, [r3, #4]
 8012412:	687a      	ldr	r2, [r7, #4]
 8012414:	429a      	cmp	r2, r3
 8012416:	d903      	bls.n	8012420 <pvPortMalloc+0xa4>
 8012418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d1f1      	bne.n	8012404 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012420:	4b36      	ldr	r3, [pc, #216]	; (80124fc <pvPortMalloc+0x180>)
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012426:	429a      	cmp	r2, r3
 8012428:	d050      	beq.n	80124cc <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801242a:	6a3b      	ldr	r3, [r7, #32]
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	2208      	movs	r2, #8
 8012430:	4413      	add	r3, r2
 8012432:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012436:	681a      	ldr	r2, [r3, #0]
 8012438:	6a3b      	ldr	r3, [r7, #32]
 801243a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801243e:	685a      	ldr	r2, [r3, #4]
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	1ad2      	subs	r2, r2, r3
 8012444:	2308      	movs	r3, #8
 8012446:	005b      	lsls	r3, r3, #1
 8012448:	429a      	cmp	r2, r3
 801244a:	d91f      	bls.n	801248c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801244c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	4413      	add	r3, r2
 8012452:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012454:	69bb      	ldr	r3, [r7, #24]
 8012456:	f003 0307 	and.w	r3, r3, #7
 801245a:	2b00      	cmp	r3, #0
 801245c:	d00a      	beq.n	8012474 <pvPortMalloc+0xf8>
	__asm volatile
 801245e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012462:	f383 8811 	msr	BASEPRI, r3
 8012466:	f3bf 8f6f 	isb	sy
 801246a:	f3bf 8f4f 	dsb	sy
 801246e:	613b      	str	r3, [r7, #16]
}
 8012470:	bf00      	nop
 8012472:	e7fe      	b.n	8012472 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012476:	685a      	ldr	r2, [r3, #4]
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	1ad2      	subs	r2, r2, r3
 801247c:	69bb      	ldr	r3, [r7, #24]
 801247e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012482:	687a      	ldr	r2, [r7, #4]
 8012484:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012486:	69b8      	ldr	r0, [r7, #24]
 8012488:	f000 f908 	bl	801269c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801248c:	4b1d      	ldr	r3, [pc, #116]	; (8012504 <pvPortMalloc+0x188>)
 801248e:	681a      	ldr	r2, [r3, #0]
 8012490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012492:	685b      	ldr	r3, [r3, #4]
 8012494:	1ad3      	subs	r3, r2, r3
 8012496:	4a1b      	ldr	r2, [pc, #108]	; (8012504 <pvPortMalloc+0x188>)
 8012498:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801249a:	4b1a      	ldr	r3, [pc, #104]	; (8012504 <pvPortMalloc+0x188>)
 801249c:	681a      	ldr	r2, [r3, #0]
 801249e:	4b1b      	ldr	r3, [pc, #108]	; (801250c <pvPortMalloc+0x190>)
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	429a      	cmp	r2, r3
 80124a4:	d203      	bcs.n	80124ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80124a6:	4b17      	ldr	r3, [pc, #92]	; (8012504 <pvPortMalloc+0x188>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	4a18      	ldr	r2, [pc, #96]	; (801250c <pvPortMalloc+0x190>)
 80124ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80124ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124b0:	685a      	ldr	r2, [r3, #4]
 80124b2:	4b13      	ldr	r3, [pc, #76]	; (8012500 <pvPortMalloc+0x184>)
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	431a      	orrs	r2, r3
 80124b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80124bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124be:	2200      	movs	r2, #0
 80124c0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80124c2:	4b13      	ldr	r3, [pc, #76]	; (8012510 <pvPortMalloc+0x194>)
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	3301      	adds	r3, #1
 80124c8:	4a11      	ldr	r2, [pc, #68]	; (8012510 <pvPortMalloc+0x194>)
 80124ca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80124cc:	f7ff f984 	bl	80117d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80124d0:	69fb      	ldr	r3, [r7, #28]
 80124d2:	f003 0307 	and.w	r3, r3, #7
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d00a      	beq.n	80124f0 <pvPortMalloc+0x174>
	__asm volatile
 80124da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124de:	f383 8811 	msr	BASEPRI, r3
 80124e2:	f3bf 8f6f 	isb	sy
 80124e6:	f3bf 8f4f 	dsb	sy
 80124ea:	60fb      	str	r3, [r7, #12]
}
 80124ec:	bf00      	nop
 80124ee:	e7fe      	b.n	80124ee <pvPortMalloc+0x172>
	return pvReturn;
 80124f0:	69fb      	ldr	r3, [r7, #28]
}
 80124f2:	4618      	mov	r0, r3
 80124f4:	3728      	adds	r7, #40	; 0x28
 80124f6:	46bd      	mov	sp, r7
 80124f8:	bd80      	pop	{r7, pc}
 80124fa:	bf00      	nop
 80124fc:	20004f10 	.word	0x20004f10
 8012500:	20004f24 	.word	0x20004f24
 8012504:	20004f14 	.word	0x20004f14
 8012508:	20004f08 	.word	0x20004f08
 801250c:	20004f18 	.word	0x20004f18
 8012510:	20004f1c 	.word	0x20004f1c

08012514 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b086      	sub	sp, #24
 8012518:	af00      	add	r7, sp, #0
 801251a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d04d      	beq.n	80125c2 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012526:	2308      	movs	r3, #8
 8012528:	425b      	negs	r3, r3
 801252a:	697a      	ldr	r2, [r7, #20]
 801252c:	4413      	add	r3, r2
 801252e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012530:	697b      	ldr	r3, [r7, #20]
 8012532:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012534:	693b      	ldr	r3, [r7, #16]
 8012536:	685a      	ldr	r2, [r3, #4]
 8012538:	4b24      	ldr	r3, [pc, #144]	; (80125cc <vPortFree+0xb8>)
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	4013      	ands	r3, r2
 801253e:	2b00      	cmp	r3, #0
 8012540:	d10a      	bne.n	8012558 <vPortFree+0x44>
	__asm volatile
 8012542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012546:	f383 8811 	msr	BASEPRI, r3
 801254a:	f3bf 8f6f 	isb	sy
 801254e:	f3bf 8f4f 	dsb	sy
 8012552:	60fb      	str	r3, [r7, #12]
}
 8012554:	bf00      	nop
 8012556:	e7fe      	b.n	8012556 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012558:	693b      	ldr	r3, [r7, #16]
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d00a      	beq.n	8012576 <vPortFree+0x62>
	__asm volatile
 8012560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012564:	f383 8811 	msr	BASEPRI, r3
 8012568:	f3bf 8f6f 	isb	sy
 801256c:	f3bf 8f4f 	dsb	sy
 8012570:	60bb      	str	r3, [r7, #8]
}
 8012572:	bf00      	nop
 8012574:	e7fe      	b.n	8012574 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012576:	693b      	ldr	r3, [r7, #16]
 8012578:	685a      	ldr	r2, [r3, #4]
 801257a:	4b14      	ldr	r3, [pc, #80]	; (80125cc <vPortFree+0xb8>)
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	4013      	ands	r3, r2
 8012580:	2b00      	cmp	r3, #0
 8012582:	d01e      	beq.n	80125c2 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012584:	693b      	ldr	r3, [r7, #16]
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d11a      	bne.n	80125c2 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801258c:	693b      	ldr	r3, [r7, #16]
 801258e:	685a      	ldr	r2, [r3, #4]
 8012590:	4b0e      	ldr	r3, [pc, #56]	; (80125cc <vPortFree+0xb8>)
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	43db      	mvns	r3, r3
 8012596:	401a      	ands	r2, r3
 8012598:	693b      	ldr	r3, [r7, #16]
 801259a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801259c:	f7ff f90e 	bl	80117bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80125a0:	693b      	ldr	r3, [r7, #16]
 80125a2:	685a      	ldr	r2, [r3, #4]
 80125a4:	4b0a      	ldr	r3, [pc, #40]	; (80125d0 <vPortFree+0xbc>)
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	4413      	add	r3, r2
 80125aa:	4a09      	ldr	r2, [pc, #36]	; (80125d0 <vPortFree+0xbc>)
 80125ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80125ae:	6938      	ldr	r0, [r7, #16]
 80125b0:	f000 f874 	bl	801269c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80125b4:	4b07      	ldr	r3, [pc, #28]	; (80125d4 <vPortFree+0xc0>)
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	3301      	adds	r3, #1
 80125ba:	4a06      	ldr	r2, [pc, #24]	; (80125d4 <vPortFree+0xc0>)
 80125bc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80125be:	f7ff f90b 	bl	80117d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80125c2:	bf00      	nop
 80125c4:	3718      	adds	r7, #24
 80125c6:	46bd      	mov	sp, r7
 80125c8:	bd80      	pop	{r7, pc}
 80125ca:	bf00      	nop
 80125cc:	20004f24 	.word	0x20004f24
 80125d0:	20004f14 	.word	0x20004f14
 80125d4:	20004f20 	.word	0x20004f20

080125d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80125d8:	b480      	push	{r7}
 80125da:	b085      	sub	sp, #20
 80125dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80125de:	f244 6350 	movw	r3, #18000	; 0x4650
 80125e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80125e4:	4b27      	ldr	r3, [pc, #156]	; (8012684 <prvHeapInit+0xac>)
 80125e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	f003 0307 	and.w	r3, r3, #7
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d00c      	beq.n	801260c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	3307      	adds	r3, #7
 80125f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	f023 0307 	bic.w	r3, r3, #7
 80125fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012600:	68ba      	ldr	r2, [r7, #8]
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	1ad3      	subs	r3, r2, r3
 8012606:	4a1f      	ldr	r2, [pc, #124]	; (8012684 <prvHeapInit+0xac>)
 8012608:	4413      	add	r3, r2
 801260a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012610:	4a1d      	ldr	r2, [pc, #116]	; (8012688 <prvHeapInit+0xb0>)
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012616:	4b1c      	ldr	r3, [pc, #112]	; (8012688 <prvHeapInit+0xb0>)
 8012618:	2200      	movs	r2, #0
 801261a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	68ba      	ldr	r2, [r7, #8]
 8012620:	4413      	add	r3, r2
 8012622:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012624:	2208      	movs	r2, #8
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	1a9b      	subs	r3, r3, r2
 801262a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	f023 0307 	bic.w	r3, r3, #7
 8012632:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	4a15      	ldr	r2, [pc, #84]	; (801268c <prvHeapInit+0xb4>)
 8012638:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801263a:	4b14      	ldr	r3, [pc, #80]	; (801268c <prvHeapInit+0xb4>)
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	2200      	movs	r2, #0
 8012640:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012642:	4b12      	ldr	r3, [pc, #72]	; (801268c <prvHeapInit+0xb4>)
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	2200      	movs	r2, #0
 8012648:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801264e:	683b      	ldr	r3, [r7, #0]
 8012650:	68fa      	ldr	r2, [r7, #12]
 8012652:	1ad2      	subs	r2, r2, r3
 8012654:	683b      	ldr	r3, [r7, #0]
 8012656:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012658:	4b0c      	ldr	r3, [pc, #48]	; (801268c <prvHeapInit+0xb4>)
 801265a:	681a      	ldr	r2, [r3, #0]
 801265c:	683b      	ldr	r3, [r7, #0]
 801265e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012660:	683b      	ldr	r3, [r7, #0]
 8012662:	685b      	ldr	r3, [r3, #4]
 8012664:	4a0a      	ldr	r2, [pc, #40]	; (8012690 <prvHeapInit+0xb8>)
 8012666:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012668:	683b      	ldr	r3, [r7, #0]
 801266a:	685b      	ldr	r3, [r3, #4]
 801266c:	4a09      	ldr	r2, [pc, #36]	; (8012694 <prvHeapInit+0xbc>)
 801266e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012670:	4b09      	ldr	r3, [pc, #36]	; (8012698 <prvHeapInit+0xc0>)
 8012672:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012676:	601a      	str	r2, [r3, #0]
}
 8012678:	bf00      	nop
 801267a:	3714      	adds	r7, #20
 801267c:	46bd      	mov	sp, r7
 801267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012682:	4770      	bx	lr
 8012684:	200008b8 	.word	0x200008b8
 8012688:	20004f08 	.word	0x20004f08
 801268c:	20004f10 	.word	0x20004f10
 8012690:	20004f18 	.word	0x20004f18
 8012694:	20004f14 	.word	0x20004f14
 8012698:	20004f24 	.word	0x20004f24

0801269c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801269c:	b480      	push	{r7}
 801269e:	b085      	sub	sp, #20
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80126a4:	4b28      	ldr	r3, [pc, #160]	; (8012748 <prvInsertBlockIntoFreeList+0xac>)
 80126a6:	60fb      	str	r3, [r7, #12]
 80126a8:	e002      	b.n	80126b0 <prvInsertBlockIntoFreeList+0x14>
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	60fb      	str	r3, [r7, #12]
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	687a      	ldr	r2, [r7, #4]
 80126b6:	429a      	cmp	r2, r3
 80126b8:	d8f7      	bhi.n	80126aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	685b      	ldr	r3, [r3, #4]
 80126c2:	68ba      	ldr	r2, [r7, #8]
 80126c4:	4413      	add	r3, r2
 80126c6:	687a      	ldr	r2, [r7, #4]
 80126c8:	429a      	cmp	r2, r3
 80126ca:	d108      	bne.n	80126de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	685a      	ldr	r2, [r3, #4]
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	685b      	ldr	r3, [r3, #4]
 80126d4:	441a      	add	r2, r3
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	685b      	ldr	r3, [r3, #4]
 80126e6:	68ba      	ldr	r2, [r7, #8]
 80126e8:	441a      	add	r2, r3
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	429a      	cmp	r2, r3
 80126f0:	d118      	bne.n	8012724 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	681a      	ldr	r2, [r3, #0]
 80126f6:	4b15      	ldr	r3, [pc, #84]	; (801274c <prvInsertBlockIntoFreeList+0xb0>)
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	429a      	cmp	r2, r3
 80126fc:	d00d      	beq.n	801271a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	685a      	ldr	r2, [r3, #4]
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	685b      	ldr	r3, [r3, #4]
 8012708:	441a      	add	r2, r3
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	681a      	ldr	r2, [r3, #0]
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	601a      	str	r2, [r3, #0]
 8012718:	e008      	b.n	801272c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801271a:	4b0c      	ldr	r3, [pc, #48]	; (801274c <prvInsertBlockIntoFreeList+0xb0>)
 801271c:	681a      	ldr	r2, [r3, #0]
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	601a      	str	r2, [r3, #0]
 8012722:	e003      	b.n	801272c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	681a      	ldr	r2, [r3, #0]
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801272c:	68fa      	ldr	r2, [r7, #12]
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	429a      	cmp	r2, r3
 8012732:	d002      	beq.n	801273a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	687a      	ldr	r2, [r7, #4]
 8012738:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801273a:	bf00      	nop
 801273c:	3714      	adds	r7, #20
 801273e:	46bd      	mov	sp, r7
 8012740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012744:	4770      	bx	lr
 8012746:	bf00      	nop
 8012748:	20004f08 	.word	0x20004f08
 801274c:	20004f10 	.word	0x20004f10

08012750 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b082      	sub	sp, #8
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8012764:	4619      	mov	r1, r3
 8012766:	4610      	mov	r0, r2
 8012768:	f7fa f88c 	bl	800c884 <USBD_LL_SetupStage>
}
 801276c:	bf00      	nop
 801276e:	3708      	adds	r7, #8
 8012770:	46bd      	mov	sp, r7
 8012772:	bd80      	pop	{r7, pc}

08012774 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012774:	b580      	push	{r7, lr}
 8012776:	b082      	sub	sp, #8
 8012778:	af00      	add	r7, sp, #0
 801277a:	6078      	str	r0, [r7, #4]
 801277c:	460b      	mov	r3, r1
 801277e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8012786:	78fa      	ldrb	r2, [r7, #3]
 8012788:	6879      	ldr	r1, [r7, #4]
 801278a:	4613      	mov	r3, r2
 801278c:	00db      	lsls	r3, r3, #3
 801278e:	1a9b      	subs	r3, r3, r2
 8012790:	009b      	lsls	r3, r3, #2
 8012792:	440b      	add	r3, r1
 8012794:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012798:	681a      	ldr	r2, [r3, #0]
 801279a:	78fb      	ldrb	r3, [r7, #3]
 801279c:	4619      	mov	r1, r3
 801279e:	f7fa f8c6 	bl	800c92e <USBD_LL_DataOutStage>
}
 80127a2:	bf00      	nop
 80127a4:	3708      	adds	r7, #8
 80127a6:	46bd      	mov	sp, r7
 80127a8:	bd80      	pop	{r7, pc}

080127aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80127aa:	b580      	push	{r7, lr}
 80127ac:	b082      	sub	sp, #8
 80127ae:	af00      	add	r7, sp, #0
 80127b0:	6078      	str	r0, [r7, #4]
 80127b2:	460b      	mov	r3, r1
 80127b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80127bc:	78fa      	ldrb	r2, [r7, #3]
 80127be:	6879      	ldr	r1, [r7, #4]
 80127c0:	4613      	mov	r3, r2
 80127c2:	00db      	lsls	r3, r3, #3
 80127c4:	1a9b      	subs	r3, r3, r2
 80127c6:	009b      	lsls	r3, r3, #2
 80127c8:	440b      	add	r3, r1
 80127ca:	3348      	adds	r3, #72	; 0x48
 80127cc:	681a      	ldr	r2, [r3, #0]
 80127ce:	78fb      	ldrb	r3, [r7, #3]
 80127d0:	4619      	mov	r1, r3
 80127d2:	f7fa f90f 	bl	800c9f4 <USBD_LL_DataInStage>
}
 80127d6:	bf00      	nop
 80127d8:	3708      	adds	r7, #8
 80127da:	46bd      	mov	sp, r7
 80127dc:	bd80      	pop	{r7, pc}

080127de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80127de:	b580      	push	{r7, lr}
 80127e0:	b082      	sub	sp, #8
 80127e2:	af00      	add	r7, sp, #0
 80127e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80127ec:	4618      	mov	r0, r3
 80127ee:	f7fa fa23 	bl	800cc38 <USBD_LL_SOF>
}
 80127f2:	bf00      	nop
 80127f4:	3708      	adds	r7, #8
 80127f6:	46bd      	mov	sp, r7
 80127f8:	bd80      	pop	{r7, pc}

080127fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80127fa:	b580      	push	{r7, lr}
 80127fc:	b084      	sub	sp, #16
 80127fe:	af00      	add	r7, sp, #0
 8012800:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012802:	2301      	movs	r3, #1
 8012804:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	68db      	ldr	r3, [r3, #12]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d102      	bne.n	8012814 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801280e:	2300      	movs	r3, #0
 8012810:	73fb      	strb	r3, [r7, #15]
 8012812:	e008      	b.n	8012826 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	68db      	ldr	r3, [r3, #12]
 8012818:	2b02      	cmp	r3, #2
 801281a:	d102      	bne.n	8012822 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801281c:	2301      	movs	r3, #1
 801281e:	73fb      	strb	r3, [r7, #15]
 8012820:	e001      	b.n	8012826 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8012822:	f7ef fb23 	bl	8001e6c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801282c:	7bfa      	ldrb	r2, [r7, #15]
 801282e:	4611      	mov	r1, r2
 8012830:	4618      	mov	r0, r3
 8012832:	f7fa f9c3 	bl	800cbbc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801283c:	4618      	mov	r0, r3
 801283e:	f7fa f96f 	bl	800cb20 <USBD_LL_Reset>
}
 8012842:	bf00      	nop
 8012844:	3710      	adds	r7, #16
 8012846:	46bd      	mov	sp, r7
 8012848:	bd80      	pop	{r7, pc}
	...

0801284c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801284c:	b580      	push	{r7, lr}
 801284e:	b082      	sub	sp, #8
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801285a:	4618      	mov	r0, r3
 801285c:	f7fa f9be 	bl	800cbdc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	687a      	ldr	r2, [r7, #4]
 801286c:	6812      	ldr	r2, [r2, #0]
 801286e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012872:	f043 0301 	orr.w	r3, r3, #1
 8012876:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	6a1b      	ldr	r3, [r3, #32]
 801287c:	2b00      	cmp	r3, #0
 801287e:	d005      	beq.n	801288c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012880:	4b04      	ldr	r3, [pc, #16]	; (8012894 <HAL_PCD_SuspendCallback+0x48>)
 8012882:	691b      	ldr	r3, [r3, #16]
 8012884:	4a03      	ldr	r2, [pc, #12]	; (8012894 <HAL_PCD_SuspendCallback+0x48>)
 8012886:	f043 0306 	orr.w	r3, r3, #6
 801288a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801288c:	bf00      	nop
 801288e:	3708      	adds	r7, #8
 8012890:	46bd      	mov	sp, r7
 8012892:	bd80      	pop	{r7, pc}
 8012894:	e000ed00 	.word	0xe000ed00

08012898 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012898:	b580      	push	{r7, lr}
 801289a:	b082      	sub	sp, #8
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80128a6:	4618      	mov	r0, r3
 80128a8:	f7fa f9ae 	bl	800cc08 <USBD_LL_Resume>
}
 80128ac:	bf00      	nop
 80128ae:	3708      	adds	r7, #8
 80128b0:	46bd      	mov	sp, r7
 80128b2:	bd80      	pop	{r7, pc}

080128b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80128b4:	b580      	push	{r7, lr}
 80128b6:	b082      	sub	sp, #8
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
 80128bc:	460b      	mov	r3, r1
 80128be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80128c6:	78fa      	ldrb	r2, [r7, #3]
 80128c8:	4611      	mov	r1, r2
 80128ca:	4618      	mov	r0, r3
 80128cc:	f7fa f9fc 	bl	800ccc8 <USBD_LL_IsoOUTIncomplete>
}
 80128d0:	bf00      	nop
 80128d2:	3708      	adds	r7, #8
 80128d4:	46bd      	mov	sp, r7
 80128d6:	bd80      	pop	{r7, pc}

080128d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	b082      	sub	sp, #8
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
 80128e0:	460b      	mov	r3, r1
 80128e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80128ea:	78fa      	ldrb	r2, [r7, #3]
 80128ec:	4611      	mov	r1, r2
 80128ee:	4618      	mov	r0, r3
 80128f0:	f7fa f9c4 	bl	800cc7c <USBD_LL_IsoINIncomplete>
}
 80128f4:	bf00      	nop
 80128f6:	3708      	adds	r7, #8
 80128f8:	46bd      	mov	sp, r7
 80128fa:	bd80      	pop	{r7, pc}

080128fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b082      	sub	sp, #8
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801290a:	4618      	mov	r0, r3
 801290c:	f7fa fa02 	bl	800cd14 <USBD_LL_DevConnected>
}
 8012910:	bf00      	nop
 8012912:	3708      	adds	r7, #8
 8012914:	46bd      	mov	sp, r7
 8012916:	bd80      	pop	{r7, pc}

08012918 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012918:	b580      	push	{r7, lr}
 801291a:	b082      	sub	sp, #8
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012926:	4618      	mov	r0, r3
 8012928:	f7fa f9ff 	bl	800cd2a <USBD_LL_DevDisconnected>
}
 801292c:	bf00      	nop
 801292e:	3708      	adds	r7, #8
 8012930:	46bd      	mov	sp, r7
 8012932:	bd80      	pop	{r7, pc}

08012934 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012934:	b580      	push	{r7, lr}
 8012936:	b084      	sub	sp, #16
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]
 801293c:	4608      	mov	r0, r1
 801293e:	4611      	mov	r1, r2
 8012940:	461a      	mov	r2, r3
 8012942:	4603      	mov	r3, r0
 8012944:	70fb      	strb	r3, [r7, #3]
 8012946:	460b      	mov	r3, r1
 8012948:	70bb      	strb	r3, [r7, #2]
 801294a:	4613      	mov	r3, r2
 801294c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801294e:	2300      	movs	r3, #0
 8012950:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012952:	2300      	movs	r3, #0
 8012954:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801295c:	78bb      	ldrb	r3, [r7, #2]
 801295e:	883a      	ldrh	r2, [r7, #0]
 8012960:	78f9      	ldrb	r1, [r7, #3]
 8012962:	f7f4 ff20 	bl	80077a6 <HAL_PCD_EP_Open>
 8012966:	4603      	mov	r3, r0
 8012968:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801296a:	7bfb      	ldrb	r3, [r7, #15]
 801296c:	4618      	mov	r0, r3
 801296e:	f000 f8d3 	bl	8012b18 <USBD_Get_USB_Status>
 8012972:	4603      	mov	r3, r0
 8012974:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012976:	7bbb      	ldrb	r3, [r7, #14]
}
 8012978:	4618      	mov	r0, r3
 801297a:	3710      	adds	r7, #16
 801297c:	46bd      	mov	sp, r7
 801297e:	bd80      	pop	{r7, pc}

08012980 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012980:	b580      	push	{r7, lr}
 8012982:	b084      	sub	sp, #16
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
 8012988:	460b      	mov	r3, r1
 801298a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801298c:	2300      	movs	r3, #0
 801298e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012990:	2300      	movs	r3, #0
 8012992:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801299a:	78fa      	ldrb	r2, [r7, #3]
 801299c:	4611      	mov	r1, r2
 801299e:	4618      	mov	r0, r3
 80129a0:	f7f4 fffe 	bl	80079a0 <HAL_PCD_EP_SetStall>
 80129a4:	4603      	mov	r3, r0
 80129a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80129a8:	7bfb      	ldrb	r3, [r7, #15]
 80129aa:	4618      	mov	r0, r3
 80129ac:	f000 f8b4 	bl	8012b18 <USBD_Get_USB_Status>
 80129b0:	4603      	mov	r3, r0
 80129b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80129b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80129b6:	4618      	mov	r0, r3
 80129b8:	3710      	adds	r7, #16
 80129ba:	46bd      	mov	sp, r7
 80129bc:	bd80      	pop	{r7, pc}

080129be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80129be:	b580      	push	{r7, lr}
 80129c0:	b084      	sub	sp, #16
 80129c2:	af00      	add	r7, sp, #0
 80129c4:	6078      	str	r0, [r7, #4]
 80129c6:	460b      	mov	r3, r1
 80129c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80129ca:	2300      	movs	r3, #0
 80129cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80129ce:	2300      	movs	r3, #0
 80129d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80129d8:	78fa      	ldrb	r2, [r7, #3]
 80129da:	4611      	mov	r1, r2
 80129dc:	4618      	mov	r0, r3
 80129de:	f7f5 f843 	bl	8007a68 <HAL_PCD_EP_ClrStall>
 80129e2:	4603      	mov	r3, r0
 80129e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80129e6:	7bfb      	ldrb	r3, [r7, #15]
 80129e8:	4618      	mov	r0, r3
 80129ea:	f000 f895 	bl	8012b18 <USBD_Get_USB_Status>
 80129ee:	4603      	mov	r3, r0
 80129f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80129f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80129f4:	4618      	mov	r0, r3
 80129f6:	3710      	adds	r7, #16
 80129f8:	46bd      	mov	sp, r7
 80129fa:	bd80      	pop	{r7, pc}

080129fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80129fc:	b480      	push	{r7}
 80129fe:	b085      	sub	sp, #20
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
 8012a04:	460b      	mov	r3, r1
 8012a06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012a0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012a10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	da0b      	bge.n	8012a30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012a18:	78fb      	ldrb	r3, [r7, #3]
 8012a1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012a1e:	68f9      	ldr	r1, [r7, #12]
 8012a20:	4613      	mov	r3, r2
 8012a22:	00db      	lsls	r3, r3, #3
 8012a24:	1a9b      	subs	r3, r3, r2
 8012a26:	009b      	lsls	r3, r3, #2
 8012a28:	440b      	add	r3, r1
 8012a2a:	333e      	adds	r3, #62	; 0x3e
 8012a2c:	781b      	ldrb	r3, [r3, #0]
 8012a2e:	e00b      	b.n	8012a48 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012a30:	78fb      	ldrb	r3, [r7, #3]
 8012a32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012a36:	68f9      	ldr	r1, [r7, #12]
 8012a38:	4613      	mov	r3, r2
 8012a3a:	00db      	lsls	r3, r3, #3
 8012a3c:	1a9b      	subs	r3, r3, r2
 8012a3e:	009b      	lsls	r3, r3, #2
 8012a40:	440b      	add	r3, r1
 8012a42:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012a46:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012a48:	4618      	mov	r0, r3
 8012a4a:	3714      	adds	r7, #20
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a52:	4770      	bx	lr

08012a54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b084      	sub	sp, #16
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
 8012a5c:	460b      	mov	r3, r1
 8012a5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a60:	2300      	movs	r3, #0
 8012a62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012a64:	2300      	movs	r3, #0
 8012a66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012a6e:	78fa      	ldrb	r2, [r7, #3]
 8012a70:	4611      	mov	r1, r2
 8012a72:	4618      	mov	r0, r3
 8012a74:	f7f4 fe72 	bl	800775c <HAL_PCD_SetAddress>
 8012a78:	4603      	mov	r3, r0
 8012a7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012a7c:	7bfb      	ldrb	r3, [r7, #15]
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f000 f84a 	bl	8012b18 <USBD_Get_USB_Status>
 8012a84:	4603      	mov	r3, r0
 8012a86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012a88:	7bbb      	ldrb	r3, [r7, #14]
}
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	3710      	adds	r7, #16
 8012a8e:	46bd      	mov	sp, r7
 8012a90:	bd80      	pop	{r7, pc}

08012a92 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012a92:	b580      	push	{r7, lr}
 8012a94:	b086      	sub	sp, #24
 8012a96:	af00      	add	r7, sp, #0
 8012a98:	60f8      	str	r0, [r7, #12]
 8012a9a:	607a      	str	r2, [r7, #4]
 8012a9c:	603b      	str	r3, [r7, #0]
 8012a9e:	460b      	mov	r3, r1
 8012aa0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012ab0:	7af9      	ldrb	r1, [r7, #11]
 8012ab2:	683b      	ldr	r3, [r7, #0]
 8012ab4:	687a      	ldr	r2, [r7, #4]
 8012ab6:	f7f4 ff29 	bl	800790c <HAL_PCD_EP_Transmit>
 8012aba:	4603      	mov	r3, r0
 8012abc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012abe:	7dfb      	ldrb	r3, [r7, #23]
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f000 f829 	bl	8012b18 <USBD_Get_USB_Status>
 8012ac6:	4603      	mov	r3, r0
 8012ac8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012aca:	7dbb      	ldrb	r3, [r7, #22]
}
 8012acc:	4618      	mov	r0, r3
 8012ace:	3718      	adds	r7, #24
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	bd80      	pop	{r7, pc}

08012ad4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b086      	sub	sp, #24
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	60f8      	str	r0, [r7, #12]
 8012adc:	607a      	str	r2, [r7, #4]
 8012ade:	603b      	str	r3, [r7, #0]
 8012ae0:	460b      	mov	r3, r1
 8012ae2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012ae8:	2300      	movs	r3, #0
 8012aea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012af2:	7af9      	ldrb	r1, [r7, #11]
 8012af4:	683b      	ldr	r3, [r7, #0]
 8012af6:	687a      	ldr	r2, [r7, #4]
 8012af8:	f7f4 febd 	bl	8007876 <HAL_PCD_EP_Receive>
 8012afc:	4603      	mov	r3, r0
 8012afe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012b00:	7dfb      	ldrb	r3, [r7, #23]
 8012b02:	4618      	mov	r0, r3
 8012b04:	f000 f808 	bl	8012b18 <USBD_Get_USB_Status>
 8012b08:	4603      	mov	r3, r0
 8012b0a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012b0c:	7dbb      	ldrb	r3, [r7, #22]
}
 8012b0e:	4618      	mov	r0, r3
 8012b10:	3718      	adds	r7, #24
 8012b12:	46bd      	mov	sp, r7
 8012b14:	bd80      	pop	{r7, pc}
	...

08012b18 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012b18:	b480      	push	{r7}
 8012b1a:	b085      	sub	sp, #20
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	4603      	mov	r3, r0
 8012b20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012b22:	2300      	movs	r3, #0
 8012b24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012b26:	79fb      	ldrb	r3, [r7, #7]
 8012b28:	2b03      	cmp	r3, #3
 8012b2a:	d817      	bhi.n	8012b5c <USBD_Get_USB_Status+0x44>
 8012b2c:	a201      	add	r2, pc, #4	; (adr r2, 8012b34 <USBD_Get_USB_Status+0x1c>)
 8012b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b32:	bf00      	nop
 8012b34:	08012b45 	.word	0x08012b45
 8012b38:	08012b4b 	.word	0x08012b4b
 8012b3c:	08012b51 	.word	0x08012b51
 8012b40:	08012b57 	.word	0x08012b57
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012b44:	2300      	movs	r3, #0
 8012b46:	73fb      	strb	r3, [r7, #15]
    break;
 8012b48:	e00b      	b.n	8012b62 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012b4a:	2303      	movs	r3, #3
 8012b4c:	73fb      	strb	r3, [r7, #15]
    break;
 8012b4e:	e008      	b.n	8012b62 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012b50:	2301      	movs	r3, #1
 8012b52:	73fb      	strb	r3, [r7, #15]
    break;
 8012b54:	e005      	b.n	8012b62 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012b56:	2303      	movs	r3, #3
 8012b58:	73fb      	strb	r3, [r7, #15]
    break;
 8012b5a:	e002      	b.n	8012b62 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012b5c:	2303      	movs	r3, #3
 8012b5e:	73fb      	strb	r3, [r7, #15]
    break;
 8012b60:	bf00      	nop
  }
  return usb_status;
 8012b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b64:	4618      	mov	r0, r3
 8012b66:	3714      	adds	r7, #20
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6e:	4770      	bx	lr

08012b70 <nan>:
 8012b70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012b78 <nan+0x8>
 8012b74:	4770      	bx	lr
 8012b76:	bf00      	nop
 8012b78:	00000000 	.word	0x00000000
 8012b7c:	7ff80000 	.word	0x7ff80000

08012b80 <__errno>:
 8012b80:	4b01      	ldr	r3, [pc, #4]	; (8012b88 <__errno+0x8>)
 8012b82:	6818      	ldr	r0, [r3, #0]
 8012b84:	4770      	bx	lr
 8012b86:	bf00      	nop
 8012b88:	20000080 	.word	0x20000080

08012b8c <std>:
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	b510      	push	{r4, lr}
 8012b90:	4604      	mov	r4, r0
 8012b92:	e9c0 3300 	strd	r3, r3, [r0]
 8012b96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012b9a:	6083      	str	r3, [r0, #8]
 8012b9c:	8181      	strh	r1, [r0, #12]
 8012b9e:	6643      	str	r3, [r0, #100]	; 0x64
 8012ba0:	81c2      	strh	r2, [r0, #14]
 8012ba2:	6183      	str	r3, [r0, #24]
 8012ba4:	4619      	mov	r1, r3
 8012ba6:	2208      	movs	r2, #8
 8012ba8:	305c      	adds	r0, #92	; 0x5c
 8012baa:	f000 f91a 	bl	8012de2 <memset>
 8012bae:	4b05      	ldr	r3, [pc, #20]	; (8012bc4 <std+0x38>)
 8012bb0:	6263      	str	r3, [r4, #36]	; 0x24
 8012bb2:	4b05      	ldr	r3, [pc, #20]	; (8012bc8 <std+0x3c>)
 8012bb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8012bb6:	4b05      	ldr	r3, [pc, #20]	; (8012bcc <std+0x40>)
 8012bb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012bba:	4b05      	ldr	r3, [pc, #20]	; (8012bd0 <std+0x44>)
 8012bbc:	6224      	str	r4, [r4, #32]
 8012bbe:	6323      	str	r3, [r4, #48]	; 0x30
 8012bc0:	bd10      	pop	{r4, pc}
 8012bc2:	bf00      	nop
 8012bc4:	08013d7d 	.word	0x08013d7d
 8012bc8:	08013da3 	.word	0x08013da3
 8012bcc:	08013ddb 	.word	0x08013ddb
 8012bd0:	08013dff 	.word	0x08013dff

08012bd4 <_cleanup_r>:
 8012bd4:	4901      	ldr	r1, [pc, #4]	; (8012bdc <_cleanup_r+0x8>)
 8012bd6:	f000 b8af 	b.w	8012d38 <_fwalk_reent>
 8012bda:	bf00      	nop
 8012bdc:	08015bed 	.word	0x08015bed

08012be0 <__sfmoreglue>:
 8012be0:	b570      	push	{r4, r5, r6, lr}
 8012be2:	1e4a      	subs	r2, r1, #1
 8012be4:	2568      	movs	r5, #104	; 0x68
 8012be6:	4355      	muls	r5, r2
 8012be8:	460e      	mov	r6, r1
 8012bea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012bee:	f000 f901 	bl	8012df4 <_malloc_r>
 8012bf2:	4604      	mov	r4, r0
 8012bf4:	b140      	cbz	r0, 8012c08 <__sfmoreglue+0x28>
 8012bf6:	2100      	movs	r1, #0
 8012bf8:	e9c0 1600 	strd	r1, r6, [r0]
 8012bfc:	300c      	adds	r0, #12
 8012bfe:	60a0      	str	r0, [r4, #8]
 8012c00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012c04:	f000 f8ed 	bl	8012de2 <memset>
 8012c08:	4620      	mov	r0, r4
 8012c0a:	bd70      	pop	{r4, r5, r6, pc}

08012c0c <__sfp_lock_acquire>:
 8012c0c:	4801      	ldr	r0, [pc, #4]	; (8012c14 <__sfp_lock_acquire+0x8>)
 8012c0e:	f000 b8d8 	b.w	8012dc2 <__retarget_lock_acquire_recursive>
 8012c12:	bf00      	nop
 8012c14:	2000691c 	.word	0x2000691c

08012c18 <__sfp_lock_release>:
 8012c18:	4801      	ldr	r0, [pc, #4]	; (8012c20 <__sfp_lock_release+0x8>)
 8012c1a:	f000 b8d3 	b.w	8012dc4 <__retarget_lock_release_recursive>
 8012c1e:	bf00      	nop
 8012c20:	2000691c 	.word	0x2000691c

08012c24 <__sinit_lock_acquire>:
 8012c24:	4801      	ldr	r0, [pc, #4]	; (8012c2c <__sinit_lock_acquire+0x8>)
 8012c26:	f000 b8cc 	b.w	8012dc2 <__retarget_lock_acquire_recursive>
 8012c2a:	bf00      	nop
 8012c2c:	20006917 	.word	0x20006917

08012c30 <__sinit_lock_release>:
 8012c30:	4801      	ldr	r0, [pc, #4]	; (8012c38 <__sinit_lock_release+0x8>)
 8012c32:	f000 b8c7 	b.w	8012dc4 <__retarget_lock_release_recursive>
 8012c36:	bf00      	nop
 8012c38:	20006917 	.word	0x20006917

08012c3c <__sinit>:
 8012c3c:	b510      	push	{r4, lr}
 8012c3e:	4604      	mov	r4, r0
 8012c40:	f7ff fff0 	bl	8012c24 <__sinit_lock_acquire>
 8012c44:	69a3      	ldr	r3, [r4, #24]
 8012c46:	b11b      	cbz	r3, 8012c50 <__sinit+0x14>
 8012c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c4c:	f7ff bff0 	b.w	8012c30 <__sinit_lock_release>
 8012c50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012c54:	6523      	str	r3, [r4, #80]	; 0x50
 8012c56:	4b13      	ldr	r3, [pc, #76]	; (8012ca4 <__sinit+0x68>)
 8012c58:	4a13      	ldr	r2, [pc, #76]	; (8012ca8 <__sinit+0x6c>)
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8012c5e:	42a3      	cmp	r3, r4
 8012c60:	bf04      	itt	eq
 8012c62:	2301      	moveq	r3, #1
 8012c64:	61a3      	streq	r3, [r4, #24]
 8012c66:	4620      	mov	r0, r4
 8012c68:	f000 f820 	bl	8012cac <__sfp>
 8012c6c:	6060      	str	r0, [r4, #4]
 8012c6e:	4620      	mov	r0, r4
 8012c70:	f000 f81c 	bl	8012cac <__sfp>
 8012c74:	60a0      	str	r0, [r4, #8]
 8012c76:	4620      	mov	r0, r4
 8012c78:	f000 f818 	bl	8012cac <__sfp>
 8012c7c:	2200      	movs	r2, #0
 8012c7e:	60e0      	str	r0, [r4, #12]
 8012c80:	2104      	movs	r1, #4
 8012c82:	6860      	ldr	r0, [r4, #4]
 8012c84:	f7ff ff82 	bl	8012b8c <std>
 8012c88:	68a0      	ldr	r0, [r4, #8]
 8012c8a:	2201      	movs	r2, #1
 8012c8c:	2109      	movs	r1, #9
 8012c8e:	f7ff ff7d 	bl	8012b8c <std>
 8012c92:	68e0      	ldr	r0, [r4, #12]
 8012c94:	2202      	movs	r2, #2
 8012c96:	2112      	movs	r1, #18
 8012c98:	f7ff ff78 	bl	8012b8c <std>
 8012c9c:	2301      	movs	r3, #1
 8012c9e:	61a3      	str	r3, [r4, #24]
 8012ca0:	e7d2      	b.n	8012c48 <__sinit+0xc>
 8012ca2:	bf00      	nop
 8012ca4:	08018ec4 	.word	0x08018ec4
 8012ca8:	08012bd5 	.word	0x08012bd5

08012cac <__sfp>:
 8012cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cae:	4607      	mov	r7, r0
 8012cb0:	f7ff ffac 	bl	8012c0c <__sfp_lock_acquire>
 8012cb4:	4b1e      	ldr	r3, [pc, #120]	; (8012d30 <__sfp+0x84>)
 8012cb6:	681e      	ldr	r6, [r3, #0]
 8012cb8:	69b3      	ldr	r3, [r6, #24]
 8012cba:	b913      	cbnz	r3, 8012cc2 <__sfp+0x16>
 8012cbc:	4630      	mov	r0, r6
 8012cbe:	f7ff ffbd 	bl	8012c3c <__sinit>
 8012cc2:	3648      	adds	r6, #72	; 0x48
 8012cc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012cc8:	3b01      	subs	r3, #1
 8012cca:	d503      	bpl.n	8012cd4 <__sfp+0x28>
 8012ccc:	6833      	ldr	r3, [r6, #0]
 8012cce:	b30b      	cbz	r3, 8012d14 <__sfp+0x68>
 8012cd0:	6836      	ldr	r6, [r6, #0]
 8012cd2:	e7f7      	b.n	8012cc4 <__sfp+0x18>
 8012cd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012cd8:	b9d5      	cbnz	r5, 8012d10 <__sfp+0x64>
 8012cda:	4b16      	ldr	r3, [pc, #88]	; (8012d34 <__sfp+0x88>)
 8012cdc:	60e3      	str	r3, [r4, #12]
 8012cde:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012ce2:	6665      	str	r5, [r4, #100]	; 0x64
 8012ce4:	f000 f86c 	bl	8012dc0 <__retarget_lock_init_recursive>
 8012ce8:	f7ff ff96 	bl	8012c18 <__sfp_lock_release>
 8012cec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012cf0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012cf4:	6025      	str	r5, [r4, #0]
 8012cf6:	61a5      	str	r5, [r4, #24]
 8012cf8:	2208      	movs	r2, #8
 8012cfa:	4629      	mov	r1, r5
 8012cfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012d00:	f000 f86f 	bl	8012de2 <memset>
 8012d04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012d08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012d0c:	4620      	mov	r0, r4
 8012d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d10:	3468      	adds	r4, #104	; 0x68
 8012d12:	e7d9      	b.n	8012cc8 <__sfp+0x1c>
 8012d14:	2104      	movs	r1, #4
 8012d16:	4638      	mov	r0, r7
 8012d18:	f7ff ff62 	bl	8012be0 <__sfmoreglue>
 8012d1c:	4604      	mov	r4, r0
 8012d1e:	6030      	str	r0, [r6, #0]
 8012d20:	2800      	cmp	r0, #0
 8012d22:	d1d5      	bne.n	8012cd0 <__sfp+0x24>
 8012d24:	f7ff ff78 	bl	8012c18 <__sfp_lock_release>
 8012d28:	230c      	movs	r3, #12
 8012d2a:	603b      	str	r3, [r7, #0]
 8012d2c:	e7ee      	b.n	8012d0c <__sfp+0x60>
 8012d2e:	bf00      	nop
 8012d30:	08018ec4 	.word	0x08018ec4
 8012d34:	ffff0001 	.word	0xffff0001

08012d38 <_fwalk_reent>:
 8012d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d3c:	4606      	mov	r6, r0
 8012d3e:	4688      	mov	r8, r1
 8012d40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012d44:	2700      	movs	r7, #0
 8012d46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012d4a:	f1b9 0901 	subs.w	r9, r9, #1
 8012d4e:	d505      	bpl.n	8012d5c <_fwalk_reent+0x24>
 8012d50:	6824      	ldr	r4, [r4, #0]
 8012d52:	2c00      	cmp	r4, #0
 8012d54:	d1f7      	bne.n	8012d46 <_fwalk_reent+0xe>
 8012d56:	4638      	mov	r0, r7
 8012d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d5c:	89ab      	ldrh	r3, [r5, #12]
 8012d5e:	2b01      	cmp	r3, #1
 8012d60:	d907      	bls.n	8012d72 <_fwalk_reent+0x3a>
 8012d62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012d66:	3301      	adds	r3, #1
 8012d68:	d003      	beq.n	8012d72 <_fwalk_reent+0x3a>
 8012d6a:	4629      	mov	r1, r5
 8012d6c:	4630      	mov	r0, r6
 8012d6e:	47c0      	blx	r8
 8012d70:	4307      	orrs	r7, r0
 8012d72:	3568      	adds	r5, #104	; 0x68
 8012d74:	e7e9      	b.n	8012d4a <_fwalk_reent+0x12>
	...

08012d78 <__libc_init_array>:
 8012d78:	b570      	push	{r4, r5, r6, lr}
 8012d7a:	4d0d      	ldr	r5, [pc, #52]	; (8012db0 <__libc_init_array+0x38>)
 8012d7c:	4c0d      	ldr	r4, [pc, #52]	; (8012db4 <__libc_init_array+0x3c>)
 8012d7e:	1b64      	subs	r4, r4, r5
 8012d80:	10a4      	asrs	r4, r4, #2
 8012d82:	2600      	movs	r6, #0
 8012d84:	42a6      	cmp	r6, r4
 8012d86:	d109      	bne.n	8012d9c <__libc_init_array+0x24>
 8012d88:	4d0b      	ldr	r5, [pc, #44]	; (8012db8 <__libc_init_array+0x40>)
 8012d8a:	4c0c      	ldr	r4, [pc, #48]	; (8012dbc <__libc_init_array+0x44>)
 8012d8c:	f005 f8b0 	bl	8017ef0 <_init>
 8012d90:	1b64      	subs	r4, r4, r5
 8012d92:	10a4      	asrs	r4, r4, #2
 8012d94:	2600      	movs	r6, #0
 8012d96:	42a6      	cmp	r6, r4
 8012d98:	d105      	bne.n	8012da6 <__libc_init_array+0x2e>
 8012d9a:	bd70      	pop	{r4, r5, r6, pc}
 8012d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012da0:	4798      	blx	r3
 8012da2:	3601      	adds	r6, #1
 8012da4:	e7ee      	b.n	8012d84 <__libc_init_array+0xc>
 8012da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8012daa:	4798      	blx	r3
 8012dac:	3601      	adds	r6, #1
 8012dae:	e7f2      	b.n	8012d96 <__libc_init_array+0x1e>
 8012db0:	08019234 	.word	0x08019234
 8012db4:	08019234 	.word	0x08019234
 8012db8:	08019234 	.word	0x08019234
 8012dbc:	08019238 	.word	0x08019238

08012dc0 <__retarget_lock_init_recursive>:
 8012dc0:	4770      	bx	lr

08012dc2 <__retarget_lock_acquire_recursive>:
 8012dc2:	4770      	bx	lr

08012dc4 <__retarget_lock_release_recursive>:
 8012dc4:	4770      	bx	lr

08012dc6 <memcpy>:
 8012dc6:	440a      	add	r2, r1
 8012dc8:	4291      	cmp	r1, r2
 8012dca:	f100 33ff 	add.w	r3, r0, #4294967295
 8012dce:	d100      	bne.n	8012dd2 <memcpy+0xc>
 8012dd0:	4770      	bx	lr
 8012dd2:	b510      	push	{r4, lr}
 8012dd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012dd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012ddc:	4291      	cmp	r1, r2
 8012dde:	d1f9      	bne.n	8012dd4 <memcpy+0xe>
 8012de0:	bd10      	pop	{r4, pc}

08012de2 <memset>:
 8012de2:	4402      	add	r2, r0
 8012de4:	4603      	mov	r3, r0
 8012de6:	4293      	cmp	r3, r2
 8012de8:	d100      	bne.n	8012dec <memset+0xa>
 8012dea:	4770      	bx	lr
 8012dec:	f803 1b01 	strb.w	r1, [r3], #1
 8012df0:	e7f9      	b.n	8012de6 <memset+0x4>
	...

08012df4 <_malloc_r>:
 8012df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012df6:	1ccd      	adds	r5, r1, #3
 8012df8:	f025 0503 	bic.w	r5, r5, #3
 8012dfc:	3508      	adds	r5, #8
 8012dfe:	2d0c      	cmp	r5, #12
 8012e00:	bf38      	it	cc
 8012e02:	250c      	movcc	r5, #12
 8012e04:	2d00      	cmp	r5, #0
 8012e06:	4606      	mov	r6, r0
 8012e08:	db01      	blt.n	8012e0e <_malloc_r+0x1a>
 8012e0a:	42a9      	cmp	r1, r5
 8012e0c:	d903      	bls.n	8012e16 <_malloc_r+0x22>
 8012e0e:	230c      	movs	r3, #12
 8012e10:	6033      	str	r3, [r6, #0]
 8012e12:	2000      	movs	r0, #0
 8012e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e16:	f003 fb29 	bl	801646c <__malloc_lock>
 8012e1a:	4921      	ldr	r1, [pc, #132]	; (8012ea0 <_malloc_r+0xac>)
 8012e1c:	680a      	ldr	r2, [r1, #0]
 8012e1e:	4614      	mov	r4, r2
 8012e20:	b99c      	cbnz	r4, 8012e4a <_malloc_r+0x56>
 8012e22:	4f20      	ldr	r7, [pc, #128]	; (8012ea4 <_malloc_r+0xb0>)
 8012e24:	683b      	ldr	r3, [r7, #0]
 8012e26:	b923      	cbnz	r3, 8012e32 <_malloc_r+0x3e>
 8012e28:	4621      	mov	r1, r4
 8012e2a:	4630      	mov	r0, r6
 8012e2c:	f000 ff44 	bl	8013cb8 <_sbrk_r>
 8012e30:	6038      	str	r0, [r7, #0]
 8012e32:	4629      	mov	r1, r5
 8012e34:	4630      	mov	r0, r6
 8012e36:	f000 ff3f 	bl	8013cb8 <_sbrk_r>
 8012e3a:	1c43      	adds	r3, r0, #1
 8012e3c:	d123      	bne.n	8012e86 <_malloc_r+0x92>
 8012e3e:	230c      	movs	r3, #12
 8012e40:	6033      	str	r3, [r6, #0]
 8012e42:	4630      	mov	r0, r6
 8012e44:	f003 fb18 	bl	8016478 <__malloc_unlock>
 8012e48:	e7e3      	b.n	8012e12 <_malloc_r+0x1e>
 8012e4a:	6823      	ldr	r3, [r4, #0]
 8012e4c:	1b5b      	subs	r3, r3, r5
 8012e4e:	d417      	bmi.n	8012e80 <_malloc_r+0x8c>
 8012e50:	2b0b      	cmp	r3, #11
 8012e52:	d903      	bls.n	8012e5c <_malloc_r+0x68>
 8012e54:	6023      	str	r3, [r4, #0]
 8012e56:	441c      	add	r4, r3
 8012e58:	6025      	str	r5, [r4, #0]
 8012e5a:	e004      	b.n	8012e66 <_malloc_r+0x72>
 8012e5c:	6863      	ldr	r3, [r4, #4]
 8012e5e:	42a2      	cmp	r2, r4
 8012e60:	bf0c      	ite	eq
 8012e62:	600b      	streq	r3, [r1, #0]
 8012e64:	6053      	strne	r3, [r2, #4]
 8012e66:	4630      	mov	r0, r6
 8012e68:	f003 fb06 	bl	8016478 <__malloc_unlock>
 8012e6c:	f104 000b 	add.w	r0, r4, #11
 8012e70:	1d23      	adds	r3, r4, #4
 8012e72:	f020 0007 	bic.w	r0, r0, #7
 8012e76:	1ac2      	subs	r2, r0, r3
 8012e78:	d0cc      	beq.n	8012e14 <_malloc_r+0x20>
 8012e7a:	1a1b      	subs	r3, r3, r0
 8012e7c:	50a3      	str	r3, [r4, r2]
 8012e7e:	e7c9      	b.n	8012e14 <_malloc_r+0x20>
 8012e80:	4622      	mov	r2, r4
 8012e82:	6864      	ldr	r4, [r4, #4]
 8012e84:	e7cc      	b.n	8012e20 <_malloc_r+0x2c>
 8012e86:	1cc4      	adds	r4, r0, #3
 8012e88:	f024 0403 	bic.w	r4, r4, #3
 8012e8c:	42a0      	cmp	r0, r4
 8012e8e:	d0e3      	beq.n	8012e58 <_malloc_r+0x64>
 8012e90:	1a21      	subs	r1, r4, r0
 8012e92:	4630      	mov	r0, r6
 8012e94:	f000 ff10 	bl	8013cb8 <_sbrk_r>
 8012e98:	3001      	adds	r0, #1
 8012e9a:	d1dd      	bne.n	8012e58 <_malloc_r+0x64>
 8012e9c:	e7cf      	b.n	8012e3e <_malloc_r+0x4a>
 8012e9e:	bf00      	nop
 8012ea0:	20004f28 	.word	0x20004f28
 8012ea4:	20004f2c 	.word	0x20004f2c

08012ea8 <__cvt>:
 8012ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012eac:	ec55 4b10 	vmov	r4, r5, d0
 8012eb0:	2d00      	cmp	r5, #0
 8012eb2:	460e      	mov	r6, r1
 8012eb4:	4619      	mov	r1, r3
 8012eb6:	462b      	mov	r3, r5
 8012eb8:	bfbb      	ittet	lt
 8012eba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012ebe:	461d      	movlt	r5, r3
 8012ec0:	2300      	movge	r3, #0
 8012ec2:	232d      	movlt	r3, #45	; 0x2d
 8012ec4:	700b      	strb	r3, [r1, #0]
 8012ec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012ec8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012ecc:	4691      	mov	r9, r2
 8012ece:	f023 0820 	bic.w	r8, r3, #32
 8012ed2:	bfbc      	itt	lt
 8012ed4:	4622      	movlt	r2, r4
 8012ed6:	4614      	movlt	r4, r2
 8012ed8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012edc:	d005      	beq.n	8012eea <__cvt+0x42>
 8012ede:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012ee2:	d100      	bne.n	8012ee6 <__cvt+0x3e>
 8012ee4:	3601      	adds	r6, #1
 8012ee6:	2102      	movs	r1, #2
 8012ee8:	e000      	b.n	8012eec <__cvt+0x44>
 8012eea:	2103      	movs	r1, #3
 8012eec:	ab03      	add	r3, sp, #12
 8012eee:	9301      	str	r3, [sp, #4]
 8012ef0:	ab02      	add	r3, sp, #8
 8012ef2:	9300      	str	r3, [sp, #0]
 8012ef4:	ec45 4b10 	vmov	d0, r4, r5
 8012ef8:	4653      	mov	r3, sl
 8012efa:	4632      	mov	r2, r6
 8012efc:	f002 f804 	bl	8014f08 <_dtoa_r>
 8012f00:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012f04:	4607      	mov	r7, r0
 8012f06:	d102      	bne.n	8012f0e <__cvt+0x66>
 8012f08:	f019 0f01 	tst.w	r9, #1
 8012f0c:	d022      	beq.n	8012f54 <__cvt+0xac>
 8012f0e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012f12:	eb07 0906 	add.w	r9, r7, r6
 8012f16:	d110      	bne.n	8012f3a <__cvt+0x92>
 8012f18:	783b      	ldrb	r3, [r7, #0]
 8012f1a:	2b30      	cmp	r3, #48	; 0x30
 8012f1c:	d10a      	bne.n	8012f34 <__cvt+0x8c>
 8012f1e:	2200      	movs	r2, #0
 8012f20:	2300      	movs	r3, #0
 8012f22:	4620      	mov	r0, r4
 8012f24:	4629      	mov	r1, r5
 8012f26:	f7ed fddf 	bl	8000ae8 <__aeabi_dcmpeq>
 8012f2a:	b918      	cbnz	r0, 8012f34 <__cvt+0x8c>
 8012f2c:	f1c6 0601 	rsb	r6, r6, #1
 8012f30:	f8ca 6000 	str.w	r6, [sl]
 8012f34:	f8da 3000 	ldr.w	r3, [sl]
 8012f38:	4499      	add	r9, r3
 8012f3a:	2200      	movs	r2, #0
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	4620      	mov	r0, r4
 8012f40:	4629      	mov	r1, r5
 8012f42:	f7ed fdd1 	bl	8000ae8 <__aeabi_dcmpeq>
 8012f46:	b108      	cbz	r0, 8012f4c <__cvt+0xa4>
 8012f48:	f8cd 900c 	str.w	r9, [sp, #12]
 8012f4c:	2230      	movs	r2, #48	; 0x30
 8012f4e:	9b03      	ldr	r3, [sp, #12]
 8012f50:	454b      	cmp	r3, r9
 8012f52:	d307      	bcc.n	8012f64 <__cvt+0xbc>
 8012f54:	9b03      	ldr	r3, [sp, #12]
 8012f56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012f58:	1bdb      	subs	r3, r3, r7
 8012f5a:	4638      	mov	r0, r7
 8012f5c:	6013      	str	r3, [r2, #0]
 8012f5e:	b004      	add	sp, #16
 8012f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f64:	1c59      	adds	r1, r3, #1
 8012f66:	9103      	str	r1, [sp, #12]
 8012f68:	701a      	strb	r2, [r3, #0]
 8012f6a:	e7f0      	b.n	8012f4e <__cvt+0xa6>

08012f6c <__exponent>:
 8012f6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012f6e:	4603      	mov	r3, r0
 8012f70:	2900      	cmp	r1, #0
 8012f72:	bfb8      	it	lt
 8012f74:	4249      	neglt	r1, r1
 8012f76:	f803 2b02 	strb.w	r2, [r3], #2
 8012f7a:	bfb4      	ite	lt
 8012f7c:	222d      	movlt	r2, #45	; 0x2d
 8012f7e:	222b      	movge	r2, #43	; 0x2b
 8012f80:	2909      	cmp	r1, #9
 8012f82:	7042      	strb	r2, [r0, #1]
 8012f84:	dd2a      	ble.n	8012fdc <__exponent+0x70>
 8012f86:	f10d 0407 	add.w	r4, sp, #7
 8012f8a:	46a4      	mov	ip, r4
 8012f8c:	270a      	movs	r7, #10
 8012f8e:	46a6      	mov	lr, r4
 8012f90:	460a      	mov	r2, r1
 8012f92:	fb91 f6f7 	sdiv	r6, r1, r7
 8012f96:	fb07 1516 	mls	r5, r7, r6, r1
 8012f9a:	3530      	adds	r5, #48	; 0x30
 8012f9c:	2a63      	cmp	r2, #99	; 0x63
 8012f9e:	f104 34ff 	add.w	r4, r4, #4294967295
 8012fa2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012fa6:	4631      	mov	r1, r6
 8012fa8:	dcf1      	bgt.n	8012f8e <__exponent+0x22>
 8012faa:	3130      	adds	r1, #48	; 0x30
 8012fac:	f1ae 0502 	sub.w	r5, lr, #2
 8012fb0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012fb4:	1c44      	adds	r4, r0, #1
 8012fb6:	4629      	mov	r1, r5
 8012fb8:	4561      	cmp	r1, ip
 8012fba:	d30a      	bcc.n	8012fd2 <__exponent+0x66>
 8012fbc:	f10d 0209 	add.w	r2, sp, #9
 8012fc0:	eba2 020e 	sub.w	r2, r2, lr
 8012fc4:	4565      	cmp	r5, ip
 8012fc6:	bf88      	it	hi
 8012fc8:	2200      	movhi	r2, #0
 8012fca:	4413      	add	r3, r2
 8012fcc:	1a18      	subs	r0, r3, r0
 8012fce:	b003      	add	sp, #12
 8012fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012fd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012fd6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012fda:	e7ed      	b.n	8012fb8 <__exponent+0x4c>
 8012fdc:	2330      	movs	r3, #48	; 0x30
 8012fde:	3130      	adds	r1, #48	; 0x30
 8012fe0:	7083      	strb	r3, [r0, #2]
 8012fe2:	70c1      	strb	r1, [r0, #3]
 8012fe4:	1d03      	adds	r3, r0, #4
 8012fe6:	e7f1      	b.n	8012fcc <__exponent+0x60>

08012fe8 <_printf_float>:
 8012fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fec:	ed2d 8b02 	vpush	{d8}
 8012ff0:	b08d      	sub	sp, #52	; 0x34
 8012ff2:	460c      	mov	r4, r1
 8012ff4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012ff8:	4616      	mov	r6, r2
 8012ffa:	461f      	mov	r7, r3
 8012ffc:	4605      	mov	r5, r0
 8012ffe:	f003 f9a1 	bl	8016344 <_localeconv_r>
 8013002:	f8d0 a000 	ldr.w	sl, [r0]
 8013006:	4650      	mov	r0, sl
 8013008:	f7ed f8f2 	bl	80001f0 <strlen>
 801300c:	2300      	movs	r3, #0
 801300e:	930a      	str	r3, [sp, #40]	; 0x28
 8013010:	6823      	ldr	r3, [r4, #0]
 8013012:	9305      	str	r3, [sp, #20]
 8013014:	f8d8 3000 	ldr.w	r3, [r8]
 8013018:	f894 b018 	ldrb.w	fp, [r4, #24]
 801301c:	3307      	adds	r3, #7
 801301e:	f023 0307 	bic.w	r3, r3, #7
 8013022:	f103 0208 	add.w	r2, r3, #8
 8013026:	f8c8 2000 	str.w	r2, [r8]
 801302a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801302e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013032:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013036:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801303a:	9307      	str	r3, [sp, #28]
 801303c:	f8cd 8018 	str.w	r8, [sp, #24]
 8013040:	ee08 0a10 	vmov	s16, r0
 8013044:	4b9f      	ldr	r3, [pc, #636]	; (80132c4 <_printf_float+0x2dc>)
 8013046:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801304a:	f04f 32ff 	mov.w	r2, #4294967295
 801304e:	f7ed fd7d 	bl	8000b4c <__aeabi_dcmpun>
 8013052:	bb88      	cbnz	r0, 80130b8 <_printf_float+0xd0>
 8013054:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013058:	4b9a      	ldr	r3, [pc, #616]	; (80132c4 <_printf_float+0x2dc>)
 801305a:	f04f 32ff 	mov.w	r2, #4294967295
 801305e:	f7ed fd57 	bl	8000b10 <__aeabi_dcmple>
 8013062:	bb48      	cbnz	r0, 80130b8 <_printf_float+0xd0>
 8013064:	2200      	movs	r2, #0
 8013066:	2300      	movs	r3, #0
 8013068:	4640      	mov	r0, r8
 801306a:	4649      	mov	r1, r9
 801306c:	f7ed fd46 	bl	8000afc <__aeabi_dcmplt>
 8013070:	b110      	cbz	r0, 8013078 <_printf_float+0x90>
 8013072:	232d      	movs	r3, #45	; 0x2d
 8013074:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013078:	4b93      	ldr	r3, [pc, #588]	; (80132c8 <_printf_float+0x2e0>)
 801307a:	4894      	ldr	r0, [pc, #592]	; (80132cc <_printf_float+0x2e4>)
 801307c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013080:	bf94      	ite	ls
 8013082:	4698      	movls	r8, r3
 8013084:	4680      	movhi	r8, r0
 8013086:	2303      	movs	r3, #3
 8013088:	6123      	str	r3, [r4, #16]
 801308a:	9b05      	ldr	r3, [sp, #20]
 801308c:	f023 0204 	bic.w	r2, r3, #4
 8013090:	6022      	str	r2, [r4, #0]
 8013092:	f04f 0900 	mov.w	r9, #0
 8013096:	9700      	str	r7, [sp, #0]
 8013098:	4633      	mov	r3, r6
 801309a:	aa0b      	add	r2, sp, #44	; 0x2c
 801309c:	4621      	mov	r1, r4
 801309e:	4628      	mov	r0, r5
 80130a0:	f000 f9d8 	bl	8013454 <_printf_common>
 80130a4:	3001      	adds	r0, #1
 80130a6:	f040 8090 	bne.w	80131ca <_printf_float+0x1e2>
 80130aa:	f04f 30ff 	mov.w	r0, #4294967295
 80130ae:	b00d      	add	sp, #52	; 0x34
 80130b0:	ecbd 8b02 	vpop	{d8}
 80130b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130b8:	4642      	mov	r2, r8
 80130ba:	464b      	mov	r3, r9
 80130bc:	4640      	mov	r0, r8
 80130be:	4649      	mov	r1, r9
 80130c0:	f7ed fd44 	bl	8000b4c <__aeabi_dcmpun>
 80130c4:	b140      	cbz	r0, 80130d8 <_printf_float+0xf0>
 80130c6:	464b      	mov	r3, r9
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	bfbc      	itt	lt
 80130cc:	232d      	movlt	r3, #45	; 0x2d
 80130ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80130d2:	487f      	ldr	r0, [pc, #508]	; (80132d0 <_printf_float+0x2e8>)
 80130d4:	4b7f      	ldr	r3, [pc, #508]	; (80132d4 <_printf_float+0x2ec>)
 80130d6:	e7d1      	b.n	801307c <_printf_float+0x94>
 80130d8:	6863      	ldr	r3, [r4, #4]
 80130da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80130de:	9206      	str	r2, [sp, #24]
 80130e0:	1c5a      	adds	r2, r3, #1
 80130e2:	d13f      	bne.n	8013164 <_printf_float+0x17c>
 80130e4:	2306      	movs	r3, #6
 80130e6:	6063      	str	r3, [r4, #4]
 80130e8:	9b05      	ldr	r3, [sp, #20]
 80130ea:	6861      	ldr	r1, [r4, #4]
 80130ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80130f0:	2300      	movs	r3, #0
 80130f2:	9303      	str	r3, [sp, #12]
 80130f4:	ab0a      	add	r3, sp, #40	; 0x28
 80130f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80130fa:	ab09      	add	r3, sp, #36	; 0x24
 80130fc:	ec49 8b10 	vmov	d0, r8, r9
 8013100:	9300      	str	r3, [sp, #0]
 8013102:	6022      	str	r2, [r4, #0]
 8013104:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013108:	4628      	mov	r0, r5
 801310a:	f7ff fecd 	bl	8012ea8 <__cvt>
 801310e:	9b06      	ldr	r3, [sp, #24]
 8013110:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013112:	2b47      	cmp	r3, #71	; 0x47
 8013114:	4680      	mov	r8, r0
 8013116:	d108      	bne.n	801312a <_printf_float+0x142>
 8013118:	1cc8      	adds	r0, r1, #3
 801311a:	db02      	blt.n	8013122 <_printf_float+0x13a>
 801311c:	6863      	ldr	r3, [r4, #4]
 801311e:	4299      	cmp	r1, r3
 8013120:	dd41      	ble.n	80131a6 <_printf_float+0x1be>
 8013122:	f1ab 0b02 	sub.w	fp, fp, #2
 8013126:	fa5f fb8b 	uxtb.w	fp, fp
 801312a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801312e:	d820      	bhi.n	8013172 <_printf_float+0x18a>
 8013130:	3901      	subs	r1, #1
 8013132:	465a      	mov	r2, fp
 8013134:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013138:	9109      	str	r1, [sp, #36]	; 0x24
 801313a:	f7ff ff17 	bl	8012f6c <__exponent>
 801313e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013140:	1813      	adds	r3, r2, r0
 8013142:	2a01      	cmp	r2, #1
 8013144:	4681      	mov	r9, r0
 8013146:	6123      	str	r3, [r4, #16]
 8013148:	dc02      	bgt.n	8013150 <_printf_float+0x168>
 801314a:	6822      	ldr	r2, [r4, #0]
 801314c:	07d2      	lsls	r2, r2, #31
 801314e:	d501      	bpl.n	8013154 <_printf_float+0x16c>
 8013150:	3301      	adds	r3, #1
 8013152:	6123      	str	r3, [r4, #16]
 8013154:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013158:	2b00      	cmp	r3, #0
 801315a:	d09c      	beq.n	8013096 <_printf_float+0xae>
 801315c:	232d      	movs	r3, #45	; 0x2d
 801315e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013162:	e798      	b.n	8013096 <_printf_float+0xae>
 8013164:	9a06      	ldr	r2, [sp, #24]
 8013166:	2a47      	cmp	r2, #71	; 0x47
 8013168:	d1be      	bne.n	80130e8 <_printf_float+0x100>
 801316a:	2b00      	cmp	r3, #0
 801316c:	d1bc      	bne.n	80130e8 <_printf_float+0x100>
 801316e:	2301      	movs	r3, #1
 8013170:	e7b9      	b.n	80130e6 <_printf_float+0xfe>
 8013172:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013176:	d118      	bne.n	80131aa <_printf_float+0x1c2>
 8013178:	2900      	cmp	r1, #0
 801317a:	6863      	ldr	r3, [r4, #4]
 801317c:	dd0b      	ble.n	8013196 <_printf_float+0x1ae>
 801317e:	6121      	str	r1, [r4, #16]
 8013180:	b913      	cbnz	r3, 8013188 <_printf_float+0x1a0>
 8013182:	6822      	ldr	r2, [r4, #0]
 8013184:	07d0      	lsls	r0, r2, #31
 8013186:	d502      	bpl.n	801318e <_printf_float+0x1a6>
 8013188:	3301      	adds	r3, #1
 801318a:	440b      	add	r3, r1
 801318c:	6123      	str	r3, [r4, #16]
 801318e:	65a1      	str	r1, [r4, #88]	; 0x58
 8013190:	f04f 0900 	mov.w	r9, #0
 8013194:	e7de      	b.n	8013154 <_printf_float+0x16c>
 8013196:	b913      	cbnz	r3, 801319e <_printf_float+0x1b6>
 8013198:	6822      	ldr	r2, [r4, #0]
 801319a:	07d2      	lsls	r2, r2, #31
 801319c:	d501      	bpl.n	80131a2 <_printf_float+0x1ba>
 801319e:	3302      	adds	r3, #2
 80131a0:	e7f4      	b.n	801318c <_printf_float+0x1a4>
 80131a2:	2301      	movs	r3, #1
 80131a4:	e7f2      	b.n	801318c <_printf_float+0x1a4>
 80131a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80131aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131ac:	4299      	cmp	r1, r3
 80131ae:	db05      	blt.n	80131bc <_printf_float+0x1d4>
 80131b0:	6823      	ldr	r3, [r4, #0]
 80131b2:	6121      	str	r1, [r4, #16]
 80131b4:	07d8      	lsls	r0, r3, #31
 80131b6:	d5ea      	bpl.n	801318e <_printf_float+0x1a6>
 80131b8:	1c4b      	adds	r3, r1, #1
 80131ba:	e7e7      	b.n	801318c <_printf_float+0x1a4>
 80131bc:	2900      	cmp	r1, #0
 80131be:	bfd4      	ite	le
 80131c0:	f1c1 0202 	rsble	r2, r1, #2
 80131c4:	2201      	movgt	r2, #1
 80131c6:	4413      	add	r3, r2
 80131c8:	e7e0      	b.n	801318c <_printf_float+0x1a4>
 80131ca:	6823      	ldr	r3, [r4, #0]
 80131cc:	055a      	lsls	r2, r3, #21
 80131ce:	d407      	bmi.n	80131e0 <_printf_float+0x1f8>
 80131d0:	6923      	ldr	r3, [r4, #16]
 80131d2:	4642      	mov	r2, r8
 80131d4:	4631      	mov	r1, r6
 80131d6:	4628      	mov	r0, r5
 80131d8:	47b8      	blx	r7
 80131da:	3001      	adds	r0, #1
 80131dc:	d12c      	bne.n	8013238 <_printf_float+0x250>
 80131de:	e764      	b.n	80130aa <_printf_float+0xc2>
 80131e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80131e4:	f240 80e0 	bls.w	80133a8 <_printf_float+0x3c0>
 80131e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80131ec:	2200      	movs	r2, #0
 80131ee:	2300      	movs	r3, #0
 80131f0:	f7ed fc7a 	bl	8000ae8 <__aeabi_dcmpeq>
 80131f4:	2800      	cmp	r0, #0
 80131f6:	d034      	beq.n	8013262 <_printf_float+0x27a>
 80131f8:	4a37      	ldr	r2, [pc, #220]	; (80132d8 <_printf_float+0x2f0>)
 80131fa:	2301      	movs	r3, #1
 80131fc:	4631      	mov	r1, r6
 80131fe:	4628      	mov	r0, r5
 8013200:	47b8      	blx	r7
 8013202:	3001      	adds	r0, #1
 8013204:	f43f af51 	beq.w	80130aa <_printf_float+0xc2>
 8013208:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801320c:	429a      	cmp	r2, r3
 801320e:	db02      	blt.n	8013216 <_printf_float+0x22e>
 8013210:	6823      	ldr	r3, [r4, #0]
 8013212:	07d8      	lsls	r0, r3, #31
 8013214:	d510      	bpl.n	8013238 <_printf_float+0x250>
 8013216:	ee18 3a10 	vmov	r3, s16
 801321a:	4652      	mov	r2, sl
 801321c:	4631      	mov	r1, r6
 801321e:	4628      	mov	r0, r5
 8013220:	47b8      	blx	r7
 8013222:	3001      	adds	r0, #1
 8013224:	f43f af41 	beq.w	80130aa <_printf_float+0xc2>
 8013228:	f04f 0800 	mov.w	r8, #0
 801322c:	f104 091a 	add.w	r9, r4, #26
 8013230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013232:	3b01      	subs	r3, #1
 8013234:	4543      	cmp	r3, r8
 8013236:	dc09      	bgt.n	801324c <_printf_float+0x264>
 8013238:	6823      	ldr	r3, [r4, #0]
 801323a:	079b      	lsls	r3, r3, #30
 801323c:	f100 8105 	bmi.w	801344a <_printf_float+0x462>
 8013240:	68e0      	ldr	r0, [r4, #12]
 8013242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013244:	4298      	cmp	r0, r3
 8013246:	bfb8      	it	lt
 8013248:	4618      	movlt	r0, r3
 801324a:	e730      	b.n	80130ae <_printf_float+0xc6>
 801324c:	2301      	movs	r3, #1
 801324e:	464a      	mov	r2, r9
 8013250:	4631      	mov	r1, r6
 8013252:	4628      	mov	r0, r5
 8013254:	47b8      	blx	r7
 8013256:	3001      	adds	r0, #1
 8013258:	f43f af27 	beq.w	80130aa <_printf_float+0xc2>
 801325c:	f108 0801 	add.w	r8, r8, #1
 8013260:	e7e6      	b.n	8013230 <_printf_float+0x248>
 8013262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013264:	2b00      	cmp	r3, #0
 8013266:	dc39      	bgt.n	80132dc <_printf_float+0x2f4>
 8013268:	4a1b      	ldr	r2, [pc, #108]	; (80132d8 <_printf_float+0x2f0>)
 801326a:	2301      	movs	r3, #1
 801326c:	4631      	mov	r1, r6
 801326e:	4628      	mov	r0, r5
 8013270:	47b8      	blx	r7
 8013272:	3001      	adds	r0, #1
 8013274:	f43f af19 	beq.w	80130aa <_printf_float+0xc2>
 8013278:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801327c:	4313      	orrs	r3, r2
 801327e:	d102      	bne.n	8013286 <_printf_float+0x29e>
 8013280:	6823      	ldr	r3, [r4, #0]
 8013282:	07d9      	lsls	r1, r3, #31
 8013284:	d5d8      	bpl.n	8013238 <_printf_float+0x250>
 8013286:	ee18 3a10 	vmov	r3, s16
 801328a:	4652      	mov	r2, sl
 801328c:	4631      	mov	r1, r6
 801328e:	4628      	mov	r0, r5
 8013290:	47b8      	blx	r7
 8013292:	3001      	adds	r0, #1
 8013294:	f43f af09 	beq.w	80130aa <_printf_float+0xc2>
 8013298:	f04f 0900 	mov.w	r9, #0
 801329c:	f104 0a1a 	add.w	sl, r4, #26
 80132a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132a2:	425b      	negs	r3, r3
 80132a4:	454b      	cmp	r3, r9
 80132a6:	dc01      	bgt.n	80132ac <_printf_float+0x2c4>
 80132a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132aa:	e792      	b.n	80131d2 <_printf_float+0x1ea>
 80132ac:	2301      	movs	r3, #1
 80132ae:	4652      	mov	r2, sl
 80132b0:	4631      	mov	r1, r6
 80132b2:	4628      	mov	r0, r5
 80132b4:	47b8      	blx	r7
 80132b6:	3001      	adds	r0, #1
 80132b8:	f43f aef7 	beq.w	80130aa <_printf_float+0xc2>
 80132bc:	f109 0901 	add.w	r9, r9, #1
 80132c0:	e7ee      	b.n	80132a0 <_printf_float+0x2b8>
 80132c2:	bf00      	nop
 80132c4:	7fefffff 	.word	0x7fefffff
 80132c8:	08018ec8 	.word	0x08018ec8
 80132cc:	08018ecc 	.word	0x08018ecc
 80132d0:	08018ed4 	.word	0x08018ed4
 80132d4:	08018ed0 	.word	0x08018ed0
 80132d8:	080191d9 	.word	0x080191d9
 80132dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80132de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80132e0:	429a      	cmp	r2, r3
 80132e2:	bfa8      	it	ge
 80132e4:	461a      	movge	r2, r3
 80132e6:	2a00      	cmp	r2, #0
 80132e8:	4691      	mov	r9, r2
 80132ea:	dc37      	bgt.n	801335c <_printf_float+0x374>
 80132ec:	f04f 0b00 	mov.w	fp, #0
 80132f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80132f4:	f104 021a 	add.w	r2, r4, #26
 80132f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80132fa:	9305      	str	r3, [sp, #20]
 80132fc:	eba3 0309 	sub.w	r3, r3, r9
 8013300:	455b      	cmp	r3, fp
 8013302:	dc33      	bgt.n	801336c <_printf_float+0x384>
 8013304:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013308:	429a      	cmp	r2, r3
 801330a:	db3b      	blt.n	8013384 <_printf_float+0x39c>
 801330c:	6823      	ldr	r3, [r4, #0]
 801330e:	07da      	lsls	r2, r3, #31
 8013310:	d438      	bmi.n	8013384 <_printf_float+0x39c>
 8013312:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013314:	9b05      	ldr	r3, [sp, #20]
 8013316:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013318:	1ad3      	subs	r3, r2, r3
 801331a:	eba2 0901 	sub.w	r9, r2, r1
 801331e:	4599      	cmp	r9, r3
 8013320:	bfa8      	it	ge
 8013322:	4699      	movge	r9, r3
 8013324:	f1b9 0f00 	cmp.w	r9, #0
 8013328:	dc35      	bgt.n	8013396 <_printf_float+0x3ae>
 801332a:	f04f 0800 	mov.w	r8, #0
 801332e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013332:	f104 0a1a 	add.w	sl, r4, #26
 8013336:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801333a:	1a9b      	subs	r3, r3, r2
 801333c:	eba3 0309 	sub.w	r3, r3, r9
 8013340:	4543      	cmp	r3, r8
 8013342:	f77f af79 	ble.w	8013238 <_printf_float+0x250>
 8013346:	2301      	movs	r3, #1
 8013348:	4652      	mov	r2, sl
 801334a:	4631      	mov	r1, r6
 801334c:	4628      	mov	r0, r5
 801334e:	47b8      	blx	r7
 8013350:	3001      	adds	r0, #1
 8013352:	f43f aeaa 	beq.w	80130aa <_printf_float+0xc2>
 8013356:	f108 0801 	add.w	r8, r8, #1
 801335a:	e7ec      	b.n	8013336 <_printf_float+0x34e>
 801335c:	4613      	mov	r3, r2
 801335e:	4631      	mov	r1, r6
 8013360:	4642      	mov	r2, r8
 8013362:	4628      	mov	r0, r5
 8013364:	47b8      	blx	r7
 8013366:	3001      	adds	r0, #1
 8013368:	d1c0      	bne.n	80132ec <_printf_float+0x304>
 801336a:	e69e      	b.n	80130aa <_printf_float+0xc2>
 801336c:	2301      	movs	r3, #1
 801336e:	4631      	mov	r1, r6
 8013370:	4628      	mov	r0, r5
 8013372:	9205      	str	r2, [sp, #20]
 8013374:	47b8      	blx	r7
 8013376:	3001      	adds	r0, #1
 8013378:	f43f ae97 	beq.w	80130aa <_printf_float+0xc2>
 801337c:	9a05      	ldr	r2, [sp, #20]
 801337e:	f10b 0b01 	add.w	fp, fp, #1
 8013382:	e7b9      	b.n	80132f8 <_printf_float+0x310>
 8013384:	ee18 3a10 	vmov	r3, s16
 8013388:	4652      	mov	r2, sl
 801338a:	4631      	mov	r1, r6
 801338c:	4628      	mov	r0, r5
 801338e:	47b8      	blx	r7
 8013390:	3001      	adds	r0, #1
 8013392:	d1be      	bne.n	8013312 <_printf_float+0x32a>
 8013394:	e689      	b.n	80130aa <_printf_float+0xc2>
 8013396:	9a05      	ldr	r2, [sp, #20]
 8013398:	464b      	mov	r3, r9
 801339a:	4442      	add	r2, r8
 801339c:	4631      	mov	r1, r6
 801339e:	4628      	mov	r0, r5
 80133a0:	47b8      	blx	r7
 80133a2:	3001      	adds	r0, #1
 80133a4:	d1c1      	bne.n	801332a <_printf_float+0x342>
 80133a6:	e680      	b.n	80130aa <_printf_float+0xc2>
 80133a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80133aa:	2a01      	cmp	r2, #1
 80133ac:	dc01      	bgt.n	80133b2 <_printf_float+0x3ca>
 80133ae:	07db      	lsls	r3, r3, #31
 80133b0:	d538      	bpl.n	8013424 <_printf_float+0x43c>
 80133b2:	2301      	movs	r3, #1
 80133b4:	4642      	mov	r2, r8
 80133b6:	4631      	mov	r1, r6
 80133b8:	4628      	mov	r0, r5
 80133ba:	47b8      	blx	r7
 80133bc:	3001      	adds	r0, #1
 80133be:	f43f ae74 	beq.w	80130aa <_printf_float+0xc2>
 80133c2:	ee18 3a10 	vmov	r3, s16
 80133c6:	4652      	mov	r2, sl
 80133c8:	4631      	mov	r1, r6
 80133ca:	4628      	mov	r0, r5
 80133cc:	47b8      	blx	r7
 80133ce:	3001      	adds	r0, #1
 80133d0:	f43f ae6b 	beq.w	80130aa <_printf_float+0xc2>
 80133d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80133d8:	2200      	movs	r2, #0
 80133da:	2300      	movs	r3, #0
 80133dc:	f7ed fb84 	bl	8000ae8 <__aeabi_dcmpeq>
 80133e0:	b9d8      	cbnz	r0, 801341a <_printf_float+0x432>
 80133e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80133e4:	f108 0201 	add.w	r2, r8, #1
 80133e8:	3b01      	subs	r3, #1
 80133ea:	4631      	mov	r1, r6
 80133ec:	4628      	mov	r0, r5
 80133ee:	47b8      	blx	r7
 80133f0:	3001      	adds	r0, #1
 80133f2:	d10e      	bne.n	8013412 <_printf_float+0x42a>
 80133f4:	e659      	b.n	80130aa <_printf_float+0xc2>
 80133f6:	2301      	movs	r3, #1
 80133f8:	4652      	mov	r2, sl
 80133fa:	4631      	mov	r1, r6
 80133fc:	4628      	mov	r0, r5
 80133fe:	47b8      	blx	r7
 8013400:	3001      	adds	r0, #1
 8013402:	f43f ae52 	beq.w	80130aa <_printf_float+0xc2>
 8013406:	f108 0801 	add.w	r8, r8, #1
 801340a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801340c:	3b01      	subs	r3, #1
 801340e:	4543      	cmp	r3, r8
 8013410:	dcf1      	bgt.n	80133f6 <_printf_float+0x40e>
 8013412:	464b      	mov	r3, r9
 8013414:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013418:	e6dc      	b.n	80131d4 <_printf_float+0x1ec>
 801341a:	f04f 0800 	mov.w	r8, #0
 801341e:	f104 0a1a 	add.w	sl, r4, #26
 8013422:	e7f2      	b.n	801340a <_printf_float+0x422>
 8013424:	2301      	movs	r3, #1
 8013426:	4642      	mov	r2, r8
 8013428:	e7df      	b.n	80133ea <_printf_float+0x402>
 801342a:	2301      	movs	r3, #1
 801342c:	464a      	mov	r2, r9
 801342e:	4631      	mov	r1, r6
 8013430:	4628      	mov	r0, r5
 8013432:	47b8      	blx	r7
 8013434:	3001      	adds	r0, #1
 8013436:	f43f ae38 	beq.w	80130aa <_printf_float+0xc2>
 801343a:	f108 0801 	add.w	r8, r8, #1
 801343e:	68e3      	ldr	r3, [r4, #12]
 8013440:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013442:	1a5b      	subs	r3, r3, r1
 8013444:	4543      	cmp	r3, r8
 8013446:	dcf0      	bgt.n	801342a <_printf_float+0x442>
 8013448:	e6fa      	b.n	8013240 <_printf_float+0x258>
 801344a:	f04f 0800 	mov.w	r8, #0
 801344e:	f104 0919 	add.w	r9, r4, #25
 8013452:	e7f4      	b.n	801343e <_printf_float+0x456>

08013454 <_printf_common>:
 8013454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013458:	4616      	mov	r6, r2
 801345a:	4699      	mov	r9, r3
 801345c:	688a      	ldr	r2, [r1, #8]
 801345e:	690b      	ldr	r3, [r1, #16]
 8013460:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013464:	4293      	cmp	r3, r2
 8013466:	bfb8      	it	lt
 8013468:	4613      	movlt	r3, r2
 801346a:	6033      	str	r3, [r6, #0]
 801346c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013470:	4607      	mov	r7, r0
 8013472:	460c      	mov	r4, r1
 8013474:	b10a      	cbz	r2, 801347a <_printf_common+0x26>
 8013476:	3301      	adds	r3, #1
 8013478:	6033      	str	r3, [r6, #0]
 801347a:	6823      	ldr	r3, [r4, #0]
 801347c:	0699      	lsls	r1, r3, #26
 801347e:	bf42      	ittt	mi
 8013480:	6833      	ldrmi	r3, [r6, #0]
 8013482:	3302      	addmi	r3, #2
 8013484:	6033      	strmi	r3, [r6, #0]
 8013486:	6825      	ldr	r5, [r4, #0]
 8013488:	f015 0506 	ands.w	r5, r5, #6
 801348c:	d106      	bne.n	801349c <_printf_common+0x48>
 801348e:	f104 0a19 	add.w	sl, r4, #25
 8013492:	68e3      	ldr	r3, [r4, #12]
 8013494:	6832      	ldr	r2, [r6, #0]
 8013496:	1a9b      	subs	r3, r3, r2
 8013498:	42ab      	cmp	r3, r5
 801349a:	dc26      	bgt.n	80134ea <_printf_common+0x96>
 801349c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80134a0:	1e13      	subs	r3, r2, #0
 80134a2:	6822      	ldr	r2, [r4, #0]
 80134a4:	bf18      	it	ne
 80134a6:	2301      	movne	r3, #1
 80134a8:	0692      	lsls	r2, r2, #26
 80134aa:	d42b      	bmi.n	8013504 <_printf_common+0xb0>
 80134ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80134b0:	4649      	mov	r1, r9
 80134b2:	4638      	mov	r0, r7
 80134b4:	47c0      	blx	r8
 80134b6:	3001      	adds	r0, #1
 80134b8:	d01e      	beq.n	80134f8 <_printf_common+0xa4>
 80134ba:	6823      	ldr	r3, [r4, #0]
 80134bc:	68e5      	ldr	r5, [r4, #12]
 80134be:	6832      	ldr	r2, [r6, #0]
 80134c0:	f003 0306 	and.w	r3, r3, #6
 80134c4:	2b04      	cmp	r3, #4
 80134c6:	bf08      	it	eq
 80134c8:	1aad      	subeq	r5, r5, r2
 80134ca:	68a3      	ldr	r3, [r4, #8]
 80134cc:	6922      	ldr	r2, [r4, #16]
 80134ce:	bf0c      	ite	eq
 80134d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80134d4:	2500      	movne	r5, #0
 80134d6:	4293      	cmp	r3, r2
 80134d8:	bfc4      	itt	gt
 80134da:	1a9b      	subgt	r3, r3, r2
 80134dc:	18ed      	addgt	r5, r5, r3
 80134de:	2600      	movs	r6, #0
 80134e0:	341a      	adds	r4, #26
 80134e2:	42b5      	cmp	r5, r6
 80134e4:	d11a      	bne.n	801351c <_printf_common+0xc8>
 80134e6:	2000      	movs	r0, #0
 80134e8:	e008      	b.n	80134fc <_printf_common+0xa8>
 80134ea:	2301      	movs	r3, #1
 80134ec:	4652      	mov	r2, sl
 80134ee:	4649      	mov	r1, r9
 80134f0:	4638      	mov	r0, r7
 80134f2:	47c0      	blx	r8
 80134f4:	3001      	adds	r0, #1
 80134f6:	d103      	bne.n	8013500 <_printf_common+0xac>
 80134f8:	f04f 30ff 	mov.w	r0, #4294967295
 80134fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013500:	3501      	adds	r5, #1
 8013502:	e7c6      	b.n	8013492 <_printf_common+0x3e>
 8013504:	18e1      	adds	r1, r4, r3
 8013506:	1c5a      	adds	r2, r3, #1
 8013508:	2030      	movs	r0, #48	; 0x30
 801350a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801350e:	4422      	add	r2, r4
 8013510:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013514:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013518:	3302      	adds	r3, #2
 801351a:	e7c7      	b.n	80134ac <_printf_common+0x58>
 801351c:	2301      	movs	r3, #1
 801351e:	4622      	mov	r2, r4
 8013520:	4649      	mov	r1, r9
 8013522:	4638      	mov	r0, r7
 8013524:	47c0      	blx	r8
 8013526:	3001      	adds	r0, #1
 8013528:	d0e6      	beq.n	80134f8 <_printf_common+0xa4>
 801352a:	3601      	adds	r6, #1
 801352c:	e7d9      	b.n	80134e2 <_printf_common+0x8e>
	...

08013530 <_printf_i>:
 8013530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013534:	460c      	mov	r4, r1
 8013536:	4691      	mov	r9, r2
 8013538:	7e27      	ldrb	r7, [r4, #24]
 801353a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801353c:	2f78      	cmp	r7, #120	; 0x78
 801353e:	4680      	mov	r8, r0
 8013540:	469a      	mov	sl, r3
 8013542:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013546:	d807      	bhi.n	8013558 <_printf_i+0x28>
 8013548:	2f62      	cmp	r7, #98	; 0x62
 801354a:	d80a      	bhi.n	8013562 <_printf_i+0x32>
 801354c:	2f00      	cmp	r7, #0
 801354e:	f000 80d8 	beq.w	8013702 <_printf_i+0x1d2>
 8013552:	2f58      	cmp	r7, #88	; 0x58
 8013554:	f000 80a3 	beq.w	801369e <_printf_i+0x16e>
 8013558:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801355c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013560:	e03a      	b.n	80135d8 <_printf_i+0xa8>
 8013562:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013566:	2b15      	cmp	r3, #21
 8013568:	d8f6      	bhi.n	8013558 <_printf_i+0x28>
 801356a:	a001      	add	r0, pc, #4	; (adr r0, 8013570 <_printf_i+0x40>)
 801356c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8013570:	080135c9 	.word	0x080135c9
 8013574:	080135dd 	.word	0x080135dd
 8013578:	08013559 	.word	0x08013559
 801357c:	08013559 	.word	0x08013559
 8013580:	08013559 	.word	0x08013559
 8013584:	08013559 	.word	0x08013559
 8013588:	080135dd 	.word	0x080135dd
 801358c:	08013559 	.word	0x08013559
 8013590:	08013559 	.word	0x08013559
 8013594:	08013559 	.word	0x08013559
 8013598:	08013559 	.word	0x08013559
 801359c:	080136e9 	.word	0x080136e9
 80135a0:	0801360d 	.word	0x0801360d
 80135a4:	080136cb 	.word	0x080136cb
 80135a8:	08013559 	.word	0x08013559
 80135ac:	08013559 	.word	0x08013559
 80135b0:	0801370b 	.word	0x0801370b
 80135b4:	08013559 	.word	0x08013559
 80135b8:	0801360d 	.word	0x0801360d
 80135bc:	08013559 	.word	0x08013559
 80135c0:	08013559 	.word	0x08013559
 80135c4:	080136d3 	.word	0x080136d3
 80135c8:	680b      	ldr	r3, [r1, #0]
 80135ca:	1d1a      	adds	r2, r3, #4
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	600a      	str	r2, [r1, #0]
 80135d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80135d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80135d8:	2301      	movs	r3, #1
 80135da:	e0a3      	b.n	8013724 <_printf_i+0x1f4>
 80135dc:	6825      	ldr	r5, [r4, #0]
 80135de:	6808      	ldr	r0, [r1, #0]
 80135e0:	062e      	lsls	r6, r5, #24
 80135e2:	f100 0304 	add.w	r3, r0, #4
 80135e6:	d50a      	bpl.n	80135fe <_printf_i+0xce>
 80135e8:	6805      	ldr	r5, [r0, #0]
 80135ea:	600b      	str	r3, [r1, #0]
 80135ec:	2d00      	cmp	r5, #0
 80135ee:	da03      	bge.n	80135f8 <_printf_i+0xc8>
 80135f0:	232d      	movs	r3, #45	; 0x2d
 80135f2:	426d      	negs	r5, r5
 80135f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80135f8:	485e      	ldr	r0, [pc, #376]	; (8013774 <_printf_i+0x244>)
 80135fa:	230a      	movs	r3, #10
 80135fc:	e019      	b.n	8013632 <_printf_i+0x102>
 80135fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8013602:	6805      	ldr	r5, [r0, #0]
 8013604:	600b      	str	r3, [r1, #0]
 8013606:	bf18      	it	ne
 8013608:	b22d      	sxthne	r5, r5
 801360a:	e7ef      	b.n	80135ec <_printf_i+0xbc>
 801360c:	680b      	ldr	r3, [r1, #0]
 801360e:	6825      	ldr	r5, [r4, #0]
 8013610:	1d18      	adds	r0, r3, #4
 8013612:	6008      	str	r0, [r1, #0]
 8013614:	0628      	lsls	r0, r5, #24
 8013616:	d501      	bpl.n	801361c <_printf_i+0xec>
 8013618:	681d      	ldr	r5, [r3, #0]
 801361a:	e002      	b.n	8013622 <_printf_i+0xf2>
 801361c:	0669      	lsls	r1, r5, #25
 801361e:	d5fb      	bpl.n	8013618 <_printf_i+0xe8>
 8013620:	881d      	ldrh	r5, [r3, #0]
 8013622:	4854      	ldr	r0, [pc, #336]	; (8013774 <_printf_i+0x244>)
 8013624:	2f6f      	cmp	r7, #111	; 0x6f
 8013626:	bf0c      	ite	eq
 8013628:	2308      	moveq	r3, #8
 801362a:	230a      	movne	r3, #10
 801362c:	2100      	movs	r1, #0
 801362e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013632:	6866      	ldr	r6, [r4, #4]
 8013634:	60a6      	str	r6, [r4, #8]
 8013636:	2e00      	cmp	r6, #0
 8013638:	bfa2      	ittt	ge
 801363a:	6821      	ldrge	r1, [r4, #0]
 801363c:	f021 0104 	bicge.w	r1, r1, #4
 8013640:	6021      	strge	r1, [r4, #0]
 8013642:	b90d      	cbnz	r5, 8013648 <_printf_i+0x118>
 8013644:	2e00      	cmp	r6, #0
 8013646:	d04d      	beq.n	80136e4 <_printf_i+0x1b4>
 8013648:	4616      	mov	r6, r2
 801364a:	fbb5 f1f3 	udiv	r1, r5, r3
 801364e:	fb03 5711 	mls	r7, r3, r1, r5
 8013652:	5dc7      	ldrb	r7, [r0, r7]
 8013654:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013658:	462f      	mov	r7, r5
 801365a:	42bb      	cmp	r3, r7
 801365c:	460d      	mov	r5, r1
 801365e:	d9f4      	bls.n	801364a <_printf_i+0x11a>
 8013660:	2b08      	cmp	r3, #8
 8013662:	d10b      	bne.n	801367c <_printf_i+0x14c>
 8013664:	6823      	ldr	r3, [r4, #0]
 8013666:	07df      	lsls	r7, r3, #31
 8013668:	d508      	bpl.n	801367c <_printf_i+0x14c>
 801366a:	6923      	ldr	r3, [r4, #16]
 801366c:	6861      	ldr	r1, [r4, #4]
 801366e:	4299      	cmp	r1, r3
 8013670:	bfde      	ittt	le
 8013672:	2330      	movle	r3, #48	; 0x30
 8013674:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013678:	f106 36ff 	addle.w	r6, r6, #4294967295
 801367c:	1b92      	subs	r2, r2, r6
 801367e:	6122      	str	r2, [r4, #16]
 8013680:	f8cd a000 	str.w	sl, [sp]
 8013684:	464b      	mov	r3, r9
 8013686:	aa03      	add	r2, sp, #12
 8013688:	4621      	mov	r1, r4
 801368a:	4640      	mov	r0, r8
 801368c:	f7ff fee2 	bl	8013454 <_printf_common>
 8013690:	3001      	adds	r0, #1
 8013692:	d14c      	bne.n	801372e <_printf_i+0x1fe>
 8013694:	f04f 30ff 	mov.w	r0, #4294967295
 8013698:	b004      	add	sp, #16
 801369a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801369e:	4835      	ldr	r0, [pc, #212]	; (8013774 <_printf_i+0x244>)
 80136a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80136a4:	6823      	ldr	r3, [r4, #0]
 80136a6:	680e      	ldr	r6, [r1, #0]
 80136a8:	061f      	lsls	r7, r3, #24
 80136aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80136ae:	600e      	str	r6, [r1, #0]
 80136b0:	d514      	bpl.n	80136dc <_printf_i+0x1ac>
 80136b2:	07d9      	lsls	r1, r3, #31
 80136b4:	bf44      	itt	mi
 80136b6:	f043 0320 	orrmi.w	r3, r3, #32
 80136ba:	6023      	strmi	r3, [r4, #0]
 80136bc:	b91d      	cbnz	r5, 80136c6 <_printf_i+0x196>
 80136be:	6823      	ldr	r3, [r4, #0]
 80136c0:	f023 0320 	bic.w	r3, r3, #32
 80136c4:	6023      	str	r3, [r4, #0]
 80136c6:	2310      	movs	r3, #16
 80136c8:	e7b0      	b.n	801362c <_printf_i+0xfc>
 80136ca:	6823      	ldr	r3, [r4, #0]
 80136cc:	f043 0320 	orr.w	r3, r3, #32
 80136d0:	6023      	str	r3, [r4, #0]
 80136d2:	2378      	movs	r3, #120	; 0x78
 80136d4:	4828      	ldr	r0, [pc, #160]	; (8013778 <_printf_i+0x248>)
 80136d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80136da:	e7e3      	b.n	80136a4 <_printf_i+0x174>
 80136dc:	065e      	lsls	r6, r3, #25
 80136de:	bf48      	it	mi
 80136e0:	b2ad      	uxthmi	r5, r5
 80136e2:	e7e6      	b.n	80136b2 <_printf_i+0x182>
 80136e4:	4616      	mov	r6, r2
 80136e6:	e7bb      	b.n	8013660 <_printf_i+0x130>
 80136e8:	680b      	ldr	r3, [r1, #0]
 80136ea:	6826      	ldr	r6, [r4, #0]
 80136ec:	6960      	ldr	r0, [r4, #20]
 80136ee:	1d1d      	adds	r5, r3, #4
 80136f0:	600d      	str	r5, [r1, #0]
 80136f2:	0635      	lsls	r5, r6, #24
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	d501      	bpl.n	80136fc <_printf_i+0x1cc>
 80136f8:	6018      	str	r0, [r3, #0]
 80136fa:	e002      	b.n	8013702 <_printf_i+0x1d2>
 80136fc:	0671      	lsls	r1, r6, #25
 80136fe:	d5fb      	bpl.n	80136f8 <_printf_i+0x1c8>
 8013700:	8018      	strh	r0, [r3, #0]
 8013702:	2300      	movs	r3, #0
 8013704:	6123      	str	r3, [r4, #16]
 8013706:	4616      	mov	r6, r2
 8013708:	e7ba      	b.n	8013680 <_printf_i+0x150>
 801370a:	680b      	ldr	r3, [r1, #0]
 801370c:	1d1a      	adds	r2, r3, #4
 801370e:	600a      	str	r2, [r1, #0]
 8013710:	681e      	ldr	r6, [r3, #0]
 8013712:	6862      	ldr	r2, [r4, #4]
 8013714:	2100      	movs	r1, #0
 8013716:	4630      	mov	r0, r6
 8013718:	f7ec fd72 	bl	8000200 <memchr>
 801371c:	b108      	cbz	r0, 8013722 <_printf_i+0x1f2>
 801371e:	1b80      	subs	r0, r0, r6
 8013720:	6060      	str	r0, [r4, #4]
 8013722:	6863      	ldr	r3, [r4, #4]
 8013724:	6123      	str	r3, [r4, #16]
 8013726:	2300      	movs	r3, #0
 8013728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801372c:	e7a8      	b.n	8013680 <_printf_i+0x150>
 801372e:	6923      	ldr	r3, [r4, #16]
 8013730:	4632      	mov	r2, r6
 8013732:	4649      	mov	r1, r9
 8013734:	4640      	mov	r0, r8
 8013736:	47d0      	blx	sl
 8013738:	3001      	adds	r0, #1
 801373a:	d0ab      	beq.n	8013694 <_printf_i+0x164>
 801373c:	6823      	ldr	r3, [r4, #0]
 801373e:	079b      	lsls	r3, r3, #30
 8013740:	d413      	bmi.n	801376a <_printf_i+0x23a>
 8013742:	68e0      	ldr	r0, [r4, #12]
 8013744:	9b03      	ldr	r3, [sp, #12]
 8013746:	4298      	cmp	r0, r3
 8013748:	bfb8      	it	lt
 801374a:	4618      	movlt	r0, r3
 801374c:	e7a4      	b.n	8013698 <_printf_i+0x168>
 801374e:	2301      	movs	r3, #1
 8013750:	4632      	mov	r2, r6
 8013752:	4649      	mov	r1, r9
 8013754:	4640      	mov	r0, r8
 8013756:	47d0      	blx	sl
 8013758:	3001      	adds	r0, #1
 801375a:	d09b      	beq.n	8013694 <_printf_i+0x164>
 801375c:	3501      	adds	r5, #1
 801375e:	68e3      	ldr	r3, [r4, #12]
 8013760:	9903      	ldr	r1, [sp, #12]
 8013762:	1a5b      	subs	r3, r3, r1
 8013764:	42ab      	cmp	r3, r5
 8013766:	dcf2      	bgt.n	801374e <_printf_i+0x21e>
 8013768:	e7eb      	b.n	8013742 <_printf_i+0x212>
 801376a:	2500      	movs	r5, #0
 801376c:	f104 0619 	add.w	r6, r4, #25
 8013770:	e7f5      	b.n	801375e <_printf_i+0x22e>
 8013772:	bf00      	nop
 8013774:	08018ed8 	.word	0x08018ed8
 8013778:	08018ee9 	.word	0x08018ee9

0801377c <_scanf_float>:
 801377c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013780:	b087      	sub	sp, #28
 8013782:	4617      	mov	r7, r2
 8013784:	9303      	str	r3, [sp, #12]
 8013786:	688b      	ldr	r3, [r1, #8]
 8013788:	1e5a      	subs	r2, r3, #1
 801378a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801378e:	bf83      	ittte	hi
 8013790:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013794:	195b      	addhi	r3, r3, r5
 8013796:	9302      	strhi	r3, [sp, #8]
 8013798:	2300      	movls	r3, #0
 801379a:	bf86      	itte	hi
 801379c:	f240 135d 	movwhi	r3, #349	; 0x15d
 80137a0:	608b      	strhi	r3, [r1, #8]
 80137a2:	9302      	strls	r3, [sp, #8]
 80137a4:	680b      	ldr	r3, [r1, #0]
 80137a6:	468b      	mov	fp, r1
 80137a8:	2500      	movs	r5, #0
 80137aa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80137ae:	f84b 3b1c 	str.w	r3, [fp], #28
 80137b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80137b6:	4680      	mov	r8, r0
 80137b8:	460c      	mov	r4, r1
 80137ba:	465e      	mov	r6, fp
 80137bc:	46aa      	mov	sl, r5
 80137be:	46a9      	mov	r9, r5
 80137c0:	9501      	str	r5, [sp, #4]
 80137c2:	68a2      	ldr	r2, [r4, #8]
 80137c4:	b152      	cbz	r2, 80137dc <_scanf_float+0x60>
 80137c6:	683b      	ldr	r3, [r7, #0]
 80137c8:	781b      	ldrb	r3, [r3, #0]
 80137ca:	2b4e      	cmp	r3, #78	; 0x4e
 80137cc:	d864      	bhi.n	8013898 <_scanf_float+0x11c>
 80137ce:	2b40      	cmp	r3, #64	; 0x40
 80137d0:	d83c      	bhi.n	801384c <_scanf_float+0xd0>
 80137d2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80137d6:	b2c8      	uxtb	r0, r1
 80137d8:	280e      	cmp	r0, #14
 80137da:	d93a      	bls.n	8013852 <_scanf_float+0xd6>
 80137dc:	f1b9 0f00 	cmp.w	r9, #0
 80137e0:	d003      	beq.n	80137ea <_scanf_float+0x6e>
 80137e2:	6823      	ldr	r3, [r4, #0]
 80137e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80137e8:	6023      	str	r3, [r4, #0]
 80137ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80137ee:	f1ba 0f01 	cmp.w	sl, #1
 80137f2:	f200 8113 	bhi.w	8013a1c <_scanf_float+0x2a0>
 80137f6:	455e      	cmp	r6, fp
 80137f8:	f200 8105 	bhi.w	8013a06 <_scanf_float+0x28a>
 80137fc:	2501      	movs	r5, #1
 80137fe:	4628      	mov	r0, r5
 8013800:	b007      	add	sp, #28
 8013802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013806:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801380a:	2a0d      	cmp	r2, #13
 801380c:	d8e6      	bhi.n	80137dc <_scanf_float+0x60>
 801380e:	a101      	add	r1, pc, #4	; (adr r1, 8013814 <_scanf_float+0x98>)
 8013810:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013814:	08013953 	.word	0x08013953
 8013818:	080137dd 	.word	0x080137dd
 801381c:	080137dd 	.word	0x080137dd
 8013820:	080137dd 	.word	0x080137dd
 8013824:	080139b3 	.word	0x080139b3
 8013828:	0801398b 	.word	0x0801398b
 801382c:	080137dd 	.word	0x080137dd
 8013830:	080137dd 	.word	0x080137dd
 8013834:	08013961 	.word	0x08013961
 8013838:	080137dd 	.word	0x080137dd
 801383c:	080137dd 	.word	0x080137dd
 8013840:	080137dd 	.word	0x080137dd
 8013844:	080137dd 	.word	0x080137dd
 8013848:	08013919 	.word	0x08013919
 801384c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8013850:	e7db      	b.n	801380a <_scanf_float+0x8e>
 8013852:	290e      	cmp	r1, #14
 8013854:	d8c2      	bhi.n	80137dc <_scanf_float+0x60>
 8013856:	a001      	add	r0, pc, #4	; (adr r0, 801385c <_scanf_float+0xe0>)
 8013858:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801385c:	0801390b 	.word	0x0801390b
 8013860:	080137dd 	.word	0x080137dd
 8013864:	0801390b 	.word	0x0801390b
 8013868:	0801399f 	.word	0x0801399f
 801386c:	080137dd 	.word	0x080137dd
 8013870:	080138b9 	.word	0x080138b9
 8013874:	080138f5 	.word	0x080138f5
 8013878:	080138f5 	.word	0x080138f5
 801387c:	080138f5 	.word	0x080138f5
 8013880:	080138f5 	.word	0x080138f5
 8013884:	080138f5 	.word	0x080138f5
 8013888:	080138f5 	.word	0x080138f5
 801388c:	080138f5 	.word	0x080138f5
 8013890:	080138f5 	.word	0x080138f5
 8013894:	080138f5 	.word	0x080138f5
 8013898:	2b6e      	cmp	r3, #110	; 0x6e
 801389a:	d809      	bhi.n	80138b0 <_scanf_float+0x134>
 801389c:	2b60      	cmp	r3, #96	; 0x60
 801389e:	d8b2      	bhi.n	8013806 <_scanf_float+0x8a>
 80138a0:	2b54      	cmp	r3, #84	; 0x54
 80138a2:	d077      	beq.n	8013994 <_scanf_float+0x218>
 80138a4:	2b59      	cmp	r3, #89	; 0x59
 80138a6:	d199      	bne.n	80137dc <_scanf_float+0x60>
 80138a8:	2d07      	cmp	r5, #7
 80138aa:	d197      	bne.n	80137dc <_scanf_float+0x60>
 80138ac:	2508      	movs	r5, #8
 80138ae:	e029      	b.n	8013904 <_scanf_float+0x188>
 80138b0:	2b74      	cmp	r3, #116	; 0x74
 80138b2:	d06f      	beq.n	8013994 <_scanf_float+0x218>
 80138b4:	2b79      	cmp	r3, #121	; 0x79
 80138b6:	e7f6      	b.n	80138a6 <_scanf_float+0x12a>
 80138b8:	6821      	ldr	r1, [r4, #0]
 80138ba:	05c8      	lsls	r0, r1, #23
 80138bc:	d51a      	bpl.n	80138f4 <_scanf_float+0x178>
 80138be:	9b02      	ldr	r3, [sp, #8]
 80138c0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80138c4:	6021      	str	r1, [r4, #0]
 80138c6:	f109 0901 	add.w	r9, r9, #1
 80138ca:	b11b      	cbz	r3, 80138d4 <_scanf_float+0x158>
 80138cc:	3b01      	subs	r3, #1
 80138ce:	3201      	adds	r2, #1
 80138d0:	9302      	str	r3, [sp, #8]
 80138d2:	60a2      	str	r2, [r4, #8]
 80138d4:	68a3      	ldr	r3, [r4, #8]
 80138d6:	3b01      	subs	r3, #1
 80138d8:	60a3      	str	r3, [r4, #8]
 80138da:	6923      	ldr	r3, [r4, #16]
 80138dc:	3301      	adds	r3, #1
 80138de:	6123      	str	r3, [r4, #16]
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	3b01      	subs	r3, #1
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	607b      	str	r3, [r7, #4]
 80138e8:	f340 8084 	ble.w	80139f4 <_scanf_float+0x278>
 80138ec:	683b      	ldr	r3, [r7, #0]
 80138ee:	3301      	adds	r3, #1
 80138f0:	603b      	str	r3, [r7, #0]
 80138f2:	e766      	b.n	80137c2 <_scanf_float+0x46>
 80138f4:	eb1a 0f05 	cmn.w	sl, r5
 80138f8:	f47f af70 	bne.w	80137dc <_scanf_float+0x60>
 80138fc:	6822      	ldr	r2, [r4, #0]
 80138fe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8013902:	6022      	str	r2, [r4, #0]
 8013904:	f806 3b01 	strb.w	r3, [r6], #1
 8013908:	e7e4      	b.n	80138d4 <_scanf_float+0x158>
 801390a:	6822      	ldr	r2, [r4, #0]
 801390c:	0610      	lsls	r0, r2, #24
 801390e:	f57f af65 	bpl.w	80137dc <_scanf_float+0x60>
 8013912:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013916:	e7f4      	b.n	8013902 <_scanf_float+0x186>
 8013918:	f1ba 0f00 	cmp.w	sl, #0
 801391c:	d10e      	bne.n	801393c <_scanf_float+0x1c0>
 801391e:	f1b9 0f00 	cmp.w	r9, #0
 8013922:	d10e      	bne.n	8013942 <_scanf_float+0x1c6>
 8013924:	6822      	ldr	r2, [r4, #0]
 8013926:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801392a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801392e:	d108      	bne.n	8013942 <_scanf_float+0x1c6>
 8013930:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013934:	6022      	str	r2, [r4, #0]
 8013936:	f04f 0a01 	mov.w	sl, #1
 801393a:	e7e3      	b.n	8013904 <_scanf_float+0x188>
 801393c:	f1ba 0f02 	cmp.w	sl, #2
 8013940:	d055      	beq.n	80139ee <_scanf_float+0x272>
 8013942:	2d01      	cmp	r5, #1
 8013944:	d002      	beq.n	801394c <_scanf_float+0x1d0>
 8013946:	2d04      	cmp	r5, #4
 8013948:	f47f af48 	bne.w	80137dc <_scanf_float+0x60>
 801394c:	3501      	adds	r5, #1
 801394e:	b2ed      	uxtb	r5, r5
 8013950:	e7d8      	b.n	8013904 <_scanf_float+0x188>
 8013952:	f1ba 0f01 	cmp.w	sl, #1
 8013956:	f47f af41 	bne.w	80137dc <_scanf_float+0x60>
 801395a:	f04f 0a02 	mov.w	sl, #2
 801395e:	e7d1      	b.n	8013904 <_scanf_float+0x188>
 8013960:	b97d      	cbnz	r5, 8013982 <_scanf_float+0x206>
 8013962:	f1b9 0f00 	cmp.w	r9, #0
 8013966:	f47f af3c 	bne.w	80137e2 <_scanf_float+0x66>
 801396a:	6822      	ldr	r2, [r4, #0]
 801396c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013970:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013974:	f47f af39 	bne.w	80137ea <_scanf_float+0x6e>
 8013978:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801397c:	6022      	str	r2, [r4, #0]
 801397e:	2501      	movs	r5, #1
 8013980:	e7c0      	b.n	8013904 <_scanf_float+0x188>
 8013982:	2d03      	cmp	r5, #3
 8013984:	d0e2      	beq.n	801394c <_scanf_float+0x1d0>
 8013986:	2d05      	cmp	r5, #5
 8013988:	e7de      	b.n	8013948 <_scanf_float+0x1cc>
 801398a:	2d02      	cmp	r5, #2
 801398c:	f47f af26 	bne.w	80137dc <_scanf_float+0x60>
 8013990:	2503      	movs	r5, #3
 8013992:	e7b7      	b.n	8013904 <_scanf_float+0x188>
 8013994:	2d06      	cmp	r5, #6
 8013996:	f47f af21 	bne.w	80137dc <_scanf_float+0x60>
 801399a:	2507      	movs	r5, #7
 801399c:	e7b2      	b.n	8013904 <_scanf_float+0x188>
 801399e:	6822      	ldr	r2, [r4, #0]
 80139a0:	0591      	lsls	r1, r2, #22
 80139a2:	f57f af1b 	bpl.w	80137dc <_scanf_float+0x60>
 80139a6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80139aa:	6022      	str	r2, [r4, #0]
 80139ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80139b0:	e7a8      	b.n	8013904 <_scanf_float+0x188>
 80139b2:	6822      	ldr	r2, [r4, #0]
 80139b4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80139b8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80139bc:	d006      	beq.n	80139cc <_scanf_float+0x250>
 80139be:	0550      	lsls	r0, r2, #21
 80139c0:	f57f af0c 	bpl.w	80137dc <_scanf_float+0x60>
 80139c4:	f1b9 0f00 	cmp.w	r9, #0
 80139c8:	f43f af0f 	beq.w	80137ea <_scanf_float+0x6e>
 80139cc:	0591      	lsls	r1, r2, #22
 80139ce:	bf58      	it	pl
 80139d0:	9901      	ldrpl	r1, [sp, #4]
 80139d2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80139d6:	bf58      	it	pl
 80139d8:	eba9 0101 	subpl.w	r1, r9, r1
 80139dc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80139e0:	bf58      	it	pl
 80139e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80139e6:	6022      	str	r2, [r4, #0]
 80139e8:	f04f 0900 	mov.w	r9, #0
 80139ec:	e78a      	b.n	8013904 <_scanf_float+0x188>
 80139ee:	f04f 0a03 	mov.w	sl, #3
 80139f2:	e787      	b.n	8013904 <_scanf_float+0x188>
 80139f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80139f8:	4639      	mov	r1, r7
 80139fa:	4640      	mov	r0, r8
 80139fc:	4798      	blx	r3
 80139fe:	2800      	cmp	r0, #0
 8013a00:	f43f aedf 	beq.w	80137c2 <_scanf_float+0x46>
 8013a04:	e6ea      	b.n	80137dc <_scanf_float+0x60>
 8013a06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013a0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013a0e:	463a      	mov	r2, r7
 8013a10:	4640      	mov	r0, r8
 8013a12:	4798      	blx	r3
 8013a14:	6923      	ldr	r3, [r4, #16]
 8013a16:	3b01      	subs	r3, #1
 8013a18:	6123      	str	r3, [r4, #16]
 8013a1a:	e6ec      	b.n	80137f6 <_scanf_float+0x7a>
 8013a1c:	1e6b      	subs	r3, r5, #1
 8013a1e:	2b06      	cmp	r3, #6
 8013a20:	d825      	bhi.n	8013a6e <_scanf_float+0x2f2>
 8013a22:	2d02      	cmp	r5, #2
 8013a24:	d836      	bhi.n	8013a94 <_scanf_float+0x318>
 8013a26:	455e      	cmp	r6, fp
 8013a28:	f67f aee8 	bls.w	80137fc <_scanf_float+0x80>
 8013a2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013a30:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013a34:	463a      	mov	r2, r7
 8013a36:	4640      	mov	r0, r8
 8013a38:	4798      	blx	r3
 8013a3a:	6923      	ldr	r3, [r4, #16]
 8013a3c:	3b01      	subs	r3, #1
 8013a3e:	6123      	str	r3, [r4, #16]
 8013a40:	e7f1      	b.n	8013a26 <_scanf_float+0x2aa>
 8013a42:	9802      	ldr	r0, [sp, #8]
 8013a44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013a48:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8013a4c:	9002      	str	r0, [sp, #8]
 8013a4e:	463a      	mov	r2, r7
 8013a50:	4640      	mov	r0, r8
 8013a52:	4798      	blx	r3
 8013a54:	6923      	ldr	r3, [r4, #16]
 8013a56:	3b01      	subs	r3, #1
 8013a58:	6123      	str	r3, [r4, #16]
 8013a5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013a5e:	fa5f fa8a 	uxtb.w	sl, sl
 8013a62:	f1ba 0f02 	cmp.w	sl, #2
 8013a66:	d1ec      	bne.n	8013a42 <_scanf_float+0x2c6>
 8013a68:	3d03      	subs	r5, #3
 8013a6a:	b2ed      	uxtb	r5, r5
 8013a6c:	1b76      	subs	r6, r6, r5
 8013a6e:	6823      	ldr	r3, [r4, #0]
 8013a70:	05da      	lsls	r2, r3, #23
 8013a72:	d52f      	bpl.n	8013ad4 <_scanf_float+0x358>
 8013a74:	055b      	lsls	r3, r3, #21
 8013a76:	d510      	bpl.n	8013a9a <_scanf_float+0x31e>
 8013a78:	455e      	cmp	r6, fp
 8013a7a:	f67f aebf 	bls.w	80137fc <_scanf_float+0x80>
 8013a7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013a82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013a86:	463a      	mov	r2, r7
 8013a88:	4640      	mov	r0, r8
 8013a8a:	4798      	blx	r3
 8013a8c:	6923      	ldr	r3, [r4, #16]
 8013a8e:	3b01      	subs	r3, #1
 8013a90:	6123      	str	r3, [r4, #16]
 8013a92:	e7f1      	b.n	8013a78 <_scanf_float+0x2fc>
 8013a94:	46aa      	mov	sl, r5
 8013a96:	9602      	str	r6, [sp, #8]
 8013a98:	e7df      	b.n	8013a5a <_scanf_float+0x2de>
 8013a9a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8013a9e:	6923      	ldr	r3, [r4, #16]
 8013aa0:	2965      	cmp	r1, #101	; 0x65
 8013aa2:	f103 33ff 	add.w	r3, r3, #4294967295
 8013aa6:	f106 35ff 	add.w	r5, r6, #4294967295
 8013aaa:	6123      	str	r3, [r4, #16]
 8013aac:	d00c      	beq.n	8013ac8 <_scanf_float+0x34c>
 8013aae:	2945      	cmp	r1, #69	; 0x45
 8013ab0:	d00a      	beq.n	8013ac8 <_scanf_float+0x34c>
 8013ab2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013ab6:	463a      	mov	r2, r7
 8013ab8:	4640      	mov	r0, r8
 8013aba:	4798      	blx	r3
 8013abc:	6923      	ldr	r3, [r4, #16]
 8013abe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8013ac2:	3b01      	subs	r3, #1
 8013ac4:	1eb5      	subs	r5, r6, #2
 8013ac6:	6123      	str	r3, [r4, #16]
 8013ac8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013acc:	463a      	mov	r2, r7
 8013ace:	4640      	mov	r0, r8
 8013ad0:	4798      	blx	r3
 8013ad2:	462e      	mov	r6, r5
 8013ad4:	6825      	ldr	r5, [r4, #0]
 8013ad6:	f015 0510 	ands.w	r5, r5, #16
 8013ada:	d158      	bne.n	8013b8e <_scanf_float+0x412>
 8013adc:	7035      	strb	r5, [r6, #0]
 8013ade:	6823      	ldr	r3, [r4, #0]
 8013ae0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013ae8:	d11c      	bne.n	8013b24 <_scanf_float+0x3a8>
 8013aea:	9b01      	ldr	r3, [sp, #4]
 8013aec:	454b      	cmp	r3, r9
 8013aee:	eba3 0209 	sub.w	r2, r3, r9
 8013af2:	d124      	bne.n	8013b3e <_scanf_float+0x3c2>
 8013af4:	2200      	movs	r2, #0
 8013af6:	4659      	mov	r1, fp
 8013af8:	4640      	mov	r0, r8
 8013afa:	f000 ffc7 	bl	8014a8c <_strtod_r>
 8013afe:	9b03      	ldr	r3, [sp, #12]
 8013b00:	6821      	ldr	r1, [r4, #0]
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	f011 0f02 	tst.w	r1, #2
 8013b08:	ec57 6b10 	vmov	r6, r7, d0
 8013b0c:	f103 0204 	add.w	r2, r3, #4
 8013b10:	d020      	beq.n	8013b54 <_scanf_float+0x3d8>
 8013b12:	9903      	ldr	r1, [sp, #12]
 8013b14:	600a      	str	r2, [r1, #0]
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	e9c3 6700 	strd	r6, r7, [r3]
 8013b1c:	68e3      	ldr	r3, [r4, #12]
 8013b1e:	3301      	adds	r3, #1
 8013b20:	60e3      	str	r3, [r4, #12]
 8013b22:	e66c      	b.n	80137fe <_scanf_float+0x82>
 8013b24:	9b04      	ldr	r3, [sp, #16]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d0e4      	beq.n	8013af4 <_scanf_float+0x378>
 8013b2a:	9905      	ldr	r1, [sp, #20]
 8013b2c:	230a      	movs	r3, #10
 8013b2e:	462a      	mov	r2, r5
 8013b30:	3101      	adds	r1, #1
 8013b32:	4640      	mov	r0, r8
 8013b34:	f001 f834 	bl	8014ba0 <_strtol_r>
 8013b38:	9b04      	ldr	r3, [sp, #16]
 8013b3a:	9e05      	ldr	r6, [sp, #20]
 8013b3c:	1ac2      	subs	r2, r0, r3
 8013b3e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013b42:	429e      	cmp	r6, r3
 8013b44:	bf28      	it	cs
 8013b46:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8013b4a:	4912      	ldr	r1, [pc, #72]	; (8013b94 <_scanf_float+0x418>)
 8013b4c:	4630      	mov	r0, r6
 8013b4e:	f000 f8c9 	bl	8013ce4 <siprintf>
 8013b52:	e7cf      	b.n	8013af4 <_scanf_float+0x378>
 8013b54:	f011 0f04 	tst.w	r1, #4
 8013b58:	9903      	ldr	r1, [sp, #12]
 8013b5a:	600a      	str	r2, [r1, #0]
 8013b5c:	d1db      	bne.n	8013b16 <_scanf_float+0x39a>
 8013b5e:	f8d3 8000 	ldr.w	r8, [r3]
 8013b62:	ee10 2a10 	vmov	r2, s0
 8013b66:	ee10 0a10 	vmov	r0, s0
 8013b6a:	463b      	mov	r3, r7
 8013b6c:	4639      	mov	r1, r7
 8013b6e:	f7ec ffed 	bl	8000b4c <__aeabi_dcmpun>
 8013b72:	b128      	cbz	r0, 8013b80 <_scanf_float+0x404>
 8013b74:	4808      	ldr	r0, [pc, #32]	; (8013b98 <_scanf_float+0x41c>)
 8013b76:	f000 f8af 	bl	8013cd8 <nanf>
 8013b7a:	ed88 0a00 	vstr	s0, [r8]
 8013b7e:	e7cd      	b.n	8013b1c <_scanf_float+0x3a0>
 8013b80:	4630      	mov	r0, r6
 8013b82:	4639      	mov	r1, r7
 8013b84:	f7ed f840 	bl	8000c08 <__aeabi_d2f>
 8013b88:	f8c8 0000 	str.w	r0, [r8]
 8013b8c:	e7c6      	b.n	8013b1c <_scanf_float+0x3a0>
 8013b8e:	2500      	movs	r5, #0
 8013b90:	e635      	b.n	80137fe <_scanf_float+0x82>
 8013b92:	bf00      	nop
 8013b94:	08018efa 	.word	0x08018efa
 8013b98:	0801922b 	.word	0x0801922b

08013b9c <iprintf>:
 8013b9c:	b40f      	push	{r0, r1, r2, r3}
 8013b9e:	4b0a      	ldr	r3, [pc, #40]	; (8013bc8 <iprintf+0x2c>)
 8013ba0:	b513      	push	{r0, r1, r4, lr}
 8013ba2:	681c      	ldr	r4, [r3, #0]
 8013ba4:	b124      	cbz	r4, 8013bb0 <iprintf+0x14>
 8013ba6:	69a3      	ldr	r3, [r4, #24]
 8013ba8:	b913      	cbnz	r3, 8013bb0 <iprintf+0x14>
 8013baa:	4620      	mov	r0, r4
 8013bac:	f7ff f846 	bl	8012c3c <__sinit>
 8013bb0:	ab05      	add	r3, sp, #20
 8013bb2:	9a04      	ldr	r2, [sp, #16]
 8013bb4:	68a1      	ldr	r1, [r4, #8]
 8013bb6:	9301      	str	r3, [sp, #4]
 8013bb8:	4620      	mov	r0, r4
 8013bba:	f003 fcd5 	bl	8017568 <_vfiprintf_r>
 8013bbe:	b002      	add	sp, #8
 8013bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013bc4:	b004      	add	sp, #16
 8013bc6:	4770      	bx	lr
 8013bc8:	20000080 	.word	0x20000080

08013bcc <_puts_r>:
 8013bcc:	b570      	push	{r4, r5, r6, lr}
 8013bce:	460e      	mov	r6, r1
 8013bd0:	4605      	mov	r5, r0
 8013bd2:	b118      	cbz	r0, 8013bdc <_puts_r+0x10>
 8013bd4:	6983      	ldr	r3, [r0, #24]
 8013bd6:	b90b      	cbnz	r3, 8013bdc <_puts_r+0x10>
 8013bd8:	f7ff f830 	bl	8012c3c <__sinit>
 8013bdc:	69ab      	ldr	r3, [r5, #24]
 8013bde:	68ac      	ldr	r4, [r5, #8]
 8013be0:	b913      	cbnz	r3, 8013be8 <_puts_r+0x1c>
 8013be2:	4628      	mov	r0, r5
 8013be4:	f7ff f82a 	bl	8012c3c <__sinit>
 8013be8:	4b2c      	ldr	r3, [pc, #176]	; (8013c9c <_puts_r+0xd0>)
 8013bea:	429c      	cmp	r4, r3
 8013bec:	d120      	bne.n	8013c30 <_puts_r+0x64>
 8013bee:	686c      	ldr	r4, [r5, #4]
 8013bf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013bf2:	07db      	lsls	r3, r3, #31
 8013bf4:	d405      	bmi.n	8013c02 <_puts_r+0x36>
 8013bf6:	89a3      	ldrh	r3, [r4, #12]
 8013bf8:	0598      	lsls	r0, r3, #22
 8013bfa:	d402      	bmi.n	8013c02 <_puts_r+0x36>
 8013bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013bfe:	f7ff f8e0 	bl	8012dc2 <__retarget_lock_acquire_recursive>
 8013c02:	89a3      	ldrh	r3, [r4, #12]
 8013c04:	0719      	lsls	r1, r3, #28
 8013c06:	d51d      	bpl.n	8013c44 <_puts_r+0x78>
 8013c08:	6923      	ldr	r3, [r4, #16]
 8013c0a:	b1db      	cbz	r3, 8013c44 <_puts_r+0x78>
 8013c0c:	3e01      	subs	r6, #1
 8013c0e:	68a3      	ldr	r3, [r4, #8]
 8013c10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013c14:	3b01      	subs	r3, #1
 8013c16:	60a3      	str	r3, [r4, #8]
 8013c18:	bb39      	cbnz	r1, 8013c6a <_puts_r+0x9e>
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	da38      	bge.n	8013c90 <_puts_r+0xc4>
 8013c1e:	4622      	mov	r2, r4
 8013c20:	210a      	movs	r1, #10
 8013c22:	4628      	mov	r0, r5
 8013c24:	f001 f802 	bl	8014c2c <__swbuf_r>
 8013c28:	3001      	adds	r0, #1
 8013c2a:	d011      	beq.n	8013c50 <_puts_r+0x84>
 8013c2c:	250a      	movs	r5, #10
 8013c2e:	e011      	b.n	8013c54 <_puts_r+0x88>
 8013c30:	4b1b      	ldr	r3, [pc, #108]	; (8013ca0 <_puts_r+0xd4>)
 8013c32:	429c      	cmp	r4, r3
 8013c34:	d101      	bne.n	8013c3a <_puts_r+0x6e>
 8013c36:	68ac      	ldr	r4, [r5, #8]
 8013c38:	e7da      	b.n	8013bf0 <_puts_r+0x24>
 8013c3a:	4b1a      	ldr	r3, [pc, #104]	; (8013ca4 <_puts_r+0xd8>)
 8013c3c:	429c      	cmp	r4, r3
 8013c3e:	bf08      	it	eq
 8013c40:	68ec      	ldreq	r4, [r5, #12]
 8013c42:	e7d5      	b.n	8013bf0 <_puts_r+0x24>
 8013c44:	4621      	mov	r1, r4
 8013c46:	4628      	mov	r0, r5
 8013c48:	f001 f854 	bl	8014cf4 <__swsetup_r>
 8013c4c:	2800      	cmp	r0, #0
 8013c4e:	d0dd      	beq.n	8013c0c <_puts_r+0x40>
 8013c50:	f04f 35ff 	mov.w	r5, #4294967295
 8013c54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013c56:	07da      	lsls	r2, r3, #31
 8013c58:	d405      	bmi.n	8013c66 <_puts_r+0x9a>
 8013c5a:	89a3      	ldrh	r3, [r4, #12]
 8013c5c:	059b      	lsls	r3, r3, #22
 8013c5e:	d402      	bmi.n	8013c66 <_puts_r+0x9a>
 8013c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013c62:	f7ff f8af 	bl	8012dc4 <__retarget_lock_release_recursive>
 8013c66:	4628      	mov	r0, r5
 8013c68:	bd70      	pop	{r4, r5, r6, pc}
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	da04      	bge.n	8013c78 <_puts_r+0xac>
 8013c6e:	69a2      	ldr	r2, [r4, #24]
 8013c70:	429a      	cmp	r2, r3
 8013c72:	dc06      	bgt.n	8013c82 <_puts_r+0xb6>
 8013c74:	290a      	cmp	r1, #10
 8013c76:	d004      	beq.n	8013c82 <_puts_r+0xb6>
 8013c78:	6823      	ldr	r3, [r4, #0]
 8013c7a:	1c5a      	adds	r2, r3, #1
 8013c7c:	6022      	str	r2, [r4, #0]
 8013c7e:	7019      	strb	r1, [r3, #0]
 8013c80:	e7c5      	b.n	8013c0e <_puts_r+0x42>
 8013c82:	4622      	mov	r2, r4
 8013c84:	4628      	mov	r0, r5
 8013c86:	f000 ffd1 	bl	8014c2c <__swbuf_r>
 8013c8a:	3001      	adds	r0, #1
 8013c8c:	d1bf      	bne.n	8013c0e <_puts_r+0x42>
 8013c8e:	e7df      	b.n	8013c50 <_puts_r+0x84>
 8013c90:	6823      	ldr	r3, [r4, #0]
 8013c92:	250a      	movs	r5, #10
 8013c94:	1c5a      	adds	r2, r3, #1
 8013c96:	6022      	str	r2, [r4, #0]
 8013c98:	701d      	strb	r5, [r3, #0]
 8013c9a:	e7db      	b.n	8013c54 <_puts_r+0x88>
 8013c9c:	08018e84 	.word	0x08018e84
 8013ca0:	08018ea4 	.word	0x08018ea4
 8013ca4:	08018e64 	.word	0x08018e64

08013ca8 <puts>:
 8013ca8:	4b02      	ldr	r3, [pc, #8]	; (8013cb4 <puts+0xc>)
 8013caa:	4601      	mov	r1, r0
 8013cac:	6818      	ldr	r0, [r3, #0]
 8013cae:	f7ff bf8d 	b.w	8013bcc <_puts_r>
 8013cb2:	bf00      	nop
 8013cb4:	20000080 	.word	0x20000080

08013cb8 <_sbrk_r>:
 8013cb8:	b538      	push	{r3, r4, r5, lr}
 8013cba:	4d06      	ldr	r5, [pc, #24]	; (8013cd4 <_sbrk_r+0x1c>)
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	4604      	mov	r4, r0
 8013cc0:	4608      	mov	r0, r1
 8013cc2:	602b      	str	r3, [r5, #0]
 8013cc4:	f004 f8fc 	bl	8017ec0 <_sbrk>
 8013cc8:	1c43      	adds	r3, r0, #1
 8013cca:	d102      	bne.n	8013cd2 <_sbrk_r+0x1a>
 8013ccc:	682b      	ldr	r3, [r5, #0]
 8013cce:	b103      	cbz	r3, 8013cd2 <_sbrk_r+0x1a>
 8013cd0:	6023      	str	r3, [r4, #0]
 8013cd2:	bd38      	pop	{r3, r4, r5, pc}
 8013cd4:	20006920 	.word	0x20006920

08013cd8 <nanf>:
 8013cd8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013ce0 <nanf+0x8>
 8013cdc:	4770      	bx	lr
 8013cde:	bf00      	nop
 8013ce0:	7fc00000 	.word	0x7fc00000

08013ce4 <siprintf>:
 8013ce4:	b40e      	push	{r1, r2, r3}
 8013ce6:	b500      	push	{lr}
 8013ce8:	b09c      	sub	sp, #112	; 0x70
 8013cea:	ab1d      	add	r3, sp, #116	; 0x74
 8013cec:	9002      	str	r0, [sp, #8]
 8013cee:	9006      	str	r0, [sp, #24]
 8013cf0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013cf4:	4809      	ldr	r0, [pc, #36]	; (8013d1c <siprintf+0x38>)
 8013cf6:	9107      	str	r1, [sp, #28]
 8013cf8:	9104      	str	r1, [sp, #16]
 8013cfa:	4909      	ldr	r1, [pc, #36]	; (8013d20 <siprintf+0x3c>)
 8013cfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d00:	9105      	str	r1, [sp, #20]
 8013d02:	6800      	ldr	r0, [r0, #0]
 8013d04:	9301      	str	r3, [sp, #4]
 8013d06:	a902      	add	r1, sp, #8
 8013d08:	f003 f932 	bl	8016f70 <_svfiprintf_r>
 8013d0c:	9b02      	ldr	r3, [sp, #8]
 8013d0e:	2200      	movs	r2, #0
 8013d10:	701a      	strb	r2, [r3, #0]
 8013d12:	b01c      	add	sp, #112	; 0x70
 8013d14:	f85d eb04 	ldr.w	lr, [sp], #4
 8013d18:	b003      	add	sp, #12
 8013d1a:	4770      	bx	lr
 8013d1c:	20000080 	.word	0x20000080
 8013d20:	ffff0208 	.word	0xffff0208

08013d24 <siscanf>:
 8013d24:	b40e      	push	{r1, r2, r3}
 8013d26:	b510      	push	{r4, lr}
 8013d28:	b09f      	sub	sp, #124	; 0x7c
 8013d2a:	ac21      	add	r4, sp, #132	; 0x84
 8013d2c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8013d30:	f854 2b04 	ldr.w	r2, [r4], #4
 8013d34:	9201      	str	r2, [sp, #4]
 8013d36:	f8ad 101c 	strh.w	r1, [sp, #28]
 8013d3a:	9004      	str	r0, [sp, #16]
 8013d3c:	9008      	str	r0, [sp, #32]
 8013d3e:	f7ec fa57 	bl	80001f0 <strlen>
 8013d42:	4b0c      	ldr	r3, [pc, #48]	; (8013d74 <siscanf+0x50>)
 8013d44:	9005      	str	r0, [sp, #20]
 8013d46:	9009      	str	r0, [sp, #36]	; 0x24
 8013d48:	930d      	str	r3, [sp, #52]	; 0x34
 8013d4a:	480b      	ldr	r0, [pc, #44]	; (8013d78 <siscanf+0x54>)
 8013d4c:	9a01      	ldr	r2, [sp, #4]
 8013d4e:	6800      	ldr	r0, [r0, #0]
 8013d50:	9403      	str	r4, [sp, #12]
 8013d52:	2300      	movs	r3, #0
 8013d54:	9311      	str	r3, [sp, #68]	; 0x44
 8013d56:	9316      	str	r3, [sp, #88]	; 0x58
 8013d58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013d5c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013d60:	a904      	add	r1, sp, #16
 8013d62:	4623      	mov	r3, r4
 8013d64:	f003 fa5e 	bl	8017224 <__ssvfiscanf_r>
 8013d68:	b01f      	add	sp, #124	; 0x7c
 8013d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d6e:	b003      	add	sp, #12
 8013d70:	4770      	bx	lr
 8013d72:	bf00      	nop
 8013d74:	08013d9f 	.word	0x08013d9f
 8013d78:	20000080 	.word	0x20000080

08013d7c <__sread>:
 8013d7c:	b510      	push	{r4, lr}
 8013d7e:	460c      	mov	r4, r1
 8013d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d84:	f003 fe6c 	bl	8017a60 <_read_r>
 8013d88:	2800      	cmp	r0, #0
 8013d8a:	bfab      	itete	ge
 8013d8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013d8e:	89a3      	ldrhlt	r3, [r4, #12]
 8013d90:	181b      	addge	r3, r3, r0
 8013d92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013d96:	bfac      	ite	ge
 8013d98:	6563      	strge	r3, [r4, #84]	; 0x54
 8013d9a:	81a3      	strhlt	r3, [r4, #12]
 8013d9c:	bd10      	pop	{r4, pc}

08013d9e <__seofread>:
 8013d9e:	2000      	movs	r0, #0
 8013da0:	4770      	bx	lr

08013da2 <__swrite>:
 8013da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013da6:	461f      	mov	r7, r3
 8013da8:	898b      	ldrh	r3, [r1, #12]
 8013daa:	05db      	lsls	r3, r3, #23
 8013dac:	4605      	mov	r5, r0
 8013dae:	460c      	mov	r4, r1
 8013db0:	4616      	mov	r6, r2
 8013db2:	d505      	bpl.n	8013dc0 <__swrite+0x1e>
 8013db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013db8:	2302      	movs	r3, #2
 8013dba:	2200      	movs	r2, #0
 8013dbc:	f002 fac6 	bl	801634c <_lseek_r>
 8013dc0:	89a3      	ldrh	r3, [r4, #12]
 8013dc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013dc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013dca:	81a3      	strh	r3, [r4, #12]
 8013dcc:	4632      	mov	r2, r6
 8013dce:	463b      	mov	r3, r7
 8013dd0:	4628      	mov	r0, r5
 8013dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013dd6:	f000 bf7b 	b.w	8014cd0 <_write_r>

08013dda <__sseek>:
 8013dda:	b510      	push	{r4, lr}
 8013ddc:	460c      	mov	r4, r1
 8013dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013de2:	f002 fab3 	bl	801634c <_lseek_r>
 8013de6:	1c43      	adds	r3, r0, #1
 8013de8:	89a3      	ldrh	r3, [r4, #12]
 8013dea:	bf15      	itete	ne
 8013dec:	6560      	strne	r0, [r4, #84]	; 0x54
 8013dee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013df2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013df6:	81a3      	strheq	r3, [r4, #12]
 8013df8:	bf18      	it	ne
 8013dfa:	81a3      	strhne	r3, [r4, #12]
 8013dfc:	bd10      	pop	{r4, pc}

08013dfe <__sclose>:
 8013dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e02:	f000 bfe5 	b.w	8014dd0 <_close_r>

08013e06 <strcpy>:
 8013e06:	4603      	mov	r3, r0
 8013e08:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013e0c:	f803 2b01 	strb.w	r2, [r3], #1
 8013e10:	2a00      	cmp	r2, #0
 8013e12:	d1f9      	bne.n	8013e08 <strcpy+0x2>
 8013e14:	4770      	bx	lr

08013e16 <strncmp>:
 8013e16:	b510      	push	{r4, lr}
 8013e18:	b16a      	cbz	r2, 8013e36 <strncmp+0x20>
 8013e1a:	3901      	subs	r1, #1
 8013e1c:	1884      	adds	r4, r0, r2
 8013e1e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013e22:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013e26:	4293      	cmp	r3, r2
 8013e28:	d103      	bne.n	8013e32 <strncmp+0x1c>
 8013e2a:	42a0      	cmp	r0, r4
 8013e2c:	d001      	beq.n	8013e32 <strncmp+0x1c>
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d1f5      	bne.n	8013e1e <strncmp+0x8>
 8013e32:	1a98      	subs	r0, r3, r2
 8013e34:	bd10      	pop	{r4, pc}
 8013e36:	4610      	mov	r0, r2
 8013e38:	e7fc      	b.n	8013e34 <strncmp+0x1e>

08013e3a <sulp>:
 8013e3a:	b570      	push	{r4, r5, r6, lr}
 8013e3c:	4604      	mov	r4, r0
 8013e3e:	460d      	mov	r5, r1
 8013e40:	ec45 4b10 	vmov	d0, r4, r5
 8013e44:	4616      	mov	r6, r2
 8013e46:	f002 fe89 	bl	8016b5c <__ulp>
 8013e4a:	ec51 0b10 	vmov	r0, r1, d0
 8013e4e:	b17e      	cbz	r6, 8013e70 <sulp+0x36>
 8013e50:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013e54:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	dd09      	ble.n	8013e70 <sulp+0x36>
 8013e5c:	051b      	lsls	r3, r3, #20
 8013e5e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013e62:	2400      	movs	r4, #0
 8013e64:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013e68:	4622      	mov	r2, r4
 8013e6a:	462b      	mov	r3, r5
 8013e6c:	f7ec fbd4 	bl	8000618 <__aeabi_dmul>
 8013e70:	bd70      	pop	{r4, r5, r6, pc}
 8013e72:	0000      	movs	r0, r0
 8013e74:	0000      	movs	r0, r0
	...

08013e78 <_strtod_l>:
 8013e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e7c:	b0a3      	sub	sp, #140	; 0x8c
 8013e7e:	461f      	mov	r7, r3
 8013e80:	2300      	movs	r3, #0
 8013e82:	931e      	str	r3, [sp, #120]	; 0x78
 8013e84:	4ba4      	ldr	r3, [pc, #656]	; (8014118 <_strtod_l+0x2a0>)
 8013e86:	9219      	str	r2, [sp, #100]	; 0x64
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	9307      	str	r3, [sp, #28]
 8013e8c:	4604      	mov	r4, r0
 8013e8e:	4618      	mov	r0, r3
 8013e90:	4688      	mov	r8, r1
 8013e92:	f7ec f9ad 	bl	80001f0 <strlen>
 8013e96:	f04f 0a00 	mov.w	sl, #0
 8013e9a:	4605      	mov	r5, r0
 8013e9c:	f04f 0b00 	mov.w	fp, #0
 8013ea0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8013ea4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013ea6:	781a      	ldrb	r2, [r3, #0]
 8013ea8:	2a2b      	cmp	r2, #43	; 0x2b
 8013eaa:	d04c      	beq.n	8013f46 <_strtod_l+0xce>
 8013eac:	d839      	bhi.n	8013f22 <_strtod_l+0xaa>
 8013eae:	2a0d      	cmp	r2, #13
 8013eb0:	d832      	bhi.n	8013f18 <_strtod_l+0xa0>
 8013eb2:	2a08      	cmp	r2, #8
 8013eb4:	d832      	bhi.n	8013f1c <_strtod_l+0xa4>
 8013eb6:	2a00      	cmp	r2, #0
 8013eb8:	d03c      	beq.n	8013f34 <_strtod_l+0xbc>
 8013eba:	2300      	movs	r3, #0
 8013ebc:	930e      	str	r3, [sp, #56]	; 0x38
 8013ebe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8013ec0:	7833      	ldrb	r3, [r6, #0]
 8013ec2:	2b30      	cmp	r3, #48	; 0x30
 8013ec4:	f040 80b4 	bne.w	8014030 <_strtod_l+0x1b8>
 8013ec8:	7873      	ldrb	r3, [r6, #1]
 8013eca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013ece:	2b58      	cmp	r3, #88	; 0x58
 8013ed0:	d16c      	bne.n	8013fac <_strtod_l+0x134>
 8013ed2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013ed4:	9301      	str	r3, [sp, #4]
 8013ed6:	ab1e      	add	r3, sp, #120	; 0x78
 8013ed8:	9702      	str	r7, [sp, #8]
 8013eda:	9300      	str	r3, [sp, #0]
 8013edc:	4a8f      	ldr	r2, [pc, #572]	; (801411c <_strtod_l+0x2a4>)
 8013ede:	ab1f      	add	r3, sp, #124	; 0x7c
 8013ee0:	a91d      	add	r1, sp, #116	; 0x74
 8013ee2:	4620      	mov	r0, r4
 8013ee4:	f001 ff26 	bl	8015d34 <__gethex>
 8013ee8:	f010 0707 	ands.w	r7, r0, #7
 8013eec:	4605      	mov	r5, r0
 8013eee:	d005      	beq.n	8013efc <_strtod_l+0x84>
 8013ef0:	2f06      	cmp	r7, #6
 8013ef2:	d12a      	bne.n	8013f4a <_strtod_l+0xd2>
 8013ef4:	3601      	adds	r6, #1
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	961d      	str	r6, [sp, #116]	; 0x74
 8013efa:	930e      	str	r3, [sp, #56]	; 0x38
 8013efc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	f040 8596 	bne.w	8014a30 <_strtod_l+0xbb8>
 8013f04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f06:	b1db      	cbz	r3, 8013f40 <_strtod_l+0xc8>
 8013f08:	4652      	mov	r2, sl
 8013f0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013f0e:	ec43 2b10 	vmov	d0, r2, r3
 8013f12:	b023      	add	sp, #140	; 0x8c
 8013f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f18:	2a20      	cmp	r2, #32
 8013f1a:	d1ce      	bne.n	8013eba <_strtod_l+0x42>
 8013f1c:	3301      	adds	r3, #1
 8013f1e:	931d      	str	r3, [sp, #116]	; 0x74
 8013f20:	e7c0      	b.n	8013ea4 <_strtod_l+0x2c>
 8013f22:	2a2d      	cmp	r2, #45	; 0x2d
 8013f24:	d1c9      	bne.n	8013eba <_strtod_l+0x42>
 8013f26:	2201      	movs	r2, #1
 8013f28:	920e      	str	r2, [sp, #56]	; 0x38
 8013f2a:	1c5a      	adds	r2, r3, #1
 8013f2c:	921d      	str	r2, [sp, #116]	; 0x74
 8013f2e:	785b      	ldrb	r3, [r3, #1]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d1c4      	bne.n	8013ebe <_strtod_l+0x46>
 8013f34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013f36:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	f040 8576 	bne.w	8014a2c <_strtod_l+0xbb4>
 8013f40:	4652      	mov	r2, sl
 8013f42:	465b      	mov	r3, fp
 8013f44:	e7e3      	b.n	8013f0e <_strtod_l+0x96>
 8013f46:	2200      	movs	r2, #0
 8013f48:	e7ee      	b.n	8013f28 <_strtod_l+0xb0>
 8013f4a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013f4c:	b13a      	cbz	r2, 8013f5e <_strtod_l+0xe6>
 8013f4e:	2135      	movs	r1, #53	; 0x35
 8013f50:	a820      	add	r0, sp, #128	; 0x80
 8013f52:	f002 ff0e 	bl	8016d72 <__copybits>
 8013f56:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013f58:	4620      	mov	r0, r4
 8013f5a:	f002 fad3 	bl	8016504 <_Bfree>
 8013f5e:	3f01      	subs	r7, #1
 8013f60:	2f05      	cmp	r7, #5
 8013f62:	d807      	bhi.n	8013f74 <_strtod_l+0xfc>
 8013f64:	e8df f007 	tbb	[pc, r7]
 8013f68:	1d180b0e 	.word	0x1d180b0e
 8013f6c:	030e      	.short	0x030e
 8013f6e:	f04f 0b00 	mov.w	fp, #0
 8013f72:	46da      	mov	sl, fp
 8013f74:	0728      	lsls	r0, r5, #28
 8013f76:	d5c1      	bpl.n	8013efc <_strtod_l+0x84>
 8013f78:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8013f7c:	e7be      	b.n	8013efc <_strtod_l+0x84>
 8013f7e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8013f82:	e7f7      	b.n	8013f74 <_strtod_l+0xfc>
 8013f84:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8013f88:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013f8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013f8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013f92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013f96:	e7ed      	b.n	8013f74 <_strtod_l+0xfc>
 8013f98:	f8df b184 	ldr.w	fp, [pc, #388]	; 8014120 <_strtod_l+0x2a8>
 8013f9c:	f04f 0a00 	mov.w	sl, #0
 8013fa0:	e7e8      	b.n	8013f74 <_strtod_l+0xfc>
 8013fa2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8013fa6:	f04f 3aff 	mov.w	sl, #4294967295
 8013faa:	e7e3      	b.n	8013f74 <_strtod_l+0xfc>
 8013fac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013fae:	1c5a      	adds	r2, r3, #1
 8013fb0:	921d      	str	r2, [sp, #116]	; 0x74
 8013fb2:	785b      	ldrb	r3, [r3, #1]
 8013fb4:	2b30      	cmp	r3, #48	; 0x30
 8013fb6:	d0f9      	beq.n	8013fac <_strtod_l+0x134>
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d09f      	beq.n	8013efc <_strtod_l+0x84>
 8013fbc:	2301      	movs	r3, #1
 8013fbe:	f04f 0900 	mov.w	r9, #0
 8013fc2:	9304      	str	r3, [sp, #16]
 8013fc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013fc6:	930a      	str	r3, [sp, #40]	; 0x28
 8013fc8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8013fcc:	464f      	mov	r7, r9
 8013fce:	220a      	movs	r2, #10
 8013fd0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8013fd2:	7806      	ldrb	r6, [r0, #0]
 8013fd4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8013fd8:	b2d9      	uxtb	r1, r3
 8013fda:	2909      	cmp	r1, #9
 8013fdc:	d92a      	bls.n	8014034 <_strtod_l+0x1bc>
 8013fde:	9907      	ldr	r1, [sp, #28]
 8013fe0:	462a      	mov	r2, r5
 8013fe2:	f7ff ff18 	bl	8013e16 <strncmp>
 8013fe6:	b398      	cbz	r0, 8014050 <_strtod_l+0x1d8>
 8013fe8:	2000      	movs	r0, #0
 8013fea:	4633      	mov	r3, r6
 8013fec:	463d      	mov	r5, r7
 8013fee:	9007      	str	r0, [sp, #28]
 8013ff0:	4602      	mov	r2, r0
 8013ff2:	2b65      	cmp	r3, #101	; 0x65
 8013ff4:	d001      	beq.n	8013ffa <_strtod_l+0x182>
 8013ff6:	2b45      	cmp	r3, #69	; 0x45
 8013ff8:	d118      	bne.n	801402c <_strtod_l+0x1b4>
 8013ffa:	b91d      	cbnz	r5, 8014004 <_strtod_l+0x18c>
 8013ffc:	9b04      	ldr	r3, [sp, #16]
 8013ffe:	4303      	orrs	r3, r0
 8014000:	d098      	beq.n	8013f34 <_strtod_l+0xbc>
 8014002:	2500      	movs	r5, #0
 8014004:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8014008:	f108 0301 	add.w	r3, r8, #1
 801400c:	931d      	str	r3, [sp, #116]	; 0x74
 801400e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8014012:	2b2b      	cmp	r3, #43	; 0x2b
 8014014:	d075      	beq.n	8014102 <_strtod_l+0x28a>
 8014016:	2b2d      	cmp	r3, #45	; 0x2d
 8014018:	d07b      	beq.n	8014112 <_strtod_l+0x29a>
 801401a:	f04f 0c00 	mov.w	ip, #0
 801401e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8014022:	2909      	cmp	r1, #9
 8014024:	f240 8082 	bls.w	801412c <_strtod_l+0x2b4>
 8014028:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801402c:	2600      	movs	r6, #0
 801402e:	e09d      	b.n	801416c <_strtod_l+0x2f4>
 8014030:	2300      	movs	r3, #0
 8014032:	e7c4      	b.n	8013fbe <_strtod_l+0x146>
 8014034:	2f08      	cmp	r7, #8
 8014036:	bfd8      	it	le
 8014038:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801403a:	f100 0001 	add.w	r0, r0, #1
 801403e:	bfda      	itte	le
 8014040:	fb02 3301 	mlale	r3, r2, r1, r3
 8014044:	9309      	strle	r3, [sp, #36]	; 0x24
 8014046:	fb02 3909 	mlagt	r9, r2, r9, r3
 801404a:	3701      	adds	r7, #1
 801404c:	901d      	str	r0, [sp, #116]	; 0x74
 801404e:	e7bf      	b.n	8013fd0 <_strtod_l+0x158>
 8014050:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014052:	195a      	adds	r2, r3, r5
 8014054:	921d      	str	r2, [sp, #116]	; 0x74
 8014056:	5d5b      	ldrb	r3, [r3, r5]
 8014058:	2f00      	cmp	r7, #0
 801405a:	d037      	beq.n	80140cc <_strtod_l+0x254>
 801405c:	9007      	str	r0, [sp, #28]
 801405e:	463d      	mov	r5, r7
 8014060:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8014064:	2a09      	cmp	r2, #9
 8014066:	d912      	bls.n	801408e <_strtod_l+0x216>
 8014068:	2201      	movs	r2, #1
 801406a:	e7c2      	b.n	8013ff2 <_strtod_l+0x17a>
 801406c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801406e:	1c5a      	adds	r2, r3, #1
 8014070:	921d      	str	r2, [sp, #116]	; 0x74
 8014072:	785b      	ldrb	r3, [r3, #1]
 8014074:	3001      	adds	r0, #1
 8014076:	2b30      	cmp	r3, #48	; 0x30
 8014078:	d0f8      	beq.n	801406c <_strtod_l+0x1f4>
 801407a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801407e:	2a08      	cmp	r2, #8
 8014080:	f200 84db 	bhi.w	8014a3a <_strtod_l+0xbc2>
 8014084:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014086:	9007      	str	r0, [sp, #28]
 8014088:	2000      	movs	r0, #0
 801408a:	920a      	str	r2, [sp, #40]	; 0x28
 801408c:	4605      	mov	r5, r0
 801408e:	3b30      	subs	r3, #48	; 0x30
 8014090:	f100 0201 	add.w	r2, r0, #1
 8014094:	d014      	beq.n	80140c0 <_strtod_l+0x248>
 8014096:	9907      	ldr	r1, [sp, #28]
 8014098:	4411      	add	r1, r2
 801409a:	9107      	str	r1, [sp, #28]
 801409c:	462a      	mov	r2, r5
 801409e:	eb00 0e05 	add.w	lr, r0, r5
 80140a2:	210a      	movs	r1, #10
 80140a4:	4572      	cmp	r2, lr
 80140a6:	d113      	bne.n	80140d0 <_strtod_l+0x258>
 80140a8:	182a      	adds	r2, r5, r0
 80140aa:	2a08      	cmp	r2, #8
 80140ac:	f105 0501 	add.w	r5, r5, #1
 80140b0:	4405      	add	r5, r0
 80140b2:	dc1c      	bgt.n	80140ee <_strtod_l+0x276>
 80140b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80140b6:	220a      	movs	r2, #10
 80140b8:	fb02 3301 	mla	r3, r2, r1, r3
 80140bc:	9309      	str	r3, [sp, #36]	; 0x24
 80140be:	2200      	movs	r2, #0
 80140c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80140c2:	1c59      	adds	r1, r3, #1
 80140c4:	911d      	str	r1, [sp, #116]	; 0x74
 80140c6:	785b      	ldrb	r3, [r3, #1]
 80140c8:	4610      	mov	r0, r2
 80140ca:	e7c9      	b.n	8014060 <_strtod_l+0x1e8>
 80140cc:	4638      	mov	r0, r7
 80140ce:	e7d2      	b.n	8014076 <_strtod_l+0x1fe>
 80140d0:	2a08      	cmp	r2, #8
 80140d2:	dc04      	bgt.n	80140de <_strtod_l+0x266>
 80140d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80140d6:	434e      	muls	r6, r1
 80140d8:	9609      	str	r6, [sp, #36]	; 0x24
 80140da:	3201      	adds	r2, #1
 80140dc:	e7e2      	b.n	80140a4 <_strtod_l+0x22c>
 80140de:	f102 0c01 	add.w	ip, r2, #1
 80140e2:	f1bc 0f10 	cmp.w	ip, #16
 80140e6:	bfd8      	it	le
 80140e8:	fb01 f909 	mulle.w	r9, r1, r9
 80140ec:	e7f5      	b.n	80140da <_strtod_l+0x262>
 80140ee:	2d10      	cmp	r5, #16
 80140f0:	bfdc      	itt	le
 80140f2:	220a      	movle	r2, #10
 80140f4:	fb02 3909 	mlale	r9, r2, r9, r3
 80140f8:	e7e1      	b.n	80140be <_strtod_l+0x246>
 80140fa:	2300      	movs	r3, #0
 80140fc:	9307      	str	r3, [sp, #28]
 80140fe:	2201      	movs	r2, #1
 8014100:	e77c      	b.n	8013ffc <_strtod_l+0x184>
 8014102:	f04f 0c00 	mov.w	ip, #0
 8014106:	f108 0302 	add.w	r3, r8, #2
 801410a:	931d      	str	r3, [sp, #116]	; 0x74
 801410c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8014110:	e785      	b.n	801401e <_strtod_l+0x1a6>
 8014112:	f04f 0c01 	mov.w	ip, #1
 8014116:	e7f6      	b.n	8014106 <_strtod_l+0x28e>
 8014118:	08019050 	.word	0x08019050
 801411c:	08018f00 	.word	0x08018f00
 8014120:	7ff00000 	.word	0x7ff00000
 8014124:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014126:	1c59      	adds	r1, r3, #1
 8014128:	911d      	str	r1, [sp, #116]	; 0x74
 801412a:	785b      	ldrb	r3, [r3, #1]
 801412c:	2b30      	cmp	r3, #48	; 0x30
 801412e:	d0f9      	beq.n	8014124 <_strtod_l+0x2ac>
 8014130:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8014134:	2908      	cmp	r1, #8
 8014136:	f63f af79 	bhi.w	801402c <_strtod_l+0x1b4>
 801413a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801413e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014140:	9308      	str	r3, [sp, #32]
 8014142:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014144:	1c59      	adds	r1, r3, #1
 8014146:	911d      	str	r1, [sp, #116]	; 0x74
 8014148:	785b      	ldrb	r3, [r3, #1]
 801414a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801414e:	2e09      	cmp	r6, #9
 8014150:	d937      	bls.n	80141c2 <_strtod_l+0x34a>
 8014152:	9e08      	ldr	r6, [sp, #32]
 8014154:	1b89      	subs	r1, r1, r6
 8014156:	2908      	cmp	r1, #8
 8014158:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801415c:	dc02      	bgt.n	8014164 <_strtod_l+0x2ec>
 801415e:	4576      	cmp	r6, lr
 8014160:	bfa8      	it	ge
 8014162:	4676      	movge	r6, lr
 8014164:	f1bc 0f00 	cmp.w	ip, #0
 8014168:	d000      	beq.n	801416c <_strtod_l+0x2f4>
 801416a:	4276      	negs	r6, r6
 801416c:	2d00      	cmp	r5, #0
 801416e:	d14f      	bne.n	8014210 <_strtod_l+0x398>
 8014170:	9904      	ldr	r1, [sp, #16]
 8014172:	4301      	orrs	r1, r0
 8014174:	f47f aec2 	bne.w	8013efc <_strtod_l+0x84>
 8014178:	2a00      	cmp	r2, #0
 801417a:	f47f aedb 	bne.w	8013f34 <_strtod_l+0xbc>
 801417e:	2b69      	cmp	r3, #105	; 0x69
 8014180:	d027      	beq.n	80141d2 <_strtod_l+0x35a>
 8014182:	dc24      	bgt.n	80141ce <_strtod_l+0x356>
 8014184:	2b49      	cmp	r3, #73	; 0x49
 8014186:	d024      	beq.n	80141d2 <_strtod_l+0x35a>
 8014188:	2b4e      	cmp	r3, #78	; 0x4e
 801418a:	f47f aed3 	bne.w	8013f34 <_strtod_l+0xbc>
 801418e:	499e      	ldr	r1, [pc, #632]	; (8014408 <_strtod_l+0x590>)
 8014190:	a81d      	add	r0, sp, #116	; 0x74
 8014192:	f002 f827 	bl	80161e4 <__match>
 8014196:	2800      	cmp	r0, #0
 8014198:	f43f aecc 	beq.w	8013f34 <_strtod_l+0xbc>
 801419c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801419e:	781b      	ldrb	r3, [r3, #0]
 80141a0:	2b28      	cmp	r3, #40	; 0x28
 80141a2:	d12d      	bne.n	8014200 <_strtod_l+0x388>
 80141a4:	4999      	ldr	r1, [pc, #612]	; (801440c <_strtod_l+0x594>)
 80141a6:	aa20      	add	r2, sp, #128	; 0x80
 80141a8:	a81d      	add	r0, sp, #116	; 0x74
 80141aa:	f002 f82f 	bl	801620c <__hexnan>
 80141ae:	2805      	cmp	r0, #5
 80141b0:	d126      	bne.n	8014200 <_strtod_l+0x388>
 80141b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80141b4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80141b8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80141bc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80141c0:	e69c      	b.n	8013efc <_strtod_l+0x84>
 80141c2:	210a      	movs	r1, #10
 80141c4:	fb01 3e0e 	mla	lr, r1, lr, r3
 80141c8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80141cc:	e7b9      	b.n	8014142 <_strtod_l+0x2ca>
 80141ce:	2b6e      	cmp	r3, #110	; 0x6e
 80141d0:	e7db      	b.n	801418a <_strtod_l+0x312>
 80141d2:	498f      	ldr	r1, [pc, #572]	; (8014410 <_strtod_l+0x598>)
 80141d4:	a81d      	add	r0, sp, #116	; 0x74
 80141d6:	f002 f805 	bl	80161e4 <__match>
 80141da:	2800      	cmp	r0, #0
 80141dc:	f43f aeaa 	beq.w	8013f34 <_strtod_l+0xbc>
 80141e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80141e2:	498c      	ldr	r1, [pc, #560]	; (8014414 <_strtod_l+0x59c>)
 80141e4:	3b01      	subs	r3, #1
 80141e6:	a81d      	add	r0, sp, #116	; 0x74
 80141e8:	931d      	str	r3, [sp, #116]	; 0x74
 80141ea:	f001 fffb 	bl	80161e4 <__match>
 80141ee:	b910      	cbnz	r0, 80141f6 <_strtod_l+0x37e>
 80141f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80141f2:	3301      	adds	r3, #1
 80141f4:	931d      	str	r3, [sp, #116]	; 0x74
 80141f6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8014424 <_strtod_l+0x5ac>
 80141fa:	f04f 0a00 	mov.w	sl, #0
 80141fe:	e67d      	b.n	8013efc <_strtod_l+0x84>
 8014200:	4885      	ldr	r0, [pc, #532]	; (8014418 <_strtod_l+0x5a0>)
 8014202:	f7fe fcb5 	bl	8012b70 <nan>
 8014206:	ed8d 0b04 	vstr	d0, [sp, #16]
 801420a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801420e:	e675      	b.n	8013efc <_strtod_l+0x84>
 8014210:	9b07      	ldr	r3, [sp, #28]
 8014212:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014214:	1af3      	subs	r3, r6, r3
 8014216:	2f00      	cmp	r7, #0
 8014218:	bf08      	it	eq
 801421a:	462f      	moveq	r7, r5
 801421c:	2d10      	cmp	r5, #16
 801421e:	9308      	str	r3, [sp, #32]
 8014220:	46a8      	mov	r8, r5
 8014222:	bfa8      	it	ge
 8014224:	f04f 0810 	movge.w	r8, #16
 8014228:	f7ec f97c 	bl	8000524 <__aeabi_ui2d>
 801422c:	2d09      	cmp	r5, #9
 801422e:	4682      	mov	sl, r0
 8014230:	468b      	mov	fp, r1
 8014232:	dd13      	ble.n	801425c <_strtod_l+0x3e4>
 8014234:	4b79      	ldr	r3, [pc, #484]	; (801441c <_strtod_l+0x5a4>)
 8014236:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801423a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801423e:	f7ec f9eb 	bl	8000618 <__aeabi_dmul>
 8014242:	4682      	mov	sl, r0
 8014244:	4648      	mov	r0, r9
 8014246:	468b      	mov	fp, r1
 8014248:	f7ec f96c 	bl	8000524 <__aeabi_ui2d>
 801424c:	4602      	mov	r2, r0
 801424e:	460b      	mov	r3, r1
 8014250:	4650      	mov	r0, sl
 8014252:	4659      	mov	r1, fp
 8014254:	f7ec f82a 	bl	80002ac <__adddf3>
 8014258:	4682      	mov	sl, r0
 801425a:	468b      	mov	fp, r1
 801425c:	2d0f      	cmp	r5, #15
 801425e:	dc38      	bgt.n	80142d2 <_strtod_l+0x45a>
 8014260:	9b08      	ldr	r3, [sp, #32]
 8014262:	2b00      	cmp	r3, #0
 8014264:	f43f ae4a 	beq.w	8013efc <_strtod_l+0x84>
 8014268:	dd24      	ble.n	80142b4 <_strtod_l+0x43c>
 801426a:	2b16      	cmp	r3, #22
 801426c:	dc0b      	bgt.n	8014286 <_strtod_l+0x40e>
 801426e:	4d6b      	ldr	r5, [pc, #428]	; (801441c <_strtod_l+0x5a4>)
 8014270:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8014274:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014278:	4652      	mov	r2, sl
 801427a:	465b      	mov	r3, fp
 801427c:	f7ec f9cc 	bl	8000618 <__aeabi_dmul>
 8014280:	4682      	mov	sl, r0
 8014282:	468b      	mov	fp, r1
 8014284:	e63a      	b.n	8013efc <_strtod_l+0x84>
 8014286:	9a08      	ldr	r2, [sp, #32]
 8014288:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801428c:	4293      	cmp	r3, r2
 801428e:	db20      	blt.n	80142d2 <_strtod_l+0x45a>
 8014290:	4c62      	ldr	r4, [pc, #392]	; (801441c <_strtod_l+0x5a4>)
 8014292:	f1c5 050f 	rsb	r5, r5, #15
 8014296:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801429a:	4652      	mov	r2, sl
 801429c:	465b      	mov	r3, fp
 801429e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80142a2:	f7ec f9b9 	bl	8000618 <__aeabi_dmul>
 80142a6:	9b08      	ldr	r3, [sp, #32]
 80142a8:	1b5d      	subs	r5, r3, r5
 80142aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80142ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80142b2:	e7e3      	b.n	801427c <_strtod_l+0x404>
 80142b4:	9b08      	ldr	r3, [sp, #32]
 80142b6:	3316      	adds	r3, #22
 80142b8:	db0b      	blt.n	80142d2 <_strtod_l+0x45a>
 80142ba:	9b07      	ldr	r3, [sp, #28]
 80142bc:	4a57      	ldr	r2, [pc, #348]	; (801441c <_strtod_l+0x5a4>)
 80142be:	1b9e      	subs	r6, r3, r6
 80142c0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80142c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80142c8:	4650      	mov	r0, sl
 80142ca:	4659      	mov	r1, fp
 80142cc:	f7ec face 	bl	800086c <__aeabi_ddiv>
 80142d0:	e7d6      	b.n	8014280 <_strtod_l+0x408>
 80142d2:	9b08      	ldr	r3, [sp, #32]
 80142d4:	eba5 0808 	sub.w	r8, r5, r8
 80142d8:	4498      	add	r8, r3
 80142da:	f1b8 0f00 	cmp.w	r8, #0
 80142de:	dd71      	ble.n	80143c4 <_strtod_l+0x54c>
 80142e0:	f018 030f 	ands.w	r3, r8, #15
 80142e4:	d00a      	beq.n	80142fc <_strtod_l+0x484>
 80142e6:	494d      	ldr	r1, [pc, #308]	; (801441c <_strtod_l+0x5a4>)
 80142e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80142ec:	4652      	mov	r2, sl
 80142ee:	465b      	mov	r3, fp
 80142f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80142f4:	f7ec f990 	bl	8000618 <__aeabi_dmul>
 80142f8:	4682      	mov	sl, r0
 80142fa:	468b      	mov	fp, r1
 80142fc:	f038 080f 	bics.w	r8, r8, #15
 8014300:	d04d      	beq.n	801439e <_strtod_l+0x526>
 8014302:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8014306:	dd22      	ble.n	801434e <_strtod_l+0x4d6>
 8014308:	2500      	movs	r5, #0
 801430a:	462e      	mov	r6, r5
 801430c:	9509      	str	r5, [sp, #36]	; 0x24
 801430e:	9507      	str	r5, [sp, #28]
 8014310:	2322      	movs	r3, #34	; 0x22
 8014312:	f8df b110 	ldr.w	fp, [pc, #272]	; 8014424 <_strtod_l+0x5ac>
 8014316:	6023      	str	r3, [r4, #0]
 8014318:	f04f 0a00 	mov.w	sl, #0
 801431c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801431e:	2b00      	cmp	r3, #0
 8014320:	f43f adec 	beq.w	8013efc <_strtod_l+0x84>
 8014324:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014326:	4620      	mov	r0, r4
 8014328:	f002 f8ec 	bl	8016504 <_Bfree>
 801432c:	9907      	ldr	r1, [sp, #28]
 801432e:	4620      	mov	r0, r4
 8014330:	f002 f8e8 	bl	8016504 <_Bfree>
 8014334:	4631      	mov	r1, r6
 8014336:	4620      	mov	r0, r4
 8014338:	f002 f8e4 	bl	8016504 <_Bfree>
 801433c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801433e:	4620      	mov	r0, r4
 8014340:	f002 f8e0 	bl	8016504 <_Bfree>
 8014344:	4629      	mov	r1, r5
 8014346:	4620      	mov	r0, r4
 8014348:	f002 f8dc 	bl	8016504 <_Bfree>
 801434c:	e5d6      	b.n	8013efc <_strtod_l+0x84>
 801434e:	2300      	movs	r3, #0
 8014350:	ea4f 1828 	mov.w	r8, r8, asr #4
 8014354:	4650      	mov	r0, sl
 8014356:	4659      	mov	r1, fp
 8014358:	4699      	mov	r9, r3
 801435a:	f1b8 0f01 	cmp.w	r8, #1
 801435e:	dc21      	bgt.n	80143a4 <_strtod_l+0x52c>
 8014360:	b10b      	cbz	r3, 8014366 <_strtod_l+0x4ee>
 8014362:	4682      	mov	sl, r0
 8014364:	468b      	mov	fp, r1
 8014366:	4b2e      	ldr	r3, [pc, #184]	; (8014420 <_strtod_l+0x5a8>)
 8014368:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801436c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8014370:	4652      	mov	r2, sl
 8014372:	465b      	mov	r3, fp
 8014374:	e9d9 0100 	ldrd	r0, r1, [r9]
 8014378:	f7ec f94e 	bl	8000618 <__aeabi_dmul>
 801437c:	4b29      	ldr	r3, [pc, #164]	; (8014424 <_strtod_l+0x5ac>)
 801437e:	460a      	mov	r2, r1
 8014380:	400b      	ands	r3, r1
 8014382:	4929      	ldr	r1, [pc, #164]	; (8014428 <_strtod_l+0x5b0>)
 8014384:	428b      	cmp	r3, r1
 8014386:	4682      	mov	sl, r0
 8014388:	d8be      	bhi.n	8014308 <_strtod_l+0x490>
 801438a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801438e:	428b      	cmp	r3, r1
 8014390:	bf86      	itte	hi
 8014392:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801442c <_strtod_l+0x5b4>
 8014396:	f04f 3aff 	movhi.w	sl, #4294967295
 801439a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801439e:	2300      	movs	r3, #0
 80143a0:	9304      	str	r3, [sp, #16]
 80143a2:	e081      	b.n	80144a8 <_strtod_l+0x630>
 80143a4:	f018 0f01 	tst.w	r8, #1
 80143a8:	d007      	beq.n	80143ba <_strtod_l+0x542>
 80143aa:	4b1d      	ldr	r3, [pc, #116]	; (8014420 <_strtod_l+0x5a8>)
 80143ac:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80143b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143b4:	f7ec f930 	bl	8000618 <__aeabi_dmul>
 80143b8:	2301      	movs	r3, #1
 80143ba:	f109 0901 	add.w	r9, r9, #1
 80143be:	ea4f 0868 	mov.w	r8, r8, asr #1
 80143c2:	e7ca      	b.n	801435a <_strtod_l+0x4e2>
 80143c4:	d0eb      	beq.n	801439e <_strtod_l+0x526>
 80143c6:	f1c8 0800 	rsb	r8, r8, #0
 80143ca:	f018 020f 	ands.w	r2, r8, #15
 80143ce:	d00a      	beq.n	80143e6 <_strtod_l+0x56e>
 80143d0:	4b12      	ldr	r3, [pc, #72]	; (801441c <_strtod_l+0x5a4>)
 80143d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80143d6:	4650      	mov	r0, sl
 80143d8:	4659      	mov	r1, fp
 80143da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143de:	f7ec fa45 	bl	800086c <__aeabi_ddiv>
 80143e2:	4682      	mov	sl, r0
 80143e4:	468b      	mov	fp, r1
 80143e6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80143ea:	d0d8      	beq.n	801439e <_strtod_l+0x526>
 80143ec:	f1b8 0f1f 	cmp.w	r8, #31
 80143f0:	dd1e      	ble.n	8014430 <_strtod_l+0x5b8>
 80143f2:	2500      	movs	r5, #0
 80143f4:	462e      	mov	r6, r5
 80143f6:	9509      	str	r5, [sp, #36]	; 0x24
 80143f8:	9507      	str	r5, [sp, #28]
 80143fa:	2322      	movs	r3, #34	; 0x22
 80143fc:	f04f 0a00 	mov.w	sl, #0
 8014400:	f04f 0b00 	mov.w	fp, #0
 8014404:	6023      	str	r3, [r4, #0]
 8014406:	e789      	b.n	801431c <_strtod_l+0x4a4>
 8014408:	08018ed5 	.word	0x08018ed5
 801440c:	08018f14 	.word	0x08018f14
 8014410:	08018ecd 	.word	0x08018ecd
 8014414:	08018f53 	.word	0x08018f53
 8014418:	0801922b 	.word	0x0801922b
 801441c:	080190f0 	.word	0x080190f0
 8014420:	080190c8 	.word	0x080190c8
 8014424:	7ff00000 	.word	0x7ff00000
 8014428:	7ca00000 	.word	0x7ca00000
 801442c:	7fefffff 	.word	0x7fefffff
 8014430:	f018 0310 	ands.w	r3, r8, #16
 8014434:	bf18      	it	ne
 8014436:	236a      	movne	r3, #106	; 0x6a
 8014438:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80147f0 <_strtod_l+0x978>
 801443c:	9304      	str	r3, [sp, #16]
 801443e:	4650      	mov	r0, sl
 8014440:	4659      	mov	r1, fp
 8014442:	2300      	movs	r3, #0
 8014444:	f018 0f01 	tst.w	r8, #1
 8014448:	d004      	beq.n	8014454 <_strtod_l+0x5dc>
 801444a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801444e:	f7ec f8e3 	bl	8000618 <__aeabi_dmul>
 8014452:	2301      	movs	r3, #1
 8014454:	ea5f 0868 	movs.w	r8, r8, asr #1
 8014458:	f109 0908 	add.w	r9, r9, #8
 801445c:	d1f2      	bne.n	8014444 <_strtod_l+0x5cc>
 801445e:	b10b      	cbz	r3, 8014464 <_strtod_l+0x5ec>
 8014460:	4682      	mov	sl, r0
 8014462:	468b      	mov	fp, r1
 8014464:	9b04      	ldr	r3, [sp, #16]
 8014466:	b1bb      	cbz	r3, 8014498 <_strtod_l+0x620>
 8014468:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801446c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014470:	2b00      	cmp	r3, #0
 8014472:	4659      	mov	r1, fp
 8014474:	dd10      	ble.n	8014498 <_strtod_l+0x620>
 8014476:	2b1f      	cmp	r3, #31
 8014478:	f340 8128 	ble.w	80146cc <_strtod_l+0x854>
 801447c:	2b34      	cmp	r3, #52	; 0x34
 801447e:	bfde      	ittt	le
 8014480:	3b20      	suble	r3, #32
 8014482:	f04f 32ff 	movle.w	r2, #4294967295
 8014486:	fa02 f303 	lslle.w	r3, r2, r3
 801448a:	f04f 0a00 	mov.w	sl, #0
 801448e:	bfcc      	ite	gt
 8014490:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8014494:	ea03 0b01 	andle.w	fp, r3, r1
 8014498:	2200      	movs	r2, #0
 801449a:	2300      	movs	r3, #0
 801449c:	4650      	mov	r0, sl
 801449e:	4659      	mov	r1, fp
 80144a0:	f7ec fb22 	bl	8000ae8 <__aeabi_dcmpeq>
 80144a4:	2800      	cmp	r0, #0
 80144a6:	d1a4      	bne.n	80143f2 <_strtod_l+0x57a>
 80144a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144aa:	9300      	str	r3, [sp, #0]
 80144ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80144ae:	462b      	mov	r3, r5
 80144b0:	463a      	mov	r2, r7
 80144b2:	4620      	mov	r0, r4
 80144b4:	f002 f892 	bl	80165dc <__s2b>
 80144b8:	9009      	str	r0, [sp, #36]	; 0x24
 80144ba:	2800      	cmp	r0, #0
 80144bc:	f43f af24 	beq.w	8014308 <_strtod_l+0x490>
 80144c0:	9b07      	ldr	r3, [sp, #28]
 80144c2:	1b9e      	subs	r6, r3, r6
 80144c4:	9b08      	ldr	r3, [sp, #32]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	bfb4      	ite	lt
 80144ca:	4633      	movlt	r3, r6
 80144cc:	2300      	movge	r3, #0
 80144ce:	9310      	str	r3, [sp, #64]	; 0x40
 80144d0:	9b08      	ldr	r3, [sp, #32]
 80144d2:	2500      	movs	r5, #0
 80144d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80144d8:	9318      	str	r3, [sp, #96]	; 0x60
 80144da:	462e      	mov	r6, r5
 80144dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144de:	4620      	mov	r0, r4
 80144e0:	6859      	ldr	r1, [r3, #4]
 80144e2:	f001 ffcf 	bl	8016484 <_Balloc>
 80144e6:	9007      	str	r0, [sp, #28]
 80144e8:	2800      	cmp	r0, #0
 80144ea:	f43f af11 	beq.w	8014310 <_strtod_l+0x498>
 80144ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144f0:	691a      	ldr	r2, [r3, #16]
 80144f2:	3202      	adds	r2, #2
 80144f4:	f103 010c 	add.w	r1, r3, #12
 80144f8:	0092      	lsls	r2, r2, #2
 80144fa:	300c      	adds	r0, #12
 80144fc:	f7fe fc63 	bl	8012dc6 <memcpy>
 8014500:	ec4b ab10 	vmov	d0, sl, fp
 8014504:	aa20      	add	r2, sp, #128	; 0x80
 8014506:	a91f      	add	r1, sp, #124	; 0x7c
 8014508:	4620      	mov	r0, r4
 801450a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801450e:	f002 fba1 	bl	8016c54 <__d2b>
 8014512:	901e      	str	r0, [sp, #120]	; 0x78
 8014514:	2800      	cmp	r0, #0
 8014516:	f43f aefb 	beq.w	8014310 <_strtod_l+0x498>
 801451a:	2101      	movs	r1, #1
 801451c:	4620      	mov	r0, r4
 801451e:	f002 f8f7 	bl	8016710 <__i2b>
 8014522:	4606      	mov	r6, r0
 8014524:	2800      	cmp	r0, #0
 8014526:	f43f aef3 	beq.w	8014310 <_strtod_l+0x498>
 801452a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801452c:	9904      	ldr	r1, [sp, #16]
 801452e:	2b00      	cmp	r3, #0
 8014530:	bfab      	itete	ge
 8014532:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8014534:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8014536:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8014538:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801453c:	bfac      	ite	ge
 801453e:	eb03 0902 	addge.w	r9, r3, r2
 8014542:	1ad7      	sublt	r7, r2, r3
 8014544:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014546:	eba3 0801 	sub.w	r8, r3, r1
 801454a:	4490      	add	r8, r2
 801454c:	4ba3      	ldr	r3, [pc, #652]	; (80147dc <_strtod_l+0x964>)
 801454e:	f108 38ff 	add.w	r8, r8, #4294967295
 8014552:	4598      	cmp	r8, r3
 8014554:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014558:	f280 80cc 	bge.w	80146f4 <_strtod_l+0x87c>
 801455c:	eba3 0308 	sub.w	r3, r3, r8
 8014560:	2b1f      	cmp	r3, #31
 8014562:	eba2 0203 	sub.w	r2, r2, r3
 8014566:	f04f 0101 	mov.w	r1, #1
 801456a:	f300 80b6 	bgt.w	80146da <_strtod_l+0x862>
 801456e:	fa01 f303 	lsl.w	r3, r1, r3
 8014572:	9311      	str	r3, [sp, #68]	; 0x44
 8014574:	2300      	movs	r3, #0
 8014576:	930c      	str	r3, [sp, #48]	; 0x30
 8014578:	eb09 0802 	add.w	r8, r9, r2
 801457c:	9b04      	ldr	r3, [sp, #16]
 801457e:	45c1      	cmp	r9, r8
 8014580:	4417      	add	r7, r2
 8014582:	441f      	add	r7, r3
 8014584:	464b      	mov	r3, r9
 8014586:	bfa8      	it	ge
 8014588:	4643      	movge	r3, r8
 801458a:	42bb      	cmp	r3, r7
 801458c:	bfa8      	it	ge
 801458e:	463b      	movge	r3, r7
 8014590:	2b00      	cmp	r3, #0
 8014592:	bfc2      	ittt	gt
 8014594:	eba8 0803 	subgt.w	r8, r8, r3
 8014598:	1aff      	subgt	r7, r7, r3
 801459a:	eba9 0903 	subgt.w	r9, r9, r3
 801459e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	dd17      	ble.n	80145d4 <_strtod_l+0x75c>
 80145a4:	4631      	mov	r1, r6
 80145a6:	461a      	mov	r2, r3
 80145a8:	4620      	mov	r0, r4
 80145aa:	f002 f96d 	bl	8016888 <__pow5mult>
 80145ae:	4606      	mov	r6, r0
 80145b0:	2800      	cmp	r0, #0
 80145b2:	f43f aead 	beq.w	8014310 <_strtod_l+0x498>
 80145b6:	4601      	mov	r1, r0
 80145b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80145ba:	4620      	mov	r0, r4
 80145bc:	f002 f8be 	bl	801673c <__multiply>
 80145c0:	900f      	str	r0, [sp, #60]	; 0x3c
 80145c2:	2800      	cmp	r0, #0
 80145c4:	f43f aea4 	beq.w	8014310 <_strtod_l+0x498>
 80145c8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80145ca:	4620      	mov	r0, r4
 80145cc:	f001 ff9a 	bl	8016504 <_Bfree>
 80145d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80145d2:	931e      	str	r3, [sp, #120]	; 0x78
 80145d4:	f1b8 0f00 	cmp.w	r8, #0
 80145d8:	f300 8091 	bgt.w	80146fe <_strtod_l+0x886>
 80145dc:	9b08      	ldr	r3, [sp, #32]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	dd08      	ble.n	80145f4 <_strtod_l+0x77c>
 80145e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80145e4:	9907      	ldr	r1, [sp, #28]
 80145e6:	4620      	mov	r0, r4
 80145e8:	f002 f94e 	bl	8016888 <__pow5mult>
 80145ec:	9007      	str	r0, [sp, #28]
 80145ee:	2800      	cmp	r0, #0
 80145f0:	f43f ae8e 	beq.w	8014310 <_strtod_l+0x498>
 80145f4:	2f00      	cmp	r7, #0
 80145f6:	dd08      	ble.n	801460a <_strtod_l+0x792>
 80145f8:	9907      	ldr	r1, [sp, #28]
 80145fa:	463a      	mov	r2, r7
 80145fc:	4620      	mov	r0, r4
 80145fe:	f002 f99d 	bl	801693c <__lshift>
 8014602:	9007      	str	r0, [sp, #28]
 8014604:	2800      	cmp	r0, #0
 8014606:	f43f ae83 	beq.w	8014310 <_strtod_l+0x498>
 801460a:	f1b9 0f00 	cmp.w	r9, #0
 801460e:	dd08      	ble.n	8014622 <_strtod_l+0x7aa>
 8014610:	4631      	mov	r1, r6
 8014612:	464a      	mov	r2, r9
 8014614:	4620      	mov	r0, r4
 8014616:	f002 f991 	bl	801693c <__lshift>
 801461a:	4606      	mov	r6, r0
 801461c:	2800      	cmp	r0, #0
 801461e:	f43f ae77 	beq.w	8014310 <_strtod_l+0x498>
 8014622:	9a07      	ldr	r2, [sp, #28]
 8014624:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014626:	4620      	mov	r0, r4
 8014628:	f002 fa10 	bl	8016a4c <__mdiff>
 801462c:	4605      	mov	r5, r0
 801462e:	2800      	cmp	r0, #0
 8014630:	f43f ae6e 	beq.w	8014310 <_strtod_l+0x498>
 8014634:	68c3      	ldr	r3, [r0, #12]
 8014636:	930f      	str	r3, [sp, #60]	; 0x3c
 8014638:	2300      	movs	r3, #0
 801463a:	60c3      	str	r3, [r0, #12]
 801463c:	4631      	mov	r1, r6
 801463e:	f002 f9e9 	bl	8016a14 <__mcmp>
 8014642:	2800      	cmp	r0, #0
 8014644:	da65      	bge.n	8014712 <_strtod_l+0x89a>
 8014646:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014648:	ea53 030a 	orrs.w	r3, r3, sl
 801464c:	f040 8087 	bne.w	801475e <_strtod_l+0x8e6>
 8014650:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014654:	2b00      	cmp	r3, #0
 8014656:	f040 8082 	bne.w	801475e <_strtod_l+0x8e6>
 801465a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801465e:	0d1b      	lsrs	r3, r3, #20
 8014660:	051b      	lsls	r3, r3, #20
 8014662:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014666:	d97a      	bls.n	801475e <_strtod_l+0x8e6>
 8014668:	696b      	ldr	r3, [r5, #20]
 801466a:	b913      	cbnz	r3, 8014672 <_strtod_l+0x7fa>
 801466c:	692b      	ldr	r3, [r5, #16]
 801466e:	2b01      	cmp	r3, #1
 8014670:	dd75      	ble.n	801475e <_strtod_l+0x8e6>
 8014672:	4629      	mov	r1, r5
 8014674:	2201      	movs	r2, #1
 8014676:	4620      	mov	r0, r4
 8014678:	f002 f960 	bl	801693c <__lshift>
 801467c:	4631      	mov	r1, r6
 801467e:	4605      	mov	r5, r0
 8014680:	f002 f9c8 	bl	8016a14 <__mcmp>
 8014684:	2800      	cmp	r0, #0
 8014686:	dd6a      	ble.n	801475e <_strtod_l+0x8e6>
 8014688:	9904      	ldr	r1, [sp, #16]
 801468a:	4a55      	ldr	r2, [pc, #340]	; (80147e0 <_strtod_l+0x968>)
 801468c:	465b      	mov	r3, fp
 801468e:	2900      	cmp	r1, #0
 8014690:	f000 8085 	beq.w	801479e <_strtod_l+0x926>
 8014694:	ea02 010b 	and.w	r1, r2, fp
 8014698:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801469c:	dc7f      	bgt.n	801479e <_strtod_l+0x926>
 801469e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80146a2:	f77f aeaa 	ble.w	80143fa <_strtod_l+0x582>
 80146a6:	4a4f      	ldr	r2, [pc, #316]	; (80147e4 <_strtod_l+0x96c>)
 80146a8:	2300      	movs	r3, #0
 80146aa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80146ae:	4650      	mov	r0, sl
 80146b0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80146b4:	4659      	mov	r1, fp
 80146b6:	f7eb ffaf 	bl	8000618 <__aeabi_dmul>
 80146ba:	460b      	mov	r3, r1
 80146bc:	4303      	orrs	r3, r0
 80146be:	bf08      	it	eq
 80146c0:	2322      	moveq	r3, #34	; 0x22
 80146c2:	4682      	mov	sl, r0
 80146c4:	468b      	mov	fp, r1
 80146c6:	bf08      	it	eq
 80146c8:	6023      	streq	r3, [r4, #0]
 80146ca:	e62b      	b.n	8014324 <_strtod_l+0x4ac>
 80146cc:	f04f 32ff 	mov.w	r2, #4294967295
 80146d0:	fa02 f303 	lsl.w	r3, r2, r3
 80146d4:	ea03 0a0a 	and.w	sl, r3, sl
 80146d8:	e6de      	b.n	8014498 <_strtod_l+0x620>
 80146da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80146de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80146e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80146e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80146ea:	fa01 f308 	lsl.w	r3, r1, r8
 80146ee:	930c      	str	r3, [sp, #48]	; 0x30
 80146f0:	9111      	str	r1, [sp, #68]	; 0x44
 80146f2:	e741      	b.n	8014578 <_strtod_l+0x700>
 80146f4:	2300      	movs	r3, #0
 80146f6:	930c      	str	r3, [sp, #48]	; 0x30
 80146f8:	2301      	movs	r3, #1
 80146fa:	9311      	str	r3, [sp, #68]	; 0x44
 80146fc:	e73c      	b.n	8014578 <_strtod_l+0x700>
 80146fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014700:	4642      	mov	r2, r8
 8014702:	4620      	mov	r0, r4
 8014704:	f002 f91a 	bl	801693c <__lshift>
 8014708:	901e      	str	r0, [sp, #120]	; 0x78
 801470a:	2800      	cmp	r0, #0
 801470c:	f47f af66 	bne.w	80145dc <_strtod_l+0x764>
 8014710:	e5fe      	b.n	8014310 <_strtod_l+0x498>
 8014712:	465f      	mov	r7, fp
 8014714:	d16e      	bne.n	80147f4 <_strtod_l+0x97c>
 8014716:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014718:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801471c:	b342      	cbz	r2, 8014770 <_strtod_l+0x8f8>
 801471e:	4a32      	ldr	r2, [pc, #200]	; (80147e8 <_strtod_l+0x970>)
 8014720:	4293      	cmp	r3, r2
 8014722:	d128      	bne.n	8014776 <_strtod_l+0x8fe>
 8014724:	9b04      	ldr	r3, [sp, #16]
 8014726:	4650      	mov	r0, sl
 8014728:	b1eb      	cbz	r3, 8014766 <_strtod_l+0x8ee>
 801472a:	4a2d      	ldr	r2, [pc, #180]	; (80147e0 <_strtod_l+0x968>)
 801472c:	403a      	ands	r2, r7
 801472e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8014732:	f04f 31ff 	mov.w	r1, #4294967295
 8014736:	d819      	bhi.n	801476c <_strtod_l+0x8f4>
 8014738:	0d12      	lsrs	r2, r2, #20
 801473a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801473e:	fa01 f303 	lsl.w	r3, r1, r3
 8014742:	4298      	cmp	r0, r3
 8014744:	d117      	bne.n	8014776 <_strtod_l+0x8fe>
 8014746:	4b29      	ldr	r3, [pc, #164]	; (80147ec <_strtod_l+0x974>)
 8014748:	429f      	cmp	r7, r3
 801474a:	d102      	bne.n	8014752 <_strtod_l+0x8da>
 801474c:	3001      	adds	r0, #1
 801474e:	f43f addf 	beq.w	8014310 <_strtod_l+0x498>
 8014752:	4b23      	ldr	r3, [pc, #140]	; (80147e0 <_strtod_l+0x968>)
 8014754:	403b      	ands	r3, r7
 8014756:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801475a:	f04f 0a00 	mov.w	sl, #0
 801475e:	9b04      	ldr	r3, [sp, #16]
 8014760:	2b00      	cmp	r3, #0
 8014762:	d1a0      	bne.n	80146a6 <_strtod_l+0x82e>
 8014764:	e5de      	b.n	8014324 <_strtod_l+0x4ac>
 8014766:	f04f 33ff 	mov.w	r3, #4294967295
 801476a:	e7ea      	b.n	8014742 <_strtod_l+0x8ca>
 801476c:	460b      	mov	r3, r1
 801476e:	e7e8      	b.n	8014742 <_strtod_l+0x8ca>
 8014770:	ea53 030a 	orrs.w	r3, r3, sl
 8014774:	d088      	beq.n	8014688 <_strtod_l+0x810>
 8014776:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014778:	b1db      	cbz	r3, 80147b2 <_strtod_l+0x93a>
 801477a:	423b      	tst	r3, r7
 801477c:	d0ef      	beq.n	801475e <_strtod_l+0x8e6>
 801477e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014780:	9a04      	ldr	r2, [sp, #16]
 8014782:	4650      	mov	r0, sl
 8014784:	4659      	mov	r1, fp
 8014786:	b1c3      	cbz	r3, 80147ba <_strtod_l+0x942>
 8014788:	f7ff fb57 	bl	8013e3a <sulp>
 801478c:	4602      	mov	r2, r0
 801478e:	460b      	mov	r3, r1
 8014790:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014794:	f7eb fd8a 	bl	80002ac <__adddf3>
 8014798:	4682      	mov	sl, r0
 801479a:	468b      	mov	fp, r1
 801479c:	e7df      	b.n	801475e <_strtod_l+0x8e6>
 801479e:	4013      	ands	r3, r2
 80147a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80147a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80147a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80147ac:	f04f 3aff 	mov.w	sl, #4294967295
 80147b0:	e7d5      	b.n	801475e <_strtod_l+0x8e6>
 80147b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80147b4:	ea13 0f0a 	tst.w	r3, sl
 80147b8:	e7e0      	b.n	801477c <_strtod_l+0x904>
 80147ba:	f7ff fb3e 	bl	8013e3a <sulp>
 80147be:	4602      	mov	r2, r0
 80147c0:	460b      	mov	r3, r1
 80147c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80147c6:	f7eb fd6f 	bl	80002a8 <__aeabi_dsub>
 80147ca:	2200      	movs	r2, #0
 80147cc:	2300      	movs	r3, #0
 80147ce:	4682      	mov	sl, r0
 80147d0:	468b      	mov	fp, r1
 80147d2:	f7ec f989 	bl	8000ae8 <__aeabi_dcmpeq>
 80147d6:	2800      	cmp	r0, #0
 80147d8:	d0c1      	beq.n	801475e <_strtod_l+0x8e6>
 80147da:	e60e      	b.n	80143fa <_strtod_l+0x582>
 80147dc:	fffffc02 	.word	0xfffffc02
 80147e0:	7ff00000 	.word	0x7ff00000
 80147e4:	39500000 	.word	0x39500000
 80147e8:	000fffff 	.word	0x000fffff
 80147ec:	7fefffff 	.word	0x7fefffff
 80147f0:	08018f28 	.word	0x08018f28
 80147f4:	4631      	mov	r1, r6
 80147f6:	4628      	mov	r0, r5
 80147f8:	f002 fa88 	bl	8016d0c <__ratio>
 80147fc:	ec59 8b10 	vmov	r8, r9, d0
 8014800:	ee10 0a10 	vmov	r0, s0
 8014804:	2200      	movs	r2, #0
 8014806:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801480a:	4649      	mov	r1, r9
 801480c:	f7ec f980 	bl	8000b10 <__aeabi_dcmple>
 8014810:	2800      	cmp	r0, #0
 8014812:	d07c      	beq.n	801490e <_strtod_l+0xa96>
 8014814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014816:	2b00      	cmp	r3, #0
 8014818:	d04c      	beq.n	80148b4 <_strtod_l+0xa3c>
 801481a:	4b95      	ldr	r3, [pc, #596]	; (8014a70 <_strtod_l+0xbf8>)
 801481c:	2200      	movs	r2, #0
 801481e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014822:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8014a70 <_strtod_l+0xbf8>
 8014826:	f04f 0800 	mov.w	r8, #0
 801482a:	4b92      	ldr	r3, [pc, #584]	; (8014a74 <_strtod_l+0xbfc>)
 801482c:	403b      	ands	r3, r7
 801482e:	9311      	str	r3, [sp, #68]	; 0x44
 8014830:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014832:	4b91      	ldr	r3, [pc, #580]	; (8014a78 <_strtod_l+0xc00>)
 8014834:	429a      	cmp	r2, r3
 8014836:	f040 80b2 	bne.w	801499e <_strtod_l+0xb26>
 801483a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801483e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014842:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8014846:	ec4b ab10 	vmov	d0, sl, fp
 801484a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801484e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014852:	f002 f983 	bl	8016b5c <__ulp>
 8014856:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801485a:	ec53 2b10 	vmov	r2, r3, d0
 801485e:	f7eb fedb 	bl	8000618 <__aeabi_dmul>
 8014862:	4652      	mov	r2, sl
 8014864:	465b      	mov	r3, fp
 8014866:	f7eb fd21 	bl	80002ac <__adddf3>
 801486a:	460b      	mov	r3, r1
 801486c:	4981      	ldr	r1, [pc, #516]	; (8014a74 <_strtod_l+0xbfc>)
 801486e:	4a83      	ldr	r2, [pc, #524]	; (8014a7c <_strtod_l+0xc04>)
 8014870:	4019      	ands	r1, r3
 8014872:	4291      	cmp	r1, r2
 8014874:	4682      	mov	sl, r0
 8014876:	d95e      	bls.n	8014936 <_strtod_l+0xabe>
 8014878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801487a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801487e:	4293      	cmp	r3, r2
 8014880:	d103      	bne.n	801488a <_strtod_l+0xa12>
 8014882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014884:	3301      	adds	r3, #1
 8014886:	f43f ad43 	beq.w	8014310 <_strtod_l+0x498>
 801488a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8014a88 <_strtod_l+0xc10>
 801488e:	f04f 3aff 	mov.w	sl, #4294967295
 8014892:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014894:	4620      	mov	r0, r4
 8014896:	f001 fe35 	bl	8016504 <_Bfree>
 801489a:	9907      	ldr	r1, [sp, #28]
 801489c:	4620      	mov	r0, r4
 801489e:	f001 fe31 	bl	8016504 <_Bfree>
 80148a2:	4631      	mov	r1, r6
 80148a4:	4620      	mov	r0, r4
 80148a6:	f001 fe2d 	bl	8016504 <_Bfree>
 80148aa:	4629      	mov	r1, r5
 80148ac:	4620      	mov	r0, r4
 80148ae:	f001 fe29 	bl	8016504 <_Bfree>
 80148b2:	e613      	b.n	80144dc <_strtod_l+0x664>
 80148b4:	f1ba 0f00 	cmp.w	sl, #0
 80148b8:	d11b      	bne.n	80148f2 <_strtod_l+0xa7a>
 80148ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80148be:	b9f3      	cbnz	r3, 80148fe <_strtod_l+0xa86>
 80148c0:	4b6b      	ldr	r3, [pc, #428]	; (8014a70 <_strtod_l+0xbf8>)
 80148c2:	2200      	movs	r2, #0
 80148c4:	4640      	mov	r0, r8
 80148c6:	4649      	mov	r1, r9
 80148c8:	f7ec f918 	bl	8000afc <__aeabi_dcmplt>
 80148cc:	b9d0      	cbnz	r0, 8014904 <_strtod_l+0xa8c>
 80148ce:	4640      	mov	r0, r8
 80148d0:	4649      	mov	r1, r9
 80148d2:	4b6b      	ldr	r3, [pc, #428]	; (8014a80 <_strtod_l+0xc08>)
 80148d4:	2200      	movs	r2, #0
 80148d6:	f7eb fe9f 	bl	8000618 <__aeabi_dmul>
 80148da:	4680      	mov	r8, r0
 80148dc:	4689      	mov	r9, r1
 80148de:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80148e2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80148e6:	931b      	str	r3, [sp, #108]	; 0x6c
 80148e8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80148ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80148f0:	e79b      	b.n	801482a <_strtod_l+0x9b2>
 80148f2:	f1ba 0f01 	cmp.w	sl, #1
 80148f6:	d102      	bne.n	80148fe <_strtod_l+0xa86>
 80148f8:	2f00      	cmp	r7, #0
 80148fa:	f43f ad7e 	beq.w	80143fa <_strtod_l+0x582>
 80148fe:	4b61      	ldr	r3, [pc, #388]	; (8014a84 <_strtod_l+0xc0c>)
 8014900:	2200      	movs	r2, #0
 8014902:	e78c      	b.n	801481e <_strtod_l+0x9a6>
 8014904:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8014a80 <_strtod_l+0xc08>
 8014908:	f04f 0800 	mov.w	r8, #0
 801490c:	e7e7      	b.n	80148de <_strtod_l+0xa66>
 801490e:	4b5c      	ldr	r3, [pc, #368]	; (8014a80 <_strtod_l+0xc08>)
 8014910:	4640      	mov	r0, r8
 8014912:	4649      	mov	r1, r9
 8014914:	2200      	movs	r2, #0
 8014916:	f7eb fe7f 	bl	8000618 <__aeabi_dmul>
 801491a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801491c:	4680      	mov	r8, r0
 801491e:	4689      	mov	r9, r1
 8014920:	b933      	cbnz	r3, 8014930 <_strtod_l+0xab8>
 8014922:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014926:	9012      	str	r0, [sp, #72]	; 0x48
 8014928:	9313      	str	r3, [sp, #76]	; 0x4c
 801492a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801492e:	e7dd      	b.n	80148ec <_strtod_l+0xa74>
 8014930:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8014934:	e7f9      	b.n	801492a <_strtod_l+0xab2>
 8014936:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801493a:	9b04      	ldr	r3, [sp, #16]
 801493c:	2b00      	cmp	r3, #0
 801493e:	d1a8      	bne.n	8014892 <_strtod_l+0xa1a>
 8014940:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014944:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014946:	0d1b      	lsrs	r3, r3, #20
 8014948:	051b      	lsls	r3, r3, #20
 801494a:	429a      	cmp	r2, r3
 801494c:	d1a1      	bne.n	8014892 <_strtod_l+0xa1a>
 801494e:	4640      	mov	r0, r8
 8014950:	4649      	mov	r1, r9
 8014952:	f7ec f9c1 	bl	8000cd8 <__aeabi_d2lz>
 8014956:	f7eb fe31 	bl	80005bc <__aeabi_l2d>
 801495a:	4602      	mov	r2, r0
 801495c:	460b      	mov	r3, r1
 801495e:	4640      	mov	r0, r8
 8014960:	4649      	mov	r1, r9
 8014962:	f7eb fca1 	bl	80002a8 <__aeabi_dsub>
 8014966:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014968:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801496c:	ea43 030a 	orr.w	r3, r3, sl
 8014970:	4313      	orrs	r3, r2
 8014972:	4680      	mov	r8, r0
 8014974:	4689      	mov	r9, r1
 8014976:	d053      	beq.n	8014a20 <_strtod_l+0xba8>
 8014978:	a335      	add	r3, pc, #212	; (adr r3, 8014a50 <_strtod_l+0xbd8>)
 801497a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801497e:	f7ec f8bd 	bl	8000afc <__aeabi_dcmplt>
 8014982:	2800      	cmp	r0, #0
 8014984:	f47f acce 	bne.w	8014324 <_strtod_l+0x4ac>
 8014988:	a333      	add	r3, pc, #204	; (adr r3, 8014a58 <_strtod_l+0xbe0>)
 801498a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801498e:	4640      	mov	r0, r8
 8014990:	4649      	mov	r1, r9
 8014992:	f7ec f8d1 	bl	8000b38 <__aeabi_dcmpgt>
 8014996:	2800      	cmp	r0, #0
 8014998:	f43f af7b 	beq.w	8014892 <_strtod_l+0xa1a>
 801499c:	e4c2      	b.n	8014324 <_strtod_l+0x4ac>
 801499e:	9b04      	ldr	r3, [sp, #16]
 80149a0:	b333      	cbz	r3, 80149f0 <_strtod_l+0xb78>
 80149a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80149a4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80149a8:	d822      	bhi.n	80149f0 <_strtod_l+0xb78>
 80149aa:	a32d      	add	r3, pc, #180	; (adr r3, 8014a60 <_strtod_l+0xbe8>)
 80149ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149b0:	4640      	mov	r0, r8
 80149b2:	4649      	mov	r1, r9
 80149b4:	f7ec f8ac 	bl	8000b10 <__aeabi_dcmple>
 80149b8:	b1a0      	cbz	r0, 80149e4 <_strtod_l+0xb6c>
 80149ba:	4649      	mov	r1, r9
 80149bc:	4640      	mov	r0, r8
 80149be:	f7ec f903 	bl	8000bc8 <__aeabi_d2uiz>
 80149c2:	2801      	cmp	r0, #1
 80149c4:	bf38      	it	cc
 80149c6:	2001      	movcc	r0, #1
 80149c8:	f7eb fdac 	bl	8000524 <__aeabi_ui2d>
 80149cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80149ce:	4680      	mov	r8, r0
 80149d0:	4689      	mov	r9, r1
 80149d2:	bb13      	cbnz	r3, 8014a1a <_strtod_l+0xba2>
 80149d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80149d8:	9014      	str	r0, [sp, #80]	; 0x50
 80149da:	9315      	str	r3, [sp, #84]	; 0x54
 80149dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80149e0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80149e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80149e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80149e8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80149ec:	1a9b      	subs	r3, r3, r2
 80149ee:	930d      	str	r3, [sp, #52]	; 0x34
 80149f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80149f4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80149f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80149fc:	f002 f8ae 	bl	8016b5c <__ulp>
 8014a00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014a04:	ec53 2b10 	vmov	r2, r3, d0
 8014a08:	f7eb fe06 	bl	8000618 <__aeabi_dmul>
 8014a0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014a10:	f7eb fc4c 	bl	80002ac <__adddf3>
 8014a14:	4682      	mov	sl, r0
 8014a16:	468b      	mov	fp, r1
 8014a18:	e78f      	b.n	801493a <_strtod_l+0xac2>
 8014a1a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8014a1e:	e7dd      	b.n	80149dc <_strtod_l+0xb64>
 8014a20:	a311      	add	r3, pc, #68	; (adr r3, 8014a68 <_strtod_l+0xbf0>)
 8014a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a26:	f7ec f869 	bl	8000afc <__aeabi_dcmplt>
 8014a2a:	e7b4      	b.n	8014996 <_strtod_l+0xb1e>
 8014a2c:	2300      	movs	r3, #0
 8014a2e:	930e      	str	r3, [sp, #56]	; 0x38
 8014a30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014a32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014a34:	6013      	str	r3, [r2, #0]
 8014a36:	f7ff ba65 	b.w	8013f04 <_strtod_l+0x8c>
 8014a3a:	2b65      	cmp	r3, #101	; 0x65
 8014a3c:	f43f ab5d 	beq.w	80140fa <_strtod_l+0x282>
 8014a40:	2b45      	cmp	r3, #69	; 0x45
 8014a42:	f43f ab5a 	beq.w	80140fa <_strtod_l+0x282>
 8014a46:	2201      	movs	r2, #1
 8014a48:	f7ff bb92 	b.w	8014170 <_strtod_l+0x2f8>
 8014a4c:	f3af 8000 	nop.w
 8014a50:	94a03595 	.word	0x94a03595
 8014a54:	3fdfffff 	.word	0x3fdfffff
 8014a58:	35afe535 	.word	0x35afe535
 8014a5c:	3fe00000 	.word	0x3fe00000
 8014a60:	ffc00000 	.word	0xffc00000
 8014a64:	41dfffff 	.word	0x41dfffff
 8014a68:	94a03595 	.word	0x94a03595
 8014a6c:	3fcfffff 	.word	0x3fcfffff
 8014a70:	3ff00000 	.word	0x3ff00000
 8014a74:	7ff00000 	.word	0x7ff00000
 8014a78:	7fe00000 	.word	0x7fe00000
 8014a7c:	7c9fffff 	.word	0x7c9fffff
 8014a80:	3fe00000 	.word	0x3fe00000
 8014a84:	bff00000 	.word	0xbff00000
 8014a88:	7fefffff 	.word	0x7fefffff

08014a8c <_strtod_r>:
 8014a8c:	4b01      	ldr	r3, [pc, #4]	; (8014a94 <_strtod_r+0x8>)
 8014a8e:	f7ff b9f3 	b.w	8013e78 <_strtod_l>
 8014a92:	bf00      	nop
 8014a94:	200000e8 	.word	0x200000e8

08014a98 <_strtol_l.isra.0>:
 8014a98:	2b01      	cmp	r3, #1
 8014a9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a9e:	d001      	beq.n	8014aa4 <_strtol_l.isra.0+0xc>
 8014aa0:	2b24      	cmp	r3, #36	; 0x24
 8014aa2:	d906      	bls.n	8014ab2 <_strtol_l.isra.0+0x1a>
 8014aa4:	f7fe f86c 	bl	8012b80 <__errno>
 8014aa8:	2316      	movs	r3, #22
 8014aaa:	6003      	str	r3, [r0, #0]
 8014aac:	2000      	movs	r0, #0
 8014aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ab2:	4f3a      	ldr	r7, [pc, #232]	; (8014b9c <_strtol_l.isra.0+0x104>)
 8014ab4:	468e      	mov	lr, r1
 8014ab6:	4676      	mov	r6, lr
 8014ab8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8014abc:	5de5      	ldrb	r5, [r4, r7]
 8014abe:	f015 0508 	ands.w	r5, r5, #8
 8014ac2:	d1f8      	bne.n	8014ab6 <_strtol_l.isra.0+0x1e>
 8014ac4:	2c2d      	cmp	r4, #45	; 0x2d
 8014ac6:	d134      	bne.n	8014b32 <_strtol_l.isra.0+0x9a>
 8014ac8:	f89e 4000 	ldrb.w	r4, [lr]
 8014acc:	f04f 0801 	mov.w	r8, #1
 8014ad0:	f106 0e02 	add.w	lr, r6, #2
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d05c      	beq.n	8014b92 <_strtol_l.isra.0+0xfa>
 8014ad8:	2b10      	cmp	r3, #16
 8014ada:	d10c      	bne.n	8014af6 <_strtol_l.isra.0+0x5e>
 8014adc:	2c30      	cmp	r4, #48	; 0x30
 8014ade:	d10a      	bne.n	8014af6 <_strtol_l.isra.0+0x5e>
 8014ae0:	f89e 4000 	ldrb.w	r4, [lr]
 8014ae4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014ae8:	2c58      	cmp	r4, #88	; 0x58
 8014aea:	d14d      	bne.n	8014b88 <_strtol_l.isra.0+0xf0>
 8014aec:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8014af0:	2310      	movs	r3, #16
 8014af2:	f10e 0e02 	add.w	lr, lr, #2
 8014af6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8014afa:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014afe:	2600      	movs	r6, #0
 8014b00:	fbbc f9f3 	udiv	r9, ip, r3
 8014b04:	4635      	mov	r5, r6
 8014b06:	fb03 ca19 	mls	sl, r3, r9, ip
 8014b0a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8014b0e:	2f09      	cmp	r7, #9
 8014b10:	d818      	bhi.n	8014b44 <_strtol_l.isra.0+0xac>
 8014b12:	463c      	mov	r4, r7
 8014b14:	42a3      	cmp	r3, r4
 8014b16:	dd24      	ble.n	8014b62 <_strtol_l.isra.0+0xca>
 8014b18:	2e00      	cmp	r6, #0
 8014b1a:	db1f      	blt.n	8014b5c <_strtol_l.isra.0+0xc4>
 8014b1c:	45a9      	cmp	r9, r5
 8014b1e:	d31d      	bcc.n	8014b5c <_strtol_l.isra.0+0xc4>
 8014b20:	d101      	bne.n	8014b26 <_strtol_l.isra.0+0x8e>
 8014b22:	45a2      	cmp	sl, r4
 8014b24:	db1a      	blt.n	8014b5c <_strtol_l.isra.0+0xc4>
 8014b26:	fb05 4503 	mla	r5, r5, r3, r4
 8014b2a:	2601      	movs	r6, #1
 8014b2c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8014b30:	e7eb      	b.n	8014b0a <_strtol_l.isra.0+0x72>
 8014b32:	2c2b      	cmp	r4, #43	; 0x2b
 8014b34:	bf08      	it	eq
 8014b36:	f89e 4000 	ldrbeq.w	r4, [lr]
 8014b3a:	46a8      	mov	r8, r5
 8014b3c:	bf08      	it	eq
 8014b3e:	f106 0e02 	addeq.w	lr, r6, #2
 8014b42:	e7c7      	b.n	8014ad4 <_strtol_l.isra.0+0x3c>
 8014b44:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8014b48:	2f19      	cmp	r7, #25
 8014b4a:	d801      	bhi.n	8014b50 <_strtol_l.isra.0+0xb8>
 8014b4c:	3c37      	subs	r4, #55	; 0x37
 8014b4e:	e7e1      	b.n	8014b14 <_strtol_l.isra.0+0x7c>
 8014b50:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8014b54:	2f19      	cmp	r7, #25
 8014b56:	d804      	bhi.n	8014b62 <_strtol_l.isra.0+0xca>
 8014b58:	3c57      	subs	r4, #87	; 0x57
 8014b5a:	e7db      	b.n	8014b14 <_strtol_l.isra.0+0x7c>
 8014b5c:	f04f 36ff 	mov.w	r6, #4294967295
 8014b60:	e7e4      	b.n	8014b2c <_strtol_l.isra.0+0x94>
 8014b62:	2e00      	cmp	r6, #0
 8014b64:	da05      	bge.n	8014b72 <_strtol_l.isra.0+0xda>
 8014b66:	2322      	movs	r3, #34	; 0x22
 8014b68:	6003      	str	r3, [r0, #0]
 8014b6a:	4665      	mov	r5, ip
 8014b6c:	b942      	cbnz	r2, 8014b80 <_strtol_l.isra.0+0xe8>
 8014b6e:	4628      	mov	r0, r5
 8014b70:	e79d      	b.n	8014aae <_strtol_l.isra.0+0x16>
 8014b72:	f1b8 0f00 	cmp.w	r8, #0
 8014b76:	d000      	beq.n	8014b7a <_strtol_l.isra.0+0xe2>
 8014b78:	426d      	negs	r5, r5
 8014b7a:	2a00      	cmp	r2, #0
 8014b7c:	d0f7      	beq.n	8014b6e <_strtol_l.isra.0+0xd6>
 8014b7e:	b10e      	cbz	r6, 8014b84 <_strtol_l.isra.0+0xec>
 8014b80:	f10e 31ff 	add.w	r1, lr, #4294967295
 8014b84:	6011      	str	r1, [r2, #0]
 8014b86:	e7f2      	b.n	8014b6e <_strtol_l.isra.0+0xd6>
 8014b88:	2430      	movs	r4, #48	; 0x30
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d1b3      	bne.n	8014af6 <_strtol_l.isra.0+0x5e>
 8014b8e:	2308      	movs	r3, #8
 8014b90:	e7b1      	b.n	8014af6 <_strtol_l.isra.0+0x5e>
 8014b92:	2c30      	cmp	r4, #48	; 0x30
 8014b94:	d0a4      	beq.n	8014ae0 <_strtol_l.isra.0+0x48>
 8014b96:	230a      	movs	r3, #10
 8014b98:	e7ad      	b.n	8014af6 <_strtol_l.isra.0+0x5e>
 8014b9a:	bf00      	nop
 8014b9c:	08018d61 	.word	0x08018d61

08014ba0 <_strtol_r>:
 8014ba0:	f7ff bf7a 	b.w	8014a98 <_strtol_l.isra.0>

08014ba4 <strtol>:
 8014ba4:	4613      	mov	r3, r2
 8014ba6:	460a      	mov	r2, r1
 8014ba8:	4601      	mov	r1, r0
 8014baa:	4802      	ldr	r0, [pc, #8]	; (8014bb4 <strtol+0x10>)
 8014bac:	6800      	ldr	r0, [r0, #0]
 8014bae:	f7ff bf73 	b.w	8014a98 <_strtol_l.isra.0>
 8014bb2:	bf00      	nop
 8014bb4:	20000080 	.word	0x20000080

08014bb8 <_vsniprintf_r>:
 8014bb8:	b530      	push	{r4, r5, lr}
 8014bba:	1e14      	subs	r4, r2, #0
 8014bbc:	4605      	mov	r5, r0
 8014bbe:	b09b      	sub	sp, #108	; 0x6c
 8014bc0:	4618      	mov	r0, r3
 8014bc2:	da05      	bge.n	8014bd0 <_vsniprintf_r+0x18>
 8014bc4:	238b      	movs	r3, #139	; 0x8b
 8014bc6:	602b      	str	r3, [r5, #0]
 8014bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8014bcc:	b01b      	add	sp, #108	; 0x6c
 8014bce:	bd30      	pop	{r4, r5, pc}
 8014bd0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014bd4:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014bd8:	bf14      	ite	ne
 8014bda:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014bde:	4623      	moveq	r3, r4
 8014be0:	9302      	str	r3, [sp, #8]
 8014be2:	9305      	str	r3, [sp, #20]
 8014be4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014be8:	9100      	str	r1, [sp, #0]
 8014bea:	9104      	str	r1, [sp, #16]
 8014bec:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014bf0:	4602      	mov	r2, r0
 8014bf2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014bf4:	4669      	mov	r1, sp
 8014bf6:	4628      	mov	r0, r5
 8014bf8:	f002 f9ba 	bl	8016f70 <_svfiprintf_r>
 8014bfc:	1c43      	adds	r3, r0, #1
 8014bfe:	bfbc      	itt	lt
 8014c00:	238b      	movlt	r3, #139	; 0x8b
 8014c02:	602b      	strlt	r3, [r5, #0]
 8014c04:	2c00      	cmp	r4, #0
 8014c06:	d0e1      	beq.n	8014bcc <_vsniprintf_r+0x14>
 8014c08:	9b00      	ldr	r3, [sp, #0]
 8014c0a:	2200      	movs	r2, #0
 8014c0c:	701a      	strb	r2, [r3, #0]
 8014c0e:	e7dd      	b.n	8014bcc <_vsniprintf_r+0x14>

08014c10 <vsniprintf>:
 8014c10:	b507      	push	{r0, r1, r2, lr}
 8014c12:	9300      	str	r3, [sp, #0]
 8014c14:	4613      	mov	r3, r2
 8014c16:	460a      	mov	r2, r1
 8014c18:	4601      	mov	r1, r0
 8014c1a:	4803      	ldr	r0, [pc, #12]	; (8014c28 <vsniprintf+0x18>)
 8014c1c:	6800      	ldr	r0, [r0, #0]
 8014c1e:	f7ff ffcb 	bl	8014bb8 <_vsniprintf_r>
 8014c22:	b003      	add	sp, #12
 8014c24:	f85d fb04 	ldr.w	pc, [sp], #4
 8014c28:	20000080 	.word	0x20000080

08014c2c <__swbuf_r>:
 8014c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c2e:	460e      	mov	r6, r1
 8014c30:	4614      	mov	r4, r2
 8014c32:	4605      	mov	r5, r0
 8014c34:	b118      	cbz	r0, 8014c3e <__swbuf_r+0x12>
 8014c36:	6983      	ldr	r3, [r0, #24]
 8014c38:	b90b      	cbnz	r3, 8014c3e <__swbuf_r+0x12>
 8014c3a:	f7fd ffff 	bl	8012c3c <__sinit>
 8014c3e:	4b21      	ldr	r3, [pc, #132]	; (8014cc4 <__swbuf_r+0x98>)
 8014c40:	429c      	cmp	r4, r3
 8014c42:	d12b      	bne.n	8014c9c <__swbuf_r+0x70>
 8014c44:	686c      	ldr	r4, [r5, #4]
 8014c46:	69a3      	ldr	r3, [r4, #24]
 8014c48:	60a3      	str	r3, [r4, #8]
 8014c4a:	89a3      	ldrh	r3, [r4, #12]
 8014c4c:	071a      	lsls	r2, r3, #28
 8014c4e:	d52f      	bpl.n	8014cb0 <__swbuf_r+0x84>
 8014c50:	6923      	ldr	r3, [r4, #16]
 8014c52:	b36b      	cbz	r3, 8014cb0 <__swbuf_r+0x84>
 8014c54:	6923      	ldr	r3, [r4, #16]
 8014c56:	6820      	ldr	r0, [r4, #0]
 8014c58:	1ac0      	subs	r0, r0, r3
 8014c5a:	6963      	ldr	r3, [r4, #20]
 8014c5c:	b2f6      	uxtb	r6, r6
 8014c5e:	4283      	cmp	r3, r0
 8014c60:	4637      	mov	r7, r6
 8014c62:	dc04      	bgt.n	8014c6e <__swbuf_r+0x42>
 8014c64:	4621      	mov	r1, r4
 8014c66:	4628      	mov	r0, r5
 8014c68:	f000 ffc0 	bl	8015bec <_fflush_r>
 8014c6c:	bb30      	cbnz	r0, 8014cbc <__swbuf_r+0x90>
 8014c6e:	68a3      	ldr	r3, [r4, #8]
 8014c70:	3b01      	subs	r3, #1
 8014c72:	60a3      	str	r3, [r4, #8]
 8014c74:	6823      	ldr	r3, [r4, #0]
 8014c76:	1c5a      	adds	r2, r3, #1
 8014c78:	6022      	str	r2, [r4, #0]
 8014c7a:	701e      	strb	r6, [r3, #0]
 8014c7c:	6963      	ldr	r3, [r4, #20]
 8014c7e:	3001      	adds	r0, #1
 8014c80:	4283      	cmp	r3, r0
 8014c82:	d004      	beq.n	8014c8e <__swbuf_r+0x62>
 8014c84:	89a3      	ldrh	r3, [r4, #12]
 8014c86:	07db      	lsls	r3, r3, #31
 8014c88:	d506      	bpl.n	8014c98 <__swbuf_r+0x6c>
 8014c8a:	2e0a      	cmp	r6, #10
 8014c8c:	d104      	bne.n	8014c98 <__swbuf_r+0x6c>
 8014c8e:	4621      	mov	r1, r4
 8014c90:	4628      	mov	r0, r5
 8014c92:	f000 ffab 	bl	8015bec <_fflush_r>
 8014c96:	b988      	cbnz	r0, 8014cbc <__swbuf_r+0x90>
 8014c98:	4638      	mov	r0, r7
 8014c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c9c:	4b0a      	ldr	r3, [pc, #40]	; (8014cc8 <__swbuf_r+0x9c>)
 8014c9e:	429c      	cmp	r4, r3
 8014ca0:	d101      	bne.n	8014ca6 <__swbuf_r+0x7a>
 8014ca2:	68ac      	ldr	r4, [r5, #8]
 8014ca4:	e7cf      	b.n	8014c46 <__swbuf_r+0x1a>
 8014ca6:	4b09      	ldr	r3, [pc, #36]	; (8014ccc <__swbuf_r+0xa0>)
 8014ca8:	429c      	cmp	r4, r3
 8014caa:	bf08      	it	eq
 8014cac:	68ec      	ldreq	r4, [r5, #12]
 8014cae:	e7ca      	b.n	8014c46 <__swbuf_r+0x1a>
 8014cb0:	4621      	mov	r1, r4
 8014cb2:	4628      	mov	r0, r5
 8014cb4:	f000 f81e 	bl	8014cf4 <__swsetup_r>
 8014cb8:	2800      	cmp	r0, #0
 8014cba:	d0cb      	beq.n	8014c54 <__swbuf_r+0x28>
 8014cbc:	f04f 37ff 	mov.w	r7, #4294967295
 8014cc0:	e7ea      	b.n	8014c98 <__swbuf_r+0x6c>
 8014cc2:	bf00      	nop
 8014cc4:	08018e84 	.word	0x08018e84
 8014cc8:	08018ea4 	.word	0x08018ea4
 8014ccc:	08018e64 	.word	0x08018e64

08014cd0 <_write_r>:
 8014cd0:	b538      	push	{r3, r4, r5, lr}
 8014cd2:	4d07      	ldr	r5, [pc, #28]	; (8014cf0 <_write_r+0x20>)
 8014cd4:	4604      	mov	r4, r0
 8014cd6:	4608      	mov	r0, r1
 8014cd8:	4611      	mov	r1, r2
 8014cda:	2200      	movs	r2, #0
 8014cdc:	602a      	str	r2, [r5, #0]
 8014cde:	461a      	mov	r2, r3
 8014ce0:	f003 f8fc 	bl	8017edc <_write>
 8014ce4:	1c43      	adds	r3, r0, #1
 8014ce6:	d102      	bne.n	8014cee <_write_r+0x1e>
 8014ce8:	682b      	ldr	r3, [r5, #0]
 8014cea:	b103      	cbz	r3, 8014cee <_write_r+0x1e>
 8014cec:	6023      	str	r3, [r4, #0]
 8014cee:	bd38      	pop	{r3, r4, r5, pc}
 8014cf0:	20006920 	.word	0x20006920

08014cf4 <__swsetup_r>:
 8014cf4:	4b32      	ldr	r3, [pc, #200]	; (8014dc0 <__swsetup_r+0xcc>)
 8014cf6:	b570      	push	{r4, r5, r6, lr}
 8014cf8:	681d      	ldr	r5, [r3, #0]
 8014cfa:	4606      	mov	r6, r0
 8014cfc:	460c      	mov	r4, r1
 8014cfe:	b125      	cbz	r5, 8014d0a <__swsetup_r+0x16>
 8014d00:	69ab      	ldr	r3, [r5, #24]
 8014d02:	b913      	cbnz	r3, 8014d0a <__swsetup_r+0x16>
 8014d04:	4628      	mov	r0, r5
 8014d06:	f7fd ff99 	bl	8012c3c <__sinit>
 8014d0a:	4b2e      	ldr	r3, [pc, #184]	; (8014dc4 <__swsetup_r+0xd0>)
 8014d0c:	429c      	cmp	r4, r3
 8014d0e:	d10f      	bne.n	8014d30 <__swsetup_r+0x3c>
 8014d10:	686c      	ldr	r4, [r5, #4]
 8014d12:	89a3      	ldrh	r3, [r4, #12]
 8014d14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014d18:	0719      	lsls	r1, r3, #28
 8014d1a:	d42c      	bmi.n	8014d76 <__swsetup_r+0x82>
 8014d1c:	06dd      	lsls	r5, r3, #27
 8014d1e:	d411      	bmi.n	8014d44 <__swsetup_r+0x50>
 8014d20:	2309      	movs	r3, #9
 8014d22:	6033      	str	r3, [r6, #0]
 8014d24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014d28:	81a3      	strh	r3, [r4, #12]
 8014d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8014d2e:	e03e      	b.n	8014dae <__swsetup_r+0xba>
 8014d30:	4b25      	ldr	r3, [pc, #148]	; (8014dc8 <__swsetup_r+0xd4>)
 8014d32:	429c      	cmp	r4, r3
 8014d34:	d101      	bne.n	8014d3a <__swsetup_r+0x46>
 8014d36:	68ac      	ldr	r4, [r5, #8]
 8014d38:	e7eb      	b.n	8014d12 <__swsetup_r+0x1e>
 8014d3a:	4b24      	ldr	r3, [pc, #144]	; (8014dcc <__swsetup_r+0xd8>)
 8014d3c:	429c      	cmp	r4, r3
 8014d3e:	bf08      	it	eq
 8014d40:	68ec      	ldreq	r4, [r5, #12]
 8014d42:	e7e6      	b.n	8014d12 <__swsetup_r+0x1e>
 8014d44:	0758      	lsls	r0, r3, #29
 8014d46:	d512      	bpl.n	8014d6e <__swsetup_r+0x7a>
 8014d48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014d4a:	b141      	cbz	r1, 8014d5e <__swsetup_r+0x6a>
 8014d4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014d50:	4299      	cmp	r1, r3
 8014d52:	d002      	beq.n	8014d5a <__swsetup_r+0x66>
 8014d54:	4630      	mov	r0, r6
 8014d56:	f002 f85f 	bl	8016e18 <_free_r>
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	6363      	str	r3, [r4, #52]	; 0x34
 8014d5e:	89a3      	ldrh	r3, [r4, #12]
 8014d60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014d64:	81a3      	strh	r3, [r4, #12]
 8014d66:	2300      	movs	r3, #0
 8014d68:	6063      	str	r3, [r4, #4]
 8014d6a:	6923      	ldr	r3, [r4, #16]
 8014d6c:	6023      	str	r3, [r4, #0]
 8014d6e:	89a3      	ldrh	r3, [r4, #12]
 8014d70:	f043 0308 	orr.w	r3, r3, #8
 8014d74:	81a3      	strh	r3, [r4, #12]
 8014d76:	6923      	ldr	r3, [r4, #16]
 8014d78:	b94b      	cbnz	r3, 8014d8e <__swsetup_r+0x9a>
 8014d7a:	89a3      	ldrh	r3, [r4, #12]
 8014d7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014d84:	d003      	beq.n	8014d8e <__swsetup_r+0x9a>
 8014d86:	4621      	mov	r1, r4
 8014d88:	4630      	mov	r0, r6
 8014d8a:	f001 fb15 	bl	80163b8 <__smakebuf_r>
 8014d8e:	89a0      	ldrh	r0, [r4, #12]
 8014d90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014d94:	f010 0301 	ands.w	r3, r0, #1
 8014d98:	d00a      	beq.n	8014db0 <__swsetup_r+0xbc>
 8014d9a:	2300      	movs	r3, #0
 8014d9c:	60a3      	str	r3, [r4, #8]
 8014d9e:	6963      	ldr	r3, [r4, #20]
 8014da0:	425b      	negs	r3, r3
 8014da2:	61a3      	str	r3, [r4, #24]
 8014da4:	6923      	ldr	r3, [r4, #16]
 8014da6:	b943      	cbnz	r3, 8014dba <__swsetup_r+0xc6>
 8014da8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014dac:	d1ba      	bne.n	8014d24 <__swsetup_r+0x30>
 8014dae:	bd70      	pop	{r4, r5, r6, pc}
 8014db0:	0781      	lsls	r1, r0, #30
 8014db2:	bf58      	it	pl
 8014db4:	6963      	ldrpl	r3, [r4, #20]
 8014db6:	60a3      	str	r3, [r4, #8]
 8014db8:	e7f4      	b.n	8014da4 <__swsetup_r+0xb0>
 8014dba:	2000      	movs	r0, #0
 8014dbc:	e7f7      	b.n	8014dae <__swsetup_r+0xba>
 8014dbe:	bf00      	nop
 8014dc0:	20000080 	.word	0x20000080
 8014dc4:	08018e84 	.word	0x08018e84
 8014dc8:	08018ea4 	.word	0x08018ea4
 8014dcc:	08018e64 	.word	0x08018e64

08014dd0 <_close_r>:
 8014dd0:	b538      	push	{r3, r4, r5, lr}
 8014dd2:	4d06      	ldr	r5, [pc, #24]	; (8014dec <_close_r+0x1c>)
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	4604      	mov	r4, r0
 8014dd8:	4608      	mov	r0, r1
 8014dda:	602b      	str	r3, [r5, #0]
 8014ddc:	f003 f838 	bl	8017e50 <_close>
 8014de0:	1c43      	adds	r3, r0, #1
 8014de2:	d102      	bne.n	8014dea <_close_r+0x1a>
 8014de4:	682b      	ldr	r3, [r5, #0]
 8014de6:	b103      	cbz	r3, 8014dea <_close_r+0x1a>
 8014de8:	6023      	str	r3, [r4, #0]
 8014dea:	bd38      	pop	{r3, r4, r5, pc}
 8014dec:	20006920 	.word	0x20006920

08014df0 <quorem>:
 8014df0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014df4:	6903      	ldr	r3, [r0, #16]
 8014df6:	690c      	ldr	r4, [r1, #16]
 8014df8:	42a3      	cmp	r3, r4
 8014dfa:	4607      	mov	r7, r0
 8014dfc:	f2c0 8081 	blt.w	8014f02 <quorem+0x112>
 8014e00:	3c01      	subs	r4, #1
 8014e02:	f101 0814 	add.w	r8, r1, #20
 8014e06:	f100 0514 	add.w	r5, r0, #20
 8014e0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014e0e:	9301      	str	r3, [sp, #4]
 8014e10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014e14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014e18:	3301      	adds	r3, #1
 8014e1a:	429a      	cmp	r2, r3
 8014e1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014e20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014e24:	fbb2 f6f3 	udiv	r6, r2, r3
 8014e28:	d331      	bcc.n	8014e8e <quorem+0x9e>
 8014e2a:	f04f 0e00 	mov.w	lr, #0
 8014e2e:	4640      	mov	r0, r8
 8014e30:	46ac      	mov	ip, r5
 8014e32:	46f2      	mov	sl, lr
 8014e34:	f850 2b04 	ldr.w	r2, [r0], #4
 8014e38:	b293      	uxth	r3, r2
 8014e3a:	fb06 e303 	mla	r3, r6, r3, lr
 8014e3e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8014e42:	b29b      	uxth	r3, r3
 8014e44:	ebaa 0303 	sub.w	r3, sl, r3
 8014e48:	0c12      	lsrs	r2, r2, #16
 8014e4a:	f8dc a000 	ldr.w	sl, [ip]
 8014e4e:	fb06 e202 	mla	r2, r6, r2, lr
 8014e52:	fa13 f38a 	uxtah	r3, r3, sl
 8014e56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014e5a:	fa1f fa82 	uxth.w	sl, r2
 8014e5e:	f8dc 2000 	ldr.w	r2, [ip]
 8014e62:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8014e66:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014e6a:	b29b      	uxth	r3, r3
 8014e6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014e70:	4581      	cmp	r9, r0
 8014e72:	f84c 3b04 	str.w	r3, [ip], #4
 8014e76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014e7a:	d2db      	bcs.n	8014e34 <quorem+0x44>
 8014e7c:	f855 300b 	ldr.w	r3, [r5, fp]
 8014e80:	b92b      	cbnz	r3, 8014e8e <quorem+0x9e>
 8014e82:	9b01      	ldr	r3, [sp, #4]
 8014e84:	3b04      	subs	r3, #4
 8014e86:	429d      	cmp	r5, r3
 8014e88:	461a      	mov	r2, r3
 8014e8a:	d32e      	bcc.n	8014eea <quorem+0xfa>
 8014e8c:	613c      	str	r4, [r7, #16]
 8014e8e:	4638      	mov	r0, r7
 8014e90:	f001 fdc0 	bl	8016a14 <__mcmp>
 8014e94:	2800      	cmp	r0, #0
 8014e96:	db24      	blt.n	8014ee2 <quorem+0xf2>
 8014e98:	3601      	adds	r6, #1
 8014e9a:	4628      	mov	r0, r5
 8014e9c:	f04f 0c00 	mov.w	ip, #0
 8014ea0:	f858 2b04 	ldr.w	r2, [r8], #4
 8014ea4:	f8d0 e000 	ldr.w	lr, [r0]
 8014ea8:	b293      	uxth	r3, r2
 8014eaa:	ebac 0303 	sub.w	r3, ip, r3
 8014eae:	0c12      	lsrs	r2, r2, #16
 8014eb0:	fa13 f38e 	uxtah	r3, r3, lr
 8014eb4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014eb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014ebc:	b29b      	uxth	r3, r3
 8014ebe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014ec2:	45c1      	cmp	r9, r8
 8014ec4:	f840 3b04 	str.w	r3, [r0], #4
 8014ec8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014ecc:	d2e8      	bcs.n	8014ea0 <quorem+0xb0>
 8014ece:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014ed2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014ed6:	b922      	cbnz	r2, 8014ee2 <quorem+0xf2>
 8014ed8:	3b04      	subs	r3, #4
 8014eda:	429d      	cmp	r5, r3
 8014edc:	461a      	mov	r2, r3
 8014ede:	d30a      	bcc.n	8014ef6 <quorem+0x106>
 8014ee0:	613c      	str	r4, [r7, #16]
 8014ee2:	4630      	mov	r0, r6
 8014ee4:	b003      	add	sp, #12
 8014ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eea:	6812      	ldr	r2, [r2, #0]
 8014eec:	3b04      	subs	r3, #4
 8014eee:	2a00      	cmp	r2, #0
 8014ef0:	d1cc      	bne.n	8014e8c <quorem+0x9c>
 8014ef2:	3c01      	subs	r4, #1
 8014ef4:	e7c7      	b.n	8014e86 <quorem+0x96>
 8014ef6:	6812      	ldr	r2, [r2, #0]
 8014ef8:	3b04      	subs	r3, #4
 8014efa:	2a00      	cmp	r2, #0
 8014efc:	d1f0      	bne.n	8014ee0 <quorem+0xf0>
 8014efe:	3c01      	subs	r4, #1
 8014f00:	e7eb      	b.n	8014eda <quorem+0xea>
 8014f02:	2000      	movs	r0, #0
 8014f04:	e7ee      	b.n	8014ee4 <quorem+0xf4>
	...

08014f08 <_dtoa_r>:
 8014f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f0c:	ed2d 8b02 	vpush	{d8}
 8014f10:	ec57 6b10 	vmov	r6, r7, d0
 8014f14:	b095      	sub	sp, #84	; 0x54
 8014f16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014f18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014f1c:	9105      	str	r1, [sp, #20]
 8014f1e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8014f22:	4604      	mov	r4, r0
 8014f24:	9209      	str	r2, [sp, #36]	; 0x24
 8014f26:	930f      	str	r3, [sp, #60]	; 0x3c
 8014f28:	b975      	cbnz	r5, 8014f48 <_dtoa_r+0x40>
 8014f2a:	2010      	movs	r0, #16
 8014f2c:	f001 fa84 	bl	8016438 <malloc>
 8014f30:	4602      	mov	r2, r0
 8014f32:	6260      	str	r0, [r4, #36]	; 0x24
 8014f34:	b920      	cbnz	r0, 8014f40 <_dtoa_r+0x38>
 8014f36:	4bb2      	ldr	r3, [pc, #712]	; (8015200 <_dtoa_r+0x2f8>)
 8014f38:	21ea      	movs	r1, #234	; 0xea
 8014f3a:	48b2      	ldr	r0, [pc, #712]	; (8015204 <_dtoa_r+0x2fc>)
 8014f3c:	f002 fea2 	bl	8017c84 <__assert_func>
 8014f40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014f44:	6005      	str	r5, [r0, #0]
 8014f46:	60c5      	str	r5, [r0, #12]
 8014f48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014f4a:	6819      	ldr	r1, [r3, #0]
 8014f4c:	b151      	cbz	r1, 8014f64 <_dtoa_r+0x5c>
 8014f4e:	685a      	ldr	r2, [r3, #4]
 8014f50:	604a      	str	r2, [r1, #4]
 8014f52:	2301      	movs	r3, #1
 8014f54:	4093      	lsls	r3, r2
 8014f56:	608b      	str	r3, [r1, #8]
 8014f58:	4620      	mov	r0, r4
 8014f5a:	f001 fad3 	bl	8016504 <_Bfree>
 8014f5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014f60:	2200      	movs	r2, #0
 8014f62:	601a      	str	r2, [r3, #0]
 8014f64:	1e3b      	subs	r3, r7, #0
 8014f66:	bfb9      	ittee	lt
 8014f68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014f6c:	9303      	strlt	r3, [sp, #12]
 8014f6e:	2300      	movge	r3, #0
 8014f70:	f8c8 3000 	strge.w	r3, [r8]
 8014f74:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8014f78:	4ba3      	ldr	r3, [pc, #652]	; (8015208 <_dtoa_r+0x300>)
 8014f7a:	bfbc      	itt	lt
 8014f7c:	2201      	movlt	r2, #1
 8014f7e:	f8c8 2000 	strlt.w	r2, [r8]
 8014f82:	ea33 0309 	bics.w	r3, r3, r9
 8014f86:	d11b      	bne.n	8014fc0 <_dtoa_r+0xb8>
 8014f88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014f8a:	f242 730f 	movw	r3, #9999	; 0x270f
 8014f8e:	6013      	str	r3, [r2, #0]
 8014f90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014f94:	4333      	orrs	r3, r6
 8014f96:	f000 857a 	beq.w	8015a8e <_dtoa_r+0xb86>
 8014f9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014f9c:	b963      	cbnz	r3, 8014fb8 <_dtoa_r+0xb0>
 8014f9e:	4b9b      	ldr	r3, [pc, #620]	; (801520c <_dtoa_r+0x304>)
 8014fa0:	e024      	b.n	8014fec <_dtoa_r+0xe4>
 8014fa2:	4b9b      	ldr	r3, [pc, #620]	; (8015210 <_dtoa_r+0x308>)
 8014fa4:	9300      	str	r3, [sp, #0]
 8014fa6:	3308      	adds	r3, #8
 8014fa8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014faa:	6013      	str	r3, [r2, #0]
 8014fac:	9800      	ldr	r0, [sp, #0]
 8014fae:	b015      	add	sp, #84	; 0x54
 8014fb0:	ecbd 8b02 	vpop	{d8}
 8014fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fb8:	4b94      	ldr	r3, [pc, #592]	; (801520c <_dtoa_r+0x304>)
 8014fba:	9300      	str	r3, [sp, #0]
 8014fbc:	3303      	adds	r3, #3
 8014fbe:	e7f3      	b.n	8014fa8 <_dtoa_r+0xa0>
 8014fc0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014fc4:	2200      	movs	r2, #0
 8014fc6:	ec51 0b17 	vmov	r0, r1, d7
 8014fca:	2300      	movs	r3, #0
 8014fcc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8014fd0:	f7eb fd8a 	bl	8000ae8 <__aeabi_dcmpeq>
 8014fd4:	4680      	mov	r8, r0
 8014fd6:	b158      	cbz	r0, 8014ff0 <_dtoa_r+0xe8>
 8014fd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014fda:	2301      	movs	r3, #1
 8014fdc:	6013      	str	r3, [r2, #0]
 8014fde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	f000 8551 	beq.w	8015a88 <_dtoa_r+0xb80>
 8014fe6:	488b      	ldr	r0, [pc, #556]	; (8015214 <_dtoa_r+0x30c>)
 8014fe8:	6018      	str	r0, [r3, #0]
 8014fea:	1e43      	subs	r3, r0, #1
 8014fec:	9300      	str	r3, [sp, #0]
 8014fee:	e7dd      	b.n	8014fac <_dtoa_r+0xa4>
 8014ff0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8014ff4:	aa12      	add	r2, sp, #72	; 0x48
 8014ff6:	a913      	add	r1, sp, #76	; 0x4c
 8014ff8:	4620      	mov	r0, r4
 8014ffa:	f001 fe2b 	bl	8016c54 <__d2b>
 8014ffe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015002:	4683      	mov	fp, r0
 8015004:	2d00      	cmp	r5, #0
 8015006:	d07c      	beq.n	8015102 <_dtoa_r+0x1fa>
 8015008:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801500a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801500e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015012:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8015016:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801501a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801501e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015022:	4b7d      	ldr	r3, [pc, #500]	; (8015218 <_dtoa_r+0x310>)
 8015024:	2200      	movs	r2, #0
 8015026:	4630      	mov	r0, r6
 8015028:	4639      	mov	r1, r7
 801502a:	f7eb f93d 	bl	80002a8 <__aeabi_dsub>
 801502e:	a36e      	add	r3, pc, #440	; (adr r3, 80151e8 <_dtoa_r+0x2e0>)
 8015030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015034:	f7eb faf0 	bl	8000618 <__aeabi_dmul>
 8015038:	a36d      	add	r3, pc, #436	; (adr r3, 80151f0 <_dtoa_r+0x2e8>)
 801503a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801503e:	f7eb f935 	bl	80002ac <__adddf3>
 8015042:	4606      	mov	r6, r0
 8015044:	4628      	mov	r0, r5
 8015046:	460f      	mov	r7, r1
 8015048:	f7eb fa7c 	bl	8000544 <__aeabi_i2d>
 801504c:	a36a      	add	r3, pc, #424	; (adr r3, 80151f8 <_dtoa_r+0x2f0>)
 801504e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015052:	f7eb fae1 	bl	8000618 <__aeabi_dmul>
 8015056:	4602      	mov	r2, r0
 8015058:	460b      	mov	r3, r1
 801505a:	4630      	mov	r0, r6
 801505c:	4639      	mov	r1, r7
 801505e:	f7eb f925 	bl	80002ac <__adddf3>
 8015062:	4606      	mov	r6, r0
 8015064:	460f      	mov	r7, r1
 8015066:	f7eb fd87 	bl	8000b78 <__aeabi_d2iz>
 801506a:	2200      	movs	r2, #0
 801506c:	4682      	mov	sl, r0
 801506e:	2300      	movs	r3, #0
 8015070:	4630      	mov	r0, r6
 8015072:	4639      	mov	r1, r7
 8015074:	f7eb fd42 	bl	8000afc <__aeabi_dcmplt>
 8015078:	b148      	cbz	r0, 801508e <_dtoa_r+0x186>
 801507a:	4650      	mov	r0, sl
 801507c:	f7eb fa62 	bl	8000544 <__aeabi_i2d>
 8015080:	4632      	mov	r2, r6
 8015082:	463b      	mov	r3, r7
 8015084:	f7eb fd30 	bl	8000ae8 <__aeabi_dcmpeq>
 8015088:	b908      	cbnz	r0, 801508e <_dtoa_r+0x186>
 801508a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801508e:	f1ba 0f16 	cmp.w	sl, #22
 8015092:	d854      	bhi.n	801513e <_dtoa_r+0x236>
 8015094:	4b61      	ldr	r3, [pc, #388]	; (801521c <_dtoa_r+0x314>)
 8015096:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801509a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801509e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80150a2:	f7eb fd2b 	bl	8000afc <__aeabi_dcmplt>
 80150a6:	2800      	cmp	r0, #0
 80150a8:	d04b      	beq.n	8015142 <_dtoa_r+0x23a>
 80150aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80150ae:	2300      	movs	r3, #0
 80150b0:	930e      	str	r3, [sp, #56]	; 0x38
 80150b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80150b4:	1b5d      	subs	r5, r3, r5
 80150b6:	1e6b      	subs	r3, r5, #1
 80150b8:	9304      	str	r3, [sp, #16]
 80150ba:	bf43      	ittte	mi
 80150bc:	2300      	movmi	r3, #0
 80150be:	f1c5 0801 	rsbmi	r8, r5, #1
 80150c2:	9304      	strmi	r3, [sp, #16]
 80150c4:	f04f 0800 	movpl.w	r8, #0
 80150c8:	f1ba 0f00 	cmp.w	sl, #0
 80150cc:	db3b      	blt.n	8015146 <_dtoa_r+0x23e>
 80150ce:	9b04      	ldr	r3, [sp, #16]
 80150d0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80150d4:	4453      	add	r3, sl
 80150d6:	9304      	str	r3, [sp, #16]
 80150d8:	2300      	movs	r3, #0
 80150da:	9306      	str	r3, [sp, #24]
 80150dc:	9b05      	ldr	r3, [sp, #20]
 80150de:	2b09      	cmp	r3, #9
 80150e0:	d869      	bhi.n	80151b6 <_dtoa_r+0x2ae>
 80150e2:	2b05      	cmp	r3, #5
 80150e4:	bfc4      	itt	gt
 80150e6:	3b04      	subgt	r3, #4
 80150e8:	9305      	strgt	r3, [sp, #20]
 80150ea:	9b05      	ldr	r3, [sp, #20]
 80150ec:	f1a3 0302 	sub.w	r3, r3, #2
 80150f0:	bfcc      	ite	gt
 80150f2:	2500      	movgt	r5, #0
 80150f4:	2501      	movle	r5, #1
 80150f6:	2b03      	cmp	r3, #3
 80150f8:	d869      	bhi.n	80151ce <_dtoa_r+0x2c6>
 80150fa:	e8df f003 	tbb	[pc, r3]
 80150fe:	4e2c      	.short	0x4e2c
 8015100:	5a4c      	.short	0x5a4c
 8015102:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8015106:	441d      	add	r5, r3
 8015108:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801510c:	2b20      	cmp	r3, #32
 801510e:	bfc1      	itttt	gt
 8015110:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015114:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8015118:	fa09 f303 	lslgt.w	r3, r9, r3
 801511c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8015120:	bfda      	itte	le
 8015122:	f1c3 0320 	rsble	r3, r3, #32
 8015126:	fa06 f003 	lslle.w	r0, r6, r3
 801512a:	4318      	orrgt	r0, r3
 801512c:	f7eb f9fa 	bl	8000524 <__aeabi_ui2d>
 8015130:	2301      	movs	r3, #1
 8015132:	4606      	mov	r6, r0
 8015134:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8015138:	3d01      	subs	r5, #1
 801513a:	9310      	str	r3, [sp, #64]	; 0x40
 801513c:	e771      	b.n	8015022 <_dtoa_r+0x11a>
 801513e:	2301      	movs	r3, #1
 8015140:	e7b6      	b.n	80150b0 <_dtoa_r+0x1a8>
 8015142:	900e      	str	r0, [sp, #56]	; 0x38
 8015144:	e7b5      	b.n	80150b2 <_dtoa_r+0x1aa>
 8015146:	f1ca 0300 	rsb	r3, sl, #0
 801514a:	9306      	str	r3, [sp, #24]
 801514c:	2300      	movs	r3, #0
 801514e:	eba8 080a 	sub.w	r8, r8, sl
 8015152:	930d      	str	r3, [sp, #52]	; 0x34
 8015154:	e7c2      	b.n	80150dc <_dtoa_r+0x1d4>
 8015156:	2300      	movs	r3, #0
 8015158:	9308      	str	r3, [sp, #32]
 801515a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801515c:	2b00      	cmp	r3, #0
 801515e:	dc39      	bgt.n	80151d4 <_dtoa_r+0x2cc>
 8015160:	f04f 0901 	mov.w	r9, #1
 8015164:	f8cd 9004 	str.w	r9, [sp, #4]
 8015168:	464b      	mov	r3, r9
 801516a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801516e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015170:	2200      	movs	r2, #0
 8015172:	6042      	str	r2, [r0, #4]
 8015174:	2204      	movs	r2, #4
 8015176:	f102 0614 	add.w	r6, r2, #20
 801517a:	429e      	cmp	r6, r3
 801517c:	6841      	ldr	r1, [r0, #4]
 801517e:	d92f      	bls.n	80151e0 <_dtoa_r+0x2d8>
 8015180:	4620      	mov	r0, r4
 8015182:	f001 f97f 	bl	8016484 <_Balloc>
 8015186:	9000      	str	r0, [sp, #0]
 8015188:	2800      	cmp	r0, #0
 801518a:	d14b      	bne.n	8015224 <_dtoa_r+0x31c>
 801518c:	4b24      	ldr	r3, [pc, #144]	; (8015220 <_dtoa_r+0x318>)
 801518e:	4602      	mov	r2, r0
 8015190:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015194:	e6d1      	b.n	8014f3a <_dtoa_r+0x32>
 8015196:	2301      	movs	r3, #1
 8015198:	e7de      	b.n	8015158 <_dtoa_r+0x250>
 801519a:	2300      	movs	r3, #0
 801519c:	9308      	str	r3, [sp, #32]
 801519e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151a0:	eb0a 0903 	add.w	r9, sl, r3
 80151a4:	f109 0301 	add.w	r3, r9, #1
 80151a8:	2b01      	cmp	r3, #1
 80151aa:	9301      	str	r3, [sp, #4]
 80151ac:	bfb8      	it	lt
 80151ae:	2301      	movlt	r3, #1
 80151b0:	e7dd      	b.n	801516e <_dtoa_r+0x266>
 80151b2:	2301      	movs	r3, #1
 80151b4:	e7f2      	b.n	801519c <_dtoa_r+0x294>
 80151b6:	2501      	movs	r5, #1
 80151b8:	2300      	movs	r3, #0
 80151ba:	9305      	str	r3, [sp, #20]
 80151bc:	9508      	str	r5, [sp, #32]
 80151be:	f04f 39ff 	mov.w	r9, #4294967295
 80151c2:	2200      	movs	r2, #0
 80151c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80151c8:	2312      	movs	r3, #18
 80151ca:	9209      	str	r2, [sp, #36]	; 0x24
 80151cc:	e7cf      	b.n	801516e <_dtoa_r+0x266>
 80151ce:	2301      	movs	r3, #1
 80151d0:	9308      	str	r3, [sp, #32]
 80151d2:	e7f4      	b.n	80151be <_dtoa_r+0x2b6>
 80151d4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80151d8:	f8cd 9004 	str.w	r9, [sp, #4]
 80151dc:	464b      	mov	r3, r9
 80151de:	e7c6      	b.n	801516e <_dtoa_r+0x266>
 80151e0:	3101      	adds	r1, #1
 80151e2:	6041      	str	r1, [r0, #4]
 80151e4:	0052      	lsls	r2, r2, #1
 80151e6:	e7c6      	b.n	8015176 <_dtoa_r+0x26e>
 80151e8:	636f4361 	.word	0x636f4361
 80151ec:	3fd287a7 	.word	0x3fd287a7
 80151f0:	8b60c8b3 	.word	0x8b60c8b3
 80151f4:	3fc68a28 	.word	0x3fc68a28
 80151f8:	509f79fb 	.word	0x509f79fb
 80151fc:	3fd34413 	.word	0x3fd34413
 8015200:	08018f5d 	.word	0x08018f5d
 8015204:	08018f74 	.word	0x08018f74
 8015208:	7ff00000 	.word	0x7ff00000
 801520c:	08018f59 	.word	0x08018f59
 8015210:	08018f50 	.word	0x08018f50
 8015214:	080191da 	.word	0x080191da
 8015218:	3ff80000 	.word	0x3ff80000
 801521c:	080190f0 	.word	0x080190f0
 8015220:	08018fd3 	.word	0x08018fd3
 8015224:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015226:	9a00      	ldr	r2, [sp, #0]
 8015228:	601a      	str	r2, [r3, #0]
 801522a:	9b01      	ldr	r3, [sp, #4]
 801522c:	2b0e      	cmp	r3, #14
 801522e:	f200 80ad 	bhi.w	801538c <_dtoa_r+0x484>
 8015232:	2d00      	cmp	r5, #0
 8015234:	f000 80aa 	beq.w	801538c <_dtoa_r+0x484>
 8015238:	f1ba 0f00 	cmp.w	sl, #0
 801523c:	dd36      	ble.n	80152ac <_dtoa_r+0x3a4>
 801523e:	4ac3      	ldr	r2, [pc, #780]	; (801554c <_dtoa_r+0x644>)
 8015240:	f00a 030f 	and.w	r3, sl, #15
 8015244:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015248:	ed93 7b00 	vldr	d7, [r3]
 801524c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8015250:	ea4f 172a 	mov.w	r7, sl, asr #4
 8015254:	eeb0 8a47 	vmov.f32	s16, s14
 8015258:	eef0 8a67 	vmov.f32	s17, s15
 801525c:	d016      	beq.n	801528c <_dtoa_r+0x384>
 801525e:	4bbc      	ldr	r3, [pc, #752]	; (8015550 <_dtoa_r+0x648>)
 8015260:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015264:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015268:	f7eb fb00 	bl	800086c <__aeabi_ddiv>
 801526c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015270:	f007 070f 	and.w	r7, r7, #15
 8015274:	2503      	movs	r5, #3
 8015276:	4eb6      	ldr	r6, [pc, #728]	; (8015550 <_dtoa_r+0x648>)
 8015278:	b957      	cbnz	r7, 8015290 <_dtoa_r+0x388>
 801527a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801527e:	ec53 2b18 	vmov	r2, r3, d8
 8015282:	f7eb faf3 	bl	800086c <__aeabi_ddiv>
 8015286:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801528a:	e029      	b.n	80152e0 <_dtoa_r+0x3d8>
 801528c:	2502      	movs	r5, #2
 801528e:	e7f2      	b.n	8015276 <_dtoa_r+0x36e>
 8015290:	07f9      	lsls	r1, r7, #31
 8015292:	d508      	bpl.n	80152a6 <_dtoa_r+0x39e>
 8015294:	ec51 0b18 	vmov	r0, r1, d8
 8015298:	e9d6 2300 	ldrd	r2, r3, [r6]
 801529c:	f7eb f9bc 	bl	8000618 <__aeabi_dmul>
 80152a0:	ec41 0b18 	vmov	d8, r0, r1
 80152a4:	3501      	adds	r5, #1
 80152a6:	107f      	asrs	r7, r7, #1
 80152a8:	3608      	adds	r6, #8
 80152aa:	e7e5      	b.n	8015278 <_dtoa_r+0x370>
 80152ac:	f000 80a6 	beq.w	80153fc <_dtoa_r+0x4f4>
 80152b0:	f1ca 0600 	rsb	r6, sl, #0
 80152b4:	4ba5      	ldr	r3, [pc, #660]	; (801554c <_dtoa_r+0x644>)
 80152b6:	4fa6      	ldr	r7, [pc, #664]	; (8015550 <_dtoa_r+0x648>)
 80152b8:	f006 020f 	and.w	r2, r6, #15
 80152bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80152c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80152c8:	f7eb f9a6 	bl	8000618 <__aeabi_dmul>
 80152cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80152d0:	1136      	asrs	r6, r6, #4
 80152d2:	2300      	movs	r3, #0
 80152d4:	2502      	movs	r5, #2
 80152d6:	2e00      	cmp	r6, #0
 80152d8:	f040 8085 	bne.w	80153e6 <_dtoa_r+0x4de>
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d1d2      	bne.n	8015286 <_dtoa_r+0x37e>
 80152e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	f000 808c 	beq.w	8015400 <_dtoa_r+0x4f8>
 80152e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80152ec:	4b99      	ldr	r3, [pc, #612]	; (8015554 <_dtoa_r+0x64c>)
 80152ee:	2200      	movs	r2, #0
 80152f0:	4630      	mov	r0, r6
 80152f2:	4639      	mov	r1, r7
 80152f4:	f7eb fc02 	bl	8000afc <__aeabi_dcmplt>
 80152f8:	2800      	cmp	r0, #0
 80152fa:	f000 8081 	beq.w	8015400 <_dtoa_r+0x4f8>
 80152fe:	9b01      	ldr	r3, [sp, #4]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d07d      	beq.n	8015400 <_dtoa_r+0x4f8>
 8015304:	f1b9 0f00 	cmp.w	r9, #0
 8015308:	dd3c      	ble.n	8015384 <_dtoa_r+0x47c>
 801530a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801530e:	9307      	str	r3, [sp, #28]
 8015310:	2200      	movs	r2, #0
 8015312:	4b91      	ldr	r3, [pc, #580]	; (8015558 <_dtoa_r+0x650>)
 8015314:	4630      	mov	r0, r6
 8015316:	4639      	mov	r1, r7
 8015318:	f7eb f97e 	bl	8000618 <__aeabi_dmul>
 801531c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015320:	3501      	adds	r5, #1
 8015322:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8015326:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801532a:	4628      	mov	r0, r5
 801532c:	f7eb f90a 	bl	8000544 <__aeabi_i2d>
 8015330:	4632      	mov	r2, r6
 8015332:	463b      	mov	r3, r7
 8015334:	f7eb f970 	bl	8000618 <__aeabi_dmul>
 8015338:	4b88      	ldr	r3, [pc, #544]	; (801555c <_dtoa_r+0x654>)
 801533a:	2200      	movs	r2, #0
 801533c:	f7ea ffb6 	bl	80002ac <__adddf3>
 8015340:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8015344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015348:	9303      	str	r3, [sp, #12]
 801534a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801534c:	2b00      	cmp	r3, #0
 801534e:	d15c      	bne.n	801540a <_dtoa_r+0x502>
 8015350:	4b83      	ldr	r3, [pc, #524]	; (8015560 <_dtoa_r+0x658>)
 8015352:	2200      	movs	r2, #0
 8015354:	4630      	mov	r0, r6
 8015356:	4639      	mov	r1, r7
 8015358:	f7ea ffa6 	bl	80002a8 <__aeabi_dsub>
 801535c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015360:	4606      	mov	r6, r0
 8015362:	460f      	mov	r7, r1
 8015364:	f7eb fbe8 	bl	8000b38 <__aeabi_dcmpgt>
 8015368:	2800      	cmp	r0, #0
 801536a:	f040 8296 	bne.w	801589a <_dtoa_r+0x992>
 801536e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8015372:	4630      	mov	r0, r6
 8015374:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015378:	4639      	mov	r1, r7
 801537a:	f7eb fbbf 	bl	8000afc <__aeabi_dcmplt>
 801537e:	2800      	cmp	r0, #0
 8015380:	f040 8288 	bne.w	8015894 <_dtoa_r+0x98c>
 8015384:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015388:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801538c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801538e:	2b00      	cmp	r3, #0
 8015390:	f2c0 8158 	blt.w	8015644 <_dtoa_r+0x73c>
 8015394:	f1ba 0f0e 	cmp.w	sl, #14
 8015398:	f300 8154 	bgt.w	8015644 <_dtoa_r+0x73c>
 801539c:	4b6b      	ldr	r3, [pc, #428]	; (801554c <_dtoa_r+0x644>)
 801539e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80153a2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80153a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	f280 80e3 	bge.w	8015574 <_dtoa_r+0x66c>
 80153ae:	9b01      	ldr	r3, [sp, #4]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	f300 80df 	bgt.w	8015574 <_dtoa_r+0x66c>
 80153b6:	f040 826d 	bne.w	8015894 <_dtoa_r+0x98c>
 80153ba:	4b69      	ldr	r3, [pc, #420]	; (8015560 <_dtoa_r+0x658>)
 80153bc:	2200      	movs	r2, #0
 80153be:	4640      	mov	r0, r8
 80153c0:	4649      	mov	r1, r9
 80153c2:	f7eb f929 	bl	8000618 <__aeabi_dmul>
 80153c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80153ca:	f7eb fbab 	bl	8000b24 <__aeabi_dcmpge>
 80153ce:	9e01      	ldr	r6, [sp, #4]
 80153d0:	4637      	mov	r7, r6
 80153d2:	2800      	cmp	r0, #0
 80153d4:	f040 8243 	bne.w	801585e <_dtoa_r+0x956>
 80153d8:	9d00      	ldr	r5, [sp, #0]
 80153da:	2331      	movs	r3, #49	; 0x31
 80153dc:	f805 3b01 	strb.w	r3, [r5], #1
 80153e0:	f10a 0a01 	add.w	sl, sl, #1
 80153e4:	e23f      	b.n	8015866 <_dtoa_r+0x95e>
 80153e6:	07f2      	lsls	r2, r6, #31
 80153e8:	d505      	bpl.n	80153f6 <_dtoa_r+0x4ee>
 80153ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80153ee:	f7eb f913 	bl	8000618 <__aeabi_dmul>
 80153f2:	3501      	adds	r5, #1
 80153f4:	2301      	movs	r3, #1
 80153f6:	1076      	asrs	r6, r6, #1
 80153f8:	3708      	adds	r7, #8
 80153fa:	e76c      	b.n	80152d6 <_dtoa_r+0x3ce>
 80153fc:	2502      	movs	r5, #2
 80153fe:	e76f      	b.n	80152e0 <_dtoa_r+0x3d8>
 8015400:	9b01      	ldr	r3, [sp, #4]
 8015402:	f8cd a01c 	str.w	sl, [sp, #28]
 8015406:	930c      	str	r3, [sp, #48]	; 0x30
 8015408:	e78d      	b.n	8015326 <_dtoa_r+0x41e>
 801540a:	9900      	ldr	r1, [sp, #0]
 801540c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801540e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015410:	4b4e      	ldr	r3, [pc, #312]	; (801554c <_dtoa_r+0x644>)
 8015412:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015416:	4401      	add	r1, r0
 8015418:	9102      	str	r1, [sp, #8]
 801541a:	9908      	ldr	r1, [sp, #32]
 801541c:	eeb0 8a47 	vmov.f32	s16, s14
 8015420:	eef0 8a67 	vmov.f32	s17, s15
 8015424:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015428:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801542c:	2900      	cmp	r1, #0
 801542e:	d045      	beq.n	80154bc <_dtoa_r+0x5b4>
 8015430:	494c      	ldr	r1, [pc, #304]	; (8015564 <_dtoa_r+0x65c>)
 8015432:	2000      	movs	r0, #0
 8015434:	f7eb fa1a 	bl	800086c <__aeabi_ddiv>
 8015438:	ec53 2b18 	vmov	r2, r3, d8
 801543c:	f7ea ff34 	bl	80002a8 <__aeabi_dsub>
 8015440:	9d00      	ldr	r5, [sp, #0]
 8015442:	ec41 0b18 	vmov	d8, r0, r1
 8015446:	4639      	mov	r1, r7
 8015448:	4630      	mov	r0, r6
 801544a:	f7eb fb95 	bl	8000b78 <__aeabi_d2iz>
 801544e:	900c      	str	r0, [sp, #48]	; 0x30
 8015450:	f7eb f878 	bl	8000544 <__aeabi_i2d>
 8015454:	4602      	mov	r2, r0
 8015456:	460b      	mov	r3, r1
 8015458:	4630      	mov	r0, r6
 801545a:	4639      	mov	r1, r7
 801545c:	f7ea ff24 	bl	80002a8 <__aeabi_dsub>
 8015460:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015462:	3330      	adds	r3, #48	; 0x30
 8015464:	f805 3b01 	strb.w	r3, [r5], #1
 8015468:	ec53 2b18 	vmov	r2, r3, d8
 801546c:	4606      	mov	r6, r0
 801546e:	460f      	mov	r7, r1
 8015470:	f7eb fb44 	bl	8000afc <__aeabi_dcmplt>
 8015474:	2800      	cmp	r0, #0
 8015476:	d165      	bne.n	8015544 <_dtoa_r+0x63c>
 8015478:	4632      	mov	r2, r6
 801547a:	463b      	mov	r3, r7
 801547c:	4935      	ldr	r1, [pc, #212]	; (8015554 <_dtoa_r+0x64c>)
 801547e:	2000      	movs	r0, #0
 8015480:	f7ea ff12 	bl	80002a8 <__aeabi_dsub>
 8015484:	ec53 2b18 	vmov	r2, r3, d8
 8015488:	f7eb fb38 	bl	8000afc <__aeabi_dcmplt>
 801548c:	2800      	cmp	r0, #0
 801548e:	f040 80b9 	bne.w	8015604 <_dtoa_r+0x6fc>
 8015492:	9b02      	ldr	r3, [sp, #8]
 8015494:	429d      	cmp	r5, r3
 8015496:	f43f af75 	beq.w	8015384 <_dtoa_r+0x47c>
 801549a:	4b2f      	ldr	r3, [pc, #188]	; (8015558 <_dtoa_r+0x650>)
 801549c:	ec51 0b18 	vmov	r0, r1, d8
 80154a0:	2200      	movs	r2, #0
 80154a2:	f7eb f8b9 	bl	8000618 <__aeabi_dmul>
 80154a6:	4b2c      	ldr	r3, [pc, #176]	; (8015558 <_dtoa_r+0x650>)
 80154a8:	ec41 0b18 	vmov	d8, r0, r1
 80154ac:	2200      	movs	r2, #0
 80154ae:	4630      	mov	r0, r6
 80154b0:	4639      	mov	r1, r7
 80154b2:	f7eb f8b1 	bl	8000618 <__aeabi_dmul>
 80154b6:	4606      	mov	r6, r0
 80154b8:	460f      	mov	r7, r1
 80154ba:	e7c4      	b.n	8015446 <_dtoa_r+0x53e>
 80154bc:	ec51 0b17 	vmov	r0, r1, d7
 80154c0:	f7eb f8aa 	bl	8000618 <__aeabi_dmul>
 80154c4:	9b02      	ldr	r3, [sp, #8]
 80154c6:	9d00      	ldr	r5, [sp, #0]
 80154c8:	930c      	str	r3, [sp, #48]	; 0x30
 80154ca:	ec41 0b18 	vmov	d8, r0, r1
 80154ce:	4639      	mov	r1, r7
 80154d0:	4630      	mov	r0, r6
 80154d2:	f7eb fb51 	bl	8000b78 <__aeabi_d2iz>
 80154d6:	9011      	str	r0, [sp, #68]	; 0x44
 80154d8:	f7eb f834 	bl	8000544 <__aeabi_i2d>
 80154dc:	4602      	mov	r2, r0
 80154de:	460b      	mov	r3, r1
 80154e0:	4630      	mov	r0, r6
 80154e2:	4639      	mov	r1, r7
 80154e4:	f7ea fee0 	bl	80002a8 <__aeabi_dsub>
 80154e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80154ea:	3330      	adds	r3, #48	; 0x30
 80154ec:	f805 3b01 	strb.w	r3, [r5], #1
 80154f0:	9b02      	ldr	r3, [sp, #8]
 80154f2:	429d      	cmp	r5, r3
 80154f4:	4606      	mov	r6, r0
 80154f6:	460f      	mov	r7, r1
 80154f8:	f04f 0200 	mov.w	r2, #0
 80154fc:	d134      	bne.n	8015568 <_dtoa_r+0x660>
 80154fe:	4b19      	ldr	r3, [pc, #100]	; (8015564 <_dtoa_r+0x65c>)
 8015500:	ec51 0b18 	vmov	r0, r1, d8
 8015504:	f7ea fed2 	bl	80002ac <__adddf3>
 8015508:	4602      	mov	r2, r0
 801550a:	460b      	mov	r3, r1
 801550c:	4630      	mov	r0, r6
 801550e:	4639      	mov	r1, r7
 8015510:	f7eb fb12 	bl	8000b38 <__aeabi_dcmpgt>
 8015514:	2800      	cmp	r0, #0
 8015516:	d175      	bne.n	8015604 <_dtoa_r+0x6fc>
 8015518:	ec53 2b18 	vmov	r2, r3, d8
 801551c:	4911      	ldr	r1, [pc, #68]	; (8015564 <_dtoa_r+0x65c>)
 801551e:	2000      	movs	r0, #0
 8015520:	f7ea fec2 	bl	80002a8 <__aeabi_dsub>
 8015524:	4602      	mov	r2, r0
 8015526:	460b      	mov	r3, r1
 8015528:	4630      	mov	r0, r6
 801552a:	4639      	mov	r1, r7
 801552c:	f7eb fae6 	bl	8000afc <__aeabi_dcmplt>
 8015530:	2800      	cmp	r0, #0
 8015532:	f43f af27 	beq.w	8015384 <_dtoa_r+0x47c>
 8015536:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015538:	1e6b      	subs	r3, r5, #1
 801553a:	930c      	str	r3, [sp, #48]	; 0x30
 801553c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015540:	2b30      	cmp	r3, #48	; 0x30
 8015542:	d0f8      	beq.n	8015536 <_dtoa_r+0x62e>
 8015544:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8015548:	e04a      	b.n	80155e0 <_dtoa_r+0x6d8>
 801554a:	bf00      	nop
 801554c:	080190f0 	.word	0x080190f0
 8015550:	080190c8 	.word	0x080190c8
 8015554:	3ff00000 	.word	0x3ff00000
 8015558:	40240000 	.word	0x40240000
 801555c:	401c0000 	.word	0x401c0000
 8015560:	40140000 	.word	0x40140000
 8015564:	3fe00000 	.word	0x3fe00000
 8015568:	4baf      	ldr	r3, [pc, #700]	; (8015828 <_dtoa_r+0x920>)
 801556a:	f7eb f855 	bl	8000618 <__aeabi_dmul>
 801556e:	4606      	mov	r6, r0
 8015570:	460f      	mov	r7, r1
 8015572:	e7ac      	b.n	80154ce <_dtoa_r+0x5c6>
 8015574:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015578:	9d00      	ldr	r5, [sp, #0]
 801557a:	4642      	mov	r2, r8
 801557c:	464b      	mov	r3, r9
 801557e:	4630      	mov	r0, r6
 8015580:	4639      	mov	r1, r7
 8015582:	f7eb f973 	bl	800086c <__aeabi_ddiv>
 8015586:	f7eb faf7 	bl	8000b78 <__aeabi_d2iz>
 801558a:	9002      	str	r0, [sp, #8]
 801558c:	f7ea ffda 	bl	8000544 <__aeabi_i2d>
 8015590:	4642      	mov	r2, r8
 8015592:	464b      	mov	r3, r9
 8015594:	f7eb f840 	bl	8000618 <__aeabi_dmul>
 8015598:	4602      	mov	r2, r0
 801559a:	460b      	mov	r3, r1
 801559c:	4630      	mov	r0, r6
 801559e:	4639      	mov	r1, r7
 80155a0:	f7ea fe82 	bl	80002a8 <__aeabi_dsub>
 80155a4:	9e02      	ldr	r6, [sp, #8]
 80155a6:	9f01      	ldr	r7, [sp, #4]
 80155a8:	3630      	adds	r6, #48	; 0x30
 80155aa:	f805 6b01 	strb.w	r6, [r5], #1
 80155ae:	9e00      	ldr	r6, [sp, #0]
 80155b0:	1bae      	subs	r6, r5, r6
 80155b2:	42b7      	cmp	r7, r6
 80155b4:	4602      	mov	r2, r0
 80155b6:	460b      	mov	r3, r1
 80155b8:	d137      	bne.n	801562a <_dtoa_r+0x722>
 80155ba:	f7ea fe77 	bl	80002ac <__adddf3>
 80155be:	4642      	mov	r2, r8
 80155c0:	464b      	mov	r3, r9
 80155c2:	4606      	mov	r6, r0
 80155c4:	460f      	mov	r7, r1
 80155c6:	f7eb fab7 	bl	8000b38 <__aeabi_dcmpgt>
 80155ca:	b9c8      	cbnz	r0, 8015600 <_dtoa_r+0x6f8>
 80155cc:	4642      	mov	r2, r8
 80155ce:	464b      	mov	r3, r9
 80155d0:	4630      	mov	r0, r6
 80155d2:	4639      	mov	r1, r7
 80155d4:	f7eb fa88 	bl	8000ae8 <__aeabi_dcmpeq>
 80155d8:	b110      	cbz	r0, 80155e0 <_dtoa_r+0x6d8>
 80155da:	9b02      	ldr	r3, [sp, #8]
 80155dc:	07d9      	lsls	r1, r3, #31
 80155de:	d40f      	bmi.n	8015600 <_dtoa_r+0x6f8>
 80155e0:	4620      	mov	r0, r4
 80155e2:	4659      	mov	r1, fp
 80155e4:	f000 ff8e 	bl	8016504 <_Bfree>
 80155e8:	2300      	movs	r3, #0
 80155ea:	702b      	strb	r3, [r5, #0]
 80155ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80155ee:	f10a 0001 	add.w	r0, sl, #1
 80155f2:	6018      	str	r0, [r3, #0]
 80155f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	f43f acd8 	beq.w	8014fac <_dtoa_r+0xa4>
 80155fc:	601d      	str	r5, [r3, #0]
 80155fe:	e4d5      	b.n	8014fac <_dtoa_r+0xa4>
 8015600:	f8cd a01c 	str.w	sl, [sp, #28]
 8015604:	462b      	mov	r3, r5
 8015606:	461d      	mov	r5, r3
 8015608:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801560c:	2a39      	cmp	r2, #57	; 0x39
 801560e:	d108      	bne.n	8015622 <_dtoa_r+0x71a>
 8015610:	9a00      	ldr	r2, [sp, #0]
 8015612:	429a      	cmp	r2, r3
 8015614:	d1f7      	bne.n	8015606 <_dtoa_r+0x6fe>
 8015616:	9a07      	ldr	r2, [sp, #28]
 8015618:	9900      	ldr	r1, [sp, #0]
 801561a:	3201      	adds	r2, #1
 801561c:	9207      	str	r2, [sp, #28]
 801561e:	2230      	movs	r2, #48	; 0x30
 8015620:	700a      	strb	r2, [r1, #0]
 8015622:	781a      	ldrb	r2, [r3, #0]
 8015624:	3201      	adds	r2, #1
 8015626:	701a      	strb	r2, [r3, #0]
 8015628:	e78c      	b.n	8015544 <_dtoa_r+0x63c>
 801562a:	4b7f      	ldr	r3, [pc, #508]	; (8015828 <_dtoa_r+0x920>)
 801562c:	2200      	movs	r2, #0
 801562e:	f7ea fff3 	bl	8000618 <__aeabi_dmul>
 8015632:	2200      	movs	r2, #0
 8015634:	2300      	movs	r3, #0
 8015636:	4606      	mov	r6, r0
 8015638:	460f      	mov	r7, r1
 801563a:	f7eb fa55 	bl	8000ae8 <__aeabi_dcmpeq>
 801563e:	2800      	cmp	r0, #0
 8015640:	d09b      	beq.n	801557a <_dtoa_r+0x672>
 8015642:	e7cd      	b.n	80155e0 <_dtoa_r+0x6d8>
 8015644:	9a08      	ldr	r2, [sp, #32]
 8015646:	2a00      	cmp	r2, #0
 8015648:	f000 80c4 	beq.w	80157d4 <_dtoa_r+0x8cc>
 801564c:	9a05      	ldr	r2, [sp, #20]
 801564e:	2a01      	cmp	r2, #1
 8015650:	f300 80a8 	bgt.w	80157a4 <_dtoa_r+0x89c>
 8015654:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015656:	2a00      	cmp	r2, #0
 8015658:	f000 80a0 	beq.w	801579c <_dtoa_r+0x894>
 801565c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015660:	9e06      	ldr	r6, [sp, #24]
 8015662:	4645      	mov	r5, r8
 8015664:	9a04      	ldr	r2, [sp, #16]
 8015666:	2101      	movs	r1, #1
 8015668:	441a      	add	r2, r3
 801566a:	4620      	mov	r0, r4
 801566c:	4498      	add	r8, r3
 801566e:	9204      	str	r2, [sp, #16]
 8015670:	f001 f84e 	bl	8016710 <__i2b>
 8015674:	4607      	mov	r7, r0
 8015676:	2d00      	cmp	r5, #0
 8015678:	dd0b      	ble.n	8015692 <_dtoa_r+0x78a>
 801567a:	9b04      	ldr	r3, [sp, #16]
 801567c:	2b00      	cmp	r3, #0
 801567e:	dd08      	ble.n	8015692 <_dtoa_r+0x78a>
 8015680:	42ab      	cmp	r3, r5
 8015682:	9a04      	ldr	r2, [sp, #16]
 8015684:	bfa8      	it	ge
 8015686:	462b      	movge	r3, r5
 8015688:	eba8 0803 	sub.w	r8, r8, r3
 801568c:	1aed      	subs	r5, r5, r3
 801568e:	1ad3      	subs	r3, r2, r3
 8015690:	9304      	str	r3, [sp, #16]
 8015692:	9b06      	ldr	r3, [sp, #24]
 8015694:	b1fb      	cbz	r3, 80156d6 <_dtoa_r+0x7ce>
 8015696:	9b08      	ldr	r3, [sp, #32]
 8015698:	2b00      	cmp	r3, #0
 801569a:	f000 809f 	beq.w	80157dc <_dtoa_r+0x8d4>
 801569e:	2e00      	cmp	r6, #0
 80156a0:	dd11      	ble.n	80156c6 <_dtoa_r+0x7be>
 80156a2:	4639      	mov	r1, r7
 80156a4:	4632      	mov	r2, r6
 80156a6:	4620      	mov	r0, r4
 80156a8:	f001 f8ee 	bl	8016888 <__pow5mult>
 80156ac:	465a      	mov	r2, fp
 80156ae:	4601      	mov	r1, r0
 80156b0:	4607      	mov	r7, r0
 80156b2:	4620      	mov	r0, r4
 80156b4:	f001 f842 	bl	801673c <__multiply>
 80156b8:	4659      	mov	r1, fp
 80156ba:	9007      	str	r0, [sp, #28]
 80156bc:	4620      	mov	r0, r4
 80156be:	f000 ff21 	bl	8016504 <_Bfree>
 80156c2:	9b07      	ldr	r3, [sp, #28]
 80156c4:	469b      	mov	fp, r3
 80156c6:	9b06      	ldr	r3, [sp, #24]
 80156c8:	1b9a      	subs	r2, r3, r6
 80156ca:	d004      	beq.n	80156d6 <_dtoa_r+0x7ce>
 80156cc:	4659      	mov	r1, fp
 80156ce:	4620      	mov	r0, r4
 80156d0:	f001 f8da 	bl	8016888 <__pow5mult>
 80156d4:	4683      	mov	fp, r0
 80156d6:	2101      	movs	r1, #1
 80156d8:	4620      	mov	r0, r4
 80156da:	f001 f819 	bl	8016710 <__i2b>
 80156de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	4606      	mov	r6, r0
 80156e4:	dd7c      	ble.n	80157e0 <_dtoa_r+0x8d8>
 80156e6:	461a      	mov	r2, r3
 80156e8:	4601      	mov	r1, r0
 80156ea:	4620      	mov	r0, r4
 80156ec:	f001 f8cc 	bl	8016888 <__pow5mult>
 80156f0:	9b05      	ldr	r3, [sp, #20]
 80156f2:	2b01      	cmp	r3, #1
 80156f4:	4606      	mov	r6, r0
 80156f6:	dd76      	ble.n	80157e6 <_dtoa_r+0x8de>
 80156f8:	2300      	movs	r3, #0
 80156fa:	9306      	str	r3, [sp, #24]
 80156fc:	6933      	ldr	r3, [r6, #16]
 80156fe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015702:	6918      	ldr	r0, [r3, #16]
 8015704:	f000 ffb4 	bl	8016670 <__hi0bits>
 8015708:	f1c0 0020 	rsb	r0, r0, #32
 801570c:	9b04      	ldr	r3, [sp, #16]
 801570e:	4418      	add	r0, r3
 8015710:	f010 001f 	ands.w	r0, r0, #31
 8015714:	f000 8086 	beq.w	8015824 <_dtoa_r+0x91c>
 8015718:	f1c0 0320 	rsb	r3, r0, #32
 801571c:	2b04      	cmp	r3, #4
 801571e:	dd7f      	ble.n	8015820 <_dtoa_r+0x918>
 8015720:	f1c0 001c 	rsb	r0, r0, #28
 8015724:	9b04      	ldr	r3, [sp, #16]
 8015726:	4403      	add	r3, r0
 8015728:	4480      	add	r8, r0
 801572a:	4405      	add	r5, r0
 801572c:	9304      	str	r3, [sp, #16]
 801572e:	f1b8 0f00 	cmp.w	r8, #0
 8015732:	dd05      	ble.n	8015740 <_dtoa_r+0x838>
 8015734:	4659      	mov	r1, fp
 8015736:	4642      	mov	r2, r8
 8015738:	4620      	mov	r0, r4
 801573a:	f001 f8ff 	bl	801693c <__lshift>
 801573e:	4683      	mov	fp, r0
 8015740:	9b04      	ldr	r3, [sp, #16]
 8015742:	2b00      	cmp	r3, #0
 8015744:	dd05      	ble.n	8015752 <_dtoa_r+0x84a>
 8015746:	4631      	mov	r1, r6
 8015748:	461a      	mov	r2, r3
 801574a:	4620      	mov	r0, r4
 801574c:	f001 f8f6 	bl	801693c <__lshift>
 8015750:	4606      	mov	r6, r0
 8015752:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015754:	2b00      	cmp	r3, #0
 8015756:	d069      	beq.n	801582c <_dtoa_r+0x924>
 8015758:	4631      	mov	r1, r6
 801575a:	4658      	mov	r0, fp
 801575c:	f001 f95a 	bl	8016a14 <__mcmp>
 8015760:	2800      	cmp	r0, #0
 8015762:	da63      	bge.n	801582c <_dtoa_r+0x924>
 8015764:	2300      	movs	r3, #0
 8015766:	4659      	mov	r1, fp
 8015768:	220a      	movs	r2, #10
 801576a:	4620      	mov	r0, r4
 801576c:	f000 feec 	bl	8016548 <__multadd>
 8015770:	9b08      	ldr	r3, [sp, #32]
 8015772:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015776:	4683      	mov	fp, r0
 8015778:	2b00      	cmp	r3, #0
 801577a:	f000 818f 	beq.w	8015a9c <_dtoa_r+0xb94>
 801577e:	4639      	mov	r1, r7
 8015780:	2300      	movs	r3, #0
 8015782:	220a      	movs	r2, #10
 8015784:	4620      	mov	r0, r4
 8015786:	f000 fedf 	bl	8016548 <__multadd>
 801578a:	f1b9 0f00 	cmp.w	r9, #0
 801578e:	4607      	mov	r7, r0
 8015790:	f300 808e 	bgt.w	80158b0 <_dtoa_r+0x9a8>
 8015794:	9b05      	ldr	r3, [sp, #20]
 8015796:	2b02      	cmp	r3, #2
 8015798:	dc50      	bgt.n	801583c <_dtoa_r+0x934>
 801579a:	e089      	b.n	80158b0 <_dtoa_r+0x9a8>
 801579c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801579e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80157a2:	e75d      	b.n	8015660 <_dtoa_r+0x758>
 80157a4:	9b01      	ldr	r3, [sp, #4]
 80157a6:	1e5e      	subs	r6, r3, #1
 80157a8:	9b06      	ldr	r3, [sp, #24]
 80157aa:	42b3      	cmp	r3, r6
 80157ac:	bfbf      	itttt	lt
 80157ae:	9b06      	ldrlt	r3, [sp, #24]
 80157b0:	9606      	strlt	r6, [sp, #24]
 80157b2:	1af2      	sublt	r2, r6, r3
 80157b4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80157b6:	bfb6      	itet	lt
 80157b8:	189b      	addlt	r3, r3, r2
 80157ba:	1b9e      	subge	r6, r3, r6
 80157bc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80157be:	9b01      	ldr	r3, [sp, #4]
 80157c0:	bfb8      	it	lt
 80157c2:	2600      	movlt	r6, #0
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	bfb5      	itete	lt
 80157c8:	eba8 0503 	sublt.w	r5, r8, r3
 80157cc:	9b01      	ldrge	r3, [sp, #4]
 80157ce:	2300      	movlt	r3, #0
 80157d0:	4645      	movge	r5, r8
 80157d2:	e747      	b.n	8015664 <_dtoa_r+0x75c>
 80157d4:	9e06      	ldr	r6, [sp, #24]
 80157d6:	9f08      	ldr	r7, [sp, #32]
 80157d8:	4645      	mov	r5, r8
 80157da:	e74c      	b.n	8015676 <_dtoa_r+0x76e>
 80157dc:	9a06      	ldr	r2, [sp, #24]
 80157de:	e775      	b.n	80156cc <_dtoa_r+0x7c4>
 80157e0:	9b05      	ldr	r3, [sp, #20]
 80157e2:	2b01      	cmp	r3, #1
 80157e4:	dc18      	bgt.n	8015818 <_dtoa_r+0x910>
 80157e6:	9b02      	ldr	r3, [sp, #8]
 80157e8:	b9b3      	cbnz	r3, 8015818 <_dtoa_r+0x910>
 80157ea:	9b03      	ldr	r3, [sp, #12]
 80157ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80157f0:	b9a3      	cbnz	r3, 801581c <_dtoa_r+0x914>
 80157f2:	9b03      	ldr	r3, [sp, #12]
 80157f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80157f8:	0d1b      	lsrs	r3, r3, #20
 80157fa:	051b      	lsls	r3, r3, #20
 80157fc:	b12b      	cbz	r3, 801580a <_dtoa_r+0x902>
 80157fe:	9b04      	ldr	r3, [sp, #16]
 8015800:	3301      	adds	r3, #1
 8015802:	9304      	str	r3, [sp, #16]
 8015804:	f108 0801 	add.w	r8, r8, #1
 8015808:	2301      	movs	r3, #1
 801580a:	9306      	str	r3, [sp, #24]
 801580c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801580e:	2b00      	cmp	r3, #0
 8015810:	f47f af74 	bne.w	80156fc <_dtoa_r+0x7f4>
 8015814:	2001      	movs	r0, #1
 8015816:	e779      	b.n	801570c <_dtoa_r+0x804>
 8015818:	2300      	movs	r3, #0
 801581a:	e7f6      	b.n	801580a <_dtoa_r+0x902>
 801581c:	9b02      	ldr	r3, [sp, #8]
 801581e:	e7f4      	b.n	801580a <_dtoa_r+0x902>
 8015820:	d085      	beq.n	801572e <_dtoa_r+0x826>
 8015822:	4618      	mov	r0, r3
 8015824:	301c      	adds	r0, #28
 8015826:	e77d      	b.n	8015724 <_dtoa_r+0x81c>
 8015828:	40240000 	.word	0x40240000
 801582c:	9b01      	ldr	r3, [sp, #4]
 801582e:	2b00      	cmp	r3, #0
 8015830:	dc38      	bgt.n	80158a4 <_dtoa_r+0x99c>
 8015832:	9b05      	ldr	r3, [sp, #20]
 8015834:	2b02      	cmp	r3, #2
 8015836:	dd35      	ble.n	80158a4 <_dtoa_r+0x99c>
 8015838:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801583c:	f1b9 0f00 	cmp.w	r9, #0
 8015840:	d10d      	bne.n	801585e <_dtoa_r+0x956>
 8015842:	4631      	mov	r1, r6
 8015844:	464b      	mov	r3, r9
 8015846:	2205      	movs	r2, #5
 8015848:	4620      	mov	r0, r4
 801584a:	f000 fe7d 	bl	8016548 <__multadd>
 801584e:	4601      	mov	r1, r0
 8015850:	4606      	mov	r6, r0
 8015852:	4658      	mov	r0, fp
 8015854:	f001 f8de 	bl	8016a14 <__mcmp>
 8015858:	2800      	cmp	r0, #0
 801585a:	f73f adbd 	bgt.w	80153d8 <_dtoa_r+0x4d0>
 801585e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015860:	9d00      	ldr	r5, [sp, #0]
 8015862:	ea6f 0a03 	mvn.w	sl, r3
 8015866:	f04f 0800 	mov.w	r8, #0
 801586a:	4631      	mov	r1, r6
 801586c:	4620      	mov	r0, r4
 801586e:	f000 fe49 	bl	8016504 <_Bfree>
 8015872:	2f00      	cmp	r7, #0
 8015874:	f43f aeb4 	beq.w	80155e0 <_dtoa_r+0x6d8>
 8015878:	f1b8 0f00 	cmp.w	r8, #0
 801587c:	d005      	beq.n	801588a <_dtoa_r+0x982>
 801587e:	45b8      	cmp	r8, r7
 8015880:	d003      	beq.n	801588a <_dtoa_r+0x982>
 8015882:	4641      	mov	r1, r8
 8015884:	4620      	mov	r0, r4
 8015886:	f000 fe3d 	bl	8016504 <_Bfree>
 801588a:	4639      	mov	r1, r7
 801588c:	4620      	mov	r0, r4
 801588e:	f000 fe39 	bl	8016504 <_Bfree>
 8015892:	e6a5      	b.n	80155e0 <_dtoa_r+0x6d8>
 8015894:	2600      	movs	r6, #0
 8015896:	4637      	mov	r7, r6
 8015898:	e7e1      	b.n	801585e <_dtoa_r+0x956>
 801589a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801589c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80158a0:	4637      	mov	r7, r6
 80158a2:	e599      	b.n	80153d8 <_dtoa_r+0x4d0>
 80158a4:	9b08      	ldr	r3, [sp, #32]
 80158a6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	f000 80fd 	beq.w	8015aaa <_dtoa_r+0xba2>
 80158b0:	2d00      	cmp	r5, #0
 80158b2:	dd05      	ble.n	80158c0 <_dtoa_r+0x9b8>
 80158b4:	4639      	mov	r1, r7
 80158b6:	462a      	mov	r2, r5
 80158b8:	4620      	mov	r0, r4
 80158ba:	f001 f83f 	bl	801693c <__lshift>
 80158be:	4607      	mov	r7, r0
 80158c0:	9b06      	ldr	r3, [sp, #24]
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d05c      	beq.n	8015980 <_dtoa_r+0xa78>
 80158c6:	6879      	ldr	r1, [r7, #4]
 80158c8:	4620      	mov	r0, r4
 80158ca:	f000 fddb 	bl	8016484 <_Balloc>
 80158ce:	4605      	mov	r5, r0
 80158d0:	b928      	cbnz	r0, 80158de <_dtoa_r+0x9d6>
 80158d2:	4b80      	ldr	r3, [pc, #512]	; (8015ad4 <_dtoa_r+0xbcc>)
 80158d4:	4602      	mov	r2, r0
 80158d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80158da:	f7ff bb2e 	b.w	8014f3a <_dtoa_r+0x32>
 80158de:	693a      	ldr	r2, [r7, #16]
 80158e0:	3202      	adds	r2, #2
 80158e2:	0092      	lsls	r2, r2, #2
 80158e4:	f107 010c 	add.w	r1, r7, #12
 80158e8:	300c      	adds	r0, #12
 80158ea:	f7fd fa6c 	bl	8012dc6 <memcpy>
 80158ee:	2201      	movs	r2, #1
 80158f0:	4629      	mov	r1, r5
 80158f2:	4620      	mov	r0, r4
 80158f4:	f001 f822 	bl	801693c <__lshift>
 80158f8:	9b00      	ldr	r3, [sp, #0]
 80158fa:	3301      	adds	r3, #1
 80158fc:	9301      	str	r3, [sp, #4]
 80158fe:	9b00      	ldr	r3, [sp, #0]
 8015900:	444b      	add	r3, r9
 8015902:	9307      	str	r3, [sp, #28]
 8015904:	9b02      	ldr	r3, [sp, #8]
 8015906:	f003 0301 	and.w	r3, r3, #1
 801590a:	46b8      	mov	r8, r7
 801590c:	9306      	str	r3, [sp, #24]
 801590e:	4607      	mov	r7, r0
 8015910:	9b01      	ldr	r3, [sp, #4]
 8015912:	4631      	mov	r1, r6
 8015914:	3b01      	subs	r3, #1
 8015916:	4658      	mov	r0, fp
 8015918:	9302      	str	r3, [sp, #8]
 801591a:	f7ff fa69 	bl	8014df0 <quorem>
 801591e:	4603      	mov	r3, r0
 8015920:	3330      	adds	r3, #48	; 0x30
 8015922:	9004      	str	r0, [sp, #16]
 8015924:	4641      	mov	r1, r8
 8015926:	4658      	mov	r0, fp
 8015928:	9308      	str	r3, [sp, #32]
 801592a:	f001 f873 	bl	8016a14 <__mcmp>
 801592e:	463a      	mov	r2, r7
 8015930:	4681      	mov	r9, r0
 8015932:	4631      	mov	r1, r6
 8015934:	4620      	mov	r0, r4
 8015936:	f001 f889 	bl	8016a4c <__mdiff>
 801593a:	68c2      	ldr	r2, [r0, #12]
 801593c:	9b08      	ldr	r3, [sp, #32]
 801593e:	4605      	mov	r5, r0
 8015940:	bb02      	cbnz	r2, 8015984 <_dtoa_r+0xa7c>
 8015942:	4601      	mov	r1, r0
 8015944:	4658      	mov	r0, fp
 8015946:	f001 f865 	bl	8016a14 <__mcmp>
 801594a:	9b08      	ldr	r3, [sp, #32]
 801594c:	4602      	mov	r2, r0
 801594e:	4629      	mov	r1, r5
 8015950:	4620      	mov	r0, r4
 8015952:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8015956:	f000 fdd5 	bl	8016504 <_Bfree>
 801595a:	9b05      	ldr	r3, [sp, #20]
 801595c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801595e:	9d01      	ldr	r5, [sp, #4]
 8015960:	ea43 0102 	orr.w	r1, r3, r2
 8015964:	9b06      	ldr	r3, [sp, #24]
 8015966:	430b      	orrs	r3, r1
 8015968:	9b08      	ldr	r3, [sp, #32]
 801596a:	d10d      	bne.n	8015988 <_dtoa_r+0xa80>
 801596c:	2b39      	cmp	r3, #57	; 0x39
 801596e:	d029      	beq.n	80159c4 <_dtoa_r+0xabc>
 8015970:	f1b9 0f00 	cmp.w	r9, #0
 8015974:	dd01      	ble.n	801597a <_dtoa_r+0xa72>
 8015976:	9b04      	ldr	r3, [sp, #16]
 8015978:	3331      	adds	r3, #49	; 0x31
 801597a:	9a02      	ldr	r2, [sp, #8]
 801597c:	7013      	strb	r3, [r2, #0]
 801597e:	e774      	b.n	801586a <_dtoa_r+0x962>
 8015980:	4638      	mov	r0, r7
 8015982:	e7b9      	b.n	80158f8 <_dtoa_r+0x9f0>
 8015984:	2201      	movs	r2, #1
 8015986:	e7e2      	b.n	801594e <_dtoa_r+0xa46>
 8015988:	f1b9 0f00 	cmp.w	r9, #0
 801598c:	db06      	blt.n	801599c <_dtoa_r+0xa94>
 801598e:	9905      	ldr	r1, [sp, #20]
 8015990:	ea41 0909 	orr.w	r9, r1, r9
 8015994:	9906      	ldr	r1, [sp, #24]
 8015996:	ea59 0101 	orrs.w	r1, r9, r1
 801599a:	d120      	bne.n	80159de <_dtoa_r+0xad6>
 801599c:	2a00      	cmp	r2, #0
 801599e:	ddec      	ble.n	801597a <_dtoa_r+0xa72>
 80159a0:	4659      	mov	r1, fp
 80159a2:	2201      	movs	r2, #1
 80159a4:	4620      	mov	r0, r4
 80159a6:	9301      	str	r3, [sp, #4]
 80159a8:	f000 ffc8 	bl	801693c <__lshift>
 80159ac:	4631      	mov	r1, r6
 80159ae:	4683      	mov	fp, r0
 80159b0:	f001 f830 	bl	8016a14 <__mcmp>
 80159b4:	2800      	cmp	r0, #0
 80159b6:	9b01      	ldr	r3, [sp, #4]
 80159b8:	dc02      	bgt.n	80159c0 <_dtoa_r+0xab8>
 80159ba:	d1de      	bne.n	801597a <_dtoa_r+0xa72>
 80159bc:	07da      	lsls	r2, r3, #31
 80159be:	d5dc      	bpl.n	801597a <_dtoa_r+0xa72>
 80159c0:	2b39      	cmp	r3, #57	; 0x39
 80159c2:	d1d8      	bne.n	8015976 <_dtoa_r+0xa6e>
 80159c4:	9a02      	ldr	r2, [sp, #8]
 80159c6:	2339      	movs	r3, #57	; 0x39
 80159c8:	7013      	strb	r3, [r2, #0]
 80159ca:	462b      	mov	r3, r5
 80159cc:	461d      	mov	r5, r3
 80159ce:	3b01      	subs	r3, #1
 80159d0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80159d4:	2a39      	cmp	r2, #57	; 0x39
 80159d6:	d050      	beq.n	8015a7a <_dtoa_r+0xb72>
 80159d8:	3201      	adds	r2, #1
 80159da:	701a      	strb	r2, [r3, #0]
 80159dc:	e745      	b.n	801586a <_dtoa_r+0x962>
 80159de:	2a00      	cmp	r2, #0
 80159e0:	dd03      	ble.n	80159ea <_dtoa_r+0xae2>
 80159e2:	2b39      	cmp	r3, #57	; 0x39
 80159e4:	d0ee      	beq.n	80159c4 <_dtoa_r+0xabc>
 80159e6:	3301      	adds	r3, #1
 80159e8:	e7c7      	b.n	801597a <_dtoa_r+0xa72>
 80159ea:	9a01      	ldr	r2, [sp, #4]
 80159ec:	9907      	ldr	r1, [sp, #28]
 80159ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 80159f2:	428a      	cmp	r2, r1
 80159f4:	d02a      	beq.n	8015a4c <_dtoa_r+0xb44>
 80159f6:	4659      	mov	r1, fp
 80159f8:	2300      	movs	r3, #0
 80159fa:	220a      	movs	r2, #10
 80159fc:	4620      	mov	r0, r4
 80159fe:	f000 fda3 	bl	8016548 <__multadd>
 8015a02:	45b8      	cmp	r8, r7
 8015a04:	4683      	mov	fp, r0
 8015a06:	f04f 0300 	mov.w	r3, #0
 8015a0a:	f04f 020a 	mov.w	r2, #10
 8015a0e:	4641      	mov	r1, r8
 8015a10:	4620      	mov	r0, r4
 8015a12:	d107      	bne.n	8015a24 <_dtoa_r+0xb1c>
 8015a14:	f000 fd98 	bl	8016548 <__multadd>
 8015a18:	4680      	mov	r8, r0
 8015a1a:	4607      	mov	r7, r0
 8015a1c:	9b01      	ldr	r3, [sp, #4]
 8015a1e:	3301      	adds	r3, #1
 8015a20:	9301      	str	r3, [sp, #4]
 8015a22:	e775      	b.n	8015910 <_dtoa_r+0xa08>
 8015a24:	f000 fd90 	bl	8016548 <__multadd>
 8015a28:	4639      	mov	r1, r7
 8015a2a:	4680      	mov	r8, r0
 8015a2c:	2300      	movs	r3, #0
 8015a2e:	220a      	movs	r2, #10
 8015a30:	4620      	mov	r0, r4
 8015a32:	f000 fd89 	bl	8016548 <__multadd>
 8015a36:	4607      	mov	r7, r0
 8015a38:	e7f0      	b.n	8015a1c <_dtoa_r+0xb14>
 8015a3a:	f1b9 0f00 	cmp.w	r9, #0
 8015a3e:	9a00      	ldr	r2, [sp, #0]
 8015a40:	bfcc      	ite	gt
 8015a42:	464d      	movgt	r5, r9
 8015a44:	2501      	movle	r5, #1
 8015a46:	4415      	add	r5, r2
 8015a48:	f04f 0800 	mov.w	r8, #0
 8015a4c:	4659      	mov	r1, fp
 8015a4e:	2201      	movs	r2, #1
 8015a50:	4620      	mov	r0, r4
 8015a52:	9301      	str	r3, [sp, #4]
 8015a54:	f000 ff72 	bl	801693c <__lshift>
 8015a58:	4631      	mov	r1, r6
 8015a5a:	4683      	mov	fp, r0
 8015a5c:	f000 ffda 	bl	8016a14 <__mcmp>
 8015a60:	2800      	cmp	r0, #0
 8015a62:	dcb2      	bgt.n	80159ca <_dtoa_r+0xac2>
 8015a64:	d102      	bne.n	8015a6c <_dtoa_r+0xb64>
 8015a66:	9b01      	ldr	r3, [sp, #4]
 8015a68:	07db      	lsls	r3, r3, #31
 8015a6a:	d4ae      	bmi.n	80159ca <_dtoa_r+0xac2>
 8015a6c:	462b      	mov	r3, r5
 8015a6e:	461d      	mov	r5, r3
 8015a70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015a74:	2a30      	cmp	r2, #48	; 0x30
 8015a76:	d0fa      	beq.n	8015a6e <_dtoa_r+0xb66>
 8015a78:	e6f7      	b.n	801586a <_dtoa_r+0x962>
 8015a7a:	9a00      	ldr	r2, [sp, #0]
 8015a7c:	429a      	cmp	r2, r3
 8015a7e:	d1a5      	bne.n	80159cc <_dtoa_r+0xac4>
 8015a80:	f10a 0a01 	add.w	sl, sl, #1
 8015a84:	2331      	movs	r3, #49	; 0x31
 8015a86:	e779      	b.n	801597c <_dtoa_r+0xa74>
 8015a88:	4b13      	ldr	r3, [pc, #76]	; (8015ad8 <_dtoa_r+0xbd0>)
 8015a8a:	f7ff baaf 	b.w	8014fec <_dtoa_r+0xe4>
 8015a8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	f47f aa86 	bne.w	8014fa2 <_dtoa_r+0x9a>
 8015a96:	4b11      	ldr	r3, [pc, #68]	; (8015adc <_dtoa_r+0xbd4>)
 8015a98:	f7ff baa8 	b.w	8014fec <_dtoa_r+0xe4>
 8015a9c:	f1b9 0f00 	cmp.w	r9, #0
 8015aa0:	dc03      	bgt.n	8015aaa <_dtoa_r+0xba2>
 8015aa2:	9b05      	ldr	r3, [sp, #20]
 8015aa4:	2b02      	cmp	r3, #2
 8015aa6:	f73f aec9 	bgt.w	801583c <_dtoa_r+0x934>
 8015aaa:	9d00      	ldr	r5, [sp, #0]
 8015aac:	4631      	mov	r1, r6
 8015aae:	4658      	mov	r0, fp
 8015ab0:	f7ff f99e 	bl	8014df0 <quorem>
 8015ab4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8015ab8:	f805 3b01 	strb.w	r3, [r5], #1
 8015abc:	9a00      	ldr	r2, [sp, #0]
 8015abe:	1aaa      	subs	r2, r5, r2
 8015ac0:	4591      	cmp	r9, r2
 8015ac2:	ddba      	ble.n	8015a3a <_dtoa_r+0xb32>
 8015ac4:	4659      	mov	r1, fp
 8015ac6:	2300      	movs	r3, #0
 8015ac8:	220a      	movs	r2, #10
 8015aca:	4620      	mov	r0, r4
 8015acc:	f000 fd3c 	bl	8016548 <__multadd>
 8015ad0:	4683      	mov	fp, r0
 8015ad2:	e7eb      	b.n	8015aac <_dtoa_r+0xba4>
 8015ad4:	08018fd3 	.word	0x08018fd3
 8015ad8:	080191d9 	.word	0x080191d9
 8015adc:	08018f50 	.word	0x08018f50

08015ae0 <__sflush_r>:
 8015ae0:	898a      	ldrh	r2, [r1, #12]
 8015ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ae6:	4605      	mov	r5, r0
 8015ae8:	0710      	lsls	r0, r2, #28
 8015aea:	460c      	mov	r4, r1
 8015aec:	d458      	bmi.n	8015ba0 <__sflush_r+0xc0>
 8015aee:	684b      	ldr	r3, [r1, #4]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	dc05      	bgt.n	8015b00 <__sflush_r+0x20>
 8015af4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	dc02      	bgt.n	8015b00 <__sflush_r+0x20>
 8015afa:	2000      	movs	r0, #0
 8015afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015b02:	2e00      	cmp	r6, #0
 8015b04:	d0f9      	beq.n	8015afa <__sflush_r+0x1a>
 8015b06:	2300      	movs	r3, #0
 8015b08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015b0c:	682f      	ldr	r7, [r5, #0]
 8015b0e:	602b      	str	r3, [r5, #0]
 8015b10:	d032      	beq.n	8015b78 <__sflush_r+0x98>
 8015b12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015b14:	89a3      	ldrh	r3, [r4, #12]
 8015b16:	075a      	lsls	r2, r3, #29
 8015b18:	d505      	bpl.n	8015b26 <__sflush_r+0x46>
 8015b1a:	6863      	ldr	r3, [r4, #4]
 8015b1c:	1ac0      	subs	r0, r0, r3
 8015b1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015b20:	b10b      	cbz	r3, 8015b26 <__sflush_r+0x46>
 8015b22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015b24:	1ac0      	subs	r0, r0, r3
 8015b26:	2300      	movs	r3, #0
 8015b28:	4602      	mov	r2, r0
 8015b2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015b2c:	6a21      	ldr	r1, [r4, #32]
 8015b2e:	4628      	mov	r0, r5
 8015b30:	47b0      	blx	r6
 8015b32:	1c43      	adds	r3, r0, #1
 8015b34:	89a3      	ldrh	r3, [r4, #12]
 8015b36:	d106      	bne.n	8015b46 <__sflush_r+0x66>
 8015b38:	6829      	ldr	r1, [r5, #0]
 8015b3a:	291d      	cmp	r1, #29
 8015b3c:	d82c      	bhi.n	8015b98 <__sflush_r+0xb8>
 8015b3e:	4a2a      	ldr	r2, [pc, #168]	; (8015be8 <__sflush_r+0x108>)
 8015b40:	40ca      	lsrs	r2, r1
 8015b42:	07d6      	lsls	r6, r2, #31
 8015b44:	d528      	bpl.n	8015b98 <__sflush_r+0xb8>
 8015b46:	2200      	movs	r2, #0
 8015b48:	6062      	str	r2, [r4, #4]
 8015b4a:	04d9      	lsls	r1, r3, #19
 8015b4c:	6922      	ldr	r2, [r4, #16]
 8015b4e:	6022      	str	r2, [r4, #0]
 8015b50:	d504      	bpl.n	8015b5c <__sflush_r+0x7c>
 8015b52:	1c42      	adds	r2, r0, #1
 8015b54:	d101      	bne.n	8015b5a <__sflush_r+0x7a>
 8015b56:	682b      	ldr	r3, [r5, #0]
 8015b58:	b903      	cbnz	r3, 8015b5c <__sflush_r+0x7c>
 8015b5a:	6560      	str	r0, [r4, #84]	; 0x54
 8015b5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015b5e:	602f      	str	r7, [r5, #0]
 8015b60:	2900      	cmp	r1, #0
 8015b62:	d0ca      	beq.n	8015afa <__sflush_r+0x1a>
 8015b64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015b68:	4299      	cmp	r1, r3
 8015b6a:	d002      	beq.n	8015b72 <__sflush_r+0x92>
 8015b6c:	4628      	mov	r0, r5
 8015b6e:	f001 f953 	bl	8016e18 <_free_r>
 8015b72:	2000      	movs	r0, #0
 8015b74:	6360      	str	r0, [r4, #52]	; 0x34
 8015b76:	e7c1      	b.n	8015afc <__sflush_r+0x1c>
 8015b78:	6a21      	ldr	r1, [r4, #32]
 8015b7a:	2301      	movs	r3, #1
 8015b7c:	4628      	mov	r0, r5
 8015b7e:	47b0      	blx	r6
 8015b80:	1c41      	adds	r1, r0, #1
 8015b82:	d1c7      	bne.n	8015b14 <__sflush_r+0x34>
 8015b84:	682b      	ldr	r3, [r5, #0]
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d0c4      	beq.n	8015b14 <__sflush_r+0x34>
 8015b8a:	2b1d      	cmp	r3, #29
 8015b8c:	d001      	beq.n	8015b92 <__sflush_r+0xb2>
 8015b8e:	2b16      	cmp	r3, #22
 8015b90:	d101      	bne.n	8015b96 <__sflush_r+0xb6>
 8015b92:	602f      	str	r7, [r5, #0]
 8015b94:	e7b1      	b.n	8015afa <__sflush_r+0x1a>
 8015b96:	89a3      	ldrh	r3, [r4, #12]
 8015b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015b9c:	81a3      	strh	r3, [r4, #12]
 8015b9e:	e7ad      	b.n	8015afc <__sflush_r+0x1c>
 8015ba0:	690f      	ldr	r7, [r1, #16]
 8015ba2:	2f00      	cmp	r7, #0
 8015ba4:	d0a9      	beq.n	8015afa <__sflush_r+0x1a>
 8015ba6:	0793      	lsls	r3, r2, #30
 8015ba8:	680e      	ldr	r6, [r1, #0]
 8015baa:	bf08      	it	eq
 8015bac:	694b      	ldreq	r3, [r1, #20]
 8015bae:	600f      	str	r7, [r1, #0]
 8015bb0:	bf18      	it	ne
 8015bb2:	2300      	movne	r3, #0
 8015bb4:	eba6 0807 	sub.w	r8, r6, r7
 8015bb8:	608b      	str	r3, [r1, #8]
 8015bba:	f1b8 0f00 	cmp.w	r8, #0
 8015bbe:	dd9c      	ble.n	8015afa <__sflush_r+0x1a>
 8015bc0:	6a21      	ldr	r1, [r4, #32]
 8015bc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015bc4:	4643      	mov	r3, r8
 8015bc6:	463a      	mov	r2, r7
 8015bc8:	4628      	mov	r0, r5
 8015bca:	47b0      	blx	r6
 8015bcc:	2800      	cmp	r0, #0
 8015bce:	dc06      	bgt.n	8015bde <__sflush_r+0xfe>
 8015bd0:	89a3      	ldrh	r3, [r4, #12]
 8015bd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015bd6:	81a3      	strh	r3, [r4, #12]
 8015bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8015bdc:	e78e      	b.n	8015afc <__sflush_r+0x1c>
 8015bde:	4407      	add	r7, r0
 8015be0:	eba8 0800 	sub.w	r8, r8, r0
 8015be4:	e7e9      	b.n	8015bba <__sflush_r+0xda>
 8015be6:	bf00      	nop
 8015be8:	20400001 	.word	0x20400001

08015bec <_fflush_r>:
 8015bec:	b538      	push	{r3, r4, r5, lr}
 8015bee:	690b      	ldr	r3, [r1, #16]
 8015bf0:	4605      	mov	r5, r0
 8015bf2:	460c      	mov	r4, r1
 8015bf4:	b913      	cbnz	r3, 8015bfc <_fflush_r+0x10>
 8015bf6:	2500      	movs	r5, #0
 8015bf8:	4628      	mov	r0, r5
 8015bfa:	bd38      	pop	{r3, r4, r5, pc}
 8015bfc:	b118      	cbz	r0, 8015c06 <_fflush_r+0x1a>
 8015bfe:	6983      	ldr	r3, [r0, #24]
 8015c00:	b90b      	cbnz	r3, 8015c06 <_fflush_r+0x1a>
 8015c02:	f7fd f81b 	bl	8012c3c <__sinit>
 8015c06:	4b14      	ldr	r3, [pc, #80]	; (8015c58 <_fflush_r+0x6c>)
 8015c08:	429c      	cmp	r4, r3
 8015c0a:	d11b      	bne.n	8015c44 <_fflush_r+0x58>
 8015c0c:	686c      	ldr	r4, [r5, #4]
 8015c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d0ef      	beq.n	8015bf6 <_fflush_r+0xa>
 8015c16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015c18:	07d0      	lsls	r0, r2, #31
 8015c1a:	d404      	bmi.n	8015c26 <_fflush_r+0x3a>
 8015c1c:	0599      	lsls	r1, r3, #22
 8015c1e:	d402      	bmi.n	8015c26 <_fflush_r+0x3a>
 8015c20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015c22:	f7fd f8ce 	bl	8012dc2 <__retarget_lock_acquire_recursive>
 8015c26:	4628      	mov	r0, r5
 8015c28:	4621      	mov	r1, r4
 8015c2a:	f7ff ff59 	bl	8015ae0 <__sflush_r>
 8015c2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015c30:	07da      	lsls	r2, r3, #31
 8015c32:	4605      	mov	r5, r0
 8015c34:	d4e0      	bmi.n	8015bf8 <_fflush_r+0xc>
 8015c36:	89a3      	ldrh	r3, [r4, #12]
 8015c38:	059b      	lsls	r3, r3, #22
 8015c3a:	d4dd      	bmi.n	8015bf8 <_fflush_r+0xc>
 8015c3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015c3e:	f7fd f8c1 	bl	8012dc4 <__retarget_lock_release_recursive>
 8015c42:	e7d9      	b.n	8015bf8 <_fflush_r+0xc>
 8015c44:	4b05      	ldr	r3, [pc, #20]	; (8015c5c <_fflush_r+0x70>)
 8015c46:	429c      	cmp	r4, r3
 8015c48:	d101      	bne.n	8015c4e <_fflush_r+0x62>
 8015c4a:	68ac      	ldr	r4, [r5, #8]
 8015c4c:	e7df      	b.n	8015c0e <_fflush_r+0x22>
 8015c4e:	4b04      	ldr	r3, [pc, #16]	; (8015c60 <_fflush_r+0x74>)
 8015c50:	429c      	cmp	r4, r3
 8015c52:	bf08      	it	eq
 8015c54:	68ec      	ldreq	r4, [r5, #12]
 8015c56:	e7da      	b.n	8015c0e <_fflush_r+0x22>
 8015c58:	08018e84 	.word	0x08018e84
 8015c5c:	08018ea4 	.word	0x08018ea4
 8015c60:	08018e64 	.word	0x08018e64

08015c64 <rshift>:
 8015c64:	6903      	ldr	r3, [r0, #16]
 8015c66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015c6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015c72:	f100 0414 	add.w	r4, r0, #20
 8015c76:	dd45      	ble.n	8015d04 <rshift+0xa0>
 8015c78:	f011 011f 	ands.w	r1, r1, #31
 8015c7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015c80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015c84:	d10c      	bne.n	8015ca0 <rshift+0x3c>
 8015c86:	f100 0710 	add.w	r7, r0, #16
 8015c8a:	4629      	mov	r1, r5
 8015c8c:	42b1      	cmp	r1, r6
 8015c8e:	d334      	bcc.n	8015cfa <rshift+0x96>
 8015c90:	1a9b      	subs	r3, r3, r2
 8015c92:	009b      	lsls	r3, r3, #2
 8015c94:	1eea      	subs	r2, r5, #3
 8015c96:	4296      	cmp	r6, r2
 8015c98:	bf38      	it	cc
 8015c9a:	2300      	movcc	r3, #0
 8015c9c:	4423      	add	r3, r4
 8015c9e:	e015      	b.n	8015ccc <rshift+0x68>
 8015ca0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015ca4:	f1c1 0820 	rsb	r8, r1, #32
 8015ca8:	40cf      	lsrs	r7, r1
 8015caa:	f105 0e04 	add.w	lr, r5, #4
 8015cae:	46a1      	mov	r9, r4
 8015cb0:	4576      	cmp	r6, lr
 8015cb2:	46f4      	mov	ip, lr
 8015cb4:	d815      	bhi.n	8015ce2 <rshift+0x7e>
 8015cb6:	1a9b      	subs	r3, r3, r2
 8015cb8:	009a      	lsls	r2, r3, #2
 8015cba:	3a04      	subs	r2, #4
 8015cbc:	3501      	adds	r5, #1
 8015cbe:	42ae      	cmp	r6, r5
 8015cc0:	bf38      	it	cc
 8015cc2:	2200      	movcc	r2, #0
 8015cc4:	18a3      	adds	r3, r4, r2
 8015cc6:	50a7      	str	r7, [r4, r2]
 8015cc8:	b107      	cbz	r7, 8015ccc <rshift+0x68>
 8015cca:	3304      	adds	r3, #4
 8015ccc:	1b1a      	subs	r2, r3, r4
 8015cce:	42a3      	cmp	r3, r4
 8015cd0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015cd4:	bf08      	it	eq
 8015cd6:	2300      	moveq	r3, #0
 8015cd8:	6102      	str	r2, [r0, #16]
 8015cda:	bf08      	it	eq
 8015cdc:	6143      	streq	r3, [r0, #20]
 8015cde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ce2:	f8dc c000 	ldr.w	ip, [ip]
 8015ce6:	fa0c fc08 	lsl.w	ip, ip, r8
 8015cea:	ea4c 0707 	orr.w	r7, ip, r7
 8015cee:	f849 7b04 	str.w	r7, [r9], #4
 8015cf2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015cf6:	40cf      	lsrs	r7, r1
 8015cf8:	e7da      	b.n	8015cb0 <rshift+0x4c>
 8015cfa:	f851 cb04 	ldr.w	ip, [r1], #4
 8015cfe:	f847 cf04 	str.w	ip, [r7, #4]!
 8015d02:	e7c3      	b.n	8015c8c <rshift+0x28>
 8015d04:	4623      	mov	r3, r4
 8015d06:	e7e1      	b.n	8015ccc <rshift+0x68>

08015d08 <__hexdig_fun>:
 8015d08:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015d0c:	2b09      	cmp	r3, #9
 8015d0e:	d802      	bhi.n	8015d16 <__hexdig_fun+0xe>
 8015d10:	3820      	subs	r0, #32
 8015d12:	b2c0      	uxtb	r0, r0
 8015d14:	4770      	bx	lr
 8015d16:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015d1a:	2b05      	cmp	r3, #5
 8015d1c:	d801      	bhi.n	8015d22 <__hexdig_fun+0x1a>
 8015d1e:	3847      	subs	r0, #71	; 0x47
 8015d20:	e7f7      	b.n	8015d12 <__hexdig_fun+0xa>
 8015d22:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015d26:	2b05      	cmp	r3, #5
 8015d28:	d801      	bhi.n	8015d2e <__hexdig_fun+0x26>
 8015d2a:	3827      	subs	r0, #39	; 0x27
 8015d2c:	e7f1      	b.n	8015d12 <__hexdig_fun+0xa>
 8015d2e:	2000      	movs	r0, #0
 8015d30:	4770      	bx	lr
	...

08015d34 <__gethex>:
 8015d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d38:	ed2d 8b02 	vpush	{d8}
 8015d3c:	b089      	sub	sp, #36	; 0x24
 8015d3e:	ee08 0a10 	vmov	s16, r0
 8015d42:	9304      	str	r3, [sp, #16]
 8015d44:	4bbc      	ldr	r3, [pc, #752]	; (8016038 <__gethex+0x304>)
 8015d46:	681b      	ldr	r3, [r3, #0]
 8015d48:	9301      	str	r3, [sp, #4]
 8015d4a:	4618      	mov	r0, r3
 8015d4c:	468b      	mov	fp, r1
 8015d4e:	4690      	mov	r8, r2
 8015d50:	f7ea fa4e 	bl	80001f0 <strlen>
 8015d54:	9b01      	ldr	r3, [sp, #4]
 8015d56:	f8db 2000 	ldr.w	r2, [fp]
 8015d5a:	4403      	add	r3, r0
 8015d5c:	4682      	mov	sl, r0
 8015d5e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015d62:	9305      	str	r3, [sp, #20]
 8015d64:	1c93      	adds	r3, r2, #2
 8015d66:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8015d6a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8015d6e:	32fe      	adds	r2, #254	; 0xfe
 8015d70:	18d1      	adds	r1, r2, r3
 8015d72:	461f      	mov	r7, r3
 8015d74:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015d78:	9100      	str	r1, [sp, #0]
 8015d7a:	2830      	cmp	r0, #48	; 0x30
 8015d7c:	d0f8      	beq.n	8015d70 <__gethex+0x3c>
 8015d7e:	f7ff ffc3 	bl	8015d08 <__hexdig_fun>
 8015d82:	4604      	mov	r4, r0
 8015d84:	2800      	cmp	r0, #0
 8015d86:	d13a      	bne.n	8015dfe <__gethex+0xca>
 8015d88:	9901      	ldr	r1, [sp, #4]
 8015d8a:	4652      	mov	r2, sl
 8015d8c:	4638      	mov	r0, r7
 8015d8e:	f7fe f842 	bl	8013e16 <strncmp>
 8015d92:	4605      	mov	r5, r0
 8015d94:	2800      	cmp	r0, #0
 8015d96:	d168      	bne.n	8015e6a <__gethex+0x136>
 8015d98:	f817 000a 	ldrb.w	r0, [r7, sl]
 8015d9c:	eb07 060a 	add.w	r6, r7, sl
 8015da0:	f7ff ffb2 	bl	8015d08 <__hexdig_fun>
 8015da4:	2800      	cmp	r0, #0
 8015da6:	d062      	beq.n	8015e6e <__gethex+0x13a>
 8015da8:	4633      	mov	r3, r6
 8015daa:	7818      	ldrb	r0, [r3, #0]
 8015dac:	2830      	cmp	r0, #48	; 0x30
 8015dae:	461f      	mov	r7, r3
 8015db0:	f103 0301 	add.w	r3, r3, #1
 8015db4:	d0f9      	beq.n	8015daa <__gethex+0x76>
 8015db6:	f7ff ffa7 	bl	8015d08 <__hexdig_fun>
 8015dba:	2301      	movs	r3, #1
 8015dbc:	fab0 f480 	clz	r4, r0
 8015dc0:	0964      	lsrs	r4, r4, #5
 8015dc2:	4635      	mov	r5, r6
 8015dc4:	9300      	str	r3, [sp, #0]
 8015dc6:	463a      	mov	r2, r7
 8015dc8:	4616      	mov	r6, r2
 8015dca:	3201      	adds	r2, #1
 8015dcc:	7830      	ldrb	r0, [r6, #0]
 8015dce:	f7ff ff9b 	bl	8015d08 <__hexdig_fun>
 8015dd2:	2800      	cmp	r0, #0
 8015dd4:	d1f8      	bne.n	8015dc8 <__gethex+0x94>
 8015dd6:	9901      	ldr	r1, [sp, #4]
 8015dd8:	4652      	mov	r2, sl
 8015dda:	4630      	mov	r0, r6
 8015ddc:	f7fe f81b 	bl	8013e16 <strncmp>
 8015de0:	b980      	cbnz	r0, 8015e04 <__gethex+0xd0>
 8015de2:	b94d      	cbnz	r5, 8015df8 <__gethex+0xc4>
 8015de4:	eb06 050a 	add.w	r5, r6, sl
 8015de8:	462a      	mov	r2, r5
 8015dea:	4616      	mov	r6, r2
 8015dec:	3201      	adds	r2, #1
 8015dee:	7830      	ldrb	r0, [r6, #0]
 8015df0:	f7ff ff8a 	bl	8015d08 <__hexdig_fun>
 8015df4:	2800      	cmp	r0, #0
 8015df6:	d1f8      	bne.n	8015dea <__gethex+0xb6>
 8015df8:	1bad      	subs	r5, r5, r6
 8015dfa:	00ad      	lsls	r5, r5, #2
 8015dfc:	e004      	b.n	8015e08 <__gethex+0xd4>
 8015dfe:	2400      	movs	r4, #0
 8015e00:	4625      	mov	r5, r4
 8015e02:	e7e0      	b.n	8015dc6 <__gethex+0x92>
 8015e04:	2d00      	cmp	r5, #0
 8015e06:	d1f7      	bne.n	8015df8 <__gethex+0xc4>
 8015e08:	7833      	ldrb	r3, [r6, #0]
 8015e0a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015e0e:	2b50      	cmp	r3, #80	; 0x50
 8015e10:	d13b      	bne.n	8015e8a <__gethex+0x156>
 8015e12:	7873      	ldrb	r3, [r6, #1]
 8015e14:	2b2b      	cmp	r3, #43	; 0x2b
 8015e16:	d02c      	beq.n	8015e72 <__gethex+0x13e>
 8015e18:	2b2d      	cmp	r3, #45	; 0x2d
 8015e1a:	d02e      	beq.n	8015e7a <__gethex+0x146>
 8015e1c:	1c71      	adds	r1, r6, #1
 8015e1e:	f04f 0900 	mov.w	r9, #0
 8015e22:	7808      	ldrb	r0, [r1, #0]
 8015e24:	f7ff ff70 	bl	8015d08 <__hexdig_fun>
 8015e28:	1e43      	subs	r3, r0, #1
 8015e2a:	b2db      	uxtb	r3, r3
 8015e2c:	2b18      	cmp	r3, #24
 8015e2e:	d82c      	bhi.n	8015e8a <__gethex+0x156>
 8015e30:	f1a0 0210 	sub.w	r2, r0, #16
 8015e34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015e38:	f7ff ff66 	bl	8015d08 <__hexdig_fun>
 8015e3c:	1e43      	subs	r3, r0, #1
 8015e3e:	b2db      	uxtb	r3, r3
 8015e40:	2b18      	cmp	r3, #24
 8015e42:	d91d      	bls.n	8015e80 <__gethex+0x14c>
 8015e44:	f1b9 0f00 	cmp.w	r9, #0
 8015e48:	d000      	beq.n	8015e4c <__gethex+0x118>
 8015e4a:	4252      	negs	r2, r2
 8015e4c:	4415      	add	r5, r2
 8015e4e:	f8cb 1000 	str.w	r1, [fp]
 8015e52:	b1e4      	cbz	r4, 8015e8e <__gethex+0x15a>
 8015e54:	9b00      	ldr	r3, [sp, #0]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	bf14      	ite	ne
 8015e5a:	2700      	movne	r7, #0
 8015e5c:	2706      	moveq	r7, #6
 8015e5e:	4638      	mov	r0, r7
 8015e60:	b009      	add	sp, #36	; 0x24
 8015e62:	ecbd 8b02 	vpop	{d8}
 8015e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e6a:	463e      	mov	r6, r7
 8015e6c:	4625      	mov	r5, r4
 8015e6e:	2401      	movs	r4, #1
 8015e70:	e7ca      	b.n	8015e08 <__gethex+0xd4>
 8015e72:	f04f 0900 	mov.w	r9, #0
 8015e76:	1cb1      	adds	r1, r6, #2
 8015e78:	e7d3      	b.n	8015e22 <__gethex+0xee>
 8015e7a:	f04f 0901 	mov.w	r9, #1
 8015e7e:	e7fa      	b.n	8015e76 <__gethex+0x142>
 8015e80:	230a      	movs	r3, #10
 8015e82:	fb03 0202 	mla	r2, r3, r2, r0
 8015e86:	3a10      	subs	r2, #16
 8015e88:	e7d4      	b.n	8015e34 <__gethex+0x100>
 8015e8a:	4631      	mov	r1, r6
 8015e8c:	e7df      	b.n	8015e4e <__gethex+0x11a>
 8015e8e:	1bf3      	subs	r3, r6, r7
 8015e90:	3b01      	subs	r3, #1
 8015e92:	4621      	mov	r1, r4
 8015e94:	2b07      	cmp	r3, #7
 8015e96:	dc0b      	bgt.n	8015eb0 <__gethex+0x17c>
 8015e98:	ee18 0a10 	vmov	r0, s16
 8015e9c:	f000 faf2 	bl	8016484 <_Balloc>
 8015ea0:	4604      	mov	r4, r0
 8015ea2:	b940      	cbnz	r0, 8015eb6 <__gethex+0x182>
 8015ea4:	4b65      	ldr	r3, [pc, #404]	; (801603c <__gethex+0x308>)
 8015ea6:	4602      	mov	r2, r0
 8015ea8:	21de      	movs	r1, #222	; 0xde
 8015eaa:	4865      	ldr	r0, [pc, #404]	; (8016040 <__gethex+0x30c>)
 8015eac:	f001 feea 	bl	8017c84 <__assert_func>
 8015eb0:	3101      	adds	r1, #1
 8015eb2:	105b      	asrs	r3, r3, #1
 8015eb4:	e7ee      	b.n	8015e94 <__gethex+0x160>
 8015eb6:	f100 0914 	add.w	r9, r0, #20
 8015eba:	f04f 0b00 	mov.w	fp, #0
 8015ebe:	f1ca 0301 	rsb	r3, sl, #1
 8015ec2:	f8cd 9008 	str.w	r9, [sp, #8]
 8015ec6:	f8cd b000 	str.w	fp, [sp]
 8015eca:	9306      	str	r3, [sp, #24]
 8015ecc:	42b7      	cmp	r7, r6
 8015ece:	d340      	bcc.n	8015f52 <__gethex+0x21e>
 8015ed0:	9802      	ldr	r0, [sp, #8]
 8015ed2:	9b00      	ldr	r3, [sp, #0]
 8015ed4:	f840 3b04 	str.w	r3, [r0], #4
 8015ed8:	eba0 0009 	sub.w	r0, r0, r9
 8015edc:	1080      	asrs	r0, r0, #2
 8015ede:	0146      	lsls	r6, r0, #5
 8015ee0:	6120      	str	r0, [r4, #16]
 8015ee2:	4618      	mov	r0, r3
 8015ee4:	f000 fbc4 	bl	8016670 <__hi0bits>
 8015ee8:	1a30      	subs	r0, r6, r0
 8015eea:	f8d8 6000 	ldr.w	r6, [r8]
 8015eee:	42b0      	cmp	r0, r6
 8015ef0:	dd63      	ble.n	8015fba <__gethex+0x286>
 8015ef2:	1b87      	subs	r7, r0, r6
 8015ef4:	4639      	mov	r1, r7
 8015ef6:	4620      	mov	r0, r4
 8015ef8:	f000 ff5e 	bl	8016db8 <__any_on>
 8015efc:	4682      	mov	sl, r0
 8015efe:	b1a8      	cbz	r0, 8015f2c <__gethex+0x1f8>
 8015f00:	1e7b      	subs	r3, r7, #1
 8015f02:	1159      	asrs	r1, r3, #5
 8015f04:	f003 021f 	and.w	r2, r3, #31
 8015f08:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015f0c:	f04f 0a01 	mov.w	sl, #1
 8015f10:	fa0a f202 	lsl.w	r2, sl, r2
 8015f14:	420a      	tst	r2, r1
 8015f16:	d009      	beq.n	8015f2c <__gethex+0x1f8>
 8015f18:	4553      	cmp	r3, sl
 8015f1a:	dd05      	ble.n	8015f28 <__gethex+0x1f4>
 8015f1c:	1eb9      	subs	r1, r7, #2
 8015f1e:	4620      	mov	r0, r4
 8015f20:	f000 ff4a 	bl	8016db8 <__any_on>
 8015f24:	2800      	cmp	r0, #0
 8015f26:	d145      	bne.n	8015fb4 <__gethex+0x280>
 8015f28:	f04f 0a02 	mov.w	sl, #2
 8015f2c:	4639      	mov	r1, r7
 8015f2e:	4620      	mov	r0, r4
 8015f30:	f7ff fe98 	bl	8015c64 <rshift>
 8015f34:	443d      	add	r5, r7
 8015f36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015f3a:	42ab      	cmp	r3, r5
 8015f3c:	da4c      	bge.n	8015fd8 <__gethex+0x2a4>
 8015f3e:	ee18 0a10 	vmov	r0, s16
 8015f42:	4621      	mov	r1, r4
 8015f44:	f000 fade 	bl	8016504 <_Bfree>
 8015f48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015f4a:	2300      	movs	r3, #0
 8015f4c:	6013      	str	r3, [r2, #0]
 8015f4e:	27a3      	movs	r7, #163	; 0xa3
 8015f50:	e785      	b.n	8015e5e <__gethex+0x12a>
 8015f52:	1e73      	subs	r3, r6, #1
 8015f54:	9a05      	ldr	r2, [sp, #20]
 8015f56:	9303      	str	r3, [sp, #12]
 8015f58:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015f5c:	4293      	cmp	r3, r2
 8015f5e:	d019      	beq.n	8015f94 <__gethex+0x260>
 8015f60:	f1bb 0f20 	cmp.w	fp, #32
 8015f64:	d107      	bne.n	8015f76 <__gethex+0x242>
 8015f66:	9b02      	ldr	r3, [sp, #8]
 8015f68:	9a00      	ldr	r2, [sp, #0]
 8015f6a:	f843 2b04 	str.w	r2, [r3], #4
 8015f6e:	9302      	str	r3, [sp, #8]
 8015f70:	2300      	movs	r3, #0
 8015f72:	9300      	str	r3, [sp, #0]
 8015f74:	469b      	mov	fp, r3
 8015f76:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015f7a:	f7ff fec5 	bl	8015d08 <__hexdig_fun>
 8015f7e:	9b00      	ldr	r3, [sp, #0]
 8015f80:	f000 000f 	and.w	r0, r0, #15
 8015f84:	fa00 f00b 	lsl.w	r0, r0, fp
 8015f88:	4303      	orrs	r3, r0
 8015f8a:	9300      	str	r3, [sp, #0]
 8015f8c:	f10b 0b04 	add.w	fp, fp, #4
 8015f90:	9b03      	ldr	r3, [sp, #12]
 8015f92:	e00d      	b.n	8015fb0 <__gethex+0x27c>
 8015f94:	9b03      	ldr	r3, [sp, #12]
 8015f96:	9a06      	ldr	r2, [sp, #24]
 8015f98:	4413      	add	r3, r2
 8015f9a:	42bb      	cmp	r3, r7
 8015f9c:	d3e0      	bcc.n	8015f60 <__gethex+0x22c>
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	9901      	ldr	r1, [sp, #4]
 8015fa2:	9307      	str	r3, [sp, #28]
 8015fa4:	4652      	mov	r2, sl
 8015fa6:	f7fd ff36 	bl	8013e16 <strncmp>
 8015faa:	9b07      	ldr	r3, [sp, #28]
 8015fac:	2800      	cmp	r0, #0
 8015fae:	d1d7      	bne.n	8015f60 <__gethex+0x22c>
 8015fb0:	461e      	mov	r6, r3
 8015fb2:	e78b      	b.n	8015ecc <__gethex+0x198>
 8015fb4:	f04f 0a03 	mov.w	sl, #3
 8015fb8:	e7b8      	b.n	8015f2c <__gethex+0x1f8>
 8015fba:	da0a      	bge.n	8015fd2 <__gethex+0x29e>
 8015fbc:	1a37      	subs	r7, r6, r0
 8015fbe:	4621      	mov	r1, r4
 8015fc0:	ee18 0a10 	vmov	r0, s16
 8015fc4:	463a      	mov	r2, r7
 8015fc6:	f000 fcb9 	bl	801693c <__lshift>
 8015fca:	1bed      	subs	r5, r5, r7
 8015fcc:	4604      	mov	r4, r0
 8015fce:	f100 0914 	add.w	r9, r0, #20
 8015fd2:	f04f 0a00 	mov.w	sl, #0
 8015fd6:	e7ae      	b.n	8015f36 <__gethex+0x202>
 8015fd8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015fdc:	42a8      	cmp	r0, r5
 8015fde:	dd72      	ble.n	80160c6 <__gethex+0x392>
 8015fe0:	1b45      	subs	r5, r0, r5
 8015fe2:	42ae      	cmp	r6, r5
 8015fe4:	dc36      	bgt.n	8016054 <__gethex+0x320>
 8015fe6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015fea:	2b02      	cmp	r3, #2
 8015fec:	d02a      	beq.n	8016044 <__gethex+0x310>
 8015fee:	2b03      	cmp	r3, #3
 8015ff0:	d02c      	beq.n	801604c <__gethex+0x318>
 8015ff2:	2b01      	cmp	r3, #1
 8015ff4:	d115      	bne.n	8016022 <__gethex+0x2ee>
 8015ff6:	42ae      	cmp	r6, r5
 8015ff8:	d113      	bne.n	8016022 <__gethex+0x2ee>
 8015ffa:	2e01      	cmp	r6, #1
 8015ffc:	d10b      	bne.n	8016016 <__gethex+0x2e2>
 8015ffe:	9a04      	ldr	r2, [sp, #16]
 8016000:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016004:	6013      	str	r3, [r2, #0]
 8016006:	2301      	movs	r3, #1
 8016008:	6123      	str	r3, [r4, #16]
 801600a:	f8c9 3000 	str.w	r3, [r9]
 801600e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016010:	2762      	movs	r7, #98	; 0x62
 8016012:	601c      	str	r4, [r3, #0]
 8016014:	e723      	b.n	8015e5e <__gethex+0x12a>
 8016016:	1e71      	subs	r1, r6, #1
 8016018:	4620      	mov	r0, r4
 801601a:	f000 fecd 	bl	8016db8 <__any_on>
 801601e:	2800      	cmp	r0, #0
 8016020:	d1ed      	bne.n	8015ffe <__gethex+0x2ca>
 8016022:	ee18 0a10 	vmov	r0, s16
 8016026:	4621      	mov	r1, r4
 8016028:	f000 fa6c 	bl	8016504 <_Bfree>
 801602c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801602e:	2300      	movs	r3, #0
 8016030:	6013      	str	r3, [r2, #0]
 8016032:	2750      	movs	r7, #80	; 0x50
 8016034:	e713      	b.n	8015e5e <__gethex+0x12a>
 8016036:	bf00      	nop
 8016038:	08019050 	.word	0x08019050
 801603c:	08018fd3 	.word	0x08018fd3
 8016040:	08018fe4 	.word	0x08018fe4
 8016044:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016046:	2b00      	cmp	r3, #0
 8016048:	d1eb      	bne.n	8016022 <__gethex+0x2ee>
 801604a:	e7d8      	b.n	8015ffe <__gethex+0x2ca>
 801604c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801604e:	2b00      	cmp	r3, #0
 8016050:	d1d5      	bne.n	8015ffe <__gethex+0x2ca>
 8016052:	e7e6      	b.n	8016022 <__gethex+0x2ee>
 8016054:	1e6f      	subs	r7, r5, #1
 8016056:	f1ba 0f00 	cmp.w	sl, #0
 801605a:	d131      	bne.n	80160c0 <__gethex+0x38c>
 801605c:	b127      	cbz	r7, 8016068 <__gethex+0x334>
 801605e:	4639      	mov	r1, r7
 8016060:	4620      	mov	r0, r4
 8016062:	f000 fea9 	bl	8016db8 <__any_on>
 8016066:	4682      	mov	sl, r0
 8016068:	117b      	asrs	r3, r7, #5
 801606a:	2101      	movs	r1, #1
 801606c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8016070:	f007 071f 	and.w	r7, r7, #31
 8016074:	fa01 f707 	lsl.w	r7, r1, r7
 8016078:	421f      	tst	r7, r3
 801607a:	4629      	mov	r1, r5
 801607c:	4620      	mov	r0, r4
 801607e:	bf18      	it	ne
 8016080:	f04a 0a02 	orrne.w	sl, sl, #2
 8016084:	1b76      	subs	r6, r6, r5
 8016086:	f7ff fded 	bl	8015c64 <rshift>
 801608a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801608e:	2702      	movs	r7, #2
 8016090:	f1ba 0f00 	cmp.w	sl, #0
 8016094:	d048      	beq.n	8016128 <__gethex+0x3f4>
 8016096:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801609a:	2b02      	cmp	r3, #2
 801609c:	d015      	beq.n	80160ca <__gethex+0x396>
 801609e:	2b03      	cmp	r3, #3
 80160a0:	d017      	beq.n	80160d2 <__gethex+0x39e>
 80160a2:	2b01      	cmp	r3, #1
 80160a4:	d109      	bne.n	80160ba <__gethex+0x386>
 80160a6:	f01a 0f02 	tst.w	sl, #2
 80160aa:	d006      	beq.n	80160ba <__gethex+0x386>
 80160ac:	f8d9 0000 	ldr.w	r0, [r9]
 80160b0:	ea4a 0a00 	orr.w	sl, sl, r0
 80160b4:	f01a 0f01 	tst.w	sl, #1
 80160b8:	d10e      	bne.n	80160d8 <__gethex+0x3a4>
 80160ba:	f047 0710 	orr.w	r7, r7, #16
 80160be:	e033      	b.n	8016128 <__gethex+0x3f4>
 80160c0:	f04f 0a01 	mov.w	sl, #1
 80160c4:	e7d0      	b.n	8016068 <__gethex+0x334>
 80160c6:	2701      	movs	r7, #1
 80160c8:	e7e2      	b.n	8016090 <__gethex+0x35c>
 80160ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80160cc:	f1c3 0301 	rsb	r3, r3, #1
 80160d0:	9315      	str	r3, [sp, #84]	; 0x54
 80160d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d0f0      	beq.n	80160ba <__gethex+0x386>
 80160d8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80160dc:	f104 0314 	add.w	r3, r4, #20
 80160e0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80160e4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80160e8:	f04f 0c00 	mov.w	ip, #0
 80160ec:	4618      	mov	r0, r3
 80160ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80160f2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80160f6:	d01c      	beq.n	8016132 <__gethex+0x3fe>
 80160f8:	3201      	adds	r2, #1
 80160fa:	6002      	str	r2, [r0, #0]
 80160fc:	2f02      	cmp	r7, #2
 80160fe:	f104 0314 	add.w	r3, r4, #20
 8016102:	d13f      	bne.n	8016184 <__gethex+0x450>
 8016104:	f8d8 2000 	ldr.w	r2, [r8]
 8016108:	3a01      	subs	r2, #1
 801610a:	42b2      	cmp	r2, r6
 801610c:	d10a      	bne.n	8016124 <__gethex+0x3f0>
 801610e:	1171      	asrs	r1, r6, #5
 8016110:	2201      	movs	r2, #1
 8016112:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016116:	f006 061f 	and.w	r6, r6, #31
 801611a:	fa02 f606 	lsl.w	r6, r2, r6
 801611e:	421e      	tst	r6, r3
 8016120:	bf18      	it	ne
 8016122:	4617      	movne	r7, r2
 8016124:	f047 0720 	orr.w	r7, r7, #32
 8016128:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801612a:	601c      	str	r4, [r3, #0]
 801612c:	9b04      	ldr	r3, [sp, #16]
 801612e:	601d      	str	r5, [r3, #0]
 8016130:	e695      	b.n	8015e5e <__gethex+0x12a>
 8016132:	4299      	cmp	r1, r3
 8016134:	f843 cc04 	str.w	ip, [r3, #-4]
 8016138:	d8d8      	bhi.n	80160ec <__gethex+0x3b8>
 801613a:	68a3      	ldr	r3, [r4, #8]
 801613c:	459b      	cmp	fp, r3
 801613e:	db19      	blt.n	8016174 <__gethex+0x440>
 8016140:	6861      	ldr	r1, [r4, #4]
 8016142:	ee18 0a10 	vmov	r0, s16
 8016146:	3101      	adds	r1, #1
 8016148:	f000 f99c 	bl	8016484 <_Balloc>
 801614c:	4681      	mov	r9, r0
 801614e:	b918      	cbnz	r0, 8016158 <__gethex+0x424>
 8016150:	4b1a      	ldr	r3, [pc, #104]	; (80161bc <__gethex+0x488>)
 8016152:	4602      	mov	r2, r0
 8016154:	2184      	movs	r1, #132	; 0x84
 8016156:	e6a8      	b.n	8015eaa <__gethex+0x176>
 8016158:	6922      	ldr	r2, [r4, #16]
 801615a:	3202      	adds	r2, #2
 801615c:	f104 010c 	add.w	r1, r4, #12
 8016160:	0092      	lsls	r2, r2, #2
 8016162:	300c      	adds	r0, #12
 8016164:	f7fc fe2f 	bl	8012dc6 <memcpy>
 8016168:	4621      	mov	r1, r4
 801616a:	ee18 0a10 	vmov	r0, s16
 801616e:	f000 f9c9 	bl	8016504 <_Bfree>
 8016172:	464c      	mov	r4, r9
 8016174:	6923      	ldr	r3, [r4, #16]
 8016176:	1c5a      	adds	r2, r3, #1
 8016178:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801617c:	6122      	str	r2, [r4, #16]
 801617e:	2201      	movs	r2, #1
 8016180:	615a      	str	r2, [r3, #20]
 8016182:	e7bb      	b.n	80160fc <__gethex+0x3c8>
 8016184:	6922      	ldr	r2, [r4, #16]
 8016186:	455a      	cmp	r2, fp
 8016188:	dd0b      	ble.n	80161a2 <__gethex+0x46e>
 801618a:	2101      	movs	r1, #1
 801618c:	4620      	mov	r0, r4
 801618e:	f7ff fd69 	bl	8015c64 <rshift>
 8016192:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016196:	3501      	adds	r5, #1
 8016198:	42ab      	cmp	r3, r5
 801619a:	f6ff aed0 	blt.w	8015f3e <__gethex+0x20a>
 801619e:	2701      	movs	r7, #1
 80161a0:	e7c0      	b.n	8016124 <__gethex+0x3f0>
 80161a2:	f016 061f 	ands.w	r6, r6, #31
 80161a6:	d0fa      	beq.n	801619e <__gethex+0x46a>
 80161a8:	449a      	add	sl, r3
 80161aa:	f1c6 0620 	rsb	r6, r6, #32
 80161ae:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80161b2:	f000 fa5d 	bl	8016670 <__hi0bits>
 80161b6:	42b0      	cmp	r0, r6
 80161b8:	dbe7      	blt.n	801618a <__gethex+0x456>
 80161ba:	e7f0      	b.n	801619e <__gethex+0x46a>
 80161bc:	08018fd3 	.word	0x08018fd3

080161c0 <L_shift>:
 80161c0:	f1c2 0208 	rsb	r2, r2, #8
 80161c4:	0092      	lsls	r2, r2, #2
 80161c6:	b570      	push	{r4, r5, r6, lr}
 80161c8:	f1c2 0620 	rsb	r6, r2, #32
 80161cc:	6843      	ldr	r3, [r0, #4]
 80161ce:	6804      	ldr	r4, [r0, #0]
 80161d0:	fa03 f506 	lsl.w	r5, r3, r6
 80161d4:	432c      	orrs	r4, r5
 80161d6:	40d3      	lsrs	r3, r2
 80161d8:	6004      	str	r4, [r0, #0]
 80161da:	f840 3f04 	str.w	r3, [r0, #4]!
 80161de:	4288      	cmp	r0, r1
 80161e0:	d3f4      	bcc.n	80161cc <L_shift+0xc>
 80161e2:	bd70      	pop	{r4, r5, r6, pc}

080161e4 <__match>:
 80161e4:	b530      	push	{r4, r5, lr}
 80161e6:	6803      	ldr	r3, [r0, #0]
 80161e8:	3301      	adds	r3, #1
 80161ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80161ee:	b914      	cbnz	r4, 80161f6 <__match+0x12>
 80161f0:	6003      	str	r3, [r0, #0]
 80161f2:	2001      	movs	r0, #1
 80161f4:	bd30      	pop	{r4, r5, pc}
 80161f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80161fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80161fe:	2d19      	cmp	r5, #25
 8016200:	bf98      	it	ls
 8016202:	3220      	addls	r2, #32
 8016204:	42a2      	cmp	r2, r4
 8016206:	d0f0      	beq.n	80161ea <__match+0x6>
 8016208:	2000      	movs	r0, #0
 801620a:	e7f3      	b.n	80161f4 <__match+0x10>

0801620c <__hexnan>:
 801620c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016210:	680b      	ldr	r3, [r1, #0]
 8016212:	6801      	ldr	r1, [r0, #0]
 8016214:	115e      	asrs	r6, r3, #5
 8016216:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801621a:	f013 031f 	ands.w	r3, r3, #31
 801621e:	b087      	sub	sp, #28
 8016220:	bf18      	it	ne
 8016222:	3604      	addne	r6, #4
 8016224:	2500      	movs	r5, #0
 8016226:	1f37      	subs	r7, r6, #4
 8016228:	4682      	mov	sl, r0
 801622a:	4690      	mov	r8, r2
 801622c:	9301      	str	r3, [sp, #4]
 801622e:	f846 5c04 	str.w	r5, [r6, #-4]
 8016232:	46b9      	mov	r9, r7
 8016234:	463c      	mov	r4, r7
 8016236:	9502      	str	r5, [sp, #8]
 8016238:	46ab      	mov	fp, r5
 801623a:	784a      	ldrb	r2, [r1, #1]
 801623c:	1c4b      	adds	r3, r1, #1
 801623e:	9303      	str	r3, [sp, #12]
 8016240:	b342      	cbz	r2, 8016294 <__hexnan+0x88>
 8016242:	4610      	mov	r0, r2
 8016244:	9105      	str	r1, [sp, #20]
 8016246:	9204      	str	r2, [sp, #16]
 8016248:	f7ff fd5e 	bl	8015d08 <__hexdig_fun>
 801624c:	2800      	cmp	r0, #0
 801624e:	d14f      	bne.n	80162f0 <__hexnan+0xe4>
 8016250:	9a04      	ldr	r2, [sp, #16]
 8016252:	9905      	ldr	r1, [sp, #20]
 8016254:	2a20      	cmp	r2, #32
 8016256:	d818      	bhi.n	801628a <__hexnan+0x7e>
 8016258:	9b02      	ldr	r3, [sp, #8]
 801625a:	459b      	cmp	fp, r3
 801625c:	dd13      	ble.n	8016286 <__hexnan+0x7a>
 801625e:	454c      	cmp	r4, r9
 8016260:	d206      	bcs.n	8016270 <__hexnan+0x64>
 8016262:	2d07      	cmp	r5, #7
 8016264:	dc04      	bgt.n	8016270 <__hexnan+0x64>
 8016266:	462a      	mov	r2, r5
 8016268:	4649      	mov	r1, r9
 801626a:	4620      	mov	r0, r4
 801626c:	f7ff ffa8 	bl	80161c0 <L_shift>
 8016270:	4544      	cmp	r4, r8
 8016272:	d950      	bls.n	8016316 <__hexnan+0x10a>
 8016274:	2300      	movs	r3, #0
 8016276:	f1a4 0904 	sub.w	r9, r4, #4
 801627a:	f844 3c04 	str.w	r3, [r4, #-4]
 801627e:	f8cd b008 	str.w	fp, [sp, #8]
 8016282:	464c      	mov	r4, r9
 8016284:	461d      	mov	r5, r3
 8016286:	9903      	ldr	r1, [sp, #12]
 8016288:	e7d7      	b.n	801623a <__hexnan+0x2e>
 801628a:	2a29      	cmp	r2, #41	; 0x29
 801628c:	d156      	bne.n	801633c <__hexnan+0x130>
 801628e:	3102      	adds	r1, #2
 8016290:	f8ca 1000 	str.w	r1, [sl]
 8016294:	f1bb 0f00 	cmp.w	fp, #0
 8016298:	d050      	beq.n	801633c <__hexnan+0x130>
 801629a:	454c      	cmp	r4, r9
 801629c:	d206      	bcs.n	80162ac <__hexnan+0xa0>
 801629e:	2d07      	cmp	r5, #7
 80162a0:	dc04      	bgt.n	80162ac <__hexnan+0xa0>
 80162a2:	462a      	mov	r2, r5
 80162a4:	4649      	mov	r1, r9
 80162a6:	4620      	mov	r0, r4
 80162a8:	f7ff ff8a 	bl	80161c0 <L_shift>
 80162ac:	4544      	cmp	r4, r8
 80162ae:	d934      	bls.n	801631a <__hexnan+0x10e>
 80162b0:	f1a8 0204 	sub.w	r2, r8, #4
 80162b4:	4623      	mov	r3, r4
 80162b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80162ba:	f842 1f04 	str.w	r1, [r2, #4]!
 80162be:	429f      	cmp	r7, r3
 80162c0:	d2f9      	bcs.n	80162b6 <__hexnan+0xaa>
 80162c2:	1b3b      	subs	r3, r7, r4
 80162c4:	f023 0303 	bic.w	r3, r3, #3
 80162c8:	3304      	adds	r3, #4
 80162ca:	3401      	adds	r4, #1
 80162cc:	3e03      	subs	r6, #3
 80162ce:	42b4      	cmp	r4, r6
 80162d0:	bf88      	it	hi
 80162d2:	2304      	movhi	r3, #4
 80162d4:	4443      	add	r3, r8
 80162d6:	2200      	movs	r2, #0
 80162d8:	f843 2b04 	str.w	r2, [r3], #4
 80162dc:	429f      	cmp	r7, r3
 80162de:	d2fb      	bcs.n	80162d8 <__hexnan+0xcc>
 80162e0:	683b      	ldr	r3, [r7, #0]
 80162e2:	b91b      	cbnz	r3, 80162ec <__hexnan+0xe0>
 80162e4:	4547      	cmp	r7, r8
 80162e6:	d127      	bne.n	8016338 <__hexnan+0x12c>
 80162e8:	2301      	movs	r3, #1
 80162ea:	603b      	str	r3, [r7, #0]
 80162ec:	2005      	movs	r0, #5
 80162ee:	e026      	b.n	801633e <__hexnan+0x132>
 80162f0:	3501      	adds	r5, #1
 80162f2:	2d08      	cmp	r5, #8
 80162f4:	f10b 0b01 	add.w	fp, fp, #1
 80162f8:	dd06      	ble.n	8016308 <__hexnan+0xfc>
 80162fa:	4544      	cmp	r4, r8
 80162fc:	d9c3      	bls.n	8016286 <__hexnan+0x7a>
 80162fe:	2300      	movs	r3, #0
 8016300:	f844 3c04 	str.w	r3, [r4, #-4]
 8016304:	2501      	movs	r5, #1
 8016306:	3c04      	subs	r4, #4
 8016308:	6822      	ldr	r2, [r4, #0]
 801630a:	f000 000f 	and.w	r0, r0, #15
 801630e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8016312:	6022      	str	r2, [r4, #0]
 8016314:	e7b7      	b.n	8016286 <__hexnan+0x7a>
 8016316:	2508      	movs	r5, #8
 8016318:	e7b5      	b.n	8016286 <__hexnan+0x7a>
 801631a:	9b01      	ldr	r3, [sp, #4]
 801631c:	2b00      	cmp	r3, #0
 801631e:	d0df      	beq.n	80162e0 <__hexnan+0xd4>
 8016320:	f04f 32ff 	mov.w	r2, #4294967295
 8016324:	f1c3 0320 	rsb	r3, r3, #32
 8016328:	fa22 f303 	lsr.w	r3, r2, r3
 801632c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016330:	401a      	ands	r2, r3
 8016332:	f846 2c04 	str.w	r2, [r6, #-4]
 8016336:	e7d3      	b.n	80162e0 <__hexnan+0xd4>
 8016338:	3f04      	subs	r7, #4
 801633a:	e7d1      	b.n	80162e0 <__hexnan+0xd4>
 801633c:	2004      	movs	r0, #4
 801633e:	b007      	add	sp, #28
 8016340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016344 <_localeconv_r>:
 8016344:	4800      	ldr	r0, [pc, #0]	; (8016348 <_localeconv_r+0x4>)
 8016346:	4770      	bx	lr
 8016348:	200001d8 	.word	0x200001d8

0801634c <_lseek_r>:
 801634c:	b538      	push	{r3, r4, r5, lr}
 801634e:	4d07      	ldr	r5, [pc, #28]	; (801636c <_lseek_r+0x20>)
 8016350:	4604      	mov	r4, r0
 8016352:	4608      	mov	r0, r1
 8016354:	4611      	mov	r1, r2
 8016356:	2200      	movs	r2, #0
 8016358:	602a      	str	r2, [r5, #0]
 801635a:	461a      	mov	r2, r3
 801635c:	f001 fda0 	bl	8017ea0 <_lseek>
 8016360:	1c43      	adds	r3, r0, #1
 8016362:	d102      	bne.n	801636a <_lseek_r+0x1e>
 8016364:	682b      	ldr	r3, [r5, #0]
 8016366:	b103      	cbz	r3, 801636a <_lseek_r+0x1e>
 8016368:	6023      	str	r3, [r4, #0]
 801636a:	bd38      	pop	{r3, r4, r5, pc}
 801636c:	20006920 	.word	0x20006920

08016370 <__swhatbuf_r>:
 8016370:	b570      	push	{r4, r5, r6, lr}
 8016372:	460e      	mov	r6, r1
 8016374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016378:	2900      	cmp	r1, #0
 801637a:	b096      	sub	sp, #88	; 0x58
 801637c:	4614      	mov	r4, r2
 801637e:	461d      	mov	r5, r3
 8016380:	da07      	bge.n	8016392 <__swhatbuf_r+0x22>
 8016382:	2300      	movs	r3, #0
 8016384:	602b      	str	r3, [r5, #0]
 8016386:	89b3      	ldrh	r3, [r6, #12]
 8016388:	061a      	lsls	r2, r3, #24
 801638a:	d410      	bmi.n	80163ae <__swhatbuf_r+0x3e>
 801638c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016390:	e00e      	b.n	80163b0 <__swhatbuf_r+0x40>
 8016392:	466a      	mov	r2, sp
 8016394:	f001 fca6 	bl	8017ce4 <_fstat_r>
 8016398:	2800      	cmp	r0, #0
 801639a:	dbf2      	blt.n	8016382 <__swhatbuf_r+0x12>
 801639c:	9a01      	ldr	r2, [sp, #4]
 801639e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80163a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80163a6:	425a      	negs	r2, r3
 80163a8:	415a      	adcs	r2, r3
 80163aa:	602a      	str	r2, [r5, #0]
 80163ac:	e7ee      	b.n	801638c <__swhatbuf_r+0x1c>
 80163ae:	2340      	movs	r3, #64	; 0x40
 80163b0:	2000      	movs	r0, #0
 80163b2:	6023      	str	r3, [r4, #0]
 80163b4:	b016      	add	sp, #88	; 0x58
 80163b6:	bd70      	pop	{r4, r5, r6, pc}

080163b8 <__smakebuf_r>:
 80163b8:	898b      	ldrh	r3, [r1, #12]
 80163ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80163bc:	079d      	lsls	r5, r3, #30
 80163be:	4606      	mov	r6, r0
 80163c0:	460c      	mov	r4, r1
 80163c2:	d507      	bpl.n	80163d4 <__smakebuf_r+0x1c>
 80163c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80163c8:	6023      	str	r3, [r4, #0]
 80163ca:	6123      	str	r3, [r4, #16]
 80163cc:	2301      	movs	r3, #1
 80163ce:	6163      	str	r3, [r4, #20]
 80163d0:	b002      	add	sp, #8
 80163d2:	bd70      	pop	{r4, r5, r6, pc}
 80163d4:	ab01      	add	r3, sp, #4
 80163d6:	466a      	mov	r2, sp
 80163d8:	f7ff ffca 	bl	8016370 <__swhatbuf_r>
 80163dc:	9900      	ldr	r1, [sp, #0]
 80163de:	4605      	mov	r5, r0
 80163e0:	4630      	mov	r0, r6
 80163e2:	f7fc fd07 	bl	8012df4 <_malloc_r>
 80163e6:	b948      	cbnz	r0, 80163fc <__smakebuf_r+0x44>
 80163e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80163ec:	059a      	lsls	r2, r3, #22
 80163ee:	d4ef      	bmi.n	80163d0 <__smakebuf_r+0x18>
 80163f0:	f023 0303 	bic.w	r3, r3, #3
 80163f4:	f043 0302 	orr.w	r3, r3, #2
 80163f8:	81a3      	strh	r3, [r4, #12]
 80163fa:	e7e3      	b.n	80163c4 <__smakebuf_r+0xc>
 80163fc:	4b0d      	ldr	r3, [pc, #52]	; (8016434 <__smakebuf_r+0x7c>)
 80163fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8016400:	89a3      	ldrh	r3, [r4, #12]
 8016402:	6020      	str	r0, [r4, #0]
 8016404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016408:	81a3      	strh	r3, [r4, #12]
 801640a:	9b00      	ldr	r3, [sp, #0]
 801640c:	6163      	str	r3, [r4, #20]
 801640e:	9b01      	ldr	r3, [sp, #4]
 8016410:	6120      	str	r0, [r4, #16]
 8016412:	b15b      	cbz	r3, 801642c <__smakebuf_r+0x74>
 8016414:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016418:	4630      	mov	r0, r6
 801641a:	f001 fc75 	bl	8017d08 <_isatty_r>
 801641e:	b128      	cbz	r0, 801642c <__smakebuf_r+0x74>
 8016420:	89a3      	ldrh	r3, [r4, #12]
 8016422:	f023 0303 	bic.w	r3, r3, #3
 8016426:	f043 0301 	orr.w	r3, r3, #1
 801642a:	81a3      	strh	r3, [r4, #12]
 801642c:	89a0      	ldrh	r0, [r4, #12]
 801642e:	4305      	orrs	r5, r0
 8016430:	81a5      	strh	r5, [r4, #12]
 8016432:	e7cd      	b.n	80163d0 <__smakebuf_r+0x18>
 8016434:	08012bd5 	.word	0x08012bd5

08016438 <malloc>:
 8016438:	4b02      	ldr	r3, [pc, #8]	; (8016444 <malloc+0xc>)
 801643a:	4601      	mov	r1, r0
 801643c:	6818      	ldr	r0, [r3, #0]
 801643e:	f7fc bcd9 	b.w	8012df4 <_malloc_r>
 8016442:	bf00      	nop
 8016444:	20000080 	.word	0x20000080

08016448 <__ascii_mbtowc>:
 8016448:	b082      	sub	sp, #8
 801644a:	b901      	cbnz	r1, 801644e <__ascii_mbtowc+0x6>
 801644c:	a901      	add	r1, sp, #4
 801644e:	b142      	cbz	r2, 8016462 <__ascii_mbtowc+0x1a>
 8016450:	b14b      	cbz	r3, 8016466 <__ascii_mbtowc+0x1e>
 8016452:	7813      	ldrb	r3, [r2, #0]
 8016454:	600b      	str	r3, [r1, #0]
 8016456:	7812      	ldrb	r2, [r2, #0]
 8016458:	1e10      	subs	r0, r2, #0
 801645a:	bf18      	it	ne
 801645c:	2001      	movne	r0, #1
 801645e:	b002      	add	sp, #8
 8016460:	4770      	bx	lr
 8016462:	4610      	mov	r0, r2
 8016464:	e7fb      	b.n	801645e <__ascii_mbtowc+0x16>
 8016466:	f06f 0001 	mvn.w	r0, #1
 801646a:	e7f8      	b.n	801645e <__ascii_mbtowc+0x16>

0801646c <__malloc_lock>:
 801646c:	4801      	ldr	r0, [pc, #4]	; (8016474 <__malloc_lock+0x8>)
 801646e:	f7fc bca8 	b.w	8012dc2 <__retarget_lock_acquire_recursive>
 8016472:	bf00      	nop
 8016474:	20006918 	.word	0x20006918

08016478 <__malloc_unlock>:
 8016478:	4801      	ldr	r0, [pc, #4]	; (8016480 <__malloc_unlock+0x8>)
 801647a:	f7fc bca3 	b.w	8012dc4 <__retarget_lock_release_recursive>
 801647e:	bf00      	nop
 8016480:	20006918 	.word	0x20006918

08016484 <_Balloc>:
 8016484:	b570      	push	{r4, r5, r6, lr}
 8016486:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016488:	4604      	mov	r4, r0
 801648a:	460d      	mov	r5, r1
 801648c:	b976      	cbnz	r6, 80164ac <_Balloc+0x28>
 801648e:	2010      	movs	r0, #16
 8016490:	f7ff ffd2 	bl	8016438 <malloc>
 8016494:	4602      	mov	r2, r0
 8016496:	6260      	str	r0, [r4, #36]	; 0x24
 8016498:	b920      	cbnz	r0, 80164a4 <_Balloc+0x20>
 801649a:	4b18      	ldr	r3, [pc, #96]	; (80164fc <_Balloc+0x78>)
 801649c:	4818      	ldr	r0, [pc, #96]	; (8016500 <_Balloc+0x7c>)
 801649e:	2166      	movs	r1, #102	; 0x66
 80164a0:	f001 fbf0 	bl	8017c84 <__assert_func>
 80164a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80164a8:	6006      	str	r6, [r0, #0]
 80164aa:	60c6      	str	r6, [r0, #12]
 80164ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80164ae:	68f3      	ldr	r3, [r6, #12]
 80164b0:	b183      	cbz	r3, 80164d4 <_Balloc+0x50>
 80164b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80164b4:	68db      	ldr	r3, [r3, #12]
 80164b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80164ba:	b9b8      	cbnz	r0, 80164ec <_Balloc+0x68>
 80164bc:	2101      	movs	r1, #1
 80164be:	fa01 f605 	lsl.w	r6, r1, r5
 80164c2:	1d72      	adds	r2, r6, #5
 80164c4:	0092      	lsls	r2, r2, #2
 80164c6:	4620      	mov	r0, r4
 80164c8:	f000 fc97 	bl	8016dfa <_calloc_r>
 80164cc:	b160      	cbz	r0, 80164e8 <_Balloc+0x64>
 80164ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80164d2:	e00e      	b.n	80164f2 <_Balloc+0x6e>
 80164d4:	2221      	movs	r2, #33	; 0x21
 80164d6:	2104      	movs	r1, #4
 80164d8:	4620      	mov	r0, r4
 80164da:	f000 fc8e 	bl	8016dfa <_calloc_r>
 80164de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80164e0:	60f0      	str	r0, [r6, #12]
 80164e2:	68db      	ldr	r3, [r3, #12]
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d1e4      	bne.n	80164b2 <_Balloc+0x2e>
 80164e8:	2000      	movs	r0, #0
 80164ea:	bd70      	pop	{r4, r5, r6, pc}
 80164ec:	6802      	ldr	r2, [r0, #0]
 80164ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80164f2:	2300      	movs	r3, #0
 80164f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80164f8:	e7f7      	b.n	80164ea <_Balloc+0x66>
 80164fa:	bf00      	nop
 80164fc:	08018f5d 	.word	0x08018f5d
 8016500:	08019064 	.word	0x08019064

08016504 <_Bfree>:
 8016504:	b570      	push	{r4, r5, r6, lr}
 8016506:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016508:	4605      	mov	r5, r0
 801650a:	460c      	mov	r4, r1
 801650c:	b976      	cbnz	r6, 801652c <_Bfree+0x28>
 801650e:	2010      	movs	r0, #16
 8016510:	f7ff ff92 	bl	8016438 <malloc>
 8016514:	4602      	mov	r2, r0
 8016516:	6268      	str	r0, [r5, #36]	; 0x24
 8016518:	b920      	cbnz	r0, 8016524 <_Bfree+0x20>
 801651a:	4b09      	ldr	r3, [pc, #36]	; (8016540 <_Bfree+0x3c>)
 801651c:	4809      	ldr	r0, [pc, #36]	; (8016544 <_Bfree+0x40>)
 801651e:	218a      	movs	r1, #138	; 0x8a
 8016520:	f001 fbb0 	bl	8017c84 <__assert_func>
 8016524:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016528:	6006      	str	r6, [r0, #0]
 801652a:	60c6      	str	r6, [r0, #12]
 801652c:	b13c      	cbz	r4, 801653e <_Bfree+0x3a>
 801652e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016530:	6862      	ldr	r2, [r4, #4]
 8016532:	68db      	ldr	r3, [r3, #12]
 8016534:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016538:	6021      	str	r1, [r4, #0]
 801653a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801653e:	bd70      	pop	{r4, r5, r6, pc}
 8016540:	08018f5d 	.word	0x08018f5d
 8016544:	08019064 	.word	0x08019064

08016548 <__multadd>:
 8016548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801654c:	690e      	ldr	r6, [r1, #16]
 801654e:	4607      	mov	r7, r0
 8016550:	4698      	mov	r8, r3
 8016552:	460c      	mov	r4, r1
 8016554:	f101 0014 	add.w	r0, r1, #20
 8016558:	2300      	movs	r3, #0
 801655a:	6805      	ldr	r5, [r0, #0]
 801655c:	b2a9      	uxth	r1, r5
 801655e:	fb02 8101 	mla	r1, r2, r1, r8
 8016562:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8016566:	0c2d      	lsrs	r5, r5, #16
 8016568:	fb02 c505 	mla	r5, r2, r5, ip
 801656c:	b289      	uxth	r1, r1
 801656e:	3301      	adds	r3, #1
 8016570:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8016574:	429e      	cmp	r6, r3
 8016576:	f840 1b04 	str.w	r1, [r0], #4
 801657a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801657e:	dcec      	bgt.n	801655a <__multadd+0x12>
 8016580:	f1b8 0f00 	cmp.w	r8, #0
 8016584:	d022      	beq.n	80165cc <__multadd+0x84>
 8016586:	68a3      	ldr	r3, [r4, #8]
 8016588:	42b3      	cmp	r3, r6
 801658a:	dc19      	bgt.n	80165c0 <__multadd+0x78>
 801658c:	6861      	ldr	r1, [r4, #4]
 801658e:	4638      	mov	r0, r7
 8016590:	3101      	adds	r1, #1
 8016592:	f7ff ff77 	bl	8016484 <_Balloc>
 8016596:	4605      	mov	r5, r0
 8016598:	b928      	cbnz	r0, 80165a6 <__multadd+0x5e>
 801659a:	4602      	mov	r2, r0
 801659c:	4b0d      	ldr	r3, [pc, #52]	; (80165d4 <__multadd+0x8c>)
 801659e:	480e      	ldr	r0, [pc, #56]	; (80165d8 <__multadd+0x90>)
 80165a0:	21b5      	movs	r1, #181	; 0xb5
 80165a2:	f001 fb6f 	bl	8017c84 <__assert_func>
 80165a6:	6922      	ldr	r2, [r4, #16]
 80165a8:	3202      	adds	r2, #2
 80165aa:	f104 010c 	add.w	r1, r4, #12
 80165ae:	0092      	lsls	r2, r2, #2
 80165b0:	300c      	adds	r0, #12
 80165b2:	f7fc fc08 	bl	8012dc6 <memcpy>
 80165b6:	4621      	mov	r1, r4
 80165b8:	4638      	mov	r0, r7
 80165ba:	f7ff ffa3 	bl	8016504 <_Bfree>
 80165be:	462c      	mov	r4, r5
 80165c0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80165c4:	3601      	adds	r6, #1
 80165c6:	f8c3 8014 	str.w	r8, [r3, #20]
 80165ca:	6126      	str	r6, [r4, #16]
 80165cc:	4620      	mov	r0, r4
 80165ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165d2:	bf00      	nop
 80165d4:	08018fd3 	.word	0x08018fd3
 80165d8:	08019064 	.word	0x08019064

080165dc <__s2b>:
 80165dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80165e0:	460c      	mov	r4, r1
 80165e2:	4615      	mov	r5, r2
 80165e4:	461f      	mov	r7, r3
 80165e6:	2209      	movs	r2, #9
 80165e8:	3308      	adds	r3, #8
 80165ea:	4606      	mov	r6, r0
 80165ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80165f0:	2100      	movs	r1, #0
 80165f2:	2201      	movs	r2, #1
 80165f4:	429a      	cmp	r2, r3
 80165f6:	db09      	blt.n	801660c <__s2b+0x30>
 80165f8:	4630      	mov	r0, r6
 80165fa:	f7ff ff43 	bl	8016484 <_Balloc>
 80165fe:	b940      	cbnz	r0, 8016612 <__s2b+0x36>
 8016600:	4602      	mov	r2, r0
 8016602:	4b19      	ldr	r3, [pc, #100]	; (8016668 <__s2b+0x8c>)
 8016604:	4819      	ldr	r0, [pc, #100]	; (801666c <__s2b+0x90>)
 8016606:	21ce      	movs	r1, #206	; 0xce
 8016608:	f001 fb3c 	bl	8017c84 <__assert_func>
 801660c:	0052      	lsls	r2, r2, #1
 801660e:	3101      	adds	r1, #1
 8016610:	e7f0      	b.n	80165f4 <__s2b+0x18>
 8016612:	9b08      	ldr	r3, [sp, #32]
 8016614:	6143      	str	r3, [r0, #20]
 8016616:	2d09      	cmp	r5, #9
 8016618:	f04f 0301 	mov.w	r3, #1
 801661c:	6103      	str	r3, [r0, #16]
 801661e:	dd16      	ble.n	801664e <__s2b+0x72>
 8016620:	f104 0909 	add.w	r9, r4, #9
 8016624:	46c8      	mov	r8, r9
 8016626:	442c      	add	r4, r5
 8016628:	f818 3b01 	ldrb.w	r3, [r8], #1
 801662c:	4601      	mov	r1, r0
 801662e:	3b30      	subs	r3, #48	; 0x30
 8016630:	220a      	movs	r2, #10
 8016632:	4630      	mov	r0, r6
 8016634:	f7ff ff88 	bl	8016548 <__multadd>
 8016638:	45a0      	cmp	r8, r4
 801663a:	d1f5      	bne.n	8016628 <__s2b+0x4c>
 801663c:	f1a5 0408 	sub.w	r4, r5, #8
 8016640:	444c      	add	r4, r9
 8016642:	1b2d      	subs	r5, r5, r4
 8016644:	1963      	adds	r3, r4, r5
 8016646:	42bb      	cmp	r3, r7
 8016648:	db04      	blt.n	8016654 <__s2b+0x78>
 801664a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801664e:	340a      	adds	r4, #10
 8016650:	2509      	movs	r5, #9
 8016652:	e7f6      	b.n	8016642 <__s2b+0x66>
 8016654:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016658:	4601      	mov	r1, r0
 801665a:	3b30      	subs	r3, #48	; 0x30
 801665c:	220a      	movs	r2, #10
 801665e:	4630      	mov	r0, r6
 8016660:	f7ff ff72 	bl	8016548 <__multadd>
 8016664:	e7ee      	b.n	8016644 <__s2b+0x68>
 8016666:	bf00      	nop
 8016668:	08018fd3 	.word	0x08018fd3
 801666c:	08019064 	.word	0x08019064

08016670 <__hi0bits>:
 8016670:	0c03      	lsrs	r3, r0, #16
 8016672:	041b      	lsls	r3, r3, #16
 8016674:	b9d3      	cbnz	r3, 80166ac <__hi0bits+0x3c>
 8016676:	0400      	lsls	r0, r0, #16
 8016678:	2310      	movs	r3, #16
 801667a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801667e:	bf04      	itt	eq
 8016680:	0200      	lsleq	r0, r0, #8
 8016682:	3308      	addeq	r3, #8
 8016684:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016688:	bf04      	itt	eq
 801668a:	0100      	lsleq	r0, r0, #4
 801668c:	3304      	addeq	r3, #4
 801668e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016692:	bf04      	itt	eq
 8016694:	0080      	lsleq	r0, r0, #2
 8016696:	3302      	addeq	r3, #2
 8016698:	2800      	cmp	r0, #0
 801669a:	db05      	blt.n	80166a8 <__hi0bits+0x38>
 801669c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80166a0:	f103 0301 	add.w	r3, r3, #1
 80166a4:	bf08      	it	eq
 80166a6:	2320      	moveq	r3, #32
 80166a8:	4618      	mov	r0, r3
 80166aa:	4770      	bx	lr
 80166ac:	2300      	movs	r3, #0
 80166ae:	e7e4      	b.n	801667a <__hi0bits+0xa>

080166b0 <__lo0bits>:
 80166b0:	6803      	ldr	r3, [r0, #0]
 80166b2:	f013 0207 	ands.w	r2, r3, #7
 80166b6:	4601      	mov	r1, r0
 80166b8:	d00b      	beq.n	80166d2 <__lo0bits+0x22>
 80166ba:	07da      	lsls	r2, r3, #31
 80166bc:	d424      	bmi.n	8016708 <__lo0bits+0x58>
 80166be:	0798      	lsls	r0, r3, #30
 80166c0:	bf49      	itett	mi
 80166c2:	085b      	lsrmi	r3, r3, #1
 80166c4:	089b      	lsrpl	r3, r3, #2
 80166c6:	2001      	movmi	r0, #1
 80166c8:	600b      	strmi	r3, [r1, #0]
 80166ca:	bf5c      	itt	pl
 80166cc:	600b      	strpl	r3, [r1, #0]
 80166ce:	2002      	movpl	r0, #2
 80166d0:	4770      	bx	lr
 80166d2:	b298      	uxth	r0, r3
 80166d4:	b9b0      	cbnz	r0, 8016704 <__lo0bits+0x54>
 80166d6:	0c1b      	lsrs	r3, r3, #16
 80166d8:	2010      	movs	r0, #16
 80166da:	f013 0fff 	tst.w	r3, #255	; 0xff
 80166de:	bf04      	itt	eq
 80166e0:	0a1b      	lsreq	r3, r3, #8
 80166e2:	3008      	addeq	r0, #8
 80166e4:	071a      	lsls	r2, r3, #28
 80166e6:	bf04      	itt	eq
 80166e8:	091b      	lsreq	r3, r3, #4
 80166ea:	3004      	addeq	r0, #4
 80166ec:	079a      	lsls	r2, r3, #30
 80166ee:	bf04      	itt	eq
 80166f0:	089b      	lsreq	r3, r3, #2
 80166f2:	3002      	addeq	r0, #2
 80166f4:	07da      	lsls	r2, r3, #31
 80166f6:	d403      	bmi.n	8016700 <__lo0bits+0x50>
 80166f8:	085b      	lsrs	r3, r3, #1
 80166fa:	f100 0001 	add.w	r0, r0, #1
 80166fe:	d005      	beq.n	801670c <__lo0bits+0x5c>
 8016700:	600b      	str	r3, [r1, #0]
 8016702:	4770      	bx	lr
 8016704:	4610      	mov	r0, r2
 8016706:	e7e8      	b.n	80166da <__lo0bits+0x2a>
 8016708:	2000      	movs	r0, #0
 801670a:	4770      	bx	lr
 801670c:	2020      	movs	r0, #32
 801670e:	4770      	bx	lr

08016710 <__i2b>:
 8016710:	b510      	push	{r4, lr}
 8016712:	460c      	mov	r4, r1
 8016714:	2101      	movs	r1, #1
 8016716:	f7ff feb5 	bl	8016484 <_Balloc>
 801671a:	4602      	mov	r2, r0
 801671c:	b928      	cbnz	r0, 801672a <__i2b+0x1a>
 801671e:	4b05      	ldr	r3, [pc, #20]	; (8016734 <__i2b+0x24>)
 8016720:	4805      	ldr	r0, [pc, #20]	; (8016738 <__i2b+0x28>)
 8016722:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8016726:	f001 faad 	bl	8017c84 <__assert_func>
 801672a:	2301      	movs	r3, #1
 801672c:	6144      	str	r4, [r0, #20]
 801672e:	6103      	str	r3, [r0, #16]
 8016730:	bd10      	pop	{r4, pc}
 8016732:	bf00      	nop
 8016734:	08018fd3 	.word	0x08018fd3
 8016738:	08019064 	.word	0x08019064

0801673c <__multiply>:
 801673c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016740:	4614      	mov	r4, r2
 8016742:	690a      	ldr	r2, [r1, #16]
 8016744:	6923      	ldr	r3, [r4, #16]
 8016746:	429a      	cmp	r2, r3
 8016748:	bfb8      	it	lt
 801674a:	460b      	movlt	r3, r1
 801674c:	460d      	mov	r5, r1
 801674e:	bfbc      	itt	lt
 8016750:	4625      	movlt	r5, r4
 8016752:	461c      	movlt	r4, r3
 8016754:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8016758:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801675c:	68ab      	ldr	r3, [r5, #8]
 801675e:	6869      	ldr	r1, [r5, #4]
 8016760:	eb0a 0709 	add.w	r7, sl, r9
 8016764:	42bb      	cmp	r3, r7
 8016766:	b085      	sub	sp, #20
 8016768:	bfb8      	it	lt
 801676a:	3101      	addlt	r1, #1
 801676c:	f7ff fe8a 	bl	8016484 <_Balloc>
 8016770:	b930      	cbnz	r0, 8016780 <__multiply+0x44>
 8016772:	4602      	mov	r2, r0
 8016774:	4b42      	ldr	r3, [pc, #264]	; (8016880 <__multiply+0x144>)
 8016776:	4843      	ldr	r0, [pc, #268]	; (8016884 <__multiply+0x148>)
 8016778:	f240 115d 	movw	r1, #349	; 0x15d
 801677c:	f001 fa82 	bl	8017c84 <__assert_func>
 8016780:	f100 0614 	add.w	r6, r0, #20
 8016784:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8016788:	4633      	mov	r3, r6
 801678a:	2200      	movs	r2, #0
 801678c:	4543      	cmp	r3, r8
 801678e:	d31e      	bcc.n	80167ce <__multiply+0x92>
 8016790:	f105 0c14 	add.w	ip, r5, #20
 8016794:	f104 0314 	add.w	r3, r4, #20
 8016798:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801679c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80167a0:	9202      	str	r2, [sp, #8]
 80167a2:	ebac 0205 	sub.w	r2, ip, r5
 80167a6:	3a15      	subs	r2, #21
 80167a8:	f022 0203 	bic.w	r2, r2, #3
 80167ac:	3204      	adds	r2, #4
 80167ae:	f105 0115 	add.w	r1, r5, #21
 80167b2:	458c      	cmp	ip, r1
 80167b4:	bf38      	it	cc
 80167b6:	2204      	movcc	r2, #4
 80167b8:	9201      	str	r2, [sp, #4]
 80167ba:	9a02      	ldr	r2, [sp, #8]
 80167bc:	9303      	str	r3, [sp, #12]
 80167be:	429a      	cmp	r2, r3
 80167c0:	d808      	bhi.n	80167d4 <__multiply+0x98>
 80167c2:	2f00      	cmp	r7, #0
 80167c4:	dc55      	bgt.n	8016872 <__multiply+0x136>
 80167c6:	6107      	str	r7, [r0, #16]
 80167c8:	b005      	add	sp, #20
 80167ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167ce:	f843 2b04 	str.w	r2, [r3], #4
 80167d2:	e7db      	b.n	801678c <__multiply+0x50>
 80167d4:	f8b3 a000 	ldrh.w	sl, [r3]
 80167d8:	f1ba 0f00 	cmp.w	sl, #0
 80167dc:	d020      	beq.n	8016820 <__multiply+0xe4>
 80167de:	f105 0e14 	add.w	lr, r5, #20
 80167e2:	46b1      	mov	r9, r6
 80167e4:	2200      	movs	r2, #0
 80167e6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80167ea:	f8d9 b000 	ldr.w	fp, [r9]
 80167ee:	b2a1      	uxth	r1, r4
 80167f0:	fa1f fb8b 	uxth.w	fp, fp
 80167f4:	fb0a b101 	mla	r1, sl, r1, fp
 80167f8:	4411      	add	r1, r2
 80167fa:	f8d9 2000 	ldr.w	r2, [r9]
 80167fe:	0c24      	lsrs	r4, r4, #16
 8016800:	0c12      	lsrs	r2, r2, #16
 8016802:	fb0a 2404 	mla	r4, sl, r4, r2
 8016806:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801680a:	b289      	uxth	r1, r1
 801680c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8016810:	45f4      	cmp	ip, lr
 8016812:	f849 1b04 	str.w	r1, [r9], #4
 8016816:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801681a:	d8e4      	bhi.n	80167e6 <__multiply+0xaa>
 801681c:	9901      	ldr	r1, [sp, #4]
 801681e:	5072      	str	r2, [r6, r1]
 8016820:	9a03      	ldr	r2, [sp, #12]
 8016822:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016826:	3304      	adds	r3, #4
 8016828:	f1b9 0f00 	cmp.w	r9, #0
 801682c:	d01f      	beq.n	801686e <__multiply+0x132>
 801682e:	6834      	ldr	r4, [r6, #0]
 8016830:	f105 0114 	add.w	r1, r5, #20
 8016834:	46b6      	mov	lr, r6
 8016836:	f04f 0a00 	mov.w	sl, #0
 801683a:	880a      	ldrh	r2, [r1, #0]
 801683c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8016840:	fb09 b202 	mla	r2, r9, r2, fp
 8016844:	4492      	add	sl, r2
 8016846:	b2a4      	uxth	r4, r4
 8016848:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801684c:	f84e 4b04 	str.w	r4, [lr], #4
 8016850:	f851 4b04 	ldr.w	r4, [r1], #4
 8016854:	f8be 2000 	ldrh.w	r2, [lr]
 8016858:	0c24      	lsrs	r4, r4, #16
 801685a:	fb09 2404 	mla	r4, r9, r4, r2
 801685e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8016862:	458c      	cmp	ip, r1
 8016864:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8016868:	d8e7      	bhi.n	801683a <__multiply+0xfe>
 801686a:	9a01      	ldr	r2, [sp, #4]
 801686c:	50b4      	str	r4, [r6, r2]
 801686e:	3604      	adds	r6, #4
 8016870:	e7a3      	b.n	80167ba <__multiply+0x7e>
 8016872:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016876:	2b00      	cmp	r3, #0
 8016878:	d1a5      	bne.n	80167c6 <__multiply+0x8a>
 801687a:	3f01      	subs	r7, #1
 801687c:	e7a1      	b.n	80167c2 <__multiply+0x86>
 801687e:	bf00      	nop
 8016880:	08018fd3 	.word	0x08018fd3
 8016884:	08019064 	.word	0x08019064

08016888 <__pow5mult>:
 8016888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801688c:	4615      	mov	r5, r2
 801688e:	f012 0203 	ands.w	r2, r2, #3
 8016892:	4606      	mov	r6, r0
 8016894:	460f      	mov	r7, r1
 8016896:	d007      	beq.n	80168a8 <__pow5mult+0x20>
 8016898:	4c25      	ldr	r4, [pc, #148]	; (8016930 <__pow5mult+0xa8>)
 801689a:	3a01      	subs	r2, #1
 801689c:	2300      	movs	r3, #0
 801689e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80168a2:	f7ff fe51 	bl	8016548 <__multadd>
 80168a6:	4607      	mov	r7, r0
 80168a8:	10ad      	asrs	r5, r5, #2
 80168aa:	d03d      	beq.n	8016928 <__pow5mult+0xa0>
 80168ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80168ae:	b97c      	cbnz	r4, 80168d0 <__pow5mult+0x48>
 80168b0:	2010      	movs	r0, #16
 80168b2:	f7ff fdc1 	bl	8016438 <malloc>
 80168b6:	4602      	mov	r2, r0
 80168b8:	6270      	str	r0, [r6, #36]	; 0x24
 80168ba:	b928      	cbnz	r0, 80168c8 <__pow5mult+0x40>
 80168bc:	4b1d      	ldr	r3, [pc, #116]	; (8016934 <__pow5mult+0xac>)
 80168be:	481e      	ldr	r0, [pc, #120]	; (8016938 <__pow5mult+0xb0>)
 80168c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80168c4:	f001 f9de 	bl	8017c84 <__assert_func>
 80168c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80168cc:	6004      	str	r4, [r0, #0]
 80168ce:	60c4      	str	r4, [r0, #12]
 80168d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80168d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80168d8:	b94c      	cbnz	r4, 80168ee <__pow5mult+0x66>
 80168da:	f240 2171 	movw	r1, #625	; 0x271
 80168de:	4630      	mov	r0, r6
 80168e0:	f7ff ff16 	bl	8016710 <__i2b>
 80168e4:	2300      	movs	r3, #0
 80168e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80168ea:	4604      	mov	r4, r0
 80168ec:	6003      	str	r3, [r0, #0]
 80168ee:	f04f 0900 	mov.w	r9, #0
 80168f2:	07eb      	lsls	r3, r5, #31
 80168f4:	d50a      	bpl.n	801690c <__pow5mult+0x84>
 80168f6:	4639      	mov	r1, r7
 80168f8:	4622      	mov	r2, r4
 80168fa:	4630      	mov	r0, r6
 80168fc:	f7ff ff1e 	bl	801673c <__multiply>
 8016900:	4639      	mov	r1, r7
 8016902:	4680      	mov	r8, r0
 8016904:	4630      	mov	r0, r6
 8016906:	f7ff fdfd 	bl	8016504 <_Bfree>
 801690a:	4647      	mov	r7, r8
 801690c:	106d      	asrs	r5, r5, #1
 801690e:	d00b      	beq.n	8016928 <__pow5mult+0xa0>
 8016910:	6820      	ldr	r0, [r4, #0]
 8016912:	b938      	cbnz	r0, 8016924 <__pow5mult+0x9c>
 8016914:	4622      	mov	r2, r4
 8016916:	4621      	mov	r1, r4
 8016918:	4630      	mov	r0, r6
 801691a:	f7ff ff0f 	bl	801673c <__multiply>
 801691e:	6020      	str	r0, [r4, #0]
 8016920:	f8c0 9000 	str.w	r9, [r0]
 8016924:	4604      	mov	r4, r0
 8016926:	e7e4      	b.n	80168f2 <__pow5mult+0x6a>
 8016928:	4638      	mov	r0, r7
 801692a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801692e:	bf00      	nop
 8016930:	080191b8 	.word	0x080191b8
 8016934:	08018f5d 	.word	0x08018f5d
 8016938:	08019064 	.word	0x08019064

0801693c <__lshift>:
 801693c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016940:	460c      	mov	r4, r1
 8016942:	6849      	ldr	r1, [r1, #4]
 8016944:	6923      	ldr	r3, [r4, #16]
 8016946:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801694a:	68a3      	ldr	r3, [r4, #8]
 801694c:	4607      	mov	r7, r0
 801694e:	4691      	mov	r9, r2
 8016950:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016954:	f108 0601 	add.w	r6, r8, #1
 8016958:	42b3      	cmp	r3, r6
 801695a:	db0b      	blt.n	8016974 <__lshift+0x38>
 801695c:	4638      	mov	r0, r7
 801695e:	f7ff fd91 	bl	8016484 <_Balloc>
 8016962:	4605      	mov	r5, r0
 8016964:	b948      	cbnz	r0, 801697a <__lshift+0x3e>
 8016966:	4602      	mov	r2, r0
 8016968:	4b28      	ldr	r3, [pc, #160]	; (8016a0c <__lshift+0xd0>)
 801696a:	4829      	ldr	r0, [pc, #164]	; (8016a10 <__lshift+0xd4>)
 801696c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016970:	f001 f988 	bl	8017c84 <__assert_func>
 8016974:	3101      	adds	r1, #1
 8016976:	005b      	lsls	r3, r3, #1
 8016978:	e7ee      	b.n	8016958 <__lshift+0x1c>
 801697a:	2300      	movs	r3, #0
 801697c:	f100 0114 	add.w	r1, r0, #20
 8016980:	f100 0210 	add.w	r2, r0, #16
 8016984:	4618      	mov	r0, r3
 8016986:	4553      	cmp	r3, sl
 8016988:	db33      	blt.n	80169f2 <__lshift+0xb6>
 801698a:	6920      	ldr	r0, [r4, #16]
 801698c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016990:	f104 0314 	add.w	r3, r4, #20
 8016994:	f019 091f 	ands.w	r9, r9, #31
 8016998:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801699c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80169a0:	d02b      	beq.n	80169fa <__lshift+0xbe>
 80169a2:	f1c9 0e20 	rsb	lr, r9, #32
 80169a6:	468a      	mov	sl, r1
 80169a8:	2200      	movs	r2, #0
 80169aa:	6818      	ldr	r0, [r3, #0]
 80169ac:	fa00 f009 	lsl.w	r0, r0, r9
 80169b0:	4302      	orrs	r2, r0
 80169b2:	f84a 2b04 	str.w	r2, [sl], #4
 80169b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80169ba:	459c      	cmp	ip, r3
 80169bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80169c0:	d8f3      	bhi.n	80169aa <__lshift+0x6e>
 80169c2:	ebac 0304 	sub.w	r3, ip, r4
 80169c6:	3b15      	subs	r3, #21
 80169c8:	f023 0303 	bic.w	r3, r3, #3
 80169cc:	3304      	adds	r3, #4
 80169ce:	f104 0015 	add.w	r0, r4, #21
 80169d2:	4584      	cmp	ip, r0
 80169d4:	bf38      	it	cc
 80169d6:	2304      	movcc	r3, #4
 80169d8:	50ca      	str	r2, [r1, r3]
 80169da:	b10a      	cbz	r2, 80169e0 <__lshift+0xa4>
 80169dc:	f108 0602 	add.w	r6, r8, #2
 80169e0:	3e01      	subs	r6, #1
 80169e2:	4638      	mov	r0, r7
 80169e4:	612e      	str	r6, [r5, #16]
 80169e6:	4621      	mov	r1, r4
 80169e8:	f7ff fd8c 	bl	8016504 <_Bfree>
 80169ec:	4628      	mov	r0, r5
 80169ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80169f6:	3301      	adds	r3, #1
 80169f8:	e7c5      	b.n	8016986 <__lshift+0x4a>
 80169fa:	3904      	subs	r1, #4
 80169fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a00:	f841 2f04 	str.w	r2, [r1, #4]!
 8016a04:	459c      	cmp	ip, r3
 8016a06:	d8f9      	bhi.n	80169fc <__lshift+0xc0>
 8016a08:	e7ea      	b.n	80169e0 <__lshift+0xa4>
 8016a0a:	bf00      	nop
 8016a0c:	08018fd3 	.word	0x08018fd3
 8016a10:	08019064 	.word	0x08019064

08016a14 <__mcmp>:
 8016a14:	b530      	push	{r4, r5, lr}
 8016a16:	6902      	ldr	r2, [r0, #16]
 8016a18:	690c      	ldr	r4, [r1, #16]
 8016a1a:	1b12      	subs	r2, r2, r4
 8016a1c:	d10e      	bne.n	8016a3c <__mcmp+0x28>
 8016a1e:	f100 0314 	add.w	r3, r0, #20
 8016a22:	3114      	adds	r1, #20
 8016a24:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016a28:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016a2c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016a30:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016a34:	42a5      	cmp	r5, r4
 8016a36:	d003      	beq.n	8016a40 <__mcmp+0x2c>
 8016a38:	d305      	bcc.n	8016a46 <__mcmp+0x32>
 8016a3a:	2201      	movs	r2, #1
 8016a3c:	4610      	mov	r0, r2
 8016a3e:	bd30      	pop	{r4, r5, pc}
 8016a40:	4283      	cmp	r3, r0
 8016a42:	d3f3      	bcc.n	8016a2c <__mcmp+0x18>
 8016a44:	e7fa      	b.n	8016a3c <__mcmp+0x28>
 8016a46:	f04f 32ff 	mov.w	r2, #4294967295
 8016a4a:	e7f7      	b.n	8016a3c <__mcmp+0x28>

08016a4c <__mdiff>:
 8016a4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a50:	460c      	mov	r4, r1
 8016a52:	4606      	mov	r6, r0
 8016a54:	4611      	mov	r1, r2
 8016a56:	4620      	mov	r0, r4
 8016a58:	4617      	mov	r7, r2
 8016a5a:	f7ff ffdb 	bl	8016a14 <__mcmp>
 8016a5e:	1e05      	subs	r5, r0, #0
 8016a60:	d110      	bne.n	8016a84 <__mdiff+0x38>
 8016a62:	4629      	mov	r1, r5
 8016a64:	4630      	mov	r0, r6
 8016a66:	f7ff fd0d 	bl	8016484 <_Balloc>
 8016a6a:	b930      	cbnz	r0, 8016a7a <__mdiff+0x2e>
 8016a6c:	4b39      	ldr	r3, [pc, #228]	; (8016b54 <__mdiff+0x108>)
 8016a6e:	4602      	mov	r2, r0
 8016a70:	f240 2132 	movw	r1, #562	; 0x232
 8016a74:	4838      	ldr	r0, [pc, #224]	; (8016b58 <__mdiff+0x10c>)
 8016a76:	f001 f905 	bl	8017c84 <__assert_func>
 8016a7a:	2301      	movs	r3, #1
 8016a7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016a80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a84:	bfa4      	itt	ge
 8016a86:	463b      	movge	r3, r7
 8016a88:	4627      	movge	r7, r4
 8016a8a:	4630      	mov	r0, r6
 8016a8c:	6879      	ldr	r1, [r7, #4]
 8016a8e:	bfa6      	itte	ge
 8016a90:	461c      	movge	r4, r3
 8016a92:	2500      	movge	r5, #0
 8016a94:	2501      	movlt	r5, #1
 8016a96:	f7ff fcf5 	bl	8016484 <_Balloc>
 8016a9a:	b920      	cbnz	r0, 8016aa6 <__mdiff+0x5a>
 8016a9c:	4b2d      	ldr	r3, [pc, #180]	; (8016b54 <__mdiff+0x108>)
 8016a9e:	4602      	mov	r2, r0
 8016aa0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8016aa4:	e7e6      	b.n	8016a74 <__mdiff+0x28>
 8016aa6:	693e      	ldr	r6, [r7, #16]
 8016aa8:	60c5      	str	r5, [r0, #12]
 8016aaa:	6925      	ldr	r5, [r4, #16]
 8016aac:	f107 0114 	add.w	r1, r7, #20
 8016ab0:	f104 0914 	add.w	r9, r4, #20
 8016ab4:	f100 0e14 	add.w	lr, r0, #20
 8016ab8:	f107 0210 	add.w	r2, r7, #16
 8016abc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8016ac0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8016ac4:	46f2      	mov	sl, lr
 8016ac6:	2700      	movs	r7, #0
 8016ac8:	f859 3b04 	ldr.w	r3, [r9], #4
 8016acc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016ad0:	fa1f f883 	uxth.w	r8, r3
 8016ad4:	fa17 f78b 	uxtah	r7, r7, fp
 8016ad8:	0c1b      	lsrs	r3, r3, #16
 8016ada:	eba7 0808 	sub.w	r8, r7, r8
 8016ade:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016ae2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016ae6:	fa1f f888 	uxth.w	r8, r8
 8016aea:	141f      	asrs	r7, r3, #16
 8016aec:	454d      	cmp	r5, r9
 8016aee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016af2:	f84a 3b04 	str.w	r3, [sl], #4
 8016af6:	d8e7      	bhi.n	8016ac8 <__mdiff+0x7c>
 8016af8:	1b2b      	subs	r3, r5, r4
 8016afa:	3b15      	subs	r3, #21
 8016afc:	f023 0303 	bic.w	r3, r3, #3
 8016b00:	3304      	adds	r3, #4
 8016b02:	3415      	adds	r4, #21
 8016b04:	42a5      	cmp	r5, r4
 8016b06:	bf38      	it	cc
 8016b08:	2304      	movcc	r3, #4
 8016b0a:	4419      	add	r1, r3
 8016b0c:	4473      	add	r3, lr
 8016b0e:	469e      	mov	lr, r3
 8016b10:	460d      	mov	r5, r1
 8016b12:	4565      	cmp	r5, ip
 8016b14:	d30e      	bcc.n	8016b34 <__mdiff+0xe8>
 8016b16:	f10c 0203 	add.w	r2, ip, #3
 8016b1a:	1a52      	subs	r2, r2, r1
 8016b1c:	f022 0203 	bic.w	r2, r2, #3
 8016b20:	3903      	subs	r1, #3
 8016b22:	458c      	cmp	ip, r1
 8016b24:	bf38      	it	cc
 8016b26:	2200      	movcc	r2, #0
 8016b28:	441a      	add	r2, r3
 8016b2a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8016b2e:	b17b      	cbz	r3, 8016b50 <__mdiff+0x104>
 8016b30:	6106      	str	r6, [r0, #16]
 8016b32:	e7a5      	b.n	8016a80 <__mdiff+0x34>
 8016b34:	f855 8b04 	ldr.w	r8, [r5], #4
 8016b38:	fa17 f488 	uxtah	r4, r7, r8
 8016b3c:	1422      	asrs	r2, r4, #16
 8016b3e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8016b42:	b2a4      	uxth	r4, r4
 8016b44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8016b48:	f84e 4b04 	str.w	r4, [lr], #4
 8016b4c:	1417      	asrs	r7, r2, #16
 8016b4e:	e7e0      	b.n	8016b12 <__mdiff+0xc6>
 8016b50:	3e01      	subs	r6, #1
 8016b52:	e7ea      	b.n	8016b2a <__mdiff+0xde>
 8016b54:	08018fd3 	.word	0x08018fd3
 8016b58:	08019064 	.word	0x08019064

08016b5c <__ulp>:
 8016b5c:	b082      	sub	sp, #8
 8016b5e:	ed8d 0b00 	vstr	d0, [sp]
 8016b62:	9b01      	ldr	r3, [sp, #4]
 8016b64:	4912      	ldr	r1, [pc, #72]	; (8016bb0 <__ulp+0x54>)
 8016b66:	4019      	ands	r1, r3
 8016b68:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8016b6c:	2900      	cmp	r1, #0
 8016b6e:	dd05      	ble.n	8016b7c <__ulp+0x20>
 8016b70:	2200      	movs	r2, #0
 8016b72:	460b      	mov	r3, r1
 8016b74:	ec43 2b10 	vmov	d0, r2, r3
 8016b78:	b002      	add	sp, #8
 8016b7a:	4770      	bx	lr
 8016b7c:	4249      	negs	r1, r1
 8016b7e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8016b82:	ea4f 5021 	mov.w	r0, r1, asr #20
 8016b86:	f04f 0200 	mov.w	r2, #0
 8016b8a:	f04f 0300 	mov.w	r3, #0
 8016b8e:	da04      	bge.n	8016b9a <__ulp+0x3e>
 8016b90:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8016b94:	fa41 f300 	asr.w	r3, r1, r0
 8016b98:	e7ec      	b.n	8016b74 <__ulp+0x18>
 8016b9a:	f1a0 0114 	sub.w	r1, r0, #20
 8016b9e:	291e      	cmp	r1, #30
 8016ba0:	bfda      	itte	le
 8016ba2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8016ba6:	fa20 f101 	lsrle.w	r1, r0, r1
 8016baa:	2101      	movgt	r1, #1
 8016bac:	460a      	mov	r2, r1
 8016bae:	e7e1      	b.n	8016b74 <__ulp+0x18>
 8016bb0:	7ff00000 	.word	0x7ff00000

08016bb4 <__b2d>:
 8016bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bb6:	6905      	ldr	r5, [r0, #16]
 8016bb8:	f100 0714 	add.w	r7, r0, #20
 8016bbc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016bc0:	1f2e      	subs	r6, r5, #4
 8016bc2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016bc6:	4620      	mov	r0, r4
 8016bc8:	f7ff fd52 	bl	8016670 <__hi0bits>
 8016bcc:	f1c0 0320 	rsb	r3, r0, #32
 8016bd0:	280a      	cmp	r0, #10
 8016bd2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8016c50 <__b2d+0x9c>
 8016bd6:	600b      	str	r3, [r1, #0]
 8016bd8:	dc14      	bgt.n	8016c04 <__b2d+0x50>
 8016bda:	f1c0 0e0b 	rsb	lr, r0, #11
 8016bde:	fa24 f10e 	lsr.w	r1, r4, lr
 8016be2:	42b7      	cmp	r7, r6
 8016be4:	ea41 030c 	orr.w	r3, r1, ip
 8016be8:	bf34      	ite	cc
 8016bea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016bee:	2100      	movcs	r1, #0
 8016bf0:	3015      	adds	r0, #21
 8016bf2:	fa04 f000 	lsl.w	r0, r4, r0
 8016bf6:	fa21 f10e 	lsr.w	r1, r1, lr
 8016bfa:	ea40 0201 	orr.w	r2, r0, r1
 8016bfe:	ec43 2b10 	vmov	d0, r2, r3
 8016c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c04:	42b7      	cmp	r7, r6
 8016c06:	bf3a      	itte	cc
 8016c08:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016c0c:	f1a5 0608 	subcc.w	r6, r5, #8
 8016c10:	2100      	movcs	r1, #0
 8016c12:	380b      	subs	r0, #11
 8016c14:	d017      	beq.n	8016c46 <__b2d+0x92>
 8016c16:	f1c0 0c20 	rsb	ip, r0, #32
 8016c1a:	fa04 f500 	lsl.w	r5, r4, r0
 8016c1e:	42be      	cmp	r6, r7
 8016c20:	fa21 f40c 	lsr.w	r4, r1, ip
 8016c24:	ea45 0504 	orr.w	r5, r5, r4
 8016c28:	bf8c      	ite	hi
 8016c2a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016c2e:	2400      	movls	r4, #0
 8016c30:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8016c34:	fa01 f000 	lsl.w	r0, r1, r0
 8016c38:	fa24 f40c 	lsr.w	r4, r4, ip
 8016c3c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016c40:	ea40 0204 	orr.w	r2, r0, r4
 8016c44:	e7db      	b.n	8016bfe <__b2d+0x4a>
 8016c46:	ea44 030c 	orr.w	r3, r4, ip
 8016c4a:	460a      	mov	r2, r1
 8016c4c:	e7d7      	b.n	8016bfe <__b2d+0x4a>
 8016c4e:	bf00      	nop
 8016c50:	3ff00000 	.word	0x3ff00000

08016c54 <__d2b>:
 8016c54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016c58:	4689      	mov	r9, r1
 8016c5a:	2101      	movs	r1, #1
 8016c5c:	ec57 6b10 	vmov	r6, r7, d0
 8016c60:	4690      	mov	r8, r2
 8016c62:	f7ff fc0f 	bl	8016484 <_Balloc>
 8016c66:	4604      	mov	r4, r0
 8016c68:	b930      	cbnz	r0, 8016c78 <__d2b+0x24>
 8016c6a:	4602      	mov	r2, r0
 8016c6c:	4b25      	ldr	r3, [pc, #148]	; (8016d04 <__d2b+0xb0>)
 8016c6e:	4826      	ldr	r0, [pc, #152]	; (8016d08 <__d2b+0xb4>)
 8016c70:	f240 310a 	movw	r1, #778	; 0x30a
 8016c74:	f001 f806 	bl	8017c84 <__assert_func>
 8016c78:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016c7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016c80:	bb35      	cbnz	r5, 8016cd0 <__d2b+0x7c>
 8016c82:	2e00      	cmp	r6, #0
 8016c84:	9301      	str	r3, [sp, #4]
 8016c86:	d028      	beq.n	8016cda <__d2b+0x86>
 8016c88:	4668      	mov	r0, sp
 8016c8a:	9600      	str	r6, [sp, #0]
 8016c8c:	f7ff fd10 	bl	80166b0 <__lo0bits>
 8016c90:	9900      	ldr	r1, [sp, #0]
 8016c92:	b300      	cbz	r0, 8016cd6 <__d2b+0x82>
 8016c94:	9a01      	ldr	r2, [sp, #4]
 8016c96:	f1c0 0320 	rsb	r3, r0, #32
 8016c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8016c9e:	430b      	orrs	r3, r1
 8016ca0:	40c2      	lsrs	r2, r0
 8016ca2:	6163      	str	r3, [r4, #20]
 8016ca4:	9201      	str	r2, [sp, #4]
 8016ca6:	9b01      	ldr	r3, [sp, #4]
 8016ca8:	61a3      	str	r3, [r4, #24]
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	bf14      	ite	ne
 8016cae:	2202      	movne	r2, #2
 8016cb0:	2201      	moveq	r2, #1
 8016cb2:	6122      	str	r2, [r4, #16]
 8016cb4:	b1d5      	cbz	r5, 8016cec <__d2b+0x98>
 8016cb6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016cba:	4405      	add	r5, r0
 8016cbc:	f8c9 5000 	str.w	r5, [r9]
 8016cc0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016cc4:	f8c8 0000 	str.w	r0, [r8]
 8016cc8:	4620      	mov	r0, r4
 8016cca:	b003      	add	sp, #12
 8016ccc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016cd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016cd4:	e7d5      	b.n	8016c82 <__d2b+0x2e>
 8016cd6:	6161      	str	r1, [r4, #20]
 8016cd8:	e7e5      	b.n	8016ca6 <__d2b+0x52>
 8016cda:	a801      	add	r0, sp, #4
 8016cdc:	f7ff fce8 	bl	80166b0 <__lo0bits>
 8016ce0:	9b01      	ldr	r3, [sp, #4]
 8016ce2:	6163      	str	r3, [r4, #20]
 8016ce4:	2201      	movs	r2, #1
 8016ce6:	6122      	str	r2, [r4, #16]
 8016ce8:	3020      	adds	r0, #32
 8016cea:	e7e3      	b.n	8016cb4 <__d2b+0x60>
 8016cec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016cf0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016cf4:	f8c9 0000 	str.w	r0, [r9]
 8016cf8:	6918      	ldr	r0, [r3, #16]
 8016cfa:	f7ff fcb9 	bl	8016670 <__hi0bits>
 8016cfe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016d02:	e7df      	b.n	8016cc4 <__d2b+0x70>
 8016d04:	08018fd3 	.word	0x08018fd3
 8016d08:	08019064 	.word	0x08019064

08016d0c <__ratio>:
 8016d0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d10:	4688      	mov	r8, r1
 8016d12:	4669      	mov	r1, sp
 8016d14:	4681      	mov	r9, r0
 8016d16:	f7ff ff4d 	bl	8016bb4 <__b2d>
 8016d1a:	a901      	add	r1, sp, #4
 8016d1c:	4640      	mov	r0, r8
 8016d1e:	ec55 4b10 	vmov	r4, r5, d0
 8016d22:	f7ff ff47 	bl	8016bb4 <__b2d>
 8016d26:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016d2a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016d2e:	eba3 0c02 	sub.w	ip, r3, r2
 8016d32:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016d36:	1a9b      	subs	r3, r3, r2
 8016d38:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016d3c:	ec51 0b10 	vmov	r0, r1, d0
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	bfd6      	itet	le
 8016d44:	460a      	movle	r2, r1
 8016d46:	462a      	movgt	r2, r5
 8016d48:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016d4c:	468b      	mov	fp, r1
 8016d4e:	462f      	mov	r7, r5
 8016d50:	bfd4      	ite	le
 8016d52:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8016d56:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016d5a:	4620      	mov	r0, r4
 8016d5c:	ee10 2a10 	vmov	r2, s0
 8016d60:	465b      	mov	r3, fp
 8016d62:	4639      	mov	r1, r7
 8016d64:	f7e9 fd82 	bl	800086c <__aeabi_ddiv>
 8016d68:	ec41 0b10 	vmov	d0, r0, r1
 8016d6c:	b003      	add	sp, #12
 8016d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016d72 <__copybits>:
 8016d72:	3901      	subs	r1, #1
 8016d74:	b570      	push	{r4, r5, r6, lr}
 8016d76:	1149      	asrs	r1, r1, #5
 8016d78:	6914      	ldr	r4, [r2, #16]
 8016d7a:	3101      	adds	r1, #1
 8016d7c:	f102 0314 	add.w	r3, r2, #20
 8016d80:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016d84:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016d88:	1f05      	subs	r5, r0, #4
 8016d8a:	42a3      	cmp	r3, r4
 8016d8c:	d30c      	bcc.n	8016da8 <__copybits+0x36>
 8016d8e:	1aa3      	subs	r3, r4, r2
 8016d90:	3b11      	subs	r3, #17
 8016d92:	f023 0303 	bic.w	r3, r3, #3
 8016d96:	3211      	adds	r2, #17
 8016d98:	42a2      	cmp	r2, r4
 8016d9a:	bf88      	it	hi
 8016d9c:	2300      	movhi	r3, #0
 8016d9e:	4418      	add	r0, r3
 8016da0:	2300      	movs	r3, #0
 8016da2:	4288      	cmp	r0, r1
 8016da4:	d305      	bcc.n	8016db2 <__copybits+0x40>
 8016da6:	bd70      	pop	{r4, r5, r6, pc}
 8016da8:	f853 6b04 	ldr.w	r6, [r3], #4
 8016dac:	f845 6f04 	str.w	r6, [r5, #4]!
 8016db0:	e7eb      	b.n	8016d8a <__copybits+0x18>
 8016db2:	f840 3b04 	str.w	r3, [r0], #4
 8016db6:	e7f4      	b.n	8016da2 <__copybits+0x30>

08016db8 <__any_on>:
 8016db8:	f100 0214 	add.w	r2, r0, #20
 8016dbc:	6900      	ldr	r0, [r0, #16]
 8016dbe:	114b      	asrs	r3, r1, #5
 8016dc0:	4298      	cmp	r0, r3
 8016dc2:	b510      	push	{r4, lr}
 8016dc4:	db11      	blt.n	8016dea <__any_on+0x32>
 8016dc6:	dd0a      	ble.n	8016dde <__any_on+0x26>
 8016dc8:	f011 011f 	ands.w	r1, r1, #31
 8016dcc:	d007      	beq.n	8016dde <__any_on+0x26>
 8016dce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016dd2:	fa24 f001 	lsr.w	r0, r4, r1
 8016dd6:	fa00 f101 	lsl.w	r1, r0, r1
 8016dda:	428c      	cmp	r4, r1
 8016ddc:	d10b      	bne.n	8016df6 <__any_on+0x3e>
 8016dde:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016de2:	4293      	cmp	r3, r2
 8016de4:	d803      	bhi.n	8016dee <__any_on+0x36>
 8016de6:	2000      	movs	r0, #0
 8016de8:	bd10      	pop	{r4, pc}
 8016dea:	4603      	mov	r3, r0
 8016dec:	e7f7      	b.n	8016dde <__any_on+0x26>
 8016dee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016df2:	2900      	cmp	r1, #0
 8016df4:	d0f5      	beq.n	8016de2 <__any_on+0x2a>
 8016df6:	2001      	movs	r0, #1
 8016df8:	e7f6      	b.n	8016de8 <__any_on+0x30>

08016dfa <_calloc_r>:
 8016dfa:	b513      	push	{r0, r1, r4, lr}
 8016dfc:	434a      	muls	r2, r1
 8016dfe:	4611      	mov	r1, r2
 8016e00:	9201      	str	r2, [sp, #4]
 8016e02:	f7fb fff7 	bl	8012df4 <_malloc_r>
 8016e06:	4604      	mov	r4, r0
 8016e08:	b118      	cbz	r0, 8016e12 <_calloc_r+0x18>
 8016e0a:	9a01      	ldr	r2, [sp, #4]
 8016e0c:	2100      	movs	r1, #0
 8016e0e:	f7fb ffe8 	bl	8012de2 <memset>
 8016e12:	4620      	mov	r0, r4
 8016e14:	b002      	add	sp, #8
 8016e16:	bd10      	pop	{r4, pc}

08016e18 <_free_r>:
 8016e18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016e1a:	2900      	cmp	r1, #0
 8016e1c:	d048      	beq.n	8016eb0 <_free_r+0x98>
 8016e1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016e22:	9001      	str	r0, [sp, #4]
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	f1a1 0404 	sub.w	r4, r1, #4
 8016e2a:	bfb8      	it	lt
 8016e2c:	18e4      	addlt	r4, r4, r3
 8016e2e:	f7ff fb1d 	bl	801646c <__malloc_lock>
 8016e32:	4a20      	ldr	r2, [pc, #128]	; (8016eb4 <_free_r+0x9c>)
 8016e34:	9801      	ldr	r0, [sp, #4]
 8016e36:	6813      	ldr	r3, [r2, #0]
 8016e38:	4615      	mov	r5, r2
 8016e3a:	b933      	cbnz	r3, 8016e4a <_free_r+0x32>
 8016e3c:	6063      	str	r3, [r4, #4]
 8016e3e:	6014      	str	r4, [r2, #0]
 8016e40:	b003      	add	sp, #12
 8016e42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016e46:	f7ff bb17 	b.w	8016478 <__malloc_unlock>
 8016e4a:	42a3      	cmp	r3, r4
 8016e4c:	d90b      	bls.n	8016e66 <_free_r+0x4e>
 8016e4e:	6821      	ldr	r1, [r4, #0]
 8016e50:	1862      	adds	r2, r4, r1
 8016e52:	4293      	cmp	r3, r2
 8016e54:	bf04      	itt	eq
 8016e56:	681a      	ldreq	r2, [r3, #0]
 8016e58:	685b      	ldreq	r3, [r3, #4]
 8016e5a:	6063      	str	r3, [r4, #4]
 8016e5c:	bf04      	itt	eq
 8016e5e:	1852      	addeq	r2, r2, r1
 8016e60:	6022      	streq	r2, [r4, #0]
 8016e62:	602c      	str	r4, [r5, #0]
 8016e64:	e7ec      	b.n	8016e40 <_free_r+0x28>
 8016e66:	461a      	mov	r2, r3
 8016e68:	685b      	ldr	r3, [r3, #4]
 8016e6a:	b10b      	cbz	r3, 8016e70 <_free_r+0x58>
 8016e6c:	42a3      	cmp	r3, r4
 8016e6e:	d9fa      	bls.n	8016e66 <_free_r+0x4e>
 8016e70:	6811      	ldr	r1, [r2, #0]
 8016e72:	1855      	adds	r5, r2, r1
 8016e74:	42a5      	cmp	r5, r4
 8016e76:	d10b      	bne.n	8016e90 <_free_r+0x78>
 8016e78:	6824      	ldr	r4, [r4, #0]
 8016e7a:	4421      	add	r1, r4
 8016e7c:	1854      	adds	r4, r2, r1
 8016e7e:	42a3      	cmp	r3, r4
 8016e80:	6011      	str	r1, [r2, #0]
 8016e82:	d1dd      	bne.n	8016e40 <_free_r+0x28>
 8016e84:	681c      	ldr	r4, [r3, #0]
 8016e86:	685b      	ldr	r3, [r3, #4]
 8016e88:	6053      	str	r3, [r2, #4]
 8016e8a:	4421      	add	r1, r4
 8016e8c:	6011      	str	r1, [r2, #0]
 8016e8e:	e7d7      	b.n	8016e40 <_free_r+0x28>
 8016e90:	d902      	bls.n	8016e98 <_free_r+0x80>
 8016e92:	230c      	movs	r3, #12
 8016e94:	6003      	str	r3, [r0, #0]
 8016e96:	e7d3      	b.n	8016e40 <_free_r+0x28>
 8016e98:	6825      	ldr	r5, [r4, #0]
 8016e9a:	1961      	adds	r1, r4, r5
 8016e9c:	428b      	cmp	r3, r1
 8016e9e:	bf04      	itt	eq
 8016ea0:	6819      	ldreq	r1, [r3, #0]
 8016ea2:	685b      	ldreq	r3, [r3, #4]
 8016ea4:	6063      	str	r3, [r4, #4]
 8016ea6:	bf04      	itt	eq
 8016ea8:	1949      	addeq	r1, r1, r5
 8016eaa:	6021      	streq	r1, [r4, #0]
 8016eac:	6054      	str	r4, [r2, #4]
 8016eae:	e7c7      	b.n	8016e40 <_free_r+0x28>
 8016eb0:	b003      	add	sp, #12
 8016eb2:	bd30      	pop	{r4, r5, pc}
 8016eb4:	20004f28 	.word	0x20004f28

08016eb8 <__ssputs_r>:
 8016eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ebc:	688e      	ldr	r6, [r1, #8]
 8016ebe:	429e      	cmp	r6, r3
 8016ec0:	4682      	mov	sl, r0
 8016ec2:	460c      	mov	r4, r1
 8016ec4:	4690      	mov	r8, r2
 8016ec6:	461f      	mov	r7, r3
 8016ec8:	d838      	bhi.n	8016f3c <__ssputs_r+0x84>
 8016eca:	898a      	ldrh	r2, [r1, #12]
 8016ecc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016ed0:	d032      	beq.n	8016f38 <__ssputs_r+0x80>
 8016ed2:	6825      	ldr	r5, [r4, #0]
 8016ed4:	6909      	ldr	r1, [r1, #16]
 8016ed6:	eba5 0901 	sub.w	r9, r5, r1
 8016eda:	6965      	ldr	r5, [r4, #20]
 8016edc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016ee0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016ee4:	3301      	adds	r3, #1
 8016ee6:	444b      	add	r3, r9
 8016ee8:	106d      	asrs	r5, r5, #1
 8016eea:	429d      	cmp	r5, r3
 8016eec:	bf38      	it	cc
 8016eee:	461d      	movcc	r5, r3
 8016ef0:	0553      	lsls	r3, r2, #21
 8016ef2:	d531      	bpl.n	8016f58 <__ssputs_r+0xa0>
 8016ef4:	4629      	mov	r1, r5
 8016ef6:	f7fb ff7d 	bl	8012df4 <_malloc_r>
 8016efa:	4606      	mov	r6, r0
 8016efc:	b950      	cbnz	r0, 8016f14 <__ssputs_r+0x5c>
 8016efe:	230c      	movs	r3, #12
 8016f00:	f8ca 3000 	str.w	r3, [sl]
 8016f04:	89a3      	ldrh	r3, [r4, #12]
 8016f06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f0a:	81a3      	strh	r3, [r4, #12]
 8016f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8016f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f14:	6921      	ldr	r1, [r4, #16]
 8016f16:	464a      	mov	r2, r9
 8016f18:	f7fb ff55 	bl	8012dc6 <memcpy>
 8016f1c:	89a3      	ldrh	r3, [r4, #12]
 8016f1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016f26:	81a3      	strh	r3, [r4, #12]
 8016f28:	6126      	str	r6, [r4, #16]
 8016f2a:	6165      	str	r5, [r4, #20]
 8016f2c:	444e      	add	r6, r9
 8016f2e:	eba5 0509 	sub.w	r5, r5, r9
 8016f32:	6026      	str	r6, [r4, #0]
 8016f34:	60a5      	str	r5, [r4, #8]
 8016f36:	463e      	mov	r6, r7
 8016f38:	42be      	cmp	r6, r7
 8016f3a:	d900      	bls.n	8016f3e <__ssputs_r+0x86>
 8016f3c:	463e      	mov	r6, r7
 8016f3e:	4632      	mov	r2, r6
 8016f40:	6820      	ldr	r0, [r4, #0]
 8016f42:	4641      	mov	r1, r8
 8016f44:	f000 fef0 	bl	8017d28 <memmove>
 8016f48:	68a3      	ldr	r3, [r4, #8]
 8016f4a:	6822      	ldr	r2, [r4, #0]
 8016f4c:	1b9b      	subs	r3, r3, r6
 8016f4e:	4432      	add	r2, r6
 8016f50:	60a3      	str	r3, [r4, #8]
 8016f52:	6022      	str	r2, [r4, #0]
 8016f54:	2000      	movs	r0, #0
 8016f56:	e7db      	b.n	8016f10 <__ssputs_r+0x58>
 8016f58:	462a      	mov	r2, r5
 8016f5a:	f000 feff 	bl	8017d5c <_realloc_r>
 8016f5e:	4606      	mov	r6, r0
 8016f60:	2800      	cmp	r0, #0
 8016f62:	d1e1      	bne.n	8016f28 <__ssputs_r+0x70>
 8016f64:	6921      	ldr	r1, [r4, #16]
 8016f66:	4650      	mov	r0, sl
 8016f68:	f7ff ff56 	bl	8016e18 <_free_r>
 8016f6c:	e7c7      	b.n	8016efe <__ssputs_r+0x46>
	...

08016f70 <_svfiprintf_r>:
 8016f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f74:	4698      	mov	r8, r3
 8016f76:	898b      	ldrh	r3, [r1, #12]
 8016f78:	061b      	lsls	r3, r3, #24
 8016f7a:	b09d      	sub	sp, #116	; 0x74
 8016f7c:	4607      	mov	r7, r0
 8016f7e:	460d      	mov	r5, r1
 8016f80:	4614      	mov	r4, r2
 8016f82:	d50e      	bpl.n	8016fa2 <_svfiprintf_r+0x32>
 8016f84:	690b      	ldr	r3, [r1, #16]
 8016f86:	b963      	cbnz	r3, 8016fa2 <_svfiprintf_r+0x32>
 8016f88:	2140      	movs	r1, #64	; 0x40
 8016f8a:	f7fb ff33 	bl	8012df4 <_malloc_r>
 8016f8e:	6028      	str	r0, [r5, #0]
 8016f90:	6128      	str	r0, [r5, #16]
 8016f92:	b920      	cbnz	r0, 8016f9e <_svfiprintf_r+0x2e>
 8016f94:	230c      	movs	r3, #12
 8016f96:	603b      	str	r3, [r7, #0]
 8016f98:	f04f 30ff 	mov.w	r0, #4294967295
 8016f9c:	e0d1      	b.n	8017142 <_svfiprintf_r+0x1d2>
 8016f9e:	2340      	movs	r3, #64	; 0x40
 8016fa0:	616b      	str	r3, [r5, #20]
 8016fa2:	2300      	movs	r3, #0
 8016fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8016fa6:	2320      	movs	r3, #32
 8016fa8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016fac:	f8cd 800c 	str.w	r8, [sp, #12]
 8016fb0:	2330      	movs	r3, #48	; 0x30
 8016fb2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801715c <_svfiprintf_r+0x1ec>
 8016fb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016fba:	f04f 0901 	mov.w	r9, #1
 8016fbe:	4623      	mov	r3, r4
 8016fc0:	469a      	mov	sl, r3
 8016fc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016fc6:	b10a      	cbz	r2, 8016fcc <_svfiprintf_r+0x5c>
 8016fc8:	2a25      	cmp	r2, #37	; 0x25
 8016fca:	d1f9      	bne.n	8016fc0 <_svfiprintf_r+0x50>
 8016fcc:	ebba 0b04 	subs.w	fp, sl, r4
 8016fd0:	d00b      	beq.n	8016fea <_svfiprintf_r+0x7a>
 8016fd2:	465b      	mov	r3, fp
 8016fd4:	4622      	mov	r2, r4
 8016fd6:	4629      	mov	r1, r5
 8016fd8:	4638      	mov	r0, r7
 8016fda:	f7ff ff6d 	bl	8016eb8 <__ssputs_r>
 8016fde:	3001      	adds	r0, #1
 8016fe0:	f000 80aa 	beq.w	8017138 <_svfiprintf_r+0x1c8>
 8016fe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016fe6:	445a      	add	r2, fp
 8016fe8:	9209      	str	r2, [sp, #36]	; 0x24
 8016fea:	f89a 3000 	ldrb.w	r3, [sl]
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	f000 80a2 	beq.w	8017138 <_svfiprintf_r+0x1c8>
 8016ff4:	2300      	movs	r3, #0
 8016ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8016ffa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016ffe:	f10a 0a01 	add.w	sl, sl, #1
 8017002:	9304      	str	r3, [sp, #16]
 8017004:	9307      	str	r3, [sp, #28]
 8017006:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801700a:	931a      	str	r3, [sp, #104]	; 0x68
 801700c:	4654      	mov	r4, sl
 801700e:	2205      	movs	r2, #5
 8017010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017014:	4851      	ldr	r0, [pc, #324]	; (801715c <_svfiprintf_r+0x1ec>)
 8017016:	f7e9 f8f3 	bl	8000200 <memchr>
 801701a:	9a04      	ldr	r2, [sp, #16]
 801701c:	b9d8      	cbnz	r0, 8017056 <_svfiprintf_r+0xe6>
 801701e:	06d0      	lsls	r0, r2, #27
 8017020:	bf44      	itt	mi
 8017022:	2320      	movmi	r3, #32
 8017024:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017028:	0711      	lsls	r1, r2, #28
 801702a:	bf44      	itt	mi
 801702c:	232b      	movmi	r3, #43	; 0x2b
 801702e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017032:	f89a 3000 	ldrb.w	r3, [sl]
 8017036:	2b2a      	cmp	r3, #42	; 0x2a
 8017038:	d015      	beq.n	8017066 <_svfiprintf_r+0xf6>
 801703a:	9a07      	ldr	r2, [sp, #28]
 801703c:	4654      	mov	r4, sl
 801703e:	2000      	movs	r0, #0
 8017040:	f04f 0c0a 	mov.w	ip, #10
 8017044:	4621      	mov	r1, r4
 8017046:	f811 3b01 	ldrb.w	r3, [r1], #1
 801704a:	3b30      	subs	r3, #48	; 0x30
 801704c:	2b09      	cmp	r3, #9
 801704e:	d94e      	bls.n	80170ee <_svfiprintf_r+0x17e>
 8017050:	b1b0      	cbz	r0, 8017080 <_svfiprintf_r+0x110>
 8017052:	9207      	str	r2, [sp, #28]
 8017054:	e014      	b.n	8017080 <_svfiprintf_r+0x110>
 8017056:	eba0 0308 	sub.w	r3, r0, r8
 801705a:	fa09 f303 	lsl.w	r3, r9, r3
 801705e:	4313      	orrs	r3, r2
 8017060:	9304      	str	r3, [sp, #16]
 8017062:	46a2      	mov	sl, r4
 8017064:	e7d2      	b.n	801700c <_svfiprintf_r+0x9c>
 8017066:	9b03      	ldr	r3, [sp, #12]
 8017068:	1d19      	adds	r1, r3, #4
 801706a:	681b      	ldr	r3, [r3, #0]
 801706c:	9103      	str	r1, [sp, #12]
 801706e:	2b00      	cmp	r3, #0
 8017070:	bfbb      	ittet	lt
 8017072:	425b      	neglt	r3, r3
 8017074:	f042 0202 	orrlt.w	r2, r2, #2
 8017078:	9307      	strge	r3, [sp, #28]
 801707a:	9307      	strlt	r3, [sp, #28]
 801707c:	bfb8      	it	lt
 801707e:	9204      	strlt	r2, [sp, #16]
 8017080:	7823      	ldrb	r3, [r4, #0]
 8017082:	2b2e      	cmp	r3, #46	; 0x2e
 8017084:	d10c      	bne.n	80170a0 <_svfiprintf_r+0x130>
 8017086:	7863      	ldrb	r3, [r4, #1]
 8017088:	2b2a      	cmp	r3, #42	; 0x2a
 801708a:	d135      	bne.n	80170f8 <_svfiprintf_r+0x188>
 801708c:	9b03      	ldr	r3, [sp, #12]
 801708e:	1d1a      	adds	r2, r3, #4
 8017090:	681b      	ldr	r3, [r3, #0]
 8017092:	9203      	str	r2, [sp, #12]
 8017094:	2b00      	cmp	r3, #0
 8017096:	bfb8      	it	lt
 8017098:	f04f 33ff 	movlt.w	r3, #4294967295
 801709c:	3402      	adds	r4, #2
 801709e:	9305      	str	r3, [sp, #20]
 80170a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801716c <_svfiprintf_r+0x1fc>
 80170a4:	7821      	ldrb	r1, [r4, #0]
 80170a6:	2203      	movs	r2, #3
 80170a8:	4650      	mov	r0, sl
 80170aa:	f7e9 f8a9 	bl	8000200 <memchr>
 80170ae:	b140      	cbz	r0, 80170c2 <_svfiprintf_r+0x152>
 80170b0:	2340      	movs	r3, #64	; 0x40
 80170b2:	eba0 000a 	sub.w	r0, r0, sl
 80170b6:	fa03 f000 	lsl.w	r0, r3, r0
 80170ba:	9b04      	ldr	r3, [sp, #16]
 80170bc:	4303      	orrs	r3, r0
 80170be:	3401      	adds	r4, #1
 80170c0:	9304      	str	r3, [sp, #16]
 80170c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80170c6:	4826      	ldr	r0, [pc, #152]	; (8017160 <_svfiprintf_r+0x1f0>)
 80170c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80170cc:	2206      	movs	r2, #6
 80170ce:	f7e9 f897 	bl	8000200 <memchr>
 80170d2:	2800      	cmp	r0, #0
 80170d4:	d038      	beq.n	8017148 <_svfiprintf_r+0x1d8>
 80170d6:	4b23      	ldr	r3, [pc, #140]	; (8017164 <_svfiprintf_r+0x1f4>)
 80170d8:	bb1b      	cbnz	r3, 8017122 <_svfiprintf_r+0x1b2>
 80170da:	9b03      	ldr	r3, [sp, #12]
 80170dc:	3307      	adds	r3, #7
 80170de:	f023 0307 	bic.w	r3, r3, #7
 80170e2:	3308      	adds	r3, #8
 80170e4:	9303      	str	r3, [sp, #12]
 80170e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170e8:	4433      	add	r3, r6
 80170ea:	9309      	str	r3, [sp, #36]	; 0x24
 80170ec:	e767      	b.n	8016fbe <_svfiprintf_r+0x4e>
 80170ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80170f2:	460c      	mov	r4, r1
 80170f4:	2001      	movs	r0, #1
 80170f6:	e7a5      	b.n	8017044 <_svfiprintf_r+0xd4>
 80170f8:	2300      	movs	r3, #0
 80170fa:	3401      	adds	r4, #1
 80170fc:	9305      	str	r3, [sp, #20]
 80170fe:	4619      	mov	r1, r3
 8017100:	f04f 0c0a 	mov.w	ip, #10
 8017104:	4620      	mov	r0, r4
 8017106:	f810 2b01 	ldrb.w	r2, [r0], #1
 801710a:	3a30      	subs	r2, #48	; 0x30
 801710c:	2a09      	cmp	r2, #9
 801710e:	d903      	bls.n	8017118 <_svfiprintf_r+0x1a8>
 8017110:	2b00      	cmp	r3, #0
 8017112:	d0c5      	beq.n	80170a0 <_svfiprintf_r+0x130>
 8017114:	9105      	str	r1, [sp, #20]
 8017116:	e7c3      	b.n	80170a0 <_svfiprintf_r+0x130>
 8017118:	fb0c 2101 	mla	r1, ip, r1, r2
 801711c:	4604      	mov	r4, r0
 801711e:	2301      	movs	r3, #1
 8017120:	e7f0      	b.n	8017104 <_svfiprintf_r+0x194>
 8017122:	ab03      	add	r3, sp, #12
 8017124:	9300      	str	r3, [sp, #0]
 8017126:	462a      	mov	r2, r5
 8017128:	4b0f      	ldr	r3, [pc, #60]	; (8017168 <_svfiprintf_r+0x1f8>)
 801712a:	a904      	add	r1, sp, #16
 801712c:	4638      	mov	r0, r7
 801712e:	f7fb ff5b 	bl	8012fe8 <_printf_float>
 8017132:	1c42      	adds	r2, r0, #1
 8017134:	4606      	mov	r6, r0
 8017136:	d1d6      	bne.n	80170e6 <_svfiprintf_r+0x176>
 8017138:	89ab      	ldrh	r3, [r5, #12]
 801713a:	065b      	lsls	r3, r3, #25
 801713c:	f53f af2c 	bmi.w	8016f98 <_svfiprintf_r+0x28>
 8017140:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017142:	b01d      	add	sp, #116	; 0x74
 8017144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017148:	ab03      	add	r3, sp, #12
 801714a:	9300      	str	r3, [sp, #0]
 801714c:	462a      	mov	r2, r5
 801714e:	4b06      	ldr	r3, [pc, #24]	; (8017168 <_svfiprintf_r+0x1f8>)
 8017150:	a904      	add	r1, sp, #16
 8017152:	4638      	mov	r0, r7
 8017154:	f7fc f9ec 	bl	8013530 <_printf_i>
 8017158:	e7eb      	b.n	8017132 <_svfiprintf_r+0x1c2>
 801715a:	bf00      	nop
 801715c:	080191c4 	.word	0x080191c4
 8017160:	080191ce 	.word	0x080191ce
 8017164:	08012fe9 	.word	0x08012fe9
 8017168:	08016eb9 	.word	0x08016eb9
 801716c:	080191ca 	.word	0x080191ca

08017170 <_sungetc_r>:
 8017170:	b538      	push	{r3, r4, r5, lr}
 8017172:	1c4b      	adds	r3, r1, #1
 8017174:	4614      	mov	r4, r2
 8017176:	d103      	bne.n	8017180 <_sungetc_r+0x10>
 8017178:	f04f 35ff 	mov.w	r5, #4294967295
 801717c:	4628      	mov	r0, r5
 801717e:	bd38      	pop	{r3, r4, r5, pc}
 8017180:	8993      	ldrh	r3, [r2, #12]
 8017182:	f023 0320 	bic.w	r3, r3, #32
 8017186:	8193      	strh	r3, [r2, #12]
 8017188:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801718a:	6852      	ldr	r2, [r2, #4]
 801718c:	b2cd      	uxtb	r5, r1
 801718e:	b18b      	cbz	r3, 80171b4 <_sungetc_r+0x44>
 8017190:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017192:	4293      	cmp	r3, r2
 8017194:	dd08      	ble.n	80171a8 <_sungetc_r+0x38>
 8017196:	6823      	ldr	r3, [r4, #0]
 8017198:	1e5a      	subs	r2, r3, #1
 801719a:	6022      	str	r2, [r4, #0]
 801719c:	f803 5c01 	strb.w	r5, [r3, #-1]
 80171a0:	6863      	ldr	r3, [r4, #4]
 80171a2:	3301      	adds	r3, #1
 80171a4:	6063      	str	r3, [r4, #4]
 80171a6:	e7e9      	b.n	801717c <_sungetc_r+0xc>
 80171a8:	4621      	mov	r1, r4
 80171aa:	f000 fd23 	bl	8017bf4 <__submore>
 80171ae:	2800      	cmp	r0, #0
 80171b0:	d0f1      	beq.n	8017196 <_sungetc_r+0x26>
 80171b2:	e7e1      	b.n	8017178 <_sungetc_r+0x8>
 80171b4:	6921      	ldr	r1, [r4, #16]
 80171b6:	6823      	ldr	r3, [r4, #0]
 80171b8:	b151      	cbz	r1, 80171d0 <_sungetc_r+0x60>
 80171ba:	4299      	cmp	r1, r3
 80171bc:	d208      	bcs.n	80171d0 <_sungetc_r+0x60>
 80171be:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80171c2:	42a9      	cmp	r1, r5
 80171c4:	d104      	bne.n	80171d0 <_sungetc_r+0x60>
 80171c6:	3b01      	subs	r3, #1
 80171c8:	3201      	adds	r2, #1
 80171ca:	6023      	str	r3, [r4, #0]
 80171cc:	6062      	str	r2, [r4, #4]
 80171ce:	e7d5      	b.n	801717c <_sungetc_r+0xc>
 80171d0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80171d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80171d8:	6363      	str	r3, [r4, #52]	; 0x34
 80171da:	2303      	movs	r3, #3
 80171dc:	63a3      	str	r3, [r4, #56]	; 0x38
 80171de:	4623      	mov	r3, r4
 80171e0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80171e4:	6023      	str	r3, [r4, #0]
 80171e6:	2301      	movs	r3, #1
 80171e8:	e7dc      	b.n	80171a4 <_sungetc_r+0x34>

080171ea <__ssrefill_r>:
 80171ea:	b510      	push	{r4, lr}
 80171ec:	460c      	mov	r4, r1
 80171ee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80171f0:	b169      	cbz	r1, 801720e <__ssrefill_r+0x24>
 80171f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80171f6:	4299      	cmp	r1, r3
 80171f8:	d001      	beq.n	80171fe <__ssrefill_r+0x14>
 80171fa:	f7ff fe0d 	bl	8016e18 <_free_r>
 80171fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017200:	6063      	str	r3, [r4, #4]
 8017202:	2000      	movs	r0, #0
 8017204:	6360      	str	r0, [r4, #52]	; 0x34
 8017206:	b113      	cbz	r3, 801720e <__ssrefill_r+0x24>
 8017208:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801720a:	6023      	str	r3, [r4, #0]
 801720c:	bd10      	pop	{r4, pc}
 801720e:	6923      	ldr	r3, [r4, #16]
 8017210:	6023      	str	r3, [r4, #0]
 8017212:	2300      	movs	r3, #0
 8017214:	6063      	str	r3, [r4, #4]
 8017216:	89a3      	ldrh	r3, [r4, #12]
 8017218:	f043 0320 	orr.w	r3, r3, #32
 801721c:	81a3      	strh	r3, [r4, #12]
 801721e:	f04f 30ff 	mov.w	r0, #4294967295
 8017222:	e7f3      	b.n	801720c <__ssrefill_r+0x22>

08017224 <__ssvfiscanf_r>:
 8017224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017228:	460c      	mov	r4, r1
 801722a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801722e:	2100      	movs	r1, #0
 8017230:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8017234:	49b2      	ldr	r1, [pc, #712]	; (8017500 <__ssvfiscanf_r+0x2dc>)
 8017236:	91a0      	str	r1, [sp, #640]	; 0x280
 8017238:	f10d 0804 	add.w	r8, sp, #4
 801723c:	49b1      	ldr	r1, [pc, #708]	; (8017504 <__ssvfiscanf_r+0x2e0>)
 801723e:	4fb2      	ldr	r7, [pc, #712]	; (8017508 <__ssvfiscanf_r+0x2e4>)
 8017240:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801750c <__ssvfiscanf_r+0x2e8>
 8017244:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017248:	4606      	mov	r6, r0
 801724a:	91a1      	str	r1, [sp, #644]	; 0x284
 801724c:	9300      	str	r3, [sp, #0]
 801724e:	f892 a000 	ldrb.w	sl, [r2]
 8017252:	f1ba 0f00 	cmp.w	sl, #0
 8017256:	f000 8151 	beq.w	80174fc <__ssvfiscanf_r+0x2d8>
 801725a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801725e:	f013 0308 	ands.w	r3, r3, #8
 8017262:	f102 0501 	add.w	r5, r2, #1
 8017266:	d019      	beq.n	801729c <__ssvfiscanf_r+0x78>
 8017268:	6863      	ldr	r3, [r4, #4]
 801726a:	2b00      	cmp	r3, #0
 801726c:	dd0f      	ble.n	801728e <__ssvfiscanf_r+0x6a>
 801726e:	6823      	ldr	r3, [r4, #0]
 8017270:	781a      	ldrb	r2, [r3, #0]
 8017272:	5cba      	ldrb	r2, [r7, r2]
 8017274:	0712      	lsls	r2, r2, #28
 8017276:	d401      	bmi.n	801727c <__ssvfiscanf_r+0x58>
 8017278:	462a      	mov	r2, r5
 801727a:	e7e8      	b.n	801724e <__ssvfiscanf_r+0x2a>
 801727c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801727e:	3201      	adds	r2, #1
 8017280:	9245      	str	r2, [sp, #276]	; 0x114
 8017282:	6862      	ldr	r2, [r4, #4]
 8017284:	3301      	adds	r3, #1
 8017286:	3a01      	subs	r2, #1
 8017288:	6062      	str	r2, [r4, #4]
 801728a:	6023      	str	r3, [r4, #0]
 801728c:	e7ec      	b.n	8017268 <__ssvfiscanf_r+0x44>
 801728e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017290:	4621      	mov	r1, r4
 8017292:	4630      	mov	r0, r6
 8017294:	4798      	blx	r3
 8017296:	2800      	cmp	r0, #0
 8017298:	d0e9      	beq.n	801726e <__ssvfiscanf_r+0x4a>
 801729a:	e7ed      	b.n	8017278 <__ssvfiscanf_r+0x54>
 801729c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80172a0:	f040 8083 	bne.w	80173aa <__ssvfiscanf_r+0x186>
 80172a4:	9341      	str	r3, [sp, #260]	; 0x104
 80172a6:	9343      	str	r3, [sp, #268]	; 0x10c
 80172a8:	7853      	ldrb	r3, [r2, #1]
 80172aa:	2b2a      	cmp	r3, #42	; 0x2a
 80172ac:	bf02      	ittt	eq
 80172ae:	2310      	moveq	r3, #16
 80172b0:	1c95      	addeq	r5, r2, #2
 80172b2:	9341      	streq	r3, [sp, #260]	; 0x104
 80172b4:	220a      	movs	r2, #10
 80172b6:	46ab      	mov	fp, r5
 80172b8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80172bc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80172c0:	2b09      	cmp	r3, #9
 80172c2:	d91d      	bls.n	8017300 <__ssvfiscanf_r+0xdc>
 80172c4:	4891      	ldr	r0, [pc, #580]	; (801750c <__ssvfiscanf_r+0x2e8>)
 80172c6:	2203      	movs	r2, #3
 80172c8:	f7e8 ff9a 	bl	8000200 <memchr>
 80172cc:	b140      	cbz	r0, 80172e0 <__ssvfiscanf_r+0xbc>
 80172ce:	2301      	movs	r3, #1
 80172d0:	eba0 0009 	sub.w	r0, r0, r9
 80172d4:	fa03 f000 	lsl.w	r0, r3, r0
 80172d8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80172da:	4318      	orrs	r0, r3
 80172dc:	9041      	str	r0, [sp, #260]	; 0x104
 80172de:	465d      	mov	r5, fp
 80172e0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80172e4:	2b78      	cmp	r3, #120	; 0x78
 80172e6:	d806      	bhi.n	80172f6 <__ssvfiscanf_r+0xd2>
 80172e8:	2b57      	cmp	r3, #87	; 0x57
 80172ea:	d810      	bhi.n	801730e <__ssvfiscanf_r+0xea>
 80172ec:	2b25      	cmp	r3, #37	; 0x25
 80172ee:	d05c      	beq.n	80173aa <__ssvfiscanf_r+0x186>
 80172f0:	d856      	bhi.n	80173a0 <__ssvfiscanf_r+0x17c>
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d074      	beq.n	80173e0 <__ssvfiscanf_r+0x1bc>
 80172f6:	2303      	movs	r3, #3
 80172f8:	9347      	str	r3, [sp, #284]	; 0x11c
 80172fa:	230a      	movs	r3, #10
 80172fc:	9342      	str	r3, [sp, #264]	; 0x108
 80172fe:	e081      	b.n	8017404 <__ssvfiscanf_r+0x1e0>
 8017300:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017302:	fb02 1303 	mla	r3, r2, r3, r1
 8017306:	3b30      	subs	r3, #48	; 0x30
 8017308:	9343      	str	r3, [sp, #268]	; 0x10c
 801730a:	465d      	mov	r5, fp
 801730c:	e7d3      	b.n	80172b6 <__ssvfiscanf_r+0x92>
 801730e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8017312:	2a20      	cmp	r2, #32
 8017314:	d8ef      	bhi.n	80172f6 <__ssvfiscanf_r+0xd2>
 8017316:	a101      	add	r1, pc, #4	; (adr r1, 801731c <__ssvfiscanf_r+0xf8>)
 8017318:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801731c:	080173ef 	.word	0x080173ef
 8017320:	080172f7 	.word	0x080172f7
 8017324:	080172f7 	.word	0x080172f7
 8017328:	0801744d 	.word	0x0801744d
 801732c:	080172f7 	.word	0x080172f7
 8017330:	080172f7 	.word	0x080172f7
 8017334:	080172f7 	.word	0x080172f7
 8017338:	080172f7 	.word	0x080172f7
 801733c:	080172f7 	.word	0x080172f7
 8017340:	080172f7 	.word	0x080172f7
 8017344:	080172f7 	.word	0x080172f7
 8017348:	08017463 	.word	0x08017463
 801734c:	08017439 	.word	0x08017439
 8017350:	080173a7 	.word	0x080173a7
 8017354:	080173a7 	.word	0x080173a7
 8017358:	080173a7 	.word	0x080173a7
 801735c:	080172f7 	.word	0x080172f7
 8017360:	0801743d 	.word	0x0801743d
 8017364:	080172f7 	.word	0x080172f7
 8017368:	080172f7 	.word	0x080172f7
 801736c:	080172f7 	.word	0x080172f7
 8017370:	080172f7 	.word	0x080172f7
 8017374:	08017473 	.word	0x08017473
 8017378:	08017445 	.word	0x08017445
 801737c:	080173e7 	.word	0x080173e7
 8017380:	080172f7 	.word	0x080172f7
 8017384:	080172f7 	.word	0x080172f7
 8017388:	0801746f 	.word	0x0801746f
 801738c:	080172f7 	.word	0x080172f7
 8017390:	08017439 	.word	0x08017439
 8017394:	080172f7 	.word	0x080172f7
 8017398:	080172f7 	.word	0x080172f7
 801739c:	080173ef 	.word	0x080173ef
 80173a0:	3b45      	subs	r3, #69	; 0x45
 80173a2:	2b02      	cmp	r3, #2
 80173a4:	d8a7      	bhi.n	80172f6 <__ssvfiscanf_r+0xd2>
 80173a6:	2305      	movs	r3, #5
 80173a8:	e02b      	b.n	8017402 <__ssvfiscanf_r+0x1de>
 80173aa:	6863      	ldr	r3, [r4, #4]
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	dd0d      	ble.n	80173cc <__ssvfiscanf_r+0x1a8>
 80173b0:	6823      	ldr	r3, [r4, #0]
 80173b2:	781a      	ldrb	r2, [r3, #0]
 80173b4:	4552      	cmp	r2, sl
 80173b6:	f040 80a1 	bne.w	80174fc <__ssvfiscanf_r+0x2d8>
 80173ba:	3301      	adds	r3, #1
 80173bc:	6862      	ldr	r2, [r4, #4]
 80173be:	6023      	str	r3, [r4, #0]
 80173c0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80173c2:	3a01      	subs	r2, #1
 80173c4:	3301      	adds	r3, #1
 80173c6:	6062      	str	r2, [r4, #4]
 80173c8:	9345      	str	r3, [sp, #276]	; 0x114
 80173ca:	e755      	b.n	8017278 <__ssvfiscanf_r+0x54>
 80173cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80173ce:	4621      	mov	r1, r4
 80173d0:	4630      	mov	r0, r6
 80173d2:	4798      	blx	r3
 80173d4:	2800      	cmp	r0, #0
 80173d6:	d0eb      	beq.n	80173b0 <__ssvfiscanf_r+0x18c>
 80173d8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80173da:	2800      	cmp	r0, #0
 80173dc:	f040 8084 	bne.w	80174e8 <__ssvfiscanf_r+0x2c4>
 80173e0:	f04f 30ff 	mov.w	r0, #4294967295
 80173e4:	e086      	b.n	80174f4 <__ssvfiscanf_r+0x2d0>
 80173e6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80173e8:	f042 0220 	orr.w	r2, r2, #32
 80173ec:	9241      	str	r2, [sp, #260]	; 0x104
 80173ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80173f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80173f4:	9241      	str	r2, [sp, #260]	; 0x104
 80173f6:	2210      	movs	r2, #16
 80173f8:	2b6f      	cmp	r3, #111	; 0x6f
 80173fa:	9242      	str	r2, [sp, #264]	; 0x108
 80173fc:	bf34      	ite	cc
 80173fe:	2303      	movcc	r3, #3
 8017400:	2304      	movcs	r3, #4
 8017402:	9347      	str	r3, [sp, #284]	; 0x11c
 8017404:	6863      	ldr	r3, [r4, #4]
 8017406:	2b00      	cmp	r3, #0
 8017408:	dd41      	ble.n	801748e <__ssvfiscanf_r+0x26a>
 801740a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801740c:	0659      	lsls	r1, r3, #25
 801740e:	d404      	bmi.n	801741a <__ssvfiscanf_r+0x1f6>
 8017410:	6823      	ldr	r3, [r4, #0]
 8017412:	781a      	ldrb	r2, [r3, #0]
 8017414:	5cba      	ldrb	r2, [r7, r2]
 8017416:	0712      	lsls	r2, r2, #28
 8017418:	d440      	bmi.n	801749c <__ssvfiscanf_r+0x278>
 801741a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801741c:	2b02      	cmp	r3, #2
 801741e:	dc4f      	bgt.n	80174c0 <__ssvfiscanf_r+0x29c>
 8017420:	466b      	mov	r3, sp
 8017422:	4622      	mov	r2, r4
 8017424:	a941      	add	r1, sp, #260	; 0x104
 8017426:	4630      	mov	r0, r6
 8017428:	f000 f9ce 	bl	80177c8 <_scanf_chars>
 801742c:	2801      	cmp	r0, #1
 801742e:	d065      	beq.n	80174fc <__ssvfiscanf_r+0x2d8>
 8017430:	2802      	cmp	r0, #2
 8017432:	f47f af21 	bne.w	8017278 <__ssvfiscanf_r+0x54>
 8017436:	e7cf      	b.n	80173d8 <__ssvfiscanf_r+0x1b4>
 8017438:	220a      	movs	r2, #10
 801743a:	e7dd      	b.n	80173f8 <__ssvfiscanf_r+0x1d4>
 801743c:	2300      	movs	r3, #0
 801743e:	9342      	str	r3, [sp, #264]	; 0x108
 8017440:	2303      	movs	r3, #3
 8017442:	e7de      	b.n	8017402 <__ssvfiscanf_r+0x1de>
 8017444:	2308      	movs	r3, #8
 8017446:	9342      	str	r3, [sp, #264]	; 0x108
 8017448:	2304      	movs	r3, #4
 801744a:	e7da      	b.n	8017402 <__ssvfiscanf_r+0x1de>
 801744c:	4629      	mov	r1, r5
 801744e:	4640      	mov	r0, r8
 8017450:	f000 fb18 	bl	8017a84 <__sccl>
 8017454:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801745a:	9341      	str	r3, [sp, #260]	; 0x104
 801745c:	4605      	mov	r5, r0
 801745e:	2301      	movs	r3, #1
 8017460:	e7cf      	b.n	8017402 <__ssvfiscanf_r+0x1de>
 8017462:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017468:	9341      	str	r3, [sp, #260]	; 0x104
 801746a:	2300      	movs	r3, #0
 801746c:	e7c9      	b.n	8017402 <__ssvfiscanf_r+0x1de>
 801746e:	2302      	movs	r3, #2
 8017470:	e7c7      	b.n	8017402 <__ssvfiscanf_r+0x1de>
 8017472:	9841      	ldr	r0, [sp, #260]	; 0x104
 8017474:	06c3      	lsls	r3, r0, #27
 8017476:	f53f aeff 	bmi.w	8017278 <__ssvfiscanf_r+0x54>
 801747a:	9b00      	ldr	r3, [sp, #0]
 801747c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801747e:	1d19      	adds	r1, r3, #4
 8017480:	9100      	str	r1, [sp, #0]
 8017482:	681b      	ldr	r3, [r3, #0]
 8017484:	07c0      	lsls	r0, r0, #31
 8017486:	bf4c      	ite	mi
 8017488:	801a      	strhmi	r2, [r3, #0]
 801748a:	601a      	strpl	r2, [r3, #0]
 801748c:	e6f4      	b.n	8017278 <__ssvfiscanf_r+0x54>
 801748e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017490:	4621      	mov	r1, r4
 8017492:	4630      	mov	r0, r6
 8017494:	4798      	blx	r3
 8017496:	2800      	cmp	r0, #0
 8017498:	d0b7      	beq.n	801740a <__ssvfiscanf_r+0x1e6>
 801749a:	e79d      	b.n	80173d8 <__ssvfiscanf_r+0x1b4>
 801749c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801749e:	3201      	adds	r2, #1
 80174a0:	9245      	str	r2, [sp, #276]	; 0x114
 80174a2:	6862      	ldr	r2, [r4, #4]
 80174a4:	3a01      	subs	r2, #1
 80174a6:	2a00      	cmp	r2, #0
 80174a8:	6062      	str	r2, [r4, #4]
 80174aa:	dd02      	ble.n	80174b2 <__ssvfiscanf_r+0x28e>
 80174ac:	3301      	adds	r3, #1
 80174ae:	6023      	str	r3, [r4, #0]
 80174b0:	e7ae      	b.n	8017410 <__ssvfiscanf_r+0x1ec>
 80174b2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80174b4:	4621      	mov	r1, r4
 80174b6:	4630      	mov	r0, r6
 80174b8:	4798      	blx	r3
 80174ba:	2800      	cmp	r0, #0
 80174bc:	d0a8      	beq.n	8017410 <__ssvfiscanf_r+0x1ec>
 80174be:	e78b      	b.n	80173d8 <__ssvfiscanf_r+0x1b4>
 80174c0:	2b04      	cmp	r3, #4
 80174c2:	dc06      	bgt.n	80174d2 <__ssvfiscanf_r+0x2ae>
 80174c4:	466b      	mov	r3, sp
 80174c6:	4622      	mov	r2, r4
 80174c8:	a941      	add	r1, sp, #260	; 0x104
 80174ca:	4630      	mov	r0, r6
 80174cc:	f000 f9d4 	bl	8017878 <_scanf_i>
 80174d0:	e7ac      	b.n	801742c <__ssvfiscanf_r+0x208>
 80174d2:	4b0f      	ldr	r3, [pc, #60]	; (8017510 <__ssvfiscanf_r+0x2ec>)
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	f43f aecf 	beq.w	8017278 <__ssvfiscanf_r+0x54>
 80174da:	466b      	mov	r3, sp
 80174dc:	4622      	mov	r2, r4
 80174de:	a941      	add	r1, sp, #260	; 0x104
 80174e0:	4630      	mov	r0, r6
 80174e2:	f7fc f94b 	bl	801377c <_scanf_float>
 80174e6:	e7a1      	b.n	801742c <__ssvfiscanf_r+0x208>
 80174e8:	89a3      	ldrh	r3, [r4, #12]
 80174ea:	f013 0f40 	tst.w	r3, #64	; 0x40
 80174ee:	bf18      	it	ne
 80174f0:	f04f 30ff 	movne.w	r0, #4294967295
 80174f4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80174f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174fc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80174fe:	e7f9      	b.n	80174f4 <__ssvfiscanf_r+0x2d0>
 8017500:	08017171 	.word	0x08017171
 8017504:	080171eb 	.word	0x080171eb
 8017508:	08018d61 	.word	0x08018d61
 801750c:	080191ca 	.word	0x080191ca
 8017510:	0801377d 	.word	0x0801377d

08017514 <__sfputc_r>:
 8017514:	6893      	ldr	r3, [r2, #8]
 8017516:	3b01      	subs	r3, #1
 8017518:	2b00      	cmp	r3, #0
 801751a:	b410      	push	{r4}
 801751c:	6093      	str	r3, [r2, #8]
 801751e:	da08      	bge.n	8017532 <__sfputc_r+0x1e>
 8017520:	6994      	ldr	r4, [r2, #24]
 8017522:	42a3      	cmp	r3, r4
 8017524:	db01      	blt.n	801752a <__sfputc_r+0x16>
 8017526:	290a      	cmp	r1, #10
 8017528:	d103      	bne.n	8017532 <__sfputc_r+0x1e>
 801752a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801752e:	f7fd bb7d 	b.w	8014c2c <__swbuf_r>
 8017532:	6813      	ldr	r3, [r2, #0]
 8017534:	1c58      	adds	r0, r3, #1
 8017536:	6010      	str	r0, [r2, #0]
 8017538:	7019      	strb	r1, [r3, #0]
 801753a:	4608      	mov	r0, r1
 801753c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017540:	4770      	bx	lr

08017542 <__sfputs_r>:
 8017542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017544:	4606      	mov	r6, r0
 8017546:	460f      	mov	r7, r1
 8017548:	4614      	mov	r4, r2
 801754a:	18d5      	adds	r5, r2, r3
 801754c:	42ac      	cmp	r4, r5
 801754e:	d101      	bne.n	8017554 <__sfputs_r+0x12>
 8017550:	2000      	movs	r0, #0
 8017552:	e007      	b.n	8017564 <__sfputs_r+0x22>
 8017554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017558:	463a      	mov	r2, r7
 801755a:	4630      	mov	r0, r6
 801755c:	f7ff ffda 	bl	8017514 <__sfputc_r>
 8017560:	1c43      	adds	r3, r0, #1
 8017562:	d1f3      	bne.n	801754c <__sfputs_r+0xa>
 8017564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017568 <_vfiprintf_r>:
 8017568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801756c:	460d      	mov	r5, r1
 801756e:	b09d      	sub	sp, #116	; 0x74
 8017570:	4614      	mov	r4, r2
 8017572:	4698      	mov	r8, r3
 8017574:	4606      	mov	r6, r0
 8017576:	b118      	cbz	r0, 8017580 <_vfiprintf_r+0x18>
 8017578:	6983      	ldr	r3, [r0, #24]
 801757a:	b90b      	cbnz	r3, 8017580 <_vfiprintf_r+0x18>
 801757c:	f7fb fb5e 	bl	8012c3c <__sinit>
 8017580:	4b89      	ldr	r3, [pc, #548]	; (80177a8 <_vfiprintf_r+0x240>)
 8017582:	429d      	cmp	r5, r3
 8017584:	d11b      	bne.n	80175be <_vfiprintf_r+0x56>
 8017586:	6875      	ldr	r5, [r6, #4]
 8017588:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801758a:	07d9      	lsls	r1, r3, #31
 801758c:	d405      	bmi.n	801759a <_vfiprintf_r+0x32>
 801758e:	89ab      	ldrh	r3, [r5, #12]
 8017590:	059a      	lsls	r2, r3, #22
 8017592:	d402      	bmi.n	801759a <_vfiprintf_r+0x32>
 8017594:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017596:	f7fb fc14 	bl	8012dc2 <__retarget_lock_acquire_recursive>
 801759a:	89ab      	ldrh	r3, [r5, #12]
 801759c:	071b      	lsls	r3, r3, #28
 801759e:	d501      	bpl.n	80175a4 <_vfiprintf_r+0x3c>
 80175a0:	692b      	ldr	r3, [r5, #16]
 80175a2:	b9eb      	cbnz	r3, 80175e0 <_vfiprintf_r+0x78>
 80175a4:	4629      	mov	r1, r5
 80175a6:	4630      	mov	r0, r6
 80175a8:	f7fd fba4 	bl	8014cf4 <__swsetup_r>
 80175ac:	b1c0      	cbz	r0, 80175e0 <_vfiprintf_r+0x78>
 80175ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80175b0:	07dc      	lsls	r4, r3, #31
 80175b2:	d50e      	bpl.n	80175d2 <_vfiprintf_r+0x6a>
 80175b4:	f04f 30ff 	mov.w	r0, #4294967295
 80175b8:	b01d      	add	sp, #116	; 0x74
 80175ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175be:	4b7b      	ldr	r3, [pc, #492]	; (80177ac <_vfiprintf_r+0x244>)
 80175c0:	429d      	cmp	r5, r3
 80175c2:	d101      	bne.n	80175c8 <_vfiprintf_r+0x60>
 80175c4:	68b5      	ldr	r5, [r6, #8]
 80175c6:	e7df      	b.n	8017588 <_vfiprintf_r+0x20>
 80175c8:	4b79      	ldr	r3, [pc, #484]	; (80177b0 <_vfiprintf_r+0x248>)
 80175ca:	429d      	cmp	r5, r3
 80175cc:	bf08      	it	eq
 80175ce:	68f5      	ldreq	r5, [r6, #12]
 80175d0:	e7da      	b.n	8017588 <_vfiprintf_r+0x20>
 80175d2:	89ab      	ldrh	r3, [r5, #12]
 80175d4:	0598      	lsls	r0, r3, #22
 80175d6:	d4ed      	bmi.n	80175b4 <_vfiprintf_r+0x4c>
 80175d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80175da:	f7fb fbf3 	bl	8012dc4 <__retarget_lock_release_recursive>
 80175de:	e7e9      	b.n	80175b4 <_vfiprintf_r+0x4c>
 80175e0:	2300      	movs	r3, #0
 80175e2:	9309      	str	r3, [sp, #36]	; 0x24
 80175e4:	2320      	movs	r3, #32
 80175e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80175ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80175ee:	2330      	movs	r3, #48	; 0x30
 80175f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80177b4 <_vfiprintf_r+0x24c>
 80175f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80175f8:	f04f 0901 	mov.w	r9, #1
 80175fc:	4623      	mov	r3, r4
 80175fe:	469a      	mov	sl, r3
 8017600:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017604:	b10a      	cbz	r2, 801760a <_vfiprintf_r+0xa2>
 8017606:	2a25      	cmp	r2, #37	; 0x25
 8017608:	d1f9      	bne.n	80175fe <_vfiprintf_r+0x96>
 801760a:	ebba 0b04 	subs.w	fp, sl, r4
 801760e:	d00b      	beq.n	8017628 <_vfiprintf_r+0xc0>
 8017610:	465b      	mov	r3, fp
 8017612:	4622      	mov	r2, r4
 8017614:	4629      	mov	r1, r5
 8017616:	4630      	mov	r0, r6
 8017618:	f7ff ff93 	bl	8017542 <__sfputs_r>
 801761c:	3001      	adds	r0, #1
 801761e:	f000 80aa 	beq.w	8017776 <_vfiprintf_r+0x20e>
 8017622:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017624:	445a      	add	r2, fp
 8017626:	9209      	str	r2, [sp, #36]	; 0x24
 8017628:	f89a 3000 	ldrb.w	r3, [sl]
 801762c:	2b00      	cmp	r3, #0
 801762e:	f000 80a2 	beq.w	8017776 <_vfiprintf_r+0x20e>
 8017632:	2300      	movs	r3, #0
 8017634:	f04f 32ff 	mov.w	r2, #4294967295
 8017638:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801763c:	f10a 0a01 	add.w	sl, sl, #1
 8017640:	9304      	str	r3, [sp, #16]
 8017642:	9307      	str	r3, [sp, #28]
 8017644:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017648:	931a      	str	r3, [sp, #104]	; 0x68
 801764a:	4654      	mov	r4, sl
 801764c:	2205      	movs	r2, #5
 801764e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017652:	4858      	ldr	r0, [pc, #352]	; (80177b4 <_vfiprintf_r+0x24c>)
 8017654:	f7e8 fdd4 	bl	8000200 <memchr>
 8017658:	9a04      	ldr	r2, [sp, #16]
 801765a:	b9d8      	cbnz	r0, 8017694 <_vfiprintf_r+0x12c>
 801765c:	06d1      	lsls	r1, r2, #27
 801765e:	bf44      	itt	mi
 8017660:	2320      	movmi	r3, #32
 8017662:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017666:	0713      	lsls	r3, r2, #28
 8017668:	bf44      	itt	mi
 801766a:	232b      	movmi	r3, #43	; 0x2b
 801766c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017670:	f89a 3000 	ldrb.w	r3, [sl]
 8017674:	2b2a      	cmp	r3, #42	; 0x2a
 8017676:	d015      	beq.n	80176a4 <_vfiprintf_r+0x13c>
 8017678:	9a07      	ldr	r2, [sp, #28]
 801767a:	4654      	mov	r4, sl
 801767c:	2000      	movs	r0, #0
 801767e:	f04f 0c0a 	mov.w	ip, #10
 8017682:	4621      	mov	r1, r4
 8017684:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017688:	3b30      	subs	r3, #48	; 0x30
 801768a:	2b09      	cmp	r3, #9
 801768c:	d94e      	bls.n	801772c <_vfiprintf_r+0x1c4>
 801768e:	b1b0      	cbz	r0, 80176be <_vfiprintf_r+0x156>
 8017690:	9207      	str	r2, [sp, #28]
 8017692:	e014      	b.n	80176be <_vfiprintf_r+0x156>
 8017694:	eba0 0308 	sub.w	r3, r0, r8
 8017698:	fa09 f303 	lsl.w	r3, r9, r3
 801769c:	4313      	orrs	r3, r2
 801769e:	9304      	str	r3, [sp, #16]
 80176a0:	46a2      	mov	sl, r4
 80176a2:	e7d2      	b.n	801764a <_vfiprintf_r+0xe2>
 80176a4:	9b03      	ldr	r3, [sp, #12]
 80176a6:	1d19      	adds	r1, r3, #4
 80176a8:	681b      	ldr	r3, [r3, #0]
 80176aa:	9103      	str	r1, [sp, #12]
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	bfbb      	ittet	lt
 80176b0:	425b      	neglt	r3, r3
 80176b2:	f042 0202 	orrlt.w	r2, r2, #2
 80176b6:	9307      	strge	r3, [sp, #28]
 80176b8:	9307      	strlt	r3, [sp, #28]
 80176ba:	bfb8      	it	lt
 80176bc:	9204      	strlt	r2, [sp, #16]
 80176be:	7823      	ldrb	r3, [r4, #0]
 80176c0:	2b2e      	cmp	r3, #46	; 0x2e
 80176c2:	d10c      	bne.n	80176de <_vfiprintf_r+0x176>
 80176c4:	7863      	ldrb	r3, [r4, #1]
 80176c6:	2b2a      	cmp	r3, #42	; 0x2a
 80176c8:	d135      	bne.n	8017736 <_vfiprintf_r+0x1ce>
 80176ca:	9b03      	ldr	r3, [sp, #12]
 80176cc:	1d1a      	adds	r2, r3, #4
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	9203      	str	r2, [sp, #12]
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	bfb8      	it	lt
 80176d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80176da:	3402      	adds	r4, #2
 80176dc:	9305      	str	r3, [sp, #20]
 80176de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80177c4 <_vfiprintf_r+0x25c>
 80176e2:	7821      	ldrb	r1, [r4, #0]
 80176e4:	2203      	movs	r2, #3
 80176e6:	4650      	mov	r0, sl
 80176e8:	f7e8 fd8a 	bl	8000200 <memchr>
 80176ec:	b140      	cbz	r0, 8017700 <_vfiprintf_r+0x198>
 80176ee:	2340      	movs	r3, #64	; 0x40
 80176f0:	eba0 000a 	sub.w	r0, r0, sl
 80176f4:	fa03 f000 	lsl.w	r0, r3, r0
 80176f8:	9b04      	ldr	r3, [sp, #16]
 80176fa:	4303      	orrs	r3, r0
 80176fc:	3401      	adds	r4, #1
 80176fe:	9304      	str	r3, [sp, #16]
 8017700:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017704:	482c      	ldr	r0, [pc, #176]	; (80177b8 <_vfiprintf_r+0x250>)
 8017706:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801770a:	2206      	movs	r2, #6
 801770c:	f7e8 fd78 	bl	8000200 <memchr>
 8017710:	2800      	cmp	r0, #0
 8017712:	d03f      	beq.n	8017794 <_vfiprintf_r+0x22c>
 8017714:	4b29      	ldr	r3, [pc, #164]	; (80177bc <_vfiprintf_r+0x254>)
 8017716:	bb1b      	cbnz	r3, 8017760 <_vfiprintf_r+0x1f8>
 8017718:	9b03      	ldr	r3, [sp, #12]
 801771a:	3307      	adds	r3, #7
 801771c:	f023 0307 	bic.w	r3, r3, #7
 8017720:	3308      	adds	r3, #8
 8017722:	9303      	str	r3, [sp, #12]
 8017724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017726:	443b      	add	r3, r7
 8017728:	9309      	str	r3, [sp, #36]	; 0x24
 801772a:	e767      	b.n	80175fc <_vfiprintf_r+0x94>
 801772c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017730:	460c      	mov	r4, r1
 8017732:	2001      	movs	r0, #1
 8017734:	e7a5      	b.n	8017682 <_vfiprintf_r+0x11a>
 8017736:	2300      	movs	r3, #0
 8017738:	3401      	adds	r4, #1
 801773a:	9305      	str	r3, [sp, #20]
 801773c:	4619      	mov	r1, r3
 801773e:	f04f 0c0a 	mov.w	ip, #10
 8017742:	4620      	mov	r0, r4
 8017744:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017748:	3a30      	subs	r2, #48	; 0x30
 801774a:	2a09      	cmp	r2, #9
 801774c:	d903      	bls.n	8017756 <_vfiprintf_r+0x1ee>
 801774e:	2b00      	cmp	r3, #0
 8017750:	d0c5      	beq.n	80176de <_vfiprintf_r+0x176>
 8017752:	9105      	str	r1, [sp, #20]
 8017754:	e7c3      	b.n	80176de <_vfiprintf_r+0x176>
 8017756:	fb0c 2101 	mla	r1, ip, r1, r2
 801775a:	4604      	mov	r4, r0
 801775c:	2301      	movs	r3, #1
 801775e:	e7f0      	b.n	8017742 <_vfiprintf_r+0x1da>
 8017760:	ab03      	add	r3, sp, #12
 8017762:	9300      	str	r3, [sp, #0]
 8017764:	462a      	mov	r2, r5
 8017766:	4b16      	ldr	r3, [pc, #88]	; (80177c0 <_vfiprintf_r+0x258>)
 8017768:	a904      	add	r1, sp, #16
 801776a:	4630      	mov	r0, r6
 801776c:	f7fb fc3c 	bl	8012fe8 <_printf_float>
 8017770:	4607      	mov	r7, r0
 8017772:	1c78      	adds	r0, r7, #1
 8017774:	d1d6      	bne.n	8017724 <_vfiprintf_r+0x1bc>
 8017776:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017778:	07d9      	lsls	r1, r3, #31
 801777a:	d405      	bmi.n	8017788 <_vfiprintf_r+0x220>
 801777c:	89ab      	ldrh	r3, [r5, #12]
 801777e:	059a      	lsls	r2, r3, #22
 8017780:	d402      	bmi.n	8017788 <_vfiprintf_r+0x220>
 8017782:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017784:	f7fb fb1e 	bl	8012dc4 <__retarget_lock_release_recursive>
 8017788:	89ab      	ldrh	r3, [r5, #12]
 801778a:	065b      	lsls	r3, r3, #25
 801778c:	f53f af12 	bmi.w	80175b4 <_vfiprintf_r+0x4c>
 8017790:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017792:	e711      	b.n	80175b8 <_vfiprintf_r+0x50>
 8017794:	ab03      	add	r3, sp, #12
 8017796:	9300      	str	r3, [sp, #0]
 8017798:	462a      	mov	r2, r5
 801779a:	4b09      	ldr	r3, [pc, #36]	; (80177c0 <_vfiprintf_r+0x258>)
 801779c:	a904      	add	r1, sp, #16
 801779e:	4630      	mov	r0, r6
 80177a0:	f7fb fec6 	bl	8013530 <_printf_i>
 80177a4:	e7e4      	b.n	8017770 <_vfiprintf_r+0x208>
 80177a6:	bf00      	nop
 80177a8:	08018e84 	.word	0x08018e84
 80177ac:	08018ea4 	.word	0x08018ea4
 80177b0:	08018e64 	.word	0x08018e64
 80177b4:	080191c4 	.word	0x080191c4
 80177b8:	080191ce 	.word	0x080191ce
 80177bc:	08012fe9 	.word	0x08012fe9
 80177c0:	08017543 	.word	0x08017543
 80177c4:	080191ca 	.word	0x080191ca

080177c8 <_scanf_chars>:
 80177c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80177cc:	4615      	mov	r5, r2
 80177ce:	688a      	ldr	r2, [r1, #8]
 80177d0:	4680      	mov	r8, r0
 80177d2:	460c      	mov	r4, r1
 80177d4:	b932      	cbnz	r2, 80177e4 <_scanf_chars+0x1c>
 80177d6:	698a      	ldr	r2, [r1, #24]
 80177d8:	2a00      	cmp	r2, #0
 80177da:	bf0c      	ite	eq
 80177dc:	2201      	moveq	r2, #1
 80177de:	f04f 32ff 	movne.w	r2, #4294967295
 80177e2:	608a      	str	r2, [r1, #8]
 80177e4:	6822      	ldr	r2, [r4, #0]
 80177e6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8017874 <_scanf_chars+0xac>
 80177ea:	06d1      	lsls	r1, r2, #27
 80177ec:	bf5f      	itttt	pl
 80177ee:	681a      	ldrpl	r2, [r3, #0]
 80177f0:	1d11      	addpl	r1, r2, #4
 80177f2:	6019      	strpl	r1, [r3, #0]
 80177f4:	6816      	ldrpl	r6, [r2, #0]
 80177f6:	2700      	movs	r7, #0
 80177f8:	69a0      	ldr	r0, [r4, #24]
 80177fa:	b188      	cbz	r0, 8017820 <_scanf_chars+0x58>
 80177fc:	2801      	cmp	r0, #1
 80177fe:	d107      	bne.n	8017810 <_scanf_chars+0x48>
 8017800:	682b      	ldr	r3, [r5, #0]
 8017802:	781a      	ldrb	r2, [r3, #0]
 8017804:	6963      	ldr	r3, [r4, #20]
 8017806:	5c9b      	ldrb	r3, [r3, r2]
 8017808:	b953      	cbnz	r3, 8017820 <_scanf_chars+0x58>
 801780a:	bb27      	cbnz	r7, 8017856 <_scanf_chars+0x8e>
 801780c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017810:	2802      	cmp	r0, #2
 8017812:	d120      	bne.n	8017856 <_scanf_chars+0x8e>
 8017814:	682b      	ldr	r3, [r5, #0]
 8017816:	781b      	ldrb	r3, [r3, #0]
 8017818:	f813 3009 	ldrb.w	r3, [r3, r9]
 801781c:	071b      	lsls	r3, r3, #28
 801781e:	d41a      	bmi.n	8017856 <_scanf_chars+0x8e>
 8017820:	6823      	ldr	r3, [r4, #0]
 8017822:	06da      	lsls	r2, r3, #27
 8017824:	bf5e      	ittt	pl
 8017826:	682b      	ldrpl	r3, [r5, #0]
 8017828:	781b      	ldrbpl	r3, [r3, #0]
 801782a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801782e:	682a      	ldr	r2, [r5, #0]
 8017830:	686b      	ldr	r3, [r5, #4]
 8017832:	3201      	adds	r2, #1
 8017834:	602a      	str	r2, [r5, #0]
 8017836:	68a2      	ldr	r2, [r4, #8]
 8017838:	3b01      	subs	r3, #1
 801783a:	3a01      	subs	r2, #1
 801783c:	606b      	str	r3, [r5, #4]
 801783e:	3701      	adds	r7, #1
 8017840:	60a2      	str	r2, [r4, #8]
 8017842:	b142      	cbz	r2, 8017856 <_scanf_chars+0x8e>
 8017844:	2b00      	cmp	r3, #0
 8017846:	dcd7      	bgt.n	80177f8 <_scanf_chars+0x30>
 8017848:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801784c:	4629      	mov	r1, r5
 801784e:	4640      	mov	r0, r8
 8017850:	4798      	blx	r3
 8017852:	2800      	cmp	r0, #0
 8017854:	d0d0      	beq.n	80177f8 <_scanf_chars+0x30>
 8017856:	6823      	ldr	r3, [r4, #0]
 8017858:	f013 0310 	ands.w	r3, r3, #16
 801785c:	d105      	bne.n	801786a <_scanf_chars+0xa2>
 801785e:	68e2      	ldr	r2, [r4, #12]
 8017860:	3201      	adds	r2, #1
 8017862:	60e2      	str	r2, [r4, #12]
 8017864:	69a2      	ldr	r2, [r4, #24]
 8017866:	b102      	cbz	r2, 801786a <_scanf_chars+0xa2>
 8017868:	7033      	strb	r3, [r6, #0]
 801786a:	6923      	ldr	r3, [r4, #16]
 801786c:	441f      	add	r7, r3
 801786e:	6127      	str	r7, [r4, #16]
 8017870:	2000      	movs	r0, #0
 8017872:	e7cb      	b.n	801780c <_scanf_chars+0x44>
 8017874:	08018d61 	.word	0x08018d61

08017878 <_scanf_i>:
 8017878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801787c:	4698      	mov	r8, r3
 801787e:	4b74      	ldr	r3, [pc, #464]	; (8017a50 <_scanf_i+0x1d8>)
 8017880:	460c      	mov	r4, r1
 8017882:	4682      	mov	sl, r0
 8017884:	4616      	mov	r6, r2
 8017886:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801788a:	b087      	sub	sp, #28
 801788c:	ab03      	add	r3, sp, #12
 801788e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017892:	4b70      	ldr	r3, [pc, #448]	; (8017a54 <_scanf_i+0x1dc>)
 8017894:	69a1      	ldr	r1, [r4, #24]
 8017896:	4a70      	ldr	r2, [pc, #448]	; (8017a58 <_scanf_i+0x1e0>)
 8017898:	2903      	cmp	r1, #3
 801789a:	bf18      	it	ne
 801789c:	461a      	movne	r2, r3
 801789e:	68a3      	ldr	r3, [r4, #8]
 80178a0:	9201      	str	r2, [sp, #4]
 80178a2:	1e5a      	subs	r2, r3, #1
 80178a4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80178a8:	bf88      	it	hi
 80178aa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80178ae:	4627      	mov	r7, r4
 80178b0:	bf82      	ittt	hi
 80178b2:	eb03 0905 	addhi.w	r9, r3, r5
 80178b6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80178ba:	60a3      	strhi	r3, [r4, #8]
 80178bc:	f857 3b1c 	ldr.w	r3, [r7], #28
 80178c0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80178c4:	bf98      	it	ls
 80178c6:	f04f 0900 	movls.w	r9, #0
 80178ca:	6023      	str	r3, [r4, #0]
 80178cc:	463d      	mov	r5, r7
 80178ce:	f04f 0b00 	mov.w	fp, #0
 80178d2:	6831      	ldr	r1, [r6, #0]
 80178d4:	ab03      	add	r3, sp, #12
 80178d6:	7809      	ldrb	r1, [r1, #0]
 80178d8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80178dc:	2202      	movs	r2, #2
 80178de:	f7e8 fc8f 	bl	8000200 <memchr>
 80178e2:	b328      	cbz	r0, 8017930 <_scanf_i+0xb8>
 80178e4:	f1bb 0f01 	cmp.w	fp, #1
 80178e8:	d159      	bne.n	801799e <_scanf_i+0x126>
 80178ea:	6862      	ldr	r2, [r4, #4]
 80178ec:	b92a      	cbnz	r2, 80178fa <_scanf_i+0x82>
 80178ee:	6822      	ldr	r2, [r4, #0]
 80178f0:	2308      	movs	r3, #8
 80178f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80178f6:	6063      	str	r3, [r4, #4]
 80178f8:	6022      	str	r2, [r4, #0]
 80178fa:	6822      	ldr	r2, [r4, #0]
 80178fc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017900:	6022      	str	r2, [r4, #0]
 8017902:	68a2      	ldr	r2, [r4, #8]
 8017904:	1e51      	subs	r1, r2, #1
 8017906:	60a1      	str	r1, [r4, #8]
 8017908:	b192      	cbz	r2, 8017930 <_scanf_i+0xb8>
 801790a:	6832      	ldr	r2, [r6, #0]
 801790c:	1c51      	adds	r1, r2, #1
 801790e:	6031      	str	r1, [r6, #0]
 8017910:	7812      	ldrb	r2, [r2, #0]
 8017912:	f805 2b01 	strb.w	r2, [r5], #1
 8017916:	6872      	ldr	r2, [r6, #4]
 8017918:	3a01      	subs	r2, #1
 801791a:	2a00      	cmp	r2, #0
 801791c:	6072      	str	r2, [r6, #4]
 801791e:	dc07      	bgt.n	8017930 <_scanf_i+0xb8>
 8017920:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8017924:	4631      	mov	r1, r6
 8017926:	4650      	mov	r0, sl
 8017928:	4790      	blx	r2
 801792a:	2800      	cmp	r0, #0
 801792c:	f040 8085 	bne.w	8017a3a <_scanf_i+0x1c2>
 8017930:	f10b 0b01 	add.w	fp, fp, #1
 8017934:	f1bb 0f03 	cmp.w	fp, #3
 8017938:	d1cb      	bne.n	80178d2 <_scanf_i+0x5a>
 801793a:	6863      	ldr	r3, [r4, #4]
 801793c:	b90b      	cbnz	r3, 8017942 <_scanf_i+0xca>
 801793e:	230a      	movs	r3, #10
 8017940:	6063      	str	r3, [r4, #4]
 8017942:	6863      	ldr	r3, [r4, #4]
 8017944:	4945      	ldr	r1, [pc, #276]	; (8017a5c <_scanf_i+0x1e4>)
 8017946:	6960      	ldr	r0, [r4, #20]
 8017948:	1ac9      	subs	r1, r1, r3
 801794a:	f000 f89b 	bl	8017a84 <__sccl>
 801794e:	f04f 0b00 	mov.w	fp, #0
 8017952:	68a3      	ldr	r3, [r4, #8]
 8017954:	6822      	ldr	r2, [r4, #0]
 8017956:	2b00      	cmp	r3, #0
 8017958:	d03d      	beq.n	80179d6 <_scanf_i+0x15e>
 801795a:	6831      	ldr	r1, [r6, #0]
 801795c:	6960      	ldr	r0, [r4, #20]
 801795e:	f891 c000 	ldrb.w	ip, [r1]
 8017962:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017966:	2800      	cmp	r0, #0
 8017968:	d035      	beq.n	80179d6 <_scanf_i+0x15e>
 801796a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801796e:	d124      	bne.n	80179ba <_scanf_i+0x142>
 8017970:	0510      	lsls	r0, r2, #20
 8017972:	d522      	bpl.n	80179ba <_scanf_i+0x142>
 8017974:	f10b 0b01 	add.w	fp, fp, #1
 8017978:	f1b9 0f00 	cmp.w	r9, #0
 801797c:	d003      	beq.n	8017986 <_scanf_i+0x10e>
 801797e:	3301      	adds	r3, #1
 8017980:	f109 39ff 	add.w	r9, r9, #4294967295
 8017984:	60a3      	str	r3, [r4, #8]
 8017986:	6873      	ldr	r3, [r6, #4]
 8017988:	3b01      	subs	r3, #1
 801798a:	2b00      	cmp	r3, #0
 801798c:	6073      	str	r3, [r6, #4]
 801798e:	dd1b      	ble.n	80179c8 <_scanf_i+0x150>
 8017990:	6833      	ldr	r3, [r6, #0]
 8017992:	3301      	adds	r3, #1
 8017994:	6033      	str	r3, [r6, #0]
 8017996:	68a3      	ldr	r3, [r4, #8]
 8017998:	3b01      	subs	r3, #1
 801799a:	60a3      	str	r3, [r4, #8]
 801799c:	e7d9      	b.n	8017952 <_scanf_i+0xda>
 801799e:	f1bb 0f02 	cmp.w	fp, #2
 80179a2:	d1ae      	bne.n	8017902 <_scanf_i+0x8a>
 80179a4:	6822      	ldr	r2, [r4, #0]
 80179a6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80179aa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80179ae:	d1bf      	bne.n	8017930 <_scanf_i+0xb8>
 80179b0:	2310      	movs	r3, #16
 80179b2:	6063      	str	r3, [r4, #4]
 80179b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80179b8:	e7a2      	b.n	8017900 <_scanf_i+0x88>
 80179ba:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80179be:	6022      	str	r2, [r4, #0]
 80179c0:	780b      	ldrb	r3, [r1, #0]
 80179c2:	f805 3b01 	strb.w	r3, [r5], #1
 80179c6:	e7de      	b.n	8017986 <_scanf_i+0x10e>
 80179c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80179cc:	4631      	mov	r1, r6
 80179ce:	4650      	mov	r0, sl
 80179d0:	4798      	blx	r3
 80179d2:	2800      	cmp	r0, #0
 80179d4:	d0df      	beq.n	8017996 <_scanf_i+0x11e>
 80179d6:	6823      	ldr	r3, [r4, #0]
 80179d8:	05d9      	lsls	r1, r3, #23
 80179da:	d50d      	bpl.n	80179f8 <_scanf_i+0x180>
 80179dc:	42bd      	cmp	r5, r7
 80179de:	d909      	bls.n	80179f4 <_scanf_i+0x17c>
 80179e0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80179e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80179e8:	4632      	mov	r2, r6
 80179ea:	4650      	mov	r0, sl
 80179ec:	4798      	blx	r3
 80179ee:	f105 39ff 	add.w	r9, r5, #4294967295
 80179f2:	464d      	mov	r5, r9
 80179f4:	42bd      	cmp	r5, r7
 80179f6:	d028      	beq.n	8017a4a <_scanf_i+0x1d2>
 80179f8:	6822      	ldr	r2, [r4, #0]
 80179fa:	f012 0210 	ands.w	r2, r2, #16
 80179fe:	d113      	bne.n	8017a28 <_scanf_i+0x1b0>
 8017a00:	702a      	strb	r2, [r5, #0]
 8017a02:	6863      	ldr	r3, [r4, #4]
 8017a04:	9e01      	ldr	r6, [sp, #4]
 8017a06:	4639      	mov	r1, r7
 8017a08:	4650      	mov	r0, sl
 8017a0a:	47b0      	blx	r6
 8017a0c:	f8d8 3000 	ldr.w	r3, [r8]
 8017a10:	6821      	ldr	r1, [r4, #0]
 8017a12:	1d1a      	adds	r2, r3, #4
 8017a14:	f8c8 2000 	str.w	r2, [r8]
 8017a18:	f011 0f20 	tst.w	r1, #32
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	d00f      	beq.n	8017a40 <_scanf_i+0x1c8>
 8017a20:	6018      	str	r0, [r3, #0]
 8017a22:	68e3      	ldr	r3, [r4, #12]
 8017a24:	3301      	adds	r3, #1
 8017a26:	60e3      	str	r3, [r4, #12]
 8017a28:	1bed      	subs	r5, r5, r7
 8017a2a:	44ab      	add	fp, r5
 8017a2c:	6925      	ldr	r5, [r4, #16]
 8017a2e:	445d      	add	r5, fp
 8017a30:	6125      	str	r5, [r4, #16]
 8017a32:	2000      	movs	r0, #0
 8017a34:	b007      	add	sp, #28
 8017a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a3a:	f04f 0b00 	mov.w	fp, #0
 8017a3e:	e7ca      	b.n	80179d6 <_scanf_i+0x15e>
 8017a40:	07ca      	lsls	r2, r1, #31
 8017a42:	bf4c      	ite	mi
 8017a44:	8018      	strhmi	r0, [r3, #0]
 8017a46:	6018      	strpl	r0, [r3, #0]
 8017a48:	e7eb      	b.n	8017a22 <_scanf_i+0x1aa>
 8017a4a:	2001      	movs	r0, #1
 8017a4c:	e7f2      	b.n	8017a34 <_scanf_i+0x1bc>
 8017a4e:	bf00      	nop
 8017a50:	08018cbc 	.word	0x08018cbc
 8017a54:	08017bf1 	.word	0x08017bf1
 8017a58:	08014ba1 	.word	0x08014ba1
 8017a5c:	080191ee 	.word	0x080191ee

08017a60 <_read_r>:
 8017a60:	b538      	push	{r3, r4, r5, lr}
 8017a62:	4d07      	ldr	r5, [pc, #28]	; (8017a80 <_read_r+0x20>)
 8017a64:	4604      	mov	r4, r0
 8017a66:	4608      	mov	r0, r1
 8017a68:	4611      	mov	r1, r2
 8017a6a:	2200      	movs	r2, #0
 8017a6c:	602a      	str	r2, [r5, #0]
 8017a6e:	461a      	mov	r2, r3
 8017a70:	f000 fa1e 	bl	8017eb0 <_read>
 8017a74:	1c43      	adds	r3, r0, #1
 8017a76:	d102      	bne.n	8017a7e <_read_r+0x1e>
 8017a78:	682b      	ldr	r3, [r5, #0]
 8017a7a:	b103      	cbz	r3, 8017a7e <_read_r+0x1e>
 8017a7c:	6023      	str	r3, [r4, #0]
 8017a7e:	bd38      	pop	{r3, r4, r5, pc}
 8017a80:	20006920 	.word	0x20006920

08017a84 <__sccl>:
 8017a84:	b570      	push	{r4, r5, r6, lr}
 8017a86:	780b      	ldrb	r3, [r1, #0]
 8017a88:	4604      	mov	r4, r0
 8017a8a:	2b5e      	cmp	r3, #94	; 0x5e
 8017a8c:	bf0b      	itete	eq
 8017a8e:	784b      	ldrbeq	r3, [r1, #1]
 8017a90:	1c48      	addne	r0, r1, #1
 8017a92:	1c88      	addeq	r0, r1, #2
 8017a94:	2200      	movne	r2, #0
 8017a96:	bf08      	it	eq
 8017a98:	2201      	moveq	r2, #1
 8017a9a:	1e61      	subs	r1, r4, #1
 8017a9c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8017aa0:	f801 2f01 	strb.w	r2, [r1, #1]!
 8017aa4:	42a9      	cmp	r1, r5
 8017aa6:	d1fb      	bne.n	8017aa0 <__sccl+0x1c>
 8017aa8:	b90b      	cbnz	r3, 8017aae <__sccl+0x2a>
 8017aaa:	3801      	subs	r0, #1
 8017aac:	bd70      	pop	{r4, r5, r6, pc}
 8017aae:	f082 0101 	eor.w	r1, r2, #1
 8017ab2:	54e1      	strb	r1, [r4, r3]
 8017ab4:	1c42      	adds	r2, r0, #1
 8017ab6:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8017aba:	2d2d      	cmp	r5, #45	; 0x2d
 8017abc:	f102 36ff 	add.w	r6, r2, #4294967295
 8017ac0:	4610      	mov	r0, r2
 8017ac2:	d006      	beq.n	8017ad2 <__sccl+0x4e>
 8017ac4:	2d5d      	cmp	r5, #93	; 0x5d
 8017ac6:	d0f1      	beq.n	8017aac <__sccl+0x28>
 8017ac8:	b90d      	cbnz	r5, 8017ace <__sccl+0x4a>
 8017aca:	4630      	mov	r0, r6
 8017acc:	e7ee      	b.n	8017aac <__sccl+0x28>
 8017ace:	462b      	mov	r3, r5
 8017ad0:	e7ef      	b.n	8017ab2 <__sccl+0x2e>
 8017ad2:	7816      	ldrb	r6, [r2, #0]
 8017ad4:	2e5d      	cmp	r6, #93	; 0x5d
 8017ad6:	d0fa      	beq.n	8017ace <__sccl+0x4a>
 8017ad8:	42b3      	cmp	r3, r6
 8017ada:	dcf8      	bgt.n	8017ace <__sccl+0x4a>
 8017adc:	4618      	mov	r0, r3
 8017ade:	3001      	adds	r0, #1
 8017ae0:	4286      	cmp	r6, r0
 8017ae2:	5421      	strb	r1, [r4, r0]
 8017ae4:	dcfb      	bgt.n	8017ade <__sccl+0x5a>
 8017ae6:	43d8      	mvns	r0, r3
 8017ae8:	4430      	add	r0, r6
 8017aea:	1c5d      	adds	r5, r3, #1
 8017aec:	42b3      	cmp	r3, r6
 8017aee:	bfa8      	it	ge
 8017af0:	2000      	movge	r0, #0
 8017af2:	182b      	adds	r3, r5, r0
 8017af4:	3202      	adds	r2, #2
 8017af6:	e7de      	b.n	8017ab6 <__sccl+0x32>

08017af8 <_strtoul_l.isra.0>:
 8017af8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017afc:	4e3b      	ldr	r6, [pc, #236]	; (8017bec <_strtoul_l.isra.0+0xf4>)
 8017afe:	4686      	mov	lr, r0
 8017b00:	468c      	mov	ip, r1
 8017b02:	4660      	mov	r0, ip
 8017b04:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8017b08:	5da5      	ldrb	r5, [r4, r6]
 8017b0a:	f015 0508 	ands.w	r5, r5, #8
 8017b0e:	d1f8      	bne.n	8017b02 <_strtoul_l.isra.0+0xa>
 8017b10:	2c2d      	cmp	r4, #45	; 0x2d
 8017b12:	d134      	bne.n	8017b7e <_strtoul_l.isra.0+0x86>
 8017b14:	f89c 4000 	ldrb.w	r4, [ip]
 8017b18:	f04f 0801 	mov.w	r8, #1
 8017b1c:	f100 0c02 	add.w	ip, r0, #2
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d05e      	beq.n	8017be2 <_strtoul_l.isra.0+0xea>
 8017b24:	2b10      	cmp	r3, #16
 8017b26:	d10c      	bne.n	8017b42 <_strtoul_l.isra.0+0x4a>
 8017b28:	2c30      	cmp	r4, #48	; 0x30
 8017b2a:	d10a      	bne.n	8017b42 <_strtoul_l.isra.0+0x4a>
 8017b2c:	f89c 0000 	ldrb.w	r0, [ip]
 8017b30:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8017b34:	2858      	cmp	r0, #88	; 0x58
 8017b36:	d14f      	bne.n	8017bd8 <_strtoul_l.isra.0+0xe0>
 8017b38:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8017b3c:	2310      	movs	r3, #16
 8017b3e:	f10c 0c02 	add.w	ip, ip, #2
 8017b42:	f04f 37ff 	mov.w	r7, #4294967295
 8017b46:	2500      	movs	r5, #0
 8017b48:	fbb7 f7f3 	udiv	r7, r7, r3
 8017b4c:	fb03 f907 	mul.w	r9, r3, r7
 8017b50:	ea6f 0909 	mvn.w	r9, r9
 8017b54:	4628      	mov	r0, r5
 8017b56:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8017b5a:	2e09      	cmp	r6, #9
 8017b5c:	d818      	bhi.n	8017b90 <_strtoul_l.isra.0+0x98>
 8017b5e:	4634      	mov	r4, r6
 8017b60:	42a3      	cmp	r3, r4
 8017b62:	dd24      	ble.n	8017bae <_strtoul_l.isra.0+0xb6>
 8017b64:	2d00      	cmp	r5, #0
 8017b66:	db1f      	blt.n	8017ba8 <_strtoul_l.isra.0+0xb0>
 8017b68:	4287      	cmp	r7, r0
 8017b6a:	d31d      	bcc.n	8017ba8 <_strtoul_l.isra.0+0xb0>
 8017b6c:	d101      	bne.n	8017b72 <_strtoul_l.isra.0+0x7a>
 8017b6e:	45a1      	cmp	r9, r4
 8017b70:	db1a      	blt.n	8017ba8 <_strtoul_l.isra.0+0xb0>
 8017b72:	fb00 4003 	mla	r0, r0, r3, r4
 8017b76:	2501      	movs	r5, #1
 8017b78:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8017b7c:	e7eb      	b.n	8017b56 <_strtoul_l.isra.0+0x5e>
 8017b7e:	2c2b      	cmp	r4, #43	; 0x2b
 8017b80:	bf08      	it	eq
 8017b82:	f89c 4000 	ldrbeq.w	r4, [ip]
 8017b86:	46a8      	mov	r8, r5
 8017b88:	bf08      	it	eq
 8017b8a:	f100 0c02 	addeq.w	ip, r0, #2
 8017b8e:	e7c7      	b.n	8017b20 <_strtoul_l.isra.0+0x28>
 8017b90:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8017b94:	2e19      	cmp	r6, #25
 8017b96:	d801      	bhi.n	8017b9c <_strtoul_l.isra.0+0xa4>
 8017b98:	3c37      	subs	r4, #55	; 0x37
 8017b9a:	e7e1      	b.n	8017b60 <_strtoul_l.isra.0+0x68>
 8017b9c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8017ba0:	2e19      	cmp	r6, #25
 8017ba2:	d804      	bhi.n	8017bae <_strtoul_l.isra.0+0xb6>
 8017ba4:	3c57      	subs	r4, #87	; 0x57
 8017ba6:	e7db      	b.n	8017b60 <_strtoul_l.isra.0+0x68>
 8017ba8:	f04f 35ff 	mov.w	r5, #4294967295
 8017bac:	e7e4      	b.n	8017b78 <_strtoul_l.isra.0+0x80>
 8017bae:	2d00      	cmp	r5, #0
 8017bb0:	da07      	bge.n	8017bc2 <_strtoul_l.isra.0+0xca>
 8017bb2:	2322      	movs	r3, #34	; 0x22
 8017bb4:	f8ce 3000 	str.w	r3, [lr]
 8017bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8017bbc:	b942      	cbnz	r2, 8017bd0 <_strtoul_l.isra.0+0xd8>
 8017bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017bc2:	f1b8 0f00 	cmp.w	r8, #0
 8017bc6:	d000      	beq.n	8017bca <_strtoul_l.isra.0+0xd2>
 8017bc8:	4240      	negs	r0, r0
 8017bca:	2a00      	cmp	r2, #0
 8017bcc:	d0f7      	beq.n	8017bbe <_strtoul_l.isra.0+0xc6>
 8017bce:	b10d      	cbz	r5, 8017bd4 <_strtoul_l.isra.0+0xdc>
 8017bd0:	f10c 31ff 	add.w	r1, ip, #4294967295
 8017bd4:	6011      	str	r1, [r2, #0]
 8017bd6:	e7f2      	b.n	8017bbe <_strtoul_l.isra.0+0xc6>
 8017bd8:	2430      	movs	r4, #48	; 0x30
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d1b1      	bne.n	8017b42 <_strtoul_l.isra.0+0x4a>
 8017bde:	2308      	movs	r3, #8
 8017be0:	e7af      	b.n	8017b42 <_strtoul_l.isra.0+0x4a>
 8017be2:	2c30      	cmp	r4, #48	; 0x30
 8017be4:	d0a2      	beq.n	8017b2c <_strtoul_l.isra.0+0x34>
 8017be6:	230a      	movs	r3, #10
 8017be8:	e7ab      	b.n	8017b42 <_strtoul_l.isra.0+0x4a>
 8017bea:	bf00      	nop
 8017bec:	08018d61 	.word	0x08018d61

08017bf0 <_strtoul_r>:
 8017bf0:	f7ff bf82 	b.w	8017af8 <_strtoul_l.isra.0>

08017bf4 <__submore>:
 8017bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017bf8:	460c      	mov	r4, r1
 8017bfa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017bfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017c00:	4299      	cmp	r1, r3
 8017c02:	d11d      	bne.n	8017c40 <__submore+0x4c>
 8017c04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017c08:	f7fb f8f4 	bl	8012df4 <_malloc_r>
 8017c0c:	b918      	cbnz	r0, 8017c16 <__submore+0x22>
 8017c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8017c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017c1a:	63a3      	str	r3, [r4, #56]	; 0x38
 8017c1c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017c20:	6360      	str	r0, [r4, #52]	; 0x34
 8017c22:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017c26:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017c2a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017c2e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017c32:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017c36:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017c3a:	6020      	str	r0, [r4, #0]
 8017c3c:	2000      	movs	r0, #0
 8017c3e:	e7e8      	b.n	8017c12 <__submore+0x1e>
 8017c40:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017c42:	0077      	lsls	r7, r6, #1
 8017c44:	463a      	mov	r2, r7
 8017c46:	f000 f889 	bl	8017d5c <_realloc_r>
 8017c4a:	4605      	mov	r5, r0
 8017c4c:	2800      	cmp	r0, #0
 8017c4e:	d0de      	beq.n	8017c0e <__submore+0x1a>
 8017c50:	eb00 0806 	add.w	r8, r0, r6
 8017c54:	4601      	mov	r1, r0
 8017c56:	4632      	mov	r2, r6
 8017c58:	4640      	mov	r0, r8
 8017c5a:	f7fb f8b4 	bl	8012dc6 <memcpy>
 8017c5e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017c62:	f8c4 8000 	str.w	r8, [r4]
 8017c66:	e7e9      	b.n	8017c3c <__submore+0x48>

08017c68 <__ascii_wctomb>:
 8017c68:	b149      	cbz	r1, 8017c7e <__ascii_wctomb+0x16>
 8017c6a:	2aff      	cmp	r2, #255	; 0xff
 8017c6c:	bf85      	ittet	hi
 8017c6e:	238a      	movhi	r3, #138	; 0x8a
 8017c70:	6003      	strhi	r3, [r0, #0]
 8017c72:	700a      	strbls	r2, [r1, #0]
 8017c74:	f04f 30ff 	movhi.w	r0, #4294967295
 8017c78:	bf98      	it	ls
 8017c7a:	2001      	movls	r0, #1
 8017c7c:	4770      	bx	lr
 8017c7e:	4608      	mov	r0, r1
 8017c80:	4770      	bx	lr
	...

08017c84 <__assert_func>:
 8017c84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017c86:	4614      	mov	r4, r2
 8017c88:	461a      	mov	r2, r3
 8017c8a:	4b09      	ldr	r3, [pc, #36]	; (8017cb0 <__assert_func+0x2c>)
 8017c8c:	681b      	ldr	r3, [r3, #0]
 8017c8e:	4605      	mov	r5, r0
 8017c90:	68d8      	ldr	r0, [r3, #12]
 8017c92:	b14c      	cbz	r4, 8017ca8 <__assert_func+0x24>
 8017c94:	4b07      	ldr	r3, [pc, #28]	; (8017cb4 <__assert_func+0x30>)
 8017c96:	9100      	str	r1, [sp, #0]
 8017c98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017c9c:	4906      	ldr	r1, [pc, #24]	; (8017cb8 <__assert_func+0x34>)
 8017c9e:	462b      	mov	r3, r5
 8017ca0:	f000 f80e 	bl	8017cc0 <fiprintf>
 8017ca4:	f000 f880 	bl	8017da8 <abort>
 8017ca8:	4b04      	ldr	r3, [pc, #16]	; (8017cbc <__assert_func+0x38>)
 8017caa:	461c      	mov	r4, r3
 8017cac:	e7f3      	b.n	8017c96 <__assert_func+0x12>
 8017cae:	bf00      	nop
 8017cb0:	20000080 	.word	0x20000080
 8017cb4:	080191f0 	.word	0x080191f0
 8017cb8:	080191fd 	.word	0x080191fd
 8017cbc:	0801922b 	.word	0x0801922b

08017cc0 <fiprintf>:
 8017cc0:	b40e      	push	{r1, r2, r3}
 8017cc2:	b503      	push	{r0, r1, lr}
 8017cc4:	4601      	mov	r1, r0
 8017cc6:	ab03      	add	r3, sp, #12
 8017cc8:	4805      	ldr	r0, [pc, #20]	; (8017ce0 <fiprintf+0x20>)
 8017cca:	f853 2b04 	ldr.w	r2, [r3], #4
 8017cce:	6800      	ldr	r0, [r0, #0]
 8017cd0:	9301      	str	r3, [sp, #4]
 8017cd2:	f7ff fc49 	bl	8017568 <_vfiprintf_r>
 8017cd6:	b002      	add	sp, #8
 8017cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8017cdc:	b003      	add	sp, #12
 8017cde:	4770      	bx	lr
 8017ce0:	20000080 	.word	0x20000080

08017ce4 <_fstat_r>:
 8017ce4:	b538      	push	{r3, r4, r5, lr}
 8017ce6:	4d07      	ldr	r5, [pc, #28]	; (8017d04 <_fstat_r+0x20>)
 8017ce8:	2300      	movs	r3, #0
 8017cea:	4604      	mov	r4, r0
 8017cec:	4608      	mov	r0, r1
 8017cee:	4611      	mov	r1, r2
 8017cf0:	602b      	str	r3, [r5, #0]
 8017cf2:	f000 f8b5 	bl	8017e60 <_fstat>
 8017cf6:	1c43      	adds	r3, r0, #1
 8017cf8:	d102      	bne.n	8017d00 <_fstat_r+0x1c>
 8017cfa:	682b      	ldr	r3, [r5, #0]
 8017cfc:	b103      	cbz	r3, 8017d00 <_fstat_r+0x1c>
 8017cfe:	6023      	str	r3, [r4, #0]
 8017d00:	bd38      	pop	{r3, r4, r5, pc}
 8017d02:	bf00      	nop
 8017d04:	20006920 	.word	0x20006920

08017d08 <_isatty_r>:
 8017d08:	b538      	push	{r3, r4, r5, lr}
 8017d0a:	4d06      	ldr	r5, [pc, #24]	; (8017d24 <_isatty_r+0x1c>)
 8017d0c:	2300      	movs	r3, #0
 8017d0e:	4604      	mov	r4, r0
 8017d10:	4608      	mov	r0, r1
 8017d12:	602b      	str	r3, [r5, #0]
 8017d14:	f000 f8b4 	bl	8017e80 <_isatty>
 8017d18:	1c43      	adds	r3, r0, #1
 8017d1a:	d102      	bne.n	8017d22 <_isatty_r+0x1a>
 8017d1c:	682b      	ldr	r3, [r5, #0]
 8017d1e:	b103      	cbz	r3, 8017d22 <_isatty_r+0x1a>
 8017d20:	6023      	str	r3, [r4, #0]
 8017d22:	bd38      	pop	{r3, r4, r5, pc}
 8017d24:	20006920 	.word	0x20006920

08017d28 <memmove>:
 8017d28:	4288      	cmp	r0, r1
 8017d2a:	b510      	push	{r4, lr}
 8017d2c:	eb01 0402 	add.w	r4, r1, r2
 8017d30:	d902      	bls.n	8017d38 <memmove+0x10>
 8017d32:	4284      	cmp	r4, r0
 8017d34:	4623      	mov	r3, r4
 8017d36:	d807      	bhi.n	8017d48 <memmove+0x20>
 8017d38:	1e43      	subs	r3, r0, #1
 8017d3a:	42a1      	cmp	r1, r4
 8017d3c:	d008      	beq.n	8017d50 <memmove+0x28>
 8017d3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017d42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017d46:	e7f8      	b.n	8017d3a <memmove+0x12>
 8017d48:	4402      	add	r2, r0
 8017d4a:	4601      	mov	r1, r0
 8017d4c:	428a      	cmp	r2, r1
 8017d4e:	d100      	bne.n	8017d52 <memmove+0x2a>
 8017d50:	bd10      	pop	{r4, pc}
 8017d52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017d56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017d5a:	e7f7      	b.n	8017d4c <memmove+0x24>

08017d5c <_realloc_r>:
 8017d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d5e:	4607      	mov	r7, r0
 8017d60:	4614      	mov	r4, r2
 8017d62:	460e      	mov	r6, r1
 8017d64:	b921      	cbnz	r1, 8017d70 <_realloc_r+0x14>
 8017d66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017d6a:	4611      	mov	r1, r2
 8017d6c:	f7fb b842 	b.w	8012df4 <_malloc_r>
 8017d70:	b922      	cbnz	r2, 8017d7c <_realloc_r+0x20>
 8017d72:	f7ff f851 	bl	8016e18 <_free_r>
 8017d76:	4625      	mov	r5, r4
 8017d78:	4628      	mov	r0, r5
 8017d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d7c:	f000 f81b 	bl	8017db6 <_malloc_usable_size_r>
 8017d80:	42a0      	cmp	r0, r4
 8017d82:	d20f      	bcs.n	8017da4 <_realloc_r+0x48>
 8017d84:	4621      	mov	r1, r4
 8017d86:	4638      	mov	r0, r7
 8017d88:	f7fb f834 	bl	8012df4 <_malloc_r>
 8017d8c:	4605      	mov	r5, r0
 8017d8e:	2800      	cmp	r0, #0
 8017d90:	d0f2      	beq.n	8017d78 <_realloc_r+0x1c>
 8017d92:	4631      	mov	r1, r6
 8017d94:	4622      	mov	r2, r4
 8017d96:	f7fb f816 	bl	8012dc6 <memcpy>
 8017d9a:	4631      	mov	r1, r6
 8017d9c:	4638      	mov	r0, r7
 8017d9e:	f7ff f83b 	bl	8016e18 <_free_r>
 8017da2:	e7e9      	b.n	8017d78 <_realloc_r+0x1c>
 8017da4:	4635      	mov	r5, r6
 8017da6:	e7e7      	b.n	8017d78 <_realloc_r+0x1c>

08017da8 <abort>:
 8017da8:	b508      	push	{r3, lr}
 8017daa:	2006      	movs	r0, #6
 8017dac:	f000 f834 	bl	8017e18 <raise>
 8017db0:	2001      	movs	r0, #1
 8017db2:	f000 f89b 	bl	8017eec <_exit>

08017db6 <_malloc_usable_size_r>:
 8017db6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017dba:	1f18      	subs	r0, r3, #4
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	bfbc      	itt	lt
 8017dc0:	580b      	ldrlt	r3, [r1, r0]
 8017dc2:	18c0      	addlt	r0, r0, r3
 8017dc4:	4770      	bx	lr

08017dc6 <_raise_r>:
 8017dc6:	291f      	cmp	r1, #31
 8017dc8:	b538      	push	{r3, r4, r5, lr}
 8017dca:	4604      	mov	r4, r0
 8017dcc:	460d      	mov	r5, r1
 8017dce:	d904      	bls.n	8017dda <_raise_r+0x14>
 8017dd0:	2316      	movs	r3, #22
 8017dd2:	6003      	str	r3, [r0, #0]
 8017dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8017dd8:	bd38      	pop	{r3, r4, r5, pc}
 8017dda:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017ddc:	b112      	cbz	r2, 8017de4 <_raise_r+0x1e>
 8017dde:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017de2:	b94b      	cbnz	r3, 8017df8 <_raise_r+0x32>
 8017de4:	4620      	mov	r0, r4
 8017de6:	f000 f831 	bl	8017e4c <_getpid_r>
 8017dea:	462a      	mov	r2, r5
 8017dec:	4601      	mov	r1, r0
 8017dee:	4620      	mov	r0, r4
 8017df0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017df4:	f000 b818 	b.w	8017e28 <_kill_r>
 8017df8:	2b01      	cmp	r3, #1
 8017dfa:	d00a      	beq.n	8017e12 <_raise_r+0x4c>
 8017dfc:	1c59      	adds	r1, r3, #1
 8017dfe:	d103      	bne.n	8017e08 <_raise_r+0x42>
 8017e00:	2316      	movs	r3, #22
 8017e02:	6003      	str	r3, [r0, #0]
 8017e04:	2001      	movs	r0, #1
 8017e06:	e7e7      	b.n	8017dd8 <_raise_r+0x12>
 8017e08:	2400      	movs	r4, #0
 8017e0a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017e0e:	4628      	mov	r0, r5
 8017e10:	4798      	blx	r3
 8017e12:	2000      	movs	r0, #0
 8017e14:	e7e0      	b.n	8017dd8 <_raise_r+0x12>
	...

08017e18 <raise>:
 8017e18:	4b02      	ldr	r3, [pc, #8]	; (8017e24 <raise+0xc>)
 8017e1a:	4601      	mov	r1, r0
 8017e1c:	6818      	ldr	r0, [r3, #0]
 8017e1e:	f7ff bfd2 	b.w	8017dc6 <_raise_r>
 8017e22:	bf00      	nop
 8017e24:	20000080 	.word	0x20000080

08017e28 <_kill_r>:
 8017e28:	b538      	push	{r3, r4, r5, lr}
 8017e2a:	4d07      	ldr	r5, [pc, #28]	; (8017e48 <_kill_r+0x20>)
 8017e2c:	2300      	movs	r3, #0
 8017e2e:	4604      	mov	r4, r0
 8017e30:	4608      	mov	r0, r1
 8017e32:	4611      	mov	r1, r2
 8017e34:	602b      	str	r3, [r5, #0]
 8017e36:	f000 f82b 	bl	8017e90 <_kill>
 8017e3a:	1c43      	adds	r3, r0, #1
 8017e3c:	d102      	bne.n	8017e44 <_kill_r+0x1c>
 8017e3e:	682b      	ldr	r3, [r5, #0]
 8017e40:	b103      	cbz	r3, 8017e44 <_kill_r+0x1c>
 8017e42:	6023      	str	r3, [r4, #0]
 8017e44:	bd38      	pop	{r3, r4, r5, pc}
 8017e46:	bf00      	nop
 8017e48:	20006920 	.word	0x20006920

08017e4c <_getpid_r>:
 8017e4c:	f000 b810 	b.w	8017e70 <_getpid>

08017e50 <_close>:
 8017e50:	4b02      	ldr	r3, [pc, #8]	; (8017e5c <_close+0xc>)
 8017e52:	2258      	movs	r2, #88	; 0x58
 8017e54:	601a      	str	r2, [r3, #0]
 8017e56:	f04f 30ff 	mov.w	r0, #4294967295
 8017e5a:	4770      	bx	lr
 8017e5c:	20006920 	.word	0x20006920

08017e60 <_fstat>:
 8017e60:	4b02      	ldr	r3, [pc, #8]	; (8017e6c <_fstat+0xc>)
 8017e62:	2258      	movs	r2, #88	; 0x58
 8017e64:	601a      	str	r2, [r3, #0]
 8017e66:	f04f 30ff 	mov.w	r0, #4294967295
 8017e6a:	4770      	bx	lr
 8017e6c:	20006920 	.word	0x20006920

08017e70 <_getpid>:
 8017e70:	4b02      	ldr	r3, [pc, #8]	; (8017e7c <_getpid+0xc>)
 8017e72:	2258      	movs	r2, #88	; 0x58
 8017e74:	601a      	str	r2, [r3, #0]
 8017e76:	f04f 30ff 	mov.w	r0, #4294967295
 8017e7a:	4770      	bx	lr
 8017e7c:	20006920 	.word	0x20006920

08017e80 <_isatty>:
 8017e80:	4b02      	ldr	r3, [pc, #8]	; (8017e8c <_isatty+0xc>)
 8017e82:	2258      	movs	r2, #88	; 0x58
 8017e84:	601a      	str	r2, [r3, #0]
 8017e86:	2000      	movs	r0, #0
 8017e88:	4770      	bx	lr
 8017e8a:	bf00      	nop
 8017e8c:	20006920 	.word	0x20006920

08017e90 <_kill>:
 8017e90:	4b02      	ldr	r3, [pc, #8]	; (8017e9c <_kill+0xc>)
 8017e92:	2258      	movs	r2, #88	; 0x58
 8017e94:	601a      	str	r2, [r3, #0]
 8017e96:	f04f 30ff 	mov.w	r0, #4294967295
 8017e9a:	4770      	bx	lr
 8017e9c:	20006920 	.word	0x20006920

08017ea0 <_lseek>:
 8017ea0:	4b02      	ldr	r3, [pc, #8]	; (8017eac <_lseek+0xc>)
 8017ea2:	2258      	movs	r2, #88	; 0x58
 8017ea4:	601a      	str	r2, [r3, #0]
 8017ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8017eaa:	4770      	bx	lr
 8017eac:	20006920 	.word	0x20006920

08017eb0 <_read>:
 8017eb0:	4b02      	ldr	r3, [pc, #8]	; (8017ebc <_read+0xc>)
 8017eb2:	2258      	movs	r2, #88	; 0x58
 8017eb4:	601a      	str	r2, [r3, #0]
 8017eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8017eba:	4770      	bx	lr
 8017ebc:	20006920 	.word	0x20006920

08017ec0 <_sbrk>:
 8017ec0:	4b04      	ldr	r3, [pc, #16]	; (8017ed4 <_sbrk+0x14>)
 8017ec2:	6819      	ldr	r1, [r3, #0]
 8017ec4:	4602      	mov	r2, r0
 8017ec6:	b909      	cbnz	r1, 8017ecc <_sbrk+0xc>
 8017ec8:	4903      	ldr	r1, [pc, #12]	; (8017ed8 <_sbrk+0x18>)
 8017eca:	6019      	str	r1, [r3, #0]
 8017ecc:	6818      	ldr	r0, [r3, #0]
 8017ece:	4402      	add	r2, r0
 8017ed0:	601a      	str	r2, [r3, #0]
 8017ed2:	4770      	bx	lr
 8017ed4:	20004f30 	.word	0x20004f30
 8017ed8:	20006928 	.word	0x20006928

08017edc <_write>:
 8017edc:	4b02      	ldr	r3, [pc, #8]	; (8017ee8 <_write+0xc>)
 8017ede:	2258      	movs	r2, #88	; 0x58
 8017ee0:	601a      	str	r2, [r3, #0]
 8017ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8017ee6:	4770      	bx	lr
 8017ee8:	20006920 	.word	0x20006920

08017eec <_exit>:
 8017eec:	e7fe      	b.n	8017eec <_exit>
	...

08017ef0 <_init>:
 8017ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ef2:	bf00      	nop
 8017ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ef6:	bc08      	pop	{r3}
 8017ef8:	469e      	mov	lr, r3
 8017efa:	4770      	bx	lr

08017efc <_fini>:
 8017efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017efe:	bf00      	nop
 8017f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017f02:	bc08      	pop	{r3}
 8017f04:	469e      	mov	lr, r3
 8017f06:	4770      	bx	lr
