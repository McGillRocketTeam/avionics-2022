
FC_v2.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000136fc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001440  080138b0  080138b0  000238b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014cf0  08014cf0  0003025c  2**0
                  CONTENTS
  4 .ARM          00000008  08014cf0  08014cf0  00024cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014cf8  08014cf8  0003025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014cf8  08014cf8  00024cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014d00  08014d00  00024d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  08014d04  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003025c  2**0
                  CONTENTS
 10 .bss          0000608c  2000025c  2000025c  0003025c  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  200062e8  200062e8  0003025c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005b0b5  00000000  00000000  0003028c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008591  00000000  00000000  0008b341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003288  00000000  00000000  000938d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002fd0  00000000  00000000  00096b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00034508  00000000  00000000  00099b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003944c  00000000  00000000  000ce038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010eb86  00000000  00000000  00107484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0021600a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ee6c  00000000  00000000  00216060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  00224ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  00224f98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000025c 	.word	0x2000025c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08013894 	.word	0x08013894

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000260 	.word	0x20000260
 80001ec:	08013894 	.word	0x08013894

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <println>:

#include <MRT_helpers.h>
#include <MRT_setup.h>
#include <tim.h>

void println(char* s){
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff f8eb 	bl	80001f0 <strlen>
 800101a:	4603      	mov	r3, r0
 800101c:	b29a      	uxth	r2, r3
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	4806      	ldr	r0, [pc, #24]	; (8001040 <println+0x34>)
 8001026:	f009 ffaa 	bl	800af7e <HAL_UART_Transmit>
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	2202      	movs	r2, #2
 8001030:	4904      	ldr	r1, [pc, #16]	; (8001044 <println+0x38>)
 8001032:	4803      	ldr	r0, [pc, #12]	; (8001040 <println+0x34>)
 8001034:	f009 ffa3 	bl	800af7e <HAL_UART_Transmit>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20005c90 	.word	0x20005c90
 8001044:	080138b0 	.word	0x080138b0

08001048 <print>:

void print(char* s){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff f8cd 	bl	80001f0 <strlen>
 8001056:	4603      	mov	r3, r0
 8001058:	b29a      	uxth	r2, r3
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	4803      	ldr	r0, [pc, #12]	; (8001070 <print+0x28>)
 8001062:	f009 ff8c 	bl	800af7e <HAL_UART_Transmit>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20005c90 	.word	0x20005c90

08001074 <tone_freq>:

// buzz at particular frequency
void tone_freq(uint32_t duration, uint32_t repeats, uint32_t freq) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
	// TIM2 base frequency is 90 MHz, PSC = 90-1
	// can calculate required ARR value
	TIM2->ARR = 1000000 / freq;
 8001080:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001084:	491c      	ldr	r1, [pc, #112]	; (80010f8 <tone_freq+0x84>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	fbb1 f3f3 	udiv	r3, r1, r3
 800108c:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->EGR |= TIM_EGR_UG;
 800108e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6153      	str	r3, [r2, #20]

	for (uint32_t i = 0; i < repeats; i++) {
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	e01f      	b.n	80010e4 <tone_freq+0x70>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80010a4:	2108      	movs	r1, #8
 80010a6:	4815      	ldr	r0, [pc, #84]	; (80010fc <tone_freq+0x88>)
 80010a8:	f008 ff8a 	bl	8009fc0 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(POWER_ON_EXT_LED_GPIO_Port, POWER_ON_EXT_LED_Pin, SET);
 80010ac:	2201      	movs	r2, #1
 80010ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b2:	4813      	ldr	r0, [pc, #76]	; (8001100 <tone_freq+0x8c>)
 80010b4:	f005 fc1e 	bl	80068f4 <HAL_GPIO_WritePin>
		HAL_Delay(duration);
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f004 fead 	bl	8005e18 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80010be:	2108      	movs	r1, #8
 80010c0:	480e      	ldr	r0, [pc, #56]	; (80010fc <tone_freq+0x88>)
 80010c2:	f009 f845 	bl	800a150 <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(POWER_ON_EXT_LED_GPIO_Port, POWER_ON_EXT_LED_Pin, RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010cc:	480c      	ldr	r0, [pc, #48]	; (8001100 <tone_freq+0x8c>)
 80010ce:	f005 fc11 	bl	80068f4 <HAL_GPIO_WritePin>
		if (repeats > 1)
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d902      	bls.n	80010de <tone_freq+0x6a>
			HAL_Delay(duration);
 80010d8:	68f8      	ldr	r0, [r7, #12]
 80010da:	f004 fe9d 	bl	8005e18 <HAL_Delay>
	for (uint32_t i = 0; i < repeats; i++) {
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	3301      	adds	r3, #1
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d3db      	bcc.n	80010a4 <tone_freq+0x30>
	}
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	000f4240 	.word	0x000f4240
 80010fc:	20005c04 	.word	0x20005c04
 8001100:	40020400 	.word	0x40020400

08001104 <buzz_success>:
void buzz_success(void) { tone_freq(BUZZ_SUCCESS_DURATION, BUZZ_SUCCESS_REPEATS, BUZZ_SUCCESS_FREQ); }
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
 8001108:	f240 4216 	movw	r2, #1046	; 0x416
 800110c:	2102      	movs	r1, #2
 800110e:	204b      	movs	r0, #75	; 0x4b
 8001110:	f7ff ffb0 	bl	8001074 <tone_freq>
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}

08001118 <buzz_startup_success>:
void buzz_failure(void) { tone_freq(BUZZ_FAILURE_DURATION, BUZZ_FAILURE_REPEATS, BUZZ_FAILURE_FREQ); }
void buzz_startup_success(void) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 800111e:	2300      	movs	r3, #0
 8001120:	71fb      	strb	r3, [r7, #7]
 8001122:	e008      	b.n	8001136 <buzz_startup_success+0x1e>
		buzz_success();
 8001124:	f7ff ffee 	bl	8001104 <buzz_success>
		HAL_Delay(1000);
 8001128:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800112c:	f004 fe74 	bl	8005e18 <HAL_Delay>
	for (uint8_t i = 0; i < 3; i++) {
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	3301      	adds	r3, #1
 8001134:	71fb      	strb	r3, [r7, #7]
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	2b02      	cmp	r3, #2
 800113a:	d9f3      	bls.n	8001124 <buzz_startup_success+0xc>
	}
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <MRT_Init>:


//**************************************************//
//PUBLIC FUNCTIONS

void MRT_Init(void){
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	print((char*) "\r\n\r\n/********MRT Init********/\r\n");
 800114c:	4808      	ldr	r0, [pc, #32]	; (8001170 <MRT_Init+0x28>)
 800114e:	f7ff ff7b 	bl	8001048 <print>
	print((char*) "IWDG Init...");
	MX_IWDG_Init();
	print((char*) "OK\r\n");
	#endif

	MRT_Reinitialize_Peripherals();
 8001152:	f000 f915 	bl	8001380 <MRT_Reinitialize_Peripherals>
	MRT_external_flash_Init();
 8001156:	f001 fe85 	bl	8002e64 <MRT_external_flash_Init>
	MRT_reset_info();
 800115a:	f000 f819 	bl	8001190 <MRT_reset_info>

	//RTC
	HAL_IWDG_Refresh(&hiwdg);
	MRT_rtc_Init();
 800115e:	f001 f86d 	bl	800223c <MRT_rtc_Init>
		  checkForI2CDevices(huart8,hi2c1);
		  checkForI2CDevices(huart8,hi2c2);
		  checkForI2CDevices(huart8,hi2c3);
		#endif

		MRT_i2c_sensors_Init();
 8001162:	f002 fea7 	bl	8003eb4 <MRT_i2c_sensors_Init>
	#endif


	//Telemetry
	#if TELEMETRY_THREAD
		MRT_TELEMETRY_Init();
 8001166:	f004 fe0f 	bl	8005d88 <MRT_TELEMETRY_Init>
	#endif

	#if FORCED_EJECTION_STAGE
		  ejection_stage_flag = FORCED_STAGE;
	#endif
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	080138b4 	.word	0x080138b4

08001174 <MRT_Deinit>:




void MRT_Deinit(void){
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	print((char*) "\r\n\r\n/********MRT Deinit********/\r\n");
 8001178:	4804      	ldr	r0, [pc, #16]	; (800118c <MRT_Deinit+0x18>)
 800117a:	f7ff ff65 	bl	8001048 <print>

	MRT_Reinitialize_Peripherals();
 800117e:	f000 f8ff 	bl	8001380 <MRT_Reinitialize_Peripherals>
	#endif


	//Sensors
	#if SENSORS_THREAD
		MRT_i2c_sensors_Deinit();
 8001182:	f002 fec7 	bl	8003f14 <MRT_i2c_sensors_Deinit>
	#endif

    //TODO
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	080138d8 	.word	0x080138d8

08001190 <MRT_reset_info>:

//**************************************************//
//PRIVATE FUNCTIONS


void MRT_reset_info(void){
 8001190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001192:	b0a7      	sub	sp, #156	; 0x9c
 8001194:	af04      	add	r7, sp, #16

	  char buffer[100];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\nPrevious RTC time: %i:%i:%i\r\n",reset_flag, wu_flag, iwdg_flag, prev_hours, prev_min, prev_sec);
 8001196:	4b62      	ldr	r3, [pc, #392]	; (8001320 <MRT_reset_info+0x190>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	461d      	mov	r5, r3
 800119c:	4b61      	ldr	r3, [pc, #388]	; (8001324 <MRT_reset_info+0x194>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461e      	mov	r6, r3
 80011a2:	4b61      	ldr	r3, [pc, #388]	; (8001328 <MRT_reset_info+0x198>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	461a      	mov	r2, r3
 80011a8:	4b60      	ldr	r3, [pc, #384]	; (800132c <MRT_reset_info+0x19c>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	4b60      	ldr	r3, [pc, #384]	; (8001330 <MRT_reset_info+0x1a0>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	461c      	mov	r4, r3
 80011b4:	4b5f      	ldr	r3, [pc, #380]	; (8001334 <MRT_reset_info+0x1a4>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	f107 0020 	add.w	r0, r7, #32
 80011bc:	9303      	str	r3, [sp, #12]
 80011be:	9402      	str	r4, [sp, #8]
 80011c0:	9101      	str	r1, [sp, #4]
 80011c2:	9200      	str	r2, [sp, #0]
 80011c4:	4633      	mov	r3, r6
 80011c6:	462a      	mov	r2, r5
 80011c8:	495b      	ldr	r1, [pc, #364]	; (8001338 <MRT_reset_info+0x1a8>)
 80011ca:	f00e fb67 	bl	800f89c <siprintf>
	  print(buffer);
 80011ce:	f107 0320 	add.w	r3, r7, #32
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ff38 	bl	8001048 <print>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 80011d8:	4b53      	ldr	r3, [pc, #332]	; (8001328 <MRT_reset_info+0x198>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d11a      	bne.n	8001216 <MRT_reset_info+0x86>
		  print((char*) "Deactivating IWDG\r\n");
 80011e0:	4856      	ldr	r0, [pc, #344]	; (800133c <MRT_reset_info+0x1ac>)
 80011e2:	f7ff ff31 	bl	8001048 <print>

		  iwdg_flag = 0; //Flip flag
 80011e6:	4b50      	ldr	r3, [pc, #320]	; (8001328 <MRT_reset_info+0x198>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
		  flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 80011ec:	4b4e      	ldr	r3, [pc, #312]	; (8001328 <MRT_reset_info+0x198>)
 80011ee:	781a      	ldrb	r2, [r3, #0]
 80011f0:	4b53      	ldr	r3, [pc, #332]	; (8001340 <MRT_reset_info+0x1b0>)
 80011f2:	709a      	strb	r2, [r3, #2]
		  W25qxx_EraseSector(1);
 80011f4:	2001      	movs	r0, #1
 80011f6:	f002 f9f1 	bl	80035dc <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80011fa:	2305      	movs	r3, #5
 80011fc:	2200      	movs	r2, #0
 80011fe:	2101      	movs	r1, #1
 8001200:	484f      	ldr	r0, [pc, #316]	; (8001340 <MRT_reset_info+0x1b0>)
 8001202:	f002 fb35 	bl	8003870 <W25qxx_WriteSector>

		  HAL_Delay(1000);
 8001206:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800120a:	f004 fe05 	bl	8005e18 <HAL_Delay>

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 800120e:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 8001212:	f001 f8db 	bl	80023cc <MRT_StandByMode>
	  }


	  //Check if we are after waking up (and at which wake up we are at)
	  if (wu_flag>0){
 8001216:	4b43      	ldr	r3, [pc, #268]	; (8001324 <MRT_reset_info+0x194>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d02b      	beq.n	8001276 <MRT_reset_info+0xe6>
		  char buf[30];
		  sprintf(buf, "FC wake up %i\r\n", wu_flag);
 800121e:	4b41      	ldr	r3, [pc, #260]	; (8001324 <MRT_reset_info+0x194>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	463b      	mov	r3, r7
 8001226:	4947      	ldr	r1, [pc, #284]	; (8001344 <MRT_reset_info+0x1b4>)
 8001228:	4618      	mov	r0, r3
 800122a:	f00e fb37 	bl	800f89c <siprintf>
		  print(buf);
 800122e:	463b      	mov	r3, r7
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff09 	bl	8001048 <print>

		  print((char*) "Resetting RTC time\r\n");
 8001236:	4844      	ldr	r0, [pc, #272]	; (8001348 <MRT_reset_info+0x1b8>)
 8001238:	f7ff ff06 	bl	8001048 <print>

		  //Clear RTC time (last recorded)
		  W25qxx_EraseSector(2);
 800123c:	2002      	movs	r0, #2
 800123e:	f002 f9cd 	bl	80035dc <W25qxx_EraseSector>
		  W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, 2, RTC_TIME_OFFSET, 3);
 8001242:	2303      	movs	r3, #3
 8001244:	2200      	movs	r2, #0
 8001246:	2102      	movs	r1, #2
 8001248:	4840      	ldr	r0, [pc, #256]	; (800134c <MRT_reset_info+0x1bc>)
 800124a:	f002 fb11 	bl	8003870 <W25qxx_WriteSector>

		  //Update variables (to 0)
		  for (int i = 0; i < 3; i++){
 800124e:	2300      	movs	r3, #0
 8001250:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001254:	e00b      	b.n	800126e <MRT_reset_info+0xde>
			  *flash_time[i] = 0x0;
 8001256:	4a3e      	ldr	r2, [pc, #248]	; (8001350 <MRT_reset_info+0x1c0>)
 8001258:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800125c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 3; i++){
 8001264:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001268:	3301      	adds	r3, #1
 800126a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800126e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001272:	2b02      	cmp	r3, #2
 8001274:	ddef      	ble.n	8001256 <MRT_reset_info+0xc6>

	  }


	  //Check if we start from the beginning
	  if (reset_flag==0){
 8001276:	4b2a      	ldr	r3, [pc, #168]	; (8001320 <MRT_reset_info+0x190>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d112      	bne.n	80012a4 <MRT_reset_info+0x114>
		  print((char*) "FC restarted\r\n");
 800127e:	4835      	ldr	r0, [pc, #212]	; (8001354 <MRT_reset_info+0x1c4>)
 8001280:	f7ff fee2 	bl	8001048 <print>

		  reset_flag = 1; //Flip flag
 8001284:	4b26      	ldr	r3, [pc, #152]	; (8001320 <MRT_reset_info+0x190>)
 8001286:	2201      	movs	r2, #1
 8001288:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
	      flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 800128a:	4b25      	ldr	r3, [pc, #148]	; (8001320 <MRT_reset_info+0x190>)
 800128c:	781a      	ldrb	r2, [r3, #0]
 800128e:	4b2c      	ldr	r3, [pc, #176]	; (8001340 <MRT_reset_info+0x1b0>)
 8001290:	701a      	strb	r2, [r3, #0]
		  W25qxx_EraseSector(1);
 8001292:	2001      	movs	r0, #1
 8001294:	f002 f9a2 	bl	80035dc <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8001298:	2305      	movs	r3, #5
 800129a:	2200      	movs	r2, #0
 800129c:	2101      	movs	r1, #1
 800129e:	4828      	ldr	r0, [pc, #160]	; (8001340 <MRT_reset_info+0x1b0>)
 80012a0:	f002 fae6 	bl	8003870 <W25qxx_WriteSector>
	  }


	  //Check if before or after apogee
	  if (apogee_flag == 0){
 80012a4:	4b2c      	ldr	r3, [pc, #176]	; (8001358 <MRT_reset_info+0x1c8>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d103      	bne.n	80012b4 <MRT_reset_info+0x124>
		  print((char*) "Pre-apogee\r\n");
 80012ac:	482b      	ldr	r0, [pc, #172]	; (800135c <MRT_reset_info+0x1cc>)
 80012ae:	f7ff fecb 	bl	8001048 <print>
 80012b2:	e006      	b.n	80012c2 <MRT_reset_info+0x132>
	  }
	  else if(apogee_flag==1){
 80012b4:	4b28      	ldr	r3, [pc, #160]	; (8001358 <MRT_reset_info+0x1c8>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d102      	bne.n	80012c2 <MRT_reset_info+0x132>
		  print((char*) "Post-apogee\r\n");
 80012bc:	4828      	ldr	r0, [pc, #160]	; (8001360 <MRT_reset_info+0x1d0>)
 80012be:	f7ff fec3 	bl	8001048 <print>
	  }


	  //Check ejection stage
	  print((char*)"Ejection Stage: ");
 80012c2:	4828      	ldr	r0, [pc, #160]	; (8001364 <MRT_reset_info+0x1d4>)
 80012c4:	f7ff fec0 	bl	8001048 <print>
	  if (ejection_state_flag==0){
 80012c8:	4b27      	ldr	r3, [pc, #156]	; (8001368 <MRT_reset_info+0x1d8>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d103      	bne.n	80012d8 <MRT_reset_info+0x148>
		  print((char*)"Pad\r\n");
 80012d0:	4826      	ldr	r0, [pc, #152]	; (800136c <MRT_reset_info+0x1dc>)
 80012d2:	f7ff feb9 	bl	8001048 <print>
		  print((char*)"Main descent\r\n");
	  }
	  else if(ejection_state_flag==4){
		  print((char*)"Landed\r\n");
	  }
}
 80012d6:	e01e      	b.n	8001316 <MRT_reset_info+0x186>
	  else if(ejection_state_flag==1){
 80012d8:	4b23      	ldr	r3, [pc, #140]	; (8001368 <MRT_reset_info+0x1d8>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d103      	bne.n	80012e8 <MRT_reset_info+0x158>
		  print((char*)"Boost\r\n");
 80012e0:	4823      	ldr	r0, [pc, #140]	; (8001370 <MRT_reset_info+0x1e0>)
 80012e2:	f7ff feb1 	bl	8001048 <print>
}
 80012e6:	e016      	b.n	8001316 <MRT_reset_info+0x186>
	  else if(ejection_state_flag==2){
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <MRT_reset_info+0x1d8>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d103      	bne.n	80012f8 <MRT_reset_info+0x168>
		  print((char*)"Drogue descent\r\n");
 80012f0:	4820      	ldr	r0, [pc, #128]	; (8001374 <MRT_reset_info+0x1e4>)
 80012f2:	f7ff fea9 	bl	8001048 <print>
}
 80012f6:	e00e      	b.n	8001316 <MRT_reset_info+0x186>
	  else if(ejection_state_flag==3){
 80012f8:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <MRT_reset_info+0x1d8>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b03      	cmp	r3, #3
 80012fe:	d103      	bne.n	8001308 <MRT_reset_info+0x178>
		  print((char*)"Main descent\r\n");
 8001300:	481d      	ldr	r0, [pc, #116]	; (8001378 <MRT_reset_info+0x1e8>)
 8001302:	f7ff fea1 	bl	8001048 <print>
}
 8001306:	e006      	b.n	8001316 <MRT_reset_info+0x186>
	  else if(ejection_state_flag==4){
 8001308:	4b17      	ldr	r3, [pc, #92]	; (8001368 <MRT_reset_info+0x1d8>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b04      	cmp	r3, #4
 800130e:	d102      	bne.n	8001316 <MRT_reset_info+0x186>
		  print((char*)"Landed\r\n");
 8001310:	481a      	ldr	r0, [pc, #104]	; (800137c <MRT_reset_info+0x1ec>)
 8001312:	f7ff fe99 	bl	8001048 <print>
}
 8001316:	bf00      	nop
 8001318:	378c      	adds	r7, #140	; 0x8c
 800131a:	46bd      	mov	sp, r7
 800131c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800131e:	bf00      	nop
 8001320:	200002a5 	.word	0x200002a5
 8001324:	200002a6 	.word	0x200002a6
 8001328:	200002a7 	.word	0x200002a7
 800132c:	200002aa 	.word	0x200002aa
 8001330:	200002ab 	.word	0x200002ab
 8001334:	200002ac 	.word	0x200002ac
 8001338:	080138fc 	.word	0x080138fc
 800133c:	0801393c 	.word	0x0801393c
 8001340:	20005d20 	.word	0x20005d20
 8001344:	08013950 	.word	0x08013950
 8001348:	08013960 	.word	0x08013960
 800134c:	200002b4 	.word	0x200002b4
 8001350:	20000054 	.word	0x20000054
 8001354:	08013978 	.word	0x08013978
 8001358:	200002a8 	.word	0x200002a8
 800135c:	08013988 	.word	0x08013988
 8001360:	08013998 	.word	0x08013998
 8001364:	080139a8 	.word	0x080139a8
 8001368:	200002a9 	.word	0x200002a9
 800136c:	080139bc 	.word	0x080139bc
 8001370:	080139c4 	.word	0x080139c4
 8001374:	080139cc 	.word	0x080139cc
 8001378:	080139e0 	.word	0x080139e0
 800137c:	080139f0 	.word	0x080139f0

08001380 <MRT_Reinitialize_Peripherals>:


void MRT_Reinitialize_Peripherals(void){
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
	  /*
	   * Reinitialize all peripherals
	   */

	  print((char*)"Reinitializing Peripherals...");
 8001384:	482f      	ldr	r0, [pc, #188]	; (8001444 <MRT_Reinitialize_Peripherals+0xc4>)
 8001386:	f7ff fe5f 	bl	8001048 <print>

	  // reset LEDs
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	2102      	movs	r1, #2
 800138e:	482e      	ldr	r0, [pc, #184]	; (8001448 <MRT_Reinitialize_Peripherals+0xc8>)
 8001390:	f005 fab0 	bl	80068f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001394:	2200      	movs	r2, #0
 8001396:	2104      	movs	r1, #4
 8001398:	482b      	ldr	r0, [pc, #172]	; (8001448 <MRT_Reinitialize_Peripherals+0xc8>)
 800139a:	f005 faab 	bl	80068f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	2108      	movs	r1, #8
 80013a2:	4829      	ldr	r0, [pc, #164]	; (8001448 <MRT_Reinitialize_Peripherals+0xc8>)
 80013a4:	f005 faa6 	bl	80068f4 <HAL_GPIO_WritePin>

	  // reset recovery pyro pins
	  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 80013a8:	2201      	movs	r2, #1
 80013aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ae:	4827      	ldr	r0, [pc, #156]	; (800144c <MRT_Reinitialize_Peripherals+0xcc>)
 80013b0:	f005 faa0 	bl	80068f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ba:	4824      	ldr	r0, [pc, #144]	; (800144c <MRT_Reinitialize_Peripherals+0xcc>)
 80013bc:	f005 fa9a 	bl	80068f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013c6:	4821      	ldr	r0, [pc, #132]	; (800144c <MRT_Reinitialize_Peripherals+0xcc>)
 80013c8:	f005 fa94 	bl	80068f4 <HAL_GPIO_WritePin>

	  // reset prop pyro pins
	  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 80013cc:	2201      	movs	r2, #1
 80013ce:	2102      	movs	r1, #2
 80013d0:	481e      	ldr	r0, [pc, #120]	; (800144c <MRT_Reinitialize_Peripherals+0xcc>)
 80013d2:	f005 fa8f 	bl	80068f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013dc:	481c      	ldr	r0, [pc, #112]	; (8001450 <MRT_Reinitialize_Peripherals+0xd0>)
 80013de:	f005 fa89 	bl	80068f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 80013e2:	2200      	movs	r2, #0
 80013e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013e8:	4819      	ldr	r0, [pc, #100]	; (8001450 <MRT_Reinitialize_Peripherals+0xd0>)
 80013ea:	f005 fa83 	bl	80068f4 <HAL_GPIO_WritePin>

	  // reset 12 V buck converter enable pin (disable converter)
	  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 80013ee:	2200      	movs	r2, #0
 80013f0:	2104      	movs	r1, #4
 80013f2:	4818      	ldr	r0, [pc, #96]	; (8001454 <MRT_Reinitialize_Peripherals+0xd4>)
 80013f4:	f005 fa7e 	bl	80068f4 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
	  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


	  // reset payload EN signal
	  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 80013f8:	2200      	movs	r2, #0
 80013fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013fe:	4815      	ldr	r0, [pc, #84]	; (8001454 <MRT_Reinitialize_Peripherals+0xd4>)
 8001400:	f005 fa78 	bl	80068f4 <HAL_GPIO_WritePin>

	  // set CS pin for thermocouple chip high
	  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

	  // set power off for VR
	  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 8001404:	2200      	movs	r2, #0
 8001406:	f44f 7100 	mov.w	r1, #512	; 0x200
 800140a:	4810      	ldr	r0, [pc, #64]	; (800144c <MRT_Reinitialize_Peripherals+0xcc>)
 800140c:	f005 fa72 	bl	80068f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 8001410:	2200      	movs	r2, #0
 8001412:	2180      	movs	r1, #128	; 0x80
 8001414:	4810      	ldr	r0, [pc, #64]	; (8001458 <MRT_Reinitialize_Peripherals+0xd8>)
 8001416:	f005 fa6d 	bl	80068f4 <HAL_GPIO_WritePin>

	  // FLASH set CS, WP and IO3 pins high
	  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 800141a:	2201      	movs	r2, #1
 800141c:	2140      	movs	r1, #64	; 0x40
 800141e:	480e      	ldr	r0, [pc, #56]	; (8001458 <MRT_Reinitialize_Peripherals+0xd8>)
 8001420:	f005 fa68 	bl	80068f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 8001424:	2201      	movs	r2, #1
 8001426:	2120      	movs	r1, #32
 8001428:	480b      	ldr	r0, [pc, #44]	; (8001458 <MRT_Reinitialize_Peripherals+0xd8>)
 800142a:	f005 fa63 	bl	80068f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 800142e:	2201      	movs	r2, #1
 8001430:	2110      	movs	r1, #16
 8001432:	4809      	ldr	r0, [pc, #36]	; (8001458 <MRT_Reinitialize_Peripherals+0xd8>)
 8001434:	f005 fa5e 	bl	80068f4 <HAL_GPIO_WritePin>

	  print((char*)"OK\r\n");
 8001438:	4808      	ldr	r0, [pc, #32]	; (800145c <MRT_Reinitialize_Peripherals+0xdc>)
 800143a:	f7ff fe05 	bl	8001048 <print>
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	080139fc 	.word	0x080139fc
 8001448:	40020800 	.word	0x40020800
 800144c:	40021800 	.word	0x40021800
 8001450:	40021400 	.word	0x40021400
 8001454:	40021000 	.word	0x40021000
 8001458:	40020c00 	.word	0x40020c00
 800145c:	08013a1c 	.word	0x08013a1c

08001460 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001466:	463b      	mov	r3, r7
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001472:	4b21      	ldr	r3, [pc, #132]	; (80014f8 <MX_ADC1_Init+0x98>)
 8001474:	4a21      	ldr	r2, [pc, #132]	; (80014fc <MX_ADC1_Init+0x9c>)
 8001476:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001478:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <MX_ADC1_Init+0x98>)
 800147a:	2200      	movs	r2, #0
 800147c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800147e:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <MX_ADC1_Init+0x98>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001484:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <MX_ADC1_Init+0x98>)
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800148a:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <MX_ADC1_Init+0x98>)
 800148c:	2200      	movs	r2, #0
 800148e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001490:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <MX_ADC1_Init+0x98>)
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001498:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <MX_ADC1_Init+0x98>)
 800149a:	2200      	movs	r2, #0
 800149c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800149e:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <MX_ADC1_Init+0x98>)
 80014a0:	4a17      	ldr	r2, [pc, #92]	; (8001500 <MX_ADC1_Init+0xa0>)
 80014a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014a4:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <MX_ADC1_Init+0x98>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014aa:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <MX_ADC1_Init+0x98>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <MX_ADC1_Init+0x98>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <MX_ADC1_Init+0x98>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014be:	480e      	ldr	r0, [pc, #56]	; (80014f8 <MX_ADC1_Init+0x98>)
 80014c0:	f004 fcce 	bl	8005e60 <HAL_ADC_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80014ca:	f000 fdf3 	bl	80020b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80014ce:	2306      	movs	r3, #6
 80014d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014d2:	2301      	movs	r3, #1
 80014d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014da:	463b      	mov	r3, r7
 80014dc:	4619      	mov	r1, r3
 80014de:	4806      	ldr	r0, [pc, #24]	; (80014f8 <MX_ADC1_Init+0x98>)
 80014e0:	f004 fd02 	bl	8005ee8 <HAL_ADC_ConfigChannel>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80014ea:	f000 fde3 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20005978 	.word	0x20005978
 80014fc:	40012000 	.word	0x40012000
 8001500:	0f000001 	.word	0x0f000001

08001504 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	; 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a17      	ldr	r2, [pc, #92]	; (8001580 <HAL_ADC_MspInit+0x7c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d127      	bne.n	8001576 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	4b16      	ldr	r3, [pc, #88]	; (8001584 <HAL_ADC_MspInit+0x80>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	4a15      	ldr	r2, [pc, #84]	; (8001584 <HAL_ADC_MspInit+0x80>)
 8001530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001534:	6453      	str	r3, [r2, #68]	; 0x44
 8001536:	4b13      	ldr	r3, [pc, #76]	; (8001584 <HAL_ADC_MspInit+0x80>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <HAL_ADC_MspInit+0x80>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a0e      	ldr	r2, [pc, #56]	; (8001584 <HAL_ADC_MspInit+0x80>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <HAL_ADC_MspInit+0x80>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 800155e:	2340      	movs	r3, #64	; 0x40
 8001560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001562:	2303      	movs	r3, #3
 8001564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	4805      	ldr	r0, [pc, #20]	; (8001588 <HAL_ADC_MspInit+0x84>)
 8001572:	f004 fffb 	bl	800656c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001576:	bf00      	nop
 8001578:	3728      	adds	r7, #40	; 0x28
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40012000 	.word	0x40012000
 8001584:	40023800 	.word	0x40023800
 8001588:	40020000 	.word	0x40020000

0800158c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	println("\r\nFREERTOS Init");
 8001590:	4821      	ldr	r0, [pc, #132]	; (8001618 <MX_FREERTOS_Init+0x8c>)
 8001592:	f7ff fd3b 	bl	800100c <println>
	print("\tInitializing the kernel...");
 8001596:	4821      	ldr	r0, [pc, #132]	; (800161c <MX_FREERTOS_Init+0x90>)
 8001598:	f7ff fd56 	bl	8001048 <print>
	osKernelInitialize();
 800159c:	f00a f964 	bl	800b868 <osKernelInitialize>
	println("OK");
 80015a0:	481f      	ldr	r0, [pc, #124]	; (8001620 <MX_FREERTOS_Init+0x94>)
 80015a2:	f7ff fd33 	bl	800100c <println>

	print("\tCreating the threads...");
 80015a6:	481f      	ldr	r0, [pc, #124]	; (8001624 <MX_FREERTOS_Init+0x98>)
 80015a8:	f7ff fd4e 	bl	8001048 <print>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 80015ac:	4a1e      	ldr	r2, [pc, #120]	; (8001628 <MX_FREERTOS_Init+0x9c>)
 80015ae:	2100      	movs	r1, #0
 80015b0:	481e      	ldr	r0, [pc, #120]	; (800162c <MX_FREERTOS_Init+0xa0>)
 80015b2:	f00a f9a3 	bl	800b8fc <osThreadNew>
 80015b6:	4603      	mov	r3, r0
 80015b8:	4a1d      	ldr	r2, [pc, #116]	; (8001630 <MX_FREERTOS_Init+0xa4>)
 80015ba:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 80015bc:	4a1d      	ldr	r2, [pc, #116]	; (8001634 <MX_FREERTOS_Init+0xa8>)
 80015be:	2100      	movs	r1, #0
 80015c0:	481d      	ldr	r0, [pc, #116]	; (8001638 <MX_FREERTOS_Init+0xac>)
 80015c2:	f00a f99b 	bl	800b8fc <osThreadNew>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4a1c      	ldr	r2, [pc, #112]	; (800163c <MX_FREERTOS_Init+0xb0>)
 80015ca:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 80015cc:	4a1c      	ldr	r2, [pc, #112]	; (8001640 <MX_FREERTOS_Init+0xb4>)
 80015ce:	2100      	movs	r1, #0
 80015d0:	481c      	ldr	r0, [pc, #112]	; (8001644 <MX_FREERTOS_Init+0xb8>)
 80015d2:	f00a f993 	bl	800b8fc <osThreadNew>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4a1b      	ldr	r2, [pc, #108]	; (8001648 <MX_FREERTOS_Init+0xbc>)
 80015da:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 80015dc:	4a1b      	ldr	r2, [pc, #108]	; (800164c <MX_FREERTOS_Init+0xc0>)
 80015de:	2100      	movs	r1, #0
 80015e0:	481b      	ldr	r0, [pc, #108]	; (8001650 <MX_FREERTOS_Init+0xc4>)
 80015e2:	f00a f98b 	bl	800b8fc <osThreadNew>
 80015e6:	4603      	mov	r3, r0
 80015e8:	4a1a      	ldr	r2, [pc, #104]	; (8001654 <MX_FREERTOS_Init+0xc8>)
 80015ea:	6013      	str	r3, [r2, #0]

  /* creation of WatchDog */
  WatchDogHandle = osThreadNew(StartWatchDog, NULL, &WatchDog_attributes);
 80015ec:	4a1a      	ldr	r2, [pc, #104]	; (8001658 <MX_FREERTOS_Init+0xcc>)
 80015ee:	2100      	movs	r1, #0
 80015f0:	481a      	ldr	r0, [pc, #104]	; (800165c <MX_FREERTOS_Init+0xd0>)
 80015f2:	f00a f983 	bl	800b8fc <osThreadNew>
 80015f6:	4603      	mov	r3, r0
 80015f8:	4a19      	ldr	r2, [pc, #100]	; (8001660 <MX_FREERTOS_Init+0xd4>)
 80015fa:	6013      	str	r3, [r2, #0]

  /* creation of Propulsion4 */
  Propulsion4Handle = osThreadNew(StartPropulsion4, NULL, &Propulsion4_attributes);
 80015fc:	4a19      	ldr	r2, [pc, #100]	; (8001664 <MX_FREERTOS_Init+0xd8>)
 80015fe:	2100      	movs	r1, #0
 8001600:	4819      	ldr	r0, [pc, #100]	; (8001668 <MX_FREERTOS_Init+0xdc>)
 8001602:	f00a f97b 	bl	800b8fc <osThreadNew>
 8001606:	4603      	mov	r3, r0
 8001608:	4a18      	ldr	r2, [pc, #96]	; (800166c <MX_FREERTOS_Init+0xe0>)
 800160a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  println("OK");
 800160c:	4804      	ldr	r0, [pc, #16]	; (8001620 <MX_FREERTOS_Init+0x94>)
 800160e:	f7ff fcfd 	bl	800100c <println>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	08013a68 	.word	0x08013a68
 800161c:	08013a78 	.word	0x08013a78
 8001620:	08013a94 	.word	0x08013a94
 8001624:	08013a98 	.word	0x08013a98
 8001628:	080146e8 	.word	0x080146e8
 800162c:	08001671 	.word	0x08001671
 8001630:	200059c4 	.word	0x200059c4
 8001634:	0801470c 	.word	0x0801470c
 8001638:	0800168d 	.word	0x0800168d
 800163c:	200059dc 	.word	0x200059dc
 8001640:	08014730 	.word	0x08014730
 8001644:	080016a9 	.word	0x080016a9
 8001648:	200059e0 	.word	0x200059e0
 800164c:	08014754 	.word	0x08014754
 8001650:	080018c9 	.word	0x080018c9
 8001654:	200059e4 	.word	0x200059e4
 8001658:	08014778 	.word	0x08014778
 800165c:	08001941 	.word	0x08001941
 8001660:	200059c0 	.word	0x200059c0
 8001664:	0801479c 	.word	0x0801479c
 8001668:	08001951 	.word	0x08001951
 800166c:	200059e8 	.word	0x200059e8

08001670 <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMemory0 */

	//TODO UNTESTED

	//Add thread id to the list
	threadsID[0]=osThreadGetId();
 8001678:	f00a f9d2 	bl	800ba20 <osThreadGetId>
 800167c:	4603      	mov	r3, r0
 800167e:	4a02      	ldr	r2, [pc, #8]	; (8001688 <StartMemory0+0x18>)
 8001680:	6013      	str	r3, [r2, #0]

	#if !MEMORY_THREAD
    osThreadExit();
 8001682:	f00a f9d8 	bl	800ba36 <osThreadExit>
 8001686:	bf00      	nop
 8001688:	200059c8 	.word	0x200059c8

0800168c <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEjection1 */

	//Add thread id to the list
	threadsID[1]=osThreadGetId();
 8001694:	f00a f9c4 	bl	800ba20 <osThreadGetId>
 8001698:	4603      	mov	r3, r0
 800169a:	4a02      	ldr	r2, [pc, #8]	; (80016a4 <StartEjection1+0x18>)
 800169c:	6053      	str	r3, [r2, #4]

	#if !EJECTION_THREAD
	osThreadExit();
 800169e:	f00a f9ca 	bl	800ba36 <osThreadExit>
 80016a2:	bf00      	nop
 80016a4:	200059c8 	.word	0x200059c8

080016a8 <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 80016a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016ac:	b0ed      	sub	sp, #436	; 0x1b4
 80016ae:	af16      	add	r7, sp, #88	; 0x58
 80016b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016b4:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartTelemetry2 */

	//Add thread id to the list
	threadsID[2]=osThreadGetId();
 80016b6:	f00a f9b3 	bl	800ba20 <osThreadGetId>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4a72      	ldr	r2, [pc, #456]	; (8001888 <StartTelemetry2+0x1e0>)
 80016be:	6093      	str	r3, [r2, #8]
	#if !TELEMETRY_THREAD
	osThreadExit();
	#endif

	char radio_buffer[RADIO_BUFFER_SIZE];
	uint8_t counter = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	uint8_t iridium_counter = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
	float TEMP_LPS;

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 80016cc:	2201      	movs	r2, #1
 80016ce:	2108      	movs	r1, #8
 80016d0:	486e      	ldr	r0, [pc, #440]	; (800188c <StartTelemetry2+0x1e4>)
 80016d2:	f005 f90f 	bl	80068f4 <HAL_GPIO_WritePin>

	  if(apogee_flag == 0){ //Only send prop data pre-apogee
 80016d6:	4b6e      	ldr	r3, [pc, #440]	; (8001890 <StartTelemetry2+0x1e8>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d126      	bne.n	800172c <StartTelemetry2+0x84>

		  //Send propulsion data
		  memset(radio_buffer, 0, RADIO_BUFFER_SIZE);
 80016de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016e6:	2100      	movs	r1, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f00d f859 	bl	800e7a0 <memset>
		  sprintf(radio_buffer, "P,%.2f,%.2f, %i,E", transducer_voltage, thermocouple_temperature, valve_status);
 80016ee:	4b69      	ldr	r3, [pc, #420]	; (8001894 <StartTelemetry2+0x1ec>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe ff38 	bl	8000568 <__aeabi_f2d>
 80016f8:	4604      	mov	r4, r0
 80016fa:	460d      	mov	r5, r1
 80016fc:	4b66      	ldr	r3, [pc, #408]	; (8001898 <StartTelemetry2+0x1f0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe ff31 	bl	8000568 <__aeabi_f2d>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4964      	ldr	r1, [pc, #400]	; (800189c <StartTelemetry2+0x1f4>)
 800170c:	7809      	ldrb	r1, [r1, #0]
 800170e:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001712:	9102      	str	r1, [sp, #8]
 8001714:	e9cd 2300 	strd	r2, r3, [sp]
 8001718:	4622      	mov	r2, r4
 800171a:	462b      	mov	r3, r5
 800171c:	4960      	ldr	r1, [pc, #384]	; (80018a0 <StartTelemetry2+0x1f8>)
 800171e:	f00e f8bd 	bl	800f89c <siprintf>
		  MRT_radio_tx((char*) radio_buffer);
 8001722:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001726:	4618      	mov	r0, r3
 8001728:	f004 fb10 	bl	8005d4c <MRT_radio_tx>
	  }


	  if (counter == SENSORS_SEND_FREQ_DIVIDER){
 800172c:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8001730:	2b0a      	cmp	r3, #10
 8001732:	f040 8093 	bne.w	800185c <StartTelemetry2+0x1b4>
		  counter = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
		  float SEC = (uint8_t) time % 60; sprintf(&SEC,"%.0f",SEC);
		  float SUBSEC = time / 3600.0; sprintf(&SUBSEC,"%.0f",SUBSEC);
		  */

	  	  //Send sensors data
		  memset(radio_buffer, 0, RADIO_BUFFER_SIZE);
 800173c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001740:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001744:	2100      	movs	r1, #0
 8001746:	4618      	mov	r0, r3
 8001748:	f00d f82a 	bl	800e7a0 <memset>
		  sprintf(radio_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%u,%u,E",
				hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 800174c:	4b55      	ldr	r3, [pc, #340]	; (80018a4 <StartTelemetry2+0x1fc>)
 800174e:	681b      	ldr	r3, [r3, #0]
		  sprintf(radio_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%u,%u,E",
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe ff09 	bl	8000568 <__aeabi_f2d>
 8001756:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
				hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 800175a:	4b52      	ldr	r3, [pc, #328]	; (80018a4 <StartTelemetry2+0x1fc>)
 800175c:	685b      	ldr	r3, [r3, #4]
		  sprintf(radio_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%u,%u,E",
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe ff02 	bl	8000568 <__aeabi_f2d>
 8001764:	e9c7 0108 	strd	r0, r1, [r7, #32]
				hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 8001768:	4b4e      	ldr	r3, [pc, #312]	; (80018a4 <StartTelemetry2+0x1fc>)
 800176a:	689b      	ldr	r3, [r3, #8]
		  sprintf(radio_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%u,%u,E",
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe fefb 	bl	8000568 <__aeabi_f2d>
 8001772:	e9c7 0106 	strd	r0, r1, [r7, #24]
				hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 8001776:	4b4b      	ldr	r3, [pc, #300]	; (80018a4 <StartTelemetry2+0x1fc>)
 8001778:	68db      	ldr	r3, [r3, #12]
		  sprintf(radio_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%u,%u,E",
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fef4 	bl	8000568 <__aeabi_f2d>
 8001780:	e9c7 0104 	strd	r0, r1, [r7, #16]
				hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 8001784:	4b47      	ldr	r3, [pc, #284]	; (80018a4 <StartTelemetry2+0x1fc>)
 8001786:	691b      	ldr	r3, [r3, #16]
		  sprintf(radio_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%u,%u,E",
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe feed 	bl	8000568 <__aeabi_f2d>
 800178e:	e9c7 0102 	strd	r0, r1, [r7, #8]
				hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 8001792:	4b44      	ldr	r3, [pc, #272]	; (80018a4 <StartTelemetry2+0x1fc>)
 8001794:	695b      	ldr	r3, [r3, #20]
		  sprintf(radio_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%u,%u,E",
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fee6 	bl	8000568 <__aeabi_f2d>
 800179c:	e9c7 0100 	strd	r0, r1, [r7]
				hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 80017a0:	4b41      	ldr	r3, [pc, #260]	; (80018a8 <StartTelemetry2+0x200>)
 80017a2:	681b      	ldr	r3, [r3, #0]
		  sprintf(radio_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%u,%u,E",
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe fedf 	bl	8000568 <__aeabi_f2d>
 80017aa:	4682      	mov	sl, r0
 80017ac:	468b      	mov	fp, r1
				hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 80017ae:	4b3f      	ldr	r3, [pc, #252]	; (80018ac <StartTelemetry2+0x204>)
 80017b0:	681b      	ldr	r3, [r3, #0]
		  sprintf(radio_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%u,%u,E",
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe fed8 	bl	8000568 <__aeabi_f2d>
 80017b8:	4680      	mov	r8, r0
 80017ba:	4689      	mov	r9, r1
				hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 80017bc:	4b3b      	ldr	r3, [pc, #236]	; (80018ac <StartTelemetry2+0x204>)
 80017be:	685b      	ldr	r3, [r3, #4]
		  sprintf(radio_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%u,%u,E",
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fed1 	bl	8000568 <__aeabi_f2d>
 80017c6:	4604      	mov	r4, r0
 80017c8:	460d      	mov	r5, r1
 80017ca:	4b39      	ldr	r3, [pc, #228]	; (80018b0 <StartTelemetry2+0x208>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	633b      	str	r3, [r7, #48]	; 0x30
 80017d0:	4b38      	ldr	r3, [pc, #224]	; (80018b4 <StartTelemetry2+0x20c>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	461e      	mov	r6, r3
 80017d6:	4b38      	ldr	r3, [pc, #224]	; (80018b8 <StartTelemetry2+0x210>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	4b38      	ldr	r3, [pc, #224]	; (80018bc <StartTelemetry2+0x214>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	4619      	mov	r1, r3
 80017e0:	4b37      	ldr	r3, [pc, #220]	; (80018c0 <StartTelemetry2+0x218>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80017e8:	9314      	str	r3, [sp, #80]	; 0x50
 80017ea:	9113      	str	r1, [sp, #76]	; 0x4c
 80017ec:	9212      	str	r2, [sp, #72]	; 0x48
 80017ee:	9611      	str	r6, [sp, #68]	; 0x44
 80017f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f2:	9310      	str	r3, [sp, #64]	; 0x40
 80017f4:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 80017f8:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80017fc:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8001800:	ed97 7b00 	vldr	d7, [r7]
 8001804:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001808:	ed97 7b02 	vldr	d7, [r7, #8]
 800180c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001810:	ed97 7b04 	vldr	d7, [r7, #16]
 8001814:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001818:	ed97 7b06 	vldr	d7, [r7, #24]
 800181c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001820:	ed97 7b08 	vldr	d7, [r7, #32]
 8001824:	ed8d 7b00 	vstr	d7, [sp]
 8001828:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800182c:	4925      	ldr	r1, [pc, #148]	; (80018c4 <StartTelemetry2+0x21c>)
 800182e:	f00e f835 	bl	800f89c <siprintf>
				prev_min, prev_sec, prev_subsec,
				gates_continuity,	ejection_state_flag);
		  MRT_radio_tx((char*) radio_buffer);
 8001832:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001836:	4618      	mov	r0, r3
 8001838:	f004 fa88 	bl	8005d4c <MRT_radio_tx>



		  if(apogee_flag && iridium_counter == IRIDIUM_SEND_FREQ_DIVIDER){
 800183c:	4b14      	ldr	r3, [pc, #80]	; (8001890 <StartTelemetry2+0x1e8>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d006      	beq.n	8001852 <StartTelemetry2+0x1aa>
 8001844:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 8001848:	2b05      	cmp	r3, #5
 800184a:	d102      	bne.n	8001852 <StartTelemetry2+0x1aa>
			  iridium_counter = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
			  #if IRIDIUM_ //Iridium send
			  MRT_Static_Iridium_getTime(); //TODO doesn't cost anything
			  //MRT_Static_Iridium_sendMessage(msg); TODO IT COSTS CREDITS WATCH OUT
			  #endif
		  }
		  iridium_counter++;
 8001852:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 8001856:	3301      	adds	r3, #1
 8001858:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
	  }
	  counter++;
 800185c:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8001860:	3301      	adds	r3, #1
 8001862:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157


	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	2108      	movs	r1, #8
 800186a:	4808      	ldr	r0, [pc, #32]	; (800188c <StartTelemetry2+0x1e4>)
 800186c:	f005 f842 	bl	80068f4 <HAL_GPIO_WritePin>

	  if (apogee_flag){
 8001870:	4b07      	ldr	r3, [pc, #28]	; (8001890 <StartTelemetry2+0x1e8>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <StartTelemetry2+0x1d8>
		  osDelay(1000/POST_APOGEE_SEND_FREQ);
 8001878:	200a      	movs	r0, #10
 800187a:	f00a f8e2 	bl	800ba42 <osDelay>
 800187e:	e725      	b.n	80016cc <StartTelemetry2+0x24>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_SEND_FREQ);
 8001880:	2014      	movs	r0, #20
 8001882:	f00a f8de 	bl	800ba42 <osDelay>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 8001886:	e721      	b.n	80016cc <StartTelemetry2+0x24>
 8001888:	200059c8 	.word	0x200059c8
 800188c:	40020800 	.word	0x40020800
 8001890:	200002a8 	.word	0x200002a8
 8001894:	20005d5c 	.word	0x20005d5c
 8001898:	20005d58 	.word	0x20005d58
 800189c:	20005d54 	.word	0x20005d54
 80018a0:	08013ab4 	.word	0x08013ab4
 80018a4:	200002c0 	.word	0x200002c0
 80018a8:	200002ec 	.word	0x200002ec
 80018ac:	20000300 	.word	0x20000300
 80018b0:	200002ab 	.word	0x200002ab
 80018b4:	200002ac 	.word	0x200002ac
 80018b8:	200002b0 	.word	0x200002b0
 80018bc:	200002a4 	.word	0x200002a4
 80018c0:	200002a9 	.word	0x200002a9
 80018c4:	08013ac8 	.word	0x08013ac8

080018c8 <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	//Add thread id to the list
	threadsID[3]=osThreadGetId();
 80018d0:	f00a f8a6 	bl	800ba20 <osThreadGetId>
 80018d4:	4603      	mov	r3, r0
 80018d6:	4a13      	ldr	r2, [pc, #76]	; (8001924 <StartSensors3+0x5c>)
 80018d8:	60d3      	str	r3, [r2, #12]


  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 80018da:	2201      	movs	r2, #1
 80018dc:	2102      	movs	r1, #2
 80018de:	4812      	ldr	r0, [pc, #72]	; (8001928 <StartSensors3+0x60>)
 80018e0:	f005 f808 	bl	80068f4 <HAL_GPIO_WritePin>

	  //GPS
	  hgps.pollAll();
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <StartSensors3+0x64>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	4798      	blx	r3

	  //LSM6DSR
	  hlsm6dsr.pollAll();
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <StartSensors3+0x68>)
 80018ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ee:	4798      	blx	r3

	  //LPS22HH
	  hlps22hh.pollAll();
 80018f0:	4b10      	ldr	r3, [pc, #64]	; (8001934 <StartSensors3+0x6c>)
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	4798      	blx	r3

	  //Gates continuity
	  gates_continuity = MRT_getContinuity();
 80018f6:	f001 fa81 	bl	8002dfc <MRT_getContinuity>
 80018fa:	4603      	mov	r3, r0
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <StartSensors3+0x70>)
 8001900:	701a      	strb	r2, [r3, #0]

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 8001902:	2200      	movs	r2, #0
 8001904:	2102      	movs	r1, #2
 8001906:	4808      	ldr	r0, [pc, #32]	; (8001928 <StartSensors3+0x60>)
 8001908:	f004 fff4 	bl	80068f4 <HAL_GPIO_WritePin>

	  if (apogee_flag){
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <StartSensors3+0x74>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <StartSensors3+0x54>
		  osDelay(1000/POST_APOGEE_POLL_FREQ);
 8001914:	200a      	movs	r0, #10
 8001916:	f00a f894 	bl	800ba42 <osDelay>
 800191a:	e7de      	b.n	80018da <StartSensors3+0x12>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_POLL_FREQ);
 800191c:	2014      	movs	r0, #20
 800191e:	f00a f890 	bl	800ba42 <osDelay>
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8001922:	e7da      	b.n	80018da <StartSensors3+0x12>
 8001924:	200059c8 	.word	0x200059c8
 8001928:	40020800 	.word	0x40020800
 800192c:	20000300 	.word	0x20000300
 8001930:	200002c0 	.word	0x200002c0
 8001934:	200002ec 	.word	0x200002ec
 8001938:	200002a4 	.word	0x200002a4
 800193c:	200002a8 	.word	0x200002a8

08001940 <StartWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchDog */
void StartWatchDog(void *argument)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b0c2      	sub	sp, #264	; 0x108
 8001944:	af00      	add	r7, sp, #0
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartWatchDog */

	#if !WATCHDOG_THREAD
	osThreadExit();
 800194a:	f00a f874 	bl	800ba36 <osThreadExit>
	...

08001950 <StartPropulsion4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPropulsion4 */
void StartPropulsion4(void *argument)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPropulsion4 */

	//Add thread id to the list
	threadsID[4]=osThreadGetId();
 8001958:	f00a f862 	bl	800ba20 <osThreadGetId>
 800195c:	4603      	mov	r3, r0
 800195e:	4a02      	ldr	r2, [pc, #8]	; (8001968 <StartPropulsion4+0x18>)
 8001960:	6113      	str	r3, [r2, #16]

	#if !PROPULSION_THREAD
	osThreadExit();
 8001962:	f00a f868 	bl	800ba36 <osThreadExit>
 8001966:	bf00      	nop
 8001968:	200059c8 	.word	0x200059c8

0800196c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08e      	sub	sp, #56	; 0x38
 8001970:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]
 8001980:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	623b      	str	r3, [r7, #32]
 8001986:	4bb5      	ldr	r3, [pc, #724]	; (8001c5c <MX_GPIO_Init+0x2f0>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4ab4      	ldr	r2, [pc, #720]	; (8001c5c <MX_GPIO_Init+0x2f0>)
 800198c:	f043 0310 	orr.w	r3, r3, #16
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4bb2      	ldr	r3, [pc, #712]	; (8001c5c <MX_GPIO_Init+0x2f0>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0310 	and.w	r3, r3, #16
 800199a:	623b      	str	r3, [r7, #32]
 800199c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
 80019a2:	4bae      	ldr	r3, [pc, #696]	; (8001c5c <MX_GPIO_Init+0x2f0>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4aad      	ldr	r2, [pc, #692]	; (8001c5c <MX_GPIO_Init+0x2f0>)
 80019a8:	f043 0304 	orr.w	r3, r3, #4
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4bab      	ldr	r3, [pc, #684]	; (8001c5c <MX_GPIO_Init+0x2f0>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	61fb      	str	r3, [r7, #28]
 80019b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
 80019be:	4ba7      	ldr	r3, [pc, #668]	; (8001c5c <MX_GPIO_Init+0x2f0>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4aa6      	ldr	r2, [pc, #664]	; (8001c5c <MX_GPIO_Init+0x2f0>)
 80019c4:	f043 0320 	orr.w	r3, r3, #32
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4ba4      	ldr	r3, [pc, #656]	; (8001c5c <MX_GPIO_Init+0x2f0>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0320 	and.w	r3, r3, #32
 80019d2:	61bb      	str	r3, [r7, #24]
 80019d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	4ba0      	ldr	r3, [pc, #640]	; (8001c5c <MX_GPIO_Init+0x2f0>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a9f      	ldr	r2, [pc, #636]	; (8001c5c <MX_GPIO_Init+0x2f0>)
 80019e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b9d      	ldr	r3, [pc, #628]	; (8001c5c <MX_GPIO_Init+0x2f0>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	4b99      	ldr	r3, [pc, #612]	; (8001c5c <MX_GPIO_Init+0x2f0>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a98      	ldr	r2, [pc, #608]	; (8001c5c <MX_GPIO_Init+0x2f0>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b96      	ldr	r3, [pc, #600]	; (8001c5c <MX_GPIO_Init+0x2f0>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	4b92      	ldr	r3, [pc, #584]	; (8001c5c <MX_GPIO_Init+0x2f0>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a91      	ldr	r2, [pc, #580]	; (8001c5c <MX_GPIO_Init+0x2f0>)
 8001a18:	f043 0302 	orr.w	r3, r3, #2
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b8f      	ldr	r3, [pc, #572]	; (8001c5c <MX_GPIO_Init+0x2f0>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	4b8b      	ldr	r3, [pc, #556]	; (8001c5c <MX_GPIO_Init+0x2f0>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4a8a      	ldr	r2, [pc, #552]	; (8001c5c <MX_GPIO_Init+0x2f0>)
 8001a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4b88      	ldr	r3, [pc, #544]	; (8001c5c <MX_GPIO_Init+0x2f0>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	4b84      	ldr	r3, [pc, #528]	; (8001c5c <MX_GPIO_Init+0x2f0>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a83      	ldr	r2, [pc, #524]	; (8001c5c <MX_GPIO_Init+0x2f0>)
 8001a50:	f043 0308 	orr.w	r3, r3, #8
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b81      	ldr	r3, [pc, #516]	; (8001c5c <MX_GPIO_Init+0x2f0>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 8001a62:	2200      	movs	r2, #0
 8001a64:	f248 4184 	movw	r1, #33924	; 0x8484
 8001a68:	487d      	ldr	r0, [pc, #500]	; (8001c60 <MX_GPIO_Init+0x2f4>)
 8001a6a:	f004 ff43 	bl	80068f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8001a74:	487b      	ldr	r0, [pc, #492]	; (8001c64 <MX_GPIO_Init+0x2f8>)
 8001a76:	f004 ff3d 	bl	80068f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001a80:	4879      	ldr	r0, [pc, #484]	; (8001c68 <MX_GPIO_Init+0x2fc>)
 8001a82:	f004 ff37 	bl	80068f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2108      	movs	r1, #8
 8001a8a:	4878      	ldr	r0, [pc, #480]	; (8001c6c <MX_GPIO_Init+0x300>)
 8001a8c:	f004 ff32 	bl	80068f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 8001a90:	2200      	movs	r2, #0
 8001a92:	f645 2126 	movw	r1, #23078	; 0x5a26
 8001a96:	4876      	ldr	r0, [pc, #472]	; (8001c70 <MX_GPIO_Init+0x304>)
 8001a98:	f004 ff2c 	bl	80068f4 <HAL_GPIO_WritePin>
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin, GPIO_PIN_RESET);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8001aa2:	4874      	ldr	r0, [pc, #464]	; (8001c74 <MX_GPIO_Init+0x308>)
 8001aa4:	f004 ff26 	bl	80068f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 8001aae:	4872      	ldr	r0, [pc, #456]	; (8001c78 <MX_GPIO_Init+0x30c>)
 8001ab0:	f004 ff20 	bl	80068f4 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 8001ab4:	f248 4384 	movw	r3, #33924	; 0x8484
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aba:	2301      	movs	r3, #1
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aca:	4619      	mov	r1, r3
 8001acc:	4864      	ldr	r0, [pc, #400]	; (8001c60 <MX_GPIO_Init+0x2f4>)
 8001ace:	f004 fd4d 	bl	800656c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001adc:	2301      	movs	r3, #1
 8001ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae8:	4619      	mov	r1, r3
 8001aea:	485e      	ldr	r0, [pc, #376]	; (8001c64 <MX_GPIO_Init+0x2f8>)
 8001aec:	f004 fd3e 	bl	800656c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8001af0:	2301      	movs	r3, #1
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001af4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001af8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 8001afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b02:	4619      	mov	r1, r3
 8001b04:	4858      	ldr	r0, [pc, #352]	; (8001c68 <MX_GPIO_Init+0x2fc>)
 8001b06:	f004 fd31 	bl	800656c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 8001b0a:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b10:	2301      	movs	r3, #1
 8001b12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b20:	4619      	mov	r1, r3
 8001b22:	4851      	ldr	r0, [pc, #324]	; (8001c68 <MX_GPIO_Init+0x2fc>)
 8001b24:	f004 fd22 	bl	800656c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8001b28:	2308      	movs	r3, #8
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2300      	movs	r3, #0
 8001b36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 8001b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	484b      	ldr	r0, [pc, #300]	; (8001c6c <MX_GPIO_Init+0x300>)
 8001b40:	f004 fd14 	bl	800656c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8001b44:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b56:	4619      	mov	r1, r3
 8001b58:	4843      	ldr	r0, [pc, #268]	; (8001c68 <MX_GPIO_Init+0x2fc>)
 8001b5a:	f004 fd07 	bl	800656c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b62:	2300      	movs	r3, #0
 8001b64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 8001b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4840      	ldr	r0, [pc, #256]	; (8001c74 <MX_GPIO_Init+0x308>)
 8001b72:	f004 fcfb 	bl	800656c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 8001b76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8001b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4836      	ldr	r0, [pc, #216]	; (8001c64 <MX_GPIO_Init+0x2f8>)
 8001b8c:	f004 fcee 	bl	800656c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 8001b90:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b96:	2301      	movs	r3, #1
 8001b98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	482e      	ldr	r0, [pc, #184]	; (8001c64 <MX_GPIO_Init+0x2f8>)
 8001baa:	f004 fcdf 	bl	800656c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|IN_EJ_Main_Cont_Pin
 8001bae:	f242 4319 	movw	r3, #9241	; 0x2419
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
                          |IN_EJ_Drogue_Cont_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	482b      	ldr	r0, [pc, #172]	; (8001c70 <MX_GPIO_Init+0x304>)
 8001bc4:	f004 fcd2 	bl	800656c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 8001bc8:	f645 2326 	movw	r3, #23078	; 0x5a26
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bde:	4619      	mov	r1, r3
 8001be0:	4823      	ldr	r0, [pc, #140]	; (8001c70 <MX_GPIO_Init+0x304>)
 8001be2:	f004 fcc3 	bl	800656c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 8001be6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bec:	2300      	movs	r3, #0
 8001bee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4819      	ldr	r0, [pc, #100]	; (8001c60 <MX_GPIO_Init+0x2f4>)
 8001bfc:	f004 fcb6 	bl	800656c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB8 PBPin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin;
 8001c00:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c06:	2301      	movs	r3, #1
 8001c08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c16:	4619      	mov	r1, r3
 8001c18:	4816      	ldr	r0, [pc, #88]	; (8001c74 <MX_GPIO_Init+0x308>)
 8001c1a:	f004 fca7 	bl	800656c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8001c1e:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c24:	2301      	movs	r3, #1
 8001c26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c34:	4619      	mov	r1, r3
 8001c36:	4810      	ldr	r0, [pc, #64]	; (8001c78 <MX_GPIO_Init+0x30c>)
 8001c38:	f004 fc98 	bl	800656c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8001c3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c42:	2300      	movs	r3, #0
 8001c44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8001c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4809      	ldr	r0, [pc, #36]	; (8001c78 <MX_GPIO_Init+0x30c>)
 8001c52:	f004 fc8b 	bl	800656c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 8001c56:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001c5a:	e00f      	b.n	8001c7c <MX_GPIO_Init+0x310>
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40021400 	.word	0x40021400
 8001c68:	40020800 	.word	0x40020800
 8001c6c:	40020000 	.word	0x40020000
 8001c70:	40021800 	.word	0x40021800
 8001c74:	40020400 	.word	0x40020400
 8001c78:	40020c00 	.word	0x40020c00
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c7e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4807      	ldr	r0, [pc, #28]	; (8001cac <MX_GPIO_Init+0x340>)
 8001c90:	f004 fc6c 	bl	800656c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001c94:	2200      	movs	r2, #0
 8001c96:	2105      	movs	r1, #5
 8001c98:	2006      	movs	r0, #6
 8001c9a:	f004 fc2f 	bl	80064fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001c9e:	2006      	movs	r0, #6
 8001ca0:	f004 fc48 	bl	8006534 <HAL_NVIC_EnableIRQ>

}
 8001ca4:	bf00      	nop
 8001ca6:	3738      	adds	r7, #56	; 0x38
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40021800 	.word	0x40021800

08001cb0 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <MX_I2C2_Init+0x74>)
 8001cb6:	4a1c      	ldr	r2, [pc, #112]	; (8001d28 <MX_I2C2_Init+0x78>)
 8001cb8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001cba:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <MX_I2C2_Init+0x74>)
 8001cbc:	4a1b      	ldr	r2, [pc, #108]	; (8001d2c <MX_I2C2_Init+0x7c>)
 8001cbe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cc0:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <MX_I2C2_Init+0x74>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001cc6:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <MX_I2C2_Init+0x74>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ccc:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <MX_I2C2_Init+0x74>)
 8001cce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cd2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cd4:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <MX_I2C2_Init+0x74>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001cda:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <MX_I2C2_Init+0x74>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ce0:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <MX_I2C2_Init+0x74>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ce6:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <MX_I2C2_Init+0x74>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001cec:	480d      	ldr	r0, [pc, #52]	; (8001d24 <MX_I2C2_Init+0x74>)
 8001cee:	f004 fe33 	bl	8006958 <HAL_I2C_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001cf8:	f000 f9dc 	bl	80020b4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	4809      	ldr	r0, [pc, #36]	; (8001d24 <MX_I2C2_Init+0x74>)
 8001d00:	f005 fe1f 	bl	8007942 <HAL_I2CEx_ConfigAnalogFilter>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001d0a:	f000 f9d3 	bl	80020b4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001d0e:	2100      	movs	r1, #0
 8001d10:	4804      	ldr	r0, [pc, #16]	; (8001d24 <MX_I2C2_Init+0x74>)
 8001d12:	f005 fe52 	bl	80079ba <HAL_I2CEx_ConfigDigitalFilter>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001d1c:	f000 f9ca 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20005a40 	.word	0x20005a40
 8001d28:	40005800 	.word	0x40005800
 8001d2c:	000186a0 	.word	0x000186a0

08001d30 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001d34:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <MX_I2C3_Init+0x74>)
 8001d36:	4a1c      	ldr	r2, [pc, #112]	; (8001da8 <MX_I2C3_Init+0x78>)
 8001d38:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001d3a:	4b1a      	ldr	r3, [pc, #104]	; (8001da4 <MX_I2C3_Init+0x74>)
 8001d3c:	4a1b      	ldr	r2, [pc, #108]	; (8001dac <MX_I2C3_Init+0x7c>)
 8001d3e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d40:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <MX_I2C3_Init+0x74>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001d46:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <MX_I2C3_Init+0x74>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d4c:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <MX_I2C3_Init+0x74>)
 8001d4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d52:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d54:	4b13      	ldr	r3, [pc, #76]	; (8001da4 <MX_I2C3_Init+0x74>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001d5a:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <MX_I2C3_Init+0x74>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d60:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <MX_I2C3_Init+0x74>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d66:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <MX_I2C3_Init+0x74>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001d6c:	480d      	ldr	r0, [pc, #52]	; (8001da4 <MX_I2C3_Init+0x74>)
 8001d6e:	f004 fdf3 	bl	8006958 <HAL_I2C_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001d78:	f000 f99c 	bl	80020b4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4809      	ldr	r0, [pc, #36]	; (8001da4 <MX_I2C3_Init+0x74>)
 8001d80:	f005 fddf 	bl	8007942 <HAL_I2CEx_ConfigAnalogFilter>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001d8a:	f000 f993 	bl	80020b4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001d8e:	2100      	movs	r1, #0
 8001d90:	4804      	ldr	r0, [pc, #16]	; (8001da4 <MX_I2C3_Init+0x74>)
 8001d92:	f005 fe12 	bl	80079ba <HAL_I2CEx_ConfigDigitalFilter>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001d9c:	f000 f98a 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	200059ec 	.word	0x200059ec
 8001da8:	40005c00 	.word	0x40005c00
 8001dac:	000186a0 	.word	0x000186a0

08001db0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08c      	sub	sp, #48	; 0x30
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 031c 	add.w	r3, r7, #28
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a42      	ldr	r2, [pc, #264]	; (8001ed8 <HAL_I2C_MspInit+0x128>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d12d      	bne.n	8001e2e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
 8001dd6:	4b41      	ldr	r3, [pc, #260]	; (8001edc <HAL_I2C_MspInit+0x12c>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4a40      	ldr	r2, [pc, #256]	; (8001edc <HAL_I2C_MspInit+0x12c>)
 8001ddc:	f043 0302 	orr.w	r3, r3, #2
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4b3e      	ldr	r3, [pc, #248]	; (8001edc <HAL_I2C_MspInit+0x12c>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	61bb      	str	r3, [r7, #24]
 8001dec:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001dee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001df4:	2312      	movs	r3, #18
 8001df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e00:	2304      	movs	r3, #4
 8001e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e04:	f107 031c 	add.w	r3, r7, #28
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4835      	ldr	r0, [pc, #212]	; (8001ee0 <HAL_I2C_MspInit+0x130>)
 8001e0c:	f004 fbae 	bl	800656c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	4b31      	ldr	r3, [pc, #196]	; (8001edc <HAL_I2C_MspInit+0x12c>)
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	4a30      	ldr	r2, [pc, #192]	; (8001edc <HAL_I2C_MspInit+0x12c>)
 8001e1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e20:	4b2e      	ldr	r3, [pc, #184]	; (8001edc <HAL_I2C_MspInit+0x12c>)
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001e2c:	e050      	b.n	8001ed0 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a2c      	ldr	r2, [pc, #176]	; (8001ee4 <HAL_I2C_MspInit+0x134>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d14b      	bne.n	8001ed0 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e38:	2300      	movs	r3, #0
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	4b27      	ldr	r3, [pc, #156]	; (8001edc <HAL_I2C_MspInit+0x12c>)
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e40:	4a26      	ldr	r2, [pc, #152]	; (8001edc <HAL_I2C_MspInit+0x12c>)
 8001e42:	f043 0304 	orr.w	r3, r3, #4
 8001e46:	6313      	str	r3, [r2, #48]	; 0x30
 8001e48:	4b24      	ldr	r3, [pc, #144]	; (8001edc <HAL_I2C_MspInit+0x12c>)
 8001e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	4b20      	ldr	r3, [pc, #128]	; (8001edc <HAL_I2C_MspInit+0x12c>)
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5c:	4a1f      	ldr	r2, [pc, #124]	; (8001edc <HAL_I2C_MspInit+0x12c>)
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	6313      	str	r3, [r2, #48]	; 0x30
 8001e64:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <HAL_I2C_MspInit+0x12c>)
 8001e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e76:	2312      	movs	r3, #18
 8001e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e82:	2304      	movs	r3, #4
 8001e84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e86:	f107 031c 	add.w	r3, r7, #28
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4816      	ldr	r0, [pc, #88]	; (8001ee8 <HAL_I2C_MspInit+0x138>)
 8001e8e:	f004 fb6d 	bl	800656c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e98:	2312      	movs	r3, #18
 8001e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ea4:	2304      	movs	r3, #4
 8001ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea8:	f107 031c 	add.w	r3, r7, #28
 8001eac:	4619      	mov	r1, r3
 8001eae:	480f      	ldr	r0, [pc, #60]	; (8001eec <HAL_I2C_MspInit+0x13c>)
 8001eb0:	f004 fb5c 	bl	800656c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <HAL_I2C_MspInit+0x12c>)
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	4a07      	ldr	r2, [pc, #28]	; (8001edc <HAL_I2C_MspInit+0x12c>)
 8001ebe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ec2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <HAL_I2C_MspInit+0x12c>)
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	68bb      	ldr	r3, [r7, #8]
}
 8001ed0:	bf00      	nop
 8001ed2:	3730      	adds	r7, #48	; 0x30
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40005800 	.word	0x40005800
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40020400 	.word	0x40020400
 8001ee4:	40005c00 	.word	0x40005c00
 8001ee8:	40020800 	.word	0x40020800
 8001eec:	40020000 	.word	0x40020000

08001ef0 <main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int main(void){
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
	MRT_STM_Init();
 8001ef4:	f000 f894 	bl	8002020 <MRT_STM_Init>
	println("\r\n\r\nSTM Init...OK");
 8001ef8:	480c      	ldr	r0, [pc, #48]	; (8001f2c <main+0x3c>)
 8001efa:	f7ff f887 	bl	800100c <println>

	MRT_Init();
 8001efe:	f7ff f923 	bl	8001148 <MRT_Init>

	println("\r\n\r\n/****Starting FC****/\r\n\r\n");
 8001f02:	480b      	ldr	r0, [pc, #44]	; (8001f30 <main+0x40>)
 8001f04:	f7ff f882 	bl	800100c <println>
	HAL_IWDG_Refresh(&hiwdg);
	buzz_startup_success();
 8001f08:	f7ff f906 	bl	8001118 <buzz_startup_success>

	MRT_waitForLaunch();
 8001f0c:	f000 f8aa 	bl	8002064 <MRT_waitForLaunch>
	//if (DEBUG) TESTING_LOOP(); //TODO remove

	//TODO I2C SENSORS (lsm and lps) SOMETIMES DON'T WANT TO WORK ANYMORE -> NEED TO RESET THE POWER (Enter quick standByMode?)

	//Initialize the os
	MX_FREERTOS_Init();
 8001f10:	f7ff fb3c 	bl	800158c <MX_FREERTOS_Init>

	//Starting the os
	println("\r\n/****Starting the OS****/\r\n");
 8001f14:	4807      	ldr	r0, [pc, #28]	; (8001f34 <main+0x44>)
 8001f16:	f7ff f879 	bl	800100c <println>
	osKernelStart();
 8001f1a:	f009 fcc9 	bl	800b8b0 <osKernelStart>

	println("SOMETHING WENT HORRIBLY WRONG, WAITING FOR WATCH DOG RESET");
 8001f1e:	4806      	ldr	r0, [pc, #24]	; (8001f38 <main+0x48>)
 8001f20:	f7ff f874 	bl	800100c <println>
	HAL_IWDG_Refresh(&hiwdg);
	MRT_Deinit();
 8001f24:	f7ff f926 	bl	8001174 <MRT_Deinit>
	while (1){}
 8001f28:	e7fe      	b.n	8001f28 <main+0x38>
 8001f2a:	bf00      	nop
 8001f2c:	08013b20 	.word	0x08013b20
 8001f30:	08013b34 	.word	0x08013b34
 8001f34:	08013b54 	.word	0x08013b54
 8001f38:	08013b74 	.word	0x08013b74

08001f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b094      	sub	sp, #80	; 0x50
 8001f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f42:	f107 0320 	add.w	r3, r7, #32
 8001f46:	2230      	movs	r2, #48	; 0x30
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f00c fc28 	bl	800e7a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f50:	f107 030c 	add.w	r3, r7, #12
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f60:	2300      	movs	r3, #0
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	4b2c      	ldr	r3, [pc, #176]	; (8002018 <SystemClock_Config+0xdc>)
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	4a2b      	ldr	r2, [pc, #172]	; (8002018 <SystemClock_Config+0xdc>)
 8001f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f70:	4b29      	ldr	r3, [pc, #164]	; (8002018 <SystemClock_Config+0xdc>)
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	607b      	str	r3, [r7, #4]
 8001f80:	4b26      	ldr	r3, [pc, #152]	; (800201c <SystemClock_Config+0xe0>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a25      	ldr	r2, [pc, #148]	; (800201c <SystemClock_Config+0xe0>)
 8001f86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	4b23      	ldr	r3, [pc, #140]	; (800201c <SystemClock_Config+0xe0>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f94:	607b      	str	r3, [r7, #4]
 8001f96:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001f98:	2309      	movs	r3, #9
 8001f9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001faa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001fb0:	2308      	movs	r3, #8
 8001fb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001fb4:	23b4      	movs	r3, #180	; 0xb4
 8001fb6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fc0:	f107 0320 	add.w	r3, r7, #32
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f005 fdc5 	bl	8007b54 <HAL_RCC_OscConfig>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001fd0:	f000 f870 	bl	80020b4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001fd4:	f005 fd6e 	bl	8007ab4 <HAL_PWREx_EnableOverDrive>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001fde:	f000 f869 	bl	80020b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fe2:	230f      	movs	r3, #15
 8001fe4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001fee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ff2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001ff4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ff8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ffa:	f107 030c 	add.w	r3, r7, #12
 8001ffe:	2105      	movs	r1, #5
 8002000:	4618      	mov	r0, r3
 8002002:	f006 f81f 	bl	8008044 <HAL_RCC_ClockConfig>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800200c:	f000 f852 	bl	80020b4 <Error_Handler>
  }
}
 8002010:	bf00      	nop
 8002012:	3750      	adds	r7, #80	; 0x50
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40023800 	.word	0x40023800
 800201c:	40007000 	.word	0x40007000

08002020 <MRT_STM_Init>:

/* USER CODE BEGIN 4 */

void MRT_STM_Init(void){
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
	HAL_Init();
 8002024:	f003 feb6 	bl	8005d94 <HAL_Init>
	SystemClock_Config();
 8002028:	f7ff ff88 	bl	8001f3c <SystemClock_Config>

	MX_GPIO_Init();
 800202c:	f7ff fc9e 	bl	800196c <MX_GPIO_Init>
	MX_ADC1_Init();
 8002030:	f7ff fa16 	bl	8001460 <MX_ADC1_Init>
	MX_I2C2_Init();
 8002034:	f7ff fe3c 	bl	8001cb0 <MX_I2C2_Init>
	MX_I2C3_Init();
 8002038:	f7ff fe7a 	bl	8001d30 <MX_I2C3_Init>
	MX_SPI2_Init();
 800203c:	f000 fa86 	bl	800254c <MX_SPI2_Init>
	MX_SPI4_Init();
 8002040:	f000 faba 	bl	80025b8 <MX_SPI4_Init>
	MX_SPI5_Init();
 8002044:	f000 faee 	bl	8002624 <MX_SPI5_Init>
	MX_TIM2_Init();
 8002048:	f000 fcae 	bl	80029a8 <MX_TIM2_Init>
	MX_UART8_Init();
 800204c:	f000 fd7a 	bl	8002b44 <MX_UART8_Init>
	MX_USART3_UART_Init();
 8002050:	f000 fda2 	bl	8002b98 <MX_USART3_UART_Init>
	MX_USART6_UART_Init();
 8002054:	f000 fdca 	bl	8002bec <MX_USART6_UART_Init>
	MX_RTC_Init();
 8002058:	f000 f832 	bl	80020c0 <MX_RTC_Init>
	//MX_IWDG_Init(); TODO ADDED IN MRT_Init()
	MX_FATFS_Init();
 800205c:	f009 fafa 	bl	800b654 <MX_FATFS_Init>
}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}

08002064 <MRT_waitForLaunch>:

void MRT_waitForLaunch(void){
 8002064:	b580      	push	{r7, lr}
 8002066:	b0c2      	sub	sp, #264	; 0x108
 8002068:	af00      	add	r7, sp, #0

	println("Waiting for launch command from ground station\r\n");
 800206a:	4807      	ldr	r0, [pc, #28]	; (8002088 <MRT_waitForLaunch+0x24>)
 800206c:	f7fe ffce 	bl	800100c <println>

	char radio_buffer[RADIO_BUFFER_SIZE];
	radio_command cmd = -1;
 8002070:	23ff      	movs	r3, #255	; 0xff
 8002072:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

	//Poll propulsion until launch command sent
	while((XTEND_ || SRADIO_) && ejection_state_flag == PAD && wu_flag == 0){
 8002076:	bf00      	nop
		HAL_Delay(1000/PRE_APOGEE_SEND_FREQ);
	}


	//Send acknowledgement
	MRT_radio_tx((char*) "LAUNCH COMMAND RECEIVED"); //TODO CHECK AT WHAT JASPER DID
 8002078:	4804      	ldr	r0, [pc, #16]	; (800208c <MRT_waitForLaunch+0x28>)
 800207a:	f003 fe67 	bl	8005d4c <MRT_radio_tx>
}
 800207e:	bf00      	nop
 8002080:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	08013bb0 	.word	0x08013bb0
 800208c:	08013be4 	.word	0x08013be4

08002090 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a04      	ldr	r2, [pc, #16]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d101      	bne.n	80020a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020a2:	f003 fe99 	bl	8005dd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40001000 	.word	0x40001000

080020b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020b8:	b672      	cpsid	i
}
 80020ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020bc:	e7fe      	b.n	80020bc <Error_Handler+0x8>
	...

080020c0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b090      	sub	sp, #64	; 0x40
 80020c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80020c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	605a      	str	r2, [r3, #4]
 80020d0:	609a      	str	r2, [r3, #8]
 80020d2:	60da      	str	r2, [r3, #12]
 80020d4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80020d6:	2300      	movs	r3, #0
 80020d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80020da:	463b      	mov	r3, r7
 80020dc:	2228      	movs	r2, #40	; 0x28
 80020de:	2100      	movs	r1, #0
 80020e0:	4618      	mov	r0, r3
 80020e2:	f00c fb5d 	bl	800e7a0 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80020e6:	4b3a      	ldr	r3, [pc, #232]	; (80021d0 <MX_RTC_Init+0x110>)
 80020e8:	4a3a      	ldr	r2, [pc, #232]	; (80021d4 <MX_RTC_Init+0x114>)
 80020ea:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80020ec:	4b38      	ldr	r3, [pc, #224]	; (80021d0 <MX_RTC_Init+0x110>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80020f2:	4b37      	ldr	r3, [pc, #220]	; (80021d0 <MX_RTC_Init+0x110>)
 80020f4:	227f      	movs	r2, #127	; 0x7f
 80020f6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80020f8:	4b35      	ldr	r3, [pc, #212]	; (80021d0 <MX_RTC_Init+0x110>)
 80020fa:	22ff      	movs	r2, #255	; 0xff
 80020fc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80020fe:	4b34      	ldr	r3, [pc, #208]	; (80021d0 <MX_RTC_Init+0x110>)
 8002100:	2200      	movs	r2, #0
 8002102:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002104:	4b32      	ldr	r3, [pc, #200]	; (80021d0 <MX_RTC_Init+0x110>)
 8002106:	2200      	movs	r2, #0
 8002108:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800210a:	4b31      	ldr	r3, [pc, #196]	; (80021d0 <MX_RTC_Init+0x110>)
 800210c:	2200      	movs	r2, #0
 800210e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002110:	482f      	ldr	r0, [pc, #188]	; (80021d0 <MX_RTC_Init+0x110>)
 8002112:	f006 fb81 	bl	8008818 <HAL_RTC_Init>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800211c:	f7ff ffca 	bl	80020b4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002120:	2300      	movs	r3, #0
 8002122:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8002126:	2300      	movs	r3, #0
 8002128:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 800212c:	2300      	movs	r3, #0
 800212e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002132:	2300      	movs	r3, #0
 8002134:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002136:	2300      	movs	r3, #0
 8002138:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800213a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800213e:	2201      	movs	r2, #1
 8002140:	4619      	mov	r1, r3
 8002142:	4823      	ldr	r0, [pc, #140]	; (80021d0 <MX_RTC_Init+0x110>)
 8002144:	f006 fbf9 	bl	800893a <HAL_RTC_SetTime>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800214e:	f7ff ffb1 	bl	80020b4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002152:	2301      	movs	r3, #1
 8002154:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002158:	2301      	movs	r3, #1
 800215a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 800215e:	2301      	movs	r3, #1
 8002160:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8002164:	2300      	movs	r3, #0
 8002166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800216a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800216e:	2201      	movs	r2, #1
 8002170:	4619      	mov	r1, r3
 8002172:	4817      	ldr	r0, [pc, #92]	; (80021d0 <MX_RTC_Init+0x110>)
 8002174:	f006 fc9e 	bl	8008ab4 <HAL_RTC_SetDate>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800217e:	f7ff ff99 	bl	80020b4 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002182:	2300      	movs	r3, #0
 8002184:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8002186:	2301      	movs	r3, #1
 8002188:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800218a:	2300      	movs	r3, #0
 800218c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800218e:	2300      	movs	r3, #0
 8002190:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800219e:	2300      	movs	r3, #0
 80021a0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80021a6:	2301      	movs	r3, #1
 80021a8:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80021ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80021b2:	463b      	mov	r3, r7
 80021b4:	2201      	movs	r2, #1
 80021b6:	4619      	mov	r1, r3
 80021b8:	4805      	ldr	r0, [pc, #20]	; (80021d0 <MX_RTC_Init+0x110>)
 80021ba:	f006 fd23 	bl	8008c04 <HAL_RTC_SetAlarm_IT>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80021c4:	f7ff ff76 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80021c8:	bf00      	nop
 80021ca:	3740      	adds	r7, #64	; 0x40
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20005a94 	.word	0x20005a94
 80021d4:	40002800 	.word	0x40002800

080021d8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08e      	sub	sp, #56	; 0x38
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021e0:	f107 0308 	add.w	r3, r7, #8
 80021e4:	2230      	movs	r2, #48	; 0x30
 80021e6:	2100      	movs	r1, #0
 80021e8:	4618      	mov	r0, r3
 80021ea:	f00c fad9 	bl	800e7a0 <memset>
  if(rtcHandle->Instance==RTC)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a10      	ldr	r2, [pc, #64]	; (8002234 <HAL_RTC_MspInit+0x5c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d119      	bne.n	800222c <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021f8:	2320      	movs	r3, #32
 80021fa:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80021fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002200:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002202:	f107 0308 	add.w	r3, r7, #8
 8002206:	4618      	mov	r0, r3
 8002208:	f006 f948 	bl	800849c <HAL_RCCEx_PeriphCLKConfig>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002212:	f7ff ff4f 	bl	80020b4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002216:	4b08      	ldr	r3, [pc, #32]	; (8002238 <HAL_RTC_MspInit+0x60>)
 8002218:	2201      	movs	r2, #1
 800221a:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 800221c:	2200      	movs	r2, #0
 800221e:	2105      	movs	r1, #5
 8002220:	2029      	movs	r0, #41	; 0x29
 8002222:	f004 f96b 	bl	80064fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002226:	2029      	movs	r0, #41	; 0x29
 8002228:	f004 f984 	bl	8006534 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800222c:	bf00      	nop
 800222e:	3738      	adds	r7, #56	; 0x38
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40002800 	.word	0x40002800
 8002238:	42470e3c 	.word	0x42470e3c

0800223c <MRT_rtc_Init>:


//**************************************************//
//FUNCTIONS

void MRT_rtc_Init(void){
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
	println("\r\nMRT RTC Init");
 8002240:	4816      	ldr	r0, [pc, #88]	; (800229c <MRT_rtc_Init+0x60>)
 8002242:	f7fe fee3 	bl	800100c <println>

	print("\tSetting RTC to previous time...");
 8002246:	4816      	ldr	r0, [pc, #88]	; (80022a0 <MRT_rtc_Init+0x64>)
 8002248:	f7fe fefe 	bl	8001048 <print>
	MRT_set_rtc(prev_hours,prev_min,prev_sec);
 800224c:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <MRT_rtc_Init+0x68>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	4a15      	ldr	r2, [pc, #84]	; (80022a8 <MRT_rtc_Init+0x6c>)
 8002252:	7811      	ldrb	r1, [r2, #0]
 8002254:	4a15      	ldr	r2, [pc, #84]	; (80022ac <MRT_rtc_Init+0x70>)
 8002256:	7812      	ldrb	r2, [r2, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f000 f8eb 	bl	8002434 <MRT_set_rtc>
	println("OK");
 800225e:	4814      	ldr	r0, [pc, #80]	; (80022b0 <MRT_rtc_Init+0x74>)
 8002260:	f7fe fed4 	bl	800100c <println>

	#if ALARM_A_ACTIVE
		print("\tSetting alarmA...");
 8002264:	4813      	ldr	r0, [pc, #76]	; (80022b4 <MRT_rtc_Init+0x78>)
 8002266:	f7fe feef 	bl	8001048 <print>
		HAL_Delay(2000); //To make sure that when you set the Alarm it doesn't go off automatically
 800226a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800226e:	f003 fdd3 	bl	8005e18 <HAL_Delay>
		if (wu_flag == 0){
 8002272:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <MRT_rtc_Init+0x7c>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d105      	bne.n	8002286 <MRT_rtc_Init+0x4a>
			MRT_set_alarmA(PRE_WHEN_SLEEP_TIME_HOURS, PRE_WHEN_SLEEP_TIME_MIN, PRE_WHEN_SLEEP_TIME_SEC);
 800227a:	2200      	movs	r2, #0
 800227c:	211e      	movs	r1, #30
 800227e:	2004      	movs	r0, #4
 8002280:	f000 f91e 	bl	80024c0 <MRT_set_alarmA>
 8002284:	e004      	b.n	8002290 <MRT_rtc_Init+0x54>
		}
		else{
			MRT_set_alarmA(POST_WHEN_SLEEP_TIME_HOURS, POST_WHEN_SLEEP_TIME_MIN, POST_WHEN_SLEEP_TIME_SEC);
 8002286:	2200      	movs	r2, #0
 8002288:	2100      	movs	r1, #0
 800228a:	200e      	movs	r0, #14
 800228c:	f000 f918 	bl	80024c0 <MRT_set_alarmA>
		}
		println("OK");
 8002290:	4807      	ldr	r0, [pc, #28]	; (80022b0 <MRT_rtc_Init+0x74>)
 8002292:	f7fe febb 	bl	800100c <println>
	#endif
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	08013bfc 	.word	0x08013bfc
 80022a0:	08013c0c 	.word	0x08013c0c
 80022a4:	200002aa 	.word	0x200002aa
 80022a8:	200002ab 	.word	0x200002ab
 80022ac:	200002ac 	.word	0x200002ac
 80022b0:	08013c30 	.word	0x08013c30
 80022b4:	08013c34 	.word	0x08013c34
 80022b8:	200002a6 	.word	0x200002a6

080022bc <MRT_check_for_wake_up>:


void MRT_check_for_wake_up(void){
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 80022c0:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <MRT_check_for_wake_up+0x40>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d112      	bne.n	80022f2 <MRT_check_for_wake_up+0x36>
	{

		wu_flag = 1;
 80022cc:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <MRT_check_for_wake_up+0x44>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 80022d2:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <MRT_check_for_wake_up+0x40>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a09      	ldr	r2, [pc, #36]	; (80022fc <MRT_check_for_wake_up+0x40>)
 80022d8:	f043 0308 	orr.w	r3, r3, #8
 80022dc:	6013      	str	r3, [r2, #0]

		println("Wakeup from STANDBY MODE");
 80022de:	4809      	ldr	r0, [pc, #36]	; (8002304 <MRT_check_for_wake_up+0x48>)
 80022e0:	f7fe fe94 	bl	800100c <println>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 80022e4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80022e8:	f005 fbb8 	bl	8007a5c <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc); //TODO hrtc from rtc.h (should we pass it as an argument instead?)
 80022ec:	4806      	ldr	r0, [pc, #24]	; (8002308 <MRT_check_for_wake_up+0x4c>)
 80022ee:	f006 ff43 	bl	8009178 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_clear_alarms_flags();
 80022f2:	f000 f80b 	bl	800230c <MRT_clear_alarms_flags>
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40007000 	.word	0x40007000
 8002300:	200002a6 	.word	0x200002a6
 8002304:	08013c48 	.word	0x08013c48
 8002308:	20005a94 	.word	0x20005a94

0800230c <MRT_clear_alarms_flags>:



void MRT_clear_alarms_flags(void){
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	print("Clearing the flags\r\n");
 8002310:	482a      	ldr	r0, [pc, #168]	; (80023bc <MRT_clear_alarms_flags+0xb0>)
 8002312:	f7fe fe99 	bl	8001048 <print>

	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002316:	4b2a      	ldr	r3, [pc, #168]	; (80023c0 <MRT_clear_alarms_flags+0xb4>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	22ca      	movs	r2, #202	; 0xca
 800231c:	625a      	str	r2, [r3, #36]	; 0x24
 800231e:	4b28      	ldr	r3, [pc, #160]	; (80023c0 <MRT_clear_alarms_flags+0xb4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2253      	movs	r2, #83	; 0x53
 8002324:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8002326:	e008      	b.n	800233a <MRT_clear_alarms_flags+0x2e>
		//print("Clearing alarm A flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002328:	4b25      	ldr	r3, [pc, #148]	; (80023c0 <MRT_clear_alarms_flags+0xb4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	b2da      	uxtb	r2, r3
 8002330:	4b23      	ldr	r3, [pc, #140]	; (80023c0 <MRT_clear_alarms_flags+0xb4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002338:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 800233a:	4b21      	ldr	r3, [pc, #132]	; (80023c0 <MRT_clear_alarms_flags+0xb4>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1ef      	bne.n	8002328 <MRT_clear_alarms_flags+0x1c>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002348:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <MRT_clear_alarms_flags+0xb4>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	22ff      	movs	r2, #255	; 0xff
 800234e:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002350:	4b1c      	ldr	r3, [pc, #112]	; (80023c4 <MRT_clear_alarms_flags+0xb8>)
 8002352:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002356:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002358:	4b19      	ldr	r3, [pc, #100]	; (80023c0 <MRT_clear_alarms_flags+0xb4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	22ca      	movs	r2, #202	; 0xca
 800235e:	625a      	str	r2, [r3, #36]	; 0x24
 8002360:	4b17      	ldr	r3, [pc, #92]	; (80023c0 <MRT_clear_alarms_flags+0xb4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2253      	movs	r2, #83	; 0x53
 8002366:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8002368:	e008      	b.n	800237c <MRT_clear_alarms_flags+0x70>
		//print("Clearing alarm B flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 800236a:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <MRT_clear_alarms_flags+0xb4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	b2da      	uxtb	r2, r3
 8002372:	4b13      	ldr	r3, [pc, #76]	; (80023c0 <MRT_clear_alarms_flags+0xb4>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f462 7220 	orn	r2, r2, #640	; 0x280
 800237a:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 800237c:	4b10      	ldr	r3, [pc, #64]	; (80023c0 <MRT_clear_alarms_flags+0xb4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1ef      	bne.n	800236a <MRT_clear_alarms_flags+0x5e>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 800238a:	4b0d      	ldr	r3, [pc, #52]	; (80023c0 <MRT_clear_alarms_flags+0xb4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	22ff      	movs	r2, #255	; 0xff
 8002390:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002392:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <MRT_clear_alarms_flags+0xb8>)
 8002394:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002398:	615a      	str	r2, [r3, #20]

	/* Clear the WU FLAG */
	//print("Clearing wake up flag\r\n");
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800239a:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <MRT_clear_alarms_flags+0xbc>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <MRT_clear_alarms_flags+0xbc>)
 80023a0:	f043 0304 	orr.w	r3, r3, #4
 80023a4:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//print("Clearing RTC wake up flag\r\n");
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 80023a6:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <MRT_clear_alarms_flags+0xb4>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <MRT_clear_alarms_flags+0xb4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80023b6:	60da      	str	r2, [r3, #12]
}
 80023b8:	bf00      	nop
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	08013c64 	.word	0x08013c64
 80023c0:	20005a94 	.word	0x20005a94
 80023c4:	40013c00 	.word	0x40013c00
 80023c8:	40007000 	.word	0x40007000

080023cc <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode(uint32_t seconds){
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08c      	sub	sp, #48	; 0x30
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
	print("\r\n/*****StandByMode*****/\r\n");
 80023d4:	4813      	ldr	r0, [pc, #76]	; (8002424 <MRT_StandByMode+0x58>)
 80023d6:	f7fe fe37 	bl	8001048 <print>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 80023da:	f44f 7080 	mov.w	r0, #256	; 0x100
 80023de:	f005 fb2b 	bl	8007a38 <HAL_PWR_EnableWakeUpPin>

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_clear_alarms_flags();
 80023e2:	f7ff ff93 	bl	800230c <MRT_clear_alarms_flags>

	//Setup RTC wake up timer
	println("Setting up RTCW");
 80023e6:	4810      	ldr	r0, [pc, #64]	; (8002428 <MRT_StandByMode+0x5c>)
 80023e8:	f7fe fe10 	bl	800100c <println>
	  Error_Handler();
	}
	*/

	char msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds",(int) seconds);
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	f107 030c 	add.w	r3, r7, #12
 80023f2:	490e      	ldr	r1, [pc, #56]	; (800242c <MRT_StandByMode+0x60>)
 80023f4:	4618      	mov	r0, r3
 80023f6:	f00d fa51 	bl	800f89c <siprintf>
	println(msg);
 80023fa:	f107 030c 	add.w	r3, r7, #12
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe fe04 	bl	800100c <println>

	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8002404:	2204      	movs	r2, #4
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	4809      	ldr	r0, [pc, #36]	; (8002430 <MRT_StandByMode+0x64>)
 800240a:	f006 fdf5 	bl	8008ff8 <HAL_RTCEx_SetWakeUpTimer_IT>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MRT_StandByMode+0x4c>
	{
	  Error_Handler();
 8002414:	f7ff fe4e 	bl	80020b4 <Error_Handler>
	}

	HAL_PWR_EnterSTANDBYMode();
 8002418:	f005 fb34 	bl	8007a84 <HAL_PWR_EnterSTANDBYMode>
}
 800241c:	bf00      	nop
 800241e:	3730      	adds	r7, #48	; 0x30
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	08013c7c 	.word	0x08013c7c
 8002428:	08013c98 	.word	0x08013c98
 800242c:	08013ca8 	.word	0x08013ca8
 8002430:	20005a94 	.word	0x20005a94

08002434 <MRT_set_rtc>:




void MRT_set_rtc(uint8_t h, uint8_t m, uint8_t s){
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	71fb      	strb	r3, [r7, #7]
 800243e:	460b      	mov	r3, r1
 8002440:	71bb      	strb	r3, [r7, #6]
 8002442:	4613      	mov	r3, r2
 8002444:	717b      	strb	r3, [r7, #5]
	  /** Initialize RTC and set the Time and Date
	  */
	  RTC_TimeTypeDef sTime;

	  sTime.Hours = int_to_hex_table[h];
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	4a1a      	ldr	r2, [pc, #104]	; (80024b4 <MRT_set_rtc+0x80>)
 800244a:	5cd3      	ldrb	r3, [r2, r3]
 800244c:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = int_to_hex_table[m];
 800244e:	79bb      	ldrb	r3, [r7, #6]
 8002450:	4a18      	ldr	r2, [pc, #96]	; (80024b4 <MRT_set_rtc+0x80>)
 8002452:	5cd3      	ldrb	r3, [r2, r3]
 8002454:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = int_to_hex_table[s];
 8002456:	797b      	ldrb	r3, [r7, #5]
 8002458:	4a16      	ldr	r2, [pc, #88]	; (80024b4 <MRT_set_rtc+0x80>)
 800245a:	5cd3      	ldrb	r3, [r2, r3]
 800245c:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800245e:	2300      	movs	r3, #0
 8002460:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002466:	f107 030c 	add.w	r3, r7, #12
 800246a:	2201      	movs	r2, #1
 800246c:	4619      	mov	r1, r3
 800246e:	4812      	ldr	r0, [pc, #72]	; (80024b8 <MRT_set_rtc+0x84>)
 8002470:	f006 fa63 	bl	800893a <HAL_RTC_SetTime>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MRT_set_rtc+0x4a>
	  {
	    Error_Handler();
 800247a:	f7ff fe1b 	bl	80020b4 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800247e:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <MRT_set_rtc+0x88>)
 8002480:	2201      	movs	r2, #1
 8002482:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 8002484:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <MRT_set_rtc+0x88>)
 8002486:	2201      	movs	r2, #1
 8002488:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 800248a:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <MRT_set_rtc+0x88>)
 800248c:	2201      	movs	r2, #1
 800248e:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 8002490:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <MRT_set_rtc+0x88>)
 8002492:	2200      	movs	r2, #0
 8002494:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002496:	2201      	movs	r2, #1
 8002498:	4908      	ldr	r1, [pc, #32]	; (80024bc <MRT_set_rtc+0x88>)
 800249a:	4807      	ldr	r0, [pc, #28]	; (80024b8 <MRT_set_rtc+0x84>)
 800249c:	f006 fb0a 	bl	8008ab4 <HAL_RTC_SetDate>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MRT_set_rtc+0x76>
	  {
	    Error_Handler();
 80024a6:	f7ff fe05 	bl	80020b4 <Error_Handler>
	  }
}
 80024aa:	bf00      	nop
 80024ac:	3720      	adds	r7, #32
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000000 	.word	0x20000000
 80024b8:	20005a94 	.word	0x20005a94
 80024bc:	20000278 	.word	0x20000278

080024c0 <MRT_set_alarmA>:



void MRT_set_alarmA(uint8_t h, uint8_t m, uint8_t s){
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	71fb      	strb	r3, [r7, #7]
 80024ca:	460b      	mov	r3, r1
 80024cc:	71bb      	strb	r3, [r7, #6]
 80024ce:	4613      	mov	r3, r2
 80024d0:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	4a1a      	ldr	r2, [pc, #104]	; (8002540 <MRT_set_alarmA+0x80>)
 80024d6:	5cd2      	ldrb	r2, [r2, r3]
 80024d8:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <MRT_set_alarmA+0x84>)
 80024da:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 80024dc:	79bb      	ldrb	r3, [r7, #6]
 80024de:	4a18      	ldr	r2, [pc, #96]	; (8002540 <MRT_set_alarmA+0x80>)
 80024e0:	5cd2      	ldrb	r2, [r2, r3]
 80024e2:	4b18      	ldr	r3, [pc, #96]	; (8002544 <MRT_set_alarmA+0x84>)
 80024e4:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 80024e6:	797b      	ldrb	r3, [r7, #5]
 80024e8:	4a15      	ldr	r2, [pc, #84]	; (8002540 <MRT_set_alarmA+0x80>)
 80024ea:	5cd2      	ldrb	r2, [r2, r3]
 80024ec:	4b15      	ldr	r3, [pc, #84]	; (8002544 <MRT_set_alarmA+0x84>)
 80024ee:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 80024f0:	4b14      	ldr	r3, [pc, #80]	; (8002544 <MRT_set_alarmA+0x84>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80024f6:	4b13      	ldr	r3, [pc, #76]	; (8002544 <MRT_set_alarmA+0x84>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80024fc:	4b11      	ldr	r3, [pc, #68]	; (8002544 <MRT_set_alarmA+0x84>)
 80024fe:	2200      	movs	r2, #0
 8002500:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002502:	4b10      	ldr	r3, [pc, #64]	; (8002544 <MRT_set_alarmA+0x84>)
 8002504:	2200      	movs	r2, #0
 8002506:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002508:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <MRT_set_alarmA+0x84>)
 800250a:	2200      	movs	r2, #0
 800250c:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800250e:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <MRT_set_alarmA+0x84>)
 8002510:	2200      	movs	r2, #0
 8002512:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <MRT_set_alarmA+0x84>)
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 800251c:	4b09      	ldr	r3, [pc, #36]	; (8002544 <MRT_set_alarmA+0x84>)
 800251e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002522:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002524:	2201      	movs	r2, #1
 8002526:	4907      	ldr	r1, [pc, #28]	; (8002544 <MRT_set_alarmA+0x84>)
 8002528:	4807      	ldr	r0, [pc, #28]	; (8002548 <MRT_set_alarmA+0x88>)
 800252a:	f006 fb6b 	bl	8008c04 <HAL_RTC_SetAlarm_IT>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MRT_set_alarmA+0x78>
	  {
	    Error_Handler();
 8002534:	f7ff fdbe 	bl	80020b4 <Error_Handler>
	  }
}
 8002538:	bf00      	nop
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	20000000 	.word	0x20000000
 8002544:	2000027c 	.word	0x2000027c
 8002548:	20005a94 	.word	0x20005a94

0800254c <MX_SPI2_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002550:	4b17      	ldr	r3, [pc, #92]	; (80025b0 <MX_SPI2_Init+0x64>)
 8002552:	4a18      	ldr	r2, [pc, #96]	; (80025b4 <MX_SPI2_Init+0x68>)
 8002554:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002556:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <MX_SPI2_Init+0x64>)
 8002558:	f44f 7282 	mov.w	r2, #260	; 0x104
 800255c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800255e:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <MX_SPI2_Init+0x64>)
 8002560:	2200      	movs	r2, #0
 8002562:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002564:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <MX_SPI2_Init+0x64>)
 8002566:	2200      	movs	r2, #0
 8002568:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800256a:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <MX_SPI2_Init+0x64>)
 800256c:	2200      	movs	r2, #0
 800256e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002570:	4b0f      	ldr	r3, [pc, #60]	; (80025b0 <MX_SPI2_Init+0x64>)
 8002572:	2200      	movs	r2, #0
 8002574:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002576:	4b0e      	ldr	r3, [pc, #56]	; (80025b0 <MX_SPI2_Init+0x64>)
 8002578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800257c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800257e:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <MX_SPI2_Init+0x64>)
 8002580:	2200      	movs	r2, #0
 8002582:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002584:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <MX_SPI2_Init+0x64>)
 8002586:	2200      	movs	r2, #0
 8002588:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800258a:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <MX_SPI2_Init+0x64>)
 800258c:	2200      	movs	r2, #0
 800258e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002590:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <MX_SPI2_Init+0x64>)
 8002592:	2200      	movs	r2, #0
 8002594:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <MX_SPI2_Init+0x64>)
 8002598:	220a      	movs	r2, #10
 800259a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800259c:	4804      	ldr	r0, [pc, #16]	; (80025b0 <MX_SPI2_Init+0x64>)
 800259e:	f006 fe4d 	bl	800923c <HAL_SPI_Init>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80025a8:	f7ff fd84 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80025ac:	bf00      	nop
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20005ab4 	.word	0x20005ab4
 80025b4:	40003800 	.word	0x40003800

080025b8 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80025bc:	4b17      	ldr	r3, [pc, #92]	; (800261c <MX_SPI4_Init+0x64>)
 80025be:	4a18      	ldr	r2, [pc, #96]	; (8002620 <MX_SPI4_Init+0x68>)
 80025c0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80025c2:	4b16      	ldr	r3, [pc, #88]	; (800261c <MX_SPI4_Init+0x64>)
 80025c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025c8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80025ca:	4b14      	ldr	r3, [pc, #80]	; (800261c <MX_SPI4_Init+0x64>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80025d0:	4b12      	ldr	r3, [pc, #72]	; (800261c <MX_SPI4_Init+0x64>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025d6:	4b11      	ldr	r3, [pc, #68]	; (800261c <MX_SPI4_Init+0x64>)
 80025d8:	2200      	movs	r2, #0
 80025da:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025dc:	4b0f      	ldr	r3, [pc, #60]	; (800261c <MX_SPI4_Init+0x64>)
 80025de:	2200      	movs	r2, #0
 80025e0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80025e2:	4b0e      	ldr	r3, [pc, #56]	; (800261c <MX_SPI4_Init+0x64>)
 80025e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025e8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025ea:	4b0c      	ldr	r3, [pc, #48]	; (800261c <MX_SPI4_Init+0x64>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025f0:	4b0a      	ldr	r3, [pc, #40]	; (800261c <MX_SPI4_Init+0x64>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <MX_SPI4_Init+0x64>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025fc:	4b07      	ldr	r3, [pc, #28]	; (800261c <MX_SPI4_Init+0x64>)
 80025fe:	2200      	movs	r2, #0
 8002600:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8002602:	4b06      	ldr	r3, [pc, #24]	; (800261c <MX_SPI4_Init+0x64>)
 8002604:	220a      	movs	r2, #10
 8002606:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002608:	4804      	ldr	r0, [pc, #16]	; (800261c <MX_SPI4_Init+0x64>)
 800260a:	f006 fe17 	bl	800923c <HAL_SPI_Init>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8002614:	f7ff fd4e 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002618:	bf00      	nop
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20005b64 	.word	0x20005b64
 8002620:	40013400 	.word	0x40013400

08002624 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8002628:	4b17      	ldr	r3, [pc, #92]	; (8002688 <MX_SPI5_Init+0x64>)
 800262a:	4a18      	ldr	r2, [pc, #96]	; (800268c <MX_SPI5_Init+0x68>)
 800262c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800262e:	4b16      	ldr	r3, [pc, #88]	; (8002688 <MX_SPI5_Init+0x64>)
 8002630:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002634:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002636:	4b14      	ldr	r3, [pc, #80]	; (8002688 <MX_SPI5_Init+0x64>)
 8002638:	2200      	movs	r2, #0
 800263a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800263c:	4b12      	ldr	r3, [pc, #72]	; (8002688 <MX_SPI5_Init+0x64>)
 800263e:	2200      	movs	r2, #0
 8002640:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002642:	4b11      	ldr	r3, [pc, #68]	; (8002688 <MX_SPI5_Init+0x64>)
 8002644:	2200      	movs	r2, #0
 8002646:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002648:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <MX_SPI5_Init+0x64>)
 800264a:	2200      	movs	r2, #0
 800264c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800264e:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <MX_SPI5_Init+0x64>)
 8002650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002654:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002656:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <MX_SPI5_Init+0x64>)
 8002658:	2200      	movs	r2, #0
 800265a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800265c:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <MX_SPI5_Init+0x64>)
 800265e:	2200      	movs	r2, #0
 8002660:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002662:	4b09      	ldr	r3, [pc, #36]	; (8002688 <MX_SPI5_Init+0x64>)
 8002664:	2200      	movs	r2, #0
 8002666:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <MX_SPI5_Init+0x64>)
 800266a:	2200      	movs	r2, #0
 800266c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800266e:	4b06      	ldr	r3, [pc, #24]	; (8002688 <MX_SPI5_Init+0x64>)
 8002670:	220a      	movs	r2, #10
 8002672:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002674:	4804      	ldr	r0, [pc, #16]	; (8002688 <MX_SPI5_Init+0x64>)
 8002676:	f006 fde1 	bl	800923c <HAL_SPI_Init>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002680:	f7ff fd18 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002684:	bf00      	nop
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20005b0c 	.word	0x20005b0c
 800268c:	40015000 	.word	0x40015000

08002690 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08e      	sub	sp, #56	; 0x38
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a4c      	ldr	r2, [pc, #304]	; (80027e0 <HAL_SPI_MspInit+0x150>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d12d      	bne.n	800270e <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	623b      	str	r3, [r7, #32]
 80026b6:	4b4b      	ldr	r3, [pc, #300]	; (80027e4 <HAL_SPI_MspInit+0x154>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	4a4a      	ldr	r2, [pc, #296]	; (80027e4 <HAL_SPI_MspInit+0x154>)
 80026bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026c0:	6413      	str	r3, [r2, #64]	; 0x40
 80026c2:	4b48      	ldr	r3, [pc, #288]	; (80027e4 <HAL_SPI_MspInit+0x154>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ca:	623b      	str	r3, [r7, #32]
 80026cc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	61fb      	str	r3, [r7, #28]
 80026d2:	4b44      	ldr	r3, [pc, #272]	; (80027e4 <HAL_SPI_MspInit+0x154>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	4a43      	ldr	r2, [pc, #268]	; (80027e4 <HAL_SPI_MspInit+0x154>)
 80026d8:	f043 0302 	orr.w	r3, r3, #2
 80026dc:	6313      	str	r3, [r2, #48]	; 0x30
 80026de:	4b41      	ldr	r3, [pc, #260]	; (80027e4 <HAL_SPI_MspInit+0x154>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	61fb      	str	r3, [r7, #28]
 80026e8:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80026ea:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f0:	2302      	movs	r3, #2
 80026f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f8:	2303      	movs	r3, #3
 80026fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026fc:	2305      	movs	r3, #5
 80026fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002704:	4619      	mov	r1, r3
 8002706:	4838      	ldr	r0, [pc, #224]	; (80027e8 <HAL_SPI_MspInit+0x158>)
 8002708:	f003 ff30 	bl	800656c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800270c:	e064      	b.n	80027d8 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI4)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a36      	ldr	r2, [pc, #216]	; (80027ec <HAL_SPI_MspInit+0x15c>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d12d      	bne.n	8002774 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002718:	2300      	movs	r3, #0
 800271a:	61bb      	str	r3, [r7, #24]
 800271c:	4b31      	ldr	r3, [pc, #196]	; (80027e4 <HAL_SPI_MspInit+0x154>)
 800271e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002720:	4a30      	ldr	r2, [pc, #192]	; (80027e4 <HAL_SPI_MspInit+0x154>)
 8002722:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002726:	6453      	str	r3, [r2, #68]	; 0x44
 8002728:	4b2e      	ldr	r3, [pc, #184]	; (80027e4 <HAL_SPI_MspInit+0x154>)
 800272a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002730:	61bb      	str	r3, [r7, #24]
 8002732:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	4b2a      	ldr	r3, [pc, #168]	; (80027e4 <HAL_SPI_MspInit+0x154>)
 800273a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273c:	4a29      	ldr	r2, [pc, #164]	; (80027e4 <HAL_SPI_MspInit+0x154>)
 800273e:	f043 0310 	orr.w	r3, r3, #16
 8002742:	6313      	str	r3, [r2, #48]	; 0x30
 8002744:	4b27      	ldr	r3, [pc, #156]	; (80027e4 <HAL_SPI_MspInit+0x154>)
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	f003 0310 	and.w	r3, r3, #16
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002750:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002756:	2302      	movs	r3, #2
 8002758:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275a:	2300      	movs	r3, #0
 800275c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275e:	2303      	movs	r3, #3
 8002760:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002762:	2305      	movs	r3, #5
 8002764:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800276a:	4619      	mov	r1, r3
 800276c:	4820      	ldr	r0, [pc, #128]	; (80027f0 <HAL_SPI_MspInit+0x160>)
 800276e:	f003 fefd 	bl	800656c <HAL_GPIO_Init>
}
 8002772:	e031      	b.n	80027d8 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI5)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a1e      	ldr	r2, [pc, #120]	; (80027f4 <HAL_SPI_MspInit+0x164>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d12c      	bne.n	80027d8 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	4b18      	ldr	r3, [pc, #96]	; (80027e4 <HAL_SPI_MspInit+0x154>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	4a17      	ldr	r2, [pc, #92]	; (80027e4 <HAL_SPI_MspInit+0x154>)
 8002788:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278c:	6453      	str	r3, [r2, #68]	; 0x44
 800278e:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <HAL_SPI_MspInit+0x154>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <HAL_SPI_MspInit+0x154>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	4a10      	ldr	r2, [pc, #64]	; (80027e4 <HAL_SPI_MspInit+0x154>)
 80027a4:	f043 0320 	orr.w	r3, r3, #32
 80027a8:	6313      	str	r3, [r2, #48]	; 0x30
 80027aa:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <HAL_SPI_MspInit+0x154>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f003 0320 	and.w	r3, r3, #32
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80027b6:	f44f 7360 	mov.w	r3, #896	; 0x380
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027bc:	2302      	movs	r3, #2
 80027be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027c0:	2301      	movs	r3, #1
 80027c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c4:	2303      	movs	r3, #3
 80027c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80027c8:	2305      	movs	r3, #5
 80027ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027d0:	4619      	mov	r1, r3
 80027d2:	4809      	ldr	r0, [pc, #36]	; (80027f8 <HAL_SPI_MspInit+0x168>)
 80027d4:	f003 feca 	bl	800656c <HAL_GPIO_Init>
}
 80027d8:	bf00      	nop
 80027da:	3738      	adds	r7, #56	; 0x38
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40003800 	.word	0x40003800
 80027e4:	40023800 	.word	0x40023800
 80027e8:	40020400 	.word	0x40020400
 80027ec:	40013400 	.word	0x40013400
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40015000 	.word	0x40015000
 80027f8:	40021400 	.word	0x40021400

080027fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	607b      	str	r3, [r7, #4]
 8002806:	4b12      	ldr	r3, [pc, #72]	; (8002850 <HAL_MspInit+0x54>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	4a11      	ldr	r2, [pc, #68]	; (8002850 <HAL_MspInit+0x54>)
 800280c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002810:	6453      	str	r3, [r2, #68]	; 0x44
 8002812:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <HAL_MspInit+0x54>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800281a:	607b      	str	r3, [r7, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	603b      	str	r3, [r7, #0]
 8002822:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <HAL_MspInit+0x54>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	4a0a      	ldr	r2, [pc, #40]	; (8002850 <HAL_MspInit+0x54>)
 8002828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800282c:	6413      	str	r3, [r2, #64]	; 0x40
 800282e:	4b08      	ldr	r3, [pc, #32]	; (8002850 <HAL_MspInit+0x54>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800283a:	2200      	movs	r2, #0
 800283c:	210f      	movs	r1, #15
 800283e:	f06f 0001 	mvn.w	r0, #1
 8002842:	f003 fe5b 	bl	80064fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40023800 	.word	0x40023800

08002854 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08c      	sub	sp, #48	; 0x30
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800285c:	2300      	movs	r3, #0
 800285e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002864:	2200      	movs	r2, #0
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	2036      	movs	r0, #54	; 0x36
 800286a:	f003 fe47 	bl	80064fc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800286e:	2036      	movs	r0, #54	; 0x36
 8002870:	f003 fe60 	bl	8006534 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002874:	2300      	movs	r3, #0
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	4b1f      	ldr	r3, [pc, #124]	; (80028f8 <HAL_InitTick+0xa4>)
 800287a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287c:	4a1e      	ldr	r2, [pc, #120]	; (80028f8 <HAL_InitTick+0xa4>)
 800287e:	f043 0310 	orr.w	r3, r3, #16
 8002882:	6413      	str	r3, [r2, #64]	; 0x40
 8002884:	4b1c      	ldr	r3, [pc, #112]	; (80028f8 <HAL_InitTick+0xa4>)
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	f003 0310 	and.w	r3, r3, #16
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002890:	f107 0210 	add.w	r2, r7, #16
 8002894:	f107 0314 	add.w	r3, r7, #20
 8002898:	4611      	mov	r1, r2
 800289a:	4618      	mov	r0, r3
 800289c:	f005 fdcc 	bl	8008438 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80028a0:	f005 fda2 	bl	80083e8 <HAL_RCC_GetPCLK1Freq>
 80028a4:	4603      	mov	r3, r0
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80028aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ac:	4a13      	ldr	r2, [pc, #76]	; (80028fc <HAL_InitTick+0xa8>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	0c9b      	lsrs	r3, r3, #18
 80028b4:	3b01      	subs	r3, #1
 80028b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <HAL_InitTick+0xac>)
 80028ba:	4a12      	ldr	r2, [pc, #72]	; (8002904 <HAL_InitTick+0xb0>)
 80028bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80028be:	4b10      	ldr	r3, [pc, #64]	; (8002900 <HAL_InitTick+0xac>)
 80028c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028c4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80028c6:	4a0e      	ldr	r2, [pc, #56]	; (8002900 <HAL_InitTick+0xac>)
 80028c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <HAL_InitTick+0xac>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d2:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_InitTick+0xac>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80028d8:	4809      	ldr	r0, [pc, #36]	; (8002900 <HAL_InitTick+0xac>)
 80028da:	f007 fa57 	bl	8009d8c <HAL_TIM_Base_Init>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d104      	bne.n	80028ee <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80028e4:	4806      	ldr	r0, [pc, #24]	; (8002900 <HAL_InitTick+0xac>)
 80028e6:	f007 faa1 	bl	8009e2c <HAL_TIM_Base_Start_IT>
 80028ea:	4603      	mov	r3, r0
 80028ec:	e000      	b.n	80028f0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3730      	adds	r7, #48	; 0x30
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40023800 	.word	0x40023800
 80028fc:	431bde83 	.word	0x431bde83
 8002900:	20005bbc 	.word	0x20005bbc
 8002904:	40001000 	.word	0x40001000

08002908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800290c:	e7fe      	b.n	800290c <NMI_Handler+0x4>

0800290e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800290e:	b480      	push	{r7}
 8002910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002912:	e7fe      	b.n	8002912 <HardFault_Handler+0x4>

08002914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002918:	e7fe      	b.n	8002918 <MemManage_Handler+0x4>

0800291a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800291a:	b480      	push	{r7}
 800291c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800291e:	e7fe      	b.n	800291e <BusFault_Handler+0x4>

08002920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002924:	e7fe      	b.n	8002924 <UsageFault_Handler+0x4>

08002926 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002926:	b480      	push	{r7}
 8002928:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002938:	2001      	movs	r0, #1
 800293a:	f003 fff5 	bl	8006928 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002948:	4802      	ldr	r0, [pc, #8]	; (8002954 <RTC_Alarm_IRQHandler+0x10>)
 800294a:	f006 fa93 	bl	8008e74 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20005a94 	.word	0x20005a94

08002958 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800295c:	4802      	ldr	r0, [pc, #8]	; (8002968 <TIM6_DAC_IRQHandler+0x10>)
 800295e:	f007 fc67 	bl	800a230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20005bbc 	.word	0x20005bbc

0800296c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	80fb      	strh	r3, [r7, #6]

}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
	...

08002984 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002988:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <SystemInit+0x20>)
 800298a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298e:	4a05      	ldr	r2, [pc, #20]	; (80029a4 <SystemInit+0x20>)
 8002990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002994:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	e000ed00 	.word	0xe000ed00

080029a8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08e      	sub	sp, #56	; 0x38
 80029ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	605a      	str	r2, [r3, #4]
 80029b8:	609a      	str	r2, [r3, #8]
 80029ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029bc:	f107 0320 	add.w	r3, r7, #32
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029c6:	1d3b      	adds	r3, r7, #4
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	611a      	str	r2, [r3, #16]
 80029d4:	615a      	str	r2, [r3, #20]
 80029d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029d8:	4b2d      	ldr	r3, [pc, #180]	; (8002a90 <MX_TIM2_Init+0xe8>)
 80029da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80029e0:	4b2b      	ldr	r3, [pc, #172]	; (8002a90 <MX_TIM2_Init+0xe8>)
 80029e2:	2259      	movs	r2, #89	; 0x59
 80029e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e6:	4b2a      	ldr	r3, [pc, #168]	; (8002a90 <MX_TIM2_Init+0xe8>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 80029ec:	4b28      	ldr	r3, [pc, #160]	; (8002a90 <MX_TIM2_Init+0xe8>)
 80029ee:	f240 128f 	movw	r2, #399	; 0x18f
 80029f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029f4:	4b26      	ldr	r3, [pc, #152]	; (8002a90 <MX_TIM2_Init+0xe8>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029fa:	4b25      	ldr	r3, [pc, #148]	; (8002a90 <MX_TIM2_Init+0xe8>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a00:	4823      	ldr	r0, [pc, #140]	; (8002a90 <MX_TIM2_Init+0xe8>)
 8002a02:	f007 f9c3 	bl	8009d8c <HAL_TIM_Base_Init>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002a0c:	f7ff fb52 	bl	80020b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a14:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	481c      	ldr	r0, [pc, #112]	; (8002a90 <MX_TIM2_Init+0xe8>)
 8002a1e:	f007 fdd1 	bl	800a5c4 <HAL_TIM_ConfigClockSource>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002a28:	f7ff fb44 	bl	80020b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a2c:	4818      	ldr	r0, [pc, #96]	; (8002a90 <MX_TIM2_Init+0xe8>)
 8002a2e:	f007 fa6d 	bl	8009f0c <HAL_TIM_PWM_Init>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002a38:	f7ff fb3c 	bl	80020b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002a3c:	2320      	movs	r3, #32
 8002a3e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a40:	2300      	movs	r3, #0
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a44:	f107 0320 	add.w	r3, r7, #32
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4811      	ldr	r0, [pc, #68]	; (8002a90 <MX_TIM2_Init+0xe8>)
 8002a4c:	f008 f9ba 	bl	800adc4 <HAL_TIMEx_MasterConfigSynchronization>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002a56:	f7ff fb2d 	bl	80020b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a5a:	2360      	movs	r3, #96	; 0x60
 8002a5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8002a5e:	2364      	movs	r3, #100	; 0x64
 8002a60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a6a:	1d3b      	adds	r3, r7, #4
 8002a6c:	2208      	movs	r2, #8
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4807      	ldr	r0, [pc, #28]	; (8002a90 <MX_TIM2_Init+0xe8>)
 8002a72:	f007 fce5 	bl	800a440 <HAL_TIM_PWM_ConfigChannel>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002a7c:	f7ff fb1a 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002a80:	4803      	ldr	r0, [pc, #12]	; (8002a90 <MX_TIM2_Init+0xe8>)
 8002a82:	f000 f827 	bl	8002ad4 <HAL_TIM_MspPostInit>

}
 8002a86:	bf00      	nop
 8002a88:	3738      	adds	r7, #56	; 0x38
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20005c04 	.word	0x20005c04

08002a94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa4:	d10d      	bne.n	8002ac2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <HAL_TIM_Base_MspInit+0x3c>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	4a08      	ldr	r2, [pc, #32]	; (8002ad0 <HAL_TIM_Base_MspInit+0x3c>)
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab6:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <HAL_TIM_Base_MspInit+0x3c>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002ac2:	bf00      	nop
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40023800 	.word	0x40023800

08002ad4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b088      	sub	sp, #32
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002adc:	f107 030c 	add.w	r3, r7, #12
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	60da      	str	r2, [r3, #12]
 8002aea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af4:	d11d      	bne.n	8002b32 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <HAL_TIM_MspPostInit+0x68>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	4a0f      	ldr	r2, [pc, #60]	; (8002b3c <HAL_TIM_MspPostInit+0x68>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	6313      	str	r3, [r2, #48]	; 0x30
 8002b06:	4b0d      	ldr	r3, [pc, #52]	; (8002b3c <HAL_TIM_MspPostInit+0x68>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8002b12:	2304      	movs	r3, #4
 8002b14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b16:	2302      	movs	r3, #2
 8002b18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b22:	2301      	movs	r3, #1
 8002b24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8002b26:	f107 030c 	add.w	r3, r7, #12
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4804      	ldr	r0, [pc, #16]	; (8002b40 <HAL_TIM_MspPostInit+0x6c>)
 8002b2e:	f003 fd1d 	bl	800656c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002b32:	bf00      	nop
 8002b34:	3720      	adds	r7, #32
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	40020000 	.word	0x40020000

08002b44 <MX_UART8_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART8 init function */
void MX_UART8_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002b48:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <MX_UART8_Init+0x4c>)
 8002b4a:	4a12      	ldr	r2, [pc, #72]	; (8002b94 <MX_UART8_Init+0x50>)
 8002b4c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8002b4e:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <MX_UART8_Init+0x4c>)
 8002b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b54:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002b56:	4b0e      	ldr	r3, [pc, #56]	; (8002b90 <MX_UART8_Init+0x4c>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <MX_UART8_Init+0x4c>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002b62:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <MX_UART8_Init+0x4c>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002b68:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <MX_UART8_Init+0x4c>)
 8002b6a:	220c      	movs	r2, #12
 8002b6c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b6e:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <MX_UART8_Init+0x4c>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <MX_UART8_Init+0x4c>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002b7a:	4805      	ldr	r0, [pc, #20]	; (8002b90 <MX_UART8_Init+0x4c>)
 8002b7c:	f008 f9b2 	bl	800aee4 <HAL_UART_Init>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8002b86:	f7ff fa95 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	20005c90 	.word	0x20005c90
 8002b94:	40007c00 	.word	0x40007c00

08002b98 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b9c:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <MX_USART3_UART_Init+0x4c>)
 8002b9e:	4a12      	ldr	r2, [pc, #72]	; (8002be8 <MX_USART3_UART_Init+0x50>)
 8002ba0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002ba2:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <MX_USART3_UART_Init+0x4c>)
 8002ba4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002ba8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002baa:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <MX_USART3_UART_Init+0x4c>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002bb0:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <MX_USART3_UART_Init+0x4c>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002bb6:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <MX_USART3_UART_Init+0x4c>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002bbc:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <MX_USART3_UART_Init+0x4c>)
 8002bbe:	220c      	movs	r2, #12
 8002bc0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bc2:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <MX_USART3_UART_Init+0x4c>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <MX_USART3_UART_Init+0x4c>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002bce:	4805      	ldr	r0, [pc, #20]	; (8002be4 <MX_USART3_UART_Init+0x4c>)
 8002bd0:	f008 f988 	bl	800aee4 <HAL_UART_Init>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002bda:	f7ff fa6b 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20005c4c 	.word	0x20005c4c
 8002be8:	40004800 	.word	0x40004800

08002bec <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002bf0:	4b11      	ldr	r3, [pc, #68]	; (8002c38 <MX_USART6_UART_Init+0x4c>)
 8002bf2:	4a12      	ldr	r2, [pc, #72]	; (8002c3c <MX_USART6_UART_Init+0x50>)
 8002bf4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002bf6:	4b10      	ldr	r3, [pc, #64]	; (8002c38 <MX_USART6_UART_Init+0x4c>)
 8002bf8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002bfc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002bfe:	4b0e      	ldr	r3, [pc, #56]	; (8002c38 <MX_USART6_UART_Init+0x4c>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002c04:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <MX_USART6_UART_Init+0x4c>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002c0a:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <MX_USART6_UART_Init+0x4c>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002c10:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <MX_USART6_UART_Init+0x4c>)
 8002c12:	220c      	movs	r2, #12
 8002c14:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c16:	4b08      	ldr	r3, [pc, #32]	; (8002c38 <MX_USART6_UART_Init+0x4c>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <MX_USART6_UART_Init+0x4c>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002c22:	4805      	ldr	r0, [pc, #20]	; (8002c38 <MX_USART6_UART_Init+0x4c>)
 8002c24:	f008 f95e 	bl	800aee4 <HAL_UART_Init>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002c2e:	f7ff fa41 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20005cd4 	.word	0x20005cd4
 8002c3c:	40011400 	.word	0x40011400

08002c40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b08e      	sub	sp, #56	; 0x38
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	609a      	str	r2, [r3, #8]
 8002c54:	60da      	str	r2, [r3, #12]
 8002c56:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a4b      	ldr	r2, [pc, #300]	; (8002d8c <HAL_UART_MspInit+0x14c>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d12c      	bne.n	8002cbc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	623b      	str	r3, [r7, #32]
 8002c66:	4b4a      	ldr	r3, [pc, #296]	; (8002d90 <HAL_UART_MspInit+0x150>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	4a49      	ldr	r2, [pc, #292]	; (8002d90 <HAL_UART_MspInit+0x150>)
 8002c6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c70:	6413      	str	r3, [r2, #64]	; 0x40
 8002c72:	4b47      	ldr	r3, [pc, #284]	; (8002d90 <HAL_UART_MspInit+0x150>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c7a:	623b      	str	r3, [r7, #32]
 8002c7c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61fb      	str	r3, [r7, #28]
 8002c82:	4b43      	ldr	r3, [pc, #268]	; (8002d90 <HAL_UART_MspInit+0x150>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	4a42      	ldr	r2, [pc, #264]	; (8002d90 <HAL_UART_MspInit+0x150>)
 8002c88:	f043 0310 	orr.w	r3, r3, #16
 8002c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8e:	4b40      	ldr	r3, [pc, #256]	; (8002d90 <HAL_UART_MspInit+0x150>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	f003 0310 	and.w	r3, r3, #16
 8002c96:	61fb      	str	r3, [r7, #28]
 8002c98:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002caa:	2308      	movs	r3, #8
 8002cac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4837      	ldr	r0, [pc, #220]	; (8002d94 <HAL_UART_MspInit+0x154>)
 8002cb6:	f003 fc59 	bl	800656c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002cba:	e063      	b.n	8002d84 <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART3)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a35      	ldr	r2, [pc, #212]	; (8002d98 <HAL_UART_MspInit+0x158>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d12d      	bne.n	8002d22 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61bb      	str	r3, [r7, #24]
 8002cca:	4b31      	ldr	r3, [pc, #196]	; (8002d90 <HAL_UART_MspInit+0x150>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	4a30      	ldr	r2, [pc, #192]	; (8002d90 <HAL_UART_MspInit+0x150>)
 8002cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd6:	4b2e      	ldr	r3, [pc, #184]	; (8002d90 <HAL_UART_MspInit+0x150>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cde:	61bb      	str	r3, [r7, #24]
 8002ce0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	4b2a      	ldr	r3, [pc, #168]	; (8002d90 <HAL_UART_MspInit+0x150>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	4a29      	ldr	r2, [pc, #164]	; (8002d90 <HAL_UART_MspInit+0x150>)
 8002cec:	f043 0308 	orr.w	r3, r3, #8
 8002cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf2:	4b27      	ldr	r3, [pc, #156]	; (8002d90 <HAL_UART_MspInit+0x150>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	f003 0308 	and.w	r3, r3, #8
 8002cfa:	617b      	str	r3, [r7, #20]
 8002cfc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8002cfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d04:	2302      	movs	r3, #2
 8002d06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d10:	2307      	movs	r3, #7
 8002d12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4820      	ldr	r0, [pc, #128]	; (8002d9c <HAL_UART_MspInit+0x15c>)
 8002d1c:	f003 fc26 	bl	800656c <HAL_GPIO_Init>
}
 8002d20:	e030      	b.n	8002d84 <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART6)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a1e      	ldr	r2, [pc, #120]	; (8002da0 <HAL_UART_MspInit+0x160>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d12b      	bne.n	8002d84 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	4b17      	ldr	r3, [pc, #92]	; (8002d90 <HAL_UART_MspInit+0x150>)
 8002d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d34:	4a16      	ldr	r2, [pc, #88]	; (8002d90 <HAL_UART_MspInit+0x150>)
 8002d36:	f043 0320 	orr.w	r3, r3, #32
 8002d3a:	6453      	str	r3, [r2, #68]	; 0x44
 8002d3c:	4b14      	ldr	r3, [pc, #80]	; (8002d90 <HAL_UART_MspInit+0x150>)
 8002d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d40:	f003 0320 	and.w	r3, r3, #32
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	4b10      	ldr	r3, [pc, #64]	; (8002d90 <HAL_UART_MspInit+0x150>)
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d50:	4a0f      	ldr	r2, [pc, #60]	; (8002d90 <HAL_UART_MspInit+0x150>)
 8002d52:	f043 0304 	orr.w	r3, r3, #4
 8002d56:	6313      	str	r3, [r2, #48]	; 0x30
 8002d58:	4b0d      	ldr	r3, [pc, #52]	; (8002d90 <HAL_UART_MspInit+0x150>)
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8002d64:	23c0      	movs	r3, #192	; 0xc0
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d70:	2303      	movs	r3, #3
 8002d72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002d74:	2308      	movs	r3, #8
 8002d76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4809      	ldr	r0, [pc, #36]	; (8002da4 <HAL_UART_MspInit+0x164>)
 8002d80:	f003 fbf4 	bl	800656c <HAL_GPIO_Init>
}
 8002d84:	bf00      	nop
 8002d86:	3738      	adds	r7, #56	; 0x38
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40007c00 	.word	0x40007c00
 8002d90:	40023800 	.word	0x40023800
 8002d94:	40021000 	.word	0x40021000
 8002d98:	40004800 	.word	0x40004800
 8002d9c:	40020c00 	.word	0x40020c00
 8002da0:	40011400 	.word	0x40011400
 8002da4:	40020800 	.word	0x40020800

08002da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002de0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002dac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002dae:	e003      	b.n	8002db8 <LoopCopyDataInit>

08002db0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002db0:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002db2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002db4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002db6:	3104      	adds	r1, #4

08002db8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002db8:	480b      	ldr	r0, [pc, #44]	; (8002de8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002dba:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002dbc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002dbe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002dc0:	d3f6      	bcc.n	8002db0 <CopyDataInit>
  ldr  r2, =_sbss
 8002dc2:	4a0b      	ldr	r2, [pc, #44]	; (8002df0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002dc4:	e002      	b.n	8002dcc <LoopFillZerobss>

08002dc6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002dc6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002dc8:	f842 3b04 	str.w	r3, [r2], #4

08002dcc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002dcc:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002dce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002dd0:	d3f9      	bcc.n	8002dc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002dd2:	f7ff fdd7 	bl	8002984 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dd6:	f00b fc8b 	bl	800e6f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dda:	f7ff f889 	bl	8001ef0 <main>
  bx  lr    
 8002dde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002de0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002de4:	08014d04 	.word	0x08014d04
  ldr  r0, =_sdata
 8002de8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002dec:	2000025c 	.word	0x2000025c
  ldr  r2, =_sbss
 8002df0:	2000025c 	.word	0x2000025c
  ldr  r3, = _ebss
 8002df4:	200062e8 	.word	0x200062e8

08002df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002df8:	e7fe      	b.n	8002df8 <ADC_IRQHandler>
	...

08002dfc <MRT_getContinuity>:
 * Checks the continuity of the gates
 *
 * returns a binary number in its decimal form. Each bit is the state of a gate.
 * bit3 bit2 bit1 bit0 = drogue1 drogue2 prop1 prop2
 */
uint8_t MRT_getContinuity(void){
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
	uint8_t drogue1 = HAL_GPIO_ReadPin(IN_EJ_Drogue_Cont_GPIO_Port, IN_EJ_Drogue_Cont_Pin);
 8002e02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e06:	4815      	ldr	r0, [pc, #84]	; (8002e5c <MRT_getContinuity+0x60>)
 8002e08:	f003 fd5c 	bl	80068c4 <HAL_GPIO_ReadPin>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	71fb      	strb	r3, [r7, #7]
	uint8_t drogue2 = HAL_GPIO_ReadPin(IN_EJ_Main_Cont_GPIO_Port, IN_EJ_Main_Cont_Pin);
 8002e10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e14:	4811      	ldr	r0, [pc, #68]	; (8002e5c <MRT_getContinuity+0x60>)
 8002e16:	f003 fd55 	bl	80068c4 <HAL_GPIO_ReadPin>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	71bb      	strb	r3, [r7, #6]
	uint8_t prop1 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_1_GPIO_Port, IN_PyroValve_Cont_1_Pin);
 8002e1e:	2101      	movs	r1, #1
 8002e20:	480e      	ldr	r0, [pc, #56]	; (8002e5c <MRT_getContinuity+0x60>)
 8002e22:	f003 fd4f 	bl	80068c4 <HAL_GPIO_ReadPin>
 8002e26:	4603      	mov	r3, r0
 8002e28:	717b      	strb	r3, [r7, #5]
	uint8_t prop2 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_2_GPIO_Port, IN_PyroValve_Cont_2_Pin);
 8002e2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e2e:	480c      	ldr	r0, [pc, #48]	; (8002e60 <MRT_getContinuity+0x64>)
 8002e30:	f003 fd48 	bl	80068c4 <HAL_GPIO_ReadPin>
 8002e34:	4603      	mov	r3, r0
 8002e36:	713b      	strb	r3, [r7, #4]
	uint8_t continuity = 8*drogue1 + 4*drogue2 + 2*prop1 + prop2;
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	005a      	lsls	r2, r3, #1
 8002e3c:	79bb      	ldrb	r3, [r7, #6]
 8002e3e:	4413      	add	r3, r2
 8002e40:	005a      	lsls	r2, r3, #1
 8002e42:	797b      	ldrb	r3, [r7, #5]
 8002e44:	4413      	add	r3, r2
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	793b      	ldrb	r3, [r7, #4]
 8002e4e:	4413      	add	r3, r2
 8002e50:	70fb      	strb	r3, [r7, #3]
	return continuity;
 8002e52:	78fb      	ldrb	r3, [r7, #3]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40021800 	.word	0x40021800
 8002e60:	40021400 	.word	0x40021400

08002e64 <MRT_external_flash_Init>:


//**************************************************//
//FUNCTIONS

void MRT_external_flash_Init(void){
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0

	for (int i = 0; i < NB_OF_FLAGS; i++){
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	607b      	str	r3, [r7, #4]
 8002e6e:	e007      	b.n	8002e80 <MRT_external_flash_Init+0x1c>
		FLAGS_NULL_BUFFER[i] = 0; //Setup the flags null buffer for the correct number of values
 8002e70:	4a0e      	ldr	r2, [pc, #56]	; (8002eac <MRT_external_flash_Init+0x48>)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4413      	add	r3, r2
 8002e76:	2200      	movs	r2, #0
 8002e78:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	607b      	str	r3, [r7, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	ddf4      	ble.n	8002e70 <MRT_external_flash_Init+0xc>
	}

	if (!W25qxx_Init()) {
 8002e86:	f000 fa57 	bl	8003338 <W25qxx_Init>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f083 0301 	eor.w	r3, r3, #1
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <MRT_external_flash_Init+0x36>
		Error_Handler(); // hangs and blinks LEDF
 8002e96:	f7ff f90d 	bl	80020b4 <Error_Handler>
	}
	MRT_check_for_wake_up(); //Needs to be called before getFlags() and after the W25xx_Init()
 8002e9a:	f7ff fa0f 	bl	80022bc <MRT_check_for_wake_up>
	MRT_get_flags();
 8002e9e:	f000 f807 	bl	8002eb0 <MRT_get_flags>
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	20005d18 	.word	0x20005d18

08002eb0 <MRT_get_flags>:




void MRT_get_flags(void){
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0

	//Retrieve flags
	W25qxx_ReadSector(flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8002eb4:	2305      	movs	r3, #5
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2101      	movs	r1, #1
 8002eba:	4875      	ldr	r0, [pc, #468]	; (8003090 <MRT_get_flags+0x1e0>)
 8002ebc:	f000 fe16 	bl	8003aec <W25qxx_ReadSector>

	//Retrieve RTC time (last recorded)
	W25qxx_ReadSector(flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8002ec0:	2304      	movs	r3, #4
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2102      	movs	r1, #2
 8002ec6:	4873      	ldr	r0, [pc, #460]	; (8003094 <MRT_get_flags+0x1e4>)
 8002ec8:	f000 fe10 	bl	8003aec <W25qxx_ReadSector>

	//If RTC detected a wake up, update the flash memory
	if (wu_flag == 1){
 8002ecc:	4b72      	ldr	r3, [pc, #456]	; (8003098 <MRT_get_flags+0x1e8>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d10e      	bne.n	8002ef2 <MRT_get_flags+0x42>
		//Write the new number of wake up to external flash
		flash_flags_buffer[WU_FLAG_OFFSET] = flash_flags_buffer[WU_FLAG_OFFSET] + 1; //Update number of wake up
 8002ed4:	4b6e      	ldr	r3, [pc, #440]	; (8003090 <MRT_get_flags+0x1e0>)
 8002ed6:	785b      	ldrb	r3, [r3, #1]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	4b6c      	ldr	r3, [pc, #432]	; (8003090 <MRT_get_flags+0x1e0>)
 8002ede:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(FLAGS_SECTOR);
 8002ee0:	2001      	movs	r0, #1
 8002ee2:	f000 fb7b 	bl	80035dc <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8002ee6:	2305      	movs	r3, #5
 8002ee8:	2200      	movs	r2, #0
 8002eea:	2101      	movs	r1, #1
 8002eec:	4868      	ldr	r0, [pc, #416]	; (8003090 <MRT_get_flags+0x1e0>)
 8002eee:	f000 fcbf 	bl	8003870 <W25qxx_WriteSector>
	}

	//Assign each value read to their variable
	 MRT_update_flags_values();
 8002ef2:	f000 f8e3 	bl	80030bc <MRT_update_flags_values>


	//Check flags values
	//Reset flag
	if (reset_flag != 0 && reset_flag !=1){ //If random value (none was written)
 8002ef6:	4b69      	ldr	r3, [pc, #420]	; (800309c <MRT_get_flags+0x1ec>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d013      	beq.n	8002f26 <MRT_get_flags+0x76>
 8002efe:	4b67      	ldr	r3, [pc, #412]	; (800309c <MRT_get_flags+0x1ec>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d00f      	beq.n	8002f26 <MRT_get_flags+0x76>
		reset_flag = 0;
 8002f06:	4b65      	ldr	r3, [pc, #404]	; (800309c <MRT_get_flags+0x1ec>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 8002f0c:	4b63      	ldr	r3, [pc, #396]	; (800309c <MRT_get_flags+0x1ec>)
 8002f0e:	781a      	ldrb	r2, [r3, #0]
 8002f10:	4b5f      	ldr	r3, [pc, #380]	; (8003090 <MRT_get_flags+0x1e0>)
 8002f12:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(FLAGS_SECTOR);
 8002f14:	2001      	movs	r0, #1
 8002f16:	f000 fb61 	bl	80035dc <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8002f1a:	2305      	movs	r3, #5
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	2101      	movs	r1, #1
 8002f20:	485b      	ldr	r0, [pc, #364]	; (8003090 <MRT_get_flags+0x1e0>)
 8002f22:	f000 fca5 	bl	8003870 <W25qxx_WriteSector>
	}

	//Wake up flag
	if (wu_flag != 0 && wu_flag !=1 && wu_flag !=2){ //If random value (none was written)
 8002f26:	4b5c      	ldr	r3, [pc, #368]	; (8003098 <MRT_get_flags+0x1e8>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d017      	beq.n	8002f5e <MRT_get_flags+0xae>
 8002f2e:	4b5a      	ldr	r3, [pc, #360]	; (8003098 <MRT_get_flags+0x1e8>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d013      	beq.n	8002f5e <MRT_get_flags+0xae>
 8002f36:	4b58      	ldr	r3, [pc, #352]	; (8003098 <MRT_get_flags+0x1e8>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d00f      	beq.n	8002f5e <MRT_get_flags+0xae>
		wu_flag = 0;
 8002f3e:	4b56      	ldr	r3, [pc, #344]	; (8003098 <MRT_get_flags+0x1e8>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[WU_FLAG_OFFSET] = wu_flag;
 8002f44:	4b54      	ldr	r3, [pc, #336]	; (8003098 <MRT_get_flags+0x1e8>)
 8002f46:	781a      	ldrb	r2, [r3, #0]
 8002f48:	4b51      	ldr	r3, [pc, #324]	; (8003090 <MRT_get_flags+0x1e0>)
 8002f4a:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(FLAGS_SECTOR);
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	f000 fb45 	bl	80035dc <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8002f52:	2305      	movs	r3, #5
 8002f54:	2200      	movs	r2, #0
 8002f56:	2101      	movs	r1, #1
 8002f58:	484d      	ldr	r0, [pc, #308]	; (8003090 <MRT_get_flags+0x1e0>)
 8002f5a:	f000 fc89 	bl	8003870 <W25qxx_WriteSector>
	}

	//IWDG flag
	if (iwdg_flag != 0 && iwdg_flag !=1){ //If random value (none was written)
 8002f5e:	4b50      	ldr	r3, [pc, #320]	; (80030a0 <MRT_get_flags+0x1f0>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d013      	beq.n	8002f8e <MRT_get_flags+0xde>
 8002f66:	4b4e      	ldr	r3, [pc, #312]	; (80030a0 <MRT_get_flags+0x1f0>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d00f      	beq.n	8002f8e <MRT_get_flags+0xde>
		iwdg_flag = 0;
 8002f6e:	4b4c      	ldr	r3, [pc, #304]	; (80030a0 <MRT_get_flags+0x1f0>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8002f74:	4b4a      	ldr	r3, [pc, #296]	; (80030a0 <MRT_get_flags+0x1f0>)
 8002f76:	781a      	ldrb	r2, [r3, #0]
 8002f78:	4b45      	ldr	r3, [pc, #276]	; (8003090 <MRT_get_flags+0x1e0>)
 8002f7a:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(FLAGS_SECTOR);
 8002f7c:	2001      	movs	r0, #1
 8002f7e:	f000 fb2d 	bl	80035dc <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8002f82:	2305      	movs	r3, #5
 8002f84:	2200      	movs	r2, #0
 8002f86:	2101      	movs	r1, #1
 8002f88:	4841      	ldr	r0, [pc, #260]	; (8003090 <MRT_get_flags+0x1e0>)
 8002f8a:	f000 fc71 	bl	8003870 <W25qxx_WriteSector>
	}

	//Apogee flag
	if (apogee_flag != 0 && apogee_flag !=1){ //If random value (none was written)
 8002f8e:	4b45      	ldr	r3, [pc, #276]	; (80030a4 <MRT_get_flags+0x1f4>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d013      	beq.n	8002fbe <MRT_get_flags+0x10e>
 8002f96:	4b43      	ldr	r3, [pc, #268]	; (80030a4 <MRT_get_flags+0x1f4>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d00f      	beq.n	8002fbe <MRT_get_flags+0x10e>
		apogee_flag = 0;
 8002f9e:	4b41      	ldr	r3, [pc, #260]	; (80030a4 <MRT_get_flags+0x1f4>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[APOGEE_FLAG_OFFSET] = apogee_flag;
 8002fa4:	4b3f      	ldr	r3, [pc, #252]	; (80030a4 <MRT_get_flags+0x1f4>)
 8002fa6:	781a      	ldrb	r2, [r3, #0]
 8002fa8:	4b39      	ldr	r3, [pc, #228]	; (8003090 <MRT_get_flags+0x1e0>)
 8002faa:	70da      	strb	r2, [r3, #3]
		W25qxx_EraseSector(FLAGS_SECTOR);
 8002fac:	2001      	movs	r0, #1
 8002fae:	f000 fb15 	bl	80035dc <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8002fb2:	2305      	movs	r3, #5
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	4835      	ldr	r0, [pc, #212]	; (8003090 <MRT_get_flags+0x1e0>)
 8002fba:	f000 fc59 	bl	8003870 <W25qxx_WriteSector>
	}

	//Ejection state flag
	if (!(ejection_state_flag >= 0 && ejection_state_flag <=4)){ //If random value (none was written)
 8002fbe:	4b3a      	ldr	r3, [pc, #232]	; (80030a8 <MRT_get_flags+0x1f8>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d90f      	bls.n	8002fe6 <MRT_get_flags+0x136>
		ejection_state_flag = 0;
 8002fc6:	4b38      	ldr	r3, [pc, #224]	; (80030a8 <MRT_get_flags+0x1f8>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[EJECTION_STATE_FLAG_OFFSET] = ejection_state_flag;
 8002fcc:	4b36      	ldr	r3, [pc, #216]	; (80030a8 <MRT_get_flags+0x1f8>)
 8002fce:	781a      	ldrb	r2, [r3, #0]
 8002fd0:	4b2f      	ldr	r3, [pc, #188]	; (8003090 <MRT_get_flags+0x1e0>)
 8002fd2:	711a      	strb	r2, [r3, #4]
		W25qxx_EraseSector(FLAGS_SECTOR);
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	f000 fb01 	bl	80035dc <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8002fda:	2305      	movs	r3, #5
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2101      	movs	r1, #1
 8002fe0:	482b      	ldr	r0, [pc, #172]	; (8003090 <MRT_get_flags+0x1e0>)
 8002fe2:	f000 fc45 	bl	8003870 <W25qxx_WriteSector>
	}


	//Check RTC time values
	//Hours
	if (!(prev_hours >= 0 && prev_hours < 24)){ //If random value (none was written)
 8002fe6:	4b31      	ldr	r3, [pc, #196]	; (80030ac <MRT_get_flags+0x1fc>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b17      	cmp	r3, #23
 8002fec:	d90f      	bls.n	800300e <MRT_get_flags+0x15e>
		prev_hours = 0;
 8002fee:	4b2f      	ldr	r3, [pc, #188]	; (80030ac <MRT_get_flags+0x1fc>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_HOURS_OFFSET] = prev_hours;
 8002ff4:	4b2d      	ldr	r3, [pc, #180]	; (80030ac <MRT_get_flags+0x1fc>)
 8002ff6:	781a      	ldrb	r2, [r3, #0]
 8002ff8:	4b26      	ldr	r3, [pc, #152]	; (8003094 <MRT_get_flags+0x1e4>)
 8002ffa:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(RTC_SECTOR);
 8002ffc:	2002      	movs	r0, #2
 8002ffe:	f000 faed 	bl	80035dc <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003002:	2304      	movs	r3, #4
 8003004:	2200      	movs	r2, #0
 8003006:	2102      	movs	r1, #2
 8003008:	4822      	ldr	r0, [pc, #136]	; (8003094 <MRT_get_flags+0x1e4>)
 800300a:	f000 fc31 	bl	8003870 <W25qxx_WriteSector>
	}

	//Minutes
	if (!(prev_min >= 0 && prev_min < 60)){ //If random value (none was written)
 800300e:	4b28      	ldr	r3, [pc, #160]	; (80030b0 <MRT_get_flags+0x200>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	2b3b      	cmp	r3, #59	; 0x3b
 8003014:	d90f      	bls.n	8003036 <MRT_get_flags+0x186>
		prev_min = 0;
 8003016:	4b26      	ldr	r3, [pc, #152]	; (80030b0 <MRT_get_flags+0x200>)
 8003018:	2200      	movs	r2, #0
 800301a:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_MIN_OFFSET] = prev_min;
 800301c:	4b24      	ldr	r3, [pc, #144]	; (80030b0 <MRT_get_flags+0x200>)
 800301e:	781a      	ldrb	r2, [r3, #0]
 8003020:	4b1c      	ldr	r3, [pc, #112]	; (8003094 <MRT_get_flags+0x1e4>)
 8003022:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(RTC_SECTOR);
 8003024:	2002      	movs	r0, #2
 8003026:	f000 fad9 	bl	80035dc <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 800302a:	2304      	movs	r3, #4
 800302c:	2200      	movs	r2, #0
 800302e:	2102      	movs	r1, #2
 8003030:	4818      	ldr	r0, [pc, #96]	; (8003094 <MRT_get_flags+0x1e4>)
 8003032:	f000 fc1d 	bl	8003870 <W25qxx_WriteSector>
	}

	//Seconds
	if (!(prev_sec >= 0 && prev_sec < 60)){ //If random value (none was written)
 8003036:	4b1f      	ldr	r3, [pc, #124]	; (80030b4 <MRT_get_flags+0x204>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b3b      	cmp	r3, #59	; 0x3b
 800303c:	d90f      	bls.n	800305e <MRT_get_flags+0x1ae>
		prev_sec = 0;
 800303e:	4b1d      	ldr	r3, [pc, #116]	; (80030b4 <MRT_get_flags+0x204>)
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_SEC_OFFSET] = prev_sec;
 8003044:	4b1b      	ldr	r3, [pc, #108]	; (80030b4 <MRT_get_flags+0x204>)
 8003046:	781a      	ldrb	r2, [r3, #0]
 8003048:	4b12      	ldr	r3, [pc, #72]	; (8003094 <MRT_get_flags+0x1e4>)
 800304a:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(RTC_SECTOR);
 800304c:	2002      	movs	r0, #2
 800304e:	f000 fac5 	bl	80035dc <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003052:	2304      	movs	r3, #4
 8003054:	2200      	movs	r2, #0
 8003056:	2102      	movs	r1, #2
 8003058:	480e      	ldr	r0, [pc, #56]	; (8003094 <MRT_get_flags+0x1e4>)
 800305a:	f000 fc09 	bl	8003870 <W25qxx_WriteSector>
	}

	//Sub-Seconds
	if (!(prev_subsec >= 0 && prev_subsec < 1000)){ //If random value (none was written)
 800305e:	4b16      	ldr	r3, [pc, #88]	; (80030b8 <MRT_get_flags+0x208>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003066:	d310      	bcc.n	800308a <MRT_get_flags+0x1da>
		prev_subsec = 0;
 8003068:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <MRT_get_flags+0x208>)
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
		flash_time_buffer[RTC_SEC_OFFSET] = prev_subsec;
 800306e:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <MRT_get_flags+0x208>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	b2da      	uxtb	r2, r3
 8003074:	4b07      	ldr	r3, [pc, #28]	; (8003094 <MRT_get_flags+0x1e4>)
 8003076:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(RTC_SECTOR);
 8003078:	2002      	movs	r0, #2
 800307a:	f000 faaf 	bl	80035dc <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 800307e:	2304      	movs	r3, #4
 8003080:	2200      	movs	r2, #0
 8003082:	2102      	movs	r1, #2
 8003084:	4803      	ldr	r0, [pc, #12]	; (8003094 <MRT_get_flags+0x1e4>)
 8003086:	f000 fbf3 	bl	8003870 <W25qxx_WriteSector>
	}
}
 800308a:	bf00      	nop
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	20005d20 	.word	0x20005d20
 8003094:	20005d28 	.word	0x20005d28
 8003098:	200002a6 	.word	0x200002a6
 800309c:	200002a5 	.word	0x200002a5
 80030a0:	200002a7 	.word	0x200002a7
 80030a4:	200002a8 	.word	0x200002a8
 80030a8:	200002a9 	.word	0x200002a9
 80030ac:	200002aa 	.word	0x200002aa
 80030b0:	200002ab 	.word	0x200002ab
 80030b4:	200002ac 	.word	0x200002ac
 80030b8:	200002b0 	.word	0x200002b0

080030bc <MRT_update_flags_values>:
		flash_time_buffer[i] = *flash_time[i];
	}
}


void MRT_update_flags_values(void){
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80030c2:	2300      	movs	r3, #0
 80030c4:	607b      	str	r3, [r7, #4]
 80030c6:	e00b      	b.n	80030e0 <MRT_update_flags_values+0x24>
		*flash_flags[i] = flash_flags_buffer[i];
 80030c8:	4a13      	ldr	r2, [pc, #76]	; (8003118 <MRT_update_flags_values+0x5c>)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d0:	4912      	ldr	r1, [pc, #72]	; (800311c <MRT_update_flags_values+0x60>)
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	440a      	add	r2, r1
 80030d6:	7812      	ldrb	r2, [r2, #0]
 80030d8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3301      	adds	r3, #1
 80030de:	607b      	str	r3, [r7, #4]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	ddf0      	ble.n	80030c8 <MRT_update_flags_values+0xc>
	}
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 80030e6:	2300      	movs	r3, #0
 80030e8:	603b      	str	r3, [r7, #0]
 80030ea:	e00b      	b.n	8003104 <MRT_update_flags_values+0x48>
		*flash_time[i] = flash_time_buffer[i];
 80030ec:	4a0c      	ldr	r2, [pc, #48]	; (8003120 <MRT_update_flags_values+0x64>)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f4:	490b      	ldr	r1, [pc, #44]	; (8003124 <MRT_update_flags_values+0x68>)
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	440a      	add	r2, r1
 80030fa:	7812      	ldrb	r2, [r2, #0]
 80030fc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	3301      	adds	r3, #1
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	2b03      	cmp	r3, #3
 8003108:	ddf0      	ble.n	80030ec <MRT_update_flags_values+0x30>
	}
}
 800310a:	bf00      	nop
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	20000040 	.word	0x20000040
 800311c:	20005d20 	.word	0x20005d20
 8003120:	20000054 	.word	0x20000054
 8003124:	20005d28 	.word	0x20005d28

08003128 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af02      	add	r7, sp, #8
 800312e:	4603      	mov	r3, r0
 8003130:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8003132:	f107 020f 	add.w	r2, r7, #15
 8003136:	1df9      	adds	r1, r7, #7
 8003138:	2364      	movs	r3, #100	; 0x64
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	2301      	movs	r3, #1
 800313e:	4804      	ldr	r0, [pc, #16]	; (8003150 <W25qxx_Spi+0x28>)
 8003140:	f006 fb52 	bl	80097e8 <HAL_SPI_TransmitReceive>
	return ret;
 8003144:	7bfb      	ldrb	r3, [r7, #15]
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20005b0c 	.word	0x20005b0c

08003154 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800315a:	2300      	movs	r3, #0
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	2300      	movs	r3, #0
 8003160:	60bb      	str	r3, [r7, #8]
 8003162:	2300      	movs	r3, #0
 8003164:	607b      	str	r3, [r7, #4]
 8003166:	2300      	movs	r3, #0
 8003168:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800316a:	2200      	movs	r2, #0
 800316c:	2140      	movs	r1, #64	; 0x40
 800316e:	4813      	ldr	r0, [pc, #76]	; (80031bc <W25qxx_ReadID+0x68>)
 8003170:	f003 fbc0 	bl	80068f4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8003174:	209f      	movs	r0, #159	; 0x9f
 8003176:	f7ff ffd7 	bl	8003128 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800317a:	20a5      	movs	r0, #165	; 0xa5
 800317c:	f7ff ffd4 	bl	8003128 <W25qxx_Spi>
 8003180:	4603      	mov	r3, r0
 8003182:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003184:	20a5      	movs	r0, #165	; 0xa5
 8003186:	f7ff ffcf 	bl	8003128 <W25qxx_Spi>
 800318a:	4603      	mov	r3, r0
 800318c:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800318e:	20a5      	movs	r0, #165	; 0xa5
 8003190:	f7ff ffca 	bl	8003128 <W25qxx_Spi>
 8003194:	4603      	mov	r3, r0
 8003196:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003198:	2201      	movs	r2, #1
 800319a:	2140      	movs	r1, #64	; 0x40
 800319c:	4807      	ldr	r0, [pc, #28]	; (80031bc <W25qxx_ReadID+0x68>)
 800319e:	f003 fba9 	bl	80068f4 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	041a      	lsls	r2, r3, #16
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	021b      	lsls	r3, r3, #8
 80031aa:	4313      	orrs	r3, r2
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]
	return Temp;
 80031b2:	68fb      	ldr	r3, [r7, #12]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40020c00 	.word	0x40020c00

080031c0 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80031c0:	b590      	push	{r4, r7, lr}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80031c6:	2200      	movs	r2, #0
 80031c8:	2140      	movs	r1, #64	; 0x40
 80031ca:	4816      	ldr	r0, [pc, #88]	; (8003224 <W25qxx_ReadUniqID+0x64>)
 80031cc:	f003 fb92 	bl	80068f4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 80031d0:	204b      	movs	r0, #75	; 0x4b
 80031d2:	f7ff ffa9 	bl	8003128 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80031d6:	2300      	movs	r3, #0
 80031d8:	71fb      	strb	r3, [r7, #7]
 80031da:	e005      	b.n	80031e8 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80031dc:	20a5      	movs	r0, #165	; 0xa5
 80031de:	f7ff ffa3 	bl	8003128 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	3301      	adds	r3, #1
 80031e6:	71fb      	strb	r3, [r7, #7]
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d9f6      	bls.n	80031dc <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 80031ee:	2300      	movs	r3, #0
 80031f0:	71bb      	strb	r3, [r7, #6]
 80031f2:	e00b      	b.n	800320c <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80031f4:	79bc      	ldrb	r4, [r7, #6]
 80031f6:	20a5      	movs	r0, #165	; 0xa5
 80031f8:	f7ff ff96 	bl	8003128 <W25qxx_Spi>
 80031fc:	4603      	mov	r3, r0
 80031fe:	461a      	mov	r2, r3
 8003200:	4b09      	ldr	r3, [pc, #36]	; (8003228 <W25qxx_ReadUniqID+0x68>)
 8003202:	4423      	add	r3, r4
 8003204:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8003206:	79bb      	ldrb	r3, [r7, #6]
 8003208:	3301      	adds	r3, #1
 800320a:	71bb      	strb	r3, [r7, #6]
 800320c:	79bb      	ldrb	r3, [r7, #6]
 800320e:	2b07      	cmp	r3, #7
 8003210:	d9f0      	bls.n	80031f4 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003212:	2201      	movs	r2, #1
 8003214:	2140      	movs	r1, #64	; 0x40
 8003216:	4803      	ldr	r0, [pc, #12]	; (8003224 <W25qxx_ReadUniqID+0x64>)
 8003218:	f003 fb6c 	bl	80068f4 <HAL_GPIO_WritePin>
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	bd90      	pop	{r4, r7, pc}
 8003224:	40020c00 	.word	0x40020c00
 8003228:	20005d2c 	.word	0x20005d2c

0800322c <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003230:	2200      	movs	r2, #0
 8003232:	2140      	movs	r1, #64	; 0x40
 8003234:	4807      	ldr	r0, [pc, #28]	; (8003254 <W25qxx_WriteEnable+0x28>)
 8003236:	f003 fb5d 	bl	80068f4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 800323a:	2006      	movs	r0, #6
 800323c:	f7ff ff74 	bl	8003128 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003240:	2201      	movs	r2, #1
 8003242:	2140      	movs	r1, #64	; 0x40
 8003244:	4803      	ldr	r0, [pc, #12]	; (8003254 <W25qxx_WriteEnable+0x28>)
 8003246:	f003 fb55 	bl	80068f4 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 800324a:	2001      	movs	r0, #1
 800324c:	f008 fbf9 	bl	800ba42 <osDelay>
}
 8003250:	bf00      	nop
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40020c00 	.word	0x40020c00

08003258 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	4603      	mov	r3, r0
 8003260:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003266:	2200      	movs	r2, #0
 8003268:	2140      	movs	r1, #64	; 0x40
 800326a:	481c      	ldr	r0, [pc, #112]	; (80032dc <W25qxx_ReadStatusRegister+0x84>)
 800326c:	f003 fb42 	bl	80068f4 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d10c      	bne.n	8003290 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8003276:	2005      	movs	r0, #5
 8003278:	f7ff ff56 	bl	8003128 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800327c:	20a5      	movs	r0, #165	; 0xa5
 800327e:	f7ff ff53 	bl	8003128 <W25qxx_Spi>
 8003282:	4603      	mov	r3, r0
 8003284:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8003286:	4a16      	ldr	r2, [pc, #88]	; (80032e0 <W25qxx_ReadStatusRegister+0x88>)
 8003288:	7bfb      	ldrb	r3, [r7, #15]
 800328a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800328e:	e01b      	b.n	80032c8 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d10c      	bne.n	80032b0 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8003296:	2035      	movs	r0, #53	; 0x35
 8003298:	f7ff ff46 	bl	8003128 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800329c:	20a5      	movs	r0, #165	; 0xa5
 800329e:	f7ff ff43 	bl	8003128 <W25qxx_Spi>
 80032a2:	4603      	mov	r3, r0
 80032a4:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 80032a6:	4a0e      	ldr	r2, [pc, #56]	; (80032e0 <W25qxx_ReadStatusRegister+0x88>)
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
 80032aa:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 80032ae:	e00b      	b.n	80032c8 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 80032b0:	2015      	movs	r0, #21
 80032b2:	f7ff ff39 	bl	8003128 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80032b6:	20a5      	movs	r0, #165	; 0xa5
 80032b8:	f7ff ff36 	bl	8003128 <W25qxx_Spi>
 80032bc:	4603      	mov	r3, r0
 80032be:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 80032c0:	4a07      	ldr	r2, [pc, #28]	; (80032e0 <W25qxx_ReadStatusRegister+0x88>)
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
 80032c4:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80032c8:	2201      	movs	r2, #1
 80032ca:	2140      	movs	r1, #64	; 0x40
 80032cc:	4803      	ldr	r0, [pc, #12]	; (80032dc <W25qxx_ReadStatusRegister+0x84>)
 80032ce:	f003 fb11 	bl	80068f4 <HAL_GPIO_WritePin>
	return status;
 80032d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40020c00 	.word	0x40020c00
 80032e0:	20005d2c 	.word	0x20005d2c

080032e4 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 80032e8:	2001      	movs	r0, #1
 80032ea:	f008 fbaa 	bl	800ba42 <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80032ee:	2200      	movs	r2, #0
 80032f0:	2140      	movs	r1, #64	; 0x40
 80032f2:	480f      	ldr	r0, [pc, #60]	; (8003330 <W25qxx_WaitForWriteEnd+0x4c>)
 80032f4:	f003 fafe 	bl	80068f4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 80032f8:	2005      	movs	r0, #5
 80032fa:	f7ff ff15 	bl	8003128 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80032fe:	20a5      	movs	r0, #165	; 0xa5
 8003300:	f7ff ff12 	bl	8003128 <W25qxx_Spi>
 8003304:	4603      	mov	r3, r0
 8003306:	461a      	mov	r2, r3
 8003308:	4b0a      	ldr	r3, [pc, #40]	; (8003334 <W25qxx_WaitForWriteEnd+0x50>)
 800330a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 800330e:	2001      	movs	r0, #1
 8003310:	f008 fb97 	bl	800ba42 <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8003314:	4b07      	ldr	r3, [pc, #28]	; (8003334 <W25qxx_WaitForWriteEnd+0x50>)
 8003316:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1ed      	bne.n	80032fe <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003322:	2201      	movs	r2, #1
 8003324:	2140      	movs	r1, #64	; 0x40
 8003326:	4802      	ldr	r0, [pc, #8]	; (8003330 <W25qxx_WaitForWriteEnd+0x4c>)
 8003328:	f003 fae4 	bl	80068f4 <HAL_GPIO_WritePin>
}
 800332c:	bf00      	nop
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40020c00 	.word	0x40020c00
 8003334:	20005d2c 	.word	0x20005d2c

08003338 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 800333e:	4b90      	ldr	r3, [pc, #576]	; (8003580 <W25qxx_Init+0x248>)
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8003346:	e002      	b.n	800334e <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8003348:	2001      	movs	r0, #1
 800334a:	f008 fb7a 	bl	800ba42 <osDelay>
	while (HAL_GetTick() < 100)
 800334e:	f002 fd57 	bl	8005e00 <HAL_GetTick>
 8003352:	4603      	mov	r3, r0
 8003354:	2b63      	cmp	r3, #99	; 0x63
 8003356:	d9f7      	bls.n	8003348 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003358:	2201      	movs	r2, #1
 800335a:	2140      	movs	r1, #64	; 0x40
 800335c:	4889      	ldr	r0, [pc, #548]	; (8003584 <W25qxx_Init+0x24c>)
 800335e:	f003 fac9 	bl	80068f4 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8003362:	2064      	movs	r0, #100	; 0x64
 8003364:	f008 fb6d 	bl	800ba42 <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 8003368:	4887      	ldr	r0, [pc, #540]	; (8003588 <W25qxx_Init+0x250>)
 800336a:	f00c f9cb 	bl	800f704 <puts>
#endif
	id = W25qxx_ReadID();
 800336e:	f7ff fef1 	bl	8003154 <W25qxx_ReadID>
 8003372:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4885      	ldr	r0, [pc, #532]	; (800358c <W25qxx_Init+0x254>)
 8003378:	f00c f93e 	bl	800f5f8 <iprintf>
#endif
	switch (id & 0x000000FF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	b2db      	uxtb	r3, r3
 8003380:	3b11      	subs	r3, #17
 8003382:	2b0f      	cmp	r3, #15
 8003384:	f200 808b 	bhi.w	800349e <W25qxx_Init+0x166>
 8003388:	a201      	add	r2, pc, #4	; (adr r2, 8003390 <W25qxx_Init+0x58>)
 800338a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338e:	bf00      	nop
 8003390:	0800348b 	.word	0x0800348b
 8003394:	08003477 	.word	0x08003477
 8003398:	08003463 	.word	0x08003463
 800339c:	0800344f 	.word	0x0800344f
 80033a0:	0800343b 	.word	0x0800343b
 80033a4:	08003427 	.word	0x08003427
 80033a8:	08003413 	.word	0x08003413
 80033ac:	080033fd 	.word	0x080033fd
 80033b0:	080033e7 	.word	0x080033e7
 80033b4:	0800349f 	.word	0x0800349f
 80033b8:	0800349f 	.word	0x0800349f
 80033bc:	0800349f 	.word	0x0800349f
 80033c0:	0800349f 	.word	0x0800349f
 80033c4:	0800349f 	.word	0x0800349f
 80033c8:	0800349f 	.word	0x0800349f
 80033cc:	080033d1 	.word	0x080033d1
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 80033d0:	4b6b      	ldr	r3, [pc, #428]	; (8003580 <W25qxx_Init+0x248>)
 80033d2:	220a      	movs	r2, #10
 80033d4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 80033d6:	4b6a      	ldr	r3, [pc, #424]	; (8003580 <W25qxx_Init+0x248>)
 80033d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033dc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 80033de:	486c      	ldr	r0, [pc, #432]	; (8003590 <W25qxx_Init+0x258>)
 80033e0:	f00c f990 	bl	800f704 <puts>
#endif
		break;
 80033e4:	e064      	b.n	80034b0 <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 80033e6:	4b66      	ldr	r3, [pc, #408]	; (8003580 <W25qxx_Init+0x248>)
 80033e8:	2209      	movs	r2, #9
 80033ea:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 80033ec:	4b64      	ldr	r3, [pc, #400]	; (8003580 <W25qxx_Init+0x248>)
 80033ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033f2:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 80033f4:	4867      	ldr	r0, [pc, #412]	; (8003594 <W25qxx_Init+0x25c>)
 80033f6:	f00c f985 	bl	800f704 <puts>
#endif
		break;
 80033fa:	e059      	b.n	80034b0 <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 80033fc:	4b60      	ldr	r3, [pc, #384]	; (8003580 <W25qxx_Init+0x248>)
 80033fe:	2208      	movs	r2, #8
 8003400:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8003402:	4b5f      	ldr	r3, [pc, #380]	; (8003580 <W25qxx_Init+0x248>)
 8003404:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003408:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 800340a:	4863      	ldr	r0, [pc, #396]	; (8003598 <W25qxx_Init+0x260>)
 800340c:	f00c f97a 	bl	800f704 <puts>
#endif
		break;
 8003410:	e04e      	b.n	80034b0 <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8003412:	4b5b      	ldr	r3, [pc, #364]	; (8003580 <W25qxx_Init+0x248>)
 8003414:	2207      	movs	r2, #7
 8003416:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8003418:	4b59      	ldr	r3, [pc, #356]	; (8003580 <W25qxx_Init+0x248>)
 800341a:	2280      	movs	r2, #128	; 0x80
 800341c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 800341e:	485f      	ldr	r0, [pc, #380]	; (800359c <W25qxx_Init+0x264>)
 8003420:	f00c f970 	bl	800f704 <puts>
#endif
		break;
 8003424:	e044      	b.n	80034b0 <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8003426:	4b56      	ldr	r3, [pc, #344]	; (8003580 <W25qxx_Init+0x248>)
 8003428:	2206      	movs	r2, #6
 800342a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 800342c:	4b54      	ldr	r3, [pc, #336]	; (8003580 <W25qxx_Init+0x248>)
 800342e:	2240      	movs	r2, #64	; 0x40
 8003430:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 8003432:	485b      	ldr	r0, [pc, #364]	; (80035a0 <W25qxx_Init+0x268>)
 8003434:	f00c f966 	bl	800f704 <puts>
#endif
		break;
 8003438:	e03a      	b.n	80034b0 <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 800343a:	4b51      	ldr	r3, [pc, #324]	; (8003580 <W25qxx_Init+0x248>)
 800343c:	2205      	movs	r2, #5
 800343e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8003440:	4b4f      	ldr	r3, [pc, #316]	; (8003580 <W25qxx_Init+0x248>)
 8003442:	2220      	movs	r2, #32
 8003444:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 8003446:	4857      	ldr	r0, [pc, #348]	; (80035a4 <W25qxx_Init+0x26c>)
 8003448:	f00c f95c 	bl	800f704 <puts>
#endif
		break;
 800344c:	e030      	b.n	80034b0 <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800344e:	4b4c      	ldr	r3, [pc, #304]	; (8003580 <W25qxx_Init+0x248>)
 8003450:	2204      	movs	r2, #4
 8003452:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8003454:	4b4a      	ldr	r3, [pc, #296]	; (8003580 <W25qxx_Init+0x248>)
 8003456:	2210      	movs	r2, #16
 8003458:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 800345a:	4853      	ldr	r0, [pc, #332]	; (80035a8 <W25qxx_Init+0x270>)
 800345c:	f00c f952 	bl	800f704 <puts>
#endif
		break;
 8003460:	e026      	b.n	80034b0 <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8003462:	4b47      	ldr	r3, [pc, #284]	; (8003580 <W25qxx_Init+0x248>)
 8003464:	2203      	movs	r2, #3
 8003466:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8003468:	4b45      	ldr	r3, [pc, #276]	; (8003580 <W25qxx_Init+0x248>)
 800346a:	2208      	movs	r2, #8
 800346c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 800346e:	484f      	ldr	r0, [pc, #316]	; (80035ac <W25qxx_Init+0x274>)
 8003470:	f00c f948 	bl	800f704 <puts>
#endif
		break;
 8003474:	e01c      	b.n	80034b0 <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8003476:	4b42      	ldr	r3, [pc, #264]	; (8003580 <W25qxx_Init+0x248>)
 8003478:	2202      	movs	r2, #2
 800347a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 800347c:	4b40      	ldr	r3, [pc, #256]	; (8003580 <W25qxx_Init+0x248>)
 800347e:	2204      	movs	r2, #4
 8003480:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 8003482:	484b      	ldr	r0, [pc, #300]	; (80035b0 <W25qxx_Init+0x278>)
 8003484:	f00c f93e 	bl	800f704 <puts>
#endif
		break;
 8003488:	e012      	b.n	80034b0 <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 800348a:	4b3d      	ldr	r3, [pc, #244]	; (8003580 <W25qxx_Init+0x248>)
 800348c:	2201      	movs	r2, #1
 800348e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8003490:	4b3b      	ldr	r3, [pc, #236]	; (8003580 <W25qxx_Init+0x248>)
 8003492:	2202      	movs	r2, #2
 8003494:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 8003496:	4847      	ldr	r0, [pc, #284]	; (80035b4 <W25qxx_Init+0x27c>)
 8003498:	f00c f934 	bl	800f704 <puts>
#endif
		break;
 800349c:	e008      	b.n	80034b0 <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 800349e:	4846      	ldr	r0, [pc, #280]	; (80035b8 <W25qxx_Init+0x280>)
 80034a0:	f00c f930 	bl	800f704 <puts>
#endif
		w25qxx.Lock = 0;
 80034a4:	4b36      	ldr	r3, [pc, #216]	; (8003580 <W25qxx_Init+0x248>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 80034ac:	2300      	movs	r3, #0
 80034ae:	e063      	b.n	8003578 <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 80034b0:	4b33      	ldr	r3, [pc, #204]	; (8003580 <W25qxx_Init+0x248>)
 80034b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034b6:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 80034b8:	4b31      	ldr	r3, [pc, #196]	; (8003580 <W25qxx_Init+0x248>)
 80034ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034be:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 80034c0:	4b2f      	ldr	r3, [pc, #188]	; (8003580 <W25qxx_Init+0x248>)
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	4a2e      	ldr	r2, [pc, #184]	; (8003580 <W25qxx_Init+0x248>)
 80034c8:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80034ca:	4b2d      	ldr	r3, [pc, #180]	; (8003580 <W25qxx_Init+0x248>)
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	4a2c      	ldr	r2, [pc, #176]	; (8003580 <W25qxx_Init+0x248>)
 80034d0:	6912      	ldr	r2, [r2, #16]
 80034d2:	fb02 f303 	mul.w	r3, r2, r3
 80034d6:	4a2a      	ldr	r2, [pc, #168]	; (8003580 <W25qxx_Init+0x248>)
 80034d8:	8952      	ldrh	r2, [r2, #10]
 80034da:	fbb3 f3f2 	udiv	r3, r3, r2
 80034de:	4a28      	ldr	r2, [pc, #160]	; (8003580 <W25qxx_Init+0x248>)
 80034e0:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80034e2:	4b27      	ldr	r3, [pc, #156]	; (8003580 <W25qxx_Init+0x248>)
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	4a25      	ldr	r2, [pc, #148]	; (8003580 <W25qxx_Init+0x248>)
 80034ea:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80034ec:	4b24      	ldr	r3, [pc, #144]	; (8003580 <W25qxx_Init+0x248>)
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	4a23      	ldr	r2, [pc, #140]	; (8003580 <W25qxx_Init+0x248>)
 80034f2:	6912      	ldr	r2, [r2, #16]
 80034f4:	fb02 f303 	mul.w	r3, r2, r3
 80034f8:	0a9b      	lsrs	r3, r3, #10
 80034fa:	4a21      	ldr	r2, [pc, #132]	; (8003580 <W25qxx_Init+0x248>)
 80034fc:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80034fe:	f7ff fe5f 	bl	80031c0 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8003502:	2001      	movs	r0, #1
 8003504:	f7ff fea8 	bl	8003258 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8003508:	2002      	movs	r0, #2
 800350a:	f7ff fea5 	bl	8003258 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 800350e:	2003      	movs	r0, #3
 8003510:	f7ff fea2 	bl	8003258 <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 8003514:	4b1a      	ldr	r3, [pc, #104]	; (8003580 <W25qxx_Init+0x248>)
 8003516:	895b      	ldrh	r3, [r3, #10]
 8003518:	4619      	mov	r1, r3
 800351a:	4828      	ldr	r0, [pc, #160]	; (80035bc <W25qxx_Init+0x284>)
 800351c:	f00c f86c 	bl	800f5f8 <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 8003520:	4b17      	ldr	r3, [pc, #92]	; (8003580 <W25qxx_Init+0x248>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	4619      	mov	r1, r3
 8003526:	4826      	ldr	r0, [pc, #152]	; (80035c0 <W25qxx_Init+0x288>)
 8003528:	f00c f866 	bl	800f5f8 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 800352c:	4b14      	ldr	r3, [pc, #80]	; (8003580 <W25qxx_Init+0x248>)
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	4619      	mov	r1, r3
 8003532:	4824      	ldr	r0, [pc, #144]	; (80035c4 <W25qxx_Init+0x28c>)
 8003534:	f00c f860 	bl	800f5f8 <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 8003538:	4b11      	ldr	r3, [pc, #68]	; (8003580 <W25qxx_Init+0x248>)
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	4619      	mov	r1, r3
 800353e:	4822      	ldr	r0, [pc, #136]	; (80035c8 <W25qxx_Init+0x290>)
 8003540:	f00c f85a 	bl	800f5f8 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 8003544:	4b0e      	ldr	r3, [pc, #56]	; (8003580 <W25qxx_Init+0x248>)
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	4619      	mov	r1, r3
 800354a:	4820      	ldr	r0, [pc, #128]	; (80035cc <W25qxx_Init+0x294>)
 800354c:	f00c f854 	bl	800f5f8 <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 8003550:	4b0b      	ldr	r3, [pc, #44]	; (8003580 <W25qxx_Init+0x248>)
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	4619      	mov	r1, r3
 8003556:	481e      	ldr	r0, [pc, #120]	; (80035d0 <W25qxx_Init+0x298>)
 8003558:	f00c f84e 	bl	800f5f8 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 800355c:	4b08      	ldr	r3, [pc, #32]	; (8003580 <W25qxx_Init+0x248>)
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	4619      	mov	r1, r3
 8003562:	481c      	ldr	r0, [pc, #112]	; (80035d4 <W25qxx_Init+0x29c>)
 8003564:	f00c f848 	bl	800f5f8 <iprintf>
	printf("w25qxx Init Done\r\n");
 8003568:	481b      	ldr	r0, [pc, #108]	; (80035d8 <W25qxx_Init+0x2a0>)
 800356a:	f00c f8cb 	bl	800f704 <puts>
#endif
	w25qxx.Lock = 0;
 800356e:	4b04      	ldr	r3, [pc, #16]	; (8003580 <W25qxx_Init+0x248>)
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8003576:	2301      	movs	r3, #1
}
 8003578:	4618      	mov	r0, r3
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	20005d2c 	.word	0x20005d2c
 8003584:	40020c00 	.word	0x40020c00
 8003588:	08013cc8 	.word	0x08013cc8
 800358c:	08013ce0 	.word	0x08013ce0
 8003590:	08013cf4 	.word	0x08013cf4
 8003594:	08013d0c 	.word	0x08013d0c
 8003598:	08013d24 	.word	0x08013d24
 800359c:	08013d3c 	.word	0x08013d3c
 80035a0:	08013d54 	.word	0x08013d54
 80035a4:	08013d6c 	.word	0x08013d6c
 80035a8:	08013d84 	.word	0x08013d84
 80035ac:	08013d9c 	.word	0x08013d9c
 80035b0:	08013db4 	.word	0x08013db4
 80035b4:	08013dcc 	.word	0x08013dcc
 80035b8:	08013de4 	.word	0x08013de4
 80035bc:	08013df8 	.word	0x08013df8
 80035c0:	08013e18 	.word	0x08013e18
 80035c4:	08013e30 	.word	0x08013e30
 80035c8:	08013e50 	.word	0x08013e50
 80035cc:	08013e6c 	.word	0x08013e6c
 80035d0:	08013e8c 	.word	0x08013e8c
 80035d4:	08013ea8 	.word	0x08013ea8
 80035d8:	08013ec8 	.word	0x08013ec8

080035dc <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 80035e4:	e002      	b.n	80035ec <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 80035e6:	2001      	movs	r0, #1
 80035e8:	f008 fa2b 	bl	800ba42 <osDelay>
	while (w25qxx.Lock == 1)
 80035ec:	4b2d      	ldr	r3, [pc, #180]	; (80036a4 <W25qxx_EraseSector+0xc8>)
 80035ee:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d0f7      	beq.n	80035e6 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 80035f6:	4b2b      	ldr	r3, [pc, #172]	; (80036a4 <W25qxx_EraseSector+0xc8>)
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 80035fe:	f002 fbff 	bl	8005e00 <HAL_GetTick>
 8003602:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	4828      	ldr	r0, [pc, #160]	; (80036a8 <W25qxx_EraseSector+0xcc>)
 8003608:	f00b fff6 	bl	800f5f8 <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 800360c:	f7ff fe6a 	bl	80032e4 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8003610:	4b24      	ldr	r3, [pc, #144]	; (80036a4 <W25qxx_EraseSector+0xc8>)
 8003612:	691a      	ldr	r2, [r3, #16]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	fb02 f303 	mul.w	r3, r2, r3
 800361a:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 800361c:	f7ff fe06 	bl	800322c <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003620:	2200      	movs	r2, #0
 8003622:	2140      	movs	r1, #64	; 0x40
 8003624:	4821      	ldr	r0, [pc, #132]	; (80036ac <W25qxx_EraseSector+0xd0>)
 8003626:	f003 f965 	bl	80068f4 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800362a:	4b1e      	ldr	r3, [pc, #120]	; (80036a4 <W25qxx_EraseSector+0xc8>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b08      	cmp	r3, #8
 8003630:	d909      	bls.n	8003646 <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 8003632:	2021      	movs	r0, #33	; 0x21
 8003634:	f7ff fd78 	bl	8003128 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	0e1b      	lsrs	r3, r3, #24
 800363c:	b2db      	uxtb	r3, r3
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff fd72 	bl	8003128 <W25qxx_Spi>
 8003644:	e002      	b.n	800364c <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 8003646:	2020      	movs	r0, #32
 8003648:	f7ff fd6e 	bl	8003128 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	0c1b      	lsrs	r3, r3, #16
 8003650:	b2db      	uxtb	r3, r3
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff fd68 	bl	8003128 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	0a1b      	lsrs	r3, r3, #8
 800365c:	b2db      	uxtb	r3, r3
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff fd62 	bl	8003128 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	b2db      	uxtb	r3, r3
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff fd5d 	bl	8003128 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800366e:	2201      	movs	r2, #1
 8003670:	2140      	movs	r1, #64	; 0x40
 8003672:	480e      	ldr	r0, [pc, #56]	; (80036ac <W25qxx_EraseSector+0xd0>)
 8003674:	f003 f93e 	bl	80068f4 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8003678:	f7ff fe34 	bl	80032e4 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 800367c:	f002 fbc0 	bl	8005e00 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	4619      	mov	r1, r3
 8003688:	4809      	ldr	r0, [pc, #36]	; (80036b0 <W25qxx_EraseSector+0xd4>)
 800368a:	f00b ffb5 	bl	800f5f8 <iprintf>
#endif
	W25qxx_Delay(1);
 800368e:	2001      	movs	r0, #1
 8003690:	f008 f9d7 	bl	800ba42 <osDelay>
	w25qxx.Lock = 0;
 8003694:	4b03      	ldr	r3, [pc, #12]	; (80036a4 <W25qxx_EraseSector+0xc8>)
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800369c:	bf00      	nop
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	20005d2c 	.word	0x20005d2c
 80036a8:	08013f20 	.word	0x08013f20
 80036ac:	40020c00 	.word	0x40020c00
 80036b0:	08013f44 	.word	0x08013f44

080036b4 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 80036bc:	4b07      	ldr	r3, [pc, #28]	; (80036dc <W25qxx_SectorToPage+0x28>)
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	fb02 f303 	mul.w	r3, r2, r3
 80036c6:	4a05      	ldr	r2, [pc, #20]	; (80036dc <W25qxx_SectorToPage+0x28>)
 80036c8:	8952      	ldrh	r2, [r2, #10]
 80036ca:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	20005d2c 	.word	0x20005d2c

080036e0 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80036ee:	e002      	b.n	80036f6 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 80036f0:	2001      	movs	r0, #1
 80036f2:	f008 f9a6 	bl	800ba42 <osDelay>
	while (w25qxx.Lock == 1)
 80036f6:	4b57      	ldr	r3, [pc, #348]	; (8003854 <W25qxx_WritePage+0x174>)
 80036f8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d0f7      	beq.n	80036f0 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8003700:	4b54      	ldr	r3, [pc, #336]	; (8003854 <W25qxx_WritePage+0x174>)
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4413      	add	r3, r2
 800370e:	4a51      	ldr	r2, [pc, #324]	; (8003854 <W25qxx_WritePage+0x174>)
 8003710:	8952      	ldrh	r2, [r2, #10]
 8003712:	4293      	cmp	r3, r2
 8003714:	d802      	bhi.n	800371c <W25qxx_WritePage+0x3c>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d105      	bne.n	8003728 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800371c:	4b4d      	ldr	r3, [pc, #308]	; (8003854 <W25qxx_WritePage+0x174>)
 800371e:	895b      	ldrh	r3, [r3, #10]
 8003720:	461a      	mov	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	4413      	add	r3, r2
 800372e:	4a49      	ldr	r2, [pc, #292]	; (8003854 <W25qxx_WritePage+0x174>)
 8003730:	8952      	ldrh	r2, [r2, #10]
 8003732:	4293      	cmp	r3, r2
 8003734:	d905      	bls.n	8003742 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003736:	4b47      	ldr	r3, [pc, #284]	; (8003854 <W25qxx_WritePage+0x174>)
 8003738:	895b      	ldrh	r3, [r3, #10]
 800373a:	461a      	mov	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	68b9      	ldr	r1, [r7, #8]
 8003748:	4843      	ldr	r0, [pc, #268]	; (8003858 <W25qxx_WritePage+0x178>)
 800374a:	f00b ff55 	bl	800f5f8 <iprintf>
	W25qxx_Delay(100);
 800374e:	2064      	movs	r0, #100	; 0x64
 8003750:	f008 f977 	bl	800ba42 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8003754:	f002 fb54 	bl	8005e00 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 800375a:	f7ff fdc3 	bl	80032e4 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 800375e:	f7ff fd65 	bl	800322c <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003762:	2200      	movs	r2, #0
 8003764:	2140      	movs	r1, #64	; 0x40
 8003766:	483d      	ldr	r0, [pc, #244]	; (800385c <W25qxx_WritePage+0x17c>)
 8003768:	f003 f8c4 	bl	80068f4 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 800376c:	4b39      	ldr	r3, [pc, #228]	; (8003854 <W25qxx_WritePage+0x174>)
 800376e:	895b      	ldrh	r3, [r3, #10]
 8003770:	461a      	mov	r2, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	fb03 f302 	mul.w	r3, r3, r2
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	4413      	add	r3, r2
 800377c:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 800377e:	4b35      	ldr	r3, [pc, #212]	; (8003854 <W25qxx_WritePage+0x174>)
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b08      	cmp	r3, #8
 8003784:	d909      	bls.n	800379a <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 8003786:	2012      	movs	r0, #18
 8003788:	f7ff fcce 	bl	8003128 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	0e1b      	lsrs	r3, r3, #24
 8003790:	b2db      	uxtb	r3, r3
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff fcc8 	bl	8003128 <W25qxx_Spi>
 8003798:	e002      	b.n	80037a0 <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 800379a:	2002      	movs	r0, #2
 800379c:	f7ff fcc4 	bl	8003128 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	0c1b      	lsrs	r3, r3, #16
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff fcbe 	bl	8003128 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	0a1b      	lsrs	r3, r3, #8
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff fcb8 	bl	8003128 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff fcb3 	bl	8003128 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	2364      	movs	r3, #100	; 0x64
 80037c8:	68f9      	ldr	r1, [r7, #12]
 80037ca:	4825      	ldr	r0, [pc, #148]	; (8003860 <W25qxx_WritePage+0x180>)
 80037cc:	f005 fdbf 	bl	800934e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80037d0:	2201      	movs	r2, #1
 80037d2:	2140      	movs	r1, #64	; 0x40
 80037d4:	4821      	ldr	r0, [pc, #132]	; (800385c <W25qxx_WritePage+0x17c>)
 80037d6:	f003 f88d 	bl	80068f4 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80037da:	f7ff fd83 	bl	80032e4 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 80037de:	f002 fb0f 	bl	8005e00 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	e018      	b.n	8003822 <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d108      	bne.n	800380c <W25qxx_WritePage+0x12c>
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d905      	bls.n	800380c <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 8003800:	4818      	ldr	r0, [pc, #96]	; (8003864 <W25qxx_WritePage+0x184>)
 8003802:	f00b ff7f 	bl	800f704 <puts>
			W25qxx_Delay(10);
 8003806:	200a      	movs	r0, #10
 8003808:	f008 f91b 	bl	800ba42 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	4413      	add	r3, r2
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	4619      	mov	r1, r3
 8003816:	4814      	ldr	r0, [pc, #80]	; (8003868 <W25qxx_WritePage+0x188>)
 8003818:	f00b feee 	bl	800f5f8 <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	3301      	adds	r3, #1
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d3e2      	bcc.n	80037f0 <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 800382a:	480e      	ldr	r0, [pc, #56]	; (8003864 <W25qxx_WritePage+0x184>)
 800382c:	f00b ff6a 	bl	800f704 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 8003830:	6939      	ldr	r1, [r7, #16]
 8003832:	480e      	ldr	r0, [pc, #56]	; (800386c <W25qxx_WritePage+0x18c>)
 8003834:	f00b fee0 	bl	800f5f8 <iprintf>
	W25qxx_Delay(100);
 8003838:	2064      	movs	r0, #100	; 0x64
 800383a:	f008 f902 	bl	800ba42 <osDelay>
#endif
	W25qxx_Delay(1);
 800383e:	2001      	movs	r0, #1
 8003840:	f008 f8ff 	bl	800ba42 <osDelay>
	w25qxx.Lock = 0;
 8003844:	4b03      	ldr	r3, [pc, #12]	; (8003854 <W25qxx_WritePage+0x174>)
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800384c:	bf00      	nop
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	20005d2c 	.word	0x20005d2c
 8003858:	080141a8 	.word	0x080141a8
 800385c:	40020c00 	.word	0x40020c00
 8003860:	20005b0c 	.word	0x20005b0c
 8003864:	080141e4 	.word	0x080141e4
 8003868:	080141e8 	.word	0x080141e8
 800386c:	080141f0 	.word	0x080141f0

08003870 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 800387e:	4b36      	ldr	r3, [pc, #216]	; (8003958 <W25qxx_WriteSector+0xe8>)
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d802      	bhi.n	800388e <W25qxx_WriteSector+0x1e>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d102      	bne.n	8003894 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 800388e:	4b32      	ldr	r3, [pc, #200]	; (8003958 <W25qxx_WriteSector+0xe8>)
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	68b9      	ldr	r1, [r7, #8]
 800389a:	4830      	ldr	r0, [pc, #192]	; (800395c <W25qxx_WriteSector+0xec>)
 800389c:	f00b feac 	bl	800f5f8 <iprintf>
	W25qxx_Delay(100);
 80038a0:	2064      	movs	r0, #100	; 0x64
 80038a2:	f008 f8ce 	bl	800ba42 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80038a6:	4b2c      	ldr	r3, [pc, #176]	; (8003958 <W25qxx_WriteSector+0xe8>)
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d306      	bcc.n	80038be <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 80038b0:	482b      	ldr	r0, [pc, #172]	; (8003960 <W25qxx_WriteSector+0xf0>)
 80038b2:	f00b ff27 	bl	800f704 <puts>
		W25qxx_Delay(100);
 80038b6:	2064      	movs	r0, #100	; 0x64
 80038b8:	f008 f8c3 	bl	800ba42 <osDelay>
#endif
		return;
 80038bc:	e048      	b.n	8003950 <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	441a      	add	r2, r3
 80038c4:	4b24      	ldr	r3, [pc, #144]	; (8003958 <W25qxx_WriteSector+0xe8>)
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d905      	bls.n	80038d8 <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 80038cc:	4b22      	ldr	r3, [pc, #136]	; (8003958 <W25qxx_WriteSector+0xe8>)
 80038ce:	691a      	ldr	r2, [r3, #16]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	61bb      	str	r3, [r7, #24]
 80038d6:	e001      	b.n	80038dc <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80038dc:	68b8      	ldr	r0, [r7, #8]
 80038de:	f7ff fee9 	bl	80036b4 <W25qxx_SectorToPage>
 80038e2:	4602      	mov	r2, r0
 80038e4:	4b1c      	ldr	r3, [pc, #112]	; (8003958 <W25qxx_WriteSector+0xe8>)
 80038e6:	895b      	ldrh	r3, [r3, #10]
 80038e8:	4619      	mov	r1, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80038f0:	4413      	add	r3, r2
 80038f2:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80038f4:	4b18      	ldr	r3, [pc, #96]	; (8003958 <W25qxx_WriteSector+0xe8>)
 80038f6:	895b      	ldrh	r3, [r3, #10]
 80038f8:	461a      	mov	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8003900:	fb02 f201 	mul.w	r2, r2, r1
 8003904:	1a9b      	subs	r3, r3, r2
 8003906:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	69f9      	ldr	r1, [r7, #28]
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f7ff fee6 	bl	80036e0 <W25qxx_WritePage>
		StartPage++;
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	3301      	adds	r3, #1
 8003918:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 800391a:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <W25qxx_WriteSector+0xe8>)
 800391c:	895b      	ldrh	r3, [r3, #10]
 800391e:	461a      	mov	r2, r3
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	1a9a      	subs	r2, r3, r2
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	4413      	add	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800392a:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <W25qxx_WriteSector+0xe8>)
 800392c:	895b      	ldrh	r3, [r3, #10]
 800392e:	461a      	mov	r2, r3
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4413      	add	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	2b00      	cmp	r3, #0
 8003942:	dce1      	bgt.n	8003908 <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 8003944:	4807      	ldr	r0, [pc, #28]	; (8003964 <W25qxx_WriteSector+0xf4>)
 8003946:	f00b fedd 	bl	800f704 <puts>
	W25qxx_Delay(100);
 800394a:	2064      	movs	r0, #100	; 0x64
 800394c:	f008 f879 	bl	800ba42 <osDelay>
#endif
}
 8003950:	3720      	adds	r7, #32
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20005d2c 	.word	0x20005d2c
 800395c:	08014214 	.word	0x08014214
 8003960:	08014254 	.word	0x08014254
 8003964:	08014274 	.word	0x08014274

08003968 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
 8003974:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8003976:	e002      	b.n	800397e <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8003978:	2001      	movs	r0, #1
 800397a:	f008 f862 	bl	800ba42 <osDelay>
	while (w25qxx.Lock == 1)
 800397e:	4b54      	ldr	r3, [pc, #336]	; (8003ad0 <W25qxx_ReadPage+0x168>)
 8003980:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003984:	2b01      	cmp	r3, #1
 8003986:	d0f7      	beq.n	8003978 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8003988:	4b51      	ldr	r3, [pc, #324]	; (8003ad0 <W25qxx_ReadPage+0x168>)
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8003990:	4b4f      	ldr	r3, [pc, #316]	; (8003ad0 <W25qxx_ReadPage+0x168>)
 8003992:	895b      	ldrh	r3, [r3, #10]
 8003994:	461a      	mov	r2, r3
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	4293      	cmp	r3, r2
 800399a:	d802      	bhi.n	80039a2 <W25qxx_ReadPage+0x3a>
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d102      	bne.n	80039a8 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 80039a2:	4b4b      	ldr	r3, [pc, #300]	; (8003ad0 <W25qxx_ReadPage+0x168>)
 80039a4:	895b      	ldrh	r3, [r3, #10]
 80039a6:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	4413      	add	r3, r2
 80039ae:	4a48      	ldr	r2, [pc, #288]	; (8003ad0 <W25qxx_ReadPage+0x168>)
 80039b0:	8952      	ldrh	r2, [r2, #10]
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d905      	bls.n	80039c2 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80039b6:	4b46      	ldr	r3, [pc, #280]	; (8003ad0 <W25qxx_ReadPage+0x168>)
 80039b8:	895b      	ldrh	r3, [r3, #10]
 80039ba:	461a      	mov	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	68b9      	ldr	r1, [r7, #8]
 80039c8:	4842      	ldr	r0, [pc, #264]	; (8003ad4 <W25qxx_ReadPage+0x16c>)
 80039ca:	f00b fe15 	bl	800f5f8 <iprintf>
	W25qxx_Delay(100);
 80039ce:	2064      	movs	r0, #100	; 0x64
 80039d0:	f008 f837 	bl	800ba42 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 80039d4:	f002 fa14 	bl	8005e00 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 80039da:	4b3d      	ldr	r3, [pc, #244]	; (8003ad0 <W25qxx_ReadPage+0x168>)
 80039dc:	895b      	ldrh	r3, [r3, #10]
 80039de:	461a      	mov	r2, r3
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	fb03 f302 	mul.w	r3, r3, r2
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	4413      	add	r3, r2
 80039ea:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80039ec:	2200      	movs	r2, #0
 80039ee:	2140      	movs	r1, #64	; 0x40
 80039f0:	4839      	ldr	r0, [pc, #228]	; (8003ad8 <W25qxx_ReadPage+0x170>)
 80039f2:	f002 ff7f 	bl	80068f4 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80039f6:	4b36      	ldr	r3, [pc, #216]	; (8003ad0 <W25qxx_ReadPage+0x168>)
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d909      	bls.n	8003a12 <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 80039fe:	200c      	movs	r0, #12
 8003a00:	f7ff fb92 	bl	8003128 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	0e1b      	lsrs	r3, r3, #24
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff fb8c 	bl	8003128 <W25qxx_Spi>
 8003a10:	e002      	b.n	8003a18 <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8003a12:	200b      	movs	r0, #11
 8003a14:	f7ff fb88 	bl	8003128 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	0c1b      	lsrs	r3, r3, #16
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff fb82 	bl	8003128 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	0a1b      	lsrs	r3, r3, #8
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7ff fb7c 	bl	8003128 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff fb77 	bl	8003128 <W25qxx_Spi>
	W25qxx_Spi(0);
 8003a3a:	2000      	movs	r0, #0
 8003a3c:	f7ff fb74 	bl	8003128 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	2364      	movs	r3, #100	; 0x64
 8003a46:	68f9      	ldr	r1, [r7, #12]
 8003a48:	4824      	ldr	r0, [pc, #144]	; (8003adc <W25qxx_ReadPage+0x174>)
 8003a4a:	f005 fdbc 	bl	80095c6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003a4e:	2201      	movs	r2, #1
 8003a50:	2140      	movs	r1, #64	; 0x40
 8003a52:	4821      	ldr	r0, [pc, #132]	; (8003ad8 <W25qxx_ReadPage+0x170>)
 8003a54:	f002 ff4e 	bl	80068f4 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8003a58:	f002 f9d2 	bl	8005e00 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8003a64:	2300      	movs	r3, #0
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	e018      	b.n	8003a9c <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d108      	bne.n	8003a86 <W25qxx_ReadPage+0x11e>
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d905      	bls.n	8003a86 <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 8003a7a:	4819      	ldr	r0, [pc, #100]	; (8003ae0 <W25qxx_ReadPage+0x178>)
 8003a7c:	f00b fe42 	bl	800f704 <puts>
			W25qxx_Delay(10);
 8003a80:	200a      	movs	r0, #10
 8003a82:	f007 ffde 	bl	800ba42 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4814      	ldr	r0, [pc, #80]	; (8003ae4 <W25qxx_ReadPage+0x17c>)
 8003a92:	f00b fdb1 	bl	800f5f8 <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	617b      	str	r3, [r7, #20]
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d3e2      	bcc.n	8003a6a <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 8003aa4:	480e      	ldr	r0, [pc, #56]	; (8003ae0 <W25qxx_ReadPage+0x178>)
 8003aa6:	f00b fe2d 	bl	800f704 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 8003aaa:	6939      	ldr	r1, [r7, #16]
 8003aac:	480e      	ldr	r0, [pc, #56]	; (8003ae8 <W25qxx_ReadPage+0x180>)
 8003aae:	f00b fda3 	bl	800f5f8 <iprintf>
	W25qxx_Delay(100);
 8003ab2:	2064      	movs	r0, #100	; 0x64
 8003ab4:	f007 ffc5 	bl	800ba42 <osDelay>
#endif
	W25qxx_Delay(1);
 8003ab8:	2001      	movs	r0, #1
 8003aba:	f007 ffc2 	bl	800ba42 <osDelay>
	w25qxx.Lock = 0;
 8003abe:	4b04      	ldr	r3, [pc, #16]	; (8003ad0 <W25qxx_ReadPage+0x168>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003ac6:	bf00      	nop
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	20005d2c 	.word	0x20005d2c
 8003ad4:	080143c0 	.word	0x080143c0
 8003ad8:	40020c00 	.word	0x40020c00
 8003adc:	20005b0c 	.word	0x20005b0c
 8003ae0:	080141e4 	.word	0x080141e4
 8003ae4:	080141e8 	.word	0x080141e8
 8003ae8:	080143fc 	.word	0x080143fc

08003aec <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b088      	sub	sp, #32
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8003afa:	4b36      	ldr	r3, [pc, #216]	; (8003bd4 <W25qxx_ReadSector+0xe8>)
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d802      	bhi.n	8003b0a <W25qxx_ReadSector+0x1e>
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d102      	bne.n	8003b10 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8003b0a:	4b32      	ldr	r3, [pc, #200]	; (8003bd4 <W25qxx_ReadSector+0xe8>)
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	68b9      	ldr	r1, [r7, #8]
 8003b16:	4830      	ldr	r0, [pc, #192]	; (8003bd8 <W25qxx_ReadSector+0xec>)
 8003b18:	f00b fd6e 	bl	800f5f8 <iprintf>
	W25qxx_Delay(100);
 8003b1c:	2064      	movs	r0, #100	; 0x64
 8003b1e:	f007 ff90 	bl	800ba42 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8003b22:	4b2c      	ldr	r3, [pc, #176]	; (8003bd4 <W25qxx_ReadSector+0xe8>)
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d306      	bcc.n	8003b3a <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 8003b2c:	482b      	ldr	r0, [pc, #172]	; (8003bdc <W25qxx_ReadSector+0xf0>)
 8003b2e:	f00b fde9 	bl	800f704 <puts>
		W25qxx_Delay(100);
 8003b32:	2064      	movs	r0, #100	; 0x64
 8003b34:	f007 ff85 	bl	800ba42 <osDelay>
#endif
		return;
 8003b38:	e048      	b.n	8003bcc <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	441a      	add	r2, r3
 8003b40:	4b24      	ldr	r3, [pc, #144]	; (8003bd4 <W25qxx_ReadSector+0xe8>)
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d905      	bls.n	8003b54 <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8003b48:	4b22      	ldr	r3, [pc, #136]	; (8003bd4 <W25qxx_ReadSector+0xe8>)
 8003b4a:	691a      	ldr	r2, [r3, #16]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	61bb      	str	r3, [r7, #24]
 8003b52:	e001      	b.n	8003b58 <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8003b58:	68b8      	ldr	r0, [r7, #8]
 8003b5a:	f7ff fdab 	bl	80036b4 <W25qxx_SectorToPage>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	4b1c      	ldr	r3, [pc, #112]	; (8003bd4 <W25qxx_ReadSector+0xe8>)
 8003b62:	895b      	ldrh	r3, [r3, #10]
 8003b64:	4619      	mov	r1, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b6c:	4413      	add	r3, r2
 8003b6e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8003b70:	4b18      	ldr	r3, [pc, #96]	; (8003bd4 <W25qxx_ReadSector+0xe8>)
 8003b72:	895b      	ldrh	r3, [r3, #10]
 8003b74:	461a      	mov	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	fbb3 f1f2 	udiv	r1, r3, r2
 8003b7c:	fb02 f201 	mul.w	r2, r2, r1
 8003b80:	1a9b      	subs	r3, r3, r2
 8003b82:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	69f9      	ldr	r1, [r7, #28]
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f7ff feec 	bl	8003968 <W25qxx_ReadPage>
		StartPage++;
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	3301      	adds	r3, #1
 8003b94:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8003b96:	4b0f      	ldr	r3, [pc, #60]	; (8003bd4 <W25qxx_ReadSector+0xe8>)
 8003b98:	895b      	ldrh	r3, [r3, #10]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	1a9a      	subs	r2, r3, r2
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8003ba6:	4b0b      	ldr	r3, [pc, #44]	; (8003bd4 <W25qxx_ReadSector+0xe8>)
 8003ba8:	895b      	ldrh	r3, [r3, #10]
 8003baa:	461a      	mov	r2, r3
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	dce1      	bgt.n	8003b84 <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 8003bc0:	4807      	ldr	r0, [pc, #28]	; (8003be0 <W25qxx_ReadSector+0xf4>)
 8003bc2:	f00b fd9f 	bl	800f704 <puts>
	W25qxx_Delay(100);
 8003bc6:	2064      	movs	r0, #100	; 0x64
 8003bc8:	f007 ff3b 	bl	800ba42 <osDelay>
#endif
}
 8003bcc:	3720      	adds	r7, #32
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20005d2c 	.word	0x20005d2c
 8003bd8:	08014420 	.word	0x08014420
 8003bdc:	08014460 	.word	0x08014460
 8003be0:	08014480 	.word	0x08014480

08003be4 <MRT_LSM6DSR_Constructor>:


//**************************************************//
/*****LSM6DSR STATIC FUNCTIONS*****/

void MRT_LSM6DSR_Constructor(){
 8003be4:	b598      	push	{r3, r4, r7, lr}
 8003be6:	af00      	add	r7, sp, #0
	if (lsm6dsr==NULL){
 8003be8:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <MRT_LSM6DSR_Constructor+0x28>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10b      	bne.n	8003c08 <MRT_LSM6DSR_Constructor+0x24>
		lsm6dsr = new LSM6DSR(&LSM6DSR_I2C, (uint8_t) MRT_LSM6DSR_ADDRESS);
 8003bf0:	203c      	movs	r0, #60	; 0x3c
 8003bf2:	f00a fc43 	bl	800e47c <_Znwj>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	461c      	mov	r4, r3
 8003bfa:	226a      	movs	r2, #106	; 0x6a
 8003bfc:	4904      	ldr	r1, [pc, #16]	; (8003c10 <MRT_LSM6DSR_Constructor+0x2c>)
 8003bfe:	4620      	mov	r0, r4
 8003c00:	f000 f990 	bl	8003f24 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>
 8003c04:	4b01      	ldr	r3, [pc, #4]	; (8003c0c <MRT_LSM6DSR_Constructor+0x28>)
 8003c06:	601c      	str	r4, [r3, #0]
	}
}
 8003c08:	bf00      	nop
 8003c0a:	bd98      	pop	{r3, r4, r7, pc}
 8003c0c:	200002b8 	.word	0x200002b8
 8003c10:	200059ec 	.word	0x200059ec

08003c14 <MRT_LSM6DSR_Destructor>:

void MRT_LSM6DSR_Destructor(){
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
	if (lsm6dsr!=NULL){
 8003c18:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <MRT_LSM6DSR_Destructor+0x1c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d002      	beq.n	8003c26 <MRT_LSM6DSR_Destructor+0x12>
		lsm6dsr = NULL;
 8003c20:	4b03      	ldr	r3, [pc, #12]	; (8003c30 <MRT_LSM6DSR_Destructor+0x1c>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]
	}
}
 8003c26:	bf00      	nop
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	200002b8 	.word	0x200002b8

08003c34 <MRT_LSM6DSR_getAcceleration>:

void MRT_LSM6DSR_getAcceleration(void){
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
	float* temp_array = lsm6dsr->getAcceleration();
 8003c3a:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <MRT_LSM6DSR_getAcceleration+0x34>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fa1c 	bl	800407c <_ZN7LSM6DSR15getAccelerationEv>
 8003c44:	6078      	str	r0, [r7, #4]
	hlsm6dsr.acceleration_mg[0] = temp_array[0];
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a08      	ldr	r2, [pc, #32]	; (8003c6c <MRT_LSM6DSR_getAcceleration+0x38>)
 8003c4c:	6013      	str	r3, [r2, #0]
	hlsm6dsr.acceleration_mg[1] = temp_array[1];
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	4a06      	ldr	r2, [pc, #24]	; (8003c6c <MRT_LSM6DSR_getAcceleration+0x38>)
 8003c54:	6053      	str	r3, [r2, #4]
	hlsm6dsr.acceleration_mg[2] = temp_array[2];
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	4a04      	ldr	r2, [pc, #16]	; (8003c6c <MRT_LSM6DSR_getAcceleration+0x38>)
 8003c5c:	6093      	str	r3, [r2, #8]
}
 8003c5e:	bf00      	nop
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	200002b8 	.word	0x200002b8
 8003c6c:	200002c0 	.word	0x200002c0

08003c70 <MRT_LSM6DSR_getAngularRate>:
void MRT_LSM6DSR_getAngularRate(void){
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
	float* temp_array = lsm6dsr->getAngularRate();
 8003c76:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <MRT_LSM6DSR_getAngularRate+0x34>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 fa7c 	bl	8004178 <_ZN7LSM6DSR14getAngularRateEv>
 8003c80:	6078      	str	r0, [r7, #4]
	hlsm6dsr.angular_rate_mdps[0] = temp_array[0];
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a08      	ldr	r2, [pc, #32]	; (8003ca8 <MRT_LSM6DSR_getAngularRate+0x38>)
 8003c88:	60d3      	str	r3, [r2, #12]
	hlsm6dsr.angular_rate_mdps[1] = temp_array[1];
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	4a06      	ldr	r2, [pc, #24]	; (8003ca8 <MRT_LSM6DSR_getAngularRate+0x38>)
 8003c90:	6113      	str	r3, [r2, #16]
	hlsm6dsr.angular_rate_mdps[2] = temp_array[2];
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	4a04      	ldr	r2, [pc, #16]	; (8003ca8 <MRT_LSM6DSR_getAngularRate+0x38>)
 8003c98:	6153      	str	r3, [r2, #20]
}
 8003c9a:	bf00      	nop
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	200002b8 	.word	0x200002b8
 8003ca8:	200002c0 	.word	0x200002c0

08003cac <MRT_LSM6DSR_getTemperature>:
void MRT_LSM6DSR_getTemperature(void){
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
	lsm6dsr->getTemperature();
 8003cb0:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <MRT_LSM6DSR_getTemperature+0x1c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 fa29 	bl	800410c <_ZN7LSM6DSR14getTemperatureEv>
	hlsm6dsr.temperature_degC = lsm6dsr->temperature_degC;
 8003cba:	4b03      	ldr	r3, [pc, #12]	; (8003cc8 <MRT_LSM6DSR_getTemperature+0x1c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	4a02      	ldr	r2, [pc, #8]	; (8003ccc <MRT_LSM6DSR_getTemperature+0x20>)
 8003cc2:	6193      	str	r3, [r2, #24]
}
 8003cc4:	bf00      	nop
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	200002b8 	.word	0x200002b8
 8003ccc:	200002c0 	.word	0x200002c0

08003cd0 <MRT_LSM6DSR_pollAll>:

void MRT_LSM6DSR_pollAll(void){
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
	MRT_LSM6DSR_getAcceleration();
 8003cd4:	f7ff ffae 	bl	8003c34 <MRT_LSM6DSR_getAcceleration>
	MRT_LSM6DSR_getAngularRate();
 8003cd8:	f7ff ffca 	bl	8003c70 <MRT_LSM6DSR_getAngularRate>
	MRT_LSM6DSR_getTemperature();
 8003cdc:	f7ff ffe6 	bl	8003cac <MRT_LSM6DSR_getTemperature>
}
 8003ce0:	bf00      	nop
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <MRT_LPS22HH_Constructor>:


//**************************************************//
/*****LPS22HH STATIC FUNCTIONS*****/

void MRT_LPS22HH_Constructor(){
 8003ce4:	b598      	push	{r3, r4, r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
	if (lps22hh==NULL){
 8003ce8:	4b08      	ldr	r3, [pc, #32]	; (8003d0c <MRT_LPS22HH_Constructor+0x28>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10b      	bne.n	8003d08 <MRT_LPS22HH_Constructor+0x24>
		lps22hh = new LPS22HH(&LPS22HH_I2C, (uint8_t) MRT_LPS22HH_ADDRESS);
 8003cf0:	2020      	movs	r0, #32
 8003cf2:	f00a fbc3 	bl	800e47c <_Znwj>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	461c      	mov	r4, r3
 8003cfa:	22b3      	movs	r2, #179	; 0xb3
 8003cfc:	4904      	ldr	r1, [pc, #16]	; (8003d10 <MRT_LPS22HH_Constructor+0x2c>)
 8003cfe:	4620      	mov	r0, r4
 8003d00:	f000 fabe 	bl	8004280 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>
 8003d04:	4b01      	ldr	r3, [pc, #4]	; (8003d0c <MRT_LPS22HH_Constructor+0x28>)
 8003d06:	601c      	str	r4, [r3, #0]
	}
}
 8003d08:	bf00      	nop
 8003d0a:	bd98      	pop	{r3, r4, r7, pc}
 8003d0c:	200002bc 	.word	0x200002bc
 8003d10:	200059ec 	.word	0x200059ec

08003d14 <MRT_LPS22HH_Destructor>:

void MRT_LPS22HH_Destructor(){
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
	if (lps22hh!=NULL){
 8003d18:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <MRT_LPS22HH_Destructor+0x1c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d002      	beq.n	8003d26 <MRT_LPS22HH_Destructor+0x12>
		lps22hh = NULL;
 8003d20:	4b03      	ldr	r3, [pc, #12]	; (8003d30 <MRT_LPS22HH_Destructor+0x1c>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
	}
}
 8003d26:	bf00      	nop
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	200002bc 	.word	0x200002bc

08003d34 <MRT_LPS22HH_getPressure>:

void MRT_LPS22HH_getPressure(void){
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
	hlps22hh.pressure_hPa = lps22hh->getPressure();
 8003d38:	4b05      	ldr	r3, [pc, #20]	; (8003d50 <MRT_LPS22HH_getPressure+0x1c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 fb27 	bl	8004390 <_ZN7LPS22HH11getPressureEv>
 8003d42:	eef0 7a40 	vmov.f32	s15, s0
 8003d46:	4b03      	ldr	r3, [pc, #12]	; (8003d54 <MRT_LPS22HH_getPressure+0x20>)
 8003d48:	edc3 7a00 	vstr	s15, [r3]
}
 8003d4c:	bf00      	nop
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	200002bc 	.word	0x200002bc
 8003d54:	200002ec 	.word	0x200002ec

08003d58 <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(void){
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
	hlps22hh.temperature_degC = lps22hh->getTemperature();
 8003d5c:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <MRT_LPS22HH_getTemperature+0x1c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 fb49 	bl	80043f8 <_ZN7LPS22HH14getTemperatureEv>
 8003d66:	eef0 7a40 	vmov.f32	s15, s0
 8003d6a:	4b03      	ldr	r3, [pc, #12]	; (8003d78 <MRT_LPS22HH_getTemperature+0x20>)
 8003d6c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8003d70:	bf00      	nop
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	200002bc 	.word	0x200002bc
 8003d78:	200002ec 	.word	0x200002ec

08003d7c <MRT_LPS22HH_pollAll>:

void MRT_LPS22HH_pollAll(void){
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
	MRT_LPS22HH_getPressure();
 8003d80:	f7ff ffd8 	bl	8003d34 <MRT_LPS22HH_getPressure>
	MRT_LPS22HH_getTemperature();
 8003d84:	f7ff ffe8 	bl	8003d58 <MRT_LPS22HH_getTemperature>
}
 8003d88:	bf00      	nop
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <MRT_GPS_pollAll>:


//**************************************************//
/*****GPS STATIC FUNCTIONS*****/

void MRT_GPS_pollAll(void){
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
	GPS_Poll(&hgps.latitude, &hgps.longitude, &hgps.time);
 8003d90:	4a03      	ldr	r2, [pc, #12]	; (8003da0 <MRT_GPS_pollAll+0x14>)
 8003d92:	4904      	ldr	r1, [pc, #16]	; (8003da4 <MRT_GPS_pollAll+0x18>)
 8003d94:	4804      	ldr	r0, [pc, #16]	; (8003da8 <MRT_GPS_pollAll+0x1c>)
 8003d96:	f000 fb9f 	bl	80044d8 <GPS_Poll>
}
 8003d9a:	bf00      	nop
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	20000308 	.word	0x20000308
 8003da4:	20000304 	.word	0x20000304
 8003da8:	20000300 	.word	0x20000300

08003dac <MRT_LSM6DSR_Init>:


//**************************************************//
/*****PUBLIC STATIC FUNCTIONS*****/

HLSM6DSR MRT_LSM6DSR_Init(void){
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
	MRT_LSM6DSR_Constructor();
 8003db4:	f7ff ff16 	bl	8003be4 <MRT_LSM6DSR_Constructor>
	HLSM6DSR lsm6dsr_handler;
	lsm6dsr_handler.getAcceleration = &MRT_LSM6DSR_getAcceleration;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a16      	ldr	r2, [pc, #88]	; (8003e14 <MRT_LSM6DSR_Init+0x68>)
 8003dbc:	61da      	str	r2, [r3, #28]
	lsm6dsr_handler.getAngularRate = &MRT_LSM6DSR_getAngularRate;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a15      	ldr	r2, [pc, #84]	; (8003e18 <MRT_LSM6DSR_Init+0x6c>)
 8003dc2:	621a      	str	r2, [r3, #32]
	lsm6dsr_handler.getTemperature = &MRT_LSM6DSR_getTemperature;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a15      	ldr	r2, [pc, #84]	; (8003e1c <MRT_LSM6DSR_Init+0x70>)
 8003dc8:	625a      	str	r2, [r3, #36]	; 0x24
	lsm6dsr_handler.pollAll = &MRT_LSM6DSR_pollAll;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a14      	ldr	r2, [pc, #80]	; (8003e20 <MRT_LSM6DSR_Init+0x74>)
 8003dce:	629a      	str	r2, [r3, #40]	; 0x28

	lsm6dsr_handler.acceleration_mg[0] = 0;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f04f 0200 	mov.w	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]
	lsm6dsr_handler.acceleration_mg[1] = 0;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f04f 0200 	mov.w	r2, #0
 8003dde:	605a      	str	r2, [r3, #4]
	lsm6dsr_handler.acceleration_mg[2] = 0;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	609a      	str	r2, [r3, #8]
	lsm6dsr_handler.angular_rate_mdps[0] = 0;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f04f 0200 	mov.w	r2, #0
 8003dee:	60da      	str	r2, [r3, #12]
	lsm6dsr_handler.angular_rate_mdps[1] = 0;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	611a      	str	r2, [r3, #16]
	lsm6dsr_handler.angular_rate_mdps[2] = 0;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f04f 0200 	mov.w	r2, #0
 8003dfe:	615a      	str	r2, [r3, #20]
	lsm6dsr_handler.temperature_degC = 0;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f04f 0200 	mov.w	r2, #0
 8003e06:	619a      	str	r2, [r3, #24]
	return lsm6dsr_handler;
 8003e08:	bf00      	nop
}
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	08003c35 	.word	0x08003c35
 8003e18:	08003c71 	.word	0x08003c71
 8003e1c:	08003cad 	.word	0x08003cad
 8003e20:	08003cd1 	.word	0x08003cd1

08003e24 <MRT_LPS22HH_Init>:

struct HLPS22HH MRT_LPS22HH_Init(void){
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
	MRT_LPS22HH_Constructor();
 8003e2c:	f7ff ff5a 	bl	8003ce4 <MRT_LPS22HH_Constructor>
	struct HLPS22HH lps22hh_handler;
	lps22hh_handler.getPressure = &MRT_LPS22HH_getPressure;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a0a      	ldr	r2, [pc, #40]	; (8003e5c <MRT_LPS22HH_Init+0x38>)
 8003e34:	609a      	str	r2, [r3, #8]
	lps22hh_handler.getTemperature = &MRT_LPS22HH_getTemperature;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a09      	ldr	r2, [pc, #36]	; (8003e60 <MRT_LPS22HH_Init+0x3c>)
 8003e3a:	60da      	str	r2, [r3, #12]
	lps22hh_handler.pollAll = &MRT_LPS22HH_pollAll;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a09      	ldr	r2, [pc, #36]	; (8003e64 <MRT_LPS22HH_Init+0x40>)
 8003e40:	611a      	str	r2, [r3, #16]

	lps22hh_handler.pressure_hPa = 0;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]
	lps22hh_handler.temperature_degC = 0;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	605a      	str	r2, [r3, #4]
	return lps22hh_handler;
 8003e52:	bf00      	nop
}
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	08003d35 	.word	0x08003d35
 8003e60:	08003d59 	.word	0x08003d59
 8003e64:	08003d7d 	.word	0x08003d7d

08003e68 <MRT_GPS_Init>:

struct HGPS MRT_GPS_Init(void){
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
	struct HGPS gps_handler;
	gps_handler.pollAll = &MRT_GPS_pollAll;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a0c      	ldr	r2, [pc, #48]	; (8003ea4 <MRT_GPS_Init+0x3c>)
 8003e74:	60da      	str	r2, [r3, #12]
	GPS_Init(&GPS_UART, print, tone_freq);
 8003e76:	4a0c      	ldr	r2, [pc, #48]	; (8003ea8 <MRT_GPS_Init+0x40>)
 8003e78:	490c      	ldr	r1, [pc, #48]	; (8003eac <MRT_GPS_Init+0x44>)
 8003e7a:	480d      	ldr	r0, [pc, #52]	; (8003eb0 <MRT_GPS_Init+0x48>)
 8003e7c:	f000 fd8c 	bl	8004998 <GPS_Init>
	gps_handler.latitude = 0;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]
	gps_handler.longitude = 0;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f04f 0200 	mov.w	r2, #0
 8003e8e:	605a      	str	r2, [r3, #4]
	gps_handler.time = 0;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	609a      	str	r2, [r3, #8]
	return gps_handler;
 8003e98:	bf00      	nop
}
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	08003d8d 	.word	0x08003d8d
 8003ea8:	08001075 	.word	0x08001075
 8003eac:	08001049 	.word	0x08001049
 8003eb0:	20005cd4 	.word	0x20005cd4

08003eb4 <MRT_i2c_sensors_Init>:

void MRT_i2c_sensors_Init(void){
 8003eb4:	b5b0      	push	{r4, r5, r7, lr}
 8003eb6:	b08c      	sub	sp, #48	; 0x30
 8003eb8:	af00      	add	r7, sp, #0

	//LSM6DSR
	#if LSM6DSR_
	HAL_IWDG_Refresh(&hiwdg);
	hlsm6dsr = MRT_LSM6DSR_Init();
 8003eba:	4c13      	ldr	r4, [pc, #76]	; (8003f08 <MRT_i2c_sensors_Init+0x54>)
 8003ebc:	463b      	mov	r3, r7
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff ff74 	bl	8003dac <MRT_LSM6DSR_Init>
 8003ec4:	4625      	mov	r5, r4
 8003ec6:	463c      	mov	r4, r7
 8003ec8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003eca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ecc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ece:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ed0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003ed4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	#endif

	//LPS22HH
	#if LPS22HH_
	HAL_IWDG_Refresh(&hiwdg);
	hlps22hh = MRT_LPS22HH_Init();
 8003ed8:	4c0c      	ldr	r4, [pc, #48]	; (8003f0c <MRT_i2c_sensors_Init+0x58>)
 8003eda:	463b      	mov	r3, r7
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff ffa1 	bl	8003e24 <MRT_LPS22HH_Init>
 8003ee2:	4625      	mov	r5, r4
 8003ee4:	463c      	mov	r4, r7
 8003ee6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ee8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	602b      	str	r3, [r5, #0]
	#endif

	//GPS
	#if GPS_
	HAL_IWDG_Refresh(&hiwdg);
	hgps = MRT_GPS_Init();
 8003eee:	4c08      	ldr	r4, [pc, #32]	; (8003f10 <MRT_i2c_sensors_Init+0x5c>)
 8003ef0:	463b      	mov	r3, r7
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7ff ffb8 	bl	8003e68 <MRT_GPS_Init>
 8003ef8:	463b      	mov	r3, r7
 8003efa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003efc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	#endif

}
 8003f00:	bf00      	nop
 8003f02:	3730      	adds	r7, #48	; 0x30
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bdb0      	pop	{r4, r5, r7, pc}
 8003f08:	200002c0 	.word	0x200002c0
 8003f0c:	200002ec 	.word	0x200002ec
 8003f10:	20000300 	.word	0x20000300

08003f14 <MRT_i2c_sensors_Deinit>:


void MRT_i2c_sensors_Deinit(void){
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0

	//LSM6DSR
	#if LSM6DSR_
	MRT_LSM6DSR_Destructor();
 8003f18:	f7ff fe7c 	bl	8003c14 <MRT_LSM6DSR_Destructor>
	#endif

	//LPS22HH
	#if LPS22HH_
	MRT_LPS22HH_Destructor();
 8003f1c:	f7ff fefa 	bl	8003d14 <MRT_LPS22HH_Destructor>
	#endif

	//GPS
	//NO DEINIT NEEDED HERE
}
 8003f20:	bf00      	nop
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>:


//**************************************************//
/*****LSM6DSR*****/

LSM6DSR::LSM6DSR(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	71fb      	strb	r3, [r7, #7]
	println((char*) "\r\nLSM6DSR Init");
 8003f32:	4848      	ldr	r0, [pc, #288]	; (8004054 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x130>)
 8003f34:	f7fd f86a 	bl	800100c <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	4a47      	ldr	r2, [pc, #284]	; (8004058 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x134>)
 8003f3c:	61da      	str	r2, [r3, #28]
	ctx.read_reg = read;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4a46      	ldr	r2, [pc, #280]	; (800405c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x138>)
 8003f42:	621a      	str	r2, [r3, #32]
	ctx.handle = i2c_bus;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait sensor boot time */
	HAL_Delay(LSM6DSR_BOOT_TIME);
 8003f4a:	2064      	movs	r0, #100	; 0x64
 8003f4c:	f001 ff64 	bl	8005e18 <HAL_Delay>
	/* Check device ID */
	lsm6dsr_device_id_get(&ctx, &whoamI);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f103 021c 	add.w	r2, r3, #28
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	3338      	adds	r3, #56	; 0x38
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	f001 faf1 	bl	8005544 <lsm6dsr_device_id_get>

	print((char*) "\tChecking Sensor ID...");
 8003f62:	483f      	ldr	r0, [pc, #252]	; (8004060 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x13c>)
 8003f64:	f7fd f870 	bl	8001048 <print>
	if (whoamI != address){
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f6e:	79fa      	ldrb	r2, [r7, #7]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d018      	beq.n	8003fa6 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x82>
	  println((char*) "NOT OK");
 8003f74:	483b      	ldr	r0, [pc, #236]	; (8004064 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x140>)
 8003f76:	f7fd f849 	bl	800100c <println>
	  print((char*) "\tThis Device is: ");
 8003f7a:	483b      	ldr	r0, [pc, #236]	; (8004068 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x144>)
 8003f7c:	f7fd f864 	bl	8001048 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f86:	461a      	mov	r2, r3
 8003f88:	f107 0314 	add.w	r3, r7, #20
 8003f8c:	4937      	ldr	r1, [pc, #220]	; (800406c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x148>)
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f00b fc84 	bl	800f89c <siprintf>
	  print(buffer);
 8003f94:	f107 0314 	add.w	r3, r7, #20
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fd f855 	bl	8001048 <print>

	  println((char*) "\n\rProgram Terminated\n\r");
 8003f9e:	4834      	ldr	r0, [pc, #208]	; (8004070 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x14c>)
 8003fa0:	f7fd f834 	bl	800100c <println>
	  while(1);
 8003fa4:	e7fe      	b.n	8003fa4 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x80>
	}
	println((char*) "OK");
 8003fa6:	4833      	ldr	r0, [pc, #204]	; (8004074 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x150>)
 8003fa8:	f7fd f830 	bl	800100c <println>

	/* Restore default configuration */
	print((char*) "\tRestore default configuration...");
 8003fac:	4832      	ldr	r0, [pc, #200]	; (8004078 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x154>)
 8003fae:	f7fd f84b 	bl	8001048 <print>
	lsm6dsr_reset_set(&ctx, PROPERTY_ENABLE);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	331c      	adds	r3, #28
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f001 fad4 	bl	8005566 <lsm6dsr_reset_set>
	HAL_Delay(500);
 8003fbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003fc2:	f001 ff29 	bl	8005e18 <HAL_Delay>
	do {
	lsm6dsr_reset_get(&ctx, &rst);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f103 021c 	add.w	r2, r3, #28
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	3339      	adds	r3, #57	; 0x39
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	f001 faed 	bl	80055b2 <lsm6dsr_reset_get>
	} while (rst);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d000      	beq.n	8003fe4 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0xc0>
	do {
 8003fe2:	e7f0      	b.n	8003fc6 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0xa2>
	println((char*) "OK");
 8003fe4:	4823      	ldr	r0, [pc, #140]	; (8004074 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x150>)
 8003fe6:	f7fd f811 	bl	800100c <println>

	/* Disable I3C interface */
    lsm6dsr_i3c_disable_set(&ctx, LSM6DSR_I3C_DISABLE);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	331c      	adds	r3, #28
 8003fee:	2180      	movs	r1, #128	; 0x80
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f001 fb55 	bl	80056a0 <lsm6dsr_i3c_disable_set>

	/* Enable Block Data Update */
	lsm6dsr_block_data_update_set(&ctx, PROPERTY_ENABLE);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	331c      	adds	r3, #28
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f001 f951 	bl	80052a4 <lsm6dsr_block_data_update_set>
	/* Set Output Data Rate */
	lsm6dsr_xl_data_rate_set(&ctx, LSM6DSR_XL_ODR_12Hz5);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	331c      	adds	r3, #28
 8004006:	2101      	movs	r1, #1
 8004008:	4618      	mov	r0, r3
 800400a:	f000 ff2d 	bl	8004e68 <lsm6dsr_xl_data_rate_set>
	lsm6dsr_gy_data_rate_set(&ctx, LSM6DSR_GY_ODR_12Hz5);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	331c      	adds	r3, #28
 8004012:	2101      	movs	r1, #1
 8004014:	4618      	mov	r0, r3
 8004016:	f001 f849 	bl	80050ac <lsm6dsr_gy_data_rate_set>
	/* Set full scale */
	lsm6dsr_xl_full_scale_set(&ctx, LSM6DSR_2g);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	331c      	adds	r3, #28
 800401e:	2100      	movs	r1, #0
 8004020:	4618      	mov	r0, r3
 8004022:	f000 fefb 	bl	8004e1c <lsm6dsr_xl_full_scale_set>
	lsm6dsr_gy_full_scale_set(&ctx, LSM6DSR_2000dps);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	331c      	adds	r3, #28
 800402a:	210c      	movs	r1, #12
 800402c:	4618      	mov	r0, r3
 800402e:	f001 f817 	bl	8005060 <lsm6dsr_gy_full_scale_set>
	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsr_xl_hp_path_on_out_set(&ctx, LSM6DSR_LP_ODR_DIV_100);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	331c      	adds	r3, #28
 8004036:	2104      	movs	r1, #4
 8004038:	4618      	mov	r0, r3
 800403a:	f001 faf9 	bl	8005630 <lsm6dsr_xl_hp_path_on_out_set>
	lsm6dsr_xl_filter_lp2_set(&ctx, PROPERTY_ENABLE);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	331c      	adds	r3, #28
 8004042:	2101      	movs	r1, #1
 8004044:	4618      	mov	r0, r3
 8004046:	f001 facd 	bl	80055e4 <lsm6dsr_xl_filter_lp2_set>
}
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	4618      	mov	r0, r3
 800404e:	3720      	adds	r7, #32
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	08014514 	.word	0x08014514
 8004058:	0800420b 	.word	0x0800420b
 800405c:	08004245 	.word	0x08004245
 8004060:	08014524 	.word	0x08014524
 8004064:	0801453c 	.word	0x0801453c
 8004068:	08014544 	.word	0x08014544
 800406c:	08014558 	.word	0x08014558
 8004070:	08014560 	.word	0x08014560
 8004074:	08014578 	.word	0x08014578
 8004078:	0801457c 	.word	0x0801457c

0800407c <_ZN7LSM6DSR15getAccelerationEv>:


float* LSM6DSR::getAcceleration(void){
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
	lsm6dsr_xl_flag_data_ready_get(&ctx, &reg);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f103 021c 	add.w	r2, r3, #28
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	3328      	adds	r3, #40	; 0x28
 800408e:	4619      	mov	r1, r3
 8004090:	4610      	mov	r0, r2
 8004092:	f001 f92d 	bl	80052f0 <lsm6dsr_xl_flag_data_ready_get>

	if (reg){
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800409c:	2b00      	cmp	r3, #0
 800409e:	d030      	beq.n	8004102 <_ZN7LSM6DSR15getAccelerationEv+0x86>
		// Read magnetic field data
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	332a      	adds	r3, #42	; 0x2a
 80040a4:	2206      	movs	r2, #6
 80040a6:	2100      	movs	r1, #0
 80040a8:	4618      	mov	r0, r3
 80040aa:	f00a fb79 	bl	800e7a0 <memset>
		lsm6dsr_acceleration_raw_get(&ctx, data_raw_acceleration);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f103 021c 	add.w	r2, r3, #28
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	332a      	adds	r3, #42	; 0x2a
 80040b8:	4619      	mov	r1, r3
 80040ba:	4610      	mov	r0, r2
 80040bc:	f001 f9d1 	bl	8005462 <lsm6dsr_acceleration_raw_get>
		acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[0]);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 fe5c 	bl	8004d84 <lsm6dsr_from_fs2g_to_mg>
 80040cc:	eef0 7a40 	vmov.f32	s15, s0
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	edc3 7a00 	vstr	s15, [r3]
		acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[1]);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 fe51 	bl	8004d84 <lsm6dsr_from_fs2g_to_mg>
 80040e2:	eef0 7a40 	vmov.f32	s15, s0
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	edc3 7a01 	vstr	s15, [r3, #4]
		acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[2]);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 fe46 	bl	8004d84 <lsm6dsr_from_fs2g_to_mg>
 80040f8:	eef0 7a40 	vmov.f32	s15, s0
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	return acceleration_mg;
 8004102:	687b      	ldr	r3, [r7, #4]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <_ZN7LSM6DSR14getTemperatureEv>:


float LSM6DSR::getTemperature(void){
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
    lsm6dsr_temp_flag_data_ready_get(&ctx, &reg);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f103 021c 	add.w	r2, r3, #28
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	3328      	adds	r3, #40	; 0x28
 800411e:	4619      	mov	r1, r3
 8004120:	4610      	mov	r0, r2
 8004122:	f001 f917 	bl	8005354 <lsm6dsr_temp_flag_data_ready_get>

    if (reg){
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800412c:	2b00      	cmp	r3, #0
 800412e:	d01a      	beq.n	8004166 <_ZN7LSM6DSR14getTemperatureEv+0x5a>
		// Read temperature data
		memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3336      	adds	r3, #54	; 0x36
 8004134:	2202      	movs	r2, #2
 8004136:	2100      	movs	r1, #0
 8004138:	4618      	mov	r0, r3
 800413a:	f00a fb31 	bl	800e7a0 <memset>
		lsm6dsr_temperature_raw_get(&ctx, &data_raw_temperature);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f103 021c 	add.w	r2, r3, #28
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3336      	adds	r3, #54	; 0x36
 8004148:	4619      	mov	r1, r3
 800414a:	4610      	mov	r0, r2
 800414c:	f001 f91b 	bl	8005386 <lsm6dsr_temperature_raw_get>
		temperature_degC = lsm6dsr_from_lsb_to_celsius(data_raw_temperature);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8004156:	4618      	mov	r0, r3
 8004158:	f000 fe44 	bl	8004de4 <lsm6dsr_from_lsb_to_celsius>
 800415c:	eef0 7a40 	vmov.f32	s15, s0
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	edc3 7a06 	vstr	s15, [r3, #24]
	}
    return temperature_degC;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	ee07 3a90 	vmov	s15, r3
}
 800416e:	eeb0 0a67 	vmov.f32	s0, s15
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <_ZN7LSM6DSR14getAngularRateEv>:


float* LSM6DSR::getAngularRate(void){
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
    lsm6dsr_gy_flag_data_ready_get(&ctx, &reg);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f103 021c 	add.w	r2, r3, #28
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3328      	adds	r3, #40	; 0x28
 800418a:	4619      	mov	r1, r3
 800418c:	4610      	mov	r0, r2
 800418e:	f001 f8c8 	bl	8005322 <lsm6dsr_gy_flag_data_ready_get>

    if (reg){
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004198:	2b00      	cmp	r3, #0
 800419a:	d030      	beq.n	80041fe <_ZN7LSM6DSR14getAngularRateEv+0x86>
		// Read magnetic field data
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3330      	adds	r3, #48	; 0x30
 80041a0:	2206      	movs	r2, #6
 80041a2:	2100      	movs	r1, #0
 80041a4:	4618      	mov	r0, r3
 80041a6:	f00a fafb 	bl	800e7a0 <memset>
		lsm6dsr_angular_rate_raw_get(&ctx, data_raw_angular_rate);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f103 021c 	add.w	r2, r3, #28
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3330      	adds	r3, #48	; 0x30
 80041b4:	4619      	mov	r1, r3
 80041b6:	4610      	mov	r0, r2
 80041b8:	f001 f908 	bl	80053cc <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 fdf6 	bl	8004db4 <lsm6dsr_from_fs2000dps_to_mdps>
 80041c8:	eef0 7a40 	vmov.f32	s15, s0
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	edc3 7a03 	vstr	s15, [r3, #12]
		angular_rate_mdps[1] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 fdeb 	bl	8004db4 <lsm6dsr_from_fs2000dps_to_mdps>
 80041de:	eef0 7a40 	vmov.f32	s15, s0
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	edc3 7a04 	vstr	s15, [r3, #16]
		angular_rate_mdps[2] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 fde0 	bl	8004db4 <lsm6dsr_from_fs2000dps_to_mdps>
 80041f4:	eef0 7a40 	vmov.f32	s15, s0
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	edc3 7a05 	vstr	s15, [r3, #20]
		fs500dps_to_mdps
		fs1000dps_to_mdps
		fs2000dps_to_mdps
		*/
	}
    return angular_rate_mdps;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	330c      	adds	r3, #12
}
 8004202:	4618      	mov	r0, r3
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <_ZN7LSM6DSR5writeEPvhPKht>:


int32_t LSM6DSR::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 800420a:	b580      	push	{r7, lr}
 800420c:	b088      	sub	sp, #32
 800420e:	af04      	add	r7, sp, #16
 8004210:	60f8      	str	r0, [r7, #12]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	461a      	mov	r2, r3
 8004216:	460b      	mov	r3, r1
 8004218:	72fb      	strb	r3, [r7, #11]
 800421a:	4613      	mov	r3, r2
 800421c:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 800421e:	7afb      	ldrb	r3, [r7, #11]
 8004220:	b29a      	uxth	r2, r3
 8004222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004226:	9302      	str	r3, [sp, #8]
 8004228:	893b      	ldrh	r3, [r7, #8]
 800422a:	9301      	str	r3, [sp, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	2301      	movs	r3, #1
 8004232:	21d5      	movs	r1, #213	; 0xd5
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f002 fcd3 	bl	8006be0 <HAL_I2C_Mem_Write>
  return 0;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <_ZN7LSM6DSR4readEPvhPht>:

int32_t LSM6DSR::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af04      	add	r7, sp, #16
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	607a      	str	r2, [r7, #4]
 800424e:	461a      	mov	r2, r3
 8004250:	460b      	mov	r3, r1
 8004252:	72fb      	strb	r3, [r7, #11]
 8004254:	4613      	mov	r3, r2
 8004256:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8004258:	7afb      	ldrb	r3, [r7, #11]
 800425a:	b29a      	uxth	r2, r3
 800425c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004260:	9302      	str	r3, [sp, #8]
 8004262:	893b      	ldrh	r3, [r7, #8]
 8004264:	9301      	str	r3, [sp, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	2301      	movs	r3, #1
 800426c:	21d5      	movs	r1, #213	; 0xd5
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f002 fdb0 	bl	8006dd4 <HAL_I2C_Mem_Read>
  return 0;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
	...

08004280 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>:

//**************************************************//
/*****LPS22HH*****/


LPS22HH::LPS22HH(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 8004280:	b580      	push	{r7, lr}
 8004282:	b088      	sub	sp, #32
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	4613      	mov	r3, r2
 800428c:	71fb      	strb	r3, [r7, #7]
	println((char*) "\r\nLPS22HH Init");
 800428e:	4836      	ldr	r0, [pc, #216]	; (8004368 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xe8>)
 8004290:	f7fc febc 	bl	800100c <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4a35      	ldr	r2, [pc, #212]	; (800436c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xec>)
 8004298:	609a      	str	r2, [r3, #8]
	ctx.read_reg = read;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	4a34      	ldr	r2, [pc, #208]	; (8004370 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf0>)
 800429e:	60da      	str	r2, [r3, #12]
	ctx.handle = i2c_bus;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	611a      	str	r2, [r3, #16]
	/* Wait sensor boot time */
	HAL_Delay(LPS22HH_BOOT_TIME);
 80042a6:	2064      	movs	r0, #100	; 0x64
 80042a8:	f001 fdb6 	bl	8005e18 <HAL_Delay>
	/* Check device ID */
	whoamI = 0;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	779a      	strb	r2, [r3, #30]
	lps22hh_device_id_get(&ctx, &whoamI);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f103 0208 	add.w	r2, r3, #8
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	331e      	adds	r3, #30
 80042bc:	4619      	mov	r1, r3
 80042be:	4610      	mov	r0, r2
 80042c0:	f000 fce0 	bl	8004c84 <lps22hh_device_id_get>


	print((char*) "\tChecking Sensor ID...");
 80042c4:	482b      	ldr	r0, [pc, #172]	; (8004374 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf4>)
 80042c6:	f7fc febf 	bl	8001048 <print>
	if ( whoamI != address ){
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	7f9b      	ldrb	r3, [r3, #30]
 80042ce:	79fa      	ldrb	r2, [r7, #7]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d017      	beq.n	8004304 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x84>
	  println((char*) "NOT OK");
 80042d4:	4828      	ldr	r0, [pc, #160]	; (8004378 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf8>)
 80042d6:	f7fc fe99 	bl	800100c <println>
	  print((char*) "\tThis Device is: ");
 80042da:	4828      	ldr	r0, [pc, #160]	; (800437c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xfc>)
 80042dc:	f7fc feb4 	bl	8001048 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	7f9b      	ldrb	r3, [r3, #30]
 80042e4:	461a      	mov	r2, r3
 80042e6:	f107 0314 	add.w	r3, r7, #20
 80042ea:	4925      	ldr	r1, [pc, #148]	; (8004380 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x100>)
 80042ec:	4618      	mov	r0, r3
 80042ee:	f00b fad5 	bl	800f89c <siprintf>
	  print(buffer);
 80042f2:	f107 0314 	add.w	r3, r7, #20
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fc fea6 	bl	8001048 <print>

	  println((char*) "\n\rProgram Terminated\n\r");
 80042fc:	4821      	ldr	r0, [pc, #132]	; (8004384 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x104>)
 80042fe:	f7fc fe85 	bl	800100c <println>
	  while(1);
 8004302:	e7fe      	b.n	8004302 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x82>
	}
	println((char*) "OK");
 8004304:	4820      	ldr	r0, [pc, #128]	; (8004388 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x108>)
 8004306:	f7fc fe81 	bl	800100c <println>

	/* Restore default configuration */
	print((char*) "\tRestore default configuration...");
 800430a:	4820      	ldr	r0, [pc, #128]	; (800438c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x10c>)
 800430c:	f7fc fe9c 	bl	8001048 <print>
	lps22hh_reset_set(&ctx, PROPERTY_ENABLE);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	3308      	adds	r3, #8
 8004314:	2101      	movs	r1, #1
 8004316:	4618      	mov	r0, r3
 8004318:	f000 fcc5 	bl	8004ca6 <lps22hh_reset_set>
	HAL_Delay(500);
 800431c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004320:	f001 fd7a 	bl	8005e18 <HAL_Delay>
	do {
	lps22hh_reset_get(&ctx, &rst);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f103 0208 	add.w	r2, r3, #8
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	331f      	adds	r3, #31
 800432e:	4619      	mov	r1, r3
 8004330:	4610      	mov	r0, r2
 8004332:	f000 fcde 	bl	8004cf2 <lps22hh_reset_get>
	} while (rst);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	7fdb      	ldrb	r3, [r3, #31]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d000      	beq.n	8004340 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xc0>
	do {
 800433e:	e7f1      	b.n	8004324 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xa4>
	println((char*) "OK");
 8004340:	4811      	ldr	r0, [pc, #68]	; (8004388 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x108>)
 8004342:	f7fc fe63 	bl	800100c <println>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&ctx, PROPERTY_ENABLE);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	3308      	adds	r3, #8
 800434a:	2101      	movs	r1, #1
 800434c:	4618      	mov	r0, r3
 800434e:	f000 fba7 	bl	8004aa0 <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&ctx, LPS22HH_75_Hz_LOW_NOISE);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	3308      	adds	r3, #8
 8004356:	2115      	movs	r1, #21
 8004358:	4618      	mov	r0, r3
 800435a:	f000 fbc7 	bl	8004aec <lps22hh_data_rate_set>
}
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4618      	mov	r0, r3
 8004362:	3720      	adds	r7, #32
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	080145a0 	.word	0x080145a0
 800436c:	08004463 	.word	0x08004463
 8004370:	0800449d 	.word	0x0800449d
 8004374:	08014524 	.word	0x08014524
 8004378:	0801453c 	.word	0x0801453c
 800437c:	08014544 	.word	0x08014544
 8004380:	08014558 	.word	0x08014558
 8004384:	08014560 	.word	0x08014560
 8004388:	08014578 	.word	0x08014578
 800438c:	0801457c 	.word	0x0801457c

08004390 <_ZN7LPS22HH11getPressureEv>:



float LPS22HH::getPressure(void){
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_press_flag_data_ready_get(&ctx, &reg);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f103 0208 	add.w	r2, r3, #8
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	3314      	adds	r3, #20
 80043a2:	4619      	mov	r1, r3
 80043a4:	4610      	mov	r0, r2
 80043a6:	f000 fbef 	bl	8004b88 <lps22hh_press_flag_data_ready_get>

	if (reg) {
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	7d1b      	ldrb	r3, [r3, #20]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d019      	beq.n	80043e6 <_ZN7LPS22HH11getPressureEv+0x56>
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3318      	adds	r3, #24
 80043b6:	2204      	movs	r2, #4
 80043b8:	2100      	movs	r1, #0
 80043ba:	4618      	mov	r0, r3
 80043bc:	f00a f9f0 	bl	800e7a0 <memset>
	  lps22hh_pressure_raw_get(&ctx, &data_raw_pressure);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f103 0208 	add.w	r2, r3, #8
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	3318      	adds	r3, #24
 80043ca:	4619      	mov	r1, r3
 80043cc:	4610      	mov	r0, r2
 80043ce:	f000 fc0d 	bl	8004bec <lps22hh_pressure_raw_get>
	  pressure_hPa = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 fb30 	bl	8004a3c <lps22hh_from_lsb_to_hpa>
 80043dc:	eef0 7a40 	vmov.f32	s15, s0
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	edc3 7a00 	vstr	s15, [r3]
	}
	return pressure_hPa;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	ee07 3a90 	vmov	s15, r3
}
 80043ee:	eeb0 0a67 	vmov.f32	s0, s15
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <_ZN7LPS22HH14getTemperatureEv>:


float LPS22HH::getTemperature(void){
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_temp_flag_data_ready_get(&ctx, &reg);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f103 0208 	add.w	r2, r3, #8
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	3314      	adds	r3, #20
 800440a:	4619      	mov	r1, r3
 800440c:	4610      	mov	r0, r2
 800440e:	f000 fbd4 	bl	8004bba <lps22hh_temp_flag_data_ready_get>

	if (reg) {
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	7d1b      	ldrb	r3, [r3, #20]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d01a      	beq.n	8004450 <_ZN7LPS22HH14getTemperatureEv+0x58>
	  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	331c      	adds	r3, #28
 800441e:	2202      	movs	r2, #2
 8004420:	2100      	movs	r1, #0
 8004422:	4618      	mov	r0, r3
 8004424:	f00a f9bc 	bl	800e7a0 <memset>
	  lps22hh_temperature_raw_get(&ctx, &data_raw_temperature);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f103 0208 	add.w	r2, r3, #8
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	331c      	adds	r3, #28
 8004432:	4619      	mov	r1, r3
 8004434:	4610      	mov	r0, r2
 8004436:	f000 fc02 	bl	8004c3e <lps22hh_temperature_raw_get>
	  temperature_degC = lps22hh_from_lsb_to_celsius(data_raw_temperature);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004440:	4618      	mov	r0, r3
 8004442:	f000 fb13 	bl	8004a6c <lps22hh_from_lsb_to_celsius>
 8004446:	eef0 7a40 	vmov.f32	s15, s0
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	return temperature_degC;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	ee07 3a90 	vmov	s15, r3
}
 8004458:	eeb0 0a67 	vmov.f32	s0, s15
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <_ZN7LPS22HH5writeEPvhPKht>:



int32_t LPS22HH::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 8004462:	b580      	push	{r7, lr}
 8004464:	b088      	sub	sp, #32
 8004466:	af04      	add	r7, sp, #16
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	607a      	str	r2, [r7, #4]
 800446c:	461a      	mov	r2, r3
 800446e:	460b      	mov	r3, r1
 8004470:	72fb      	strb	r3, [r7, #11]
 8004472:	4613      	mov	r3, r2
 8004474:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8004476:	7afb      	ldrb	r3, [r7, #11]
 8004478:	b29a      	uxth	r2, r3
 800447a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800447e:	9302      	str	r3, [sp, #8]
 8004480:	893b      	ldrh	r3, [r7, #8]
 8004482:	9301      	str	r3, [sp, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	2301      	movs	r3, #1
 800448a:	21b9      	movs	r1, #185	; 0xb9
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f002 fba7 	bl	8006be0 <HAL_I2C_Mem_Write>
  return 0;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <_ZN7LPS22HH4readEPvhPht>:

int32_t LPS22HH::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 800449c:	b580      	push	{r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af04      	add	r7, sp, #16
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	607a      	str	r2, [r7, #4]
 80044a6:	461a      	mov	r2, r3
 80044a8:	460b      	mov	r3, r1
 80044aa:	72fb      	strb	r3, [r7, #11]
 80044ac:	4613      	mov	r3, r2
 80044ae:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80044b0:	7afb      	ldrb	r3, [r7, #11]
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044b8:	9302      	str	r3, [sp, #8]
 80044ba:	893b      	ldrh	r3, [r7, #8]
 80044bc:	9301      	str	r3, [sp, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	2301      	movs	r3, #1
 80044c4:	21b9      	movs	r1, #185	; 0xb9
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f002 fc84 	bl	8006dd4 <HAL_I2C_Mem_Read>
  return 0;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
	...

080044d8 <GPS_Poll>:
#define LED3_GPIO_Port	((GPIO_TypeDef *) ((0x40000000UL + 0x00020000UL) + 0x0800UL))//OUT_LED3_GPIO_Port
#define LED3_Pin	(uint16_t)0x0008//OUT_LED3_Pin


void GPS_Poll(float *latitude, float *longitude, float *time)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b08c      	sub	sp, #48	; 0x30
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 80044e4:	2364      	movs	r3, #100	; 0x64
 80044e6:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 80044e8:	2300      	movs	r3, #0
 80044ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 80044ec:	2300      	movs	r3, #0
 80044ee:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 80044f0:	e073      	b.n	80045da <GPS_Poll+0x102>
		HAL_UART_Receive(GPS.uart, (uint8_t*)&rx_current, 1, 100);
 80044f2:	4b3f      	ldr	r3, [pc, #252]	; (80045f0 <GPS_Poll+0x118>)
 80044f4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80044f6:	2364      	movs	r3, #100	; 0x64
 80044f8:	2201      	movs	r2, #1
 80044fa:	493e      	ldr	r1, [pc, #248]	; (80045f4 <GPS_Poll+0x11c>)
 80044fc:	f006 fdd1 	bl	800b0a2 <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 8004500:	4b3c      	ldr	r3, [pc, #240]	; (80045f4 <GPS_Poll+0x11c>)
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	2b0a      	cmp	r3, #10
 8004506:	d00f      	beq.n	8004528 <GPS_Poll+0x50>
 8004508:	4b3b      	ldr	r3, [pc, #236]	; (80045f8 <GPS_Poll+0x120>)
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	2b63      	cmp	r3, #99	; 0x63
 800450e:	d80b      	bhi.n	8004528 <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 8004510:	4b39      	ldr	r3, [pc, #228]	; (80045f8 <GPS_Poll+0x120>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	b2d1      	uxtb	r1, r2
 8004518:	4a37      	ldr	r2, [pc, #220]	; (80045f8 <GPS_Poll+0x120>)
 800451a:	7011      	strb	r1, [r2, #0]
 800451c:	461a      	mov	r2, r3
 800451e:	4b35      	ldr	r3, [pc, #212]	; (80045f4 <GPS_Poll+0x11c>)
 8004520:	7819      	ldrb	r1, [r3, #0]
 8004522:	4b36      	ldr	r3, [pc, #216]	; (80045fc <GPS_Poll+0x124>)
 8004524:	5499      	strb	r1, [r3, r2]
 8004526:	e021      	b.n	800456c <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 8004528:	4834      	ldr	r0, [pc, #208]	; (80045fc <GPS_Poll+0x124>)
 800452a:	f000 f869 	bl	8004600 <GPS_validate>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d013      	beq.n	800455c <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 8004534:	4831      	ldr	r0, [pc, #196]	; (80045fc <GPS_Poll+0x124>)
 8004536:	f000 f8c5 	bl	80046c4 <GPS_parse>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00d      	beq.n	800455c <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 8004540:	4b2b      	ldr	r3, [pc, #172]	; (80045f0 <GPS_Poll+0x118>)
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 8004548:	4b29      	ldr	r3, [pc, #164]	; (80045f0 <GPS_Poll+0x118>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 8004550:	4b27      	ldr	r3, [pc, #156]	; (80045f0 <GPS_Poll+0x118>)
 8004552:	695a      	ldr	r2, [r3, #20]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	601a      	str	r2, [r3, #0]
					done = 1;
 8004558:	2301      	movs	r3, #1
 800455a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 800455c:	4b26      	ldr	r3, [pc, #152]	; (80045f8 <GPS_Poll+0x120>)
 800455e:	2200      	movs	r2, #0
 8004560:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 8004562:	2264      	movs	r2, #100	; 0x64
 8004564:	2100      	movs	r1, #0
 8004566:	4825      	ldr	r0, [pc, #148]	; (80045fc <GPS_Poll+0x124>)
 8004568:	f00a f91a 	bl	800e7a0 <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS.uart);
 800456c:	2300      	movs	r3, #0
 800456e:	623b      	str	r3, [r7, #32]
 8004570:	4b1f      	ldr	r3, [pc, #124]	; (80045f0 <GPS_Poll+0x118>)
 8004572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	623b      	str	r3, [r7, #32]
 800457a:	4b1d      	ldr	r3, [pc, #116]	; (80045f0 <GPS_Poll+0x118>)
 800457c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	623b      	str	r3, [r7, #32]
 8004584:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS.uart);
 8004586:	2300      	movs	r3, #0
 8004588:	61fb      	str	r3, [r7, #28]
 800458a:	4b19      	ldr	r3, [pc, #100]	; (80045f0 <GPS_Poll+0x118>)
 800458c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	61fb      	str	r3, [r7, #28]
 8004594:	4b16      	ldr	r3, [pc, #88]	; (80045f0 <GPS_Poll+0x118>)
 8004596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	61fb      	str	r3, [r7, #28]
 800459e:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS.uart);
 80045a0:	2300      	movs	r3, #0
 80045a2:	61bb      	str	r3, [r7, #24]
 80045a4:	4b12      	ldr	r3, [pc, #72]	; (80045f0 <GPS_Poll+0x118>)
 80045a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	61bb      	str	r3, [r7, #24]
 80045ae:	4b10      	ldr	r3, [pc, #64]	; (80045f0 <GPS_Poll+0x118>)
 80045b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	61bb      	str	r3, [r7, #24]
 80045b8:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS.uart);
 80045ba:	2300      	movs	r3, #0
 80045bc:	617b      	str	r3, [r7, #20]
 80045be:	4b0c      	ldr	r3, [pc, #48]	; (80045f0 <GPS_Poll+0x118>)
 80045c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	617b      	str	r3, [r7, #20]
 80045c8:	4b09      	ldr	r3, [pc, #36]	; (80045f0 <GPS_Poll+0x118>)
 80045ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 80045d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80045d6:	3301      	adds	r3, #1
 80045d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 80045da:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80045dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80045de:	429a      	cmp	r2, r3
 80045e0:	d202      	bcs.n	80045e8 <GPS_Poll+0x110>
 80045e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d084      	beq.n	80044f2 <GPS_Poll+0x1a>
	}
}
 80045e8:	bf00      	nop
 80045ea:	3730      	adds	r7, #48	; 0x30
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	20005d60 	.word	0x20005d60
 80045f4:	20000310 	.word	0x20000310
 80045f8:	20000311 	.word	0x20000311
 80045fc:	20005dc4 	.word	0x20005dc4

08004600 <GPS_validate>:

int GPS_validate(char *nmeastr){
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8004608:	2300      	movs	r3, #0
 800460a:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 800460c:	2300      	movs	r3, #0
 800460e:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	4413      	add	r3, r2
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	2b24      	cmp	r3, #36	; 0x24
 800461a:	d103      	bne.n	8004624 <GPS_validate+0x24>
        i++;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	3301      	adds	r3, #1
 8004620:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8004622:	e00c      	b.n	800463e <GPS_validate+0x3e>
        return 0;
 8004624:	2300      	movs	r3, #0
 8004626:	e047      	b.n	80046b8 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	4413      	add	r3, r2
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	461a      	mov	r2, r3
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	4053      	eors	r3, r2
 8004636:	613b      	str	r3, [r7, #16]
        i++;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	3301      	adds	r3, #1
 800463c:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	4413      	add	r3, r2
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d008      	beq.n	800465c <GPS_validate+0x5c>
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	4413      	add	r3, r2
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b2a      	cmp	r3, #42	; 0x2a
 8004654:	d002      	beq.n	800465c <GPS_validate+0x5c>
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2b4a      	cmp	r3, #74	; 0x4a
 800465a:	dde5      	ble.n	8004628 <GPS_validate+0x28>
    }

    if(i >= 75){
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	2b4a      	cmp	r3, #74	; 0x4a
 8004660:	dd01      	ble.n	8004666 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 8004662:	2300      	movs	r3, #0
 8004664:	e028      	b.n	80046b8 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	4413      	add	r3, r2
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	2b2a      	cmp	r3, #42	; 0x2a
 8004670:	d119      	bne.n	80046a6 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	3301      	adds	r3, #1
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	4413      	add	r3, r2
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	3302      	adds	r3, #2
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	4413      	add	r3, r2
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 800468a:	2300      	movs	r3, #0
 800468c:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 800468e:	f107 0308 	add.w	r3, r7, #8
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	490a      	ldr	r1, [pc, #40]	; (80046c0 <GPS_validate+0xc0>)
 8004696:	4618      	mov	r0, r3
 8004698:	f00b f900 	bl	800f89c <siprintf>
    return((checkcalcstr[0] == check[0])
 800469c:	7a3a      	ldrb	r2, [r7, #8]
 800469e:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d108      	bne.n	80046b6 <GPS_validate+0xb6>
 80046a4:	e001      	b.n	80046aa <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 80046a6:	2300      	movs	r3, #0
 80046a8:	e006      	b.n	80046b8 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80046aa:	7a7a      	ldrb	r2, [r7, #9]
 80046ac:	7b7b      	ldrb	r3, [r7, #13]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d101      	bne.n	80046b6 <GPS_validate+0xb6>
 80046b2:	2301      	movs	r3, #1
 80046b4:	e000      	b.n	80046b8 <GPS_validate+0xb8>
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	080145b0 	.word	0x080145b0

080046c4 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b08a      	sub	sp, #40	; 0x28
 80046c8:	af08      	add	r7, sp, #32
 80046ca:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 80046cc:	2206      	movs	r2, #6
 80046ce:	496d      	ldr	r1, [pc, #436]	; (8004884 <GPS_parse+0x1c0>)
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f00b f974 	bl	800f9be <strncmp>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d139      	bne.n	8004750 <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 80046dc:	4b6a      	ldr	r3, [pc, #424]	; (8004888 <GPS_parse+0x1c4>)
 80046de:	9307      	str	r3, [sp, #28]
 80046e0:	4b6a      	ldr	r3, [pc, #424]	; (800488c <GPS_parse+0x1c8>)
 80046e2:	9306      	str	r3, [sp, #24]
 80046e4:	4b6a      	ldr	r3, [pc, #424]	; (8004890 <GPS_parse+0x1cc>)
 80046e6:	9305      	str	r3, [sp, #20]
 80046e8:	4b6a      	ldr	r3, [pc, #424]	; (8004894 <GPS_parse+0x1d0>)
 80046ea:	9304      	str	r3, [sp, #16]
 80046ec:	4b6a      	ldr	r3, [pc, #424]	; (8004898 <GPS_parse+0x1d4>)
 80046ee:	9303      	str	r3, [sp, #12]
 80046f0:	4b6a      	ldr	r3, [pc, #424]	; (800489c <GPS_parse+0x1d8>)
 80046f2:	9302      	str	r3, [sp, #8]
 80046f4:	4b6a      	ldr	r3, [pc, #424]	; (80048a0 <GPS_parse+0x1dc>)
 80046f6:	9301      	str	r3, [sp, #4]
 80046f8:	4b6a      	ldr	r3, [pc, #424]	; (80048a4 <GPS_parse+0x1e0>)
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	4b6a      	ldr	r3, [pc, #424]	; (80048a8 <GPS_parse+0x1e4>)
 80046fe:	4a6b      	ldr	r2, [pc, #428]	; (80048ac <GPS_parse+0x1e8>)
 8004700:	496b      	ldr	r1, [pc, #428]	; (80048b0 <GPS_parse+0x1ec>)
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f00b f8ea 	bl	800f8dc <siscanf>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	f340 80b5 	ble.w	800487a <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8004710:	4b68      	ldr	r3, [pc, #416]	; (80048b4 <GPS_parse+0x1f0>)
 8004712:	edd3 7a04 	vldr	s15, [r3, #16]
 8004716:	4b67      	ldr	r3, [pc, #412]	; (80048b4 <GPS_parse+0x1f0>)
 8004718:	7e1b      	ldrb	r3, [r3, #24]
 800471a:	4618      	mov	r0, r3
 800471c:	eeb0 0a67 	vmov.f32	s0, s15
 8004720:	f000 f8ec 	bl	80048fc <GPS_nmea_to_dec>
 8004724:	eef0 7a40 	vmov.f32	s15, s0
 8004728:	4b62      	ldr	r3, [pc, #392]	; (80048b4 <GPS_parse+0x1f0>)
 800472a:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 800472e:	4b61      	ldr	r3, [pc, #388]	; (80048b4 <GPS_parse+0x1f0>)
 8004730:	edd3 7a03 	vldr	s15, [r3, #12]
 8004734:	4b5f      	ldr	r3, [pc, #380]	; (80048b4 <GPS_parse+0x1f0>)
 8004736:	7e5b      	ldrb	r3, [r3, #25]
 8004738:	4618      	mov	r0, r3
 800473a:	eeb0 0a67 	vmov.f32	s0, s15
 800473e:	f000 f8dd 	bl	80048fc <GPS_nmea_to_dec>
 8004742:	eef0 7a40 	vmov.f32	s15, s0
 8004746:	4b5b      	ldr	r3, [pc, #364]	; (80048b4 <GPS_parse+0x1f0>)
 8004748:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 800474c:	2301      	movs	r3, #1
 800474e:	e095      	b.n	800487c <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 8004750:	2206      	movs	r2, #6
 8004752:	4959      	ldr	r1, [pc, #356]	; (80048b8 <GPS_parse+0x1f4>)
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f00b f932 	bl	800f9be <strncmp>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d134      	bne.n	80047ca <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 8004760:	4b56      	ldr	r3, [pc, #344]	; (80048bc <GPS_parse+0x1f8>)
 8004762:	9305      	str	r3, [sp, #20]
 8004764:	4b56      	ldr	r3, [pc, #344]	; (80048c0 <GPS_parse+0x1fc>)
 8004766:	9304      	str	r3, [sp, #16]
 8004768:	4b56      	ldr	r3, [pc, #344]	; (80048c4 <GPS_parse+0x200>)
 800476a:	9303      	str	r3, [sp, #12]
 800476c:	4b4b      	ldr	r3, [pc, #300]	; (800489c <GPS_parse+0x1d8>)
 800476e:	9302      	str	r3, [sp, #8]
 8004770:	4b4b      	ldr	r3, [pc, #300]	; (80048a0 <GPS_parse+0x1dc>)
 8004772:	9301      	str	r3, [sp, #4]
 8004774:	4b4b      	ldr	r3, [pc, #300]	; (80048a4 <GPS_parse+0x1e0>)
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	4b4b      	ldr	r3, [pc, #300]	; (80048a8 <GPS_parse+0x1e4>)
 800477a:	4a4c      	ldr	r2, [pc, #304]	; (80048ac <GPS_parse+0x1e8>)
 800477c:	4952      	ldr	r1, [pc, #328]	; (80048c8 <GPS_parse+0x204>)
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f00b f8ac 	bl	800f8dc <siscanf>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	dd77      	ble.n	800487a <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800478a:	4b4a      	ldr	r3, [pc, #296]	; (80048b4 <GPS_parse+0x1f0>)
 800478c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004790:	4b48      	ldr	r3, [pc, #288]	; (80048b4 <GPS_parse+0x1f0>)
 8004792:	7e1b      	ldrb	r3, [r3, #24]
 8004794:	4618      	mov	r0, r3
 8004796:	eeb0 0a67 	vmov.f32	s0, s15
 800479a:	f000 f8af 	bl	80048fc <GPS_nmea_to_dec>
 800479e:	eef0 7a40 	vmov.f32	s15, s0
 80047a2:	4b44      	ldr	r3, [pc, #272]	; (80048b4 <GPS_parse+0x1f0>)
 80047a4:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80047a8:	4b42      	ldr	r3, [pc, #264]	; (80048b4 <GPS_parse+0x1f0>)
 80047aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80047ae:	4b41      	ldr	r3, [pc, #260]	; (80048b4 <GPS_parse+0x1f0>)
 80047b0:	7e5b      	ldrb	r3, [r3, #25]
 80047b2:	4618      	mov	r0, r3
 80047b4:	eeb0 0a67 	vmov.f32	s0, s15
 80047b8:	f000 f8a0 	bl	80048fc <GPS_nmea_to_dec>
 80047bc:	eef0 7a40 	vmov.f32	s15, s0
 80047c0:	4b3c      	ldr	r3, [pc, #240]	; (80048b4 <GPS_parse+0x1f0>)
 80047c2:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e058      	b.n	800487c <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 80047ca:	2206      	movs	r2, #6
 80047cc:	493f      	ldr	r1, [pc, #252]	; (80048cc <GPS_parse+0x208>)
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f00b f8f5 	bl	800f9be <strncmp>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d130      	bne.n	800483c <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 80047da:	4b3d      	ldr	r3, [pc, #244]	; (80048d0 <GPS_parse+0x20c>)
 80047dc:	9303      	str	r3, [sp, #12]
 80047de:	4b33      	ldr	r3, [pc, #204]	; (80048ac <GPS_parse+0x1e8>)
 80047e0:	9302      	str	r3, [sp, #8]
 80047e2:	4b2e      	ldr	r3, [pc, #184]	; (800489c <GPS_parse+0x1d8>)
 80047e4:	9301      	str	r3, [sp, #4]
 80047e6:	4b2e      	ldr	r3, [pc, #184]	; (80048a0 <GPS_parse+0x1dc>)
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	4b2e      	ldr	r3, [pc, #184]	; (80048a4 <GPS_parse+0x1e0>)
 80047ec:	4a2e      	ldr	r2, [pc, #184]	; (80048a8 <GPS_parse+0x1e4>)
 80047ee:	4939      	ldr	r1, [pc, #228]	; (80048d4 <GPS_parse+0x210>)
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f00b f873 	bl	800f8dc <siscanf>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	dd3e      	ble.n	800487a <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80047fc:	4b2d      	ldr	r3, [pc, #180]	; (80048b4 <GPS_parse+0x1f0>)
 80047fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8004802:	4b2c      	ldr	r3, [pc, #176]	; (80048b4 <GPS_parse+0x1f0>)
 8004804:	7e1b      	ldrb	r3, [r3, #24]
 8004806:	4618      	mov	r0, r3
 8004808:	eeb0 0a67 	vmov.f32	s0, s15
 800480c:	f000 f876 	bl	80048fc <GPS_nmea_to_dec>
 8004810:	eef0 7a40 	vmov.f32	s15, s0
 8004814:	4b27      	ldr	r3, [pc, #156]	; (80048b4 <GPS_parse+0x1f0>)
 8004816:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 800481a:	4b26      	ldr	r3, [pc, #152]	; (80048b4 <GPS_parse+0x1f0>)
 800481c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004820:	4b24      	ldr	r3, [pc, #144]	; (80048b4 <GPS_parse+0x1f0>)
 8004822:	7e5b      	ldrb	r3, [r3, #25]
 8004824:	4618      	mov	r0, r3
 8004826:	eeb0 0a67 	vmov.f32	s0, s15
 800482a:	f000 f867 	bl	80048fc <GPS_nmea_to_dec>
 800482e:	eef0 7a40 	vmov.f32	s15, s0
 8004832:	4b20      	ldr	r3, [pc, #128]	; (80048b4 <GPS_parse+0x1f0>)
 8004834:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 8004838:	2301      	movs	r3, #1
 800483a:	e01f      	b.n	800487c <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 800483c:	2206      	movs	r2, #6
 800483e:	4926      	ldr	r1, [pc, #152]	; (80048d8 <GPS_parse+0x214>)
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f00b f8bc 	bl	800f9be <strncmp>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d116      	bne.n	800487a <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 800484c:	4b23      	ldr	r3, [pc, #140]	; (80048dc <GPS_parse+0x218>)
 800484e:	9305      	str	r3, [sp, #20]
 8004850:	4b23      	ldr	r3, [pc, #140]	; (80048e0 <GPS_parse+0x21c>)
 8004852:	9304      	str	r3, [sp, #16]
 8004854:	4b23      	ldr	r3, [pc, #140]	; (80048e4 <GPS_parse+0x220>)
 8004856:	9303      	str	r3, [sp, #12]
 8004858:	4b1a      	ldr	r3, [pc, #104]	; (80048c4 <GPS_parse+0x200>)
 800485a:	9302      	str	r3, [sp, #8]
 800485c:	4b22      	ldr	r3, [pc, #136]	; (80048e8 <GPS_parse+0x224>)
 800485e:	9301      	str	r3, [sp, #4]
 8004860:	4b22      	ldr	r3, [pc, #136]	; (80048ec <GPS_parse+0x228>)
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	4b22      	ldr	r3, [pc, #136]	; (80048f0 <GPS_parse+0x22c>)
 8004866:	4a23      	ldr	r2, [pc, #140]	; (80048f4 <GPS_parse+0x230>)
 8004868:	4923      	ldr	r1, [pc, #140]	; (80048f8 <GPS_parse+0x234>)
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f00b f836 	bl	800f8dc <siscanf>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	dd01      	ble.n	800487a <GPS_parse+0x1b6>
            return 0;
 8004876:	2300      	movs	r3, #0
 8004878:	e000      	b.n	800487c <GPS_parse+0x1b8>
    }
    return 0;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	080145b8 	.word	0x080145b8
 8004888:	20005d8c 	.word	0x20005d8c
 800488c:	20005d88 	.word	0x20005d88
 8004890:	20005d84 	.word	0x20005d84
 8004894:	20005d80 	.word	0x20005d80
 8004898:	20005d7c 	.word	0x20005d7c
 800489c:	20005d79 	.word	0x20005d79
 80048a0:	20005d6c 	.word	0x20005d6c
 80048a4:	20005d78 	.word	0x20005d78
 80048a8:	20005d70 	.word	0x20005d70
 80048ac:	20005d74 	.word	0x20005d74
 80048b0:	080145c0 	.word	0x080145c0
 80048b4:	20005d60 	.word	0x20005d60
 80048b8:	080145e8 	.word	0x080145e8
 80048bc:	20005d98 	.word	0x20005d98
 80048c0:	20005d94 	.word	0x20005d94
 80048c4:	20005d90 	.word	0x20005d90
 80048c8:	080145f0 	.word	0x080145f0
 80048cc:	08014610 	.word	0x08014610
 80048d0:	20005d9c 	.word	0x20005d9c
 80048d4:	08014618 	.word	0x08014618
 80048d8:	08014634 	.word	0x08014634
 80048dc:	20005db4 	.word	0x20005db4
 80048e0:	20005db0 	.word	0x20005db0
 80048e4:	20005dad 	.word	0x20005dad
 80048e8:	20005dac 	.word	0x20005dac
 80048ec:	20005da8 	.word	0x20005da8
 80048f0:	20005da4 	.word	0x20005da4
 80048f4:	20005da0 	.word	0x20005da0
 80048f8:	0801463c 	.word	0x0801463c

080048fc <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	ed87 0a01 	vstr	s0, [r7, #4]
 8004906:	4603      	mov	r3, r0
 8004908:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 800490a:	ed97 7a01 	vldr	s14, [r7, #4]
 800490e:	eddf 6a20 	vldr	s13, [pc, #128]	; 8004990 <GPS_nmea_to_dec+0x94>
 8004912:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004916:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800491a:	ee17 3a90 	vmov	r3, s15
 800491e:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	2264      	movs	r2, #100	; 0x64
 8004924:	fb02 f303 	mul.w	r3, r2, r3
 8004928:	ee07 3a90 	vmov	s15, r3
 800492c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004930:	ed97 7a01 	vldr	s14, [r7, #4]
 8004934:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004938:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 800493c:	ed97 7a03 	vldr	s14, [r7, #12]
 8004940:	eddf 6a14 	vldr	s13, [pc, #80]	; 8004994 <GPS_nmea_to_dec+0x98>
 8004944:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004948:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	ee07 3a90 	vmov	s15, r3
 8004952:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004956:	ed97 7a02 	vldr	s14, [r7, #8]
 800495a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800495e:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8004962:	78fb      	ldrb	r3, [r7, #3]
 8004964:	2b53      	cmp	r3, #83	; 0x53
 8004966:	d002      	beq.n	800496e <GPS_nmea_to_dec+0x72>
 8004968:	78fb      	ldrb	r3, [r7, #3]
 800496a:	2b57      	cmp	r3, #87	; 0x57
 800496c:	d105      	bne.n	800497a <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 800496e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004972:	eef1 7a67 	vneg.f32	s15, s15
 8004976:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	ee07 3a90 	vmov	s15, r3
}
 8004980:	eeb0 0a67 	vmov.f32	s0, s15
 8004984:	371c      	adds	r7, #28
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	42c80000 	.word	0x42c80000
 8004994:	42700000 	.word	0x42700000

08004998 <GPS_Init>:
	}
}


void GPS_Init(UART_HandleTypeDef* data_uart, void (*gps_print)(char*),
		void (*gps_tone_freq)(uint32_t duration, uint32_t repeats, uint32_t freq)){
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
	GPS.print = gps_print;
 80049a4:	4a0a      	ldr	r2, [pc, #40]	; (80049d0 <GPS_Init+0x38>)
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	65d3      	str	r3, [r2, #92]	; 0x5c
	GPS.print((char*) "\r\nGPS Init...");
 80049aa:	4b09      	ldr	r3, [pc, #36]	; (80049d0 <GPS_Init+0x38>)
 80049ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ae:	4809      	ldr	r0, [pc, #36]	; (80049d4 <GPS_Init+0x3c>)
 80049b0:	4798      	blx	r3
	GPS.uart = data_uart;
 80049b2:	4a07      	ldr	r2, [pc, #28]	; (80049d0 <GPS_Init+0x38>)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6593      	str	r3, [r2, #88]	; 0x58
	GPS.tone_freq = gps_tone_freq;
 80049b8:	4a05      	ldr	r2, [pc, #20]	; (80049d0 <GPS_Init+0x38>)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6613      	str	r3, [r2, #96]	; 0x60
	GPS.print((char*) "OK\r\n");
 80049be:	4b04      	ldr	r3, [pc, #16]	; (80049d0 <GPS_Init+0x38>)
 80049c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c2:	4805      	ldr	r0, [pc, #20]	; (80049d8 <GPS_Init+0x40>)
 80049c4:	4798      	blx	r3
}
 80049c6:	bf00      	nop
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	20005d60 	.word	0x20005d60
 80049d4:	0801465c 	.word	0x0801465c
 80049d8:	0801466c 	.word	0x0801466c

080049dc <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80049dc:	b590      	push	{r4, r7, lr}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	607a      	str	r2, [r7, #4]
 80049e6:	461a      	mov	r2, r3
 80049e8:	460b      	mov	r3, r1
 80049ea:	72fb      	strb	r3, [r7, #11]
 80049ec:	4613      	mov	r3, r2
 80049ee:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	685c      	ldr	r4, [r3, #4]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6898      	ldr	r0, [r3, #8]
 80049f8:	893b      	ldrh	r3, [r7, #8]
 80049fa:	7af9      	ldrb	r1, [r7, #11]
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	47a0      	blx	r4
 8004a00:	6178      	str	r0, [r7, #20]

  return ret;
 8004a02:	697b      	ldr	r3, [r7, #20]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	371c      	adds	r7, #28
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd90      	pop	{r4, r7, pc}

08004a0c <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004a0c:	b590      	push	{r4, r7, lr}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	607a      	str	r2, [r7, #4]
 8004a16:	461a      	mov	r2, r3
 8004a18:	460b      	mov	r3, r1
 8004a1a:	72fb      	strb	r3, [r7, #11]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681c      	ldr	r4, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6898      	ldr	r0, [r3, #8]
 8004a28:	893b      	ldrh	r3, [r7, #8]
 8004a2a:	7af9      	ldrb	r1, [r7, #11]
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	47a0      	blx	r4
 8004a30:	6178      	str	r0, [r7, #20]

  return ret;
 8004a32:	697b      	ldr	r3, [r7, #20]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	371c      	adds	r7, #28
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd90      	pop	{r4, r7, pc}

08004a3c <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	ee07 3a90 	vmov	s15, r3
 8004a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a4e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004a68 <lps22hh_from_lsb_to_hpa+0x2c>
 8004a52:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004a56:	eef0 7a66 	vmov.f32	s15, s13
}
 8004a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	49800000 	.word	0x49800000

08004a6c <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	4603      	mov	r3, r0
 8004a74:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8004a76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a7a:	ee07 3a90 	vmov	s15, r3
 8004a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a82:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004a9c <lps22hh_from_lsb_to_celsius+0x30>
 8004a86:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004a8a:	eef0 7a66 	vmov.f32	s15, s13
}
 8004a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	42c80000 	.word	0x42c80000

08004aa0 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8004aac:	f107 0208 	add.w	r2, r7, #8
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	2110      	movs	r1, #16
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7ff ff91 	bl	80049dc <lps22hh_read_reg>
 8004aba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10f      	bne.n	8004ae2 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004ac2:	78fb      	ldrb	r3, [r7, #3]
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	7a3b      	ldrb	r3, [r7, #8]
 8004acc:	f362 0341 	bfi	r3, r2, #1, #1
 8004ad0:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8004ad2:	f107 0208 	add.w	r2, r7, #8
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	2110      	movs	r1, #16
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7ff ff96 	bl	8004a0c <lps22hh_write_reg>
 8004ae0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	460b      	mov	r3, r1
 8004af6:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004af8:	f107 0210 	add.w	r2, r7, #16
 8004afc:	2301      	movs	r3, #1
 8004afe:	2110      	movs	r1, #16
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7ff ff6b 	bl	80049dc <lps22hh_read_reg>
 8004b06:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d107      	bne.n	8004b1e <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004b0e:	f107 020c 	add.w	r2, r7, #12
 8004b12:	2301      	movs	r3, #1
 8004b14:	2111      	movs	r1, #17
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7ff ff60 	bl	80049dc <lps22hh_read_reg>
 8004b1c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10f      	bne.n	8004b44 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8004b24:	78fb      	ldrb	r3, [r7, #3]
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	7c3b      	ldrb	r3, [r7, #16]
 8004b2e:	f362 1306 	bfi	r3, r2, #4, #3
 8004b32:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004b34:	f107 0210 	add.w	r2, r7, #16
 8004b38:	2301      	movs	r3, #1
 8004b3a:	2110      	movs	r1, #16
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7ff ff65 	bl	8004a0c <lps22hh_write_reg>
 8004b42:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d119      	bne.n	8004b7e <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8004b4a:	78fb      	ldrb	r3, [r7, #3]
 8004b4c:	091b      	lsrs	r3, r3, #4
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	7b3b      	ldrb	r3, [r7, #12]
 8004b56:	f362 0341 	bfi	r3, r2, #1, #1
 8004b5a:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8004b5c:	78fb      	ldrb	r3, [r7, #3]
 8004b5e:	08db      	lsrs	r3, r3, #3
 8004b60:	f003 0301 	and.w	r3, r3, #1
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	7b3b      	ldrb	r3, [r7, #12]
 8004b68:	f362 0300 	bfi	r3, r2, #0, #1
 8004b6c:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004b6e:	f107 020c 	add.w	r2, r7, #12
 8004b72:	2301      	movs	r3, #1
 8004b74:	2111      	movs	r1, #17
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7ff ff48 	bl	8004a0c <lps22hh_write_reg>
 8004b7c:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004b7e:	697b      	ldr	r3, [r7, #20]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3718      	adds	r7, #24
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <lps22hh_press_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_press_flag_data_ready_get(stmdev_ctx_t *ctx,
                                          uint8_t *val)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8004b92:	f107 0208 	add.w	r2, r7, #8
 8004b96:	2301      	movs	r3, #1
 8004b98:	2127      	movs	r1, #39	; 0x27
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7ff ff1e 	bl	80049dc <lps22hh_read_reg>
 8004ba0:	60f8      	str	r0, [r7, #12]
  *val = reg.p_da;
 8004ba2:	7a3b      	ldrb	r3, [r7, #8]
 8004ba4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	461a      	mov	r2, r3
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	701a      	strb	r2, [r3, #0]

  return ret;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b084      	sub	sp, #16
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
 8004bc2:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8004bc4:	f107 0208 	add.w	r2, r7, #8
 8004bc8:	2301      	movs	r3, #1
 8004bca:	2127      	movs	r1, #39	; 0x27
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7ff ff05 	bl	80049dc <lps22hh_read_reg>
 8004bd2:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 8004bd4:	7a3b      	ldrb	r3, [r7, #8]
 8004bd6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	461a      	mov	r2, r3
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	701a      	strb	r2, [r3, #0]

  return ret;
 8004be2:	68fb      	ldr	r3, [r7, #12]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8004bf6:	f107 0208 	add.w	r2, r7, #8
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	2128      	movs	r1, #40	; 0x28
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7ff feec 	bl	80049dc <lps22hh_read_reg>
 8004c04:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8004c06:	7abb      	ldrb	r3, [r7, #10]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	021b      	lsls	r3, r3, #8
 8004c14:	7a7a      	ldrb	r2, [r7, #9]
 8004c16:	441a      	add	r2, r3
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	021b      	lsls	r3, r3, #8
 8004c22:	7a3a      	ldrb	r2, [r7, #8]
 8004c24:	441a      	add	r2, r3
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	021a      	lsls	r2, r3, #8
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	601a      	str	r2, [r3, #0]

  return ret;
 8004c34:	68fb      	ldr	r3, [r7, #12]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b084      	sub	sp, #16
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
 8004c46:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8004c48:	f107 0208 	add.w	r2, r7, #8
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	212b      	movs	r1, #43	; 0x2b
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7ff fec3 	bl	80049dc <lps22hh_read_reg>
 8004c56:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8004c58:	7a7b      	ldrb	r3, [r7, #9]
 8004c5a:	b21a      	sxth	r2, r3
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	021b      	lsls	r3, r3, #8
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	7a3b      	ldrb	r3, [r7, #8]
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	4413      	add	r3, r2
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	b21a      	sxth	r2, r3
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	801a      	strh	r2, [r3, #0]

  return ret;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8004c8e:	2301      	movs	r3, #1
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	210f      	movs	r1, #15
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7ff fea1 	bl	80049dc <lps22hh_read_reg>
 8004c9a:	60f8      	str	r0, [r7, #12]

  return ret;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b084      	sub	sp, #16
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
 8004cae:	460b      	mov	r3, r1
 8004cb0:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8004cb2:	f107 0208 	add.w	r2, r7, #8
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	2111      	movs	r1, #17
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7ff fe8e 	bl	80049dc <lps22hh_read_reg>
 8004cc0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10f      	bne.n	8004ce8 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	7a3b      	ldrb	r3, [r7, #8]
 8004cd2:	f362 0382 	bfi	r3, r2, #2, #1
 8004cd6:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8004cd8:	f107 0208 	add.w	r2, r7, #8
 8004cdc:	2301      	movs	r3, #1
 8004cde:	2111      	movs	r1, #17
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7ff fe93 	bl	8004a0c <lps22hh_write_reg>
 8004ce6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b084      	sub	sp, #16
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
 8004cfa:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8004cfc:	f107 0208 	add.w	r2, r7, #8
 8004d00:	2301      	movs	r3, #1
 8004d02:	2111      	movs	r1, #17
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7ff fe69 	bl	80049dc <lps22hh_read_reg>
 8004d0a:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8004d0c:	7a3b      	ldrb	r3, [r7, #8]
 8004d0e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	461a      	mov	r2, r3
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	701a      	strb	r2, [r3, #0]

  return ret;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004d24:	b590      	push	{r4, r7, lr}
 8004d26:	b087      	sub	sp, #28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	607a      	str	r2, [r7, #4]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	460b      	mov	r3, r1
 8004d32:	72fb      	strb	r3, [r7, #11]
 8004d34:	4613      	mov	r3, r2
 8004d36:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	685c      	ldr	r4, [r3, #4]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6898      	ldr	r0, [r3, #8]
 8004d40:	893b      	ldrh	r3, [r7, #8]
 8004d42:	7af9      	ldrb	r1, [r7, #11]
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	47a0      	blx	r4
 8004d48:	6178      	str	r0, [r7, #20]

  return ret;
 8004d4a:	697b      	ldr	r3, [r7, #20]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	371c      	adds	r7, #28
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd90      	pop	{r4, r7, pc}

08004d54 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004d54:	b590      	push	{r4, r7, lr}
 8004d56:	b087      	sub	sp, #28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	607a      	str	r2, [r7, #4]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	460b      	mov	r3, r1
 8004d62:	72fb      	strb	r3, [r7, #11]
 8004d64:	4613      	mov	r3, r2
 8004d66:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681c      	ldr	r4, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6898      	ldr	r0, [r3, #8]
 8004d70:	893b      	ldrh	r3, [r7, #8]
 8004d72:	7af9      	ldrb	r1, [r7, #11]
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	47a0      	blx	r4
 8004d78:	6178      	str	r0, [r7, #20]

  return ret;
 8004d7a:	697b      	ldr	r3, [r7, #20]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	371c      	adds	r7, #28
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd90      	pop	{r4, r7, pc}

08004d84 <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8004d8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d92:	ee07 3a90 	vmov	s15, r3
 8004d96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d9a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004db0 <lsm6dsr_from_fs2g_to_mg+0x2c>
 8004d9e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004da2:	eeb0 0a67 	vmov.f32	s0, s15
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	3d79db23 	.word	0x3d79db23

08004db4 <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	4603      	mov	r3, r0
 8004dbc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8004dbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dc2:	ee07 3a90 	vmov	s15, r3
 8004dc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dca:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004de0 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 8004dce:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004dd2:	eeb0 0a67 	vmov.f32	s0, s15
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	428c0000 	.word	0x428c0000

08004de4 <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	4603      	mov	r3, r0
 8004dec:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8004dee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004df2:	ee07 3a90 	vmov	s15, r3
 8004df6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dfa:	eddf 6a07 	vldr	s13, [pc, #28]	; 8004e18 <lsm6dsr_from_lsb_to_celsius+0x34>
 8004dfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e02:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004e06:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8004e0a:	eeb0 0a67 	vmov.f32	s0, s15
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr
 8004e18:	43800000 	.word	0x43800000

08004e1c <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	460b      	mov	r3, r1
 8004e26:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8004e28:	f107 0208 	add.w	r2, r7, #8
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	2110      	movs	r1, #16
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7ff ff77 	bl	8004d24 <lsm6dsr_read_reg>
 8004e36:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10f      	bne.n	8004e5e <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8004e3e:	78fb      	ldrb	r3, [r7, #3]
 8004e40:	f003 0303 	and.w	r3, r3, #3
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	7a3b      	ldrb	r3, [r7, #8]
 8004e48:	f362 0383 	bfi	r3, r2, #2, #2
 8004e4c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8004e4e:	f107 0208 	add.w	r2, r7, #8
 8004e52:	2301      	movs	r3, #1
 8004e54:	2110      	movs	r1, #16
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7ff ff7c 	bl	8004d54 <lsm6dsr_write_reg>
 8004e5c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	460b      	mov	r3, r1
 8004e72:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8004e74:	78fb      	ldrb	r3, [r7, #3]
 8004e76:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8004e78:	f107 030c 	add.w	r3, r7, #12
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 fc54 	bl	800572c <lsm6dsr_fsm_enable_get>
 8004e84:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f040 80c4 	bne.w	8005016 <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004e8e:	7b3b      	ldrb	r3, [r7, #12]
 8004e90:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004e94:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004e96:	7b3b      	ldrb	r3, [r7, #12]
 8004e98:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004e9c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004ea2:	7b3b      	ldrb	r3, [r7, #12]
 8004ea4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004ea8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004eae:	7b3b      	ldrb	r3, [r7, #12]
 8004eb0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004eb4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004eba:	7b3b      	ldrb	r3, [r7, #12]
 8004ebc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004ec0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004ec6:	7b3b      	ldrb	r3, [r7, #12]
 8004ec8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004ecc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004ed2:	7b3b      	ldrb	r3, [r7, #12]
 8004ed4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004ed8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004eda:	4313      	orrs	r3, r2
 8004edc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004ede:	7b3b      	ldrb	r3, [r7, #12]
 8004ee0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004ee4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004eea:	7b7b      	ldrb	r3, [r7, #13]
 8004eec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004ef0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004ef6:	7b7b      	ldrb	r3, [r7, #13]
 8004ef8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004efc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004efe:	4313      	orrs	r3, r2
 8004f00:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004f02:	7b7b      	ldrb	r3, [r7, #13]
 8004f04:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004f08:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004f0e:	7b7b      	ldrb	r3, [r7, #13]
 8004f10:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004f14:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004f16:	4313      	orrs	r3, r2
 8004f18:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004f1a:	7b7b      	ldrb	r3, [r7, #13]
 8004f1c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004f20:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004f22:	4313      	orrs	r3, r2
 8004f24:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004f26:	7b7b      	ldrb	r3, [r7, #13]
 8004f28:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004f2c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004f32:	7b7b      	ldrb	r3, [r7, #13]
 8004f34:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004f38:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004f3e:	7b7b      	ldrb	r3, [r7, #13]
 8004f40:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004f44:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004f46:	4313      	orrs	r3, r2
 8004f48:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d163      	bne.n	8005016 <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8004f4e:	f107 030b 	add.w	r3, r7, #11
 8004f52:	4619      	mov	r1, r3
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 fc15 	bl	8005784 <lsm6dsr_fsm_data_rate_get>
 8004f5a:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d159      	bne.n	8005016 <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8004f62:	7afb      	ldrb	r3, [r7, #11]
 8004f64:	2b03      	cmp	r3, #3
 8004f66:	d853      	bhi.n	8005010 <lsm6dsr_xl_data_rate_set+0x1a8>
 8004f68:	a201      	add	r2, pc, #4	; (adr r2, 8004f70 <lsm6dsr_xl_data_rate_set+0x108>)
 8004f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6e:	bf00      	nop
 8004f70:	08004f81 	.word	0x08004f81
 8004f74:	08004f93 	.word	0x08004f93
 8004f78:	08004fb1 	.word	0x08004fb1
 8004f7c:	08004fdb 	.word	0x08004fdb
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8004f80:	78fb      	ldrb	r3, [r7, #3]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d102      	bne.n	8004f8c <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 8004f86:	2301      	movs	r3, #1
 8004f88:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004f8a:	e045      	b.n	8005018 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004f8c:	78fb      	ldrb	r3, [r7, #3]
 8004f8e:	75fb      	strb	r3, [r7, #23]
            break;
 8004f90:	e042      	b.n	8005018 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8004f92:	78fb      	ldrb	r3, [r7, #3]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d102      	bne.n	8004f9e <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8004f98:	2302      	movs	r3, #2
 8004f9a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004f9c:	e03c      	b.n	8005018 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8004f9e:	78fb      	ldrb	r3, [r7, #3]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d102      	bne.n	8004faa <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	75fb      	strb	r3, [r7, #23]
            break;
 8004fa8:	e036      	b.n	8005018 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004faa:	78fb      	ldrb	r3, [r7, #3]
 8004fac:	75fb      	strb	r3, [r7, #23]
            break;
 8004fae:	e033      	b.n	8005018 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8004fb0:	78fb      	ldrb	r3, [r7, #3]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d102      	bne.n	8004fbc <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004fba:	e02d      	b.n	8005018 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8004fbc:	78fb      	ldrb	r3, [r7, #3]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d102      	bne.n	8004fc8 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	75fb      	strb	r3, [r7, #23]
            break;
 8004fc6:	e027      	b.n	8005018 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8004fc8:	78fb      	ldrb	r3, [r7, #3]
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d102      	bne.n	8004fd4 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	75fb      	strb	r3, [r7, #23]
            break;
 8004fd2:	e021      	b.n	8005018 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004fd4:	78fb      	ldrb	r3, [r7, #3]
 8004fd6:	75fb      	strb	r3, [r7, #23]
            break;
 8004fd8:	e01e      	b.n	8005018 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8004fda:	78fb      	ldrb	r3, [r7, #3]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d102      	bne.n	8004fe6 <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004fe4:	e018      	b.n	8005018 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8004fe6:	78fb      	ldrb	r3, [r7, #3]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d102      	bne.n	8004ff2 <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8004fec:	2304      	movs	r3, #4
 8004fee:	75fb      	strb	r3, [r7, #23]
            break;
 8004ff0:	e012      	b.n	8005018 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8004ff2:	78fb      	ldrb	r3, [r7, #3]
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d102      	bne.n	8004ffe <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8004ff8:	2304      	movs	r3, #4
 8004ffa:	75fb      	strb	r3, [r7, #23]
            break;
 8004ffc:	e00c      	b.n	8005018 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 8004ffe:	78fb      	ldrb	r3, [r7, #3]
 8005000:	2b03      	cmp	r3, #3
 8005002:	d102      	bne.n	800500a <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8005004:	2304      	movs	r3, #4
 8005006:	75fb      	strb	r3, [r7, #23]
            break;
 8005008:	e006      	b.n	8005018 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800500a:	78fb      	ldrb	r3, [r7, #3]
 800500c:	75fb      	strb	r3, [r7, #23]
            break;
 800500e:	e003      	b.n	8005018 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8005010:	78fb      	ldrb	r3, [r7, #3]
 8005012:	75fb      	strb	r3, [r7, #23]
            break;
 8005014:	e000      	b.n	8005018 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 8005016:	bf00      	nop
    }
  }

  if (ret == 0)
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d107      	bne.n	800502e <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800501e:	f107 0208 	add.w	r2, r7, #8
 8005022:	2301      	movs	r3, #1
 8005024:	2110      	movs	r1, #16
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7ff fe7c 	bl	8004d24 <lsm6dsr_read_reg>
 800502c:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10f      	bne.n	8005054 <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8005034:	7dfb      	ldrb	r3, [r7, #23]
 8005036:	f003 030f 	and.w	r3, r3, #15
 800503a:	b2da      	uxtb	r2, r3
 800503c:	7a3b      	ldrb	r3, [r7, #8]
 800503e:	f362 1307 	bfi	r3, r2, #4, #4
 8005042:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8005044:	f107 0208 	add.w	r2, r7, #8
 8005048:	2301      	movs	r3, #1
 800504a:	2110      	movs	r1, #16
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f7ff fe81 	bl	8004d54 <lsm6dsr_write_reg>
 8005052:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8005054:	693b      	ldr	r3, [r7, #16]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop

08005060 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	460b      	mov	r3, r1
 800506a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800506c:	f107 0208 	add.w	r2, r7, #8
 8005070:	2301      	movs	r3, #1
 8005072:	2111      	movs	r1, #17
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7ff fe55 	bl	8004d24 <lsm6dsr_read_reg>
 800507a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10f      	bne.n	80050a2 <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8005082:	78fb      	ldrb	r3, [r7, #3]
 8005084:	f003 030f 	and.w	r3, r3, #15
 8005088:	b2da      	uxtb	r2, r3
 800508a:	7a3b      	ldrb	r3, [r7, #8]
 800508c:	f362 0303 	bfi	r3, r2, #0, #4
 8005090:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005092:	f107 0208 	add.w	r2, r7, #8
 8005096:	2301      	movs	r3, #1
 8005098:	2111      	movs	r1, #17
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7ff fe5a 	bl	8004d54 <lsm6dsr_write_reg>
 80050a0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80050a2:	68fb      	ldr	r3, [r7, #12]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	460b      	mov	r3, r1
 80050b6:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 80050b8:	78fb      	ldrb	r3, [r7, #3]
 80050ba:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 80050bc:	f107 030c 	add.w	r3, r7, #12
 80050c0:	4619      	mov	r1, r3
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 fb32 	bl	800572c <lsm6dsr_fsm_enable_get>
 80050c8:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f040 80c4 	bne.w	800525a <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80050d2:	7b3b      	ldrb	r3, [r7, #12]
 80050d4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80050d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80050da:	7b3b      	ldrb	r3, [r7, #12]
 80050dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80050e0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80050e2:	4313      	orrs	r3, r2
 80050e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80050e6:	7b3b      	ldrb	r3, [r7, #12]
 80050e8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80050ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80050ee:	4313      	orrs	r3, r2
 80050f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80050f2:	7b3b      	ldrb	r3, [r7, #12]
 80050f4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80050f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80050fa:	4313      	orrs	r3, r2
 80050fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80050fe:	7b3b      	ldrb	r3, [r7, #12]
 8005100:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005104:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005106:	4313      	orrs	r3, r2
 8005108:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800510a:	7b3b      	ldrb	r3, [r7, #12]
 800510c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005110:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005112:	4313      	orrs	r3, r2
 8005114:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005116:	7b3b      	ldrb	r3, [r7, #12]
 8005118:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800511c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800511e:	4313      	orrs	r3, r2
 8005120:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005122:	7b3b      	ldrb	r3, [r7, #12]
 8005124:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005128:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800512a:	4313      	orrs	r3, r2
 800512c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800512e:	7b7b      	ldrb	r3, [r7, #13]
 8005130:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005134:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005136:	4313      	orrs	r3, r2
 8005138:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800513a:	7b7b      	ldrb	r3, [r7, #13]
 800513c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005140:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005142:	4313      	orrs	r3, r2
 8005144:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005146:	7b7b      	ldrb	r3, [r7, #13]
 8005148:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800514c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800514e:	4313      	orrs	r3, r2
 8005150:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005152:	7b7b      	ldrb	r3, [r7, #13]
 8005154:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005158:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800515a:	4313      	orrs	r3, r2
 800515c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800515e:	7b7b      	ldrb	r3, [r7, #13]
 8005160:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005164:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005166:	4313      	orrs	r3, r2
 8005168:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800516a:	7b7b      	ldrb	r3, [r7, #13]
 800516c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005170:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005172:	4313      	orrs	r3, r2
 8005174:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005176:	7b7b      	ldrb	r3, [r7, #13]
 8005178:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800517c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800517e:	4313      	orrs	r3, r2
 8005180:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005182:	7b7b      	ldrb	r3, [r7, #13]
 8005184:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005188:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800518a:	4313      	orrs	r3, r2
 800518c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800518e:	2b01      	cmp	r3, #1
 8005190:	d163      	bne.n	800525a <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8005192:	f107 030b 	add.w	r3, r7, #11
 8005196:	4619      	mov	r1, r3
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 faf3 	bl	8005784 <lsm6dsr_fsm_data_rate_get>
 800519e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d159      	bne.n	800525a <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80051a6:	7afb      	ldrb	r3, [r7, #11]
 80051a8:	2b03      	cmp	r3, #3
 80051aa:	d853      	bhi.n	8005254 <lsm6dsr_gy_data_rate_set+0x1a8>
 80051ac:	a201      	add	r2, pc, #4	; (adr r2, 80051b4 <lsm6dsr_gy_data_rate_set+0x108>)
 80051ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b2:	bf00      	nop
 80051b4:	080051c5 	.word	0x080051c5
 80051b8:	080051d7 	.word	0x080051d7
 80051bc:	080051f5 	.word	0x080051f5
 80051c0:	0800521f 	.word	0x0800521f
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 80051c4:	78fb      	ldrb	r3, [r7, #3]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d102      	bne.n	80051d0 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 80051ca:	2301      	movs	r3, #1
 80051cc:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80051ce:	e045      	b.n	800525c <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80051d0:	78fb      	ldrb	r3, [r7, #3]
 80051d2:	75fb      	strb	r3, [r7, #23]
            break;
 80051d4:	e042      	b.n	800525c <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80051d6:	78fb      	ldrb	r3, [r7, #3]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d102      	bne.n	80051e2 <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80051dc:	2302      	movs	r3, #2
 80051de:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80051e0:	e03c      	b.n	800525c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80051e2:	78fb      	ldrb	r3, [r7, #3]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d102      	bne.n	80051ee <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80051e8:	2302      	movs	r3, #2
 80051ea:	75fb      	strb	r3, [r7, #23]
            break;
 80051ec:	e036      	b.n	800525c <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80051ee:	78fb      	ldrb	r3, [r7, #3]
 80051f0:	75fb      	strb	r3, [r7, #23]
            break;
 80051f2:	e033      	b.n	800525c <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80051f4:	78fb      	ldrb	r3, [r7, #3]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d102      	bne.n	8005200 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80051fa:	2303      	movs	r3, #3
 80051fc:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80051fe:	e02d      	b.n	800525c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8005200:	78fb      	ldrb	r3, [r7, #3]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d102      	bne.n	800520c <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8005206:	2303      	movs	r3, #3
 8005208:	75fb      	strb	r3, [r7, #23]
            break;
 800520a:	e027      	b.n	800525c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 800520c:	78fb      	ldrb	r3, [r7, #3]
 800520e:	2b02      	cmp	r3, #2
 8005210:	d102      	bne.n	8005218 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8005212:	2303      	movs	r3, #3
 8005214:	75fb      	strb	r3, [r7, #23]
            break;
 8005216:	e021      	b.n	800525c <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005218:	78fb      	ldrb	r3, [r7, #3]
 800521a:	75fb      	strb	r3, [r7, #23]
            break;
 800521c:	e01e      	b.n	800525c <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800521e:	78fb      	ldrb	r3, [r7, #3]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d102      	bne.n	800522a <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8005224:	2304      	movs	r3, #4
 8005226:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005228:	e018      	b.n	800525c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 800522a:	78fb      	ldrb	r3, [r7, #3]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d102      	bne.n	8005236 <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8005230:	2304      	movs	r3, #4
 8005232:	75fb      	strb	r3, [r7, #23]
            break;
 8005234:	e012      	b.n	800525c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8005236:	78fb      	ldrb	r3, [r7, #3]
 8005238:	2b02      	cmp	r3, #2
 800523a:	d102      	bne.n	8005242 <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 800523c:	2304      	movs	r3, #4
 800523e:	75fb      	strb	r3, [r7, #23]
            break;
 8005240:	e00c      	b.n	800525c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 8005242:	78fb      	ldrb	r3, [r7, #3]
 8005244:	2b03      	cmp	r3, #3
 8005246:	d102      	bne.n	800524e <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8005248:	2304      	movs	r3, #4
 800524a:	75fb      	strb	r3, [r7, #23]
            break;
 800524c:	e006      	b.n	800525c <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800524e:	78fb      	ldrb	r3, [r7, #3]
 8005250:	75fb      	strb	r3, [r7, #23]
            break;
 8005252:	e003      	b.n	800525c <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8005254:	78fb      	ldrb	r3, [r7, #3]
 8005256:	75fb      	strb	r3, [r7, #23]
            break;
 8005258:	e000      	b.n	800525c <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 800525a:	bf00      	nop
    }
  }

  if (ret == 0)
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d107      	bne.n	8005272 <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005262:	f107 0208 	add.w	r2, r7, #8
 8005266:	2301      	movs	r3, #1
 8005268:	2111      	movs	r1, #17
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7ff fd5a 	bl	8004d24 <lsm6dsr_read_reg>
 8005270:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10f      	bne.n	8005298 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8005278:	7dfb      	ldrb	r3, [r7, #23]
 800527a:	f003 030f 	and.w	r3, r3, #15
 800527e:	b2da      	uxtb	r2, r3
 8005280:	7a3b      	ldrb	r3, [r7, #8]
 8005282:	f362 1307 	bfi	r3, r2, #4, #4
 8005286:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005288:	f107 0208 	add.w	r2, r7, #8
 800528c:	2301      	movs	r3, #1
 800528e:	2111      	movs	r1, #17
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f7ff fd5f 	bl	8004d54 <lsm6dsr_write_reg>
 8005296:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8005298:	693b      	ldr	r3, [r7, #16]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3718      	adds	r7, #24
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop

080052a4 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	460b      	mov	r3, r1
 80052ae:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80052b0:	f107 0208 	add.w	r2, r7, #8
 80052b4:	2301      	movs	r3, #1
 80052b6:	2112      	movs	r1, #18
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7ff fd33 	bl	8004d24 <lsm6dsr_read_reg>
 80052be:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10f      	bne.n	80052e6 <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 80052c6:	78fb      	ldrb	r3, [r7, #3]
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	b2da      	uxtb	r2, r3
 80052ce:	7a3b      	ldrb	r3, [r7, #8]
 80052d0:	f362 1386 	bfi	r3, r2, #6, #1
 80052d4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80052d6:	f107 0208 	add.w	r2, r7, #8
 80052da:	2301      	movs	r3, #1
 80052dc:	2112      	movs	r1, #18
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7ff fd38 	bl	8004d54 <lsm6dsr_write_reg>
 80052e4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80052e6:	68fb      	ldr	r3, [r7, #12]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 80052fa:	f107 0208 	add.w	r2, r7, #8
 80052fe:	2301      	movs	r3, #1
 8005300:	211e      	movs	r1, #30
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7ff fd0e 	bl	8004d24 <lsm6dsr_read_reg>
 8005308:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 800530a:	7a3b      	ldrb	r3, [r7, #8]
 800530c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005310:	b2db      	uxtb	r3, r3
 8005312:	461a      	mov	r2, r3
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	701a      	strb	r2, [r3, #0]

  return ret;
 8005318:	68fb      	ldr	r3, [r7, #12]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b084      	sub	sp, #16
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 800532c:	f107 0208 	add.w	r2, r7, #8
 8005330:	2301      	movs	r3, #1
 8005332:	211e      	movs	r1, #30
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7ff fcf5 	bl	8004d24 <lsm6dsr_read_reg>
 800533a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 800533c:	7a3b      	ldrb	r3, [r7, #8]
 800533e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005342:	b2db      	uxtb	r3, r3
 8005344:	461a      	mov	r2, r3
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	701a      	strb	r2, [r3, #0]

  return ret;
 800534a:	68fb      	ldr	r3, [r7, #12]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 800535e:	f107 0208 	add.w	r2, r7, #8
 8005362:	2301      	movs	r3, #1
 8005364:	211e      	movs	r1, #30
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7ff fcdc 	bl	8004d24 <lsm6dsr_read_reg>
 800536c:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 800536e:	7a3b      	ldrb	r3, [r7, #8]
 8005370:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005374:	b2db      	uxtb	r3, r3
 8005376:	461a      	mov	r2, r3
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	701a      	strb	r2, [r3, #0]

  return ret;
 800537c:	68fb      	ldr	r3, [r7, #12]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b084      	sub	sp, #16
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 8005390:	f107 0208 	add.w	r2, r7, #8
 8005394:	2302      	movs	r3, #2
 8005396:	2120      	movs	r1, #32
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f7ff fcc3 	bl	8004d24 <lsm6dsr_read_reg>
 800539e:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 80053a0:	7a7b      	ldrb	r3, [r7, #9]
 80053a2:	b21a      	sxth	r2, r3
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	021b      	lsls	r3, r3, #8
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	7a3b      	ldrb	r3, [r7, #8]
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	4413      	add	r3, r2
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	b21a      	sxth	r2, r3
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	801a      	strh	r2, [r3, #0]

  return ret;
 80053c2:	68fb      	ldr	r3, [r7, #12]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 80053d6:	f107 020c 	add.w	r2, r7, #12
 80053da:	2306      	movs	r3, #6
 80053dc:	2122      	movs	r1, #34	; 0x22
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7ff fca0 	bl	8004d24 <lsm6dsr_read_reg>
 80053e4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80053e6:	7b7b      	ldrb	r3, [r7, #13]
 80053e8:	b21a      	sxth	r2, r3
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	021b      	lsls	r3, r3, #8
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	7b3b      	ldrb	r3, [r7, #12]
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	4413      	add	r3, r2
 8005400:	b29b      	uxth	r3, r3
 8005402:	b21a      	sxth	r2, r3
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005408:	7bfa      	ldrb	r2, [r7, #15]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	3302      	adds	r3, #2
 800540e:	b212      	sxth	r2, r2
 8005410:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	3302      	adds	r3, #2
 8005416:	f9b3 3000 	ldrsh.w	r3, [r3]
 800541a:	b29b      	uxth	r3, r3
 800541c:	021b      	lsls	r3, r3, #8
 800541e:	b29a      	uxth	r2, r3
 8005420:	7bbb      	ldrb	r3, [r7, #14]
 8005422:	b29b      	uxth	r3, r3
 8005424:	4413      	add	r3, r2
 8005426:	b29a      	uxth	r2, r3
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	3302      	adds	r3, #2
 800542c:	b212      	sxth	r2, r2
 800542e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005430:	7c7a      	ldrb	r2, [r7, #17]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	3304      	adds	r3, #4
 8005436:	b212      	sxth	r2, r2
 8005438:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	3304      	adds	r3, #4
 800543e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005442:	b29b      	uxth	r3, r3
 8005444:	021b      	lsls	r3, r3, #8
 8005446:	b29a      	uxth	r2, r3
 8005448:	7c3b      	ldrb	r3, [r7, #16]
 800544a:	b29b      	uxth	r3, r3
 800544c:	4413      	add	r3, r2
 800544e:	b29a      	uxth	r2, r3
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	3304      	adds	r3, #4
 8005454:	b212      	sxth	r2, r2
 8005456:	801a      	strh	r2, [r3, #0]

  return ret;
 8005458:	697b      	ldr	r3, [r7, #20]
}
 800545a:	4618      	mov	r0, r3
 800545c:	3718      	adds	r7, #24
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b086      	sub	sp, #24
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 800546c:	f107 020c 	add.w	r2, r7, #12
 8005470:	2306      	movs	r3, #6
 8005472:	2128      	movs	r1, #40	; 0x28
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7ff fc55 	bl	8004d24 <lsm6dsr_read_reg>
 800547a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800547c:	7b7b      	ldrb	r3, [r7, #13]
 800547e:	b21a      	sxth	r2, r3
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	f9b3 3000 	ldrsh.w	r3, [r3]
 800548a:	b29b      	uxth	r3, r3
 800548c:	021b      	lsls	r3, r3, #8
 800548e:	b29a      	uxth	r2, r3
 8005490:	7b3b      	ldrb	r3, [r7, #12]
 8005492:	b29b      	uxth	r3, r3
 8005494:	4413      	add	r3, r2
 8005496:	b29b      	uxth	r3, r3
 8005498:	b21a      	sxth	r2, r3
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800549e:	7bfa      	ldrb	r2, [r7, #15]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	3302      	adds	r3, #2
 80054a4:	b212      	sxth	r2, r2
 80054a6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	3302      	adds	r3, #2
 80054ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	021b      	lsls	r3, r3, #8
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	7bbb      	ldrb	r3, [r7, #14]
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	4413      	add	r3, r2
 80054bc:	b29a      	uxth	r2, r3
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	3302      	adds	r3, #2
 80054c2:	b212      	sxth	r2, r2
 80054c4:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80054c6:	7c7a      	ldrb	r2, [r7, #17]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	3304      	adds	r3, #4
 80054cc:	b212      	sxth	r2, r2
 80054ce:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	3304      	adds	r3, #4
 80054d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054d8:	b29b      	uxth	r3, r3
 80054da:	021b      	lsls	r3, r3, #8
 80054dc:	b29a      	uxth	r2, r3
 80054de:	7c3b      	ldrb	r3, [r7, #16]
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	4413      	add	r3, r2
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	3304      	adds	r3, #4
 80054ea:	b212      	sxth	r2, r2
 80054ec:	801a      	strh	r2, [r3, #0]

  return ret;
 80054ee:	697b      	ldr	r3, [r7, #20]
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3718      	adds	r7, #24
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	460b      	mov	r3, r1
 8005502:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8005504:	f107 0208 	add.w	r2, r7, #8
 8005508:	2301      	movs	r3, #1
 800550a:	2101      	movs	r1, #1
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7ff fc09 	bl	8004d24 <lsm6dsr_read_reg>
 8005512:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10f      	bne.n	800553a <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 800551a:	78fb      	ldrb	r3, [r7, #3]
 800551c:	f003 0303 	and.w	r3, r3, #3
 8005520:	b2da      	uxtb	r2, r3
 8005522:	7a3b      	ldrb	r3, [r7, #8]
 8005524:	f362 1387 	bfi	r3, r2, #6, #2
 8005528:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 800552a:	f107 0208 	add.w	r2, r7, #8
 800552e:	2301      	movs	r3, #1
 8005530:	2101      	movs	r1, #1
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7ff fc0e 	bl	8004d54 <lsm6dsr_write_reg>
 8005538:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 800553a:	68fb      	ldr	r3, [r7, #12]
}
 800553c:	4618      	mov	r0, r3
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 800554e:	2301      	movs	r3, #1
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	210f      	movs	r1, #15
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f7ff fbe5 	bl	8004d24 <lsm6dsr_read_reg>
 800555a:	60f8      	str	r0, [r7, #12]

  return ret;
 800555c:	68fb      	ldr	r3, [r7, #12]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b084      	sub	sp, #16
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	460b      	mov	r3, r1
 8005570:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005572:	f107 0208 	add.w	r2, r7, #8
 8005576:	2301      	movs	r3, #1
 8005578:	2112      	movs	r1, #18
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7ff fbd2 	bl	8004d24 <lsm6dsr_read_reg>
 8005580:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10f      	bne.n	80055a8 <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8005588:	78fb      	ldrb	r3, [r7, #3]
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	b2da      	uxtb	r2, r3
 8005590:	7a3b      	ldrb	r3, [r7, #8]
 8005592:	f362 0300 	bfi	r3, r2, #0, #1
 8005596:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005598:	f107 0208 	add.w	r2, r7, #8
 800559c:	2301      	movs	r3, #1
 800559e:	2112      	movs	r1, #18
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7ff fbd7 	bl	8004d54 <lsm6dsr_write_reg>
 80055a6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80055a8:	68fb      	ldr	r3, [r7, #12]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b084      	sub	sp, #16
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
 80055ba:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80055bc:	f107 0208 	add.w	r2, r7, #8
 80055c0:	2301      	movs	r3, #1
 80055c2:	2112      	movs	r1, #18
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f7ff fbad 	bl	8004d24 <lsm6dsr_read_reg>
 80055ca:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 80055cc:	7a3b      	ldrb	r3, [r7, #8]
 80055ce:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	461a      	mov	r2, r3
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	701a      	strb	r2, [r3, #0]

  return ret;
 80055da:	68fb      	ldr	r3, [r7, #12]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <lsm6dsr_xl_filter_lp2_set>:
  * @param  val    Change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	460b      	mov	r3, r1
 80055ee:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80055f0:	f107 0208 	add.w	r2, r7, #8
 80055f4:	2301      	movs	r3, #1
 80055f6:	2110      	movs	r1, #16
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f7ff fb93 	bl	8004d24 <lsm6dsr_read_reg>
 80055fe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10f      	bne.n	8005626 <lsm6dsr_xl_filter_lp2_set+0x42>
  {
    ctrl1_xl.lpf2_xl_en = (uint8_t)val;
 8005606:	78fb      	ldrb	r3, [r7, #3]
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	b2da      	uxtb	r2, r3
 800560e:	7a3b      	ldrb	r3, [r7, #8]
 8005610:	f362 0341 	bfi	r3, r2, #1, #1
 8005614:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8005616:	f107 0208 	add.w	r2, r7, #8
 800561a:	2301      	movs	r3, #1
 800561c:	2110      	movs	r1, #16
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7ff fb98 	bl	8004d54 <lsm6dsr_write_reg>
 8005624:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8005626:	68fb      	ldr	r3, [r7, #12]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <lsm6dsr_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dsr_hp_slope_xl_en_t val)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	460b      	mov	r3, r1
 800563a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 800563c:	f107 0208 	add.w	r2, r7, #8
 8005640:	2301      	movs	r3, #1
 8005642:	2117      	movs	r1, #23
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f7ff fb6d 	bl	8004d24 <lsm6dsr_read_reg>
 800564a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d121      	bne.n	8005696 <lsm6dsr_xl_hp_path_on_out_set+0x66>
  {
    ctrl8_xl.hp_slope_xl_en = (((uint8_t)val & 0x10U) >> 4);
 8005652:	78fb      	ldrb	r3, [r7, #3]
 8005654:	091b      	lsrs	r3, r3, #4
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	b2da      	uxtb	r2, r3
 800565c:	7a3b      	ldrb	r3, [r7, #8]
 800565e:	f362 0382 	bfi	r3, r2, #2, #1
 8005662:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_ref_mode_xl = (((uint8_t)val & 0x20U) >> 5);
 8005664:	78fb      	ldrb	r3, [r7, #3]
 8005666:	095b      	lsrs	r3, r3, #5
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	b2da      	uxtb	r2, r3
 800566e:	7a3b      	ldrb	r3, [r7, #8]
 8005670:	f362 1304 	bfi	r3, r2, #4, #1
 8005674:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 8005676:	78fb      	ldrb	r3, [r7, #3]
 8005678:	f003 0307 	and.w	r3, r3, #7
 800567c:	b2da      	uxtb	r2, r3
 800567e:	7a3b      	ldrb	r3, [r7, #8]
 8005680:	f362 1347 	bfi	r3, r2, #5, #3
 8005684:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL8_XL,
 8005686:	f107 0208 	add.w	r2, r7, #8
 800568a:	2301      	movs	r3, #1
 800568c:	2117      	movs	r1, #23
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7ff fb60 	bl	8004d54 <lsm6dsr_write_reg>
 8005694:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 8005696:	68fb      	ldr	r3, [r7, #12]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <lsm6dsr_i3c_disable_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dsr_i3c_disable_t val)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	460b      	mov	r3, r1
 80056aa:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl9_xl_t ctrl9_xl;
  lsm6dsr_i3c_bus_avb_t i3c_bus_avb;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80056ac:	f107 0210 	add.w	r2, r7, #16
 80056b0:	2301      	movs	r3, #1
 80056b2:	2118      	movs	r1, #24
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7ff fb35 	bl	8004d24 <lsm6dsr_read_reg>
 80056ba:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d111      	bne.n	80056e6 <lsm6dsr_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 80056c2:	78fb      	ldrb	r3, [r7, #3]
 80056c4:	09db      	lsrs	r3, r3, #7
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	7c3b      	ldrb	r3, [r7, #16]
 80056d0:	f362 0341 	bfi	r3, r2, #1, #1
 80056d4:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL9_XL,
 80056d6:	f107 0210 	add.w	r2, r7, #16
 80056da:	2301      	movs	r3, #1
 80056dc:	2118      	movs	r1, #24
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7ff fb38 	bl	8004d54 <lsm6dsr_write_reg>
 80056e4:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0)
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d107      	bne.n	80056fc <lsm6dsr_i3c_disable_set+0x5c>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 80056ec:	f107 020c 	add.w	r2, r7, #12
 80056f0:	2301      	movs	r3, #1
 80056f2:	2162      	movs	r1, #98	; 0x62
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7ff fb15 	bl	8004d24 <lsm6dsr_read_reg>
 80056fa:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10f      	bne.n	8005722 <lsm6dsr_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8005702:	78fb      	ldrb	r3, [r7, #3]
 8005704:	f003 0303 	and.w	r3, r3, #3
 8005708:	b2da      	uxtb	r2, r3
 800570a:	7b3b      	ldrb	r3, [r7, #12]
 800570c:	f362 03c4 	bfi	r3, r2, #3, #2
 8005710:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8005712:	f107 020c 	add.w	r2, r7, #12
 8005716:	2301      	movs	r3, #1
 8005718:	2162      	movs	r1, #98	; 0x62
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7ff fb1a 	bl	8004d54 <lsm6dsr_write_reg>
 8005720:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8005722:	697b      	ldr	r3, [r7, #20]
}
 8005724:	4618      	mov	r0, r3
 8005726:	3718      	adds	r7, #24
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8005736:	2102      	movs	r1, #2
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f7ff fedd 	bl	80054f8 <lsm6dsr_mem_bank_set>
 800573e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d106      	bne.n	8005754 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 8005746:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 8005748:	2301      	movs	r3, #1
 800574a:	2146      	movs	r1, #70	; 0x46
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f7ff fae9 	bl	8004d24 <lsm6dsr_read_reg>
 8005752:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d107      	bne.n	800576a <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 800575e:	2301      	movs	r3, #1
 8005760:	2147      	movs	r1, #71	; 0x47
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7ff fade 	bl	8004d24 <lsm6dsr_read_reg>
 8005768:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d104      	bne.n	800577a <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8005770:	2100      	movs	r1, #0
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7ff fec0 	bl	80054f8 <lsm6dsr_mem_bank_set>
 8005778:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800577a:	68fb      	ldr	r3, [r7, #12]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800578e:	2102      	movs	r1, #2
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7ff feb1 	bl	80054f8 <lsm6dsr_mem_bank_set>
 8005796:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d107      	bne.n	80057ae <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 800579e:	f107 0208 	add.w	r2, r7, #8
 80057a2:	2301      	movs	r3, #1
 80057a4:	215f      	movs	r1, #95	; 0x5f
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7ff fabc 	bl	8004d24 <lsm6dsr_read_reg>
 80057ac:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d104      	bne.n	80057be <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 80057b4:	2100      	movs	r1, #0
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7ff fe9e 	bl	80054f8 <lsm6dsr_mem_bank_set>
 80057bc:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 80057be:	7a3b      	ldrb	r3, [r7, #8]
 80057c0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b03      	cmp	r3, #3
 80057c8:	d81a      	bhi.n	8005800 <lsm6dsr_fsm_data_rate_get+0x7c>
 80057ca:	a201      	add	r2, pc, #4	; (adr r2, 80057d0 <lsm6dsr_fsm_data_rate_get+0x4c>)
 80057cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d0:	080057e1 	.word	0x080057e1
 80057d4:	080057e9 	.word	0x080057e9
 80057d8:	080057f1 	.word	0x080057f1
 80057dc:	080057f9 	.word	0x080057f9
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	2200      	movs	r2, #0
 80057e4:	701a      	strb	r2, [r3, #0]
      break;
 80057e6:	e00f      	b.n	8005808 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	2201      	movs	r2, #1
 80057ec:	701a      	strb	r2, [r3, #0]
      break;
 80057ee:	e00b      	b.n	8005808 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2202      	movs	r2, #2
 80057f4:	701a      	strb	r2, [r3, #0]
      break;
 80057f6:	e007      	b.n	8005808 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	2203      	movs	r2, #3
 80057fc:	701a      	strb	r2, [r3, #0]
      break;
 80057fe:	e003      	b.n	8005808 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	2200      	movs	r2, #0
 8005804:	701a      	strb	r2, [r3, #0]
      break;
 8005806:	bf00      	nop
  }

  return ret;
 8005808:	68fb      	ldr	r3, [r7, #12]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop

08005814 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8005820:	2300      	movs	r3, #0
 8005822:	617b      	str	r3, [r7, #20]
  while (size--) {
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	1e5a      	subs	r2, r3, #1
 8005828:	607a      	str	r2, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	bf14      	ite	ne
 800582e:	2301      	movne	r3, #1
 8005830:	2300      	moveq	r3, #0
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00e      	beq.n	8005856 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	1c59      	adds	r1, r3, #1
 8005842:	60b9      	str	r1, [r7, #8]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	4619      	mov	r1, r3
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	4790      	blx	r2
 800584c:	4602      	mov	r2, r0
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	4413      	add	r3, r2
 8005852:	617b      	str	r3, [r7, #20]
  while (size--) {
 8005854:	e7e6      	b.n	8005824 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8005856:	697b      	ldr	r3, [r7, #20]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	4a06      	ldr	r2, [pc, #24]	; (8005884 <_ZN5PrintC1Ev+0x24>)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	605a      	str	r2, [r3, #4]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4618      	mov	r0, r3
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	080147e0 	.word	0x080147e0

08005888 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4618      	mov	r0, r3
 8005894:	f7ff ffe4 	bl	8005860 <_ZN5PrintC1Ev>
 8005898:	4a05      	ldr	r2, [pc, #20]	; (80058b0 <_ZN6StreamC1Ev+0x28>)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	601a      	str	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80058a4:	609a      	str	r2, [r3, #8]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4618      	mov	r0, r3
 80058aa:	3708      	adds	r7, #8
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	08014810 	.word	0x08014810

080058b4 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7ff ffe1 	bl	8005888 <_ZN6StreamC1Ev>
 80058c6:	4a16      	ldr	r2, [pc, #88]	; (8005920 <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	3390      	adds	r3, #144	; 0x90
 80058d6:	2220      	movs	r2, #32
 80058d8:	2100      	movs	r1, #0
 80058da:	4618      	mov	r0, r3
 80058dc:	f008 ff60 	bl	800e7a0 <memset>
  rxBufferIndex = 0;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4618      	mov	r0, r3
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	080147f0 	.word	0x080147f0

08005924 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	460b      	mov	r3, r1
 800592e:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8005936:	2b00      	cmp	r3, #0
 8005938:	d01d      	beq.n	8005976 <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005940:	2b1f      	cmp	r3, #31
 8005942:	d901      	bls.n	8005948 <_ZN7TwoWire5writeEh+0x24>
      return 0;
 8005944:	2300      	movs	r3, #0
 8005946:	e028      	b.n	800599a <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800594e:	4619      	mov	r1, r3
 8005950:	78fa      	ldrb	r2, [r7, #3]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	440b      	add	r3, r1
 8005956:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800595e:	3301      	adds	r3, #1
 8005960:	b2da      	uxtb	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8005974:	e010      	b.n	8005998 <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f984 	bl	8005c84 <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 800597c:	1cfb      	adds	r3, r7, #3
 800597e:	2201      	movs	r2, #1
 8005980:	4619      	mov	r1, r3
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f8b7 	bl	8005af6 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f949 	bl	8005c20 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	333c      	adds	r3, #60	; 0x3c
 8005992:	4618      	mov	r0, r3
 8005994:	f001 fc44 	bl	8007220 <HAL_I2C_EnableListen_IT>
  }
  return 1;
 8005998:	2301      	movs	r3, #1
}
 800599a:	4618      	mov	r0, r3
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b086      	sub	sp, #24
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	60f8      	str	r0, [r7, #12]
 80059aa:	60b9      	str	r1, [r7, #8]
 80059ac:	607a      	str	r2, [r7, #4]
  if(transmitting){
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d013      	beq.n	80059e0 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 80059b8:	2300      	movs	r3, #0
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d21e      	bcs.n	8005a02 <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68b9      	ldr	r1, [r7, #8]
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	440a      	add	r2, r1
 80059d0:	7812      	ldrb	r2, [r2, #0]
 80059d2:	4611      	mov	r1, r2
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	3301      	adds	r3, #1
 80059dc:	617b      	str	r3, [r7, #20]
 80059de:	e7ed      	b.n	80059bc <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 f94f 	bl	8005c84 <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	461a      	mov	r2, r3
 80059ea:	68b9      	ldr	r1, [r7, #8]
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f000 f882 	bl	8005af6 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 f914 	bl	8005c20 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	333c      	adds	r3, #60	; 0x3c
 80059fc:	4618      	mov	r0, r3
 80059fe:	f001 fc0f 	bl	8007220 <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 8005a02:	687b      	ldr	r3, [r7, #4]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3718      	adds	r7, #24
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	1ad3      	subs	r3, r2, r3
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  int value = -1;
 8005a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a40:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	429a      	cmp	r2, r3
 8005a54:	bf34      	ite	cc
 8005a56:	2301      	movcc	r3, #1
 8005a58:	2300      	movcs	r3, #0
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d012      	beq.n	8005a86 <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	461a      	mov	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8005a72:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	b2da      	uxtb	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 8005a86:	68fb      	ldr	r3, [r7, #12]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3714      	adds	r7, #20
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  int value = -1;
 8005a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005aa0:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	bf34      	ite	cc
 8005ab6:	2301      	movcc	r3, #1
 8005ab8:	2300      	movcs	r3, #0
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d009      	beq.n	8005ad4 <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	461a      	mov	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4413      	add	r3, r2
 8005ace:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8005ad2:	60fb      	str	r3, [r7, #12]
  }

  return value;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b083      	sub	sp, #12
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 8005aea:	bf00      	nop
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <_ZN7TwoWire15i2c_slave_writeEPKci>:

    return 1;
}

int TwoWire::i2c_slave_write(const char *data, int length)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b089      	sub	sp, #36	; 0x24
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	60f8      	str	r0, [r7, #12]
 8005afe:	60b9      	str	r1, [r7, #8]
 8005b00:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 8005b02:	2300      	movs	r3, #0
 8005b04:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b0a:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	dd41      	ble.n	8005b96 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 8005b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b16:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b22:	2b80      	cmp	r3, #128	; 0x80
 8005b24:	bf14      	ite	ne
 8005b26:	2301      	movne	r3, #1
 8005b28:	2300      	moveq	r3, #0
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d008      	beq.n	8005b42 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	3b01      	subs	r3, #1
 8005b34:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1ed      	bne.n	8005b18 <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 8005b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b40:	e068      	b.n	8005c14 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	1c5a      	adds	r2, r3, #1
 8005b46:	60ba      	str	r2, [r7, #8]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	611a      	str	r2, [r3, #16]
        length--;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3b01      	subs	r3, #1
 8005b54:	607b      	str	r3, [r7, #4]
        size++;
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	f003 0304 	and.w	r3, r3, #4
 8005b66:	2b04      	cmp	r3, #4
 8005b68:	d104      	bne.n	8005b74 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d001      	beq.n	8005b74 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8005b70:	2301      	movs	r3, #1
 8005b72:	e000      	b.n	8005b76 <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 8005b74:	2300      	movs	r3, #0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d0c8      	beq.n	8005b0c <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	1c5a      	adds	r2, r3, #1
 8005b7e:	60ba      	str	r2, [r7, #8]
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	461a      	mov	r2, r3
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	611a      	str	r2, [r3, #16]
            length--;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	607b      	str	r3, [r7, #4]
            size++;
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	3301      	adds	r3, #1
 8005b92:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 8005b94:	e7ba      	b.n	8005b0c <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 8005b96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b9a:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005baa:	bf14      	ite	ne
 8005bac:	2301      	movne	r3, #1
 8005bae:	2300      	moveq	r3, #0
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d008      	beq.n	8005bc8 <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1ec      	bne.n	8005b9c <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 8005bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005bc6:	e025      	b.n	8005c14 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bcc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bd0:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 8005bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bd6:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	bf0c      	ite	eq
 8005be6:	2301      	moveq	r3, #1
 8005be8:	2300      	movne	r3, #0
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d008      	beq.n	8005c02 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1ed      	bne.n	8005bd8 <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 8005bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8005c00:	e008      	b.n	8005c14 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2220      	movs	r2, #32
 8005c06:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 8005c12:	69bb      	ldr	r3, [r7, #24]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3724      	adds	r7, #36	; 0x24
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c2c:	4a12      	ldr	r2, [pc, #72]	; (8005c78 <_ZN7TwoWire15enableInterruptEv+0x58>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d106      	bne.n	8005c40 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8005c32:	2049      	movs	r0, #73	; 0x49
 8005c34:	f000 fc7e 	bl	8006534 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8005c38:	2048      	movs	r0, #72	; 0x48
 8005c3a:	f000 fc7b 	bl	8006534 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8005c3e:	e016      	b.n	8005c6e <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c44:	4a0d      	ldr	r2, [pc, #52]	; (8005c7c <_ZN7TwoWire15enableInterruptEv+0x5c>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d106      	bne.n	8005c58 <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8005c4a:	2022      	movs	r0, #34	; 0x22
 8005c4c:	f000 fc72 	bl	8006534 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8005c50:	2021      	movs	r0, #33	; 0x21
 8005c52:	f000 fc6f 	bl	8006534 <HAL_NVIC_EnableIRQ>
}
 8005c56:	e00a      	b.n	8005c6e <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5c:	4a08      	ldr	r2, [pc, #32]	; (8005c80 <_ZN7TwoWire15enableInterruptEv+0x60>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d105      	bne.n	8005c6e <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005c62:	2020      	movs	r0, #32
 8005c64:	f000 fc66 	bl	8006534 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005c68:	201f      	movs	r0, #31
 8005c6a:	f000 fc63 	bl	8006534 <HAL_NVIC_EnableIRQ>
}
 8005c6e:	bf00      	nop
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	40005c00 	.word	0x40005c00
 8005c7c:	40005800 	.word	0x40005800
 8005c80:	40005400 	.word	0x40005400

08005c84 <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c90:	4a12      	ldr	r2, [pc, #72]	; (8005cdc <_ZN7TwoWire16disableInterruptEv+0x58>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d106      	bne.n	8005ca4 <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8005c96:	2049      	movs	r0, #73	; 0x49
 8005c98:	f000 fc5a 	bl	8006550 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8005c9c:	2048      	movs	r0, #72	; 0x48
 8005c9e:	f000 fc57 	bl	8006550 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8005ca2:	e016      	b.n	8005cd2 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca8:	4a0d      	ldr	r2, [pc, #52]	; (8005ce0 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d106      	bne.n	8005cbc <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8005cae:	2022      	movs	r0, #34	; 0x22
 8005cb0:	f000 fc4e 	bl	8006550 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8005cb4:	2021      	movs	r0, #33	; 0x21
 8005cb6:	f000 fc4b 	bl	8006550 <HAL_NVIC_DisableIRQ>
}
 8005cba:	e00a      	b.n	8005cd2 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc0:	4a08      	ldr	r2, [pc, #32]	; (8005ce4 <_ZN7TwoWire16disableInterruptEv+0x60>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d105      	bne.n	8005cd2 <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8005cc6:	2020      	movs	r0, #32
 8005cc8:	f000 fc42 	bl	8006550 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8005ccc:	201f      	movs	r0, #31
 8005cce:	f000 fc3f 	bl	8006550 <HAL_NVIC_DisableIRQ>
}
 8005cd2:	bf00      	nop
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	40005c00 	.word	0x40005c00
 8005ce0:	40005800 	.word	0x40005800
 8005ce4:	40005400 	.word	0x40005400

08005ce8 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d110      	bne.n	8005d1a <_Z41__static_initialization_and_destruction_0ii+0x32>
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d10b      	bne.n	8005d1a <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 8005d02:	4908      	ldr	r1, [pc, #32]	; (8005d24 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8005d04:	4808      	ldr	r0, [pc, #32]	; (8005d28 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005d06:	f7ff fdd5 	bl	80058b4 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 8005d0a:	4908      	ldr	r1, [pc, #32]	; (8005d2c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8005d0c:	4808      	ldr	r0, [pc, #32]	; (8005d30 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8005d0e:	f7ff fdd1 	bl	80058b4 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 8005d12:	4908      	ldr	r1, [pc, #32]	; (8005d34 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8005d14:	4808      	ldr	r0, [pc, #32]	; (8005d38 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8005d16:	f7ff fdcd 	bl	80058b4 <_ZN7TwoWireC1EP11I2C_TypeDef>
 8005d1a:	bf00      	nop
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	40005400 	.word	0x40005400
 8005d28:	20000314 	.word	0x20000314
 8005d2c:	40005800 	.word	0x40005800
 8005d30:	200003cc 	.word	0x200003cc
 8005d34:	40005c00 	.word	0x40005c00
 8005d38:	20000484 	.word	0x20000484

08005d3c <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005d44:	2001      	movs	r0, #1
 8005d46:	f7ff ffcf 	bl	8005ce8 <_Z41__static_initialization_and_destruction_0ii>
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <MRT_radio_tx>:
#include <iwdg.h>
#include <string.h>
#include <sx126x.h>


void MRT_radio_tx(char* buffer){
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
			//sx126x_set_tx(); TODO
			TxProtocol(buffer, strlen(buffer));
		}
	#endif

	print((char*) "Radio sending:\t");
 8005d54:	4804      	ldr	r0, [pc, #16]	; (8005d68 <MRT_radio_tx+0x1c>)
 8005d56:	f7fb f977 	bl	8001048 <print>
	println(buffer);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7fb f956 	bl	800100c <println>
}
 8005d60:	bf00      	nop
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	08014674 	.word	0x08014674

08005d6c <MRT_radio_Init>:
	println(buffer);
}



void MRT_radio_Init(void){
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	af00      	add	r7, sp, #0
	println("\r\nRadio Init");
 8005d70:	4803      	ldr	r0, [pc, #12]	; (8005d80 <MRT_radio_Init+0x14>)
 8005d72:	f7fb f94b 	bl	800100c <println>
	set_NRESET_pin(SX_RST_GPIO_Port, SX_RST_Pin);
	set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
	Tx_setup();
	println("OK");
	#else
	println("\tNo radio currently in use");
 8005d76:	4803      	ldr	r0, [pc, #12]	; (8005d84 <MRT_radio_Init+0x18>)
 8005d78:	f7fb f948 	bl	800100c <println>
	#endif
}
 8005d7c:	bf00      	nop
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	08014698 	.word	0x08014698
 8005d84:	080146a8 	.word	0x080146a8

08005d88 <MRT_TELEMETRY_Init>:


void MRT_TELEMETRY_Init(void){
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0

	MRT_radio_Init();
 8005d8c:	f7ff ffee 	bl	8005d6c <MRT_radio_Init>

	#if IRIDIUM_
	HAL_GPIO_WritePin(Iridium_RST_GPIO_Port, Iridium_RST_Pin, SET);
	hiridium = MRT_Iridium_Init(IRIDIUM_TIMEOUT, IRIDIUM_I2C, print);
	#endif
}
 8005d90:	bf00      	nop
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005d98:	4b0e      	ldr	r3, [pc, #56]	; (8005dd4 <HAL_Init+0x40>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a0d      	ldr	r2, [pc, #52]	; (8005dd4 <HAL_Init+0x40>)
 8005d9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005da2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005da4:	4b0b      	ldr	r3, [pc, #44]	; (8005dd4 <HAL_Init+0x40>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a0a      	ldr	r2, [pc, #40]	; (8005dd4 <HAL_Init+0x40>)
 8005daa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005dae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005db0:	4b08      	ldr	r3, [pc, #32]	; (8005dd4 <HAL_Init+0x40>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a07      	ldr	r2, [pc, #28]	; (8005dd4 <HAL_Init+0x40>)
 8005db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005dbc:	2003      	movs	r0, #3
 8005dbe:	f000 fb92 	bl	80064e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005dc2:	2000      	movs	r0, #0
 8005dc4:	f7fc fd46 	bl	8002854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005dc8:	f7fc fd18 	bl	80027fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	40023c00 	.word	0x40023c00

08005dd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ddc:	4b06      	ldr	r3, [pc, #24]	; (8005df8 <HAL_IncTick+0x20>)
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	461a      	mov	r2, r3
 8005de2:	4b06      	ldr	r3, [pc, #24]	; (8005dfc <HAL_IncTick+0x24>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4413      	add	r3, r2
 8005de8:	4a04      	ldr	r2, [pc, #16]	; (8005dfc <HAL_IncTick+0x24>)
 8005dea:	6013      	str	r3, [r2, #0]
}
 8005dec:	bf00      	nop
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	20000068 	.word	0x20000068
 8005dfc:	20005e28 	.word	0x20005e28

08005e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e00:	b480      	push	{r7}
 8005e02:	af00      	add	r7, sp, #0
  return uwTick;
 8005e04:	4b03      	ldr	r3, [pc, #12]	; (8005e14 <HAL_GetTick+0x14>)
 8005e06:	681b      	ldr	r3, [r3, #0]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	20005e28 	.word	0x20005e28

08005e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e20:	f7ff ffee 	bl	8005e00 <HAL_GetTick>
 8005e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e30:	d005      	beq.n	8005e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e32:	4b0a      	ldr	r3, [pc, #40]	; (8005e5c <HAL_Delay+0x44>)
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	461a      	mov	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005e3e:	bf00      	nop
 8005e40:	f7ff ffde 	bl	8005e00 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d8f7      	bhi.n	8005e40 <HAL_Delay+0x28>
  {
  }
}
 8005e50:	bf00      	nop
 8005e52:	bf00      	nop
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	20000068 	.word	0x20000068

08005e60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e033      	b.n	8005ede <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d109      	bne.n	8005e92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f7fb fb40 	bl	8001504 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	f003 0310 	and.w	r3, r3, #16
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d118      	bne.n	8005ed0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005ea6:	f023 0302 	bic.w	r3, r3, #2
 8005eaa:	f043 0202 	orr.w	r2, r3, #2
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f94a 	bl	800614c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec2:	f023 0303 	bic.w	r3, r3, #3
 8005ec6:	f043 0201 	orr.w	r2, r3, #1
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	641a      	str	r2, [r3, #64]	; 0x40
 8005ece:	e001      	b.n	8005ed4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
	...

08005ee8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d101      	bne.n	8005f04 <HAL_ADC_ConfigChannel+0x1c>
 8005f00:	2302      	movs	r3, #2
 8005f02:	e113      	b.n	800612c <HAL_ADC_ConfigChannel+0x244>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b09      	cmp	r3, #9
 8005f12:	d925      	bls.n	8005f60 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68d9      	ldr	r1, [r3, #12]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	461a      	mov	r2, r3
 8005f22:	4613      	mov	r3, r2
 8005f24:	005b      	lsls	r3, r3, #1
 8005f26:	4413      	add	r3, r2
 8005f28:	3b1e      	subs	r3, #30
 8005f2a:	2207      	movs	r2, #7
 8005f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f30:	43da      	mvns	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	400a      	ands	r2, r1
 8005f38:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68d9      	ldr	r1, [r3, #12]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	689a      	ldr	r2, [r3, #8]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	4403      	add	r3, r0
 8005f52:	3b1e      	subs	r3, #30
 8005f54:	409a      	lsls	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	60da      	str	r2, [r3, #12]
 8005f5e:	e022      	b.n	8005fa6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6919      	ldr	r1, [r3, #16]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	4613      	mov	r3, r2
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	4413      	add	r3, r2
 8005f74:	2207      	movs	r2, #7
 8005f76:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7a:	43da      	mvns	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	400a      	ands	r2, r1
 8005f82:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6919      	ldr	r1, [r3, #16]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	689a      	ldr	r2, [r3, #8]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	4618      	mov	r0, r3
 8005f96:	4603      	mov	r3, r0
 8005f98:	005b      	lsls	r3, r3, #1
 8005f9a:	4403      	add	r3, r0
 8005f9c:	409a      	lsls	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	2b06      	cmp	r3, #6
 8005fac:	d824      	bhi.n	8005ff8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	3b05      	subs	r3, #5
 8005fc0:	221f      	movs	r2, #31
 8005fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc6:	43da      	mvns	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	400a      	ands	r2, r1
 8005fce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	4618      	mov	r0, r3
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	3b05      	subs	r3, #5
 8005fea:	fa00 f203 	lsl.w	r2, r0, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	635a      	str	r2, [r3, #52]	; 0x34
 8005ff6:	e04c      	b.n	8006092 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	2b0c      	cmp	r3, #12
 8005ffe:	d824      	bhi.n	800604a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	4613      	mov	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	3b23      	subs	r3, #35	; 0x23
 8006012:	221f      	movs	r2, #31
 8006014:	fa02 f303 	lsl.w	r3, r2, r3
 8006018:	43da      	mvns	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	400a      	ands	r2, r1
 8006020:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	b29b      	uxth	r3, r3
 800602e:	4618      	mov	r0, r3
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	4613      	mov	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	3b23      	subs	r3, #35	; 0x23
 800603c:	fa00 f203 	lsl.w	r2, r0, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	430a      	orrs	r2, r1
 8006046:	631a      	str	r2, [r3, #48]	; 0x30
 8006048:	e023      	b.n	8006092 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	4613      	mov	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	3b41      	subs	r3, #65	; 0x41
 800605c:	221f      	movs	r2, #31
 800605e:	fa02 f303 	lsl.w	r3, r2, r3
 8006062:	43da      	mvns	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	400a      	ands	r2, r1
 800606a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	b29b      	uxth	r3, r3
 8006078:	4618      	mov	r0, r3
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	4613      	mov	r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	3b41      	subs	r3, #65	; 0x41
 8006086:	fa00 f203 	lsl.w	r2, r0, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006092:	4b29      	ldr	r3, [pc, #164]	; (8006138 <HAL_ADC_ConfigChannel+0x250>)
 8006094:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a28      	ldr	r2, [pc, #160]	; (800613c <HAL_ADC_ConfigChannel+0x254>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d10f      	bne.n	80060c0 <HAL_ADC_ConfigChannel+0x1d8>
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2b12      	cmp	r3, #18
 80060a6:	d10b      	bne.n	80060c0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a1d      	ldr	r2, [pc, #116]	; (800613c <HAL_ADC_ConfigChannel+0x254>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d12b      	bne.n	8006122 <HAL_ADC_ConfigChannel+0x23a>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a1c      	ldr	r2, [pc, #112]	; (8006140 <HAL_ADC_ConfigChannel+0x258>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d003      	beq.n	80060dc <HAL_ADC_ConfigChannel+0x1f4>
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2b11      	cmp	r3, #17
 80060da:	d122      	bne.n	8006122 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a11      	ldr	r2, [pc, #68]	; (8006140 <HAL_ADC_ConfigChannel+0x258>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d111      	bne.n	8006122 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80060fe:	4b11      	ldr	r3, [pc, #68]	; (8006144 <HAL_ADC_ConfigChannel+0x25c>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a11      	ldr	r2, [pc, #68]	; (8006148 <HAL_ADC_ConfigChannel+0x260>)
 8006104:	fba2 2303 	umull	r2, r3, r2, r3
 8006108:	0c9a      	lsrs	r2, r3, #18
 800610a:	4613      	mov	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4413      	add	r3, r2
 8006110:	005b      	lsls	r3, r3, #1
 8006112:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006114:	e002      	b.n	800611c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	3b01      	subs	r3, #1
 800611a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1f9      	bne.n	8006116 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3714      	adds	r7, #20
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr
 8006138:	40012300 	.word	0x40012300
 800613c:	40012000 	.word	0x40012000
 8006140:	10000012 	.word	0x10000012
 8006144:	2000003c 	.word	0x2000003c
 8006148:	431bde83 	.word	0x431bde83

0800614c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006154:	4b79      	ldr	r3, [pc, #484]	; (800633c <ADC_Init+0x1f0>)
 8006156:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	431a      	orrs	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006180:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	6859      	ldr	r1, [r3, #4]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	021a      	lsls	r2, r3, #8
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	430a      	orrs	r2, r1
 8006194:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80061a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	6859      	ldr	r1, [r3, #4]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	689a      	ldr	r2, [r3, #8]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	430a      	orrs	r2, r1
 80061b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689a      	ldr	r2, [r3, #8]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6899      	ldr	r1, [r3, #8]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061de:	4a58      	ldr	r2, [pc, #352]	; (8006340 <ADC_Init+0x1f4>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d022      	beq.n	800622a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689a      	ldr	r2, [r3, #8]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80061f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6899      	ldr	r1, [r3, #8]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689a      	ldr	r2, [r3, #8]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006214:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	6899      	ldr	r1, [r3, #8]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	430a      	orrs	r2, r1
 8006226:	609a      	str	r2, [r3, #8]
 8006228:	e00f      	b.n	800624a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006238:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006248:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	689a      	ldr	r2, [r3, #8]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f022 0202 	bic.w	r2, r2, #2
 8006258:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	6899      	ldr	r1, [r3, #8]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	7e1b      	ldrb	r3, [r3, #24]
 8006264:	005a      	lsls	r2, r3, #1
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	430a      	orrs	r2, r1
 800626c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d01b      	beq.n	80062b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006286:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	685a      	ldr	r2, [r3, #4]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006296:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6859      	ldr	r1, [r3, #4]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a2:	3b01      	subs	r3, #1
 80062a4:	035a      	lsls	r2, r3, #13
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	430a      	orrs	r2, r1
 80062ac:	605a      	str	r2, [r3, #4]
 80062ae:	e007      	b.n	80062c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685a      	ldr	r2, [r3, #4]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80062ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	3b01      	subs	r3, #1
 80062dc:	051a      	lsls	r2, r3, #20
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	689a      	ldr	r2, [r3, #8]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80062f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6899      	ldr	r1, [r3, #8]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006302:	025a      	lsls	r2, r3, #9
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	430a      	orrs	r2, r1
 800630a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689a      	ldr	r2, [r3, #8]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800631a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6899      	ldr	r1, [r3, #8]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	029a      	lsls	r2, r3, #10
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	430a      	orrs	r2, r1
 800632e:	609a      	str	r2, [r3, #8]
}
 8006330:	bf00      	nop
 8006332:	3714      	adds	r7, #20
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	40012300 	.word	0x40012300
 8006340:	0f000001 	.word	0x0f000001

08006344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f003 0307 	and.w	r3, r3, #7
 8006352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006354:	4b0c      	ldr	r3, [pc, #48]	; (8006388 <__NVIC_SetPriorityGrouping+0x44>)
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006360:	4013      	ands	r3, r2
 8006362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800636c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006376:	4a04      	ldr	r2, [pc, #16]	; (8006388 <__NVIC_SetPriorityGrouping+0x44>)
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	60d3      	str	r3, [r2, #12]
}
 800637c:	bf00      	nop
 800637e:	3714      	adds	r7, #20
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr
 8006388:	e000ed00 	.word	0xe000ed00

0800638c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006390:	4b04      	ldr	r3, [pc, #16]	; (80063a4 <__NVIC_GetPriorityGrouping+0x18>)
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	0a1b      	lsrs	r3, r3, #8
 8006396:	f003 0307 	and.w	r3, r3, #7
}
 800639a:	4618      	mov	r0, r3
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr
 80063a4:	e000ed00 	.word	0xe000ed00

080063a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	4603      	mov	r3, r0
 80063b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	db0b      	blt.n	80063d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80063ba:	79fb      	ldrb	r3, [r7, #7]
 80063bc:	f003 021f 	and.w	r2, r3, #31
 80063c0:	4907      	ldr	r1, [pc, #28]	; (80063e0 <__NVIC_EnableIRQ+0x38>)
 80063c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063c6:	095b      	lsrs	r3, r3, #5
 80063c8:	2001      	movs	r0, #1
 80063ca:	fa00 f202 	lsl.w	r2, r0, r2
 80063ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80063d2:	bf00      	nop
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	e000e100 	.word	0xe000e100

080063e4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	4603      	mov	r3, r0
 80063ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	db12      	blt.n	800641c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80063f6:	79fb      	ldrb	r3, [r7, #7]
 80063f8:	f003 021f 	and.w	r2, r3, #31
 80063fc:	490a      	ldr	r1, [pc, #40]	; (8006428 <__NVIC_DisableIRQ+0x44>)
 80063fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006402:	095b      	lsrs	r3, r3, #5
 8006404:	2001      	movs	r0, #1
 8006406:	fa00 f202 	lsl.w	r2, r0, r2
 800640a:	3320      	adds	r3, #32
 800640c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006410:	f3bf 8f4f 	dsb	sy
}
 8006414:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006416:	f3bf 8f6f 	isb	sy
}
 800641a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	e000e100 	.word	0xe000e100

0800642c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	4603      	mov	r3, r0
 8006434:	6039      	str	r1, [r7, #0]
 8006436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800643c:	2b00      	cmp	r3, #0
 800643e:	db0a      	blt.n	8006456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	b2da      	uxtb	r2, r3
 8006444:	490c      	ldr	r1, [pc, #48]	; (8006478 <__NVIC_SetPriority+0x4c>)
 8006446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800644a:	0112      	lsls	r2, r2, #4
 800644c:	b2d2      	uxtb	r2, r2
 800644e:	440b      	add	r3, r1
 8006450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006454:	e00a      	b.n	800646c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	b2da      	uxtb	r2, r3
 800645a:	4908      	ldr	r1, [pc, #32]	; (800647c <__NVIC_SetPriority+0x50>)
 800645c:	79fb      	ldrb	r3, [r7, #7]
 800645e:	f003 030f 	and.w	r3, r3, #15
 8006462:	3b04      	subs	r3, #4
 8006464:	0112      	lsls	r2, r2, #4
 8006466:	b2d2      	uxtb	r2, r2
 8006468:	440b      	add	r3, r1
 800646a:	761a      	strb	r2, [r3, #24]
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr
 8006478:	e000e100 	.word	0xe000e100
 800647c:	e000ed00 	.word	0xe000ed00

08006480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006480:	b480      	push	{r7}
 8006482:	b089      	sub	sp, #36	; 0x24
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f003 0307 	and.w	r3, r3, #7
 8006492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	f1c3 0307 	rsb	r3, r3, #7
 800649a:	2b04      	cmp	r3, #4
 800649c:	bf28      	it	cs
 800649e:	2304      	movcs	r3, #4
 80064a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	3304      	adds	r3, #4
 80064a6:	2b06      	cmp	r3, #6
 80064a8:	d902      	bls.n	80064b0 <NVIC_EncodePriority+0x30>
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	3b03      	subs	r3, #3
 80064ae:	e000      	b.n	80064b2 <NVIC_EncodePriority+0x32>
 80064b0:	2300      	movs	r3, #0
 80064b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064b4:	f04f 32ff 	mov.w	r2, #4294967295
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	fa02 f303 	lsl.w	r3, r2, r3
 80064be:	43da      	mvns	r2, r3
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	401a      	ands	r2, r3
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80064c8:	f04f 31ff 	mov.w	r1, #4294967295
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	fa01 f303 	lsl.w	r3, r1, r3
 80064d2:	43d9      	mvns	r1, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064d8:	4313      	orrs	r3, r2
         );
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3724      	adds	r7, #36	; 0x24
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b082      	sub	sp, #8
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7ff ff28 	bl	8006344 <__NVIC_SetPriorityGrouping>
}
 80064f4:	bf00      	nop
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	4603      	mov	r3, r0
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
 8006508:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800650a:	2300      	movs	r3, #0
 800650c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800650e:	f7ff ff3d 	bl	800638c <__NVIC_GetPriorityGrouping>
 8006512:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	68b9      	ldr	r1, [r7, #8]
 8006518:	6978      	ldr	r0, [r7, #20]
 800651a:	f7ff ffb1 	bl	8006480 <NVIC_EncodePriority>
 800651e:	4602      	mov	r2, r0
 8006520:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006524:	4611      	mov	r1, r2
 8006526:	4618      	mov	r0, r3
 8006528:	f7ff ff80 	bl	800642c <__NVIC_SetPriority>
}
 800652c:	bf00      	nop
 800652e:	3718      	adds	r7, #24
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	4603      	mov	r3, r0
 800653c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800653e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006542:	4618      	mov	r0, r3
 8006544:	f7ff ff30 	bl	80063a8 <__NVIC_EnableIRQ>
}
 8006548:	bf00      	nop
 800654a:	3708      	adds	r7, #8
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	4603      	mov	r3, r0
 8006558:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800655a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff ff40 	bl	80063e4 <__NVIC_DisableIRQ>
}
 8006564:	bf00      	nop
 8006566:	3708      	adds	r7, #8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800656c:	b480      	push	{r7}
 800656e:	b089      	sub	sp, #36	; 0x24
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006576:	2300      	movs	r3, #0
 8006578:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800657a:	2300      	movs	r3, #0
 800657c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800657e:	2300      	movs	r3, #0
 8006580:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006582:	2300      	movs	r3, #0
 8006584:	61fb      	str	r3, [r7, #28]
 8006586:	e177      	b.n	8006878 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006588:	2201      	movs	r2, #1
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	fa02 f303 	lsl.w	r3, r2, r3
 8006590:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	4013      	ands	r3, r2
 800659a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	f040 8166 	bne.w	8006872 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f003 0303 	and.w	r3, r3, #3
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d005      	beq.n	80065be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d130      	bne.n	8006620 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	005b      	lsls	r3, r3, #1
 80065c8:	2203      	movs	r2, #3
 80065ca:	fa02 f303 	lsl.w	r3, r2, r3
 80065ce:	43db      	mvns	r3, r3
 80065d0:	69ba      	ldr	r2, [r7, #24]
 80065d2:	4013      	ands	r3, r2
 80065d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	fa02 f303 	lsl.w	r3, r2, r3
 80065e2:	69ba      	ldr	r2, [r7, #24]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80065f4:	2201      	movs	r2, #1
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	fa02 f303 	lsl.w	r3, r2, r3
 80065fc:	43db      	mvns	r3, r3
 80065fe:	69ba      	ldr	r2, [r7, #24]
 8006600:	4013      	ands	r3, r2
 8006602:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	091b      	lsrs	r3, r3, #4
 800660a:	f003 0201 	and.w	r2, r3, #1
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	fa02 f303 	lsl.w	r3, r2, r3
 8006614:	69ba      	ldr	r2, [r7, #24]
 8006616:	4313      	orrs	r3, r2
 8006618:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	69ba      	ldr	r2, [r7, #24]
 800661e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f003 0303 	and.w	r3, r3, #3
 8006628:	2b03      	cmp	r3, #3
 800662a:	d017      	beq.n	800665c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	005b      	lsls	r3, r3, #1
 8006636:	2203      	movs	r2, #3
 8006638:	fa02 f303 	lsl.w	r3, r2, r3
 800663c:	43db      	mvns	r3, r3
 800663e:	69ba      	ldr	r2, [r7, #24]
 8006640:	4013      	ands	r3, r2
 8006642:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	689a      	ldr	r2, [r3, #8]
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	005b      	lsls	r3, r3, #1
 800664c:	fa02 f303 	lsl.w	r3, r2, r3
 8006650:	69ba      	ldr	r2, [r7, #24]
 8006652:	4313      	orrs	r3, r2
 8006654:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	69ba      	ldr	r2, [r7, #24]
 800665a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f003 0303 	and.w	r3, r3, #3
 8006664:	2b02      	cmp	r3, #2
 8006666:	d123      	bne.n	80066b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	08da      	lsrs	r2, r3, #3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	3208      	adds	r2, #8
 8006670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006674:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	f003 0307 	and.w	r3, r3, #7
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	220f      	movs	r2, #15
 8006680:	fa02 f303 	lsl.w	r3, r2, r3
 8006684:	43db      	mvns	r3, r3
 8006686:	69ba      	ldr	r2, [r7, #24]
 8006688:	4013      	ands	r3, r2
 800668a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	691a      	ldr	r2, [r3, #16]
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	f003 0307 	and.w	r3, r3, #7
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	fa02 f303 	lsl.w	r3, r2, r3
 800669c:	69ba      	ldr	r2, [r7, #24]
 800669e:	4313      	orrs	r3, r2
 80066a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	08da      	lsrs	r2, r3, #3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	3208      	adds	r2, #8
 80066aa:	69b9      	ldr	r1, [r7, #24]
 80066ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	005b      	lsls	r3, r3, #1
 80066ba:	2203      	movs	r2, #3
 80066bc:	fa02 f303 	lsl.w	r3, r2, r3
 80066c0:	43db      	mvns	r3, r3
 80066c2:	69ba      	ldr	r2, [r7, #24]
 80066c4:	4013      	ands	r3, r2
 80066c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f003 0203 	and.w	r2, r3, #3
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	005b      	lsls	r3, r3, #1
 80066d4:	fa02 f303 	lsl.w	r3, r2, r3
 80066d8:	69ba      	ldr	r2, [r7, #24]
 80066da:	4313      	orrs	r3, r2
 80066dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	69ba      	ldr	r2, [r7, #24]
 80066e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f000 80c0 	beq.w	8006872 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066f2:	2300      	movs	r3, #0
 80066f4:	60fb      	str	r3, [r7, #12]
 80066f6:	4b66      	ldr	r3, [pc, #408]	; (8006890 <HAL_GPIO_Init+0x324>)
 80066f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066fa:	4a65      	ldr	r2, [pc, #404]	; (8006890 <HAL_GPIO_Init+0x324>)
 80066fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006700:	6453      	str	r3, [r2, #68]	; 0x44
 8006702:	4b63      	ldr	r3, [pc, #396]	; (8006890 <HAL_GPIO_Init+0x324>)
 8006704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800670e:	4a61      	ldr	r2, [pc, #388]	; (8006894 <HAL_GPIO_Init+0x328>)
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	089b      	lsrs	r3, r3, #2
 8006714:	3302      	adds	r3, #2
 8006716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800671a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	f003 0303 	and.w	r3, r3, #3
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	220f      	movs	r2, #15
 8006726:	fa02 f303 	lsl.w	r3, r2, r3
 800672a:	43db      	mvns	r3, r3
 800672c:	69ba      	ldr	r2, [r7, #24]
 800672e:	4013      	ands	r3, r2
 8006730:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a58      	ldr	r2, [pc, #352]	; (8006898 <HAL_GPIO_Init+0x32c>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d037      	beq.n	80067aa <HAL_GPIO_Init+0x23e>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a57      	ldr	r2, [pc, #348]	; (800689c <HAL_GPIO_Init+0x330>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d031      	beq.n	80067a6 <HAL_GPIO_Init+0x23a>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a56      	ldr	r2, [pc, #344]	; (80068a0 <HAL_GPIO_Init+0x334>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d02b      	beq.n	80067a2 <HAL_GPIO_Init+0x236>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a55      	ldr	r2, [pc, #340]	; (80068a4 <HAL_GPIO_Init+0x338>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d025      	beq.n	800679e <HAL_GPIO_Init+0x232>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a54      	ldr	r2, [pc, #336]	; (80068a8 <HAL_GPIO_Init+0x33c>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d01f      	beq.n	800679a <HAL_GPIO_Init+0x22e>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a53      	ldr	r2, [pc, #332]	; (80068ac <HAL_GPIO_Init+0x340>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d019      	beq.n	8006796 <HAL_GPIO_Init+0x22a>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a52      	ldr	r2, [pc, #328]	; (80068b0 <HAL_GPIO_Init+0x344>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d013      	beq.n	8006792 <HAL_GPIO_Init+0x226>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a51      	ldr	r2, [pc, #324]	; (80068b4 <HAL_GPIO_Init+0x348>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d00d      	beq.n	800678e <HAL_GPIO_Init+0x222>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a50      	ldr	r2, [pc, #320]	; (80068b8 <HAL_GPIO_Init+0x34c>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d007      	beq.n	800678a <HAL_GPIO_Init+0x21e>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a4f      	ldr	r2, [pc, #316]	; (80068bc <HAL_GPIO_Init+0x350>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d101      	bne.n	8006786 <HAL_GPIO_Init+0x21a>
 8006782:	2309      	movs	r3, #9
 8006784:	e012      	b.n	80067ac <HAL_GPIO_Init+0x240>
 8006786:	230a      	movs	r3, #10
 8006788:	e010      	b.n	80067ac <HAL_GPIO_Init+0x240>
 800678a:	2308      	movs	r3, #8
 800678c:	e00e      	b.n	80067ac <HAL_GPIO_Init+0x240>
 800678e:	2307      	movs	r3, #7
 8006790:	e00c      	b.n	80067ac <HAL_GPIO_Init+0x240>
 8006792:	2306      	movs	r3, #6
 8006794:	e00a      	b.n	80067ac <HAL_GPIO_Init+0x240>
 8006796:	2305      	movs	r3, #5
 8006798:	e008      	b.n	80067ac <HAL_GPIO_Init+0x240>
 800679a:	2304      	movs	r3, #4
 800679c:	e006      	b.n	80067ac <HAL_GPIO_Init+0x240>
 800679e:	2303      	movs	r3, #3
 80067a0:	e004      	b.n	80067ac <HAL_GPIO_Init+0x240>
 80067a2:	2302      	movs	r3, #2
 80067a4:	e002      	b.n	80067ac <HAL_GPIO_Init+0x240>
 80067a6:	2301      	movs	r3, #1
 80067a8:	e000      	b.n	80067ac <HAL_GPIO_Init+0x240>
 80067aa:	2300      	movs	r3, #0
 80067ac:	69fa      	ldr	r2, [r7, #28]
 80067ae:	f002 0203 	and.w	r2, r2, #3
 80067b2:	0092      	lsls	r2, r2, #2
 80067b4:	4093      	lsls	r3, r2
 80067b6:	69ba      	ldr	r2, [r7, #24]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80067bc:	4935      	ldr	r1, [pc, #212]	; (8006894 <HAL_GPIO_Init+0x328>)
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	089b      	lsrs	r3, r3, #2
 80067c2:	3302      	adds	r3, #2
 80067c4:	69ba      	ldr	r2, [r7, #24]
 80067c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80067ca:	4b3d      	ldr	r3, [pc, #244]	; (80068c0 <HAL_GPIO_Init+0x354>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	43db      	mvns	r3, r3
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	4013      	ands	r3, r2
 80067d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d003      	beq.n	80067ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80067e6:	69ba      	ldr	r2, [r7, #24]
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80067ee:	4a34      	ldr	r2, [pc, #208]	; (80068c0 <HAL_GPIO_Init+0x354>)
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80067f4:	4b32      	ldr	r3, [pc, #200]	; (80068c0 <HAL_GPIO_Init+0x354>)
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	43db      	mvns	r3, r3
 80067fe:	69ba      	ldr	r2, [r7, #24]
 8006800:	4013      	ands	r3, r2
 8006802:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d003      	beq.n	8006818 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006810:	69ba      	ldr	r2, [r7, #24]
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	4313      	orrs	r3, r2
 8006816:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006818:	4a29      	ldr	r2, [pc, #164]	; (80068c0 <HAL_GPIO_Init+0x354>)
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800681e:	4b28      	ldr	r3, [pc, #160]	; (80068c0 <HAL_GPIO_Init+0x354>)
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	43db      	mvns	r3, r3
 8006828:	69ba      	ldr	r2, [r7, #24]
 800682a:	4013      	ands	r3, r2
 800682c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800683a:	69ba      	ldr	r2, [r7, #24]
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	4313      	orrs	r3, r2
 8006840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006842:	4a1f      	ldr	r2, [pc, #124]	; (80068c0 <HAL_GPIO_Init+0x354>)
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006848:	4b1d      	ldr	r3, [pc, #116]	; (80068c0 <HAL_GPIO_Init+0x354>)
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	43db      	mvns	r3, r3
 8006852:	69ba      	ldr	r2, [r7, #24]
 8006854:	4013      	ands	r3, r2
 8006856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d003      	beq.n	800686c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006864:	69ba      	ldr	r2, [r7, #24]
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	4313      	orrs	r3, r2
 800686a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800686c:	4a14      	ldr	r2, [pc, #80]	; (80068c0 <HAL_GPIO_Init+0x354>)
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	3301      	adds	r3, #1
 8006876:	61fb      	str	r3, [r7, #28]
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	2b0f      	cmp	r3, #15
 800687c:	f67f ae84 	bls.w	8006588 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006880:	bf00      	nop
 8006882:	bf00      	nop
 8006884:	3724      	adds	r7, #36	; 0x24
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	40023800 	.word	0x40023800
 8006894:	40013800 	.word	0x40013800
 8006898:	40020000 	.word	0x40020000
 800689c:	40020400 	.word	0x40020400
 80068a0:	40020800 	.word	0x40020800
 80068a4:	40020c00 	.word	0x40020c00
 80068a8:	40021000 	.word	0x40021000
 80068ac:	40021400 	.word	0x40021400
 80068b0:	40021800 	.word	0x40021800
 80068b4:	40021c00 	.word	0x40021c00
 80068b8:	40022000 	.word	0x40022000
 80068bc:	40022400 	.word	0x40022400
 80068c0:	40013c00 	.word	0x40013c00

080068c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	460b      	mov	r3, r1
 80068ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	691a      	ldr	r2, [r3, #16]
 80068d4:	887b      	ldrh	r3, [r7, #2]
 80068d6:	4013      	ands	r3, r2
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d002      	beq.n	80068e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80068dc:	2301      	movs	r3, #1
 80068de:	73fb      	strb	r3, [r7, #15]
 80068e0:	e001      	b.n	80068e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80068e2:	2300      	movs	r3, #0
 80068e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80068e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3714      	adds	r7, #20
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	460b      	mov	r3, r1
 80068fe:	807b      	strh	r3, [r7, #2]
 8006900:	4613      	mov	r3, r2
 8006902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006904:	787b      	ldrb	r3, [r7, #1]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800690a:	887a      	ldrh	r2, [r7, #2]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006910:	e003      	b.n	800691a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006912:	887b      	ldrh	r3, [r7, #2]
 8006914:	041a      	lsls	r2, r3, #16
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	619a      	str	r2, [r3, #24]
}
 800691a:	bf00      	nop
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
	...

08006928 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	4603      	mov	r3, r0
 8006930:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006932:	4b08      	ldr	r3, [pc, #32]	; (8006954 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006934:	695a      	ldr	r2, [r3, #20]
 8006936:	88fb      	ldrh	r3, [r7, #6]
 8006938:	4013      	ands	r3, r2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d006      	beq.n	800694c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800693e:	4a05      	ldr	r2, [pc, #20]	; (8006954 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006940:	88fb      	ldrh	r3, [r7, #6]
 8006942:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006944:	88fb      	ldrh	r3, [r7, #6]
 8006946:	4618      	mov	r0, r3
 8006948:	f7fc f810 	bl	800296c <HAL_GPIO_EXTI_Callback>
  }
}
 800694c:	bf00      	nop
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	40013c00 	.word	0x40013c00

08006958 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d101      	bne.n	800696a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e12b      	b.n	8006bc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	d106      	bne.n	8006984 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7fb fa16 	bl	8001db0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2224      	movs	r2, #36	; 0x24
 8006988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f022 0201 	bic.w	r2, r2, #1
 800699a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80069bc:	f001 fd14 	bl	80083e8 <HAL_RCC_GetPCLK1Freq>
 80069c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	4a81      	ldr	r2, [pc, #516]	; (8006bcc <HAL_I2C_Init+0x274>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d807      	bhi.n	80069dc <HAL_I2C_Init+0x84>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4a80      	ldr	r2, [pc, #512]	; (8006bd0 <HAL_I2C_Init+0x278>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	bf94      	ite	ls
 80069d4:	2301      	movls	r3, #1
 80069d6:	2300      	movhi	r3, #0
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	e006      	b.n	80069ea <HAL_I2C_Init+0x92>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4a7d      	ldr	r2, [pc, #500]	; (8006bd4 <HAL_I2C_Init+0x27c>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	bf94      	ite	ls
 80069e4:	2301      	movls	r3, #1
 80069e6:	2300      	movhi	r3, #0
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e0e7      	b.n	8006bc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	4a78      	ldr	r2, [pc, #480]	; (8006bd8 <HAL_I2C_Init+0x280>)
 80069f6:	fba2 2303 	umull	r2, r3, r2, r3
 80069fa:	0c9b      	lsrs	r3, r3, #18
 80069fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6a1b      	ldr	r3, [r3, #32]
 8006a18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	4a6a      	ldr	r2, [pc, #424]	; (8006bcc <HAL_I2C_Init+0x274>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d802      	bhi.n	8006a2c <HAL_I2C_Init+0xd4>
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	e009      	b.n	8006a40 <HAL_I2C_Init+0xe8>
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006a32:	fb02 f303 	mul.w	r3, r2, r3
 8006a36:	4a69      	ldr	r2, [pc, #420]	; (8006bdc <HAL_I2C_Init+0x284>)
 8006a38:	fba2 2303 	umull	r2, r3, r2, r3
 8006a3c:	099b      	lsrs	r3, r3, #6
 8006a3e:	3301      	adds	r3, #1
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	6812      	ldr	r2, [r2, #0]
 8006a44:	430b      	orrs	r3, r1
 8006a46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006a52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	495c      	ldr	r1, [pc, #368]	; (8006bcc <HAL_I2C_Init+0x274>)
 8006a5c:	428b      	cmp	r3, r1
 8006a5e:	d819      	bhi.n	8006a94 <HAL_I2C_Init+0x13c>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	1e59      	subs	r1, r3, #1
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a6e:	1c59      	adds	r1, r3, #1
 8006a70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006a74:	400b      	ands	r3, r1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00a      	beq.n	8006a90 <HAL_I2C_Init+0x138>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	1e59      	subs	r1, r3, #1
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	005b      	lsls	r3, r3, #1
 8006a84:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a88:	3301      	adds	r3, #1
 8006a8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a8e:	e051      	b.n	8006b34 <HAL_I2C_Init+0x1dc>
 8006a90:	2304      	movs	r3, #4
 8006a92:	e04f      	b.n	8006b34 <HAL_I2C_Init+0x1dc>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d111      	bne.n	8006ac0 <HAL_I2C_Init+0x168>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	1e58      	subs	r0, r3, #1
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6859      	ldr	r1, [r3, #4]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	005b      	lsls	r3, r3, #1
 8006aa8:	440b      	add	r3, r1
 8006aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8006aae:	3301      	adds	r3, #1
 8006ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	bf0c      	ite	eq
 8006ab8:	2301      	moveq	r3, #1
 8006aba:	2300      	movne	r3, #0
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	e012      	b.n	8006ae6 <HAL_I2C_Init+0x18e>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	1e58      	subs	r0, r3, #1
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6859      	ldr	r1, [r3, #4]
 8006ac8:	460b      	mov	r3, r1
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	440b      	add	r3, r1
 8006ace:	0099      	lsls	r1, r3, #2
 8006ad0:	440b      	add	r3, r1
 8006ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	bf0c      	ite	eq
 8006ae0:	2301      	moveq	r3, #1
 8006ae2:	2300      	movne	r3, #0
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d001      	beq.n	8006aee <HAL_I2C_Init+0x196>
 8006aea:	2301      	movs	r3, #1
 8006aec:	e022      	b.n	8006b34 <HAL_I2C_Init+0x1dc>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10e      	bne.n	8006b14 <HAL_I2C_Init+0x1bc>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	1e58      	subs	r0, r3, #1
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6859      	ldr	r1, [r3, #4]
 8006afe:	460b      	mov	r3, r1
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	440b      	add	r3, r1
 8006b04:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b08:	3301      	adds	r3, #1
 8006b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b12:	e00f      	b.n	8006b34 <HAL_I2C_Init+0x1dc>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	1e58      	subs	r0, r3, #1
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6859      	ldr	r1, [r3, #4]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	440b      	add	r3, r1
 8006b22:	0099      	lsls	r1, r3, #2
 8006b24:	440b      	add	r3, r1
 8006b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b34:	6879      	ldr	r1, [r7, #4]
 8006b36:	6809      	ldr	r1, [r1, #0]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	69da      	ldr	r2, [r3, #28]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	430a      	orrs	r2, r1
 8006b56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006b62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	6911      	ldr	r1, [r2, #16]
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	68d2      	ldr	r2, [r2, #12]
 8006b6e:	4311      	orrs	r1, r2
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	6812      	ldr	r2, [r2, #0]
 8006b74:	430b      	orrs	r3, r1
 8006b76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	695a      	ldr	r2, [r3, #20]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	431a      	orrs	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	430a      	orrs	r2, r1
 8006b92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f042 0201 	orr.w	r2, r2, #1
 8006ba2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2220      	movs	r2, #32
 8006bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	000186a0 	.word	0x000186a0
 8006bd0:	001e847f 	.word	0x001e847f
 8006bd4:	003d08ff 	.word	0x003d08ff
 8006bd8:	431bde83 	.word	0x431bde83
 8006bdc:	10624dd3 	.word	0x10624dd3

08006be0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b088      	sub	sp, #32
 8006be4:	af02      	add	r7, sp, #8
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	4608      	mov	r0, r1
 8006bea:	4611      	mov	r1, r2
 8006bec:	461a      	mov	r2, r3
 8006bee:	4603      	mov	r3, r0
 8006bf0:	817b      	strh	r3, [r7, #10]
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	813b      	strh	r3, [r7, #8]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006bfa:	f7ff f901 	bl	8005e00 <HAL_GetTick>
 8006bfe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	2b20      	cmp	r3, #32
 8006c0a:	f040 80d9 	bne.w	8006dc0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	2319      	movs	r3, #25
 8006c14:	2201      	movs	r2, #1
 8006c16:	496d      	ldr	r1, [pc, #436]	; (8006dcc <HAL_I2C_Mem_Write+0x1ec>)
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 fcb5 	bl	8007588 <I2C_WaitOnFlagUntilTimeout>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d001      	beq.n	8006c28 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006c24:	2302      	movs	r3, #2
 8006c26:	e0cc      	b.n	8006dc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d101      	bne.n	8006c36 <HAL_I2C_Mem_Write+0x56>
 8006c32:	2302      	movs	r3, #2
 8006c34:	e0c5      	b.n	8006dc2 <HAL_I2C_Mem_Write+0x1e2>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0301 	and.w	r3, r3, #1
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d007      	beq.n	8006c5c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f042 0201 	orr.w	r2, r2, #1
 8006c5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2221      	movs	r2, #33	; 0x21
 8006c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2240      	movs	r2, #64	; 0x40
 8006c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6a3a      	ldr	r2, [r7, #32]
 8006c86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	4a4d      	ldr	r2, [pc, #308]	; (8006dd0 <HAL_I2C_Mem_Write+0x1f0>)
 8006c9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c9e:	88f8      	ldrh	r0, [r7, #6]
 8006ca0:	893a      	ldrh	r2, [r7, #8]
 8006ca2:	8979      	ldrh	r1, [r7, #10]
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	9301      	str	r3, [sp, #4]
 8006ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	4603      	mov	r3, r0
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f000 faec 	bl	800728c <I2C_RequestMemoryWrite>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d052      	beq.n	8006d60 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e081      	b.n	8006dc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cbe:	697a      	ldr	r2, [r7, #20]
 8006cc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f000 fd36 	bl	8007734 <I2C_WaitOnTXEFlagUntilTimeout>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00d      	beq.n	8006cea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd2:	2b04      	cmp	r3, #4
 8006cd4:	d107      	bne.n	8006ce6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ce4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e06b      	b.n	8006dc2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cee:	781a      	ldrb	r2, [r3, #0]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfa:	1c5a      	adds	r2, r3, #1
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d04:	3b01      	subs	r3, #1
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	3b01      	subs	r3, #1
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	f003 0304 	and.w	r3, r3, #4
 8006d24:	2b04      	cmp	r3, #4
 8006d26:	d11b      	bne.n	8006d60 <HAL_I2C_Mem_Write+0x180>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d017      	beq.n	8006d60 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d34:	781a      	ldrb	r2, [r3, #0]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d40:	1c5a      	adds	r2, r3, #1
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1aa      	bne.n	8006cbe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f000 fd22 	bl	80077b6 <I2C_WaitOnBTFFlagUntilTimeout>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00d      	beq.n	8006d94 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7c:	2b04      	cmp	r3, #4
 8006d7e:	d107      	bne.n	8006d90 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d8e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e016      	b.n	8006dc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006da2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2220      	movs	r2, #32
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	e000      	b.n	8006dc2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006dc0:	2302      	movs	r3, #2
  }
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3718      	adds	r7, #24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	00100002 	.word	0x00100002
 8006dd0:	ffff0000 	.word	0xffff0000

08006dd4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b08c      	sub	sp, #48	; 0x30
 8006dd8:	af02      	add	r7, sp, #8
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	4608      	mov	r0, r1
 8006dde:	4611      	mov	r1, r2
 8006de0:	461a      	mov	r2, r3
 8006de2:	4603      	mov	r3, r0
 8006de4:	817b      	strh	r3, [r7, #10]
 8006de6:	460b      	mov	r3, r1
 8006de8:	813b      	strh	r3, [r7, #8]
 8006dea:	4613      	mov	r3, r2
 8006dec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006dee:	f7ff f807 	bl	8005e00 <HAL_GetTick>
 8006df2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	2b20      	cmp	r3, #32
 8006dfe:	f040 8208 	bne.w	8007212 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	2319      	movs	r3, #25
 8006e08:	2201      	movs	r2, #1
 8006e0a:	497b      	ldr	r1, [pc, #492]	; (8006ff8 <HAL_I2C_Mem_Read+0x224>)
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f000 fbbb 	bl	8007588 <I2C_WaitOnFlagUntilTimeout>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d001      	beq.n	8006e1c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006e18:	2302      	movs	r3, #2
 8006e1a:	e1fb      	b.n	8007214 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d101      	bne.n	8006e2a <HAL_I2C_Mem_Read+0x56>
 8006e26:	2302      	movs	r3, #2
 8006e28:	e1f4      	b.n	8007214 <HAL_I2C_Mem_Read+0x440>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0301 	and.w	r3, r3, #1
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d007      	beq.n	8006e50 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f042 0201 	orr.w	r2, r2, #1
 8006e4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2222      	movs	r2, #34	; 0x22
 8006e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2240      	movs	r2, #64	; 0x40
 8006e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006e80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4a5b      	ldr	r2, [pc, #364]	; (8006ffc <HAL_I2C_Mem_Read+0x228>)
 8006e90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e92:	88f8      	ldrh	r0, [r7, #6]
 8006e94:	893a      	ldrh	r2, [r7, #8]
 8006e96:	8979      	ldrh	r1, [r7, #10]
 8006e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9a:	9301      	str	r3, [sp, #4]
 8006e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f000 fa88 	bl	80073b8 <I2C_RequestMemoryRead>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e1b0      	b.n	8007214 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d113      	bne.n	8006ee2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006eba:	2300      	movs	r3, #0
 8006ebc:	623b      	str	r3, [r7, #32]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	695b      	ldr	r3, [r3, #20]
 8006ec4:	623b      	str	r3, [r7, #32]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	623b      	str	r3, [r7, #32]
 8006ece:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ede:	601a      	str	r2, [r3, #0]
 8006ee0:	e184      	b.n	80071ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d11b      	bne.n	8006f22 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ef8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006efa:	2300      	movs	r3, #0
 8006efc:	61fb      	str	r3, [r7, #28]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	61fb      	str	r3, [r7, #28]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	61fb      	str	r3, [r7, #28]
 8006f0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f1e:	601a      	str	r2, [r3, #0]
 8006f20:	e164      	b.n	80071ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d11b      	bne.n	8006f62 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f38:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	61bb      	str	r3, [r7, #24]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	695b      	ldr	r3, [r3, #20]
 8006f54:	61bb      	str	r3, [r7, #24]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	61bb      	str	r3, [r7, #24]
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	e144      	b.n	80071ec <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f62:	2300      	movs	r3, #0
 8006f64:	617b      	str	r3, [r7, #20]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	617b      	str	r3, [r7, #20]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	617b      	str	r3, [r7, #20]
 8006f76:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006f78:	e138      	b.n	80071ec <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f7e:	2b03      	cmp	r3, #3
 8006f80:	f200 80f1 	bhi.w	8007166 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d123      	bne.n	8006fd4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f000 fc51 	bl	8007838 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d001      	beq.n	8006fa0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e139      	b.n	8007214 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	691a      	ldr	r2, [r3, #16]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006faa:	b2d2      	uxtb	r2, r2
 8006fac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb2:	1c5a      	adds	r2, r3, #1
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006fd2:	e10b      	b.n	80071ec <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d14e      	bne.n	800707a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fde:	9300      	str	r3, [sp, #0]
 8006fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	4906      	ldr	r1, [pc, #24]	; (8007000 <HAL_I2C_Mem_Read+0x22c>)
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f000 face 	bl	8007588 <I2C_WaitOnFlagUntilTimeout>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d008      	beq.n	8007004 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e10e      	b.n	8007214 <HAL_I2C_Mem_Read+0x440>
 8006ff6:	bf00      	nop
 8006ff8:	00100002 	.word	0x00100002
 8006ffc:	ffff0000 	.word	0xffff0000
 8007000:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007012:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	691a      	ldr	r2, [r3, #16]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701e:	b2d2      	uxtb	r2, r2
 8007020:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007026:	1c5a      	adds	r2, r3, #1
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007030:	3b01      	subs	r3, #1
 8007032:	b29a      	uxth	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800703c:	b29b      	uxth	r3, r3
 800703e:	3b01      	subs	r3, #1
 8007040:	b29a      	uxth	r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	691a      	ldr	r2, [r3, #16]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007050:	b2d2      	uxtb	r2, r2
 8007052:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007058:	1c5a      	adds	r2, r3, #1
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007062:	3b01      	subs	r3, #1
 8007064:	b29a      	uxth	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800706e:	b29b      	uxth	r3, r3
 8007070:	3b01      	subs	r3, #1
 8007072:	b29a      	uxth	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007078:	e0b8      	b.n	80071ec <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007080:	2200      	movs	r2, #0
 8007082:	4966      	ldr	r1, [pc, #408]	; (800721c <HAL_I2C_Mem_Read+0x448>)
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f000 fa7f 	bl	8007588 <I2C_WaitOnFlagUntilTimeout>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d001      	beq.n	8007094 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	e0bf      	b.n	8007214 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	691a      	ldr	r2, [r3, #16]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ae:	b2d2      	uxtb	r2, r2
 80070b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b6:	1c5a      	adds	r2, r3, #1
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070c0:	3b01      	subs	r3, #1
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	3b01      	subs	r3, #1
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80070d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d8:	9300      	str	r3, [sp, #0]
 80070da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070dc:	2200      	movs	r2, #0
 80070de:	494f      	ldr	r1, [pc, #316]	; (800721c <HAL_I2C_Mem_Read+0x448>)
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f000 fa51 	bl	8007588 <I2C_WaitOnFlagUntilTimeout>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d001      	beq.n	80070f0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e091      	b.n	8007214 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	691a      	ldr	r2, [r3, #16]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710a:	b2d2      	uxtb	r2, r2
 800710c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007112:	1c5a      	adds	r2, r3, #1
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800711c:	3b01      	subs	r3, #1
 800711e:	b29a      	uxth	r2, r3
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007128:	b29b      	uxth	r3, r3
 800712a:	3b01      	subs	r3, #1
 800712c:	b29a      	uxth	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	691a      	ldr	r2, [r3, #16]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713c:	b2d2      	uxtb	r2, r2
 800713e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007144:	1c5a      	adds	r2, r3, #1
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800714e:	3b01      	subs	r3, #1
 8007150:	b29a      	uxth	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800715a:	b29b      	uxth	r3, r3
 800715c:	3b01      	subs	r3, #1
 800715e:	b29a      	uxth	r2, r3
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007164:	e042      	b.n	80071ec <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007168:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f000 fb64 	bl	8007838 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d001      	beq.n	800717a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e04c      	b.n	8007214 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	691a      	ldr	r2, [r3, #16]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007184:	b2d2      	uxtb	r2, r2
 8007186:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718c:	1c5a      	adds	r2, r3, #1
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007196:	3b01      	subs	r3, #1
 8007198:	b29a      	uxth	r2, r3
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	3b01      	subs	r3, #1
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	f003 0304 	and.w	r3, r3, #4
 80071b6:	2b04      	cmp	r3, #4
 80071b8:	d118      	bne.n	80071ec <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	691a      	ldr	r2, [r3, #16]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c4:	b2d2      	uxtb	r2, r2
 80071c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071cc:	1c5a      	adds	r2, r3, #1
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071d6:	3b01      	subs	r3, #1
 80071d8:	b29a      	uxth	r2, r3
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	3b01      	subs	r3, #1
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f47f aec2 	bne.w	8006f7a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2220      	movs	r2, #32
 80071fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	e000      	b.n	8007214 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007212:	2302      	movs	r3, #2
  }
}
 8007214:	4618      	mov	r0, r3
 8007216:	3728      	adds	r7, #40	; 0x28
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	00010004 	.word	0x00010004

08007220 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b20      	cmp	r3, #32
 8007232:	d124      	bne.n	800727e <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2228      	movs	r2, #40	; 0x28
 8007238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	2b01      	cmp	r3, #1
 8007248:	d007      	beq.n	800725a <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f042 0201 	orr.w	r2, r2, #1
 8007258:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007268:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	685a      	ldr	r2, [r3, #4]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8007278:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800727a:	2300      	movs	r3, #0
 800727c:	e000      	b.n	8007280 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800727e:	2302      	movs	r3, #2
  }
}
 8007280:	4618      	mov	r0, r3
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b088      	sub	sp, #32
 8007290:	af02      	add	r7, sp, #8
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	4608      	mov	r0, r1
 8007296:	4611      	mov	r1, r2
 8007298:	461a      	mov	r2, r3
 800729a:	4603      	mov	r3, r0
 800729c:	817b      	strh	r3, [r7, #10]
 800729e:	460b      	mov	r3, r1
 80072a0:	813b      	strh	r3, [r7, #8]
 80072a2:	4613      	mov	r3, r2
 80072a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80072b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b8:	9300      	str	r3, [sp, #0]
 80072ba:	6a3b      	ldr	r3, [r7, #32]
 80072bc:	2200      	movs	r2, #0
 80072be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f000 f960 	bl	8007588 <I2C_WaitOnFlagUntilTimeout>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00d      	beq.n	80072ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072dc:	d103      	bne.n	80072e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e05f      	b.n	80073aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80072ea:	897b      	ldrh	r3, [r7, #10]
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	461a      	mov	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80072f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fc:	6a3a      	ldr	r2, [r7, #32]
 80072fe:	492d      	ldr	r1, [pc, #180]	; (80073b4 <I2C_RequestMemoryWrite+0x128>)
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f000 f998 	bl	8007636 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d001      	beq.n	8007310 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e04c      	b.n	80073aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007310:	2300      	movs	r3, #0
 8007312:	617b      	str	r3, [r7, #20]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	617b      	str	r3, [r7, #20]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	617b      	str	r3, [r7, #20]
 8007324:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007328:	6a39      	ldr	r1, [r7, #32]
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f000 fa02 	bl	8007734 <I2C_WaitOnTXEFlagUntilTimeout>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00d      	beq.n	8007352 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733a:	2b04      	cmp	r3, #4
 800733c:	d107      	bne.n	800734e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800734c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e02b      	b.n	80073aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007352:	88fb      	ldrh	r3, [r7, #6]
 8007354:	2b01      	cmp	r3, #1
 8007356:	d105      	bne.n	8007364 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007358:	893b      	ldrh	r3, [r7, #8]
 800735a:	b2da      	uxtb	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	611a      	str	r2, [r3, #16]
 8007362:	e021      	b.n	80073a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007364:	893b      	ldrh	r3, [r7, #8]
 8007366:	0a1b      	lsrs	r3, r3, #8
 8007368:	b29b      	uxth	r3, r3
 800736a:	b2da      	uxtb	r2, r3
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007374:	6a39      	ldr	r1, [r7, #32]
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f000 f9dc 	bl	8007734 <I2C_WaitOnTXEFlagUntilTimeout>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00d      	beq.n	800739e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007386:	2b04      	cmp	r3, #4
 8007388:	d107      	bne.n	800739a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007398:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e005      	b.n	80073aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800739e:	893b      	ldrh	r3, [r7, #8]
 80073a0:	b2da      	uxtb	r2, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3718      	adds	r7, #24
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	00010002 	.word	0x00010002

080073b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b088      	sub	sp, #32
 80073bc:	af02      	add	r7, sp, #8
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	4608      	mov	r0, r1
 80073c2:	4611      	mov	r1, r2
 80073c4:	461a      	mov	r2, r3
 80073c6:	4603      	mov	r3, r0
 80073c8:	817b      	strh	r3, [r7, #10]
 80073ca:	460b      	mov	r3, r1
 80073cc:	813b      	strh	r3, [r7, #8]
 80073ce:	4613      	mov	r3, r2
 80073d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	6a3b      	ldr	r3, [r7, #32]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f000 f8c2 	bl	8007588 <I2C_WaitOnFlagUntilTimeout>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00d      	beq.n	8007426 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007418:	d103      	bne.n	8007422 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007420:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e0aa      	b.n	800757c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007426:	897b      	ldrh	r3, [r7, #10]
 8007428:	b2db      	uxtb	r3, r3
 800742a:	461a      	mov	r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007434:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007438:	6a3a      	ldr	r2, [r7, #32]
 800743a:	4952      	ldr	r1, [pc, #328]	; (8007584 <I2C_RequestMemoryRead+0x1cc>)
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f000 f8fa 	bl	8007636 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d001      	beq.n	800744c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e097      	b.n	800757c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800744c:	2300      	movs	r3, #0
 800744e:	617b      	str	r3, [r7, #20]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	617b      	str	r3, [r7, #20]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	617b      	str	r3, [r7, #20]
 8007460:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007464:	6a39      	ldr	r1, [r7, #32]
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f000 f964 	bl	8007734 <I2C_WaitOnTXEFlagUntilTimeout>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00d      	beq.n	800748e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007476:	2b04      	cmp	r3, #4
 8007478:	d107      	bne.n	800748a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007488:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e076      	b.n	800757c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800748e:	88fb      	ldrh	r3, [r7, #6]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d105      	bne.n	80074a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007494:	893b      	ldrh	r3, [r7, #8]
 8007496:	b2da      	uxtb	r2, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	611a      	str	r2, [r3, #16]
 800749e:	e021      	b.n	80074e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80074a0:	893b      	ldrh	r3, [r7, #8]
 80074a2:	0a1b      	lsrs	r3, r3, #8
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	b2da      	uxtb	r2, r3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074b0:	6a39      	ldr	r1, [r7, #32]
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f000 f93e 	bl	8007734 <I2C_WaitOnTXEFlagUntilTimeout>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00d      	beq.n	80074da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c2:	2b04      	cmp	r3, #4
 80074c4:	d107      	bne.n	80074d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e050      	b.n	800757c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80074da:	893b      	ldrh	r3, [r7, #8]
 80074dc:	b2da      	uxtb	r2, r3
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074e6:	6a39      	ldr	r1, [r7, #32]
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f000 f923 	bl	8007734 <I2C_WaitOnTXEFlagUntilTimeout>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00d      	beq.n	8007510 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f8:	2b04      	cmp	r3, #4
 80074fa:	d107      	bne.n	800750c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800750a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e035      	b.n	800757c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800751e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007522:	9300      	str	r3, [sp, #0]
 8007524:	6a3b      	ldr	r3, [r7, #32]
 8007526:	2200      	movs	r2, #0
 8007528:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f000 f82b 	bl	8007588 <I2C_WaitOnFlagUntilTimeout>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00d      	beq.n	8007554 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007546:	d103      	bne.n	8007550 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800754e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007550:	2303      	movs	r3, #3
 8007552:	e013      	b.n	800757c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007554:	897b      	ldrh	r3, [r7, #10]
 8007556:	b2db      	uxtb	r3, r3
 8007558:	f043 0301 	orr.w	r3, r3, #1
 800755c:	b2da      	uxtb	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007566:	6a3a      	ldr	r2, [r7, #32]
 8007568:	4906      	ldr	r1, [pc, #24]	; (8007584 <I2C_RequestMemoryRead+0x1cc>)
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f000 f863 	bl	8007636 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e000      	b.n	800757c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3718      	adds	r7, #24
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	00010002 	.word	0x00010002

08007588 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	603b      	str	r3, [r7, #0]
 8007594:	4613      	mov	r3, r2
 8007596:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007598:	e025      	b.n	80075e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a0:	d021      	beq.n	80075e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075a2:	f7fe fc2d 	bl	8005e00 <HAL_GetTick>
 80075a6:	4602      	mov	r2, r0
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	683a      	ldr	r2, [r7, #0]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d302      	bcc.n	80075b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d116      	bne.n	80075e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2200      	movs	r2, #0
 80075bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2220      	movs	r2, #32
 80075c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d2:	f043 0220 	orr.w	r2, r3, #32
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e023      	b.n	800762e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	0c1b      	lsrs	r3, r3, #16
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d10d      	bne.n	800760c <I2C_WaitOnFlagUntilTimeout+0x84>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	43da      	mvns	r2, r3
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	4013      	ands	r3, r2
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	2b00      	cmp	r3, #0
 8007600:	bf0c      	ite	eq
 8007602:	2301      	moveq	r3, #1
 8007604:	2300      	movne	r3, #0
 8007606:	b2db      	uxtb	r3, r3
 8007608:	461a      	mov	r2, r3
 800760a:	e00c      	b.n	8007626 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	43da      	mvns	r2, r3
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	4013      	ands	r3, r2
 8007618:	b29b      	uxth	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	bf0c      	ite	eq
 800761e:	2301      	moveq	r3, #1
 8007620:	2300      	movne	r3, #0
 8007622:	b2db      	uxtb	r3, r3
 8007624:	461a      	mov	r2, r3
 8007626:	79fb      	ldrb	r3, [r7, #7]
 8007628:	429a      	cmp	r2, r3
 800762a:	d0b6      	beq.n	800759a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b084      	sub	sp, #16
 800763a:	af00      	add	r7, sp, #0
 800763c:	60f8      	str	r0, [r7, #12]
 800763e:	60b9      	str	r1, [r7, #8]
 8007640:	607a      	str	r2, [r7, #4]
 8007642:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007644:	e051      	b.n	80076ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	695b      	ldr	r3, [r3, #20]
 800764c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007654:	d123      	bne.n	800769e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007664:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800766e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2200      	movs	r2, #0
 8007674:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2220      	movs	r2, #32
 800767a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768a:	f043 0204 	orr.w	r2, r3, #4
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e046      	b.n	800772c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a4:	d021      	beq.n	80076ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076a6:	f7fe fbab 	bl	8005e00 <HAL_GetTick>
 80076aa:	4602      	mov	r2, r0
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	1ad3      	subs	r3, r2, r3
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d302      	bcc.n	80076bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d116      	bne.n	80076ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2220      	movs	r2, #32
 80076c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d6:	f043 0220 	orr.w	r2, r3, #32
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e020      	b.n	800772c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	0c1b      	lsrs	r3, r3, #16
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d10c      	bne.n	800770e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	43da      	mvns	r2, r3
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	4013      	ands	r3, r2
 8007700:	b29b      	uxth	r3, r3
 8007702:	2b00      	cmp	r3, #0
 8007704:	bf14      	ite	ne
 8007706:	2301      	movne	r3, #1
 8007708:	2300      	moveq	r3, #0
 800770a:	b2db      	uxtb	r3, r3
 800770c:	e00b      	b.n	8007726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	43da      	mvns	r2, r3
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	4013      	ands	r3, r2
 800771a:	b29b      	uxth	r3, r3
 800771c:	2b00      	cmp	r3, #0
 800771e:	bf14      	ite	ne
 8007720:	2301      	movne	r3, #1
 8007722:	2300      	moveq	r3, #0
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b00      	cmp	r3, #0
 8007728:	d18d      	bne.n	8007646 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007740:	e02d      	b.n	800779e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f000 f8ce 	bl	80078e4 <I2C_IsAcknowledgeFailed>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e02d      	b.n	80077ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007758:	d021      	beq.n	800779e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800775a:	f7fe fb51 	bl	8005e00 <HAL_GetTick>
 800775e:	4602      	mov	r2, r0
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	429a      	cmp	r2, r3
 8007768:	d302      	bcc.n	8007770 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d116      	bne.n	800779e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2220      	movs	r2, #32
 800777a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778a:	f043 0220 	orr.w	r2, r3, #32
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e007      	b.n	80077ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077a8:	2b80      	cmp	r3, #128	; 0x80
 80077aa:	d1ca      	bne.n	8007742 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b084      	sub	sp, #16
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	60f8      	str	r0, [r7, #12]
 80077be:	60b9      	str	r1, [r7, #8]
 80077c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80077c2:	e02d      	b.n	8007820 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f000 f88d 	bl	80078e4 <I2C_IsAcknowledgeFailed>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d001      	beq.n	80077d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e02d      	b.n	8007830 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077da:	d021      	beq.n	8007820 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077dc:	f7fe fb10 	bl	8005e00 <HAL_GetTick>
 80077e0:	4602      	mov	r2, r0
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	68ba      	ldr	r2, [r7, #8]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d302      	bcc.n	80077f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d116      	bne.n	8007820 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2220      	movs	r2, #32
 80077fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2200      	movs	r2, #0
 8007804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780c:	f043 0220 	orr.w	r2, r3, #32
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	e007      	b.n	8007830 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	695b      	ldr	r3, [r3, #20]
 8007826:	f003 0304 	and.w	r3, r3, #4
 800782a:	2b04      	cmp	r3, #4
 800782c:	d1ca      	bne.n	80077c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3710      	adds	r7, #16
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007844:	e042      	b.n	80078cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	695b      	ldr	r3, [r3, #20]
 800784c:	f003 0310 	and.w	r3, r3, #16
 8007850:	2b10      	cmp	r3, #16
 8007852:	d119      	bne.n	8007888 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f06f 0210 	mvn.w	r2, #16
 800785c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2200      	movs	r2, #0
 8007862:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2220      	movs	r2, #32
 8007868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	e029      	b.n	80078dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007888:	f7fe faba 	bl	8005e00 <HAL_GetTick>
 800788c:	4602      	mov	r2, r0
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	429a      	cmp	r2, r3
 8007896:	d302      	bcc.n	800789e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d116      	bne.n	80078cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2220      	movs	r2, #32
 80078a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b8:	f043 0220 	orr.w	r2, r3, #32
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e007      	b.n	80078dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d6:	2b40      	cmp	r3, #64	; 0x40
 80078d8:	d1b5      	bne.n	8007846 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3710      	adds	r7, #16
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078fa:	d11b      	bne.n	8007934 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007904:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2220      	movs	r2, #32
 8007910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007920:	f043 0204 	orr.w	r2, r3, #4
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	e000      	b.n	8007936 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	370c      	adds	r7, #12
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr

08007942 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007942:	b480      	push	{r7}
 8007944:	b083      	sub	sp, #12
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007952:	b2db      	uxtb	r3, r3
 8007954:	2b20      	cmp	r3, #32
 8007956:	d129      	bne.n	80079ac <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2224      	movs	r2, #36	; 0x24
 800795c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f022 0201 	bic.w	r2, r2, #1
 800796e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f022 0210 	bic.w	r2, r2, #16
 800797e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	430a      	orrs	r2, r1
 800798e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f042 0201 	orr.w	r2, r2, #1
 800799e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2220      	movs	r2, #32
 80079a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80079a8:	2300      	movs	r3, #0
 80079aa:	e000      	b.n	80079ae <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80079ac:	2302      	movs	r3, #2
  }
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	370c      	adds	r7, #12
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr

080079ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80079ba:	b480      	push	{r7}
 80079bc:	b085      	sub	sp, #20
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
 80079c2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80079c4:	2300      	movs	r3, #0
 80079c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	2b20      	cmp	r3, #32
 80079d2:	d12a      	bne.n	8007a2a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2224      	movs	r2, #36	; 0x24
 80079d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f022 0201 	bic.w	r2, r2, #1
 80079ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80079f4:	89fb      	ldrh	r3, [r7, #14]
 80079f6:	f023 030f 	bic.w	r3, r3, #15
 80079fa:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	89fb      	ldrh	r3, [r7, #14]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	89fa      	ldrh	r2, [r7, #14]
 8007a0c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f042 0201 	orr.w	r2, r2, #1
 8007a1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2220      	movs	r2, #32
 8007a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	e000      	b.n	8007a2c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007a2a:	2302      	movs	r3, #2
  }
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3714      	adds	r7, #20
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8007a40:	4b05      	ldr	r3, [pc, #20]	; (8007a58 <HAL_PWR_EnableWakeUpPin+0x20>)
 8007a42:	685a      	ldr	r2, [r3, #4]
 8007a44:	4904      	ldr	r1, [pc, #16]	; (8007a58 <HAL_PWR_EnableWakeUpPin+0x20>)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	604b      	str	r3, [r1, #4]
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr
 8007a58:	40007000 	.word	0x40007000

08007a5c <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8007a64:	4b06      	ldr	r3, [pc, #24]	; (8007a80 <HAL_PWR_DisableWakeUpPin+0x24>)
 8007a66:	685a      	ldr	r2, [r3, #4]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	43db      	mvns	r3, r3
 8007a6c:	4904      	ldr	r1, [pc, #16]	; (8007a80 <HAL_PWR_DisableWakeUpPin+0x24>)
 8007a6e:	4013      	ands	r3, r2
 8007a70:	604b      	str	r3, [r1, #4]
}
 8007a72:	bf00      	nop
 8007a74:	370c      	adds	r7, #12
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	40007000 	.word	0x40007000

08007a84 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8007a84:	b480      	push	{r7}
 8007a86:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8007a88:	4b08      	ldr	r3, [pc, #32]	; (8007aac <HAL_PWR_EnterSTANDBYMode+0x28>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a07      	ldr	r2, [pc, #28]	; (8007aac <HAL_PWR_EnterSTANDBYMode+0x28>)
 8007a8e:	f043 0302 	orr.w	r3, r3, #2
 8007a92:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007a94:	4b06      	ldr	r3, [pc, #24]	; (8007ab0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	4a05      	ldr	r2, [pc, #20]	; (8007ab0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8007a9a:	f043 0304 	orr.w	r3, r3, #4
 8007a9e:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8007aa0:	bf30      	wfi
}
 8007aa2:	bf00      	nop
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	40007000 	.word	0x40007000
 8007ab0:	e000ed00 	.word	0xe000ed00

08007ab4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007aba:	2300      	movs	r3, #0
 8007abc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007abe:	2300      	movs	r3, #0
 8007ac0:	603b      	str	r3, [r7, #0]
 8007ac2:	4b20      	ldr	r3, [pc, #128]	; (8007b44 <HAL_PWREx_EnableOverDrive+0x90>)
 8007ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac6:	4a1f      	ldr	r2, [pc, #124]	; (8007b44 <HAL_PWREx_EnableOverDrive+0x90>)
 8007ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007acc:	6413      	str	r3, [r2, #64]	; 0x40
 8007ace:	4b1d      	ldr	r3, [pc, #116]	; (8007b44 <HAL_PWREx_EnableOverDrive+0x90>)
 8007ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ad6:	603b      	str	r3, [r7, #0]
 8007ad8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007ada:	4b1b      	ldr	r3, [pc, #108]	; (8007b48 <HAL_PWREx_EnableOverDrive+0x94>)
 8007adc:	2201      	movs	r2, #1
 8007ade:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007ae0:	f7fe f98e 	bl	8005e00 <HAL_GetTick>
 8007ae4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007ae6:	e009      	b.n	8007afc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007ae8:	f7fe f98a 	bl	8005e00 <HAL_GetTick>
 8007aec:	4602      	mov	r2, r0
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007af6:	d901      	bls.n	8007afc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e01f      	b.n	8007b3c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007afc:	4b13      	ldr	r3, [pc, #76]	; (8007b4c <HAL_PWREx_EnableOverDrive+0x98>)
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b08:	d1ee      	bne.n	8007ae8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007b0a:	4b11      	ldr	r3, [pc, #68]	; (8007b50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b10:	f7fe f976 	bl	8005e00 <HAL_GetTick>
 8007b14:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007b16:	e009      	b.n	8007b2c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007b18:	f7fe f972 	bl	8005e00 <HAL_GetTick>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b26:	d901      	bls.n	8007b2c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	e007      	b.n	8007b3c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007b2c:	4b07      	ldr	r3, [pc, #28]	; (8007b4c <HAL_PWREx_EnableOverDrive+0x98>)
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b38:	d1ee      	bne.n	8007b18 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	40023800 	.word	0x40023800
 8007b48:	420e0040 	.word	0x420e0040
 8007b4c:	40007000 	.word	0x40007000
 8007b50:	420e0044 	.word	0x420e0044

08007b54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b086      	sub	sp, #24
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d101      	bne.n	8007b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e264      	b.n	8008030 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d075      	beq.n	8007c5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007b72:	4ba3      	ldr	r3, [pc, #652]	; (8007e00 <HAL_RCC_OscConfig+0x2ac>)
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	f003 030c 	and.w	r3, r3, #12
 8007b7a:	2b04      	cmp	r3, #4
 8007b7c:	d00c      	beq.n	8007b98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b7e:	4ba0      	ldr	r3, [pc, #640]	; (8007e00 <HAL_RCC_OscConfig+0x2ac>)
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007b86:	2b08      	cmp	r3, #8
 8007b88:	d112      	bne.n	8007bb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b8a:	4b9d      	ldr	r3, [pc, #628]	; (8007e00 <HAL_RCC_OscConfig+0x2ac>)
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b96:	d10b      	bne.n	8007bb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b98:	4b99      	ldr	r3, [pc, #612]	; (8007e00 <HAL_RCC_OscConfig+0x2ac>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d05b      	beq.n	8007c5c <HAL_RCC_OscConfig+0x108>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d157      	bne.n	8007c5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e23f      	b.n	8008030 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bb8:	d106      	bne.n	8007bc8 <HAL_RCC_OscConfig+0x74>
 8007bba:	4b91      	ldr	r3, [pc, #580]	; (8007e00 <HAL_RCC_OscConfig+0x2ac>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a90      	ldr	r2, [pc, #576]	; (8007e00 <HAL_RCC_OscConfig+0x2ac>)
 8007bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bc4:	6013      	str	r3, [r2, #0]
 8007bc6:	e01d      	b.n	8007c04 <HAL_RCC_OscConfig+0xb0>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007bd0:	d10c      	bne.n	8007bec <HAL_RCC_OscConfig+0x98>
 8007bd2:	4b8b      	ldr	r3, [pc, #556]	; (8007e00 <HAL_RCC_OscConfig+0x2ac>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a8a      	ldr	r2, [pc, #552]	; (8007e00 <HAL_RCC_OscConfig+0x2ac>)
 8007bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007bdc:	6013      	str	r3, [r2, #0]
 8007bde:	4b88      	ldr	r3, [pc, #544]	; (8007e00 <HAL_RCC_OscConfig+0x2ac>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a87      	ldr	r2, [pc, #540]	; (8007e00 <HAL_RCC_OscConfig+0x2ac>)
 8007be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007be8:	6013      	str	r3, [r2, #0]
 8007bea:	e00b      	b.n	8007c04 <HAL_RCC_OscConfig+0xb0>
 8007bec:	4b84      	ldr	r3, [pc, #528]	; (8007e00 <HAL_RCC_OscConfig+0x2ac>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a83      	ldr	r2, [pc, #524]	; (8007e00 <HAL_RCC_OscConfig+0x2ac>)
 8007bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bf6:	6013      	str	r3, [r2, #0]
 8007bf8:	4b81      	ldr	r3, [pc, #516]	; (8007e00 <HAL_RCC_OscConfig+0x2ac>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a80      	ldr	r2, [pc, #512]	; (8007e00 <HAL_RCC_OscConfig+0x2ac>)
 8007bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d013      	beq.n	8007c34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c0c:	f7fe f8f8 	bl	8005e00 <HAL_GetTick>
 8007c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c12:	e008      	b.n	8007c26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c14:	f7fe f8f4 	bl	8005e00 <HAL_GetTick>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	1ad3      	subs	r3, r2, r3
 8007c1e:	2b64      	cmp	r3, #100	; 0x64
 8007c20:	d901      	bls.n	8007c26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e204      	b.n	8008030 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c26:	4b76      	ldr	r3, [pc, #472]	; (8007e00 <HAL_RCC_OscConfig+0x2ac>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d0f0      	beq.n	8007c14 <HAL_RCC_OscConfig+0xc0>
 8007c32:	e014      	b.n	8007c5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c34:	f7fe f8e4 	bl	8005e00 <HAL_GetTick>
 8007c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c3a:	e008      	b.n	8007c4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c3c:	f7fe f8e0 	bl	8005e00 <HAL_GetTick>
 8007c40:	4602      	mov	r2, r0
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	2b64      	cmp	r3, #100	; 0x64
 8007c48:	d901      	bls.n	8007c4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	e1f0      	b.n	8008030 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c4e:	4b6c      	ldr	r3, [pc, #432]	; (8007e00 <HAL_RCC_OscConfig+0x2ac>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1f0      	bne.n	8007c3c <HAL_RCC_OscConfig+0xe8>
 8007c5a:	e000      	b.n	8007c5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 0302 	and.w	r3, r3, #2
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d063      	beq.n	8007d32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007c6a:	4b65      	ldr	r3, [pc, #404]	; (8007e00 <HAL_RCC_OscConfig+0x2ac>)
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	f003 030c 	and.w	r3, r3, #12
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00b      	beq.n	8007c8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c76:	4b62      	ldr	r3, [pc, #392]	; (8007e00 <HAL_RCC_OscConfig+0x2ac>)
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007c7e:	2b08      	cmp	r3, #8
 8007c80:	d11c      	bne.n	8007cbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c82:	4b5f      	ldr	r3, [pc, #380]	; (8007e00 <HAL_RCC_OscConfig+0x2ac>)
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d116      	bne.n	8007cbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c8e:	4b5c      	ldr	r3, [pc, #368]	; (8007e00 <HAL_RCC_OscConfig+0x2ac>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 0302 	and.w	r3, r3, #2
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d005      	beq.n	8007ca6 <HAL_RCC_OscConfig+0x152>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d001      	beq.n	8007ca6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e1c4      	b.n	8008030 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ca6:	4b56      	ldr	r3, [pc, #344]	; (8007e00 <HAL_RCC_OscConfig+0x2ac>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	00db      	lsls	r3, r3, #3
 8007cb4:	4952      	ldr	r1, [pc, #328]	; (8007e00 <HAL_RCC_OscConfig+0x2ac>)
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cba:	e03a      	b.n	8007d32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d020      	beq.n	8007d06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007cc4:	4b4f      	ldr	r3, [pc, #316]	; (8007e04 <HAL_RCC_OscConfig+0x2b0>)
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cca:	f7fe f899 	bl	8005e00 <HAL_GetTick>
 8007cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cd0:	e008      	b.n	8007ce4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007cd2:	f7fe f895 	bl	8005e00 <HAL_GetTick>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	1ad3      	subs	r3, r2, r3
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d901      	bls.n	8007ce4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	e1a5      	b.n	8008030 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ce4:	4b46      	ldr	r3, [pc, #280]	; (8007e00 <HAL_RCC_OscConfig+0x2ac>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 0302 	and.w	r3, r3, #2
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d0f0      	beq.n	8007cd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cf0:	4b43      	ldr	r3, [pc, #268]	; (8007e00 <HAL_RCC_OscConfig+0x2ac>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	00db      	lsls	r3, r3, #3
 8007cfe:	4940      	ldr	r1, [pc, #256]	; (8007e00 <HAL_RCC_OscConfig+0x2ac>)
 8007d00:	4313      	orrs	r3, r2
 8007d02:	600b      	str	r3, [r1, #0]
 8007d04:	e015      	b.n	8007d32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d06:	4b3f      	ldr	r3, [pc, #252]	; (8007e04 <HAL_RCC_OscConfig+0x2b0>)
 8007d08:	2200      	movs	r2, #0
 8007d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d0c:	f7fe f878 	bl	8005e00 <HAL_GetTick>
 8007d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d12:	e008      	b.n	8007d26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d14:	f7fe f874 	bl	8005e00 <HAL_GetTick>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	2b02      	cmp	r3, #2
 8007d20:	d901      	bls.n	8007d26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e184      	b.n	8008030 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d26:	4b36      	ldr	r3, [pc, #216]	; (8007e00 <HAL_RCC_OscConfig+0x2ac>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 0302 	and.w	r3, r3, #2
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1f0      	bne.n	8007d14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 0308 	and.w	r3, r3, #8
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d030      	beq.n	8007da0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d016      	beq.n	8007d74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d46:	4b30      	ldr	r3, [pc, #192]	; (8007e08 <HAL_RCC_OscConfig+0x2b4>)
 8007d48:	2201      	movs	r2, #1
 8007d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d4c:	f7fe f858 	bl	8005e00 <HAL_GetTick>
 8007d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d52:	e008      	b.n	8007d66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d54:	f7fe f854 	bl	8005e00 <HAL_GetTick>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d901      	bls.n	8007d66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e164      	b.n	8008030 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d66:	4b26      	ldr	r3, [pc, #152]	; (8007e00 <HAL_RCC_OscConfig+0x2ac>)
 8007d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d6a:	f003 0302 	and.w	r3, r3, #2
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d0f0      	beq.n	8007d54 <HAL_RCC_OscConfig+0x200>
 8007d72:	e015      	b.n	8007da0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d74:	4b24      	ldr	r3, [pc, #144]	; (8007e08 <HAL_RCC_OscConfig+0x2b4>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d7a:	f7fe f841 	bl	8005e00 <HAL_GetTick>
 8007d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d80:	e008      	b.n	8007d94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d82:	f7fe f83d 	bl	8005e00 <HAL_GetTick>
 8007d86:	4602      	mov	r2, r0
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d901      	bls.n	8007d94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007d90:	2303      	movs	r3, #3
 8007d92:	e14d      	b.n	8008030 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d94:	4b1a      	ldr	r3, [pc, #104]	; (8007e00 <HAL_RCC_OscConfig+0x2ac>)
 8007d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d98:	f003 0302 	and.w	r3, r3, #2
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1f0      	bne.n	8007d82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0304 	and.w	r3, r3, #4
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f000 80a0 	beq.w	8007eee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007dae:	2300      	movs	r3, #0
 8007db0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007db2:	4b13      	ldr	r3, [pc, #76]	; (8007e00 <HAL_RCC_OscConfig+0x2ac>)
 8007db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10f      	bne.n	8007dde <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	60bb      	str	r3, [r7, #8]
 8007dc2:	4b0f      	ldr	r3, [pc, #60]	; (8007e00 <HAL_RCC_OscConfig+0x2ac>)
 8007dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc6:	4a0e      	ldr	r2, [pc, #56]	; (8007e00 <HAL_RCC_OscConfig+0x2ac>)
 8007dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8007dce:	4b0c      	ldr	r3, [pc, #48]	; (8007e00 <HAL_RCC_OscConfig+0x2ac>)
 8007dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dd6:	60bb      	str	r3, [r7, #8]
 8007dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dde:	4b0b      	ldr	r3, [pc, #44]	; (8007e0c <HAL_RCC_OscConfig+0x2b8>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d121      	bne.n	8007e2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007dea:	4b08      	ldr	r3, [pc, #32]	; (8007e0c <HAL_RCC_OscConfig+0x2b8>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a07      	ldr	r2, [pc, #28]	; (8007e0c <HAL_RCC_OscConfig+0x2b8>)
 8007df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007df4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007df6:	f7fe f803 	bl	8005e00 <HAL_GetTick>
 8007dfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dfc:	e011      	b.n	8007e22 <HAL_RCC_OscConfig+0x2ce>
 8007dfe:	bf00      	nop
 8007e00:	40023800 	.word	0x40023800
 8007e04:	42470000 	.word	0x42470000
 8007e08:	42470e80 	.word	0x42470e80
 8007e0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e10:	f7fd fff6 	bl	8005e00 <HAL_GetTick>
 8007e14:	4602      	mov	r2, r0
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d901      	bls.n	8007e22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	e106      	b.n	8008030 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e22:	4b85      	ldr	r3, [pc, #532]	; (8008038 <HAL_RCC_OscConfig+0x4e4>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d0f0      	beq.n	8007e10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d106      	bne.n	8007e44 <HAL_RCC_OscConfig+0x2f0>
 8007e36:	4b81      	ldr	r3, [pc, #516]	; (800803c <HAL_RCC_OscConfig+0x4e8>)
 8007e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e3a:	4a80      	ldr	r2, [pc, #512]	; (800803c <HAL_RCC_OscConfig+0x4e8>)
 8007e3c:	f043 0301 	orr.w	r3, r3, #1
 8007e40:	6713      	str	r3, [r2, #112]	; 0x70
 8007e42:	e01c      	b.n	8007e7e <HAL_RCC_OscConfig+0x32a>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	2b05      	cmp	r3, #5
 8007e4a:	d10c      	bne.n	8007e66 <HAL_RCC_OscConfig+0x312>
 8007e4c:	4b7b      	ldr	r3, [pc, #492]	; (800803c <HAL_RCC_OscConfig+0x4e8>)
 8007e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e50:	4a7a      	ldr	r2, [pc, #488]	; (800803c <HAL_RCC_OscConfig+0x4e8>)
 8007e52:	f043 0304 	orr.w	r3, r3, #4
 8007e56:	6713      	str	r3, [r2, #112]	; 0x70
 8007e58:	4b78      	ldr	r3, [pc, #480]	; (800803c <HAL_RCC_OscConfig+0x4e8>)
 8007e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e5c:	4a77      	ldr	r2, [pc, #476]	; (800803c <HAL_RCC_OscConfig+0x4e8>)
 8007e5e:	f043 0301 	orr.w	r3, r3, #1
 8007e62:	6713      	str	r3, [r2, #112]	; 0x70
 8007e64:	e00b      	b.n	8007e7e <HAL_RCC_OscConfig+0x32a>
 8007e66:	4b75      	ldr	r3, [pc, #468]	; (800803c <HAL_RCC_OscConfig+0x4e8>)
 8007e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e6a:	4a74      	ldr	r2, [pc, #464]	; (800803c <HAL_RCC_OscConfig+0x4e8>)
 8007e6c:	f023 0301 	bic.w	r3, r3, #1
 8007e70:	6713      	str	r3, [r2, #112]	; 0x70
 8007e72:	4b72      	ldr	r3, [pc, #456]	; (800803c <HAL_RCC_OscConfig+0x4e8>)
 8007e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e76:	4a71      	ldr	r2, [pc, #452]	; (800803c <HAL_RCC_OscConfig+0x4e8>)
 8007e78:	f023 0304 	bic.w	r3, r3, #4
 8007e7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d015      	beq.n	8007eb2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e86:	f7fd ffbb 	bl	8005e00 <HAL_GetTick>
 8007e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e8c:	e00a      	b.n	8007ea4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e8e:	f7fd ffb7 	bl	8005e00 <HAL_GetTick>
 8007e92:	4602      	mov	r2, r0
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d901      	bls.n	8007ea4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	e0c5      	b.n	8008030 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ea4:	4b65      	ldr	r3, [pc, #404]	; (800803c <HAL_RCC_OscConfig+0x4e8>)
 8007ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ea8:	f003 0302 	and.w	r3, r3, #2
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d0ee      	beq.n	8007e8e <HAL_RCC_OscConfig+0x33a>
 8007eb0:	e014      	b.n	8007edc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007eb2:	f7fd ffa5 	bl	8005e00 <HAL_GetTick>
 8007eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007eb8:	e00a      	b.n	8007ed0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007eba:	f7fd ffa1 	bl	8005e00 <HAL_GetTick>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	1ad3      	subs	r3, r2, r3
 8007ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d901      	bls.n	8007ed0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	e0af      	b.n	8008030 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ed0:	4b5a      	ldr	r3, [pc, #360]	; (800803c <HAL_RCC_OscConfig+0x4e8>)
 8007ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ed4:	f003 0302 	and.w	r3, r3, #2
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1ee      	bne.n	8007eba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007edc:	7dfb      	ldrb	r3, [r7, #23]
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d105      	bne.n	8007eee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ee2:	4b56      	ldr	r3, [pc, #344]	; (800803c <HAL_RCC_OscConfig+0x4e8>)
 8007ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee6:	4a55      	ldr	r2, [pc, #340]	; (800803c <HAL_RCC_OscConfig+0x4e8>)
 8007ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007eec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f000 809b 	beq.w	800802e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007ef8:	4b50      	ldr	r3, [pc, #320]	; (800803c <HAL_RCC_OscConfig+0x4e8>)
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	f003 030c 	and.w	r3, r3, #12
 8007f00:	2b08      	cmp	r3, #8
 8007f02:	d05c      	beq.n	8007fbe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	699b      	ldr	r3, [r3, #24]
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	d141      	bne.n	8007f90 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f0c:	4b4c      	ldr	r3, [pc, #304]	; (8008040 <HAL_RCC_OscConfig+0x4ec>)
 8007f0e:	2200      	movs	r2, #0
 8007f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f12:	f7fd ff75 	bl	8005e00 <HAL_GetTick>
 8007f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f18:	e008      	b.n	8007f2c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f1a:	f7fd ff71 	bl	8005e00 <HAL_GetTick>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	1ad3      	subs	r3, r2, r3
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d901      	bls.n	8007f2c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e081      	b.n	8008030 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f2c:	4b43      	ldr	r3, [pc, #268]	; (800803c <HAL_RCC_OscConfig+0x4e8>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1f0      	bne.n	8007f1a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	69da      	ldr	r2, [r3, #28]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6a1b      	ldr	r3, [r3, #32]
 8007f40:	431a      	orrs	r2, r3
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f46:	019b      	lsls	r3, r3, #6
 8007f48:	431a      	orrs	r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4e:	085b      	lsrs	r3, r3, #1
 8007f50:	3b01      	subs	r3, #1
 8007f52:	041b      	lsls	r3, r3, #16
 8007f54:	431a      	orrs	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5a:	061b      	lsls	r3, r3, #24
 8007f5c:	4937      	ldr	r1, [pc, #220]	; (800803c <HAL_RCC_OscConfig+0x4e8>)
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f62:	4b37      	ldr	r3, [pc, #220]	; (8008040 <HAL_RCC_OscConfig+0x4ec>)
 8007f64:	2201      	movs	r2, #1
 8007f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f68:	f7fd ff4a 	bl	8005e00 <HAL_GetTick>
 8007f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f6e:	e008      	b.n	8007f82 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f70:	f7fd ff46 	bl	8005e00 <HAL_GetTick>
 8007f74:	4602      	mov	r2, r0
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d901      	bls.n	8007f82 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	e056      	b.n	8008030 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f82:	4b2e      	ldr	r3, [pc, #184]	; (800803c <HAL_RCC_OscConfig+0x4e8>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d0f0      	beq.n	8007f70 <HAL_RCC_OscConfig+0x41c>
 8007f8e:	e04e      	b.n	800802e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f90:	4b2b      	ldr	r3, [pc, #172]	; (8008040 <HAL_RCC_OscConfig+0x4ec>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f96:	f7fd ff33 	bl	8005e00 <HAL_GetTick>
 8007f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f9c:	e008      	b.n	8007fb0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f9e:	f7fd ff2f 	bl	8005e00 <HAL_GetTick>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	1ad3      	subs	r3, r2, r3
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d901      	bls.n	8007fb0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007fac:	2303      	movs	r3, #3
 8007fae:	e03f      	b.n	8008030 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fb0:	4b22      	ldr	r3, [pc, #136]	; (800803c <HAL_RCC_OscConfig+0x4e8>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1f0      	bne.n	8007f9e <HAL_RCC_OscConfig+0x44a>
 8007fbc:	e037      	b.n	800802e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	699b      	ldr	r3, [r3, #24]
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d101      	bne.n	8007fca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e032      	b.n	8008030 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007fca:	4b1c      	ldr	r3, [pc, #112]	; (800803c <HAL_RCC_OscConfig+0x4e8>)
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	699b      	ldr	r3, [r3, #24]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d028      	beq.n	800802a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d121      	bne.n	800802a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d11a      	bne.n	800802a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008000:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008002:	4293      	cmp	r3, r2
 8008004:	d111      	bne.n	800802a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008010:	085b      	lsrs	r3, r3, #1
 8008012:	3b01      	subs	r3, #1
 8008014:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008016:	429a      	cmp	r2, r3
 8008018:	d107      	bne.n	800802a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008024:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008026:	429a      	cmp	r2, r3
 8008028:	d001      	beq.n	800802e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e000      	b.n	8008030 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3718      	adds	r7, #24
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	40007000 	.word	0x40007000
 800803c:	40023800 	.word	0x40023800
 8008040:	42470060 	.word	0x42470060

08008044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d101      	bne.n	8008058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	e0cc      	b.n	80081f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008058:	4b68      	ldr	r3, [pc, #416]	; (80081fc <HAL_RCC_ClockConfig+0x1b8>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 030f 	and.w	r3, r3, #15
 8008060:	683a      	ldr	r2, [r7, #0]
 8008062:	429a      	cmp	r2, r3
 8008064:	d90c      	bls.n	8008080 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008066:	4b65      	ldr	r3, [pc, #404]	; (80081fc <HAL_RCC_ClockConfig+0x1b8>)
 8008068:	683a      	ldr	r2, [r7, #0]
 800806a:	b2d2      	uxtb	r2, r2
 800806c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800806e:	4b63      	ldr	r3, [pc, #396]	; (80081fc <HAL_RCC_ClockConfig+0x1b8>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 030f 	and.w	r3, r3, #15
 8008076:	683a      	ldr	r2, [r7, #0]
 8008078:	429a      	cmp	r2, r3
 800807a:	d001      	beq.n	8008080 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	e0b8      	b.n	80081f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 0302 	and.w	r3, r3, #2
 8008088:	2b00      	cmp	r3, #0
 800808a:	d020      	beq.n	80080ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 0304 	and.w	r3, r3, #4
 8008094:	2b00      	cmp	r3, #0
 8008096:	d005      	beq.n	80080a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008098:	4b59      	ldr	r3, [pc, #356]	; (8008200 <HAL_RCC_ClockConfig+0x1bc>)
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	4a58      	ldr	r2, [pc, #352]	; (8008200 <HAL_RCC_ClockConfig+0x1bc>)
 800809e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80080a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0308 	and.w	r3, r3, #8
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d005      	beq.n	80080bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80080b0:	4b53      	ldr	r3, [pc, #332]	; (8008200 <HAL_RCC_ClockConfig+0x1bc>)
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	4a52      	ldr	r2, [pc, #328]	; (8008200 <HAL_RCC_ClockConfig+0x1bc>)
 80080b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80080ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080bc:	4b50      	ldr	r3, [pc, #320]	; (8008200 <HAL_RCC_ClockConfig+0x1bc>)
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	494d      	ldr	r1, [pc, #308]	; (8008200 <HAL_RCC_ClockConfig+0x1bc>)
 80080ca:	4313      	orrs	r3, r2
 80080cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f003 0301 	and.w	r3, r3, #1
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d044      	beq.n	8008164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d107      	bne.n	80080f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080e2:	4b47      	ldr	r3, [pc, #284]	; (8008200 <HAL_RCC_ClockConfig+0x1bc>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d119      	bne.n	8008122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e07f      	b.n	80081f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d003      	beq.n	8008102 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80080fe:	2b03      	cmp	r3, #3
 8008100:	d107      	bne.n	8008112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008102:	4b3f      	ldr	r3, [pc, #252]	; (8008200 <HAL_RCC_ClockConfig+0x1bc>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800810a:	2b00      	cmp	r3, #0
 800810c:	d109      	bne.n	8008122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e06f      	b.n	80081f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008112:	4b3b      	ldr	r3, [pc, #236]	; (8008200 <HAL_RCC_ClockConfig+0x1bc>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f003 0302 	and.w	r3, r3, #2
 800811a:	2b00      	cmp	r3, #0
 800811c:	d101      	bne.n	8008122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	e067      	b.n	80081f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008122:	4b37      	ldr	r3, [pc, #220]	; (8008200 <HAL_RCC_ClockConfig+0x1bc>)
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f023 0203 	bic.w	r2, r3, #3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	4934      	ldr	r1, [pc, #208]	; (8008200 <HAL_RCC_ClockConfig+0x1bc>)
 8008130:	4313      	orrs	r3, r2
 8008132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008134:	f7fd fe64 	bl	8005e00 <HAL_GetTick>
 8008138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800813a:	e00a      	b.n	8008152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800813c:	f7fd fe60 	bl	8005e00 <HAL_GetTick>
 8008140:	4602      	mov	r2, r0
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	f241 3288 	movw	r2, #5000	; 0x1388
 800814a:	4293      	cmp	r3, r2
 800814c:	d901      	bls.n	8008152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e04f      	b.n	80081f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008152:	4b2b      	ldr	r3, [pc, #172]	; (8008200 <HAL_RCC_ClockConfig+0x1bc>)
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	f003 020c 	and.w	r2, r3, #12
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	429a      	cmp	r2, r3
 8008162:	d1eb      	bne.n	800813c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008164:	4b25      	ldr	r3, [pc, #148]	; (80081fc <HAL_RCC_ClockConfig+0x1b8>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 030f 	and.w	r3, r3, #15
 800816c:	683a      	ldr	r2, [r7, #0]
 800816e:	429a      	cmp	r2, r3
 8008170:	d20c      	bcs.n	800818c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008172:	4b22      	ldr	r3, [pc, #136]	; (80081fc <HAL_RCC_ClockConfig+0x1b8>)
 8008174:	683a      	ldr	r2, [r7, #0]
 8008176:	b2d2      	uxtb	r2, r2
 8008178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800817a:	4b20      	ldr	r3, [pc, #128]	; (80081fc <HAL_RCC_ClockConfig+0x1b8>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 030f 	and.w	r3, r3, #15
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	429a      	cmp	r2, r3
 8008186:	d001      	beq.n	800818c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e032      	b.n	80081f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 0304 	and.w	r3, r3, #4
 8008194:	2b00      	cmp	r3, #0
 8008196:	d008      	beq.n	80081aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008198:	4b19      	ldr	r3, [pc, #100]	; (8008200 <HAL_RCC_ClockConfig+0x1bc>)
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	4916      	ldr	r1, [pc, #88]	; (8008200 <HAL_RCC_ClockConfig+0x1bc>)
 80081a6:	4313      	orrs	r3, r2
 80081a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0308 	and.w	r3, r3, #8
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d009      	beq.n	80081ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80081b6:	4b12      	ldr	r3, [pc, #72]	; (8008200 <HAL_RCC_ClockConfig+0x1bc>)
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	00db      	lsls	r3, r3, #3
 80081c4:	490e      	ldr	r1, [pc, #56]	; (8008200 <HAL_RCC_ClockConfig+0x1bc>)
 80081c6:	4313      	orrs	r3, r2
 80081c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80081ca:	f000 f821 	bl	8008210 <HAL_RCC_GetSysClockFreq>
 80081ce:	4602      	mov	r2, r0
 80081d0:	4b0b      	ldr	r3, [pc, #44]	; (8008200 <HAL_RCC_ClockConfig+0x1bc>)
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	091b      	lsrs	r3, r3, #4
 80081d6:	f003 030f 	and.w	r3, r3, #15
 80081da:	490a      	ldr	r1, [pc, #40]	; (8008204 <HAL_RCC_ClockConfig+0x1c0>)
 80081dc:	5ccb      	ldrb	r3, [r1, r3]
 80081de:	fa22 f303 	lsr.w	r3, r2, r3
 80081e2:	4a09      	ldr	r2, [pc, #36]	; (8008208 <HAL_RCC_ClockConfig+0x1c4>)
 80081e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80081e6:	4b09      	ldr	r3, [pc, #36]	; (800820c <HAL_RCC_ClockConfig+0x1c8>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7fa fb32 	bl	8002854 <HAL_InitTick>

  return HAL_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	40023c00 	.word	0x40023c00
 8008200:	40023800 	.word	0x40023800
 8008204:	080147c0 	.word	0x080147c0
 8008208:	2000003c 	.word	0x2000003c
 800820c:	20000064 	.word	0x20000064

08008210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008210:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008214:	b084      	sub	sp, #16
 8008216:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008218:	2300      	movs	r3, #0
 800821a:	607b      	str	r3, [r7, #4]
 800821c:	2300      	movs	r3, #0
 800821e:	60fb      	str	r3, [r7, #12]
 8008220:	2300      	movs	r3, #0
 8008222:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008224:	2300      	movs	r3, #0
 8008226:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008228:	4b67      	ldr	r3, [pc, #412]	; (80083c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	f003 030c 	and.w	r3, r3, #12
 8008230:	2b08      	cmp	r3, #8
 8008232:	d00d      	beq.n	8008250 <HAL_RCC_GetSysClockFreq+0x40>
 8008234:	2b08      	cmp	r3, #8
 8008236:	f200 80bd 	bhi.w	80083b4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800823a:	2b00      	cmp	r3, #0
 800823c:	d002      	beq.n	8008244 <HAL_RCC_GetSysClockFreq+0x34>
 800823e:	2b04      	cmp	r3, #4
 8008240:	d003      	beq.n	800824a <HAL_RCC_GetSysClockFreq+0x3a>
 8008242:	e0b7      	b.n	80083b4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008244:	4b61      	ldr	r3, [pc, #388]	; (80083cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008246:	60bb      	str	r3, [r7, #8]
       break;
 8008248:	e0b7      	b.n	80083ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800824a:	4b60      	ldr	r3, [pc, #384]	; (80083cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 800824c:	60bb      	str	r3, [r7, #8]
      break;
 800824e:	e0b4      	b.n	80083ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008250:	4b5d      	ldr	r3, [pc, #372]	; (80083c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008258:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800825a:	4b5b      	ldr	r3, [pc, #364]	; (80083c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d04d      	beq.n	8008302 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008266:	4b58      	ldr	r3, [pc, #352]	; (80083c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	099b      	lsrs	r3, r3, #6
 800826c:	461a      	mov	r2, r3
 800826e:	f04f 0300 	mov.w	r3, #0
 8008272:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008276:	f04f 0100 	mov.w	r1, #0
 800827a:	ea02 0800 	and.w	r8, r2, r0
 800827e:	ea03 0901 	and.w	r9, r3, r1
 8008282:	4640      	mov	r0, r8
 8008284:	4649      	mov	r1, r9
 8008286:	f04f 0200 	mov.w	r2, #0
 800828a:	f04f 0300 	mov.w	r3, #0
 800828e:	014b      	lsls	r3, r1, #5
 8008290:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008294:	0142      	lsls	r2, r0, #5
 8008296:	4610      	mov	r0, r2
 8008298:	4619      	mov	r1, r3
 800829a:	ebb0 0008 	subs.w	r0, r0, r8
 800829e:	eb61 0109 	sbc.w	r1, r1, r9
 80082a2:	f04f 0200 	mov.w	r2, #0
 80082a6:	f04f 0300 	mov.w	r3, #0
 80082aa:	018b      	lsls	r3, r1, #6
 80082ac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80082b0:	0182      	lsls	r2, r0, #6
 80082b2:	1a12      	subs	r2, r2, r0
 80082b4:	eb63 0301 	sbc.w	r3, r3, r1
 80082b8:	f04f 0000 	mov.w	r0, #0
 80082bc:	f04f 0100 	mov.w	r1, #0
 80082c0:	00d9      	lsls	r1, r3, #3
 80082c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80082c6:	00d0      	lsls	r0, r2, #3
 80082c8:	4602      	mov	r2, r0
 80082ca:	460b      	mov	r3, r1
 80082cc:	eb12 0208 	adds.w	r2, r2, r8
 80082d0:	eb43 0309 	adc.w	r3, r3, r9
 80082d4:	f04f 0000 	mov.w	r0, #0
 80082d8:	f04f 0100 	mov.w	r1, #0
 80082dc:	0299      	lsls	r1, r3, #10
 80082de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80082e2:	0290      	lsls	r0, r2, #10
 80082e4:	4602      	mov	r2, r0
 80082e6:	460b      	mov	r3, r1
 80082e8:	4610      	mov	r0, r2
 80082ea:	4619      	mov	r1, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	461a      	mov	r2, r3
 80082f0:	f04f 0300 	mov.w	r3, #0
 80082f4:	f7f8 fcd8 	bl	8000ca8 <__aeabi_uldivmod>
 80082f8:	4602      	mov	r2, r0
 80082fa:	460b      	mov	r3, r1
 80082fc:	4613      	mov	r3, r2
 80082fe:	60fb      	str	r3, [r7, #12]
 8008300:	e04a      	b.n	8008398 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008302:	4b31      	ldr	r3, [pc, #196]	; (80083c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	099b      	lsrs	r3, r3, #6
 8008308:	461a      	mov	r2, r3
 800830a:	f04f 0300 	mov.w	r3, #0
 800830e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008312:	f04f 0100 	mov.w	r1, #0
 8008316:	ea02 0400 	and.w	r4, r2, r0
 800831a:	ea03 0501 	and.w	r5, r3, r1
 800831e:	4620      	mov	r0, r4
 8008320:	4629      	mov	r1, r5
 8008322:	f04f 0200 	mov.w	r2, #0
 8008326:	f04f 0300 	mov.w	r3, #0
 800832a:	014b      	lsls	r3, r1, #5
 800832c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008330:	0142      	lsls	r2, r0, #5
 8008332:	4610      	mov	r0, r2
 8008334:	4619      	mov	r1, r3
 8008336:	1b00      	subs	r0, r0, r4
 8008338:	eb61 0105 	sbc.w	r1, r1, r5
 800833c:	f04f 0200 	mov.w	r2, #0
 8008340:	f04f 0300 	mov.w	r3, #0
 8008344:	018b      	lsls	r3, r1, #6
 8008346:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800834a:	0182      	lsls	r2, r0, #6
 800834c:	1a12      	subs	r2, r2, r0
 800834e:	eb63 0301 	sbc.w	r3, r3, r1
 8008352:	f04f 0000 	mov.w	r0, #0
 8008356:	f04f 0100 	mov.w	r1, #0
 800835a:	00d9      	lsls	r1, r3, #3
 800835c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008360:	00d0      	lsls	r0, r2, #3
 8008362:	4602      	mov	r2, r0
 8008364:	460b      	mov	r3, r1
 8008366:	1912      	adds	r2, r2, r4
 8008368:	eb45 0303 	adc.w	r3, r5, r3
 800836c:	f04f 0000 	mov.w	r0, #0
 8008370:	f04f 0100 	mov.w	r1, #0
 8008374:	0299      	lsls	r1, r3, #10
 8008376:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800837a:	0290      	lsls	r0, r2, #10
 800837c:	4602      	mov	r2, r0
 800837e:	460b      	mov	r3, r1
 8008380:	4610      	mov	r0, r2
 8008382:	4619      	mov	r1, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	461a      	mov	r2, r3
 8008388:	f04f 0300 	mov.w	r3, #0
 800838c:	f7f8 fc8c 	bl	8000ca8 <__aeabi_uldivmod>
 8008390:	4602      	mov	r2, r0
 8008392:	460b      	mov	r3, r1
 8008394:	4613      	mov	r3, r2
 8008396:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008398:	4b0b      	ldr	r3, [pc, #44]	; (80083c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	0c1b      	lsrs	r3, r3, #16
 800839e:	f003 0303 	and.w	r3, r3, #3
 80083a2:	3301      	adds	r3, #1
 80083a4:	005b      	lsls	r3, r3, #1
 80083a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80083b0:	60bb      	str	r3, [r7, #8]
      break;
 80083b2:	e002      	b.n	80083ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80083b4:	4b05      	ldr	r3, [pc, #20]	; (80083cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80083b6:	60bb      	str	r3, [r7, #8]
      break;
 80083b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80083ba:	68bb      	ldr	r3, [r7, #8]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3710      	adds	r7, #16
 80083c0:	46bd      	mov	sp, r7
 80083c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80083c6:	bf00      	nop
 80083c8:	40023800 	.word	0x40023800
 80083cc:	00f42400 	.word	0x00f42400

080083d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80083d0:	b480      	push	{r7}
 80083d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80083d4:	4b03      	ldr	r3, [pc, #12]	; (80083e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80083d6:	681b      	ldr	r3, [r3, #0]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	2000003c 	.word	0x2000003c

080083e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80083ec:	f7ff fff0 	bl	80083d0 <HAL_RCC_GetHCLKFreq>
 80083f0:	4602      	mov	r2, r0
 80083f2:	4b05      	ldr	r3, [pc, #20]	; (8008408 <HAL_RCC_GetPCLK1Freq+0x20>)
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	0a9b      	lsrs	r3, r3, #10
 80083f8:	f003 0307 	and.w	r3, r3, #7
 80083fc:	4903      	ldr	r1, [pc, #12]	; (800840c <HAL_RCC_GetPCLK1Freq+0x24>)
 80083fe:	5ccb      	ldrb	r3, [r1, r3]
 8008400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008404:	4618      	mov	r0, r3
 8008406:	bd80      	pop	{r7, pc}
 8008408:	40023800 	.word	0x40023800
 800840c:	080147d0 	.word	0x080147d0

08008410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008414:	f7ff ffdc 	bl	80083d0 <HAL_RCC_GetHCLKFreq>
 8008418:	4602      	mov	r2, r0
 800841a:	4b05      	ldr	r3, [pc, #20]	; (8008430 <HAL_RCC_GetPCLK2Freq+0x20>)
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	0b5b      	lsrs	r3, r3, #13
 8008420:	f003 0307 	and.w	r3, r3, #7
 8008424:	4903      	ldr	r1, [pc, #12]	; (8008434 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008426:	5ccb      	ldrb	r3, [r1, r3]
 8008428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800842c:	4618      	mov	r0, r3
 800842e:	bd80      	pop	{r7, pc}
 8008430:	40023800 	.word	0x40023800
 8008434:	080147d0 	.word	0x080147d0

08008438 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	220f      	movs	r2, #15
 8008446:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008448:	4b12      	ldr	r3, [pc, #72]	; (8008494 <HAL_RCC_GetClockConfig+0x5c>)
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	f003 0203 	and.w	r2, r3, #3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008454:	4b0f      	ldr	r3, [pc, #60]	; (8008494 <HAL_RCC_GetClockConfig+0x5c>)
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008460:	4b0c      	ldr	r3, [pc, #48]	; (8008494 <HAL_RCC_GetClockConfig+0x5c>)
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800846c:	4b09      	ldr	r3, [pc, #36]	; (8008494 <HAL_RCC_GetClockConfig+0x5c>)
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	08db      	lsrs	r3, r3, #3
 8008472:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800847a:	4b07      	ldr	r3, [pc, #28]	; (8008498 <HAL_RCC_GetClockConfig+0x60>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f003 020f 	and.w	r2, r3, #15
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	601a      	str	r2, [r3, #0]
}
 8008486:	bf00      	nop
 8008488:	370c      	adds	r7, #12
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	40023800 	.word	0x40023800
 8008498:	40023c00 	.word	0x40023c00

0800849c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b086      	sub	sp, #24
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80084a4:	2300      	movs	r3, #0
 80084a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80084a8:	2300      	movs	r3, #0
 80084aa:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 0301 	and.w	r3, r3, #1
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d10b      	bne.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d105      	bne.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d075      	beq.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80084d0:	4bad      	ldr	r3, [pc, #692]	; (8008788 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80084d2:	2200      	movs	r2, #0
 80084d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80084d6:	f7fd fc93 	bl	8005e00 <HAL_GetTick>
 80084da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80084dc:	e008      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80084de:	f7fd fc8f 	bl	8005e00 <HAL_GetTick>
 80084e2:	4602      	mov	r2, r0
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	1ad3      	subs	r3, r2, r3
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	d901      	bls.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80084ec:	2303      	movs	r3, #3
 80084ee:	e18b      	b.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80084f0:	4ba6      	ldr	r3, [pc, #664]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1f0      	bne.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 0301 	and.w	r3, r3, #1
 8008504:	2b00      	cmp	r3, #0
 8008506:	d009      	beq.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	019a      	lsls	r2, r3, #6
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	071b      	lsls	r3, r3, #28
 8008514:	499d      	ldr	r1, [pc, #628]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008516:	4313      	orrs	r3, r2
 8008518:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 0302 	and.w	r3, r3, #2
 8008524:	2b00      	cmp	r3, #0
 8008526:	d01f      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008528:	4b98      	ldr	r3, [pc, #608]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800852a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800852e:	0f1b      	lsrs	r3, r3, #28
 8008530:	f003 0307 	and.w	r3, r3, #7
 8008534:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	019a      	lsls	r2, r3, #6
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	061b      	lsls	r3, r3, #24
 8008542:	431a      	orrs	r2, r3
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	071b      	lsls	r3, r3, #28
 8008548:	4990      	ldr	r1, [pc, #576]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800854a:	4313      	orrs	r3, r2
 800854c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008550:	4b8e      	ldr	r3, [pc, #568]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008552:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008556:	f023 021f 	bic.w	r2, r3, #31
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	69db      	ldr	r3, [r3, #28]
 800855e:	3b01      	subs	r3, #1
 8008560:	498a      	ldr	r1, [pc, #552]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008562:	4313      	orrs	r3, r2
 8008564:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00d      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	019a      	lsls	r2, r3, #6
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	061b      	lsls	r3, r3, #24
 8008580:	431a      	orrs	r2, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	071b      	lsls	r3, r3, #28
 8008588:	4980      	ldr	r1, [pc, #512]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800858a:	4313      	orrs	r3, r2
 800858c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008590:	4b7d      	ldr	r3, [pc, #500]	; (8008788 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8008592:	2201      	movs	r2, #1
 8008594:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008596:	f7fd fc33 	bl	8005e00 <HAL_GetTick>
 800859a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800859c:	e008      	b.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800859e:	f7fd fc2f 	bl	8005e00 <HAL_GetTick>
 80085a2:	4602      	mov	r2, r0
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	1ad3      	subs	r3, r2, r3
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d901      	bls.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e12b      	b.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80085b0:	4b76      	ldr	r3, [pc, #472]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d0f0      	beq.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f003 0304 	and.w	r3, r3, #4
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d105      	bne.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d079      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80085d4:	4b6e      	ldr	r3, [pc, #440]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085d6:	2200      	movs	r2, #0
 80085d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80085da:	f7fd fc11 	bl	8005e00 <HAL_GetTick>
 80085de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80085e0:	e008      	b.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80085e2:	f7fd fc0d 	bl	8005e00 <HAL_GetTick>
 80085e6:	4602      	mov	r2, r0
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	1ad3      	subs	r3, r2, r3
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	d901      	bls.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80085f0:	2303      	movs	r3, #3
 80085f2:	e109      	b.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80085f4:	4b65      	ldr	r3, [pc, #404]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008600:	d0ef      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 0304 	and.w	r3, r3, #4
 800860a:	2b00      	cmp	r3, #0
 800860c:	d020      	beq.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800860e:	4b5f      	ldr	r3, [pc, #380]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008614:	0f1b      	lsrs	r3, r3, #28
 8008616:	f003 0307 	and.w	r3, r3, #7
 800861a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	019a      	lsls	r2, r3, #6
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	695b      	ldr	r3, [r3, #20]
 8008626:	061b      	lsls	r3, r3, #24
 8008628:	431a      	orrs	r2, r3
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	071b      	lsls	r3, r3, #28
 800862e:	4957      	ldr	r1, [pc, #348]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008630:	4313      	orrs	r3, r2
 8008632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008636:	4b55      	ldr	r3, [pc, #340]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800863c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a1b      	ldr	r3, [r3, #32]
 8008644:	3b01      	subs	r3, #1
 8008646:	021b      	lsls	r3, r3, #8
 8008648:	4950      	ldr	r1, [pc, #320]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800864a:	4313      	orrs	r3, r2
 800864c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 0308 	and.w	r3, r3, #8
 8008658:	2b00      	cmp	r3, #0
 800865a:	d01e      	beq.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800865c:	4b4b      	ldr	r3, [pc, #300]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800865e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008662:	0e1b      	lsrs	r3, r3, #24
 8008664:	f003 030f 	and.w	r3, r3, #15
 8008668:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	019a      	lsls	r2, r3, #6
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	061b      	lsls	r3, r3, #24
 8008674:	431a      	orrs	r2, r3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	699b      	ldr	r3, [r3, #24]
 800867a:	071b      	lsls	r3, r3, #28
 800867c:	4943      	ldr	r1, [pc, #268]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800867e:	4313      	orrs	r3, r2
 8008680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008684:	4b41      	ldr	r3, [pc, #260]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800868a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008692:	493e      	ldr	r1, [pc, #248]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008694:	4313      	orrs	r3, r2
 8008696:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800869a:	4b3d      	ldr	r3, [pc, #244]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800869c:	2201      	movs	r2, #1
 800869e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80086a0:	f7fd fbae 	bl	8005e00 <HAL_GetTick>
 80086a4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80086a6:	e008      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80086a8:	f7fd fbaa 	bl	8005e00 <HAL_GetTick>
 80086ac:	4602      	mov	r2, r0
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d901      	bls.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80086b6:	2303      	movs	r3, #3
 80086b8:	e0a6      	b.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80086ba:	4b34      	ldr	r3, [pc, #208]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086c6:	d1ef      	bne.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 0320 	and.w	r3, r3, #32
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f000 808d 	beq.w	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80086d6:	2300      	movs	r3, #0
 80086d8:	60fb      	str	r3, [r7, #12]
 80086da:	4b2c      	ldr	r3, [pc, #176]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80086dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086de:	4a2b      	ldr	r2, [pc, #172]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80086e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086e4:	6413      	str	r3, [r2, #64]	; 0x40
 80086e6:	4b29      	ldr	r3, [pc, #164]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80086e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086ee:	60fb      	str	r3, [r7, #12]
 80086f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80086f2:	4b28      	ldr	r3, [pc, #160]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a27      	ldr	r2, [pc, #156]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80086f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80086fe:	f7fd fb7f 	bl	8005e00 <HAL_GetTick>
 8008702:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008704:	e008      	b.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008706:	f7fd fb7b 	bl	8005e00 <HAL_GetTick>
 800870a:	4602      	mov	r2, r0
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	2b02      	cmp	r3, #2
 8008712:	d901      	bls.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8008714:	2303      	movs	r3, #3
 8008716:	e077      	b.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008718:	4b1e      	ldr	r3, [pc, #120]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008720:	2b00      	cmp	r3, #0
 8008722:	d0f0      	beq.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008724:	4b19      	ldr	r3, [pc, #100]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008728:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800872c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d039      	beq.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008738:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800873c:	693a      	ldr	r2, [r7, #16]
 800873e:	429a      	cmp	r2, r3
 8008740:	d032      	beq.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008742:	4b12      	ldr	r3, [pc, #72]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800874a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800874c:	4b12      	ldr	r3, [pc, #72]	; (8008798 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800874e:	2201      	movs	r2, #1
 8008750:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008752:	4b11      	ldr	r3, [pc, #68]	; (8008798 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008754:	2200      	movs	r2, #0
 8008756:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008758:	4a0c      	ldr	r2, [pc, #48]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800875e:	4b0b      	ldr	r3, [pc, #44]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	2b01      	cmp	r3, #1
 8008768:	d11e      	bne.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800876a:	f7fd fb49 	bl	8005e00 <HAL_GetTick>
 800876e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008770:	e014      	b.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008772:	f7fd fb45 	bl	8005e00 <HAL_GetTick>
 8008776:	4602      	mov	r2, r0
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008780:	4293      	cmp	r3, r2
 8008782:	d90b      	bls.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	e03f      	b.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8008788:	42470068 	.word	0x42470068
 800878c:	40023800 	.word	0x40023800
 8008790:	42470070 	.word	0x42470070
 8008794:	40007000 	.word	0x40007000
 8008798:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800879c:	4b1c      	ldr	r3, [pc, #112]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800879e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087a0:	f003 0302 	and.w	r3, r3, #2
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d0e4      	beq.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087b4:	d10d      	bne.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80087b6:	4b16      	ldr	r3, [pc, #88]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80087c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087ca:	4911      	ldr	r1, [pc, #68]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80087cc:	4313      	orrs	r3, r2
 80087ce:	608b      	str	r3, [r1, #8]
 80087d0:	e005      	b.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x342>
 80087d2:	4b0f      	ldr	r3, [pc, #60]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	4a0e      	ldr	r2, [pc, #56]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80087d8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80087dc:	6093      	str	r3, [r2, #8]
 80087de:	4b0c      	ldr	r3, [pc, #48]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80087e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087ea:	4909      	ldr	r1, [pc, #36]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80087ec:	4313      	orrs	r3, r2
 80087ee:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 0310 	and.w	r3, r3, #16
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d004      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008802:	4b04      	ldr	r3, [pc, #16]	; (8008814 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008804:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3718      	adds	r7, #24
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	40023800 	.word	0x40023800
 8008814:	424711e0 	.word	0x424711e0

08008818 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d101      	bne.n	800882a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	e083      	b.n	8008932 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	7f5b      	ldrb	r3, [r3, #29]
 800882e:	b2db      	uxtb	r3, r3
 8008830:	2b00      	cmp	r3, #0
 8008832:	d105      	bne.n	8008840 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f7f9 fccc 	bl	80021d8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2202      	movs	r2, #2
 8008844:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	22ca      	movs	r2, #202	; 0xca
 800884c:	625a      	str	r2, [r3, #36]	; 0x24
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2253      	movs	r2, #83	; 0x53
 8008854:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 fb84 	bl	8008f64 <RTC_EnterInitMode>
 800885c:	4603      	mov	r3, r0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d008      	beq.n	8008874 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	22ff      	movs	r2, #255	; 0xff
 8008868:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2204      	movs	r2, #4
 800886e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	e05e      	b.n	8008932 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	6812      	ldr	r2, [r2, #0]
 800887e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008886:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	6899      	ldr	r1, [r3, #8]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	685a      	ldr	r2, [r3, #4]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	431a      	orrs	r2, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	695b      	ldr	r3, [r3, #20]
 800889c:	431a      	orrs	r2, r3
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	430a      	orrs	r2, r1
 80088a4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	68d2      	ldr	r2, [r2, #12]
 80088ae:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	6919      	ldr	r1, [r3, #16]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	041a      	lsls	r2, r3, #16
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	430a      	orrs	r2, r1
 80088c2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68da      	ldr	r2, [r3, #12]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088d2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	f003 0320 	and.w	r3, r3, #32
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d10e      	bne.n	8008900 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 fb16 	bl	8008f14 <HAL_RTC_WaitForSynchro>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d008      	beq.n	8008900 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	22ff      	movs	r2, #255	; 0xff
 80088f4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2204      	movs	r2, #4
 80088fa:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80088fc:	2301      	movs	r3, #1
 80088fe:	e018      	b.n	8008932 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800890e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	699a      	ldr	r2, [r3, #24]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	430a      	orrs	r2, r1
 8008920:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	22ff      	movs	r2, #255	; 0xff
 8008928:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2201      	movs	r2, #1
 800892e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008930:	2300      	movs	r3, #0
  }
}
 8008932:	4618      	mov	r0, r3
 8008934:	3708      	adds	r7, #8
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800893a:	b590      	push	{r4, r7, lr}
 800893c:	b087      	sub	sp, #28
 800893e:	af00      	add	r7, sp, #0
 8008940:	60f8      	str	r0, [r7, #12]
 8008942:	60b9      	str	r1, [r7, #8]
 8008944:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008946:	2300      	movs	r3, #0
 8008948:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	7f1b      	ldrb	r3, [r3, #28]
 800894e:	2b01      	cmp	r3, #1
 8008950:	d101      	bne.n	8008956 <HAL_RTC_SetTime+0x1c>
 8008952:	2302      	movs	r3, #2
 8008954:	e0aa      	b.n	8008aac <HAL_RTC_SetTime+0x172>
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2201      	movs	r2, #1
 800895a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2202      	movs	r2, #2
 8008960:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d126      	bne.n	80089b6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008972:	2b00      	cmp	r3, #0
 8008974:	d102      	bne.n	800897c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	2200      	movs	r2, #0
 800897a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	4618      	mov	r0, r3
 8008982:	f000 fb1b 	bl	8008fbc <RTC_ByteToBcd2>
 8008986:	4603      	mov	r3, r0
 8008988:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	785b      	ldrb	r3, [r3, #1]
 800898e:	4618      	mov	r0, r3
 8008990:	f000 fb14 	bl	8008fbc <RTC_ByteToBcd2>
 8008994:	4603      	mov	r3, r0
 8008996:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008998:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	789b      	ldrb	r3, [r3, #2]
 800899e:	4618      	mov	r0, r3
 80089a0:	f000 fb0c 	bl	8008fbc <RTC_ByteToBcd2>
 80089a4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80089a6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	78db      	ldrb	r3, [r3, #3]
 80089ae:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80089b0:	4313      	orrs	r3, r2
 80089b2:	617b      	str	r3, [r7, #20]
 80089b4:	e018      	b.n	80089e8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d102      	bne.n	80089ca <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	2200      	movs	r2, #0
 80089c8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	785b      	ldrb	r3, [r3, #1]
 80089d4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80089d6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80089d8:	68ba      	ldr	r2, [r7, #8]
 80089da:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80089dc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	78db      	ldrb	r3, [r3, #3]
 80089e2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80089e4:	4313      	orrs	r3, r2
 80089e6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	22ca      	movs	r2, #202	; 0xca
 80089ee:	625a      	str	r2, [r3, #36]	; 0x24
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2253      	movs	r2, #83	; 0x53
 80089f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f000 fab3 	bl	8008f64 <RTC_EnterInitMode>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00b      	beq.n	8008a1c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	22ff      	movs	r2, #255	; 0xff
 8008a0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2204      	movs	r2, #4
 8008a10:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2200      	movs	r2, #0
 8008a16:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e047      	b.n	8008aac <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008a26:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008a2a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	689a      	ldr	r2, [r3, #8]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008a3a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	6899      	ldr	r1, [r3, #8]
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	68da      	ldr	r2, [r3, #12]
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	431a      	orrs	r2, r3
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	430a      	orrs	r2, r1
 8008a52:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68da      	ldr	r2, [r3, #12]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a62:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	f003 0320 	and.w	r3, r3, #32
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d111      	bne.n	8008a96 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f000 fa4e 	bl	8008f14 <HAL_RTC_WaitForSynchro>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00b      	beq.n	8008a96 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	22ff      	movs	r2, #255	; 0xff
 8008a84:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2204      	movs	r2, #4
 8008a8a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e00a      	b.n	8008aac <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	22ff      	movs	r2, #255	; 0xff
 8008a9c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008aaa:	2300      	movs	r3, #0
  }
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	371c      	adds	r7, #28
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd90      	pop	{r4, r7, pc}

08008ab4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008ab4:	b590      	push	{r4, r7, lr}
 8008ab6:	b087      	sub	sp, #28
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	7f1b      	ldrb	r3, [r3, #28]
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d101      	bne.n	8008ad0 <HAL_RTC_SetDate+0x1c>
 8008acc:	2302      	movs	r3, #2
 8008ace:	e094      	b.n	8008bfa <HAL_RTC_SetDate+0x146>
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2202      	movs	r2, #2
 8008ada:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d10e      	bne.n	8008b00 <HAL_RTC_SetDate+0x4c>
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	785b      	ldrb	r3, [r3, #1]
 8008ae6:	f003 0310 	and.w	r3, r3, #16
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d008      	beq.n	8008b00 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	785b      	ldrb	r3, [r3, #1]
 8008af2:	f023 0310 	bic.w	r3, r3, #16
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	330a      	adds	r3, #10
 8008afa:	b2da      	uxtb	r2, r3
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d11c      	bne.n	8008b40 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	78db      	ldrb	r3, [r3, #3]
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f000 fa56 	bl	8008fbc <RTC_ByteToBcd2>
 8008b10:	4603      	mov	r3, r0
 8008b12:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	785b      	ldrb	r3, [r3, #1]
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f000 fa4f 	bl	8008fbc <RTC_ByteToBcd2>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008b22:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	789b      	ldrb	r3, [r3, #2]
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f000 fa47 	bl	8008fbc <RTC_ByteToBcd2>
 8008b2e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008b30:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	617b      	str	r3, [r7, #20]
 8008b3e:	e00e      	b.n	8008b5e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	78db      	ldrb	r3, [r3, #3]
 8008b44:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	785b      	ldrb	r3, [r3, #1]
 8008b4a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008b4c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008b4e:	68ba      	ldr	r2, [r7, #8]
 8008b50:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8008b52:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	22ca      	movs	r2, #202	; 0xca
 8008b64:	625a      	str	r2, [r3, #36]	; 0x24
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2253      	movs	r2, #83	; 0x53
 8008b6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	f000 f9f8 	bl	8008f64 <RTC_EnterInitMode>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00b      	beq.n	8008b92 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	22ff      	movs	r2, #255	; 0xff
 8008b80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2204      	movs	r2, #4
 8008b86:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e033      	b.n	8008bfa <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008b9c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008ba0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68da      	ldr	r2, [r3, #12]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008bb0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	f003 0320 	and.w	r3, r3, #32
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d111      	bne.n	8008be4 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008bc0:	68f8      	ldr	r0, [r7, #12]
 8008bc2:	f000 f9a7 	bl	8008f14 <HAL_RTC_WaitForSynchro>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00b      	beq.n	8008be4 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	22ff      	movs	r2, #255	; 0xff
 8008bd2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2204      	movs	r2, #4
 8008bd8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e00a      	b.n	8008bfa <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	22ff      	movs	r2, #255	; 0xff
 8008bea:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008bf8:	2300      	movs	r3, #0
  }
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	371c      	adds	r7, #28
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd90      	pop	{r4, r7, pc}
	...

08008c04 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008c04:	b590      	push	{r4, r7, lr}
 8008c06:	b089      	sub	sp, #36	; 0x24
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8008c10:	2300      	movs	r3, #0
 8008c12:	61fb      	str	r3, [r7, #28]
 8008c14:	2300      	movs	r3, #0
 8008c16:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8008c18:	4b93      	ldr	r3, [pc, #588]	; (8008e68 <HAL_RTC_SetAlarm_IT+0x264>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a93      	ldr	r2, [pc, #588]	; (8008e6c <HAL_RTC_SetAlarm_IT+0x268>)
 8008c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c22:	0adb      	lsrs	r3, r3, #11
 8008c24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008c28:	fb02 f303 	mul.w	r3, r2, r3
 8008c2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	7f1b      	ldrb	r3, [r3, #28]
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d101      	bne.n	8008c3a <HAL_RTC_SetAlarm_IT+0x36>
 8008c36:	2302      	movs	r3, #2
 8008c38:	e111      	b.n	8008e5e <HAL_RTC_SetAlarm_IT+0x25a>
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2202      	movs	r2, #2
 8008c44:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d137      	bne.n	8008cbc <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d102      	bne.n	8008c60 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	4618      	mov	r0, r3
 8008c66:	f000 f9a9 	bl	8008fbc <RTC_ByteToBcd2>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	785b      	ldrb	r3, [r3, #1]
 8008c72:	4618      	mov	r0, r3
 8008c74:	f000 f9a2 	bl	8008fbc <RTC_ByteToBcd2>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008c7c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	789b      	ldrb	r3, [r3, #2]
 8008c82:	4618      	mov	r0, r3
 8008c84:	f000 f99a 	bl	8008fbc <RTC_ByteToBcd2>
 8008c88:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008c8a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	78db      	ldrb	r3, [r3, #3]
 8008c92:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008c94:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f000 f98c 	bl	8008fbc <RTC_ByteToBcd2>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008ca8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008cb0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	61fb      	str	r3, [r7, #28]
 8008cba:	e023      	b.n	8008d04 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d102      	bne.n	8008cd0 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	785b      	ldrb	r3, [r3, #1]
 8008cda:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008cdc:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008cde:	68ba      	ldr	r2, [r7, #8]
 8008ce0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008ce2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	78db      	ldrb	r3, [r3, #3]
 8008ce8:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008cea:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008cf2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008cf4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008cfa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008d00:	4313      	orrs	r3, r2
 8008d02:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	685a      	ldr	r2, [r3, #4]
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	22ca      	movs	r2, #202	; 0xca
 8008d16:	625a      	str	r2, [r3, #36]	; 0x24
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2253      	movs	r2, #83	; 0x53
 8008d1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d28:	d141      	bne.n	8008dae <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	689a      	ldr	r2, [r3, #8]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d38:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	b2da      	uxtb	r2, r3
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008d4a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	1e5a      	subs	r2, r3, #1
 8008d50:	617a      	str	r2, [r7, #20]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10b      	bne.n	8008d6e <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	22ff      	movs	r2, #255	; 0xff
 8008d5c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2203      	movs	r2, #3
 8008d62:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2200      	movs	r2, #0
 8008d68:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	e077      	b.n	8008e5e <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	f003 0301 	and.w	r3, r3, #1
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d0e7      	beq.n	8008d4c <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	69fa      	ldr	r2, [r7, #28]
 8008d82:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	69ba      	ldr	r2, [r7, #24]
 8008d8a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	689a      	ldr	r2, [r3, #8]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d9a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	689a      	ldr	r2, [r3, #8]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008daa:	609a      	str	r2, [r3, #8]
 8008dac:	e040      	b.n	8008e30 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	689a      	ldr	r2, [r3, #8]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008dbc:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	b2da      	uxtb	r2, r3
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008dce:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	1e5a      	subs	r2, r3, #1
 8008dd4:	617a      	str	r2, [r7, #20]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d10b      	bne.n	8008df2 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	22ff      	movs	r2, #255	; 0xff
 8008de0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2203      	movs	r2, #3
 8008de6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2200      	movs	r2, #0
 8008dec:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008dee:	2303      	movs	r3, #3
 8008df0:	e035      	b.n	8008e5e <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	f003 0302 	and.w	r3, r3, #2
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d0e7      	beq.n	8008dd0 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	69fa      	ldr	r2, [r7, #28]
 8008e06:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	69ba      	ldr	r2, [r7, #24]
 8008e0e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	689a      	ldr	r2, [r3, #8]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e1e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	689a      	ldr	r2, [r3, #8]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e2e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8008e30:	4b0f      	ldr	r3, [pc, #60]	; (8008e70 <HAL_RTC_SetAlarm_IT+0x26c>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a0e      	ldr	r2, [pc, #56]	; (8008e70 <HAL_RTC_SetAlarm_IT+0x26c>)
 8008e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e3a:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8008e3c:	4b0c      	ldr	r3, [pc, #48]	; (8008e70 <HAL_RTC_SetAlarm_IT+0x26c>)
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	4a0b      	ldr	r2, [pc, #44]	; (8008e70 <HAL_RTC_SetAlarm_IT+0x26c>)
 8008e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e46:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	22ff      	movs	r2, #255	; 0xff
 8008e4e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2201      	movs	r2, #1
 8008e54:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3724      	adds	r7, #36	; 0x24
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd90      	pop	{r4, r7, pc}
 8008e66:	bf00      	nop
 8008e68:	2000003c 	.word	0x2000003c
 8008e6c:	10624dd3 	.word	0x10624dd3
 8008e70:	40013c00 	.word	0x40013c00

08008e74 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d012      	beq.n	8008eb0 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d00b      	beq.n	8008eb0 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 f831 	bl	8008f00 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	b2da      	uxtb	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008eae:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d012      	beq.n	8008ee4 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00b      	beq.n	8008ee4 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 f9ab 	bl	8009228 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	b2da      	uxtb	r2, r3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008ee2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8008ee4:	4b05      	ldr	r3, [pc, #20]	; (8008efc <HAL_RTC_AlarmIRQHandler+0x88>)
 8008ee6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008eea:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	775a      	strb	r2, [r3, #29]
}
 8008ef2:	bf00      	nop
 8008ef4:	3708      	adds	r7, #8
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	40013c00 	.word	0x40013c00

08008f00 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8008f08:	bf00      	nop
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68da      	ldr	r2, [r3, #12]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008f2e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008f30:	f7fc ff66 	bl	8005e00 <HAL_GetTick>
 8008f34:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008f36:	e009      	b.n	8008f4c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008f38:	f7fc ff62 	bl	8005e00 <HAL_GetTick>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f46:	d901      	bls.n	8008f4c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008f48:	2303      	movs	r3, #3
 8008f4a:	e007      	b.n	8008f5c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	f003 0320 	and.w	r3, r3, #32
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d0ee      	beq.n	8008f38 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3710      	adds	r7, #16
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d119      	bne.n	8008fb2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f04f 32ff 	mov.w	r2, #4294967295
 8008f86:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008f88:	f7fc ff3a 	bl	8005e00 <HAL_GetTick>
 8008f8c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008f8e:	e009      	b.n	8008fa4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008f90:	f7fc ff36 	bl	8005e00 <HAL_GetTick>
 8008f94:	4602      	mov	r2, r0
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	1ad3      	subs	r3, r2, r3
 8008f9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f9e:	d901      	bls.n	8008fa4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008fa0:	2303      	movs	r3, #3
 8008fa2:	e007      	b.n	8008fb4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d0ee      	beq.n	8008f90 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008fb2:	2300      	movs	r3, #0
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3710      	adds	r7, #16
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b085      	sub	sp, #20
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8008fca:	e005      	b.n	8008fd8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8008fd2:	79fb      	ldrb	r3, [r7, #7]
 8008fd4:	3b0a      	subs	r3, #10
 8008fd6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8008fd8:	79fb      	ldrb	r3, [r7, #7]
 8008fda:	2b09      	cmp	r3, #9
 8008fdc:	d8f6      	bhi.n	8008fcc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	011b      	lsls	r3, r3, #4
 8008fe4:	b2da      	uxtb	r2, r3
 8008fe6:	79fb      	ldrb	r3, [r7, #7]
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	b2db      	uxtb	r3, r3
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3714      	adds	r7, #20
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b087      	sub	sp, #28
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	7f1b      	ldrb	r3, [r3, #28]
 8009008:	2b01      	cmp	r3, #1
 800900a:	d101      	bne.n	8009010 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 800900c:	2302      	movs	r3, #2
 800900e:	e0a6      	b.n	800915e <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2201      	movs	r2, #1
 8009014:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2202      	movs	r2, #2
 800901a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	22ca      	movs	r2, #202	; 0xca
 8009022:	625a      	str	r2, [r3, #36]	; 0x24
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2253      	movs	r2, #83	; 0x53
 800902a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009036:	2b00      	cmp	r3, #0
 8009038:	d022      	beq.n	8009080 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800903a:	4b4c      	ldr	r3, [pc, #304]	; (800916c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a4c      	ldr	r2, [pc, #304]	; (8009170 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8009040:	fba2 2303 	umull	r2, r3, r2, r3
 8009044:	0adb      	lsrs	r3, r3, #11
 8009046:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800904a:	fb02 f303 	mul.w	r3, r2, r3
 800904e:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	1e5a      	subs	r2, r3, #1
 8009054:	617a      	str	r2, [r7, #20]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d10b      	bne.n	8009072 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	22ff      	movs	r2, #255	; 0xff
 8009060:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2203      	movs	r2, #3
 8009066:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2200      	movs	r2, #0
 800906c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800906e:	2303      	movs	r3, #3
 8009070:	e075      	b.n	800915e <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	f003 0304 	and.w	r3, r3, #4
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1e7      	bne.n	8009050 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	689a      	ldr	r2, [r3, #8]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800908e:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8009090:	4b36      	ldr	r3, [pc, #216]	; (800916c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a36      	ldr	r2, [pc, #216]	; (8009170 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8009096:	fba2 2303 	umull	r2, r3, r2, r3
 800909a:	0adb      	lsrs	r3, r3, #11
 800909c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80090a0:	fb02 f303 	mul.w	r3, r2, r3
 80090a4:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	1e5a      	subs	r2, r3, #1
 80090aa:	617a      	str	r2, [r7, #20]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d10b      	bne.n	80090c8 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	22ff      	movs	r2, #255	; 0xff
 80090b6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2203      	movs	r2, #3
 80090bc:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2200      	movs	r2, #0
 80090c2:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80090c4:	2303      	movs	r3, #3
 80090c6:	e04a      	b.n	800915e <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	f003 0304 	and.w	r3, r3, #4
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d0e7      	beq.n	80090a6 <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68ba      	ldr	r2, [r7, #8]
 80090dc:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	689a      	ldr	r2, [r3, #8]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f022 0207 	bic.w	r2, r2, #7
 80090ec:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	6899      	ldr	r1, [r3, #8]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	430a      	orrs	r2, r1
 80090fc:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80090fe:	4b1d      	ldr	r3, [pc, #116]	; (8009174 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a1c      	ldr	r2, [pc, #112]	; (8009174 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8009104:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009108:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800910a:	4b1a      	ldr	r3, [pc, #104]	; (8009174 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	4a19      	ldr	r2, [pc, #100]	; (8009174 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8009110:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009114:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	b2da      	uxtb	r2, r3
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8009126:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	689a      	ldr	r2, [r3, #8]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009136:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	689a      	ldr	r2, [r3, #8]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009146:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	22ff      	movs	r2, #255	; 0xff
 800914e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2201      	movs	r2, #1
 8009154:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2200      	movs	r2, #0
 800915a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	371c      	adds	r7, #28
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr
 800916a:	bf00      	nop
 800916c:	2000003c 	.word	0x2000003c
 8009170:	10624dd3 	.word	0x10624dd3
 8009174:	40013c00 	.word	0x40013c00

08009178 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009180:	2300      	movs	r3, #0
 8009182:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	7f1b      	ldrb	r3, [r3, #28]
 8009188:	2b01      	cmp	r3, #1
 800918a:	d101      	bne.n	8009190 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 800918c:	2302      	movs	r3, #2
 800918e:	e047      	b.n	8009220 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2202      	movs	r2, #2
 800919a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	22ca      	movs	r2, #202	; 0xca
 80091a2:	625a      	str	r2, [r3, #36]	; 0x24
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2253      	movs	r2, #83	; 0x53
 80091aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	689a      	ldr	r2, [r3, #8]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091ba:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	689a      	ldr	r2, [r3, #8]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80091ca:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 80091cc:	f7fc fe18 	bl	8005e00 <HAL_GetTick>
 80091d0:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 80091d2:	e013      	b.n	80091fc <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80091d4:	f7fc fe14 	bl	8005e00 <HAL_GetTick>
 80091d8:	4602      	mov	r2, r0
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	1ad3      	subs	r3, r2, r3
 80091de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091e2:	d90b      	bls.n	80091fc <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	22ff      	movs	r2, #255	; 0xff
 80091ea:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2203      	movs	r2, #3
 80091f0:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80091f8:	2303      	movs	r3, #3
 80091fa:	e011      	b.n	8009220 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	68db      	ldr	r3, [r3, #12]
 8009202:	f003 0304 	and.w	r3, r3, #4
 8009206:	2b00      	cmp	r3, #0
 8009208:	d0e4      	beq.n	80091d4 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	22ff      	movs	r2, #255	; 0xff
 8009210:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2201      	movs	r2, #1
 8009216:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800921e:	2300      	movs	r3, #0
}
 8009220:	4618      	mov	r0, r3
 8009222:	3710      	adds	r7, #16
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8009230:	bf00      	nop
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d101      	bne.n	800924e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800924a:	2301      	movs	r3, #1
 800924c:	e07b      	b.n	8009346 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009252:	2b00      	cmp	r3, #0
 8009254:	d108      	bne.n	8009268 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800925e:	d009      	beq.n	8009274 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	61da      	str	r2, [r3, #28]
 8009266:	e005      	b.n	8009274 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009280:	b2db      	uxtb	r3, r3
 8009282:	2b00      	cmp	r3, #0
 8009284:	d106      	bne.n	8009294 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f7f9 f9fe 	bl	8002690 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2202      	movs	r2, #2
 8009298:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80092bc:	431a      	orrs	r2, r3
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092c6:	431a      	orrs	r2, r3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	691b      	ldr	r3, [r3, #16]
 80092cc:	f003 0302 	and.w	r3, r3, #2
 80092d0:	431a      	orrs	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	695b      	ldr	r3, [r3, #20]
 80092d6:	f003 0301 	and.w	r3, r3, #1
 80092da:	431a      	orrs	r2, r3
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	699b      	ldr	r3, [r3, #24]
 80092e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092e4:	431a      	orrs	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	69db      	ldr	r3, [r3, #28]
 80092ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80092ee:	431a      	orrs	r2, r3
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6a1b      	ldr	r3, [r3, #32]
 80092f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092f8:	ea42 0103 	orr.w	r1, r2, r3
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009300:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	430a      	orrs	r2, r1
 800930a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	699b      	ldr	r3, [r3, #24]
 8009310:	0c1b      	lsrs	r3, r3, #16
 8009312:	f003 0104 	and.w	r1, r3, #4
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931a:	f003 0210 	and.w	r2, r3, #16
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	430a      	orrs	r2, r1
 8009324:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	69da      	ldr	r2, [r3, #28]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009334:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2201      	movs	r2, #1
 8009340:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3708      	adds	r7, #8
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b088      	sub	sp, #32
 8009352:	af00      	add	r7, sp, #0
 8009354:	60f8      	str	r0, [r7, #12]
 8009356:	60b9      	str	r1, [r7, #8]
 8009358:	603b      	str	r3, [r7, #0]
 800935a:	4613      	mov	r3, r2
 800935c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800935e:	2300      	movs	r3, #0
 8009360:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009368:	2b01      	cmp	r3, #1
 800936a:	d101      	bne.n	8009370 <HAL_SPI_Transmit+0x22>
 800936c:	2302      	movs	r3, #2
 800936e:	e126      	b.n	80095be <HAL_SPI_Transmit+0x270>
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009378:	f7fc fd42 	bl	8005e00 <HAL_GetTick>
 800937c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800937e:	88fb      	ldrh	r3, [r7, #6]
 8009380:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009388:	b2db      	uxtb	r3, r3
 800938a:	2b01      	cmp	r3, #1
 800938c:	d002      	beq.n	8009394 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800938e:	2302      	movs	r3, #2
 8009390:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009392:	e10b      	b.n	80095ac <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d002      	beq.n	80093a0 <HAL_SPI_Transmit+0x52>
 800939a:	88fb      	ldrh	r3, [r7, #6]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d102      	bne.n	80093a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80093a0:	2301      	movs	r3, #1
 80093a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80093a4:	e102      	b.n	80095ac <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2203      	movs	r2, #3
 80093aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2200      	movs	r2, #0
 80093b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	68ba      	ldr	r2, [r7, #8]
 80093b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	88fa      	ldrh	r2, [r7, #6]
 80093be:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	88fa      	ldrh	r2, [r7, #6]
 80093c4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2200      	movs	r2, #0
 80093d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2200      	movs	r2, #0
 80093d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2200      	movs	r2, #0
 80093dc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2200      	movs	r2, #0
 80093e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093ec:	d10f      	bne.n	800940e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800940c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009418:	2b40      	cmp	r3, #64	; 0x40
 800941a:	d007      	beq.n	800942c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800942a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009434:	d14b      	bne.n	80094ce <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d002      	beq.n	8009444 <HAL_SPI_Transmit+0xf6>
 800943e:	8afb      	ldrh	r3, [r7, #22]
 8009440:	2b01      	cmp	r3, #1
 8009442:	d13e      	bne.n	80094c2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009448:	881a      	ldrh	r2, [r3, #0]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009454:	1c9a      	adds	r2, r3, #2
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800945e:	b29b      	uxth	r3, r3
 8009460:	3b01      	subs	r3, #1
 8009462:	b29a      	uxth	r2, r3
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009468:	e02b      	b.n	80094c2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	f003 0302 	and.w	r3, r3, #2
 8009474:	2b02      	cmp	r3, #2
 8009476:	d112      	bne.n	800949e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800947c:	881a      	ldrh	r2, [r3, #0]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009488:	1c9a      	adds	r2, r3, #2
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009492:	b29b      	uxth	r3, r3
 8009494:	3b01      	subs	r3, #1
 8009496:	b29a      	uxth	r2, r3
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	86da      	strh	r2, [r3, #54]	; 0x36
 800949c:	e011      	b.n	80094c2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800949e:	f7fc fcaf 	bl	8005e00 <HAL_GetTick>
 80094a2:	4602      	mov	r2, r0
 80094a4:	69bb      	ldr	r3, [r7, #24]
 80094a6:	1ad3      	subs	r3, r2, r3
 80094a8:	683a      	ldr	r2, [r7, #0]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d803      	bhi.n	80094b6 <HAL_SPI_Transmit+0x168>
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b4:	d102      	bne.n	80094bc <HAL_SPI_Transmit+0x16e>
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d102      	bne.n	80094c2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80094bc:	2303      	movs	r3, #3
 80094be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80094c0:	e074      	b.n	80095ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d1ce      	bne.n	800946a <HAL_SPI_Transmit+0x11c>
 80094cc:	e04c      	b.n	8009568 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d002      	beq.n	80094dc <HAL_SPI_Transmit+0x18e>
 80094d6:	8afb      	ldrh	r3, [r7, #22]
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d140      	bne.n	800955e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	330c      	adds	r3, #12
 80094e6:	7812      	ldrb	r2, [r2, #0]
 80094e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ee:	1c5a      	adds	r2, r3, #1
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	3b01      	subs	r3, #1
 80094fc:	b29a      	uxth	r2, r3
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009502:	e02c      	b.n	800955e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	f003 0302 	and.w	r3, r3, #2
 800950e:	2b02      	cmp	r3, #2
 8009510:	d113      	bne.n	800953a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	330c      	adds	r3, #12
 800951c:	7812      	ldrb	r2, [r2, #0]
 800951e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009524:	1c5a      	adds	r2, r3, #1
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800952e:	b29b      	uxth	r3, r3
 8009530:	3b01      	subs	r3, #1
 8009532:	b29a      	uxth	r2, r3
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	86da      	strh	r2, [r3, #54]	; 0x36
 8009538:	e011      	b.n	800955e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800953a:	f7fc fc61 	bl	8005e00 <HAL_GetTick>
 800953e:	4602      	mov	r2, r0
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	683a      	ldr	r2, [r7, #0]
 8009546:	429a      	cmp	r2, r3
 8009548:	d803      	bhi.n	8009552 <HAL_SPI_Transmit+0x204>
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009550:	d102      	bne.n	8009558 <HAL_SPI_Transmit+0x20a>
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d102      	bne.n	800955e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009558:	2303      	movs	r3, #3
 800955a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800955c:	e026      	b.n	80095ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009562:	b29b      	uxth	r3, r3
 8009564:	2b00      	cmp	r3, #0
 8009566:	d1cd      	bne.n	8009504 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009568:	69ba      	ldr	r2, [r7, #24]
 800956a:	6839      	ldr	r1, [r7, #0]
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	f000 fbcb 	bl	8009d08 <SPI_EndRxTxTransaction>
 8009572:	4603      	mov	r3, r0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d002      	beq.n	800957e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2220      	movs	r2, #32
 800957c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d10a      	bne.n	800959c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009586:	2300      	movs	r3, #0
 8009588:	613b      	str	r3, [r7, #16]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	613b      	str	r3, [r7, #16]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	613b      	str	r3, [r7, #16]
 800959a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d002      	beq.n	80095aa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	77fb      	strb	r3, [r7, #31]
 80095a8:	e000      	b.n	80095ac <HAL_SPI_Transmit+0x25e>
  }

error:
 80095aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80095bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3720      	adds	r7, #32
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b088      	sub	sp, #32
 80095ca:	af02      	add	r7, sp, #8
 80095cc:	60f8      	str	r0, [r7, #12]
 80095ce:	60b9      	str	r1, [r7, #8]
 80095d0:	603b      	str	r3, [r7, #0]
 80095d2:	4613      	mov	r3, r2
 80095d4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80095d6:	2300      	movs	r3, #0
 80095d8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095e2:	d112      	bne.n	800960a <HAL_SPI_Receive+0x44>
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d10e      	bne.n	800960a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2204      	movs	r2, #4
 80095f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80095f4:	88fa      	ldrh	r2, [r7, #6]
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	9300      	str	r3, [sp, #0]
 80095fa:	4613      	mov	r3, r2
 80095fc:	68ba      	ldr	r2, [r7, #8]
 80095fe:	68b9      	ldr	r1, [r7, #8]
 8009600:	68f8      	ldr	r0, [r7, #12]
 8009602:	f000 f8f1 	bl	80097e8 <HAL_SPI_TransmitReceive>
 8009606:	4603      	mov	r3, r0
 8009608:	e0ea      	b.n	80097e0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009610:	2b01      	cmp	r3, #1
 8009612:	d101      	bne.n	8009618 <HAL_SPI_Receive+0x52>
 8009614:	2302      	movs	r3, #2
 8009616:	e0e3      	b.n	80097e0 <HAL_SPI_Receive+0x21a>
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2201      	movs	r2, #1
 800961c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009620:	f7fc fbee 	bl	8005e00 <HAL_GetTick>
 8009624:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800962c:	b2db      	uxtb	r3, r3
 800962e:	2b01      	cmp	r3, #1
 8009630:	d002      	beq.n	8009638 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009632:	2302      	movs	r3, #2
 8009634:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009636:	e0ca      	b.n	80097ce <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d002      	beq.n	8009644 <HAL_SPI_Receive+0x7e>
 800963e:	88fb      	ldrh	r3, [r7, #6]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d102      	bne.n	800964a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009644:	2301      	movs	r3, #1
 8009646:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009648:	e0c1      	b.n	80097ce <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2204      	movs	r2, #4
 800964e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2200      	movs	r2, #0
 8009656:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	88fa      	ldrh	r2, [r7, #6]
 8009662:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	88fa      	ldrh	r2, [r7, #6]
 8009668:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2200      	movs	r2, #0
 800966e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2200      	movs	r2, #0
 8009674:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2200      	movs	r2, #0
 800967a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2200      	movs	r2, #0
 8009680:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2200      	movs	r2, #0
 8009686:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009690:	d10f      	bne.n	80096b2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80096b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096bc:	2b40      	cmp	r3, #64	; 0x40
 80096be:	d007      	beq.n	80096d0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d162      	bne.n	800979e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80096d8:	e02e      	b.n	8009738 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	f003 0301 	and.w	r3, r3, #1
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d115      	bne.n	8009714 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f103 020c 	add.w	r2, r3, #12
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f4:	7812      	ldrb	r2, [r2, #0]
 80096f6:	b2d2      	uxtb	r2, r2
 80096f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096fe:	1c5a      	adds	r2, r3, #1
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009708:	b29b      	uxth	r3, r3
 800970a:	3b01      	subs	r3, #1
 800970c:	b29a      	uxth	r2, r3
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009712:	e011      	b.n	8009738 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009714:	f7fc fb74 	bl	8005e00 <HAL_GetTick>
 8009718:	4602      	mov	r2, r0
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	1ad3      	subs	r3, r2, r3
 800971e:	683a      	ldr	r2, [r7, #0]
 8009720:	429a      	cmp	r2, r3
 8009722:	d803      	bhi.n	800972c <HAL_SPI_Receive+0x166>
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800972a:	d102      	bne.n	8009732 <HAL_SPI_Receive+0x16c>
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d102      	bne.n	8009738 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009732:	2303      	movs	r3, #3
 8009734:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009736:	e04a      	b.n	80097ce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800973c:	b29b      	uxth	r3, r3
 800973e:	2b00      	cmp	r3, #0
 8009740:	d1cb      	bne.n	80096da <HAL_SPI_Receive+0x114>
 8009742:	e031      	b.n	80097a8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	689b      	ldr	r3, [r3, #8]
 800974a:	f003 0301 	and.w	r3, r3, #1
 800974e:	2b01      	cmp	r3, #1
 8009750:	d113      	bne.n	800977a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	68da      	ldr	r2, [r3, #12]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800975c:	b292      	uxth	r2, r2
 800975e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009764:	1c9a      	adds	r2, r3, #2
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800976e:	b29b      	uxth	r3, r3
 8009770:	3b01      	subs	r3, #1
 8009772:	b29a      	uxth	r2, r3
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009778:	e011      	b.n	800979e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800977a:	f7fc fb41 	bl	8005e00 <HAL_GetTick>
 800977e:	4602      	mov	r2, r0
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	1ad3      	subs	r3, r2, r3
 8009784:	683a      	ldr	r2, [r7, #0]
 8009786:	429a      	cmp	r2, r3
 8009788:	d803      	bhi.n	8009792 <HAL_SPI_Receive+0x1cc>
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009790:	d102      	bne.n	8009798 <HAL_SPI_Receive+0x1d2>
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d102      	bne.n	800979e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009798:	2303      	movs	r3, #3
 800979a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800979c:	e017      	b.n	80097ce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d1cd      	bne.n	8009744 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80097a8:	693a      	ldr	r2, [r7, #16]
 80097aa:	6839      	ldr	r1, [r7, #0]
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f000 fa45 	bl	8009c3c <SPI_EndRxTransaction>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d002      	beq.n	80097be <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2220      	movs	r2, #32
 80097bc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d002      	beq.n	80097cc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80097c6:	2301      	movs	r3, #1
 80097c8:	75fb      	strb	r3, [r7, #23]
 80097ca:	e000      	b.n	80097ce <HAL_SPI_Receive+0x208>
  }

error :
 80097cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2201      	movs	r2, #1
 80097d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2200      	movs	r2, #0
 80097da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80097de:	7dfb      	ldrb	r3, [r7, #23]
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3718      	adds	r7, #24
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b08c      	sub	sp, #48	; 0x30
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	607a      	str	r2, [r7, #4]
 80097f4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80097f6:	2301      	movs	r3, #1
 80097f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80097fa:	2300      	movs	r3, #0
 80097fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009806:	2b01      	cmp	r3, #1
 8009808:	d101      	bne.n	800980e <HAL_SPI_TransmitReceive+0x26>
 800980a:	2302      	movs	r3, #2
 800980c:	e18a      	b.n	8009b24 <HAL_SPI_TransmitReceive+0x33c>
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2201      	movs	r2, #1
 8009812:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009816:	f7fc faf3 	bl	8005e00 <HAL_GetTick>
 800981a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800982c:	887b      	ldrh	r3, [r7, #2]
 800982e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009830:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009834:	2b01      	cmp	r3, #1
 8009836:	d00f      	beq.n	8009858 <HAL_SPI_TransmitReceive+0x70>
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800983e:	d107      	bne.n	8009850 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d103      	bne.n	8009850 <HAL_SPI_TransmitReceive+0x68>
 8009848:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800984c:	2b04      	cmp	r3, #4
 800984e:	d003      	beq.n	8009858 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009850:	2302      	movs	r3, #2
 8009852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009856:	e15b      	b.n	8009b10 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d005      	beq.n	800986a <HAL_SPI_TransmitReceive+0x82>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d002      	beq.n	800986a <HAL_SPI_TransmitReceive+0x82>
 8009864:	887b      	ldrh	r3, [r7, #2]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d103      	bne.n	8009872 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800986a:	2301      	movs	r3, #1
 800986c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009870:	e14e      	b.n	8009b10 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009878:	b2db      	uxtb	r3, r3
 800987a:	2b04      	cmp	r3, #4
 800987c:	d003      	beq.n	8009886 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2205      	movs	r2, #5
 8009882:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2200      	movs	r2, #0
 800988a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	887a      	ldrh	r2, [r7, #2]
 8009896:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	887a      	ldrh	r2, [r7, #2]
 800989c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	68ba      	ldr	r2, [r7, #8]
 80098a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	887a      	ldrh	r2, [r7, #2]
 80098a8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	887a      	ldrh	r2, [r7, #2]
 80098ae:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2200      	movs	r2, #0
 80098b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2200      	movs	r2, #0
 80098ba:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c6:	2b40      	cmp	r3, #64	; 0x40
 80098c8:	d007      	beq.n	80098da <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	68db      	ldr	r3, [r3, #12]
 80098de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098e2:	d178      	bne.n	80099d6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d002      	beq.n	80098f2 <HAL_SPI_TransmitReceive+0x10a>
 80098ec:	8b7b      	ldrh	r3, [r7, #26]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d166      	bne.n	80099c0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f6:	881a      	ldrh	r2, [r3, #0]
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009902:	1c9a      	adds	r2, r3, #2
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800990c:	b29b      	uxth	r3, r3
 800990e:	3b01      	subs	r3, #1
 8009910:	b29a      	uxth	r2, r3
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009916:	e053      	b.n	80099c0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	f003 0302 	and.w	r3, r3, #2
 8009922:	2b02      	cmp	r3, #2
 8009924:	d11b      	bne.n	800995e <HAL_SPI_TransmitReceive+0x176>
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800992a:	b29b      	uxth	r3, r3
 800992c:	2b00      	cmp	r3, #0
 800992e:	d016      	beq.n	800995e <HAL_SPI_TransmitReceive+0x176>
 8009930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009932:	2b01      	cmp	r3, #1
 8009934:	d113      	bne.n	800995e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800993a:	881a      	ldrh	r2, [r3, #0]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009946:	1c9a      	adds	r2, r3, #2
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009950:	b29b      	uxth	r3, r3
 8009952:	3b01      	subs	r3, #1
 8009954:	b29a      	uxth	r2, r3
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800995a:	2300      	movs	r3, #0
 800995c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	f003 0301 	and.w	r3, r3, #1
 8009968:	2b01      	cmp	r3, #1
 800996a:	d119      	bne.n	80099a0 <HAL_SPI_TransmitReceive+0x1b8>
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009970:	b29b      	uxth	r3, r3
 8009972:	2b00      	cmp	r3, #0
 8009974:	d014      	beq.n	80099a0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	68da      	ldr	r2, [r3, #12]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009980:	b292      	uxth	r2, r2
 8009982:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009988:	1c9a      	adds	r2, r3, #2
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009992:	b29b      	uxth	r3, r3
 8009994:	3b01      	subs	r3, #1
 8009996:	b29a      	uxth	r2, r3
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800999c:	2301      	movs	r3, #1
 800999e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80099a0:	f7fc fa2e 	bl	8005e00 <HAL_GetTick>
 80099a4:	4602      	mov	r2, r0
 80099a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a8:	1ad3      	subs	r3, r2, r3
 80099aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d807      	bhi.n	80099c0 <HAL_SPI_TransmitReceive+0x1d8>
 80099b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099b6:	d003      	beq.n	80099c0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80099b8:	2303      	movs	r3, #3
 80099ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80099be:	e0a7      	b.n	8009b10 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1a6      	bne.n	8009918 <HAL_SPI_TransmitReceive+0x130>
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1a1      	bne.n	8009918 <HAL_SPI_TransmitReceive+0x130>
 80099d4:	e07c      	b.n	8009ad0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d002      	beq.n	80099e4 <HAL_SPI_TransmitReceive+0x1fc>
 80099de:	8b7b      	ldrh	r3, [r7, #26]
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d16b      	bne.n	8009abc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	330c      	adds	r3, #12
 80099ee:	7812      	ldrb	r2, [r2, #0]
 80099f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f6:	1c5a      	adds	r2, r3, #1
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	3b01      	subs	r3, #1
 8009a04:	b29a      	uxth	r2, r3
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a0a:	e057      	b.n	8009abc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	f003 0302 	and.w	r3, r3, #2
 8009a16:	2b02      	cmp	r3, #2
 8009a18:	d11c      	bne.n	8009a54 <HAL_SPI_TransmitReceive+0x26c>
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d017      	beq.n	8009a54 <HAL_SPI_TransmitReceive+0x26c>
 8009a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d114      	bne.n	8009a54 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	330c      	adds	r3, #12
 8009a34:	7812      	ldrb	r2, [r2, #0]
 8009a36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a3c:	1c5a      	adds	r2, r3, #1
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	3b01      	subs	r3, #1
 8009a4a:	b29a      	uxth	r2, r3
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a50:	2300      	movs	r3, #0
 8009a52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	f003 0301 	and.w	r3, r3, #1
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d119      	bne.n	8009a96 <HAL_SPI_TransmitReceive+0x2ae>
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d014      	beq.n	8009a96 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	68da      	ldr	r2, [r3, #12]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a76:	b2d2      	uxtb	r2, r2
 8009a78:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a7e:	1c5a      	adds	r2, r3, #1
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	b29a      	uxth	r2, r3
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009a92:	2301      	movs	r3, #1
 8009a94:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009a96:	f7fc f9b3 	bl	8005e00 <HAL_GetTick>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9e:	1ad3      	subs	r3, r2, r3
 8009aa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d803      	bhi.n	8009aae <HAL_SPI_TransmitReceive+0x2c6>
 8009aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aac:	d102      	bne.n	8009ab4 <HAL_SPI_TransmitReceive+0x2cc>
 8009aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d103      	bne.n	8009abc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009aba:	e029      	b.n	8009b10 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d1a2      	bne.n	8009a0c <HAL_SPI_TransmitReceive+0x224>
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d19d      	bne.n	8009a0c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ad2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ad4:	68f8      	ldr	r0, [r7, #12]
 8009ad6:	f000 f917 	bl	8009d08 <SPI_EndRxTxTransaction>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d006      	beq.n	8009aee <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2220      	movs	r2, #32
 8009aea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009aec:	e010      	b.n	8009b10 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d10b      	bne.n	8009b0e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009af6:	2300      	movs	r3, #0
 8009af8:	617b      	str	r3, [r7, #20]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	68db      	ldr	r3, [r3, #12]
 8009b00:	617b      	str	r3, [r7, #20]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	617b      	str	r3, [r7, #20]
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	e000      	b.n	8009b10 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009b0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009b20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3730      	adds	r7, #48	; 0x30
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b088      	sub	sp, #32
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	603b      	str	r3, [r7, #0]
 8009b38:	4613      	mov	r3, r2
 8009b3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009b3c:	f7fc f960 	bl	8005e00 <HAL_GetTick>
 8009b40:	4602      	mov	r2, r0
 8009b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b44:	1a9b      	subs	r3, r3, r2
 8009b46:	683a      	ldr	r2, [r7, #0]
 8009b48:	4413      	add	r3, r2
 8009b4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009b4c:	f7fc f958 	bl	8005e00 <HAL_GetTick>
 8009b50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009b52:	4b39      	ldr	r3, [pc, #228]	; (8009c38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	015b      	lsls	r3, r3, #5
 8009b58:	0d1b      	lsrs	r3, r3, #20
 8009b5a:	69fa      	ldr	r2, [r7, #28]
 8009b5c:	fb02 f303 	mul.w	r3, r2, r3
 8009b60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b62:	e054      	b.n	8009c0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b6a:	d050      	beq.n	8009c0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009b6c:	f7fc f948 	bl	8005e00 <HAL_GetTick>
 8009b70:	4602      	mov	r2, r0
 8009b72:	69bb      	ldr	r3, [r7, #24]
 8009b74:	1ad3      	subs	r3, r2, r3
 8009b76:	69fa      	ldr	r2, [r7, #28]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d902      	bls.n	8009b82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009b7c:	69fb      	ldr	r3, [r7, #28]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d13d      	bne.n	8009bfe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	685a      	ldr	r2, [r3, #4]
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009b90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b9a:	d111      	bne.n	8009bc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ba4:	d004      	beq.n	8009bb0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bae:	d107      	bne.n	8009bc0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bc8:	d10f      	bne.n	8009bea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009bd8:	601a      	str	r2, [r3, #0]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009be8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2201      	movs	r2, #1
 8009bee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009bfa:	2303      	movs	r3, #3
 8009bfc:	e017      	b.n	8009c2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d101      	bne.n	8009c08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009c04:	2300      	movs	r3, #0
 8009c06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	689a      	ldr	r2, [r3, #8]
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	4013      	ands	r3, r2
 8009c18:	68ba      	ldr	r2, [r7, #8]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	bf0c      	ite	eq
 8009c1e:	2301      	moveq	r3, #1
 8009c20:	2300      	movne	r3, #0
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	461a      	mov	r2, r3
 8009c26:	79fb      	ldrb	r3, [r7, #7]
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d19b      	bne.n	8009b64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3720      	adds	r7, #32
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	2000003c 	.word	0x2000003c

08009c3c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af02      	add	r7, sp, #8
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c50:	d111      	bne.n	8009c76 <SPI_EndRxTransaction+0x3a>
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c5a:	d004      	beq.n	8009c66 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c64:	d107      	bne.n	8009c76 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c74:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c7e:	d12a      	bne.n	8009cd6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c88:	d012      	beq.n	8009cb0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	9300      	str	r3, [sp, #0]
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	2200      	movs	r2, #0
 8009c92:	2180      	movs	r1, #128	; 0x80
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f7ff ff49 	bl	8009b2c <SPI_WaitFlagStateUntilTimeout>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d02d      	beq.n	8009cfc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ca4:	f043 0220 	orr.w	r2, r3, #32
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009cac:	2303      	movs	r3, #3
 8009cae:	e026      	b.n	8009cfe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	9300      	str	r3, [sp, #0]
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	2101      	movs	r1, #1
 8009cba:	68f8      	ldr	r0, [r7, #12]
 8009cbc:	f7ff ff36 	bl	8009b2c <SPI_WaitFlagStateUntilTimeout>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d01a      	beq.n	8009cfc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cca:	f043 0220 	orr.w	r2, r3, #32
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009cd2:	2303      	movs	r3, #3
 8009cd4:	e013      	b.n	8009cfe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	9300      	str	r3, [sp, #0]
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	2101      	movs	r1, #1
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f7ff ff23 	bl	8009b2c <SPI_WaitFlagStateUntilTimeout>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d007      	beq.n	8009cfc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cf0:	f043 0220 	orr.w	r2, r3, #32
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009cf8:	2303      	movs	r3, #3
 8009cfa:	e000      	b.n	8009cfe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3710      	adds	r7, #16
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
	...

08009d08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b088      	sub	sp, #32
 8009d0c:	af02      	add	r7, sp, #8
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009d14:	4b1b      	ldr	r3, [pc, #108]	; (8009d84 <SPI_EndRxTxTransaction+0x7c>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a1b      	ldr	r2, [pc, #108]	; (8009d88 <SPI_EndRxTxTransaction+0x80>)
 8009d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d1e:	0d5b      	lsrs	r3, r3, #21
 8009d20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009d24:	fb02 f303 	mul.w	r3, r2, r3
 8009d28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d32:	d112      	bne.n	8009d5a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	9300      	str	r3, [sp, #0]
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	2180      	movs	r1, #128	; 0x80
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	f7ff fef4 	bl	8009b2c <SPI_WaitFlagStateUntilTimeout>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d016      	beq.n	8009d78 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d4e:	f043 0220 	orr.w	r2, r3, #32
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009d56:	2303      	movs	r3, #3
 8009d58:	e00f      	b.n	8009d7a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d00a      	beq.n	8009d76 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	3b01      	subs	r3, #1
 8009d64:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d70:	2b80      	cmp	r3, #128	; 0x80
 8009d72:	d0f2      	beq.n	8009d5a <SPI_EndRxTxTransaction+0x52>
 8009d74:	e000      	b.n	8009d78 <SPI_EndRxTxTransaction+0x70>
        break;
 8009d76:	bf00      	nop
  }

  return HAL_OK;
 8009d78:	2300      	movs	r3, #0
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3718      	adds	r7, #24
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	2000003c 	.word	0x2000003c
 8009d88:	165e9f81 	.word	0x165e9f81

08009d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d101      	bne.n	8009d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e041      	b.n	8009e22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d106      	bne.n	8009db8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f7f8 fe6e 	bl	8002a94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2202      	movs	r2, #2
 8009dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681a      	ldr	r2, [r3, #0]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	3304      	adds	r3, #4
 8009dc8:	4619      	mov	r1, r3
 8009dca:	4610      	mov	r0, r2
 8009dcc:	f000 fcea 	bl	800a7a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2201      	movs	r2, #1
 8009ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2201      	movs	r2, #1
 8009de4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2201      	movs	r2, #1
 8009dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2201      	movs	r2, #1
 8009df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2201      	movs	r2, #1
 8009e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2201      	movs	r2, #1
 8009e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e20:	2300      	movs	r3, #0
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3708      	adds	r7, #8
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
	...

08009e2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b085      	sub	sp, #20
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d001      	beq.n	8009e44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009e40:	2301      	movs	r3, #1
 8009e42:	e04e      	b.n	8009ee2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2202      	movs	r2, #2
 8009e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	68da      	ldr	r2, [r3, #12]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f042 0201 	orr.w	r2, r2, #1
 8009e5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a23      	ldr	r2, [pc, #140]	; (8009ef0 <HAL_TIM_Base_Start_IT+0xc4>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d022      	beq.n	8009eac <HAL_TIM_Base_Start_IT+0x80>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e6e:	d01d      	beq.n	8009eac <HAL_TIM_Base_Start_IT+0x80>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a1f      	ldr	r2, [pc, #124]	; (8009ef4 <HAL_TIM_Base_Start_IT+0xc8>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d018      	beq.n	8009eac <HAL_TIM_Base_Start_IT+0x80>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a1e      	ldr	r2, [pc, #120]	; (8009ef8 <HAL_TIM_Base_Start_IT+0xcc>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d013      	beq.n	8009eac <HAL_TIM_Base_Start_IT+0x80>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a1c      	ldr	r2, [pc, #112]	; (8009efc <HAL_TIM_Base_Start_IT+0xd0>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d00e      	beq.n	8009eac <HAL_TIM_Base_Start_IT+0x80>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a1b      	ldr	r2, [pc, #108]	; (8009f00 <HAL_TIM_Base_Start_IT+0xd4>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d009      	beq.n	8009eac <HAL_TIM_Base_Start_IT+0x80>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a19      	ldr	r2, [pc, #100]	; (8009f04 <HAL_TIM_Base_Start_IT+0xd8>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d004      	beq.n	8009eac <HAL_TIM_Base_Start_IT+0x80>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4a18      	ldr	r2, [pc, #96]	; (8009f08 <HAL_TIM_Base_Start_IT+0xdc>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d111      	bne.n	8009ed0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	f003 0307 	and.w	r3, r3, #7
 8009eb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2b06      	cmp	r3, #6
 8009ebc:	d010      	beq.n	8009ee0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f042 0201 	orr.w	r2, r2, #1
 8009ecc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ece:	e007      	b.n	8009ee0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f042 0201 	orr.w	r2, r2, #1
 8009ede:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ee0:	2300      	movs	r3, #0
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3714      	adds	r7, #20
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr
 8009eee:	bf00      	nop
 8009ef0:	40010000 	.word	0x40010000
 8009ef4:	40000400 	.word	0x40000400
 8009ef8:	40000800 	.word	0x40000800
 8009efc:	40000c00 	.word	0x40000c00
 8009f00:	40010400 	.word	0x40010400
 8009f04:	40014000 	.word	0x40014000
 8009f08:	40001800 	.word	0x40001800

08009f0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d101      	bne.n	8009f1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e041      	b.n	8009fa2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d106      	bne.n	8009f38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 f839 	bl	8009faa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2202      	movs	r2, #2
 8009f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	3304      	adds	r3, #4
 8009f48:	4619      	mov	r1, r3
 8009f4a:	4610      	mov	r0, r2
 8009f4c:	f000 fc2a 	bl	800a7a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2201      	movs	r2, #1
 8009f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2201      	movs	r2, #1
 8009f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2201      	movs	r2, #1
 8009f84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3708      	adds	r7, #8
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009faa:	b480      	push	{r7}
 8009fac:	b083      	sub	sp, #12
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009fb2:	bf00      	nop
 8009fb4:	370c      	adds	r7, #12
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr
	...

08009fc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d109      	bne.n	8009fe4 <HAL_TIM_PWM_Start+0x24>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	bf14      	ite	ne
 8009fdc:	2301      	movne	r3, #1
 8009fde:	2300      	moveq	r3, #0
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	e022      	b.n	800a02a <HAL_TIM_PWM_Start+0x6a>
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	2b04      	cmp	r3, #4
 8009fe8:	d109      	bne.n	8009ffe <HAL_TIM_PWM_Start+0x3e>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	bf14      	ite	ne
 8009ff6:	2301      	movne	r3, #1
 8009ff8:	2300      	moveq	r3, #0
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	e015      	b.n	800a02a <HAL_TIM_PWM_Start+0x6a>
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	2b08      	cmp	r3, #8
 800a002:	d109      	bne.n	800a018 <HAL_TIM_PWM_Start+0x58>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	bf14      	ite	ne
 800a010:	2301      	movne	r3, #1
 800a012:	2300      	moveq	r3, #0
 800a014:	b2db      	uxtb	r3, r3
 800a016:	e008      	b.n	800a02a <HAL_TIM_PWM_Start+0x6a>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	2b01      	cmp	r3, #1
 800a022:	bf14      	ite	ne
 800a024:	2301      	movne	r3, #1
 800a026:	2300      	moveq	r3, #0
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d001      	beq.n	800a032 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a02e:	2301      	movs	r3, #1
 800a030:	e07c      	b.n	800a12c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d104      	bne.n	800a042 <HAL_TIM_PWM_Start+0x82>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2202      	movs	r2, #2
 800a03c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a040:	e013      	b.n	800a06a <HAL_TIM_PWM_Start+0xaa>
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	2b04      	cmp	r3, #4
 800a046:	d104      	bne.n	800a052 <HAL_TIM_PWM_Start+0x92>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2202      	movs	r2, #2
 800a04c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a050:	e00b      	b.n	800a06a <HAL_TIM_PWM_Start+0xaa>
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	2b08      	cmp	r3, #8
 800a056:	d104      	bne.n	800a062 <HAL_TIM_PWM_Start+0xa2>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2202      	movs	r2, #2
 800a05c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a060:	e003      	b.n	800a06a <HAL_TIM_PWM_Start+0xaa>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2202      	movs	r2, #2
 800a066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	2201      	movs	r2, #1
 800a070:	6839      	ldr	r1, [r7, #0]
 800a072:	4618      	mov	r0, r3
 800a074:	f000 fe80 	bl	800ad78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4a2d      	ldr	r2, [pc, #180]	; (800a134 <HAL_TIM_PWM_Start+0x174>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d004      	beq.n	800a08c <HAL_TIM_PWM_Start+0xcc>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4a2c      	ldr	r2, [pc, #176]	; (800a138 <HAL_TIM_PWM_Start+0x178>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d101      	bne.n	800a090 <HAL_TIM_PWM_Start+0xd0>
 800a08c:	2301      	movs	r3, #1
 800a08e:	e000      	b.n	800a092 <HAL_TIM_PWM_Start+0xd2>
 800a090:	2300      	movs	r3, #0
 800a092:	2b00      	cmp	r3, #0
 800a094:	d007      	beq.n	800a0a6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a0a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a22      	ldr	r2, [pc, #136]	; (800a134 <HAL_TIM_PWM_Start+0x174>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d022      	beq.n	800a0f6 <HAL_TIM_PWM_Start+0x136>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0b8:	d01d      	beq.n	800a0f6 <HAL_TIM_PWM_Start+0x136>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4a1f      	ldr	r2, [pc, #124]	; (800a13c <HAL_TIM_PWM_Start+0x17c>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d018      	beq.n	800a0f6 <HAL_TIM_PWM_Start+0x136>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a1d      	ldr	r2, [pc, #116]	; (800a140 <HAL_TIM_PWM_Start+0x180>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d013      	beq.n	800a0f6 <HAL_TIM_PWM_Start+0x136>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4a1c      	ldr	r2, [pc, #112]	; (800a144 <HAL_TIM_PWM_Start+0x184>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d00e      	beq.n	800a0f6 <HAL_TIM_PWM_Start+0x136>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a16      	ldr	r2, [pc, #88]	; (800a138 <HAL_TIM_PWM_Start+0x178>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d009      	beq.n	800a0f6 <HAL_TIM_PWM_Start+0x136>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a18      	ldr	r2, [pc, #96]	; (800a148 <HAL_TIM_PWM_Start+0x188>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d004      	beq.n	800a0f6 <HAL_TIM_PWM_Start+0x136>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a16      	ldr	r2, [pc, #88]	; (800a14c <HAL_TIM_PWM_Start+0x18c>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d111      	bne.n	800a11a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	f003 0307 	and.w	r3, r3, #7
 800a100:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2b06      	cmp	r3, #6
 800a106:	d010      	beq.n	800a12a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f042 0201 	orr.w	r2, r2, #1
 800a116:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a118:	e007      	b.n	800a12a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f042 0201 	orr.w	r2, r2, #1
 800a128:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a12a:	2300      	movs	r3, #0
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3710      	adds	r7, #16
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}
 800a134:	40010000 	.word	0x40010000
 800a138:	40010400 	.word	0x40010400
 800a13c:	40000400 	.word	0x40000400
 800a140:	40000800 	.word	0x40000800
 800a144:	40000c00 	.word	0x40000c00
 800a148:	40014000 	.word	0x40014000
 800a14c:	40001800 	.word	0x40001800

0800a150 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	2200      	movs	r2, #0
 800a160:	6839      	ldr	r1, [r7, #0]
 800a162:	4618      	mov	r0, r3
 800a164:	f000 fe08 	bl	800ad78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a2e      	ldr	r2, [pc, #184]	; (800a228 <HAL_TIM_PWM_Stop+0xd8>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d004      	beq.n	800a17c <HAL_TIM_PWM_Stop+0x2c>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a2d      	ldr	r2, [pc, #180]	; (800a22c <HAL_TIM_PWM_Stop+0xdc>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d101      	bne.n	800a180 <HAL_TIM_PWM_Stop+0x30>
 800a17c:	2301      	movs	r3, #1
 800a17e:	e000      	b.n	800a182 <HAL_TIM_PWM_Stop+0x32>
 800a180:	2300      	movs	r3, #0
 800a182:	2b00      	cmp	r3, #0
 800a184:	d017      	beq.n	800a1b6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	6a1a      	ldr	r2, [r3, #32]
 800a18c:	f241 1311 	movw	r3, #4369	; 0x1111
 800a190:	4013      	ands	r3, r2
 800a192:	2b00      	cmp	r3, #0
 800a194:	d10f      	bne.n	800a1b6 <HAL_TIM_PWM_Stop+0x66>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	6a1a      	ldr	r2, [r3, #32]
 800a19c:	f240 4344 	movw	r3, #1092	; 0x444
 800a1a0:	4013      	ands	r3, r2
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d107      	bne.n	800a1b6 <HAL_TIM_PWM_Stop+0x66>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a1b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	6a1a      	ldr	r2, [r3, #32]
 800a1bc:	f241 1311 	movw	r3, #4369	; 0x1111
 800a1c0:	4013      	ands	r3, r2
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d10f      	bne.n	800a1e6 <HAL_TIM_PWM_Stop+0x96>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	6a1a      	ldr	r2, [r3, #32]
 800a1cc:	f240 4344 	movw	r3, #1092	; 0x444
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d107      	bne.n	800a1e6 <HAL_TIM_PWM_Stop+0x96>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f022 0201 	bic.w	r2, r2, #1
 800a1e4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d104      	bne.n	800a1f6 <HAL_TIM_PWM_Stop+0xa6>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a1f4:	e013      	b.n	800a21e <HAL_TIM_PWM_Stop+0xce>
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	2b04      	cmp	r3, #4
 800a1fa:	d104      	bne.n	800a206 <HAL_TIM_PWM_Stop+0xb6>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2201      	movs	r2, #1
 800a200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a204:	e00b      	b.n	800a21e <HAL_TIM_PWM_Stop+0xce>
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	2b08      	cmp	r3, #8
 800a20a:	d104      	bne.n	800a216 <HAL_TIM_PWM_Stop+0xc6>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2201      	movs	r2, #1
 800a210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a214:	e003      	b.n	800a21e <HAL_TIM_PWM_Stop+0xce>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2201      	movs	r2, #1
 800a21a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800a21e:	2300      	movs	r3, #0
}
 800a220:	4618      	mov	r0, r3
 800a222:	3708      	adds	r7, #8
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	40010000 	.word	0x40010000
 800a22c:	40010400 	.word	0x40010400

0800a230 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	691b      	ldr	r3, [r3, #16]
 800a23e:	f003 0302 	and.w	r3, r3, #2
 800a242:	2b02      	cmp	r3, #2
 800a244:	d122      	bne.n	800a28c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	f003 0302 	and.w	r3, r3, #2
 800a250:	2b02      	cmp	r3, #2
 800a252:	d11b      	bne.n	800a28c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f06f 0202 	mvn.w	r2, #2
 800a25c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2201      	movs	r2, #1
 800a262:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	699b      	ldr	r3, [r3, #24]
 800a26a:	f003 0303 	and.w	r3, r3, #3
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d003      	beq.n	800a27a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 fa77 	bl	800a766 <HAL_TIM_IC_CaptureCallback>
 800a278:	e005      	b.n	800a286 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 fa69 	bl	800a752 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 fa7a 	bl	800a77a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	691b      	ldr	r3, [r3, #16]
 800a292:	f003 0304 	and.w	r3, r3, #4
 800a296:	2b04      	cmp	r3, #4
 800a298:	d122      	bne.n	800a2e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	f003 0304 	and.w	r3, r3, #4
 800a2a4:	2b04      	cmp	r3, #4
 800a2a6:	d11b      	bne.n	800a2e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f06f 0204 	mvn.w	r2, #4
 800a2b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2202      	movs	r2, #2
 800a2b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	699b      	ldr	r3, [r3, #24]
 800a2be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d003      	beq.n	800a2ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 fa4d 	bl	800a766 <HAL_TIM_IC_CaptureCallback>
 800a2cc:	e005      	b.n	800a2da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 fa3f 	bl	800a752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 fa50 	bl	800a77a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	691b      	ldr	r3, [r3, #16]
 800a2e6:	f003 0308 	and.w	r3, r3, #8
 800a2ea:	2b08      	cmp	r3, #8
 800a2ec:	d122      	bne.n	800a334 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	f003 0308 	and.w	r3, r3, #8
 800a2f8:	2b08      	cmp	r3, #8
 800a2fa:	d11b      	bne.n	800a334 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f06f 0208 	mvn.w	r2, #8
 800a304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2204      	movs	r2, #4
 800a30a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	69db      	ldr	r3, [r3, #28]
 800a312:	f003 0303 	and.w	r3, r3, #3
 800a316:	2b00      	cmp	r3, #0
 800a318:	d003      	beq.n	800a322 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 fa23 	bl	800a766 <HAL_TIM_IC_CaptureCallback>
 800a320:	e005      	b.n	800a32e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 fa15 	bl	800a752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 fa26 	bl	800a77a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	691b      	ldr	r3, [r3, #16]
 800a33a:	f003 0310 	and.w	r3, r3, #16
 800a33e:	2b10      	cmp	r3, #16
 800a340:	d122      	bne.n	800a388 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	f003 0310 	and.w	r3, r3, #16
 800a34c:	2b10      	cmp	r3, #16
 800a34e:	d11b      	bne.n	800a388 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f06f 0210 	mvn.w	r2, #16
 800a358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2208      	movs	r2, #8
 800a35e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	69db      	ldr	r3, [r3, #28]
 800a366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d003      	beq.n	800a376 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 f9f9 	bl	800a766 <HAL_TIM_IC_CaptureCallback>
 800a374:	e005      	b.n	800a382 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 f9eb 	bl	800a752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 f9fc 	bl	800a77a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	691b      	ldr	r3, [r3, #16]
 800a38e:	f003 0301 	and.w	r3, r3, #1
 800a392:	2b01      	cmp	r3, #1
 800a394:	d10e      	bne.n	800a3b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	f003 0301 	and.w	r3, r3, #1
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d107      	bne.n	800a3b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f06f 0201 	mvn.w	r2, #1
 800a3ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f7f7 fe6e 	bl	8002090 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	691b      	ldr	r3, [r3, #16]
 800a3ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3be:	2b80      	cmp	r3, #128	; 0x80
 800a3c0:	d10e      	bne.n	800a3e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3cc:	2b80      	cmp	r3, #128	; 0x80
 800a3ce:	d107      	bne.n	800a3e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a3d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 fd78 	bl	800aed0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	691b      	ldr	r3, [r3, #16]
 800a3e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3ea:	2b40      	cmp	r3, #64	; 0x40
 800a3ec:	d10e      	bne.n	800a40c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3f8:	2b40      	cmp	r3, #64	; 0x40
 800a3fa:	d107      	bne.n	800a40c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 f9c1 	bl	800a78e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	691b      	ldr	r3, [r3, #16]
 800a412:	f003 0320 	and.w	r3, r3, #32
 800a416:	2b20      	cmp	r3, #32
 800a418:	d10e      	bne.n	800a438 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	68db      	ldr	r3, [r3, #12]
 800a420:	f003 0320 	and.w	r3, r3, #32
 800a424:	2b20      	cmp	r3, #32
 800a426:	d107      	bne.n	800a438 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f06f 0220 	mvn.w	r2, #32
 800a430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 fd42 	bl	800aebc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a438:	bf00      	nop
 800a43a:	3708      	adds	r7, #8
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b086      	sub	sp, #24
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a44c:	2300      	movs	r3, #0
 800a44e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a456:	2b01      	cmp	r3, #1
 800a458:	d101      	bne.n	800a45e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a45a:	2302      	movs	r3, #2
 800a45c:	e0ae      	b.n	800a5bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2201      	movs	r2, #1
 800a462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2b0c      	cmp	r3, #12
 800a46a:	f200 809f 	bhi.w	800a5ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a46e:	a201      	add	r2, pc, #4	; (adr r2, 800a474 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a474:	0800a4a9 	.word	0x0800a4a9
 800a478:	0800a5ad 	.word	0x0800a5ad
 800a47c:	0800a5ad 	.word	0x0800a5ad
 800a480:	0800a5ad 	.word	0x0800a5ad
 800a484:	0800a4e9 	.word	0x0800a4e9
 800a488:	0800a5ad 	.word	0x0800a5ad
 800a48c:	0800a5ad 	.word	0x0800a5ad
 800a490:	0800a5ad 	.word	0x0800a5ad
 800a494:	0800a52b 	.word	0x0800a52b
 800a498:	0800a5ad 	.word	0x0800a5ad
 800a49c:	0800a5ad 	.word	0x0800a5ad
 800a4a0:	0800a5ad 	.word	0x0800a5ad
 800a4a4:	0800a56b 	.word	0x0800a56b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	68b9      	ldr	r1, [r7, #8]
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f000 fa18 	bl	800a8e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	699a      	ldr	r2, [r3, #24]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f042 0208 	orr.w	r2, r2, #8
 800a4c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	699a      	ldr	r2, [r3, #24]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f022 0204 	bic.w	r2, r2, #4
 800a4d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	6999      	ldr	r1, [r3, #24]
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	691a      	ldr	r2, [r3, #16]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	430a      	orrs	r2, r1
 800a4e4:	619a      	str	r2, [r3, #24]
      break;
 800a4e6:	e064      	b.n	800a5b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	68b9      	ldr	r1, [r7, #8]
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f000 fa68 	bl	800a9c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	699a      	ldr	r2, [r3, #24]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a502:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	699a      	ldr	r2, [r3, #24]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a512:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	6999      	ldr	r1, [r3, #24]
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	021a      	lsls	r2, r3, #8
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	430a      	orrs	r2, r1
 800a526:	619a      	str	r2, [r3, #24]
      break;
 800a528:	e043      	b.n	800a5b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	68b9      	ldr	r1, [r7, #8]
 800a530:	4618      	mov	r0, r3
 800a532:	f000 fabd 	bl	800aab0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	69da      	ldr	r2, [r3, #28]
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f042 0208 	orr.w	r2, r2, #8
 800a544:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	69da      	ldr	r2, [r3, #28]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f022 0204 	bic.w	r2, r2, #4
 800a554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	69d9      	ldr	r1, [r3, #28]
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	691a      	ldr	r2, [r3, #16]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	430a      	orrs	r2, r1
 800a566:	61da      	str	r2, [r3, #28]
      break;
 800a568:	e023      	b.n	800a5b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	68b9      	ldr	r1, [r7, #8]
 800a570:	4618      	mov	r0, r3
 800a572:	f000 fb11 	bl	800ab98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	69da      	ldr	r2, [r3, #28]
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a584:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	69da      	ldr	r2, [r3, #28]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a594:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	69d9      	ldr	r1, [r3, #28]
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	691b      	ldr	r3, [r3, #16]
 800a5a0:	021a      	lsls	r2, r3, #8
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	430a      	orrs	r2, r1
 800a5a8:	61da      	str	r2, [r3, #28]
      break;
 800a5aa:	e002      	b.n	800a5b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	75fb      	strb	r3, [r7, #23]
      break;
 800a5b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a5ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3718      	adds	r7, #24
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b084      	sub	sp, #16
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d101      	bne.n	800a5e0 <HAL_TIM_ConfigClockSource+0x1c>
 800a5dc:	2302      	movs	r3, #2
 800a5de:	e0b4      	b.n	800a74a <HAL_TIM_ConfigClockSource+0x186>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2202      	movs	r2, #2
 800a5ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a5fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a606:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	68ba      	ldr	r2, [r7, #8]
 800a60e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a618:	d03e      	beq.n	800a698 <HAL_TIM_ConfigClockSource+0xd4>
 800a61a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a61e:	f200 8087 	bhi.w	800a730 <HAL_TIM_ConfigClockSource+0x16c>
 800a622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a626:	f000 8086 	beq.w	800a736 <HAL_TIM_ConfigClockSource+0x172>
 800a62a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a62e:	d87f      	bhi.n	800a730 <HAL_TIM_ConfigClockSource+0x16c>
 800a630:	2b70      	cmp	r3, #112	; 0x70
 800a632:	d01a      	beq.n	800a66a <HAL_TIM_ConfigClockSource+0xa6>
 800a634:	2b70      	cmp	r3, #112	; 0x70
 800a636:	d87b      	bhi.n	800a730 <HAL_TIM_ConfigClockSource+0x16c>
 800a638:	2b60      	cmp	r3, #96	; 0x60
 800a63a:	d050      	beq.n	800a6de <HAL_TIM_ConfigClockSource+0x11a>
 800a63c:	2b60      	cmp	r3, #96	; 0x60
 800a63e:	d877      	bhi.n	800a730 <HAL_TIM_ConfigClockSource+0x16c>
 800a640:	2b50      	cmp	r3, #80	; 0x50
 800a642:	d03c      	beq.n	800a6be <HAL_TIM_ConfigClockSource+0xfa>
 800a644:	2b50      	cmp	r3, #80	; 0x50
 800a646:	d873      	bhi.n	800a730 <HAL_TIM_ConfigClockSource+0x16c>
 800a648:	2b40      	cmp	r3, #64	; 0x40
 800a64a:	d058      	beq.n	800a6fe <HAL_TIM_ConfigClockSource+0x13a>
 800a64c:	2b40      	cmp	r3, #64	; 0x40
 800a64e:	d86f      	bhi.n	800a730 <HAL_TIM_ConfigClockSource+0x16c>
 800a650:	2b30      	cmp	r3, #48	; 0x30
 800a652:	d064      	beq.n	800a71e <HAL_TIM_ConfigClockSource+0x15a>
 800a654:	2b30      	cmp	r3, #48	; 0x30
 800a656:	d86b      	bhi.n	800a730 <HAL_TIM_ConfigClockSource+0x16c>
 800a658:	2b20      	cmp	r3, #32
 800a65a:	d060      	beq.n	800a71e <HAL_TIM_ConfigClockSource+0x15a>
 800a65c:	2b20      	cmp	r3, #32
 800a65e:	d867      	bhi.n	800a730 <HAL_TIM_ConfigClockSource+0x16c>
 800a660:	2b00      	cmp	r3, #0
 800a662:	d05c      	beq.n	800a71e <HAL_TIM_ConfigClockSource+0x15a>
 800a664:	2b10      	cmp	r3, #16
 800a666:	d05a      	beq.n	800a71e <HAL_TIM_ConfigClockSource+0x15a>
 800a668:	e062      	b.n	800a730 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6818      	ldr	r0, [r3, #0]
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	6899      	ldr	r1, [r3, #8]
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	685a      	ldr	r2, [r3, #4]
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	f000 fb5d 	bl	800ad38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a68c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	68ba      	ldr	r2, [r7, #8]
 800a694:	609a      	str	r2, [r3, #8]
      break;
 800a696:	e04f      	b.n	800a738 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6818      	ldr	r0, [r3, #0]
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	6899      	ldr	r1, [r3, #8]
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	685a      	ldr	r2, [r3, #4]
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	f000 fb46 	bl	800ad38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	689a      	ldr	r2, [r3, #8]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a6ba:	609a      	str	r2, [r3, #8]
      break;
 800a6bc:	e03c      	b.n	800a738 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6818      	ldr	r0, [r3, #0]
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	6859      	ldr	r1, [r3, #4]
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	f000 faba 	bl	800ac44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2150      	movs	r1, #80	; 0x50
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f000 fb13 	bl	800ad02 <TIM_ITRx_SetConfig>
      break;
 800a6dc:	e02c      	b.n	800a738 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6818      	ldr	r0, [r3, #0]
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	6859      	ldr	r1, [r3, #4]
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	f000 fad9 	bl	800aca2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	2160      	movs	r1, #96	; 0x60
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f000 fb03 	bl	800ad02 <TIM_ITRx_SetConfig>
      break;
 800a6fc:	e01c      	b.n	800a738 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6818      	ldr	r0, [r3, #0]
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	6859      	ldr	r1, [r3, #4]
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	68db      	ldr	r3, [r3, #12]
 800a70a:	461a      	mov	r2, r3
 800a70c:	f000 fa9a 	bl	800ac44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	2140      	movs	r1, #64	; 0x40
 800a716:	4618      	mov	r0, r3
 800a718:	f000 faf3 	bl	800ad02 <TIM_ITRx_SetConfig>
      break;
 800a71c:	e00c      	b.n	800a738 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4619      	mov	r1, r3
 800a728:	4610      	mov	r0, r2
 800a72a:	f000 faea 	bl	800ad02 <TIM_ITRx_SetConfig>
      break;
 800a72e:	e003      	b.n	800a738 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a730:	2301      	movs	r3, #1
 800a732:	73fb      	strb	r3, [r7, #15]
      break;
 800a734:	e000      	b.n	800a738 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a736:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2201      	movs	r2, #1
 800a73c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2200      	movs	r2, #0
 800a744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a748:	7bfb      	ldrb	r3, [r7, #15]
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a752:	b480      	push	{r7}
 800a754:	b083      	sub	sp, #12
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a75a:	bf00      	nop
 800a75c:	370c      	adds	r7, #12
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr

0800a766 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a766:	b480      	push	{r7}
 800a768:	b083      	sub	sp, #12
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a76e:	bf00      	nop
 800a770:	370c      	adds	r7, #12
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr

0800a77a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a77a:	b480      	push	{r7}
 800a77c:	b083      	sub	sp, #12
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a782:	bf00      	nop
 800a784:	370c      	adds	r7, #12
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr

0800a78e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a78e:	b480      	push	{r7}
 800a790:	b083      	sub	sp, #12
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a796:	bf00      	nop
 800a798:	370c      	adds	r7, #12
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr
	...

0800a7a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b085      	sub	sp, #20
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	4a40      	ldr	r2, [pc, #256]	; (800a8b8 <TIM_Base_SetConfig+0x114>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d013      	beq.n	800a7e4 <TIM_Base_SetConfig+0x40>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7c2:	d00f      	beq.n	800a7e4 <TIM_Base_SetConfig+0x40>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	4a3d      	ldr	r2, [pc, #244]	; (800a8bc <TIM_Base_SetConfig+0x118>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d00b      	beq.n	800a7e4 <TIM_Base_SetConfig+0x40>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	4a3c      	ldr	r2, [pc, #240]	; (800a8c0 <TIM_Base_SetConfig+0x11c>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d007      	beq.n	800a7e4 <TIM_Base_SetConfig+0x40>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	4a3b      	ldr	r2, [pc, #236]	; (800a8c4 <TIM_Base_SetConfig+0x120>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d003      	beq.n	800a7e4 <TIM_Base_SetConfig+0x40>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	4a3a      	ldr	r2, [pc, #232]	; (800a8c8 <TIM_Base_SetConfig+0x124>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d108      	bne.n	800a7f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	68fa      	ldr	r2, [r7, #12]
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	4a2f      	ldr	r2, [pc, #188]	; (800a8b8 <TIM_Base_SetConfig+0x114>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d02b      	beq.n	800a856 <TIM_Base_SetConfig+0xb2>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a804:	d027      	beq.n	800a856 <TIM_Base_SetConfig+0xb2>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	4a2c      	ldr	r2, [pc, #176]	; (800a8bc <TIM_Base_SetConfig+0x118>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d023      	beq.n	800a856 <TIM_Base_SetConfig+0xb2>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	4a2b      	ldr	r2, [pc, #172]	; (800a8c0 <TIM_Base_SetConfig+0x11c>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d01f      	beq.n	800a856 <TIM_Base_SetConfig+0xb2>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	4a2a      	ldr	r2, [pc, #168]	; (800a8c4 <TIM_Base_SetConfig+0x120>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d01b      	beq.n	800a856 <TIM_Base_SetConfig+0xb2>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	4a29      	ldr	r2, [pc, #164]	; (800a8c8 <TIM_Base_SetConfig+0x124>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d017      	beq.n	800a856 <TIM_Base_SetConfig+0xb2>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	4a28      	ldr	r2, [pc, #160]	; (800a8cc <TIM_Base_SetConfig+0x128>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d013      	beq.n	800a856 <TIM_Base_SetConfig+0xb2>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	4a27      	ldr	r2, [pc, #156]	; (800a8d0 <TIM_Base_SetConfig+0x12c>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d00f      	beq.n	800a856 <TIM_Base_SetConfig+0xb2>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	4a26      	ldr	r2, [pc, #152]	; (800a8d4 <TIM_Base_SetConfig+0x130>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d00b      	beq.n	800a856 <TIM_Base_SetConfig+0xb2>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	4a25      	ldr	r2, [pc, #148]	; (800a8d8 <TIM_Base_SetConfig+0x134>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d007      	beq.n	800a856 <TIM_Base_SetConfig+0xb2>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	4a24      	ldr	r2, [pc, #144]	; (800a8dc <TIM_Base_SetConfig+0x138>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d003      	beq.n	800a856 <TIM_Base_SetConfig+0xb2>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	4a23      	ldr	r2, [pc, #140]	; (800a8e0 <TIM_Base_SetConfig+0x13c>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d108      	bne.n	800a868 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a85c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	68db      	ldr	r3, [r3, #12]
 800a862:	68fa      	ldr	r2, [r7, #12]
 800a864:	4313      	orrs	r3, r2
 800a866:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	695b      	ldr	r3, [r3, #20]
 800a872:	4313      	orrs	r3, r2
 800a874:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	68fa      	ldr	r2, [r7, #12]
 800a87a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	689a      	ldr	r2, [r3, #8]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	4a0a      	ldr	r2, [pc, #40]	; (800a8b8 <TIM_Base_SetConfig+0x114>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d003      	beq.n	800a89c <TIM_Base_SetConfig+0xf8>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	4a0c      	ldr	r2, [pc, #48]	; (800a8c8 <TIM_Base_SetConfig+0x124>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d103      	bne.n	800a8a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	691a      	ldr	r2, [r3, #16]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	615a      	str	r2, [r3, #20]
}
 800a8aa:	bf00      	nop
 800a8ac:	3714      	adds	r7, #20
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr
 800a8b6:	bf00      	nop
 800a8b8:	40010000 	.word	0x40010000
 800a8bc:	40000400 	.word	0x40000400
 800a8c0:	40000800 	.word	0x40000800
 800a8c4:	40000c00 	.word	0x40000c00
 800a8c8:	40010400 	.word	0x40010400
 800a8cc:	40014000 	.word	0x40014000
 800a8d0:	40014400 	.word	0x40014400
 800a8d4:	40014800 	.word	0x40014800
 800a8d8:	40001800 	.word	0x40001800
 800a8dc:	40001c00 	.word	0x40001c00
 800a8e0:	40002000 	.word	0x40002000

0800a8e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b087      	sub	sp, #28
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6a1b      	ldr	r3, [r3, #32]
 800a8f2:	f023 0201 	bic.w	r2, r3, #1
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6a1b      	ldr	r3, [r3, #32]
 800a8fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	699b      	ldr	r3, [r3, #24]
 800a90a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f023 0303 	bic.w	r3, r3, #3
 800a91a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	68fa      	ldr	r2, [r7, #12]
 800a922:	4313      	orrs	r3, r2
 800a924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	f023 0302 	bic.w	r3, r3, #2
 800a92c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	689b      	ldr	r3, [r3, #8]
 800a932:	697a      	ldr	r2, [r7, #20]
 800a934:	4313      	orrs	r3, r2
 800a936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	4a20      	ldr	r2, [pc, #128]	; (800a9bc <TIM_OC1_SetConfig+0xd8>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d003      	beq.n	800a948 <TIM_OC1_SetConfig+0x64>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4a1f      	ldr	r2, [pc, #124]	; (800a9c0 <TIM_OC1_SetConfig+0xdc>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d10c      	bne.n	800a962 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	f023 0308 	bic.w	r3, r3, #8
 800a94e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	697a      	ldr	r2, [r7, #20]
 800a956:	4313      	orrs	r3, r2
 800a958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	f023 0304 	bic.w	r3, r3, #4
 800a960:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	4a15      	ldr	r2, [pc, #84]	; (800a9bc <TIM_OC1_SetConfig+0xd8>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d003      	beq.n	800a972 <TIM_OC1_SetConfig+0x8e>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4a14      	ldr	r2, [pc, #80]	; (800a9c0 <TIM_OC1_SetConfig+0xdc>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d111      	bne.n	800a996 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	695b      	ldr	r3, [r3, #20]
 800a986:	693a      	ldr	r2, [r7, #16]
 800a988:	4313      	orrs	r3, r2
 800a98a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	699b      	ldr	r3, [r3, #24]
 800a990:	693a      	ldr	r2, [r7, #16]
 800a992:	4313      	orrs	r3, r2
 800a994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	693a      	ldr	r2, [r7, #16]
 800a99a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	68fa      	ldr	r2, [r7, #12]
 800a9a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	685a      	ldr	r2, [r3, #4]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	697a      	ldr	r2, [r7, #20]
 800a9ae:	621a      	str	r2, [r3, #32]
}
 800a9b0:	bf00      	nop
 800a9b2:	371c      	adds	r7, #28
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr
 800a9bc:	40010000 	.word	0x40010000
 800a9c0:	40010400 	.word	0x40010400

0800a9c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b087      	sub	sp, #28
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6a1b      	ldr	r3, [r3, #32]
 800a9d2:	f023 0210 	bic.w	r2, r3, #16
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6a1b      	ldr	r3, [r3, #32]
 800a9de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	699b      	ldr	r3, [r3, #24]
 800a9ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	021b      	lsls	r3, r3, #8
 800aa02:	68fa      	ldr	r2, [r7, #12]
 800aa04:	4313      	orrs	r3, r2
 800aa06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	f023 0320 	bic.w	r3, r3, #32
 800aa0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	011b      	lsls	r3, r3, #4
 800aa16:	697a      	ldr	r2, [r7, #20]
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	4a22      	ldr	r2, [pc, #136]	; (800aaa8 <TIM_OC2_SetConfig+0xe4>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d003      	beq.n	800aa2c <TIM_OC2_SetConfig+0x68>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	4a21      	ldr	r2, [pc, #132]	; (800aaac <TIM_OC2_SetConfig+0xe8>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d10d      	bne.n	800aa48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	68db      	ldr	r3, [r3, #12]
 800aa38:	011b      	lsls	r3, r3, #4
 800aa3a:	697a      	ldr	r2, [r7, #20]
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	4a17      	ldr	r2, [pc, #92]	; (800aaa8 <TIM_OC2_SetConfig+0xe4>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d003      	beq.n	800aa58 <TIM_OC2_SetConfig+0x94>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	4a16      	ldr	r2, [pc, #88]	; (800aaac <TIM_OC2_SetConfig+0xe8>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d113      	bne.n	800aa80 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	695b      	ldr	r3, [r3, #20]
 800aa6c:	009b      	lsls	r3, r3, #2
 800aa6e:	693a      	ldr	r2, [r7, #16]
 800aa70:	4313      	orrs	r3, r2
 800aa72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	699b      	ldr	r3, [r3, #24]
 800aa78:	009b      	lsls	r3, r3, #2
 800aa7a:	693a      	ldr	r2, [r7, #16]
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	693a      	ldr	r2, [r7, #16]
 800aa84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	68fa      	ldr	r2, [r7, #12]
 800aa8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	685a      	ldr	r2, [r3, #4]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	697a      	ldr	r2, [r7, #20]
 800aa98:	621a      	str	r2, [r3, #32]
}
 800aa9a:	bf00      	nop
 800aa9c:	371c      	adds	r7, #28
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa4:	4770      	bx	lr
 800aaa6:	bf00      	nop
 800aaa8:	40010000 	.word	0x40010000
 800aaac:	40010400 	.word	0x40010400

0800aab0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b087      	sub	sp, #28
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6a1b      	ldr	r3, [r3, #32]
 800aabe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6a1b      	ldr	r3, [r3, #32]
 800aaca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	69db      	ldr	r3, [r3, #28]
 800aad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f023 0303 	bic.w	r3, r3, #3
 800aae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	68fa      	ldr	r2, [r7, #12]
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aaf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	689b      	ldr	r3, [r3, #8]
 800aafe:	021b      	lsls	r3, r3, #8
 800ab00:	697a      	ldr	r2, [r7, #20]
 800ab02:	4313      	orrs	r3, r2
 800ab04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4a21      	ldr	r2, [pc, #132]	; (800ab90 <TIM_OC3_SetConfig+0xe0>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d003      	beq.n	800ab16 <TIM_OC3_SetConfig+0x66>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	4a20      	ldr	r2, [pc, #128]	; (800ab94 <TIM_OC3_SetConfig+0xe4>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d10d      	bne.n	800ab32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	021b      	lsls	r3, r3, #8
 800ab24:	697a      	ldr	r2, [r7, #20]
 800ab26:	4313      	orrs	r3, r2
 800ab28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	4a16      	ldr	r2, [pc, #88]	; (800ab90 <TIM_OC3_SetConfig+0xe0>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d003      	beq.n	800ab42 <TIM_OC3_SetConfig+0x92>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4a15      	ldr	r2, [pc, #84]	; (800ab94 <TIM_OC3_SetConfig+0xe4>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d113      	bne.n	800ab6a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	695b      	ldr	r3, [r3, #20]
 800ab56:	011b      	lsls	r3, r3, #4
 800ab58:	693a      	ldr	r2, [r7, #16]
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	699b      	ldr	r3, [r3, #24]
 800ab62:	011b      	lsls	r3, r3, #4
 800ab64:	693a      	ldr	r2, [r7, #16]
 800ab66:	4313      	orrs	r3, r2
 800ab68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	693a      	ldr	r2, [r7, #16]
 800ab6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	68fa      	ldr	r2, [r7, #12]
 800ab74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	685a      	ldr	r2, [r3, #4]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	697a      	ldr	r2, [r7, #20]
 800ab82:	621a      	str	r2, [r3, #32]
}
 800ab84:	bf00      	nop
 800ab86:	371c      	adds	r7, #28
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr
 800ab90:	40010000 	.word	0x40010000
 800ab94:	40010400 	.word	0x40010400

0800ab98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b087      	sub	sp, #28
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6a1b      	ldr	r3, [r3, #32]
 800aba6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6a1b      	ldr	r3, [r3, #32]
 800abb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	69db      	ldr	r3, [r3, #28]
 800abbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	021b      	lsls	r3, r3, #8
 800abd6:	68fa      	ldr	r2, [r7, #12]
 800abd8:	4313      	orrs	r3, r2
 800abda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800abe2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	689b      	ldr	r3, [r3, #8]
 800abe8:	031b      	lsls	r3, r3, #12
 800abea:	693a      	ldr	r2, [r7, #16]
 800abec:	4313      	orrs	r3, r2
 800abee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	4a12      	ldr	r2, [pc, #72]	; (800ac3c <TIM_OC4_SetConfig+0xa4>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d003      	beq.n	800ac00 <TIM_OC4_SetConfig+0x68>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	4a11      	ldr	r2, [pc, #68]	; (800ac40 <TIM_OC4_SetConfig+0xa8>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d109      	bne.n	800ac14 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	695b      	ldr	r3, [r3, #20]
 800ac0c:	019b      	lsls	r3, r3, #6
 800ac0e:	697a      	ldr	r2, [r7, #20]
 800ac10:	4313      	orrs	r3, r2
 800ac12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	697a      	ldr	r2, [r7, #20]
 800ac18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	68fa      	ldr	r2, [r7, #12]
 800ac1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	685a      	ldr	r2, [r3, #4]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	693a      	ldr	r2, [r7, #16]
 800ac2c:	621a      	str	r2, [r3, #32]
}
 800ac2e:	bf00      	nop
 800ac30:	371c      	adds	r7, #28
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr
 800ac3a:	bf00      	nop
 800ac3c:	40010000 	.word	0x40010000
 800ac40:	40010400 	.word	0x40010400

0800ac44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b087      	sub	sp, #28
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	60f8      	str	r0, [r7, #12]
 800ac4c:	60b9      	str	r1, [r7, #8]
 800ac4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6a1b      	ldr	r3, [r3, #32]
 800ac54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	6a1b      	ldr	r3, [r3, #32]
 800ac5a:	f023 0201 	bic.w	r2, r3, #1
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	699b      	ldr	r3, [r3, #24]
 800ac66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ac6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	011b      	lsls	r3, r3, #4
 800ac74:	693a      	ldr	r2, [r7, #16]
 800ac76:	4313      	orrs	r3, r2
 800ac78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	f023 030a 	bic.w	r3, r3, #10
 800ac80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ac82:	697a      	ldr	r2, [r7, #20]
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	4313      	orrs	r3, r2
 800ac88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	693a      	ldr	r2, [r7, #16]
 800ac8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	697a      	ldr	r2, [r7, #20]
 800ac94:	621a      	str	r2, [r3, #32]
}
 800ac96:	bf00      	nop
 800ac98:	371c      	adds	r7, #28
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr

0800aca2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aca2:	b480      	push	{r7}
 800aca4:	b087      	sub	sp, #28
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	60f8      	str	r0, [r7, #12]
 800acaa:	60b9      	str	r1, [r7, #8]
 800acac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	6a1b      	ldr	r3, [r3, #32]
 800acb2:	f023 0210 	bic.w	r2, r3, #16
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	699b      	ldr	r3, [r3, #24]
 800acbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	6a1b      	ldr	r3, [r3, #32]
 800acc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800accc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	031b      	lsls	r3, r3, #12
 800acd2:	697a      	ldr	r2, [r7, #20]
 800acd4:	4313      	orrs	r3, r2
 800acd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800acde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	011b      	lsls	r3, r3, #4
 800ace4:	693a      	ldr	r2, [r7, #16]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	697a      	ldr	r2, [r7, #20]
 800acee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	693a      	ldr	r2, [r7, #16]
 800acf4:	621a      	str	r2, [r3, #32]
}
 800acf6:	bf00      	nop
 800acf8:	371c      	adds	r7, #28
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr

0800ad02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ad02:	b480      	push	{r7}
 800ad04:	b085      	sub	sp, #20
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
 800ad0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	689b      	ldr	r3, [r3, #8]
 800ad10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ad1a:	683a      	ldr	r2, [r7, #0]
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	f043 0307 	orr.w	r3, r3, #7
 800ad24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	68fa      	ldr	r2, [r7, #12]
 800ad2a:	609a      	str	r2, [r3, #8]
}
 800ad2c:	bf00      	nop
 800ad2e:	3714      	adds	r7, #20
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b087      	sub	sp, #28
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	60f8      	str	r0, [r7, #12]
 800ad40:	60b9      	str	r1, [r7, #8]
 800ad42:	607a      	str	r2, [r7, #4]
 800ad44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	689b      	ldr	r3, [r3, #8]
 800ad4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ad52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	021a      	lsls	r2, r3, #8
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	431a      	orrs	r2, r3
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	697a      	ldr	r2, [r7, #20]
 800ad62:	4313      	orrs	r3, r2
 800ad64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	697a      	ldr	r2, [r7, #20]
 800ad6a:	609a      	str	r2, [r3, #8]
}
 800ad6c:	bf00      	nop
 800ad6e:	371c      	adds	r7, #28
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr

0800ad78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b087      	sub	sp, #28
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	60b9      	str	r1, [r7, #8]
 800ad82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	f003 031f 	and.w	r3, r3, #31
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	fa02 f303 	lsl.w	r3, r2, r3
 800ad90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	6a1a      	ldr	r2, [r3, #32]
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	43db      	mvns	r3, r3
 800ad9a:	401a      	ands	r2, r3
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	6a1a      	ldr	r2, [r3, #32]
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	f003 031f 	and.w	r3, r3, #31
 800adaa:	6879      	ldr	r1, [r7, #4]
 800adac:	fa01 f303 	lsl.w	r3, r1, r3
 800adb0:	431a      	orrs	r2, r3
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	621a      	str	r2, [r3, #32]
}
 800adb6:	bf00      	nop
 800adb8:	371c      	adds	r7, #28
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr
	...

0800adc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b085      	sub	sp, #20
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800add4:	2b01      	cmp	r3, #1
 800add6:	d101      	bne.n	800addc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800add8:	2302      	movs	r3, #2
 800adda:	e05a      	b.n	800ae92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2201      	movs	r2, #1
 800ade0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2202      	movs	r2, #2
 800ade8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	689b      	ldr	r3, [r3, #8]
 800adfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	68fa      	ldr	r2, [r7, #12]
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	68fa      	ldr	r2, [r7, #12]
 800ae14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4a21      	ldr	r2, [pc, #132]	; (800aea0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d022      	beq.n	800ae66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae28:	d01d      	beq.n	800ae66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4a1d      	ldr	r2, [pc, #116]	; (800aea4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d018      	beq.n	800ae66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4a1b      	ldr	r2, [pc, #108]	; (800aea8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d013      	beq.n	800ae66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	4a1a      	ldr	r2, [pc, #104]	; (800aeac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d00e      	beq.n	800ae66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4a18      	ldr	r2, [pc, #96]	; (800aeb0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d009      	beq.n	800ae66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	4a17      	ldr	r2, [pc, #92]	; (800aeb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d004      	beq.n	800ae66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4a15      	ldr	r2, [pc, #84]	; (800aeb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d10c      	bne.n	800ae80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	68ba      	ldr	r2, [r7, #8]
 800ae74:	4313      	orrs	r3, r2
 800ae76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	68ba      	ldr	r2, [r7, #8]
 800ae7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2201      	movs	r2, #1
 800ae84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ae90:	2300      	movs	r3, #0
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3714      	adds	r7, #20
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr
 800ae9e:	bf00      	nop
 800aea0:	40010000 	.word	0x40010000
 800aea4:	40000400 	.word	0x40000400
 800aea8:	40000800 	.word	0x40000800
 800aeac:	40000c00 	.word	0x40000c00
 800aeb0:	40010400 	.word	0x40010400
 800aeb4:	40014000 	.word	0x40014000
 800aeb8:	40001800 	.word	0x40001800

0800aebc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b083      	sub	sp, #12
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aec4:	bf00      	nop
 800aec6:	370c      	adds	r7, #12
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr

0800aed0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b083      	sub	sp, #12
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aed8:	bf00      	nop
 800aeda:	370c      	adds	r7, #12
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr

0800aee4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d101      	bne.n	800aef6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aef2:	2301      	movs	r3, #1
 800aef4:	e03f      	b.n	800af76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d106      	bne.n	800af10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f7f7 fe98 	bl	8002c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2224      	movs	r2, #36	; 0x24
 800af14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	68da      	ldr	r2, [r3, #12]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800af26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 f9cb 	bl	800b2c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	691a      	ldr	r2, [r3, #16]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800af3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	695a      	ldr	r2, [r3, #20]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800af4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	68da      	ldr	r2, [r3, #12]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800af5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2220      	movs	r2, #32
 800af68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2220      	movs	r2, #32
 800af70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800af74:	2300      	movs	r3, #0
}
 800af76:	4618      	mov	r0, r3
 800af78:	3708      	adds	r7, #8
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}

0800af7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af7e:	b580      	push	{r7, lr}
 800af80:	b08a      	sub	sp, #40	; 0x28
 800af82:	af02      	add	r7, sp, #8
 800af84:	60f8      	str	r0, [r7, #12]
 800af86:	60b9      	str	r1, [r7, #8]
 800af88:	603b      	str	r3, [r7, #0]
 800af8a:	4613      	mov	r3, r2
 800af8c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800af8e:	2300      	movs	r3, #0
 800af90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af98:	b2db      	uxtb	r3, r3
 800af9a:	2b20      	cmp	r3, #32
 800af9c:	d17c      	bne.n	800b098 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d002      	beq.n	800afaa <HAL_UART_Transmit+0x2c>
 800afa4:	88fb      	ldrh	r3, [r7, #6]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d101      	bne.n	800afae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800afaa:	2301      	movs	r3, #1
 800afac:	e075      	b.n	800b09a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d101      	bne.n	800afbc <HAL_UART_Transmit+0x3e>
 800afb8:	2302      	movs	r3, #2
 800afba:	e06e      	b.n	800b09a <HAL_UART_Transmit+0x11c>
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2201      	movs	r2, #1
 800afc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2200      	movs	r2, #0
 800afc8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2221      	movs	r2, #33	; 0x21
 800afce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800afd2:	f7fa ff15 	bl	8005e00 <HAL_GetTick>
 800afd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	88fa      	ldrh	r2, [r7, #6]
 800afdc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	88fa      	ldrh	r2, [r7, #6]
 800afe2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	689b      	ldr	r3, [r3, #8]
 800afe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afec:	d108      	bne.n	800b000 <HAL_UART_Transmit+0x82>
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	691b      	ldr	r3, [r3, #16]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d104      	bne.n	800b000 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800aff6:	2300      	movs	r3, #0
 800aff8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	61bb      	str	r3, [r7, #24]
 800affe:	e003      	b.n	800b008 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b004:	2300      	movs	r3, #0
 800b006:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2200      	movs	r2, #0
 800b00c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b010:	e02a      	b.n	800b068 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	9300      	str	r3, [sp, #0]
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	2200      	movs	r2, #0
 800b01a:	2180      	movs	r1, #128	; 0x80
 800b01c:	68f8      	ldr	r0, [r7, #12]
 800b01e:	f000 f8e2 	bl	800b1e6 <UART_WaitOnFlagUntilTimeout>
 800b022:	4603      	mov	r3, r0
 800b024:	2b00      	cmp	r3, #0
 800b026:	d001      	beq.n	800b02c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b028:	2303      	movs	r3, #3
 800b02a:	e036      	b.n	800b09a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b02c:	69fb      	ldr	r3, [r7, #28]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d10b      	bne.n	800b04a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b032:	69bb      	ldr	r3, [r7, #24]
 800b034:	881b      	ldrh	r3, [r3, #0]
 800b036:	461a      	mov	r2, r3
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b040:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b042:	69bb      	ldr	r3, [r7, #24]
 800b044:	3302      	adds	r3, #2
 800b046:	61bb      	str	r3, [r7, #24]
 800b048:	e007      	b.n	800b05a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b04a:	69fb      	ldr	r3, [r7, #28]
 800b04c:	781a      	ldrb	r2, [r3, #0]
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b054:	69fb      	ldr	r3, [r7, #28]
 800b056:	3301      	adds	r3, #1
 800b058:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b05e:	b29b      	uxth	r3, r3
 800b060:	3b01      	subs	r3, #1
 800b062:	b29a      	uxth	r2, r3
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d1cf      	bne.n	800b012 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	9300      	str	r3, [sp, #0]
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	2200      	movs	r2, #0
 800b07a:	2140      	movs	r1, #64	; 0x40
 800b07c:	68f8      	ldr	r0, [r7, #12]
 800b07e:	f000 f8b2 	bl	800b1e6 <UART_WaitOnFlagUntilTimeout>
 800b082:	4603      	mov	r3, r0
 800b084:	2b00      	cmp	r3, #0
 800b086:	d001      	beq.n	800b08c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b088:	2303      	movs	r3, #3
 800b08a:	e006      	b.n	800b09a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2220      	movs	r2, #32
 800b090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b094:	2300      	movs	r3, #0
 800b096:	e000      	b.n	800b09a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b098:	2302      	movs	r3, #2
  }
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3720      	adds	r7, #32
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}

0800b0a2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b08a      	sub	sp, #40	; 0x28
 800b0a6:	af02      	add	r7, sp, #8
 800b0a8:	60f8      	str	r0, [r7, #12]
 800b0aa:	60b9      	str	r1, [r7, #8]
 800b0ac:	603b      	str	r3, [r7, #0]
 800b0ae:	4613      	mov	r3, r2
 800b0b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	2b20      	cmp	r3, #32
 800b0c0:	f040 808c 	bne.w	800b1dc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d002      	beq.n	800b0d0 <HAL_UART_Receive+0x2e>
 800b0ca:	88fb      	ldrh	r3, [r7, #6]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d101      	bne.n	800b0d4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	e084      	b.n	800b1de <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0da:	2b01      	cmp	r3, #1
 800b0dc:	d101      	bne.n	800b0e2 <HAL_UART_Receive+0x40>
 800b0de:	2302      	movs	r3, #2
 800b0e0:	e07d      	b.n	800b1de <HAL_UART_Receive+0x13c>
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2222      	movs	r2, #34	; 0x22
 800b0f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b0fe:	f7fa fe7f 	bl	8005e00 <HAL_GetTick>
 800b102:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	88fa      	ldrh	r2, [r7, #6]
 800b108:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	88fa      	ldrh	r2, [r7, #6]
 800b10e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	689b      	ldr	r3, [r3, #8]
 800b114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b118:	d108      	bne.n	800b12c <HAL_UART_Receive+0x8a>
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	691b      	ldr	r3, [r3, #16]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d104      	bne.n	800b12c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800b122:	2300      	movs	r3, #0
 800b124:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	61bb      	str	r3, [r7, #24]
 800b12a:	e003      	b.n	800b134 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b130:	2300      	movs	r3, #0
 800b132:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2200      	movs	r2, #0
 800b138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800b13c:	e043      	b.n	800b1c6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	9300      	str	r3, [sp, #0]
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	2200      	movs	r2, #0
 800b146:	2120      	movs	r1, #32
 800b148:	68f8      	ldr	r0, [r7, #12]
 800b14a:	f000 f84c 	bl	800b1e6 <UART_WaitOnFlagUntilTimeout>
 800b14e:	4603      	mov	r3, r0
 800b150:	2b00      	cmp	r3, #0
 800b152:	d001      	beq.n	800b158 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800b154:	2303      	movs	r3, #3
 800b156:	e042      	b.n	800b1de <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800b158:	69fb      	ldr	r3, [r7, #28]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d10c      	bne.n	800b178 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	b29b      	uxth	r3, r3
 800b166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b16a:	b29a      	uxth	r2, r3
 800b16c:	69bb      	ldr	r3, [r7, #24]
 800b16e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b170:	69bb      	ldr	r3, [r7, #24]
 800b172:	3302      	adds	r3, #2
 800b174:	61bb      	str	r3, [r7, #24]
 800b176:	e01f      	b.n	800b1b8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b180:	d007      	beq.n	800b192 <HAL_UART_Receive+0xf0>
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	689b      	ldr	r3, [r3, #8]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d10a      	bne.n	800b1a0 <HAL_UART_Receive+0xfe>
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	691b      	ldr	r3, [r3, #16]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d106      	bne.n	800b1a0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	b2da      	uxtb	r2, r3
 800b19a:	69fb      	ldr	r3, [r7, #28]
 800b19c:	701a      	strb	r2, [r3, #0]
 800b19e:	e008      	b.n	800b1b2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	b2db      	uxtb	r3, r3
 800b1a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1ac:	b2da      	uxtb	r2, r3
 800b1ae:	69fb      	ldr	r3, [r7, #28]
 800b1b0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800b1b2:	69fb      	ldr	r3, [r7, #28]
 800b1b4:	3301      	adds	r3, #1
 800b1b6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	3b01      	subs	r3, #1
 800b1c0:	b29a      	uxth	r2, r3
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b1ca:	b29b      	uxth	r3, r3
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d1b6      	bne.n	800b13e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2220      	movs	r2, #32
 800b1d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	e000      	b.n	800b1de <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800b1dc:	2302      	movs	r3, #2
  }
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3720      	adds	r7, #32
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}

0800b1e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b1e6:	b580      	push	{r7, lr}
 800b1e8:	b090      	sub	sp, #64	; 0x40
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	60f8      	str	r0, [r7, #12]
 800b1ee:	60b9      	str	r1, [r7, #8]
 800b1f0:	603b      	str	r3, [r7, #0]
 800b1f2:	4613      	mov	r3, r2
 800b1f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1f6:	e050      	b.n	800b29a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1fe:	d04c      	beq.n	800b29a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b202:	2b00      	cmp	r3, #0
 800b204:	d007      	beq.n	800b216 <UART_WaitOnFlagUntilTimeout+0x30>
 800b206:	f7fa fdfb 	bl	8005e00 <HAL_GetTick>
 800b20a:	4602      	mov	r2, r0
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	1ad3      	subs	r3, r2, r3
 800b210:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b212:	429a      	cmp	r2, r3
 800b214:	d241      	bcs.n	800b29a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	330c      	adds	r3, #12
 800b21c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b220:	e853 3f00 	ldrex	r3, [r3]
 800b224:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b228:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b22c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	330c      	adds	r3, #12
 800b234:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b236:	637a      	str	r2, [r7, #52]	; 0x34
 800b238:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b23a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b23c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b23e:	e841 2300 	strex	r3, r2, [r1]
 800b242:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b246:	2b00      	cmp	r3, #0
 800b248:	d1e5      	bne.n	800b216 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	3314      	adds	r3, #20
 800b250:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	e853 3f00 	ldrex	r3, [r3]
 800b258:	613b      	str	r3, [r7, #16]
   return(result);
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	f023 0301 	bic.w	r3, r3, #1
 800b260:	63bb      	str	r3, [r7, #56]	; 0x38
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	3314      	adds	r3, #20
 800b268:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b26a:	623a      	str	r2, [r7, #32]
 800b26c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b26e:	69f9      	ldr	r1, [r7, #28]
 800b270:	6a3a      	ldr	r2, [r7, #32]
 800b272:	e841 2300 	strex	r3, r2, [r1]
 800b276:	61bb      	str	r3, [r7, #24]
   return(result);
 800b278:	69bb      	ldr	r3, [r7, #24]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d1e5      	bne.n	800b24a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2220      	movs	r2, #32
 800b282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2220      	movs	r2, #32
 800b28a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2200      	movs	r2, #0
 800b292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b296:	2303      	movs	r3, #3
 800b298:	e00f      	b.n	800b2ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	4013      	ands	r3, r2
 800b2a4:	68ba      	ldr	r2, [r7, #8]
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	bf0c      	ite	eq
 800b2aa:	2301      	moveq	r3, #1
 800b2ac:	2300      	movne	r3, #0
 800b2ae:	b2db      	uxtb	r3, r3
 800b2b0:	461a      	mov	r2, r3
 800b2b2:	79fb      	ldrb	r3, [r7, #7]
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d09f      	beq.n	800b1f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b2b8:	2300      	movs	r3, #0
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3740      	adds	r7, #64	; 0x40
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
	...

0800b2c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2c8:	b09f      	sub	sp, #124	; 0x7c
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b2ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	691b      	ldr	r3, [r3, #16]
 800b2d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b2d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2da:	68d9      	ldr	r1, [r3, #12]
 800b2dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2de:	681a      	ldr	r2, [r3, #0]
 800b2e0:	ea40 0301 	orr.w	r3, r0, r1
 800b2e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b2e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2e8:	689a      	ldr	r2, [r3, #8]
 800b2ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2ec:	691b      	ldr	r3, [r3, #16]
 800b2ee:	431a      	orrs	r2, r3
 800b2f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2f2:	695b      	ldr	r3, [r3, #20]
 800b2f4:	431a      	orrs	r2, r3
 800b2f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2f8:	69db      	ldr	r3, [r3, #28]
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800b2fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	68db      	ldr	r3, [r3, #12]
 800b304:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b308:	f021 010c 	bic.w	r1, r1, #12
 800b30c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b30e:	681a      	ldr	r2, [r3, #0]
 800b310:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b312:	430b      	orrs	r3, r1
 800b314:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	695b      	ldr	r3, [r3, #20]
 800b31c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b322:	6999      	ldr	r1, [r3, #24]
 800b324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	ea40 0301 	orr.w	r3, r0, r1
 800b32c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b32e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	4bc5      	ldr	r3, [pc, #788]	; (800b648 <UART_SetConfig+0x384>)
 800b334:	429a      	cmp	r2, r3
 800b336:	d004      	beq.n	800b342 <UART_SetConfig+0x7e>
 800b338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b33a:	681a      	ldr	r2, [r3, #0]
 800b33c:	4bc3      	ldr	r3, [pc, #780]	; (800b64c <UART_SetConfig+0x388>)
 800b33e:	429a      	cmp	r2, r3
 800b340:	d103      	bne.n	800b34a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b342:	f7fd f865 	bl	8008410 <HAL_RCC_GetPCLK2Freq>
 800b346:	6778      	str	r0, [r7, #116]	; 0x74
 800b348:	e002      	b.n	800b350 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b34a:	f7fd f84d 	bl	80083e8 <HAL_RCC_GetPCLK1Freq>
 800b34e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b352:	69db      	ldr	r3, [r3, #28]
 800b354:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b358:	f040 80b6 	bne.w	800b4c8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b35c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b35e:	461c      	mov	r4, r3
 800b360:	f04f 0500 	mov.w	r5, #0
 800b364:	4622      	mov	r2, r4
 800b366:	462b      	mov	r3, r5
 800b368:	1891      	adds	r1, r2, r2
 800b36a:	6439      	str	r1, [r7, #64]	; 0x40
 800b36c:	415b      	adcs	r3, r3
 800b36e:	647b      	str	r3, [r7, #68]	; 0x44
 800b370:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b374:	1912      	adds	r2, r2, r4
 800b376:	eb45 0303 	adc.w	r3, r5, r3
 800b37a:	f04f 0000 	mov.w	r0, #0
 800b37e:	f04f 0100 	mov.w	r1, #0
 800b382:	00d9      	lsls	r1, r3, #3
 800b384:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b388:	00d0      	lsls	r0, r2, #3
 800b38a:	4602      	mov	r2, r0
 800b38c:	460b      	mov	r3, r1
 800b38e:	1911      	adds	r1, r2, r4
 800b390:	6639      	str	r1, [r7, #96]	; 0x60
 800b392:	416b      	adcs	r3, r5
 800b394:	667b      	str	r3, [r7, #100]	; 0x64
 800b396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	461a      	mov	r2, r3
 800b39c:	f04f 0300 	mov.w	r3, #0
 800b3a0:	1891      	adds	r1, r2, r2
 800b3a2:	63b9      	str	r1, [r7, #56]	; 0x38
 800b3a4:	415b      	adcs	r3, r3
 800b3a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b3ac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800b3b0:	f7f5 fc7a 	bl	8000ca8 <__aeabi_uldivmod>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	460b      	mov	r3, r1
 800b3b8:	4ba5      	ldr	r3, [pc, #660]	; (800b650 <UART_SetConfig+0x38c>)
 800b3ba:	fba3 2302 	umull	r2, r3, r3, r2
 800b3be:	095b      	lsrs	r3, r3, #5
 800b3c0:	011e      	lsls	r6, r3, #4
 800b3c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b3c4:	461c      	mov	r4, r3
 800b3c6:	f04f 0500 	mov.w	r5, #0
 800b3ca:	4622      	mov	r2, r4
 800b3cc:	462b      	mov	r3, r5
 800b3ce:	1891      	adds	r1, r2, r2
 800b3d0:	6339      	str	r1, [r7, #48]	; 0x30
 800b3d2:	415b      	adcs	r3, r3
 800b3d4:	637b      	str	r3, [r7, #52]	; 0x34
 800b3d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b3da:	1912      	adds	r2, r2, r4
 800b3dc:	eb45 0303 	adc.w	r3, r5, r3
 800b3e0:	f04f 0000 	mov.w	r0, #0
 800b3e4:	f04f 0100 	mov.w	r1, #0
 800b3e8:	00d9      	lsls	r1, r3, #3
 800b3ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b3ee:	00d0      	lsls	r0, r2, #3
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	460b      	mov	r3, r1
 800b3f4:	1911      	adds	r1, r2, r4
 800b3f6:	65b9      	str	r1, [r7, #88]	; 0x58
 800b3f8:	416b      	adcs	r3, r5
 800b3fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b3fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	461a      	mov	r2, r3
 800b402:	f04f 0300 	mov.w	r3, #0
 800b406:	1891      	adds	r1, r2, r2
 800b408:	62b9      	str	r1, [r7, #40]	; 0x28
 800b40a:	415b      	adcs	r3, r3
 800b40c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b40e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b412:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800b416:	f7f5 fc47 	bl	8000ca8 <__aeabi_uldivmod>
 800b41a:	4602      	mov	r2, r0
 800b41c:	460b      	mov	r3, r1
 800b41e:	4b8c      	ldr	r3, [pc, #560]	; (800b650 <UART_SetConfig+0x38c>)
 800b420:	fba3 1302 	umull	r1, r3, r3, r2
 800b424:	095b      	lsrs	r3, r3, #5
 800b426:	2164      	movs	r1, #100	; 0x64
 800b428:	fb01 f303 	mul.w	r3, r1, r3
 800b42c:	1ad3      	subs	r3, r2, r3
 800b42e:	00db      	lsls	r3, r3, #3
 800b430:	3332      	adds	r3, #50	; 0x32
 800b432:	4a87      	ldr	r2, [pc, #540]	; (800b650 <UART_SetConfig+0x38c>)
 800b434:	fba2 2303 	umull	r2, r3, r2, r3
 800b438:	095b      	lsrs	r3, r3, #5
 800b43a:	005b      	lsls	r3, r3, #1
 800b43c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b440:	441e      	add	r6, r3
 800b442:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b444:	4618      	mov	r0, r3
 800b446:	f04f 0100 	mov.w	r1, #0
 800b44a:	4602      	mov	r2, r0
 800b44c:	460b      	mov	r3, r1
 800b44e:	1894      	adds	r4, r2, r2
 800b450:	623c      	str	r4, [r7, #32]
 800b452:	415b      	adcs	r3, r3
 800b454:	627b      	str	r3, [r7, #36]	; 0x24
 800b456:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b45a:	1812      	adds	r2, r2, r0
 800b45c:	eb41 0303 	adc.w	r3, r1, r3
 800b460:	f04f 0400 	mov.w	r4, #0
 800b464:	f04f 0500 	mov.w	r5, #0
 800b468:	00dd      	lsls	r5, r3, #3
 800b46a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b46e:	00d4      	lsls	r4, r2, #3
 800b470:	4622      	mov	r2, r4
 800b472:	462b      	mov	r3, r5
 800b474:	1814      	adds	r4, r2, r0
 800b476:	653c      	str	r4, [r7, #80]	; 0x50
 800b478:	414b      	adcs	r3, r1
 800b47a:	657b      	str	r3, [r7, #84]	; 0x54
 800b47c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	461a      	mov	r2, r3
 800b482:	f04f 0300 	mov.w	r3, #0
 800b486:	1891      	adds	r1, r2, r2
 800b488:	61b9      	str	r1, [r7, #24]
 800b48a:	415b      	adcs	r3, r3
 800b48c:	61fb      	str	r3, [r7, #28]
 800b48e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b492:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b496:	f7f5 fc07 	bl	8000ca8 <__aeabi_uldivmod>
 800b49a:	4602      	mov	r2, r0
 800b49c:	460b      	mov	r3, r1
 800b49e:	4b6c      	ldr	r3, [pc, #432]	; (800b650 <UART_SetConfig+0x38c>)
 800b4a0:	fba3 1302 	umull	r1, r3, r3, r2
 800b4a4:	095b      	lsrs	r3, r3, #5
 800b4a6:	2164      	movs	r1, #100	; 0x64
 800b4a8:	fb01 f303 	mul.w	r3, r1, r3
 800b4ac:	1ad3      	subs	r3, r2, r3
 800b4ae:	00db      	lsls	r3, r3, #3
 800b4b0:	3332      	adds	r3, #50	; 0x32
 800b4b2:	4a67      	ldr	r2, [pc, #412]	; (800b650 <UART_SetConfig+0x38c>)
 800b4b4:	fba2 2303 	umull	r2, r3, r2, r3
 800b4b8:	095b      	lsrs	r3, r3, #5
 800b4ba:	f003 0207 	and.w	r2, r3, #7
 800b4be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4432      	add	r2, r6
 800b4c4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b4c6:	e0b9      	b.n	800b63c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b4c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b4ca:	461c      	mov	r4, r3
 800b4cc:	f04f 0500 	mov.w	r5, #0
 800b4d0:	4622      	mov	r2, r4
 800b4d2:	462b      	mov	r3, r5
 800b4d4:	1891      	adds	r1, r2, r2
 800b4d6:	6139      	str	r1, [r7, #16]
 800b4d8:	415b      	adcs	r3, r3
 800b4da:	617b      	str	r3, [r7, #20]
 800b4dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b4e0:	1912      	adds	r2, r2, r4
 800b4e2:	eb45 0303 	adc.w	r3, r5, r3
 800b4e6:	f04f 0000 	mov.w	r0, #0
 800b4ea:	f04f 0100 	mov.w	r1, #0
 800b4ee:	00d9      	lsls	r1, r3, #3
 800b4f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b4f4:	00d0      	lsls	r0, r2, #3
 800b4f6:	4602      	mov	r2, r0
 800b4f8:	460b      	mov	r3, r1
 800b4fa:	eb12 0804 	adds.w	r8, r2, r4
 800b4fe:	eb43 0905 	adc.w	r9, r3, r5
 800b502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	4618      	mov	r0, r3
 800b508:	f04f 0100 	mov.w	r1, #0
 800b50c:	f04f 0200 	mov.w	r2, #0
 800b510:	f04f 0300 	mov.w	r3, #0
 800b514:	008b      	lsls	r3, r1, #2
 800b516:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b51a:	0082      	lsls	r2, r0, #2
 800b51c:	4640      	mov	r0, r8
 800b51e:	4649      	mov	r1, r9
 800b520:	f7f5 fbc2 	bl	8000ca8 <__aeabi_uldivmod>
 800b524:	4602      	mov	r2, r0
 800b526:	460b      	mov	r3, r1
 800b528:	4b49      	ldr	r3, [pc, #292]	; (800b650 <UART_SetConfig+0x38c>)
 800b52a:	fba3 2302 	umull	r2, r3, r3, r2
 800b52e:	095b      	lsrs	r3, r3, #5
 800b530:	011e      	lsls	r6, r3, #4
 800b532:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b534:	4618      	mov	r0, r3
 800b536:	f04f 0100 	mov.w	r1, #0
 800b53a:	4602      	mov	r2, r0
 800b53c:	460b      	mov	r3, r1
 800b53e:	1894      	adds	r4, r2, r2
 800b540:	60bc      	str	r4, [r7, #8]
 800b542:	415b      	adcs	r3, r3
 800b544:	60fb      	str	r3, [r7, #12]
 800b546:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b54a:	1812      	adds	r2, r2, r0
 800b54c:	eb41 0303 	adc.w	r3, r1, r3
 800b550:	f04f 0400 	mov.w	r4, #0
 800b554:	f04f 0500 	mov.w	r5, #0
 800b558:	00dd      	lsls	r5, r3, #3
 800b55a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b55e:	00d4      	lsls	r4, r2, #3
 800b560:	4622      	mov	r2, r4
 800b562:	462b      	mov	r3, r5
 800b564:	1814      	adds	r4, r2, r0
 800b566:	64bc      	str	r4, [r7, #72]	; 0x48
 800b568:	414b      	adcs	r3, r1
 800b56a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b56c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	4618      	mov	r0, r3
 800b572:	f04f 0100 	mov.w	r1, #0
 800b576:	f04f 0200 	mov.w	r2, #0
 800b57a:	f04f 0300 	mov.w	r3, #0
 800b57e:	008b      	lsls	r3, r1, #2
 800b580:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b584:	0082      	lsls	r2, r0, #2
 800b586:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b58a:	f7f5 fb8d 	bl	8000ca8 <__aeabi_uldivmod>
 800b58e:	4602      	mov	r2, r0
 800b590:	460b      	mov	r3, r1
 800b592:	4b2f      	ldr	r3, [pc, #188]	; (800b650 <UART_SetConfig+0x38c>)
 800b594:	fba3 1302 	umull	r1, r3, r3, r2
 800b598:	095b      	lsrs	r3, r3, #5
 800b59a:	2164      	movs	r1, #100	; 0x64
 800b59c:	fb01 f303 	mul.w	r3, r1, r3
 800b5a0:	1ad3      	subs	r3, r2, r3
 800b5a2:	011b      	lsls	r3, r3, #4
 800b5a4:	3332      	adds	r3, #50	; 0x32
 800b5a6:	4a2a      	ldr	r2, [pc, #168]	; (800b650 <UART_SetConfig+0x38c>)
 800b5a8:	fba2 2303 	umull	r2, r3, r2, r3
 800b5ac:	095b      	lsrs	r3, r3, #5
 800b5ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5b2:	441e      	add	r6, r3
 800b5b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f04f 0100 	mov.w	r1, #0
 800b5bc:	4602      	mov	r2, r0
 800b5be:	460b      	mov	r3, r1
 800b5c0:	1894      	adds	r4, r2, r2
 800b5c2:	603c      	str	r4, [r7, #0]
 800b5c4:	415b      	adcs	r3, r3
 800b5c6:	607b      	str	r3, [r7, #4]
 800b5c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5cc:	1812      	adds	r2, r2, r0
 800b5ce:	eb41 0303 	adc.w	r3, r1, r3
 800b5d2:	f04f 0400 	mov.w	r4, #0
 800b5d6:	f04f 0500 	mov.w	r5, #0
 800b5da:	00dd      	lsls	r5, r3, #3
 800b5dc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b5e0:	00d4      	lsls	r4, r2, #3
 800b5e2:	4622      	mov	r2, r4
 800b5e4:	462b      	mov	r3, r5
 800b5e6:	eb12 0a00 	adds.w	sl, r2, r0
 800b5ea:	eb43 0b01 	adc.w	fp, r3, r1
 800b5ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f04f 0100 	mov.w	r1, #0
 800b5f8:	f04f 0200 	mov.w	r2, #0
 800b5fc:	f04f 0300 	mov.w	r3, #0
 800b600:	008b      	lsls	r3, r1, #2
 800b602:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b606:	0082      	lsls	r2, r0, #2
 800b608:	4650      	mov	r0, sl
 800b60a:	4659      	mov	r1, fp
 800b60c:	f7f5 fb4c 	bl	8000ca8 <__aeabi_uldivmod>
 800b610:	4602      	mov	r2, r0
 800b612:	460b      	mov	r3, r1
 800b614:	4b0e      	ldr	r3, [pc, #56]	; (800b650 <UART_SetConfig+0x38c>)
 800b616:	fba3 1302 	umull	r1, r3, r3, r2
 800b61a:	095b      	lsrs	r3, r3, #5
 800b61c:	2164      	movs	r1, #100	; 0x64
 800b61e:	fb01 f303 	mul.w	r3, r1, r3
 800b622:	1ad3      	subs	r3, r2, r3
 800b624:	011b      	lsls	r3, r3, #4
 800b626:	3332      	adds	r3, #50	; 0x32
 800b628:	4a09      	ldr	r2, [pc, #36]	; (800b650 <UART_SetConfig+0x38c>)
 800b62a:	fba2 2303 	umull	r2, r3, r2, r3
 800b62e:	095b      	lsrs	r3, r3, #5
 800b630:	f003 020f 	and.w	r2, r3, #15
 800b634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4432      	add	r2, r6
 800b63a:	609a      	str	r2, [r3, #8]
}
 800b63c:	bf00      	nop
 800b63e:	377c      	adds	r7, #124	; 0x7c
 800b640:	46bd      	mov	sp, r7
 800b642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b646:	bf00      	nop
 800b648:	40011000 	.word	0x40011000
 800b64c:	40011400 	.word	0x40011400
 800b650:	51eb851f 	.word	0x51eb851f

0800b654 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b658:	4904      	ldr	r1, [pc, #16]	; (800b66c <MX_FATFS_Init+0x18>)
 800b65a:	4805      	ldr	r0, [pc, #20]	; (800b670 <MX_FATFS_Init+0x1c>)
 800b65c:	f000 f8b0 	bl	800b7c0 <FATFS_LinkDriver>
 800b660:	4603      	mov	r3, r0
 800b662:	461a      	mov	r2, r3
 800b664:	4b03      	ldr	r3, [pc, #12]	; (800b674 <MX_FATFS_Init+0x20>)
 800b666:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b668:	bf00      	nop
 800b66a:	bd80      	pop	{r7, pc}
 800b66c:	20005e2c 	.word	0x20005e2c
 800b670:	2000006c 	.word	0x2000006c
 800b674:	20005e30 	.word	0x20005e30

0800b678 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b678:	b480      	push	{r7}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	4603      	mov	r3, r0
 800b680:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800b682:	4b06      	ldr	r3, [pc, #24]	; (800b69c <USER_initialize+0x24>)
 800b684:	2201      	movs	r2, #1
 800b686:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b688:	4b04      	ldr	r3, [pc, #16]	; (800b69c <USER_initialize+0x24>)
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800b68e:	4618      	mov	r0, r3
 800b690:	370c      	adds	r7, #12
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr
 800b69a:	bf00      	nop
 800b69c:	20000069 	.word	0x20000069

0800b6a0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b083      	sub	sp, #12
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800b6aa:	4b06      	ldr	r3, [pc, #24]	; (800b6c4 <USER_status+0x24>)
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b6b0:	4b04      	ldr	r3, [pc, #16]	; (800b6c4 <USER_status+0x24>)
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	370c      	adds	r7, #12
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c0:	4770      	bx	lr
 800b6c2:	bf00      	nop
 800b6c4:	20000069 	.word	0x20000069

0800b6c8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b085      	sub	sp, #20
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	60b9      	str	r1, [r7, #8]
 800b6d0:	607a      	str	r2, [r7, #4]
 800b6d2:	603b      	str	r3, [r7, #0]
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800b6d8:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3714      	adds	r7, #20
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr

0800b6e6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b6e6:	b480      	push	{r7}
 800b6e8:	b085      	sub	sp, #20
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	60b9      	str	r1, [r7, #8]
 800b6ee:	607a      	str	r2, [r7, #4]
 800b6f0:	603b      	str	r3, [r7, #0]
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800b6f6:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3714      	adds	r7, #20
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr

0800b704 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b704:	b480      	push	{r7}
 800b706:	b085      	sub	sp, #20
 800b708:	af00      	add	r7, sp, #0
 800b70a:	4603      	mov	r3, r0
 800b70c:	603a      	str	r2, [r7, #0]
 800b70e:	71fb      	strb	r3, [r7, #7]
 800b710:	460b      	mov	r3, r1
 800b712:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800b714:	2301      	movs	r3, #1
 800b716:	73fb      	strb	r3, [r7, #15]
    return res;
 800b718:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3714      	adds	r7, #20
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr
	...

0800b728 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b728:	b480      	push	{r7}
 800b72a:	b087      	sub	sp, #28
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	60f8      	str	r0, [r7, #12]
 800b730:	60b9      	str	r1, [r7, #8]
 800b732:	4613      	mov	r3, r2
 800b734:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b736:	2301      	movs	r3, #1
 800b738:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b73a:	2300      	movs	r3, #0
 800b73c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b73e:	4b1f      	ldr	r3, [pc, #124]	; (800b7bc <FATFS_LinkDriverEx+0x94>)
 800b740:	7a5b      	ldrb	r3, [r3, #9]
 800b742:	b2db      	uxtb	r3, r3
 800b744:	2b00      	cmp	r3, #0
 800b746:	d131      	bne.n	800b7ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b748:	4b1c      	ldr	r3, [pc, #112]	; (800b7bc <FATFS_LinkDriverEx+0x94>)
 800b74a:	7a5b      	ldrb	r3, [r3, #9]
 800b74c:	b2db      	uxtb	r3, r3
 800b74e:	461a      	mov	r2, r3
 800b750:	4b1a      	ldr	r3, [pc, #104]	; (800b7bc <FATFS_LinkDriverEx+0x94>)
 800b752:	2100      	movs	r1, #0
 800b754:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b756:	4b19      	ldr	r3, [pc, #100]	; (800b7bc <FATFS_LinkDriverEx+0x94>)
 800b758:	7a5b      	ldrb	r3, [r3, #9]
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	4a17      	ldr	r2, [pc, #92]	; (800b7bc <FATFS_LinkDriverEx+0x94>)
 800b75e:	009b      	lsls	r3, r3, #2
 800b760:	4413      	add	r3, r2
 800b762:	68fa      	ldr	r2, [r7, #12]
 800b764:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b766:	4b15      	ldr	r3, [pc, #84]	; (800b7bc <FATFS_LinkDriverEx+0x94>)
 800b768:	7a5b      	ldrb	r3, [r3, #9]
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	461a      	mov	r2, r3
 800b76e:	4b13      	ldr	r3, [pc, #76]	; (800b7bc <FATFS_LinkDriverEx+0x94>)
 800b770:	4413      	add	r3, r2
 800b772:	79fa      	ldrb	r2, [r7, #7]
 800b774:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b776:	4b11      	ldr	r3, [pc, #68]	; (800b7bc <FATFS_LinkDriverEx+0x94>)
 800b778:	7a5b      	ldrb	r3, [r3, #9]
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	1c5a      	adds	r2, r3, #1
 800b77e:	b2d1      	uxtb	r1, r2
 800b780:	4a0e      	ldr	r2, [pc, #56]	; (800b7bc <FATFS_LinkDriverEx+0x94>)
 800b782:	7251      	strb	r1, [r2, #9]
 800b784:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b786:	7dbb      	ldrb	r3, [r7, #22]
 800b788:	3330      	adds	r3, #48	; 0x30
 800b78a:	b2da      	uxtb	r2, r3
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	3301      	adds	r3, #1
 800b794:	223a      	movs	r2, #58	; 0x3a
 800b796:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	3302      	adds	r3, #2
 800b79c:	222f      	movs	r2, #47	; 0x2f
 800b79e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	3303      	adds	r3, #3
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b7ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	371c      	adds	r7, #28
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr
 800b7ba:	bf00      	nop
 800b7bc:	2000053c 	.word	0x2000053c

0800b7c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b082      	sub	sp, #8
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	6839      	ldr	r1, [r7, #0]
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f7ff ffaa 	bl	800b728 <FATFS_LinkDriverEx>
 800b7d4:	4603      	mov	r3, r0
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3708      	adds	r7, #8
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
	...

0800b7e0 <__NVIC_SetPriority>:
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b083      	sub	sp, #12
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	6039      	str	r1, [r7, #0]
 800b7ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b7ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	db0a      	blt.n	800b80a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	b2da      	uxtb	r2, r3
 800b7f8:	490c      	ldr	r1, [pc, #48]	; (800b82c <__NVIC_SetPriority+0x4c>)
 800b7fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7fe:	0112      	lsls	r2, r2, #4
 800b800:	b2d2      	uxtb	r2, r2
 800b802:	440b      	add	r3, r1
 800b804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b808:	e00a      	b.n	800b820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	b2da      	uxtb	r2, r3
 800b80e:	4908      	ldr	r1, [pc, #32]	; (800b830 <__NVIC_SetPriority+0x50>)
 800b810:	79fb      	ldrb	r3, [r7, #7]
 800b812:	f003 030f 	and.w	r3, r3, #15
 800b816:	3b04      	subs	r3, #4
 800b818:	0112      	lsls	r2, r2, #4
 800b81a:	b2d2      	uxtb	r2, r2
 800b81c:	440b      	add	r3, r1
 800b81e:	761a      	strb	r2, [r3, #24]
}
 800b820:	bf00      	nop
 800b822:	370c      	adds	r7, #12
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr
 800b82c:	e000e100 	.word	0xe000e100
 800b830:	e000ed00 	.word	0xe000ed00

0800b834 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b834:	b580      	push	{r7, lr}
 800b836:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b838:	4b05      	ldr	r3, [pc, #20]	; (800b850 <SysTick_Handler+0x1c>)
 800b83a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b83c:	f001 fdba 	bl	800d3b4 <xTaskGetSchedulerState>
 800b840:	4603      	mov	r3, r0
 800b842:	2b01      	cmp	r3, #1
 800b844:	d001      	beq.n	800b84a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b846:	f002 fb9f 	bl	800df88 <xPortSysTickHandler>
  }
}
 800b84a:	bf00      	nop
 800b84c:	bd80      	pop	{r7, pc}
 800b84e:	bf00      	nop
 800b850:	e000e010 	.word	0xe000e010

0800b854 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b854:	b580      	push	{r7, lr}
 800b856:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b858:	2100      	movs	r1, #0
 800b85a:	f06f 0004 	mvn.w	r0, #4
 800b85e:	f7ff ffbf 	bl	800b7e0 <__NVIC_SetPriority>
#endif
}
 800b862:	bf00      	nop
 800b864:	bd80      	pop	{r7, pc}
	...

0800b868 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b868:	b480      	push	{r7}
 800b86a:	b083      	sub	sp, #12
 800b86c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b86e:	f3ef 8305 	mrs	r3, IPSR
 800b872:	603b      	str	r3, [r7, #0]
  return(result);
 800b874:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b876:	2b00      	cmp	r3, #0
 800b878:	d003      	beq.n	800b882 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b87a:	f06f 0305 	mvn.w	r3, #5
 800b87e:	607b      	str	r3, [r7, #4]
 800b880:	e00c      	b.n	800b89c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b882:	4b0a      	ldr	r3, [pc, #40]	; (800b8ac <osKernelInitialize+0x44>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d105      	bne.n	800b896 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b88a:	4b08      	ldr	r3, [pc, #32]	; (800b8ac <osKernelInitialize+0x44>)
 800b88c:	2201      	movs	r2, #1
 800b88e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b890:	2300      	movs	r3, #0
 800b892:	607b      	str	r3, [r7, #4]
 800b894:	e002      	b.n	800b89c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b896:	f04f 33ff 	mov.w	r3, #4294967295
 800b89a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b89c:	687b      	ldr	r3, [r7, #4]
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	370c      	adds	r7, #12
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr
 800b8aa:	bf00      	nop
 800b8ac:	20000548 	.word	0x20000548

0800b8b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8b6:	f3ef 8305 	mrs	r3, IPSR
 800b8ba:	603b      	str	r3, [r7, #0]
  return(result);
 800b8bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d003      	beq.n	800b8ca <osKernelStart+0x1a>
    stat = osErrorISR;
 800b8c2:	f06f 0305 	mvn.w	r3, #5
 800b8c6:	607b      	str	r3, [r7, #4]
 800b8c8:	e010      	b.n	800b8ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b8ca:	4b0b      	ldr	r3, [pc, #44]	; (800b8f8 <osKernelStart+0x48>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	2b01      	cmp	r3, #1
 800b8d0:	d109      	bne.n	800b8e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b8d2:	f7ff ffbf 	bl	800b854 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b8d6:	4b08      	ldr	r3, [pc, #32]	; (800b8f8 <osKernelStart+0x48>)
 800b8d8:	2202      	movs	r2, #2
 800b8da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b8dc:	f001 f8fe 	bl	800cadc <vTaskStartScheduler>
      stat = osOK;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	607b      	str	r3, [r7, #4]
 800b8e4:	e002      	b.n	800b8ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b8e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b8ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b8ec:	687b      	ldr	r3, [r7, #4]
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3708      	adds	r7, #8
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	20000548 	.word	0x20000548

0800b8fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b08e      	sub	sp, #56	; 0x38
 800b900:	af04      	add	r7, sp, #16
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	60b9      	str	r1, [r7, #8]
 800b906:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b908:	2300      	movs	r3, #0
 800b90a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b90c:	f3ef 8305 	mrs	r3, IPSR
 800b910:	617b      	str	r3, [r7, #20]
  return(result);
 800b912:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b914:	2b00      	cmp	r3, #0
 800b916:	d17e      	bne.n	800ba16 <osThreadNew+0x11a>
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d07b      	beq.n	800ba16 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b91e:	2380      	movs	r3, #128	; 0x80
 800b920:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b922:	2318      	movs	r3, #24
 800b924:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b926:	2300      	movs	r3, #0
 800b928:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b92a:	f04f 33ff 	mov.w	r3, #4294967295
 800b92e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d045      	beq.n	800b9c2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d002      	beq.n	800b944 <osThreadNew+0x48>
        name = attr->name;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	699b      	ldr	r3, [r3, #24]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d002      	beq.n	800b952 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	699b      	ldr	r3, [r3, #24]
 800b950:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b952:	69fb      	ldr	r3, [r7, #28]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d008      	beq.n	800b96a <osThreadNew+0x6e>
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	2b38      	cmp	r3, #56	; 0x38
 800b95c:	d805      	bhi.n	800b96a <osThreadNew+0x6e>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	f003 0301 	and.w	r3, r3, #1
 800b966:	2b00      	cmp	r3, #0
 800b968:	d001      	beq.n	800b96e <osThreadNew+0x72>
        return (NULL);
 800b96a:	2300      	movs	r3, #0
 800b96c:	e054      	b.n	800ba18 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	695b      	ldr	r3, [r3, #20]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d003      	beq.n	800b97e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	695b      	ldr	r3, [r3, #20]
 800b97a:	089b      	lsrs	r3, r3, #2
 800b97c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	689b      	ldr	r3, [r3, #8]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d00e      	beq.n	800b9a4 <osThreadNew+0xa8>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	68db      	ldr	r3, [r3, #12]
 800b98a:	2bbb      	cmp	r3, #187	; 0xbb
 800b98c:	d90a      	bls.n	800b9a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b992:	2b00      	cmp	r3, #0
 800b994:	d006      	beq.n	800b9a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	695b      	ldr	r3, [r3, #20]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d002      	beq.n	800b9a4 <osThreadNew+0xa8>
        mem = 1;
 800b99e:	2301      	movs	r3, #1
 800b9a0:	61bb      	str	r3, [r7, #24]
 800b9a2:	e010      	b.n	800b9c6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	689b      	ldr	r3, [r3, #8]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d10c      	bne.n	800b9c6 <osThreadNew+0xca>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	68db      	ldr	r3, [r3, #12]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d108      	bne.n	800b9c6 <osThreadNew+0xca>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	691b      	ldr	r3, [r3, #16]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d104      	bne.n	800b9c6 <osThreadNew+0xca>
          mem = 0;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	61bb      	str	r3, [r7, #24]
 800b9c0:	e001      	b.n	800b9c6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b9c6:	69bb      	ldr	r3, [r7, #24]
 800b9c8:	2b01      	cmp	r3, #1
 800b9ca:	d110      	bne.n	800b9ee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b9d0:	687a      	ldr	r2, [r7, #4]
 800b9d2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b9d4:	9202      	str	r2, [sp, #8]
 800b9d6:	9301      	str	r3, [sp, #4]
 800b9d8:	69fb      	ldr	r3, [r7, #28]
 800b9da:	9300      	str	r3, [sp, #0]
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	6a3a      	ldr	r2, [r7, #32]
 800b9e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b9e2:	68f8      	ldr	r0, [r7, #12]
 800b9e4:	f000 fe1c 	bl	800c620 <xTaskCreateStatic>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	613b      	str	r3, [r7, #16]
 800b9ec:	e013      	b.n	800ba16 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b9ee:	69bb      	ldr	r3, [r7, #24]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d110      	bne.n	800ba16 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b9f4:	6a3b      	ldr	r3, [r7, #32]
 800b9f6:	b29a      	uxth	r2, r3
 800b9f8:	f107 0310 	add.w	r3, r7, #16
 800b9fc:	9301      	str	r3, [sp, #4]
 800b9fe:	69fb      	ldr	r3, [r7, #28]
 800ba00:	9300      	str	r3, [sp, #0]
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ba06:	68f8      	ldr	r0, [r7, #12]
 800ba08:	f000 fe67 	bl	800c6da <xTaskCreate>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d001      	beq.n	800ba16 <osThreadNew+0x11a>
            hTask = NULL;
 800ba12:	2300      	movs	r3, #0
 800ba14:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ba16:	693b      	ldr	r3, [r7, #16]
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3728      	adds	r7, #40	; 0x28
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 800ba26:	f001 fcb5 	bl	800d394 <xTaskGetCurrentTaskHandle>
 800ba2a:	6078      	str	r0, [r7, #4]

  return (id);
 800ba2c:	687b      	ldr	r3, [r7, #4]
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3708      	adds	r7, #8
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 800ba36:	b580      	push	{r7, lr}
 800ba38:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800ba3a:	2000      	movs	r0, #0
 800ba3c:	f000 ffa8 	bl	800c990 <vTaskDelete>
#endif
  for (;;);
 800ba40:	e7fe      	b.n	800ba40 <osThreadExit+0xa>

0800ba42 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ba42:	b580      	push	{r7, lr}
 800ba44:	b084      	sub	sp, #16
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba4a:	f3ef 8305 	mrs	r3, IPSR
 800ba4e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ba50:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d003      	beq.n	800ba5e <osDelay+0x1c>
    stat = osErrorISR;
 800ba56:	f06f 0305 	mvn.w	r3, #5
 800ba5a:	60fb      	str	r3, [r7, #12]
 800ba5c:	e007      	b.n	800ba6e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d002      	beq.n	800ba6e <osDelay+0x2c>
      vTaskDelay(ticks);
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f001 f803 	bl	800ca74 <vTaskDelay>
    }
  }

  return (stat);
 800ba6e:	68fb      	ldr	r3, [r7, #12]
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3710      	adds	r7, #16
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ba78:	b480      	push	{r7}
 800ba7a:	b085      	sub	sp, #20
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	4a07      	ldr	r2, [pc, #28]	; (800baa4 <vApplicationGetIdleTaskMemory+0x2c>)
 800ba88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	4a06      	ldr	r2, [pc, #24]	; (800baa8 <vApplicationGetIdleTaskMemory+0x30>)
 800ba8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2280      	movs	r2, #128	; 0x80
 800ba94:	601a      	str	r2, [r3, #0]
}
 800ba96:	bf00      	nop
 800ba98:	3714      	adds	r7, #20
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa0:	4770      	bx	lr
 800baa2:	bf00      	nop
 800baa4:	2000054c 	.word	0x2000054c
 800baa8:	20000608 	.word	0x20000608

0800baac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800baac:	b480      	push	{r7}
 800baae:	b085      	sub	sp, #20
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	60f8      	str	r0, [r7, #12]
 800bab4:	60b9      	str	r1, [r7, #8]
 800bab6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	4a07      	ldr	r2, [pc, #28]	; (800bad8 <vApplicationGetTimerTaskMemory+0x2c>)
 800babc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	4a06      	ldr	r2, [pc, #24]	; (800badc <vApplicationGetTimerTaskMemory+0x30>)
 800bac2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800baca:	601a      	str	r2, [r3, #0]
}
 800bacc:	bf00      	nop
 800bace:	3714      	adds	r7, #20
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr
 800bad8:	20000808 	.word	0x20000808
 800badc:	200008c4 	.word	0x200008c4

0800bae0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bae0:	b480      	push	{r7}
 800bae2:	b083      	sub	sp, #12
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f103 0208 	add.w	r2, r3, #8
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f04f 32ff 	mov.w	r2, #4294967295
 800baf8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f103 0208 	add.w	r2, r3, #8
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f103 0208 	add.w	r2, r3, #8
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2200      	movs	r2, #0
 800bb12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bb14:	bf00      	nop
 800bb16:	370c      	adds	r7, #12
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr

0800bb20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bb20:	b480      	push	{r7}
 800bb22:	b083      	sub	sp, #12
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bb2e:	bf00      	nop
 800bb30:	370c      	adds	r7, #12
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr

0800bb3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bb3a:	b480      	push	{r7}
 800bb3c:	b085      	sub	sp, #20
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	6078      	str	r0, [r7, #4]
 800bb42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	685b      	ldr	r3, [r3, #4]
 800bb48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	68fa      	ldr	r2, [r7, #12]
 800bb4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	689a      	ldr	r2, [r3, #8]
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	689b      	ldr	r3, [r3, #8]
 800bb5c:	683a      	ldr	r2, [r7, #0]
 800bb5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	683a      	ldr	r2, [r7, #0]
 800bb64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	1c5a      	adds	r2, r3, #1
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	601a      	str	r2, [r3, #0]
}
 800bb76:	bf00      	nop
 800bb78:	3714      	adds	r7, #20
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb80:	4770      	bx	lr

0800bb82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bb82:	b480      	push	{r7}
 800bb84:	b085      	sub	sp, #20
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	6078      	str	r0, [r7, #4]
 800bb8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb98:	d103      	bne.n	800bba2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	691b      	ldr	r3, [r3, #16]
 800bb9e:	60fb      	str	r3, [r7, #12]
 800bba0:	e00c      	b.n	800bbbc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	3308      	adds	r3, #8
 800bba6:	60fb      	str	r3, [r7, #12]
 800bba8:	e002      	b.n	800bbb0 <vListInsert+0x2e>
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	60fb      	str	r3, [r7, #12]
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	68ba      	ldr	r2, [r7, #8]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d2f6      	bcs.n	800bbaa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	685a      	ldr	r2, [r3, #4]
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	683a      	ldr	r2, [r7, #0]
 800bbca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	68fa      	ldr	r2, [r7, #12]
 800bbd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	683a      	ldr	r2, [r7, #0]
 800bbd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	687a      	ldr	r2, [r7, #4]
 800bbdc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	1c5a      	adds	r2, r3, #1
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	601a      	str	r2, [r3, #0]
}
 800bbe8:	bf00      	nop
 800bbea:	3714      	adds	r7, #20
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr

0800bbf4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b085      	sub	sp, #20
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	691b      	ldr	r3, [r3, #16]
 800bc00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	687a      	ldr	r2, [r7, #4]
 800bc08:	6892      	ldr	r2, [r2, #8]
 800bc0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	689b      	ldr	r3, [r3, #8]
 800bc10:	687a      	ldr	r2, [r7, #4]
 800bc12:	6852      	ldr	r2, [r2, #4]
 800bc14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d103      	bne.n	800bc28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	689a      	ldr	r2, [r3, #8]
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	1e5a      	subs	r2, r3, #1
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681b      	ldr	r3, [r3, #0]
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3714      	adds	r7, #20
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr

0800bc48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b084      	sub	sp, #16
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d10a      	bne.n	800bc72 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bc5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc60:	f383 8811 	msr	BASEPRI, r3
 800bc64:	f3bf 8f6f 	isb	sy
 800bc68:	f3bf 8f4f 	dsb	sy
 800bc6c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bc6e:	bf00      	nop
 800bc70:	e7fe      	b.n	800bc70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bc72:	f002 f8f7 	bl	800de64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681a      	ldr	r2, [r3, #0]
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc7e:	68f9      	ldr	r1, [r7, #12]
 800bc80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bc82:	fb01 f303 	mul.w	r3, r1, r3
 800bc86:	441a      	add	r2, r3
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681a      	ldr	r2, [r3, #0]
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681a      	ldr	r2, [r3, #0]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bca2:	3b01      	subs	r3, #1
 800bca4:	68f9      	ldr	r1, [r7, #12]
 800bca6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bca8:	fb01 f303 	mul.w	r3, r1, r3
 800bcac:	441a      	add	r2, r3
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	22ff      	movs	r2, #255	; 0xff
 800bcb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	22ff      	movs	r2, #255	; 0xff
 800bcbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d114      	bne.n	800bcf2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	691b      	ldr	r3, [r3, #16]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d01a      	beq.n	800bd06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	3310      	adds	r3, #16
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f001 f99b 	bl	800d010 <xTaskRemoveFromEventList>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d012      	beq.n	800bd06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bce0:	4b0c      	ldr	r3, [pc, #48]	; (800bd14 <xQueueGenericReset+0xcc>)
 800bce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bce6:	601a      	str	r2, [r3, #0]
 800bce8:	f3bf 8f4f 	dsb	sy
 800bcec:	f3bf 8f6f 	isb	sy
 800bcf0:	e009      	b.n	800bd06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	3310      	adds	r3, #16
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7ff fef2 	bl	800bae0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	3324      	adds	r3, #36	; 0x24
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7ff feed 	bl	800bae0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bd06:	f002 f8dd 	bl	800dec4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bd0a:	2301      	movs	r3, #1
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3710      	adds	r7, #16
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	e000ed04 	.word	0xe000ed04

0800bd18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b08e      	sub	sp, #56	; 0x38
 800bd1c:	af02      	add	r7, sp, #8
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	607a      	str	r2, [r7, #4]
 800bd24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d10a      	bne.n	800bd42 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd30:	f383 8811 	msr	BASEPRI, r3
 800bd34:	f3bf 8f6f 	isb	sy
 800bd38:	f3bf 8f4f 	dsb	sy
 800bd3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bd3e:	bf00      	nop
 800bd40:	e7fe      	b.n	800bd40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d10a      	bne.n	800bd5e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bd48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd4c:	f383 8811 	msr	BASEPRI, r3
 800bd50:	f3bf 8f6f 	isb	sy
 800bd54:	f3bf 8f4f 	dsb	sy
 800bd58:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bd5a:	bf00      	nop
 800bd5c:	e7fe      	b.n	800bd5c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d002      	beq.n	800bd6a <xQueueGenericCreateStatic+0x52>
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d001      	beq.n	800bd6e <xQueueGenericCreateStatic+0x56>
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	e000      	b.n	800bd70 <xQueueGenericCreateStatic+0x58>
 800bd6e:	2300      	movs	r3, #0
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d10a      	bne.n	800bd8a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd78:	f383 8811 	msr	BASEPRI, r3
 800bd7c:	f3bf 8f6f 	isb	sy
 800bd80:	f3bf 8f4f 	dsb	sy
 800bd84:	623b      	str	r3, [r7, #32]
}
 800bd86:	bf00      	nop
 800bd88:	e7fe      	b.n	800bd88 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d102      	bne.n	800bd96 <xQueueGenericCreateStatic+0x7e>
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d101      	bne.n	800bd9a <xQueueGenericCreateStatic+0x82>
 800bd96:	2301      	movs	r3, #1
 800bd98:	e000      	b.n	800bd9c <xQueueGenericCreateStatic+0x84>
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d10a      	bne.n	800bdb6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda4:	f383 8811 	msr	BASEPRI, r3
 800bda8:	f3bf 8f6f 	isb	sy
 800bdac:	f3bf 8f4f 	dsb	sy
 800bdb0:	61fb      	str	r3, [r7, #28]
}
 800bdb2:	bf00      	nop
 800bdb4:	e7fe      	b.n	800bdb4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bdb6:	2350      	movs	r3, #80	; 0x50
 800bdb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	2b50      	cmp	r3, #80	; 0x50
 800bdbe:	d00a      	beq.n	800bdd6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc4:	f383 8811 	msr	BASEPRI, r3
 800bdc8:	f3bf 8f6f 	isb	sy
 800bdcc:	f3bf 8f4f 	dsb	sy
 800bdd0:	61bb      	str	r3, [r7, #24]
}
 800bdd2:	bf00      	nop
 800bdd4:	e7fe      	b.n	800bdd4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bdd6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d00d      	beq.n	800bdfe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde4:	2201      	movs	r2, #1
 800bde6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bdea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf0:	9300      	str	r3, [sp, #0]
 800bdf2:	4613      	mov	r3, r2
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	68b9      	ldr	r1, [r7, #8]
 800bdf8:	68f8      	ldr	r0, [r7, #12]
 800bdfa:	f000 f805 	bl	800be08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bdfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800be00:	4618      	mov	r0, r3
 800be02:	3730      	adds	r7, #48	; 0x30
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}

0800be08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	60f8      	str	r0, [r7, #12]
 800be10:	60b9      	str	r1, [r7, #8]
 800be12:	607a      	str	r2, [r7, #4]
 800be14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d103      	bne.n	800be24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800be1c:	69bb      	ldr	r3, [r7, #24]
 800be1e:	69ba      	ldr	r2, [r7, #24]
 800be20:	601a      	str	r2, [r3, #0]
 800be22:	e002      	b.n	800be2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800be24:	69bb      	ldr	r3, [r7, #24]
 800be26:	687a      	ldr	r2, [r7, #4]
 800be28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800be2a:	69bb      	ldr	r3, [r7, #24]
 800be2c:	68fa      	ldr	r2, [r7, #12]
 800be2e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800be30:	69bb      	ldr	r3, [r7, #24]
 800be32:	68ba      	ldr	r2, [r7, #8]
 800be34:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800be36:	2101      	movs	r1, #1
 800be38:	69b8      	ldr	r0, [r7, #24]
 800be3a:	f7ff ff05 	bl	800bc48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800be3e:	69bb      	ldr	r3, [r7, #24]
 800be40:	78fa      	ldrb	r2, [r7, #3]
 800be42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800be46:	bf00      	nop
 800be48:	3710      	adds	r7, #16
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
	...

0800be50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b08e      	sub	sp, #56	; 0x38
 800be54:	af00      	add	r7, sp, #0
 800be56:	60f8      	str	r0, [r7, #12]
 800be58:	60b9      	str	r1, [r7, #8]
 800be5a:	607a      	str	r2, [r7, #4]
 800be5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800be5e:	2300      	movs	r3, #0
 800be60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800be66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d10a      	bne.n	800be82 <xQueueGenericSend+0x32>
	__asm volatile
 800be6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be70:	f383 8811 	msr	BASEPRI, r3
 800be74:	f3bf 8f6f 	isb	sy
 800be78:	f3bf 8f4f 	dsb	sy
 800be7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800be7e:	bf00      	nop
 800be80:	e7fe      	b.n	800be80 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d103      	bne.n	800be90 <xQueueGenericSend+0x40>
 800be88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d101      	bne.n	800be94 <xQueueGenericSend+0x44>
 800be90:	2301      	movs	r3, #1
 800be92:	e000      	b.n	800be96 <xQueueGenericSend+0x46>
 800be94:	2300      	movs	r3, #0
 800be96:	2b00      	cmp	r3, #0
 800be98:	d10a      	bne.n	800beb0 <xQueueGenericSend+0x60>
	__asm volatile
 800be9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9e:	f383 8811 	msr	BASEPRI, r3
 800bea2:	f3bf 8f6f 	isb	sy
 800bea6:	f3bf 8f4f 	dsb	sy
 800beaa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800beac:	bf00      	nop
 800beae:	e7fe      	b.n	800beae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	2b02      	cmp	r3, #2
 800beb4:	d103      	bne.n	800bebe <xQueueGenericSend+0x6e>
 800beb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beba:	2b01      	cmp	r3, #1
 800bebc:	d101      	bne.n	800bec2 <xQueueGenericSend+0x72>
 800bebe:	2301      	movs	r3, #1
 800bec0:	e000      	b.n	800bec4 <xQueueGenericSend+0x74>
 800bec2:	2300      	movs	r3, #0
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d10a      	bne.n	800bede <xQueueGenericSend+0x8e>
	__asm volatile
 800bec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800becc:	f383 8811 	msr	BASEPRI, r3
 800bed0:	f3bf 8f6f 	isb	sy
 800bed4:	f3bf 8f4f 	dsb	sy
 800bed8:	623b      	str	r3, [r7, #32]
}
 800beda:	bf00      	nop
 800bedc:	e7fe      	b.n	800bedc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bede:	f001 fa69 	bl	800d3b4 <xTaskGetSchedulerState>
 800bee2:	4603      	mov	r3, r0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d102      	bne.n	800beee <xQueueGenericSend+0x9e>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d101      	bne.n	800bef2 <xQueueGenericSend+0xa2>
 800beee:	2301      	movs	r3, #1
 800bef0:	e000      	b.n	800bef4 <xQueueGenericSend+0xa4>
 800bef2:	2300      	movs	r3, #0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d10a      	bne.n	800bf0e <xQueueGenericSend+0xbe>
	__asm volatile
 800bef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800befc:	f383 8811 	msr	BASEPRI, r3
 800bf00:	f3bf 8f6f 	isb	sy
 800bf04:	f3bf 8f4f 	dsb	sy
 800bf08:	61fb      	str	r3, [r7, #28]
}
 800bf0a:	bf00      	nop
 800bf0c:	e7fe      	b.n	800bf0c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf0e:	f001 ffa9 	bl	800de64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d302      	bcc.n	800bf24 <xQueueGenericSend+0xd4>
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	2b02      	cmp	r3, #2
 800bf22:	d129      	bne.n	800bf78 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bf24:	683a      	ldr	r2, [r7, #0]
 800bf26:	68b9      	ldr	r1, [r7, #8]
 800bf28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf2a:	f000 fa0b 	bl	800c344 <prvCopyDataToQueue>
 800bf2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d010      	beq.n	800bf5a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf3a:	3324      	adds	r3, #36	; 0x24
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f001 f867 	bl	800d010 <xTaskRemoveFromEventList>
 800bf42:	4603      	mov	r3, r0
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d013      	beq.n	800bf70 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bf48:	4b3f      	ldr	r3, [pc, #252]	; (800c048 <xQueueGenericSend+0x1f8>)
 800bf4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf4e:	601a      	str	r2, [r3, #0]
 800bf50:	f3bf 8f4f 	dsb	sy
 800bf54:	f3bf 8f6f 	isb	sy
 800bf58:	e00a      	b.n	800bf70 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bf5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d007      	beq.n	800bf70 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bf60:	4b39      	ldr	r3, [pc, #228]	; (800c048 <xQueueGenericSend+0x1f8>)
 800bf62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf66:	601a      	str	r2, [r3, #0]
 800bf68:	f3bf 8f4f 	dsb	sy
 800bf6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bf70:	f001 ffa8 	bl	800dec4 <vPortExitCritical>
				return pdPASS;
 800bf74:	2301      	movs	r3, #1
 800bf76:	e063      	b.n	800c040 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d103      	bne.n	800bf86 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bf7e:	f001 ffa1 	bl	800dec4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bf82:	2300      	movs	r3, #0
 800bf84:	e05c      	b.n	800c040 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d106      	bne.n	800bf9a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf8c:	f107 0314 	add.w	r3, r7, #20
 800bf90:	4618      	mov	r0, r3
 800bf92:	f001 f8a1 	bl	800d0d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf96:	2301      	movs	r3, #1
 800bf98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf9a:	f001 ff93 	bl	800dec4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf9e:	f000 fe0d 	bl	800cbbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bfa2:	f001 ff5f 	bl	800de64 <vPortEnterCritical>
 800bfa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfac:	b25b      	sxtb	r3, r3
 800bfae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfb2:	d103      	bne.n	800bfbc <xQueueGenericSend+0x16c>
 800bfb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfc2:	b25b      	sxtb	r3, r3
 800bfc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfc8:	d103      	bne.n	800bfd2 <xQueueGenericSend+0x182>
 800bfca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfcc:	2200      	movs	r2, #0
 800bfce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bfd2:	f001 ff77 	bl	800dec4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bfd6:	1d3a      	adds	r2, r7, #4
 800bfd8:	f107 0314 	add.w	r3, r7, #20
 800bfdc:	4611      	mov	r1, r2
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f001 f890 	bl	800d104 <xTaskCheckForTimeOut>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d124      	bne.n	800c034 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bfea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfec:	f000 faa2 	bl	800c534 <prvIsQueueFull>
 800bff0:	4603      	mov	r3, r0
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d018      	beq.n	800c028 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff8:	3310      	adds	r3, #16
 800bffa:	687a      	ldr	r2, [r7, #4]
 800bffc:	4611      	mov	r1, r2
 800bffe:	4618      	mov	r0, r3
 800c000:	f000 ffb6 	bl	800cf70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c004:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c006:	f000 fa2d 	bl	800c464 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c00a:	f000 fde5 	bl	800cbd8 <xTaskResumeAll>
 800c00e:	4603      	mov	r3, r0
 800c010:	2b00      	cmp	r3, #0
 800c012:	f47f af7c 	bne.w	800bf0e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c016:	4b0c      	ldr	r3, [pc, #48]	; (800c048 <xQueueGenericSend+0x1f8>)
 800c018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c01c:	601a      	str	r2, [r3, #0]
 800c01e:	f3bf 8f4f 	dsb	sy
 800c022:	f3bf 8f6f 	isb	sy
 800c026:	e772      	b.n	800bf0e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c028:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c02a:	f000 fa1b 	bl	800c464 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c02e:	f000 fdd3 	bl	800cbd8 <xTaskResumeAll>
 800c032:	e76c      	b.n	800bf0e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c036:	f000 fa15 	bl	800c464 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c03a:	f000 fdcd 	bl	800cbd8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c03e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c040:	4618      	mov	r0, r3
 800c042:	3738      	adds	r7, #56	; 0x38
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}
 800c048:	e000ed04 	.word	0xe000ed04

0800c04c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b090      	sub	sp, #64	; 0x40
 800c050:	af00      	add	r7, sp, #0
 800c052:	60f8      	str	r0, [r7, #12]
 800c054:	60b9      	str	r1, [r7, #8]
 800c056:	607a      	str	r2, [r7, #4]
 800c058:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c060:	2b00      	cmp	r3, #0
 800c062:	d10a      	bne.n	800c07a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c068:	f383 8811 	msr	BASEPRI, r3
 800c06c:	f3bf 8f6f 	isb	sy
 800c070:	f3bf 8f4f 	dsb	sy
 800c074:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c076:	bf00      	nop
 800c078:	e7fe      	b.n	800c078 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d103      	bne.n	800c088 <xQueueGenericSendFromISR+0x3c>
 800c080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c084:	2b00      	cmp	r3, #0
 800c086:	d101      	bne.n	800c08c <xQueueGenericSendFromISR+0x40>
 800c088:	2301      	movs	r3, #1
 800c08a:	e000      	b.n	800c08e <xQueueGenericSendFromISR+0x42>
 800c08c:	2300      	movs	r3, #0
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d10a      	bne.n	800c0a8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c096:	f383 8811 	msr	BASEPRI, r3
 800c09a:	f3bf 8f6f 	isb	sy
 800c09e:	f3bf 8f4f 	dsb	sy
 800c0a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c0a4:	bf00      	nop
 800c0a6:	e7fe      	b.n	800c0a6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	2b02      	cmp	r3, #2
 800c0ac:	d103      	bne.n	800c0b6 <xQueueGenericSendFromISR+0x6a>
 800c0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0b2:	2b01      	cmp	r3, #1
 800c0b4:	d101      	bne.n	800c0ba <xQueueGenericSendFromISR+0x6e>
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	e000      	b.n	800c0bc <xQueueGenericSendFromISR+0x70>
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d10a      	bne.n	800c0d6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c4:	f383 8811 	msr	BASEPRI, r3
 800c0c8:	f3bf 8f6f 	isb	sy
 800c0cc:	f3bf 8f4f 	dsb	sy
 800c0d0:	623b      	str	r3, [r7, #32]
}
 800c0d2:	bf00      	nop
 800c0d4:	e7fe      	b.n	800c0d4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c0d6:	f001 ffa7 	bl	800e028 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c0da:	f3ef 8211 	mrs	r2, BASEPRI
 800c0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e2:	f383 8811 	msr	BASEPRI, r3
 800c0e6:	f3bf 8f6f 	isb	sy
 800c0ea:	f3bf 8f4f 	dsb	sy
 800c0ee:	61fa      	str	r2, [r7, #28]
 800c0f0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c0f2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c0f4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d302      	bcc.n	800c108 <xQueueGenericSendFromISR+0xbc>
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	2b02      	cmp	r3, #2
 800c106:	d12f      	bne.n	800c168 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c10a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c10e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c116:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c118:	683a      	ldr	r2, [r7, #0]
 800c11a:	68b9      	ldr	r1, [r7, #8]
 800c11c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c11e:	f000 f911 	bl	800c344 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c122:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c12a:	d112      	bne.n	800c152 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c130:	2b00      	cmp	r3, #0
 800c132:	d016      	beq.n	800c162 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c136:	3324      	adds	r3, #36	; 0x24
 800c138:	4618      	mov	r0, r3
 800c13a:	f000 ff69 	bl	800d010 <xTaskRemoveFromEventList>
 800c13e:	4603      	mov	r3, r0
 800c140:	2b00      	cmp	r3, #0
 800c142:	d00e      	beq.n	800c162 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d00b      	beq.n	800c162 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2201      	movs	r2, #1
 800c14e:	601a      	str	r2, [r3, #0]
 800c150:	e007      	b.n	800c162 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c152:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c156:	3301      	adds	r3, #1
 800c158:	b2db      	uxtb	r3, r3
 800c15a:	b25a      	sxtb	r2, r3
 800c15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c15e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c162:	2301      	movs	r3, #1
 800c164:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c166:	e001      	b.n	800c16c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c168:	2300      	movs	r3, #0
 800c16a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c16c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c16e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c176:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3740      	adds	r7, #64	; 0x40
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}
	...

0800c184 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b08c      	sub	sp, #48	; 0x30
 800c188:	af00      	add	r7, sp, #0
 800c18a:	60f8      	str	r0, [r7, #12]
 800c18c:	60b9      	str	r1, [r7, #8]
 800c18e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c190:	2300      	movs	r3, #0
 800c192:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d10a      	bne.n	800c1b4 <xQueueReceive+0x30>
	__asm volatile
 800c19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a2:	f383 8811 	msr	BASEPRI, r3
 800c1a6:	f3bf 8f6f 	isb	sy
 800c1aa:	f3bf 8f4f 	dsb	sy
 800c1ae:	623b      	str	r3, [r7, #32]
}
 800c1b0:	bf00      	nop
 800c1b2:	e7fe      	b.n	800c1b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d103      	bne.n	800c1c2 <xQueueReceive+0x3e>
 800c1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d101      	bne.n	800c1c6 <xQueueReceive+0x42>
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	e000      	b.n	800c1c8 <xQueueReceive+0x44>
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d10a      	bne.n	800c1e2 <xQueueReceive+0x5e>
	__asm volatile
 800c1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d0:	f383 8811 	msr	BASEPRI, r3
 800c1d4:	f3bf 8f6f 	isb	sy
 800c1d8:	f3bf 8f4f 	dsb	sy
 800c1dc:	61fb      	str	r3, [r7, #28]
}
 800c1de:	bf00      	nop
 800c1e0:	e7fe      	b.n	800c1e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c1e2:	f001 f8e7 	bl	800d3b4 <xTaskGetSchedulerState>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d102      	bne.n	800c1f2 <xQueueReceive+0x6e>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d101      	bne.n	800c1f6 <xQueueReceive+0x72>
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e000      	b.n	800c1f8 <xQueueReceive+0x74>
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d10a      	bne.n	800c212 <xQueueReceive+0x8e>
	__asm volatile
 800c1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c200:	f383 8811 	msr	BASEPRI, r3
 800c204:	f3bf 8f6f 	isb	sy
 800c208:	f3bf 8f4f 	dsb	sy
 800c20c:	61bb      	str	r3, [r7, #24]
}
 800c20e:	bf00      	nop
 800c210:	e7fe      	b.n	800c210 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c212:	f001 fe27 	bl	800de64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c21a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d01f      	beq.n	800c262 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c222:	68b9      	ldr	r1, [r7, #8]
 800c224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c226:	f000 f8f7 	bl	800c418 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22c:	1e5a      	subs	r2, r3, #1
 800c22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c230:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c234:	691b      	ldr	r3, [r3, #16]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d00f      	beq.n	800c25a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23c:	3310      	adds	r3, #16
 800c23e:	4618      	mov	r0, r3
 800c240:	f000 fee6 	bl	800d010 <xTaskRemoveFromEventList>
 800c244:	4603      	mov	r3, r0
 800c246:	2b00      	cmp	r3, #0
 800c248:	d007      	beq.n	800c25a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c24a:	4b3d      	ldr	r3, [pc, #244]	; (800c340 <xQueueReceive+0x1bc>)
 800c24c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c250:	601a      	str	r2, [r3, #0]
 800c252:	f3bf 8f4f 	dsb	sy
 800c256:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c25a:	f001 fe33 	bl	800dec4 <vPortExitCritical>
				return pdPASS;
 800c25e:	2301      	movs	r3, #1
 800c260:	e069      	b.n	800c336 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d103      	bne.n	800c270 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c268:	f001 fe2c 	bl	800dec4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c26c:	2300      	movs	r3, #0
 800c26e:	e062      	b.n	800c336 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c272:	2b00      	cmp	r3, #0
 800c274:	d106      	bne.n	800c284 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c276:	f107 0310 	add.w	r3, r7, #16
 800c27a:	4618      	mov	r0, r3
 800c27c:	f000 ff2c 	bl	800d0d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c280:	2301      	movs	r3, #1
 800c282:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c284:	f001 fe1e 	bl	800dec4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c288:	f000 fc98 	bl	800cbbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c28c:	f001 fdea 	bl	800de64 <vPortEnterCritical>
 800c290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c292:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c296:	b25b      	sxtb	r3, r3
 800c298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c29c:	d103      	bne.n	800c2a6 <xQueueReceive+0x122>
 800c29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2ac:	b25b      	sxtb	r3, r3
 800c2ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2b2:	d103      	bne.n	800c2bc <xQueueReceive+0x138>
 800c2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2bc:	f001 fe02 	bl	800dec4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c2c0:	1d3a      	adds	r2, r7, #4
 800c2c2:	f107 0310 	add.w	r3, r7, #16
 800c2c6:	4611      	mov	r1, r2
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f000 ff1b 	bl	800d104 <xTaskCheckForTimeOut>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d123      	bne.n	800c31c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2d6:	f000 f917 	bl	800c508 <prvIsQueueEmpty>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d017      	beq.n	800c310 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e2:	3324      	adds	r3, #36	; 0x24
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	4611      	mov	r1, r2
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f000 fe41 	bl	800cf70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c2ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2f0:	f000 f8b8 	bl	800c464 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c2f4:	f000 fc70 	bl	800cbd8 <xTaskResumeAll>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d189      	bne.n	800c212 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c2fe:	4b10      	ldr	r3, [pc, #64]	; (800c340 <xQueueReceive+0x1bc>)
 800c300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c304:	601a      	str	r2, [r3, #0]
 800c306:	f3bf 8f4f 	dsb	sy
 800c30a:	f3bf 8f6f 	isb	sy
 800c30e:	e780      	b.n	800c212 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c312:	f000 f8a7 	bl	800c464 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c316:	f000 fc5f 	bl	800cbd8 <xTaskResumeAll>
 800c31a:	e77a      	b.n	800c212 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c31c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c31e:	f000 f8a1 	bl	800c464 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c322:	f000 fc59 	bl	800cbd8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c326:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c328:	f000 f8ee 	bl	800c508 <prvIsQueueEmpty>
 800c32c:	4603      	mov	r3, r0
 800c32e:	2b00      	cmp	r3, #0
 800c330:	f43f af6f 	beq.w	800c212 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c334:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c336:	4618      	mov	r0, r3
 800c338:	3730      	adds	r7, #48	; 0x30
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
 800c33e:	bf00      	nop
 800c340:	e000ed04 	.word	0xe000ed04

0800c344 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b086      	sub	sp, #24
 800c348:	af00      	add	r7, sp, #0
 800c34a:	60f8      	str	r0, [r7, #12]
 800c34c:	60b9      	str	r1, [r7, #8]
 800c34e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c350:	2300      	movs	r3, #0
 800c352:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c358:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d10d      	bne.n	800c37e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d14d      	bne.n	800c406 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	689b      	ldr	r3, [r3, #8]
 800c36e:	4618      	mov	r0, r3
 800c370:	f001 f83e 	bl	800d3f0 <xTaskPriorityDisinherit>
 800c374:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	2200      	movs	r2, #0
 800c37a:	609a      	str	r2, [r3, #8]
 800c37c:	e043      	b.n	800c406 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d119      	bne.n	800c3b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	6858      	ldr	r0, [r3, #4]
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c38c:	461a      	mov	r2, r3
 800c38e:	68b9      	ldr	r1, [r7, #8]
 800c390:	f002 f9de 	bl	800e750 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	685a      	ldr	r2, [r3, #4]
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c39c:	441a      	add	r2, r3
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	685a      	ldr	r2, [r3, #4]
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	689b      	ldr	r3, [r3, #8]
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d32b      	bcc.n	800c406 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681a      	ldr	r2, [r3, #0]
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	605a      	str	r2, [r3, #4]
 800c3b6:	e026      	b.n	800c406 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	68d8      	ldr	r0, [r3, #12]
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	68b9      	ldr	r1, [r7, #8]
 800c3c4:	f002 f9c4 	bl	800e750 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	68da      	ldr	r2, [r3, #12]
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3d0:	425b      	negs	r3, r3
 800c3d2:	441a      	add	r2, r3
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	68da      	ldr	r2, [r3, #12]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	d207      	bcs.n	800c3f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	689a      	ldr	r2, [r3, #8]
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ec:	425b      	negs	r3, r3
 800c3ee:	441a      	add	r2, r3
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2b02      	cmp	r3, #2
 800c3f8:	d105      	bne.n	800c406 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d002      	beq.n	800c406 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	3b01      	subs	r3, #1
 800c404:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	1c5a      	adds	r2, r3, #1
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c40e:	697b      	ldr	r3, [r7, #20]
}
 800c410:	4618      	mov	r0, r3
 800c412:	3718      	adds	r7, #24
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}

0800c418 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b082      	sub	sp, #8
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c426:	2b00      	cmp	r3, #0
 800c428:	d018      	beq.n	800c45c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	68da      	ldr	r2, [r3, #12]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c432:	441a      	add	r2, r3
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	68da      	ldr	r2, [r3, #12]
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	689b      	ldr	r3, [r3, #8]
 800c440:	429a      	cmp	r2, r3
 800c442:	d303      	bcc.n	800c44c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681a      	ldr	r2, [r3, #0]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	68d9      	ldr	r1, [r3, #12]
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c454:	461a      	mov	r2, r3
 800c456:	6838      	ldr	r0, [r7, #0]
 800c458:	f002 f97a 	bl	800e750 <memcpy>
	}
}
 800c45c:	bf00      	nop
 800c45e:	3708      	adds	r7, #8
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}

0800c464 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b084      	sub	sp, #16
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c46c:	f001 fcfa 	bl	800de64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c476:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c478:	e011      	b.n	800c49e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d012      	beq.n	800c4a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	3324      	adds	r3, #36	; 0x24
 800c486:	4618      	mov	r0, r3
 800c488:	f000 fdc2 	bl	800d010 <xTaskRemoveFromEventList>
 800c48c:	4603      	mov	r3, r0
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d001      	beq.n	800c496 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c492:	f000 fe99 	bl	800d1c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c496:	7bfb      	ldrb	r3, [r7, #15]
 800c498:	3b01      	subs	r3, #1
 800c49a:	b2db      	uxtb	r3, r3
 800c49c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c49e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	dce9      	bgt.n	800c47a <prvUnlockQueue+0x16>
 800c4a6:	e000      	b.n	800c4aa <prvUnlockQueue+0x46>
					break;
 800c4a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	22ff      	movs	r2, #255	; 0xff
 800c4ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c4b2:	f001 fd07 	bl	800dec4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c4b6:	f001 fcd5 	bl	800de64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c4c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c4c2:	e011      	b.n	800c4e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	691b      	ldr	r3, [r3, #16]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d012      	beq.n	800c4f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	3310      	adds	r3, #16
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f000 fd9d 	bl	800d010 <xTaskRemoveFromEventList>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d001      	beq.n	800c4e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c4dc:	f000 fe74 	bl	800d1c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c4e0:	7bbb      	ldrb	r3, [r7, #14]
 800c4e2:	3b01      	subs	r3, #1
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c4e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	dce9      	bgt.n	800c4c4 <prvUnlockQueue+0x60>
 800c4f0:	e000      	b.n	800c4f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c4f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	22ff      	movs	r2, #255	; 0xff
 800c4f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c4fc:	f001 fce2 	bl	800dec4 <vPortExitCritical>
}
 800c500:	bf00      	nop
 800c502:	3710      	adds	r7, #16
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}

0800c508 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b084      	sub	sp, #16
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c510:	f001 fca8 	bl	800de64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d102      	bne.n	800c522 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c51c:	2301      	movs	r3, #1
 800c51e:	60fb      	str	r3, [r7, #12]
 800c520:	e001      	b.n	800c526 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c522:	2300      	movs	r3, #0
 800c524:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c526:	f001 fccd 	bl	800dec4 <vPortExitCritical>

	return xReturn;
 800c52a:	68fb      	ldr	r3, [r7, #12]
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3710      	adds	r7, #16
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}

0800c534 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b084      	sub	sp, #16
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c53c:	f001 fc92 	bl	800de64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c548:	429a      	cmp	r2, r3
 800c54a:	d102      	bne.n	800c552 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c54c:	2301      	movs	r3, #1
 800c54e:	60fb      	str	r3, [r7, #12]
 800c550:	e001      	b.n	800c556 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c552:	2300      	movs	r3, #0
 800c554:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c556:	f001 fcb5 	bl	800dec4 <vPortExitCritical>

	return xReturn;
 800c55a:	68fb      	ldr	r3, [r7, #12]
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3710      	adds	r7, #16
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c564:	b480      	push	{r7}
 800c566:	b085      	sub	sp, #20
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c56e:	2300      	movs	r3, #0
 800c570:	60fb      	str	r3, [r7, #12]
 800c572:	e014      	b.n	800c59e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c574:	4a0f      	ldr	r2, [pc, #60]	; (800c5b4 <vQueueAddToRegistry+0x50>)
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d10b      	bne.n	800c598 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c580:	490c      	ldr	r1, [pc, #48]	; (800c5b4 <vQueueAddToRegistry+0x50>)
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	683a      	ldr	r2, [r7, #0]
 800c586:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c58a:	4a0a      	ldr	r2, [pc, #40]	; (800c5b4 <vQueueAddToRegistry+0x50>)
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	00db      	lsls	r3, r3, #3
 800c590:	4413      	add	r3, r2
 800c592:	687a      	ldr	r2, [r7, #4]
 800c594:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c596:	e006      	b.n	800c5a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	3301      	adds	r3, #1
 800c59c:	60fb      	str	r3, [r7, #12]
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	2b07      	cmp	r3, #7
 800c5a2:	d9e7      	bls.n	800c574 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c5a4:	bf00      	nop
 800c5a6:	bf00      	nop
 800c5a8:	3714      	adds	r7, #20
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b0:	4770      	bx	lr
 800c5b2:	bf00      	nop
 800c5b4:	20006298 	.word	0x20006298

0800c5b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b086      	sub	sp, #24
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	60f8      	str	r0, [r7, #12]
 800c5c0:	60b9      	str	r1, [r7, #8]
 800c5c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c5c8:	f001 fc4c 	bl	800de64 <vPortEnterCritical>
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c5d2:	b25b      	sxtb	r3, r3
 800c5d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5d8:	d103      	bne.n	800c5e2 <vQueueWaitForMessageRestricted+0x2a>
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c5e8:	b25b      	sxtb	r3, r3
 800c5ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5ee:	d103      	bne.n	800c5f8 <vQueueWaitForMessageRestricted+0x40>
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c5f8:	f001 fc64 	bl	800dec4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c600:	2b00      	cmp	r3, #0
 800c602:	d106      	bne.n	800c612 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	3324      	adds	r3, #36	; 0x24
 800c608:	687a      	ldr	r2, [r7, #4]
 800c60a:	68b9      	ldr	r1, [r7, #8]
 800c60c:	4618      	mov	r0, r3
 800c60e:	f000 fcd3 	bl	800cfb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c612:	6978      	ldr	r0, [r7, #20]
 800c614:	f7ff ff26 	bl	800c464 <prvUnlockQueue>
	}
 800c618:	bf00      	nop
 800c61a:	3718      	adds	r7, #24
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}

0800c620 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c620:	b580      	push	{r7, lr}
 800c622:	b08e      	sub	sp, #56	; 0x38
 800c624:	af04      	add	r7, sp, #16
 800c626:	60f8      	str	r0, [r7, #12]
 800c628:	60b9      	str	r1, [r7, #8]
 800c62a:	607a      	str	r2, [r7, #4]
 800c62c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c62e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c630:	2b00      	cmp	r3, #0
 800c632:	d10a      	bne.n	800c64a <xTaskCreateStatic+0x2a>
	__asm volatile
 800c634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c638:	f383 8811 	msr	BASEPRI, r3
 800c63c:	f3bf 8f6f 	isb	sy
 800c640:	f3bf 8f4f 	dsb	sy
 800c644:	623b      	str	r3, [r7, #32]
}
 800c646:	bf00      	nop
 800c648:	e7fe      	b.n	800c648 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d10a      	bne.n	800c666 <xTaskCreateStatic+0x46>
	__asm volatile
 800c650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c654:	f383 8811 	msr	BASEPRI, r3
 800c658:	f3bf 8f6f 	isb	sy
 800c65c:	f3bf 8f4f 	dsb	sy
 800c660:	61fb      	str	r3, [r7, #28]
}
 800c662:	bf00      	nop
 800c664:	e7fe      	b.n	800c664 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c666:	23bc      	movs	r3, #188	; 0xbc
 800c668:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c66a:	693b      	ldr	r3, [r7, #16]
 800c66c:	2bbc      	cmp	r3, #188	; 0xbc
 800c66e:	d00a      	beq.n	800c686 <xTaskCreateStatic+0x66>
	__asm volatile
 800c670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c674:	f383 8811 	msr	BASEPRI, r3
 800c678:	f3bf 8f6f 	isb	sy
 800c67c:	f3bf 8f4f 	dsb	sy
 800c680:	61bb      	str	r3, [r7, #24]
}
 800c682:	bf00      	nop
 800c684:	e7fe      	b.n	800c684 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c686:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d01e      	beq.n	800c6cc <xTaskCreateStatic+0xac>
 800c68e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c690:	2b00      	cmp	r3, #0
 800c692:	d01b      	beq.n	800c6cc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c696:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c69a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c69c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a0:	2202      	movs	r2, #2
 800c6a2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	9303      	str	r3, [sp, #12]
 800c6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ac:	9302      	str	r3, [sp, #8]
 800c6ae:	f107 0314 	add.w	r3, r7, #20
 800c6b2:	9301      	str	r3, [sp, #4]
 800c6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b6:	9300      	str	r3, [sp, #0]
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	687a      	ldr	r2, [r7, #4]
 800c6bc:	68b9      	ldr	r1, [r7, #8]
 800c6be:	68f8      	ldr	r0, [r7, #12]
 800c6c0:	f000 f850 	bl	800c764 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c6c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c6c6:	f000 f8f3 	bl	800c8b0 <prvAddNewTaskToReadyList>
 800c6ca:	e001      	b.n	800c6d0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c6d0:	697b      	ldr	r3, [r7, #20]
	}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3728      	adds	r7, #40	; 0x28
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}

0800c6da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c6da:	b580      	push	{r7, lr}
 800c6dc:	b08c      	sub	sp, #48	; 0x30
 800c6de:	af04      	add	r7, sp, #16
 800c6e0:	60f8      	str	r0, [r7, #12]
 800c6e2:	60b9      	str	r1, [r7, #8]
 800c6e4:	603b      	str	r3, [r7, #0]
 800c6e6:	4613      	mov	r3, r2
 800c6e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c6ea:	88fb      	ldrh	r3, [r7, #6]
 800c6ec:	009b      	lsls	r3, r3, #2
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f001 fcda 	bl	800e0a8 <pvPortMalloc>
 800c6f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d00e      	beq.n	800c71a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c6fc:	20bc      	movs	r0, #188	; 0xbc
 800c6fe:	f001 fcd3 	bl	800e0a8 <pvPortMalloc>
 800c702:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d003      	beq.n	800c712 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c70a:	69fb      	ldr	r3, [r7, #28]
 800c70c:	697a      	ldr	r2, [r7, #20]
 800c70e:	631a      	str	r2, [r3, #48]	; 0x30
 800c710:	e005      	b.n	800c71e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c712:	6978      	ldr	r0, [r7, #20]
 800c714:	f001 fd94 	bl	800e240 <vPortFree>
 800c718:	e001      	b.n	800c71e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c71a:	2300      	movs	r3, #0
 800c71c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c71e:	69fb      	ldr	r3, [r7, #28]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d017      	beq.n	800c754 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c724:	69fb      	ldr	r3, [r7, #28]
 800c726:	2200      	movs	r2, #0
 800c728:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c72c:	88fa      	ldrh	r2, [r7, #6]
 800c72e:	2300      	movs	r3, #0
 800c730:	9303      	str	r3, [sp, #12]
 800c732:	69fb      	ldr	r3, [r7, #28]
 800c734:	9302      	str	r3, [sp, #8]
 800c736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c738:	9301      	str	r3, [sp, #4]
 800c73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73c:	9300      	str	r3, [sp, #0]
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	68b9      	ldr	r1, [r7, #8]
 800c742:	68f8      	ldr	r0, [r7, #12]
 800c744:	f000 f80e 	bl	800c764 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c748:	69f8      	ldr	r0, [r7, #28]
 800c74a:	f000 f8b1 	bl	800c8b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c74e:	2301      	movs	r3, #1
 800c750:	61bb      	str	r3, [r7, #24]
 800c752:	e002      	b.n	800c75a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c754:	f04f 33ff 	mov.w	r3, #4294967295
 800c758:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c75a:	69bb      	ldr	r3, [r7, #24]
	}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3720      	adds	r7, #32
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b088      	sub	sp, #32
 800c768:	af00      	add	r7, sp, #0
 800c76a:	60f8      	str	r0, [r7, #12]
 800c76c:	60b9      	str	r1, [r7, #8]
 800c76e:	607a      	str	r2, [r7, #4]
 800c770:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c774:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	009b      	lsls	r3, r3, #2
 800c77a:	461a      	mov	r2, r3
 800c77c:	21a5      	movs	r1, #165	; 0xa5
 800c77e:	f002 f80f 	bl	800e7a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c78c:	3b01      	subs	r3, #1
 800c78e:	009b      	lsls	r3, r3, #2
 800c790:	4413      	add	r3, r2
 800c792:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c794:	69bb      	ldr	r3, [r7, #24]
 800c796:	f023 0307 	bic.w	r3, r3, #7
 800c79a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c79c:	69bb      	ldr	r3, [r7, #24]
 800c79e:	f003 0307 	and.w	r3, r3, #7
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d00a      	beq.n	800c7bc <prvInitialiseNewTask+0x58>
	__asm volatile
 800c7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7aa:	f383 8811 	msr	BASEPRI, r3
 800c7ae:	f3bf 8f6f 	isb	sy
 800c7b2:	f3bf 8f4f 	dsb	sy
 800c7b6:	617b      	str	r3, [r7, #20]
}
 800c7b8:	bf00      	nop
 800c7ba:	e7fe      	b.n	800c7ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d01f      	beq.n	800c802 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	61fb      	str	r3, [r7, #28]
 800c7c6:	e012      	b.n	800c7ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c7c8:	68ba      	ldr	r2, [r7, #8]
 800c7ca:	69fb      	ldr	r3, [r7, #28]
 800c7cc:	4413      	add	r3, r2
 800c7ce:	7819      	ldrb	r1, [r3, #0]
 800c7d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7d2:	69fb      	ldr	r3, [r7, #28]
 800c7d4:	4413      	add	r3, r2
 800c7d6:	3334      	adds	r3, #52	; 0x34
 800c7d8:	460a      	mov	r2, r1
 800c7da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c7dc:	68ba      	ldr	r2, [r7, #8]
 800c7de:	69fb      	ldr	r3, [r7, #28]
 800c7e0:	4413      	add	r3, r2
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d006      	beq.n	800c7f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c7e8:	69fb      	ldr	r3, [r7, #28]
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	61fb      	str	r3, [r7, #28]
 800c7ee:	69fb      	ldr	r3, [r7, #28]
 800c7f0:	2b0f      	cmp	r3, #15
 800c7f2:	d9e9      	bls.n	800c7c8 <prvInitialiseNewTask+0x64>
 800c7f4:	e000      	b.n	800c7f8 <prvInitialiseNewTask+0x94>
			{
				break;
 800c7f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c800:	e003      	b.n	800c80a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c804:	2200      	movs	r2, #0
 800c806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80c:	2b37      	cmp	r3, #55	; 0x37
 800c80e:	d901      	bls.n	800c814 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c810:	2337      	movs	r3, #55	; 0x37
 800c812:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c818:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c81e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c822:	2200      	movs	r2, #0
 800c824:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c828:	3304      	adds	r3, #4
 800c82a:	4618      	mov	r0, r3
 800c82c:	f7ff f978 	bl	800bb20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c832:	3318      	adds	r3, #24
 800c834:	4618      	mov	r0, r3
 800c836:	f7ff f973 	bl	800bb20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c83c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c83e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c842:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c848:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c84c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c84e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c852:	2200      	movs	r2, #0
 800c854:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c85a:	2200      	movs	r2, #0
 800c85c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c862:	3354      	adds	r3, #84	; 0x54
 800c864:	2260      	movs	r2, #96	; 0x60
 800c866:	2100      	movs	r1, #0
 800c868:	4618      	mov	r0, r3
 800c86a:	f001 ff99 	bl	800e7a0 <memset>
 800c86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c870:	4a0c      	ldr	r2, [pc, #48]	; (800c8a4 <prvInitialiseNewTask+0x140>)
 800c872:	659a      	str	r2, [r3, #88]	; 0x58
 800c874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c876:	4a0c      	ldr	r2, [pc, #48]	; (800c8a8 <prvInitialiseNewTask+0x144>)
 800c878:	65da      	str	r2, [r3, #92]	; 0x5c
 800c87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c87c:	4a0b      	ldr	r2, [pc, #44]	; (800c8ac <prvInitialiseNewTask+0x148>)
 800c87e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c880:	683a      	ldr	r2, [r7, #0]
 800c882:	68f9      	ldr	r1, [r7, #12]
 800c884:	69b8      	ldr	r0, [r7, #24]
 800c886:	f001 f9c3 	bl	800dc10 <pxPortInitialiseStack>
 800c88a:	4602      	mov	r2, r0
 800c88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c88e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c892:	2b00      	cmp	r3, #0
 800c894:	d002      	beq.n	800c89c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c89a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c89c:	bf00      	nop
 800c89e:	3720      	adds	r7, #32
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}
 800c8a4:	0801494c 	.word	0x0801494c
 800c8a8:	0801496c 	.word	0x0801496c
 800c8ac:	0801492c 	.word	0x0801492c

0800c8b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c8b8:	f001 fad4 	bl	800de64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c8bc:	4b2d      	ldr	r3, [pc, #180]	; (800c974 <prvAddNewTaskToReadyList+0xc4>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	3301      	adds	r3, #1
 800c8c2:	4a2c      	ldr	r2, [pc, #176]	; (800c974 <prvAddNewTaskToReadyList+0xc4>)
 800c8c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c8c6:	4b2c      	ldr	r3, [pc, #176]	; (800c978 <prvAddNewTaskToReadyList+0xc8>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d109      	bne.n	800c8e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c8ce:	4a2a      	ldr	r2, [pc, #168]	; (800c978 <prvAddNewTaskToReadyList+0xc8>)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c8d4:	4b27      	ldr	r3, [pc, #156]	; (800c974 <prvAddNewTaskToReadyList+0xc4>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	2b01      	cmp	r3, #1
 800c8da:	d110      	bne.n	800c8fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c8dc:	f000 fc98 	bl	800d210 <prvInitialiseTaskLists>
 800c8e0:	e00d      	b.n	800c8fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c8e2:	4b26      	ldr	r3, [pc, #152]	; (800c97c <prvAddNewTaskToReadyList+0xcc>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d109      	bne.n	800c8fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c8ea:	4b23      	ldr	r3, [pc, #140]	; (800c978 <prvAddNewTaskToReadyList+0xc8>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d802      	bhi.n	800c8fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c8f8:	4a1f      	ldr	r2, [pc, #124]	; (800c978 <prvAddNewTaskToReadyList+0xc8>)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c8fe:	4b20      	ldr	r3, [pc, #128]	; (800c980 <prvAddNewTaskToReadyList+0xd0>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	3301      	adds	r3, #1
 800c904:	4a1e      	ldr	r2, [pc, #120]	; (800c980 <prvAddNewTaskToReadyList+0xd0>)
 800c906:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c908:	4b1d      	ldr	r3, [pc, #116]	; (800c980 <prvAddNewTaskToReadyList+0xd0>)
 800c90a:	681a      	ldr	r2, [r3, #0]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c914:	4b1b      	ldr	r3, [pc, #108]	; (800c984 <prvAddNewTaskToReadyList+0xd4>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	429a      	cmp	r2, r3
 800c91a:	d903      	bls.n	800c924 <prvAddNewTaskToReadyList+0x74>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c920:	4a18      	ldr	r2, [pc, #96]	; (800c984 <prvAddNewTaskToReadyList+0xd4>)
 800c922:	6013      	str	r3, [r2, #0]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c928:	4613      	mov	r3, r2
 800c92a:	009b      	lsls	r3, r3, #2
 800c92c:	4413      	add	r3, r2
 800c92e:	009b      	lsls	r3, r3, #2
 800c930:	4a15      	ldr	r2, [pc, #84]	; (800c988 <prvAddNewTaskToReadyList+0xd8>)
 800c932:	441a      	add	r2, r3
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	3304      	adds	r3, #4
 800c938:	4619      	mov	r1, r3
 800c93a:	4610      	mov	r0, r2
 800c93c:	f7ff f8fd 	bl	800bb3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c940:	f001 fac0 	bl	800dec4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c944:	4b0d      	ldr	r3, [pc, #52]	; (800c97c <prvAddNewTaskToReadyList+0xcc>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d00e      	beq.n	800c96a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c94c:	4b0a      	ldr	r3, [pc, #40]	; (800c978 <prvAddNewTaskToReadyList+0xc8>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c956:	429a      	cmp	r2, r3
 800c958:	d207      	bcs.n	800c96a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c95a:	4b0c      	ldr	r3, [pc, #48]	; (800c98c <prvAddNewTaskToReadyList+0xdc>)
 800c95c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c960:	601a      	str	r2, [r3, #0]
 800c962:	f3bf 8f4f 	dsb	sy
 800c966:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c96a:	bf00      	nop
 800c96c:	3708      	adds	r7, #8
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
 800c972:	bf00      	nop
 800c974:	20001198 	.word	0x20001198
 800c978:	20000cc4 	.word	0x20000cc4
 800c97c:	200011a4 	.word	0x200011a4
 800c980:	200011b4 	.word	0x200011b4
 800c984:	200011a0 	.word	0x200011a0
 800c988:	20000cc8 	.word	0x20000cc8
 800c98c:	e000ed04 	.word	0xe000ed04

0800c990 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800c990:	b580      	push	{r7, lr}
 800c992:	b084      	sub	sp, #16
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c998:	f001 fa64 	bl	800de64 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d102      	bne.n	800c9a8 <vTaskDelete+0x18>
 800c9a2:	4b2c      	ldr	r3, [pc, #176]	; (800ca54 <vTaskDelete+0xc4>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	e000      	b.n	800c9aa <vTaskDelete+0x1a>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	3304      	adds	r3, #4
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f7ff f91f 	bl	800bbf4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d004      	beq.n	800c9c8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	3318      	adds	r3, #24
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f7ff f916 	bl	800bbf4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800c9c8:	4b23      	ldr	r3, [pc, #140]	; (800ca58 <vTaskDelete+0xc8>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	3301      	adds	r3, #1
 800c9ce:	4a22      	ldr	r2, [pc, #136]	; (800ca58 <vTaskDelete+0xc8>)
 800c9d0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800c9d2:	4b20      	ldr	r3, [pc, #128]	; (800ca54 <vTaskDelete+0xc4>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	68fa      	ldr	r2, [r7, #12]
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	d10b      	bne.n	800c9f4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	3304      	adds	r3, #4
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	481e      	ldr	r0, [pc, #120]	; (800ca5c <vTaskDelete+0xcc>)
 800c9e4:	f7ff f8a9 	bl	800bb3a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800c9e8:	4b1d      	ldr	r3, [pc, #116]	; (800ca60 <vTaskDelete+0xd0>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	3301      	adds	r3, #1
 800c9ee:	4a1c      	ldr	r2, [pc, #112]	; (800ca60 <vTaskDelete+0xd0>)
 800c9f0:	6013      	str	r3, [r2, #0]
 800c9f2:	e009      	b.n	800ca08 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800c9f4:	4b1b      	ldr	r3, [pc, #108]	; (800ca64 <vTaskDelete+0xd4>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	3b01      	subs	r3, #1
 800c9fa:	4a1a      	ldr	r2, [pc, #104]	; (800ca64 <vTaskDelete+0xd4>)
 800c9fc:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800c9fe:	68f8      	ldr	r0, [r7, #12]
 800ca00:	f000 fc74 	bl	800d2ec <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800ca04:	f000 fca6 	bl	800d354 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800ca08:	f001 fa5c 	bl	800dec4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800ca0c:	4b16      	ldr	r3, [pc, #88]	; (800ca68 <vTaskDelete+0xd8>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d01b      	beq.n	800ca4c <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800ca14:	4b0f      	ldr	r3, [pc, #60]	; (800ca54 <vTaskDelete+0xc4>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	68fa      	ldr	r2, [r7, #12]
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d116      	bne.n	800ca4c <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800ca1e:	4b13      	ldr	r3, [pc, #76]	; (800ca6c <vTaskDelete+0xdc>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d00a      	beq.n	800ca3c <vTaskDelete+0xac>
	__asm volatile
 800ca26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca2a:	f383 8811 	msr	BASEPRI, r3
 800ca2e:	f3bf 8f6f 	isb	sy
 800ca32:	f3bf 8f4f 	dsb	sy
 800ca36:	60bb      	str	r3, [r7, #8]
}
 800ca38:	bf00      	nop
 800ca3a:	e7fe      	b.n	800ca3a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800ca3c:	4b0c      	ldr	r3, [pc, #48]	; (800ca70 <vTaskDelete+0xe0>)
 800ca3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca42:	601a      	str	r2, [r3, #0]
 800ca44:	f3bf 8f4f 	dsb	sy
 800ca48:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ca4c:	bf00      	nop
 800ca4e:	3710      	adds	r7, #16
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}
 800ca54:	20000cc4 	.word	0x20000cc4
 800ca58:	200011b4 	.word	0x200011b4
 800ca5c:	2000116c 	.word	0x2000116c
 800ca60:	20001180 	.word	0x20001180
 800ca64:	20001198 	.word	0x20001198
 800ca68:	200011a4 	.word	0x200011a4
 800ca6c:	200011c0 	.word	0x200011c0
 800ca70:	e000ed04 	.word	0xe000ed04

0800ca74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b084      	sub	sp, #16
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d017      	beq.n	800cab6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ca86:	4b13      	ldr	r3, [pc, #76]	; (800cad4 <vTaskDelay+0x60>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d00a      	beq.n	800caa4 <vTaskDelay+0x30>
	__asm volatile
 800ca8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca92:	f383 8811 	msr	BASEPRI, r3
 800ca96:	f3bf 8f6f 	isb	sy
 800ca9a:	f3bf 8f4f 	dsb	sy
 800ca9e:	60bb      	str	r3, [r7, #8]
}
 800caa0:	bf00      	nop
 800caa2:	e7fe      	b.n	800caa2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800caa4:	f000 f88a 	bl	800cbbc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800caa8:	2100      	movs	r1, #0
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f000 fd0e 	bl	800d4cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cab0:	f000 f892 	bl	800cbd8 <xTaskResumeAll>
 800cab4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d107      	bne.n	800cacc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cabc:	4b06      	ldr	r3, [pc, #24]	; (800cad8 <vTaskDelay+0x64>)
 800cabe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cac2:	601a      	str	r2, [r3, #0]
 800cac4:	f3bf 8f4f 	dsb	sy
 800cac8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cacc:	bf00      	nop
 800cace:	3710      	adds	r7, #16
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}
 800cad4:	200011c0 	.word	0x200011c0
 800cad8:	e000ed04 	.word	0xe000ed04

0800cadc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b08a      	sub	sp, #40	; 0x28
 800cae0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cae2:	2300      	movs	r3, #0
 800cae4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cae6:	2300      	movs	r3, #0
 800cae8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800caea:	463a      	mov	r2, r7
 800caec:	1d39      	adds	r1, r7, #4
 800caee:	f107 0308 	add.w	r3, r7, #8
 800caf2:	4618      	mov	r0, r3
 800caf4:	f7fe ffc0 	bl	800ba78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800caf8:	6839      	ldr	r1, [r7, #0]
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	68ba      	ldr	r2, [r7, #8]
 800cafe:	9202      	str	r2, [sp, #8]
 800cb00:	9301      	str	r3, [sp, #4]
 800cb02:	2300      	movs	r3, #0
 800cb04:	9300      	str	r3, [sp, #0]
 800cb06:	2300      	movs	r3, #0
 800cb08:	460a      	mov	r2, r1
 800cb0a:	4924      	ldr	r1, [pc, #144]	; (800cb9c <vTaskStartScheduler+0xc0>)
 800cb0c:	4824      	ldr	r0, [pc, #144]	; (800cba0 <vTaskStartScheduler+0xc4>)
 800cb0e:	f7ff fd87 	bl	800c620 <xTaskCreateStatic>
 800cb12:	4603      	mov	r3, r0
 800cb14:	4a23      	ldr	r2, [pc, #140]	; (800cba4 <vTaskStartScheduler+0xc8>)
 800cb16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cb18:	4b22      	ldr	r3, [pc, #136]	; (800cba4 <vTaskStartScheduler+0xc8>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d002      	beq.n	800cb26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cb20:	2301      	movs	r3, #1
 800cb22:	617b      	str	r3, [r7, #20]
 800cb24:	e001      	b.n	800cb2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cb26:	2300      	movs	r3, #0
 800cb28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	2b01      	cmp	r3, #1
 800cb2e:	d102      	bne.n	800cb36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cb30:	f000 fd20 	bl	800d574 <xTimerCreateTimerTask>
 800cb34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	2b01      	cmp	r3, #1
 800cb3a:	d11b      	bne.n	800cb74 <vTaskStartScheduler+0x98>
	__asm volatile
 800cb3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb40:	f383 8811 	msr	BASEPRI, r3
 800cb44:	f3bf 8f6f 	isb	sy
 800cb48:	f3bf 8f4f 	dsb	sy
 800cb4c:	613b      	str	r3, [r7, #16]
}
 800cb4e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cb50:	4b15      	ldr	r3, [pc, #84]	; (800cba8 <vTaskStartScheduler+0xcc>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	3354      	adds	r3, #84	; 0x54
 800cb56:	4a15      	ldr	r2, [pc, #84]	; (800cbac <vTaskStartScheduler+0xd0>)
 800cb58:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cb5a:	4b15      	ldr	r3, [pc, #84]	; (800cbb0 <vTaskStartScheduler+0xd4>)
 800cb5c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cb62:	4b14      	ldr	r3, [pc, #80]	; (800cbb4 <vTaskStartScheduler+0xd8>)
 800cb64:	2201      	movs	r2, #1
 800cb66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cb68:	4b13      	ldr	r3, [pc, #76]	; (800cbb8 <vTaskStartScheduler+0xdc>)
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cb6e:	f001 f8d7 	bl	800dd20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cb72:	e00e      	b.n	800cb92 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb7a:	d10a      	bne.n	800cb92 <vTaskStartScheduler+0xb6>
	__asm volatile
 800cb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb80:	f383 8811 	msr	BASEPRI, r3
 800cb84:	f3bf 8f6f 	isb	sy
 800cb88:	f3bf 8f4f 	dsb	sy
 800cb8c:	60fb      	str	r3, [r7, #12]
}
 800cb8e:	bf00      	nop
 800cb90:	e7fe      	b.n	800cb90 <vTaskStartScheduler+0xb4>
}
 800cb92:	bf00      	nop
 800cb94:	3718      	adds	r7, #24
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	080146c4 	.word	0x080146c4
 800cba0:	0800d1e1 	.word	0x0800d1e1
 800cba4:	200011bc 	.word	0x200011bc
 800cba8:	20000cc4 	.word	0x20000cc4
 800cbac:	20000088 	.word	0x20000088
 800cbb0:	200011b8 	.word	0x200011b8
 800cbb4:	200011a4 	.word	0x200011a4
 800cbb8:	2000119c 	.word	0x2000119c

0800cbbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cbc0:	4b04      	ldr	r3, [pc, #16]	; (800cbd4 <vTaskSuspendAll+0x18>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	3301      	adds	r3, #1
 800cbc6:	4a03      	ldr	r2, [pc, #12]	; (800cbd4 <vTaskSuspendAll+0x18>)
 800cbc8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cbca:	bf00      	nop
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd2:	4770      	bx	lr
 800cbd4:	200011c0 	.word	0x200011c0

0800cbd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b084      	sub	sp, #16
 800cbdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cbe6:	4b42      	ldr	r3, [pc, #264]	; (800ccf0 <xTaskResumeAll+0x118>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d10a      	bne.n	800cc04 <xTaskResumeAll+0x2c>
	__asm volatile
 800cbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf2:	f383 8811 	msr	BASEPRI, r3
 800cbf6:	f3bf 8f6f 	isb	sy
 800cbfa:	f3bf 8f4f 	dsb	sy
 800cbfe:	603b      	str	r3, [r7, #0]
}
 800cc00:	bf00      	nop
 800cc02:	e7fe      	b.n	800cc02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cc04:	f001 f92e 	bl	800de64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cc08:	4b39      	ldr	r3, [pc, #228]	; (800ccf0 <xTaskResumeAll+0x118>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	3b01      	subs	r3, #1
 800cc0e:	4a38      	ldr	r2, [pc, #224]	; (800ccf0 <xTaskResumeAll+0x118>)
 800cc10:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc12:	4b37      	ldr	r3, [pc, #220]	; (800ccf0 <xTaskResumeAll+0x118>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d162      	bne.n	800cce0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cc1a:	4b36      	ldr	r3, [pc, #216]	; (800ccf4 <xTaskResumeAll+0x11c>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d05e      	beq.n	800cce0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cc22:	e02f      	b.n	800cc84 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc24:	4b34      	ldr	r3, [pc, #208]	; (800ccf8 <xTaskResumeAll+0x120>)
 800cc26:	68db      	ldr	r3, [r3, #12]
 800cc28:	68db      	ldr	r3, [r3, #12]
 800cc2a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	3318      	adds	r3, #24
 800cc30:	4618      	mov	r0, r3
 800cc32:	f7fe ffdf 	bl	800bbf4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	3304      	adds	r3, #4
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f7fe ffda 	bl	800bbf4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc44:	4b2d      	ldr	r3, [pc, #180]	; (800ccfc <xTaskResumeAll+0x124>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d903      	bls.n	800cc54 <xTaskResumeAll+0x7c>
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc50:	4a2a      	ldr	r2, [pc, #168]	; (800ccfc <xTaskResumeAll+0x124>)
 800cc52:	6013      	str	r3, [r2, #0]
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc58:	4613      	mov	r3, r2
 800cc5a:	009b      	lsls	r3, r3, #2
 800cc5c:	4413      	add	r3, r2
 800cc5e:	009b      	lsls	r3, r3, #2
 800cc60:	4a27      	ldr	r2, [pc, #156]	; (800cd00 <xTaskResumeAll+0x128>)
 800cc62:	441a      	add	r2, r3
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	3304      	adds	r3, #4
 800cc68:	4619      	mov	r1, r3
 800cc6a:	4610      	mov	r0, r2
 800cc6c:	f7fe ff65 	bl	800bb3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc74:	4b23      	ldr	r3, [pc, #140]	; (800cd04 <xTaskResumeAll+0x12c>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d302      	bcc.n	800cc84 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cc7e:	4b22      	ldr	r3, [pc, #136]	; (800cd08 <xTaskResumeAll+0x130>)
 800cc80:	2201      	movs	r2, #1
 800cc82:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cc84:	4b1c      	ldr	r3, [pc, #112]	; (800ccf8 <xTaskResumeAll+0x120>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d1cb      	bne.n	800cc24 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d001      	beq.n	800cc96 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cc92:	f000 fb5f 	bl	800d354 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cc96:	4b1d      	ldr	r3, [pc, #116]	; (800cd0c <xTaskResumeAll+0x134>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d010      	beq.n	800ccc4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cca2:	f000 f847 	bl	800cd34 <xTaskIncrementTick>
 800cca6:	4603      	mov	r3, r0
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d002      	beq.n	800ccb2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ccac:	4b16      	ldr	r3, [pc, #88]	; (800cd08 <xTaskResumeAll+0x130>)
 800ccae:	2201      	movs	r2, #1
 800ccb0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	3b01      	subs	r3, #1
 800ccb6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d1f1      	bne.n	800cca2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ccbe:	4b13      	ldr	r3, [pc, #76]	; (800cd0c <xTaskResumeAll+0x134>)
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ccc4:	4b10      	ldr	r3, [pc, #64]	; (800cd08 <xTaskResumeAll+0x130>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d009      	beq.n	800cce0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cccc:	2301      	movs	r3, #1
 800ccce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ccd0:	4b0f      	ldr	r3, [pc, #60]	; (800cd10 <xTaskResumeAll+0x138>)
 800ccd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccd6:	601a      	str	r2, [r3, #0]
 800ccd8:	f3bf 8f4f 	dsb	sy
 800ccdc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cce0:	f001 f8f0 	bl	800dec4 <vPortExitCritical>

	return xAlreadyYielded;
 800cce4:	68bb      	ldr	r3, [r7, #8]
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	3710      	adds	r7, #16
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}
 800ccee:	bf00      	nop
 800ccf0:	200011c0 	.word	0x200011c0
 800ccf4:	20001198 	.word	0x20001198
 800ccf8:	20001158 	.word	0x20001158
 800ccfc:	200011a0 	.word	0x200011a0
 800cd00:	20000cc8 	.word	0x20000cc8
 800cd04:	20000cc4 	.word	0x20000cc4
 800cd08:	200011ac 	.word	0x200011ac
 800cd0c:	200011a8 	.word	0x200011a8
 800cd10:	e000ed04 	.word	0xe000ed04

0800cd14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cd14:	b480      	push	{r7}
 800cd16:	b083      	sub	sp, #12
 800cd18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cd1a:	4b05      	ldr	r3, [pc, #20]	; (800cd30 <xTaskGetTickCount+0x1c>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cd20:	687b      	ldr	r3, [r7, #4]
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	370c      	adds	r7, #12
 800cd26:	46bd      	mov	sp, r7
 800cd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2c:	4770      	bx	lr
 800cd2e:	bf00      	nop
 800cd30:	2000119c 	.word	0x2000119c

0800cd34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b086      	sub	sp, #24
 800cd38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd3e:	4b4f      	ldr	r3, [pc, #316]	; (800ce7c <xTaskIncrementTick+0x148>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	f040 808f 	bne.w	800ce66 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cd48:	4b4d      	ldr	r3, [pc, #308]	; (800ce80 <xTaskIncrementTick+0x14c>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	3301      	adds	r3, #1
 800cd4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cd50:	4a4b      	ldr	r2, [pc, #300]	; (800ce80 <xTaskIncrementTick+0x14c>)
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cd56:	693b      	ldr	r3, [r7, #16]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d120      	bne.n	800cd9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cd5c:	4b49      	ldr	r3, [pc, #292]	; (800ce84 <xTaskIncrementTick+0x150>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d00a      	beq.n	800cd7c <xTaskIncrementTick+0x48>
	__asm volatile
 800cd66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6a:	f383 8811 	msr	BASEPRI, r3
 800cd6e:	f3bf 8f6f 	isb	sy
 800cd72:	f3bf 8f4f 	dsb	sy
 800cd76:	603b      	str	r3, [r7, #0]
}
 800cd78:	bf00      	nop
 800cd7a:	e7fe      	b.n	800cd7a <xTaskIncrementTick+0x46>
 800cd7c:	4b41      	ldr	r3, [pc, #260]	; (800ce84 <xTaskIncrementTick+0x150>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	60fb      	str	r3, [r7, #12]
 800cd82:	4b41      	ldr	r3, [pc, #260]	; (800ce88 <xTaskIncrementTick+0x154>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	4a3f      	ldr	r2, [pc, #252]	; (800ce84 <xTaskIncrementTick+0x150>)
 800cd88:	6013      	str	r3, [r2, #0]
 800cd8a:	4a3f      	ldr	r2, [pc, #252]	; (800ce88 <xTaskIncrementTick+0x154>)
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	6013      	str	r3, [r2, #0]
 800cd90:	4b3e      	ldr	r3, [pc, #248]	; (800ce8c <xTaskIncrementTick+0x158>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	3301      	adds	r3, #1
 800cd96:	4a3d      	ldr	r2, [pc, #244]	; (800ce8c <xTaskIncrementTick+0x158>)
 800cd98:	6013      	str	r3, [r2, #0]
 800cd9a:	f000 fadb 	bl	800d354 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cd9e:	4b3c      	ldr	r3, [pc, #240]	; (800ce90 <xTaskIncrementTick+0x15c>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	693a      	ldr	r2, [r7, #16]
 800cda4:	429a      	cmp	r2, r3
 800cda6:	d349      	bcc.n	800ce3c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cda8:	4b36      	ldr	r3, [pc, #216]	; (800ce84 <xTaskIncrementTick+0x150>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d104      	bne.n	800cdbc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdb2:	4b37      	ldr	r3, [pc, #220]	; (800ce90 <xTaskIncrementTick+0x15c>)
 800cdb4:	f04f 32ff 	mov.w	r2, #4294967295
 800cdb8:	601a      	str	r2, [r3, #0]
					break;
 800cdba:	e03f      	b.n	800ce3c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdbc:	4b31      	ldr	r3, [pc, #196]	; (800ce84 <xTaskIncrementTick+0x150>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	68db      	ldr	r3, [r3, #12]
 800cdc2:	68db      	ldr	r3, [r3, #12]
 800cdc4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	685b      	ldr	r3, [r3, #4]
 800cdca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cdcc:	693a      	ldr	r2, [r7, #16]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d203      	bcs.n	800cddc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cdd4:	4a2e      	ldr	r2, [pc, #184]	; (800ce90 <xTaskIncrementTick+0x15c>)
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cdda:	e02f      	b.n	800ce3c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	3304      	adds	r3, #4
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7fe ff07 	bl	800bbf4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d004      	beq.n	800cdf8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	3318      	adds	r3, #24
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f7fe fefe 	bl	800bbf4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdfc:	4b25      	ldr	r3, [pc, #148]	; (800ce94 <xTaskIncrementTick+0x160>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d903      	bls.n	800ce0c <xTaskIncrementTick+0xd8>
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce08:	4a22      	ldr	r2, [pc, #136]	; (800ce94 <xTaskIncrementTick+0x160>)
 800ce0a:	6013      	str	r3, [r2, #0]
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce10:	4613      	mov	r3, r2
 800ce12:	009b      	lsls	r3, r3, #2
 800ce14:	4413      	add	r3, r2
 800ce16:	009b      	lsls	r3, r3, #2
 800ce18:	4a1f      	ldr	r2, [pc, #124]	; (800ce98 <xTaskIncrementTick+0x164>)
 800ce1a:	441a      	add	r2, r3
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	3304      	adds	r3, #4
 800ce20:	4619      	mov	r1, r3
 800ce22:	4610      	mov	r0, r2
 800ce24:	f7fe fe89 	bl	800bb3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce2c:	4b1b      	ldr	r3, [pc, #108]	; (800ce9c <xTaskIncrementTick+0x168>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d3b8      	bcc.n	800cda8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ce36:	2301      	movs	r3, #1
 800ce38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce3a:	e7b5      	b.n	800cda8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ce3c:	4b17      	ldr	r3, [pc, #92]	; (800ce9c <xTaskIncrementTick+0x168>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce42:	4915      	ldr	r1, [pc, #84]	; (800ce98 <xTaskIncrementTick+0x164>)
 800ce44:	4613      	mov	r3, r2
 800ce46:	009b      	lsls	r3, r3, #2
 800ce48:	4413      	add	r3, r2
 800ce4a:	009b      	lsls	r3, r3, #2
 800ce4c:	440b      	add	r3, r1
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	2b01      	cmp	r3, #1
 800ce52:	d901      	bls.n	800ce58 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ce54:	2301      	movs	r3, #1
 800ce56:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ce58:	4b11      	ldr	r3, [pc, #68]	; (800cea0 <xTaskIncrementTick+0x16c>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d007      	beq.n	800ce70 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ce60:	2301      	movs	r3, #1
 800ce62:	617b      	str	r3, [r7, #20]
 800ce64:	e004      	b.n	800ce70 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ce66:	4b0f      	ldr	r3, [pc, #60]	; (800cea4 <xTaskIncrementTick+0x170>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	4a0d      	ldr	r2, [pc, #52]	; (800cea4 <xTaskIncrementTick+0x170>)
 800ce6e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ce70:	697b      	ldr	r3, [r7, #20]
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	3718      	adds	r7, #24
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
 800ce7a:	bf00      	nop
 800ce7c:	200011c0 	.word	0x200011c0
 800ce80:	2000119c 	.word	0x2000119c
 800ce84:	20001150 	.word	0x20001150
 800ce88:	20001154 	.word	0x20001154
 800ce8c:	200011b0 	.word	0x200011b0
 800ce90:	200011b8 	.word	0x200011b8
 800ce94:	200011a0 	.word	0x200011a0
 800ce98:	20000cc8 	.word	0x20000cc8
 800ce9c:	20000cc4 	.word	0x20000cc4
 800cea0:	200011ac 	.word	0x200011ac
 800cea4:	200011a8 	.word	0x200011a8

0800cea8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cea8:	b480      	push	{r7}
 800ceaa:	b085      	sub	sp, #20
 800ceac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ceae:	4b2a      	ldr	r3, [pc, #168]	; (800cf58 <vTaskSwitchContext+0xb0>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d003      	beq.n	800cebe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ceb6:	4b29      	ldr	r3, [pc, #164]	; (800cf5c <vTaskSwitchContext+0xb4>)
 800ceb8:	2201      	movs	r2, #1
 800ceba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cebc:	e046      	b.n	800cf4c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800cebe:	4b27      	ldr	r3, [pc, #156]	; (800cf5c <vTaskSwitchContext+0xb4>)
 800cec0:	2200      	movs	r2, #0
 800cec2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cec4:	4b26      	ldr	r3, [pc, #152]	; (800cf60 <vTaskSwitchContext+0xb8>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	60fb      	str	r3, [r7, #12]
 800ceca:	e010      	b.n	800ceee <vTaskSwitchContext+0x46>
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d10a      	bne.n	800cee8 <vTaskSwitchContext+0x40>
	__asm volatile
 800ced2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced6:	f383 8811 	msr	BASEPRI, r3
 800ceda:	f3bf 8f6f 	isb	sy
 800cede:	f3bf 8f4f 	dsb	sy
 800cee2:	607b      	str	r3, [r7, #4]
}
 800cee4:	bf00      	nop
 800cee6:	e7fe      	b.n	800cee6 <vTaskSwitchContext+0x3e>
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	3b01      	subs	r3, #1
 800ceec:	60fb      	str	r3, [r7, #12]
 800ceee:	491d      	ldr	r1, [pc, #116]	; (800cf64 <vTaskSwitchContext+0xbc>)
 800cef0:	68fa      	ldr	r2, [r7, #12]
 800cef2:	4613      	mov	r3, r2
 800cef4:	009b      	lsls	r3, r3, #2
 800cef6:	4413      	add	r3, r2
 800cef8:	009b      	lsls	r3, r3, #2
 800cefa:	440b      	add	r3, r1
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d0e4      	beq.n	800cecc <vTaskSwitchContext+0x24>
 800cf02:	68fa      	ldr	r2, [r7, #12]
 800cf04:	4613      	mov	r3, r2
 800cf06:	009b      	lsls	r3, r3, #2
 800cf08:	4413      	add	r3, r2
 800cf0a:	009b      	lsls	r3, r3, #2
 800cf0c:	4a15      	ldr	r2, [pc, #84]	; (800cf64 <vTaskSwitchContext+0xbc>)
 800cf0e:	4413      	add	r3, r2
 800cf10:	60bb      	str	r3, [r7, #8]
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	685b      	ldr	r3, [r3, #4]
 800cf16:	685a      	ldr	r2, [r3, #4]
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	605a      	str	r2, [r3, #4]
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	685a      	ldr	r2, [r3, #4]
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	3308      	adds	r3, #8
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d104      	bne.n	800cf32 <vTaskSwitchContext+0x8a>
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	685a      	ldr	r2, [r3, #4]
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	605a      	str	r2, [r3, #4]
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	685b      	ldr	r3, [r3, #4]
 800cf36:	68db      	ldr	r3, [r3, #12]
 800cf38:	4a0b      	ldr	r2, [pc, #44]	; (800cf68 <vTaskSwitchContext+0xc0>)
 800cf3a:	6013      	str	r3, [r2, #0]
 800cf3c:	4a08      	ldr	r2, [pc, #32]	; (800cf60 <vTaskSwitchContext+0xb8>)
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cf42:	4b09      	ldr	r3, [pc, #36]	; (800cf68 <vTaskSwitchContext+0xc0>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	3354      	adds	r3, #84	; 0x54
 800cf48:	4a08      	ldr	r2, [pc, #32]	; (800cf6c <vTaskSwitchContext+0xc4>)
 800cf4a:	6013      	str	r3, [r2, #0]
}
 800cf4c:	bf00      	nop
 800cf4e:	3714      	adds	r7, #20
 800cf50:	46bd      	mov	sp, r7
 800cf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf56:	4770      	bx	lr
 800cf58:	200011c0 	.word	0x200011c0
 800cf5c:	200011ac 	.word	0x200011ac
 800cf60:	200011a0 	.word	0x200011a0
 800cf64:	20000cc8 	.word	0x20000cc8
 800cf68:	20000cc4 	.word	0x20000cc4
 800cf6c:	20000088 	.word	0x20000088

0800cf70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b084      	sub	sp, #16
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d10a      	bne.n	800cf96 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cf80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf84:	f383 8811 	msr	BASEPRI, r3
 800cf88:	f3bf 8f6f 	isb	sy
 800cf8c:	f3bf 8f4f 	dsb	sy
 800cf90:	60fb      	str	r3, [r7, #12]
}
 800cf92:	bf00      	nop
 800cf94:	e7fe      	b.n	800cf94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cf96:	4b07      	ldr	r3, [pc, #28]	; (800cfb4 <vTaskPlaceOnEventList+0x44>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	3318      	adds	r3, #24
 800cf9c:	4619      	mov	r1, r3
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f7fe fdef 	bl	800bb82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cfa4:	2101      	movs	r1, #1
 800cfa6:	6838      	ldr	r0, [r7, #0]
 800cfa8:	f000 fa90 	bl	800d4cc <prvAddCurrentTaskToDelayedList>
}
 800cfac:	bf00      	nop
 800cfae:	3710      	adds	r7, #16
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}
 800cfb4:	20000cc4 	.word	0x20000cc4

0800cfb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b086      	sub	sp, #24
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	60f8      	str	r0, [r7, #12]
 800cfc0:	60b9      	str	r1, [r7, #8]
 800cfc2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d10a      	bne.n	800cfe0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800cfca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfce:	f383 8811 	msr	BASEPRI, r3
 800cfd2:	f3bf 8f6f 	isb	sy
 800cfd6:	f3bf 8f4f 	dsb	sy
 800cfda:	617b      	str	r3, [r7, #20]
}
 800cfdc:	bf00      	nop
 800cfde:	e7fe      	b.n	800cfde <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cfe0:	4b0a      	ldr	r3, [pc, #40]	; (800d00c <vTaskPlaceOnEventListRestricted+0x54>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	3318      	adds	r3, #24
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	68f8      	ldr	r0, [r7, #12]
 800cfea:	f7fe fda6 	bl	800bb3a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d002      	beq.n	800cffa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cff4:	f04f 33ff 	mov.w	r3, #4294967295
 800cff8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cffa:	6879      	ldr	r1, [r7, #4]
 800cffc:	68b8      	ldr	r0, [r7, #8]
 800cffe:	f000 fa65 	bl	800d4cc <prvAddCurrentTaskToDelayedList>
	}
 800d002:	bf00      	nop
 800d004:	3718      	adds	r7, #24
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}
 800d00a:	bf00      	nop
 800d00c:	20000cc4 	.word	0x20000cc4

0800d010 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b086      	sub	sp, #24
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	68db      	ldr	r3, [r3, #12]
 800d01c:	68db      	ldr	r3, [r3, #12]
 800d01e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d020:	693b      	ldr	r3, [r7, #16]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d10a      	bne.n	800d03c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d02a:	f383 8811 	msr	BASEPRI, r3
 800d02e:	f3bf 8f6f 	isb	sy
 800d032:	f3bf 8f4f 	dsb	sy
 800d036:	60fb      	str	r3, [r7, #12]
}
 800d038:	bf00      	nop
 800d03a:	e7fe      	b.n	800d03a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	3318      	adds	r3, #24
 800d040:	4618      	mov	r0, r3
 800d042:	f7fe fdd7 	bl	800bbf4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d046:	4b1e      	ldr	r3, [pc, #120]	; (800d0c0 <xTaskRemoveFromEventList+0xb0>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d11d      	bne.n	800d08a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	3304      	adds	r3, #4
 800d052:	4618      	mov	r0, r3
 800d054:	f7fe fdce 	bl	800bbf4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d05c:	4b19      	ldr	r3, [pc, #100]	; (800d0c4 <xTaskRemoveFromEventList+0xb4>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	429a      	cmp	r2, r3
 800d062:	d903      	bls.n	800d06c <xTaskRemoveFromEventList+0x5c>
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d068:	4a16      	ldr	r2, [pc, #88]	; (800d0c4 <xTaskRemoveFromEventList+0xb4>)
 800d06a:	6013      	str	r3, [r2, #0]
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d070:	4613      	mov	r3, r2
 800d072:	009b      	lsls	r3, r3, #2
 800d074:	4413      	add	r3, r2
 800d076:	009b      	lsls	r3, r3, #2
 800d078:	4a13      	ldr	r2, [pc, #76]	; (800d0c8 <xTaskRemoveFromEventList+0xb8>)
 800d07a:	441a      	add	r2, r3
 800d07c:	693b      	ldr	r3, [r7, #16]
 800d07e:	3304      	adds	r3, #4
 800d080:	4619      	mov	r1, r3
 800d082:	4610      	mov	r0, r2
 800d084:	f7fe fd59 	bl	800bb3a <vListInsertEnd>
 800d088:	e005      	b.n	800d096 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	3318      	adds	r3, #24
 800d08e:	4619      	mov	r1, r3
 800d090:	480e      	ldr	r0, [pc, #56]	; (800d0cc <xTaskRemoveFromEventList+0xbc>)
 800d092:	f7fe fd52 	bl	800bb3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d096:	693b      	ldr	r3, [r7, #16]
 800d098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d09a:	4b0d      	ldr	r3, [pc, #52]	; (800d0d0 <xTaskRemoveFromEventList+0xc0>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d905      	bls.n	800d0b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d0a8:	4b0a      	ldr	r3, [pc, #40]	; (800d0d4 <xTaskRemoveFromEventList+0xc4>)
 800d0aa:	2201      	movs	r2, #1
 800d0ac:	601a      	str	r2, [r3, #0]
 800d0ae:	e001      	b.n	800d0b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d0b4:	697b      	ldr	r3, [r7, #20]
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3718      	adds	r7, #24
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}
 800d0be:	bf00      	nop
 800d0c0:	200011c0 	.word	0x200011c0
 800d0c4:	200011a0 	.word	0x200011a0
 800d0c8:	20000cc8 	.word	0x20000cc8
 800d0cc:	20001158 	.word	0x20001158
 800d0d0:	20000cc4 	.word	0x20000cc4
 800d0d4:	200011ac 	.word	0x200011ac

0800d0d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b083      	sub	sp, #12
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d0e0:	4b06      	ldr	r3, [pc, #24]	; (800d0fc <vTaskInternalSetTimeOutState+0x24>)
 800d0e2:	681a      	ldr	r2, [r3, #0]
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d0e8:	4b05      	ldr	r3, [pc, #20]	; (800d100 <vTaskInternalSetTimeOutState+0x28>)
 800d0ea:	681a      	ldr	r2, [r3, #0]
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	605a      	str	r2, [r3, #4]
}
 800d0f0:	bf00      	nop
 800d0f2:	370c      	adds	r7, #12
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fa:	4770      	bx	lr
 800d0fc:	200011b0 	.word	0x200011b0
 800d100:	2000119c 	.word	0x2000119c

0800d104 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b088      	sub	sp, #32
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
 800d10c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d10a      	bne.n	800d12a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d118:	f383 8811 	msr	BASEPRI, r3
 800d11c:	f3bf 8f6f 	isb	sy
 800d120:	f3bf 8f4f 	dsb	sy
 800d124:	613b      	str	r3, [r7, #16]
}
 800d126:	bf00      	nop
 800d128:	e7fe      	b.n	800d128 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d10a      	bne.n	800d146 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d134:	f383 8811 	msr	BASEPRI, r3
 800d138:	f3bf 8f6f 	isb	sy
 800d13c:	f3bf 8f4f 	dsb	sy
 800d140:	60fb      	str	r3, [r7, #12]
}
 800d142:	bf00      	nop
 800d144:	e7fe      	b.n	800d144 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d146:	f000 fe8d 	bl	800de64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d14a:	4b1d      	ldr	r3, [pc, #116]	; (800d1c0 <xTaskCheckForTimeOut+0xbc>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	685b      	ldr	r3, [r3, #4]
 800d154:	69ba      	ldr	r2, [r7, #24]
 800d156:	1ad3      	subs	r3, r2, r3
 800d158:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d162:	d102      	bne.n	800d16a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d164:	2300      	movs	r3, #0
 800d166:	61fb      	str	r3, [r7, #28]
 800d168:	e023      	b.n	800d1b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681a      	ldr	r2, [r3, #0]
 800d16e:	4b15      	ldr	r3, [pc, #84]	; (800d1c4 <xTaskCheckForTimeOut+0xc0>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	429a      	cmp	r2, r3
 800d174:	d007      	beq.n	800d186 <xTaskCheckForTimeOut+0x82>
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	685b      	ldr	r3, [r3, #4]
 800d17a:	69ba      	ldr	r2, [r7, #24]
 800d17c:	429a      	cmp	r2, r3
 800d17e:	d302      	bcc.n	800d186 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d180:	2301      	movs	r3, #1
 800d182:	61fb      	str	r3, [r7, #28]
 800d184:	e015      	b.n	800d1b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	697a      	ldr	r2, [r7, #20]
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d20b      	bcs.n	800d1a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	681a      	ldr	r2, [r3, #0]
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	1ad2      	subs	r2, r2, r3
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f7ff ff9b 	bl	800d0d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	61fb      	str	r3, [r7, #28]
 800d1a6:	e004      	b.n	800d1b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d1b2:	f000 fe87 	bl	800dec4 <vPortExitCritical>

	return xReturn;
 800d1b6:	69fb      	ldr	r3, [r7, #28]
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3720      	adds	r7, #32
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}
 800d1c0:	2000119c 	.word	0x2000119c
 800d1c4:	200011b0 	.word	0x200011b0

0800d1c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d1cc:	4b03      	ldr	r3, [pc, #12]	; (800d1dc <vTaskMissedYield+0x14>)
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	601a      	str	r2, [r3, #0]
}
 800d1d2:	bf00      	nop
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr
 800d1dc:	200011ac 	.word	0x200011ac

0800d1e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b082      	sub	sp, #8
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d1e8:	f000 f852 	bl	800d290 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d1ec:	4b06      	ldr	r3, [pc, #24]	; (800d208 <prvIdleTask+0x28>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	2b01      	cmp	r3, #1
 800d1f2:	d9f9      	bls.n	800d1e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d1f4:	4b05      	ldr	r3, [pc, #20]	; (800d20c <prvIdleTask+0x2c>)
 800d1f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1fa:	601a      	str	r2, [r3, #0]
 800d1fc:	f3bf 8f4f 	dsb	sy
 800d200:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d204:	e7f0      	b.n	800d1e8 <prvIdleTask+0x8>
 800d206:	bf00      	nop
 800d208:	20000cc8 	.word	0x20000cc8
 800d20c:	e000ed04 	.word	0xe000ed04

0800d210 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b082      	sub	sp, #8
 800d214:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d216:	2300      	movs	r3, #0
 800d218:	607b      	str	r3, [r7, #4]
 800d21a:	e00c      	b.n	800d236 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d21c:	687a      	ldr	r2, [r7, #4]
 800d21e:	4613      	mov	r3, r2
 800d220:	009b      	lsls	r3, r3, #2
 800d222:	4413      	add	r3, r2
 800d224:	009b      	lsls	r3, r3, #2
 800d226:	4a12      	ldr	r2, [pc, #72]	; (800d270 <prvInitialiseTaskLists+0x60>)
 800d228:	4413      	add	r3, r2
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7fe fc58 	bl	800bae0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	3301      	adds	r3, #1
 800d234:	607b      	str	r3, [r7, #4]
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2b37      	cmp	r3, #55	; 0x37
 800d23a:	d9ef      	bls.n	800d21c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d23c:	480d      	ldr	r0, [pc, #52]	; (800d274 <prvInitialiseTaskLists+0x64>)
 800d23e:	f7fe fc4f 	bl	800bae0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d242:	480d      	ldr	r0, [pc, #52]	; (800d278 <prvInitialiseTaskLists+0x68>)
 800d244:	f7fe fc4c 	bl	800bae0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d248:	480c      	ldr	r0, [pc, #48]	; (800d27c <prvInitialiseTaskLists+0x6c>)
 800d24a:	f7fe fc49 	bl	800bae0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d24e:	480c      	ldr	r0, [pc, #48]	; (800d280 <prvInitialiseTaskLists+0x70>)
 800d250:	f7fe fc46 	bl	800bae0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d254:	480b      	ldr	r0, [pc, #44]	; (800d284 <prvInitialiseTaskLists+0x74>)
 800d256:	f7fe fc43 	bl	800bae0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d25a:	4b0b      	ldr	r3, [pc, #44]	; (800d288 <prvInitialiseTaskLists+0x78>)
 800d25c:	4a05      	ldr	r2, [pc, #20]	; (800d274 <prvInitialiseTaskLists+0x64>)
 800d25e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d260:	4b0a      	ldr	r3, [pc, #40]	; (800d28c <prvInitialiseTaskLists+0x7c>)
 800d262:	4a05      	ldr	r2, [pc, #20]	; (800d278 <prvInitialiseTaskLists+0x68>)
 800d264:	601a      	str	r2, [r3, #0]
}
 800d266:	bf00      	nop
 800d268:	3708      	adds	r7, #8
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
 800d26e:	bf00      	nop
 800d270:	20000cc8 	.word	0x20000cc8
 800d274:	20001128 	.word	0x20001128
 800d278:	2000113c 	.word	0x2000113c
 800d27c:	20001158 	.word	0x20001158
 800d280:	2000116c 	.word	0x2000116c
 800d284:	20001184 	.word	0x20001184
 800d288:	20001150 	.word	0x20001150
 800d28c:	20001154 	.word	0x20001154

0800d290 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b082      	sub	sp, #8
 800d294:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d296:	e019      	b.n	800d2cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d298:	f000 fde4 	bl	800de64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d29c:	4b10      	ldr	r3, [pc, #64]	; (800d2e0 <prvCheckTasksWaitingTermination+0x50>)
 800d29e:	68db      	ldr	r3, [r3, #12]
 800d2a0:	68db      	ldr	r3, [r3, #12]
 800d2a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	3304      	adds	r3, #4
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f7fe fca3 	bl	800bbf4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d2ae:	4b0d      	ldr	r3, [pc, #52]	; (800d2e4 <prvCheckTasksWaitingTermination+0x54>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	3b01      	subs	r3, #1
 800d2b4:	4a0b      	ldr	r2, [pc, #44]	; (800d2e4 <prvCheckTasksWaitingTermination+0x54>)
 800d2b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d2b8:	4b0b      	ldr	r3, [pc, #44]	; (800d2e8 <prvCheckTasksWaitingTermination+0x58>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	3b01      	subs	r3, #1
 800d2be:	4a0a      	ldr	r2, [pc, #40]	; (800d2e8 <prvCheckTasksWaitingTermination+0x58>)
 800d2c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d2c2:	f000 fdff 	bl	800dec4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f000 f810 	bl	800d2ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d2cc:	4b06      	ldr	r3, [pc, #24]	; (800d2e8 <prvCheckTasksWaitingTermination+0x58>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d1e1      	bne.n	800d298 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d2d4:	bf00      	nop
 800d2d6:	bf00      	nop
 800d2d8:	3708      	adds	r7, #8
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}
 800d2de:	bf00      	nop
 800d2e0:	2000116c 	.word	0x2000116c
 800d2e4:	20001198 	.word	0x20001198
 800d2e8:	20001180 	.word	0x20001180

0800d2ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b084      	sub	sp, #16
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	3354      	adds	r3, #84	; 0x54
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f002 fa19 	bl	800f730 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d304:	2b00      	cmp	r3, #0
 800d306:	d108      	bne.n	800d31a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d30c:	4618      	mov	r0, r3
 800d30e:	f000 ff97 	bl	800e240 <vPortFree>
				vPortFree( pxTCB );
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f000 ff94 	bl	800e240 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d318:	e018      	b.n	800d34c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d320:	2b01      	cmp	r3, #1
 800d322:	d103      	bne.n	800d32c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f000 ff8b 	bl	800e240 <vPortFree>
	}
 800d32a:	e00f      	b.n	800d34c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d332:	2b02      	cmp	r3, #2
 800d334:	d00a      	beq.n	800d34c <prvDeleteTCB+0x60>
	__asm volatile
 800d336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d33a:	f383 8811 	msr	BASEPRI, r3
 800d33e:	f3bf 8f6f 	isb	sy
 800d342:	f3bf 8f4f 	dsb	sy
 800d346:	60fb      	str	r3, [r7, #12]
}
 800d348:	bf00      	nop
 800d34a:	e7fe      	b.n	800d34a <prvDeleteTCB+0x5e>
	}
 800d34c:	bf00      	nop
 800d34e:	3710      	adds	r7, #16
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}

0800d354 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d354:	b480      	push	{r7}
 800d356:	b083      	sub	sp, #12
 800d358:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d35a:	4b0c      	ldr	r3, [pc, #48]	; (800d38c <prvResetNextTaskUnblockTime+0x38>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d104      	bne.n	800d36e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d364:	4b0a      	ldr	r3, [pc, #40]	; (800d390 <prvResetNextTaskUnblockTime+0x3c>)
 800d366:	f04f 32ff 	mov.w	r2, #4294967295
 800d36a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d36c:	e008      	b.n	800d380 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d36e:	4b07      	ldr	r3, [pc, #28]	; (800d38c <prvResetNextTaskUnblockTime+0x38>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	68db      	ldr	r3, [r3, #12]
 800d374:	68db      	ldr	r3, [r3, #12]
 800d376:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	685b      	ldr	r3, [r3, #4]
 800d37c:	4a04      	ldr	r2, [pc, #16]	; (800d390 <prvResetNextTaskUnblockTime+0x3c>)
 800d37e:	6013      	str	r3, [r2, #0]
}
 800d380:	bf00      	nop
 800d382:	370c      	adds	r7, #12
 800d384:	46bd      	mov	sp, r7
 800d386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38a:	4770      	bx	lr
 800d38c:	20001150 	.word	0x20001150
 800d390:	200011b8 	.word	0x200011b8

0800d394 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d394:	b480      	push	{r7}
 800d396:	b083      	sub	sp, #12
 800d398:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d39a:	4b05      	ldr	r3, [pc, #20]	; (800d3b0 <xTaskGetCurrentTaskHandle+0x1c>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d3a0:	687b      	ldr	r3, [r7, #4]
	}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	370c      	adds	r7, #12
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ac:	4770      	bx	lr
 800d3ae:	bf00      	nop
 800d3b0:	20000cc4 	.word	0x20000cc4

0800d3b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b083      	sub	sp, #12
 800d3b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d3ba:	4b0b      	ldr	r3, [pc, #44]	; (800d3e8 <xTaskGetSchedulerState+0x34>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d102      	bne.n	800d3c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d3c2:	2301      	movs	r3, #1
 800d3c4:	607b      	str	r3, [r7, #4]
 800d3c6:	e008      	b.n	800d3da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3c8:	4b08      	ldr	r3, [pc, #32]	; (800d3ec <xTaskGetSchedulerState+0x38>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d102      	bne.n	800d3d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d3d0:	2302      	movs	r3, #2
 800d3d2:	607b      	str	r3, [r7, #4]
 800d3d4:	e001      	b.n	800d3da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d3da:	687b      	ldr	r3, [r7, #4]
	}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	370c      	adds	r7, #12
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e6:	4770      	bx	lr
 800d3e8:	200011a4 	.word	0x200011a4
 800d3ec:	200011c0 	.word	0x200011c0

0800d3f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b086      	sub	sp, #24
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d056      	beq.n	800d4b4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d406:	4b2e      	ldr	r3, [pc, #184]	; (800d4c0 <xTaskPriorityDisinherit+0xd0>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	693a      	ldr	r2, [r7, #16]
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d00a      	beq.n	800d426 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d414:	f383 8811 	msr	BASEPRI, r3
 800d418:	f3bf 8f6f 	isb	sy
 800d41c:	f3bf 8f4f 	dsb	sy
 800d420:	60fb      	str	r3, [r7, #12]
}
 800d422:	bf00      	nop
 800d424:	e7fe      	b.n	800d424 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d10a      	bne.n	800d444 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d432:	f383 8811 	msr	BASEPRI, r3
 800d436:	f3bf 8f6f 	isb	sy
 800d43a:	f3bf 8f4f 	dsb	sy
 800d43e:	60bb      	str	r3, [r7, #8]
}
 800d440:	bf00      	nop
 800d442:	e7fe      	b.n	800d442 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d448:	1e5a      	subs	r2, r3, #1
 800d44a:	693b      	ldr	r3, [r7, #16]
 800d44c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d456:	429a      	cmp	r2, r3
 800d458:	d02c      	beq.n	800d4b4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d128      	bne.n	800d4b4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	3304      	adds	r3, #4
 800d466:	4618      	mov	r0, r3
 800d468:	f7fe fbc4 	bl	800bbf4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d46c:	693b      	ldr	r3, [r7, #16]
 800d46e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d474:	693b      	ldr	r3, [r7, #16]
 800d476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d478:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d484:	4b0f      	ldr	r3, [pc, #60]	; (800d4c4 <xTaskPriorityDisinherit+0xd4>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	429a      	cmp	r2, r3
 800d48a:	d903      	bls.n	800d494 <xTaskPriorityDisinherit+0xa4>
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d490:	4a0c      	ldr	r2, [pc, #48]	; (800d4c4 <xTaskPriorityDisinherit+0xd4>)
 800d492:	6013      	str	r3, [r2, #0]
 800d494:	693b      	ldr	r3, [r7, #16]
 800d496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d498:	4613      	mov	r3, r2
 800d49a:	009b      	lsls	r3, r3, #2
 800d49c:	4413      	add	r3, r2
 800d49e:	009b      	lsls	r3, r3, #2
 800d4a0:	4a09      	ldr	r2, [pc, #36]	; (800d4c8 <xTaskPriorityDisinherit+0xd8>)
 800d4a2:	441a      	add	r2, r3
 800d4a4:	693b      	ldr	r3, [r7, #16]
 800d4a6:	3304      	adds	r3, #4
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	4610      	mov	r0, r2
 800d4ac:	f7fe fb45 	bl	800bb3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d4b4:	697b      	ldr	r3, [r7, #20]
	}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3718      	adds	r7, #24
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
 800d4be:	bf00      	nop
 800d4c0:	20000cc4 	.word	0x20000cc4
 800d4c4:	200011a0 	.word	0x200011a0
 800d4c8:	20000cc8 	.word	0x20000cc8

0800d4cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b084      	sub	sp, #16
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d4d6:	4b21      	ldr	r3, [pc, #132]	; (800d55c <prvAddCurrentTaskToDelayedList+0x90>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d4dc:	4b20      	ldr	r3, [pc, #128]	; (800d560 <prvAddCurrentTaskToDelayedList+0x94>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	3304      	adds	r3, #4
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f7fe fb86 	bl	800bbf4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ee:	d10a      	bne.n	800d506 <prvAddCurrentTaskToDelayedList+0x3a>
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d007      	beq.n	800d506 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4f6:	4b1a      	ldr	r3, [pc, #104]	; (800d560 <prvAddCurrentTaskToDelayedList+0x94>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	3304      	adds	r3, #4
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	4819      	ldr	r0, [pc, #100]	; (800d564 <prvAddCurrentTaskToDelayedList+0x98>)
 800d500:	f7fe fb1b 	bl	800bb3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d504:	e026      	b.n	800d554 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d506:	68fa      	ldr	r2, [r7, #12]
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	4413      	add	r3, r2
 800d50c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d50e:	4b14      	ldr	r3, [pc, #80]	; (800d560 <prvAddCurrentTaskToDelayedList+0x94>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	68ba      	ldr	r2, [r7, #8]
 800d514:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d516:	68ba      	ldr	r2, [r7, #8]
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d209      	bcs.n	800d532 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d51e:	4b12      	ldr	r3, [pc, #72]	; (800d568 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d520:	681a      	ldr	r2, [r3, #0]
 800d522:	4b0f      	ldr	r3, [pc, #60]	; (800d560 <prvAddCurrentTaskToDelayedList+0x94>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	3304      	adds	r3, #4
 800d528:	4619      	mov	r1, r3
 800d52a:	4610      	mov	r0, r2
 800d52c:	f7fe fb29 	bl	800bb82 <vListInsert>
}
 800d530:	e010      	b.n	800d554 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d532:	4b0e      	ldr	r3, [pc, #56]	; (800d56c <prvAddCurrentTaskToDelayedList+0xa0>)
 800d534:	681a      	ldr	r2, [r3, #0]
 800d536:	4b0a      	ldr	r3, [pc, #40]	; (800d560 <prvAddCurrentTaskToDelayedList+0x94>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	3304      	adds	r3, #4
 800d53c:	4619      	mov	r1, r3
 800d53e:	4610      	mov	r0, r2
 800d540:	f7fe fb1f 	bl	800bb82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d544:	4b0a      	ldr	r3, [pc, #40]	; (800d570 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	68ba      	ldr	r2, [r7, #8]
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d202      	bcs.n	800d554 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d54e:	4a08      	ldr	r2, [pc, #32]	; (800d570 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	6013      	str	r3, [r2, #0]
}
 800d554:	bf00      	nop
 800d556:	3710      	adds	r7, #16
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}
 800d55c:	2000119c 	.word	0x2000119c
 800d560:	20000cc4 	.word	0x20000cc4
 800d564:	20001184 	.word	0x20001184
 800d568:	20001154 	.word	0x20001154
 800d56c:	20001150 	.word	0x20001150
 800d570:	200011b8 	.word	0x200011b8

0800d574 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b08a      	sub	sp, #40	; 0x28
 800d578:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d57a:	2300      	movs	r3, #0
 800d57c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d57e:	f000 fb07 	bl	800db90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d582:	4b1c      	ldr	r3, [pc, #112]	; (800d5f4 <xTimerCreateTimerTask+0x80>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d021      	beq.n	800d5ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d58a:	2300      	movs	r3, #0
 800d58c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d58e:	2300      	movs	r3, #0
 800d590:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d592:	1d3a      	adds	r2, r7, #4
 800d594:	f107 0108 	add.w	r1, r7, #8
 800d598:	f107 030c 	add.w	r3, r7, #12
 800d59c:	4618      	mov	r0, r3
 800d59e:	f7fe fa85 	bl	800baac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d5a2:	6879      	ldr	r1, [r7, #4]
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	68fa      	ldr	r2, [r7, #12]
 800d5a8:	9202      	str	r2, [sp, #8]
 800d5aa:	9301      	str	r3, [sp, #4]
 800d5ac:	2302      	movs	r3, #2
 800d5ae:	9300      	str	r3, [sp, #0]
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	460a      	mov	r2, r1
 800d5b4:	4910      	ldr	r1, [pc, #64]	; (800d5f8 <xTimerCreateTimerTask+0x84>)
 800d5b6:	4811      	ldr	r0, [pc, #68]	; (800d5fc <xTimerCreateTimerTask+0x88>)
 800d5b8:	f7ff f832 	bl	800c620 <xTaskCreateStatic>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	4a10      	ldr	r2, [pc, #64]	; (800d600 <xTimerCreateTimerTask+0x8c>)
 800d5c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d5c2:	4b0f      	ldr	r3, [pc, #60]	; (800d600 <xTimerCreateTimerTask+0x8c>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d001      	beq.n	800d5ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d10a      	bne.n	800d5ea <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d8:	f383 8811 	msr	BASEPRI, r3
 800d5dc:	f3bf 8f6f 	isb	sy
 800d5e0:	f3bf 8f4f 	dsb	sy
 800d5e4:	613b      	str	r3, [r7, #16]
}
 800d5e6:	bf00      	nop
 800d5e8:	e7fe      	b.n	800d5e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d5ea:	697b      	ldr	r3, [r7, #20]
}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	3718      	adds	r7, #24
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}
 800d5f4:	200011f4 	.word	0x200011f4
 800d5f8:	080146cc 	.word	0x080146cc
 800d5fc:	0800d739 	.word	0x0800d739
 800d600:	200011f8 	.word	0x200011f8

0800d604 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b08a      	sub	sp, #40	; 0x28
 800d608:	af00      	add	r7, sp, #0
 800d60a:	60f8      	str	r0, [r7, #12]
 800d60c:	60b9      	str	r1, [r7, #8]
 800d60e:	607a      	str	r2, [r7, #4]
 800d610:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d612:	2300      	movs	r3, #0
 800d614:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d10a      	bne.n	800d632 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d620:	f383 8811 	msr	BASEPRI, r3
 800d624:	f3bf 8f6f 	isb	sy
 800d628:	f3bf 8f4f 	dsb	sy
 800d62c:	623b      	str	r3, [r7, #32]
}
 800d62e:	bf00      	nop
 800d630:	e7fe      	b.n	800d630 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d632:	4b1a      	ldr	r3, [pc, #104]	; (800d69c <xTimerGenericCommand+0x98>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d02a      	beq.n	800d690 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	2b05      	cmp	r3, #5
 800d64a:	dc18      	bgt.n	800d67e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d64c:	f7ff feb2 	bl	800d3b4 <xTaskGetSchedulerState>
 800d650:	4603      	mov	r3, r0
 800d652:	2b02      	cmp	r3, #2
 800d654:	d109      	bne.n	800d66a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d656:	4b11      	ldr	r3, [pc, #68]	; (800d69c <xTimerGenericCommand+0x98>)
 800d658:	6818      	ldr	r0, [r3, #0]
 800d65a:	f107 0110 	add.w	r1, r7, #16
 800d65e:	2300      	movs	r3, #0
 800d660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d662:	f7fe fbf5 	bl	800be50 <xQueueGenericSend>
 800d666:	6278      	str	r0, [r7, #36]	; 0x24
 800d668:	e012      	b.n	800d690 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d66a:	4b0c      	ldr	r3, [pc, #48]	; (800d69c <xTimerGenericCommand+0x98>)
 800d66c:	6818      	ldr	r0, [r3, #0]
 800d66e:	f107 0110 	add.w	r1, r7, #16
 800d672:	2300      	movs	r3, #0
 800d674:	2200      	movs	r2, #0
 800d676:	f7fe fbeb 	bl	800be50 <xQueueGenericSend>
 800d67a:	6278      	str	r0, [r7, #36]	; 0x24
 800d67c:	e008      	b.n	800d690 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d67e:	4b07      	ldr	r3, [pc, #28]	; (800d69c <xTimerGenericCommand+0x98>)
 800d680:	6818      	ldr	r0, [r3, #0]
 800d682:	f107 0110 	add.w	r1, r7, #16
 800d686:	2300      	movs	r3, #0
 800d688:	683a      	ldr	r2, [r7, #0]
 800d68a:	f7fe fcdf 	bl	800c04c <xQueueGenericSendFromISR>
 800d68e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d692:	4618      	mov	r0, r3
 800d694:	3728      	adds	r7, #40	; 0x28
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}
 800d69a:	bf00      	nop
 800d69c:	200011f4 	.word	0x200011f4

0800d6a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b088      	sub	sp, #32
 800d6a4:	af02      	add	r7, sp, #8
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6aa:	4b22      	ldr	r3, [pc, #136]	; (800d734 <prvProcessExpiredTimer+0x94>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	68db      	ldr	r3, [r3, #12]
 800d6b0:	68db      	ldr	r3, [r3, #12]
 800d6b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	3304      	adds	r3, #4
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	f7fe fa9b 	bl	800bbf4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d6c4:	f003 0304 	and.w	r3, r3, #4
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d022      	beq.n	800d712 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	699a      	ldr	r2, [r3, #24]
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	18d1      	adds	r1, r2, r3
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	683a      	ldr	r2, [r7, #0]
 800d6d8:	6978      	ldr	r0, [r7, #20]
 800d6da:	f000 f8d1 	bl	800d880 <prvInsertTimerInActiveList>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d01f      	beq.n	800d724 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	9300      	str	r3, [sp, #0]
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	687a      	ldr	r2, [r7, #4]
 800d6ec:	2100      	movs	r1, #0
 800d6ee:	6978      	ldr	r0, [r7, #20]
 800d6f0:	f7ff ff88 	bl	800d604 <xTimerGenericCommand>
 800d6f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d6f6:	693b      	ldr	r3, [r7, #16]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d113      	bne.n	800d724 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d700:	f383 8811 	msr	BASEPRI, r3
 800d704:	f3bf 8f6f 	isb	sy
 800d708:	f3bf 8f4f 	dsb	sy
 800d70c:	60fb      	str	r3, [r7, #12]
}
 800d70e:	bf00      	nop
 800d710:	e7fe      	b.n	800d710 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d718:	f023 0301 	bic.w	r3, r3, #1
 800d71c:	b2da      	uxtb	r2, r3
 800d71e:	697b      	ldr	r3, [r7, #20]
 800d720:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d724:	697b      	ldr	r3, [r7, #20]
 800d726:	6a1b      	ldr	r3, [r3, #32]
 800d728:	6978      	ldr	r0, [r7, #20]
 800d72a:	4798      	blx	r3
}
 800d72c:	bf00      	nop
 800d72e:	3718      	adds	r7, #24
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}
 800d734:	200011ec 	.word	0x200011ec

0800d738 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b084      	sub	sp, #16
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d740:	f107 0308 	add.w	r3, r7, #8
 800d744:	4618      	mov	r0, r3
 800d746:	f000 f857 	bl	800d7f8 <prvGetNextExpireTime>
 800d74a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	4619      	mov	r1, r3
 800d750:	68f8      	ldr	r0, [r7, #12]
 800d752:	f000 f803 	bl	800d75c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d756:	f000 f8d5 	bl	800d904 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d75a:	e7f1      	b.n	800d740 <prvTimerTask+0x8>

0800d75c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b084      	sub	sp, #16
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
 800d764:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d766:	f7ff fa29 	bl	800cbbc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d76a:	f107 0308 	add.w	r3, r7, #8
 800d76e:	4618      	mov	r0, r3
 800d770:	f000 f866 	bl	800d840 <prvSampleTimeNow>
 800d774:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d130      	bne.n	800d7de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d10a      	bne.n	800d798 <prvProcessTimerOrBlockTask+0x3c>
 800d782:	687a      	ldr	r2, [r7, #4]
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	429a      	cmp	r2, r3
 800d788:	d806      	bhi.n	800d798 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d78a:	f7ff fa25 	bl	800cbd8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d78e:	68f9      	ldr	r1, [r7, #12]
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	f7ff ff85 	bl	800d6a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d796:	e024      	b.n	800d7e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d008      	beq.n	800d7b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d79e:	4b13      	ldr	r3, [pc, #76]	; (800d7ec <prvProcessTimerOrBlockTask+0x90>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d101      	bne.n	800d7ac <prvProcessTimerOrBlockTask+0x50>
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	e000      	b.n	800d7ae <prvProcessTimerOrBlockTask+0x52>
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d7b0:	4b0f      	ldr	r3, [pc, #60]	; (800d7f0 <prvProcessTimerOrBlockTask+0x94>)
 800d7b2:	6818      	ldr	r0, [r3, #0]
 800d7b4:	687a      	ldr	r2, [r7, #4]
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	1ad3      	subs	r3, r2, r3
 800d7ba:	683a      	ldr	r2, [r7, #0]
 800d7bc:	4619      	mov	r1, r3
 800d7be:	f7fe fefb 	bl	800c5b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d7c2:	f7ff fa09 	bl	800cbd8 <xTaskResumeAll>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d10a      	bne.n	800d7e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d7cc:	4b09      	ldr	r3, [pc, #36]	; (800d7f4 <prvProcessTimerOrBlockTask+0x98>)
 800d7ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7d2:	601a      	str	r2, [r3, #0]
 800d7d4:	f3bf 8f4f 	dsb	sy
 800d7d8:	f3bf 8f6f 	isb	sy
}
 800d7dc:	e001      	b.n	800d7e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d7de:	f7ff f9fb 	bl	800cbd8 <xTaskResumeAll>
}
 800d7e2:	bf00      	nop
 800d7e4:	3710      	adds	r7, #16
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	200011f0 	.word	0x200011f0
 800d7f0:	200011f4 	.word	0x200011f4
 800d7f4:	e000ed04 	.word	0xe000ed04

0800d7f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d7f8:	b480      	push	{r7}
 800d7fa:	b085      	sub	sp, #20
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d800:	4b0e      	ldr	r3, [pc, #56]	; (800d83c <prvGetNextExpireTime+0x44>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d101      	bne.n	800d80e <prvGetNextExpireTime+0x16>
 800d80a:	2201      	movs	r2, #1
 800d80c:	e000      	b.n	800d810 <prvGetNextExpireTime+0x18>
 800d80e:	2200      	movs	r2, #0
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d105      	bne.n	800d828 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d81c:	4b07      	ldr	r3, [pc, #28]	; (800d83c <prvGetNextExpireTime+0x44>)
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	68db      	ldr	r3, [r3, #12]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	60fb      	str	r3, [r7, #12]
 800d826:	e001      	b.n	800d82c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d828:	2300      	movs	r3, #0
 800d82a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d82c:	68fb      	ldr	r3, [r7, #12]
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3714      	adds	r7, #20
 800d832:	46bd      	mov	sp, r7
 800d834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d838:	4770      	bx	lr
 800d83a:	bf00      	nop
 800d83c:	200011ec 	.word	0x200011ec

0800d840 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b084      	sub	sp, #16
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d848:	f7ff fa64 	bl	800cd14 <xTaskGetTickCount>
 800d84c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d84e:	4b0b      	ldr	r3, [pc, #44]	; (800d87c <prvSampleTimeNow+0x3c>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	68fa      	ldr	r2, [r7, #12]
 800d854:	429a      	cmp	r2, r3
 800d856:	d205      	bcs.n	800d864 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d858:	f000 f936 	bl	800dac8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2201      	movs	r2, #1
 800d860:	601a      	str	r2, [r3, #0]
 800d862:	e002      	b.n	800d86a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2200      	movs	r2, #0
 800d868:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d86a:	4a04      	ldr	r2, [pc, #16]	; (800d87c <prvSampleTimeNow+0x3c>)
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d870:	68fb      	ldr	r3, [r7, #12]
}
 800d872:	4618      	mov	r0, r3
 800d874:	3710      	adds	r7, #16
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}
 800d87a:	bf00      	nop
 800d87c:	200011fc 	.word	0x200011fc

0800d880 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b086      	sub	sp, #24
 800d884:	af00      	add	r7, sp, #0
 800d886:	60f8      	str	r0, [r7, #12]
 800d888:	60b9      	str	r1, [r7, #8]
 800d88a:	607a      	str	r2, [r7, #4]
 800d88c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d88e:	2300      	movs	r3, #0
 800d890:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	68ba      	ldr	r2, [r7, #8]
 800d896:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	68fa      	ldr	r2, [r7, #12]
 800d89c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d89e:	68ba      	ldr	r2, [r7, #8]
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d812      	bhi.n	800d8cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8a6:	687a      	ldr	r2, [r7, #4]
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	1ad2      	subs	r2, r2, r3
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	699b      	ldr	r3, [r3, #24]
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d302      	bcc.n	800d8ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	617b      	str	r3, [r7, #20]
 800d8b8:	e01b      	b.n	800d8f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d8ba:	4b10      	ldr	r3, [pc, #64]	; (800d8fc <prvInsertTimerInActiveList+0x7c>)
 800d8bc:	681a      	ldr	r2, [r3, #0]
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	3304      	adds	r3, #4
 800d8c2:	4619      	mov	r1, r3
 800d8c4:	4610      	mov	r0, r2
 800d8c6:	f7fe f95c 	bl	800bb82 <vListInsert>
 800d8ca:	e012      	b.n	800d8f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d8cc:	687a      	ldr	r2, [r7, #4]
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d206      	bcs.n	800d8e2 <prvInsertTimerInActiveList+0x62>
 800d8d4:	68ba      	ldr	r2, [r7, #8]
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	d302      	bcc.n	800d8e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d8dc:	2301      	movs	r3, #1
 800d8de:	617b      	str	r3, [r7, #20]
 800d8e0:	e007      	b.n	800d8f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d8e2:	4b07      	ldr	r3, [pc, #28]	; (800d900 <prvInsertTimerInActiveList+0x80>)
 800d8e4:	681a      	ldr	r2, [r3, #0]
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	3304      	adds	r3, #4
 800d8ea:	4619      	mov	r1, r3
 800d8ec:	4610      	mov	r0, r2
 800d8ee:	f7fe f948 	bl	800bb82 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d8f2:	697b      	ldr	r3, [r7, #20]
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3718      	adds	r7, #24
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}
 800d8fc:	200011f0 	.word	0x200011f0
 800d900:	200011ec 	.word	0x200011ec

0800d904 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b08e      	sub	sp, #56	; 0x38
 800d908:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d90a:	e0ca      	b.n	800daa2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	da18      	bge.n	800d944 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d912:	1d3b      	adds	r3, r7, #4
 800d914:	3304      	adds	r3, #4
 800d916:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d10a      	bne.n	800d934 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d922:	f383 8811 	msr	BASEPRI, r3
 800d926:	f3bf 8f6f 	isb	sy
 800d92a:	f3bf 8f4f 	dsb	sy
 800d92e:	61fb      	str	r3, [r7, #28]
}
 800d930:	bf00      	nop
 800d932:	e7fe      	b.n	800d932 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d93a:	6850      	ldr	r0, [r2, #4]
 800d93c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d93e:	6892      	ldr	r2, [r2, #8]
 800d940:	4611      	mov	r1, r2
 800d942:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2b00      	cmp	r3, #0
 800d948:	f2c0 80aa 	blt.w	800daa0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d952:	695b      	ldr	r3, [r3, #20]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d004      	beq.n	800d962 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d95a:	3304      	adds	r3, #4
 800d95c:	4618      	mov	r0, r3
 800d95e:	f7fe f949 	bl	800bbf4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d962:	463b      	mov	r3, r7
 800d964:	4618      	mov	r0, r3
 800d966:	f7ff ff6b 	bl	800d840 <prvSampleTimeNow>
 800d96a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2b09      	cmp	r3, #9
 800d970:	f200 8097 	bhi.w	800daa2 <prvProcessReceivedCommands+0x19e>
 800d974:	a201      	add	r2, pc, #4	; (adr r2, 800d97c <prvProcessReceivedCommands+0x78>)
 800d976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d97a:	bf00      	nop
 800d97c:	0800d9a5 	.word	0x0800d9a5
 800d980:	0800d9a5 	.word	0x0800d9a5
 800d984:	0800d9a5 	.word	0x0800d9a5
 800d988:	0800da19 	.word	0x0800da19
 800d98c:	0800da2d 	.word	0x0800da2d
 800d990:	0800da77 	.word	0x0800da77
 800d994:	0800d9a5 	.word	0x0800d9a5
 800d998:	0800d9a5 	.word	0x0800d9a5
 800d99c:	0800da19 	.word	0x0800da19
 800d9a0:	0800da2d 	.word	0x0800da2d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9aa:	f043 0301 	orr.w	r3, r3, #1
 800d9ae:	b2da      	uxtb	r2, r3
 800d9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d9b6:	68ba      	ldr	r2, [r7, #8]
 800d9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ba:	699b      	ldr	r3, [r3, #24]
 800d9bc:	18d1      	adds	r1, r2, r3
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9c4:	f7ff ff5c 	bl	800d880 <prvInsertTimerInActiveList>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d069      	beq.n	800daa2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d0:	6a1b      	ldr	r3, [r3, #32]
 800d9d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9dc:	f003 0304 	and.w	r3, r3, #4
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d05e      	beq.n	800daa2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d9e4:	68ba      	ldr	r2, [r7, #8]
 800d9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e8:	699b      	ldr	r3, [r3, #24]
 800d9ea:	441a      	add	r2, r3
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	9300      	str	r3, [sp, #0]
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	2100      	movs	r1, #0
 800d9f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9f6:	f7ff fe05 	bl	800d604 <xTimerGenericCommand>
 800d9fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d9fc:	6a3b      	ldr	r3, [r7, #32]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d14f      	bne.n	800daa2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800da02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da06:	f383 8811 	msr	BASEPRI, r3
 800da0a:	f3bf 8f6f 	isb	sy
 800da0e:	f3bf 8f4f 	dsb	sy
 800da12:	61bb      	str	r3, [r7, #24]
}
 800da14:	bf00      	nop
 800da16:	e7fe      	b.n	800da16 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800da18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da1e:	f023 0301 	bic.w	r3, r3, #1
 800da22:	b2da      	uxtb	r2, r3
 800da24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800da2a:	e03a      	b.n	800daa2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800da2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da32:	f043 0301 	orr.w	r3, r3, #1
 800da36:	b2da      	uxtb	r2, r3
 800da38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800da3e:	68ba      	ldr	r2, [r7, #8]
 800da40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da42:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800da44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da46:	699b      	ldr	r3, [r3, #24]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d10a      	bne.n	800da62 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800da4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da50:	f383 8811 	msr	BASEPRI, r3
 800da54:	f3bf 8f6f 	isb	sy
 800da58:	f3bf 8f4f 	dsb	sy
 800da5c:	617b      	str	r3, [r7, #20]
}
 800da5e:	bf00      	nop
 800da60:	e7fe      	b.n	800da60 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800da62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da64:	699a      	ldr	r2, [r3, #24]
 800da66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da68:	18d1      	adds	r1, r2, r3
 800da6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da70:	f7ff ff06 	bl	800d880 <prvInsertTimerInActiveList>
					break;
 800da74:	e015      	b.n	800daa2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800da76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da7c:	f003 0302 	and.w	r3, r3, #2
 800da80:	2b00      	cmp	r3, #0
 800da82:	d103      	bne.n	800da8c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800da84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da86:	f000 fbdb 	bl	800e240 <vPortFree>
 800da8a:	e00a      	b.n	800daa2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800da8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da92:	f023 0301 	bic.w	r3, r3, #1
 800da96:	b2da      	uxtb	r2, r3
 800da98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800da9e:	e000      	b.n	800daa2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800daa0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800daa2:	4b08      	ldr	r3, [pc, #32]	; (800dac4 <prvProcessReceivedCommands+0x1c0>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	1d39      	adds	r1, r7, #4
 800daa8:	2200      	movs	r2, #0
 800daaa:	4618      	mov	r0, r3
 800daac:	f7fe fb6a 	bl	800c184 <xQueueReceive>
 800dab0:	4603      	mov	r3, r0
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	f47f af2a 	bne.w	800d90c <prvProcessReceivedCommands+0x8>
	}
}
 800dab8:	bf00      	nop
 800daba:	bf00      	nop
 800dabc:	3730      	adds	r7, #48	; 0x30
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}
 800dac2:	bf00      	nop
 800dac4:	200011f4 	.word	0x200011f4

0800dac8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b088      	sub	sp, #32
 800dacc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dace:	e048      	b.n	800db62 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dad0:	4b2d      	ldr	r3, [pc, #180]	; (800db88 <prvSwitchTimerLists+0xc0>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	68db      	ldr	r3, [r3, #12]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dada:	4b2b      	ldr	r3, [pc, #172]	; (800db88 <prvSwitchTimerLists+0xc0>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	68db      	ldr	r3, [r3, #12]
 800dae0:	68db      	ldr	r3, [r3, #12]
 800dae2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	3304      	adds	r3, #4
 800dae8:	4618      	mov	r0, r3
 800daea:	f7fe f883 	bl	800bbf4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	6a1b      	ldr	r3, [r3, #32]
 800daf2:	68f8      	ldr	r0, [r7, #12]
 800daf4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dafc:	f003 0304 	and.w	r3, r3, #4
 800db00:	2b00      	cmp	r3, #0
 800db02:	d02e      	beq.n	800db62 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	699b      	ldr	r3, [r3, #24]
 800db08:	693a      	ldr	r2, [r7, #16]
 800db0a:	4413      	add	r3, r2
 800db0c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800db0e:	68ba      	ldr	r2, [r7, #8]
 800db10:	693b      	ldr	r3, [r7, #16]
 800db12:	429a      	cmp	r2, r3
 800db14:	d90e      	bls.n	800db34 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	68ba      	ldr	r2, [r7, #8]
 800db1a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	68fa      	ldr	r2, [r7, #12]
 800db20:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800db22:	4b19      	ldr	r3, [pc, #100]	; (800db88 <prvSwitchTimerLists+0xc0>)
 800db24:	681a      	ldr	r2, [r3, #0]
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	3304      	adds	r3, #4
 800db2a:	4619      	mov	r1, r3
 800db2c:	4610      	mov	r0, r2
 800db2e:	f7fe f828 	bl	800bb82 <vListInsert>
 800db32:	e016      	b.n	800db62 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800db34:	2300      	movs	r3, #0
 800db36:	9300      	str	r3, [sp, #0]
 800db38:	2300      	movs	r3, #0
 800db3a:	693a      	ldr	r2, [r7, #16]
 800db3c:	2100      	movs	r1, #0
 800db3e:	68f8      	ldr	r0, [r7, #12]
 800db40:	f7ff fd60 	bl	800d604 <xTimerGenericCommand>
 800db44:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d10a      	bne.n	800db62 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800db4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db50:	f383 8811 	msr	BASEPRI, r3
 800db54:	f3bf 8f6f 	isb	sy
 800db58:	f3bf 8f4f 	dsb	sy
 800db5c:	603b      	str	r3, [r7, #0]
}
 800db5e:	bf00      	nop
 800db60:	e7fe      	b.n	800db60 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800db62:	4b09      	ldr	r3, [pc, #36]	; (800db88 <prvSwitchTimerLists+0xc0>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d1b1      	bne.n	800dad0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800db6c:	4b06      	ldr	r3, [pc, #24]	; (800db88 <prvSwitchTimerLists+0xc0>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800db72:	4b06      	ldr	r3, [pc, #24]	; (800db8c <prvSwitchTimerLists+0xc4>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	4a04      	ldr	r2, [pc, #16]	; (800db88 <prvSwitchTimerLists+0xc0>)
 800db78:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800db7a:	4a04      	ldr	r2, [pc, #16]	; (800db8c <prvSwitchTimerLists+0xc4>)
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	6013      	str	r3, [r2, #0]
}
 800db80:	bf00      	nop
 800db82:	3718      	adds	r7, #24
 800db84:	46bd      	mov	sp, r7
 800db86:	bd80      	pop	{r7, pc}
 800db88:	200011ec 	.word	0x200011ec
 800db8c:	200011f0 	.word	0x200011f0

0800db90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b082      	sub	sp, #8
 800db94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800db96:	f000 f965 	bl	800de64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800db9a:	4b15      	ldr	r3, [pc, #84]	; (800dbf0 <prvCheckForValidListAndQueue+0x60>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d120      	bne.n	800dbe4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dba2:	4814      	ldr	r0, [pc, #80]	; (800dbf4 <prvCheckForValidListAndQueue+0x64>)
 800dba4:	f7fd ff9c 	bl	800bae0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dba8:	4813      	ldr	r0, [pc, #76]	; (800dbf8 <prvCheckForValidListAndQueue+0x68>)
 800dbaa:	f7fd ff99 	bl	800bae0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dbae:	4b13      	ldr	r3, [pc, #76]	; (800dbfc <prvCheckForValidListAndQueue+0x6c>)
 800dbb0:	4a10      	ldr	r2, [pc, #64]	; (800dbf4 <prvCheckForValidListAndQueue+0x64>)
 800dbb2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dbb4:	4b12      	ldr	r3, [pc, #72]	; (800dc00 <prvCheckForValidListAndQueue+0x70>)
 800dbb6:	4a10      	ldr	r2, [pc, #64]	; (800dbf8 <prvCheckForValidListAndQueue+0x68>)
 800dbb8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dbba:	2300      	movs	r3, #0
 800dbbc:	9300      	str	r3, [sp, #0]
 800dbbe:	4b11      	ldr	r3, [pc, #68]	; (800dc04 <prvCheckForValidListAndQueue+0x74>)
 800dbc0:	4a11      	ldr	r2, [pc, #68]	; (800dc08 <prvCheckForValidListAndQueue+0x78>)
 800dbc2:	2110      	movs	r1, #16
 800dbc4:	200a      	movs	r0, #10
 800dbc6:	f7fe f8a7 	bl	800bd18 <xQueueGenericCreateStatic>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	4a08      	ldr	r2, [pc, #32]	; (800dbf0 <prvCheckForValidListAndQueue+0x60>)
 800dbce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dbd0:	4b07      	ldr	r3, [pc, #28]	; (800dbf0 <prvCheckForValidListAndQueue+0x60>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d005      	beq.n	800dbe4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dbd8:	4b05      	ldr	r3, [pc, #20]	; (800dbf0 <prvCheckForValidListAndQueue+0x60>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	490b      	ldr	r1, [pc, #44]	; (800dc0c <prvCheckForValidListAndQueue+0x7c>)
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7fe fcc0 	bl	800c564 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dbe4:	f000 f96e 	bl	800dec4 <vPortExitCritical>
}
 800dbe8:	bf00      	nop
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}
 800dbee:	bf00      	nop
 800dbf0:	200011f4 	.word	0x200011f4
 800dbf4:	200011c4 	.word	0x200011c4
 800dbf8:	200011d8 	.word	0x200011d8
 800dbfc:	200011ec 	.word	0x200011ec
 800dc00:	200011f0 	.word	0x200011f0
 800dc04:	200012a0 	.word	0x200012a0
 800dc08:	20001200 	.word	0x20001200
 800dc0c:	080146d4 	.word	0x080146d4

0800dc10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dc10:	b480      	push	{r7}
 800dc12:	b085      	sub	sp, #20
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	60f8      	str	r0, [r7, #12]
 800dc18:	60b9      	str	r1, [r7, #8]
 800dc1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	3b04      	subs	r3, #4
 800dc20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dc28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	3b04      	subs	r3, #4
 800dc2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	f023 0201 	bic.w	r2, r3, #1
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	3b04      	subs	r3, #4
 800dc3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dc40:	4a0c      	ldr	r2, [pc, #48]	; (800dc74 <pxPortInitialiseStack+0x64>)
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	3b14      	subs	r3, #20
 800dc4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dc4c:	687a      	ldr	r2, [r7, #4]
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	3b04      	subs	r3, #4
 800dc56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f06f 0202 	mvn.w	r2, #2
 800dc5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	3b20      	subs	r3, #32
 800dc64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dc66:	68fb      	ldr	r3, [r7, #12]
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3714      	adds	r7, #20
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc72:	4770      	bx	lr
 800dc74:	0800dc79 	.word	0x0800dc79

0800dc78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dc78:	b480      	push	{r7}
 800dc7a:	b085      	sub	sp, #20
 800dc7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dc82:	4b12      	ldr	r3, [pc, #72]	; (800dccc <prvTaskExitError+0x54>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc8a:	d00a      	beq.n	800dca2 <prvTaskExitError+0x2a>
	__asm volatile
 800dc8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc90:	f383 8811 	msr	BASEPRI, r3
 800dc94:	f3bf 8f6f 	isb	sy
 800dc98:	f3bf 8f4f 	dsb	sy
 800dc9c:	60fb      	str	r3, [r7, #12]
}
 800dc9e:	bf00      	nop
 800dca0:	e7fe      	b.n	800dca0 <prvTaskExitError+0x28>
	__asm volatile
 800dca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca6:	f383 8811 	msr	BASEPRI, r3
 800dcaa:	f3bf 8f6f 	isb	sy
 800dcae:	f3bf 8f4f 	dsb	sy
 800dcb2:	60bb      	str	r3, [r7, #8]
}
 800dcb4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dcb6:	bf00      	nop
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d0fc      	beq.n	800dcb8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dcbe:	bf00      	nop
 800dcc0:	bf00      	nop
 800dcc2:	3714      	adds	r7, #20
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcca:	4770      	bx	lr
 800dccc:	20000080 	.word	0x20000080

0800dcd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dcd0:	4b07      	ldr	r3, [pc, #28]	; (800dcf0 <pxCurrentTCBConst2>)
 800dcd2:	6819      	ldr	r1, [r3, #0]
 800dcd4:	6808      	ldr	r0, [r1, #0]
 800dcd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcda:	f380 8809 	msr	PSP, r0
 800dcde:	f3bf 8f6f 	isb	sy
 800dce2:	f04f 0000 	mov.w	r0, #0
 800dce6:	f380 8811 	msr	BASEPRI, r0
 800dcea:	4770      	bx	lr
 800dcec:	f3af 8000 	nop.w

0800dcf0 <pxCurrentTCBConst2>:
 800dcf0:	20000cc4 	.word	0x20000cc4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dcf4:	bf00      	nop
 800dcf6:	bf00      	nop

0800dcf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dcf8:	4808      	ldr	r0, [pc, #32]	; (800dd1c <prvPortStartFirstTask+0x24>)
 800dcfa:	6800      	ldr	r0, [r0, #0]
 800dcfc:	6800      	ldr	r0, [r0, #0]
 800dcfe:	f380 8808 	msr	MSP, r0
 800dd02:	f04f 0000 	mov.w	r0, #0
 800dd06:	f380 8814 	msr	CONTROL, r0
 800dd0a:	b662      	cpsie	i
 800dd0c:	b661      	cpsie	f
 800dd0e:	f3bf 8f4f 	dsb	sy
 800dd12:	f3bf 8f6f 	isb	sy
 800dd16:	df00      	svc	0
 800dd18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dd1a:	bf00      	nop
 800dd1c:	e000ed08 	.word	0xe000ed08

0800dd20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b086      	sub	sp, #24
 800dd24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dd26:	4b46      	ldr	r3, [pc, #280]	; (800de40 <xPortStartScheduler+0x120>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	4a46      	ldr	r2, [pc, #280]	; (800de44 <xPortStartScheduler+0x124>)
 800dd2c:	4293      	cmp	r3, r2
 800dd2e:	d10a      	bne.n	800dd46 <xPortStartScheduler+0x26>
	__asm volatile
 800dd30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd34:	f383 8811 	msr	BASEPRI, r3
 800dd38:	f3bf 8f6f 	isb	sy
 800dd3c:	f3bf 8f4f 	dsb	sy
 800dd40:	613b      	str	r3, [r7, #16]
}
 800dd42:	bf00      	nop
 800dd44:	e7fe      	b.n	800dd44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dd46:	4b3e      	ldr	r3, [pc, #248]	; (800de40 <xPortStartScheduler+0x120>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	4a3f      	ldr	r2, [pc, #252]	; (800de48 <xPortStartScheduler+0x128>)
 800dd4c:	4293      	cmp	r3, r2
 800dd4e:	d10a      	bne.n	800dd66 <xPortStartScheduler+0x46>
	__asm volatile
 800dd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd54:	f383 8811 	msr	BASEPRI, r3
 800dd58:	f3bf 8f6f 	isb	sy
 800dd5c:	f3bf 8f4f 	dsb	sy
 800dd60:	60fb      	str	r3, [r7, #12]
}
 800dd62:	bf00      	nop
 800dd64:	e7fe      	b.n	800dd64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dd66:	4b39      	ldr	r3, [pc, #228]	; (800de4c <xPortStartScheduler+0x12c>)
 800dd68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	781b      	ldrb	r3, [r3, #0]
 800dd6e:	b2db      	uxtb	r3, r3
 800dd70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	22ff      	movs	r2, #255	; 0xff
 800dd76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	781b      	ldrb	r3, [r3, #0]
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dd80:	78fb      	ldrb	r3, [r7, #3]
 800dd82:	b2db      	uxtb	r3, r3
 800dd84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dd88:	b2da      	uxtb	r2, r3
 800dd8a:	4b31      	ldr	r3, [pc, #196]	; (800de50 <xPortStartScheduler+0x130>)
 800dd8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dd8e:	4b31      	ldr	r3, [pc, #196]	; (800de54 <xPortStartScheduler+0x134>)
 800dd90:	2207      	movs	r2, #7
 800dd92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dd94:	e009      	b.n	800ddaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800dd96:	4b2f      	ldr	r3, [pc, #188]	; (800de54 <xPortStartScheduler+0x134>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	3b01      	subs	r3, #1
 800dd9c:	4a2d      	ldr	r2, [pc, #180]	; (800de54 <xPortStartScheduler+0x134>)
 800dd9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dda0:	78fb      	ldrb	r3, [r7, #3]
 800dda2:	b2db      	uxtb	r3, r3
 800dda4:	005b      	lsls	r3, r3, #1
 800dda6:	b2db      	uxtb	r3, r3
 800dda8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ddaa:	78fb      	ldrb	r3, [r7, #3]
 800ddac:	b2db      	uxtb	r3, r3
 800ddae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddb2:	2b80      	cmp	r3, #128	; 0x80
 800ddb4:	d0ef      	beq.n	800dd96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ddb6:	4b27      	ldr	r3, [pc, #156]	; (800de54 <xPortStartScheduler+0x134>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	f1c3 0307 	rsb	r3, r3, #7
 800ddbe:	2b04      	cmp	r3, #4
 800ddc0:	d00a      	beq.n	800ddd8 <xPortStartScheduler+0xb8>
	__asm volatile
 800ddc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc6:	f383 8811 	msr	BASEPRI, r3
 800ddca:	f3bf 8f6f 	isb	sy
 800ddce:	f3bf 8f4f 	dsb	sy
 800ddd2:	60bb      	str	r3, [r7, #8]
}
 800ddd4:	bf00      	nop
 800ddd6:	e7fe      	b.n	800ddd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ddd8:	4b1e      	ldr	r3, [pc, #120]	; (800de54 <xPortStartScheduler+0x134>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	021b      	lsls	r3, r3, #8
 800ddde:	4a1d      	ldr	r2, [pc, #116]	; (800de54 <xPortStartScheduler+0x134>)
 800dde0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dde2:	4b1c      	ldr	r3, [pc, #112]	; (800de54 <xPortStartScheduler+0x134>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ddea:	4a1a      	ldr	r2, [pc, #104]	; (800de54 <xPortStartScheduler+0x134>)
 800ddec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	b2da      	uxtb	r2, r3
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ddf6:	4b18      	ldr	r3, [pc, #96]	; (800de58 <xPortStartScheduler+0x138>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	4a17      	ldr	r2, [pc, #92]	; (800de58 <xPortStartScheduler+0x138>)
 800ddfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800de00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800de02:	4b15      	ldr	r3, [pc, #84]	; (800de58 <xPortStartScheduler+0x138>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	4a14      	ldr	r2, [pc, #80]	; (800de58 <xPortStartScheduler+0x138>)
 800de08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800de0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800de0e:	f000 f8dd 	bl	800dfcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800de12:	4b12      	ldr	r3, [pc, #72]	; (800de5c <xPortStartScheduler+0x13c>)
 800de14:	2200      	movs	r2, #0
 800de16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800de18:	f000 f8fc 	bl	800e014 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800de1c:	4b10      	ldr	r3, [pc, #64]	; (800de60 <xPortStartScheduler+0x140>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	4a0f      	ldr	r2, [pc, #60]	; (800de60 <xPortStartScheduler+0x140>)
 800de22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800de26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800de28:	f7ff ff66 	bl	800dcf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800de2c:	f7ff f83c 	bl	800cea8 <vTaskSwitchContext>
	prvTaskExitError();
 800de30:	f7ff ff22 	bl	800dc78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800de34:	2300      	movs	r3, #0
}
 800de36:	4618      	mov	r0, r3
 800de38:	3718      	adds	r7, #24
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}
 800de3e:	bf00      	nop
 800de40:	e000ed00 	.word	0xe000ed00
 800de44:	410fc271 	.word	0x410fc271
 800de48:	410fc270 	.word	0x410fc270
 800de4c:	e000e400 	.word	0xe000e400
 800de50:	200012f0 	.word	0x200012f0
 800de54:	200012f4 	.word	0x200012f4
 800de58:	e000ed20 	.word	0xe000ed20
 800de5c:	20000080 	.word	0x20000080
 800de60:	e000ef34 	.word	0xe000ef34

0800de64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800de64:	b480      	push	{r7}
 800de66:	b083      	sub	sp, #12
 800de68:	af00      	add	r7, sp, #0
	__asm volatile
 800de6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de6e:	f383 8811 	msr	BASEPRI, r3
 800de72:	f3bf 8f6f 	isb	sy
 800de76:	f3bf 8f4f 	dsb	sy
 800de7a:	607b      	str	r3, [r7, #4]
}
 800de7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800de7e:	4b0f      	ldr	r3, [pc, #60]	; (800debc <vPortEnterCritical+0x58>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	3301      	adds	r3, #1
 800de84:	4a0d      	ldr	r2, [pc, #52]	; (800debc <vPortEnterCritical+0x58>)
 800de86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800de88:	4b0c      	ldr	r3, [pc, #48]	; (800debc <vPortEnterCritical+0x58>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	2b01      	cmp	r3, #1
 800de8e:	d10f      	bne.n	800deb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800de90:	4b0b      	ldr	r3, [pc, #44]	; (800dec0 <vPortEnterCritical+0x5c>)
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	b2db      	uxtb	r3, r3
 800de96:	2b00      	cmp	r3, #0
 800de98:	d00a      	beq.n	800deb0 <vPortEnterCritical+0x4c>
	__asm volatile
 800de9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de9e:	f383 8811 	msr	BASEPRI, r3
 800dea2:	f3bf 8f6f 	isb	sy
 800dea6:	f3bf 8f4f 	dsb	sy
 800deaa:	603b      	str	r3, [r7, #0]
}
 800deac:	bf00      	nop
 800deae:	e7fe      	b.n	800deae <vPortEnterCritical+0x4a>
	}
}
 800deb0:	bf00      	nop
 800deb2:	370c      	adds	r7, #12
 800deb4:	46bd      	mov	sp, r7
 800deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deba:	4770      	bx	lr
 800debc:	20000080 	.word	0x20000080
 800dec0:	e000ed04 	.word	0xe000ed04

0800dec4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dec4:	b480      	push	{r7}
 800dec6:	b083      	sub	sp, #12
 800dec8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800deca:	4b12      	ldr	r3, [pc, #72]	; (800df14 <vPortExitCritical+0x50>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d10a      	bne.n	800dee8 <vPortExitCritical+0x24>
	__asm volatile
 800ded2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ded6:	f383 8811 	msr	BASEPRI, r3
 800deda:	f3bf 8f6f 	isb	sy
 800dede:	f3bf 8f4f 	dsb	sy
 800dee2:	607b      	str	r3, [r7, #4]
}
 800dee4:	bf00      	nop
 800dee6:	e7fe      	b.n	800dee6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dee8:	4b0a      	ldr	r3, [pc, #40]	; (800df14 <vPortExitCritical+0x50>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	3b01      	subs	r3, #1
 800deee:	4a09      	ldr	r2, [pc, #36]	; (800df14 <vPortExitCritical+0x50>)
 800def0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800def2:	4b08      	ldr	r3, [pc, #32]	; (800df14 <vPortExitCritical+0x50>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d105      	bne.n	800df06 <vPortExitCritical+0x42>
 800defa:	2300      	movs	r3, #0
 800defc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	f383 8811 	msr	BASEPRI, r3
}
 800df04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800df06:	bf00      	nop
 800df08:	370c      	adds	r7, #12
 800df0a:	46bd      	mov	sp, r7
 800df0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df10:	4770      	bx	lr
 800df12:	bf00      	nop
 800df14:	20000080 	.word	0x20000080
	...

0800df20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800df20:	f3ef 8009 	mrs	r0, PSP
 800df24:	f3bf 8f6f 	isb	sy
 800df28:	4b15      	ldr	r3, [pc, #84]	; (800df80 <pxCurrentTCBConst>)
 800df2a:	681a      	ldr	r2, [r3, #0]
 800df2c:	f01e 0f10 	tst.w	lr, #16
 800df30:	bf08      	it	eq
 800df32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800df36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df3a:	6010      	str	r0, [r2, #0]
 800df3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800df40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800df44:	f380 8811 	msr	BASEPRI, r0
 800df48:	f3bf 8f4f 	dsb	sy
 800df4c:	f3bf 8f6f 	isb	sy
 800df50:	f7fe ffaa 	bl	800cea8 <vTaskSwitchContext>
 800df54:	f04f 0000 	mov.w	r0, #0
 800df58:	f380 8811 	msr	BASEPRI, r0
 800df5c:	bc09      	pop	{r0, r3}
 800df5e:	6819      	ldr	r1, [r3, #0]
 800df60:	6808      	ldr	r0, [r1, #0]
 800df62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df66:	f01e 0f10 	tst.w	lr, #16
 800df6a:	bf08      	it	eq
 800df6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800df70:	f380 8809 	msr	PSP, r0
 800df74:	f3bf 8f6f 	isb	sy
 800df78:	4770      	bx	lr
 800df7a:	bf00      	nop
 800df7c:	f3af 8000 	nop.w

0800df80 <pxCurrentTCBConst>:
 800df80:	20000cc4 	.word	0x20000cc4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800df84:	bf00      	nop
 800df86:	bf00      	nop

0800df88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b082      	sub	sp, #8
 800df8c:	af00      	add	r7, sp, #0
	__asm volatile
 800df8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df92:	f383 8811 	msr	BASEPRI, r3
 800df96:	f3bf 8f6f 	isb	sy
 800df9a:	f3bf 8f4f 	dsb	sy
 800df9e:	607b      	str	r3, [r7, #4]
}
 800dfa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dfa2:	f7fe fec7 	bl	800cd34 <xTaskIncrementTick>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d003      	beq.n	800dfb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dfac:	4b06      	ldr	r3, [pc, #24]	; (800dfc8 <xPortSysTickHandler+0x40>)
 800dfae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfb2:	601a      	str	r2, [r3, #0]
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	f383 8811 	msr	BASEPRI, r3
}
 800dfbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dfc0:	bf00      	nop
 800dfc2:	3708      	adds	r7, #8
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}
 800dfc8:	e000ed04 	.word	0xe000ed04

0800dfcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dfcc:	b480      	push	{r7}
 800dfce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dfd0:	4b0b      	ldr	r3, [pc, #44]	; (800e000 <vPortSetupTimerInterrupt+0x34>)
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dfd6:	4b0b      	ldr	r3, [pc, #44]	; (800e004 <vPortSetupTimerInterrupt+0x38>)
 800dfd8:	2200      	movs	r2, #0
 800dfda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dfdc:	4b0a      	ldr	r3, [pc, #40]	; (800e008 <vPortSetupTimerInterrupt+0x3c>)
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	4a0a      	ldr	r2, [pc, #40]	; (800e00c <vPortSetupTimerInterrupt+0x40>)
 800dfe2:	fba2 2303 	umull	r2, r3, r2, r3
 800dfe6:	099b      	lsrs	r3, r3, #6
 800dfe8:	4a09      	ldr	r2, [pc, #36]	; (800e010 <vPortSetupTimerInterrupt+0x44>)
 800dfea:	3b01      	subs	r3, #1
 800dfec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dfee:	4b04      	ldr	r3, [pc, #16]	; (800e000 <vPortSetupTimerInterrupt+0x34>)
 800dff0:	2207      	movs	r2, #7
 800dff2:	601a      	str	r2, [r3, #0]
}
 800dff4:	bf00      	nop
 800dff6:	46bd      	mov	sp, r7
 800dff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffc:	4770      	bx	lr
 800dffe:	bf00      	nop
 800e000:	e000e010 	.word	0xe000e010
 800e004:	e000e018 	.word	0xe000e018
 800e008:	2000003c 	.word	0x2000003c
 800e00c:	10624dd3 	.word	0x10624dd3
 800e010:	e000e014 	.word	0xe000e014

0800e014 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e014:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e024 <vPortEnableVFP+0x10>
 800e018:	6801      	ldr	r1, [r0, #0]
 800e01a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e01e:	6001      	str	r1, [r0, #0]
 800e020:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e022:	bf00      	nop
 800e024:	e000ed88 	.word	0xe000ed88

0800e028 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e028:	b480      	push	{r7}
 800e02a:	b085      	sub	sp, #20
 800e02c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e02e:	f3ef 8305 	mrs	r3, IPSR
 800e032:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	2b0f      	cmp	r3, #15
 800e038:	d914      	bls.n	800e064 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e03a:	4a17      	ldr	r2, [pc, #92]	; (800e098 <vPortValidateInterruptPriority+0x70>)
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	4413      	add	r3, r2
 800e040:	781b      	ldrb	r3, [r3, #0]
 800e042:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e044:	4b15      	ldr	r3, [pc, #84]	; (800e09c <vPortValidateInterruptPriority+0x74>)
 800e046:	781b      	ldrb	r3, [r3, #0]
 800e048:	7afa      	ldrb	r2, [r7, #11]
 800e04a:	429a      	cmp	r2, r3
 800e04c:	d20a      	bcs.n	800e064 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e052:	f383 8811 	msr	BASEPRI, r3
 800e056:	f3bf 8f6f 	isb	sy
 800e05a:	f3bf 8f4f 	dsb	sy
 800e05e:	607b      	str	r3, [r7, #4]
}
 800e060:	bf00      	nop
 800e062:	e7fe      	b.n	800e062 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e064:	4b0e      	ldr	r3, [pc, #56]	; (800e0a0 <vPortValidateInterruptPriority+0x78>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e06c:	4b0d      	ldr	r3, [pc, #52]	; (800e0a4 <vPortValidateInterruptPriority+0x7c>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	429a      	cmp	r2, r3
 800e072:	d90a      	bls.n	800e08a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e078:	f383 8811 	msr	BASEPRI, r3
 800e07c:	f3bf 8f6f 	isb	sy
 800e080:	f3bf 8f4f 	dsb	sy
 800e084:	603b      	str	r3, [r7, #0]
}
 800e086:	bf00      	nop
 800e088:	e7fe      	b.n	800e088 <vPortValidateInterruptPriority+0x60>
	}
 800e08a:	bf00      	nop
 800e08c:	3714      	adds	r7, #20
 800e08e:	46bd      	mov	sp, r7
 800e090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e094:	4770      	bx	lr
 800e096:	bf00      	nop
 800e098:	e000e3f0 	.word	0xe000e3f0
 800e09c:	200012f0 	.word	0x200012f0
 800e0a0:	e000ed0c 	.word	0xe000ed0c
 800e0a4:	200012f4 	.word	0x200012f4

0800e0a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b08a      	sub	sp, #40	; 0x28
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e0b4:	f7fe fd82 	bl	800cbbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e0b8:	4b5b      	ldr	r3, [pc, #364]	; (800e228 <pvPortMalloc+0x180>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d101      	bne.n	800e0c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e0c0:	f000 f920 	bl	800e304 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e0c4:	4b59      	ldr	r3, [pc, #356]	; (800e22c <pvPortMalloc+0x184>)
 800e0c6:	681a      	ldr	r2, [r3, #0]
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	4013      	ands	r3, r2
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	f040 8093 	bne.w	800e1f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d01d      	beq.n	800e114 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e0d8:	2208      	movs	r2, #8
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	4413      	add	r3, r2
 800e0de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f003 0307 	and.w	r3, r3, #7
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d014      	beq.n	800e114 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f023 0307 	bic.w	r3, r3, #7
 800e0f0:	3308      	adds	r3, #8
 800e0f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f003 0307 	and.w	r3, r3, #7
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d00a      	beq.n	800e114 <pvPortMalloc+0x6c>
	__asm volatile
 800e0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e102:	f383 8811 	msr	BASEPRI, r3
 800e106:	f3bf 8f6f 	isb	sy
 800e10a:	f3bf 8f4f 	dsb	sy
 800e10e:	617b      	str	r3, [r7, #20]
}
 800e110:	bf00      	nop
 800e112:	e7fe      	b.n	800e112 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d06e      	beq.n	800e1f8 <pvPortMalloc+0x150>
 800e11a:	4b45      	ldr	r3, [pc, #276]	; (800e230 <pvPortMalloc+0x188>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	687a      	ldr	r2, [r7, #4]
 800e120:	429a      	cmp	r2, r3
 800e122:	d869      	bhi.n	800e1f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e124:	4b43      	ldr	r3, [pc, #268]	; (800e234 <pvPortMalloc+0x18c>)
 800e126:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e128:	4b42      	ldr	r3, [pc, #264]	; (800e234 <pvPortMalloc+0x18c>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e12e:	e004      	b.n	800e13a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e132:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e13c:	685b      	ldr	r3, [r3, #4]
 800e13e:	687a      	ldr	r2, [r7, #4]
 800e140:	429a      	cmp	r2, r3
 800e142:	d903      	bls.n	800e14c <pvPortMalloc+0xa4>
 800e144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d1f1      	bne.n	800e130 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e14c:	4b36      	ldr	r3, [pc, #216]	; (800e228 <pvPortMalloc+0x180>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e152:	429a      	cmp	r2, r3
 800e154:	d050      	beq.n	800e1f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e156:	6a3b      	ldr	r3, [r7, #32]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	2208      	movs	r2, #8
 800e15c:	4413      	add	r3, r2
 800e15e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e162:	681a      	ldr	r2, [r3, #0]
 800e164:	6a3b      	ldr	r3, [r7, #32]
 800e166:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e16a:	685a      	ldr	r2, [r3, #4]
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	1ad2      	subs	r2, r2, r3
 800e170:	2308      	movs	r3, #8
 800e172:	005b      	lsls	r3, r3, #1
 800e174:	429a      	cmp	r2, r3
 800e176:	d91f      	bls.n	800e1b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	4413      	add	r3, r2
 800e17e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e180:	69bb      	ldr	r3, [r7, #24]
 800e182:	f003 0307 	and.w	r3, r3, #7
 800e186:	2b00      	cmp	r3, #0
 800e188:	d00a      	beq.n	800e1a0 <pvPortMalloc+0xf8>
	__asm volatile
 800e18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e18e:	f383 8811 	msr	BASEPRI, r3
 800e192:	f3bf 8f6f 	isb	sy
 800e196:	f3bf 8f4f 	dsb	sy
 800e19a:	613b      	str	r3, [r7, #16]
}
 800e19c:	bf00      	nop
 800e19e:	e7fe      	b.n	800e19e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a2:	685a      	ldr	r2, [r3, #4]
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	1ad2      	subs	r2, r2, r3
 800e1a8:	69bb      	ldr	r3, [r7, #24]
 800e1aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ae:	687a      	ldr	r2, [r7, #4]
 800e1b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e1b2:	69b8      	ldr	r0, [r7, #24]
 800e1b4:	f000 f908 	bl	800e3c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e1b8:	4b1d      	ldr	r3, [pc, #116]	; (800e230 <pvPortMalloc+0x188>)
 800e1ba:	681a      	ldr	r2, [r3, #0]
 800e1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1be:	685b      	ldr	r3, [r3, #4]
 800e1c0:	1ad3      	subs	r3, r2, r3
 800e1c2:	4a1b      	ldr	r2, [pc, #108]	; (800e230 <pvPortMalloc+0x188>)
 800e1c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e1c6:	4b1a      	ldr	r3, [pc, #104]	; (800e230 <pvPortMalloc+0x188>)
 800e1c8:	681a      	ldr	r2, [r3, #0]
 800e1ca:	4b1b      	ldr	r3, [pc, #108]	; (800e238 <pvPortMalloc+0x190>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	429a      	cmp	r2, r3
 800e1d0:	d203      	bcs.n	800e1da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e1d2:	4b17      	ldr	r3, [pc, #92]	; (800e230 <pvPortMalloc+0x188>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	4a18      	ldr	r2, [pc, #96]	; (800e238 <pvPortMalloc+0x190>)
 800e1d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1dc:	685a      	ldr	r2, [r3, #4]
 800e1de:	4b13      	ldr	r3, [pc, #76]	; (800e22c <pvPortMalloc+0x184>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	431a      	orrs	r2, r3
 800e1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e1ee:	4b13      	ldr	r3, [pc, #76]	; (800e23c <pvPortMalloc+0x194>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	3301      	adds	r3, #1
 800e1f4:	4a11      	ldr	r2, [pc, #68]	; (800e23c <pvPortMalloc+0x194>)
 800e1f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e1f8:	f7fe fcee 	bl	800cbd8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e1fc:	69fb      	ldr	r3, [r7, #28]
 800e1fe:	f003 0307 	and.w	r3, r3, #7
 800e202:	2b00      	cmp	r3, #0
 800e204:	d00a      	beq.n	800e21c <pvPortMalloc+0x174>
	__asm volatile
 800e206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e20a:	f383 8811 	msr	BASEPRI, r3
 800e20e:	f3bf 8f6f 	isb	sy
 800e212:	f3bf 8f4f 	dsb	sy
 800e216:	60fb      	str	r3, [r7, #12]
}
 800e218:	bf00      	nop
 800e21a:	e7fe      	b.n	800e21a <pvPortMalloc+0x172>
	return pvReturn;
 800e21c:	69fb      	ldr	r3, [r7, #28]
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3728      	adds	r7, #40	; 0x28
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	20005950 	.word	0x20005950
 800e22c:	20005964 	.word	0x20005964
 800e230:	20005954 	.word	0x20005954
 800e234:	20005948 	.word	0x20005948
 800e238:	20005958 	.word	0x20005958
 800e23c:	2000595c 	.word	0x2000595c

0800e240 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b086      	sub	sp, #24
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d04d      	beq.n	800e2ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e252:	2308      	movs	r3, #8
 800e254:	425b      	negs	r3, r3
 800e256:	697a      	ldr	r2, [r7, #20]
 800e258:	4413      	add	r3, r2
 800e25a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	685a      	ldr	r2, [r3, #4]
 800e264:	4b24      	ldr	r3, [pc, #144]	; (800e2f8 <vPortFree+0xb8>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	4013      	ands	r3, r2
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d10a      	bne.n	800e284 <vPortFree+0x44>
	__asm volatile
 800e26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e272:	f383 8811 	msr	BASEPRI, r3
 800e276:	f3bf 8f6f 	isb	sy
 800e27a:	f3bf 8f4f 	dsb	sy
 800e27e:	60fb      	str	r3, [r7, #12]
}
 800e280:	bf00      	nop
 800e282:	e7fe      	b.n	800e282 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e284:	693b      	ldr	r3, [r7, #16]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d00a      	beq.n	800e2a2 <vPortFree+0x62>
	__asm volatile
 800e28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e290:	f383 8811 	msr	BASEPRI, r3
 800e294:	f3bf 8f6f 	isb	sy
 800e298:	f3bf 8f4f 	dsb	sy
 800e29c:	60bb      	str	r3, [r7, #8]
}
 800e29e:	bf00      	nop
 800e2a0:	e7fe      	b.n	800e2a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e2a2:	693b      	ldr	r3, [r7, #16]
 800e2a4:	685a      	ldr	r2, [r3, #4]
 800e2a6:	4b14      	ldr	r3, [pc, #80]	; (800e2f8 <vPortFree+0xb8>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	4013      	ands	r3, r2
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d01e      	beq.n	800e2ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d11a      	bne.n	800e2ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	685a      	ldr	r2, [r3, #4]
 800e2bc:	4b0e      	ldr	r3, [pc, #56]	; (800e2f8 <vPortFree+0xb8>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	43db      	mvns	r3, r3
 800e2c2:	401a      	ands	r2, r3
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e2c8:	f7fe fc78 	bl	800cbbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e2cc:	693b      	ldr	r3, [r7, #16]
 800e2ce:	685a      	ldr	r2, [r3, #4]
 800e2d0:	4b0a      	ldr	r3, [pc, #40]	; (800e2fc <vPortFree+0xbc>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	4413      	add	r3, r2
 800e2d6:	4a09      	ldr	r2, [pc, #36]	; (800e2fc <vPortFree+0xbc>)
 800e2d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e2da:	6938      	ldr	r0, [r7, #16]
 800e2dc:	f000 f874 	bl	800e3c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e2e0:	4b07      	ldr	r3, [pc, #28]	; (800e300 <vPortFree+0xc0>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	3301      	adds	r3, #1
 800e2e6:	4a06      	ldr	r2, [pc, #24]	; (800e300 <vPortFree+0xc0>)
 800e2e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e2ea:	f7fe fc75 	bl	800cbd8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e2ee:	bf00      	nop
 800e2f0:	3718      	adds	r7, #24
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}
 800e2f6:	bf00      	nop
 800e2f8:	20005964 	.word	0x20005964
 800e2fc:	20005954 	.word	0x20005954
 800e300:	20005960 	.word	0x20005960

0800e304 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e304:	b480      	push	{r7}
 800e306:	b085      	sub	sp, #20
 800e308:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e30a:	f244 6350 	movw	r3, #18000	; 0x4650
 800e30e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e310:	4b27      	ldr	r3, [pc, #156]	; (800e3b0 <prvHeapInit+0xac>)
 800e312:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	f003 0307 	and.w	r3, r3, #7
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d00c      	beq.n	800e338 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	3307      	adds	r3, #7
 800e322:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	f023 0307 	bic.w	r3, r3, #7
 800e32a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e32c:	68ba      	ldr	r2, [r7, #8]
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	1ad3      	subs	r3, r2, r3
 800e332:	4a1f      	ldr	r2, [pc, #124]	; (800e3b0 <prvHeapInit+0xac>)
 800e334:	4413      	add	r3, r2
 800e336:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e33c:	4a1d      	ldr	r2, [pc, #116]	; (800e3b4 <prvHeapInit+0xb0>)
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e342:	4b1c      	ldr	r3, [pc, #112]	; (800e3b4 <prvHeapInit+0xb0>)
 800e344:	2200      	movs	r2, #0
 800e346:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	68ba      	ldr	r2, [r7, #8]
 800e34c:	4413      	add	r3, r2
 800e34e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e350:	2208      	movs	r2, #8
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	1a9b      	subs	r3, r3, r2
 800e356:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f023 0307 	bic.w	r3, r3, #7
 800e35e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	4a15      	ldr	r2, [pc, #84]	; (800e3b8 <prvHeapInit+0xb4>)
 800e364:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e366:	4b14      	ldr	r3, [pc, #80]	; (800e3b8 <prvHeapInit+0xb4>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	2200      	movs	r2, #0
 800e36c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e36e:	4b12      	ldr	r3, [pc, #72]	; (800e3b8 <prvHeapInit+0xb4>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	2200      	movs	r2, #0
 800e374:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	68fa      	ldr	r2, [r7, #12]
 800e37e:	1ad2      	subs	r2, r2, r3
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e384:	4b0c      	ldr	r3, [pc, #48]	; (800e3b8 <prvHeapInit+0xb4>)
 800e386:	681a      	ldr	r2, [r3, #0]
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	685b      	ldr	r3, [r3, #4]
 800e390:	4a0a      	ldr	r2, [pc, #40]	; (800e3bc <prvHeapInit+0xb8>)
 800e392:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	685b      	ldr	r3, [r3, #4]
 800e398:	4a09      	ldr	r2, [pc, #36]	; (800e3c0 <prvHeapInit+0xbc>)
 800e39a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e39c:	4b09      	ldr	r3, [pc, #36]	; (800e3c4 <prvHeapInit+0xc0>)
 800e39e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e3a2:	601a      	str	r2, [r3, #0]
}
 800e3a4:	bf00      	nop
 800e3a6:	3714      	adds	r7, #20
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ae:	4770      	bx	lr
 800e3b0:	200012f8 	.word	0x200012f8
 800e3b4:	20005948 	.word	0x20005948
 800e3b8:	20005950 	.word	0x20005950
 800e3bc:	20005958 	.word	0x20005958
 800e3c0:	20005954 	.word	0x20005954
 800e3c4:	20005964 	.word	0x20005964

0800e3c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b085      	sub	sp, #20
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e3d0:	4b28      	ldr	r3, [pc, #160]	; (800e474 <prvInsertBlockIntoFreeList+0xac>)
 800e3d2:	60fb      	str	r3, [r7, #12]
 800e3d4:	e002      	b.n	800e3dc <prvInsertBlockIntoFreeList+0x14>
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	60fb      	str	r3, [r7, #12]
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	687a      	ldr	r2, [r7, #4]
 800e3e2:	429a      	cmp	r2, r3
 800e3e4:	d8f7      	bhi.n	800e3d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	685b      	ldr	r3, [r3, #4]
 800e3ee:	68ba      	ldr	r2, [r7, #8]
 800e3f0:	4413      	add	r3, r2
 800e3f2:	687a      	ldr	r2, [r7, #4]
 800e3f4:	429a      	cmp	r2, r3
 800e3f6:	d108      	bne.n	800e40a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	685a      	ldr	r2, [r3, #4]
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	685b      	ldr	r3, [r3, #4]
 800e400:	441a      	add	r2, r3
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	685b      	ldr	r3, [r3, #4]
 800e412:	68ba      	ldr	r2, [r7, #8]
 800e414:	441a      	add	r2, r3
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d118      	bne.n	800e450 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	681a      	ldr	r2, [r3, #0]
 800e422:	4b15      	ldr	r3, [pc, #84]	; (800e478 <prvInsertBlockIntoFreeList+0xb0>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	429a      	cmp	r2, r3
 800e428:	d00d      	beq.n	800e446 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	685a      	ldr	r2, [r3, #4]
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	685b      	ldr	r3, [r3, #4]
 800e434:	441a      	add	r2, r3
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	681a      	ldr	r2, [r3, #0]
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	601a      	str	r2, [r3, #0]
 800e444:	e008      	b.n	800e458 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e446:	4b0c      	ldr	r3, [pc, #48]	; (800e478 <prvInsertBlockIntoFreeList+0xb0>)
 800e448:	681a      	ldr	r2, [r3, #0]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	601a      	str	r2, [r3, #0]
 800e44e:	e003      	b.n	800e458 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	681a      	ldr	r2, [r3, #0]
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e458:	68fa      	ldr	r2, [r7, #12]
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	429a      	cmp	r2, r3
 800e45e:	d002      	beq.n	800e466 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	687a      	ldr	r2, [r7, #4]
 800e464:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e466:	bf00      	nop
 800e468:	3714      	adds	r7, #20
 800e46a:	46bd      	mov	sp, r7
 800e46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e470:	4770      	bx	lr
 800e472:	bf00      	nop
 800e474:	20005948 	.word	0x20005948
 800e478:	20005950 	.word	0x20005950

0800e47c <_Znwj>:
 800e47c:	2801      	cmp	r0, #1
 800e47e:	bf38      	it	cc
 800e480:	2001      	movcc	r0, #1
 800e482:	b510      	push	{r4, lr}
 800e484:	4604      	mov	r4, r0
 800e486:	4620      	mov	r0, r4
 800e488:	f000 f95a 	bl	800e740 <malloc>
 800e48c:	b930      	cbnz	r0, 800e49c <_Znwj+0x20>
 800e48e:	f000 f81b 	bl	800e4c8 <_ZSt15get_new_handlerv>
 800e492:	b908      	cbnz	r0, 800e498 <_Znwj+0x1c>
 800e494:	f000 f828 	bl	800e4e8 <abort>
 800e498:	4780      	blx	r0
 800e49a:	e7f4      	b.n	800e486 <_Znwj+0xa>
 800e49c:	bd10      	pop	{r4, pc}

0800e49e <__cxa_pure_virtual>:
 800e49e:	b508      	push	{r3, lr}
 800e4a0:	f000 f80c 	bl	800e4bc <_ZSt9terminatev>

0800e4a4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800e4a4:	b508      	push	{r3, lr}
 800e4a6:	4780      	blx	r0
 800e4a8:	f000 f81e 	bl	800e4e8 <abort>

0800e4ac <_ZSt13get_terminatev>:
 800e4ac:	4b02      	ldr	r3, [pc, #8]	; (800e4b8 <_ZSt13get_terminatev+0xc>)
 800e4ae:	6818      	ldr	r0, [r3, #0]
 800e4b0:	f3bf 8f5b 	dmb	ish
 800e4b4:	4770      	bx	lr
 800e4b6:	bf00      	nop
 800e4b8:	20000084 	.word	0x20000084

0800e4bc <_ZSt9terminatev>:
 800e4bc:	b508      	push	{r3, lr}
 800e4be:	f7ff fff5 	bl	800e4ac <_ZSt13get_terminatev>
 800e4c2:	f7ff ffef 	bl	800e4a4 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800e4c8 <_ZSt15get_new_handlerv>:
 800e4c8:	4b02      	ldr	r3, [pc, #8]	; (800e4d4 <_ZSt15get_new_handlerv+0xc>)
 800e4ca:	6818      	ldr	r0, [r3, #0]
 800e4cc:	f3bf 8f5b 	dmb	ish
 800e4d0:	4770      	bx	lr
 800e4d2:	bf00      	nop
 800e4d4:	20005968 	.word	0x20005968

0800e4d8 <nan>:
 800e4d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e4e0 <nan+0x8>
 800e4dc:	4770      	bx	lr
 800e4de:	bf00      	nop
 800e4e0:	00000000 	.word	0x00000000
 800e4e4:	7ff80000 	.word	0x7ff80000

0800e4e8 <abort>:
 800e4e8:	b508      	push	{r3, lr}
 800e4ea:	2006      	movs	r0, #6
 800e4ec:	f001 f9ba 	bl	800f864 <raise>
 800e4f0:	2001      	movs	r0, #1
 800e4f2:	f005 f9cd 	bl	8013890 <_exit>
	...

0800e4f8 <__errno>:
 800e4f8:	4b01      	ldr	r3, [pc, #4]	; (800e500 <__errno+0x8>)
 800e4fa:	6818      	ldr	r0, [r3, #0]
 800e4fc:	4770      	bx	lr
 800e4fe:	bf00      	nop
 800e500:	20000088 	.word	0x20000088

0800e504 <std>:
 800e504:	2300      	movs	r3, #0
 800e506:	b510      	push	{r4, lr}
 800e508:	4604      	mov	r4, r0
 800e50a:	e9c0 3300 	strd	r3, r3, [r0]
 800e50e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e512:	6083      	str	r3, [r0, #8]
 800e514:	8181      	strh	r1, [r0, #12]
 800e516:	6643      	str	r3, [r0, #100]	; 0x64
 800e518:	81c2      	strh	r2, [r0, #14]
 800e51a:	6183      	str	r3, [r0, #24]
 800e51c:	4619      	mov	r1, r3
 800e51e:	2208      	movs	r2, #8
 800e520:	305c      	adds	r0, #92	; 0x5c
 800e522:	f000 f93d 	bl	800e7a0 <memset>
 800e526:	4b05      	ldr	r3, [pc, #20]	; (800e53c <std+0x38>)
 800e528:	6263      	str	r3, [r4, #36]	; 0x24
 800e52a:	4b05      	ldr	r3, [pc, #20]	; (800e540 <std+0x3c>)
 800e52c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e52e:	4b05      	ldr	r3, [pc, #20]	; (800e544 <std+0x40>)
 800e530:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e532:	4b05      	ldr	r3, [pc, #20]	; (800e548 <std+0x44>)
 800e534:	6224      	str	r4, [r4, #32]
 800e536:	6323      	str	r3, [r4, #48]	; 0x30
 800e538:	bd10      	pop	{r4, pc}
 800e53a:	bf00      	nop
 800e53c:	0800f935 	.word	0x0800f935
 800e540:	0800f95b 	.word	0x0800f95b
 800e544:	0800f993 	.word	0x0800f993
 800e548:	0800f9b7 	.word	0x0800f9b7

0800e54c <_cleanup_r>:
 800e54c:	4901      	ldr	r1, [pc, #4]	; (800e554 <_cleanup_r+0x8>)
 800e54e:	f000 b8af 	b.w	800e6b0 <_fwalk_reent>
 800e552:	bf00      	nop
 800e554:	08011845 	.word	0x08011845

0800e558 <__sfmoreglue>:
 800e558:	b570      	push	{r4, r5, r6, lr}
 800e55a:	1e4a      	subs	r2, r1, #1
 800e55c:	2568      	movs	r5, #104	; 0x68
 800e55e:	4355      	muls	r5, r2
 800e560:	460e      	mov	r6, r1
 800e562:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e566:	f000 f973 	bl	800e850 <_malloc_r>
 800e56a:	4604      	mov	r4, r0
 800e56c:	b140      	cbz	r0, 800e580 <__sfmoreglue+0x28>
 800e56e:	2100      	movs	r1, #0
 800e570:	e9c0 1600 	strd	r1, r6, [r0]
 800e574:	300c      	adds	r0, #12
 800e576:	60a0      	str	r0, [r4, #8]
 800e578:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e57c:	f000 f910 	bl	800e7a0 <memset>
 800e580:	4620      	mov	r0, r4
 800e582:	bd70      	pop	{r4, r5, r6, pc}

0800e584 <__sfp_lock_acquire>:
 800e584:	4801      	ldr	r0, [pc, #4]	; (800e58c <__sfp_lock_acquire+0x8>)
 800e586:	f000 b8d8 	b.w	800e73a <__retarget_lock_acquire_recursive>
 800e58a:	bf00      	nop
 800e58c:	200062e0 	.word	0x200062e0

0800e590 <__sfp_lock_release>:
 800e590:	4801      	ldr	r0, [pc, #4]	; (800e598 <__sfp_lock_release+0x8>)
 800e592:	f000 b8d3 	b.w	800e73c <__retarget_lock_release_recursive>
 800e596:	bf00      	nop
 800e598:	200062e0 	.word	0x200062e0

0800e59c <__sinit_lock_acquire>:
 800e59c:	4801      	ldr	r0, [pc, #4]	; (800e5a4 <__sinit_lock_acquire+0x8>)
 800e59e:	f000 b8cc 	b.w	800e73a <__retarget_lock_acquire_recursive>
 800e5a2:	bf00      	nop
 800e5a4:	200062db 	.word	0x200062db

0800e5a8 <__sinit_lock_release>:
 800e5a8:	4801      	ldr	r0, [pc, #4]	; (800e5b0 <__sinit_lock_release+0x8>)
 800e5aa:	f000 b8c7 	b.w	800e73c <__retarget_lock_release_recursive>
 800e5ae:	bf00      	nop
 800e5b0:	200062db 	.word	0x200062db

0800e5b4 <__sinit>:
 800e5b4:	b510      	push	{r4, lr}
 800e5b6:	4604      	mov	r4, r0
 800e5b8:	f7ff fff0 	bl	800e59c <__sinit_lock_acquire>
 800e5bc:	69a3      	ldr	r3, [r4, #24]
 800e5be:	b11b      	cbz	r3, 800e5c8 <__sinit+0x14>
 800e5c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5c4:	f7ff bff0 	b.w	800e5a8 <__sinit_lock_release>
 800e5c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e5cc:	6523      	str	r3, [r4, #80]	; 0x50
 800e5ce:	4b13      	ldr	r3, [pc, #76]	; (800e61c <__sinit+0x68>)
 800e5d0:	4a13      	ldr	r2, [pc, #76]	; (800e620 <__sinit+0x6c>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	62a2      	str	r2, [r4, #40]	; 0x28
 800e5d6:	42a3      	cmp	r3, r4
 800e5d8:	bf04      	itt	eq
 800e5da:	2301      	moveq	r3, #1
 800e5dc:	61a3      	streq	r3, [r4, #24]
 800e5de:	4620      	mov	r0, r4
 800e5e0:	f000 f820 	bl	800e624 <__sfp>
 800e5e4:	6060      	str	r0, [r4, #4]
 800e5e6:	4620      	mov	r0, r4
 800e5e8:	f000 f81c 	bl	800e624 <__sfp>
 800e5ec:	60a0      	str	r0, [r4, #8]
 800e5ee:	4620      	mov	r0, r4
 800e5f0:	f000 f818 	bl	800e624 <__sfp>
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	60e0      	str	r0, [r4, #12]
 800e5f8:	2104      	movs	r1, #4
 800e5fa:	6860      	ldr	r0, [r4, #4]
 800e5fc:	f7ff ff82 	bl	800e504 <std>
 800e600:	68a0      	ldr	r0, [r4, #8]
 800e602:	2201      	movs	r2, #1
 800e604:	2109      	movs	r1, #9
 800e606:	f7ff ff7d 	bl	800e504 <std>
 800e60a:	68e0      	ldr	r0, [r4, #12]
 800e60c:	2202      	movs	r2, #2
 800e60e:	2112      	movs	r1, #18
 800e610:	f7ff ff78 	bl	800e504 <std>
 800e614:	2301      	movs	r3, #1
 800e616:	61a3      	str	r3, [r4, #24]
 800e618:	e7d2      	b.n	800e5c0 <__sinit+0xc>
 800e61a:	bf00      	nop
 800e61c:	0801498c 	.word	0x0801498c
 800e620:	0800e54d 	.word	0x0800e54d

0800e624 <__sfp>:
 800e624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e626:	4607      	mov	r7, r0
 800e628:	f7ff ffac 	bl	800e584 <__sfp_lock_acquire>
 800e62c:	4b1e      	ldr	r3, [pc, #120]	; (800e6a8 <__sfp+0x84>)
 800e62e:	681e      	ldr	r6, [r3, #0]
 800e630:	69b3      	ldr	r3, [r6, #24]
 800e632:	b913      	cbnz	r3, 800e63a <__sfp+0x16>
 800e634:	4630      	mov	r0, r6
 800e636:	f7ff ffbd 	bl	800e5b4 <__sinit>
 800e63a:	3648      	adds	r6, #72	; 0x48
 800e63c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e640:	3b01      	subs	r3, #1
 800e642:	d503      	bpl.n	800e64c <__sfp+0x28>
 800e644:	6833      	ldr	r3, [r6, #0]
 800e646:	b30b      	cbz	r3, 800e68c <__sfp+0x68>
 800e648:	6836      	ldr	r6, [r6, #0]
 800e64a:	e7f7      	b.n	800e63c <__sfp+0x18>
 800e64c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e650:	b9d5      	cbnz	r5, 800e688 <__sfp+0x64>
 800e652:	4b16      	ldr	r3, [pc, #88]	; (800e6ac <__sfp+0x88>)
 800e654:	60e3      	str	r3, [r4, #12]
 800e656:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e65a:	6665      	str	r5, [r4, #100]	; 0x64
 800e65c:	f000 f86c 	bl	800e738 <__retarget_lock_init_recursive>
 800e660:	f7ff ff96 	bl	800e590 <__sfp_lock_release>
 800e664:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e668:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e66c:	6025      	str	r5, [r4, #0]
 800e66e:	61a5      	str	r5, [r4, #24]
 800e670:	2208      	movs	r2, #8
 800e672:	4629      	mov	r1, r5
 800e674:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e678:	f000 f892 	bl	800e7a0 <memset>
 800e67c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e680:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e684:	4620      	mov	r0, r4
 800e686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e688:	3468      	adds	r4, #104	; 0x68
 800e68a:	e7d9      	b.n	800e640 <__sfp+0x1c>
 800e68c:	2104      	movs	r1, #4
 800e68e:	4638      	mov	r0, r7
 800e690:	f7ff ff62 	bl	800e558 <__sfmoreglue>
 800e694:	4604      	mov	r4, r0
 800e696:	6030      	str	r0, [r6, #0]
 800e698:	2800      	cmp	r0, #0
 800e69a:	d1d5      	bne.n	800e648 <__sfp+0x24>
 800e69c:	f7ff ff78 	bl	800e590 <__sfp_lock_release>
 800e6a0:	230c      	movs	r3, #12
 800e6a2:	603b      	str	r3, [r7, #0]
 800e6a4:	e7ee      	b.n	800e684 <__sfp+0x60>
 800e6a6:	bf00      	nop
 800e6a8:	0801498c 	.word	0x0801498c
 800e6ac:	ffff0001 	.word	0xffff0001

0800e6b0 <_fwalk_reent>:
 800e6b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6b4:	4606      	mov	r6, r0
 800e6b6:	4688      	mov	r8, r1
 800e6b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e6bc:	2700      	movs	r7, #0
 800e6be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e6c2:	f1b9 0901 	subs.w	r9, r9, #1
 800e6c6:	d505      	bpl.n	800e6d4 <_fwalk_reent+0x24>
 800e6c8:	6824      	ldr	r4, [r4, #0]
 800e6ca:	2c00      	cmp	r4, #0
 800e6cc:	d1f7      	bne.n	800e6be <_fwalk_reent+0xe>
 800e6ce:	4638      	mov	r0, r7
 800e6d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6d4:	89ab      	ldrh	r3, [r5, #12]
 800e6d6:	2b01      	cmp	r3, #1
 800e6d8:	d907      	bls.n	800e6ea <_fwalk_reent+0x3a>
 800e6da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e6de:	3301      	adds	r3, #1
 800e6e0:	d003      	beq.n	800e6ea <_fwalk_reent+0x3a>
 800e6e2:	4629      	mov	r1, r5
 800e6e4:	4630      	mov	r0, r6
 800e6e6:	47c0      	blx	r8
 800e6e8:	4307      	orrs	r7, r0
 800e6ea:	3568      	adds	r5, #104	; 0x68
 800e6ec:	e7e9      	b.n	800e6c2 <_fwalk_reent+0x12>
	...

0800e6f0 <__libc_init_array>:
 800e6f0:	b570      	push	{r4, r5, r6, lr}
 800e6f2:	4d0d      	ldr	r5, [pc, #52]	; (800e728 <__libc_init_array+0x38>)
 800e6f4:	4c0d      	ldr	r4, [pc, #52]	; (800e72c <__libc_init_array+0x3c>)
 800e6f6:	1b64      	subs	r4, r4, r5
 800e6f8:	10a4      	asrs	r4, r4, #2
 800e6fa:	2600      	movs	r6, #0
 800e6fc:	42a6      	cmp	r6, r4
 800e6fe:	d109      	bne.n	800e714 <__libc_init_array+0x24>
 800e700:	4d0b      	ldr	r5, [pc, #44]	; (800e730 <__libc_init_array+0x40>)
 800e702:	4c0c      	ldr	r4, [pc, #48]	; (800e734 <__libc_init_array+0x44>)
 800e704:	f005 f8c6 	bl	8013894 <_init>
 800e708:	1b64      	subs	r4, r4, r5
 800e70a:	10a4      	asrs	r4, r4, #2
 800e70c:	2600      	movs	r6, #0
 800e70e:	42a6      	cmp	r6, r4
 800e710:	d105      	bne.n	800e71e <__libc_init_array+0x2e>
 800e712:	bd70      	pop	{r4, r5, r6, pc}
 800e714:	f855 3b04 	ldr.w	r3, [r5], #4
 800e718:	4798      	blx	r3
 800e71a:	3601      	adds	r6, #1
 800e71c:	e7ee      	b.n	800e6fc <__libc_init_array+0xc>
 800e71e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e722:	4798      	blx	r3
 800e724:	3601      	adds	r6, #1
 800e726:	e7f2      	b.n	800e70e <__libc_init_array+0x1e>
 800e728:	08014cf8 	.word	0x08014cf8
 800e72c:	08014cf8 	.word	0x08014cf8
 800e730:	08014cf8 	.word	0x08014cf8
 800e734:	08014d00 	.word	0x08014d00

0800e738 <__retarget_lock_init_recursive>:
 800e738:	4770      	bx	lr

0800e73a <__retarget_lock_acquire_recursive>:
 800e73a:	4770      	bx	lr

0800e73c <__retarget_lock_release_recursive>:
 800e73c:	4770      	bx	lr
	...

0800e740 <malloc>:
 800e740:	4b02      	ldr	r3, [pc, #8]	; (800e74c <malloc+0xc>)
 800e742:	4601      	mov	r1, r0
 800e744:	6818      	ldr	r0, [r3, #0]
 800e746:	f000 b883 	b.w	800e850 <_malloc_r>
 800e74a:	bf00      	nop
 800e74c:	20000088 	.word	0x20000088

0800e750 <memcpy>:
 800e750:	440a      	add	r2, r1
 800e752:	4291      	cmp	r1, r2
 800e754:	f100 33ff 	add.w	r3, r0, #4294967295
 800e758:	d100      	bne.n	800e75c <memcpy+0xc>
 800e75a:	4770      	bx	lr
 800e75c:	b510      	push	{r4, lr}
 800e75e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e762:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e766:	4291      	cmp	r1, r2
 800e768:	d1f9      	bne.n	800e75e <memcpy+0xe>
 800e76a:	bd10      	pop	{r4, pc}

0800e76c <memmove>:
 800e76c:	4288      	cmp	r0, r1
 800e76e:	b510      	push	{r4, lr}
 800e770:	eb01 0402 	add.w	r4, r1, r2
 800e774:	d902      	bls.n	800e77c <memmove+0x10>
 800e776:	4284      	cmp	r4, r0
 800e778:	4623      	mov	r3, r4
 800e77a:	d807      	bhi.n	800e78c <memmove+0x20>
 800e77c:	1e43      	subs	r3, r0, #1
 800e77e:	42a1      	cmp	r1, r4
 800e780:	d008      	beq.n	800e794 <memmove+0x28>
 800e782:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e786:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e78a:	e7f8      	b.n	800e77e <memmove+0x12>
 800e78c:	4402      	add	r2, r0
 800e78e:	4601      	mov	r1, r0
 800e790:	428a      	cmp	r2, r1
 800e792:	d100      	bne.n	800e796 <memmove+0x2a>
 800e794:	bd10      	pop	{r4, pc}
 800e796:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e79a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e79e:	e7f7      	b.n	800e790 <memmove+0x24>

0800e7a0 <memset>:
 800e7a0:	4402      	add	r2, r0
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	4293      	cmp	r3, r2
 800e7a6:	d100      	bne.n	800e7aa <memset+0xa>
 800e7a8:	4770      	bx	lr
 800e7aa:	f803 1b01 	strb.w	r1, [r3], #1
 800e7ae:	e7f9      	b.n	800e7a4 <memset+0x4>

0800e7b0 <_free_r>:
 800e7b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e7b2:	2900      	cmp	r1, #0
 800e7b4:	d048      	beq.n	800e848 <_free_r+0x98>
 800e7b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7ba:	9001      	str	r0, [sp, #4]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	f1a1 0404 	sub.w	r4, r1, #4
 800e7c2:	bfb8      	it	lt
 800e7c4:	18e4      	addlt	r4, r4, r3
 800e7c6:	f003 fc87 	bl	80120d8 <__malloc_lock>
 800e7ca:	4a20      	ldr	r2, [pc, #128]	; (800e84c <_free_r+0x9c>)
 800e7cc:	9801      	ldr	r0, [sp, #4]
 800e7ce:	6813      	ldr	r3, [r2, #0]
 800e7d0:	4615      	mov	r5, r2
 800e7d2:	b933      	cbnz	r3, 800e7e2 <_free_r+0x32>
 800e7d4:	6063      	str	r3, [r4, #4]
 800e7d6:	6014      	str	r4, [r2, #0]
 800e7d8:	b003      	add	sp, #12
 800e7da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e7de:	f003 bc81 	b.w	80120e4 <__malloc_unlock>
 800e7e2:	42a3      	cmp	r3, r4
 800e7e4:	d90b      	bls.n	800e7fe <_free_r+0x4e>
 800e7e6:	6821      	ldr	r1, [r4, #0]
 800e7e8:	1862      	adds	r2, r4, r1
 800e7ea:	4293      	cmp	r3, r2
 800e7ec:	bf04      	itt	eq
 800e7ee:	681a      	ldreq	r2, [r3, #0]
 800e7f0:	685b      	ldreq	r3, [r3, #4]
 800e7f2:	6063      	str	r3, [r4, #4]
 800e7f4:	bf04      	itt	eq
 800e7f6:	1852      	addeq	r2, r2, r1
 800e7f8:	6022      	streq	r2, [r4, #0]
 800e7fa:	602c      	str	r4, [r5, #0]
 800e7fc:	e7ec      	b.n	800e7d8 <_free_r+0x28>
 800e7fe:	461a      	mov	r2, r3
 800e800:	685b      	ldr	r3, [r3, #4]
 800e802:	b10b      	cbz	r3, 800e808 <_free_r+0x58>
 800e804:	42a3      	cmp	r3, r4
 800e806:	d9fa      	bls.n	800e7fe <_free_r+0x4e>
 800e808:	6811      	ldr	r1, [r2, #0]
 800e80a:	1855      	adds	r5, r2, r1
 800e80c:	42a5      	cmp	r5, r4
 800e80e:	d10b      	bne.n	800e828 <_free_r+0x78>
 800e810:	6824      	ldr	r4, [r4, #0]
 800e812:	4421      	add	r1, r4
 800e814:	1854      	adds	r4, r2, r1
 800e816:	42a3      	cmp	r3, r4
 800e818:	6011      	str	r1, [r2, #0]
 800e81a:	d1dd      	bne.n	800e7d8 <_free_r+0x28>
 800e81c:	681c      	ldr	r4, [r3, #0]
 800e81e:	685b      	ldr	r3, [r3, #4]
 800e820:	6053      	str	r3, [r2, #4]
 800e822:	4421      	add	r1, r4
 800e824:	6011      	str	r1, [r2, #0]
 800e826:	e7d7      	b.n	800e7d8 <_free_r+0x28>
 800e828:	d902      	bls.n	800e830 <_free_r+0x80>
 800e82a:	230c      	movs	r3, #12
 800e82c:	6003      	str	r3, [r0, #0]
 800e82e:	e7d3      	b.n	800e7d8 <_free_r+0x28>
 800e830:	6825      	ldr	r5, [r4, #0]
 800e832:	1961      	adds	r1, r4, r5
 800e834:	428b      	cmp	r3, r1
 800e836:	bf04      	itt	eq
 800e838:	6819      	ldreq	r1, [r3, #0]
 800e83a:	685b      	ldreq	r3, [r3, #4]
 800e83c:	6063      	str	r3, [r4, #4]
 800e83e:	bf04      	itt	eq
 800e840:	1949      	addeq	r1, r1, r5
 800e842:	6021      	streq	r1, [r4, #0]
 800e844:	6054      	str	r4, [r2, #4]
 800e846:	e7c7      	b.n	800e7d8 <_free_r+0x28>
 800e848:	b003      	add	sp, #12
 800e84a:	bd30      	pop	{r4, r5, pc}
 800e84c:	2000596c 	.word	0x2000596c

0800e850 <_malloc_r>:
 800e850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e852:	1ccd      	adds	r5, r1, #3
 800e854:	f025 0503 	bic.w	r5, r5, #3
 800e858:	3508      	adds	r5, #8
 800e85a:	2d0c      	cmp	r5, #12
 800e85c:	bf38      	it	cc
 800e85e:	250c      	movcc	r5, #12
 800e860:	2d00      	cmp	r5, #0
 800e862:	4606      	mov	r6, r0
 800e864:	db01      	blt.n	800e86a <_malloc_r+0x1a>
 800e866:	42a9      	cmp	r1, r5
 800e868:	d903      	bls.n	800e872 <_malloc_r+0x22>
 800e86a:	230c      	movs	r3, #12
 800e86c:	6033      	str	r3, [r6, #0]
 800e86e:	2000      	movs	r0, #0
 800e870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e872:	f003 fc31 	bl	80120d8 <__malloc_lock>
 800e876:	4921      	ldr	r1, [pc, #132]	; (800e8fc <_malloc_r+0xac>)
 800e878:	680a      	ldr	r2, [r1, #0]
 800e87a:	4614      	mov	r4, r2
 800e87c:	b99c      	cbnz	r4, 800e8a6 <_malloc_r+0x56>
 800e87e:	4f20      	ldr	r7, [pc, #128]	; (800e900 <_malloc_r+0xb0>)
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	b923      	cbnz	r3, 800e88e <_malloc_r+0x3e>
 800e884:	4621      	mov	r1, r4
 800e886:	4630      	mov	r0, r6
 800e888:	f000 ffae 	bl	800f7e8 <_sbrk_r>
 800e88c:	6038      	str	r0, [r7, #0]
 800e88e:	4629      	mov	r1, r5
 800e890:	4630      	mov	r0, r6
 800e892:	f000 ffa9 	bl	800f7e8 <_sbrk_r>
 800e896:	1c43      	adds	r3, r0, #1
 800e898:	d123      	bne.n	800e8e2 <_malloc_r+0x92>
 800e89a:	230c      	movs	r3, #12
 800e89c:	6033      	str	r3, [r6, #0]
 800e89e:	4630      	mov	r0, r6
 800e8a0:	f003 fc20 	bl	80120e4 <__malloc_unlock>
 800e8a4:	e7e3      	b.n	800e86e <_malloc_r+0x1e>
 800e8a6:	6823      	ldr	r3, [r4, #0]
 800e8a8:	1b5b      	subs	r3, r3, r5
 800e8aa:	d417      	bmi.n	800e8dc <_malloc_r+0x8c>
 800e8ac:	2b0b      	cmp	r3, #11
 800e8ae:	d903      	bls.n	800e8b8 <_malloc_r+0x68>
 800e8b0:	6023      	str	r3, [r4, #0]
 800e8b2:	441c      	add	r4, r3
 800e8b4:	6025      	str	r5, [r4, #0]
 800e8b6:	e004      	b.n	800e8c2 <_malloc_r+0x72>
 800e8b8:	6863      	ldr	r3, [r4, #4]
 800e8ba:	42a2      	cmp	r2, r4
 800e8bc:	bf0c      	ite	eq
 800e8be:	600b      	streq	r3, [r1, #0]
 800e8c0:	6053      	strne	r3, [r2, #4]
 800e8c2:	4630      	mov	r0, r6
 800e8c4:	f003 fc0e 	bl	80120e4 <__malloc_unlock>
 800e8c8:	f104 000b 	add.w	r0, r4, #11
 800e8cc:	1d23      	adds	r3, r4, #4
 800e8ce:	f020 0007 	bic.w	r0, r0, #7
 800e8d2:	1ac2      	subs	r2, r0, r3
 800e8d4:	d0cc      	beq.n	800e870 <_malloc_r+0x20>
 800e8d6:	1a1b      	subs	r3, r3, r0
 800e8d8:	50a3      	str	r3, [r4, r2]
 800e8da:	e7c9      	b.n	800e870 <_malloc_r+0x20>
 800e8dc:	4622      	mov	r2, r4
 800e8de:	6864      	ldr	r4, [r4, #4]
 800e8e0:	e7cc      	b.n	800e87c <_malloc_r+0x2c>
 800e8e2:	1cc4      	adds	r4, r0, #3
 800e8e4:	f024 0403 	bic.w	r4, r4, #3
 800e8e8:	42a0      	cmp	r0, r4
 800e8ea:	d0e3      	beq.n	800e8b4 <_malloc_r+0x64>
 800e8ec:	1a21      	subs	r1, r4, r0
 800e8ee:	4630      	mov	r0, r6
 800e8f0:	f000 ff7a 	bl	800f7e8 <_sbrk_r>
 800e8f4:	3001      	adds	r0, #1
 800e8f6:	d1dd      	bne.n	800e8b4 <_malloc_r+0x64>
 800e8f8:	e7cf      	b.n	800e89a <_malloc_r+0x4a>
 800e8fa:	bf00      	nop
 800e8fc:	2000596c 	.word	0x2000596c
 800e900:	20005970 	.word	0x20005970

0800e904 <__cvt>:
 800e904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e908:	ec55 4b10 	vmov	r4, r5, d0
 800e90c:	2d00      	cmp	r5, #0
 800e90e:	460e      	mov	r6, r1
 800e910:	4619      	mov	r1, r3
 800e912:	462b      	mov	r3, r5
 800e914:	bfbb      	ittet	lt
 800e916:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e91a:	461d      	movlt	r5, r3
 800e91c:	2300      	movge	r3, #0
 800e91e:	232d      	movlt	r3, #45	; 0x2d
 800e920:	700b      	strb	r3, [r1, #0]
 800e922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e924:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e928:	4691      	mov	r9, r2
 800e92a:	f023 0820 	bic.w	r8, r3, #32
 800e92e:	bfbc      	itt	lt
 800e930:	4622      	movlt	r2, r4
 800e932:	4614      	movlt	r4, r2
 800e934:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e938:	d005      	beq.n	800e946 <__cvt+0x42>
 800e93a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e93e:	d100      	bne.n	800e942 <__cvt+0x3e>
 800e940:	3601      	adds	r6, #1
 800e942:	2102      	movs	r1, #2
 800e944:	e000      	b.n	800e948 <__cvt+0x44>
 800e946:	2103      	movs	r1, #3
 800e948:	ab03      	add	r3, sp, #12
 800e94a:	9301      	str	r3, [sp, #4]
 800e94c:	ab02      	add	r3, sp, #8
 800e94e:	9300      	str	r3, [sp, #0]
 800e950:	ec45 4b10 	vmov	d0, r4, r5
 800e954:	4653      	mov	r3, sl
 800e956:	4632      	mov	r2, r6
 800e958:	f002 f902 	bl	8010b60 <_dtoa_r>
 800e95c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e960:	4607      	mov	r7, r0
 800e962:	d102      	bne.n	800e96a <__cvt+0x66>
 800e964:	f019 0f01 	tst.w	r9, #1
 800e968:	d022      	beq.n	800e9b0 <__cvt+0xac>
 800e96a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e96e:	eb07 0906 	add.w	r9, r7, r6
 800e972:	d110      	bne.n	800e996 <__cvt+0x92>
 800e974:	783b      	ldrb	r3, [r7, #0]
 800e976:	2b30      	cmp	r3, #48	; 0x30
 800e978:	d10a      	bne.n	800e990 <__cvt+0x8c>
 800e97a:	2200      	movs	r2, #0
 800e97c:	2300      	movs	r3, #0
 800e97e:	4620      	mov	r0, r4
 800e980:	4629      	mov	r1, r5
 800e982:	f7f2 f8b1 	bl	8000ae8 <__aeabi_dcmpeq>
 800e986:	b918      	cbnz	r0, 800e990 <__cvt+0x8c>
 800e988:	f1c6 0601 	rsb	r6, r6, #1
 800e98c:	f8ca 6000 	str.w	r6, [sl]
 800e990:	f8da 3000 	ldr.w	r3, [sl]
 800e994:	4499      	add	r9, r3
 800e996:	2200      	movs	r2, #0
 800e998:	2300      	movs	r3, #0
 800e99a:	4620      	mov	r0, r4
 800e99c:	4629      	mov	r1, r5
 800e99e:	f7f2 f8a3 	bl	8000ae8 <__aeabi_dcmpeq>
 800e9a2:	b108      	cbz	r0, 800e9a8 <__cvt+0xa4>
 800e9a4:	f8cd 900c 	str.w	r9, [sp, #12]
 800e9a8:	2230      	movs	r2, #48	; 0x30
 800e9aa:	9b03      	ldr	r3, [sp, #12]
 800e9ac:	454b      	cmp	r3, r9
 800e9ae:	d307      	bcc.n	800e9c0 <__cvt+0xbc>
 800e9b0:	9b03      	ldr	r3, [sp, #12]
 800e9b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e9b4:	1bdb      	subs	r3, r3, r7
 800e9b6:	4638      	mov	r0, r7
 800e9b8:	6013      	str	r3, [r2, #0]
 800e9ba:	b004      	add	sp, #16
 800e9bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9c0:	1c59      	adds	r1, r3, #1
 800e9c2:	9103      	str	r1, [sp, #12]
 800e9c4:	701a      	strb	r2, [r3, #0]
 800e9c6:	e7f0      	b.n	800e9aa <__cvt+0xa6>

0800e9c8 <__exponent>:
 800e9c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	2900      	cmp	r1, #0
 800e9ce:	bfb8      	it	lt
 800e9d0:	4249      	neglt	r1, r1
 800e9d2:	f803 2b02 	strb.w	r2, [r3], #2
 800e9d6:	bfb4      	ite	lt
 800e9d8:	222d      	movlt	r2, #45	; 0x2d
 800e9da:	222b      	movge	r2, #43	; 0x2b
 800e9dc:	2909      	cmp	r1, #9
 800e9de:	7042      	strb	r2, [r0, #1]
 800e9e0:	dd2a      	ble.n	800ea38 <__exponent+0x70>
 800e9e2:	f10d 0407 	add.w	r4, sp, #7
 800e9e6:	46a4      	mov	ip, r4
 800e9e8:	270a      	movs	r7, #10
 800e9ea:	46a6      	mov	lr, r4
 800e9ec:	460a      	mov	r2, r1
 800e9ee:	fb91 f6f7 	sdiv	r6, r1, r7
 800e9f2:	fb07 1516 	mls	r5, r7, r6, r1
 800e9f6:	3530      	adds	r5, #48	; 0x30
 800e9f8:	2a63      	cmp	r2, #99	; 0x63
 800e9fa:	f104 34ff 	add.w	r4, r4, #4294967295
 800e9fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ea02:	4631      	mov	r1, r6
 800ea04:	dcf1      	bgt.n	800e9ea <__exponent+0x22>
 800ea06:	3130      	adds	r1, #48	; 0x30
 800ea08:	f1ae 0502 	sub.w	r5, lr, #2
 800ea0c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ea10:	1c44      	adds	r4, r0, #1
 800ea12:	4629      	mov	r1, r5
 800ea14:	4561      	cmp	r1, ip
 800ea16:	d30a      	bcc.n	800ea2e <__exponent+0x66>
 800ea18:	f10d 0209 	add.w	r2, sp, #9
 800ea1c:	eba2 020e 	sub.w	r2, r2, lr
 800ea20:	4565      	cmp	r5, ip
 800ea22:	bf88      	it	hi
 800ea24:	2200      	movhi	r2, #0
 800ea26:	4413      	add	r3, r2
 800ea28:	1a18      	subs	r0, r3, r0
 800ea2a:	b003      	add	sp, #12
 800ea2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea32:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ea36:	e7ed      	b.n	800ea14 <__exponent+0x4c>
 800ea38:	2330      	movs	r3, #48	; 0x30
 800ea3a:	3130      	adds	r1, #48	; 0x30
 800ea3c:	7083      	strb	r3, [r0, #2]
 800ea3e:	70c1      	strb	r1, [r0, #3]
 800ea40:	1d03      	adds	r3, r0, #4
 800ea42:	e7f1      	b.n	800ea28 <__exponent+0x60>

0800ea44 <_printf_float>:
 800ea44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea48:	ed2d 8b02 	vpush	{d8}
 800ea4c:	b08d      	sub	sp, #52	; 0x34
 800ea4e:	460c      	mov	r4, r1
 800ea50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ea54:	4616      	mov	r6, r2
 800ea56:	461f      	mov	r7, r3
 800ea58:	4605      	mov	r5, r0
 800ea5a:	f003 fab1 	bl	8011fc0 <_localeconv_r>
 800ea5e:	f8d0 a000 	ldr.w	sl, [r0]
 800ea62:	4650      	mov	r0, sl
 800ea64:	f7f1 fbc4 	bl	80001f0 <strlen>
 800ea68:	2300      	movs	r3, #0
 800ea6a:	930a      	str	r3, [sp, #40]	; 0x28
 800ea6c:	6823      	ldr	r3, [r4, #0]
 800ea6e:	9305      	str	r3, [sp, #20]
 800ea70:	f8d8 3000 	ldr.w	r3, [r8]
 800ea74:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ea78:	3307      	adds	r3, #7
 800ea7a:	f023 0307 	bic.w	r3, r3, #7
 800ea7e:	f103 0208 	add.w	r2, r3, #8
 800ea82:	f8c8 2000 	str.w	r2, [r8]
 800ea86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea8a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ea8e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ea92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ea96:	9307      	str	r3, [sp, #28]
 800ea98:	f8cd 8018 	str.w	r8, [sp, #24]
 800ea9c:	ee08 0a10 	vmov	s16, r0
 800eaa0:	4b9f      	ldr	r3, [pc, #636]	; (800ed20 <_printf_float+0x2dc>)
 800eaa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eaa6:	f04f 32ff 	mov.w	r2, #4294967295
 800eaaa:	f7f2 f84f 	bl	8000b4c <__aeabi_dcmpun>
 800eaae:	bb88      	cbnz	r0, 800eb14 <_printf_float+0xd0>
 800eab0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eab4:	4b9a      	ldr	r3, [pc, #616]	; (800ed20 <_printf_float+0x2dc>)
 800eab6:	f04f 32ff 	mov.w	r2, #4294967295
 800eaba:	f7f2 f829 	bl	8000b10 <__aeabi_dcmple>
 800eabe:	bb48      	cbnz	r0, 800eb14 <_printf_float+0xd0>
 800eac0:	2200      	movs	r2, #0
 800eac2:	2300      	movs	r3, #0
 800eac4:	4640      	mov	r0, r8
 800eac6:	4649      	mov	r1, r9
 800eac8:	f7f2 f818 	bl	8000afc <__aeabi_dcmplt>
 800eacc:	b110      	cbz	r0, 800ead4 <_printf_float+0x90>
 800eace:	232d      	movs	r3, #45	; 0x2d
 800ead0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ead4:	4b93      	ldr	r3, [pc, #588]	; (800ed24 <_printf_float+0x2e0>)
 800ead6:	4894      	ldr	r0, [pc, #592]	; (800ed28 <_printf_float+0x2e4>)
 800ead8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800eadc:	bf94      	ite	ls
 800eade:	4698      	movls	r8, r3
 800eae0:	4680      	movhi	r8, r0
 800eae2:	2303      	movs	r3, #3
 800eae4:	6123      	str	r3, [r4, #16]
 800eae6:	9b05      	ldr	r3, [sp, #20]
 800eae8:	f023 0204 	bic.w	r2, r3, #4
 800eaec:	6022      	str	r2, [r4, #0]
 800eaee:	f04f 0900 	mov.w	r9, #0
 800eaf2:	9700      	str	r7, [sp, #0]
 800eaf4:	4633      	mov	r3, r6
 800eaf6:	aa0b      	add	r2, sp, #44	; 0x2c
 800eaf8:	4621      	mov	r1, r4
 800eafa:	4628      	mov	r0, r5
 800eafc:	f000 f9d8 	bl	800eeb0 <_printf_common>
 800eb00:	3001      	adds	r0, #1
 800eb02:	f040 8090 	bne.w	800ec26 <_printf_float+0x1e2>
 800eb06:	f04f 30ff 	mov.w	r0, #4294967295
 800eb0a:	b00d      	add	sp, #52	; 0x34
 800eb0c:	ecbd 8b02 	vpop	{d8}
 800eb10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb14:	4642      	mov	r2, r8
 800eb16:	464b      	mov	r3, r9
 800eb18:	4640      	mov	r0, r8
 800eb1a:	4649      	mov	r1, r9
 800eb1c:	f7f2 f816 	bl	8000b4c <__aeabi_dcmpun>
 800eb20:	b140      	cbz	r0, 800eb34 <_printf_float+0xf0>
 800eb22:	464b      	mov	r3, r9
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	bfbc      	itt	lt
 800eb28:	232d      	movlt	r3, #45	; 0x2d
 800eb2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800eb2e:	487f      	ldr	r0, [pc, #508]	; (800ed2c <_printf_float+0x2e8>)
 800eb30:	4b7f      	ldr	r3, [pc, #508]	; (800ed30 <_printf_float+0x2ec>)
 800eb32:	e7d1      	b.n	800ead8 <_printf_float+0x94>
 800eb34:	6863      	ldr	r3, [r4, #4]
 800eb36:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800eb3a:	9206      	str	r2, [sp, #24]
 800eb3c:	1c5a      	adds	r2, r3, #1
 800eb3e:	d13f      	bne.n	800ebc0 <_printf_float+0x17c>
 800eb40:	2306      	movs	r3, #6
 800eb42:	6063      	str	r3, [r4, #4]
 800eb44:	9b05      	ldr	r3, [sp, #20]
 800eb46:	6861      	ldr	r1, [r4, #4]
 800eb48:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	9303      	str	r3, [sp, #12]
 800eb50:	ab0a      	add	r3, sp, #40	; 0x28
 800eb52:	e9cd b301 	strd	fp, r3, [sp, #4]
 800eb56:	ab09      	add	r3, sp, #36	; 0x24
 800eb58:	ec49 8b10 	vmov	d0, r8, r9
 800eb5c:	9300      	str	r3, [sp, #0]
 800eb5e:	6022      	str	r2, [r4, #0]
 800eb60:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800eb64:	4628      	mov	r0, r5
 800eb66:	f7ff fecd 	bl	800e904 <__cvt>
 800eb6a:	9b06      	ldr	r3, [sp, #24]
 800eb6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb6e:	2b47      	cmp	r3, #71	; 0x47
 800eb70:	4680      	mov	r8, r0
 800eb72:	d108      	bne.n	800eb86 <_printf_float+0x142>
 800eb74:	1cc8      	adds	r0, r1, #3
 800eb76:	db02      	blt.n	800eb7e <_printf_float+0x13a>
 800eb78:	6863      	ldr	r3, [r4, #4]
 800eb7a:	4299      	cmp	r1, r3
 800eb7c:	dd41      	ble.n	800ec02 <_printf_float+0x1be>
 800eb7e:	f1ab 0b02 	sub.w	fp, fp, #2
 800eb82:	fa5f fb8b 	uxtb.w	fp, fp
 800eb86:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800eb8a:	d820      	bhi.n	800ebce <_printf_float+0x18a>
 800eb8c:	3901      	subs	r1, #1
 800eb8e:	465a      	mov	r2, fp
 800eb90:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800eb94:	9109      	str	r1, [sp, #36]	; 0x24
 800eb96:	f7ff ff17 	bl	800e9c8 <__exponent>
 800eb9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb9c:	1813      	adds	r3, r2, r0
 800eb9e:	2a01      	cmp	r2, #1
 800eba0:	4681      	mov	r9, r0
 800eba2:	6123      	str	r3, [r4, #16]
 800eba4:	dc02      	bgt.n	800ebac <_printf_float+0x168>
 800eba6:	6822      	ldr	r2, [r4, #0]
 800eba8:	07d2      	lsls	r2, r2, #31
 800ebaa:	d501      	bpl.n	800ebb0 <_printf_float+0x16c>
 800ebac:	3301      	adds	r3, #1
 800ebae:	6123      	str	r3, [r4, #16]
 800ebb0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d09c      	beq.n	800eaf2 <_printf_float+0xae>
 800ebb8:	232d      	movs	r3, #45	; 0x2d
 800ebba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ebbe:	e798      	b.n	800eaf2 <_printf_float+0xae>
 800ebc0:	9a06      	ldr	r2, [sp, #24]
 800ebc2:	2a47      	cmp	r2, #71	; 0x47
 800ebc4:	d1be      	bne.n	800eb44 <_printf_float+0x100>
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d1bc      	bne.n	800eb44 <_printf_float+0x100>
 800ebca:	2301      	movs	r3, #1
 800ebcc:	e7b9      	b.n	800eb42 <_printf_float+0xfe>
 800ebce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ebd2:	d118      	bne.n	800ec06 <_printf_float+0x1c2>
 800ebd4:	2900      	cmp	r1, #0
 800ebd6:	6863      	ldr	r3, [r4, #4]
 800ebd8:	dd0b      	ble.n	800ebf2 <_printf_float+0x1ae>
 800ebda:	6121      	str	r1, [r4, #16]
 800ebdc:	b913      	cbnz	r3, 800ebe4 <_printf_float+0x1a0>
 800ebde:	6822      	ldr	r2, [r4, #0]
 800ebe0:	07d0      	lsls	r0, r2, #31
 800ebe2:	d502      	bpl.n	800ebea <_printf_float+0x1a6>
 800ebe4:	3301      	adds	r3, #1
 800ebe6:	440b      	add	r3, r1
 800ebe8:	6123      	str	r3, [r4, #16]
 800ebea:	65a1      	str	r1, [r4, #88]	; 0x58
 800ebec:	f04f 0900 	mov.w	r9, #0
 800ebf0:	e7de      	b.n	800ebb0 <_printf_float+0x16c>
 800ebf2:	b913      	cbnz	r3, 800ebfa <_printf_float+0x1b6>
 800ebf4:	6822      	ldr	r2, [r4, #0]
 800ebf6:	07d2      	lsls	r2, r2, #31
 800ebf8:	d501      	bpl.n	800ebfe <_printf_float+0x1ba>
 800ebfa:	3302      	adds	r3, #2
 800ebfc:	e7f4      	b.n	800ebe8 <_printf_float+0x1a4>
 800ebfe:	2301      	movs	r3, #1
 800ec00:	e7f2      	b.n	800ebe8 <_printf_float+0x1a4>
 800ec02:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ec06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec08:	4299      	cmp	r1, r3
 800ec0a:	db05      	blt.n	800ec18 <_printf_float+0x1d4>
 800ec0c:	6823      	ldr	r3, [r4, #0]
 800ec0e:	6121      	str	r1, [r4, #16]
 800ec10:	07d8      	lsls	r0, r3, #31
 800ec12:	d5ea      	bpl.n	800ebea <_printf_float+0x1a6>
 800ec14:	1c4b      	adds	r3, r1, #1
 800ec16:	e7e7      	b.n	800ebe8 <_printf_float+0x1a4>
 800ec18:	2900      	cmp	r1, #0
 800ec1a:	bfd4      	ite	le
 800ec1c:	f1c1 0202 	rsble	r2, r1, #2
 800ec20:	2201      	movgt	r2, #1
 800ec22:	4413      	add	r3, r2
 800ec24:	e7e0      	b.n	800ebe8 <_printf_float+0x1a4>
 800ec26:	6823      	ldr	r3, [r4, #0]
 800ec28:	055a      	lsls	r2, r3, #21
 800ec2a:	d407      	bmi.n	800ec3c <_printf_float+0x1f8>
 800ec2c:	6923      	ldr	r3, [r4, #16]
 800ec2e:	4642      	mov	r2, r8
 800ec30:	4631      	mov	r1, r6
 800ec32:	4628      	mov	r0, r5
 800ec34:	47b8      	blx	r7
 800ec36:	3001      	adds	r0, #1
 800ec38:	d12c      	bne.n	800ec94 <_printf_float+0x250>
 800ec3a:	e764      	b.n	800eb06 <_printf_float+0xc2>
 800ec3c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ec40:	f240 80e0 	bls.w	800ee04 <_printf_float+0x3c0>
 800ec44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ec48:	2200      	movs	r2, #0
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	f7f1 ff4c 	bl	8000ae8 <__aeabi_dcmpeq>
 800ec50:	2800      	cmp	r0, #0
 800ec52:	d034      	beq.n	800ecbe <_printf_float+0x27a>
 800ec54:	4a37      	ldr	r2, [pc, #220]	; (800ed34 <_printf_float+0x2f0>)
 800ec56:	2301      	movs	r3, #1
 800ec58:	4631      	mov	r1, r6
 800ec5a:	4628      	mov	r0, r5
 800ec5c:	47b8      	blx	r7
 800ec5e:	3001      	adds	r0, #1
 800ec60:	f43f af51 	beq.w	800eb06 <_printf_float+0xc2>
 800ec64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ec68:	429a      	cmp	r2, r3
 800ec6a:	db02      	blt.n	800ec72 <_printf_float+0x22e>
 800ec6c:	6823      	ldr	r3, [r4, #0]
 800ec6e:	07d8      	lsls	r0, r3, #31
 800ec70:	d510      	bpl.n	800ec94 <_printf_float+0x250>
 800ec72:	ee18 3a10 	vmov	r3, s16
 800ec76:	4652      	mov	r2, sl
 800ec78:	4631      	mov	r1, r6
 800ec7a:	4628      	mov	r0, r5
 800ec7c:	47b8      	blx	r7
 800ec7e:	3001      	adds	r0, #1
 800ec80:	f43f af41 	beq.w	800eb06 <_printf_float+0xc2>
 800ec84:	f04f 0800 	mov.w	r8, #0
 800ec88:	f104 091a 	add.w	r9, r4, #26
 800ec8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec8e:	3b01      	subs	r3, #1
 800ec90:	4543      	cmp	r3, r8
 800ec92:	dc09      	bgt.n	800eca8 <_printf_float+0x264>
 800ec94:	6823      	ldr	r3, [r4, #0]
 800ec96:	079b      	lsls	r3, r3, #30
 800ec98:	f100 8105 	bmi.w	800eea6 <_printf_float+0x462>
 800ec9c:	68e0      	ldr	r0, [r4, #12]
 800ec9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eca0:	4298      	cmp	r0, r3
 800eca2:	bfb8      	it	lt
 800eca4:	4618      	movlt	r0, r3
 800eca6:	e730      	b.n	800eb0a <_printf_float+0xc6>
 800eca8:	2301      	movs	r3, #1
 800ecaa:	464a      	mov	r2, r9
 800ecac:	4631      	mov	r1, r6
 800ecae:	4628      	mov	r0, r5
 800ecb0:	47b8      	blx	r7
 800ecb2:	3001      	adds	r0, #1
 800ecb4:	f43f af27 	beq.w	800eb06 <_printf_float+0xc2>
 800ecb8:	f108 0801 	add.w	r8, r8, #1
 800ecbc:	e7e6      	b.n	800ec8c <_printf_float+0x248>
 800ecbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	dc39      	bgt.n	800ed38 <_printf_float+0x2f4>
 800ecc4:	4a1b      	ldr	r2, [pc, #108]	; (800ed34 <_printf_float+0x2f0>)
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	4631      	mov	r1, r6
 800ecca:	4628      	mov	r0, r5
 800eccc:	47b8      	blx	r7
 800ecce:	3001      	adds	r0, #1
 800ecd0:	f43f af19 	beq.w	800eb06 <_printf_float+0xc2>
 800ecd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ecd8:	4313      	orrs	r3, r2
 800ecda:	d102      	bne.n	800ece2 <_printf_float+0x29e>
 800ecdc:	6823      	ldr	r3, [r4, #0]
 800ecde:	07d9      	lsls	r1, r3, #31
 800ece0:	d5d8      	bpl.n	800ec94 <_printf_float+0x250>
 800ece2:	ee18 3a10 	vmov	r3, s16
 800ece6:	4652      	mov	r2, sl
 800ece8:	4631      	mov	r1, r6
 800ecea:	4628      	mov	r0, r5
 800ecec:	47b8      	blx	r7
 800ecee:	3001      	adds	r0, #1
 800ecf0:	f43f af09 	beq.w	800eb06 <_printf_float+0xc2>
 800ecf4:	f04f 0900 	mov.w	r9, #0
 800ecf8:	f104 0a1a 	add.w	sl, r4, #26
 800ecfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecfe:	425b      	negs	r3, r3
 800ed00:	454b      	cmp	r3, r9
 800ed02:	dc01      	bgt.n	800ed08 <_printf_float+0x2c4>
 800ed04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed06:	e792      	b.n	800ec2e <_printf_float+0x1ea>
 800ed08:	2301      	movs	r3, #1
 800ed0a:	4652      	mov	r2, sl
 800ed0c:	4631      	mov	r1, r6
 800ed0e:	4628      	mov	r0, r5
 800ed10:	47b8      	blx	r7
 800ed12:	3001      	adds	r0, #1
 800ed14:	f43f aef7 	beq.w	800eb06 <_printf_float+0xc2>
 800ed18:	f109 0901 	add.w	r9, r9, #1
 800ed1c:	e7ee      	b.n	800ecfc <_printf_float+0x2b8>
 800ed1e:	bf00      	nop
 800ed20:	7fefffff 	.word	0x7fefffff
 800ed24:	08014990 	.word	0x08014990
 800ed28:	08014994 	.word	0x08014994
 800ed2c:	0801499c 	.word	0x0801499c
 800ed30:	08014998 	.word	0x08014998
 800ed34:	08014cd9 	.word	0x08014cd9
 800ed38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ed3c:	429a      	cmp	r2, r3
 800ed3e:	bfa8      	it	ge
 800ed40:	461a      	movge	r2, r3
 800ed42:	2a00      	cmp	r2, #0
 800ed44:	4691      	mov	r9, r2
 800ed46:	dc37      	bgt.n	800edb8 <_printf_float+0x374>
 800ed48:	f04f 0b00 	mov.w	fp, #0
 800ed4c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ed50:	f104 021a 	add.w	r2, r4, #26
 800ed54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ed56:	9305      	str	r3, [sp, #20]
 800ed58:	eba3 0309 	sub.w	r3, r3, r9
 800ed5c:	455b      	cmp	r3, fp
 800ed5e:	dc33      	bgt.n	800edc8 <_printf_float+0x384>
 800ed60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed64:	429a      	cmp	r2, r3
 800ed66:	db3b      	blt.n	800ede0 <_printf_float+0x39c>
 800ed68:	6823      	ldr	r3, [r4, #0]
 800ed6a:	07da      	lsls	r2, r3, #31
 800ed6c:	d438      	bmi.n	800ede0 <_printf_float+0x39c>
 800ed6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed70:	9b05      	ldr	r3, [sp, #20]
 800ed72:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed74:	1ad3      	subs	r3, r2, r3
 800ed76:	eba2 0901 	sub.w	r9, r2, r1
 800ed7a:	4599      	cmp	r9, r3
 800ed7c:	bfa8      	it	ge
 800ed7e:	4699      	movge	r9, r3
 800ed80:	f1b9 0f00 	cmp.w	r9, #0
 800ed84:	dc35      	bgt.n	800edf2 <_printf_float+0x3ae>
 800ed86:	f04f 0800 	mov.w	r8, #0
 800ed8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ed8e:	f104 0a1a 	add.w	sl, r4, #26
 800ed92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed96:	1a9b      	subs	r3, r3, r2
 800ed98:	eba3 0309 	sub.w	r3, r3, r9
 800ed9c:	4543      	cmp	r3, r8
 800ed9e:	f77f af79 	ble.w	800ec94 <_printf_float+0x250>
 800eda2:	2301      	movs	r3, #1
 800eda4:	4652      	mov	r2, sl
 800eda6:	4631      	mov	r1, r6
 800eda8:	4628      	mov	r0, r5
 800edaa:	47b8      	blx	r7
 800edac:	3001      	adds	r0, #1
 800edae:	f43f aeaa 	beq.w	800eb06 <_printf_float+0xc2>
 800edb2:	f108 0801 	add.w	r8, r8, #1
 800edb6:	e7ec      	b.n	800ed92 <_printf_float+0x34e>
 800edb8:	4613      	mov	r3, r2
 800edba:	4631      	mov	r1, r6
 800edbc:	4642      	mov	r2, r8
 800edbe:	4628      	mov	r0, r5
 800edc0:	47b8      	blx	r7
 800edc2:	3001      	adds	r0, #1
 800edc4:	d1c0      	bne.n	800ed48 <_printf_float+0x304>
 800edc6:	e69e      	b.n	800eb06 <_printf_float+0xc2>
 800edc8:	2301      	movs	r3, #1
 800edca:	4631      	mov	r1, r6
 800edcc:	4628      	mov	r0, r5
 800edce:	9205      	str	r2, [sp, #20]
 800edd0:	47b8      	blx	r7
 800edd2:	3001      	adds	r0, #1
 800edd4:	f43f ae97 	beq.w	800eb06 <_printf_float+0xc2>
 800edd8:	9a05      	ldr	r2, [sp, #20]
 800edda:	f10b 0b01 	add.w	fp, fp, #1
 800edde:	e7b9      	b.n	800ed54 <_printf_float+0x310>
 800ede0:	ee18 3a10 	vmov	r3, s16
 800ede4:	4652      	mov	r2, sl
 800ede6:	4631      	mov	r1, r6
 800ede8:	4628      	mov	r0, r5
 800edea:	47b8      	blx	r7
 800edec:	3001      	adds	r0, #1
 800edee:	d1be      	bne.n	800ed6e <_printf_float+0x32a>
 800edf0:	e689      	b.n	800eb06 <_printf_float+0xc2>
 800edf2:	9a05      	ldr	r2, [sp, #20]
 800edf4:	464b      	mov	r3, r9
 800edf6:	4442      	add	r2, r8
 800edf8:	4631      	mov	r1, r6
 800edfa:	4628      	mov	r0, r5
 800edfc:	47b8      	blx	r7
 800edfe:	3001      	adds	r0, #1
 800ee00:	d1c1      	bne.n	800ed86 <_printf_float+0x342>
 800ee02:	e680      	b.n	800eb06 <_printf_float+0xc2>
 800ee04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee06:	2a01      	cmp	r2, #1
 800ee08:	dc01      	bgt.n	800ee0e <_printf_float+0x3ca>
 800ee0a:	07db      	lsls	r3, r3, #31
 800ee0c:	d538      	bpl.n	800ee80 <_printf_float+0x43c>
 800ee0e:	2301      	movs	r3, #1
 800ee10:	4642      	mov	r2, r8
 800ee12:	4631      	mov	r1, r6
 800ee14:	4628      	mov	r0, r5
 800ee16:	47b8      	blx	r7
 800ee18:	3001      	adds	r0, #1
 800ee1a:	f43f ae74 	beq.w	800eb06 <_printf_float+0xc2>
 800ee1e:	ee18 3a10 	vmov	r3, s16
 800ee22:	4652      	mov	r2, sl
 800ee24:	4631      	mov	r1, r6
 800ee26:	4628      	mov	r0, r5
 800ee28:	47b8      	blx	r7
 800ee2a:	3001      	adds	r0, #1
 800ee2c:	f43f ae6b 	beq.w	800eb06 <_printf_float+0xc2>
 800ee30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ee34:	2200      	movs	r2, #0
 800ee36:	2300      	movs	r3, #0
 800ee38:	f7f1 fe56 	bl	8000ae8 <__aeabi_dcmpeq>
 800ee3c:	b9d8      	cbnz	r0, 800ee76 <_printf_float+0x432>
 800ee3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee40:	f108 0201 	add.w	r2, r8, #1
 800ee44:	3b01      	subs	r3, #1
 800ee46:	4631      	mov	r1, r6
 800ee48:	4628      	mov	r0, r5
 800ee4a:	47b8      	blx	r7
 800ee4c:	3001      	adds	r0, #1
 800ee4e:	d10e      	bne.n	800ee6e <_printf_float+0x42a>
 800ee50:	e659      	b.n	800eb06 <_printf_float+0xc2>
 800ee52:	2301      	movs	r3, #1
 800ee54:	4652      	mov	r2, sl
 800ee56:	4631      	mov	r1, r6
 800ee58:	4628      	mov	r0, r5
 800ee5a:	47b8      	blx	r7
 800ee5c:	3001      	adds	r0, #1
 800ee5e:	f43f ae52 	beq.w	800eb06 <_printf_float+0xc2>
 800ee62:	f108 0801 	add.w	r8, r8, #1
 800ee66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee68:	3b01      	subs	r3, #1
 800ee6a:	4543      	cmp	r3, r8
 800ee6c:	dcf1      	bgt.n	800ee52 <_printf_float+0x40e>
 800ee6e:	464b      	mov	r3, r9
 800ee70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ee74:	e6dc      	b.n	800ec30 <_printf_float+0x1ec>
 800ee76:	f04f 0800 	mov.w	r8, #0
 800ee7a:	f104 0a1a 	add.w	sl, r4, #26
 800ee7e:	e7f2      	b.n	800ee66 <_printf_float+0x422>
 800ee80:	2301      	movs	r3, #1
 800ee82:	4642      	mov	r2, r8
 800ee84:	e7df      	b.n	800ee46 <_printf_float+0x402>
 800ee86:	2301      	movs	r3, #1
 800ee88:	464a      	mov	r2, r9
 800ee8a:	4631      	mov	r1, r6
 800ee8c:	4628      	mov	r0, r5
 800ee8e:	47b8      	blx	r7
 800ee90:	3001      	adds	r0, #1
 800ee92:	f43f ae38 	beq.w	800eb06 <_printf_float+0xc2>
 800ee96:	f108 0801 	add.w	r8, r8, #1
 800ee9a:	68e3      	ldr	r3, [r4, #12]
 800ee9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ee9e:	1a5b      	subs	r3, r3, r1
 800eea0:	4543      	cmp	r3, r8
 800eea2:	dcf0      	bgt.n	800ee86 <_printf_float+0x442>
 800eea4:	e6fa      	b.n	800ec9c <_printf_float+0x258>
 800eea6:	f04f 0800 	mov.w	r8, #0
 800eeaa:	f104 0919 	add.w	r9, r4, #25
 800eeae:	e7f4      	b.n	800ee9a <_printf_float+0x456>

0800eeb0 <_printf_common>:
 800eeb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eeb4:	4616      	mov	r6, r2
 800eeb6:	4699      	mov	r9, r3
 800eeb8:	688a      	ldr	r2, [r1, #8]
 800eeba:	690b      	ldr	r3, [r1, #16]
 800eebc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eec0:	4293      	cmp	r3, r2
 800eec2:	bfb8      	it	lt
 800eec4:	4613      	movlt	r3, r2
 800eec6:	6033      	str	r3, [r6, #0]
 800eec8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eecc:	4607      	mov	r7, r0
 800eece:	460c      	mov	r4, r1
 800eed0:	b10a      	cbz	r2, 800eed6 <_printf_common+0x26>
 800eed2:	3301      	adds	r3, #1
 800eed4:	6033      	str	r3, [r6, #0]
 800eed6:	6823      	ldr	r3, [r4, #0]
 800eed8:	0699      	lsls	r1, r3, #26
 800eeda:	bf42      	ittt	mi
 800eedc:	6833      	ldrmi	r3, [r6, #0]
 800eede:	3302      	addmi	r3, #2
 800eee0:	6033      	strmi	r3, [r6, #0]
 800eee2:	6825      	ldr	r5, [r4, #0]
 800eee4:	f015 0506 	ands.w	r5, r5, #6
 800eee8:	d106      	bne.n	800eef8 <_printf_common+0x48>
 800eeea:	f104 0a19 	add.w	sl, r4, #25
 800eeee:	68e3      	ldr	r3, [r4, #12]
 800eef0:	6832      	ldr	r2, [r6, #0]
 800eef2:	1a9b      	subs	r3, r3, r2
 800eef4:	42ab      	cmp	r3, r5
 800eef6:	dc26      	bgt.n	800ef46 <_printf_common+0x96>
 800eef8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eefc:	1e13      	subs	r3, r2, #0
 800eefe:	6822      	ldr	r2, [r4, #0]
 800ef00:	bf18      	it	ne
 800ef02:	2301      	movne	r3, #1
 800ef04:	0692      	lsls	r2, r2, #26
 800ef06:	d42b      	bmi.n	800ef60 <_printf_common+0xb0>
 800ef08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef0c:	4649      	mov	r1, r9
 800ef0e:	4638      	mov	r0, r7
 800ef10:	47c0      	blx	r8
 800ef12:	3001      	adds	r0, #1
 800ef14:	d01e      	beq.n	800ef54 <_printf_common+0xa4>
 800ef16:	6823      	ldr	r3, [r4, #0]
 800ef18:	68e5      	ldr	r5, [r4, #12]
 800ef1a:	6832      	ldr	r2, [r6, #0]
 800ef1c:	f003 0306 	and.w	r3, r3, #6
 800ef20:	2b04      	cmp	r3, #4
 800ef22:	bf08      	it	eq
 800ef24:	1aad      	subeq	r5, r5, r2
 800ef26:	68a3      	ldr	r3, [r4, #8]
 800ef28:	6922      	ldr	r2, [r4, #16]
 800ef2a:	bf0c      	ite	eq
 800ef2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ef30:	2500      	movne	r5, #0
 800ef32:	4293      	cmp	r3, r2
 800ef34:	bfc4      	itt	gt
 800ef36:	1a9b      	subgt	r3, r3, r2
 800ef38:	18ed      	addgt	r5, r5, r3
 800ef3a:	2600      	movs	r6, #0
 800ef3c:	341a      	adds	r4, #26
 800ef3e:	42b5      	cmp	r5, r6
 800ef40:	d11a      	bne.n	800ef78 <_printf_common+0xc8>
 800ef42:	2000      	movs	r0, #0
 800ef44:	e008      	b.n	800ef58 <_printf_common+0xa8>
 800ef46:	2301      	movs	r3, #1
 800ef48:	4652      	mov	r2, sl
 800ef4a:	4649      	mov	r1, r9
 800ef4c:	4638      	mov	r0, r7
 800ef4e:	47c0      	blx	r8
 800ef50:	3001      	adds	r0, #1
 800ef52:	d103      	bne.n	800ef5c <_printf_common+0xac>
 800ef54:	f04f 30ff 	mov.w	r0, #4294967295
 800ef58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef5c:	3501      	adds	r5, #1
 800ef5e:	e7c6      	b.n	800eeee <_printf_common+0x3e>
 800ef60:	18e1      	adds	r1, r4, r3
 800ef62:	1c5a      	adds	r2, r3, #1
 800ef64:	2030      	movs	r0, #48	; 0x30
 800ef66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ef6a:	4422      	add	r2, r4
 800ef6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ef70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ef74:	3302      	adds	r3, #2
 800ef76:	e7c7      	b.n	800ef08 <_printf_common+0x58>
 800ef78:	2301      	movs	r3, #1
 800ef7a:	4622      	mov	r2, r4
 800ef7c:	4649      	mov	r1, r9
 800ef7e:	4638      	mov	r0, r7
 800ef80:	47c0      	blx	r8
 800ef82:	3001      	adds	r0, #1
 800ef84:	d0e6      	beq.n	800ef54 <_printf_common+0xa4>
 800ef86:	3601      	adds	r6, #1
 800ef88:	e7d9      	b.n	800ef3e <_printf_common+0x8e>
	...

0800ef8c <_printf_i>:
 800ef8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef90:	460c      	mov	r4, r1
 800ef92:	4691      	mov	r9, r2
 800ef94:	7e27      	ldrb	r7, [r4, #24]
 800ef96:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ef98:	2f78      	cmp	r7, #120	; 0x78
 800ef9a:	4680      	mov	r8, r0
 800ef9c:	469a      	mov	sl, r3
 800ef9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800efa2:	d807      	bhi.n	800efb4 <_printf_i+0x28>
 800efa4:	2f62      	cmp	r7, #98	; 0x62
 800efa6:	d80a      	bhi.n	800efbe <_printf_i+0x32>
 800efa8:	2f00      	cmp	r7, #0
 800efaa:	f000 80d8 	beq.w	800f15e <_printf_i+0x1d2>
 800efae:	2f58      	cmp	r7, #88	; 0x58
 800efb0:	f000 80a3 	beq.w	800f0fa <_printf_i+0x16e>
 800efb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800efb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800efbc:	e03a      	b.n	800f034 <_printf_i+0xa8>
 800efbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800efc2:	2b15      	cmp	r3, #21
 800efc4:	d8f6      	bhi.n	800efb4 <_printf_i+0x28>
 800efc6:	a001      	add	r0, pc, #4	; (adr r0, 800efcc <_printf_i+0x40>)
 800efc8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800efcc:	0800f025 	.word	0x0800f025
 800efd0:	0800f039 	.word	0x0800f039
 800efd4:	0800efb5 	.word	0x0800efb5
 800efd8:	0800efb5 	.word	0x0800efb5
 800efdc:	0800efb5 	.word	0x0800efb5
 800efe0:	0800efb5 	.word	0x0800efb5
 800efe4:	0800f039 	.word	0x0800f039
 800efe8:	0800efb5 	.word	0x0800efb5
 800efec:	0800efb5 	.word	0x0800efb5
 800eff0:	0800efb5 	.word	0x0800efb5
 800eff4:	0800efb5 	.word	0x0800efb5
 800eff8:	0800f145 	.word	0x0800f145
 800effc:	0800f069 	.word	0x0800f069
 800f000:	0800f127 	.word	0x0800f127
 800f004:	0800efb5 	.word	0x0800efb5
 800f008:	0800efb5 	.word	0x0800efb5
 800f00c:	0800f167 	.word	0x0800f167
 800f010:	0800efb5 	.word	0x0800efb5
 800f014:	0800f069 	.word	0x0800f069
 800f018:	0800efb5 	.word	0x0800efb5
 800f01c:	0800efb5 	.word	0x0800efb5
 800f020:	0800f12f 	.word	0x0800f12f
 800f024:	680b      	ldr	r3, [r1, #0]
 800f026:	1d1a      	adds	r2, r3, #4
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	600a      	str	r2, [r1, #0]
 800f02c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f030:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f034:	2301      	movs	r3, #1
 800f036:	e0a3      	b.n	800f180 <_printf_i+0x1f4>
 800f038:	6825      	ldr	r5, [r4, #0]
 800f03a:	6808      	ldr	r0, [r1, #0]
 800f03c:	062e      	lsls	r6, r5, #24
 800f03e:	f100 0304 	add.w	r3, r0, #4
 800f042:	d50a      	bpl.n	800f05a <_printf_i+0xce>
 800f044:	6805      	ldr	r5, [r0, #0]
 800f046:	600b      	str	r3, [r1, #0]
 800f048:	2d00      	cmp	r5, #0
 800f04a:	da03      	bge.n	800f054 <_printf_i+0xc8>
 800f04c:	232d      	movs	r3, #45	; 0x2d
 800f04e:	426d      	negs	r5, r5
 800f050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f054:	485e      	ldr	r0, [pc, #376]	; (800f1d0 <_printf_i+0x244>)
 800f056:	230a      	movs	r3, #10
 800f058:	e019      	b.n	800f08e <_printf_i+0x102>
 800f05a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f05e:	6805      	ldr	r5, [r0, #0]
 800f060:	600b      	str	r3, [r1, #0]
 800f062:	bf18      	it	ne
 800f064:	b22d      	sxthne	r5, r5
 800f066:	e7ef      	b.n	800f048 <_printf_i+0xbc>
 800f068:	680b      	ldr	r3, [r1, #0]
 800f06a:	6825      	ldr	r5, [r4, #0]
 800f06c:	1d18      	adds	r0, r3, #4
 800f06e:	6008      	str	r0, [r1, #0]
 800f070:	0628      	lsls	r0, r5, #24
 800f072:	d501      	bpl.n	800f078 <_printf_i+0xec>
 800f074:	681d      	ldr	r5, [r3, #0]
 800f076:	e002      	b.n	800f07e <_printf_i+0xf2>
 800f078:	0669      	lsls	r1, r5, #25
 800f07a:	d5fb      	bpl.n	800f074 <_printf_i+0xe8>
 800f07c:	881d      	ldrh	r5, [r3, #0]
 800f07e:	4854      	ldr	r0, [pc, #336]	; (800f1d0 <_printf_i+0x244>)
 800f080:	2f6f      	cmp	r7, #111	; 0x6f
 800f082:	bf0c      	ite	eq
 800f084:	2308      	moveq	r3, #8
 800f086:	230a      	movne	r3, #10
 800f088:	2100      	movs	r1, #0
 800f08a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f08e:	6866      	ldr	r6, [r4, #4]
 800f090:	60a6      	str	r6, [r4, #8]
 800f092:	2e00      	cmp	r6, #0
 800f094:	bfa2      	ittt	ge
 800f096:	6821      	ldrge	r1, [r4, #0]
 800f098:	f021 0104 	bicge.w	r1, r1, #4
 800f09c:	6021      	strge	r1, [r4, #0]
 800f09e:	b90d      	cbnz	r5, 800f0a4 <_printf_i+0x118>
 800f0a0:	2e00      	cmp	r6, #0
 800f0a2:	d04d      	beq.n	800f140 <_printf_i+0x1b4>
 800f0a4:	4616      	mov	r6, r2
 800f0a6:	fbb5 f1f3 	udiv	r1, r5, r3
 800f0aa:	fb03 5711 	mls	r7, r3, r1, r5
 800f0ae:	5dc7      	ldrb	r7, [r0, r7]
 800f0b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f0b4:	462f      	mov	r7, r5
 800f0b6:	42bb      	cmp	r3, r7
 800f0b8:	460d      	mov	r5, r1
 800f0ba:	d9f4      	bls.n	800f0a6 <_printf_i+0x11a>
 800f0bc:	2b08      	cmp	r3, #8
 800f0be:	d10b      	bne.n	800f0d8 <_printf_i+0x14c>
 800f0c0:	6823      	ldr	r3, [r4, #0]
 800f0c2:	07df      	lsls	r7, r3, #31
 800f0c4:	d508      	bpl.n	800f0d8 <_printf_i+0x14c>
 800f0c6:	6923      	ldr	r3, [r4, #16]
 800f0c8:	6861      	ldr	r1, [r4, #4]
 800f0ca:	4299      	cmp	r1, r3
 800f0cc:	bfde      	ittt	le
 800f0ce:	2330      	movle	r3, #48	; 0x30
 800f0d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f0d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f0d8:	1b92      	subs	r2, r2, r6
 800f0da:	6122      	str	r2, [r4, #16]
 800f0dc:	f8cd a000 	str.w	sl, [sp]
 800f0e0:	464b      	mov	r3, r9
 800f0e2:	aa03      	add	r2, sp, #12
 800f0e4:	4621      	mov	r1, r4
 800f0e6:	4640      	mov	r0, r8
 800f0e8:	f7ff fee2 	bl	800eeb0 <_printf_common>
 800f0ec:	3001      	adds	r0, #1
 800f0ee:	d14c      	bne.n	800f18a <_printf_i+0x1fe>
 800f0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0f4:	b004      	add	sp, #16
 800f0f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0fa:	4835      	ldr	r0, [pc, #212]	; (800f1d0 <_printf_i+0x244>)
 800f0fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f100:	6823      	ldr	r3, [r4, #0]
 800f102:	680e      	ldr	r6, [r1, #0]
 800f104:	061f      	lsls	r7, r3, #24
 800f106:	f856 5b04 	ldr.w	r5, [r6], #4
 800f10a:	600e      	str	r6, [r1, #0]
 800f10c:	d514      	bpl.n	800f138 <_printf_i+0x1ac>
 800f10e:	07d9      	lsls	r1, r3, #31
 800f110:	bf44      	itt	mi
 800f112:	f043 0320 	orrmi.w	r3, r3, #32
 800f116:	6023      	strmi	r3, [r4, #0]
 800f118:	b91d      	cbnz	r5, 800f122 <_printf_i+0x196>
 800f11a:	6823      	ldr	r3, [r4, #0]
 800f11c:	f023 0320 	bic.w	r3, r3, #32
 800f120:	6023      	str	r3, [r4, #0]
 800f122:	2310      	movs	r3, #16
 800f124:	e7b0      	b.n	800f088 <_printf_i+0xfc>
 800f126:	6823      	ldr	r3, [r4, #0]
 800f128:	f043 0320 	orr.w	r3, r3, #32
 800f12c:	6023      	str	r3, [r4, #0]
 800f12e:	2378      	movs	r3, #120	; 0x78
 800f130:	4828      	ldr	r0, [pc, #160]	; (800f1d4 <_printf_i+0x248>)
 800f132:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f136:	e7e3      	b.n	800f100 <_printf_i+0x174>
 800f138:	065e      	lsls	r6, r3, #25
 800f13a:	bf48      	it	mi
 800f13c:	b2ad      	uxthmi	r5, r5
 800f13e:	e7e6      	b.n	800f10e <_printf_i+0x182>
 800f140:	4616      	mov	r6, r2
 800f142:	e7bb      	b.n	800f0bc <_printf_i+0x130>
 800f144:	680b      	ldr	r3, [r1, #0]
 800f146:	6826      	ldr	r6, [r4, #0]
 800f148:	6960      	ldr	r0, [r4, #20]
 800f14a:	1d1d      	adds	r5, r3, #4
 800f14c:	600d      	str	r5, [r1, #0]
 800f14e:	0635      	lsls	r5, r6, #24
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	d501      	bpl.n	800f158 <_printf_i+0x1cc>
 800f154:	6018      	str	r0, [r3, #0]
 800f156:	e002      	b.n	800f15e <_printf_i+0x1d2>
 800f158:	0671      	lsls	r1, r6, #25
 800f15a:	d5fb      	bpl.n	800f154 <_printf_i+0x1c8>
 800f15c:	8018      	strh	r0, [r3, #0]
 800f15e:	2300      	movs	r3, #0
 800f160:	6123      	str	r3, [r4, #16]
 800f162:	4616      	mov	r6, r2
 800f164:	e7ba      	b.n	800f0dc <_printf_i+0x150>
 800f166:	680b      	ldr	r3, [r1, #0]
 800f168:	1d1a      	adds	r2, r3, #4
 800f16a:	600a      	str	r2, [r1, #0]
 800f16c:	681e      	ldr	r6, [r3, #0]
 800f16e:	6862      	ldr	r2, [r4, #4]
 800f170:	2100      	movs	r1, #0
 800f172:	4630      	mov	r0, r6
 800f174:	f7f1 f844 	bl	8000200 <memchr>
 800f178:	b108      	cbz	r0, 800f17e <_printf_i+0x1f2>
 800f17a:	1b80      	subs	r0, r0, r6
 800f17c:	6060      	str	r0, [r4, #4]
 800f17e:	6863      	ldr	r3, [r4, #4]
 800f180:	6123      	str	r3, [r4, #16]
 800f182:	2300      	movs	r3, #0
 800f184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f188:	e7a8      	b.n	800f0dc <_printf_i+0x150>
 800f18a:	6923      	ldr	r3, [r4, #16]
 800f18c:	4632      	mov	r2, r6
 800f18e:	4649      	mov	r1, r9
 800f190:	4640      	mov	r0, r8
 800f192:	47d0      	blx	sl
 800f194:	3001      	adds	r0, #1
 800f196:	d0ab      	beq.n	800f0f0 <_printf_i+0x164>
 800f198:	6823      	ldr	r3, [r4, #0]
 800f19a:	079b      	lsls	r3, r3, #30
 800f19c:	d413      	bmi.n	800f1c6 <_printf_i+0x23a>
 800f19e:	68e0      	ldr	r0, [r4, #12]
 800f1a0:	9b03      	ldr	r3, [sp, #12]
 800f1a2:	4298      	cmp	r0, r3
 800f1a4:	bfb8      	it	lt
 800f1a6:	4618      	movlt	r0, r3
 800f1a8:	e7a4      	b.n	800f0f4 <_printf_i+0x168>
 800f1aa:	2301      	movs	r3, #1
 800f1ac:	4632      	mov	r2, r6
 800f1ae:	4649      	mov	r1, r9
 800f1b0:	4640      	mov	r0, r8
 800f1b2:	47d0      	blx	sl
 800f1b4:	3001      	adds	r0, #1
 800f1b6:	d09b      	beq.n	800f0f0 <_printf_i+0x164>
 800f1b8:	3501      	adds	r5, #1
 800f1ba:	68e3      	ldr	r3, [r4, #12]
 800f1bc:	9903      	ldr	r1, [sp, #12]
 800f1be:	1a5b      	subs	r3, r3, r1
 800f1c0:	42ab      	cmp	r3, r5
 800f1c2:	dcf2      	bgt.n	800f1aa <_printf_i+0x21e>
 800f1c4:	e7eb      	b.n	800f19e <_printf_i+0x212>
 800f1c6:	2500      	movs	r5, #0
 800f1c8:	f104 0619 	add.w	r6, r4, #25
 800f1cc:	e7f5      	b.n	800f1ba <_printf_i+0x22e>
 800f1ce:	bf00      	nop
 800f1d0:	080149a0 	.word	0x080149a0
 800f1d4:	080149b1 	.word	0x080149b1

0800f1d8 <_scanf_float>:
 800f1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1dc:	b087      	sub	sp, #28
 800f1de:	4617      	mov	r7, r2
 800f1e0:	9303      	str	r3, [sp, #12]
 800f1e2:	688b      	ldr	r3, [r1, #8]
 800f1e4:	1e5a      	subs	r2, r3, #1
 800f1e6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f1ea:	bf83      	ittte	hi
 800f1ec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f1f0:	195b      	addhi	r3, r3, r5
 800f1f2:	9302      	strhi	r3, [sp, #8]
 800f1f4:	2300      	movls	r3, #0
 800f1f6:	bf86      	itte	hi
 800f1f8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f1fc:	608b      	strhi	r3, [r1, #8]
 800f1fe:	9302      	strls	r3, [sp, #8]
 800f200:	680b      	ldr	r3, [r1, #0]
 800f202:	468b      	mov	fp, r1
 800f204:	2500      	movs	r5, #0
 800f206:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f20a:	f84b 3b1c 	str.w	r3, [fp], #28
 800f20e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f212:	4680      	mov	r8, r0
 800f214:	460c      	mov	r4, r1
 800f216:	465e      	mov	r6, fp
 800f218:	46aa      	mov	sl, r5
 800f21a:	46a9      	mov	r9, r5
 800f21c:	9501      	str	r5, [sp, #4]
 800f21e:	68a2      	ldr	r2, [r4, #8]
 800f220:	b152      	cbz	r2, 800f238 <_scanf_float+0x60>
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	781b      	ldrb	r3, [r3, #0]
 800f226:	2b4e      	cmp	r3, #78	; 0x4e
 800f228:	d864      	bhi.n	800f2f4 <_scanf_float+0x11c>
 800f22a:	2b40      	cmp	r3, #64	; 0x40
 800f22c:	d83c      	bhi.n	800f2a8 <_scanf_float+0xd0>
 800f22e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f232:	b2c8      	uxtb	r0, r1
 800f234:	280e      	cmp	r0, #14
 800f236:	d93a      	bls.n	800f2ae <_scanf_float+0xd6>
 800f238:	f1b9 0f00 	cmp.w	r9, #0
 800f23c:	d003      	beq.n	800f246 <_scanf_float+0x6e>
 800f23e:	6823      	ldr	r3, [r4, #0]
 800f240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f244:	6023      	str	r3, [r4, #0]
 800f246:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f24a:	f1ba 0f01 	cmp.w	sl, #1
 800f24e:	f200 8113 	bhi.w	800f478 <_scanf_float+0x2a0>
 800f252:	455e      	cmp	r6, fp
 800f254:	f200 8105 	bhi.w	800f462 <_scanf_float+0x28a>
 800f258:	2501      	movs	r5, #1
 800f25a:	4628      	mov	r0, r5
 800f25c:	b007      	add	sp, #28
 800f25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f262:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f266:	2a0d      	cmp	r2, #13
 800f268:	d8e6      	bhi.n	800f238 <_scanf_float+0x60>
 800f26a:	a101      	add	r1, pc, #4	; (adr r1, 800f270 <_scanf_float+0x98>)
 800f26c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f270:	0800f3af 	.word	0x0800f3af
 800f274:	0800f239 	.word	0x0800f239
 800f278:	0800f239 	.word	0x0800f239
 800f27c:	0800f239 	.word	0x0800f239
 800f280:	0800f40f 	.word	0x0800f40f
 800f284:	0800f3e7 	.word	0x0800f3e7
 800f288:	0800f239 	.word	0x0800f239
 800f28c:	0800f239 	.word	0x0800f239
 800f290:	0800f3bd 	.word	0x0800f3bd
 800f294:	0800f239 	.word	0x0800f239
 800f298:	0800f239 	.word	0x0800f239
 800f29c:	0800f239 	.word	0x0800f239
 800f2a0:	0800f239 	.word	0x0800f239
 800f2a4:	0800f375 	.word	0x0800f375
 800f2a8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f2ac:	e7db      	b.n	800f266 <_scanf_float+0x8e>
 800f2ae:	290e      	cmp	r1, #14
 800f2b0:	d8c2      	bhi.n	800f238 <_scanf_float+0x60>
 800f2b2:	a001      	add	r0, pc, #4	; (adr r0, 800f2b8 <_scanf_float+0xe0>)
 800f2b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f2b8:	0800f367 	.word	0x0800f367
 800f2bc:	0800f239 	.word	0x0800f239
 800f2c0:	0800f367 	.word	0x0800f367
 800f2c4:	0800f3fb 	.word	0x0800f3fb
 800f2c8:	0800f239 	.word	0x0800f239
 800f2cc:	0800f315 	.word	0x0800f315
 800f2d0:	0800f351 	.word	0x0800f351
 800f2d4:	0800f351 	.word	0x0800f351
 800f2d8:	0800f351 	.word	0x0800f351
 800f2dc:	0800f351 	.word	0x0800f351
 800f2e0:	0800f351 	.word	0x0800f351
 800f2e4:	0800f351 	.word	0x0800f351
 800f2e8:	0800f351 	.word	0x0800f351
 800f2ec:	0800f351 	.word	0x0800f351
 800f2f0:	0800f351 	.word	0x0800f351
 800f2f4:	2b6e      	cmp	r3, #110	; 0x6e
 800f2f6:	d809      	bhi.n	800f30c <_scanf_float+0x134>
 800f2f8:	2b60      	cmp	r3, #96	; 0x60
 800f2fa:	d8b2      	bhi.n	800f262 <_scanf_float+0x8a>
 800f2fc:	2b54      	cmp	r3, #84	; 0x54
 800f2fe:	d077      	beq.n	800f3f0 <_scanf_float+0x218>
 800f300:	2b59      	cmp	r3, #89	; 0x59
 800f302:	d199      	bne.n	800f238 <_scanf_float+0x60>
 800f304:	2d07      	cmp	r5, #7
 800f306:	d197      	bne.n	800f238 <_scanf_float+0x60>
 800f308:	2508      	movs	r5, #8
 800f30a:	e029      	b.n	800f360 <_scanf_float+0x188>
 800f30c:	2b74      	cmp	r3, #116	; 0x74
 800f30e:	d06f      	beq.n	800f3f0 <_scanf_float+0x218>
 800f310:	2b79      	cmp	r3, #121	; 0x79
 800f312:	e7f6      	b.n	800f302 <_scanf_float+0x12a>
 800f314:	6821      	ldr	r1, [r4, #0]
 800f316:	05c8      	lsls	r0, r1, #23
 800f318:	d51a      	bpl.n	800f350 <_scanf_float+0x178>
 800f31a:	9b02      	ldr	r3, [sp, #8]
 800f31c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f320:	6021      	str	r1, [r4, #0]
 800f322:	f109 0901 	add.w	r9, r9, #1
 800f326:	b11b      	cbz	r3, 800f330 <_scanf_float+0x158>
 800f328:	3b01      	subs	r3, #1
 800f32a:	3201      	adds	r2, #1
 800f32c:	9302      	str	r3, [sp, #8]
 800f32e:	60a2      	str	r2, [r4, #8]
 800f330:	68a3      	ldr	r3, [r4, #8]
 800f332:	3b01      	subs	r3, #1
 800f334:	60a3      	str	r3, [r4, #8]
 800f336:	6923      	ldr	r3, [r4, #16]
 800f338:	3301      	adds	r3, #1
 800f33a:	6123      	str	r3, [r4, #16]
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	3b01      	subs	r3, #1
 800f340:	2b00      	cmp	r3, #0
 800f342:	607b      	str	r3, [r7, #4]
 800f344:	f340 8084 	ble.w	800f450 <_scanf_float+0x278>
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	3301      	adds	r3, #1
 800f34c:	603b      	str	r3, [r7, #0]
 800f34e:	e766      	b.n	800f21e <_scanf_float+0x46>
 800f350:	eb1a 0f05 	cmn.w	sl, r5
 800f354:	f47f af70 	bne.w	800f238 <_scanf_float+0x60>
 800f358:	6822      	ldr	r2, [r4, #0]
 800f35a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f35e:	6022      	str	r2, [r4, #0]
 800f360:	f806 3b01 	strb.w	r3, [r6], #1
 800f364:	e7e4      	b.n	800f330 <_scanf_float+0x158>
 800f366:	6822      	ldr	r2, [r4, #0]
 800f368:	0610      	lsls	r0, r2, #24
 800f36a:	f57f af65 	bpl.w	800f238 <_scanf_float+0x60>
 800f36e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f372:	e7f4      	b.n	800f35e <_scanf_float+0x186>
 800f374:	f1ba 0f00 	cmp.w	sl, #0
 800f378:	d10e      	bne.n	800f398 <_scanf_float+0x1c0>
 800f37a:	f1b9 0f00 	cmp.w	r9, #0
 800f37e:	d10e      	bne.n	800f39e <_scanf_float+0x1c6>
 800f380:	6822      	ldr	r2, [r4, #0]
 800f382:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f386:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f38a:	d108      	bne.n	800f39e <_scanf_float+0x1c6>
 800f38c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f390:	6022      	str	r2, [r4, #0]
 800f392:	f04f 0a01 	mov.w	sl, #1
 800f396:	e7e3      	b.n	800f360 <_scanf_float+0x188>
 800f398:	f1ba 0f02 	cmp.w	sl, #2
 800f39c:	d055      	beq.n	800f44a <_scanf_float+0x272>
 800f39e:	2d01      	cmp	r5, #1
 800f3a0:	d002      	beq.n	800f3a8 <_scanf_float+0x1d0>
 800f3a2:	2d04      	cmp	r5, #4
 800f3a4:	f47f af48 	bne.w	800f238 <_scanf_float+0x60>
 800f3a8:	3501      	adds	r5, #1
 800f3aa:	b2ed      	uxtb	r5, r5
 800f3ac:	e7d8      	b.n	800f360 <_scanf_float+0x188>
 800f3ae:	f1ba 0f01 	cmp.w	sl, #1
 800f3b2:	f47f af41 	bne.w	800f238 <_scanf_float+0x60>
 800f3b6:	f04f 0a02 	mov.w	sl, #2
 800f3ba:	e7d1      	b.n	800f360 <_scanf_float+0x188>
 800f3bc:	b97d      	cbnz	r5, 800f3de <_scanf_float+0x206>
 800f3be:	f1b9 0f00 	cmp.w	r9, #0
 800f3c2:	f47f af3c 	bne.w	800f23e <_scanf_float+0x66>
 800f3c6:	6822      	ldr	r2, [r4, #0]
 800f3c8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f3cc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f3d0:	f47f af39 	bne.w	800f246 <_scanf_float+0x6e>
 800f3d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f3d8:	6022      	str	r2, [r4, #0]
 800f3da:	2501      	movs	r5, #1
 800f3dc:	e7c0      	b.n	800f360 <_scanf_float+0x188>
 800f3de:	2d03      	cmp	r5, #3
 800f3e0:	d0e2      	beq.n	800f3a8 <_scanf_float+0x1d0>
 800f3e2:	2d05      	cmp	r5, #5
 800f3e4:	e7de      	b.n	800f3a4 <_scanf_float+0x1cc>
 800f3e6:	2d02      	cmp	r5, #2
 800f3e8:	f47f af26 	bne.w	800f238 <_scanf_float+0x60>
 800f3ec:	2503      	movs	r5, #3
 800f3ee:	e7b7      	b.n	800f360 <_scanf_float+0x188>
 800f3f0:	2d06      	cmp	r5, #6
 800f3f2:	f47f af21 	bne.w	800f238 <_scanf_float+0x60>
 800f3f6:	2507      	movs	r5, #7
 800f3f8:	e7b2      	b.n	800f360 <_scanf_float+0x188>
 800f3fa:	6822      	ldr	r2, [r4, #0]
 800f3fc:	0591      	lsls	r1, r2, #22
 800f3fe:	f57f af1b 	bpl.w	800f238 <_scanf_float+0x60>
 800f402:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800f406:	6022      	str	r2, [r4, #0]
 800f408:	f8cd 9004 	str.w	r9, [sp, #4]
 800f40c:	e7a8      	b.n	800f360 <_scanf_float+0x188>
 800f40e:	6822      	ldr	r2, [r4, #0]
 800f410:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800f414:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f418:	d006      	beq.n	800f428 <_scanf_float+0x250>
 800f41a:	0550      	lsls	r0, r2, #21
 800f41c:	f57f af0c 	bpl.w	800f238 <_scanf_float+0x60>
 800f420:	f1b9 0f00 	cmp.w	r9, #0
 800f424:	f43f af0f 	beq.w	800f246 <_scanf_float+0x6e>
 800f428:	0591      	lsls	r1, r2, #22
 800f42a:	bf58      	it	pl
 800f42c:	9901      	ldrpl	r1, [sp, #4]
 800f42e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f432:	bf58      	it	pl
 800f434:	eba9 0101 	subpl.w	r1, r9, r1
 800f438:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f43c:	bf58      	it	pl
 800f43e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f442:	6022      	str	r2, [r4, #0]
 800f444:	f04f 0900 	mov.w	r9, #0
 800f448:	e78a      	b.n	800f360 <_scanf_float+0x188>
 800f44a:	f04f 0a03 	mov.w	sl, #3
 800f44e:	e787      	b.n	800f360 <_scanf_float+0x188>
 800f450:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f454:	4639      	mov	r1, r7
 800f456:	4640      	mov	r0, r8
 800f458:	4798      	blx	r3
 800f45a:	2800      	cmp	r0, #0
 800f45c:	f43f aedf 	beq.w	800f21e <_scanf_float+0x46>
 800f460:	e6ea      	b.n	800f238 <_scanf_float+0x60>
 800f462:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f466:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f46a:	463a      	mov	r2, r7
 800f46c:	4640      	mov	r0, r8
 800f46e:	4798      	blx	r3
 800f470:	6923      	ldr	r3, [r4, #16]
 800f472:	3b01      	subs	r3, #1
 800f474:	6123      	str	r3, [r4, #16]
 800f476:	e6ec      	b.n	800f252 <_scanf_float+0x7a>
 800f478:	1e6b      	subs	r3, r5, #1
 800f47a:	2b06      	cmp	r3, #6
 800f47c:	d825      	bhi.n	800f4ca <_scanf_float+0x2f2>
 800f47e:	2d02      	cmp	r5, #2
 800f480:	d836      	bhi.n	800f4f0 <_scanf_float+0x318>
 800f482:	455e      	cmp	r6, fp
 800f484:	f67f aee8 	bls.w	800f258 <_scanf_float+0x80>
 800f488:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f48c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f490:	463a      	mov	r2, r7
 800f492:	4640      	mov	r0, r8
 800f494:	4798      	blx	r3
 800f496:	6923      	ldr	r3, [r4, #16]
 800f498:	3b01      	subs	r3, #1
 800f49a:	6123      	str	r3, [r4, #16]
 800f49c:	e7f1      	b.n	800f482 <_scanf_float+0x2aa>
 800f49e:	9802      	ldr	r0, [sp, #8]
 800f4a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f4a4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f4a8:	9002      	str	r0, [sp, #8]
 800f4aa:	463a      	mov	r2, r7
 800f4ac:	4640      	mov	r0, r8
 800f4ae:	4798      	blx	r3
 800f4b0:	6923      	ldr	r3, [r4, #16]
 800f4b2:	3b01      	subs	r3, #1
 800f4b4:	6123      	str	r3, [r4, #16]
 800f4b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f4ba:	fa5f fa8a 	uxtb.w	sl, sl
 800f4be:	f1ba 0f02 	cmp.w	sl, #2
 800f4c2:	d1ec      	bne.n	800f49e <_scanf_float+0x2c6>
 800f4c4:	3d03      	subs	r5, #3
 800f4c6:	b2ed      	uxtb	r5, r5
 800f4c8:	1b76      	subs	r6, r6, r5
 800f4ca:	6823      	ldr	r3, [r4, #0]
 800f4cc:	05da      	lsls	r2, r3, #23
 800f4ce:	d52f      	bpl.n	800f530 <_scanf_float+0x358>
 800f4d0:	055b      	lsls	r3, r3, #21
 800f4d2:	d510      	bpl.n	800f4f6 <_scanf_float+0x31e>
 800f4d4:	455e      	cmp	r6, fp
 800f4d6:	f67f aebf 	bls.w	800f258 <_scanf_float+0x80>
 800f4da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f4de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f4e2:	463a      	mov	r2, r7
 800f4e4:	4640      	mov	r0, r8
 800f4e6:	4798      	blx	r3
 800f4e8:	6923      	ldr	r3, [r4, #16]
 800f4ea:	3b01      	subs	r3, #1
 800f4ec:	6123      	str	r3, [r4, #16]
 800f4ee:	e7f1      	b.n	800f4d4 <_scanf_float+0x2fc>
 800f4f0:	46aa      	mov	sl, r5
 800f4f2:	9602      	str	r6, [sp, #8]
 800f4f4:	e7df      	b.n	800f4b6 <_scanf_float+0x2de>
 800f4f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f4fa:	6923      	ldr	r3, [r4, #16]
 800f4fc:	2965      	cmp	r1, #101	; 0x65
 800f4fe:	f103 33ff 	add.w	r3, r3, #4294967295
 800f502:	f106 35ff 	add.w	r5, r6, #4294967295
 800f506:	6123      	str	r3, [r4, #16]
 800f508:	d00c      	beq.n	800f524 <_scanf_float+0x34c>
 800f50a:	2945      	cmp	r1, #69	; 0x45
 800f50c:	d00a      	beq.n	800f524 <_scanf_float+0x34c>
 800f50e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f512:	463a      	mov	r2, r7
 800f514:	4640      	mov	r0, r8
 800f516:	4798      	blx	r3
 800f518:	6923      	ldr	r3, [r4, #16]
 800f51a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f51e:	3b01      	subs	r3, #1
 800f520:	1eb5      	subs	r5, r6, #2
 800f522:	6123      	str	r3, [r4, #16]
 800f524:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f528:	463a      	mov	r2, r7
 800f52a:	4640      	mov	r0, r8
 800f52c:	4798      	blx	r3
 800f52e:	462e      	mov	r6, r5
 800f530:	6825      	ldr	r5, [r4, #0]
 800f532:	f015 0510 	ands.w	r5, r5, #16
 800f536:	d158      	bne.n	800f5ea <_scanf_float+0x412>
 800f538:	7035      	strb	r5, [r6, #0]
 800f53a:	6823      	ldr	r3, [r4, #0]
 800f53c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f544:	d11c      	bne.n	800f580 <_scanf_float+0x3a8>
 800f546:	9b01      	ldr	r3, [sp, #4]
 800f548:	454b      	cmp	r3, r9
 800f54a:	eba3 0209 	sub.w	r2, r3, r9
 800f54e:	d124      	bne.n	800f59a <_scanf_float+0x3c2>
 800f550:	2200      	movs	r2, #0
 800f552:	4659      	mov	r1, fp
 800f554:	4640      	mov	r0, r8
 800f556:	f001 f86d 	bl	8010634 <_strtod_r>
 800f55a:	9b03      	ldr	r3, [sp, #12]
 800f55c:	6821      	ldr	r1, [r4, #0]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	f011 0f02 	tst.w	r1, #2
 800f564:	ec57 6b10 	vmov	r6, r7, d0
 800f568:	f103 0204 	add.w	r2, r3, #4
 800f56c:	d020      	beq.n	800f5b0 <_scanf_float+0x3d8>
 800f56e:	9903      	ldr	r1, [sp, #12]
 800f570:	600a      	str	r2, [r1, #0]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	e9c3 6700 	strd	r6, r7, [r3]
 800f578:	68e3      	ldr	r3, [r4, #12]
 800f57a:	3301      	adds	r3, #1
 800f57c:	60e3      	str	r3, [r4, #12]
 800f57e:	e66c      	b.n	800f25a <_scanf_float+0x82>
 800f580:	9b04      	ldr	r3, [sp, #16]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d0e4      	beq.n	800f550 <_scanf_float+0x378>
 800f586:	9905      	ldr	r1, [sp, #20]
 800f588:	230a      	movs	r3, #10
 800f58a:	462a      	mov	r2, r5
 800f58c:	3101      	adds	r1, #1
 800f58e:	4640      	mov	r0, r8
 800f590:	f001 f8da 	bl	8010748 <_strtol_r>
 800f594:	9b04      	ldr	r3, [sp, #16]
 800f596:	9e05      	ldr	r6, [sp, #20]
 800f598:	1ac2      	subs	r2, r0, r3
 800f59a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f59e:	429e      	cmp	r6, r3
 800f5a0:	bf28      	it	cs
 800f5a2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f5a6:	4912      	ldr	r1, [pc, #72]	; (800f5f0 <_scanf_float+0x418>)
 800f5a8:	4630      	mov	r0, r6
 800f5aa:	f000 f977 	bl	800f89c <siprintf>
 800f5ae:	e7cf      	b.n	800f550 <_scanf_float+0x378>
 800f5b0:	f011 0f04 	tst.w	r1, #4
 800f5b4:	9903      	ldr	r1, [sp, #12]
 800f5b6:	600a      	str	r2, [r1, #0]
 800f5b8:	d1db      	bne.n	800f572 <_scanf_float+0x39a>
 800f5ba:	f8d3 8000 	ldr.w	r8, [r3]
 800f5be:	ee10 2a10 	vmov	r2, s0
 800f5c2:	ee10 0a10 	vmov	r0, s0
 800f5c6:	463b      	mov	r3, r7
 800f5c8:	4639      	mov	r1, r7
 800f5ca:	f7f1 fabf 	bl	8000b4c <__aeabi_dcmpun>
 800f5ce:	b128      	cbz	r0, 800f5dc <_scanf_float+0x404>
 800f5d0:	4808      	ldr	r0, [pc, #32]	; (800f5f4 <_scanf_float+0x41c>)
 800f5d2:	f000 f919 	bl	800f808 <nanf>
 800f5d6:	ed88 0a00 	vstr	s0, [r8]
 800f5da:	e7cd      	b.n	800f578 <_scanf_float+0x3a0>
 800f5dc:	4630      	mov	r0, r6
 800f5de:	4639      	mov	r1, r7
 800f5e0:	f7f1 fb12 	bl	8000c08 <__aeabi_d2f>
 800f5e4:	f8c8 0000 	str.w	r0, [r8]
 800f5e8:	e7c6      	b.n	800f578 <_scanf_float+0x3a0>
 800f5ea:	2500      	movs	r5, #0
 800f5ec:	e635      	b.n	800f25a <_scanf_float+0x82>
 800f5ee:	bf00      	nop
 800f5f0:	080149c2 	.word	0x080149c2
 800f5f4:	08014a53 	.word	0x08014a53

0800f5f8 <iprintf>:
 800f5f8:	b40f      	push	{r0, r1, r2, r3}
 800f5fa:	4b0a      	ldr	r3, [pc, #40]	; (800f624 <iprintf+0x2c>)
 800f5fc:	b513      	push	{r0, r1, r4, lr}
 800f5fe:	681c      	ldr	r4, [r3, #0]
 800f600:	b124      	cbz	r4, 800f60c <iprintf+0x14>
 800f602:	69a3      	ldr	r3, [r4, #24]
 800f604:	b913      	cbnz	r3, 800f60c <iprintf+0x14>
 800f606:	4620      	mov	r0, r4
 800f608:	f7fe ffd4 	bl	800e5b4 <__sinit>
 800f60c:	ab05      	add	r3, sp, #20
 800f60e:	9a04      	ldr	r2, [sp, #16]
 800f610:	68a1      	ldr	r1, [r4, #8]
 800f612:	9301      	str	r3, [sp, #4]
 800f614:	4620      	mov	r0, r4
 800f616:	f003 fdb3 	bl	8013180 <_vfiprintf_r>
 800f61a:	b002      	add	sp, #8
 800f61c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f620:	b004      	add	sp, #16
 800f622:	4770      	bx	lr
 800f624:	20000088 	.word	0x20000088

0800f628 <_puts_r>:
 800f628:	b570      	push	{r4, r5, r6, lr}
 800f62a:	460e      	mov	r6, r1
 800f62c:	4605      	mov	r5, r0
 800f62e:	b118      	cbz	r0, 800f638 <_puts_r+0x10>
 800f630:	6983      	ldr	r3, [r0, #24]
 800f632:	b90b      	cbnz	r3, 800f638 <_puts_r+0x10>
 800f634:	f7fe ffbe 	bl	800e5b4 <__sinit>
 800f638:	69ab      	ldr	r3, [r5, #24]
 800f63a:	68ac      	ldr	r4, [r5, #8]
 800f63c:	b913      	cbnz	r3, 800f644 <_puts_r+0x1c>
 800f63e:	4628      	mov	r0, r5
 800f640:	f7fe ffb8 	bl	800e5b4 <__sinit>
 800f644:	4b2c      	ldr	r3, [pc, #176]	; (800f6f8 <_puts_r+0xd0>)
 800f646:	429c      	cmp	r4, r3
 800f648:	d120      	bne.n	800f68c <_puts_r+0x64>
 800f64a:	686c      	ldr	r4, [r5, #4]
 800f64c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f64e:	07db      	lsls	r3, r3, #31
 800f650:	d405      	bmi.n	800f65e <_puts_r+0x36>
 800f652:	89a3      	ldrh	r3, [r4, #12]
 800f654:	0598      	lsls	r0, r3, #22
 800f656:	d402      	bmi.n	800f65e <_puts_r+0x36>
 800f658:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f65a:	f7ff f86e 	bl	800e73a <__retarget_lock_acquire_recursive>
 800f65e:	89a3      	ldrh	r3, [r4, #12]
 800f660:	0719      	lsls	r1, r3, #28
 800f662:	d51d      	bpl.n	800f6a0 <_puts_r+0x78>
 800f664:	6923      	ldr	r3, [r4, #16]
 800f666:	b1db      	cbz	r3, 800f6a0 <_puts_r+0x78>
 800f668:	3e01      	subs	r6, #1
 800f66a:	68a3      	ldr	r3, [r4, #8]
 800f66c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f670:	3b01      	subs	r3, #1
 800f672:	60a3      	str	r3, [r4, #8]
 800f674:	bb39      	cbnz	r1, 800f6c6 <_puts_r+0x9e>
 800f676:	2b00      	cmp	r3, #0
 800f678:	da38      	bge.n	800f6ec <_puts_r+0xc4>
 800f67a:	4622      	mov	r2, r4
 800f67c:	210a      	movs	r1, #10
 800f67e:	4628      	mov	r0, r5
 800f680:	f001 f8e2 	bl	8010848 <__swbuf_r>
 800f684:	3001      	adds	r0, #1
 800f686:	d011      	beq.n	800f6ac <_puts_r+0x84>
 800f688:	250a      	movs	r5, #10
 800f68a:	e011      	b.n	800f6b0 <_puts_r+0x88>
 800f68c:	4b1b      	ldr	r3, [pc, #108]	; (800f6fc <_puts_r+0xd4>)
 800f68e:	429c      	cmp	r4, r3
 800f690:	d101      	bne.n	800f696 <_puts_r+0x6e>
 800f692:	68ac      	ldr	r4, [r5, #8]
 800f694:	e7da      	b.n	800f64c <_puts_r+0x24>
 800f696:	4b1a      	ldr	r3, [pc, #104]	; (800f700 <_puts_r+0xd8>)
 800f698:	429c      	cmp	r4, r3
 800f69a:	bf08      	it	eq
 800f69c:	68ec      	ldreq	r4, [r5, #12]
 800f69e:	e7d5      	b.n	800f64c <_puts_r+0x24>
 800f6a0:	4621      	mov	r1, r4
 800f6a2:	4628      	mov	r0, r5
 800f6a4:	f001 f934 	bl	8010910 <__swsetup_r>
 800f6a8:	2800      	cmp	r0, #0
 800f6aa:	d0dd      	beq.n	800f668 <_puts_r+0x40>
 800f6ac:	f04f 35ff 	mov.w	r5, #4294967295
 800f6b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f6b2:	07da      	lsls	r2, r3, #31
 800f6b4:	d405      	bmi.n	800f6c2 <_puts_r+0x9a>
 800f6b6:	89a3      	ldrh	r3, [r4, #12]
 800f6b8:	059b      	lsls	r3, r3, #22
 800f6ba:	d402      	bmi.n	800f6c2 <_puts_r+0x9a>
 800f6bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f6be:	f7ff f83d 	bl	800e73c <__retarget_lock_release_recursive>
 800f6c2:	4628      	mov	r0, r5
 800f6c4:	bd70      	pop	{r4, r5, r6, pc}
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	da04      	bge.n	800f6d4 <_puts_r+0xac>
 800f6ca:	69a2      	ldr	r2, [r4, #24]
 800f6cc:	429a      	cmp	r2, r3
 800f6ce:	dc06      	bgt.n	800f6de <_puts_r+0xb6>
 800f6d0:	290a      	cmp	r1, #10
 800f6d2:	d004      	beq.n	800f6de <_puts_r+0xb6>
 800f6d4:	6823      	ldr	r3, [r4, #0]
 800f6d6:	1c5a      	adds	r2, r3, #1
 800f6d8:	6022      	str	r2, [r4, #0]
 800f6da:	7019      	strb	r1, [r3, #0]
 800f6dc:	e7c5      	b.n	800f66a <_puts_r+0x42>
 800f6de:	4622      	mov	r2, r4
 800f6e0:	4628      	mov	r0, r5
 800f6e2:	f001 f8b1 	bl	8010848 <__swbuf_r>
 800f6e6:	3001      	adds	r0, #1
 800f6e8:	d1bf      	bne.n	800f66a <_puts_r+0x42>
 800f6ea:	e7df      	b.n	800f6ac <_puts_r+0x84>
 800f6ec:	6823      	ldr	r3, [r4, #0]
 800f6ee:	250a      	movs	r5, #10
 800f6f0:	1c5a      	adds	r2, r3, #1
 800f6f2:	6022      	str	r2, [r4, #0]
 800f6f4:	701d      	strb	r5, [r3, #0]
 800f6f6:	e7db      	b.n	800f6b0 <_puts_r+0x88>
 800f6f8:	0801494c 	.word	0x0801494c
 800f6fc:	0801496c 	.word	0x0801496c
 800f700:	0801492c 	.word	0x0801492c

0800f704 <puts>:
 800f704:	4b02      	ldr	r3, [pc, #8]	; (800f710 <puts+0xc>)
 800f706:	4601      	mov	r1, r0
 800f708:	6818      	ldr	r0, [r3, #0]
 800f70a:	f7ff bf8d 	b.w	800f628 <_puts_r>
 800f70e:	bf00      	nop
 800f710:	20000088 	.word	0x20000088

0800f714 <cleanup_glue>:
 800f714:	b538      	push	{r3, r4, r5, lr}
 800f716:	460c      	mov	r4, r1
 800f718:	6809      	ldr	r1, [r1, #0]
 800f71a:	4605      	mov	r5, r0
 800f71c:	b109      	cbz	r1, 800f722 <cleanup_glue+0xe>
 800f71e:	f7ff fff9 	bl	800f714 <cleanup_glue>
 800f722:	4621      	mov	r1, r4
 800f724:	4628      	mov	r0, r5
 800f726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f72a:	f7ff b841 	b.w	800e7b0 <_free_r>
	...

0800f730 <_reclaim_reent>:
 800f730:	4b2c      	ldr	r3, [pc, #176]	; (800f7e4 <_reclaim_reent+0xb4>)
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	4283      	cmp	r3, r0
 800f736:	b570      	push	{r4, r5, r6, lr}
 800f738:	4604      	mov	r4, r0
 800f73a:	d051      	beq.n	800f7e0 <_reclaim_reent+0xb0>
 800f73c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f73e:	b143      	cbz	r3, 800f752 <_reclaim_reent+0x22>
 800f740:	68db      	ldr	r3, [r3, #12]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d14a      	bne.n	800f7dc <_reclaim_reent+0xac>
 800f746:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f748:	6819      	ldr	r1, [r3, #0]
 800f74a:	b111      	cbz	r1, 800f752 <_reclaim_reent+0x22>
 800f74c:	4620      	mov	r0, r4
 800f74e:	f7ff f82f 	bl	800e7b0 <_free_r>
 800f752:	6961      	ldr	r1, [r4, #20]
 800f754:	b111      	cbz	r1, 800f75c <_reclaim_reent+0x2c>
 800f756:	4620      	mov	r0, r4
 800f758:	f7ff f82a 	bl	800e7b0 <_free_r>
 800f75c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f75e:	b111      	cbz	r1, 800f766 <_reclaim_reent+0x36>
 800f760:	4620      	mov	r0, r4
 800f762:	f7ff f825 	bl	800e7b0 <_free_r>
 800f766:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f768:	b111      	cbz	r1, 800f770 <_reclaim_reent+0x40>
 800f76a:	4620      	mov	r0, r4
 800f76c:	f7ff f820 	bl	800e7b0 <_free_r>
 800f770:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f772:	b111      	cbz	r1, 800f77a <_reclaim_reent+0x4a>
 800f774:	4620      	mov	r0, r4
 800f776:	f7ff f81b 	bl	800e7b0 <_free_r>
 800f77a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f77c:	b111      	cbz	r1, 800f784 <_reclaim_reent+0x54>
 800f77e:	4620      	mov	r0, r4
 800f780:	f7ff f816 	bl	800e7b0 <_free_r>
 800f784:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f786:	b111      	cbz	r1, 800f78e <_reclaim_reent+0x5e>
 800f788:	4620      	mov	r0, r4
 800f78a:	f7ff f811 	bl	800e7b0 <_free_r>
 800f78e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f790:	b111      	cbz	r1, 800f798 <_reclaim_reent+0x68>
 800f792:	4620      	mov	r0, r4
 800f794:	f7ff f80c 	bl	800e7b0 <_free_r>
 800f798:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f79a:	b111      	cbz	r1, 800f7a2 <_reclaim_reent+0x72>
 800f79c:	4620      	mov	r0, r4
 800f79e:	f7ff f807 	bl	800e7b0 <_free_r>
 800f7a2:	69a3      	ldr	r3, [r4, #24]
 800f7a4:	b1e3      	cbz	r3, 800f7e0 <_reclaim_reent+0xb0>
 800f7a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f7a8:	4620      	mov	r0, r4
 800f7aa:	4798      	blx	r3
 800f7ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f7ae:	b1b9      	cbz	r1, 800f7e0 <_reclaim_reent+0xb0>
 800f7b0:	4620      	mov	r0, r4
 800f7b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f7b6:	f7ff bfad 	b.w	800f714 <cleanup_glue>
 800f7ba:	5949      	ldr	r1, [r1, r5]
 800f7bc:	b941      	cbnz	r1, 800f7d0 <_reclaim_reent+0xa0>
 800f7be:	3504      	adds	r5, #4
 800f7c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f7c2:	2d80      	cmp	r5, #128	; 0x80
 800f7c4:	68d9      	ldr	r1, [r3, #12]
 800f7c6:	d1f8      	bne.n	800f7ba <_reclaim_reent+0x8a>
 800f7c8:	4620      	mov	r0, r4
 800f7ca:	f7fe fff1 	bl	800e7b0 <_free_r>
 800f7ce:	e7ba      	b.n	800f746 <_reclaim_reent+0x16>
 800f7d0:	680e      	ldr	r6, [r1, #0]
 800f7d2:	4620      	mov	r0, r4
 800f7d4:	f7fe ffec 	bl	800e7b0 <_free_r>
 800f7d8:	4631      	mov	r1, r6
 800f7da:	e7ef      	b.n	800f7bc <_reclaim_reent+0x8c>
 800f7dc:	2500      	movs	r5, #0
 800f7de:	e7ef      	b.n	800f7c0 <_reclaim_reent+0x90>
 800f7e0:	bd70      	pop	{r4, r5, r6, pc}
 800f7e2:	bf00      	nop
 800f7e4:	20000088 	.word	0x20000088

0800f7e8 <_sbrk_r>:
 800f7e8:	b538      	push	{r3, r4, r5, lr}
 800f7ea:	4d06      	ldr	r5, [pc, #24]	; (800f804 <_sbrk_r+0x1c>)
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	4604      	mov	r4, r0
 800f7f0:	4608      	mov	r0, r1
 800f7f2:	602b      	str	r3, [r5, #0]
 800f7f4:	f004 f836 	bl	8013864 <_sbrk>
 800f7f8:	1c43      	adds	r3, r0, #1
 800f7fa:	d102      	bne.n	800f802 <_sbrk_r+0x1a>
 800f7fc:	682b      	ldr	r3, [r5, #0]
 800f7fe:	b103      	cbz	r3, 800f802 <_sbrk_r+0x1a>
 800f800:	6023      	str	r3, [r4, #0]
 800f802:	bd38      	pop	{r3, r4, r5, pc}
 800f804:	200062e4 	.word	0x200062e4

0800f808 <nanf>:
 800f808:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f810 <nanf+0x8>
 800f80c:	4770      	bx	lr
 800f80e:	bf00      	nop
 800f810:	7fc00000 	.word	0x7fc00000

0800f814 <_raise_r>:
 800f814:	291f      	cmp	r1, #31
 800f816:	b538      	push	{r3, r4, r5, lr}
 800f818:	4604      	mov	r4, r0
 800f81a:	460d      	mov	r5, r1
 800f81c:	d904      	bls.n	800f828 <_raise_r+0x14>
 800f81e:	2316      	movs	r3, #22
 800f820:	6003      	str	r3, [r0, #0]
 800f822:	f04f 30ff 	mov.w	r0, #4294967295
 800f826:	bd38      	pop	{r3, r4, r5, pc}
 800f828:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f82a:	b112      	cbz	r2, 800f832 <_raise_r+0x1e>
 800f82c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f830:	b94b      	cbnz	r3, 800f846 <_raise_r+0x32>
 800f832:	4620      	mov	r0, r4
 800f834:	f000 f830 	bl	800f898 <_getpid_r>
 800f838:	462a      	mov	r2, r5
 800f83a:	4601      	mov	r1, r0
 800f83c:	4620      	mov	r0, r4
 800f83e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f842:	f000 b817 	b.w	800f874 <_kill_r>
 800f846:	2b01      	cmp	r3, #1
 800f848:	d00a      	beq.n	800f860 <_raise_r+0x4c>
 800f84a:	1c59      	adds	r1, r3, #1
 800f84c:	d103      	bne.n	800f856 <_raise_r+0x42>
 800f84e:	2316      	movs	r3, #22
 800f850:	6003      	str	r3, [r0, #0]
 800f852:	2001      	movs	r0, #1
 800f854:	e7e7      	b.n	800f826 <_raise_r+0x12>
 800f856:	2400      	movs	r4, #0
 800f858:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f85c:	4628      	mov	r0, r5
 800f85e:	4798      	blx	r3
 800f860:	2000      	movs	r0, #0
 800f862:	e7e0      	b.n	800f826 <_raise_r+0x12>

0800f864 <raise>:
 800f864:	4b02      	ldr	r3, [pc, #8]	; (800f870 <raise+0xc>)
 800f866:	4601      	mov	r1, r0
 800f868:	6818      	ldr	r0, [r3, #0]
 800f86a:	f7ff bfd3 	b.w	800f814 <_raise_r>
 800f86e:	bf00      	nop
 800f870:	20000088 	.word	0x20000088

0800f874 <_kill_r>:
 800f874:	b538      	push	{r3, r4, r5, lr}
 800f876:	4d07      	ldr	r5, [pc, #28]	; (800f894 <_kill_r+0x20>)
 800f878:	2300      	movs	r3, #0
 800f87a:	4604      	mov	r4, r0
 800f87c:	4608      	mov	r0, r1
 800f87e:	4611      	mov	r1, r2
 800f880:	602b      	str	r3, [r5, #0]
 800f882:	f003 ffd7 	bl	8013834 <_kill>
 800f886:	1c43      	adds	r3, r0, #1
 800f888:	d102      	bne.n	800f890 <_kill_r+0x1c>
 800f88a:	682b      	ldr	r3, [r5, #0]
 800f88c:	b103      	cbz	r3, 800f890 <_kill_r+0x1c>
 800f88e:	6023      	str	r3, [r4, #0]
 800f890:	bd38      	pop	{r3, r4, r5, pc}
 800f892:	bf00      	nop
 800f894:	200062e4 	.word	0x200062e4

0800f898 <_getpid_r>:
 800f898:	f003 bfbc 	b.w	8013814 <_getpid>

0800f89c <siprintf>:
 800f89c:	b40e      	push	{r1, r2, r3}
 800f89e:	b500      	push	{lr}
 800f8a0:	b09c      	sub	sp, #112	; 0x70
 800f8a2:	ab1d      	add	r3, sp, #116	; 0x74
 800f8a4:	9002      	str	r0, [sp, #8]
 800f8a6:	9006      	str	r0, [sp, #24]
 800f8a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f8ac:	4809      	ldr	r0, [pc, #36]	; (800f8d4 <siprintf+0x38>)
 800f8ae:	9107      	str	r1, [sp, #28]
 800f8b0:	9104      	str	r1, [sp, #16]
 800f8b2:	4909      	ldr	r1, [pc, #36]	; (800f8d8 <siprintf+0x3c>)
 800f8b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8b8:	9105      	str	r1, [sp, #20]
 800f8ba:	6800      	ldr	r0, [r0, #0]
 800f8bc:	9301      	str	r3, [sp, #4]
 800f8be:	a902      	add	r1, sp, #8
 800f8c0:	f003 f962 	bl	8012b88 <_svfiprintf_r>
 800f8c4:	9b02      	ldr	r3, [sp, #8]
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	701a      	strb	r2, [r3, #0]
 800f8ca:	b01c      	add	sp, #112	; 0x70
 800f8cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f8d0:	b003      	add	sp, #12
 800f8d2:	4770      	bx	lr
 800f8d4:	20000088 	.word	0x20000088
 800f8d8:	ffff0208 	.word	0xffff0208

0800f8dc <siscanf>:
 800f8dc:	b40e      	push	{r1, r2, r3}
 800f8de:	b510      	push	{r4, lr}
 800f8e0:	b09f      	sub	sp, #124	; 0x7c
 800f8e2:	ac21      	add	r4, sp, #132	; 0x84
 800f8e4:	f44f 7101 	mov.w	r1, #516	; 0x204
 800f8e8:	f854 2b04 	ldr.w	r2, [r4], #4
 800f8ec:	9201      	str	r2, [sp, #4]
 800f8ee:	f8ad 101c 	strh.w	r1, [sp, #28]
 800f8f2:	9004      	str	r0, [sp, #16]
 800f8f4:	9008      	str	r0, [sp, #32]
 800f8f6:	f7f0 fc7b 	bl	80001f0 <strlen>
 800f8fa:	4b0c      	ldr	r3, [pc, #48]	; (800f92c <siscanf+0x50>)
 800f8fc:	9005      	str	r0, [sp, #20]
 800f8fe:	9009      	str	r0, [sp, #36]	; 0x24
 800f900:	930d      	str	r3, [sp, #52]	; 0x34
 800f902:	480b      	ldr	r0, [pc, #44]	; (800f930 <siscanf+0x54>)
 800f904:	9a01      	ldr	r2, [sp, #4]
 800f906:	6800      	ldr	r0, [r0, #0]
 800f908:	9403      	str	r4, [sp, #12]
 800f90a:	2300      	movs	r3, #0
 800f90c:	9311      	str	r3, [sp, #68]	; 0x44
 800f90e:	9316      	str	r3, [sp, #88]	; 0x58
 800f910:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f914:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f918:	a904      	add	r1, sp, #16
 800f91a:	4623      	mov	r3, r4
 800f91c:	f003 fa8e 	bl	8012e3c <__ssvfiscanf_r>
 800f920:	b01f      	add	sp, #124	; 0x7c
 800f922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f926:	b003      	add	sp, #12
 800f928:	4770      	bx	lr
 800f92a:	bf00      	nop
 800f92c:	0800f957 	.word	0x0800f957
 800f930:	20000088 	.word	0x20000088

0800f934 <__sread>:
 800f934:	b510      	push	{r4, lr}
 800f936:	460c      	mov	r4, r1
 800f938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f93c:	f003 fe9c 	bl	8013678 <_read_r>
 800f940:	2800      	cmp	r0, #0
 800f942:	bfab      	itete	ge
 800f944:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f946:	89a3      	ldrhlt	r3, [r4, #12]
 800f948:	181b      	addge	r3, r3, r0
 800f94a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f94e:	bfac      	ite	ge
 800f950:	6563      	strge	r3, [r4, #84]	; 0x54
 800f952:	81a3      	strhlt	r3, [r4, #12]
 800f954:	bd10      	pop	{r4, pc}

0800f956 <__seofread>:
 800f956:	2000      	movs	r0, #0
 800f958:	4770      	bx	lr

0800f95a <__swrite>:
 800f95a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f95e:	461f      	mov	r7, r3
 800f960:	898b      	ldrh	r3, [r1, #12]
 800f962:	05db      	lsls	r3, r3, #23
 800f964:	4605      	mov	r5, r0
 800f966:	460c      	mov	r4, r1
 800f968:	4616      	mov	r6, r2
 800f96a:	d505      	bpl.n	800f978 <__swrite+0x1e>
 800f96c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f970:	2302      	movs	r3, #2
 800f972:	2200      	movs	r2, #0
 800f974:	f002 fb28 	bl	8011fc8 <_lseek_r>
 800f978:	89a3      	ldrh	r3, [r4, #12]
 800f97a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f97e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f982:	81a3      	strh	r3, [r4, #12]
 800f984:	4632      	mov	r2, r6
 800f986:	463b      	mov	r3, r7
 800f988:	4628      	mov	r0, r5
 800f98a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f98e:	f000 bfad 	b.w	80108ec <_write_r>

0800f992 <__sseek>:
 800f992:	b510      	push	{r4, lr}
 800f994:	460c      	mov	r4, r1
 800f996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f99a:	f002 fb15 	bl	8011fc8 <_lseek_r>
 800f99e:	1c43      	adds	r3, r0, #1
 800f9a0:	89a3      	ldrh	r3, [r4, #12]
 800f9a2:	bf15      	itete	ne
 800f9a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800f9a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f9aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f9ae:	81a3      	strheq	r3, [r4, #12]
 800f9b0:	bf18      	it	ne
 800f9b2:	81a3      	strhne	r3, [r4, #12]
 800f9b4:	bd10      	pop	{r4, pc}

0800f9b6 <__sclose>:
 800f9b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9ba:	f001 b835 	b.w	8010a28 <_close_r>

0800f9be <strncmp>:
 800f9be:	b510      	push	{r4, lr}
 800f9c0:	b16a      	cbz	r2, 800f9de <strncmp+0x20>
 800f9c2:	3901      	subs	r1, #1
 800f9c4:	1884      	adds	r4, r0, r2
 800f9c6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f9ca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f9ce:	4293      	cmp	r3, r2
 800f9d0:	d103      	bne.n	800f9da <strncmp+0x1c>
 800f9d2:	42a0      	cmp	r0, r4
 800f9d4:	d001      	beq.n	800f9da <strncmp+0x1c>
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d1f5      	bne.n	800f9c6 <strncmp+0x8>
 800f9da:	1a98      	subs	r0, r3, r2
 800f9dc:	bd10      	pop	{r4, pc}
 800f9de:	4610      	mov	r0, r2
 800f9e0:	e7fc      	b.n	800f9dc <strncmp+0x1e>

0800f9e2 <sulp>:
 800f9e2:	b570      	push	{r4, r5, r6, lr}
 800f9e4:	4604      	mov	r4, r0
 800f9e6:	460d      	mov	r5, r1
 800f9e8:	ec45 4b10 	vmov	d0, r4, r5
 800f9ec:	4616      	mov	r6, r2
 800f9ee:	f002 feeb 	bl	80127c8 <__ulp>
 800f9f2:	ec51 0b10 	vmov	r0, r1, d0
 800f9f6:	b17e      	cbz	r6, 800fa18 <sulp+0x36>
 800f9f8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f9fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	dd09      	ble.n	800fa18 <sulp+0x36>
 800fa04:	051b      	lsls	r3, r3, #20
 800fa06:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800fa0a:	2400      	movs	r4, #0
 800fa0c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800fa10:	4622      	mov	r2, r4
 800fa12:	462b      	mov	r3, r5
 800fa14:	f7f0 fe00 	bl	8000618 <__aeabi_dmul>
 800fa18:	bd70      	pop	{r4, r5, r6, pc}
 800fa1a:	0000      	movs	r0, r0
 800fa1c:	0000      	movs	r0, r0
	...

0800fa20 <_strtod_l>:
 800fa20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa24:	b0a3      	sub	sp, #140	; 0x8c
 800fa26:	461f      	mov	r7, r3
 800fa28:	2300      	movs	r3, #0
 800fa2a:	931e      	str	r3, [sp, #120]	; 0x78
 800fa2c:	4ba4      	ldr	r3, [pc, #656]	; (800fcc0 <_strtod_l+0x2a0>)
 800fa2e:	9219      	str	r2, [sp, #100]	; 0x64
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	9307      	str	r3, [sp, #28]
 800fa34:	4604      	mov	r4, r0
 800fa36:	4618      	mov	r0, r3
 800fa38:	4688      	mov	r8, r1
 800fa3a:	f7f0 fbd9 	bl	80001f0 <strlen>
 800fa3e:	f04f 0a00 	mov.w	sl, #0
 800fa42:	4605      	mov	r5, r0
 800fa44:	f04f 0b00 	mov.w	fp, #0
 800fa48:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800fa4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fa4e:	781a      	ldrb	r2, [r3, #0]
 800fa50:	2a2b      	cmp	r2, #43	; 0x2b
 800fa52:	d04c      	beq.n	800faee <_strtod_l+0xce>
 800fa54:	d839      	bhi.n	800faca <_strtod_l+0xaa>
 800fa56:	2a0d      	cmp	r2, #13
 800fa58:	d832      	bhi.n	800fac0 <_strtod_l+0xa0>
 800fa5a:	2a08      	cmp	r2, #8
 800fa5c:	d832      	bhi.n	800fac4 <_strtod_l+0xa4>
 800fa5e:	2a00      	cmp	r2, #0
 800fa60:	d03c      	beq.n	800fadc <_strtod_l+0xbc>
 800fa62:	2300      	movs	r3, #0
 800fa64:	930e      	str	r3, [sp, #56]	; 0x38
 800fa66:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800fa68:	7833      	ldrb	r3, [r6, #0]
 800fa6a:	2b30      	cmp	r3, #48	; 0x30
 800fa6c:	f040 80b4 	bne.w	800fbd8 <_strtod_l+0x1b8>
 800fa70:	7873      	ldrb	r3, [r6, #1]
 800fa72:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fa76:	2b58      	cmp	r3, #88	; 0x58
 800fa78:	d16c      	bne.n	800fb54 <_strtod_l+0x134>
 800fa7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa7c:	9301      	str	r3, [sp, #4]
 800fa7e:	ab1e      	add	r3, sp, #120	; 0x78
 800fa80:	9702      	str	r7, [sp, #8]
 800fa82:	9300      	str	r3, [sp, #0]
 800fa84:	4a8f      	ldr	r2, [pc, #572]	; (800fcc4 <_strtod_l+0x2a4>)
 800fa86:	ab1f      	add	r3, sp, #124	; 0x7c
 800fa88:	a91d      	add	r1, sp, #116	; 0x74
 800fa8a:	4620      	mov	r0, r4
 800fa8c:	f001 ff90 	bl	80119b0 <__gethex>
 800fa90:	f010 0707 	ands.w	r7, r0, #7
 800fa94:	4605      	mov	r5, r0
 800fa96:	d005      	beq.n	800faa4 <_strtod_l+0x84>
 800fa98:	2f06      	cmp	r7, #6
 800fa9a:	d12a      	bne.n	800faf2 <_strtod_l+0xd2>
 800fa9c:	3601      	adds	r6, #1
 800fa9e:	2300      	movs	r3, #0
 800faa0:	961d      	str	r6, [sp, #116]	; 0x74
 800faa2:	930e      	str	r3, [sp, #56]	; 0x38
 800faa4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	f040 8596 	bne.w	80105d8 <_strtod_l+0xbb8>
 800faac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800faae:	b1db      	cbz	r3, 800fae8 <_strtod_l+0xc8>
 800fab0:	4652      	mov	r2, sl
 800fab2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fab6:	ec43 2b10 	vmov	d0, r2, r3
 800faba:	b023      	add	sp, #140	; 0x8c
 800fabc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fac0:	2a20      	cmp	r2, #32
 800fac2:	d1ce      	bne.n	800fa62 <_strtod_l+0x42>
 800fac4:	3301      	adds	r3, #1
 800fac6:	931d      	str	r3, [sp, #116]	; 0x74
 800fac8:	e7c0      	b.n	800fa4c <_strtod_l+0x2c>
 800faca:	2a2d      	cmp	r2, #45	; 0x2d
 800facc:	d1c9      	bne.n	800fa62 <_strtod_l+0x42>
 800face:	2201      	movs	r2, #1
 800fad0:	920e      	str	r2, [sp, #56]	; 0x38
 800fad2:	1c5a      	adds	r2, r3, #1
 800fad4:	921d      	str	r2, [sp, #116]	; 0x74
 800fad6:	785b      	ldrb	r3, [r3, #1]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d1c4      	bne.n	800fa66 <_strtod_l+0x46>
 800fadc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fade:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	f040 8576 	bne.w	80105d4 <_strtod_l+0xbb4>
 800fae8:	4652      	mov	r2, sl
 800faea:	465b      	mov	r3, fp
 800faec:	e7e3      	b.n	800fab6 <_strtod_l+0x96>
 800faee:	2200      	movs	r2, #0
 800faf0:	e7ee      	b.n	800fad0 <_strtod_l+0xb0>
 800faf2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800faf4:	b13a      	cbz	r2, 800fb06 <_strtod_l+0xe6>
 800faf6:	2135      	movs	r1, #53	; 0x35
 800faf8:	a820      	add	r0, sp, #128	; 0x80
 800fafa:	f002 ff70 	bl	80129de <__copybits>
 800fafe:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fb00:	4620      	mov	r0, r4
 800fb02:	f002 fb35 	bl	8012170 <_Bfree>
 800fb06:	3f01      	subs	r7, #1
 800fb08:	2f05      	cmp	r7, #5
 800fb0a:	d807      	bhi.n	800fb1c <_strtod_l+0xfc>
 800fb0c:	e8df f007 	tbb	[pc, r7]
 800fb10:	1d180b0e 	.word	0x1d180b0e
 800fb14:	030e      	.short	0x030e
 800fb16:	f04f 0b00 	mov.w	fp, #0
 800fb1a:	46da      	mov	sl, fp
 800fb1c:	0728      	lsls	r0, r5, #28
 800fb1e:	d5c1      	bpl.n	800faa4 <_strtod_l+0x84>
 800fb20:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800fb24:	e7be      	b.n	800faa4 <_strtod_l+0x84>
 800fb26:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800fb2a:	e7f7      	b.n	800fb1c <_strtod_l+0xfc>
 800fb2c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800fb30:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800fb32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fb36:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fb3a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fb3e:	e7ed      	b.n	800fb1c <_strtod_l+0xfc>
 800fb40:	f8df b184 	ldr.w	fp, [pc, #388]	; 800fcc8 <_strtod_l+0x2a8>
 800fb44:	f04f 0a00 	mov.w	sl, #0
 800fb48:	e7e8      	b.n	800fb1c <_strtod_l+0xfc>
 800fb4a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800fb4e:	f04f 3aff 	mov.w	sl, #4294967295
 800fb52:	e7e3      	b.n	800fb1c <_strtod_l+0xfc>
 800fb54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fb56:	1c5a      	adds	r2, r3, #1
 800fb58:	921d      	str	r2, [sp, #116]	; 0x74
 800fb5a:	785b      	ldrb	r3, [r3, #1]
 800fb5c:	2b30      	cmp	r3, #48	; 0x30
 800fb5e:	d0f9      	beq.n	800fb54 <_strtod_l+0x134>
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d09f      	beq.n	800faa4 <_strtod_l+0x84>
 800fb64:	2301      	movs	r3, #1
 800fb66:	f04f 0900 	mov.w	r9, #0
 800fb6a:	9304      	str	r3, [sp, #16]
 800fb6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fb6e:	930a      	str	r3, [sp, #40]	; 0x28
 800fb70:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800fb74:	464f      	mov	r7, r9
 800fb76:	220a      	movs	r2, #10
 800fb78:	981d      	ldr	r0, [sp, #116]	; 0x74
 800fb7a:	7806      	ldrb	r6, [r0, #0]
 800fb7c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800fb80:	b2d9      	uxtb	r1, r3
 800fb82:	2909      	cmp	r1, #9
 800fb84:	d92a      	bls.n	800fbdc <_strtod_l+0x1bc>
 800fb86:	9907      	ldr	r1, [sp, #28]
 800fb88:	462a      	mov	r2, r5
 800fb8a:	f7ff ff18 	bl	800f9be <strncmp>
 800fb8e:	b398      	cbz	r0, 800fbf8 <_strtod_l+0x1d8>
 800fb90:	2000      	movs	r0, #0
 800fb92:	4633      	mov	r3, r6
 800fb94:	463d      	mov	r5, r7
 800fb96:	9007      	str	r0, [sp, #28]
 800fb98:	4602      	mov	r2, r0
 800fb9a:	2b65      	cmp	r3, #101	; 0x65
 800fb9c:	d001      	beq.n	800fba2 <_strtod_l+0x182>
 800fb9e:	2b45      	cmp	r3, #69	; 0x45
 800fba0:	d118      	bne.n	800fbd4 <_strtod_l+0x1b4>
 800fba2:	b91d      	cbnz	r5, 800fbac <_strtod_l+0x18c>
 800fba4:	9b04      	ldr	r3, [sp, #16]
 800fba6:	4303      	orrs	r3, r0
 800fba8:	d098      	beq.n	800fadc <_strtod_l+0xbc>
 800fbaa:	2500      	movs	r5, #0
 800fbac:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800fbb0:	f108 0301 	add.w	r3, r8, #1
 800fbb4:	931d      	str	r3, [sp, #116]	; 0x74
 800fbb6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800fbba:	2b2b      	cmp	r3, #43	; 0x2b
 800fbbc:	d075      	beq.n	800fcaa <_strtod_l+0x28a>
 800fbbe:	2b2d      	cmp	r3, #45	; 0x2d
 800fbc0:	d07b      	beq.n	800fcba <_strtod_l+0x29a>
 800fbc2:	f04f 0c00 	mov.w	ip, #0
 800fbc6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800fbca:	2909      	cmp	r1, #9
 800fbcc:	f240 8082 	bls.w	800fcd4 <_strtod_l+0x2b4>
 800fbd0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800fbd4:	2600      	movs	r6, #0
 800fbd6:	e09d      	b.n	800fd14 <_strtod_l+0x2f4>
 800fbd8:	2300      	movs	r3, #0
 800fbda:	e7c4      	b.n	800fb66 <_strtod_l+0x146>
 800fbdc:	2f08      	cmp	r7, #8
 800fbde:	bfd8      	it	le
 800fbe0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800fbe2:	f100 0001 	add.w	r0, r0, #1
 800fbe6:	bfda      	itte	le
 800fbe8:	fb02 3301 	mlale	r3, r2, r1, r3
 800fbec:	9309      	strle	r3, [sp, #36]	; 0x24
 800fbee:	fb02 3909 	mlagt	r9, r2, r9, r3
 800fbf2:	3701      	adds	r7, #1
 800fbf4:	901d      	str	r0, [sp, #116]	; 0x74
 800fbf6:	e7bf      	b.n	800fb78 <_strtod_l+0x158>
 800fbf8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fbfa:	195a      	adds	r2, r3, r5
 800fbfc:	921d      	str	r2, [sp, #116]	; 0x74
 800fbfe:	5d5b      	ldrb	r3, [r3, r5]
 800fc00:	2f00      	cmp	r7, #0
 800fc02:	d037      	beq.n	800fc74 <_strtod_l+0x254>
 800fc04:	9007      	str	r0, [sp, #28]
 800fc06:	463d      	mov	r5, r7
 800fc08:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800fc0c:	2a09      	cmp	r2, #9
 800fc0e:	d912      	bls.n	800fc36 <_strtod_l+0x216>
 800fc10:	2201      	movs	r2, #1
 800fc12:	e7c2      	b.n	800fb9a <_strtod_l+0x17a>
 800fc14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fc16:	1c5a      	adds	r2, r3, #1
 800fc18:	921d      	str	r2, [sp, #116]	; 0x74
 800fc1a:	785b      	ldrb	r3, [r3, #1]
 800fc1c:	3001      	adds	r0, #1
 800fc1e:	2b30      	cmp	r3, #48	; 0x30
 800fc20:	d0f8      	beq.n	800fc14 <_strtod_l+0x1f4>
 800fc22:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800fc26:	2a08      	cmp	r2, #8
 800fc28:	f200 84db 	bhi.w	80105e2 <_strtod_l+0xbc2>
 800fc2c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800fc2e:	9007      	str	r0, [sp, #28]
 800fc30:	2000      	movs	r0, #0
 800fc32:	920a      	str	r2, [sp, #40]	; 0x28
 800fc34:	4605      	mov	r5, r0
 800fc36:	3b30      	subs	r3, #48	; 0x30
 800fc38:	f100 0201 	add.w	r2, r0, #1
 800fc3c:	d014      	beq.n	800fc68 <_strtod_l+0x248>
 800fc3e:	9907      	ldr	r1, [sp, #28]
 800fc40:	4411      	add	r1, r2
 800fc42:	9107      	str	r1, [sp, #28]
 800fc44:	462a      	mov	r2, r5
 800fc46:	eb00 0e05 	add.w	lr, r0, r5
 800fc4a:	210a      	movs	r1, #10
 800fc4c:	4572      	cmp	r2, lr
 800fc4e:	d113      	bne.n	800fc78 <_strtod_l+0x258>
 800fc50:	182a      	adds	r2, r5, r0
 800fc52:	2a08      	cmp	r2, #8
 800fc54:	f105 0501 	add.w	r5, r5, #1
 800fc58:	4405      	add	r5, r0
 800fc5a:	dc1c      	bgt.n	800fc96 <_strtod_l+0x276>
 800fc5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fc5e:	220a      	movs	r2, #10
 800fc60:	fb02 3301 	mla	r3, r2, r1, r3
 800fc64:	9309      	str	r3, [sp, #36]	; 0x24
 800fc66:	2200      	movs	r2, #0
 800fc68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fc6a:	1c59      	adds	r1, r3, #1
 800fc6c:	911d      	str	r1, [sp, #116]	; 0x74
 800fc6e:	785b      	ldrb	r3, [r3, #1]
 800fc70:	4610      	mov	r0, r2
 800fc72:	e7c9      	b.n	800fc08 <_strtod_l+0x1e8>
 800fc74:	4638      	mov	r0, r7
 800fc76:	e7d2      	b.n	800fc1e <_strtod_l+0x1fe>
 800fc78:	2a08      	cmp	r2, #8
 800fc7a:	dc04      	bgt.n	800fc86 <_strtod_l+0x266>
 800fc7c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800fc7e:	434e      	muls	r6, r1
 800fc80:	9609      	str	r6, [sp, #36]	; 0x24
 800fc82:	3201      	adds	r2, #1
 800fc84:	e7e2      	b.n	800fc4c <_strtod_l+0x22c>
 800fc86:	f102 0c01 	add.w	ip, r2, #1
 800fc8a:	f1bc 0f10 	cmp.w	ip, #16
 800fc8e:	bfd8      	it	le
 800fc90:	fb01 f909 	mulle.w	r9, r1, r9
 800fc94:	e7f5      	b.n	800fc82 <_strtod_l+0x262>
 800fc96:	2d10      	cmp	r5, #16
 800fc98:	bfdc      	itt	le
 800fc9a:	220a      	movle	r2, #10
 800fc9c:	fb02 3909 	mlale	r9, r2, r9, r3
 800fca0:	e7e1      	b.n	800fc66 <_strtod_l+0x246>
 800fca2:	2300      	movs	r3, #0
 800fca4:	9307      	str	r3, [sp, #28]
 800fca6:	2201      	movs	r2, #1
 800fca8:	e77c      	b.n	800fba4 <_strtod_l+0x184>
 800fcaa:	f04f 0c00 	mov.w	ip, #0
 800fcae:	f108 0302 	add.w	r3, r8, #2
 800fcb2:	931d      	str	r3, [sp, #116]	; 0x74
 800fcb4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800fcb8:	e785      	b.n	800fbc6 <_strtod_l+0x1a6>
 800fcba:	f04f 0c01 	mov.w	ip, #1
 800fcbe:	e7f6      	b.n	800fcae <_strtod_l+0x28e>
 800fcc0:	08014b54 	.word	0x08014b54
 800fcc4:	080149c8 	.word	0x080149c8
 800fcc8:	7ff00000 	.word	0x7ff00000
 800fccc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fcce:	1c59      	adds	r1, r3, #1
 800fcd0:	911d      	str	r1, [sp, #116]	; 0x74
 800fcd2:	785b      	ldrb	r3, [r3, #1]
 800fcd4:	2b30      	cmp	r3, #48	; 0x30
 800fcd6:	d0f9      	beq.n	800fccc <_strtod_l+0x2ac>
 800fcd8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800fcdc:	2908      	cmp	r1, #8
 800fcde:	f63f af79 	bhi.w	800fbd4 <_strtod_l+0x1b4>
 800fce2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800fce6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fce8:	9308      	str	r3, [sp, #32]
 800fcea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fcec:	1c59      	adds	r1, r3, #1
 800fcee:	911d      	str	r1, [sp, #116]	; 0x74
 800fcf0:	785b      	ldrb	r3, [r3, #1]
 800fcf2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800fcf6:	2e09      	cmp	r6, #9
 800fcf8:	d937      	bls.n	800fd6a <_strtod_l+0x34a>
 800fcfa:	9e08      	ldr	r6, [sp, #32]
 800fcfc:	1b89      	subs	r1, r1, r6
 800fcfe:	2908      	cmp	r1, #8
 800fd00:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800fd04:	dc02      	bgt.n	800fd0c <_strtod_l+0x2ec>
 800fd06:	4576      	cmp	r6, lr
 800fd08:	bfa8      	it	ge
 800fd0a:	4676      	movge	r6, lr
 800fd0c:	f1bc 0f00 	cmp.w	ip, #0
 800fd10:	d000      	beq.n	800fd14 <_strtod_l+0x2f4>
 800fd12:	4276      	negs	r6, r6
 800fd14:	2d00      	cmp	r5, #0
 800fd16:	d14f      	bne.n	800fdb8 <_strtod_l+0x398>
 800fd18:	9904      	ldr	r1, [sp, #16]
 800fd1a:	4301      	orrs	r1, r0
 800fd1c:	f47f aec2 	bne.w	800faa4 <_strtod_l+0x84>
 800fd20:	2a00      	cmp	r2, #0
 800fd22:	f47f aedb 	bne.w	800fadc <_strtod_l+0xbc>
 800fd26:	2b69      	cmp	r3, #105	; 0x69
 800fd28:	d027      	beq.n	800fd7a <_strtod_l+0x35a>
 800fd2a:	dc24      	bgt.n	800fd76 <_strtod_l+0x356>
 800fd2c:	2b49      	cmp	r3, #73	; 0x49
 800fd2e:	d024      	beq.n	800fd7a <_strtod_l+0x35a>
 800fd30:	2b4e      	cmp	r3, #78	; 0x4e
 800fd32:	f47f aed3 	bne.w	800fadc <_strtod_l+0xbc>
 800fd36:	499e      	ldr	r1, [pc, #632]	; (800ffb0 <_strtod_l+0x590>)
 800fd38:	a81d      	add	r0, sp, #116	; 0x74
 800fd3a:	f002 f891 	bl	8011e60 <__match>
 800fd3e:	2800      	cmp	r0, #0
 800fd40:	f43f aecc 	beq.w	800fadc <_strtod_l+0xbc>
 800fd44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fd46:	781b      	ldrb	r3, [r3, #0]
 800fd48:	2b28      	cmp	r3, #40	; 0x28
 800fd4a:	d12d      	bne.n	800fda8 <_strtod_l+0x388>
 800fd4c:	4999      	ldr	r1, [pc, #612]	; (800ffb4 <_strtod_l+0x594>)
 800fd4e:	aa20      	add	r2, sp, #128	; 0x80
 800fd50:	a81d      	add	r0, sp, #116	; 0x74
 800fd52:	f002 f899 	bl	8011e88 <__hexnan>
 800fd56:	2805      	cmp	r0, #5
 800fd58:	d126      	bne.n	800fda8 <_strtod_l+0x388>
 800fd5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd5c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800fd60:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800fd64:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800fd68:	e69c      	b.n	800faa4 <_strtod_l+0x84>
 800fd6a:	210a      	movs	r1, #10
 800fd6c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800fd70:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800fd74:	e7b9      	b.n	800fcea <_strtod_l+0x2ca>
 800fd76:	2b6e      	cmp	r3, #110	; 0x6e
 800fd78:	e7db      	b.n	800fd32 <_strtod_l+0x312>
 800fd7a:	498f      	ldr	r1, [pc, #572]	; (800ffb8 <_strtod_l+0x598>)
 800fd7c:	a81d      	add	r0, sp, #116	; 0x74
 800fd7e:	f002 f86f 	bl	8011e60 <__match>
 800fd82:	2800      	cmp	r0, #0
 800fd84:	f43f aeaa 	beq.w	800fadc <_strtod_l+0xbc>
 800fd88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fd8a:	498c      	ldr	r1, [pc, #560]	; (800ffbc <_strtod_l+0x59c>)
 800fd8c:	3b01      	subs	r3, #1
 800fd8e:	a81d      	add	r0, sp, #116	; 0x74
 800fd90:	931d      	str	r3, [sp, #116]	; 0x74
 800fd92:	f002 f865 	bl	8011e60 <__match>
 800fd96:	b910      	cbnz	r0, 800fd9e <_strtod_l+0x37e>
 800fd98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fd9a:	3301      	adds	r3, #1
 800fd9c:	931d      	str	r3, [sp, #116]	; 0x74
 800fd9e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800ffcc <_strtod_l+0x5ac>
 800fda2:	f04f 0a00 	mov.w	sl, #0
 800fda6:	e67d      	b.n	800faa4 <_strtod_l+0x84>
 800fda8:	4885      	ldr	r0, [pc, #532]	; (800ffc0 <_strtod_l+0x5a0>)
 800fdaa:	f7fe fb95 	bl	800e4d8 <nan>
 800fdae:	ed8d 0b04 	vstr	d0, [sp, #16]
 800fdb2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800fdb6:	e675      	b.n	800faa4 <_strtod_l+0x84>
 800fdb8:	9b07      	ldr	r3, [sp, #28]
 800fdba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fdbc:	1af3      	subs	r3, r6, r3
 800fdbe:	2f00      	cmp	r7, #0
 800fdc0:	bf08      	it	eq
 800fdc2:	462f      	moveq	r7, r5
 800fdc4:	2d10      	cmp	r5, #16
 800fdc6:	9308      	str	r3, [sp, #32]
 800fdc8:	46a8      	mov	r8, r5
 800fdca:	bfa8      	it	ge
 800fdcc:	f04f 0810 	movge.w	r8, #16
 800fdd0:	f7f0 fba8 	bl	8000524 <__aeabi_ui2d>
 800fdd4:	2d09      	cmp	r5, #9
 800fdd6:	4682      	mov	sl, r0
 800fdd8:	468b      	mov	fp, r1
 800fdda:	dd13      	ble.n	800fe04 <_strtod_l+0x3e4>
 800fddc:	4b79      	ldr	r3, [pc, #484]	; (800ffc4 <_strtod_l+0x5a4>)
 800fdde:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fde2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800fde6:	f7f0 fc17 	bl	8000618 <__aeabi_dmul>
 800fdea:	4682      	mov	sl, r0
 800fdec:	4648      	mov	r0, r9
 800fdee:	468b      	mov	fp, r1
 800fdf0:	f7f0 fb98 	bl	8000524 <__aeabi_ui2d>
 800fdf4:	4602      	mov	r2, r0
 800fdf6:	460b      	mov	r3, r1
 800fdf8:	4650      	mov	r0, sl
 800fdfa:	4659      	mov	r1, fp
 800fdfc:	f7f0 fa56 	bl	80002ac <__adddf3>
 800fe00:	4682      	mov	sl, r0
 800fe02:	468b      	mov	fp, r1
 800fe04:	2d0f      	cmp	r5, #15
 800fe06:	dc38      	bgt.n	800fe7a <_strtod_l+0x45a>
 800fe08:	9b08      	ldr	r3, [sp, #32]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	f43f ae4a 	beq.w	800faa4 <_strtod_l+0x84>
 800fe10:	dd24      	ble.n	800fe5c <_strtod_l+0x43c>
 800fe12:	2b16      	cmp	r3, #22
 800fe14:	dc0b      	bgt.n	800fe2e <_strtod_l+0x40e>
 800fe16:	4d6b      	ldr	r5, [pc, #428]	; (800ffc4 <_strtod_l+0x5a4>)
 800fe18:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800fe1c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800fe20:	4652      	mov	r2, sl
 800fe22:	465b      	mov	r3, fp
 800fe24:	f7f0 fbf8 	bl	8000618 <__aeabi_dmul>
 800fe28:	4682      	mov	sl, r0
 800fe2a:	468b      	mov	fp, r1
 800fe2c:	e63a      	b.n	800faa4 <_strtod_l+0x84>
 800fe2e:	9a08      	ldr	r2, [sp, #32]
 800fe30:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800fe34:	4293      	cmp	r3, r2
 800fe36:	db20      	blt.n	800fe7a <_strtod_l+0x45a>
 800fe38:	4c62      	ldr	r4, [pc, #392]	; (800ffc4 <_strtod_l+0x5a4>)
 800fe3a:	f1c5 050f 	rsb	r5, r5, #15
 800fe3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fe42:	4652      	mov	r2, sl
 800fe44:	465b      	mov	r3, fp
 800fe46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe4a:	f7f0 fbe5 	bl	8000618 <__aeabi_dmul>
 800fe4e:	9b08      	ldr	r3, [sp, #32]
 800fe50:	1b5d      	subs	r5, r3, r5
 800fe52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fe56:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fe5a:	e7e3      	b.n	800fe24 <_strtod_l+0x404>
 800fe5c:	9b08      	ldr	r3, [sp, #32]
 800fe5e:	3316      	adds	r3, #22
 800fe60:	db0b      	blt.n	800fe7a <_strtod_l+0x45a>
 800fe62:	9b07      	ldr	r3, [sp, #28]
 800fe64:	4a57      	ldr	r2, [pc, #348]	; (800ffc4 <_strtod_l+0x5a4>)
 800fe66:	1b9e      	subs	r6, r3, r6
 800fe68:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800fe6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fe70:	4650      	mov	r0, sl
 800fe72:	4659      	mov	r1, fp
 800fe74:	f7f0 fcfa 	bl	800086c <__aeabi_ddiv>
 800fe78:	e7d6      	b.n	800fe28 <_strtod_l+0x408>
 800fe7a:	9b08      	ldr	r3, [sp, #32]
 800fe7c:	eba5 0808 	sub.w	r8, r5, r8
 800fe80:	4498      	add	r8, r3
 800fe82:	f1b8 0f00 	cmp.w	r8, #0
 800fe86:	dd71      	ble.n	800ff6c <_strtod_l+0x54c>
 800fe88:	f018 030f 	ands.w	r3, r8, #15
 800fe8c:	d00a      	beq.n	800fea4 <_strtod_l+0x484>
 800fe8e:	494d      	ldr	r1, [pc, #308]	; (800ffc4 <_strtod_l+0x5a4>)
 800fe90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fe94:	4652      	mov	r2, sl
 800fe96:	465b      	mov	r3, fp
 800fe98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe9c:	f7f0 fbbc 	bl	8000618 <__aeabi_dmul>
 800fea0:	4682      	mov	sl, r0
 800fea2:	468b      	mov	fp, r1
 800fea4:	f038 080f 	bics.w	r8, r8, #15
 800fea8:	d04d      	beq.n	800ff46 <_strtod_l+0x526>
 800feaa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800feae:	dd22      	ble.n	800fef6 <_strtod_l+0x4d6>
 800feb0:	2500      	movs	r5, #0
 800feb2:	462e      	mov	r6, r5
 800feb4:	9509      	str	r5, [sp, #36]	; 0x24
 800feb6:	9507      	str	r5, [sp, #28]
 800feb8:	2322      	movs	r3, #34	; 0x22
 800feba:	f8df b110 	ldr.w	fp, [pc, #272]	; 800ffcc <_strtod_l+0x5ac>
 800febe:	6023      	str	r3, [r4, #0]
 800fec0:	f04f 0a00 	mov.w	sl, #0
 800fec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	f43f adec 	beq.w	800faa4 <_strtod_l+0x84>
 800fecc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fece:	4620      	mov	r0, r4
 800fed0:	f002 f94e 	bl	8012170 <_Bfree>
 800fed4:	9907      	ldr	r1, [sp, #28]
 800fed6:	4620      	mov	r0, r4
 800fed8:	f002 f94a 	bl	8012170 <_Bfree>
 800fedc:	4631      	mov	r1, r6
 800fede:	4620      	mov	r0, r4
 800fee0:	f002 f946 	bl	8012170 <_Bfree>
 800fee4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fee6:	4620      	mov	r0, r4
 800fee8:	f002 f942 	bl	8012170 <_Bfree>
 800feec:	4629      	mov	r1, r5
 800feee:	4620      	mov	r0, r4
 800fef0:	f002 f93e 	bl	8012170 <_Bfree>
 800fef4:	e5d6      	b.n	800faa4 <_strtod_l+0x84>
 800fef6:	2300      	movs	r3, #0
 800fef8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800fefc:	4650      	mov	r0, sl
 800fefe:	4659      	mov	r1, fp
 800ff00:	4699      	mov	r9, r3
 800ff02:	f1b8 0f01 	cmp.w	r8, #1
 800ff06:	dc21      	bgt.n	800ff4c <_strtod_l+0x52c>
 800ff08:	b10b      	cbz	r3, 800ff0e <_strtod_l+0x4ee>
 800ff0a:	4682      	mov	sl, r0
 800ff0c:	468b      	mov	fp, r1
 800ff0e:	4b2e      	ldr	r3, [pc, #184]	; (800ffc8 <_strtod_l+0x5a8>)
 800ff10:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ff14:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ff18:	4652      	mov	r2, sl
 800ff1a:	465b      	mov	r3, fp
 800ff1c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ff20:	f7f0 fb7a 	bl	8000618 <__aeabi_dmul>
 800ff24:	4b29      	ldr	r3, [pc, #164]	; (800ffcc <_strtod_l+0x5ac>)
 800ff26:	460a      	mov	r2, r1
 800ff28:	400b      	ands	r3, r1
 800ff2a:	4929      	ldr	r1, [pc, #164]	; (800ffd0 <_strtod_l+0x5b0>)
 800ff2c:	428b      	cmp	r3, r1
 800ff2e:	4682      	mov	sl, r0
 800ff30:	d8be      	bhi.n	800feb0 <_strtod_l+0x490>
 800ff32:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ff36:	428b      	cmp	r3, r1
 800ff38:	bf86      	itte	hi
 800ff3a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ffd4 <_strtod_l+0x5b4>
 800ff3e:	f04f 3aff 	movhi.w	sl, #4294967295
 800ff42:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ff46:	2300      	movs	r3, #0
 800ff48:	9304      	str	r3, [sp, #16]
 800ff4a:	e081      	b.n	8010050 <_strtod_l+0x630>
 800ff4c:	f018 0f01 	tst.w	r8, #1
 800ff50:	d007      	beq.n	800ff62 <_strtod_l+0x542>
 800ff52:	4b1d      	ldr	r3, [pc, #116]	; (800ffc8 <_strtod_l+0x5a8>)
 800ff54:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800ff58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff5c:	f7f0 fb5c 	bl	8000618 <__aeabi_dmul>
 800ff60:	2301      	movs	r3, #1
 800ff62:	f109 0901 	add.w	r9, r9, #1
 800ff66:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ff6a:	e7ca      	b.n	800ff02 <_strtod_l+0x4e2>
 800ff6c:	d0eb      	beq.n	800ff46 <_strtod_l+0x526>
 800ff6e:	f1c8 0800 	rsb	r8, r8, #0
 800ff72:	f018 020f 	ands.w	r2, r8, #15
 800ff76:	d00a      	beq.n	800ff8e <_strtod_l+0x56e>
 800ff78:	4b12      	ldr	r3, [pc, #72]	; (800ffc4 <_strtod_l+0x5a4>)
 800ff7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff7e:	4650      	mov	r0, sl
 800ff80:	4659      	mov	r1, fp
 800ff82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff86:	f7f0 fc71 	bl	800086c <__aeabi_ddiv>
 800ff8a:	4682      	mov	sl, r0
 800ff8c:	468b      	mov	fp, r1
 800ff8e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ff92:	d0d8      	beq.n	800ff46 <_strtod_l+0x526>
 800ff94:	f1b8 0f1f 	cmp.w	r8, #31
 800ff98:	dd1e      	ble.n	800ffd8 <_strtod_l+0x5b8>
 800ff9a:	2500      	movs	r5, #0
 800ff9c:	462e      	mov	r6, r5
 800ff9e:	9509      	str	r5, [sp, #36]	; 0x24
 800ffa0:	9507      	str	r5, [sp, #28]
 800ffa2:	2322      	movs	r3, #34	; 0x22
 800ffa4:	f04f 0a00 	mov.w	sl, #0
 800ffa8:	f04f 0b00 	mov.w	fp, #0
 800ffac:	6023      	str	r3, [r4, #0]
 800ffae:	e789      	b.n	800fec4 <_strtod_l+0x4a4>
 800ffb0:	0801499d 	.word	0x0801499d
 800ffb4:	080149dc 	.word	0x080149dc
 800ffb8:	08014995 	.word	0x08014995
 800ffbc:	08014a57 	.word	0x08014a57
 800ffc0:	08014a53 	.word	0x08014a53
 800ffc4:	08014bf0 	.word	0x08014bf0
 800ffc8:	08014bc8 	.word	0x08014bc8
 800ffcc:	7ff00000 	.word	0x7ff00000
 800ffd0:	7ca00000 	.word	0x7ca00000
 800ffd4:	7fefffff 	.word	0x7fefffff
 800ffd8:	f018 0310 	ands.w	r3, r8, #16
 800ffdc:	bf18      	it	ne
 800ffde:	236a      	movne	r3, #106	; 0x6a
 800ffe0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8010398 <_strtod_l+0x978>
 800ffe4:	9304      	str	r3, [sp, #16]
 800ffe6:	4650      	mov	r0, sl
 800ffe8:	4659      	mov	r1, fp
 800ffea:	2300      	movs	r3, #0
 800ffec:	f018 0f01 	tst.w	r8, #1
 800fff0:	d004      	beq.n	800fffc <_strtod_l+0x5dc>
 800fff2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800fff6:	f7f0 fb0f 	bl	8000618 <__aeabi_dmul>
 800fffa:	2301      	movs	r3, #1
 800fffc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010000:	f109 0908 	add.w	r9, r9, #8
 8010004:	d1f2      	bne.n	800ffec <_strtod_l+0x5cc>
 8010006:	b10b      	cbz	r3, 801000c <_strtod_l+0x5ec>
 8010008:	4682      	mov	sl, r0
 801000a:	468b      	mov	fp, r1
 801000c:	9b04      	ldr	r3, [sp, #16]
 801000e:	b1bb      	cbz	r3, 8010040 <_strtod_l+0x620>
 8010010:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8010014:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010018:	2b00      	cmp	r3, #0
 801001a:	4659      	mov	r1, fp
 801001c:	dd10      	ble.n	8010040 <_strtod_l+0x620>
 801001e:	2b1f      	cmp	r3, #31
 8010020:	f340 8128 	ble.w	8010274 <_strtod_l+0x854>
 8010024:	2b34      	cmp	r3, #52	; 0x34
 8010026:	bfde      	ittt	le
 8010028:	3b20      	suble	r3, #32
 801002a:	f04f 32ff 	movle.w	r2, #4294967295
 801002e:	fa02 f303 	lslle.w	r3, r2, r3
 8010032:	f04f 0a00 	mov.w	sl, #0
 8010036:	bfcc      	ite	gt
 8010038:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801003c:	ea03 0b01 	andle.w	fp, r3, r1
 8010040:	2200      	movs	r2, #0
 8010042:	2300      	movs	r3, #0
 8010044:	4650      	mov	r0, sl
 8010046:	4659      	mov	r1, fp
 8010048:	f7f0 fd4e 	bl	8000ae8 <__aeabi_dcmpeq>
 801004c:	2800      	cmp	r0, #0
 801004e:	d1a4      	bne.n	800ff9a <_strtod_l+0x57a>
 8010050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010052:	9300      	str	r3, [sp, #0]
 8010054:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010056:	462b      	mov	r3, r5
 8010058:	463a      	mov	r2, r7
 801005a:	4620      	mov	r0, r4
 801005c:	f002 f8f4 	bl	8012248 <__s2b>
 8010060:	9009      	str	r0, [sp, #36]	; 0x24
 8010062:	2800      	cmp	r0, #0
 8010064:	f43f af24 	beq.w	800feb0 <_strtod_l+0x490>
 8010068:	9b07      	ldr	r3, [sp, #28]
 801006a:	1b9e      	subs	r6, r3, r6
 801006c:	9b08      	ldr	r3, [sp, #32]
 801006e:	2b00      	cmp	r3, #0
 8010070:	bfb4      	ite	lt
 8010072:	4633      	movlt	r3, r6
 8010074:	2300      	movge	r3, #0
 8010076:	9310      	str	r3, [sp, #64]	; 0x40
 8010078:	9b08      	ldr	r3, [sp, #32]
 801007a:	2500      	movs	r5, #0
 801007c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010080:	9318      	str	r3, [sp, #96]	; 0x60
 8010082:	462e      	mov	r6, r5
 8010084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010086:	4620      	mov	r0, r4
 8010088:	6859      	ldr	r1, [r3, #4]
 801008a:	f002 f831 	bl	80120f0 <_Balloc>
 801008e:	9007      	str	r0, [sp, #28]
 8010090:	2800      	cmp	r0, #0
 8010092:	f43f af11 	beq.w	800feb8 <_strtod_l+0x498>
 8010096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010098:	691a      	ldr	r2, [r3, #16]
 801009a:	3202      	adds	r2, #2
 801009c:	f103 010c 	add.w	r1, r3, #12
 80100a0:	0092      	lsls	r2, r2, #2
 80100a2:	300c      	adds	r0, #12
 80100a4:	f7fe fb54 	bl	800e750 <memcpy>
 80100a8:	ec4b ab10 	vmov	d0, sl, fp
 80100ac:	aa20      	add	r2, sp, #128	; 0x80
 80100ae:	a91f      	add	r1, sp, #124	; 0x7c
 80100b0:	4620      	mov	r0, r4
 80100b2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80100b6:	f002 fc03 	bl	80128c0 <__d2b>
 80100ba:	901e      	str	r0, [sp, #120]	; 0x78
 80100bc:	2800      	cmp	r0, #0
 80100be:	f43f aefb 	beq.w	800feb8 <_strtod_l+0x498>
 80100c2:	2101      	movs	r1, #1
 80100c4:	4620      	mov	r0, r4
 80100c6:	f002 f959 	bl	801237c <__i2b>
 80100ca:	4606      	mov	r6, r0
 80100cc:	2800      	cmp	r0, #0
 80100ce:	f43f aef3 	beq.w	800feb8 <_strtod_l+0x498>
 80100d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80100d4:	9904      	ldr	r1, [sp, #16]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	bfab      	itete	ge
 80100da:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80100dc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80100de:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80100e0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80100e4:	bfac      	ite	ge
 80100e6:	eb03 0902 	addge.w	r9, r3, r2
 80100ea:	1ad7      	sublt	r7, r2, r3
 80100ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80100ee:	eba3 0801 	sub.w	r8, r3, r1
 80100f2:	4490      	add	r8, r2
 80100f4:	4ba3      	ldr	r3, [pc, #652]	; (8010384 <_strtod_l+0x964>)
 80100f6:	f108 38ff 	add.w	r8, r8, #4294967295
 80100fa:	4598      	cmp	r8, r3
 80100fc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010100:	f280 80cc 	bge.w	801029c <_strtod_l+0x87c>
 8010104:	eba3 0308 	sub.w	r3, r3, r8
 8010108:	2b1f      	cmp	r3, #31
 801010a:	eba2 0203 	sub.w	r2, r2, r3
 801010e:	f04f 0101 	mov.w	r1, #1
 8010112:	f300 80b6 	bgt.w	8010282 <_strtod_l+0x862>
 8010116:	fa01 f303 	lsl.w	r3, r1, r3
 801011a:	9311      	str	r3, [sp, #68]	; 0x44
 801011c:	2300      	movs	r3, #0
 801011e:	930c      	str	r3, [sp, #48]	; 0x30
 8010120:	eb09 0802 	add.w	r8, r9, r2
 8010124:	9b04      	ldr	r3, [sp, #16]
 8010126:	45c1      	cmp	r9, r8
 8010128:	4417      	add	r7, r2
 801012a:	441f      	add	r7, r3
 801012c:	464b      	mov	r3, r9
 801012e:	bfa8      	it	ge
 8010130:	4643      	movge	r3, r8
 8010132:	42bb      	cmp	r3, r7
 8010134:	bfa8      	it	ge
 8010136:	463b      	movge	r3, r7
 8010138:	2b00      	cmp	r3, #0
 801013a:	bfc2      	ittt	gt
 801013c:	eba8 0803 	subgt.w	r8, r8, r3
 8010140:	1aff      	subgt	r7, r7, r3
 8010142:	eba9 0903 	subgt.w	r9, r9, r3
 8010146:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010148:	2b00      	cmp	r3, #0
 801014a:	dd17      	ble.n	801017c <_strtod_l+0x75c>
 801014c:	4631      	mov	r1, r6
 801014e:	461a      	mov	r2, r3
 8010150:	4620      	mov	r0, r4
 8010152:	f002 f9cf 	bl	80124f4 <__pow5mult>
 8010156:	4606      	mov	r6, r0
 8010158:	2800      	cmp	r0, #0
 801015a:	f43f aead 	beq.w	800feb8 <_strtod_l+0x498>
 801015e:	4601      	mov	r1, r0
 8010160:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010162:	4620      	mov	r0, r4
 8010164:	f002 f920 	bl	80123a8 <__multiply>
 8010168:	900f      	str	r0, [sp, #60]	; 0x3c
 801016a:	2800      	cmp	r0, #0
 801016c:	f43f aea4 	beq.w	800feb8 <_strtod_l+0x498>
 8010170:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010172:	4620      	mov	r0, r4
 8010174:	f001 fffc 	bl	8012170 <_Bfree>
 8010178:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801017a:	931e      	str	r3, [sp, #120]	; 0x78
 801017c:	f1b8 0f00 	cmp.w	r8, #0
 8010180:	f300 8091 	bgt.w	80102a6 <_strtod_l+0x886>
 8010184:	9b08      	ldr	r3, [sp, #32]
 8010186:	2b00      	cmp	r3, #0
 8010188:	dd08      	ble.n	801019c <_strtod_l+0x77c>
 801018a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801018c:	9907      	ldr	r1, [sp, #28]
 801018e:	4620      	mov	r0, r4
 8010190:	f002 f9b0 	bl	80124f4 <__pow5mult>
 8010194:	9007      	str	r0, [sp, #28]
 8010196:	2800      	cmp	r0, #0
 8010198:	f43f ae8e 	beq.w	800feb8 <_strtod_l+0x498>
 801019c:	2f00      	cmp	r7, #0
 801019e:	dd08      	ble.n	80101b2 <_strtod_l+0x792>
 80101a0:	9907      	ldr	r1, [sp, #28]
 80101a2:	463a      	mov	r2, r7
 80101a4:	4620      	mov	r0, r4
 80101a6:	f002 f9ff 	bl	80125a8 <__lshift>
 80101aa:	9007      	str	r0, [sp, #28]
 80101ac:	2800      	cmp	r0, #0
 80101ae:	f43f ae83 	beq.w	800feb8 <_strtod_l+0x498>
 80101b2:	f1b9 0f00 	cmp.w	r9, #0
 80101b6:	dd08      	ble.n	80101ca <_strtod_l+0x7aa>
 80101b8:	4631      	mov	r1, r6
 80101ba:	464a      	mov	r2, r9
 80101bc:	4620      	mov	r0, r4
 80101be:	f002 f9f3 	bl	80125a8 <__lshift>
 80101c2:	4606      	mov	r6, r0
 80101c4:	2800      	cmp	r0, #0
 80101c6:	f43f ae77 	beq.w	800feb8 <_strtod_l+0x498>
 80101ca:	9a07      	ldr	r2, [sp, #28]
 80101cc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80101ce:	4620      	mov	r0, r4
 80101d0:	f002 fa72 	bl	80126b8 <__mdiff>
 80101d4:	4605      	mov	r5, r0
 80101d6:	2800      	cmp	r0, #0
 80101d8:	f43f ae6e 	beq.w	800feb8 <_strtod_l+0x498>
 80101dc:	68c3      	ldr	r3, [r0, #12]
 80101de:	930f      	str	r3, [sp, #60]	; 0x3c
 80101e0:	2300      	movs	r3, #0
 80101e2:	60c3      	str	r3, [r0, #12]
 80101e4:	4631      	mov	r1, r6
 80101e6:	f002 fa4b 	bl	8012680 <__mcmp>
 80101ea:	2800      	cmp	r0, #0
 80101ec:	da65      	bge.n	80102ba <_strtod_l+0x89a>
 80101ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80101f0:	ea53 030a 	orrs.w	r3, r3, sl
 80101f4:	f040 8087 	bne.w	8010306 <_strtod_l+0x8e6>
 80101f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	f040 8082 	bne.w	8010306 <_strtod_l+0x8e6>
 8010202:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010206:	0d1b      	lsrs	r3, r3, #20
 8010208:	051b      	lsls	r3, r3, #20
 801020a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801020e:	d97a      	bls.n	8010306 <_strtod_l+0x8e6>
 8010210:	696b      	ldr	r3, [r5, #20]
 8010212:	b913      	cbnz	r3, 801021a <_strtod_l+0x7fa>
 8010214:	692b      	ldr	r3, [r5, #16]
 8010216:	2b01      	cmp	r3, #1
 8010218:	dd75      	ble.n	8010306 <_strtod_l+0x8e6>
 801021a:	4629      	mov	r1, r5
 801021c:	2201      	movs	r2, #1
 801021e:	4620      	mov	r0, r4
 8010220:	f002 f9c2 	bl	80125a8 <__lshift>
 8010224:	4631      	mov	r1, r6
 8010226:	4605      	mov	r5, r0
 8010228:	f002 fa2a 	bl	8012680 <__mcmp>
 801022c:	2800      	cmp	r0, #0
 801022e:	dd6a      	ble.n	8010306 <_strtod_l+0x8e6>
 8010230:	9904      	ldr	r1, [sp, #16]
 8010232:	4a55      	ldr	r2, [pc, #340]	; (8010388 <_strtod_l+0x968>)
 8010234:	465b      	mov	r3, fp
 8010236:	2900      	cmp	r1, #0
 8010238:	f000 8085 	beq.w	8010346 <_strtod_l+0x926>
 801023c:	ea02 010b 	and.w	r1, r2, fp
 8010240:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010244:	dc7f      	bgt.n	8010346 <_strtod_l+0x926>
 8010246:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801024a:	f77f aeaa 	ble.w	800ffa2 <_strtod_l+0x582>
 801024e:	4a4f      	ldr	r2, [pc, #316]	; (801038c <_strtod_l+0x96c>)
 8010250:	2300      	movs	r3, #0
 8010252:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8010256:	4650      	mov	r0, sl
 8010258:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801025c:	4659      	mov	r1, fp
 801025e:	f7f0 f9db 	bl	8000618 <__aeabi_dmul>
 8010262:	460b      	mov	r3, r1
 8010264:	4303      	orrs	r3, r0
 8010266:	bf08      	it	eq
 8010268:	2322      	moveq	r3, #34	; 0x22
 801026a:	4682      	mov	sl, r0
 801026c:	468b      	mov	fp, r1
 801026e:	bf08      	it	eq
 8010270:	6023      	streq	r3, [r4, #0]
 8010272:	e62b      	b.n	800fecc <_strtod_l+0x4ac>
 8010274:	f04f 32ff 	mov.w	r2, #4294967295
 8010278:	fa02 f303 	lsl.w	r3, r2, r3
 801027c:	ea03 0a0a 	and.w	sl, r3, sl
 8010280:	e6de      	b.n	8010040 <_strtod_l+0x620>
 8010282:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8010286:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801028a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801028e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8010292:	fa01 f308 	lsl.w	r3, r1, r8
 8010296:	930c      	str	r3, [sp, #48]	; 0x30
 8010298:	9111      	str	r1, [sp, #68]	; 0x44
 801029a:	e741      	b.n	8010120 <_strtod_l+0x700>
 801029c:	2300      	movs	r3, #0
 801029e:	930c      	str	r3, [sp, #48]	; 0x30
 80102a0:	2301      	movs	r3, #1
 80102a2:	9311      	str	r3, [sp, #68]	; 0x44
 80102a4:	e73c      	b.n	8010120 <_strtod_l+0x700>
 80102a6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80102a8:	4642      	mov	r2, r8
 80102aa:	4620      	mov	r0, r4
 80102ac:	f002 f97c 	bl	80125a8 <__lshift>
 80102b0:	901e      	str	r0, [sp, #120]	; 0x78
 80102b2:	2800      	cmp	r0, #0
 80102b4:	f47f af66 	bne.w	8010184 <_strtod_l+0x764>
 80102b8:	e5fe      	b.n	800feb8 <_strtod_l+0x498>
 80102ba:	465f      	mov	r7, fp
 80102bc:	d16e      	bne.n	801039c <_strtod_l+0x97c>
 80102be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80102c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80102c4:	b342      	cbz	r2, 8010318 <_strtod_l+0x8f8>
 80102c6:	4a32      	ldr	r2, [pc, #200]	; (8010390 <_strtod_l+0x970>)
 80102c8:	4293      	cmp	r3, r2
 80102ca:	d128      	bne.n	801031e <_strtod_l+0x8fe>
 80102cc:	9b04      	ldr	r3, [sp, #16]
 80102ce:	4650      	mov	r0, sl
 80102d0:	b1eb      	cbz	r3, 801030e <_strtod_l+0x8ee>
 80102d2:	4a2d      	ldr	r2, [pc, #180]	; (8010388 <_strtod_l+0x968>)
 80102d4:	403a      	ands	r2, r7
 80102d6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80102da:	f04f 31ff 	mov.w	r1, #4294967295
 80102de:	d819      	bhi.n	8010314 <_strtod_l+0x8f4>
 80102e0:	0d12      	lsrs	r2, r2, #20
 80102e2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80102e6:	fa01 f303 	lsl.w	r3, r1, r3
 80102ea:	4298      	cmp	r0, r3
 80102ec:	d117      	bne.n	801031e <_strtod_l+0x8fe>
 80102ee:	4b29      	ldr	r3, [pc, #164]	; (8010394 <_strtod_l+0x974>)
 80102f0:	429f      	cmp	r7, r3
 80102f2:	d102      	bne.n	80102fa <_strtod_l+0x8da>
 80102f4:	3001      	adds	r0, #1
 80102f6:	f43f addf 	beq.w	800feb8 <_strtod_l+0x498>
 80102fa:	4b23      	ldr	r3, [pc, #140]	; (8010388 <_strtod_l+0x968>)
 80102fc:	403b      	ands	r3, r7
 80102fe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010302:	f04f 0a00 	mov.w	sl, #0
 8010306:	9b04      	ldr	r3, [sp, #16]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d1a0      	bne.n	801024e <_strtod_l+0x82e>
 801030c:	e5de      	b.n	800fecc <_strtod_l+0x4ac>
 801030e:	f04f 33ff 	mov.w	r3, #4294967295
 8010312:	e7ea      	b.n	80102ea <_strtod_l+0x8ca>
 8010314:	460b      	mov	r3, r1
 8010316:	e7e8      	b.n	80102ea <_strtod_l+0x8ca>
 8010318:	ea53 030a 	orrs.w	r3, r3, sl
 801031c:	d088      	beq.n	8010230 <_strtod_l+0x810>
 801031e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010320:	b1db      	cbz	r3, 801035a <_strtod_l+0x93a>
 8010322:	423b      	tst	r3, r7
 8010324:	d0ef      	beq.n	8010306 <_strtod_l+0x8e6>
 8010326:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010328:	9a04      	ldr	r2, [sp, #16]
 801032a:	4650      	mov	r0, sl
 801032c:	4659      	mov	r1, fp
 801032e:	b1c3      	cbz	r3, 8010362 <_strtod_l+0x942>
 8010330:	f7ff fb57 	bl	800f9e2 <sulp>
 8010334:	4602      	mov	r2, r0
 8010336:	460b      	mov	r3, r1
 8010338:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801033c:	f7ef ffb6 	bl	80002ac <__adddf3>
 8010340:	4682      	mov	sl, r0
 8010342:	468b      	mov	fp, r1
 8010344:	e7df      	b.n	8010306 <_strtod_l+0x8e6>
 8010346:	4013      	ands	r3, r2
 8010348:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801034c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010350:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010354:	f04f 3aff 	mov.w	sl, #4294967295
 8010358:	e7d5      	b.n	8010306 <_strtod_l+0x8e6>
 801035a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801035c:	ea13 0f0a 	tst.w	r3, sl
 8010360:	e7e0      	b.n	8010324 <_strtod_l+0x904>
 8010362:	f7ff fb3e 	bl	800f9e2 <sulp>
 8010366:	4602      	mov	r2, r0
 8010368:	460b      	mov	r3, r1
 801036a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801036e:	f7ef ff9b 	bl	80002a8 <__aeabi_dsub>
 8010372:	2200      	movs	r2, #0
 8010374:	2300      	movs	r3, #0
 8010376:	4682      	mov	sl, r0
 8010378:	468b      	mov	fp, r1
 801037a:	f7f0 fbb5 	bl	8000ae8 <__aeabi_dcmpeq>
 801037e:	2800      	cmp	r0, #0
 8010380:	d0c1      	beq.n	8010306 <_strtod_l+0x8e6>
 8010382:	e60e      	b.n	800ffa2 <_strtod_l+0x582>
 8010384:	fffffc02 	.word	0xfffffc02
 8010388:	7ff00000 	.word	0x7ff00000
 801038c:	39500000 	.word	0x39500000
 8010390:	000fffff 	.word	0x000fffff
 8010394:	7fefffff 	.word	0x7fefffff
 8010398:	080149f0 	.word	0x080149f0
 801039c:	4631      	mov	r1, r6
 801039e:	4628      	mov	r0, r5
 80103a0:	f002 faea 	bl	8012978 <__ratio>
 80103a4:	ec59 8b10 	vmov	r8, r9, d0
 80103a8:	ee10 0a10 	vmov	r0, s0
 80103ac:	2200      	movs	r2, #0
 80103ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80103b2:	4649      	mov	r1, r9
 80103b4:	f7f0 fbac 	bl	8000b10 <__aeabi_dcmple>
 80103b8:	2800      	cmp	r0, #0
 80103ba:	d07c      	beq.n	80104b6 <_strtod_l+0xa96>
 80103bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d04c      	beq.n	801045c <_strtod_l+0xa3c>
 80103c2:	4b95      	ldr	r3, [pc, #596]	; (8010618 <_strtod_l+0xbf8>)
 80103c4:	2200      	movs	r2, #0
 80103c6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80103ca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010618 <_strtod_l+0xbf8>
 80103ce:	f04f 0800 	mov.w	r8, #0
 80103d2:	4b92      	ldr	r3, [pc, #584]	; (801061c <_strtod_l+0xbfc>)
 80103d4:	403b      	ands	r3, r7
 80103d6:	9311      	str	r3, [sp, #68]	; 0x44
 80103d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80103da:	4b91      	ldr	r3, [pc, #580]	; (8010620 <_strtod_l+0xc00>)
 80103dc:	429a      	cmp	r2, r3
 80103de:	f040 80b2 	bne.w	8010546 <_strtod_l+0xb26>
 80103e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80103e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80103ea:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80103ee:	ec4b ab10 	vmov	d0, sl, fp
 80103f2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80103f6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80103fa:	f002 f9e5 	bl	80127c8 <__ulp>
 80103fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010402:	ec53 2b10 	vmov	r2, r3, d0
 8010406:	f7f0 f907 	bl	8000618 <__aeabi_dmul>
 801040a:	4652      	mov	r2, sl
 801040c:	465b      	mov	r3, fp
 801040e:	f7ef ff4d 	bl	80002ac <__adddf3>
 8010412:	460b      	mov	r3, r1
 8010414:	4981      	ldr	r1, [pc, #516]	; (801061c <_strtod_l+0xbfc>)
 8010416:	4a83      	ldr	r2, [pc, #524]	; (8010624 <_strtod_l+0xc04>)
 8010418:	4019      	ands	r1, r3
 801041a:	4291      	cmp	r1, r2
 801041c:	4682      	mov	sl, r0
 801041e:	d95e      	bls.n	80104de <_strtod_l+0xabe>
 8010420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010422:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010426:	4293      	cmp	r3, r2
 8010428:	d103      	bne.n	8010432 <_strtod_l+0xa12>
 801042a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801042c:	3301      	adds	r3, #1
 801042e:	f43f ad43 	beq.w	800feb8 <_strtod_l+0x498>
 8010432:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8010630 <_strtod_l+0xc10>
 8010436:	f04f 3aff 	mov.w	sl, #4294967295
 801043a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801043c:	4620      	mov	r0, r4
 801043e:	f001 fe97 	bl	8012170 <_Bfree>
 8010442:	9907      	ldr	r1, [sp, #28]
 8010444:	4620      	mov	r0, r4
 8010446:	f001 fe93 	bl	8012170 <_Bfree>
 801044a:	4631      	mov	r1, r6
 801044c:	4620      	mov	r0, r4
 801044e:	f001 fe8f 	bl	8012170 <_Bfree>
 8010452:	4629      	mov	r1, r5
 8010454:	4620      	mov	r0, r4
 8010456:	f001 fe8b 	bl	8012170 <_Bfree>
 801045a:	e613      	b.n	8010084 <_strtod_l+0x664>
 801045c:	f1ba 0f00 	cmp.w	sl, #0
 8010460:	d11b      	bne.n	801049a <_strtod_l+0xa7a>
 8010462:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010466:	b9f3      	cbnz	r3, 80104a6 <_strtod_l+0xa86>
 8010468:	4b6b      	ldr	r3, [pc, #428]	; (8010618 <_strtod_l+0xbf8>)
 801046a:	2200      	movs	r2, #0
 801046c:	4640      	mov	r0, r8
 801046e:	4649      	mov	r1, r9
 8010470:	f7f0 fb44 	bl	8000afc <__aeabi_dcmplt>
 8010474:	b9d0      	cbnz	r0, 80104ac <_strtod_l+0xa8c>
 8010476:	4640      	mov	r0, r8
 8010478:	4649      	mov	r1, r9
 801047a:	4b6b      	ldr	r3, [pc, #428]	; (8010628 <_strtod_l+0xc08>)
 801047c:	2200      	movs	r2, #0
 801047e:	f7f0 f8cb 	bl	8000618 <__aeabi_dmul>
 8010482:	4680      	mov	r8, r0
 8010484:	4689      	mov	r9, r1
 8010486:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801048a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801048e:	931b      	str	r3, [sp, #108]	; 0x6c
 8010490:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8010494:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010498:	e79b      	b.n	80103d2 <_strtod_l+0x9b2>
 801049a:	f1ba 0f01 	cmp.w	sl, #1
 801049e:	d102      	bne.n	80104a6 <_strtod_l+0xa86>
 80104a0:	2f00      	cmp	r7, #0
 80104a2:	f43f ad7e 	beq.w	800ffa2 <_strtod_l+0x582>
 80104a6:	4b61      	ldr	r3, [pc, #388]	; (801062c <_strtod_l+0xc0c>)
 80104a8:	2200      	movs	r2, #0
 80104aa:	e78c      	b.n	80103c6 <_strtod_l+0x9a6>
 80104ac:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8010628 <_strtod_l+0xc08>
 80104b0:	f04f 0800 	mov.w	r8, #0
 80104b4:	e7e7      	b.n	8010486 <_strtod_l+0xa66>
 80104b6:	4b5c      	ldr	r3, [pc, #368]	; (8010628 <_strtod_l+0xc08>)
 80104b8:	4640      	mov	r0, r8
 80104ba:	4649      	mov	r1, r9
 80104bc:	2200      	movs	r2, #0
 80104be:	f7f0 f8ab 	bl	8000618 <__aeabi_dmul>
 80104c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80104c4:	4680      	mov	r8, r0
 80104c6:	4689      	mov	r9, r1
 80104c8:	b933      	cbnz	r3, 80104d8 <_strtod_l+0xab8>
 80104ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80104ce:	9012      	str	r0, [sp, #72]	; 0x48
 80104d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80104d2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80104d6:	e7dd      	b.n	8010494 <_strtod_l+0xa74>
 80104d8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80104dc:	e7f9      	b.n	80104d2 <_strtod_l+0xab2>
 80104de:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80104e2:	9b04      	ldr	r3, [sp, #16]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d1a8      	bne.n	801043a <_strtod_l+0xa1a>
 80104e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80104ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80104ee:	0d1b      	lsrs	r3, r3, #20
 80104f0:	051b      	lsls	r3, r3, #20
 80104f2:	429a      	cmp	r2, r3
 80104f4:	d1a1      	bne.n	801043a <_strtod_l+0xa1a>
 80104f6:	4640      	mov	r0, r8
 80104f8:	4649      	mov	r1, r9
 80104fa:	f7f0 fbed 	bl	8000cd8 <__aeabi_d2lz>
 80104fe:	f7f0 f85d 	bl	80005bc <__aeabi_l2d>
 8010502:	4602      	mov	r2, r0
 8010504:	460b      	mov	r3, r1
 8010506:	4640      	mov	r0, r8
 8010508:	4649      	mov	r1, r9
 801050a:	f7ef fecd 	bl	80002a8 <__aeabi_dsub>
 801050e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010510:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010514:	ea43 030a 	orr.w	r3, r3, sl
 8010518:	4313      	orrs	r3, r2
 801051a:	4680      	mov	r8, r0
 801051c:	4689      	mov	r9, r1
 801051e:	d053      	beq.n	80105c8 <_strtod_l+0xba8>
 8010520:	a335      	add	r3, pc, #212	; (adr r3, 80105f8 <_strtod_l+0xbd8>)
 8010522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010526:	f7f0 fae9 	bl	8000afc <__aeabi_dcmplt>
 801052a:	2800      	cmp	r0, #0
 801052c:	f47f acce 	bne.w	800fecc <_strtod_l+0x4ac>
 8010530:	a333      	add	r3, pc, #204	; (adr r3, 8010600 <_strtod_l+0xbe0>)
 8010532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010536:	4640      	mov	r0, r8
 8010538:	4649      	mov	r1, r9
 801053a:	f7f0 fafd 	bl	8000b38 <__aeabi_dcmpgt>
 801053e:	2800      	cmp	r0, #0
 8010540:	f43f af7b 	beq.w	801043a <_strtod_l+0xa1a>
 8010544:	e4c2      	b.n	800fecc <_strtod_l+0x4ac>
 8010546:	9b04      	ldr	r3, [sp, #16]
 8010548:	b333      	cbz	r3, 8010598 <_strtod_l+0xb78>
 801054a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801054c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010550:	d822      	bhi.n	8010598 <_strtod_l+0xb78>
 8010552:	a32d      	add	r3, pc, #180	; (adr r3, 8010608 <_strtod_l+0xbe8>)
 8010554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010558:	4640      	mov	r0, r8
 801055a:	4649      	mov	r1, r9
 801055c:	f7f0 fad8 	bl	8000b10 <__aeabi_dcmple>
 8010560:	b1a0      	cbz	r0, 801058c <_strtod_l+0xb6c>
 8010562:	4649      	mov	r1, r9
 8010564:	4640      	mov	r0, r8
 8010566:	f7f0 fb2f 	bl	8000bc8 <__aeabi_d2uiz>
 801056a:	2801      	cmp	r0, #1
 801056c:	bf38      	it	cc
 801056e:	2001      	movcc	r0, #1
 8010570:	f7ef ffd8 	bl	8000524 <__aeabi_ui2d>
 8010574:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010576:	4680      	mov	r8, r0
 8010578:	4689      	mov	r9, r1
 801057a:	bb13      	cbnz	r3, 80105c2 <_strtod_l+0xba2>
 801057c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010580:	9014      	str	r0, [sp, #80]	; 0x50
 8010582:	9315      	str	r3, [sp, #84]	; 0x54
 8010584:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010588:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801058c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801058e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010590:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010594:	1a9b      	subs	r3, r3, r2
 8010596:	930d      	str	r3, [sp, #52]	; 0x34
 8010598:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801059c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80105a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80105a4:	f002 f910 	bl	80127c8 <__ulp>
 80105a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80105ac:	ec53 2b10 	vmov	r2, r3, d0
 80105b0:	f7f0 f832 	bl	8000618 <__aeabi_dmul>
 80105b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80105b8:	f7ef fe78 	bl	80002ac <__adddf3>
 80105bc:	4682      	mov	sl, r0
 80105be:	468b      	mov	fp, r1
 80105c0:	e78f      	b.n	80104e2 <_strtod_l+0xac2>
 80105c2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80105c6:	e7dd      	b.n	8010584 <_strtod_l+0xb64>
 80105c8:	a311      	add	r3, pc, #68	; (adr r3, 8010610 <_strtod_l+0xbf0>)
 80105ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ce:	f7f0 fa95 	bl	8000afc <__aeabi_dcmplt>
 80105d2:	e7b4      	b.n	801053e <_strtod_l+0xb1e>
 80105d4:	2300      	movs	r3, #0
 80105d6:	930e      	str	r3, [sp, #56]	; 0x38
 80105d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80105da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80105dc:	6013      	str	r3, [r2, #0]
 80105de:	f7ff ba65 	b.w	800faac <_strtod_l+0x8c>
 80105e2:	2b65      	cmp	r3, #101	; 0x65
 80105e4:	f43f ab5d 	beq.w	800fca2 <_strtod_l+0x282>
 80105e8:	2b45      	cmp	r3, #69	; 0x45
 80105ea:	f43f ab5a 	beq.w	800fca2 <_strtod_l+0x282>
 80105ee:	2201      	movs	r2, #1
 80105f0:	f7ff bb92 	b.w	800fd18 <_strtod_l+0x2f8>
 80105f4:	f3af 8000 	nop.w
 80105f8:	94a03595 	.word	0x94a03595
 80105fc:	3fdfffff 	.word	0x3fdfffff
 8010600:	35afe535 	.word	0x35afe535
 8010604:	3fe00000 	.word	0x3fe00000
 8010608:	ffc00000 	.word	0xffc00000
 801060c:	41dfffff 	.word	0x41dfffff
 8010610:	94a03595 	.word	0x94a03595
 8010614:	3fcfffff 	.word	0x3fcfffff
 8010618:	3ff00000 	.word	0x3ff00000
 801061c:	7ff00000 	.word	0x7ff00000
 8010620:	7fe00000 	.word	0x7fe00000
 8010624:	7c9fffff 	.word	0x7c9fffff
 8010628:	3fe00000 	.word	0x3fe00000
 801062c:	bff00000 	.word	0xbff00000
 8010630:	7fefffff 	.word	0x7fefffff

08010634 <_strtod_r>:
 8010634:	4b01      	ldr	r3, [pc, #4]	; (801063c <_strtod_r+0x8>)
 8010636:	f7ff b9f3 	b.w	800fa20 <_strtod_l>
 801063a:	bf00      	nop
 801063c:	200000f0 	.word	0x200000f0

08010640 <_strtol_l.isra.0>:
 8010640:	2b01      	cmp	r3, #1
 8010642:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010646:	d001      	beq.n	801064c <_strtol_l.isra.0+0xc>
 8010648:	2b24      	cmp	r3, #36	; 0x24
 801064a:	d906      	bls.n	801065a <_strtol_l.isra.0+0x1a>
 801064c:	f7fd ff54 	bl	800e4f8 <__errno>
 8010650:	2316      	movs	r3, #22
 8010652:	6003      	str	r3, [r0, #0]
 8010654:	2000      	movs	r0, #0
 8010656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801065a:	4f3a      	ldr	r7, [pc, #232]	; (8010744 <_strtol_l.isra.0+0x104>)
 801065c:	468e      	mov	lr, r1
 801065e:	4676      	mov	r6, lr
 8010660:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8010664:	5de5      	ldrb	r5, [r4, r7]
 8010666:	f015 0508 	ands.w	r5, r5, #8
 801066a:	d1f8      	bne.n	801065e <_strtol_l.isra.0+0x1e>
 801066c:	2c2d      	cmp	r4, #45	; 0x2d
 801066e:	d134      	bne.n	80106da <_strtol_l.isra.0+0x9a>
 8010670:	f89e 4000 	ldrb.w	r4, [lr]
 8010674:	f04f 0801 	mov.w	r8, #1
 8010678:	f106 0e02 	add.w	lr, r6, #2
 801067c:	2b00      	cmp	r3, #0
 801067e:	d05c      	beq.n	801073a <_strtol_l.isra.0+0xfa>
 8010680:	2b10      	cmp	r3, #16
 8010682:	d10c      	bne.n	801069e <_strtol_l.isra.0+0x5e>
 8010684:	2c30      	cmp	r4, #48	; 0x30
 8010686:	d10a      	bne.n	801069e <_strtol_l.isra.0+0x5e>
 8010688:	f89e 4000 	ldrb.w	r4, [lr]
 801068c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010690:	2c58      	cmp	r4, #88	; 0x58
 8010692:	d14d      	bne.n	8010730 <_strtol_l.isra.0+0xf0>
 8010694:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8010698:	2310      	movs	r3, #16
 801069a:	f10e 0e02 	add.w	lr, lr, #2
 801069e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80106a2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80106a6:	2600      	movs	r6, #0
 80106a8:	fbbc f9f3 	udiv	r9, ip, r3
 80106ac:	4635      	mov	r5, r6
 80106ae:	fb03 ca19 	mls	sl, r3, r9, ip
 80106b2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80106b6:	2f09      	cmp	r7, #9
 80106b8:	d818      	bhi.n	80106ec <_strtol_l.isra.0+0xac>
 80106ba:	463c      	mov	r4, r7
 80106bc:	42a3      	cmp	r3, r4
 80106be:	dd24      	ble.n	801070a <_strtol_l.isra.0+0xca>
 80106c0:	2e00      	cmp	r6, #0
 80106c2:	db1f      	blt.n	8010704 <_strtol_l.isra.0+0xc4>
 80106c4:	45a9      	cmp	r9, r5
 80106c6:	d31d      	bcc.n	8010704 <_strtol_l.isra.0+0xc4>
 80106c8:	d101      	bne.n	80106ce <_strtol_l.isra.0+0x8e>
 80106ca:	45a2      	cmp	sl, r4
 80106cc:	db1a      	blt.n	8010704 <_strtol_l.isra.0+0xc4>
 80106ce:	fb05 4503 	mla	r5, r5, r3, r4
 80106d2:	2601      	movs	r6, #1
 80106d4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80106d8:	e7eb      	b.n	80106b2 <_strtol_l.isra.0+0x72>
 80106da:	2c2b      	cmp	r4, #43	; 0x2b
 80106dc:	bf08      	it	eq
 80106de:	f89e 4000 	ldrbeq.w	r4, [lr]
 80106e2:	46a8      	mov	r8, r5
 80106e4:	bf08      	it	eq
 80106e6:	f106 0e02 	addeq.w	lr, r6, #2
 80106ea:	e7c7      	b.n	801067c <_strtol_l.isra.0+0x3c>
 80106ec:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80106f0:	2f19      	cmp	r7, #25
 80106f2:	d801      	bhi.n	80106f8 <_strtol_l.isra.0+0xb8>
 80106f4:	3c37      	subs	r4, #55	; 0x37
 80106f6:	e7e1      	b.n	80106bc <_strtol_l.isra.0+0x7c>
 80106f8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80106fc:	2f19      	cmp	r7, #25
 80106fe:	d804      	bhi.n	801070a <_strtol_l.isra.0+0xca>
 8010700:	3c57      	subs	r4, #87	; 0x57
 8010702:	e7db      	b.n	80106bc <_strtol_l.isra.0+0x7c>
 8010704:	f04f 36ff 	mov.w	r6, #4294967295
 8010708:	e7e4      	b.n	80106d4 <_strtol_l.isra.0+0x94>
 801070a:	2e00      	cmp	r6, #0
 801070c:	da05      	bge.n	801071a <_strtol_l.isra.0+0xda>
 801070e:	2322      	movs	r3, #34	; 0x22
 8010710:	6003      	str	r3, [r0, #0]
 8010712:	4665      	mov	r5, ip
 8010714:	b942      	cbnz	r2, 8010728 <_strtol_l.isra.0+0xe8>
 8010716:	4628      	mov	r0, r5
 8010718:	e79d      	b.n	8010656 <_strtol_l.isra.0+0x16>
 801071a:	f1b8 0f00 	cmp.w	r8, #0
 801071e:	d000      	beq.n	8010722 <_strtol_l.isra.0+0xe2>
 8010720:	426d      	negs	r5, r5
 8010722:	2a00      	cmp	r2, #0
 8010724:	d0f7      	beq.n	8010716 <_strtol_l.isra.0+0xd6>
 8010726:	b10e      	cbz	r6, 801072c <_strtol_l.isra.0+0xec>
 8010728:	f10e 31ff 	add.w	r1, lr, #4294967295
 801072c:	6011      	str	r1, [r2, #0]
 801072e:	e7f2      	b.n	8010716 <_strtol_l.isra.0+0xd6>
 8010730:	2430      	movs	r4, #48	; 0x30
 8010732:	2b00      	cmp	r3, #0
 8010734:	d1b3      	bne.n	801069e <_strtol_l.isra.0+0x5e>
 8010736:	2308      	movs	r3, #8
 8010738:	e7b1      	b.n	801069e <_strtol_l.isra.0+0x5e>
 801073a:	2c30      	cmp	r4, #48	; 0x30
 801073c:	d0a4      	beq.n	8010688 <_strtol_l.isra.0+0x48>
 801073e:	230a      	movs	r3, #10
 8010740:	e7ad      	b.n	801069e <_strtol_l.isra.0+0x5e>
 8010742:	bf00      	nop
 8010744:	08014829 	.word	0x08014829

08010748 <_strtol_r>:
 8010748:	f7ff bf7a 	b.w	8010640 <_strtol_l.isra.0>

0801074c <_strtoul_l.isra.0>:
 801074c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010750:	4e3b      	ldr	r6, [pc, #236]	; (8010840 <_strtoul_l.isra.0+0xf4>)
 8010752:	4686      	mov	lr, r0
 8010754:	468c      	mov	ip, r1
 8010756:	4660      	mov	r0, ip
 8010758:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801075c:	5da5      	ldrb	r5, [r4, r6]
 801075e:	f015 0508 	ands.w	r5, r5, #8
 8010762:	d1f8      	bne.n	8010756 <_strtoul_l.isra.0+0xa>
 8010764:	2c2d      	cmp	r4, #45	; 0x2d
 8010766:	d134      	bne.n	80107d2 <_strtoul_l.isra.0+0x86>
 8010768:	f89c 4000 	ldrb.w	r4, [ip]
 801076c:	f04f 0801 	mov.w	r8, #1
 8010770:	f100 0c02 	add.w	ip, r0, #2
 8010774:	2b00      	cmp	r3, #0
 8010776:	d05e      	beq.n	8010836 <_strtoul_l.isra.0+0xea>
 8010778:	2b10      	cmp	r3, #16
 801077a:	d10c      	bne.n	8010796 <_strtoul_l.isra.0+0x4a>
 801077c:	2c30      	cmp	r4, #48	; 0x30
 801077e:	d10a      	bne.n	8010796 <_strtoul_l.isra.0+0x4a>
 8010780:	f89c 0000 	ldrb.w	r0, [ip]
 8010784:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8010788:	2858      	cmp	r0, #88	; 0x58
 801078a:	d14f      	bne.n	801082c <_strtoul_l.isra.0+0xe0>
 801078c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8010790:	2310      	movs	r3, #16
 8010792:	f10c 0c02 	add.w	ip, ip, #2
 8010796:	f04f 37ff 	mov.w	r7, #4294967295
 801079a:	2500      	movs	r5, #0
 801079c:	fbb7 f7f3 	udiv	r7, r7, r3
 80107a0:	fb03 f907 	mul.w	r9, r3, r7
 80107a4:	ea6f 0909 	mvn.w	r9, r9
 80107a8:	4628      	mov	r0, r5
 80107aa:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80107ae:	2e09      	cmp	r6, #9
 80107b0:	d818      	bhi.n	80107e4 <_strtoul_l.isra.0+0x98>
 80107b2:	4634      	mov	r4, r6
 80107b4:	42a3      	cmp	r3, r4
 80107b6:	dd24      	ble.n	8010802 <_strtoul_l.isra.0+0xb6>
 80107b8:	2d00      	cmp	r5, #0
 80107ba:	db1f      	blt.n	80107fc <_strtoul_l.isra.0+0xb0>
 80107bc:	4287      	cmp	r7, r0
 80107be:	d31d      	bcc.n	80107fc <_strtoul_l.isra.0+0xb0>
 80107c0:	d101      	bne.n	80107c6 <_strtoul_l.isra.0+0x7a>
 80107c2:	45a1      	cmp	r9, r4
 80107c4:	db1a      	blt.n	80107fc <_strtoul_l.isra.0+0xb0>
 80107c6:	fb00 4003 	mla	r0, r0, r3, r4
 80107ca:	2501      	movs	r5, #1
 80107cc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80107d0:	e7eb      	b.n	80107aa <_strtoul_l.isra.0+0x5e>
 80107d2:	2c2b      	cmp	r4, #43	; 0x2b
 80107d4:	bf08      	it	eq
 80107d6:	f89c 4000 	ldrbeq.w	r4, [ip]
 80107da:	46a8      	mov	r8, r5
 80107dc:	bf08      	it	eq
 80107de:	f100 0c02 	addeq.w	ip, r0, #2
 80107e2:	e7c7      	b.n	8010774 <_strtoul_l.isra.0+0x28>
 80107e4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80107e8:	2e19      	cmp	r6, #25
 80107ea:	d801      	bhi.n	80107f0 <_strtoul_l.isra.0+0xa4>
 80107ec:	3c37      	subs	r4, #55	; 0x37
 80107ee:	e7e1      	b.n	80107b4 <_strtoul_l.isra.0+0x68>
 80107f0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80107f4:	2e19      	cmp	r6, #25
 80107f6:	d804      	bhi.n	8010802 <_strtoul_l.isra.0+0xb6>
 80107f8:	3c57      	subs	r4, #87	; 0x57
 80107fa:	e7db      	b.n	80107b4 <_strtoul_l.isra.0+0x68>
 80107fc:	f04f 35ff 	mov.w	r5, #4294967295
 8010800:	e7e4      	b.n	80107cc <_strtoul_l.isra.0+0x80>
 8010802:	2d00      	cmp	r5, #0
 8010804:	da07      	bge.n	8010816 <_strtoul_l.isra.0+0xca>
 8010806:	2322      	movs	r3, #34	; 0x22
 8010808:	f8ce 3000 	str.w	r3, [lr]
 801080c:	f04f 30ff 	mov.w	r0, #4294967295
 8010810:	b942      	cbnz	r2, 8010824 <_strtoul_l.isra.0+0xd8>
 8010812:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010816:	f1b8 0f00 	cmp.w	r8, #0
 801081a:	d000      	beq.n	801081e <_strtoul_l.isra.0+0xd2>
 801081c:	4240      	negs	r0, r0
 801081e:	2a00      	cmp	r2, #0
 8010820:	d0f7      	beq.n	8010812 <_strtoul_l.isra.0+0xc6>
 8010822:	b10d      	cbz	r5, 8010828 <_strtoul_l.isra.0+0xdc>
 8010824:	f10c 31ff 	add.w	r1, ip, #4294967295
 8010828:	6011      	str	r1, [r2, #0]
 801082a:	e7f2      	b.n	8010812 <_strtoul_l.isra.0+0xc6>
 801082c:	2430      	movs	r4, #48	; 0x30
 801082e:	2b00      	cmp	r3, #0
 8010830:	d1b1      	bne.n	8010796 <_strtoul_l.isra.0+0x4a>
 8010832:	2308      	movs	r3, #8
 8010834:	e7af      	b.n	8010796 <_strtoul_l.isra.0+0x4a>
 8010836:	2c30      	cmp	r4, #48	; 0x30
 8010838:	d0a2      	beq.n	8010780 <_strtoul_l.isra.0+0x34>
 801083a:	230a      	movs	r3, #10
 801083c:	e7ab      	b.n	8010796 <_strtoul_l.isra.0+0x4a>
 801083e:	bf00      	nop
 8010840:	08014829 	.word	0x08014829

08010844 <_strtoul_r>:
 8010844:	f7ff bf82 	b.w	801074c <_strtoul_l.isra.0>

08010848 <__swbuf_r>:
 8010848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801084a:	460e      	mov	r6, r1
 801084c:	4614      	mov	r4, r2
 801084e:	4605      	mov	r5, r0
 8010850:	b118      	cbz	r0, 801085a <__swbuf_r+0x12>
 8010852:	6983      	ldr	r3, [r0, #24]
 8010854:	b90b      	cbnz	r3, 801085a <__swbuf_r+0x12>
 8010856:	f7fd fead 	bl	800e5b4 <__sinit>
 801085a:	4b21      	ldr	r3, [pc, #132]	; (80108e0 <__swbuf_r+0x98>)
 801085c:	429c      	cmp	r4, r3
 801085e:	d12b      	bne.n	80108b8 <__swbuf_r+0x70>
 8010860:	686c      	ldr	r4, [r5, #4]
 8010862:	69a3      	ldr	r3, [r4, #24]
 8010864:	60a3      	str	r3, [r4, #8]
 8010866:	89a3      	ldrh	r3, [r4, #12]
 8010868:	071a      	lsls	r2, r3, #28
 801086a:	d52f      	bpl.n	80108cc <__swbuf_r+0x84>
 801086c:	6923      	ldr	r3, [r4, #16]
 801086e:	b36b      	cbz	r3, 80108cc <__swbuf_r+0x84>
 8010870:	6923      	ldr	r3, [r4, #16]
 8010872:	6820      	ldr	r0, [r4, #0]
 8010874:	1ac0      	subs	r0, r0, r3
 8010876:	6963      	ldr	r3, [r4, #20]
 8010878:	b2f6      	uxtb	r6, r6
 801087a:	4283      	cmp	r3, r0
 801087c:	4637      	mov	r7, r6
 801087e:	dc04      	bgt.n	801088a <__swbuf_r+0x42>
 8010880:	4621      	mov	r1, r4
 8010882:	4628      	mov	r0, r5
 8010884:	f000 ffde 	bl	8011844 <_fflush_r>
 8010888:	bb30      	cbnz	r0, 80108d8 <__swbuf_r+0x90>
 801088a:	68a3      	ldr	r3, [r4, #8]
 801088c:	3b01      	subs	r3, #1
 801088e:	60a3      	str	r3, [r4, #8]
 8010890:	6823      	ldr	r3, [r4, #0]
 8010892:	1c5a      	adds	r2, r3, #1
 8010894:	6022      	str	r2, [r4, #0]
 8010896:	701e      	strb	r6, [r3, #0]
 8010898:	6963      	ldr	r3, [r4, #20]
 801089a:	3001      	adds	r0, #1
 801089c:	4283      	cmp	r3, r0
 801089e:	d004      	beq.n	80108aa <__swbuf_r+0x62>
 80108a0:	89a3      	ldrh	r3, [r4, #12]
 80108a2:	07db      	lsls	r3, r3, #31
 80108a4:	d506      	bpl.n	80108b4 <__swbuf_r+0x6c>
 80108a6:	2e0a      	cmp	r6, #10
 80108a8:	d104      	bne.n	80108b4 <__swbuf_r+0x6c>
 80108aa:	4621      	mov	r1, r4
 80108ac:	4628      	mov	r0, r5
 80108ae:	f000 ffc9 	bl	8011844 <_fflush_r>
 80108b2:	b988      	cbnz	r0, 80108d8 <__swbuf_r+0x90>
 80108b4:	4638      	mov	r0, r7
 80108b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108b8:	4b0a      	ldr	r3, [pc, #40]	; (80108e4 <__swbuf_r+0x9c>)
 80108ba:	429c      	cmp	r4, r3
 80108bc:	d101      	bne.n	80108c2 <__swbuf_r+0x7a>
 80108be:	68ac      	ldr	r4, [r5, #8]
 80108c0:	e7cf      	b.n	8010862 <__swbuf_r+0x1a>
 80108c2:	4b09      	ldr	r3, [pc, #36]	; (80108e8 <__swbuf_r+0xa0>)
 80108c4:	429c      	cmp	r4, r3
 80108c6:	bf08      	it	eq
 80108c8:	68ec      	ldreq	r4, [r5, #12]
 80108ca:	e7ca      	b.n	8010862 <__swbuf_r+0x1a>
 80108cc:	4621      	mov	r1, r4
 80108ce:	4628      	mov	r0, r5
 80108d0:	f000 f81e 	bl	8010910 <__swsetup_r>
 80108d4:	2800      	cmp	r0, #0
 80108d6:	d0cb      	beq.n	8010870 <__swbuf_r+0x28>
 80108d8:	f04f 37ff 	mov.w	r7, #4294967295
 80108dc:	e7ea      	b.n	80108b4 <__swbuf_r+0x6c>
 80108de:	bf00      	nop
 80108e0:	0801494c 	.word	0x0801494c
 80108e4:	0801496c 	.word	0x0801496c
 80108e8:	0801492c 	.word	0x0801492c

080108ec <_write_r>:
 80108ec:	b538      	push	{r3, r4, r5, lr}
 80108ee:	4d07      	ldr	r5, [pc, #28]	; (801090c <_write_r+0x20>)
 80108f0:	4604      	mov	r4, r0
 80108f2:	4608      	mov	r0, r1
 80108f4:	4611      	mov	r1, r2
 80108f6:	2200      	movs	r2, #0
 80108f8:	602a      	str	r2, [r5, #0]
 80108fa:	461a      	mov	r2, r3
 80108fc:	f002 ffc0 	bl	8013880 <_write>
 8010900:	1c43      	adds	r3, r0, #1
 8010902:	d102      	bne.n	801090a <_write_r+0x1e>
 8010904:	682b      	ldr	r3, [r5, #0]
 8010906:	b103      	cbz	r3, 801090a <_write_r+0x1e>
 8010908:	6023      	str	r3, [r4, #0]
 801090a:	bd38      	pop	{r3, r4, r5, pc}
 801090c:	200062e4 	.word	0x200062e4

08010910 <__swsetup_r>:
 8010910:	4b32      	ldr	r3, [pc, #200]	; (80109dc <__swsetup_r+0xcc>)
 8010912:	b570      	push	{r4, r5, r6, lr}
 8010914:	681d      	ldr	r5, [r3, #0]
 8010916:	4606      	mov	r6, r0
 8010918:	460c      	mov	r4, r1
 801091a:	b125      	cbz	r5, 8010926 <__swsetup_r+0x16>
 801091c:	69ab      	ldr	r3, [r5, #24]
 801091e:	b913      	cbnz	r3, 8010926 <__swsetup_r+0x16>
 8010920:	4628      	mov	r0, r5
 8010922:	f7fd fe47 	bl	800e5b4 <__sinit>
 8010926:	4b2e      	ldr	r3, [pc, #184]	; (80109e0 <__swsetup_r+0xd0>)
 8010928:	429c      	cmp	r4, r3
 801092a:	d10f      	bne.n	801094c <__swsetup_r+0x3c>
 801092c:	686c      	ldr	r4, [r5, #4]
 801092e:	89a3      	ldrh	r3, [r4, #12]
 8010930:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010934:	0719      	lsls	r1, r3, #28
 8010936:	d42c      	bmi.n	8010992 <__swsetup_r+0x82>
 8010938:	06dd      	lsls	r5, r3, #27
 801093a:	d411      	bmi.n	8010960 <__swsetup_r+0x50>
 801093c:	2309      	movs	r3, #9
 801093e:	6033      	str	r3, [r6, #0]
 8010940:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010944:	81a3      	strh	r3, [r4, #12]
 8010946:	f04f 30ff 	mov.w	r0, #4294967295
 801094a:	e03e      	b.n	80109ca <__swsetup_r+0xba>
 801094c:	4b25      	ldr	r3, [pc, #148]	; (80109e4 <__swsetup_r+0xd4>)
 801094e:	429c      	cmp	r4, r3
 8010950:	d101      	bne.n	8010956 <__swsetup_r+0x46>
 8010952:	68ac      	ldr	r4, [r5, #8]
 8010954:	e7eb      	b.n	801092e <__swsetup_r+0x1e>
 8010956:	4b24      	ldr	r3, [pc, #144]	; (80109e8 <__swsetup_r+0xd8>)
 8010958:	429c      	cmp	r4, r3
 801095a:	bf08      	it	eq
 801095c:	68ec      	ldreq	r4, [r5, #12]
 801095e:	e7e6      	b.n	801092e <__swsetup_r+0x1e>
 8010960:	0758      	lsls	r0, r3, #29
 8010962:	d512      	bpl.n	801098a <__swsetup_r+0x7a>
 8010964:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010966:	b141      	cbz	r1, 801097a <__swsetup_r+0x6a>
 8010968:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801096c:	4299      	cmp	r1, r3
 801096e:	d002      	beq.n	8010976 <__swsetup_r+0x66>
 8010970:	4630      	mov	r0, r6
 8010972:	f7fd ff1d 	bl	800e7b0 <_free_r>
 8010976:	2300      	movs	r3, #0
 8010978:	6363      	str	r3, [r4, #52]	; 0x34
 801097a:	89a3      	ldrh	r3, [r4, #12]
 801097c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010980:	81a3      	strh	r3, [r4, #12]
 8010982:	2300      	movs	r3, #0
 8010984:	6063      	str	r3, [r4, #4]
 8010986:	6923      	ldr	r3, [r4, #16]
 8010988:	6023      	str	r3, [r4, #0]
 801098a:	89a3      	ldrh	r3, [r4, #12]
 801098c:	f043 0308 	orr.w	r3, r3, #8
 8010990:	81a3      	strh	r3, [r4, #12]
 8010992:	6923      	ldr	r3, [r4, #16]
 8010994:	b94b      	cbnz	r3, 80109aa <__swsetup_r+0x9a>
 8010996:	89a3      	ldrh	r3, [r4, #12]
 8010998:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801099c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80109a0:	d003      	beq.n	80109aa <__swsetup_r+0x9a>
 80109a2:	4621      	mov	r1, r4
 80109a4:	4630      	mov	r0, r6
 80109a6:	f001 fb45 	bl	8012034 <__smakebuf_r>
 80109aa:	89a0      	ldrh	r0, [r4, #12]
 80109ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80109b0:	f010 0301 	ands.w	r3, r0, #1
 80109b4:	d00a      	beq.n	80109cc <__swsetup_r+0xbc>
 80109b6:	2300      	movs	r3, #0
 80109b8:	60a3      	str	r3, [r4, #8]
 80109ba:	6963      	ldr	r3, [r4, #20]
 80109bc:	425b      	negs	r3, r3
 80109be:	61a3      	str	r3, [r4, #24]
 80109c0:	6923      	ldr	r3, [r4, #16]
 80109c2:	b943      	cbnz	r3, 80109d6 <__swsetup_r+0xc6>
 80109c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80109c8:	d1ba      	bne.n	8010940 <__swsetup_r+0x30>
 80109ca:	bd70      	pop	{r4, r5, r6, pc}
 80109cc:	0781      	lsls	r1, r0, #30
 80109ce:	bf58      	it	pl
 80109d0:	6963      	ldrpl	r3, [r4, #20]
 80109d2:	60a3      	str	r3, [r4, #8]
 80109d4:	e7f4      	b.n	80109c0 <__swsetup_r+0xb0>
 80109d6:	2000      	movs	r0, #0
 80109d8:	e7f7      	b.n	80109ca <__swsetup_r+0xba>
 80109da:	bf00      	nop
 80109dc:	20000088 	.word	0x20000088
 80109e0:	0801494c 	.word	0x0801494c
 80109e4:	0801496c 	.word	0x0801496c
 80109e8:	0801492c 	.word	0x0801492c

080109ec <__assert_func>:
 80109ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80109ee:	4614      	mov	r4, r2
 80109f0:	461a      	mov	r2, r3
 80109f2:	4b09      	ldr	r3, [pc, #36]	; (8010a18 <__assert_func+0x2c>)
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	4605      	mov	r5, r0
 80109f8:	68d8      	ldr	r0, [r3, #12]
 80109fa:	b14c      	cbz	r4, 8010a10 <__assert_func+0x24>
 80109fc:	4b07      	ldr	r3, [pc, #28]	; (8010a1c <__assert_func+0x30>)
 80109fe:	9100      	str	r1, [sp, #0]
 8010a00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010a04:	4906      	ldr	r1, [pc, #24]	; (8010a20 <__assert_func+0x34>)
 8010a06:	462b      	mov	r3, r5
 8010a08:	f000 ff58 	bl	80118bc <fiprintf>
 8010a0c:	f7fd fd6c 	bl	800e4e8 <abort>
 8010a10:	4b04      	ldr	r3, [pc, #16]	; (8010a24 <__assert_func+0x38>)
 8010a12:	461c      	mov	r4, r3
 8010a14:	e7f3      	b.n	80109fe <__assert_func+0x12>
 8010a16:	bf00      	nop
 8010a18:	20000088 	.word	0x20000088
 8010a1c:	08014a18 	.word	0x08014a18
 8010a20:	08014a25 	.word	0x08014a25
 8010a24:	08014a53 	.word	0x08014a53

08010a28 <_close_r>:
 8010a28:	b538      	push	{r3, r4, r5, lr}
 8010a2a:	4d06      	ldr	r5, [pc, #24]	; (8010a44 <_close_r+0x1c>)
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	4604      	mov	r4, r0
 8010a30:	4608      	mov	r0, r1
 8010a32:	602b      	str	r3, [r5, #0]
 8010a34:	f002 fede 	bl	80137f4 <_close>
 8010a38:	1c43      	adds	r3, r0, #1
 8010a3a:	d102      	bne.n	8010a42 <_close_r+0x1a>
 8010a3c:	682b      	ldr	r3, [r5, #0]
 8010a3e:	b103      	cbz	r3, 8010a42 <_close_r+0x1a>
 8010a40:	6023      	str	r3, [r4, #0]
 8010a42:	bd38      	pop	{r3, r4, r5, pc}
 8010a44:	200062e4 	.word	0x200062e4

08010a48 <quorem>:
 8010a48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a4c:	6903      	ldr	r3, [r0, #16]
 8010a4e:	690c      	ldr	r4, [r1, #16]
 8010a50:	42a3      	cmp	r3, r4
 8010a52:	4607      	mov	r7, r0
 8010a54:	f2c0 8081 	blt.w	8010b5a <quorem+0x112>
 8010a58:	3c01      	subs	r4, #1
 8010a5a:	f101 0814 	add.w	r8, r1, #20
 8010a5e:	f100 0514 	add.w	r5, r0, #20
 8010a62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010a66:	9301      	str	r3, [sp, #4]
 8010a68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010a6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010a70:	3301      	adds	r3, #1
 8010a72:	429a      	cmp	r2, r3
 8010a74:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010a78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010a7c:	fbb2 f6f3 	udiv	r6, r2, r3
 8010a80:	d331      	bcc.n	8010ae6 <quorem+0x9e>
 8010a82:	f04f 0e00 	mov.w	lr, #0
 8010a86:	4640      	mov	r0, r8
 8010a88:	46ac      	mov	ip, r5
 8010a8a:	46f2      	mov	sl, lr
 8010a8c:	f850 2b04 	ldr.w	r2, [r0], #4
 8010a90:	b293      	uxth	r3, r2
 8010a92:	fb06 e303 	mla	r3, r6, r3, lr
 8010a96:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010a9a:	b29b      	uxth	r3, r3
 8010a9c:	ebaa 0303 	sub.w	r3, sl, r3
 8010aa0:	0c12      	lsrs	r2, r2, #16
 8010aa2:	f8dc a000 	ldr.w	sl, [ip]
 8010aa6:	fb06 e202 	mla	r2, r6, r2, lr
 8010aaa:	fa13 f38a 	uxtah	r3, r3, sl
 8010aae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010ab2:	fa1f fa82 	uxth.w	sl, r2
 8010ab6:	f8dc 2000 	ldr.w	r2, [ip]
 8010aba:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8010abe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010ac2:	b29b      	uxth	r3, r3
 8010ac4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010ac8:	4581      	cmp	r9, r0
 8010aca:	f84c 3b04 	str.w	r3, [ip], #4
 8010ace:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010ad2:	d2db      	bcs.n	8010a8c <quorem+0x44>
 8010ad4:	f855 300b 	ldr.w	r3, [r5, fp]
 8010ad8:	b92b      	cbnz	r3, 8010ae6 <quorem+0x9e>
 8010ada:	9b01      	ldr	r3, [sp, #4]
 8010adc:	3b04      	subs	r3, #4
 8010ade:	429d      	cmp	r5, r3
 8010ae0:	461a      	mov	r2, r3
 8010ae2:	d32e      	bcc.n	8010b42 <quorem+0xfa>
 8010ae4:	613c      	str	r4, [r7, #16]
 8010ae6:	4638      	mov	r0, r7
 8010ae8:	f001 fdca 	bl	8012680 <__mcmp>
 8010aec:	2800      	cmp	r0, #0
 8010aee:	db24      	blt.n	8010b3a <quorem+0xf2>
 8010af0:	3601      	adds	r6, #1
 8010af2:	4628      	mov	r0, r5
 8010af4:	f04f 0c00 	mov.w	ip, #0
 8010af8:	f858 2b04 	ldr.w	r2, [r8], #4
 8010afc:	f8d0 e000 	ldr.w	lr, [r0]
 8010b00:	b293      	uxth	r3, r2
 8010b02:	ebac 0303 	sub.w	r3, ip, r3
 8010b06:	0c12      	lsrs	r2, r2, #16
 8010b08:	fa13 f38e 	uxtah	r3, r3, lr
 8010b0c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010b10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010b14:	b29b      	uxth	r3, r3
 8010b16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010b1a:	45c1      	cmp	r9, r8
 8010b1c:	f840 3b04 	str.w	r3, [r0], #4
 8010b20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010b24:	d2e8      	bcs.n	8010af8 <quorem+0xb0>
 8010b26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010b2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010b2e:	b922      	cbnz	r2, 8010b3a <quorem+0xf2>
 8010b30:	3b04      	subs	r3, #4
 8010b32:	429d      	cmp	r5, r3
 8010b34:	461a      	mov	r2, r3
 8010b36:	d30a      	bcc.n	8010b4e <quorem+0x106>
 8010b38:	613c      	str	r4, [r7, #16]
 8010b3a:	4630      	mov	r0, r6
 8010b3c:	b003      	add	sp, #12
 8010b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b42:	6812      	ldr	r2, [r2, #0]
 8010b44:	3b04      	subs	r3, #4
 8010b46:	2a00      	cmp	r2, #0
 8010b48:	d1cc      	bne.n	8010ae4 <quorem+0x9c>
 8010b4a:	3c01      	subs	r4, #1
 8010b4c:	e7c7      	b.n	8010ade <quorem+0x96>
 8010b4e:	6812      	ldr	r2, [r2, #0]
 8010b50:	3b04      	subs	r3, #4
 8010b52:	2a00      	cmp	r2, #0
 8010b54:	d1f0      	bne.n	8010b38 <quorem+0xf0>
 8010b56:	3c01      	subs	r4, #1
 8010b58:	e7eb      	b.n	8010b32 <quorem+0xea>
 8010b5a:	2000      	movs	r0, #0
 8010b5c:	e7ee      	b.n	8010b3c <quorem+0xf4>
	...

08010b60 <_dtoa_r>:
 8010b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b64:	ed2d 8b02 	vpush	{d8}
 8010b68:	ec57 6b10 	vmov	r6, r7, d0
 8010b6c:	b095      	sub	sp, #84	; 0x54
 8010b6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010b70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010b74:	9105      	str	r1, [sp, #20]
 8010b76:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8010b7a:	4604      	mov	r4, r0
 8010b7c:	9209      	str	r2, [sp, #36]	; 0x24
 8010b7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010b80:	b975      	cbnz	r5, 8010ba0 <_dtoa_r+0x40>
 8010b82:	2010      	movs	r0, #16
 8010b84:	f7fd fddc 	bl	800e740 <malloc>
 8010b88:	4602      	mov	r2, r0
 8010b8a:	6260      	str	r0, [r4, #36]	; 0x24
 8010b8c:	b920      	cbnz	r0, 8010b98 <_dtoa_r+0x38>
 8010b8e:	4bb2      	ldr	r3, [pc, #712]	; (8010e58 <_dtoa_r+0x2f8>)
 8010b90:	21ea      	movs	r1, #234	; 0xea
 8010b92:	48b2      	ldr	r0, [pc, #712]	; (8010e5c <_dtoa_r+0x2fc>)
 8010b94:	f7ff ff2a 	bl	80109ec <__assert_func>
 8010b98:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010b9c:	6005      	str	r5, [r0, #0]
 8010b9e:	60c5      	str	r5, [r0, #12]
 8010ba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ba2:	6819      	ldr	r1, [r3, #0]
 8010ba4:	b151      	cbz	r1, 8010bbc <_dtoa_r+0x5c>
 8010ba6:	685a      	ldr	r2, [r3, #4]
 8010ba8:	604a      	str	r2, [r1, #4]
 8010baa:	2301      	movs	r3, #1
 8010bac:	4093      	lsls	r3, r2
 8010bae:	608b      	str	r3, [r1, #8]
 8010bb0:	4620      	mov	r0, r4
 8010bb2:	f001 fadd 	bl	8012170 <_Bfree>
 8010bb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010bb8:	2200      	movs	r2, #0
 8010bba:	601a      	str	r2, [r3, #0]
 8010bbc:	1e3b      	subs	r3, r7, #0
 8010bbe:	bfb9      	ittee	lt
 8010bc0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010bc4:	9303      	strlt	r3, [sp, #12]
 8010bc6:	2300      	movge	r3, #0
 8010bc8:	f8c8 3000 	strge.w	r3, [r8]
 8010bcc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8010bd0:	4ba3      	ldr	r3, [pc, #652]	; (8010e60 <_dtoa_r+0x300>)
 8010bd2:	bfbc      	itt	lt
 8010bd4:	2201      	movlt	r2, #1
 8010bd6:	f8c8 2000 	strlt.w	r2, [r8]
 8010bda:	ea33 0309 	bics.w	r3, r3, r9
 8010bde:	d11b      	bne.n	8010c18 <_dtoa_r+0xb8>
 8010be0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010be2:	f242 730f 	movw	r3, #9999	; 0x270f
 8010be6:	6013      	str	r3, [r2, #0]
 8010be8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010bec:	4333      	orrs	r3, r6
 8010bee:	f000 857a 	beq.w	80116e6 <_dtoa_r+0xb86>
 8010bf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010bf4:	b963      	cbnz	r3, 8010c10 <_dtoa_r+0xb0>
 8010bf6:	4b9b      	ldr	r3, [pc, #620]	; (8010e64 <_dtoa_r+0x304>)
 8010bf8:	e024      	b.n	8010c44 <_dtoa_r+0xe4>
 8010bfa:	4b9b      	ldr	r3, [pc, #620]	; (8010e68 <_dtoa_r+0x308>)
 8010bfc:	9300      	str	r3, [sp, #0]
 8010bfe:	3308      	adds	r3, #8
 8010c00:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010c02:	6013      	str	r3, [r2, #0]
 8010c04:	9800      	ldr	r0, [sp, #0]
 8010c06:	b015      	add	sp, #84	; 0x54
 8010c08:	ecbd 8b02 	vpop	{d8}
 8010c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c10:	4b94      	ldr	r3, [pc, #592]	; (8010e64 <_dtoa_r+0x304>)
 8010c12:	9300      	str	r3, [sp, #0]
 8010c14:	3303      	adds	r3, #3
 8010c16:	e7f3      	b.n	8010c00 <_dtoa_r+0xa0>
 8010c18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	ec51 0b17 	vmov	r0, r1, d7
 8010c22:	2300      	movs	r3, #0
 8010c24:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8010c28:	f7ef ff5e 	bl	8000ae8 <__aeabi_dcmpeq>
 8010c2c:	4680      	mov	r8, r0
 8010c2e:	b158      	cbz	r0, 8010c48 <_dtoa_r+0xe8>
 8010c30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010c32:	2301      	movs	r3, #1
 8010c34:	6013      	str	r3, [r2, #0]
 8010c36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	f000 8551 	beq.w	80116e0 <_dtoa_r+0xb80>
 8010c3e:	488b      	ldr	r0, [pc, #556]	; (8010e6c <_dtoa_r+0x30c>)
 8010c40:	6018      	str	r0, [r3, #0]
 8010c42:	1e43      	subs	r3, r0, #1
 8010c44:	9300      	str	r3, [sp, #0]
 8010c46:	e7dd      	b.n	8010c04 <_dtoa_r+0xa4>
 8010c48:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8010c4c:	aa12      	add	r2, sp, #72	; 0x48
 8010c4e:	a913      	add	r1, sp, #76	; 0x4c
 8010c50:	4620      	mov	r0, r4
 8010c52:	f001 fe35 	bl	80128c0 <__d2b>
 8010c56:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010c5a:	4683      	mov	fp, r0
 8010c5c:	2d00      	cmp	r5, #0
 8010c5e:	d07c      	beq.n	8010d5a <_dtoa_r+0x1fa>
 8010c60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c62:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8010c66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010c6a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8010c6e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010c72:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010c76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010c7a:	4b7d      	ldr	r3, [pc, #500]	; (8010e70 <_dtoa_r+0x310>)
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	4630      	mov	r0, r6
 8010c80:	4639      	mov	r1, r7
 8010c82:	f7ef fb11 	bl	80002a8 <__aeabi_dsub>
 8010c86:	a36e      	add	r3, pc, #440	; (adr r3, 8010e40 <_dtoa_r+0x2e0>)
 8010c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c8c:	f7ef fcc4 	bl	8000618 <__aeabi_dmul>
 8010c90:	a36d      	add	r3, pc, #436	; (adr r3, 8010e48 <_dtoa_r+0x2e8>)
 8010c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c96:	f7ef fb09 	bl	80002ac <__adddf3>
 8010c9a:	4606      	mov	r6, r0
 8010c9c:	4628      	mov	r0, r5
 8010c9e:	460f      	mov	r7, r1
 8010ca0:	f7ef fc50 	bl	8000544 <__aeabi_i2d>
 8010ca4:	a36a      	add	r3, pc, #424	; (adr r3, 8010e50 <_dtoa_r+0x2f0>)
 8010ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010caa:	f7ef fcb5 	bl	8000618 <__aeabi_dmul>
 8010cae:	4602      	mov	r2, r0
 8010cb0:	460b      	mov	r3, r1
 8010cb2:	4630      	mov	r0, r6
 8010cb4:	4639      	mov	r1, r7
 8010cb6:	f7ef faf9 	bl	80002ac <__adddf3>
 8010cba:	4606      	mov	r6, r0
 8010cbc:	460f      	mov	r7, r1
 8010cbe:	f7ef ff5b 	bl	8000b78 <__aeabi_d2iz>
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	4682      	mov	sl, r0
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	4630      	mov	r0, r6
 8010cca:	4639      	mov	r1, r7
 8010ccc:	f7ef ff16 	bl	8000afc <__aeabi_dcmplt>
 8010cd0:	b148      	cbz	r0, 8010ce6 <_dtoa_r+0x186>
 8010cd2:	4650      	mov	r0, sl
 8010cd4:	f7ef fc36 	bl	8000544 <__aeabi_i2d>
 8010cd8:	4632      	mov	r2, r6
 8010cda:	463b      	mov	r3, r7
 8010cdc:	f7ef ff04 	bl	8000ae8 <__aeabi_dcmpeq>
 8010ce0:	b908      	cbnz	r0, 8010ce6 <_dtoa_r+0x186>
 8010ce2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010ce6:	f1ba 0f16 	cmp.w	sl, #22
 8010cea:	d854      	bhi.n	8010d96 <_dtoa_r+0x236>
 8010cec:	4b61      	ldr	r3, [pc, #388]	; (8010e74 <_dtoa_r+0x314>)
 8010cee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010cfa:	f7ef feff 	bl	8000afc <__aeabi_dcmplt>
 8010cfe:	2800      	cmp	r0, #0
 8010d00:	d04b      	beq.n	8010d9a <_dtoa_r+0x23a>
 8010d02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010d06:	2300      	movs	r3, #0
 8010d08:	930e      	str	r3, [sp, #56]	; 0x38
 8010d0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010d0c:	1b5d      	subs	r5, r3, r5
 8010d0e:	1e6b      	subs	r3, r5, #1
 8010d10:	9304      	str	r3, [sp, #16]
 8010d12:	bf43      	ittte	mi
 8010d14:	2300      	movmi	r3, #0
 8010d16:	f1c5 0801 	rsbmi	r8, r5, #1
 8010d1a:	9304      	strmi	r3, [sp, #16]
 8010d1c:	f04f 0800 	movpl.w	r8, #0
 8010d20:	f1ba 0f00 	cmp.w	sl, #0
 8010d24:	db3b      	blt.n	8010d9e <_dtoa_r+0x23e>
 8010d26:	9b04      	ldr	r3, [sp, #16]
 8010d28:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8010d2c:	4453      	add	r3, sl
 8010d2e:	9304      	str	r3, [sp, #16]
 8010d30:	2300      	movs	r3, #0
 8010d32:	9306      	str	r3, [sp, #24]
 8010d34:	9b05      	ldr	r3, [sp, #20]
 8010d36:	2b09      	cmp	r3, #9
 8010d38:	d869      	bhi.n	8010e0e <_dtoa_r+0x2ae>
 8010d3a:	2b05      	cmp	r3, #5
 8010d3c:	bfc4      	itt	gt
 8010d3e:	3b04      	subgt	r3, #4
 8010d40:	9305      	strgt	r3, [sp, #20]
 8010d42:	9b05      	ldr	r3, [sp, #20]
 8010d44:	f1a3 0302 	sub.w	r3, r3, #2
 8010d48:	bfcc      	ite	gt
 8010d4a:	2500      	movgt	r5, #0
 8010d4c:	2501      	movle	r5, #1
 8010d4e:	2b03      	cmp	r3, #3
 8010d50:	d869      	bhi.n	8010e26 <_dtoa_r+0x2c6>
 8010d52:	e8df f003 	tbb	[pc, r3]
 8010d56:	4e2c      	.short	0x4e2c
 8010d58:	5a4c      	.short	0x5a4c
 8010d5a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8010d5e:	441d      	add	r5, r3
 8010d60:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010d64:	2b20      	cmp	r3, #32
 8010d66:	bfc1      	itttt	gt
 8010d68:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010d6c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010d70:	fa09 f303 	lslgt.w	r3, r9, r3
 8010d74:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010d78:	bfda      	itte	le
 8010d7a:	f1c3 0320 	rsble	r3, r3, #32
 8010d7e:	fa06 f003 	lslle.w	r0, r6, r3
 8010d82:	4318      	orrgt	r0, r3
 8010d84:	f7ef fbce 	bl	8000524 <__aeabi_ui2d>
 8010d88:	2301      	movs	r3, #1
 8010d8a:	4606      	mov	r6, r0
 8010d8c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010d90:	3d01      	subs	r5, #1
 8010d92:	9310      	str	r3, [sp, #64]	; 0x40
 8010d94:	e771      	b.n	8010c7a <_dtoa_r+0x11a>
 8010d96:	2301      	movs	r3, #1
 8010d98:	e7b6      	b.n	8010d08 <_dtoa_r+0x1a8>
 8010d9a:	900e      	str	r0, [sp, #56]	; 0x38
 8010d9c:	e7b5      	b.n	8010d0a <_dtoa_r+0x1aa>
 8010d9e:	f1ca 0300 	rsb	r3, sl, #0
 8010da2:	9306      	str	r3, [sp, #24]
 8010da4:	2300      	movs	r3, #0
 8010da6:	eba8 080a 	sub.w	r8, r8, sl
 8010daa:	930d      	str	r3, [sp, #52]	; 0x34
 8010dac:	e7c2      	b.n	8010d34 <_dtoa_r+0x1d4>
 8010dae:	2300      	movs	r3, #0
 8010db0:	9308      	str	r3, [sp, #32]
 8010db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	dc39      	bgt.n	8010e2c <_dtoa_r+0x2cc>
 8010db8:	f04f 0901 	mov.w	r9, #1
 8010dbc:	f8cd 9004 	str.w	r9, [sp, #4]
 8010dc0:	464b      	mov	r3, r9
 8010dc2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8010dc6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010dc8:	2200      	movs	r2, #0
 8010dca:	6042      	str	r2, [r0, #4]
 8010dcc:	2204      	movs	r2, #4
 8010dce:	f102 0614 	add.w	r6, r2, #20
 8010dd2:	429e      	cmp	r6, r3
 8010dd4:	6841      	ldr	r1, [r0, #4]
 8010dd6:	d92f      	bls.n	8010e38 <_dtoa_r+0x2d8>
 8010dd8:	4620      	mov	r0, r4
 8010dda:	f001 f989 	bl	80120f0 <_Balloc>
 8010dde:	9000      	str	r0, [sp, #0]
 8010de0:	2800      	cmp	r0, #0
 8010de2:	d14b      	bne.n	8010e7c <_dtoa_r+0x31c>
 8010de4:	4b24      	ldr	r3, [pc, #144]	; (8010e78 <_dtoa_r+0x318>)
 8010de6:	4602      	mov	r2, r0
 8010de8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010dec:	e6d1      	b.n	8010b92 <_dtoa_r+0x32>
 8010dee:	2301      	movs	r3, #1
 8010df0:	e7de      	b.n	8010db0 <_dtoa_r+0x250>
 8010df2:	2300      	movs	r3, #0
 8010df4:	9308      	str	r3, [sp, #32]
 8010df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010df8:	eb0a 0903 	add.w	r9, sl, r3
 8010dfc:	f109 0301 	add.w	r3, r9, #1
 8010e00:	2b01      	cmp	r3, #1
 8010e02:	9301      	str	r3, [sp, #4]
 8010e04:	bfb8      	it	lt
 8010e06:	2301      	movlt	r3, #1
 8010e08:	e7dd      	b.n	8010dc6 <_dtoa_r+0x266>
 8010e0a:	2301      	movs	r3, #1
 8010e0c:	e7f2      	b.n	8010df4 <_dtoa_r+0x294>
 8010e0e:	2501      	movs	r5, #1
 8010e10:	2300      	movs	r3, #0
 8010e12:	9305      	str	r3, [sp, #20]
 8010e14:	9508      	str	r5, [sp, #32]
 8010e16:	f04f 39ff 	mov.w	r9, #4294967295
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010e20:	2312      	movs	r3, #18
 8010e22:	9209      	str	r2, [sp, #36]	; 0x24
 8010e24:	e7cf      	b.n	8010dc6 <_dtoa_r+0x266>
 8010e26:	2301      	movs	r3, #1
 8010e28:	9308      	str	r3, [sp, #32]
 8010e2a:	e7f4      	b.n	8010e16 <_dtoa_r+0x2b6>
 8010e2c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010e30:	f8cd 9004 	str.w	r9, [sp, #4]
 8010e34:	464b      	mov	r3, r9
 8010e36:	e7c6      	b.n	8010dc6 <_dtoa_r+0x266>
 8010e38:	3101      	adds	r1, #1
 8010e3a:	6041      	str	r1, [r0, #4]
 8010e3c:	0052      	lsls	r2, r2, #1
 8010e3e:	e7c6      	b.n	8010dce <_dtoa_r+0x26e>
 8010e40:	636f4361 	.word	0x636f4361
 8010e44:	3fd287a7 	.word	0x3fd287a7
 8010e48:	8b60c8b3 	.word	0x8b60c8b3
 8010e4c:	3fc68a28 	.word	0x3fc68a28
 8010e50:	509f79fb 	.word	0x509f79fb
 8010e54:	3fd34413 	.word	0x3fd34413
 8010e58:	08014a61 	.word	0x08014a61
 8010e5c:	08014a78 	.word	0x08014a78
 8010e60:	7ff00000 	.word	0x7ff00000
 8010e64:	08014a5d 	.word	0x08014a5d
 8010e68:	08014a54 	.word	0x08014a54
 8010e6c:	08014cda 	.word	0x08014cda
 8010e70:	3ff80000 	.word	0x3ff80000
 8010e74:	08014bf0 	.word	0x08014bf0
 8010e78:	08014ad7 	.word	0x08014ad7
 8010e7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010e7e:	9a00      	ldr	r2, [sp, #0]
 8010e80:	601a      	str	r2, [r3, #0]
 8010e82:	9b01      	ldr	r3, [sp, #4]
 8010e84:	2b0e      	cmp	r3, #14
 8010e86:	f200 80ad 	bhi.w	8010fe4 <_dtoa_r+0x484>
 8010e8a:	2d00      	cmp	r5, #0
 8010e8c:	f000 80aa 	beq.w	8010fe4 <_dtoa_r+0x484>
 8010e90:	f1ba 0f00 	cmp.w	sl, #0
 8010e94:	dd36      	ble.n	8010f04 <_dtoa_r+0x3a4>
 8010e96:	4ac3      	ldr	r2, [pc, #780]	; (80111a4 <_dtoa_r+0x644>)
 8010e98:	f00a 030f 	and.w	r3, sl, #15
 8010e9c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010ea0:	ed93 7b00 	vldr	d7, [r3]
 8010ea4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8010ea8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8010eac:	eeb0 8a47 	vmov.f32	s16, s14
 8010eb0:	eef0 8a67 	vmov.f32	s17, s15
 8010eb4:	d016      	beq.n	8010ee4 <_dtoa_r+0x384>
 8010eb6:	4bbc      	ldr	r3, [pc, #752]	; (80111a8 <_dtoa_r+0x648>)
 8010eb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010ebc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010ec0:	f7ef fcd4 	bl	800086c <__aeabi_ddiv>
 8010ec4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ec8:	f007 070f 	and.w	r7, r7, #15
 8010ecc:	2503      	movs	r5, #3
 8010ece:	4eb6      	ldr	r6, [pc, #728]	; (80111a8 <_dtoa_r+0x648>)
 8010ed0:	b957      	cbnz	r7, 8010ee8 <_dtoa_r+0x388>
 8010ed2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ed6:	ec53 2b18 	vmov	r2, r3, d8
 8010eda:	f7ef fcc7 	bl	800086c <__aeabi_ddiv>
 8010ede:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ee2:	e029      	b.n	8010f38 <_dtoa_r+0x3d8>
 8010ee4:	2502      	movs	r5, #2
 8010ee6:	e7f2      	b.n	8010ece <_dtoa_r+0x36e>
 8010ee8:	07f9      	lsls	r1, r7, #31
 8010eea:	d508      	bpl.n	8010efe <_dtoa_r+0x39e>
 8010eec:	ec51 0b18 	vmov	r0, r1, d8
 8010ef0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010ef4:	f7ef fb90 	bl	8000618 <__aeabi_dmul>
 8010ef8:	ec41 0b18 	vmov	d8, r0, r1
 8010efc:	3501      	adds	r5, #1
 8010efe:	107f      	asrs	r7, r7, #1
 8010f00:	3608      	adds	r6, #8
 8010f02:	e7e5      	b.n	8010ed0 <_dtoa_r+0x370>
 8010f04:	f000 80a6 	beq.w	8011054 <_dtoa_r+0x4f4>
 8010f08:	f1ca 0600 	rsb	r6, sl, #0
 8010f0c:	4ba5      	ldr	r3, [pc, #660]	; (80111a4 <_dtoa_r+0x644>)
 8010f0e:	4fa6      	ldr	r7, [pc, #664]	; (80111a8 <_dtoa_r+0x648>)
 8010f10:	f006 020f 	and.w	r2, r6, #15
 8010f14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f1c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010f20:	f7ef fb7a 	bl	8000618 <__aeabi_dmul>
 8010f24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010f28:	1136      	asrs	r6, r6, #4
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	2502      	movs	r5, #2
 8010f2e:	2e00      	cmp	r6, #0
 8010f30:	f040 8085 	bne.w	801103e <_dtoa_r+0x4de>
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d1d2      	bne.n	8010ede <_dtoa_r+0x37e>
 8010f38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	f000 808c 	beq.w	8011058 <_dtoa_r+0x4f8>
 8010f40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010f44:	4b99      	ldr	r3, [pc, #612]	; (80111ac <_dtoa_r+0x64c>)
 8010f46:	2200      	movs	r2, #0
 8010f48:	4630      	mov	r0, r6
 8010f4a:	4639      	mov	r1, r7
 8010f4c:	f7ef fdd6 	bl	8000afc <__aeabi_dcmplt>
 8010f50:	2800      	cmp	r0, #0
 8010f52:	f000 8081 	beq.w	8011058 <_dtoa_r+0x4f8>
 8010f56:	9b01      	ldr	r3, [sp, #4]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d07d      	beq.n	8011058 <_dtoa_r+0x4f8>
 8010f5c:	f1b9 0f00 	cmp.w	r9, #0
 8010f60:	dd3c      	ble.n	8010fdc <_dtoa_r+0x47c>
 8010f62:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010f66:	9307      	str	r3, [sp, #28]
 8010f68:	2200      	movs	r2, #0
 8010f6a:	4b91      	ldr	r3, [pc, #580]	; (80111b0 <_dtoa_r+0x650>)
 8010f6c:	4630      	mov	r0, r6
 8010f6e:	4639      	mov	r1, r7
 8010f70:	f7ef fb52 	bl	8000618 <__aeabi_dmul>
 8010f74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010f78:	3501      	adds	r5, #1
 8010f7a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8010f7e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010f82:	4628      	mov	r0, r5
 8010f84:	f7ef fade 	bl	8000544 <__aeabi_i2d>
 8010f88:	4632      	mov	r2, r6
 8010f8a:	463b      	mov	r3, r7
 8010f8c:	f7ef fb44 	bl	8000618 <__aeabi_dmul>
 8010f90:	4b88      	ldr	r3, [pc, #544]	; (80111b4 <_dtoa_r+0x654>)
 8010f92:	2200      	movs	r2, #0
 8010f94:	f7ef f98a 	bl	80002ac <__adddf3>
 8010f98:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010f9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010fa0:	9303      	str	r3, [sp, #12]
 8010fa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d15c      	bne.n	8011062 <_dtoa_r+0x502>
 8010fa8:	4b83      	ldr	r3, [pc, #524]	; (80111b8 <_dtoa_r+0x658>)
 8010faa:	2200      	movs	r2, #0
 8010fac:	4630      	mov	r0, r6
 8010fae:	4639      	mov	r1, r7
 8010fb0:	f7ef f97a 	bl	80002a8 <__aeabi_dsub>
 8010fb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010fb8:	4606      	mov	r6, r0
 8010fba:	460f      	mov	r7, r1
 8010fbc:	f7ef fdbc 	bl	8000b38 <__aeabi_dcmpgt>
 8010fc0:	2800      	cmp	r0, #0
 8010fc2:	f040 8296 	bne.w	80114f2 <_dtoa_r+0x992>
 8010fc6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010fca:	4630      	mov	r0, r6
 8010fcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010fd0:	4639      	mov	r1, r7
 8010fd2:	f7ef fd93 	bl	8000afc <__aeabi_dcmplt>
 8010fd6:	2800      	cmp	r0, #0
 8010fd8:	f040 8288 	bne.w	80114ec <_dtoa_r+0x98c>
 8010fdc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010fe0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010fe4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	f2c0 8158 	blt.w	801129c <_dtoa_r+0x73c>
 8010fec:	f1ba 0f0e 	cmp.w	sl, #14
 8010ff0:	f300 8154 	bgt.w	801129c <_dtoa_r+0x73c>
 8010ff4:	4b6b      	ldr	r3, [pc, #428]	; (80111a4 <_dtoa_r+0x644>)
 8010ff6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010ffa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011000:	2b00      	cmp	r3, #0
 8011002:	f280 80e3 	bge.w	80111cc <_dtoa_r+0x66c>
 8011006:	9b01      	ldr	r3, [sp, #4]
 8011008:	2b00      	cmp	r3, #0
 801100a:	f300 80df 	bgt.w	80111cc <_dtoa_r+0x66c>
 801100e:	f040 826d 	bne.w	80114ec <_dtoa_r+0x98c>
 8011012:	4b69      	ldr	r3, [pc, #420]	; (80111b8 <_dtoa_r+0x658>)
 8011014:	2200      	movs	r2, #0
 8011016:	4640      	mov	r0, r8
 8011018:	4649      	mov	r1, r9
 801101a:	f7ef fafd 	bl	8000618 <__aeabi_dmul>
 801101e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011022:	f7ef fd7f 	bl	8000b24 <__aeabi_dcmpge>
 8011026:	9e01      	ldr	r6, [sp, #4]
 8011028:	4637      	mov	r7, r6
 801102a:	2800      	cmp	r0, #0
 801102c:	f040 8243 	bne.w	80114b6 <_dtoa_r+0x956>
 8011030:	9d00      	ldr	r5, [sp, #0]
 8011032:	2331      	movs	r3, #49	; 0x31
 8011034:	f805 3b01 	strb.w	r3, [r5], #1
 8011038:	f10a 0a01 	add.w	sl, sl, #1
 801103c:	e23f      	b.n	80114be <_dtoa_r+0x95e>
 801103e:	07f2      	lsls	r2, r6, #31
 8011040:	d505      	bpl.n	801104e <_dtoa_r+0x4ee>
 8011042:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011046:	f7ef fae7 	bl	8000618 <__aeabi_dmul>
 801104a:	3501      	adds	r5, #1
 801104c:	2301      	movs	r3, #1
 801104e:	1076      	asrs	r6, r6, #1
 8011050:	3708      	adds	r7, #8
 8011052:	e76c      	b.n	8010f2e <_dtoa_r+0x3ce>
 8011054:	2502      	movs	r5, #2
 8011056:	e76f      	b.n	8010f38 <_dtoa_r+0x3d8>
 8011058:	9b01      	ldr	r3, [sp, #4]
 801105a:	f8cd a01c 	str.w	sl, [sp, #28]
 801105e:	930c      	str	r3, [sp, #48]	; 0x30
 8011060:	e78d      	b.n	8010f7e <_dtoa_r+0x41e>
 8011062:	9900      	ldr	r1, [sp, #0]
 8011064:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011066:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011068:	4b4e      	ldr	r3, [pc, #312]	; (80111a4 <_dtoa_r+0x644>)
 801106a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801106e:	4401      	add	r1, r0
 8011070:	9102      	str	r1, [sp, #8]
 8011072:	9908      	ldr	r1, [sp, #32]
 8011074:	eeb0 8a47 	vmov.f32	s16, s14
 8011078:	eef0 8a67 	vmov.f32	s17, s15
 801107c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011080:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011084:	2900      	cmp	r1, #0
 8011086:	d045      	beq.n	8011114 <_dtoa_r+0x5b4>
 8011088:	494c      	ldr	r1, [pc, #304]	; (80111bc <_dtoa_r+0x65c>)
 801108a:	2000      	movs	r0, #0
 801108c:	f7ef fbee 	bl	800086c <__aeabi_ddiv>
 8011090:	ec53 2b18 	vmov	r2, r3, d8
 8011094:	f7ef f908 	bl	80002a8 <__aeabi_dsub>
 8011098:	9d00      	ldr	r5, [sp, #0]
 801109a:	ec41 0b18 	vmov	d8, r0, r1
 801109e:	4639      	mov	r1, r7
 80110a0:	4630      	mov	r0, r6
 80110a2:	f7ef fd69 	bl	8000b78 <__aeabi_d2iz>
 80110a6:	900c      	str	r0, [sp, #48]	; 0x30
 80110a8:	f7ef fa4c 	bl	8000544 <__aeabi_i2d>
 80110ac:	4602      	mov	r2, r0
 80110ae:	460b      	mov	r3, r1
 80110b0:	4630      	mov	r0, r6
 80110b2:	4639      	mov	r1, r7
 80110b4:	f7ef f8f8 	bl	80002a8 <__aeabi_dsub>
 80110b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80110ba:	3330      	adds	r3, #48	; 0x30
 80110bc:	f805 3b01 	strb.w	r3, [r5], #1
 80110c0:	ec53 2b18 	vmov	r2, r3, d8
 80110c4:	4606      	mov	r6, r0
 80110c6:	460f      	mov	r7, r1
 80110c8:	f7ef fd18 	bl	8000afc <__aeabi_dcmplt>
 80110cc:	2800      	cmp	r0, #0
 80110ce:	d165      	bne.n	801119c <_dtoa_r+0x63c>
 80110d0:	4632      	mov	r2, r6
 80110d2:	463b      	mov	r3, r7
 80110d4:	4935      	ldr	r1, [pc, #212]	; (80111ac <_dtoa_r+0x64c>)
 80110d6:	2000      	movs	r0, #0
 80110d8:	f7ef f8e6 	bl	80002a8 <__aeabi_dsub>
 80110dc:	ec53 2b18 	vmov	r2, r3, d8
 80110e0:	f7ef fd0c 	bl	8000afc <__aeabi_dcmplt>
 80110e4:	2800      	cmp	r0, #0
 80110e6:	f040 80b9 	bne.w	801125c <_dtoa_r+0x6fc>
 80110ea:	9b02      	ldr	r3, [sp, #8]
 80110ec:	429d      	cmp	r5, r3
 80110ee:	f43f af75 	beq.w	8010fdc <_dtoa_r+0x47c>
 80110f2:	4b2f      	ldr	r3, [pc, #188]	; (80111b0 <_dtoa_r+0x650>)
 80110f4:	ec51 0b18 	vmov	r0, r1, d8
 80110f8:	2200      	movs	r2, #0
 80110fa:	f7ef fa8d 	bl	8000618 <__aeabi_dmul>
 80110fe:	4b2c      	ldr	r3, [pc, #176]	; (80111b0 <_dtoa_r+0x650>)
 8011100:	ec41 0b18 	vmov	d8, r0, r1
 8011104:	2200      	movs	r2, #0
 8011106:	4630      	mov	r0, r6
 8011108:	4639      	mov	r1, r7
 801110a:	f7ef fa85 	bl	8000618 <__aeabi_dmul>
 801110e:	4606      	mov	r6, r0
 8011110:	460f      	mov	r7, r1
 8011112:	e7c4      	b.n	801109e <_dtoa_r+0x53e>
 8011114:	ec51 0b17 	vmov	r0, r1, d7
 8011118:	f7ef fa7e 	bl	8000618 <__aeabi_dmul>
 801111c:	9b02      	ldr	r3, [sp, #8]
 801111e:	9d00      	ldr	r5, [sp, #0]
 8011120:	930c      	str	r3, [sp, #48]	; 0x30
 8011122:	ec41 0b18 	vmov	d8, r0, r1
 8011126:	4639      	mov	r1, r7
 8011128:	4630      	mov	r0, r6
 801112a:	f7ef fd25 	bl	8000b78 <__aeabi_d2iz>
 801112e:	9011      	str	r0, [sp, #68]	; 0x44
 8011130:	f7ef fa08 	bl	8000544 <__aeabi_i2d>
 8011134:	4602      	mov	r2, r0
 8011136:	460b      	mov	r3, r1
 8011138:	4630      	mov	r0, r6
 801113a:	4639      	mov	r1, r7
 801113c:	f7ef f8b4 	bl	80002a8 <__aeabi_dsub>
 8011140:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011142:	3330      	adds	r3, #48	; 0x30
 8011144:	f805 3b01 	strb.w	r3, [r5], #1
 8011148:	9b02      	ldr	r3, [sp, #8]
 801114a:	429d      	cmp	r5, r3
 801114c:	4606      	mov	r6, r0
 801114e:	460f      	mov	r7, r1
 8011150:	f04f 0200 	mov.w	r2, #0
 8011154:	d134      	bne.n	80111c0 <_dtoa_r+0x660>
 8011156:	4b19      	ldr	r3, [pc, #100]	; (80111bc <_dtoa_r+0x65c>)
 8011158:	ec51 0b18 	vmov	r0, r1, d8
 801115c:	f7ef f8a6 	bl	80002ac <__adddf3>
 8011160:	4602      	mov	r2, r0
 8011162:	460b      	mov	r3, r1
 8011164:	4630      	mov	r0, r6
 8011166:	4639      	mov	r1, r7
 8011168:	f7ef fce6 	bl	8000b38 <__aeabi_dcmpgt>
 801116c:	2800      	cmp	r0, #0
 801116e:	d175      	bne.n	801125c <_dtoa_r+0x6fc>
 8011170:	ec53 2b18 	vmov	r2, r3, d8
 8011174:	4911      	ldr	r1, [pc, #68]	; (80111bc <_dtoa_r+0x65c>)
 8011176:	2000      	movs	r0, #0
 8011178:	f7ef f896 	bl	80002a8 <__aeabi_dsub>
 801117c:	4602      	mov	r2, r0
 801117e:	460b      	mov	r3, r1
 8011180:	4630      	mov	r0, r6
 8011182:	4639      	mov	r1, r7
 8011184:	f7ef fcba 	bl	8000afc <__aeabi_dcmplt>
 8011188:	2800      	cmp	r0, #0
 801118a:	f43f af27 	beq.w	8010fdc <_dtoa_r+0x47c>
 801118e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011190:	1e6b      	subs	r3, r5, #1
 8011192:	930c      	str	r3, [sp, #48]	; 0x30
 8011194:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011198:	2b30      	cmp	r3, #48	; 0x30
 801119a:	d0f8      	beq.n	801118e <_dtoa_r+0x62e>
 801119c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80111a0:	e04a      	b.n	8011238 <_dtoa_r+0x6d8>
 80111a2:	bf00      	nop
 80111a4:	08014bf0 	.word	0x08014bf0
 80111a8:	08014bc8 	.word	0x08014bc8
 80111ac:	3ff00000 	.word	0x3ff00000
 80111b0:	40240000 	.word	0x40240000
 80111b4:	401c0000 	.word	0x401c0000
 80111b8:	40140000 	.word	0x40140000
 80111bc:	3fe00000 	.word	0x3fe00000
 80111c0:	4baf      	ldr	r3, [pc, #700]	; (8011480 <_dtoa_r+0x920>)
 80111c2:	f7ef fa29 	bl	8000618 <__aeabi_dmul>
 80111c6:	4606      	mov	r6, r0
 80111c8:	460f      	mov	r7, r1
 80111ca:	e7ac      	b.n	8011126 <_dtoa_r+0x5c6>
 80111cc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80111d0:	9d00      	ldr	r5, [sp, #0]
 80111d2:	4642      	mov	r2, r8
 80111d4:	464b      	mov	r3, r9
 80111d6:	4630      	mov	r0, r6
 80111d8:	4639      	mov	r1, r7
 80111da:	f7ef fb47 	bl	800086c <__aeabi_ddiv>
 80111de:	f7ef fccb 	bl	8000b78 <__aeabi_d2iz>
 80111e2:	9002      	str	r0, [sp, #8]
 80111e4:	f7ef f9ae 	bl	8000544 <__aeabi_i2d>
 80111e8:	4642      	mov	r2, r8
 80111ea:	464b      	mov	r3, r9
 80111ec:	f7ef fa14 	bl	8000618 <__aeabi_dmul>
 80111f0:	4602      	mov	r2, r0
 80111f2:	460b      	mov	r3, r1
 80111f4:	4630      	mov	r0, r6
 80111f6:	4639      	mov	r1, r7
 80111f8:	f7ef f856 	bl	80002a8 <__aeabi_dsub>
 80111fc:	9e02      	ldr	r6, [sp, #8]
 80111fe:	9f01      	ldr	r7, [sp, #4]
 8011200:	3630      	adds	r6, #48	; 0x30
 8011202:	f805 6b01 	strb.w	r6, [r5], #1
 8011206:	9e00      	ldr	r6, [sp, #0]
 8011208:	1bae      	subs	r6, r5, r6
 801120a:	42b7      	cmp	r7, r6
 801120c:	4602      	mov	r2, r0
 801120e:	460b      	mov	r3, r1
 8011210:	d137      	bne.n	8011282 <_dtoa_r+0x722>
 8011212:	f7ef f84b 	bl	80002ac <__adddf3>
 8011216:	4642      	mov	r2, r8
 8011218:	464b      	mov	r3, r9
 801121a:	4606      	mov	r6, r0
 801121c:	460f      	mov	r7, r1
 801121e:	f7ef fc8b 	bl	8000b38 <__aeabi_dcmpgt>
 8011222:	b9c8      	cbnz	r0, 8011258 <_dtoa_r+0x6f8>
 8011224:	4642      	mov	r2, r8
 8011226:	464b      	mov	r3, r9
 8011228:	4630      	mov	r0, r6
 801122a:	4639      	mov	r1, r7
 801122c:	f7ef fc5c 	bl	8000ae8 <__aeabi_dcmpeq>
 8011230:	b110      	cbz	r0, 8011238 <_dtoa_r+0x6d8>
 8011232:	9b02      	ldr	r3, [sp, #8]
 8011234:	07d9      	lsls	r1, r3, #31
 8011236:	d40f      	bmi.n	8011258 <_dtoa_r+0x6f8>
 8011238:	4620      	mov	r0, r4
 801123a:	4659      	mov	r1, fp
 801123c:	f000 ff98 	bl	8012170 <_Bfree>
 8011240:	2300      	movs	r3, #0
 8011242:	702b      	strb	r3, [r5, #0]
 8011244:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011246:	f10a 0001 	add.w	r0, sl, #1
 801124a:	6018      	str	r0, [r3, #0]
 801124c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801124e:	2b00      	cmp	r3, #0
 8011250:	f43f acd8 	beq.w	8010c04 <_dtoa_r+0xa4>
 8011254:	601d      	str	r5, [r3, #0]
 8011256:	e4d5      	b.n	8010c04 <_dtoa_r+0xa4>
 8011258:	f8cd a01c 	str.w	sl, [sp, #28]
 801125c:	462b      	mov	r3, r5
 801125e:	461d      	mov	r5, r3
 8011260:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011264:	2a39      	cmp	r2, #57	; 0x39
 8011266:	d108      	bne.n	801127a <_dtoa_r+0x71a>
 8011268:	9a00      	ldr	r2, [sp, #0]
 801126a:	429a      	cmp	r2, r3
 801126c:	d1f7      	bne.n	801125e <_dtoa_r+0x6fe>
 801126e:	9a07      	ldr	r2, [sp, #28]
 8011270:	9900      	ldr	r1, [sp, #0]
 8011272:	3201      	adds	r2, #1
 8011274:	9207      	str	r2, [sp, #28]
 8011276:	2230      	movs	r2, #48	; 0x30
 8011278:	700a      	strb	r2, [r1, #0]
 801127a:	781a      	ldrb	r2, [r3, #0]
 801127c:	3201      	adds	r2, #1
 801127e:	701a      	strb	r2, [r3, #0]
 8011280:	e78c      	b.n	801119c <_dtoa_r+0x63c>
 8011282:	4b7f      	ldr	r3, [pc, #508]	; (8011480 <_dtoa_r+0x920>)
 8011284:	2200      	movs	r2, #0
 8011286:	f7ef f9c7 	bl	8000618 <__aeabi_dmul>
 801128a:	2200      	movs	r2, #0
 801128c:	2300      	movs	r3, #0
 801128e:	4606      	mov	r6, r0
 8011290:	460f      	mov	r7, r1
 8011292:	f7ef fc29 	bl	8000ae8 <__aeabi_dcmpeq>
 8011296:	2800      	cmp	r0, #0
 8011298:	d09b      	beq.n	80111d2 <_dtoa_r+0x672>
 801129a:	e7cd      	b.n	8011238 <_dtoa_r+0x6d8>
 801129c:	9a08      	ldr	r2, [sp, #32]
 801129e:	2a00      	cmp	r2, #0
 80112a0:	f000 80c4 	beq.w	801142c <_dtoa_r+0x8cc>
 80112a4:	9a05      	ldr	r2, [sp, #20]
 80112a6:	2a01      	cmp	r2, #1
 80112a8:	f300 80a8 	bgt.w	80113fc <_dtoa_r+0x89c>
 80112ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80112ae:	2a00      	cmp	r2, #0
 80112b0:	f000 80a0 	beq.w	80113f4 <_dtoa_r+0x894>
 80112b4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80112b8:	9e06      	ldr	r6, [sp, #24]
 80112ba:	4645      	mov	r5, r8
 80112bc:	9a04      	ldr	r2, [sp, #16]
 80112be:	2101      	movs	r1, #1
 80112c0:	441a      	add	r2, r3
 80112c2:	4620      	mov	r0, r4
 80112c4:	4498      	add	r8, r3
 80112c6:	9204      	str	r2, [sp, #16]
 80112c8:	f001 f858 	bl	801237c <__i2b>
 80112cc:	4607      	mov	r7, r0
 80112ce:	2d00      	cmp	r5, #0
 80112d0:	dd0b      	ble.n	80112ea <_dtoa_r+0x78a>
 80112d2:	9b04      	ldr	r3, [sp, #16]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	dd08      	ble.n	80112ea <_dtoa_r+0x78a>
 80112d8:	42ab      	cmp	r3, r5
 80112da:	9a04      	ldr	r2, [sp, #16]
 80112dc:	bfa8      	it	ge
 80112de:	462b      	movge	r3, r5
 80112e0:	eba8 0803 	sub.w	r8, r8, r3
 80112e4:	1aed      	subs	r5, r5, r3
 80112e6:	1ad3      	subs	r3, r2, r3
 80112e8:	9304      	str	r3, [sp, #16]
 80112ea:	9b06      	ldr	r3, [sp, #24]
 80112ec:	b1fb      	cbz	r3, 801132e <_dtoa_r+0x7ce>
 80112ee:	9b08      	ldr	r3, [sp, #32]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	f000 809f 	beq.w	8011434 <_dtoa_r+0x8d4>
 80112f6:	2e00      	cmp	r6, #0
 80112f8:	dd11      	ble.n	801131e <_dtoa_r+0x7be>
 80112fa:	4639      	mov	r1, r7
 80112fc:	4632      	mov	r2, r6
 80112fe:	4620      	mov	r0, r4
 8011300:	f001 f8f8 	bl	80124f4 <__pow5mult>
 8011304:	465a      	mov	r2, fp
 8011306:	4601      	mov	r1, r0
 8011308:	4607      	mov	r7, r0
 801130a:	4620      	mov	r0, r4
 801130c:	f001 f84c 	bl	80123a8 <__multiply>
 8011310:	4659      	mov	r1, fp
 8011312:	9007      	str	r0, [sp, #28]
 8011314:	4620      	mov	r0, r4
 8011316:	f000 ff2b 	bl	8012170 <_Bfree>
 801131a:	9b07      	ldr	r3, [sp, #28]
 801131c:	469b      	mov	fp, r3
 801131e:	9b06      	ldr	r3, [sp, #24]
 8011320:	1b9a      	subs	r2, r3, r6
 8011322:	d004      	beq.n	801132e <_dtoa_r+0x7ce>
 8011324:	4659      	mov	r1, fp
 8011326:	4620      	mov	r0, r4
 8011328:	f001 f8e4 	bl	80124f4 <__pow5mult>
 801132c:	4683      	mov	fp, r0
 801132e:	2101      	movs	r1, #1
 8011330:	4620      	mov	r0, r4
 8011332:	f001 f823 	bl	801237c <__i2b>
 8011336:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011338:	2b00      	cmp	r3, #0
 801133a:	4606      	mov	r6, r0
 801133c:	dd7c      	ble.n	8011438 <_dtoa_r+0x8d8>
 801133e:	461a      	mov	r2, r3
 8011340:	4601      	mov	r1, r0
 8011342:	4620      	mov	r0, r4
 8011344:	f001 f8d6 	bl	80124f4 <__pow5mult>
 8011348:	9b05      	ldr	r3, [sp, #20]
 801134a:	2b01      	cmp	r3, #1
 801134c:	4606      	mov	r6, r0
 801134e:	dd76      	ble.n	801143e <_dtoa_r+0x8de>
 8011350:	2300      	movs	r3, #0
 8011352:	9306      	str	r3, [sp, #24]
 8011354:	6933      	ldr	r3, [r6, #16]
 8011356:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801135a:	6918      	ldr	r0, [r3, #16]
 801135c:	f000 ffbe 	bl	80122dc <__hi0bits>
 8011360:	f1c0 0020 	rsb	r0, r0, #32
 8011364:	9b04      	ldr	r3, [sp, #16]
 8011366:	4418      	add	r0, r3
 8011368:	f010 001f 	ands.w	r0, r0, #31
 801136c:	f000 8086 	beq.w	801147c <_dtoa_r+0x91c>
 8011370:	f1c0 0320 	rsb	r3, r0, #32
 8011374:	2b04      	cmp	r3, #4
 8011376:	dd7f      	ble.n	8011478 <_dtoa_r+0x918>
 8011378:	f1c0 001c 	rsb	r0, r0, #28
 801137c:	9b04      	ldr	r3, [sp, #16]
 801137e:	4403      	add	r3, r0
 8011380:	4480      	add	r8, r0
 8011382:	4405      	add	r5, r0
 8011384:	9304      	str	r3, [sp, #16]
 8011386:	f1b8 0f00 	cmp.w	r8, #0
 801138a:	dd05      	ble.n	8011398 <_dtoa_r+0x838>
 801138c:	4659      	mov	r1, fp
 801138e:	4642      	mov	r2, r8
 8011390:	4620      	mov	r0, r4
 8011392:	f001 f909 	bl	80125a8 <__lshift>
 8011396:	4683      	mov	fp, r0
 8011398:	9b04      	ldr	r3, [sp, #16]
 801139a:	2b00      	cmp	r3, #0
 801139c:	dd05      	ble.n	80113aa <_dtoa_r+0x84a>
 801139e:	4631      	mov	r1, r6
 80113a0:	461a      	mov	r2, r3
 80113a2:	4620      	mov	r0, r4
 80113a4:	f001 f900 	bl	80125a8 <__lshift>
 80113a8:	4606      	mov	r6, r0
 80113aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d069      	beq.n	8011484 <_dtoa_r+0x924>
 80113b0:	4631      	mov	r1, r6
 80113b2:	4658      	mov	r0, fp
 80113b4:	f001 f964 	bl	8012680 <__mcmp>
 80113b8:	2800      	cmp	r0, #0
 80113ba:	da63      	bge.n	8011484 <_dtoa_r+0x924>
 80113bc:	2300      	movs	r3, #0
 80113be:	4659      	mov	r1, fp
 80113c0:	220a      	movs	r2, #10
 80113c2:	4620      	mov	r0, r4
 80113c4:	f000 fef6 	bl	80121b4 <__multadd>
 80113c8:	9b08      	ldr	r3, [sp, #32]
 80113ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80113ce:	4683      	mov	fp, r0
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	f000 818f 	beq.w	80116f4 <_dtoa_r+0xb94>
 80113d6:	4639      	mov	r1, r7
 80113d8:	2300      	movs	r3, #0
 80113da:	220a      	movs	r2, #10
 80113dc:	4620      	mov	r0, r4
 80113de:	f000 fee9 	bl	80121b4 <__multadd>
 80113e2:	f1b9 0f00 	cmp.w	r9, #0
 80113e6:	4607      	mov	r7, r0
 80113e8:	f300 808e 	bgt.w	8011508 <_dtoa_r+0x9a8>
 80113ec:	9b05      	ldr	r3, [sp, #20]
 80113ee:	2b02      	cmp	r3, #2
 80113f0:	dc50      	bgt.n	8011494 <_dtoa_r+0x934>
 80113f2:	e089      	b.n	8011508 <_dtoa_r+0x9a8>
 80113f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80113f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80113fa:	e75d      	b.n	80112b8 <_dtoa_r+0x758>
 80113fc:	9b01      	ldr	r3, [sp, #4]
 80113fe:	1e5e      	subs	r6, r3, #1
 8011400:	9b06      	ldr	r3, [sp, #24]
 8011402:	42b3      	cmp	r3, r6
 8011404:	bfbf      	itttt	lt
 8011406:	9b06      	ldrlt	r3, [sp, #24]
 8011408:	9606      	strlt	r6, [sp, #24]
 801140a:	1af2      	sublt	r2, r6, r3
 801140c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801140e:	bfb6      	itet	lt
 8011410:	189b      	addlt	r3, r3, r2
 8011412:	1b9e      	subge	r6, r3, r6
 8011414:	930d      	strlt	r3, [sp, #52]	; 0x34
 8011416:	9b01      	ldr	r3, [sp, #4]
 8011418:	bfb8      	it	lt
 801141a:	2600      	movlt	r6, #0
 801141c:	2b00      	cmp	r3, #0
 801141e:	bfb5      	itete	lt
 8011420:	eba8 0503 	sublt.w	r5, r8, r3
 8011424:	9b01      	ldrge	r3, [sp, #4]
 8011426:	2300      	movlt	r3, #0
 8011428:	4645      	movge	r5, r8
 801142a:	e747      	b.n	80112bc <_dtoa_r+0x75c>
 801142c:	9e06      	ldr	r6, [sp, #24]
 801142e:	9f08      	ldr	r7, [sp, #32]
 8011430:	4645      	mov	r5, r8
 8011432:	e74c      	b.n	80112ce <_dtoa_r+0x76e>
 8011434:	9a06      	ldr	r2, [sp, #24]
 8011436:	e775      	b.n	8011324 <_dtoa_r+0x7c4>
 8011438:	9b05      	ldr	r3, [sp, #20]
 801143a:	2b01      	cmp	r3, #1
 801143c:	dc18      	bgt.n	8011470 <_dtoa_r+0x910>
 801143e:	9b02      	ldr	r3, [sp, #8]
 8011440:	b9b3      	cbnz	r3, 8011470 <_dtoa_r+0x910>
 8011442:	9b03      	ldr	r3, [sp, #12]
 8011444:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011448:	b9a3      	cbnz	r3, 8011474 <_dtoa_r+0x914>
 801144a:	9b03      	ldr	r3, [sp, #12]
 801144c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011450:	0d1b      	lsrs	r3, r3, #20
 8011452:	051b      	lsls	r3, r3, #20
 8011454:	b12b      	cbz	r3, 8011462 <_dtoa_r+0x902>
 8011456:	9b04      	ldr	r3, [sp, #16]
 8011458:	3301      	adds	r3, #1
 801145a:	9304      	str	r3, [sp, #16]
 801145c:	f108 0801 	add.w	r8, r8, #1
 8011460:	2301      	movs	r3, #1
 8011462:	9306      	str	r3, [sp, #24]
 8011464:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011466:	2b00      	cmp	r3, #0
 8011468:	f47f af74 	bne.w	8011354 <_dtoa_r+0x7f4>
 801146c:	2001      	movs	r0, #1
 801146e:	e779      	b.n	8011364 <_dtoa_r+0x804>
 8011470:	2300      	movs	r3, #0
 8011472:	e7f6      	b.n	8011462 <_dtoa_r+0x902>
 8011474:	9b02      	ldr	r3, [sp, #8]
 8011476:	e7f4      	b.n	8011462 <_dtoa_r+0x902>
 8011478:	d085      	beq.n	8011386 <_dtoa_r+0x826>
 801147a:	4618      	mov	r0, r3
 801147c:	301c      	adds	r0, #28
 801147e:	e77d      	b.n	801137c <_dtoa_r+0x81c>
 8011480:	40240000 	.word	0x40240000
 8011484:	9b01      	ldr	r3, [sp, #4]
 8011486:	2b00      	cmp	r3, #0
 8011488:	dc38      	bgt.n	80114fc <_dtoa_r+0x99c>
 801148a:	9b05      	ldr	r3, [sp, #20]
 801148c:	2b02      	cmp	r3, #2
 801148e:	dd35      	ble.n	80114fc <_dtoa_r+0x99c>
 8011490:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011494:	f1b9 0f00 	cmp.w	r9, #0
 8011498:	d10d      	bne.n	80114b6 <_dtoa_r+0x956>
 801149a:	4631      	mov	r1, r6
 801149c:	464b      	mov	r3, r9
 801149e:	2205      	movs	r2, #5
 80114a0:	4620      	mov	r0, r4
 80114a2:	f000 fe87 	bl	80121b4 <__multadd>
 80114a6:	4601      	mov	r1, r0
 80114a8:	4606      	mov	r6, r0
 80114aa:	4658      	mov	r0, fp
 80114ac:	f001 f8e8 	bl	8012680 <__mcmp>
 80114b0:	2800      	cmp	r0, #0
 80114b2:	f73f adbd 	bgt.w	8011030 <_dtoa_r+0x4d0>
 80114b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114b8:	9d00      	ldr	r5, [sp, #0]
 80114ba:	ea6f 0a03 	mvn.w	sl, r3
 80114be:	f04f 0800 	mov.w	r8, #0
 80114c2:	4631      	mov	r1, r6
 80114c4:	4620      	mov	r0, r4
 80114c6:	f000 fe53 	bl	8012170 <_Bfree>
 80114ca:	2f00      	cmp	r7, #0
 80114cc:	f43f aeb4 	beq.w	8011238 <_dtoa_r+0x6d8>
 80114d0:	f1b8 0f00 	cmp.w	r8, #0
 80114d4:	d005      	beq.n	80114e2 <_dtoa_r+0x982>
 80114d6:	45b8      	cmp	r8, r7
 80114d8:	d003      	beq.n	80114e2 <_dtoa_r+0x982>
 80114da:	4641      	mov	r1, r8
 80114dc:	4620      	mov	r0, r4
 80114de:	f000 fe47 	bl	8012170 <_Bfree>
 80114e2:	4639      	mov	r1, r7
 80114e4:	4620      	mov	r0, r4
 80114e6:	f000 fe43 	bl	8012170 <_Bfree>
 80114ea:	e6a5      	b.n	8011238 <_dtoa_r+0x6d8>
 80114ec:	2600      	movs	r6, #0
 80114ee:	4637      	mov	r7, r6
 80114f0:	e7e1      	b.n	80114b6 <_dtoa_r+0x956>
 80114f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80114f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80114f8:	4637      	mov	r7, r6
 80114fa:	e599      	b.n	8011030 <_dtoa_r+0x4d0>
 80114fc:	9b08      	ldr	r3, [sp, #32]
 80114fe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011502:	2b00      	cmp	r3, #0
 8011504:	f000 80fd 	beq.w	8011702 <_dtoa_r+0xba2>
 8011508:	2d00      	cmp	r5, #0
 801150a:	dd05      	ble.n	8011518 <_dtoa_r+0x9b8>
 801150c:	4639      	mov	r1, r7
 801150e:	462a      	mov	r2, r5
 8011510:	4620      	mov	r0, r4
 8011512:	f001 f849 	bl	80125a8 <__lshift>
 8011516:	4607      	mov	r7, r0
 8011518:	9b06      	ldr	r3, [sp, #24]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d05c      	beq.n	80115d8 <_dtoa_r+0xa78>
 801151e:	6879      	ldr	r1, [r7, #4]
 8011520:	4620      	mov	r0, r4
 8011522:	f000 fde5 	bl	80120f0 <_Balloc>
 8011526:	4605      	mov	r5, r0
 8011528:	b928      	cbnz	r0, 8011536 <_dtoa_r+0x9d6>
 801152a:	4b80      	ldr	r3, [pc, #512]	; (801172c <_dtoa_r+0xbcc>)
 801152c:	4602      	mov	r2, r0
 801152e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011532:	f7ff bb2e 	b.w	8010b92 <_dtoa_r+0x32>
 8011536:	693a      	ldr	r2, [r7, #16]
 8011538:	3202      	adds	r2, #2
 801153a:	0092      	lsls	r2, r2, #2
 801153c:	f107 010c 	add.w	r1, r7, #12
 8011540:	300c      	adds	r0, #12
 8011542:	f7fd f905 	bl	800e750 <memcpy>
 8011546:	2201      	movs	r2, #1
 8011548:	4629      	mov	r1, r5
 801154a:	4620      	mov	r0, r4
 801154c:	f001 f82c 	bl	80125a8 <__lshift>
 8011550:	9b00      	ldr	r3, [sp, #0]
 8011552:	3301      	adds	r3, #1
 8011554:	9301      	str	r3, [sp, #4]
 8011556:	9b00      	ldr	r3, [sp, #0]
 8011558:	444b      	add	r3, r9
 801155a:	9307      	str	r3, [sp, #28]
 801155c:	9b02      	ldr	r3, [sp, #8]
 801155e:	f003 0301 	and.w	r3, r3, #1
 8011562:	46b8      	mov	r8, r7
 8011564:	9306      	str	r3, [sp, #24]
 8011566:	4607      	mov	r7, r0
 8011568:	9b01      	ldr	r3, [sp, #4]
 801156a:	4631      	mov	r1, r6
 801156c:	3b01      	subs	r3, #1
 801156e:	4658      	mov	r0, fp
 8011570:	9302      	str	r3, [sp, #8]
 8011572:	f7ff fa69 	bl	8010a48 <quorem>
 8011576:	4603      	mov	r3, r0
 8011578:	3330      	adds	r3, #48	; 0x30
 801157a:	9004      	str	r0, [sp, #16]
 801157c:	4641      	mov	r1, r8
 801157e:	4658      	mov	r0, fp
 8011580:	9308      	str	r3, [sp, #32]
 8011582:	f001 f87d 	bl	8012680 <__mcmp>
 8011586:	463a      	mov	r2, r7
 8011588:	4681      	mov	r9, r0
 801158a:	4631      	mov	r1, r6
 801158c:	4620      	mov	r0, r4
 801158e:	f001 f893 	bl	80126b8 <__mdiff>
 8011592:	68c2      	ldr	r2, [r0, #12]
 8011594:	9b08      	ldr	r3, [sp, #32]
 8011596:	4605      	mov	r5, r0
 8011598:	bb02      	cbnz	r2, 80115dc <_dtoa_r+0xa7c>
 801159a:	4601      	mov	r1, r0
 801159c:	4658      	mov	r0, fp
 801159e:	f001 f86f 	bl	8012680 <__mcmp>
 80115a2:	9b08      	ldr	r3, [sp, #32]
 80115a4:	4602      	mov	r2, r0
 80115a6:	4629      	mov	r1, r5
 80115a8:	4620      	mov	r0, r4
 80115aa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80115ae:	f000 fddf 	bl	8012170 <_Bfree>
 80115b2:	9b05      	ldr	r3, [sp, #20]
 80115b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80115b6:	9d01      	ldr	r5, [sp, #4]
 80115b8:	ea43 0102 	orr.w	r1, r3, r2
 80115bc:	9b06      	ldr	r3, [sp, #24]
 80115be:	430b      	orrs	r3, r1
 80115c0:	9b08      	ldr	r3, [sp, #32]
 80115c2:	d10d      	bne.n	80115e0 <_dtoa_r+0xa80>
 80115c4:	2b39      	cmp	r3, #57	; 0x39
 80115c6:	d029      	beq.n	801161c <_dtoa_r+0xabc>
 80115c8:	f1b9 0f00 	cmp.w	r9, #0
 80115cc:	dd01      	ble.n	80115d2 <_dtoa_r+0xa72>
 80115ce:	9b04      	ldr	r3, [sp, #16]
 80115d0:	3331      	adds	r3, #49	; 0x31
 80115d2:	9a02      	ldr	r2, [sp, #8]
 80115d4:	7013      	strb	r3, [r2, #0]
 80115d6:	e774      	b.n	80114c2 <_dtoa_r+0x962>
 80115d8:	4638      	mov	r0, r7
 80115da:	e7b9      	b.n	8011550 <_dtoa_r+0x9f0>
 80115dc:	2201      	movs	r2, #1
 80115de:	e7e2      	b.n	80115a6 <_dtoa_r+0xa46>
 80115e0:	f1b9 0f00 	cmp.w	r9, #0
 80115e4:	db06      	blt.n	80115f4 <_dtoa_r+0xa94>
 80115e6:	9905      	ldr	r1, [sp, #20]
 80115e8:	ea41 0909 	orr.w	r9, r1, r9
 80115ec:	9906      	ldr	r1, [sp, #24]
 80115ee:	ea59 0101 	orrs.w	r1, r9, r1
 80115f2:	d120      	bne.n	8011636 <_dtoa_r+0xad6>
 80115f4:	2a00      	cmp	r2, #0
 80115f6:	ddec      	ble.n	80115d2 <_dtoa_r+0xa72>
 80115f8:	4659      	mov	r1, fp
 80115fa:	2201      	movs	r2, #1
 80115fc:	4620      	mov	r0, r4
 80115fe:	9301      	str	r3, [sp, #4]
 8011600:	f000 ffd2 	bl	80125a8 <__lshift>
 8011604:	4631      	mov	r1, r6
 8011606:	4683      	mov	fp, r0
 8011608:	f001 f83a 	bl	8012680 <__mcmp>
 801160c:	2800      	cmp	r0, #0
 801160e:	9b01      	ldr	r3, [sp, #4]
 8011610:	dc02      	bgt.n	8011618 <_dtoa_r+0xab8>
 8011612:	d1de      	bne.n	80115d2 <_dtoa_r+0xa72>
 8011614:	07da      	lsls	r2, r3, #31
 8011616:	d5dc      	bpl.n	80115d2 <_dtoa_r+0xa72>
 8011618:	2b39      	cmp	r3, #57	; 0x39
 801161a:	d1d8      	bne.n	80115ce <_dtoa_r+0xa6e>
 801161c:	9a02      	ldr	r2, [sp, #8]
 801161e:	2339      	movs	r3, #57	; 0x39
 8011620:	7013      	strb	r3, [r2, #0]
 8011622:	462b      	mov	r3, r5
 8011624:	461d      	mov	r5, r3
 8011626:	3b01      	subs	r3, #1
 8011628:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801162c:	2a39      	cmp	r2, #57	; 0x39
 801162e:	d050      	beq.n	80116d2 <_dtoa_r+0xb72>
 8011630:	3201      	adds	r2, #1
 8011632:	701a      	strb	r2, [r3, #0]
 8011634:	e745      	b.n	80114c2 <_dtoa_r+0x962>
 8011636:	2a00      	cmp	r2, #0
 8011638:	dd03      	ble.n	8011642 <_dtoa_r+0xae2>
 801163a:	2b39      	cmp	r3, #57	; 0x39
 801163c:	d0ee      	beq.n	801161c <_dtoa_r+0xabc>
 801163e:	3301      	adds	r3, #1
 8011640:	e7c7      	b.n	80115d2 <_dtoa_r+0xa72>
 8011642:	9a01      	ldr	r2, [sp, #4]
 8011644:	9907      	ldr	r1, [sp, #28]
 8011646:	f802 3c01 	strb.w	r3, [r2, #-1]
 801164a:	428a      	cmp	r2, r1
 801164c:	d02a      	beq.n	80116a4 <_dtoa_r+0xb44>
 801164e:	4659      	mov	r1, fp
 8011650:	2300      	movs	r3, #0
 8011652:	220a      	movs	r2, #10
 8011654:	4620      	mov	r0, r4
 8011656:	f000 fdad 	bl	80121b4 <__multadd>
 801165a:	45b8      	cmp	r8, r7
 801165c:	4683      	mov	fp, r0
 801165e:	f04f 0300 	mov.w	r3, #0
 8011662:	f04f 020a 	mov.w	r2, #10
 8011666:	4641      	mov	r1, r8
 8011668:	4620      	mov	r0, r4
 801166a:	d107      	bne.n	801167c <_dtoa_r+0xb1c>
 801166c:	f000 fda2 	bl	80121b4 <__multadd>
 8011670:	4680      	mov	r8, r0
 8011672:	4607      	mov	r7, r0
 8011674:	9b01      	ldr	r3, [sp, #4]
 8011676:	3301      	adds	r3, #1
 8011678:	9301      	str	r3, [sp, #4]
 801167a:	e775      	b.n	8011568 <_dtoa_r+0xa08>
 801167c:	f000 fd9a 	bl	80121b4 <__multadd>
 8011680:	4639      	mov	r1, r7
 8011682:	4680      	mov	r8, r0
 8011684:	2300      	movs	r3, #0
 8011686:	220a      	movs	r2, #10
 8011688:	4620      	mov	r0, r4
 801168a:	f000 fd93 	bl	80121b4 <__multadd>
 801168e:	4607      	mov	r7, r0
 8011690:	e7f0      	b.n	8011674 <_dtoa_r+0xb14>
 8011692:	f1b9 0f00 	cmp.w	r9, #0
 8011696:	9a00      	ldr	r2, [sp, #0]
 8011698:	bfcc      	ite	gt
 801169a:	464d      	movgt	r5, r9
 801169c:	2501      	movle	r5, #1
 801169e:	4415      	add	r5, r2
 80116a0:	f04f 0800 	mov.w	r8, #0
 80116a4:	4659      	mov	r1, fp
 80116a6:	2201      	movs	r2, #1
 80116a8:	4620      	mov	r0, r4
 80116aa:	9301      	str	r3, [sp, #4]
 80116ac:	f000 ff7c 	bl	80125a8 <__lshift>
 80116b0:	4631      	mov	r1, r6
 80116b2:	4683      	mov	fp, r0
 80116b4:	f000 ffe4 	bl	8012680 <__mcmp>
 80116b8:	2800      	cmp	r0, #0
 80116ba:	dcb2      	bgt.n	8011622 <_dtoa_r+0xac2>
 80116bc:	d102      	bne.n	80116c4 <_dtoa_r+0xb64>
 80116be:	9b01      	ldr	r3, [sp, #4]
 80116c0:	07db      	lsls	r3, r3, #31
 80116c2:	d4ae      	bmi.n	8011622 <_dtoa_r+0xac2>
 80116c4:	462b      	mov	r3, r5
 80116c6:	461d      	mov	r5, r3
 80116c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80116cc:	2a30      	cmp	r2, #48	; 0x30
 80116ce:	d0fa      	beq.n	80116c6 <_dtoa_r+0xb66>
 80116d0:	e6f7      	b.n	80114c2 <_dtoa_r+0x962>
 80116d2:	9a00      	ldr	r2, [sp, #0]
 80116d4:	429a      	cmp	r2, r3
 80116d6:	d1a5      	bne.n	8011624 <_dtoa_r+0xac4>
 80116d8:	f10a 0a01 	add.w	sl, sl, #1
 80116dc:	2331      	movs	r3, #49	; 0x31
 80116de:	e779      	b.n	80115d4 <_dtoa_r+0xa74>
 80116e0:	4b13      	ldr	r3, [pc, #76]	; (8011730 <_dtoa_r+0xbd0>)
 80116e2:	f7ff baaf 	b.w	8010c44 <_dtoa_r+0xe4>
 80116e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	f47f aa86 	bne.w	8010bfa <_dtoa_r+0x9a>
 80116ee:	4b11      	ldr	r3, [pc, #68]	; (8011734 <_dtoa_r+0xbd4>)
 80116f0:	f7ff baa8 	b.w	8010c44 <_dtoa_r+0xe4>
 80116f4:	f1b9 0f00 	cmp.w	r9, #0
 80116f8:	dc03      	bgt.n	8011702 <_dtoa_r+0xba2>
 80116fa:	9b05      	ldr	r3, [sp, #20]
 80116fc:	2b02      	cmp	r3, #2
 80116fe:	f73f aec9 	bgt.w	8011494 <_dtoa_r+0x934>
 8011702:	9d00      	ldr	r5, [sp, #0]
 8011704:	4631      	mov	r1, r6
 8011706:	4658      	mov	r0, fp
 8011708:	f7ff f99e 	bl	8010a48 <quorem>
 801170c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011710:	f805 3b01 	strb.w	r3, [r5], #1
 8011714:	9a00      	ldr	r2, [sp, #0]
 8011716:	1aaa      	subs	r2, r5, r2
 8011718:	4591      	cmp	r9, r2
 801171a:	ddba      	ble.n	8011692 <_dtoa_r+0xb32>
 801171c:	4659      	mov	r1, fp
 801171e:	2300      	movs	r3, #0
 8011720:	220a      	movs	r2, #10
 8011722:	4620      	mov	r0, r4
 8011724:	f000 fd46 	bl	80121b4 <__multadd>
 8011728:	4683      	mov	fp, r0
 801172a:	e7eb      	b.n	8011704 <_dtoa_r+0xba4>
 801172c:	08014ad7 	.word	0x08014ad7
 8011730:	08014cd9 	.word	0x08014cd9
 8011734:	08014a54 	.word	0x08014a54

08011738 <__sflush_r>:
 8011738:	898a      	ldrh	r2, [r1, #12]
 801173a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801173e:	4605      	mov	r5, r0
 8011740:	0710      	lsls	r0, r2, #28
 8011742:	460c      	mov	r4, r1
 8011744:	d458      	bmi.n	80117f8 <__sflush_r+0xc0>
 8011746:	684b      	ldr	r3, [r1, #4]
 8011748:	2b00      	cmp	r3, #0
 801174a:	dc05      	bgt.n	8011758 <__sflush_r+0x20>
 801174c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801174e:	2b00      	cmp	r3, #0
 8011750:	dc02      	bgt.n	8011758 <__sflush_r+0x20>
 8011752:	2000      	movs	r0, #0
 8011754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011758:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801175a:	2e00      	cmp	r6, #0
 801175c:	d0f9      	beq.n	8011752 <__sflush_r+0x1a>
 801175e:	2300      	movs	r3, #0
 8011760:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011764:	682f      	ldr	r7, [r5, #0]
 8011766:	602b      	str	r3, [r5, #0]
 8011768:	d032      	beq.n	80117d0 <__sflush_r+0x98>
 801176a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801176c:	89a3      	ldrh	r3, [r4, #12]
 801176e:	075a      	lsls	r2, r3, #29
 8011770:	d505      	bpl.n	801177e <__sflush_r+0x46>
 8011772:	6863      	ldr	r3, [r4, #4]
 8011774:	1ac0      	subs	r0, r0, r3
 8011776:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011778:	b10b      	cbz	r3, 801177e <__sflush_r+0x46>
 801177a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801177c:	1ac0      	subs	r0, r0, r3
 801177e:	2300      	movs	r3, #0
 8011780:	4602      	mov	r2, r0
 8011782:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011784:	6a21      	ldr	r1, [r4, #32]
 8011786:	4628      	mov	r0, r5
 8011788:	47b0      	blx	r6
 801178a:	1c43      	adds	r3, r0, #1
 801178c:	89a3      	ldrh	r3, [r4, #12]
 801178e:	d106      	bne.n	801179e <__sflush_r+0x66>
 8011790:	6829      	ldr	r1, [r5, #0]
 8011792:	291d      	cmp	r1, #29
 8011794:	d82c      	bhi.n	80117f0 <__sflush_r+0xb8>
 8011796:	4a2a      	ldr	r2, [pc, #168]	; (8011840 <__sflush_r+0x108>)
 8011798:	40ca      	lsrs	r2, r1
 801179a:	07d6      	lsls	r6, r2, #31
 801179c:	d528      	bpl.n	80117f0 <__sflush_r+0xb8>
 801179e:	2200      	movs	r2, #0
 80117a0:	6062      	str	r2, [r4, #4]
 80117a2:	04d9      	lsls	r1, r3, #19
 80117a4:	6922      	ldr	r2, [r4, #16]
 80117a6:	6022      	str	r2, [r4, #0]
 80117a8:	d504      	bpl.n	80117b4 <__sflush_r+0x7c>
 80117aa:	1c42      	adds	r2, r0, #1
 80117ac:	d101      	bne.n	80117b2 <__sflush_r+0x7a>
 80117ae:	682b      	ldr	r3, [r5, #0]
 80117b0:	b903      	cbnz	r3, 80117b4 <__sflush_r+0x7c>
 80117b2:	6560      	str	r0, [r4, #84]	; 0x54
 80117b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80117b6:	602f      	str	r7, [r5, #0]
 80117b8:	2900      	cmp	r1, #0
 80117ba:	d0ca      	beq.n	8011752 <__sflush_r+0x1a>
 80117bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80117c0:	4299      	cmp	r1, r3
 80117c2:	d002      	beq.n	80117ca <__sflush_r+0x92>
 80117c4:	4628      	mov	r0, r5
 80117c6:	f7fc fff3 	bl	800e7b0 <_free_r>
 80117ca:	2000      	movs	r0, #0
 80117cc:	6360      	str	r0, [r4, #52]	; 0x34
 80117ce:	e7c1      	b.n	8011754 <__sflush_r+0x1c>
 80117d0:	6a21      	ldr	r1, [r4, #32]
 80117d2:	2301      	movs	r3, #1
 80117d4:	4628      	mov	r0, r5
 80117d6:	47b0      	blx	r6
 80117d8:	1c41      	adds	r1, r0, #1
 80117da:	d1c7      	bne.n	801176c <__sflush_r+0x34>
 80117dc:	682b      	ldr	r3, [r5, #0]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d0c4      	beq.n	801176c <__sflush_r+0x34>
 80117e2:	2b1d      	cmp	r3, #29
 80117e4:	d001      	beq.n	80117ea <__sflush_r+0xb2>
 80117e6:	2b16      	cmp	r3, #22
 80117e8:	d101      	bne.n	80117ee <__sflush_r+0xb6>
 80117ea:	602f      	str	r7, [r5, #0]
 80117ec:	e7b1      	b.n	8011752 <__sflush_r+0x1a>
 80117ee:	89a3      	ldrh	r3, [r4, #12]
 80117f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80117f4:	81a3      	strh	r3, [r4, #12]
 80117f6:	e7ad      	b.n	8011754 <__sflush_r+0x1c>
 80117f8:	690f      	ldr	r7, [r1, #16]
 80117fa:	2f00      	cmp	r7, #0
 80117fc:	d0a9      	beq.n	8011752 <__sflush_r+0x1a>
 80117fe:	0793      	lsls	r3, r2, #30
 8011800:	680e      	ldr	r6, [r1, #0]
 8011802:	bf08      	it	eq
 8011804:	694b      	ldreq	r3, [r1, #20]
 8011806:	600f      	str	r7, [r1, #0]
 8011808:	bf18      	it	ne
 801180a:	2300      	movne	r3, #0
 801180c:	eba6 0807 	sub.w	r8, r6, r7
 8011810:	608b      	str	r3, [r1, #8]
 8011812:	f1b8 0f00 	cmp.w	r8, #0
 8011816:	dd9c      	ble.n	8011752 <__sflush_r+0x1a>
 8011818:	6a21      	ldr	r1, [r4, #32]
 801181a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801181c:	4643      	mov	r3, r8
 801181e:	463a      	mov	r2, r7
 8011820:	4628      	mov	r0, r5
 8011822:	47b0      	blx	r6
 8011824:	2800      	cmp	r0, #0
 8011826:	dc06      	bgt.n	8011836 <__sflush_r+0xfe>
 8011828:	89a3      	ldrh	r3, [r4, #12]
 801182a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801182e:	81a3      	strh	r3, [r4, #12]
 8011830:	f04f 30ff 	mov.w	r0, #4294967295
 8011834:	e78e      	b.n	8011754 <__sflush_r+0x1c>
 8011836:	4407      	add	r7, r0
 8011838:	eba8 0800 	sub.w	r8, r8, r0
 801183c:	e7e9      	b.n	8011812 <__sflush_r+0xda>
 801183e:	bf00      	nop
 8011840:	20400001 	.word	0x20400001

08011844 <_fflush_r>:
 8011844:	b538      	push	{r3, r4, r5, lr}
 8011846:	690b      	ldr	r3, [r1, #16]
 8011848:	4605      	mov	r5, r0
 801184a:	460c      	mov	r4, r1
 801184c:	b913      	cbnz	r3, 8011854 <_fflush_r+0x10>
 801184e:	2500      	movs	r5, #0
 8011850:	4628      	mov	r0, r5
 8011852:	bd38      	pop	{r3, r4, r5, pc}
 8011854:	b118      	cbz	r0, 801185e <_fflush_r+0x1a>
 8011856:	6983      	ldr	r3, [r0, #24]
 8011858:	b90b      	cbnz	r3, 801185e <_fflush_r+0x1a>
 801185a:	f7fc feab 	bl	800e5b4 <__sinit>
 801185e:	4b14      	ldr	r3, [pc, #80]	; (80118b0 <_fflush_r+0x6c>)
 8011860:	429c      	cmp	r4, r3
 8011862:	d11b      	bne.n	801189c <_fflush_r+0x58>
 8011864:	686c      	ldr	r4, [r5, #4]
 8011866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d0ef      	beq.n	801184e <_fflush_r+0xa>
 801186e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011870:	07d0      	lsls	r0, r2, #31
 8011872:	d404      	bmi.n	801187e <_fflush_r+0x3a>
 8011874:	0599      	lsls	r1, r3, #22
 8011876:	d402      	bmi.n	801187e <_fflush_r+0x3a>
 8011878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801187a:	f7fc ff5e 	bl	800e73a <__retarget_lock_acquire_recursive>
 801187e:	4628      	mov	r0, r5
 8011880:	4621      	mov	r1, r4
 8011882:	f7ff ff59 	bl	8011738 <__sflush_r>
 8011886:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011888:	07da      	lsls	r2, r3, #31
 801188a:	4605      	mov	r5, r0
 801188c:	d4e0      	bmi.n	8011850 <_fflush_r+0xc>
 801188e:	89a3      	ldrh	r3, [r4, #12]
 8011890:	059b      	lsls	r3, r3, #22
 8011892:	d4dd      	bmi.n	8011850 <_fflush_r+0xc>
 8011894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011896:	f7fc ff51 	bl	800e73c <__retarget_lock_release_recursive>
 801189a:	e7d9      	b.n	8011850 <_fflush_r+0xc>
 801189c:	4b05      	ldr	r3, [pc, #20]	; (80118b4 <_fflush_r+0x70>)
 801189e:	429c      	cmp	r4, r3
 80118a0:	d101      	bne.n	80118a6 <_fflush_r+0x62>
 80118a2:	68ac      	ldr	r4, [r5, #8]
 80118a4:	e7df      	b.n	8011866 <_fflush_r+0x22>
 80118a6:	4b04      	ldr	r3, [pc, #16]	; (80118b8 <_fflush_r+0x74>)
 80118a8:	429c      	cmp	r4, r3
 80118aa:	bf08      	it	eq
 80118ac:	68ec      	ldreq	r4, [r5, #12]
 80118ae:	e7da      	b.n	8011866 <_fflush_r+0x22>
 80118b0:	0801494c 	.word	0x0801494c
 80118b4:	0801496c 	.word	0x0801496c
 80118b8:	0801492c 	.word	0x0801492c

080118bc <fiprintf>:
 80118bc:	b40e      	push	{r1, r2, r3}
 80118be:	b503      	push	{r0, r1, lr}
 80118c0:	4601      	mov	r1, r0
 80118c2:	ab03      	add	r3, sp, #12
 80118c4:	4805      	ldr	r0, [pc, #20]	; (80118dc <fiprintf+0x20>)
 80118c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80118ca:	6800      	ldr	r0, [r0, #0]
 80118cc:	9301      	str	r3, [sp, #4]
 80118ce:	f001 fc57 	bl	8013180 <_vfiprintf_r>
 80118d2:	b002      	add	sp, #8
 80118d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80118d8:	b003      	add	sp, #12
 80118da:	4770      	bx	lr
 80118dc:	20000088 	.word	0x20000088

080118e0 <rshift>:
 80118e0:	6903      	ldr	r3, [r0, #16]
 80118e2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80118e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80118ea:	ea4f 1261 	mov.w	r2, r1, asr #5
 80118ee:	f100 0414 	add.w	r4, r0, #20
 80118f2:	dd45      	ble.n	8011980 <rshift+0xa0>
 80118f4:	f011 011f 	ands.w	r1, r1, #31
 80118f8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80118fc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011900:	d10c      	bne.n	801191c <rshift+0x3c>
 8011902:	f100 0710 	add.w	r7, r0, #16
 8011906:	4629      	mov	r1, r5
 8011908:	42b1      	cmp	r1, r6
 801190a:	d334      	bcc.n	8011976 <rshift+0x96>
 801190c:	1a9b      	subs	r3, r3, r2
 801190e:	009b      	lsls	r3, r3, #2
 8011910:	1eea      	subs	r2, r5, #3
 8011912:	4296      	cmp	r6, r2
 8011914:	bf38      	it	cc
 8011916:	2300      	movcc	r3, #0
 8011918:	4423      	add	r3, r4
 801191a:	e015      	b.n	8011948 <rshift+0x68>
 801191c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011920:	f1c1 0820 	rsb	r8, r1, #32
 8011924:	40cf      	lsrs	r7, r1
 8011926:	f105 0e04 	add.w	lr, r5, #4
 801192a:	46a1      	mov	r9, r4
 801192c:	4576      	cmp	r6, lr
 801192e:	46f4      	mov	ip, lr
 8011930:	d815      	bhi.n	801195e <rshift+0x7e>
 8011932:	1a9b      	subs	r3, r3, r2
 8011934:	009a      	lsls	r2, r3, #2
 8011936:	3a04      	subs	r2, #4
 8011938:	3501      	adds	r5, #1
 801193a:	42ae      	cmp	r6, r5
 801193c:	bf38      	it	cc
 801193e:	2200      	movcc	r2, #0
 8011940:	18a3      	adds	r3, r4, r2
 8011942:	50a7      	str	r7, [r4, r2]
 8011944:	b107      	cbz	r7, 8011948 <rshift+0x68>
 8011946:	3304      	adds	r3, #4
 8011948:	1b1a      	subs	r2, r3, r4
 801194a:	42a3      	cmp	r3, r4
 801194c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011950:	bf08      	it	eq
 8011952:	2300      	moveq	r3, #0
 8011954:	6102      	str	r2, [r0, #16]
 8011956:	bf08      	it	eq
 8011958:	6143      	streq	r3, [r0, #20]
 801195a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801195e:	f8dc c000 	ldr.w	ip, [ip]
 8011962:	fa0c fc08 	lsl.w	ip, ip, r8
 8011966:	ea4c 0707 	orr.w	r7, ip, r7
 801196a:	f849 7b04 	str.w	r7, [r9], #4
 801196e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011972:	40cf      	lsrs	r7, r1
 8011974:	e7da      	b.n	801192c <rshift+0x4c>
 8011976:	f851 cb04 	ldr.w	ip, [r1], #4
 801197a:	f847 cf04 	str.w	ip, [r7, #4]!
 801197e:	e7c3      	b.n	8011908 <rshift+0x28>
 8011980:	4623      	mov	r3, r4
 8011982:	e7e1      	b.n	8011948 <rshift+0x68>

08011984 <__hexdig_fun>:
 8011984:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011988:	2b09      	cmp	r3, #9
 801198a:	d802      	bhi.n	8011992 <__hexdig_fun+0xe>
 801198c:	3820      	subs	r0, #32
 801198e:	b2c0      	uxtb	r0, r0
 8011990:	4770      	bx	lr
 8011992:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011996:	2b05      	cmp	r3, #5
 8011998:	d801      	bhi.n	801199e <__hexdig_fun+0x1a>
 801199a:	3847      	subs	r0, #71	; 0x47
 801199c:	e7f7      	b.n	801198e <__hexdig_fun+0xa>
 801199e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80119a2:	2b05      	cmp	r3, #5
 80119a4:	d801      	bhi.n	80119aa <__hexdig_fun+0x26>
 80119a6:	3827      	subs	r0, #39	; 0x27
 80119a8:	e7f1      	b.n	801198e <__hexdig_fun+0xa>
 80119aa:	2000      	movs	r0, #0
 80119ac:	4770      	bx	lr
	...

080119b0 <__gethex>:
 80119b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119b4:	ed2d 8b02 	vpush	{d8}
 80119b8:	b089      	sub	sp, #36	; 0x24
 80119ba:	ee08 0a10 	vmov	s16, r0
 80119be:	9304      	str	r3, [sp, #16]
 80119c0:	4bbc      	ldr	r3, [pc, #752]	; (8011cb4 <__gethex+0x304>)
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	9301      	str	r3, [sp, #4]
 80119c6:	4618      	mov	r0, r3
 80119c8:	468b      	mov	fp, r1
 80119ca:	4690      	mov	r8, r2
 80119cc:	f7ee fc10 	bl	80001f0 <strlen>
 80119d0:	9b01      	ldr	r3, [sp, #4]
 80119d2:	f8db 2000 	ldr.w	r2, [fp]
 80119d6:	4403      	add	r3, r0
 80119d8:	4682      	mov	sl, r0
 80119da:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80119de:	9305      	str	r3, [sp, #20]
 80119e0:	1c93      	adds	r3, r2, #2
 80119e2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80119e6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80119ea:	32fe      	adds	r2, #254	; 0xfe
 80119ec:	18d1      	adds	r1, r2, r3
 80119ee:	461f      	mov	r7, r3
 80119f0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80119f4:	9100      	str	r1, [sp, #0]
 80119f6:	2830      	cmp	r0, #48	; 0x30
 80119f8:	d0f8      	beq.n	80119ec <__gethex+0x3c>
 80119fa:	f7ff ffc3 	bl	8011984 <__hexdig_fun>
 80119fe:	4604      	mov	r4, r0
 8011a00:	2800      	cmp	r0, #0
 8011a02:	d13a      	bne.n	8011a7a <__gethex+0xca>
 8011a04:	9901      	ldr	r1, [sp, #4]
 8011a06:	4652      	mov	r2, sl
 8011a08:	4638      	mov	r0, r7
 8011a0a:	f7fd ffd8 	bl	800f9be <strncmp>
 8011a0e:	4605      	mov	r5, r0
 8011a10:	2800      	cmp	r0, #0
 8011a12:	d168      	bne.n	8011ae6 <__gethex+0x136>
 8011a14:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011a18:	eb07 060a 	add.w	r6, r7, sl
 8011a1c:	f7ff ffb2 	bl	8011984 <__hexdig_fun>
 8011a20:	2800      	cmp	r0, #0
 8011a22:	d062      	beq.n	8011aea <__gethex+0x13a>
 8011a24:	4633      	mov	r3, r6
 8011a26:	7818      	ldrb	r0, [r3, #0]
 8011a28:	2830      	cmp	r0, #48	; 0x30
 8011a2a:	461f      	mov	r7, r3
 8011a2c:	f103 0301 	add.w	r3, r3, #1
 8011a30:	d0f9      	beq.n	8011a26 <__gethex+0x76>
 8011a32:	f7ff ffa7 	bl	8011984 <__hexdig_fun>
 8011a36:	2301      	movs	r3, #1
 8011a38:	fab0 f480 	clz	r4, r0
 8011a3c:	0964      	lsrs	r4, r4, #5
 8011a3e:	4635      	mov	r5, r6
 8011a40:	9300      	str	r3, [sp, #0]
 8011a42:	463a      	mov	r2, r7
 8011a44:	4616      	mov	r6, r2
 8011a46:	3201      	adds	r2, #1
 8011a48:	7830      	ldrb	r0, [r6, #0]
 8011a4a:	f7ff ff9b 	bl	8011984 <__hexdig_fun>
 8011a4e:	2800      	cmp	r0, #0
 8011a50:	d1f8      	bne.n	8011a44 <__gethex+0x94>
 8011a52:	9901      	ldr	r1, [sp, #4]
 8011a54:	4652      	mov	r2, sl
 8011a56:	4630      	mov	r0, r6
 8011a58:	f7fd ffb1 	bl	800f9be <strncmp>
 8011a5c:	b980      	cbnz	r0, 8011a80 <__gethex+0xd0>
 8011a5e:	b94d      	cbnz	r5, 8011a74 <__gethex+0xc4>
 8011a60:	eb06 050a 	add.w	r5, r6, sl
 8011a64:	462a      	mov	r2, r5
 8011a66:	4616      	mov	r6, r2
 8011a68:	3201      	adds	r2, #1
 8011a6a:	7830      	ldrb	r0, [r6, #0]
 8011a6c:	f7ff ff8a 	bl	8011984 <__hexdig_fun>
 8011a70:	2800      	cmp	r0, #0
 8011a72:	d1f8      	bne.n	8011a66 <__gethex+0xb6>
 8011a74:	1bad      	subs	r5, r5, r6
 8011a76:	00ad      	lsls	r5, r5, #2
 8011a78:	e004      	b.n	8011a84 <__gethex+0xd4>
 8011a7a:	2400      	movs	r4, #0
 8011a7c:	4625      	mov	r5, r4
 8011a7e:	e7e0      	b.n	8011a42 <__gethex+0x92>
 8011a80:	2d00      	cmp	r5, #0
 8011a82:	d1f7      	bne.n	8011a74 <__gethex+0xc4>
 8011a84:	7833      	ldrb	r3, [r6, #0]
 8011a86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011a8a:	2b50      	cmp	r3, #80	; 0x50
 8011a8c:	d13b      	bne.n	8011b06 <__gethex+0x156>
 8011a8e:	7873      	ldrb	r3, [r6, #1]
 8011a90:	2b2b      	cmp	r3, #43	; 0x2b
 8011a92:	d02c      	beq.n	8011aee <__gethex+0x13e>
 8011a94:	2b2d      	cmp	r3, #45	; 0x2d
 8011a96:	d02e      	beq.n	8011af6 <__gethex+0x146>
 8011a98:	1c71      	adds	r1, r6, #1
 8011a9a:	f04f 0900 	mov.w	r9, #0
 8011a9e:	7808      	ldrb	r0, [r1, #0]
 8011aa0:	f7ff ff70 	bl	8011984 <__hexdig_fun>
 8011aa4:	1e43      	subs	r3, r0, #1
 8011aa6:	b2db      	uxtb	r3, r3
 8011aa8:	2b18      	cmp	r3, #24
 8011aaa:	d82c      	bhi.n	8011b06 <__gethex+0x156>
 8011aac:	f1a0 0210 	sub.w	r2, r0, #16
 8011ab0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011ab4:	f7ff ff66 	bl	8011984 <__hexdig_fun>
 8011ab8:	1e43      	subs	r3, r0, #1
 8011aba:	b2db      	uxtb	r3, r3
 8011abc:	2b18      	cmp	r3, #24
 8011abe:	d91d      	bls.n	8011afc <__gethex+0x14c>
 8011ac0:	f1b9 0f00 	cmp.w	r9, #0
 8011ac4:	d000      	beq.n	8011ac8 <__gethex+0x118>
 8011ac6:	4252      	negs	r2, r2
 8011ac8:	4415      	add	r5, r2
 8011aca:	f8cb 1000 	str.w	r1, [fp]
 8011ace:	b1e4      	cbz	r4, 8011b0a <__gethex+0x15a>
 8011ad0:	9b00      	ldr	r3, [sp, #0]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	bf14      	ite	ne
 8011ad6:	2700      	movne	r7, #0
 8011ad8:	2706      	moveq	r7, #6
 8011ada:	4638      	mov	r0, r7
 8011adc:	b009      	add	sp, #36	; 0x24
 8011ade:	ecbd 8b02 	vpop	{d8}
 8011ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ae6:	463e      	mov	r6, r7
 8011ae8:	4625      	mov	r5, r4
 8011aea:	2401      	movs	r4, #1
 8011aec:	e7ca      	b.n	8011a84 <__gethex+0xd4>
 8011aee:	f04f 0900 	mov.w	r9, #0
 8011af2:	1cb1      	adds	r1, r6, #2
 8011af4:	e7d3      	b.n	8011a9e <__gethex+0xee>
 8011af6:	f04f 0901 	mov.w	r9, #1
 8011afa:	e7fa      	b.n	8011af2 <__gethex+0x142>
 8011afc:	230a      	movs	r3, #10
 8011afe:	fb03 0202 	mla	r2, r3, r2, r0
 8011b02:	3a10      	subs	r2, #16
 8011b04:	e7d4      	b.n	8011ab0 <__gethex+0x100>
 8011b06:	4631      	mov	r1, r6
 8011b08:	e7df      	b.n	8011aca <__gethex+0x11a>
 8011b0a:	1bf3      	subs	r3, r6, r7
 8011b0c:	3b01      	subs	r3, #1
 8011b0e:	4621      	mov	r1, r4
 8011b10:	2b07      	cmp	r3, #7
 8011b12:	dc0b      	bgt.n	8011b2c <__gethex+0x17c>
 8011b14:	ee18 0a10 	vmov	r0, s16
 8011b18:	f000 faea 	bl	80120f0 <_Balloc>
 8011b1c:	4604      	mov	r4, r0
 8011b1e:	b940      	cbnz	r0, 8011b32 <__gethex+0x182>
 8011b20:	4b65      	ldr	r3, [pc, #404]	; (8011cb8 <__gethex+0x308>)
 8011b22:	4602      	mov	r2, r0
 8011b24:	21de      	movs	r1, #222	; 0xde
 8011b26:	4865      	ldr	r0, [pc, #404]	; (8011cbc <__gethex+0x30c>)
 8011b28:	f7fe ff60 	bl	80109ec <__assert_func>
 8011b2c:	3101      	adds	r1, #1
 8011b2e:	105b      	asrs	r3, r3, #1
 8011b30:	e7ee      	b.n	8011b10 <__gethex+0x160>
 8011b32:	f100 0914 	add.w	r9, r0, #20
 8011b36:	f04f 0b00 	mov.w	fp, #0
 8011b3a:	f1ca 0301 	rsb	r3, sl, #1
 8011b3e:	f8cd 9008 	str.w	r9, [sp, #8]
 8011b42:	f8cd b000 	str.w	fp, [sp]
 8011b46:	9306      	str	r3, [sp, #24]
 8011b48:	42b7      	cmp	r7, r6
 8011b4a:	d340      	bcc.n	8011bce <__gethex+0x21e>
 8011b4c:	9802      	ldr	r0, [sp, #8]
 8011b4e:	9b00      	ldr	r3, [sp, #0]
 8011b50:	f840 3b04 	str.w	r3, [r0], #4
 8011b54:	eba0 0009 	sub.w	r0, r0, r9
 8011b58:	1080      	asrs	r0, r0, #2
 8011b5a:	0146      	lsls	r6, r0, #5
 8011b5c:	6120      	str	r0, [r4, #16]
 8011b5e:	4618      	mov	r0, r3
 8011b60:	f000 fbbc 	bl	80122dc <__hi0bits>
 8011b64:	1a30      	subs	r0, r6, r0
 8011b66:	f8d8 6000 	ldr.w	r6, [r8]
 8011b6a:	42b0      	cmp	r0, r6
 8011b6c:	dd63      	ble.n	8011c36 <__gethex+0x286>
 8011b6e:	1b87      	subs	r7, r0, r6
 8011b70:	4639      	mov	r1, r7
 8011b72:	4620      	mov	r0, r4
 8011b74:	f000 ff56 	bl	8012a24 <__any_on>
 8011b78:	4682      	mov	sl, r0
 8011b7a:	b1a8      	cbz	r0, 8011ba8 <__gethex+0x1f8>
 8011b7c:	1e7b      	subs	r3, r7, #1
 8011b7e:	1159      	asrs	r1, r3, #5
 8011b80:	f003 021f 	and.w	r2, r3, #31
 8011b84:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011b88:	f04f 0a01 	mov.w	sl, #1
 8011b8c:	fa0a f202 	lsl.w	r2, sl, r2
 8011b90:	420a      	tst	r2, r1
 8011b92:	d009      	beq.n	8011ba8 <__gethex+0x1f8>
 8011b94:	4553      	cmp	r3, sl
 8011b96:	dd05      	ble.n	8011ba4 <__gethex+0x1f4>
 8011b98:	1eb9      	subs	r1, r7, #2
 8011b9a:	4620      	mov	r0, r4
 8011b9c:	f000 ff42 	bl	8012a24 <__any_on>
 8011ba0:	2800      	cmp	r0, #0
 8011ba2:	d145      	bne.n	8011c30 <__gethex+0x280>
 8011ba4:	f04f 0a02 	mov.w	sl, #2
 8011ba8:	4639      	mov	r1, r7
 8011baa:	4620      	mov	r0, r4
 8011bac:	f7ff fe98 	bl	80118e0 <rshift>
 8011bb0:	443d      	add	r5, r7
 8011bb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011bb6:	42ab      	cmp	r3, r5
 8011bb8:	da4c      	bge.n	8011c54 <__gethex+0x2a4>
 8011bba:	ee18 0a10 	vmov	r0, s16
 8011bbe:	4621      	mov	r1, r4
 8011bc0:	f000 fad6 	bl	8012170 <_Bfree>
 8011bc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	6013      	str	r3, [r2, #0]
 8011bca:	27a3      	movs	r7, #163	; 0xa3
 8011bcc:	e785      	b.n	8011ada <__gethex+0x12a>
 8011bce:	1e73      	subs	r3, r6, #1
 8011bd0:	9a05      	ldr	r2, [sp, #20]
 8011bd2:	9303      	str	r3, [sp, #12]
 8011bd4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011bd8:	4293      	cmp	r3, r2
 8011bda:	d019      	beq.n	8011c10 <__gethex+0x260>
 8011bdc:	f1bb 0f20 	cmp.w	fp, #32
 8011be0:	d107      	bne.n	8011bf2 <__gethex+0x242>
 8011be2:	9b02      	ldr	r3, [sp, #8]
 8011be4:	9a00      	ldr	r2, [sp, #0]
 8011be6:	f843 2b04 	str.w	r2, [r3], #4
 8011bea:	9302      	str	r3, [sp, #8]
 8011bec:	2300      	movs	r3, #0
 8011bee:	9300      	str	r3, [sp, #0]
 8011bf0:	469b      	mov	fp, r3
 8011bf2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011bf6:	f7ff fec5 	bl	8011984 <__hexdig_fun>
 8011bfa:	9b00      	ldr	r3, [sp, #0]
 8011bfc:	f000 000f 	and.w	r0, r0, #15
 8011c00:	fa00 f00b 	lsl.w	r0, r0, fp
 8011c04:	4303      	orrs	r3, r0
 8011c06:	9300      	str	r3, [sp, #0]
 8011c08:	f10b 0b04 	add.w	fp, fp, #4
 8011c0c:	9b03      	ldr	r3, [sp, #12]
 8011c0e:	e00d      	b.n	8011c2c <__gethex+0x27c>
 8011c10:	9b03      	ldr	r3, [sp, #12]
 8011c12:	9a06      	ldr	r2, [sp, #24]
 8011c14:	4413      	add	r3, r2
 8011c16:	42bb      	cmp	r3, r7
 8011c18:	d3e0      	bcc.n	8011bdc <__gethex+0x22c>
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	9901      	ldr	r1, [sp, #4]
 8011c1e:	9307      	str	r3, [sp, #28]
 8011c20:	4652      	mov	r2, sl
 8011c22:	f7fd fecc 	bl	800f9be <strncmp>
 8011c26:	9b07      	ldr	r3, [sp, #28]
 8011c28:	2800      	cmp	r0, #0
 8011c2a:	d1d7      	bne.n	8011bdc <__gethex+0x22c>
 8011c2c:	461e      	mov	r6, r3
 8011c2e:	e78b      	b.n	8011b48 <__gethex+0x198>
 8011c30:	f04f 0a03 	mov.w	sl, #3
 8011c34:	e7b8      	b.n	8011ba8 <__gethex+0x1f8>
 8011c36:	da0a      	bge.n	8011c4e <__gethex+0x29e>
 8011c38:	1a37      	subs	r7, r6, r0
 8011c3a:	4621      	mov	r1, r4
 8011c3c:	ee18 0a10 	vmov	r0, s16
 8011c40:	463a      	mov	r2, r7
 8011c42:	f000 fcb1 	bl	80125a8 <__lshift>
 8011c46:	1bed      	subs	r5, r5, r7
 8011c48:	4604      	mov	r4, r0
 8011c4a:	f100 0914 	add.w	r9, r0, #20
 8011c4e:	f04f 0a00 	mov.w	sl, #0
 8011c52:	e7ae      	b.n	8011bb2 <__gethex+0x202>
 8011c54:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011c58:	42a8      	cmp	r0, r5
 8011c5a:	dd72      	ble.n	8011d42 <__gethex+0x392>
 8011c5c:	1b45      	subs	r5, r0, r5
 8011c5e:	42ae      	cmp	r6, r5
 8011c60:	dc36      	bgt.n	8011cd0 <__gethex+0x320>
 8011c62:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011c66:	2b02      	cmp	r3, #2
 8011c68:	d02a      	beq.n	8011cc0 <__gethex+0x310>
 8011c6a:	2b03      	cmp	r3, #3
 8011c6c:	d02c      	beq.n	8011cc8 <__gethex+0x318>
 8011c6e:	2b01      	cmp	r3, #1
 8011c70:	d115      	bne.n	8011c9e <__gethex+0x2ee>
 8011c72:	42ae      	cmp	r6, r5
 8011c74:	d113      	bne.n	8011c9e <__gethex+0x2ee>
 8011c76:	2e01      	cmp	r6, #1
 8011c78:	d10b      	bne.n	8011c92 <__gethex+0x2e2>
 8011c7a:	9a04      	ldr	r2, [sp, #16]
 8011c7c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011c80:	6013      	str	r3, [r2, #0]
 8011c82:	2301      	movs	r3, #1
 8011c84:	6123      	str	r3, [r4, #16]
 8011c86:	f8c9 3000 	str.w	r3, [r9]
 8011c8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011c8c:	2762      	movs	r7, #98	; 0x62
 8011c8e:	601c      	str	r4, [r3, #0]
 8011c90:	e723      	b.n	8011ada <__gethex+0x12a>
 8011c92:	1e71      	subs	r1, r6, #1
 8011c94:	4620      	mov	r0, r4
 8011c96:	f000 fec5 	bl	8012a24 <__any_on>
 8011c9a:	2800      	cmp	r0, #0
 8011c9c:	d1ed      	bne.n	8011c7a <__gethex+0x2ca>
 8011c9e:	ee18 0a10 	vmov	r0, s16
 8011ca2:	4621      	mov	r1, r4
 8011ca4:	f000 fa64 	bl	8012170 <_Bfree>
 8011ca8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011caa:	2300      	movs	r3, #0
 8011cac:	6013      	str	r3, [r2, #0]
 8011cae:	2750      	movs	r7, #80	; 0x50
 8011cb0:	e713      	b.n	8011ada <__gethex+0x12a>
 8011cb2:	bf00      	nop
 8011cb4:	08014b54 	.word	0x08014b54
 8011cb8:	08014ad7 	.word	0x08014ad7
 8011cbc:	08014ae8 	.word	0x08014ae8
 8011cc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d1eb      	bne.n	8011c9e <__gethex+0x2ee>
 8011cc6:	e7d8      	b.n	8011c7a <__gethex+0x2ca>
 8011cc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d1d5      	bne.n	8011c7a <__gethex+0x2ca>
 8011cce:	e7e6      	b.n	8011c9e <__gethex+0x2ee>
 8011cd0:	1e6f      	subs	r7, r5, #1
 8011cd2:	f1ba 0f00 	cmp.w	sl, #0
 8011cd6:	d131      	bne.n	8011d3c <__gethex+0x38c>
 8011cd8:	b127      	cbz	r7, 8011ce4 <__gethex+0x334>
 8011cda:	4639      	mov	r1, r7
 8011cdc:	4620      	mov	r0, r4
 8011cde:	f000 fea1 	bl	8012a24 <__any_on>
 8011ce2:	4682      	mov	sl, r0
 8011ce4:	117b      	asrs	r3, r7, #5
 8011ce6:	2101      	movs	r1, #1
 8011ce8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011cec:	f007 071f 	and.w	r7, r7, #31
 8011cf0:	fa01 f707 	lsl.w	r7, r1, r7
 8011cf4:	421f      	tst	r7, r3
 8011cf6:	4629      	mov	r1, r5
 8011cf8:	4620      	mov	r0, r4
 8011cfa:	bf18      	it	ne
 8011cfc:	f04a 0a02 	orrne.w	sl, sl, #2
 8011d00:	1b76      	subs	r6, r6, r5
 8011d02:	f7ff fded 	bl	80118e0 <rshift>
 8011d06:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011d0a:	2702      	movs	r7, #2
 8011d0c:	f1ba 0f00 	cmp.w	sl, #0
 8011d10:	d048      	beq.n	8011da4 <__gethex+0x3f4>
 8011d12:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011d16:	2b02      	cmp	r3, #2
 8011d18:	d015      	beq.n	8011d46 <__gethex+0x396>
 8011d1a:	2b03      	cmp	r3, #3
 8011d1c:	d017      	beq.n	8011d4e <__gethex+0x39e>
 8011d1e:	2b01      	cmp	r3, #1
 8011d20:	d109      	bne.n	8011d36 <__gethex+0x386>
 8011d22:	f01a 0f02 	tst.w	sl, #2
 8011d26:	d006      	beq.n	8011d36 <__gethex+0x386>
 8011d28:	f8d9 0000 	ldr.w	r0, [r9]
 8011d2c:	ea4a 0a00 	orr.w	sl, sl, r0
 8011d30:	f01a 0f01 	tst.w	sl, #1
 8011d34:	d10e      	bne.n	8011d54 <__gethex+0x3a4>
 8011d36:	f047 0710 	orr.w	r7, r7, #16
 8011d3a:	e033      	b.n	8011da4 <__gethex+0x3f4>
 8011d3c:	f04f 0a01 	mov.w	sl, #1
 8011d40:	e7d0      	b.n	8011ce4 <__gethex+0x334>
 8011d42:	2701      	movs	r7, #1
 8011d44:	e7e2      	b.n	8011d0c <__gethex+0x35c>
 8011d46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011d48:	f1c3 0301 	rsb	r3, r3, #1
 8011d4c:	9315      	str	r3, [sp, #84]	; 0x54
 8011d4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d0f0      	beq.n	8011d36 <__gethex+0x386>
 8011d54:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011d58:	f104 0314 	add.w	r3, r4, #20
 8011d5c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011d60:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011d64:	f04f 0c00 	mov.w	ip, #0
 8011d68:	4618      	mov	r0, r3
 8011d6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d6e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011d72:	d01c      	beq.n	8011dae <__gethex+0x3fe>
 8011d74:	3201      	adds	r2, #1
 8011d76:	6002      	str	r2, [r0, #0]
 8011d78:	2f02      	cmp	r7, #2
 8011d7a:	f104 0314 	add.w	r3, r4, #20
 8011d7e:	d13f      	bne.n	8011e00 <__gethex+0x450>
 8011d80:	f8d8 2000 	ldr.w	r2, [r8]
 8011d84:	3a01      	subs	r2, #1
 8011d86:	42b2      	cmp	r2, r6
 8011d88:	d10a      	bne.n	8011da0 <__gethex+0x3f0>
 8011d8a:	1171      	asrs	r1, r6, #5
 8011d8c:	2201      	movs	r2, #1
 8011d8e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011d92:	f006 061f 	and.w	r6, r6, #31
 8011d96:	fa02 f606 	lsl.w	r6, r2, r6
 8011d9a:	421e      	tst	r6, r3
 8011d9c:	bf18      	it	ne
 8011d9e:	4617      	movne	r7, r2
 8011da0:	f047 0720 	orr.w	r7, r7, #32
 8011da4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011da6:	601c      	str	r4, [r3, #0]
 8011da8:	9b04      	ldr	r3, [sp, #16]
 8011daa:	601d      	str	r5, [r3, #0]
 8011dac:	e695      	b.n	8011ada <__gethex+0x12a>
 8011dae:	4299      	cmp	r1, r3
 8011db0:	f843 cc04 	str.w	ip, [r3, #-4]
 8011db4:	d8d8      	bhi.n	8011d68 <__gethex+0x3b8>
 8011db6:	68a3      	ldr	r3, [r4, #8]
 8011db8:	459b      	cmp	fp, r3
 8011dba:	db19      	blt.n	8011df0 <__gethex+0x440>
 8011dbc:	6861      	ldr	r1, [r4, #4]
 8011dbe:	ee18 0a10 	vmov	r0, s16
 8011dc2:	3101      	adds	r1, #1
 8011dc4:	f000 f994 	bl	80120f0 <_Balloc>
 8011dc8:	4681      	mov	r9, r0
 8011dca:	b918      	cbnz	r0, 8011dd4 <__gethex+0x424>
 8011dcc:	4b1a      	ldr	r3, [pc, #104]	; (8011e38 <__gethex+0x488>)
 8011dce:	4602      	mov	r2, r0
 8011dd0:	2184      	movs	r1, #132	; 0x84
 8011dd2:	e6a8      	b.n	8011b26 <__gethex+0x176>
 8011dd4:	6922      	ldr	r2, [r4, #16]
 8011dd6:	3202      	adds	r2, #2
 8011dd8:	f104 010c 	add.w	r1, r4, #12
 8011ddc:	0092      	lsls	r2, r2, #2
 8011dde:	300c      	adds	r0, #12
 8011de0:	f7fc fcb6 	bl	800e750 <memcpy>
 8011de4:	4621      	mov	r1, r4
 8011de6:	ee18 0a10 	vmov	r0, s16
 8011dea:	f000 f9c1 	bl	8012170 <_Bfree>
 8011dee:	464c      	mov	r4, r9
 8011df0:	6923      	ldr	r3, [r4, #16]
 8011df2:	1c5a      	adds	r2, r3, #1
 8011df4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011df8:	6122      	str	r2, [r4, #16]
 8011dfa:	2201      	movs	r2, #1
 8011dfc:	615a      	str	r2, [r3, #20]
 8011dfe:	e7bb      	b.n	8011d78 <__gethex+0x3c8>
 8011e00:	6922      	ldr	r2, [r4, #16]
 8011e02:	455a      	cmp	r2, fp
 8011e04:	dd0b      	ble.n	8011e1e <__gethex+0x46e>
 8011e06:	2101      	movs	r1, #1
 8011e08:	4620      	mov	r0, r4
 8011e0a:	f7ff fd69 	bl	80118e0 <rshift>
 8011e0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011e12:	3501      	adds	r5, #1
 8011e14:	42ab      	cmp	r3, r5
 8011e16:	f6ff aed0 	blt.w	8011bba <__gethex+0x20a>
 8011e1a:	2701      	movs	r7, #1
 8011e1c:	e7c0      	b.n	8011da0 <__gethex+0x3f0>
 8011e1e:	f016 061f 	ands.w	r6, r6, #31
 8011e22:	d0fa      	beq.n	8011e1a <__gethex+0x46a>
 8011e24:	449a      	add	sl, r3
 8011e26:	f1c6 0620 	rsb	r6, r6, #32
 8011e2a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8011e2e:	f000 fa55 	bl	80122dc <__hi0bits>
 8011e32:	42b0      	cmp	r0, r6
 8011e34:	dbe7      	blt.n	8011e06 <__gethex+0x456>
 8011e36:	e7f0      	b.n	8011e1a <__gethex+0x46a>
 8011e38:	08014ad7 	.word	0x08014ad7

08011e3c <L_shift>:
 8011e3c:	f1c2 0208 	rsb	r2, r2, #8
 8011e40:	0092      	lsls	r2, r2, #2
 8011e42:	b570      	push	{r4, r5, r6, lr}
 8011e44:	f1c2 0620 	rsb	r6, r2, #32
 8011e48:	6843      	ldr	r3, [r0, #4]
 8011e4a:	6804      	ldr	r4, [r0, #0]
 8011e4c:	fa03 f506 	lsl.w	r5, r3, r6
 8011e50:	432c      	orrs	r4, r5
 8011e52:	40d3      	lsrs	r3, r2
 8011e54:	6004      	str	r4, [r0, #0]
 8011e56:	f840 3f04 	str.w	r3, [r0, #4]!
 8011e5a:	4288      	cmp	r0, r1
 8011e5c:	d3f4      	bcc.n	8011e48 <L_shift+0xc>
 8011e5e:	bd70      	pop	{r4, r5, r6, pc}

08011e60 <__match>:
 8011e60:	b530      	push	{r4, r5, lr}
 8011e62:	6803      	ldr	r3, [r0, #0]
 8011e64:	3301      	adds	r3, #1
 8011e66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e6a:	b914      	cbnz	r4, 8011e72 <__match+0x12>
 8011e6c:	6003      	str	r3, [r0, #0]
 8011e6e:	2001      	movs	r0, #1
 8011e70:	bd30      	pop	{r4, r5, pc}
 8011e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e76:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011e7a:	2d19      	cmp	r5, #25
 8011e7c:	bf98      	it	ls
 8011e7e:	3220      	addls	r2, #32
 8011e80:	42a2      	cmp	r2, r4
 8011e82:	d0f0      	beq.n	8011e66 <__match+0x6>
 8011e84:	2000      	movs	r0, #0
 8011e86:	e7f3      	b.n	8011e70 <__match+0x10>

08011e88 <__hexnan>:
 8011e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e8c:	680b      	ldr	r3, [r1, #0]
 8011e8e:	6801      	ldr	r1, [r0, #0]
 8011e90:	115e      	asrs	r6, r3, #5
 8011e92:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011e96:	f013 031f 	ands.w	r3, r3, #31
 8011e9a:	b087      	sub	sp, #28
 8011e9c:	bf18      	it	ne
 8011e9e:	3604      	addne	r6, #4
 8011ea0:	2500      	movs	r5, #0
 8011ea2:	1f37      	subs	r7, r6, #4
 8011ea4:	4682      	mov	sl, r0
 8011ea6:	4690      	mov	r8, r2
 8011ea8:	9301      	str	r3, [sp, #4]
 8011eaa:	f846 5c04 	str.w	r5, [r6, #-4]
 8011eae:	46b9      	mov	r9, r7
 8011eb0:	463c      	mov	r4, r7
 8011eb2:	9502      	str	r5, [sp, #8]
 8011eb4:	46ab      	mov	fp, r5
 8011eb6:	784a      	ldrb	r2, [r1, #1]
 8011eb8:	1c4b      	adds	r3, r1, #1
 8011eba:	9303      	str	r3, [sp, #12]
 8011ebc:	b342      	cbz	r2, 8011f10 <__hexnan+0x88>
 8011ebe:	4610      	mov	r0, r2
 8011ec0:	9105      	str	r1, [sp, #20]
 8011ec2:	9204      	str	r2, [sp, #16]
 8011ec4:	f7ff fd5e 	bl	8011984 <__hexdig_fun>
 8011ec8:	2800      	cmp	r0, #0
 8011eca:	d14f      	bne.n	8011f6c <__hexnan+0xe4>
 8011ecc:	9a04      	ldr	r2, [sp, #16]
 8011ece:	9905      	ldr	r1, [sp, #20]
 8011ed0:	2a20      	cmp	r2, #32
 8011ed2:	d818      	bhi.n	8011f06 <__hexnan+0x7e>
 8011ed4:	9b02      	ldr	r3, [sp, #8]
 8011ed6:	459b      	cmp	fp, r3
 8011ed8:	dd13      	ble.n	8011f02 <__hexnan+0x7a>
 8011eda:	454c      	cmp	r4, r9
 8011edc:	d206      	bcs.n	8011eec <__hexnan+0x64>
 8011ede:	2d07      	cmp	r5, #7
 8011ee0:	dc04      	bgt.n	8011eec <__hexnan+0x64>
 8011ee2:	462a      	mov	r2, r5
 8011ee4:	4649      	mov	r1, r9
 8011ee6:	4620      	mov	r0, r4
 8011ee8:	f7ff ffa8 	bl	8011e3c <L_shift>
 8011eec:	4544      	cmp	r4, r8
 8011eee:	d950      	bls.n	8011f92 <__hexnan+0x10a>
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	f1a4 0904 	sub.w	r9, r4, #4
 8011ef6:	f844 3c04 	str.w	r3, [r4, #-4]
 8011efa:	f8cd b008 	str.w	fp, [sp, #8]
 8011efe:	464c      	mov	r4, r9
 8011f00:	461d      	mov	r5, r3
 8011f02:	9903      	ldr	r1, [sp, #12]
 8011f04:	e7d7      	b.n	8011eb6 <__hexnan+0x2e>
 8011f06:	2a29      	cmp	r2, #41	; 0x29
 8011f08:	d156      	bne.n	8011fb8 <__hexnan+0x130>
 8011f0a:	3102      	adds	r1, #2
 8011f0c:	f8ca 1000 	str.w	r1, [sl]
 8011f10:	f1bb 0f00 	cmp.w	fp, #0
 8011f14:	d050      	beq.n	8011fb8 <__hexnan+0x130>
 8011f16:	454c      	cmp	r4, r9
 8011f18:	d206      	bcs.n	8011f28 <__hexnan+0xa0>
 8011f1a:	2d07      	cmp	r5, #7
 8011f1c:	dc04      	bgt.n	8011f28 <__hexnan+0xa0>
 8011f1e:	462a      	mov	r2, r5
 8011f20:	4649      	mov	r1, r9
 8011f22:	4620      	mov	r0, r4
 8011f24:	f7ff ff8a 	bl	8011e3c <L_shift>
 8011f28:	4544      	cmp	r4, r8
 8011f2a:	d934      	bls.n	8011f96 <__hexnan+0x10e>
 8011f2c:	f1a8 0204 	sub.w	r2, r8, #4
 8011f30:	4623      	mov	r3, r4
 8011f32:	f853 1b04 	ldr.w	r1, [r3], #4
 8011f36:	f842 1f04 	str.w	r1, [r2, #4]!
 8011f3a:	429f      	cmp	r7, r3
 8011f3c:	d2f9      	bcs.n	8011f32 <__hexnan+0xaa>
 8011f3e:	1b3b      	subs	r3, r7, r4
 8011f40:	f023 0303 	bic.w	r3, r3, #3
 8011f44:	3304      	adds	r3, #4
 8011f46:	3401      	adds	r4, #1
 8011f48:	3e03      	subs	r6, #3
 8011f4a:	42b4      	cmp	r4, r6
 8011f4c:	bf88      	it	hi
 8011f4e:	2304      	movhi	r3, #4
 8011f50:	4443      	add	r3, r8
 8011f52:	2200      	movs	r2, #0
 8011f54:	f843 2b04 	str.w	r2, [r3], #4
 8011f58:	429f      	cmp	r7, r3
 8011f5a:	d2fb      	bcs.n	8011f54 <__hexnan+0xcc>
 8011f5c:	683b      	ldr	r3, [r7, #0]
 8011f5e:	b91b      	cbnz	r3, 8011f68 <__hexnan+0xe0>
 8011f60:	4547      	cmp	r7, r8
 8011f62:	d127      	bne.n	8011fb4 <__hexnan+0x12c>
 8011f64:	2301      	movs	r3, #1
 8011f66:	603b      	str	r3, [r7, #0]
 8011f68:	2005      	movs	r0, #5
 8011f6a:	e026      	b.n	8011fba <__hexnan+0x132>
 8011f6c:	3501      	adds	r5, #1
 8011f6e:	2d08      	cmp	r5, #8
 8011f70:	f10b 0b01 	add.w	fp, fp, #1
 8011f74:	dd06      	ble.n	8011f84 <__hexnan+0xfc>
 8011f76:	4544      	cmp	r4, r8
 8011f78:	d9c3      	bls.n	8011f02 <__hexnan+0x7a>
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	f844 3c04 	str.w	r3, [r4, #-4]
 8011f80:	2501      	movs	r5, #1
 8011f82:	3c04      	subs	r4, #4
 8011f84:	6822      	ldr	r2, [r4, #0]
 8011f86:	f000 000f 	and.w	r0, r0, #15
 8011f8a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011f8e:	6022      	str	r2, [r4, #0]
 8011f90:	e7b7      	b.n	8011f02 <__hexnan+0x7a>
 8011f92:	2508      	movs	r5, #8
 8011f94:	e7b5      	b.n	8011f02 <__hexnan+0x7a>
 8011f96:	9b01      	ldr	r3, [sp, #4]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d0df      	beq.n	8011f5c <__hexnan+0xd4>
 8011f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8011fa0:	f1c3 0320 	rsb	r3, r3, #32
 8011fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8011fa8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011fac:	401a      	ands	r2, r3
 8011fae:	f846 2c04 	str.w	r2, [r6, #-4]
 8011fb2:	e7d3      	b.n	8011f5c <__hexnan+0xd4>
 8011fb4:	3f04      	subs	r7, #4
 8011fb6:	e7d1      	b.n	8011f5c <__hexnan+0xd4>
 8011fb8:	2004      	movs	r0, #4
 8011fba:	b007      	add	sp, #28
 8011fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011fc0 <_localeconv_r>:
 8011fc0:	4800      	ldr	r0, [pc, #0]	; (8011fc4 <_localeconv_r+0x4>)
 8011fc2:	4770      	bx	lr
 8011fc4:	200001e0 	.word	0x200001e0

08011fc8 <_lseek_r>:
 8011fc8:	b538      	push	{r3, r4, r5, lr}
 8011fca:	4d07      	ldr	r5, [pc, #28]	; (8011fe8 <_lseek_r+0x20>)
 8011fcc:	4604      	mov	r4, r0
 8011fce:	4608      	mov	r0, r1
 8011fd0:	4611      	mov	r1, r2
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	602a      	str	r2, [r5, #0]
 8011fd6:	461a      	mov	r2, r3
 8011fd8:	f001 fc34 	bl	8013844 <_lseek>
 8011fdc:	1c43      	adds	r3, r0, #1
 8011fde:	d102      	bne.n	8011fe6 <_lseek_r+0x1e>
 8011fe0:	682b      	ldr	r3, [r5, #0]
 8011fe2:	b103      	cbz	r3, 8011fe6 <_lseek_r+0x1e>
 8011fe4:	6023      	str	r3, [r4, #0]
 8011fe6:	bd38      	pop	{r3, r4, r5, pc}
 8011fe8:	200062e4 	.word	0x200062e4

08011fec <__swhatbuf_r>:
 8011fec:	b570      	push	{r4, r5, r6, lr}
 8011fee:	460e      	mov	r6, r1
 8011ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ff4:	2900      	cmp	r1, #0
 8011ff6:	b096      	sub	sp, #88	; 0x58
 8011ff8:	4614      	mov	r4, r2
 8011ffa:	461d      	mov	r5, r3
 8011ffc:	da07      	bge.n	801200e <__swhatbuf_r+0x22>
 8011ffe:	2300      	movs	r3, #0
 8012000:	602b      	str	r3, [r5, #0]
 8012002:	89b3      	ldrh	r3, [r6, #12]
 8012004:	061a      	lsls	r2, r3, #24
 8012006:	d410      	bmi.n	801202a <__swhatbuf_r+0x3e>
 8012008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801200c:	e00e      	b.n	801202c <__swhatbuf_r+0x40>
 801200e:	466a      	mov	r2, sp
 8012010:	f001 fbc6 	bl	80137a0 <_fstat_r>
 8012014:	2800      	cmp	r0, #0
 8012016:	dbf2      	blt.n	8011ffe <__swhatbuf_r+0x12>
 8012018:	9a01      	ldr	r2, [sp, #4]
 801201a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801201e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012022:	425a      	negs	r2, r3
 8012024:	415a      	adcs	r2, r3
 8012026:	602a      	str	r2, [r5, #0]
 8012028:	e7ee      	b.n	8012008 <__swhatbuf_r+0x1c>
 801202a:	2340      	movs	r3, #64	; 0x40
 801202c:	2000      	movs	r0, #0
 801202e:	6023      	str	r3, [r4, #0]
 8012030:	b016      	add	sp, #88	; 0x58
 8012032:	bd70      	pop	{r4, r5, r6, pc}

08012034 <__smakebuf_r>:
 8012034:	898b      	ldrh	r3, [r1, #12]
 8012036:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012038:	079d      	lsls	r5, r3, #30
 801203a:	4606      	mov	r6, r0
 801203c:	460c      	mov	r4, r1
 801203e:	d507      	bpl.n	8012050 <__smakebuf_r+0x1c>
 8012040:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012044:	6023      	str	r3, [r4, #0]
 8012046:	6123      	str	r3, [r4, #16]
 8012048:	2301      	movs	r3, #1
 801204a:	6163      	str	r3, [r4, #20]
 801204c:	b002      	add	sp, #8
 801204e:	bd70      	pop	{r4, r5, r6, pc}
 8012050:	ab01      	add	r3, sp, #4
 8012052:	466a      	mov	r2, sp
 8012054:	f7ff ffca 	bl	8011fec <__swhatbuf_r>
 8012058:	9900      	ldr	r1, [sp, #0]
 801205a:	4605      	mov	r5, r0
 801205c:	4630      	mov	r0, r6
 801205e:	f7fc fbf7 	bl	800e850 <_malloc_r>
 8012062:	b948      	cbnz	r0, 8012078 <__smakebuf_r+0x44>
 8012064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012068:	059a      	lsls	r2, r3, #22
 801206a:	d4ef      	bmi.n	801204c <__smakebuf_r+0x18>
 801206c:	f023 0303 	bic.w	r3, r3, #3
 8012070:	f043 0302 	orr.w	r3, r3, #2
 8012074:	81a3      	strh	r3, [r4, #12]
 8012076:	e7e3      	b.n	8012040 <__smakebuf_r+0xc>
 8012078:	4b0d      	ldr	r3, [pc, #52]	; (80120b0 <__smakebuf_r+0x7c>)
 801207a:	62b3      	str	r3, [r6, #40]	; 0x28
 801207c:	89a3      	ldrh	r3, [r4, #12]
 801207e:	6020      	str	r0, [r4, #0]
 8012080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012084:	81a3      	strh	r3, [r4, #12]
 8012086:	9b00      	ldr	r3, [sp, #0]
 8012088:	6163      	str	r3, [r4, #20]
 801208a:	9b01      	ldr	r3, [sp, #4]
 801208c:	6120      	str	r0, [r4, #16]
 801208e:	b15b      	cbz	r3, 80120a8 <__smakebuf_r+0x74>
 8012090:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012094:	4630      	mov	r0, r6
 8012096:	f001 fb95 	bl	80137c4 <_isatty_r>
 801209a:	b128      	cbz	r0, 80120a8 <__smakebuf_r+0x74>
 801209c:	89a3      	ldrh	r3, [r4, #12]
 801209e:	f023 0303 	bic.w	r3, r3, #3
 80120a2:	f043 0301 	orr.w	r3, r3, #1
 80120a6:	81a3      	strh	r3, [r4, #12]
 80120a8:	89a0      	ldrh	r0, [r4, #12]
 80120aa:	4305      	orrs	r5, r0
 80120ac:	81a5      	strh	r5, [r4, #12]
 80120ae:	e7cd      	b.n	801204c <__smakebuf_r+0x18>
 80120b0:	0800e54d 	.word	0x0800e54d

080120b4 <__ascii_mbtowc>:
 80120b4:	b082      	sub	sp, #8
 80120b6:	b901      	cbnz	r1, 80120ba <__ascii_mbtowc+0x6>
 80120b8:	a901      	add	r1, sp, #4
 80120ba:	b142      	cbz	r2, 80120ce <__ascii_mbtowc+0x1a>
 80120bc:	b14b      	cbz	r3, 80120d2 <__ascii_mbtowc+0x1e>
 80120be:	7813      	ldrb	r3, [r2, #0]
 80120c0:	600b      	str	r3, [r1, #0]
 80120c2:	7812      	ldrb	r2, [r2, #0]
 80120c4:	1e10      	subs	r0, r2, #0
 80120c6:	bf18      	it	ne
 80120c8:	2001      	movne	r0, #1
 80120ca:	b002      	add	sp, #8
 80120cc:	4770      	bx	lr
 80120ce:	4610      	mov	r0, r2
 80120d0:	e7fb      	b.n	80120ca <__ascii_mbtowc+0x16>
 80120d2:	f06f 0001 	mvn.w	r0, #1
 80120d6:	e7f8      	b.n	80120ca <__ascii_mbtowc+0x16>

080120d8 <__malloc_lock>:
 80120d8:	4801      	ldr	r0, [pc, #4]	; (80120e0 <__malloc_lock+0x8>)
 80120da:	f7fc bb2e 	b.w	800e73a <__retarget_lock_acquire_recursive>
 80120de:	bf00      	nop
 80120e0:	200062dc 	.word	0x200062dc

080120e4 <__malloc_unlock>:
 80120e4:	4801      	ldr	r0, [pc, #4]	; (80120ec <__malloc_unlock+0x8>)
 80120e6:	f7fc bb29 	b.w	800e73c <__retarget_lock_release_recursive>
 80120ea:	bf00      	nop
 80120ec:	200062dc 	.word	0x200062dc

080120f0 <_Balloc>:
 80120f0:	b570      	push	{r4, r5, r6, lr}
 80120f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80120f4:	4604      	mov	r4, r0
 80120f6:	460d      	mov	r5, r1
 80120f8:	b976      	cbnz	r6, 8012118 <_Balloc+0x28>
 80120fa:	2010      	movs	r0, #16
 80120fc:	f7fc fb20 	bl	800e740 <malloc>
 8012100:	4602      	mov	r2, r0
 8012102:	6260      	str	r0, [r4, #36]	; 0x24
 8012104:	b920      	cbnz	r0, 8012110 <_Balloc+0x20>
 8012106:	4b18      	ldr	r3, [pc, #96]	; (8012168 <_Balloc+0x78>)
 8012108:	4818      	ldr	r0, [pc, #96]	; (801216c <_Balloc+0x7c>)
 801210a:	2166      	movs	r1, #102	; 0x66
 801210c:	f7fe fc6e 	bl	80109ec <__assert_func>
 8012110:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012114:	6006      	str	r6, [r0, #0]
 8012116:	60c6      	str	r6, [r0, #12]
 8012118:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801211a:	68f3      	ldr	r3, [r6, #12]
 801211c:	b183      	cbz	r3, 8012140 <_Balloc+0x50>
 801211e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012120:	68db      	ldr	r3, [r3, #12]
 8012122:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012126:	b9b8      	cbnz	r0, 8012158 <_Balloc+0x68>
 8012128:	2101      	movs	r1, #1
 801212a:	fa01 f605 	lsl.w	r6, r1, r5
 801212e:	1d72      	adds	r2, r6, #5
 8012130:	0092      	lsls	r2, r2, #2
 8012132:	4620      	mov	r0, r4
 8012134:	f000 fc97 	bl	8012a66 <_calloc_r>
 8012138:	b160      	cbz	r0, 8012154 <_Balloc+0x64>
 801213a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801213e:	e00e      	b.n	801215e <_Balloc+0x6e>
 8012140:	2221      	movs	r2, #33	; 0x21
 8012142:	2104      	movs	r1, #4
 8012144:	4620      	mov	r0, r4
 8012146:	f000 fc8e 	bl	8012a66 <_calloc_r>
 801214a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801214c:	60f0      	str	r0, [r6, #12]
 801214e:	68db      	ldr	r3, [r3, #12]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d1e4      	bne.n	801211e <_Balloc+0x2e>
 8012154:	2000      	movs	r0, #0
 8012156:	bd70      	pop	{r4, r5, r6, pc}
 8012158:	6802      	ldr	r2, [r0, #0]
 801215a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801215e:	2300      	movs	r3, #0
 8012160:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012164:	e7f7      	b.n	8012156 <_Balloc+0x66>
 8012166:	bf00      	nop
 8012168:	08014a61 	.word	0x08014a61
 801216c:	08014b68 	.word	0x08014b68

08012170 <_Bfree>:
 8012170:	b570      	push	{r4, r5, r6, lr}
 8012172:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012174:	4605      	mov	r5, r0
 8012176:	460c      	mov	r4, r1
 8012178:	b976      	cbnz	r6, 8012198 <_Bfree+0x28>
 801217a:	2010      	movs	r0, #16
 801217c:	f7fc fae0 	bl	800e740 <malloc>
 8012180:	4602      	mov	r2, r0
 8012182:	6268      	str	r0, [r5, #36]	; 0x24
 8012184:	b920      	cbnz	r0, 8012190 <_Bfree+0x20>
 8012186:	4b09      	ldr	r3, [pc, #36]	; (80121ac <_Bfree+0x3c>)
 8012188:	4809      	ldr	r0, [pc, #36]	; (80121b0 <_Bfree+0x40>)
 801218a:	218a      	movs	r1, #138	; 0x8a
 801218c:	f7fe fc2e 	bl	80109ec <__assert_func>
 8012190:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012194:	6006      	str	r6, [r0, #0]
 8012196:	60c6      	str	r6, [r0, #12]
 8012198:	b13c      	cbz	r4, 80121aa <_Bfree+0x3a>
 801219a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801219c:	6862      	ldr	r2, [r4, #4]
 801219e:	68db      	ldr	r3, [r3, #12]
 80121a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80121a4:	6021      	str	r1, [r4, #0]
 80121a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80121aa:	bd70      	pop	{r4, r5, r6, pc}
 80121ac:	08014a61 	.word	0x08014a61
 80121b0:	08014b68 	.word	0x08014b68

080121b4 <__multadd>:
 80121b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121b8:	690e      	ldr	r6, [r1, #16]
 80121ba:	4607      	mov	r7, r0
 80121bc:	4698      	mov	r8, r3
 80121be:	460c      	mov	r4, r1
 80121c0:	f101 0014 	add.w	r0, r1, #20
 80121c4:	2300      	movs	r3, #0
 80121c6:	6805      	ldr	r5, [r0, #0]
 80121c8:	b2a9      	uxth	r1, r5
 80121ca:	fb02 8101 	mla	r1, r2, r1, r8
 80121ce:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80121d2:	0c2d      	lsrs	r5, r5, #16
 80121d4:	fb02 c505 	mla	r5, r2, r5, ip
 80121d8:	b289      	uxth	r1, r1
 80121da:	3301      	adds	r3, #1
 80121dc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80121e0:	429e      	cmp	r6, r3
 80121e2:	f840 1b04 	str.w	r1, [r0], #4
 80121e6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80121ea:	dcec      	bgt.n	80121c6 <__multadd+0x12>
 80121ec:	f1b8 0f00 	cmp.w	r8, #0
 80121f0:	d022      	beq.n	8012238 <__multadd+0x84>
 80121f2:	68a3      	ldr	r3, [r4, #8]
 80121f4:	42b3      	cmp	r3, r6
 80121f6:	dc19      	bgt.n	801222c <__multadd+0x78>
 80121f8:	6861      	ldr	r1, [r4, #4]
 80121fa:	4638      	mov	r0, r7
 80121fc:	3101      	adds	r1, #1
 80121fe:	f7ff ff77 	bl	80120f0 <_Balloc>
 8012202:	4605      	mov	r5, r0
 8012204:	b928      	cbnz	r0, 8012212 <__multadd+0x5e>
 8012206:	4602      	mov	r2, r0
 8012208:	4b0d      	ldr	r3, [pc, #52]	; (8012240 <__multadd+0x8c>)
 801220a:	480e      	ldr	r0, [pc, #56]	; (8012244 <__multadd+0x90>)
 801220c:	21b5      	movs	r1, #181	; 0xb5
 801220e:	f7fe fbed 	bl	80109ec <__assert_func>
 8012212:	6922      	ldr	r2, [r4, #16]
 8012214:	3202      	adds	r2, #2
 8012216:	f104 010c 	add.w	r1, r4, #12
 801221a:	0092      	lsls	r2, r2, #2
 801221c:	300c      	adds	r0, #12
 801221e:	f7fc fa97 	bl	800e750 <memcpy>
 8012222:	4621      	mov	r1, r4
 8012224:	4638      	mov	r0, r7
 8012226:	f7ff ffa3 	bl	8012170 <_Bfree>
 801222a:	462c      	mov	r4, r5
 801222c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012230:	3601      	adds	r6, #1
 8012232:	f8c3 8014 	str.w	r8, [r3, #20]
 8012236:	6126      	str	r6, [r4, #16]
 8012238:	4620      	mov	r0, r4
 801223a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801223e:	bf00      	nop
 8012240:	08014ad7 	.word	0x08014ad7
 8012244:	08014b68 	.word	0x08014b68

08012248 <__s2b>:
 8012248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801224c:	460c      	mov	r4, r1
 801224e:	4615      	mov	r5, r2
 8012250:	461f      	mov	r7, r3
 8012252:	2209      	movs	r2, #9
 8012254:	3308      	adds	r3, #8
 8012256:	4606      	mov	r6, r0
 8012258:	fb93 f3f2 	sdiv	r3, r3, r2
 801225c:	2100      	movs	r1, #0
 801225e:	2201      	movs	r2, #1
 8012260:	429a      	cmp	r2, r3
 8012262:	db09      	blt.n	8012278 <__s2b+0x30>
 8012264:	4630      	mov	r0, r6
 8012266:	f7ff ff43 	bl	80120f0 <_Balloc>
 801226a:	b940      	cbnz	r0, 801227e <__s2b+0x36>
 801226c:	4602      	mov	r2, r0
 801226e:	4b19      	ldr	r3, [pc, #100]	; (80122d4 <__s2b+0x8c>)
 8012270:	4819      	ldr	r0, [pc, #100]	; (80122d8 <__s2b+0x90>)
 8012272:	21ce      	movs	r1, #206	; 0xce
 8012274:	f7fe fbba 	bl	80109ec <__assert_func>
 8012278:	0052      	lsls	r2, r2, #1
 801227a:	3101      	adds	r1, #1
 801227c:	e7f0      	b.n	8012260 <__s2b+0x18>
 801227e:	9b08      	ldr	r3, [sp, #32]
 8012280:	6143      	str	r3, [r0, #20]
 8012282:	2d09      	cmp	r5, #9
 8012284:	f04f 0301 	mov.w	r3, #1
 8012288:	6103      	str	r3, [r0, #16]
 801228a:	dd16      	ble.n	80122ba <__s2b+0x72>
 801228c:	f104 0909 	add.w	r9, r4, #9
 8012290:	46c8      	mov	r8, r9
 8012292:	442c      	add	r4, r5
 8012294:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012298:	4601      	mov	r1, r0
 801229a:	3b30      	subs	r3, #48	; 0x30
 801229c:	220a      	movs	r2, #10
 801229e:	4630      	mov	r0, r6
 80122a0:	f7ff ff88 	bl	80121b4 <__multadd>
 80122a4:	45a0      	cmp	r8, r4
 80122a6:	d1f5      	bne.n	8012294 <__s2b+0x4c>
 80122a8:	f1a5 0408 	sub.w	r4, r5, #8
 80122ac:	444c      	add	r4, r9
 80122ae:	1b2d      	subs	r5, r5, r4
 80122b0:	1963      	adds	r3, r4, r5
 80122b2:	42bb      	cmp	r3, r7
 80122b4:	db04      	blt.n	80122c0 <__s2b+0x78>
 80122b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122ba:	340a      	adds	r4, #10
 80122bc:	2509      	movs	r5, #9
 80122be:	e7f6      	b.n	80122ae <__s2b+0x66>
 80122c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80122c4:	4601      	mov	r1, r0
 80122c6:	3b30      	subs	r3, #48	; 0x30
 80122c8:	220a      	movs	r2, #10
 80122ca:	4630      	mov	r0, r6
 80122cc:	f7ff ff72 	bl	80121b4 <__multadd>
 80122d0:	e7ee      	b.n	80122b0 <__s2b+0x68>
 80122d2:	bf00      	nop
 80122d4:	08014ad7 	.word	0x08014ad7
 80122d8:	08014b68 	.word	0x08014b68

080122dc <__hi0bits>:
 80122dc:	0c03      	lsrs	r3, r0, #16
 80122de:	041b      	lsls	r3, r3, #16
 80122e0:	b9d3      	cbnz	r3, 8012318 <__hi0bits+0x3c>
 80122e2:	0400      	lsls	r0, r0, #16
 80122e4:	2310      	movs	r3, #16
 80122e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80122ea:	bf04      	itt	eq
 80122ec:	0200      	lsleq	r0, r0, #8
 80122ee:	3308      	addeq	r3, #8
 80122f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80122f4:	bf04      	itt	eq
 80122f6:	0100      	lsleq	r0, r0, #4
 80122f8:	3304      	addeq	r3, #4
 80122fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80122fe:	bf04      	itt	eq
 8012300:	0080      	lsleq	r0, r0, #2
 8012302:	3302      	addeq	r3, #2
 8012304:	2800      	cmp	r0, #0
 8012306:	db05      	blt.n	8012314 <__hi0bits+0x38>
 8012308:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801230c:	f103 0301 	add.w	r3, r3, #1
 8012310:	bf08      	it	eq
 8012312:	2320      	moveq	r3, #32
 8012314:	4618      	mov	r0, r3
 8012316:	4770      	bx	lr
 8012318:	2300      	movs	r3, #0
 801231a:	e7e4      	b.n	80122e6 <__hi0bits+0xa>

0801231c <__lo0bits>:
 801231c:	6803      	ldr	r3, [r0, #0]
 801231e:	f013 0207 	ands.w	r2, r3, #7
 8012322:	4601      	mov	r1, r0
 8012324:	d00b      	beq.n	801233e <__lo0bits+0x22>
 8012326:	07da      	lsls	r2, r3, #31
 8012328:	d424      	bmi.n	8012374 <__lo0bits+0x58>
 801232a:	0798      	lsls	r0, r3, #30
 801232c:	bf49      	itett	mi
 801232e:	085b      	lsrmi	r3, r3, #1
 8012330:	089b      	lsrpl	r3, r3, #2
 8012332:	2001      	movmi	r0, #1
 8012334:	600b      	strmi	r3, [r1, #0]
 8012336:	bf5c      	itt	pl
 8012338:	600b      	strpl	r3, [r1, #0]
 801233a:	2002      	movpl	r0, #2
 801233c:	4770      	bx	lr
 801233e:	b298      	uxth	r0, r3
 8012340:	b9b0      	cbnz	r0, 8012370 <__lo0bits+0x54>
 8012342:	0c1b      	lsrs	r3, r3, #16
 8012344:	2010      	movs	r0, #16
 8012346:	f013 0fff 	tst.w	r3, #255	; 0xff
 801234a:	bf04      	itt	eq
 801234c:	0a1b      	lsreq	r3, r3, #8
 801234e:	3008      	addeq	r0, #8
 8012350:	071a      	lsls	r2, r3, #28
 8012352:	bf04      	itt	eq
 8012354:	091b      	lsreq	r3, r3, #4
 8012356:	3004      	addeq	r0, #4
 8012358:	079a      	lsls	r2, r3, #30
 801235a:	bf04      	itt	eq
 801235c:	089b      	lsreq	r3, r3, #2
 801235e:	3002      	addeq	r0, #2
 8012360:	07da      	lsls	r2, r3, #31
 8012362:	d403      	bmi.n	801236c <__lo0bits+0x50>
 8012364:	085b      	lsrs	r3, r3, #1
 8012366:	f100 0001 	add.w	r0, r0, #1
 801236a:	d005      	beq.n	8012378 <__lo0bits+0x5c>
 801236c:	600b      	str	r3, [r1, #0]
 801236e:	4770      	bx	lr
 8012370:	4610      	mov	r0, r2
 8012372:	e7e8      	b.n	8012346 <__lo0bits+0x2a>
 8012374:	2000      	movs	r0, #0
 8012376:	4770      	bx	lr
 8012378:	2020      	movs	r0, #32
 801237a:	4770      	bx	lr

0801237c <__i2b>:
 801237c:	b510      	push	{r4, lr}
 801237e:	460c      	mov	r4, r1
 8012380:	2101      	movs	r1, #1
 8012382:	f7ff feb5 	bl	80120f0 <_Balloc>
 8012386:	4602      	mov	r2, r0
 8012388:	b928      	cbnz	r0, 8012396 <__i2b+0x1a>
 801238a:	4b05      	ldr	r3, [pc, #20]	; (80123a0 <__i2b+0x24>)
 801238c:	4805      	ldr	r0, [pc, #20]	; (80123a4 <__i2b+0x28>)
 801238e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012392:	f7fe fb2b 	bl	80109ec <__assert_func>
 8012396:	2301      	movs	r3, #1
 8012398:	6144      	str	r4, [r0, #20]
 801239a:	6103      	str	r3, [r0, #16]
 801239c:	bd10      	pop	{r4, pc}
 801239e:	bf00      	nop
 80123a0:	08014ad7 	.word	0x08014ad7
 80123a4:	08014b68 	.word	0x08014b68

080123a8 <__multiply>:
 80123a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123ac:	4614      	mov	r4, r2
 80123ae:	690a      	ldr	r2, [r1, #16]
 80123b0:	6923      	ldr	r3, [r4, #16]
 80123b2:	429a      	cmp	r2, r3
 80123b4:	bfb8      	it	lt
 80123b6:	460b      	movlt	r3, r1
 80123b8:	460d      	mov	r5, r1
 80123ba:	bfbc      	itt	lt
 80123bc:	4625      	movlt	r5, r4
 80123be:	461c      	movlt	r4, r3
 80123c0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80123c4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80123c8:	68ab      	ldr	r3, [r5, #8]
 80123ca:	6869      	ldr	r1, [r5, #4]
 80123cc:	eb0a 0709 	add.w	r7, sl, r9
 80123d0:	42bb      	cmp	r3, r7
 80123d2:	b085      	sub	sp, #20
 80123d4:	bfb8      	it	lt
 80123d6:	3101      	addlt	r1, #1
 80123d8:	f7ff fe8a 	bl	80120f0 <_Balloc>
 80123dc:	b930      	cbnz	r0, 80123ec <__multiply+0x44>
 80123de:	4602      	mov	r2, r0
 80123e0:	4b42      	ldr	r3, [pc, #264]	; (80124ec <__multiply+0x144>)
 80123e2:	4843      	ldr	r0, [pc, #268]	; (80124f0 <__multiply+0x148>)
 80123e4:	f240 115d 	movw	r1, #349	; 0x15d
 80123e8:	f7fe fb00 	bl	80109ec <__assert_func>
 80123ec:	f100 0614 	add.w	r6, r0, #20
 80123f0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80123f4:	4633      	mov	r3, r6
 80123f6:	2200      	movs	r2, #0
 80123f8:	4543      	cmp	r3, r8
 80123fa:	d31e      	bcc.n	801243a <__multiply+0x92>
 80123fc:	f105 0c14 	add.w	ip, r5, #20
 8012400:	f104 0314 	add.w	r3, r4, #20
 8012404:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8012408:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801240c:	9202      	str	r2, [sp, #8]
 801240e:	ebac 0205 	sub.w	r2, ip, r5
 8012412:	3a15      	subs	r2, #21
 8012414:	f022 0203 	bic.w	r2, r2, #3
 8012418:	3204      	adds	r2, #4
 801241a:	f105 0115 	add.w	r1, r5, #21
 801241e:	458c      	cmp	ip, r1
 8012420:	bf38      	it	cc
 8012422:	2204      	movcc	r2, #4
 8012424:	9201      	str	r2, [sp, #4]
 8012426:	9a02      	ldr	r2, [sp, #8]
 8012428:	9303      	str	r3, [sp, #12]
 801242a:	429a      	cmp	r2, r3
 801242c:	d808      	bhi.n	8012440 <__multiply+0x98>
 801242e:	2f00      	cmp	r7, #0
 8012430:	dc55      	bgt.n	80124de <__multiply+0x136>
 8012432:	6107      	str	r7, [r0, #16]
 8012434:	b005      	add	sp, #20
 8012436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801243a:	f843 2b04 	str.w	r2, [r3], #4
 801243e:	e7db      	b.n	80123f8 <__multiply+0x50>
 8012440:	f8b3 a000 	ldrh.w	sl, [r3]
 8012444:	f1ba 0f00 	cmp.w	sl, #0
 8012448:	d020      	beq.n	801248c <__multiply+0xe4>
 801244a:	f105 0e14 	add.w	lr, r5, #20
 801244e:	46b1      	mov	r9, r6
 8012450:	2200      	movs	r2, #0
 8012452:	f85e 4b04 	ldr.w	r4, [lr], #4
 8012456:	f8d9 b000 	ldr.w	fp, [r9]
 801245a:	b2a1      	uxth	r1, r4
 801245c:	fa1f fb8b 	uxth.w	fp, fp
 8012460:	fb0a b101 	mla	r1, sl, r1, fp
 8012464:	4411      	add	r1, r2
 8012466:	f8d9 2000 	ldr.w	r2, [r9]
 801246a:	0c24      	lsrs	r4, r4, #16
 801246c:	0c12      	lsrs	r2, r2, #16
 801246e:	fb0a 2404 	mla	r4, sl, r4, r2
 8012472:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8012476:	b289      	uxth	r1, r1
 8012478:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801247c:	45f4      	cmp	ip, lr
 801247e:	f849 1b04 	str.w	r1, [r9], #4
 8012482:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8012486:	d8e4      	bhi.n	8012452 <__multiply+0xaa>
 8012488:	9901      	ldr	r1, [sp, #4]
 801248a:	5072      	str	r2, [r6, r1]
 801248c:	9a03      	ldr	r2, [sp, #12]
 801248e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012492:	3304      	adds	r3, #4
 8012494:	f1b9 0f00 	cmp.w	r9, #0
 8012498:	d01f      	beq.n	80124da <__multiply+0x132>
 801249a:	6834      	ldr	r4, [r6, #0]
 801249c:	f105 0114 	add.w	r1, r5, #20
 80124a0:	46b6      	mov	lr, r6
 80124a2:	f04f 0a00 	mov.w	sl, #0
 80124a6:	880a      	ldrh	r2, [r1, #0]
 80124a8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80124ac:	fb09 b202 	mla	r2, r9, r2, fp
 80124b0:	4492      	add	sl, r2
 80124b2:	b2a4      	uxth	r4, r4
 80124b4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80124b8:	f84e 4b04 	str.w	r4, [lr], #4
 80124bc:	f851 4b04 	ldr.w	r4, [r1], #4
 80124c0:	f8be 2000 	ldrh.w	r2, [lr]
 80124c4:	0c24      	lsrs	r4, r4, #16
 80124c6:	fb09 2404 	mla	r4, r9, r4, r2
 80124ca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80124ce:	458c      	cmp	ip, r1
 80124d0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80124d4:	d8e7      	bhi.n	80124a6 <__multiply+0xfe>
 80124d6:	9a01      	ldr	r2, [sp, #4]
 80124d8:	50b4      	str	r4, [r6, r2]
 80124da:	3604      	adds	r6, #4
 80124dc:	e7a3      	b.n	8012426 <__multiply+0x7e>
 80124de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d1a5      	bne.n	8012432 <__multiply+0x8a>
 80124e6:	3f01      	subs	r7, #1
 80124e8:	e7a1      	b.n	801242e <__multiply+0x86>
 80124ea:	bf00      	nop
 80124ec:	08014ad7 	.word	0x08014ad7
 80124f0:	08014b68 	.word	0x08014b68

080124f4 <__pow5mult>:
 80124f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124f8:	4615      	mov	r5, r2
 80124fa:	f012 0203 	ands.w	r2, r2, #3
 80124fe:	4606      	mov	r6, r0
 8012500:	460f      	mov	r7, r1
 8012502:	d007      	beq.n	8012514 <__pow5mult+0x20>
 8012504:	4c25      	ldr	r4, [pc, #148]	; (801259c <__pow5mult+0xa8>)
 8012506:	3a01      	subs	r2, #1
 8012508:	2300      	movs	r3, #0
 801250a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801250e:	f7ff fe51 	bl	80121b4 <__multadd>
 8012512:	4607      	mov	r7, r0
 8012514:	10ad      	asrs	r5, r5, #2
 8012516:	d03d      	beq.n	8012594 <__pow5mult+0xa0>
 8012518:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801251a:	b97c      	cbnz	r4, 801253c <__pow5mult+0x48>
 801251c:	2010      	movs	r0, #16
 801251e:	f7fc f90f 	bl	800e740 <malloc>
 8012522:	4602      	mov	r2, r0
 8012524:	6270      	str	r0, [r6, #36]	; 0x24
 8012526:	b928      	cbnz	r0, 8012534 <__pow5mult+0x40>
 8012528:	4b1d      	ldr	r3, [pc, #116]	; (80125a0 <__pow5mult+0xac>)
 801252a:	481e      	ldr	r0, [pc, #120]	; (80125a4 <__pow5mult+0xb0>)
 801252c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012530:	f7fe fa5c 	bl	80109ec <__assert_func>
 8012534:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012538:	6004      	str	r4, [r0, #0]
 801253a:	60c4      	str	r4, [r0, #12]
 801253c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012540:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012544:	b94c      	cbnz	r4, 801255a <__pow5mult+0x66>
 8012546:	f240 2171 	movw	r1, #625	; 0x271
 801254a:	4630      	mov	r0, r6
 801254c:	f7ff ff16 	bl	801237c <__i2b>
 8012550:	2300      	movs	r3, #0
 8012552:	f8c8 0008 	str.w	r0, [r8, #8]
 8012556:	4604      	mov	r4, r0
 8012558:	6003      	str	r3, [r0, #0]
 801255a:	f04f 0900 	mov.w	r9, #0
 801255e:	07eb      	lsls	r3, r5, #31
 8012560:	d50a      	bpl.n	8012578 <__pow5mult+0x84>
 8012562:	4639      	mov	r1, r7
 8012564:	4622      	mov	r2, r4
 8012566:	4630      	mov	r0, r6
 8012568:	f7ff ff1e 	bl	80123a8 <__multiply>
 801256c:	4639      	mov	r1, r7
 801256e:	4680      	mov	r8, r0
 8012570:	4630      	mov	r0, r6
 8012572:	f7ff fdfd 	bl	8012170 <_Bfree>
 8012576:	4647      	mov	r7, r8
 8012578:	106d      	asrs	r5, r5, #1
 801257a:	d00b      	beq.n	8012594 <__pow5mult+0xa0>
 801257c:	6820      	ldr	r0, [r4, #0]
 801257e:	b938      	cbnz	r0, 8012590 <__pow5mult+0x9c>
 8012580:	4622      	mov	r2, r4
 8012582:	4621      	mov	r1, r4
 8012584:	4630      	mov	r0, r6
 8012586:	f7ff ff0f 	bl	80123a8 <__multiply>
 801258a:	6020      	str	r0, [r4, #0]
 801258c:	f8c0 9000 	str.w	r9, [r0]
 8012590:	4604      	mov	r4, r0
 8012592:	e7e4      	b.n	801255e <__pow5mult+0x6a>
 8012594:	4638      	mov	r0, r7
 8012596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801259a:	bf00      	nop
 801259c:	08014cb8 	.word	0x08014cb8
 80125a0:	08014a61 	.word	0x08014a61
 80125a4:	08014b68 	.word	0x08014b68

080125a8 <__lshift>:
 80125a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125ac:	460c      	mov	r4, r1
 80125ae:	6849      	ldr	r1, [r1, #4]
 80125b0:	6923      	ldr	r3, [r4, #16]
 80125b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80125b6:	68a3      	ldr	r3, [r4, #8]
 80125b8:	4607      	mov	r7, r0
 80125ba:	4691      	mov	r9, r2
 80125bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80125c0:	f108 0601 	add.w	r6, r8, #1
 80125c4:	42b3      	cmp	r3, r6
 80125c6:	db0b      	blt.n	80125e0 <__lshift+0x38>
 80125c8:	4638      	mov	r0, r7
 80125ca:	f7ff fd91 	bl	80120f0 <_Balloc>
 80125ce:	4605      	mov	r5, r0
 80125d0:	b948      	cbnz	r0, 80125e6 <__lshift+0x3e>
 80125d2:	4602      	mov	r2, r0
 80125d4:	4b28      	ldr	r3, [pc, #160]	; (8012678 <__lshift+0xd0>)
 80125d6:	4829      	ldr	r0, [pc, #164]	; (801267c <__lshift+0xd4>)
 80125d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80125dc:	f7fe fa06 	bl	80109ec <__assert_func>
 80125e0:	3101      	adds	r1, #1
 80125e2:	005b      	lsls	r3, r3, #1
 80125e4:	e7ee      	b.n	80125c4 <__lshift+0x1c>
 80125e6:	2300      	movs	r3, #0
 80125e8:	f100 0114 	add.w	r1, r0, #20
 80125ec:	f100 0210 	add.w	r2, r0, #16
 80125f0:	4618      	mov	r0, r3
 80125f2:	4553      	cmp	r3, sl
 80125f4:	db33      	blt.n	801265e <__lshift+0xb6>
 80125f6:	6920      	ldr	r0, [r4, #16]
 80125f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80125fc:	f104 0314 	add.w	r3, r4, #20
 8012600:	f019 091f 	ands.w	r9, r9, #31
 8012604:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012608:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801260c:	d02b      	beq.n	8012666 <__lshift+0xbe>
 801260e:	f1c9 0e20 	rsb	lr, r9, #32
 8012612:	468a      	mov	sl, r1
 8012614:	2200      	movs	r2, #0
 8012616:	6818      	ldr	r0, [r3, #0]
 8012618:	fa00 f009 	lsl.w	r0, r0, r9
 801261c:	4302      	orrs	r2, r0
 801261e:	f84a 2b04 	str.w	r2, [sl], #4
 8012622:	f853 2b04 	ldr.w	r2, [r3], #4
 8012626:	459c      	cmp	ip, r3
 8012628:	fa22 f20e 	lsr.w	r2, r2, lr
 801262c:	d8f3      	bhi.n	8012616 <__lshift+0x6e>
 801262e:	ebac 0304 	sub.w	r3, ip, r4
 8012632:	3b15      	subs	r3, #21
 8012634:	f023 0303 	bic.w	r3, r3, #3
 8012638:	3304      	adds	r3, #4
 801263a:	f104 0015 	add.w	r0, r4, #21
 801263e:	4584      	cmp	ip, r0
 8012640:	bf38      	it	cc
 8012642:	2304      	movcc	r3, #4
 8012644:	50ca      	str	r2, [r1, r3]
 8012646:	b10a      	cbz	r2, 801264c <__lshift+0xa4>
 8012648:	f108 0602 	add.w	r6, r8, #2
 801264c:	3e01      	subs	r6, #1
 801264e:	4638      	mov	r0, r7
 8012650:	612e      	str	r6, [r5, #16]
 8012652:	4621      	mov	r1, r4
 8012654:	f7ff fd8c 	bl	8012170 <_Bfree>
 8012658:	4628      	mov	r0, r5
 801265a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801265e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012662:	3301      	adds	r3, #1
 8012664:	e7c5      	b.n	80125f2 <__lshift+0x4a>
 8012666:	3904      	subs	r1, #4
 8012668:	f853 2b04 	ldr.w	r2, [r3], #4
 801266c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012670:	459c      	cmp	ip, r3
 8012672:	d8f9      	bhi.n	8012668 <__lshift+0xc0>
 8012674:	e7ea      	b.n	801264c <__lshift+0xa4>
 8012676:	bf00      	nop
 8012678:	08014ad7 	.word	0x08014ad7
 801267c:	08014b68 	.word	0x08014b68

08012680 <__mcmp>:
 8012680:	b530      	push	{r4, r5, lr}
 8012682:	6902      	ldr	r2, [r0, #16]
 8012684:	690c      	ldr	r4, [r1, #16]
 8012686:	1b12      	subs	r2, r2, r4
 8012688:	d10e      	bne.n	80126a8 <__mcmp+0x28>
 801268a:	f100 0314 	add.w	r3, r0, #20
 801268e:	3114      	adds	r1, #20
 8012690:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012694:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012698:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801269c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80126a0:	42a5      	cmp	r5, r4
 80126a2:	d003      	beq.n	80126ac <__mcmp+0x2c>
 80126a4:	d305      	bcc.n	80126b2 <__mcmp+0x32>
 80126a6:	2201      	movs	r2, #1
 80126a8:	4610      	mov	r0, r2
 80126aa:	bd30      	pop	{r4, r5, pc}
 80126ac:	4283      	cmp	r3, r0
 80126ae:	d3f3      	bcc.n	8012698 <__mcmp+0x18>
 80126b0:	e7fa      	b.n	80126a8 <__mcmp+0x28>
 80126b2:	f04f 32ff 	mov.w	r2, #4294967295
 80126b6:	e7f7      	b.n	80126a8 <__mcmp+0x28>

080126b8 <__mdiff>:
 80126b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126bc:	460c      	mov	r4, r1
 80126be:	4606      	mov	r6, r0
 80126c0:	4611      	mov	r1, r2
 80126c2:	4620      	mov	r0, r4
 80126c4:	4617      	mov	r7, r2
 80126c6:	f7ff ffdb 	bl	8012680 <__mcmp>
 80126ca:	1e05      	subs	r5, r0, #0
 80126cc:	d110      	bne.n	80126f0 <__mdiff+0x38>
 80126ce:	4629      	mov	r1, r5
 80126d0:	4630      	mov	r0, r6
 80126d2:	f7ff fd0d 	bl	80120f0 <_Balloc>
 80126d6:	b930      	cbnz	r0, 80126e6 <__mdiff+0x2e>
 80126d8:	4b39      	ldr	r3, [pc, #228]	; (80127c0 <__mdiff+0x108>)
 80126da:	4602      	mov	r2, r0
 80126dc:	f240 2132 	movw	r1, #562	; 0x232
 80126e0:	4838      	ldr	r0, [pc, #224]	; (80127c4 <__mdiff+0x10c>)
 80126e2:	f7fe f983 	bl	80109ec <__assert_func>
 80126e6:	2301      	movs	r3, #1
 80126e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80126ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126f0:	bfa4      	itt	ge
 80126f2:	463b      	movge	r3, r7
 80126f4:	4627      	movge	r7, r4
 80126f6:	4630      	mov	r0, r6
 80126f8:	6879      	ldr	r1, [r7, #4]
 80126fa:	bfa6      	itte	ge
 80126fc:	461c      	movge	r4, r3
 80126fe:	2500      	movge	r5, #0
 8012700:	2501      	movlt	r5, #1
 8012702:	f7ff fcf5 	bl	80120f0 <_Balloc>
 8012706:	b920      	cbnz	r0, 8012712 <__mdiff+0x5a>
 8012708:	4b2d      	ldr	r3, [pc, #180]	; (80127c0 <__mdiff+0x108>)
 801270a:	4602      	mov	r2, r0
 801270c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012710:	e7e6      	b.n	80126e0 <__mdiff+0x28>
 8012712:	693e      	ldr	r6, [r7, #16]
 8012714:	60c5      	str	r5, [r0, #12]
 8012716:	6925      	ldr	r5, [r4, #16]
 8012718:	f107 0114 	add.w	r1, r7, #20
 801271c:	f104 0914 	add.w	r9, r4, #20
 8012720:	f100 0e14 	add.w	lr, r0, #20
 8012724:	f107 0210 	add.w	r2, r7, #16
 8012728:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801272c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8012730:	46f2      	mov	sl, lr
 8012732:	2700      	movs	r7, #0
 8012734:	f859 3b04 	ldr.w	r3, [r9], #4
 8012738:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801273c:	fa1f f883 	uxth.w	r8, r3
 8012740:	fa17 f78b 	uxtah	r7, r7, fp
 8012744:	0c1b      	lsrs	r3, r3, #16
 8012746:	eba7 0808 	sub.w	r8, r7, r8
 801274a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801274e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012752:	fa1f f888 	uxth.w	r8, r8
 8012756:	141f      	asrs	r7, r3, #16
 8012758:	454d      	cmp	r5, r9
 801275a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801275e:	f84a 3b04 	str.w	r3, [sl], #4
 8012762:	d8e7      	bhi.n	8012734 <__mdiff+0x7c>
 8012764:	1b2b      	subs	r3, r5, r4
 8012766:	3b15      	subs	r3, #21
 8012768:	f023 0303 	bic.w	r3, r3, #3
 801276c:	3304      	adds	r3, #4
 801276e:	3415      	adds	r4, #21
 8012770:	42a5      	cmp	r5, r4
 8012772:	bf38      	it	cc
 8012774:	2304      	movcc	r3, #4
 8012776:	4419      	add	r1, r3
 8012778:	4473      	add	r3, lr
 801277a:	469e      	mov	lr, r3
 801277c:	460d      	mov	r5, r1
 801277e:	4565      	cmp	r5, ip
 8012780:	d30e      	bcc.n	80127a0 <__mdiff+0xe8>
 8012782:	f10c 0203 	add.w	r2, ip, #3
 8012786:	1a52      	subs	r2, r2, r1
 8012788:	f022 0203 	bic.w	r2, r2, #3
 801278c:	3903      	subs	r1, #3
 801278e:	458c      	cmp	ip, r1
 8012790:	bf38      	it	cc
 8012792:	2200      	movcc	r2, #0
 8012794:	441a      	add	r2, r3
 8012796:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801279a:	b17b      	cbz	r3, 80127bc <__mdiff+0x104>
 801279c:	6106      	str	r6, [r0, #16]
 801279e:	e7a5      	b.n	80126ec <__mdiff+0x34>
 80127a0:	f855 8b04 	ldr.w	r8, [r5], #4
 80127a4:	fa17 f488 	uxtah	r4, r7, r8
 80127a8:	1422      	asrs	r2, r4, #16
 80127aa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80127ae:	b2a4      	uxth	r4, r4
 80127b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80127b4:	f84e 4b04 	str.w	r4, [lr], #4
 80127b8:	1417      	asrs	r7, r2, #16
 80127ba:	e7e0      	b.n	801277e <__mdiff+0xc6>
 80127bc:	3e01      	subs	r6, #1
 80127be:	e7ea      	b.n	8012796 <__mdiff+0xde>
 80127c0:	08014ad7 	.word	0x08014ad7
 80127c4:	08014b68 	.word	0x08014b68

080127c8 <__ulp>:
 80127c8:	b082      	sub	sp, #8
 80127ca:	ed8d 0b00 	vstr	d0, [sp]
 80127ce:	9b01      	ldr	r3, [sp, #4]
 80127d0:	4912      	ldr	r1, [pc, #72]	; (801281c <__ulp+0x54>)
 80127d2:	4019      	ands	r1, r3
 80127d4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80127d8:	2900      	cmp	r1, #0
 80127da:	dd05      	ble.n	80127e8 <__ulp+0x20>
 80127dc:	2200      	movs	r2, #0
 80127de:	460b      	mov	r3, r1
 80127e0:	ec43 2b10 	vmov	d0, r2, r3
 80127e4:	b002      	add	sp, #8
 80127e6:	4770      	bx	lr
 80127e8:	4249      	negs	r1, r1
 80127ea:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80127ee:	ea4f 5021 	mov.w	r0, r1, asr #20
 80127f2:	f04f 0200 	mov.w	r2, #0
 80127f6:	f04f 0300 	mov.w	r3, #0
 80127fa:	da04      	bge.n	8012806 <__ulp+0x3e>
 80127fc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012800:	fa41 f300 	asr.w	r3, r1, r0
 8012804:	e7ec      	b.n	80127e0 <__ulp+0x18>
 8012806:	f1a0 0114 	sub.w	r1, r0, #20
 801280a:	291e      	cmp	r1, #30
 801280c:	bfda      	itte	le
 801280e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012812:	fa20 f101 	lsrle.w	r1, r0, r1
 8012816:	2101      	movgt	r1, #1
 8012818:	460a      	mov	r2, r1
 801281a:	e7e1      	b.n	80127e0 <__ulp+0x18>
 801281c:	7ff00000 	.word	0x7ff00000

08012820 <__b2d>:
 8012820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012822:	6905      	ldr	r5, [r0, #16]
 8012824:	f100 0714 	add.w	r7, r0, #20
 8012828:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801282c:	1f2e      	subs	r6, r5, #4
 801282e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012832:	4620      	mov	r0, r4
 8012834:	f7ff fd52 	bl	80122dc <__hi0bits>
 8012838:	f1c0 0320 	rsb	r3, r0, #32
 801283c:	280a      	cmp	r0, #10
 801283e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80128bc <__b2d+0x9c>
 8012842:	600b      	str	r3, [r1, #0]
 8012844:	dc14      	bgt.n	8012870 <__b2d+0x50>
 8012846:	f1c0 0e0b 	rsb	lr, r0, #11
 801284a:	fa24 f10e 	lsr.w	r1, r4, lr
 801284e:	42b7      	cmp	r7, r6
 8012850:	ea41 030c 	orr.w	r3, r1, ip
 8012854:	bf34      	ite	cc
 8012856:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801285a:	2100      	movcs	r1, #0
 801285c:	3015      	adds	r0, #21
 801285e:	fa04 f000 	lsl.w	r0, r4, r0
 8012862:	fa21 f10e 	lsr.w	r1, r1, lr
 8012866:	ea40 0201 	orr.w	r2, r0, r1
 801286a:	ec43 2b10 	vmov	d0, r2, r3
 801286e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012870:	42b7      	cmp	r7, r6
 8012872:	bf3a      	itte	cc
 8012874:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012878:	f1a5 0608 	subcc.w	r6, r5, #8
 801287c:	2100      	movcs	r1, #0
 801287e:	380b      	subs	r0, #11
 8012880:	d017      	beq.n	80128b2 <__b2d+0x92>
 8012882:	f1c0 0c20 	rsb	ip, r0, #32
 8012886:	fa04 f500 	lsl.w	r5, r4, r0
 801288a:	42be      	cmp	r6, r7
 801288c:	fa21 f40c 	lsr.w	r4, r1, ip
 8012890:	ea45 0504 	orr.w	r5, r5, r4
 8012894:	bf8c      	ite	hi
 8012896:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801289a:	2400      	movls	r4, #0
 801289c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80128a0:	fa01 f000 	lsl.w	r0, r1, r0
 80128a4:	fa24 f40c 	lsr.w	r4, r4, ip
 80128a8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80128ac:	ea40 0204 	orr.w	r2, r0, r4
 80128b0:	e7db      	b.n	801286a <__b2d+0x4a>
 80128b2:	ea44 030c 	orr.w	r3, r4, ip
 80128b6:	460a      	mov	r2, r1
 80128b8:	e7d7      	b.n	801286a <__b2d+0x4a>
 80128ba:	bf00      	nop
 80128bc:	3ff00000 	.word	0x3ff00000

080128c0 <__d2b>:
 80128c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80128c4:	4689      	mov	r9, r1
 80128c6:	2101      	movs	r1, #1
 80128c8:	ec57 6b10 	vmov	r6, r7, d0
 80128cc:	4690      	mov	r8, r2
 80128ce:	f7ff fc0f 	bl	80120f0 <_Balloc>
 80128d2:	4604      	mov	r4, r0
 80128d4:	b930      	cbnz	r0, 80128e4 <__d2b+0x24>
 80128d6:	4602      	mov	r2, r0
 80128d8:	4b25      	ldr	r3, [pc, #148]	; (8012970 <__d2b+0xb0>)
 80128da:	4826      	ldr	r0, [pc, #152]	; (8012974 <__d2b+0xb4>)
 80128dc:	f240 310a 	movw	r1, #778	; 0x30a
 80128e0:	f7fe f884 	bl	80109ec <__assert_func>
 80128e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80128e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80128ec:	bb35      	cbnz	r5, 801293c <__d2b+0x7c>
 80128ee:	2e00      	cmp	r6, #0
 80128f0:	9301      	str	r3, [sp, #4]
 80128f2:	d028      	beq.n	8012946 <__d2b+0x86>
 80128f4:	4668      	mov	r0, sp
 80128f6:	9600      	str	r6, [sp, #0]
 80128f8:	f7ff fd10 	bl	801231c <__lo0bits>
 80128fc:	9900      	ldr	r1, [sp, #0]
 80128fe:	b300      	cbz	r0, 8012942 <__d2b+0x82>
 8012900:	9a01      	ldr	r2, [sp, #4]
 8012902:	f1c0 0320 	rsb	r3, r0, #32
 8012906:	fa02 f303 	lsl.w	r3, r2, r3
 801290a:	430b      	orrs	r3, r1
 801290c:	40c2      	lsrs	r2, r0
 801290e:	6163      	str	r3, [r4, #20]
 8012910:	9201      	str	r2, [sp, #4]
 8012912:	9b01      	ldr	r3, [sp, #4]
 8012914:	61a3      	str	r3, [r4, #24]
 8012916:	2b00      	cmp	r3, #0
 8012918:	bf14      	ite	ne
 801291a:	2202      	movne	r2, #2
 801291c:	2201      	moveq	r2, #1
 801291e:	6122      	str	r2, [r4, #16]
 8012920:	b1d5      	cbz	r5, 8012958 <__d2b+0x98>
 8012922:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012926:	4405      	add	r5, r0
 8012928:	f8c9 5000 	str.w	r5, [r9]
 801292c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012930:	f8c8 0000 	str.w	r0, [r8]
 8012934:	4620      	mov	r0, r4
 8012936:	b003      	add	sp, #12
 8012938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801293c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012940:	e7d5      	b.n	80128ee <__d2b+0x2e>
 8012942:	6161      	str	r1, [r4, #20]
 8012944:	e7e5      	b.n	8012912 <__d2b+0x52>
 8012946:	a801      	add	r0, sp, #4
 8012948:	f7ff fce8 	bl	801231c <__lo0bits>
 801294c:	9b01      	ldr	r3, [sp, #4]
 801294e:	6163      	str	r3, [r4, #20]
 8012950:	2201      	movs	r2, #1
 8012952:	6122      	str	r2, [r4, #16]
 8012954:	3020      	adds	r0, #32
 8012956:	e7e3      	b.n	8012920 <__d2b+0x60>
 8012958:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801295c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012960:	f8c9 0000 	str.w	r0, [r9]
 8012964:	6918      	ldr	r0, [r3, #16]
 8012966:	f7ff fcb9 	bl	80122dc <__hi0bits>
 801296a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801296e:	e7df      	b.n	8012930 <__d2b+0x70>
 8012970:	08014ad7 	.word	0x08014ad7
 8012974:	08014b68 	.word	0x08014b68

08012978 <__ratio>:
 8012978:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801297c:	4688      	mov	r8, r1
 801297e:	4669      	mov	r1, sp
 8012980:	4681      	mov	r9, r0
 8012982:	f7ff ff4d 	bl	8012820 <__b2d>
 8012986:	a901      	add	r1, sp, #4
 8012988:	4640      	mov	r0, r8
 801298a:	ec55 4b10 	vmov	r4, r5, d0
 801298e:	f7ff ff47 	bl	8012820 <__b2d>
 8012992:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012996:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801299a:	eba3 0c02 	sub.w	ip, r3, r2
 801299e:	e9dd 3200 	ldrd	r3, r2, [sp]
 80129a2:	1a9b      	subs	r3, r3, r2
 80129a4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80129a8:	ec51 0b10 	vmov	r0, r1, d0
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	bfd6      	itet	le
 80129b0:	460a      	movle	r2, r1
 80129b2:	462a      	movgt	r2, r5
 80129b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80129b8:	468b      	mov	fp, r1
 80129ba:	462f      	mov	r7, r5
 80129bc:	bfd4      	ite	le
 80129be:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80129c2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80129c6:	4620      	mov	r0, r4
 80129c8:	ee10 2a10 	vmov	r2, s0
 80129cc:	465b      	mov	r3, fp
 80129ce:	4639      	mov	r1, r7
 80129d0:	f7ed ff4c 	bl	800086c <__aeabi_ddiv>
 80129d4:	ec41 0b10 	vmov	d0, r0, r1
 80129d8:	b003      	add	sp, #12
 80129da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080129de <__copybits>:
 80129de:	3901      	subs	r1, #1
 80129e0:	b570      	push	{r4, r5, r6, lr}
 80129e2:	1149      	asrs	r1, r1, #5
 80129e4:	6914      	ldr	r4, [r2, #16]
 80129e6:	3101      	adds	r1, #1
 80129e8:	f102 0314 	add.w	r3, r2, #20
 80129ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80129f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80129f4:	1f05      	subs	r5, r0, #4
 80129f6:	42a3      	cmp	r3, r4
 80129f8:	d30c      	bcc.n	8012a14 <__copybits+0x36>
 80129fa:	1aa3      	subs	r3, r4, r2
 80129fc:	3b11      	subs	r3, #17
 80129fe:	f023 0303 	bic.w	r3, r3, #3
 8012a02:	3211      	adds	r2, #17
 8012a04:	42a2      	cmp	r2, r4
 8012a06:	bf88      	it	hi
 8012a08:	2300      	movhi	r3, #0
 8012a0a:	4418      	add	r0, r3
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	4288      	cmp	r0, r1
 8012a10:	d305      	bcc.n	8012a1e <__copybits+0x40>
 8012a12:	bd70      	pop	{r4, r5, r6, pc}
 8012a14:	f853 6b04 	ldr.w	r6, [r3], #4
 8012a18:	f845 6f04 	str.w	r6, [r5, #4]!
 8012a1c:	e7eb      	b.n	80129f6 <__copybits+0x18>
 8012a1e:	f840 3b04 	str.w	r3, [r0], #4
 8012a22:	e7f4      	b.n	8012a0e <__copybits+0x30>

08012a24 <__any_on>:
 8012a24:	f100 0214 	add.w	r2, r0, #20
 8012a28:	6900      	ldr	r0, [r0, #16]
 8012a2a:	114b      	asrs	r3, r1, #5
 8012a2c:	4298      	cmp	r0, r3
 8012a2e:	b510      	push	{r4, lr}
 8012a30:	db11      	blt.n	8012a56 <__any_on+0x32>
 8012a32:	dd0a      	ble.n	8012a4a <__any_on+0x26>
 8012a34:	f011 011f 	ands.w	r1, r1, #31
 8012a38:	d007      	beq.n	8012a4a <__any_on+0x26>
 8012a3a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012a3e:	fa24 f001 	lsr.w	r0, r4, r1
 8012a42:	fa00 f101 	lsl.w	r1, r0, r1
 8012a46:	428c      	cmp	r4, r1
 8012a48:	d10b      	bne.n	8012a62 <__any_on+0x3e>
 8012a4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012a4e:	4293      	cmp	r3, r2
 8012a50:	d803      	bhi.n	8012a5a <__any_on+0x36>
 8012a52:	2000      	movs	r0, #0
 8012a54:	bd10      	pop	{r4, pc}
 8012a56:	4603      	mov	r3, r0
 8012a58:	e7f7      	b.n	8012a4a <__any_on+0x26>
 8012a5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012a5e:	2900      	cmp	r1, #0
 8012a60:	d0f5      	beq.n	8012a4e <__any_on+0x2a>
 8012a62:	2001      	movs	r0, #1
 8012a64:	e7f6      	b.n	8012a54 <__any_on+0x30>

08012a66 <_calloc_r>:
 8012a66:	b513      	push	{r0, r1, r4, lr}
 8012a68:	434a      	muls	r2, r1
 8012a6a:	4611      	mov	r1, r2
 8012a6c:	9201      	str	r2, [sp, #4]
 8012a6e:	f7fb feef 	bl	800e850 <_malloc_r>
 8012a72:	4604      	mov	r4, r0
 8012a74:	b118      	cbz	r0, 8012a7e <_calloc_r+0x18>
 8012a76:	9a01      	ldr	r2, [sp, #4]
 8012a78:	2100      	movs	r1, #0
 8012a7a:	f7fb fe91 	bl	800e7a0 <memset>
 8012a7e:	4620      	mov	r0, r4
 8012a80:	b002      	add	sp, #8
 8012a82:	bd10      	pop	{r4, pc}

08012a84 <_realloc_r>:
 8012a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a86:	4607      	mov	r7, r0
 8012a88:	4614      	mov	r4, r2
 8012a8a:	460e      	mov	r6, r1
 8012a8c:	b921      	cbnz	r1, 8012a98 <_realloc_r+0x14>
 8012a8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012a92:	4611      	mov	r1, r2
 8012a94:	f7fb bedc 	b.w	800e850 <_malloc_r>
 8012a98:	b922      	cbnz	r2, 8012aa4 <_realloc_r+0x20>
 8012a9a:	f7fb fe89 	bl	800e7b0 <_free_r>
 8012a9e:	4625      	mov	r5, r4
 8012aa0:	4628      	mov	r0, r5
 8012aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012aa4:	f000 fe9e 	bl	80137e4 <_malloc_usable_size_r>
 8012aa8:	42a0      	cmp	r0, r4
 8012aaa:	d20f      	bcs.n	8012acc <_realloc_r+0x48>
 8012aac:	4621      	mov	r1, r4
 8012aae:	4638      	mov	r0, r7
 8012ab0:	f7fb fece 	bl	800e850 <_malloc_r>
 8012ab4:	4605      	mov	r5, r0
 8012ab6:	2800      	cmp	r0, #0
 8012ab8:	d0f2      	beq.n	8012aa0 <_realloc_r+0x1c>
 8012aba:	4631      	mov	r1, r6
 8012abc:	4622      	mov	r2, r4
 8012abe:	f7fb fe47 	bl	800e750 <memcpy>
 8012ac2:	4631      	mov	r1, r6
 8012ac4:	4638      	mov	r0, r7
 8012ac6:	f7fb fe73 	bl	800e7b0 <_free_r>
 8012aca:	e7e9      	b.n	8012aa0 <_realloc_r+0x1c>
 8012acc:	4635      	mov	r5, r6
 8012ace:	e7e7      	b.n	8012aa0 <_realloc_r+0x1c>

08012ad0 <__ssputs_r>:
 8012ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ad4:	688e      	ldr	r6, [r1, #8]
 8012ad6:	429e      	cmp	r6, r3
 8012ad8:	4682      	mov	sl, r0
 8012ada:	460c      	mov	r4, r1
 8012adc:	4690      	mov	r8, r2
 8012ade:	461f      	mov	r7, r3
 8012ae0:	d838      	bhi.n	8012b54 <__ssputs_r+0x84>
 8012ae2:	898a      	ldrh	r2, [r1, #12]
 8012ae4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012ae8:	d032      	beq.n	8012b50 <__ssputs_r+0x80>
 8012aea:	6825      	ldr	r5, [r4, #0]
 8012aec:	6909      	ldr	r1, [r1, #16]
 8012aee:	eba5 0901 	sub.w	r9, r5, r1
 8012af2:	6965      	ldr	r5, [r4, #20]
 8012af4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012af8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012afc:	3301      	adds	r3, #1
 8012afe:	444b      	add	r3, r9
 8012b00:	106d      	asrs	r5, r5, #1
 8012b02:	429d      	cmp	r5, r3
 8012b04:	bf38      	it	cc
 8012b06:	461d      	movcc	r5, r3
 8012b08:	0553      	lsls	r3, r2, #21
 8012b0a:	d531      	bpl.n	8012b70 <__ssputs_r+0xa0>
 8012b0c:	4629      	mov	r1, r5
 8012b0e:	f7fb fe9f 	bl	800e850 <_malloc_r>
 8012b12:	4606      	mov	r6, r0
 8012b14:	b950      	cbnz	r0, 8012b2c <__ssputs_r+0x5c>
 8012b16:	230c      	movs	r3, #12
 8012b18:	f8ca 3000 	str.w	r3, [sl]
 8012b1c:	89a3      	ldrh	r3, [r4, #12]
 8012b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b22:	81a3      	strh	r3, [r4, #12]
 8012b24:	f04f 30ff 	mov.w	r0, #4294967295
 8012b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b2c:	6921      	ldr	r1, [r4, #16]
 8012b2e:	464a      	mov	r2, r9
 8012b30:	f7fb fe0e 	bl	800e750 <memcpy>
 8012b34:	89a3      	ldrh	r3, [r4, #12]
 8012b36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b3e:	81a3      	strh	r3, [r4, #12]
 8012b40:	6126      	str	r6, [r4, #16]
 8012b42:	6165      	str	r5, [r4, #20]
 8012b44:	444e      	add	r6, r9
 8012b46:	eba5 0509 	sub.w	r5, r5, r9
 8012b4a:	6026      	str	r6, [r4, #0]
 8012b4c:	60a5      	str	r5, [r4, #8]
 8012b4e:	463e      	mov	r6, r7
 8012b50:	42be      	cmp	r6, r7
 8012b52:	d900      	bls.n	8012b56 <__ssputs_r+0x86>
 8012b54:	463e      	mov	r6, r7
 8012b56:	4632      	mov	r2, r6
 8012b58:	6820      	ldr	r0, [r4, #0]
 8012b5a:	4641      	mov	r1, r8
 8012b5c:	f7fb fe06 	bl	800e76c <memmove>
 8012b60:	68a3      	ldr	r3, [r4, #8]
 8012b62:	6822      	ldr	r2, [r4, #0]
 8012b64:	1b9b      	subs	r3, r3, r6
 8012b66:	4432      	add	r2, r6
 8012b68:	60a3      	str	r3, [r4, #8]
 8012b6a:	6022      	str	r2, [r4, #0]
 8012b6c:	2000      	movs	r0, #0
 8012b6e:	e7db      	b.n	8012b28 <__ssputs_r+0x58>
 8012b70:	462a      	mov	r2, r5
 8012b72:	f7ff ff87 	bl	8012a84 <_realloc_r>
 8012b76:	4606      	mov	r6, r0
 8012b78:	2800      	cmp	r0, #0
 8012b7a:	d1e1      	bne.n	8012b40 <__ssputs_r+0x70>
 8012b7c:	6921      	ldr	r1, [r4, #16]
 8012b7e:	4650      	mov	r0, sl
 8012b80:	f7fb fe16 	bl	800e7b0 <_free_r>
 8012b84:	e7c7      	b.n	8012b16 <__ssputs_r+0x46>
	...

08012b88 <_svfiprintf_r>:
 8012b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b8c:	4698      	mov	r8, r3
 8012b8e:	898b      	ldrh	r3, [r1, #12]
 8012b90:	061b      	lsls	r3, r3, #24
 8012b92:	b09d      	sub	sp, #116	; 0x74
 8012b94:	4607      	mov	r7, r0
 8012b96:	460d      	mov	r5, r1
 8012b98:	4614      	mov	r4, r2
 8012b9a:	d50e      	bpl.n	8012bba <_svfiprintf_r+0x32>
 8012b9c:	690b      	ldr	r3, [r1, #16]
 8012b9e:	b963      	cbnz	r3, 8012bba <_svfiprintf_r+0x32>
 8012ba0:	2140      	movs	r1, #64	; 0x40
 8012ba2:	f7fb fe55 	bl	800e850 <_malloc_r>
 8012ba6:	6028      	str	r0, [r5, #0]
 8012ba8:	6128      	str	r0, [r5, #16]
 8012baa:	b920      	cbnz	r0, 8012bb6 <_svfiprintf_r+0x2e>
 8012bac:	230c      	movs	r3, #12
 8012bae:	603b      	str	r3, [r7, #0]
 8012bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8012bb4:	e0d1      	b.n	8012d5a <_svfiprintf_r+0x1d2>
 8012bb6:	2340      	movs	r3, #64	; 0x40
 8012bb8:	616b      	str	r3, [r5, #20]
 8012bba:	2300      	movs	r3, #0
 8012bbc:	9309      	str	r3, [sp, #36]	; 0x24
 8012bbe:	2320      	movs	r3, #32
 8012bc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012bc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8012bc8:	2330      	movs	r3, #48	; 0x30
 8012bca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012d74 <_svfiprintf_r+0x1ec>
 8012bce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012bd2:	f04f 0901 	mov.w	r9, #1
 8012bd6:	4623      	mov	r3, r4
 8012bd8:	469a      	mov	sl, r3
 8012bda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012bde:	b10a      	cbz	r2, 8012be4 <_svfiprintf_r+0x5c>
 8012be0:	2a25      	cmp	r2, #37	; 0x25
 8012be2:	d1f9      	bne.n	8012bd8 <_svfiprintf_r+0x50>
 8012be4:	ebba 0b04 	subs.w	fp, sl, r4
 8012be8:	d00b      	beq.n	8012c02 <_svfiprintf_r+0x7a>
 8012bea:	465b      	mov	r3, fp
 8012bec:	4622      	mov	r2, r4
 8012bee:	4629      	mov	r1, r5
 8012bf0:	4638      	mov	r0, r7
 8012bf2:	f7ff ff6d 	bl	8012ad0 <__ssputs_r>
 8012bf6:	3001      	adds	r0, #1
 8012bf8:	f000 80aa 	beq.w	8012d50 <_svfiprintf_r+0x1c8>
 8012bfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012bfe:	445a      	add	r2, fp
 8012c00:	9209      	str	r2, [sp, #36]	; 0x24
 8012c02:	f89a 3000 	ldrb.w	r3, [sl]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	f000 80a2 	beq.w	8012d50 <_svfiprintf_r+0x1c8>
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8012c12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c16:	f10a 0a01 	add.w	sl, sl, #1
 8012c1a:	9304      	str	r3, [sp, #16]
 8012c1c:	9307      	str	r3, [sp, #28]
 8012c1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012c22:	931a      	str	r3, [sp, #104]	; 0x68
 8012c24:	4654      	mov	r4, sl
 8012c26:	2205      	movs	r2, #5
 8012c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c2c:	4851      	ldr	r0, [pc, #324]	; (8012d74 <_svfiprintf_r+0x1ec>)
 8012c2e:	f7ed fae7 	bl	8000200 <memchr>
 8012c32:	9a04      	ldr	r2, [sp, #16]
 8012c34:	b9d8      	cbnz	r0, 8012c6e <_svfiprintf_r+0xe6>
 8012c36:	06d0      	lsls	r0, r2, #27
 8012c38:	bf44      	itt	mi
 8012c3a:	2320      	movmi	r3, #32
 8012c3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c40:	0711      	lsls	r1, r2, #28
 8012c42:	bf44      	itt	mi
 8012c44:	232b      	movmi	r3, #43	; 0x2b
 8012c46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c4a:	f89a 3000 	ldrb.w	r3, [sl]
 8012c4e:	2b2a      	cmp	r3, #42	; 0x2a
 8012c50:	d015      	beq.n	8012c7e <_svfiprintf_r+0xf6>
 8012c52:	9a07      	ldr	r2, [sp, #28]
 8012c54:	4654      	mov	r4, sl
 8012c56:	2000      	movs	r0, #0
 8012c58:	f04f 0c0a 	mov.w	ip, #10
 8012c5c:	4621      	mov	r1, r4
 8012c5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c62:	3b30      	subs	r3, #48	; 0x30
 8012c64:	2b09      	cmp	r3, #9
 8012c66:	d94e      	bls.n	8012d06 <_svfiprintf_r+0x17e>
 8012c68:	b1b0      	cbz	r0, 8012c98 <_svfiprintf_r+0x110>
 8012c6a:	9207      	str	r2, [sp, #28]
 8012c6c:	e014      	b.n	8012c98 <_svfiprintf_r+0x110>
 8012c6e:	eba0 0308 	sub.w	r3, r0, r8
 8012c72:	fa09 f303 	lsl.w	r3, r9, r3
 8012c76:	4313      	orrs	r3, r2
 8012c78:	9304      	str	r3, [sp, #16]
 8012c7a:	46a2      	mov	sl, r4
 8012c7c:	e7d2      	b.n	8012c24 <_svfiprintf_r+0x9c>
 8012c7e:	9b03      	ldr	r3, [sp, #12]
 8012c80:	1d19      	adds	r1, r3, #4
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	9103      	str	r1, [sp, #12]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	bfbb      	ittet	lt
 8012c8a:	425b      	neglt	r3, r3
 8012c8c:	f042 0202 	orrlt.w	r2, r2, #2
 8012c90:	9307      	strge	r3, [sp, #28]
 8012c92:	9307      	strlt	r3, [sp, #28]
 8012c94:	bfb8      	it	lt
 8012c96:	9204      	strlt	r2, [sp, #16]
 8012c98:	7823      	ldrb	r3, [r4, #0]
 8012c9a:	2b2e      	cmp	r3, #46	; 0x2e
 8012c9c:	d10c      	bne.n	8012cb8 <_svfiprintf_r+0x130>
 8012c9e:	7863      	ldrb	r3, [r4, #1]
 8012ca0:	2b2a      	cmp	r3, #42	; 0x2a
 8012ca2:	d135      	bne.n	8012d10 <_svfiprintf_r+0x188>
 8012ca4:	9b03      	ldr	r3, [sp, #12]
 8012ca6:	1d1a      	adds	r2, r3, #4
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	9203      	str	r2, [sp, #12]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	bfb8      	it	lt
 8012cb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8012cb4:	3402      	adds	r4, #2
 8012cb6:	9305      	str	r3, [sp, #20]
 8012cb8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012d84 <_svfiprintf_r+0x1fc>
 8012cbc:	7821      	ldrb	r1, [r4, #0]
 8012cbe:	2203      	movs	r2, #3
 8012cc0:	4650      	mov	r0, sl
 8012cc2:	f7ed fa9d 	bl	8000200 <memchr>
 8012cc6:	b140      	cbz	r0, 8012cda <_svfiprintf_r+0x152>
 8012cc8:	2340      	movs	r3, #64	; 0x40
 8012cca:	eba0 000a 	sub.w	r0, r0, sl
 8012cce:	fa03 f000 	lsl.w	r0, r3, r0
 8012cd2:	9b04      	ldr	r3, [sp, #16]
 8012cd4:	4303      	orrs	r3, r0
 8012cd6:	3401      	adds	r4, #1
 8012cd8:	9304      	str	r3, [sp, #16]
 8012cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cde:	4826      	ldr	r0, [pc, #152]	; (8012d78 <_svfiprintf_r+0x1f0>)
 8012ce0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012ce4:	2206      	movs	r2, #6
 8012ce6:	f7ed fa8b 	bl	8000200 <memchr>
 8012cea:	2800      	cmp	r0, #0
 8012cec:	d038      	beq.n	8012d60 <_svfiprintf_r+0x1d8>
 8012cee:	4b23      	ldr	r3, [pc, #140]	; (8012d7c <_svfiprintf_r+0x1f4>)
 8012cf0:	bb1b      	cbnz	r3, 8012d3a <_svfiprintf_r+0x1b2>
 8012cf2:	9b03      	ldr	r3, [sp, #12]
 8012cf4:	3307      	adds	r3, #7
 8012cf6:	f023 0307 	bic.w	r3, r3, #7
 8012cfa:	3308      	adds	r3, #8
 8012cfc:	9303      	str	r3, [sp, #12]
 8012cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d00:	4433      	add	r3, r6
 8012d02:	9309      	str	r3, [sp, #36]	; 0x24
 8012d04:	e767      	b.n	8012bd6 <_svfiprintf_r+0x4e>
 8012d06:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d0a:	460c      	mov	r4, r1
 8012d0c:	2001      	movs	r0, #1
 8012d0e:	e7a5      	b.n	8012c5c <_svfiprintf_r+0xd4>
 8012d10:	2300      	movs	r3, #0
 8012d12:	3401      	adds	r4, #1
 8012d14:	9305      	str	r3, [sp, #20]
 8012d16:	4619      	mov	r1, r3
 8012d18:	f04f 0c0a 	mov.w	ip, #10
 8012d1c:	4620      	mov	r0, r4
 8012d1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d22:	3a30      	subs	r2, #48	; 0x30
 8012d24:	2a09      	cmp	r2, #9
 8012d26:	d903      	bls.n	8012d30 <_svfiprintf_r+0x1a8>
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d0c5      	beq.n	8012cb8 <_svfiprintf_r+0x130>
 8012d2c:	9105      	str	r1, [sp, #20]
 8012d2e:	e7c3      	b.n	8012cb8 <_svfiprintf_r+0x130>
 8012d30:	fb0c 2101 	mla	r1, ip, r1, r2
 8012d34:	4604      	mov	r4, r0
 8012d36:	2301      	movs	r3, #1
 8012d38:	e7f0      	b.n	8012d1c <_svfiprintf_r+0x194>
 8012d3a:	ab03      	add	r3, sp, #12
 8012d3c:	9300      	str	r3, [sp, #0]
 8012d3e:	462a      	mov	r2, r5
 8012d40:	4b0f      	ldr	r3, [pc, #60]	; (8012d80 <_svfiprintf_r+0x1f8>)
 8012d42:	a904      	add	r1, sp, #16
 8012d44:	4638      	mov	r0, r7
 8012d46:	f7fb fe7d 	bl	800ea44 <_printf_float>
 8012d4a:	1c42      	adds	r2, r0, #1
 8012d4c:	4606      	mov	r6, r0
 8012d4e:	d1d6      	bne.n	8012cfe <_svfiprintf_r+0x176>
 8012d50:	89ab      	ldrh	r3, [r5, #12]
 8012d52:	065b      	lsls	r3, r3, #25
 8012d54:	f53f af2c 	bmi.w	8012bb0 <_svfiprintf_r+0x28>
 8012d58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012d5a:	b01d      	add	sp, #116	; 0x74
 8012d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d60:	ab03      	add	r3, sp, #12
 8012d62:	9300      	str	r3, [sp, #0]
 8012d64:	462a      	mov	r2, r5
 8012d66:	4b06      	ldr	r3, [pc, #24]	; (8012d80 <_svfiprintf_r+0x1f8>)
 8012d68:	a904      	add	r1, sp, #16
 8012d6a:	4638      	mov	r0, r7
 8012d6c:	f7fc f90e 	bl	800ef8c <_printf_i>
 8012d70:	e7eb      	b.n	8012d4a <_svfiprintf_r+0x1c2>
 8012d72:	bf00      	nop
 8012d74:	08014cc4 	.word	0x08014cc4
 8012d78:	08014cce 	.word	0x08014cce
 8012d7c:	0800ea45 	.word	0x0800ea45
 8012d80:	08012ad1 	.word	0x08012ad1
 8012d84:	08014cca 	.word	0x08014cca

08012d88 <_sungetc_r>:
 8012d88:	b538      	push	{r3, r4, r5, lr}
 8012d8a:	1c4b      	adds	r3, r1, #1
 8012d8c:	4614      	mov	r4, r2
 8012d8e:	d103      	bne.n	8012d98 <_sungetc_r+0x10>
 8012d90:	f04f 35ff 	mov.w	r5, #4294967295
 8012d94:	4628      	mov	r0, r5
 8012d96:	bd38      	pop	{r3, r4, r5, pc}
 8012d98:	8993      	ldrh	r3, [r2, #12]
 8012d9a:	f023 0320 	bic.w	r3, r3, #32
 8012d9e:	8193      	strh	r3, [r2, #12]
 8012da0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012da2:	6852      	ldr	r2, [r2, #4]
 8012da4:	b2cd      	uxtb	r5, r1
 8012da6:	b18b      	cbz	r3, 8012dcc <_sungetc_r+0x44>
 8012da8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012daa:	4293      	cmp	r3, r2
 8012dac:	dd08      	ble.n	8012dc0 <_sungetc_r+0x38>
 8012dae:	6823      	ldr	r3, [r4, #0]
 8012db0:	1e5a      	subs	r2, r3, #1
 8012db2:	6022      	str	r2, [r4, #0]
 8012db4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012db8:	6863      	ldr	r3, [r4, #4]
 8012dba:	3301      	adds	r3, #1
 8012dbc:	6063      	str	r3, [r4, #4]
 8012dbe:	e7e9      	b.n	8012d94 <_sungetc_r+0xc>
 8012dc0:	4621      	mov	r1, r4
 8012dc2:	f000 fca5 	bl	8013710 <__submore>
 8012dc6:	2800      	cmp	r0, #0
 8012dc8:	d0f1      	beq.n	8012dae <_sungetc_r+0x26>
 8012dca:	e7e1      	b.n	8012d90 <_sungetc_r+0x8>
 8012dcc:	6921      	ldr	r1, [r4, #16]
 8012dce:	6823      	ldr	r3, [r4, #0]
 8012dd0:	b151      	cbz	r1, 8012de8 <_sungetc_r+0x60>
 8012dd2:	4299      	cmp	r1, r3
 8012dd4:	d208      	bcs.n	8012de8 <_sungetc_r+0x60>
 8012dd6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8012dda:	42a9      	cmp	r1, r5
 8012ddc:	d104      	bne.n	8012de8 <_sungetc_r+0x60>
 8012dde:	3b01      	subs	r3, #1
 8012de0:	3201      	adds	r2, #1
 8012de2:	6023      	str	r3, [r4, #0]
 8012de4:	6062      	str	r2, [r4, #4]
 8012de6:	e7d5      	b.n	8012d94 <_sungetc_r+0xc>
 8012de8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8012dec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012df0:	6363      	str	r3, [r4, #52]	; 0x34
 8012df2:	2303      	movs	r3, #3
 8012df4:	63a3      	str	r3, [r4, #56]	; 0x38
 8012df6:	4623      	mov	r3, r4
 8012df8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012dfc:	6023      	str	r3, [r4, #0]
 8012dfe:	2301      	movs	r3, #1
 8012e00:	e7dc      	b.n	8012dbc <_sungetc_r+0x34>

08012e02 <__ssrefill_r>:
 8012e02:	b510      	push	{r4, lr}
 8012e04:	460c      	mov	r4, r1
 8012e06:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012e08:	b169      	cbz	r1, 8012e26 <__ssrefill_r+0x24>
 8012e0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012e0e:	4299      	cmp	r1, r3
 8012e10:	d001      	beq.n	8012e16 <__ssrefill_r+0x14>
 8012e12:	f7fb fccd 	bl	800e7b0 <_free_r>
 8012e16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012e18:	6063      	str	r3, [r4, #4]
 8012e1a:	2000      	movs	r0, #0
 8012e1c:	6360      	str	r0, [r4, #52]	; 0x34
 8012e1e:	b113      	cbz	r3, 8012e26 <__ssrefill_r+0x24>
 8012e20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012e22:	6023      	str	r3, [r4, #0]
 8012e24:	bd10      	pop	{r4, pc}
 8012e26:	6923      	ldr	r3, [r4, #16]
 8012e28:	6023      	str	r3, [r4, #0]
 8012e2a:	2300      	movs	r3, #0
 8012e2c:	6063      	str	r3, [r4, #4]
 8012e2e:	89a3      	ldrh	r3, [r4, #12]
 8012e30:	f043 0320 	orr.w	r3, r3, #32
 8012e34:	81a3      	strh	r3, [r4, #12]
 8012e36:	f04f 30ff 	mov.w	r0, #4294967295
 8012e3a:	e7f3      	b.n	8012e24 <__ssrefill_r+0x22>

08012e3c <__ssvfiscanf_r>:
 8012e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e40:	460c      	mov	r4, r1
 8012e42:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8012e46:	2100      	movs	r1, #0
 8012e48:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8012e4c:	49b2      	ldr	r1, [pc, #712]	; (8013118 <__ssvfiscanf_r+0x2dc>)
 8012e4e:	91a0      	str	r1, [sp, #640]	; 0x280
 8012e50:	f10d 0804 	add.w	r8, sp, #4
 8012e54:	49b1      	ldr	r1, [pc, #708]	; (801311c <__ssvfiscanf_r+0x2e0>)
 8012e56:	4fb2      	ldr	r7, [pc, #712]	; (8013120 <__ssvfiscanf_r+0x2e4>)
 8012e58:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8013124 <__ssvfiscanf_r+0x2e8>
 8012e5c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8012e60:	4606      	mov	r6, r0
 8012e62:	91a1      	str	r1, [sp, #644]	; 0x284
 8012e64:	9300      	str	r3, [sp, #0]
 8012e66:	f892 a000 	ldrb.w	sl, [r2]
 8012e6a:	f1ba 0f00 	cmp.w	sl, #0
 8012e6e:	f000 8151 	beq.w	8013114 <__ssvfiscanf_r+0x2d8>
 8012e72:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8012e76:	f013 0308 	ands.w	r3, r3, #8
 8012e7a:	f102 0501 	add.w	r5, r2, #1
 8012e7e:	d019      	beq.n	8012eb4 <__ssvfiscanf_r+0x78>
 8012e80:	6863      	ldr	r3, [r4, #4]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	dd0f      	ble.n	8012ea6 <__ssvfiscanf_r+0x6a>
 8012e86:	6823      	ldr	r3, [r4, #0]
 8012e88:	781a      	ldrb	r2, [r3, #0]
 8012e8a:	5cba      	ldrb	r2, [r7, r2]
 8012e8c:	0712      	lsls	r2, r2, #28
 8012e8e:	d401      	bmi.n	8012e94 <__ssvfiscanf_r+0x58>
 8012e90:	462a      	mov	r2, r5
 8012e92:	e7e8      	b.n	8012e66 <__ssvfiscanf_r+0x2a>
 8012e94:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012e96:	3201      	adds	r2, #1
 8012e98:	9245      	str	r2, [sp, #276]	; 0x114
 8012e9a:	6862      	ldr	r2, [r4, #4]
 8012e9c:	3301      	adds	r3, #1
 8012e9e:	3a01      	subs	r2, #1
 8012ea0:	6062      	str	r2, [r4, #4]
 8012ea2:	6023      	str	r3, [r4, #0]
 8012ea4:	e7ec      	b.n	8012e80 <__ssvfiscanf_r+0x44>
 8012ea6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012ea8:	4621      	mov	r1, r4
 8012eaa:	4630      	mov	r0, r6
 8012eac:	4798      	blx	r3
 8012eae:	2800      	cmp	r0, #0
 8012eb0:	d0e9      	beq.n	8012e86 <__ssvfiscanf_r+0x4a>
 8012eb2:	e7ed      	b.n	8012e90 <__ssvfiscanf_r+0x54>
 8012eb4:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8012eb8:	f040 8083 	bne.w	8012fc2 <__ssvfiscanf_r+0x186>
 8012ebc:	9341      	str	r3, [sp, #260]	; 0x104
 8012ebe:	9343      	str	r3, [sp, #268]	; 0x10c
 8012ec0:	7853      	ldrb	r3, [r2, #1]
 8012ec2:	2b2a      	cmp	r3, #42	; 0x2a
 8012ec4:	bf02      	ittt	eq
 8012ec6:	2310      	moveq	r3, #16
 8012ec8:	1c95      	addeq	r5, r2, #2
 8012eca:	9341      	streq	r3, [sp, #260]	; 0x104
 8012ecc:	220a      	movs	r2, #10
 8012ece:	46ab      	mov	fp, r5
 8012ed0:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8012ed4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8012ed8:	2b09      	cmp	r3, #9
 8012eda:	d91d      	bls.n	8012f18 <__ssvfiscanf_r+0xdc>
 8012edc:	4891      	ldr	r0, [pc, #580]	; (8013124 <__ssvfiscanf_r+0x2e8>)
 8012ede:	2203      	movs	r2, #3
 8012ee0:	f7ed f98e 	bl	8000200 <memchr>
 8012ee4:	b140      	cbz	r0, 8012ef8 <__ssvfiscanf_r+0xbc>
 8012ee6:	2301      	movs	r3, #1
 8012ee8:	eba0 0009 	sub.w	r0, r0, r9
 8012eec:	fa03 f000 	lsl.w	r0, r3, r0
 8012ef0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012ef2:	4318      	orrs	r0, r3
 8012ef4:	9041      	str	r0, [sp, #260]	; 0x104
 8012ef6:	465d      	mov	r5, fp
 8012ef8:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012efc:	2b78      	cmp	r3, #120	; 0x78
 8012efe:	d806      	bhi.n	8012f0e <__ssvfiscanf_r+0xd2>
 8012f00:	2b57      	cmp	r3, #87	; 0x57
 8012f02:	d810      	bhi.n	8012f26 <__ssvfiscanf_r+0xea>
 8012f04:	2b25      	cmp	r3, #37	; 0x25
 8012f06:	d05c      	beq.n	8012fc2 <__ssvfiscanf_r+0x186>
 8012f08:	d856      	bhi.n	8012fb8 <__ssvfiscanf_r+0x17c>
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d074      	beq.n	8012ff8 <__ssvfiscanf_r+0x1bc>
 8012f0e:	2303      	movs	r3, #3
 8012f10:	9347      	str	r3, [sp, #284]	; 0x11c
 8012f12:	230a      	movs	r3, #10
 8012f14:	9342      	str	r3, [sp, #264]	; 0x108
 8012f16:	e081      	b.n	801301c <__ssvfiscanf_r+0x1e0>
 8012f18:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8012f1a:	fb02 1303 	mla	r3, r2, r3, r1
 8012f1e:	3b30      	subs	r3, #48	; 0x30
 8012f20:	9343      	str	r3, [sp, #268]	; 0x10c
 8012f22:	465d      	mov	r5, fp
 8012f24:	e7d3      	b.n	8012ece <__ssvfiscanf_r+0x92>
 8012f26:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8012f2a:	2a20      	cmp	r2, #32
 8012f2c:	d8ef      	bhi.n	8012f0e <__ssvfiscanf_r+0xd2>
 8012f2e:	a101      	add	r1, pc, #4	; (adr r1, 8012f34 <__ssvfiscanf_r+0xf8>)
 8012f30:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012f34:	08013007 	.word	0x08013007
 8012f38:	08012f0f 	.word	0x08012f0f
 8012f3c:	08012f0f 	.word	0x08012f0f
 8012f40:	08013065 	.word	0x08013065
 8012f44:	08012f0f 	.word	0x08012f0f
 8012f48:	08012f0f 	.word	0x08012f0f
 8012f4c:	08012f0f 	.word	0x08012f0f
 8012f50:	08012f0f 	.word	0x08012f0f
 8012f54:	08012f0f 	.word	0x08012f0f
 8012f58:	08012f0f 	.word	0x08012f0f
 8012f5c:	08012f0f 	.word	0x08012f0f
 8012f60:	0801307b 	.word	0x0801307b
 8012f64:	08013051 	.word	0x08013051
 8012f68:	08012fbf 	.word	0x08012fbf
 8012f6c:	08012fbf 	.word	0x08012fbf
 8012f70:	08012fbf 	.word	0x08012fbf
 8012f74:	08012f0f 	.word	0x08012f0f
 8012f78:	08013055 	.word	0x08013055
 8012f7c:	08012f0f 	.word	0x08012f0f
 8012f80:	08012f0f 	.word	0x08012f0f
 8012f84:	08012f0f 	.word	0x08012f0f
 8012f88:	08012f0f 	.word	0x08012f0f
 8012f8c:	0801308b 	.word	0x0801308b
 8012f90:	0801305d 	.word	0x0801305d
 8012f94:	08012fff 	.word	0x08012fff
 8012f98:	08012f0f 	.word	0x08012f0f
 8012f9c:	08012f0f 	.word	0x08012f0f
 8012fa0:	08013087 	.word	0x08013087
 8012fa4:	08012f0f 	.word	0x08012f0f
 8012fa8:	08013051 	.word	0x08013051
 8012fac:	08012f0f 	.word	0x08012f0f
 8012fb0:	08012f0f 	.word	0x08012f0f
 8012fb4:	08013007 	.word	0x08013007
 8012fb8:	3b45      	subs	r3, #69	; 0x45
 8012fba:	2b02      	cmp	r3, #2
 8012fbc:	d8a7      	bhi.n	8012f0e <__ssvfiscanf_r+0xd2>
 8012fbe:	2305      	movs	r3, #5
 8012fc0:	e02b      	b.n	801301a <__ssvfiscanf_r+0x1de>
 8012fc2:	6863      	ldr	r3, [r4, #4]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	dd0d      	ble.n	8012fe4 <__ssvfiscanf_r+0x1a8>
 8012fc8:	6823      	ldr	r3, [r4, #0]
 8012fca:	781a      	ldrb	r2, [r3, #0]
 8012fcc:	4552      	cmp	r2, sl
 8012fce:	f040 80a1 	bne.w	8013114 <__ssvfiscanf_r+0x2d8>
 8012fd2:	3301      	adds	r3, #1
 8012fd4:	6862      	ldr	r2, [r4, #4]
 8012fd6:	6023      	str	r3, [r4, #0]
 8012fd8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8012fda:	3a01      	subs	r2, #1
 8012fdc:	3301      	adds	r3, #1
 8012fde:	6062      	str	r2, [r4, #4]
 8012fe0:	9345      	str	r3, [sp, #276]	; 0x114
 8012fe2:	e755      	b.n	8012e90 <__ssvfiscanf_r+0x54>
 8012fe4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012fe6:	4621      	mov	r1, r4
 8012fe8:	4630      	mov	r0, r6
 8012fea:	4798      	blx	r3
 8012fec:	2800      	cmp	r0, #0
 8012fee:	d0eb      	beq.n	8012fc8 <__ssvfiscanf_r+0x18c>
 8012ff0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012ff2:	2800      	cmp	r0, #0
 8012ff4:	f040 8084 	bne.w	8013100 <__ssvfiscanf_r+0x2c4>
 8012ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8012ffc:	e086      	b.n	801310c <__ssvfiscanf_r+0x2d0>
 8012ffe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013000:	f042 0220 	orr.w	r2, r2, #32
 8013004:	9241      	str	r2, [sp, #260]	; 0x104
 8013006:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801300c:	9241      	str	r2, [sp, #260]	; 0x104
 801300e:	2210      	movs	r2, #16
 8013010:	2b6f      	cmp	r3, #111	; 0x6f
 8013012:	9242      	str	r2, [sp, #264]	; 0x108
 8013014:	bf34      	ite	cc
 8013016:	2303      	movcc	r3, #3
 8013018:	2304      	movcs	r3, #4
 801301a:	9347      	str	r3, [sp, #284]	; 0x11c
 801301c:	6863      	ldr	r3, [r4, #4]
 801301e:	2b00      	cmp	r3, #0
 8013020:	dd41      	ble.n	80130a6 <__ssvfiscanf_r+0x26a>
 8013022:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013024:	0659      	lsls	r1, r3, #25
 8013026:	d404      	bmi.n	8013032 <__ssvfiscanf_r+0x1f6>
 8013028:	6823      	ldr	r3, [r4, #0]
 801302a:	781a      	ldrb	r2, [r3, #0]
 801302c:	5cba      	ldrb	r2, [r7, r2]
 801302e:	0712      	lsls	r2, r2, #28
 8013030:	d440      	bmi.n	80130b4 <__ssvfiscanf_r+0x278>
 8013032:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8013034:	2b02      	cmp	r3, #2
 8013036:	dc4f      	bgt.n	80130d8 <__ssvfiscanf_r+0x29c>
 8013038:	466b      	mov	r3, sp
 801303a:	4622      	mov	r2, r4
 801303c:	a941      	add	r1, sp, #260	; 0x104
 801303e:	4630      	mov	r0, r6
 8013040:	f000 f9ce 	bl	80133e0 <_scanf_chars>
 8013044:	2801      	cmp	r0, #1
 8013046:	d065      	beq.n	8013114 <__ssvfiscanf_r+0x2d8>
 8013048:	2802      	cmp	r0, #2
 801304a:	f47f af21 	bne.w	8012e90 <__ssvfiscanf_r+0x54>
 801304e:	e7cf      	b.n	8012ff0 <__ssvfiscanf_r+0x1b4>
 8013050:	220a      	movs	r2, #10
 8013052:	e7dd      	b.n	8013010 <__ssvfiscanf_r+0x1d4>
 8013054:	2300      	movs	r3, #0
 8013056:	9342      	str	r3, [sp, #264]	; 0x108
 8013058:	2303      	movs	r3, #3
 801305a:	e7de      	b.n	801301a <__ssvfiscanf_r+0x1de>
 801305c:	2308      	movs	r3, #8
 801305e:	9342      	str	r3, [sp, #264]	; 0x108
 8013060:	2304      	movs	r3, #4
 8013062:	e7da      	b.n	801301a <__ssvfiscanf_r+0x1de>
 8013064:	4629      	mov	r1, r5
 8013066:	4640      	mov	r0, r8
 8013068:	f000 fb18 	bl	801369c <__sccl>
 801306c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801306e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013072:	9341      	str	r3, [sp, #260]	; 0x104
 8013074:	4605      	mov	r5, r0
 8013076:	2301      	movs	r3, #1
 8013078:	e7cf      	b.n	801301a <__ssvfiscanf_r+0x1de>
 801307a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801307c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013080:	9341      	str	r3, [sp, #260]	; 0x104
 8013082:	2300      	movs	r3, #0
 8013084:	e7c9      	b.n	801301a <__ssvfiscanf_r+0x1de>
 8013086:	2302      	movs	r3, #2
 8013088:	e7c7      	b.n	801301a <__ssvfiscanf_r+0x1de>
 801308a:	9841      	ldr	r0, [sp, #260]	; 0x104
 801308c:	06c3      	lsls	r3, r0, #27
 801308e:	f53f aeff 	bmi.w	8012e90 <__ssvfiscanf_r+0x54>
 8013092:	9b00      	ldr	r3, [sp, #0]
 8013094:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013096:	1d19      	adds	r1, r3, #4
 8013098:	9100      	str	r1, [sp, #0]
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	07c0      	lsls	r0, r0, #31
 801309e:	bf4c      	ite	mi
 80130a0:	801a      	strhmi	r2, [r3, #0]
 80130a2:	601a      	strpl	r2, [r3, #0]
 80130a4:	e6f4      	b.n	8012e90 <__ssvfiscanf_r+0x54>
 80130a6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80130a8:	4621      	mov	r1, r4
 80130aa:	4630      	mov	r0, r6
 80130ac:	4798      	blx	r3
 80130ae:	2800      	cmp	r0, #0
 80130b0:	d0b7      	beq.n	8013022 <__ssvfiscanf_r+0x1e6>
 80130b2:	e79d      	b.n	8012ff0 <__ssvfiscanf_r+0x1b4>
 80130b4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80130b6:	3201      	adds	r2, #1
 80130b8:	9245      	str	r2, [sp, #276]	; 0x114
 80130ba:	6862      	ldr	r2, [r4, #4]
 80130bc:	3a01      	subs	r2, #1
 80130be:	2a00      	cmp	r2, #0
 80130c0:	6062      	str	r2, [r4, #4]
 80130c2:	dd02      	ble.n	80130ca <__ssvfiscanf_r+0x28e>
 80130c4:	3301      	adds	r3, #1
 80130c6:	6023      	str	r3, [r4, #0]
 80130c8:	e7ae      	b.n	8013028 <__ssvfiscanf_r+0x1ec>
 80130ca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80130cc:	4621      	mov	r1, r4
 80130ce:	4630      	mov	r0, r6
 80130d0:	4798      	blx	r3
 80130d2:	2800      	cmp	r0, #0
 80130d4:	d0a8      	beq.n	8013028 <__ssvfiscanf_r+0x1ec>
 80130d6:	e78b      	b.n	8012ff0 <__ssvfiscanf_r+0x1b4>
 80130d8:	2b04      	cmp	r3, #4
 80130da:	dc06      	bgt.n	80130ea <__ssvfiscanf_r+0x2ae>
 80130dc:	466b      	mov	r3, sp
 80130de:	4622      	mov	r2, r4
 80130e0:	a941      	add	r1, sp, #260	; 0x104
 80130e2:	4630      	mov	r0, r6
 80130e4:	f000 f9d4 	bl	8013490 <_scanf_i>
 80130e8:	e7ac      	b.n	8013044 <__ssvfiscanf_r+0x208>
 80130ea:	4b0f      	ldr	r3, [pc, #60]	; (8013128 <__ssvfiscanf_r+0x2ec>)
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	f43f aecf 	beq.w	8012e90 <__ssvfiscanf_r+0x54>
 80130f2:	466b      	mov	r3, sp
 80130f4:	4622      	mov	r2, r4
 80130f6:	a941      	add	r1, sp, #260	; 0x104
 80130f8:	4630      	mov	r0, r6
 80130fa:	f7fc f86d 	bl	800f1d8 <_scanf_float>
 80130fe:	e7a1      	b.n	8013044 <__ssvfiscanf_r+0x208>
 8013100:	89a3      	ldrh	r3, [r4, #12]
 8013102:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013106:	bf18      	it	ne
 8013108:	f04f 30ff 	movne.w	r0, #4294967295
 801310c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8013110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013114:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013116:	e7f9      	b.n	801310c <__ssvfiscanf_r+0x2d0>
 8013118:	08012d89 	.word	0x08012d89
 801311c:	08012e03 	.word	0x08012e03
 8013120:	08014829 	.word	0x08014829
 8013124:	08014cca 	.word	0x08014cca
 8013128:	0800f1d9 	.word	0x0800f1d9

0801312c <__sfputc_r>:
 801312c:	6893      	ldr	r3, [r2, #8]
 801312e:	3b01      	subs	r3, #1
 8013130:	2b00      	cmp	r3, #0
 8013132:	b410      	push	{r4}
 8013134:	6093      	str	r3, [r2, #8]
 8013136:	da08      	bge.n	801314a <__sfputc_r+0x1e>
 8013138:	6994      	ldr	r4, [r2, #24]
 801313a:	42a3      	cmp	r3, r4
 801313c:	db01      	blt.n	8013142 <__sfputc_r+0x16>
 801313e:	290a      	cmp	r1, #10
 8013140:	d103      	bne.n	801314a <__sfputc_r+0x1e>
 8013142:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013146:	f7fd bb7f 	b.w	8010848 <__swbuf_r>
 801314a:	6813      	ldr	r3, [r2, #0]
 801314c:	1c58      	adds	r0, r3, #1
 801314e:	6010      	str	r0, [r2, #0]
 8013150:	7019      	strb	r1, [r3, #0]
 8013152:	4608      	mov	r0, r1
 8013154:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013158:	4770      	bx	lr

0801315a <__sfputs_r>:
 801315a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801315c:	4606      	mov	r6, r0
 801315e:	460f      	mov	r7, r1
 8013160:	4614      	mov	r4, r2
 8013162:	18d5      	adds	r5, r2, r3
 8013164:	42ac      	cmp	r4, r5
 8013166:	d101      	bne.n	801316c <__sfputs_r+0x12>
 8013168:	2000      	movs	r0, #0
 801316a:	e007      	b.n	801317c <__sfputs_r+0x22>
 801316c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013170:	463a      	mov	r2, r7
 8013172:	4630      	mov	r0, r6
 8013174:	f7ff ffda 	bl	801312c <__sfputc_r>
 8013178:	1c43      	adds	r3, r0, #1
 801317a:	d1f3      	bne.n	8013164 <__sfputs_r+0xa>
 801317c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013180 <_vfiprintf_r>:
 8013180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013184:	460d      	mov	r5, r1
 8013186:	b09d      	sub	sp, #116	; 0x74
 8013188:	4614      	mov	r4, r2
 801318a:	4698      	mov	r8, r3
 801318c:	4606      	mov	r6, r0
 801318e:	b118      	cbz	r0, 8013198 <_vfiprintf_r+0x18>
 8013190:	6983      	ldr	r3, [r0, #24]
 8013192:	b90b      	cbnz	r3, 8013198 <_vfiprintf_r+0x18>
 8013194:	f7fb fa0e 	bl	800e5b4 <__sinit>
 8013198:	4b89      	ldr	r3, [pc, #548]	; (80133c0 <_vfiprintf_r+0x240>)
 801319a:	429d      	cmp	r5, r3
 801319c:	d11b      	bne.n	80131d6 <_vfiprintf_r+0x56>
 801319e:	6875      	ldr	r5, [r6, #4]
 80131a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80131a2:	07d9      	lsls	r1, r3, #31
 80131a4:	d405      	bmi.n	80131b2 <_vfiprintf_r+0x32>
 80131a6:	89ab      	ldrh	r3, [r5, #12]
 80131a8:	059a      	lsls	r2, r3, #22
 80131aa:	d402      	bmi.n	80131b2 <_vfiprintf_r+0x32>
 80131ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80131ae:	f7fb fac4 	bl	800e73a <__retarget_lock_acquire_recursive>
 80131b2:	89ab      	ldrh	r3, [r5, #12]
 80131b4:	071b      	lsls	r3, r3, #28
 80131b6:	d501      	bpl.n	80131bc <_vfiprintf_r+0x3c>
 80131b8:	692b      	ldr	r3, [r5, #16]
 80131ba:	b9eb      	cbnz	r3, 80131f8 <_vfiprintf_r+0x78>
 80131bc:	4629      	mov	r1, r5
 80131be:	4630      	mov	r0, r6
 80131c0:	f7fd fba6 	bl	8010910 <__swsetup_r>
 80131c4:	b1c0      	cbz	r0, 80131f8 <_vfiprintf_r+0x78>
 80131c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80131c8:	07dc      	lsls	r4, r3, #31
 80131ca:	d50e      	bpl.n	80131ea <_vfiprintf_r+0x6a>
 80131cc:	f04f 30ff 	mov.w	r0, #4294967295
 80131d0:	b01d      	add	sp, #116	; 0x74
 80131d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131d6:	4b7b      	ldr	r3, [pc, #492]	; (80133c4 <_vfiprintf_r+0x244>)
 80131d8:	429d      	cmp	r5, r3
 80131da:	d101      	bne.n	80131e0 <_vfiprintf_r+0x60>
 80131dc:	68b5      	ldr	r5, [r6, #8]
 80131de:	e7df      	b.n	80131a0 <_vfiprintf_r+0x20>
 80131e0:	4b79      	ldr	r3, [pc, #484]	; (80133c8 <_vfiprintf_r+0x248>)
 80131e2:	429d      	cmp	r5, r3
 80131e4:	bf08      	it	eq
 80131e6:	68f5      	ldreq	r5, [r6, #12]
 80131e8:	e7da      	b.n	80131a0 <_vfiprintf_r+0x20>
 80131ea:	89ab      	ldrh	r3, [r5, #12]
 80131ec:	0598      	lsls	r0, r3, #22
 80131ee:	d4ed      	bmi.n	80131cc <_vfiprintf_r+0x4c>
 80131f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80131f2:	f7fb faa3 	bl	800e73c <__retarget_lock_release_recursive>
 80131f6:	e7e9      	b.n	80131cc <_vfiprintf_r+0x4c>
 80131f8:	2300      	movs	r3, #0
 80131fa:	9309      	str	r3, [sp, #36]	; 0x24
 80131fc:	2320      	movs	r3, #32
 80131fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013202:	f8cd 800c 	str.w	r8, [sp, #12]
 8013206:	2330      	movs	r3, #48	; 0x30
 8013208:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80133cc <_vfiprintf_r+0x24c>
 801320c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013210:	f04f 0901 	mov.w	r9, #1
 8013214:	4623      	mov	r3, r4
 8013216:	469a      	mov	sl, r3
 8013218:	f813 2b01 	ldrb.w	r2, [r3], #1
 801321c:	b10a      	cbz	r2, 8013222 <_vfiprintf_r+0xa2>
 801321e:	2a25      	cmp	r2, #37	; 0x25
 8013220:	d1f9      	bne.n	8013216 <_vfiprintf_r+0x96>
 8013222:	ebba 0b04 	subs.w	fp, sl, r4
 8013226:	d00b      	beq.n	8013240 <_vfiprintf_r+0xc0>
 8013228:	465b      	mov	r3, fp
 801322a:	4622      	mov	r2, r4
 801322c:	4629      	mov	r1, r5
 801322e:	4630      	mov	r0, r6
 8013230:	f7ff ff93 	bl	801315a <__sfputs_r>
 8013234:	3001      	adds	r0, #1
 8013236:	f000 80aa 	beq.w	801338e <_vfiprintf_r+0x20e>
 801323a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801323c:	445a      	add	r2, fp
 801323e:	9209      	str	r2, [sp, #36]	; 0x24
 8013240:	f89a 3000 	ldrb.w	r3, [sl]
 8013244:	2b00      	cmp	r3, #0
 8013246:	f000 80a2 	beq.w	801338e <_vfiprintf_r+0x20e>
 801324a:	2300      	movs	r3, #0
 801324c:	f04f 32ff 	mov.w	r2, #4294967295
 8013250:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013254:	f10a 0a01 	add.w	sl, sl, #1
 8013258:	9304      	str	r3, [sp, #16]
 801325a:	9307      	str	r3, [sp, #28]
 801325c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013260:	931a      	str	r3, [sp, #104]	; 0x68
 8013262:	4654      	mov	r4, sl
 8013264:	2205      	movs	r2, #5
 8013266:	f814 1b01 	ldrb.w	r1, [r4], #1
 801326a:	4858      	ldr	r0, [pc, #352]	; (80133cc <_vfiprintf_r+0x24c>)
 801326c:	f7ec ffc8 	bl	8000200 <memchr>
 8013270:	9a04      	ldr	r2, [sp, #16]
 8013272:	b9d8      	cbnz	r0, 80132ac <_vfiprintf_r+0x12c>
 8013274:	06d1      	lsls	r1, r2, #27
 8013276:	bf44      	itt	mi
 8013278:	2320      	movmi	r3, #32
 801327a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801327e:	0713      	lsls	r3, r2, #28
 8013280:	bf44      	itt	mi
 8013282:	232b      	movmi	r3, #43	; 0x2b
 8013284:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013288:	f89a 3000 	ldrb.w	r3, [sl]
 801328c:	2b2a      	cmp	r3, #42	; 0x2a
 801328e:	d015      	beq.n	80132bc <_vfiprintf_r+0x13c>
 8013290:	9a07      	ldr	r2, [sp, #28]
 8013292:	4654      	mov	r4, sl
 8013294:	2000      	movs	r0, #0
 8013296:	f04f 0c0a 	mov.w	ip, #10
 801329a:	4621      	mov	r1, r4
 801329c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80132a0:	3b30      	subs	r3, #48	; 0x30
 80132a2:	2b09      	cmp	r3, #9
 80132a4:	d94e      	bls.n	8013344 <_vfiprintf_r+0x1c4>
 80132a6:	b1b0      	cbz	r0, 80132d6 <_vfiprintf_r+0x156>
 80132a8:	9207      	str	r2, [sp, #28]
 80132aa:	e014      	b.n	80132d6 <_vfiprintf_r+0x156>
 80132ac:	eba0 0308 	sub.w	r3, r0, r8
 80132b0:	fa09 f303 	lsl.w	r3, r9, r3
 80132b4:	4313      	orrs	r3, r2
 80132b6:	9304      	str	r3, [sp, #16]
 80132b8:	46a2      	mov	sl, r4
 80132ba:	e7d2      	b.n	8013262 <_vfiprintf_r+0xe2>
 80132bc:	9b03      	ldr	r3, [sp, #12]
 80132be:	1d19      	adds	r1, r3, #4
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	9103      	str	r1, [sp, #12]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	bfbb      	ittet	lt
 80132c8:	425b      	neglt	r3, r3
 80132ca:	f042 0202 	orrlt.w	r2, r2, #2
 80132ce:	9307      	strge	r3, [sp, #28]
 80132d0:	9307      	strlt	r3, [sp, #28]
 80132d2:	bfb8      	it	lt
 80132d4:	9204      	strlt	r2, [sp, #16]
 80132d6:	7823      	ldrb	r3, [r4, #0]
 80132d8:	2b2e      	cmp	r3, #46	; 0x2e
 80132da:	d10c      	bne.n	80132f6 <_vfiprintf_r+0x176>
 80132dc:	7863      	ldrb	r3, [r4, #1]
 80132de:	2b2a      	cmp	r3, #42	; 0x2a
 80132e0:	d135      	bne.n	801334e <_vfiprintf_r+0x1ce>
 80132e2:	9b03      	ldr	r3, [sp, #12]
 80132e4:	1d1a      	adds	r2, r3, #4
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	9203      	str	r2, [sp, #12]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	bfb8      	it	lt
 80132ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80132f2:	3402      	adds	r4, #2
 80132f4:	9305      	str	r3, [sp, #20]
 80132f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80133dc <_vfiprintf_r+0x25c>
 80132fa:	7821      	ldrb	r1, [r4, #0]
 80132fc:	2203      	movs	r2, #3
 80132fe:	4650      	mov	r0, sl
 8013300:	f7ec ff7e 	bl	8000200 <memchr>
 8013304:	b140      	cbz	r0, 8013318 <_vfiprintf_r+0x198>
 8013306:	2340      	movs	r3, #64	; 0x40
 8013308:	eba0 000a 	sub.w	r0, r0, sl
 801330c:	fa03 f000 	lsl.w	r0, r3, r0
 8013310:	9b04      	ldr	r3, [sp, #16]
 8013312:	4303      	orrs	r3, r0
 8013314:	3401      	adds	r4, #1
 8013316:	9304      	str	r3, [sp, #16]
 8013318:	f814 1b01 	ldrb.w	r1, [r4], #1
 801331c:	482c      	ldr	r0, [pc, #176]	; (80133d0 <_vfiprintf_r+0x250>)
 801331e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013322:	2206      	movs	r2, #6
 8013324:	f7ec ff6c 	bl	8000200 <memchr>
 8013328:	2800      	cmp	r0, #0
 801332a:	d03f      	beq.n	80133ac <_vfiprintf_r+0x22c>
 801332c:	4b29      	ldr	r3, [pc, #164]	; (80133d4 <_vfiprintf_r+0x254>)
 801332e:	bb1b      	cbnz	r3, 8013378 <_vfiprintf_r+0x1f8>
 8013330:	9b03      	ldr	r3, [sp, #12]
 8013332:	3307      	adds	r3, #7
 8013334:	f023 0307 	bic.w	r3, r3, #7
 8013338:	3308      	adds	r3, #8
 801333a:	9303      	str	r3, [sp, #12]
 801333c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801333e:	443b      	add	r3, r7
 8013340:	9309      	str	r3, [sp, #36]	; 0x24
 8013342:	e767      	b.n	8013214 <_vfiprintf_r+0x94>
 8013344:	fb0c 3202 	mla	r2, ip, r2, r3
 8013348:	460c      	mov	r4, r1
 801334a:	2001      	movs	r0, #1
 801334c:	e7a5      	b.n	801329a <_vfiprintf_r+0x11a>
 801334e:	2300      	movs	r3, #0
 8013350:	3401      	adds	r4, #1
 8013352:	9305      	str	r3, [sp, #20]
 8013354:	4619      	mov	r1, r3
 8013356:	f04f 0c0a 	mov.w	ip, #10
 801335a:	4620      	mov	r0, r4
 801335c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013360:	3a30      	subs	r2, #48	; 0x30
 8013362:	2a09      	cmp	r2, #9
 8013364:	d903      	bls.n	801336e <_vfiprintf_r+0x1ee>
 8013366:	2b00      	cmp	r3, #0
 8013368:	d0c5      	beq.n	80132f6 <_vfiprintf_r+0x176>
 801336a:	9105      	str	r1, [sp, #20]
 801336c:	e7c3      	b.n	80132f6 <_vfiprintf_r+0x176>
 801336e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013372:	4604      	mov	r4, r0
 8013374:	2301      	movs	r3, #1
 8013376:	e7f0      	b.n	801335a <_vfiprintf_r+0x1da>
 8013378:	ab03      	add	r3, sp, #12
 801337a:	9300      	str	r3, [sp, #0]
 801337c:	462a      	mov	r2, r5
 801337e:	4b16      	ldr	r3, [pc, #88]	; (80133d8 <_vfiprintf_r+0x258>)
 8013380:	a904      	add	r1, sp, #16
 8013382:	4630      	mov	r0, r6
 8013384:	f7fb fb5e 	bl	800ea44 <_printf_float>
 8013388:	4607      	mov	r7, r0
 801338a:	1c78      	adds	r0, r7, #1
 801338c:	d1d6      	bne.n	801333c <_vfiprintf_r+0x1bc>
 801338e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013390:	07d9      	lsls	r1, r3, #31
 8013392:	d405      	bmi.n	80133a0 <_vfiprintf_r+0x220>
 8013394:	89ab      	ldrh	r3, [r5, #12]
 8013396:	059a      	lsls	r2, r3, #22
 8013398:	d402      	bmi.n	80133a0 <_vfiprintf_r+0x220>
 801339a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801339c:	f7fb f9ce 	bl	800e73c <__retarget_lock_release_recursive>
 80133a0:	89ab      	ldrh	r3, [r5, #12]
 80133a2:	065b      	lsls	r3, r3, #25
 80133a4:	f53f af12 	bmi.w	80131cc <_vfiprintf_r+0x4c>
 80133a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80133aa:	e711      	b.n	80131d0 <_vfiprintf_r+0x50>
 80133ac:	ab03      	add	r3, sp, #12
 80133ae:	9300      	str	r3, [sp, #0]
 80133b0:	462a      	mov	r2, r5
 80133b2:	4b09      	ldr	r3, [pc, #36]	; (80133d8 <_vfiprintf_r+0x258>)
 80133b4:	a904      	add	r1, sp, #16
 80133b6:	4630      	mov	r0, r6
 80133b8:	f7fb fde8 	bl	800ef8c <_printf_i>
 80133bc:	e7e4      	b.n	8013388 <_vfiprintf_r+0x208>
 80133be:	bf00      	nop
 80133c0:	0801494c 	.word	0x0801494c
 80133c4:	0801496c 	.word	0x0801496c
 80133c8:	0801492c 	.word	0x0801492c
 80133cc:	08014cc4 	.word	0x08014cc4
 80133d0:	08014cce 	.word	0x08014cce
 80133d4:	0800ea45 	.word	0x0800ea45
 80133d8:	0801315b 	.word	0x0801315b
 80133dc:	08014cca 	.word	0x08014cca

080133e0 <_scanf_chars>:
 80133e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80133e4:	4615      	mov	r5, r2
 80133e6:	688a      	ldr	r2, [r1, #8]
 80133e8:	4680      	mov	r8, r0
 80133ea:	460c      	mov	r4, r1
 80133ec:	b932      	cbnz	r2, 80133fc <_scanf_chars+0x1c>
 80133ee:	698a      	ldr	r2, [r1, #24]
 80133f0:	2a00      	cmp	r2, #0
 80133f2:	bf0c      	ite	eq
 80133f4:	2201      	moveq	r2, #1
 80133f6:	f04f 32ff 	movne.w	r2, #4294967295
 80133fa:	608a      	str	r2, [r1, #8]
 80133fc:	6822      	ldr	r2, [r4, #0]
 80133fe:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801348c <_scanf_chars+0xac>
 8013402:	06d1      	lsls	r1, r2, #27
 8013404:	bf5f      	itttt	pl
 8013406:	681a      	ldrpl	r2, [r3, #0]
 8013408:	1d11      	addpl	r1, r2, #4
 801340a:	6019      	strpl	r1, [r3, #0]
 801340c:	6816      	ldrpl	r6, [r2, #0]
 801340e:	2700      	movs	r7, #0
 8013410:	69a0      	ldr	r0, [r4, #24]
 8013412:	b188      	cbz	r0, 8013438 <_scanf_chars+0x58>
 8013414:	2801      	cmp	r0, #1
 8013416:	d107      	bne.n	8013428 <_scanf_chars+0x48>
 8013418:	682b      	ldr	r3, [r5, #0]
 801341a:	781a      	ldrb	r2, [r3, #0]
 801341c:	6963      	ldr	r3, [r4, #20]
 801341e:	5c9b      	ldrb	r3, [r3, r2]
 8013420:	b953      	cbnz	r3, 8013438 <_scanf_chars+0x58>
 8013422:	bb27      	cbnz	r7, 801346e <_scanf_chars+0x8e>
 8013424:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013428:	2802      	cmp	r0, #2
 801342a:	d120      	bne.n	801346e <_scanf_chars+0x8e>
 801342c:	682b      	ldr	r3, [r5, #0]
 801342e:	781b      	ldrb	r3, [r3, #0]
 8013430:	f813 3009 	ldrb.w	r3, [r3, r9]
 8013434:	071b      	lsls	r3, r3, #28
 8013436:	d41a      	bmi.n	801346e <_scanf_chars+0x8e>
 8013438:	6823      	ldr	r3, [r4, #0]
 801343a:	06da      	lsls	r2, r3, #27
 801343c:	bf5e      	ittt	pl
 801343e:	682b      	ldrpl	r3, [r5, #0]
 8013440:	781b      	ldrbpl	r3, [r3, #0]
 8013442:	f806 3b01 	strbpl.w	r3, [r6], #1
 8013446:	682a      	ldr	r2, [r5, #0]
 8013448:	686b      	ldr	r3, [r5, #4]
 801344a:	3201      	adds	r2, #1
 801344c:	602a      	str	r2, [r5, #0]
 801344e:	68a2      	ldr	r2, [r4, #8]
 8013450:	3b01      	subs	r3, #1
 8013452:	3a01      	subs	r2, #1
 8013454:	606b      	str	r3, [r5, #4]
 8013456:	3701      	adds	r7, #1
 8013458:	60a2      	str	r2, [r4, #8]
 801345a:	b142      	cbz	r2, 801346e <_scanf_chars+0x8e>
 801345c:	2b00      	cmp	r3, #0
 801345e:	dcd7      	bgt.n	8013410 <_scanf_chars+0x30>
 8013460:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013464:	4629      	mov	r1, r5
 8013466:	4640      	mov	r0, r8
 8013468:	4798      	blx	r3
 801346a:	2800      	cmp	r0, #0
 801346c:	d0d0      	beq.n	8013410 <_scanf_chars+0x30>
 801346e:	6823      	ldr	r3, [r4, #0]
 8013470:	f013 0310 	ands.w	r3, r3, #16
 8013474:	d105      	bne.n	8013482 <_scanf_chars+0xa2>
 8013476:	68e2      	ldr	r2, [r4, #12]
 8013478:	3201      	adds	r2, #1
 801347a:	60e2      	str	r2, [r4, #12]
 801347c:	69a2      	ldr	r2, [r4, #24]
 801347e:	b102      	cbz	r2, 8013482 <_scanf_chars+0xa2>
 8013480:	7033      	strb	r3, [r6, #0]
 8013482:	6923      	ldr	r3, [r4, #16]
 8013484:	441f      	add	r7, r3
 8013486:	6127      	str	r7, [r4, #16]
 8013488:	2000      	movs	r0, #0
 801348a:	e7cb      	b.n	8013424 <_scanf_chars+0x44>
 801348c:	08014829 	.word	0x08014829

08013490 <_scanf_i>:
 8013490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013494:	4698      	mov	r8, r3
 8013496:	4b74      	ldr	r3, [pc, #464]	; (8013668 <_scanf_i+0x1d8>)
 8013498:	460c      	mov	r4, r1
 801349a:	4682      	mov	sl, r0
 801349c:	4616      	mov	r6, r2
 801349e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80134a2:	b087      	sub	sp, #28
 80134a4:	ab03      	add	r3, sp, #12
 80134a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80134aa:	4b70      	ldr	r3, [pc, #448]	; (801366c <_scanf_i+0x1dc>)
 80134ac:	69a1      	ldr	r1, [r4, #24]
 80134ae:	4a70      	ldr	r2, [pc, #448]	; (8013670 <_scanf_i+0x1e0>)
 80134b0:	2903      	cmp	r1, #3
 80134b2:	bf18      	it	ne
 80134b4:	461a      	movne	r2, r3
 80134b6:	68a3      	ldr	r3, [r4, #8]
 80134b8:	9201      	str	r2, [sp, #4]
 80134ba:	1e5a      	subs	r2, r3, #1
 80134bc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80134c0:	bf88      	it	hi
 80134c2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80134c6:	4627      	mov	r7, r4
 80134c8:	bf82      	ittt	hi
 80134ca:	eb03 0905 	addhi.w	r9, r3, r5
 80134ce:	f240 135d 	movwhi	r3, #349	; 0x15d
 80134d2:	60a3      	strhi	r3, [r4, #8]
 80134d4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80134d8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80134dc:	bf98      	it	ls
 80134de:	f04f 0900 	movls.w	r9, #0
 80134e2:	6023      	str	r3, [r4, #0]
 80134e4:	463d      	mov	r5, r7
 80134e6:	f04f 0b00 	mov.w	fp, #0
 80134ea:	6831      	ldr	r1, [r6, #0]
 80134ec:	ab03      	add	r3, sp, #12
 80134ee:	7809      	ldrb	r1, [r1, #0]
 80134f0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80134f4:	2202      	movs	r2, #2
 80134f6:	f7ec fe83 	bl	8000200 <memchr>
 80134fa:	b328      	cbz	r0, 8013548 <_scanf_i+0xb8>
 80134fc:	f1bb 0f01 	cmp.w	fp, #1
 8013500:	d159      	bne.n	80135b6 <_scanf_i+0x126>
 8013502:	6862      	ldr	r2, [r4, #4]
 8013504:	b92a      	cbnz	r2, 8013512 <_scanf_i+0x82>
 8013506:	6822      	ldr	r2, [r4, #0]
 8013508:	2308      	movs	r3, #8
 801350a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801350e:	6063      	str	r3, [r4, #4]
 8013510:	6022      	str	r2, [r4, #0]
 8013512:	6822      	ldr	r2, [r4, #0]
 8013514:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8013518:	6022      	str	r2, [r4, #0]
 801351a:	68a2      	ldr	r2, [r4, #8]
 801351c:	1e51      	subs	r1, r2, #1
 801351e:	60a1      	str	r1, [r4, #8]
 8013520:	b192      	cbz	r2, 8013548 <_scanf_i+0xb8>
 8013522:	6832      	ldr	r2, [r6, #0]
 8013524:	1c51      	adds	r1, r2, #1
 8013526:	6031      	str	r1, [r6, #0]
 8013528:	7812      	ldrb	r2, [r2, #0]
 801352a:	f805 2b01 	strb.w	r2, [r5], #1
 801352e:	6872      	ldr	r2, [r6, #4]
 8013530:	3a01      	subs	r2, #1
 8013532:	2a00      	cmp	r2, #0
 8013534:	6072      	str	r2, [r6, #4]
 8013536:	dc07      	bgt.n	8013548 <_scanf_i+0xb8>
 8013538:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801353c:	4631      	mov	r1, r6
 801353e:	4650      	mov	r0, sl
 8013540:	4790      	blx	r2
 8013542:	2800      	cmp	r0, #0
 8013544:	f040 8085 	bne.w	8013652 <_scanf_i+0x1c2>
 8013548:	f10b 0b01 	add.w	fp, fp, #1
 801354c:	f1bb 0f03 	cmp.w	fp, #3
 8013550:	d1cb      	bne.n	80134ea <_scanf_i+0x5a>
 8013552:	6863      	ldr	r3, [r4, #4]
 8013554:	b90b      	cbnz	r3, 801355a <_scanf_i+0xca>
 8013556:	230a      	movs	r3, #10
 8013558:	6063      	str	r3, [r4, #4]
 801355a:	6863      	ldr	r3, [r4, #4]
 801355c:	4945      	ldr	r1, [pc, #276]	; (8013674 <_scanf_i+0x1e4>)
 801355e:	6960      	ldr	r0, [r4, #20]
 8013560:	1ac9      	subs	r1, r1, r3
 8013562:	f000 f89b 	bl	801369c <__sccl>
 8013566:	f04f 0b00 	mov.w	fp, #0
 801356a:	68a3      	ldr	r3, [r4, #8]
 801356c:	6822      	ldr	r2, [r4, #0]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d03d      	beq.n	80135ee <_scanf_i+0x15e>
 8013572:	6831      	ldr	r1, [r6, #0]
 8013574:	6960      	ldr	r0, [r4, #20]
 8013576:	f891 c000 	ldrb.w	ip, [r1]
 801357a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801357e:	2800      	cmp	r0, #0
 8013580:	d035      	beq.n	80135ee <_scanf_i+0x15e>
 8013582:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8013586:	d124      	bne.n	80135d2 <_scanf_i+0x142>
 8013588:	0510      	lsls	r0, r2, #20
 801358a:	d522      	bpl.n	80135d2 <_scanf_i+0x142>
 801358c:	f10b 0b01 	add.w	fp, fp, #1
 8013590:	f1b9 0f00 	cmp.w	r9, #0
 8013594:	d003      	beq.n	801359e <_scanf_i+0x10e>
 8013596:	3301      	adds	r3, #1
 8013598:	f109 39ff 	add.w	r9, r9, #4294967295
 801359c:	60a3      	str	r3, [r4, #8]
 801359e:	6873      	ldr	r3, [r6, #4]
 80135a0:	3b01      	subs	r3, #1
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	6073      	str	r3, [r6, #4]
 80135a6:	dd1b      	ble.n	80135e0 <_scanf_i+0x150>
 80135a8:	6833      	ldr	r3, [r6, #0]
 80135aa:	3301      	adds	r3, #1
 80135ac:	6033      	str	r3, [r6, #0]
 80135ae:	68a3      	ldr	r3, [r4, #8]
 80135b0:	3b01      	subs	r3, #1
 80135b2:	60a3      	str	r3, [r4, #8]
 80135b4:	e7d9      	b.n	801356a <_scanf_i+0xda>
 80135b6:	f1bb 0f02 	cmp.w	fp, #2
 80135ba:	d1ae      	bne.n	801351a <_scanf_i+0x8a>
 80135bc:	6822      	ldr	r2, [r4, #0]
 80135be:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80135c2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80135c6:	d1bf      	bne.n	8013548 <_scanf_i+0xb8>
 80135c8:	2310      	movs	r3, #16
 80135ca:	6063      	str	r3, [r4, #4]
 80135cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80135d0:	e7a2      	b.n	8013518 <_scanf_i+0x88>
 80135d2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80135d6:	6022      	str	r2, [r4, #0]
 80135d8:	780b      	ldrb	r3, [r1, #0]
 80135da:	f805 3b01 	strb.w	r3, [r5], #1
 80135de:	e7de      	b.n	801359e <_scanf_i+0x10e>
 80135e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80135e4:	4631      	mov	r1, r6
 80135e6:	4650      	mov	r0, sl
 80135e8:	4798      	blx	r3
 80135ea:	2800      	cmp	r0, #0
 80135ec:	d0df      	beq.n	80135ae <_scanf_i+0x11e>
 80135ee:	6823      	ldr	r3, [r4, #0]
 80135f0:	05d9      	lsls	r1, r3, #23
 80135f2:	d50d      	bpl.n	8013610 <_scanf_i+0x180>
 80135f4:	42bd      	cmp	r5, r7
 80135f6:	d909      	bls.n	801360c <_scanf_i+0x17c>
 80135f8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80135fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013600:	4632      	mov	r2, r6
 8013602:	4650      	mov	r0, sl
 8013604:	4798      	blx	r3
 8013606:	f105 39ff 	add.w	r9, r5, #4294967295
 801360a:	464d      	mov	r5, r9
 801360c:	42bd      	cmp	r5, r7
 801360e:	d028      	beq.n	8013662 <_scanf_i+0x1d2>
 8013610:	6822      	ldr	r2, [r4, #0]
 8013612:	f012 0210 	ands.w	r2, r2, #16
 8013616:	d113      	bne.n	8013640 <_scanf_i+0x1b0>
 8013618:	702a      	strb	r2, [r5, #0]
 801361a:	6863      	ldr	r3, [r4, #4]
 801361c:	9e01      	ldr	r6, [sp, #4]
 801361e:	4639      	mov	r1, r7
 8013620:	4650      	mov	r0, sl
 8013622:	47b0      	blx	r6
 8013624:	f8d8 3000 	ldr.w	r3, [r8]
 8013628:	6821      	ldr	r1, [r4, #0]
 801362a:	1d1a      	adds	r2, r3, #4
 801362c:	f8c8 2000 	str.w	r2, [r8]
 8013630:	f011 0f20 	tst.w	r1, #32
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	d00f      	beq.n	8013658 <_scanf_i+0x1c8>
 8013638:	6018      	str	r0, [r3, #0]
 801363a:	68e3      	ldr	r3, [r4, #12]
 801363c:	3301      	adds	r3, #1
 801363e:	60e3      	str	r3, [r4, #12]
 8013640:	1bed      	subs	r5, r5, r7
 8013642:	44ab      	add	fp, r5
 8013644:	6925      	ldr	r5, [r4, #16]
 8013646:	445d      	add	r5, fp
 8013648:	6125      	str	r5, [r4, #16]
 801364a:	2000      	movs	r0, #0
 801364c:	b007      	add	sp, #28
 801364e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013652:	f04f 0b00 	mov.w	fp, #0
 8013656:	e7ca      	b.n	80135ee <_scanf_i+0x15e>
 8013658:	07ca      	lsls	r2, r1, #31
 801365a:	bf4c      	ite	mi
 801365c:	8018      	strhmi	r0, [r3, #0]
 801365e:	6018      	strpl	r0, [r3, #0]
 8013660:	e7eb      	b.n	801363a <_scanf_i+0x1aa>
 8013662:	2001      	movs	r0, #1
 8013664:	e7f2      	b.n	801364c <_scanf_i+0x1bc>
 8013666:	bf00      	nop
 8013668:	080146dc 	.word	0x080146dc
 801366c:	08010845 	.word	0x08010845
 8013670:	08010749 	.word	0x08010749
 8013674:	08014cee 	.word	0x08014cee

08013678 <_read_r>:
 8013678:	b538      	push	{r3, r4, r5, lr}
 801367a:	4d07      	ldr	r5, [pc, #28]	; (8013698 <_read_r+0x20>)
 801367c:	4604      	mov	r4, r0
 801367e:	4608      	mov	r0, r1
 8013680:	4611      	mov	r1, r2
 8013682:	2200      	movs	r2, #0
 8013684:	602a      	str	r2, [r5, #0]
 8013686:	461a      	mov	r2, r3
 8013688:	f000 f8e4 	bl	8013854 <_read>
 801368c:	1c43      	adds	r3, r0, #1
 801368e:	d102      	bne.n	8013696 <_read_r+0x1e>
 8013690:	682b      	ldr	r3, [r5, #0]
 8013692:	b103      	cbz	r3, 8013696 <_read_r+0x1e>
 8013694:	6023      	str	r3, [r4, #0]
 8013696:	bd38      	pop	{r3, r4, r5, pc}
 8013698:	200062e4 	.word	0x200062e4

0801369c <__sccl>:
 801369c:	b570      	push	{r4, r5, r6, lr}
 801369e:	780b      	ldrb	r3, [r1, #0]
 80136a0:	4604      	mov	r4, r0
 80136a2:	2b5e      	cmp	r3, #94	; 0x5e
 80136a4:	bf0b      	itete	eq
 80136a6:	784b      	ldrbeq	r3, [r1, #1]
 80136a8:	1c48      	addne	r0, r1, #1
 80136aa:	1c88      	addeq	r0, r1, #2
 80136ac:	2200      	movne	r2, #0
 80136ae:	bf08      	it	eq
 80136b0:	2201      	moveq	r2, #1
 80136b2:	1e61      	subs	r1, r4, #1
 80136b4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80136b8:	f801 2f01 	strb.w	r2, [r1, #1]!
 80136bc:	42a9      	cmp	r1, r5
 80136be:	d1fb      	bne.n	80136b8 <__sccl+0x1c>
 80136c0:	b90b      	cbnz	r3, 80136c6 <__sccl+0x2a>
 80136c2:	3801      	subs	r0, #1
 80136c4:	bd70      	pop	{r4, r5, r6, pc}
 80136c6:	f082 0101 	eor.w	r1, r2, #1
 80136ca:	54e1      	strb	r1, [r4, r3]
 80136cc:	1c42      	adds	r2, r0, #1
 80136ce:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80136d2:	2d2d      	cmp	r5, #45	; 0x2d
 80136d4:	f102 36ff 	add.w	r6, r2, #4294967295
 80136d8:	4610      	mov	r0, r2
 80136da:	d006      	beq.n	80136ea <__sccl+0x4e>
 80136dc:	2d5d      	cmp	r5, #93	; 0x5d
 80136de:	d0f1      	beq.n	80136c4 <__sccl+0x28>
 80136e0:	b90d      	cbnz	r5, 80136e6 <__sccl+0x4a>
 80136e2:	4630      	mov	r0, r6
 80136e4:	e7ee      	b.n	80136c4 <__sccl+0x28>
 80136e6:	462b      	mov	r3, r5
 80136e8:	e7ef      	b.n	80136ca <__sccl+0x2e>
 80136ea:	7816      	ldrb	r6, [r2, #0]
 80136ec:	2e5d      	cmp	r6, #93	; 0x5d
 80136ee:	d0fa      	beq.n	80136e6 <__sccl+0x4a>
 80136f0:	42b3      	cmp	r3, r6
 80136f2:	dcf8      	bgt.n	80136e6 <__sccl+0x4a>
 80136f4:	4618      	mov	r0, r3
 80136f6:	3001      	adds	r0, #1
 80136f8:	4286      	cmp	r6, r0
 80136fa:	5421      	strb	r1, [r4, r0]
 80136fc:	dcfb      	bgt.n	80136f6 <__sccl+0x5a>
 80136fe:	43d8      	mvns	r0, r3
 8013700:	4430      	add	r0, r6
 8013702:	1c5d      	adds	r5, r3, #1
 8013704:	42b3      	cmp	r3, r6
 8013706:	bfa8      	it	ge
 8013708:	2000      	movge	r0, #0
 801370a:	182b      	adds	r3, r5, r0
 801370c:	3202      	adds	r2, #2
 801370e:	e7de      	b.n	80136ce <__sccl+0x32>

08013710 <__submore>:
 8013710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013714:	460c      	mov	r4, r1
 8013716:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013718:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801371c:	4299      	cmp	r1, r3
 801371e:	d11d      	bne.n	801375c <__submore+0x4c>
 8013720:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013724:	f7fb f894 	bl	800e850 <_malloc_r>
 8013728:	b918      	cbnz	r0, 8013732 <__submore+0x22>
 801372a:	f04f 30ff 	mov.w	r0, #4294967295
 801372e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013736:	63a3      	str	r3, [r4, #56]	; 0x38
 8013738:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801373c:	6360      	str	r0, [r4, #52]	; 0x34
 801373e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8013742:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013746:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801374a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801374e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8013752:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8013756:	6020      	str	r0, [r4, #0]
 8013758:	2000      	movs	r0, #0
 801375a:	e7e8      	b.n	801372e <__submore+0x1e>
 801375c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801375e:	0077      	lsls	r7, r6, #1
 8013760:	463a      	mov	r2, r7
 8013762:	f7ff f98f 	bl	8012a84 <_realloc_r>
 8013766:	4605      	mov	r5, r0
 8013768:	2800      	cmp	r0, #0
 801376a:	d0de      	beq.n	801372a <__submore+0x1a>
 801376c:	eb00 0806 	add.w	r8, r0, r6
 8013770:	4601      	mov	r1, r0
 8013772:	4632      	mov	r2, r6
 8013774:	4640      	mov	r0, r8
 8013776:	f7fa ffeb 	bl	800e750 <memcpy>
 801377a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801377e:	f8c4 8000 	str.w	r8, [r4]
 8013782:	e7e9      	b.n	8013758 <__submore+0x48>

08013784 <__ascii_wctomb>:
 8013784:	b149      	cbz	r1, 801379a <__ascii_wctomb+0x16>
 8013786:	2aff      	cmp	r2, #255	; 0xff
 8013788:	bf85      	ittet	hi
 801378a:	238a      	movhi	r3, #138	; 0x8a
 801378c:	6003      	strhi	r3, [r0, #0]
 801378e:	700a      	strbls	r2, [r1, #0]
 8013790:	f04f 30ff 	movhi.w	r0, #4294967295
 8013794:	bf98      	it	ls
 8013796:	2001      	movls	r0, #1
 8013798:	4770      	bx	lr
 801379a:	4608      	mov	r0, r1
 801379c:	4770      	bx	lr
	...

080137a0 <_fstat_r>:
 80137a0:	b538      	push	{r3, r4, r5, lr}
 80137a2:	4d07      	ldr	r5, [pc, #28]	; (80137c0 <_fstat_r+0x20>)
 80137a4:	2300      	movs	r3, #0
 80137a6:	4604      	mov	r4, r0
 80137a8:	4608      	mov	r0, r1
 80137aa:	4611      	mov	r1, r2
 80137ac:	602b      	str	r3, [r5, #0]
 80137ae:	f000 f829 	bl	8013804 <_fstat>
 80137b2:	1c43      	adds	r3, r0, #1
 80137b4:	d102      	bne.n	80137bc <_fstat_r+0x1c>
 80137b6:	682b      	ldr	r3, [r5, #0]
 80137b8:	b103      	cbz	r3, 80137bc <_fstat_r+0x1c>
 80137ba:	6023      	str	r3, [r4, #0]
 80137bc:	bd38      	pop	{r3, r4, r5, pc}
 80137be:	bf00      	nop
 80137c0:	200062e4 	.word	0x200062e4

080137c4 <_isatty_r>:
 80137c4:	b538      	push	{r3, r4, r5, lr}
 80137c6:	4d06      	ldr	r5, [pc, #24]	; (80137e0 <_isatty_r+0x1c>)
 80137c8:	2300      	movs	r3, #0
 80137ca:	4604      	mov	r4, r0
 80137cc:	4608      	mov	r0, r1
 80137ce:	602b      	str	r3, [r5, #0]
 80137d0:	f000 f828 	bl	8013824 <_isatty>
 80137d4:	1c43      	adds	r3, r0, #1
 80137d6:	d102      	bne.n	80137de <_isatty_r+0x1a>
 80137d8:	682b      	ldr	r3, [r5, #0]
 80137da:	b103      	cbz	r3, 80137de <_isatty_r+0x1a>
 80137dc:	6023      	str	r3, [r4, #0]
 80137de:	bd38      	pop	{r3, r4, r5, pc}
 80137e0:	200062e4 	.word	0x200062e4

080137e4 <_malloc_usable_size_r>:
 80137e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80137e8:	1f18      	subs	r0, r3, #4
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	bfbc      	itt	lt
 80137ee:	580b      	ldrlt	r3, [r1, r0]
 80137f0:	18c0      	addlt	r0, r0, r3
 80137f2:	4770      	bx	lr

080137f4 <_close>:
 80137f4:	4b02      	ldr	r3, [pc, #8]	; (8013800 <_close+0xc>)
 80137f6:	2258      	movs	r2, #88	; 0x58
 80137f8:	601a      	str	r2, [r3, #0]
 80137fa:	f04f 30ff 	mov.w	r0, #4294967295
 80137fe:	4770      	bx	lr
 8013800:	200062e4 	.word	0x200062e4

08013804 <_fstat>:
 8013804:	4b02      	ldr	r3, [pc, #8]	; (8013810 <_fstat+0xc>)
 8013806:	2258      	movs	r2, #88	; 0x58
 8013808:	601a      	str	r2, [r3, #0]
 801380a:	f04f 30ff 	mov.w	r0, #4294967295
 801380e:	4770      	bx	lr
 8013810:	200062e4 	.word	0x200062e4

08013814 <_getpid>:
 8013814:	4b02      	ldr	r3, [pc, #8]	; (8013820 <_getpid+0xc>)
 8013816:	2258      	movs	r2, #88	; 0x58
 8013818:	601a      	str	r2, [r3, #0]
 801381a:	f04f 30ff 	mov.w	r0, #4294967295
 801381e:	4770      	bx	lr
 8013820:	200062e4 	.word	0x200062e4

08013824 <_isatty>:
 8013824:	4b02      	ldr	r3, [pc, #8]	; (8013830 <_isatty+0xc>)
 8013826:	2258      	movs	r2, #88	; 0x58
 8013828:	601a      	str	r2, [r3, #0]
 801382a:	2000      	movs	r0, #0
 801382c:	4770      	bx	lr
 801382e:	bf00      	nop
 8013830:	200062e4 	.word	0x200062e4

08013834 <_kill>:
 8013834:	4b02      	ldr	r3, [pc, #8]	; (8013840 <_kill+0xc>)
 8013836:	2258      	movs	r2, #88	; 0x58
 8013838:	601a      	str	r2, [r3, #0]
 801383a:	f04f 30ff 	mov.w	r0, #4294967295
 801383e:	4770      	bx	lr
 8013840:	200062e4 	.word	0x200062e4

08013844 <_lseek>:
 8013844:	4b02      	ldr	r3, [pc, #8]	; (8013850 <_lseek+0xc>)
 8013846:	2258      	movs	r2, #88	; 0x58
 8013848:	601a      	str	r2, [r3, #0]
 801384a:	f04f 30ff 	mov.w	r0, #4294967295
 801384e:	4770      	bx	lr
 8013850:	200062e4 	.word	0x200062e4

08013854 <_read>:
 8013854:	4b02      	ldr	r3, [pc, #8]	; (8013860 <_read+0xc>)
 8013856:	2258      	movs	r2, #88	; 0x58
 8013858:	601a      	str	r2, [r3, #0]
 801385a:	f04f 30ff 	mov.w	r0, #4294967295
 801385e:	4770      	bx	lr
 8013860:	200062e4 	.word	0x200062e4

08013864 <_sbrk>:
 8013864:	4b04      	ldr	r3, [pc, #16]	; (8013878 <_sbrk+0x14>)
 8013866:	6819      	ldr	r1, [r3, #0]
 8013868:	4602      	mov	r2, r0
 801386a:	b909      	cbnz	r1, 8013870 <_sbrk+0xc>
 801386c:	4903      	ldr	r1, [pc, #12]	; (801387c <_sbrk+0x18>)
 801386e:	6019      	str	r1, [r3, #0]
 8013870:	6818      	ldr	r0, [r3, #0]
 8013872:	4402      	add	r2, r0
 8013874:	601a      	str	r2, [r3, #0]
 8013876:	4770      	bx	lr
 8013878:	20005974 	.word	0x20005974
 801387c:	200062e8 	.word	0x200062e8

08013880 <_write>:
 8013880:	4b02      	ldr	r3, [pc, #8]	; (801388c <_write+0xc>)
 8013882:	2258      	movs	r2, #88	; 0x58
 8013884:	601a      	str	r2, [r3, #0]
 8013886:	f04f 30ff 	mov.w	r0, #4294967295
 801388a:	4770      	bx	lr
 801388c:	200062e4 	.word	0x200062e4

08013890 <_exit>:
 8013890:	e7fe      	b.n	8013890 <_exit>
	...

08013894 <_init>:
 8013894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013896:	bf00      	nop
 8013898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801389a:	bc08      	pop	{r3}
 801389c:	469e      	mov	lr, r3
 801389e:	4770      	bx	lr

080138a0 <_fini>:
 80138a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138a2:	bf00      	nop
 80138a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80138a6:	bc08      	pop	{r3}
 80138a8:	469e      	mov	lr, r3
 80138aa:	4770      	bx	lr
