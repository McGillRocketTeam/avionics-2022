
FC_v2.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a540  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002620  0801a6f0  0801a6f0  0002a6f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cd10  0801cd10  00030314  2**0
                  CONTENTS
  4 .ARM          00000008  0801cd10  0801cd10  0002cd10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cd18  0801cd18  00030314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801cd18  0801cd18  0002cd18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cd20  0801cd20  0002cd20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000314  20000000  0801cd24  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030314  2**0
                  CONTENTS
 10 .bss          00006244  20000314  20000314  00030314  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20006558  20006558  00030314  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030314  2**0
                  CONTENTS, READONLY
 13 .debug_info   0006a8d7  00000000  00000000  00030344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009935  00000000  00000000  0009ac1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003690  00000000  00000000  000a4550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000033c8  00000000  00000000  000a7be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00036bd2  00000000  00000000  000aafa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00040324  00000000  00000000  000e1b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00110f2c  00000000  00000000  00121e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00232dca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00010590  00000000  00000000  00232e20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  002433b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  0024347c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000314 	.word	0x20000314
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801a6d8 	.word	0x0801a6d8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000318 	.word	0x20000318
 80001ec:	0801a6d8 	.word	0x0801a6d8

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9ef 	b.w	80010c8 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a4 	b.w	80010c8 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	468c      	mov	ip, r1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8083 	bne.w	8000f1a <__udivmoddi4+0x116>
 8000e14:	428a      	cmp	r2, r1
 8000e16:	4617      	mov	r7, r2
 8000e18:	d947      	bls.n	8000eaa <__udivmoddi4+0xa6>
 8000e1a:	fab2 f282 	clz	r2, r2
 8000e1e:	b142      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e20:	f1c2 0020 	rsb	r0, r2, #32
 8000e24:	fa24 f000 	lsr.w	r0, r4, r0
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4097      	lsls	r7, r2
 8000e2c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e30:	4094      	lsls	r4, r2
 8000e32:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e36:	0c23      	lsrs	r3, r4, #16
 8000e38:	fbbc f6f8 	udiv	r6, ip, r8
 8000e3c:	fa1f fe87 	uxth.w	lr, r7
 8000e40:	fb08 c116 	mls	r1, r8, r6, ip
 8000e44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e48:	fb06 f10e 	mul.w	r1, r6, lr
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x60>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e56:	f080 8119 	bcs.w	800108c <__udivmoddi4+0x288>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 8116 	bls.w	800108c <__udivmoddi4+0x288>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e78:	45a6      	cmp	lr, r4
 8000e7a:	d909      	bls.n	8000e90 <__udivmoddi4+0x8c>
 8000e7c:	193c      	adds	r4, r7, r4
 8000e7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e82:	f080 8105 	bcs.w	8001090 <__udivmoddi4+0x28c>
 8000e86:	45a6      	cmp	lr, r4
 8000e88:	f240 8102 	bls.w	8001090 <__udivmoddi4+0x28c>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	443c      	add	r4, r7
 8000e90:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e94:	eba4 040e 	sub.w	r4, r4, lr
 8000e98:	2600      	movs	r6, #0
 8000e9a:	b11d      	cbz	r5, 8000ea4 <__udivmoddi4+0xa0>
 8000e9c:	40d4      	lsrs	r4, r2
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	b902      	cbnz	r2, 8000eae <__udivmoddi4+0xaa>
 8000eac:	deff      	udf	#255	; 0xff
 8000eae:	fab2 f282 	clz	r2, r2
 8000eb2:	2a00      	cmp	r2, #0
 8000eb4:	d150      	bne.n	8000f58 <__udivmoddi4+0x154>
 8000eb6:	1bcb      	subs	r3, r1, r7
 8000eb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ebc:	fa1f f887 	uxth.w	r8, r7
 8000ec0:	2601      	movs	r6, #1
 8000ec2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ec6:	0c21      	lsrs	r1, r4, #16
 8000ec8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0xe4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0xe2>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	f200 80e9 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000ee6:	4684      	mov	ip, r0
 8000ee8:	1ac9      	subs	r1, r1, r3
 8000eea:	b2a3      	uxth	r3, r4
 8000eec:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ef8:	fb08 f800 	mul.w	r8, r8, r0
 8000efc:	45a0      	cmp	r8, r4
 8000efe:	d907      	bls.n	8000f10 <__udivmoddi4+0x10c>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f06:	d202      	bcs.n	8000f0e <__udivmoddi4+0x10a>
 8000f08:	45a0      	cmp	r8, r4
 8000f0a:	f200 80d9 	bhi.w	80010c0 <__udivmoddi4+0x2bc>
 8000f0e:	4618      	mov	r0, r3
 8000f10:	eba4 0408 	sub.w	r4, r4, r8
 8000f14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f18:	e7bf      	b.n	8000e9a <__udivmoddi4+0x96>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d909      	bls.n	8000f32 <__udivmoddi4+0x12e>
 8000f1e:	2d00      	cmp	r5, #0
 8000f20:	f000 80b1 	beq.w	8001086 <__udivmoddi4+0x282>
 8000f24:	2600      	movs	r6, #0
 8000f26:	e9c5 0100 	strd	r0, r1, [r5]
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	4631      	mov	r1, r6
 8000f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f32:	fab3 f683 	clz	r6, r3
 8000f36:	2e00      	cmp	r6, #0
 8000f38:	d14a      	bne.n	8000fd0 <__udivmoddi4+0x1cc>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d302      	bcc.n	8000f44 <__udivmoddi4+0x140>
 8000f3e:	4282      	cmp	r2, r0
 8000f40:	f200 80b8 	bhi.w	80010b4 <__udivmoddi4+0x2b0>
 8000f44:	1a84      	subs	r4, r0, r2
 8000f46:	eb61 0103 	sbc.w	r1, r1, r3
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	468c      	mov	ip, r1
 8000f4e:	2d00      	cmp	r5, #0
 8000f50:	d0a8      	beq.n	8000ea4 <__udivmoddi4+0xa0>
 8000f52:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f56:	e7a5      	b.n	8000ea4 <__udivmoddi4+0xa0>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f60:	4097      	lsls	r7, r2
 8000f62:	fa01 f002 	lsl.w	r0, r1, r2
 8000f66:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6a:	40d9      	lsrs	r1, r3
 8000f6c:	4330      	orrs	r0, r6
 8000f6e:	0c03      	lsrs	r3, r0, #16
 8000f70:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f74:	fa1f f887 	uxth.w	r8, r7
 8000f78:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f80:	fb06 f108 	mul.w	r1, r6, r8
 8000f84:	4299      	cmp	r1, r3
 8000f86:	fa04 f402 	lsl.w	r4, r4, r2
 8000f8a:	d909      	bls.n	8000fa0 <__udivmoddi4+0x19c>
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f92:	f080 808d 	bcs.w	80010b0 <__udivmoddi4+0x2ac>
 8000f96:	4299      	cmp	r1, r3
 8000f98:	f240 808a 	bls.w	80010b0 <__udivmoddi4+0x2ac>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	443b      	add	r3, r7
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b281      	uxth	r1, r0
 8000fa4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fa8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb0:	fb00 f308 	mul.w	r3, r0, r8
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	d907      	bls.n	8000fc8 <__udivmoddi4+0x1c4>
 8000fb8:	1879      	adds	r1, r7, r1
 8000fba:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fbe:	d273      	bcs.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc0:	428b      	cmp	r3, r1
 8000fc2:	d971      	bls.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	4439      	add	r1, r7
 8000fc8:	1acb      	subs	r3, r1, r3
 8000fca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fce:	e778      	b.n	8000ec2 <__udivmoddi4+0xbe>
 8000fd0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fd4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fd8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fdc:	431c      	orrs	r4, r3
 8000fde:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fe2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fe6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fea:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fee:	431f      	orrs	r7, r3
 8000ff0:	0c3b      	lsrs	r3, r7, #16
 8000ff2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff6:	fa1f f884 	uxth.w	r8, r4
 8000ffa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001002:	fb09 fa08 	mul.w	sl, r9, r8
 8001006:	458a      	cmp	sl, r1
 8001008:	fa02 f206 	lsl.w	r2, r2, r6
 800100c:	fa00 f306 	lsl.w	r3, r0, r6
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x220>
 8001012:	1861      	adds	r1, r4, r1
 8001014:	f109 30ff 	add.w	r0, r9, #4294967295
 8001018:	d248      	bcs.n	80010ac <__udivmoddi4+0x2a8>
 800101a:	458a      	cmp	sl, r1
 800101c:	d946      	bls.n	80010ac <__udivmoddi4+0x2a8>
 800101e:	f1a9 0902 	sub.w	r9, r9, #2
 8001022:	4421      	add	r1, r4
 8001024:	eba1 010a 	sub.w	r1, r1, sl
 8001028:	b2bf      	uxth	r7, r7
 800102a:	fbb1 f0fe 	udiv	r0, r1, lr
 800102e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001032:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001036:	fb00 f808 	mul.w	r8, r0, r8
 800103a:	45b8      	cmp	r8, r7
 800103c:	d907      	bls.n	800104e <__udivmoddi4+0x24a>
 800103e:	19e7      	adds	r7, r4, r7
 8001040:	f100 31ff 	add.w	r1, r0, #4294967295
 8001044:	d22e      	bcs.n	80010a4 <__udivmoddi4+0x2a0>
 8001046:	45b8      	cmp	r8, r7
 8001048:	d92c      	bls.n	80010a4 <__udivmoddi4+0x2a0>
 800104a:	3802      	subs	r0, #2
 800104c:	4427      	add	r7, r4
 800104e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001052:	eba7 0708 	sub.w	r7, r7, r8
 8001056:	fba0 8902 	umull	r8, r9, r0, r2
 800105a:	454f      	cmp	r7, r9
 800105c:	46c6      	mov	lr, r8
 800105e:	4649      	mov	r1, r9
 8001060:	d31a      	bcc.n	8001098 <__udivmoddi4+0x294>
 8001062:	d017      	beq.n	8001094 <__udivmoddi4+0x290>
 8001064:	b15d      	cbz	r5, 800107e <__udivmoddi4+0x27a>
 8001066:	ebb3 020e 	subs.w	r2, r3, lr
 800106a:	eb67 0701 	sbc.w	r7, r7, r1
 800106e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001072:	40f2      	lsrs	r2, r6
 8001074:	ea4c 0202 	orr.w	r2, ip, r2
 8001078:	40f7      	lsrs	r7, r6
 800107a:	e9c5 2700 	strd	r2, r7, [r5]
 800107e:	2600      	movs	r6, #0
 8001080:	4631      	mov	r1, r6
 8001082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e70b      	b.n	8000ea4 <__udivmoddi4+0xa0>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e9      	b.n	8000e64 <__udivmoddi4+0x60>
 8001090:	4618      	mov	r0, r3
 8001092:	e6fd      	b.n	8000e90 <__udivmoddi4+0x8c>
 8001094:	4543      	cmp	r3, r8
 8001096:	d2e5      	bcs.n	8001064 <__udivmoddi4+0x260>
 8001098:	ebb8 0e02 	subs.w	lr, r8, r2
 800109c:	eb69 0104 	sbc.w	r1, r9, r4
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7df      	b.n	8001064 <__udivmoddi4+0x260>
 80010a4:	4608      	mov	r0, r1
 80010a6:	e7d2      	b.n	800104e <__udivmoddi4+0x24a>
 80010a8:	4660      	mov	r0, ip
 80010aa:	e78d      	b.n	8000fc8 <__udivmoddi4+0x1c4>
 80010ac:	4681      	mov	r9, r0
 80010ae:	e7b9      	b.n	8001024 <__udivmoddi4+0x220>
 80010b0:	4666      	mov	r6, ip
 80010b2:	e775      	b.n	8000fa0 <__udivmoddi4+0x19c>
 80010b4:	4630      	mov	r0, r6
 80010b6:	e74a      	b.n	8000f4e <__udivmoddi4+0x14a>
 80010b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010bc:	4439      	add	r1, r7
 80010be:	e713      	b.n	8000ee8 <__udivmoddi4+0xe4>
 80010c0:	3802      	subs	r0, #2
 80010c2:	443c      	add	r4, r7
 80010c4:	e724      	b.n	8000f10 <__udivmoddi4+0x10c>
 80010c6:	bf00      	nop

080010c8 <__aeabi_idiv0>:
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <println>:

#include <MRT_helpers.h>
#include <MRT_setup.h>
#include <tim.h>

void println(char* s){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	#if PRINT
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff f895 	bl	8000204 <strlen>
 80010da:	4603      	mov	r3, r0
 80010dc:	b29a      	uxth	r2, r3
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4806      	ldr	r0, [pc, #24]	; (8001100 <println+0x34>)
 80010e6:	f00e fdba 	bl	800fc5e <HAL_UART_Transmit>
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	2202      	movs	r2, #2
 80010f0:	4904      	ldr	r1, [pc, #16]	; (8001104 <println+0x38>)
 80010f2:	4803      	ldr	r0, [pc, #12]	; (8001100 <println+0x34>)
 80010f4:	f00e fdb3 	bl	800fc5e <HAL_UART_Transmit>
	#endif
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20005e04 	.word	0x20005e04
 8001104:	0801a6f0 	.word	0x0801a6f0

08001108 <print>:

void print(char* s){
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	#if PRINT
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff f877 	bl	8000204 <strlen>
 8001116:	4603      	mov	r3, r0
 8001118:	b29a      	uxth	r2, r3
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	4803      	ldr	r0, [pc, #12]	; (8001130 <print+0x28>)
 8001122:	f00e fd9c 	bl	800fc5e <HAL_UART_Transmit>
	#endif
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20005e04 	.word	0x20005e04

08001134 <tone_freq>:
void no_print(char* s){
	//TODO Buffer function for Iridium
}

// buzz at particular frequency
void tone_freq(uint32_t duration, uint32_t repeats, uint32_t freq) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
	#if !NO_BUZZ
	// TIM2 base frequency is 90 MHz, PSC = 90-1
	// can calculate required ARR value
	TIM2->ARR = 1000000 / freq;
 8001140:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001144:	491c      	ldr	r1, [pc, #112]	; (80011b8 <tone_freq+0x84>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	fbb1 f3f3 	udiv	r3, r1, r3
 800114c:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->EGR |= TIM_EGR_UG;
 800114e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6153      	str	r3, [r2, #20]

	for (uint32_t i = 0; i < repeats; i++) {
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
 8001162:	e01f      	b.n	80011a4 <tone_freq+0x70>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001164:	2108      	movs	r1, #8
 8001166:	4815      	ldr	r0, [pc, #84]	; (80011bc <tone_freq+0x88>)
 8001168:	f00d fd9a 	bl	800eca0 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(POWER_ON_EXT_LED_GPIO_Port, POWER_ON_EXT_LED_Pin, SET);
 800116c:	2201      	movs	r2, #1
 800116e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001172:	4813      	ldr	r0, [pc, #76]	; (80011c0 <tone_freq+0x8c>)
 8001174:	f00a f932 	bl	800b3dc <HAL_GPIO_WritePin>
		HAL_Delay(duration);
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	f009 fa23 	bl	800a5c4 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 800117e:	2108      	movs	r1, #8
 8001180:	480e      	ldr	r0, [pc, #56]	; (80011bc <tone_freq+0x88>)
 8001182:	f00d fe55 	bl	800ee30 <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(POWER_ON_EXT_LED_GPIO_Port, POWER_ON_EXT_LED_Pin, RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 7100 	mov.w	r1, #512	; 0x200
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <tone_freq+0x8c>)
 800118e:	f00a f925 	bl	800b3dc <HAL_GPIO_WritePin>
		if (repeats > 1)
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d902      	bls.n	800119e <tone_freq+0x6a>
			HAL_Delay(duration);
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f009 fa13 	bl	800a5c4 <HAL_Delay>
	for (uint32_t i = 0; i < repeats; i++) {
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	3301      	adds	r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d3db      	bcc.n	8001164 <tone_freq+0x30>
	}
	#endif
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	000f4240 	.word	0x000f4240
 80011bc:	20005d78 	.word	0x20005d78
 80011c0:	40020400 	.word	0x40020400

080011c4 <buzz_success>:
void buzz_success(void) { tone_freq(BUZZ_SUCCESS_DURATION, BUZZ_SUCCESS_REPEATS, BUZZ_SUCCESS_FREQ); }
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	f240 4216 	movw	r2, #1046	; 0x416
 80011cc:	2102      	movs	r1, #2
 80011ce:	204b      	movs	r0, #75	; 0x4b
 80011d0:	f7ff ffb0 	bl	8001134 <tone_freq>
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <buzz_startup_success>:
void buzz_failure(void) { tone_freq(BUZZ_FAILURE_DURATION, BUZZ_FAILURE_REPEATS, BUZZ_FAILURE_FREQ); }
void buzz_startup_success(void) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 80011de:	2300      	movs	r3, #0
 80011e0:	71fb      	strb	r3, [r7, #7]
 80011e2:	e008      	b.n	80011f6 <buzz_startup_success+0x1e>
		buzz_success();
 80011e4:	f7ff ffee 	bl	80011c4 <buzz_success>
		HAL_Delay(1000);
 80011e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ec:	f009 f9ea 	bl	800a5c4 <HAL_Delay>
	for (uint8_t i = 0; i < 3; i++) {
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	3301      	adds	r3, #1
 80011f4:	71fb      	strb	r3, [r7, #7]
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d9f3      	bls.n	80011e4 <buzz_startup_success+0xc>
	}
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <MRT_Init>:


//**************************************************//
//PUBLIC FUNCTIONS

void MRT_Init(void){
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	print((char*) "\r\n\r\n/********MRT Init********/\r\n");
 800120c:	4808      	ldr	r0, [pc, #32]	; (8001230 <MRT_Init+0x28>)
 800120e:	f7ff ff7b 	bl	8001108 <print>
	print((char*) "IWDG Init...");
	MX_IWDG_Init();
	print((char*) "OK\r\n");
	#endif

	MRT_Reinitialize_Peripherals();
 8001212:	f000 f8f3 	bl	80013fc <MRT_Reinitialize_Peripherals>

	//Memory
	MRT_MEMORY_Init();
 8001216:	f002 fe7b 	bl	8003f10 <MRT_MEMORY_Init>
	MRT_reset_info();
 800121a:	f000 f819 	bl	8001250 <MRT_reset_info>

	//RTC
	HAL_IWDG_Refresh(&hiwdg);
	MRT_rtc_Init();
 800121e:	f001 fc2b 	bl	8002a78 <MRT_rtc_Init>
		  checkForI2CDevices(huart8,hi2c1);
		  checkForI2CDevices(huart8,hi2c2);
		  checkForI2CDevices(huart8,hi2c3);
		#endif

		MRT_i2c_sensors_Init();
 8001222:	f003 ff85 	bl	8005130 <MRT_i2c_sensors_Init>
	#endif


	//Telemetry
	#if TELEMETRY_THREAD
		MRT_TELEMETRY_Init();
 8001226:	f009 f969 	bl	800a4fc <MRT_TELEMETRY_Init>
	#endif

	#if FORCED_EJECTION_STAGE
		   ejection_stage_flag = FORCED_STAGE;
	#endif
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	0801a6f4 	.word	0x0801a6f4

08001234 <MRT_Deinit>:




void MRT_Deinit(void){
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	print((char*) "\r\n\r\n/********MRT Deinit********/\r\n");
 8001238:	4804      	ldr	r0, [pc, #16]	; (800124c <MRT_Deinit+0x18>)
 800123a:	f7ff ff65 	bl	8001108 <print>

	MRT_Reinitialize_Peripherals();
 800123e:	f000 f8dd 	bl	80013fc <MRT_Reinitialize_Peripherals>
	#endif


	//Sensors
	#if SENSORS_THREAD
		MRT_i2c_sensors_Deinit();
 8001242:	f003 ffa5 	bl	8005190 <MRT_i2c_sensors_Deinit>
	#endif

    //TODO
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	0801a718 	.word	0x0801a718

08001250 <MRT_reset_info>:

//**************************************************//
//PRIVATE FUNCTIONS


void MRT_reset_info(void){
 8001250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001252:	b0a9      	sub	sp, #164	; 0xa4
 8001254:	af06      	add	r7, sp, #24

	  char buffer[100];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\nPrevious RTC time: %i:%i:%i ::%i\r\n",
 8001256:	4b51      	ldr	r3, [pc, #324]	; (800139c <MRT_reset_info+0x14c>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	461e      	mov	r6, r3
 800125c:	4b50      	ldr	r3, [pc, #320]	; (80013a0 <MRT_reset_info+0x150>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	469c      	mov	ip, r3
 8001262:	4b50      	ldr	r3, [pc, #320]	; (80013a4 <MRT_reset_info+0x154>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	4b4f      	ldr	r3, [pc, #316]	; (80013a8 <MRT_reset_info+0x158>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	4619      	mov	r1, r3
 800126e:	4b4f      	ldr	r3, [pc, #316]	; (80013ac <MRT_reset_info+0x15c>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	461c      	mov	r4, r3
 8001274:	4b4e      	ldr	r3, [pc, #312]	; (80013b0 <MRT_reset_info+0x160>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	461d      	mov	r5, r3
 800127a:	4b4e      	ldr	r3, [pc, #312]	; (80013b4 <MRT_reset_info+0x164>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001282:	9304      	str	r3, [sp, #16]
 8001284:	9503      	str	r5, [sp, #12]
 8001286:	9402      	str	r4, [sp, #8]
 8001288:	9101      	str	r1, [sp, #4]
 800128a:	9200      	str	r2, [sp, #0]
 800128c:	4663      	mov	r3, ip
 800128e:	4632      	mov	r2, r6
 8001290:	4949      	ldr	r1, [pc, #292]	; (80013b8 <MRT_reset_info+0x168>)
 8001292:	f014 fe55 	bl	8015f40 <siprintf>
			  reset_flag, wu_flag, iwdg_flag, prev_hour, prev_min, prev_sec, prev_subsec);
	  print(buffer);
 8001296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff ff34 	bl	8001108 <print>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 80012a0:	4b40      	ldr	r3, [pc, #256]	; (80013a4 <MRT_reset_info+0x154>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d119      	bne.n	80012dc <MRT_reset_info+0x8c>
		  print((char*) "Deactivating IWDG\r\n");
 80012a8:	4844      	ldr	r0, [pc, #272]	; (80013bc <MRT_reset_info+0x16c>)
 80012aa:	f7ff ff2d 	bl	8001108 <print>

		  iwdg_flag = 0; //Flip flag
 80012ae:	4b3d      	ldr	r3, [pc, #244]	; (80013a4 <MRT_reset_info+0x154>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]

		  //Write new flag to memory
		  rtc_bckp_reg_iwdg = iwdg_flag;
 80012b4:	4b3b      	ldr	r3, [pc, #236]	; (80013a4 <MRT_reset_info+0x154>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b41      	ldr	r3, [pc, #260]	; (80013c0 <MRT_reset_info+0x170>)
 80012bc:	601a      	str	r2, [r3, #0]
		  ext_flash_iwdg = iwdg_flag;
 80012be:	4b39      	ldr	r3, [pc, #228]	; (80013a4 <MRT_reset_info+0x154>)
 80012c0:	781a      	ldrb	r2, [r3, #0]
 80012c2:	4b40      	ldr	r3, [pc, #256]	; (80013c4 <MRT_reset_info+0x174>)
 80012c4:	701a      	strb	r2, [r3, #0]
		  MRT_saveFlagValue(FC_STATE_IWDG);
 80012c6:	2002      	movs	r0, #2
 80012c8:	f002 fc50 	bl	8003b6c <MRT_saveFlagValue>

		  HAL_Delay(500);
 80012cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012d0:	f009 f978 	bl	800a5c4 <HAL_Delay>

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 80012d4:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 80012d8:	f001 fc6e 	bl	8002bb8 <MRT_StandByMode>
	  }


	  //Check if we are after waking up (and at which wake up we are at)
	  if (wu_flag > 0){
 80012dc:	4b30      	ldr	r3, [pc, #192]	; (80013a0 <MRT_reset_info+0x150>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d010      	beq.n	8001306 <MRT_reset_info+0xb6>
		  char buf[30];
		  sprintf(buf, "FC wake up %i\r\n", wu_flag);
 80012e4:	4b2e      	ldr	r3, [pc, #184]	; (80013a0 <MRT_reset_info+0x150>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	4936      	ldr	r1, [pc, #216]	; (80013c8 <MRT_reset_info+0x178>)
 80012ee:	4618      	mov	r0, r3
 80012f0:	f014 fe26 	bl	8015f40 <siprintf>
		  print(buf);
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ff06 	bl	8001108 <print>

		  print((char*) "Resetting RTC time\r\n");
 80012fc:	4833      	ldr	r0, [pc, #204]	; (80013cc <MRT_reset_info+0x17c>)
 80012fe:	f7ff ff03 	bl	8001108 <print>

		  //Clear RTC time (last recorded)
		  MRT_resetTotalTime();
 8001302:	f002 fcf3 	bl	8003cec <MRT_resetTotalTime>
	  }


	  //Check if we start from the beginning
	  if (reset_flag == 0){
 8001306:	4b25      	ldr	r3, [pc, #148]	; (800139c <MRT_reset_info+0x14c>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d108      	bne.n	8001320 <MRT_reset_info+0xd0>
		  print((char*) "FC restarted\r\n");
 800130e:	4830      	ldr	r0, [pc, #192]	; (80013d0 <MRT_reset_info+0x180>)
 8001310:	f7ff fefa 	bl	8001108 <print>

		  reset_flag = 1; //Flip flag
 8001314:	4b21      	ldr	r3, [pc, #132]	; (800139c <MRT_reset_info+0x14c>)
 8001316:	2201      	movs	r2, #1
 8001318:	701a      	strb	r2, [r3, #0]

		  MRT_saveFlagValue(FC_STATE_RESET);
 800131a:	2000      	movs	r0, #0
 800131c:	f002 fc26 	bl	8003b6c <MRT_saveFlagValue>
	  }


	  //Check if before or after apogee
	  if (apogee_flag == 0){
 8001320:	4b2c      	ldr	r3, [pc, #176]	; (80013d4 <MRT_reset_info+0x184>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d103      	bne.n	8001330 <MRT_reset_info+0xe0>
		  print((char*) "Pre-apogee\r\n");
 8001328:	482b      	ldr	r0, [pc, #172]	; (80013d8 <MRT_reset_info+0x188>)
 800132a:	f7ff feed 	bl	8001108 <print>
 800132e:	e006      	b.n	800133e <MRT_reset_info+0xee>
	  }
	  else if(apogee_flag==1){
 8001330:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <MRT_reset_info+0x184>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d102      	bne.n	800133e <MRT_reset_info+0xee>
		  print((char*) "Post-apogee\r\n");
 8001338:	4828      	ldr	r0, [pc, #160]	; (80013dc <MRT_reset_info+0x18c>)
 800133a:	f7ff fee5 	bl	8001108 <print>
	  }


	  //Check ejection stage
	  print((char*)"Ejection Stage: ");
 800133e:	4828      	ldr	r0, [pc, #160]	; (80013e0 <MRT_reset_info+0x190>)
 8001340:	f7ff fee2 	bl	8001108 <print>
	  if (ejection_stage_flag==PAD){
 8001344:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <MRT_reset_info+0x194>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d103      	bne.n	8001354 <MRT_reset_info+0x104>
		  print((char*)"Pad\r\n");
 800134c:	4826      	ldr	r0, [pc, #152]	; (80013e8 <MRT_reset_info+0x198>)
 800134e:	f7ff fedb 	bl	8001108 <print>
		  print((char*)"Main descent\r\n");
	  }
	  else if(ejection_stage_flag==LANDED){
		  print((char*)"Landed\r\n");
	  }
}
 8001352:	e01e      	b.n	8001392 <MRT_reset_info+0x142>
	  else if(ejection_stage_flag==BOOST){
 8001354:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <MRT_reset_info+0x194>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d103      	bne.n	8001364 <MRT_reset_info+0x114>
		  print((char*)"Boost\r\n");
 800135c:	4823      	ldr	r0, [pc, #140]	; (80013ec <MRT_reset_info+0x19c>)
 800135e:	f7ff fed3 	bl	8001108 <print>
}
 8001362:	e016      	b.n	8001392 <MRT_reset_info+0x142>
	  else if(ejection_stage_flag==DROGUE_DESCENT){
 8001364:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <MRT_reset_info+0x194>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b02      	cmp	r3, #2
 800136a:	d103      	bne.n	8001374 <MRT_reset_info+0x124>
		  print((char*)"Drogue descent\r\n");
 800136c:	4820      	ldr	r0, [pc, #128]	; (80013f0 <MRT_reset_info+0x1a0>)
 800136e:	f7ff fecb 	bl	8001108 <print>
}
 8001372:	e00e      	b.n	8001392 <MRT_reset_info+0x142>
	  else if(ejection_stage_flag==MAIN_DESCENT){
 8001374:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <MRT_reset_info+0x194>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b03      	cmp	r3, #3
 800137a:	d103      	bne.n	8001384 <MRT_reset_info+0x134>
		  print((char*)"Main descent\r\n");
 800137c:	481d      	ldr	r0, [pc, #116]	; (80013f4 <MRT_reset_info+0x1a4>)
 800137e:	f7ff fec3 	bl	8001108 <print>
}
 8001382:	e006      	b.n	8001392 <MRT_reset_info+0x142>
	  else if(ejection_stage_flag==LANDED){
 8001384:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <MRT_reset_info+0x194>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b04      	cmp	r3, #4
 800138a:	d102      	bne.n	8001392 <MRT_reset_info+0x142>
		  print((char*)"Landed\r\n");
 800138c:	481a      	ldr	r0, [pc, #104]	; (80013f8 <MRT_reset_info+0x1a8>)
 800138e:	f7ff febb 	bl	8001108 <print>
}
 8001392:	bf00      	nop
 8001394:	378c      	adds	r7, #140	; 0x8c
 8001396:	46bd      	mov	sp, r7
 8001398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800139a:	bf00      	nop
 800139c:	200003d8 	.word	0x200003d8
 80013a0:	200003d9 	.word	0x200003d9
 80013a4:	200003da 	.word	0x200003da
 80013a8:	200003dd 	.word	0x200003dd
 80013ac:	200003de 	.word	0x200003de
 80013b0:	200003df 	.word	0x200003df
 80013b4:	200003e0 	.word	0x200003e0
 80013b8:	0801a73c 	.word	0x0801a73c
 80013bc:	0801a780 	.word	0x0801a780
 80013c0:	20000380 	.word	0x20000380
 80013c4:	200003c8 	.word	0x200003c8
 80013c8:	0801a794 	.word	0x0801a794
 80013cc:	0801a7a4 	.word	0x0801a7a4
 80013d0:	0801a7bc 	.word	0x0801a7bc
 80013d4:	200003db 	.word	0x200003db
 80013d8:	0801a7cc 	.word	0x0801a7cc
 80013dc:	0801a7dc 	.word	0x0801a7dc
 80013e0:	0801a7ec 	.word	0x0801a7ec
 80013e4:	200003dc 	.word	0x200003dc
 80013e8:	0801a800 	.word	0x0801a800
 80013ec:	0801a808 	.word	0x0801a808
 80013f0:	0801a810 	.word	0x0801a810
 80013f4:	0801a824 	.word	0x0801a824
 80013f8:	0801a834 	.word	0x0801a834

080013fc <MRT_Reinitialize_Peripherals>:


void MRT_Reinitialize_Peripherals(void){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	  /*
	   * Reinitialize all peripherals
	   */

	  print((char*)"Reinitializing Peripherals...");
 8001400:	482f      	ldr	r0, [pc, #188]	; (80014c0 <MRT_Reinitialize_Peripherals+0xc4>)
 8001402:	f7ff fe81 	bl	8001108 <print>

	  // reset LEDs
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	2102      	movs	r1, #2
 800140a:	482e      	ldr	r0, [pc, #184]	; (80014c4 <MRT_Reinitialize_Peripherals+0xc8>)
 800140c:	f009 ffe6 	bl	800b3dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	2104      	movs	r1, #4
 8001414:	482b      	ldr	r0, [pc, #172]	; (80014c4 <MRT_Reinitialize_Peripherals+0xc8>)
 8001416:	f009 ffe1 	bl	800b3dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 800141a:	2200      	movs	r2, #0
 800141c:	2108      	movs	r1, #8
 800141e:	4829      	ldr	r0, [pc, #164]	; (80014c4 <MRT_Reinitialize_Peripherals+0xc8>)
 8001420:	f009 ffdc 	bl	800b3dc <HAL_GPIO_WritePin>

	  // reset recovery pyro pins
	  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 8001424:	2201      	movs	r2, #1
 8001426:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800142a:	4827      	ldr	r0, [pc, #156]	; (80014c8 <MRT_Reinitialize_Peripherals+0xcc>)
 800142c:	f009 ffd6 	bl	800b3dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 8001430:	2200      	movs	r2, #0
 8001432:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001436:	4824      	ldr	r0, [pc, #144]	; (80014c8 <MRT_Reinitialize_Peripherals+0xcc>)
 8001438:	f009 ffd0 	bl	800b3dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 800143c:	2200      	movs	r2, #0
 800143e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001442:	4821      	ldr	r0, [pc, #132]	; (80014c8 <MRT_Reinitialize_Peripherals+0xcc>)
 8001444:	f009 ffca 	bl	800b3dc <HAL_GPIO_WritePin>

	  // reset prop pyro pins
	  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 8001448:	2201      	movs	r2, #1
 800144a:	2102      	movs	r1, #2
 800144c:	481e      	ldr	r0, [pc, #120]	; (80014c8 <MRT_Reinitialize_Peripherals+0xcc>)
 800144e:	f009 ffc5 	bl	800b3dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 8001452:	2200      	movs	r2, #0
 8001454:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001458:	481c      	ldr	r0, [pc, #112]	; (80014cc <MRT_Reinitialize_Peripherals+0xd0>)
 800145a:	f009 ffbf 	bl	800b3dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 800145e:	2200      	movs	r2, #0
 8001460:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001464:	4819      	ldr	r0, [pc, #100]	; (80014cc <MRT_Reinitialize_Peripherals+0xd0>)
 8001466:	f009 ffb9 	bl	800b3dc <HAL_GPIO_WritePin>

	  // reset 12 V buck converter enable pin (disable converter)
	  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 800146a:	2200      	movs	r2, #0
 800146c:	2104      	movs	r1, #4
 800146e:	4818      	ldr	r0, [pc, #96]	; (80014d0 <MRT_Reinitialize_Peripherals+0xd4>)
 8001470:	f009 ffb4 	bl	800b3dc <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
	  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


	  // reset payload EN signal
	  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 8001474:	2200      	movs	r2, #0
 8001476:	f44f 7100 	mov.w	r1, #512	; 0x200
 800147a:	4815      	ldr	r0, [pc, #84]	; (80014d0 <MRT_Reinitialize_Peripherals+0xd4>)
 800147c:	f009 ffae 	bl	800b3dc <HAL_GPIO_WritePin>

	  // set CS pin for thermocouple chip high
	  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

	  // set power off for VR
	  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 8001480:	2200      	movs	r2, #0
 8001482:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001486:	4810      	ldr	r0, [pc, #64]	; (80014c8 <MRT_Reinitialize_Peripherals+0xcc>)
 8001488:	f009 ffa8 	bl	800b3dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 800148c:	2200      	movs	r2, #0
 800148e:	2180      	movs	r1, #128	; 0x80
 8001490:	4810      	ldr	r0, [pc, #64]	; (80014d4 <MRT_Reinitialize_Peripherals+0xd8>)
 8001492:	f009 ffa3 	bl	800b3dc <HAL_GPIO_WritePin>

	  // FLASH set CS, WP and IO3 pins high
	  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 8001496:	2201      	movs	r2, #1
 8001498:	2140      	movs	r1, #64	; 0x40
 800149a:	480e      	ldr	r0, [pc, #56]	; (80014d4 <MRT_Reinitialize_Peripherals+0xd8>)
 800149c:	f009 ff9e 	bl	800b3dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 80014a0:	2201      	movs	r2, #1
 80014a2:	2120      	movs	r1, #32
 80014a4:	480b      	ldr	r0, [pc, #44]	; (80014d4 <MRT_Reinitialize_Peripherals+0xd8>)
 80014a6:	f009 ff99 	bl	800b3dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 80014aa:	2201      	movs	r2, #1
 80014ac:	2110      	movs	r1, #16
 80014ae:	4809      	ldr	r0, [pc, #36]	; (80014d4 <MRT_Reinitialize_Peripherals+0xd8>)
 80014b0:	f009 ff94 	bl	800b3dc <HAL_GPIO_WritePin>

	  print((char*)"OK\r\n");
 80014b4:	4808      	ldr	r0, [pc, #32]	; (80014d8 <MRT_Reinitialize_Peripherals+0xdc>)
 80014b6:	f7ff fe27 	bl	8001108 <print>
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	0801a840 	.word	0x0801a840
 80014c4:	40020800 	.word	0x40020800
 80014c8:	40021800 	.word	0x40021800
 80014cc:	40021400 	.word	0x40021400
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40020c00 	.word	0x40020c00
 80014d8:	0801a860 	.word	0x0801a860

080014dc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014e2:	463b      	mov	r3, r7
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014ee:	4b21      	ldr	r3, [pc, #132]	; (8001574 <MX_ADC1_Init+0x98>)
 80014f0:	4a21      	ldr	r2, [pc, #132]	; (8001578 <MX_ADC1_Init+0x9c>)
 80014f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014f4:	4b1f      	ldr	r3, [pc, #124]	; (8001574 <MX_ADC1_Init+0x98>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014fa:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <MX_ADC1_Init+0x98>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001500:	4b1c      	ldr	r3, [pc, #112]	; (8001574 <MX_ADC1_Init+0x98>)
 8001502:	2200      	movs	r2, #0
 8001504:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001506:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <MX_ADC1_Init+0x98>)
 8001508:	2200      	movs	r2, #0
 800150a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800150c:	4b19      	ldr	r3, [pc, #100]	; (8001574 <MX_ADC1_Init+0x98>)
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001514:	4b17      	ldr	r3, [pc, #92]	; (8001574 <MX_ADC1_Init+0x98>)
 8001516:	2200      	movs	r2, #0
 8001518:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <MX_ADC1_Init+0x98>)
 800151c:	4a17      	ldr	r2, [pc, #92]	; (800157c <MX_ADC1_Init+0xa0>)
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <MX_ADC1_Init+0x98>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <MX_ADC1_Init+0x98>)
 8001528:	2201      	movs	r2, #1
 800152a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MX_ADC1_Init+0x98>)
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <MX_ADC1_Init+0x98>)
 8001536:	2201      	movs	r2, #1
 8001538:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800153a:	480e      	ldr	r0, [pc, #56]	; (8001574 <MX_ADC1_Init+0x98>)
 800153c:	f009 f866 	bl	800a60c <HAL_ADC_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001546:	f001 f9d3 	bl	80028f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800154a:	2306      	movs	r3, #6
 800154c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800154e:	2301      	movs	r3, #1
 8001550:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001552:	2300      	movs	r3, #0
 8001554:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001556:	463b      	mov	r3, r7
 8001558:	4619      	mov	r1, r3
 800155a:	4806      	ldr	r0, [pc, #24]	; (8001574 <MX_ADC1_Init+0x98>)
 800155c:	f009 fa38 	bl	800a9d0 <HAL_ADC_ConfigChannel>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001566:	f001 f9c3 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20005aec 	.word	0x20005aec
 8001578:	40012000 	.word	0x40012000
 800157c:	0f000001 	.word	0x0f000001

08001580 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	; 0x28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a17      	ldr	r2, [pc, #92]	; (80015fc <HAL_ADC_MspInit+0x7c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d127      	bne.n	80015f2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	4b16      	ldr	r3, [pc, #88]	; (8001600 <HAL_ADC_MspInit+0x80>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	4a15      	ldr	r2, [pc, #84]	; (8001600 <HAL_ADC_MspInit+0x80>)
 80015ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b0:	6453      	str	r3, [r2, #68]	; 0x44
 80015b2:	4b13      	ldr	r3, [pc, #76]	; (8001600 <HAL_ADC_MspInit+0x80>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <HAL_ADC_MspInit+0x80>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <HAL_ADC_MspInit+0x80>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <HAL_ADC_MspInit+0x80>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 80015da:	2340      	movs	r3, #64	; 0x40
 80015dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015de:	2303      	movs	r3, #3
 80015e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4619      	mov	r1, r3
 80015ec:	4805      	ldr	r0, [pc, #20]	; (8001604 <HAL_ADC_MspInit+0x84>)
 80015ee:	f009 fd31 	bl	800b054 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80015f2:	bf00      	nop
 80015f4:	3728      	adds	r7, #40	; 0x28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40012000 	.word	0x40012000
 8001600:	40023800 	.word	0x40023800
 8001604:	40020000 	.word	0x40020000

08001608 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800160c:	f3bf 8f4f 	dsb	sy
}
 8001610:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <__NVIC_SystemReset+0x24>)
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800161a:	4904      	ldr	r1, [pc, #16]	; (800162c <__NVIC_SystemReset+0x24>)
 800161c:	4b04      	ldr	r3, [pc, #16]	; (8001630 <__NVIC_SystemReset+0x28>)
 800161e:	4313      	orrs	r3, r2
 8001620:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001622:	f3bf 8f4f 	dsb	sy
}
 8001626:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <__NVIC_SystemReset+0x20>
 800162c:	e000ed00 	.word	0xe000ed00
 8001630:	05fa0004 	.word	0x05fa0004

08001634 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	println("\r\nFREERTOS Init");
 8001638:	4821      	ldr	r0, [pc, #132]	; (80016c0 <MX_FREERTOS_Init+0x8c>)
 800163a:	f7ff fd47 	bl	80010cc <println>
	print("\tInitializing the kernel...");
 800163e:	4821      	ldr	r0, [pc, #132]	; (80016c4 <MX_FREERTOS_Init+0x90>)
 8001640:	f7ff fd62 	bl	8001108 <print>
	osKernelInitialize();
 8001644:	f00e ff80 	bl	8010548 <osKernelInitialize>
	println("OK");
 8001648:	481f      	ldr	r0, [pc, #124]	; (80016c8 <MX_FREERTOS_Init+0x94>)
 800164a:	f7ff fd3f 	bl	80010cc <println>

	print("\tCreating the threads...");
 800164e:	481f      	ldr	r0, [pc, #124]	; (80016cc <MX_FREERTOS_Init+0x98>)
 8001650:	f7ff fd5a 	bl	8001108 <print>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 8001654:	4a1e      	ldr	r2, [pc, #120]	; (80016d0 <MX_FREERTOS_Init+0x9c>)
 8001656:	2100      	movs	r1, #0
 8001658:	481e      	ldr	r0, [pc, #120]	; (80016d4 <MX_FREERTOS_Init+0xa0>)
 800165a:	f00e ffbf 	bl	80105dc <osThreadNew>
 800165e:	4603      	mov	r3, r0
 8001660:	4a1d      	ldr	r2, [pc, #116]	; (80016d8 <MX_FREERTOS_Init+0xa4>)
 8001662:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 8001664:	4a1d      	ldr	r2, [pc, #116]	; (80016dc <MX_FREERTOS_Init+0xa8>)
 8001666:	2100      	movs	r1, #0
 8001668:	481d      	ldr	r0, [pc, #116]	; (80016e0 <MX_FREERTOS_Init+0xac>)
 800166a:	f00e ffb7 	bl	80105dc <osThreadNew>
 800166e:	4603      	mov	r3, r0
 8001670:	4a1c      	ldr	r2, [pc, #112]	; (80016e4 <MX_FREERTOS_Init+0xb0>)
 8001672:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 8001674:	4a1c      	ldr	r2, [pc, #112]	; (80016e8 <MX_FREERTOS_Init+0xb4>)
 8001676:	2100      	movs	r1, #0
 8001678:	481c      	ldr	r0, [pc, #112]	; (80016ec <MX_FREERTOS_Init+0xb8>)
 800167a:	f00e ffaf 	bl	80105dc <osThreadNew>
 800167e:	4603      	mov	r3, r0
 8001680:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <MX_FREERTOS_Init+0xbc>)
 8001682:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 8001684:	4a1b      	ldr	r2, [pc, #108]	; (80016f4 <MX_FREERTOS_Init+0xc0>)
 8001686:	2100      	movs	r1, #0
 8001688:	481b      	ldr	r0, [pc, #108]	; (80016f8 <MX_FREERTOS_Init+0xc4>)
 800168a:	f00e ffa7 	bl	80105dc <osThreadNew>
 800168e:	4603      	mov	r3, r0
 8001690:	4a1a      	ldr	r2, [pc, #104]	; (80016fc <MX_FREERTOS_Init+0xc8>)
 8001692:	6013      	str	r3, [r2, #0]

  /* creation of WatchDog */
  WatchDogHandle = osThreadNew(StartWatchDog, NULL, &WatchDog_attributes);
 8001694:	4a1a      	ldr	r2, [pc, #104]	; (8001700 <MX_FREERTOS_Init+0xcc>)
 8001696:	2100      	movs	r1, #0
 8001698:	481a      	ldr	r0, [pc, #104]	; (8001704 <MX_FREERTOS_Init+0xd0>)
 800169a:	f00e ff9f 	bl	80105dc <osThreadNew>
 800169e:	4603      	mov	r3, r0
 80016a0:	4a19      	ldr	r2, [pc, #100]	; (8001708 <MX_FREERTOS_Init+0xd4>)
 80016a2:	6013      	str	r3, [r2, #0]

  /* creation of Propulsion4 */
  Propulsion4Handle = osThreadNew(StartPropulsion4, NULL, &Propulsion4_attributes);
 80016a4:	4a19      	ldr	r2, [pc, #100]	; (800170c <MX_FREERTOS_Init+0xd8>)
 80016a6:	2100      	movs	r1, #0
 80016a8:	4819      	ldr	r0, [pc, #100]	; (8001710 <MX_FREERTOS_Init+0xdc>)
 80016aa:	f00e ff97 	bl	80105dc <osThreadNew>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4a18      	ldr	r2, [pc, #96]	; (8001714 <MX_FREERTOS_Init+0xe0>)
 80016b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  println("OK");
 80016b4:	4804      	ldr	r0, [pc, #16]	; (80016c8 <MX_FREERTOS_Init+0x94>)
 80016b6:	f7ff fd09 	bl	80010cc <println>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	0801a8ac 	.word	0x0801a8ac
 80016c4:	0801a8bc 	.word	0x0801a8bc
 80016c8:	0801a8d8 	.word	0x0801a8d8
 80016cc:	0801a8dc 	.word	0x0801a8dc
 80016d0:	0801c4fc 	.word	0x0801c4fc
 80016d4:	08001719 	.word	0x08001719
 80016d8:	20005b38 	.word	0x20005b38
 80016dc:	0801c520 	.word	0x0801c520
 80016e0:	080017a1 	.word	0x080017a1
 80016e4:	20005b50 	.word	0x20005b50
 80016e8:	0801c544 	.word	0x0801c544
 80016ec:	08001c65 	.word	0x08001c65
 80016f0:	20005b54 	.word	0x20005b54
 80016f4:	0801c568 	.word	0x0801c568
 80016f8:	08001d75 	.word	0x08001d75
 80016fc:	20005b58 	.word	0x20005b58
 8001700:	0801c58c 	.word	0x0801c58c
 8001704:	08001ded 	.word	0x08001ded
 8001708:	20005b34 	.word	0x20005b34
 800170c:	0801c5b0 	.word	0x0801c5b0
 8001710:	08001fc9 	.word	0x08001fc9
 8001714:	20005b5c 	.word	0x20005b5c

08001718 <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMemory0 */

	//TODO UNTESTED

	//Add thread id to the list
	threadsID[0]=osThreadGetId();
 8001720:	f00e ffee 	bl	8010700 <osThreadGetId>
 8001724:	4603      	mov	r3, r0
 8001726:	4a16      	ldr	r2, [pc, #88]	; (8001780 <StartMemory0+0x68>)
 8001728:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  for(;;)
  {

	 //Get RTC time
	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800172a:	2200      	movs	r2, #0
 800172c:	4915      	ldr	r1, [pc, #84]	; (8001784 <StartMemory0+0x6c>)
 800172e:	4816      	ldr	r0, [pc, #88]	; (8001788 <StartMemory0+0x70>)
 8001730:	f00b ff34 	bl	800d59c <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001734:	2200      	movs	r2, #0
 8001736:	4915      	ldr	r1, [pc, #84]	; (800178c <StartMemory0+0x74>)
 8001738:	4813      	ldr	r0, [pc, #76]	; (8001788 <StartMemory0+0x70>)
 800173a:	f00c f834 	bl	800d7a6 <HAL_RTC_GetDate>

	 //Update global variables
	 prev_hour = sTime.Hours;
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <StartMemory0+0x6c>)
 8001740:	781a      	ldrb	r2, [r3, #0]
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <StartMemory0+0x78>)
 8001744:	701a      	strb	r2, [r3, #0]
	 prev_min = sTime.Minutes;
 8001746:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <StartMemory0+0x6c>)
 8001748:	785a      	ldrb	r2, [r3, #1]
 800174a:	4b12      	ldr	r3, [pc, #72]	; (8001794 <StartMemory0+0x7c>)
 800174c:	701a      	strb	r2, [r3, #0]
	 prev_sec = sTime.Seconds;
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <StartMemory0+0x6c>)
 8001750:	789a      	ldrb	r2, [r3, #2]
 8001752:	4b11      	ldr	r3, [pc, #68]	; (8001798 <StartMemory0+0x80>)
 8001754:	701a      	strb	r2, [r3, #0]
	 if (__HAL_RTC_SHIFT_GET_FLAG(&hrtc, RTC_FLAG_SHPF)) prev_sec++; //Adjust following the user manual
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <StartMemory0+0x70>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <StartMemory0+0x58>
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <StartMemory0+0x80>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	3301      	adds	r3, #1
 800176a:	b2da      	uxtb	r2, r3
 800176c:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <StartMemory0+0x80>)
 800176e:	701a      	strb	r2, [r3, #0]
	 prev_subsec = sTime.SubSeconds;
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <StartMemory0+0x6c>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	4a09      	ldr	r2, [pc, #36]	; (800179c <StartMemory0+0x84>)
 8001776:	6013      	str	r3, [r2, #0]
		sd_write(&fil, msg_buffer_pr);
	}
	f_close(&fil);
	#endif

	osDelay(1000/DATA_FREQ);
 8001778:	2064      	movs	r0, #100	; 0x64
 800177a:	f00f f85d 	bl	8010838 <osDelay>
	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800177e:	e7d4      	b.n	800172a <StartMemory0+0x12>
 8001780:	20005b3c 	.word	0x20005b3c
 8001784:	20000338 	.word	0x20000338
 8001788:	20005c08 	.word	0x20005c08
 800178c:	2000034c 	.word	0x2000034c
 8001790:	200003dd 	.word	0x200003dd
 8001794:	200003de 	.word	0x200003de
 8001798:	200003df 	.word	0x200003df
 800179c:	200003e0 	.word	0x200003e0

080017a0 <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 80017a0:	b5b0      	push	{r4, r5, r7, lr}
 80017a2:	b096      	sub	sp, #88	; 0x58
 80017a4:	af04      	add	r7, sp, #16
 80017a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEjection1 */

	//Add thread id to the list
	threadsID[1]=osThreadGetId();
 80017a8:	f00e ffaa 	bl	8010700 <osThreadGetId>
 80017ac:	4603      	mov	r3, r0
 80017ae:	4ac9      	ldr	r2, [pc, #804]	; (8001ad4 <StartEjection1+0x334>)
 80017b0:	6053      	str	r3, [r2, #4]
	#if !EJECTION_THREAD
	osThreadExit();
	#endif

	//Double check the state TODO bad? (say wakeup flag is raised but ground isn't reached yet
	if (ejection_stage_flag >= LANDED)  osThreadExit(); //Ground reached
 80017b2:	4bc9      	ldr	r3, [pc, #804]	; (8001ad8 <StartEjection1+0x338>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d901      	bls.n	80017be <StartEjection1+0x1e>
 80017ba:	f00f f80a 	bl	80107d2 <osThreadExit>
	if (wu_flag > 0) osThreadExit(); //WHEN WAKING UP
 80017be:	4bc7      	ldr	r3, [pc, #796]	; (8001adc <StartEjection1+0x33c>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <StartEjection1+0x2a>
 80017c6:	f00f f804 	bl	80107d2 <osThreadExit>

	osDelay(5000); //Let the LPS "warm up" to have a valid pressure_hPa
 80017ca:	f241 3088 	movw	r0, #5000	; 0x1388
 80017ce:	f00f f833 	bl	8010838 <osDelay>

	//TODO put in setup.h?
	uint8_t counter = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t COUNTER_THRESHOLD = 500;
 80017d8:	23f4      	movs	r3, #244	; 0xf4
 80017da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t ALT_ERROR_MARGIN = 10; //In meters
 80017de:	230a      	movs	r3, #10
 80017e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	uint8_t prev_alt = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  /* Infinite loop */
  for(;;)
  {
	  altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa);
 80017ea:	4bbd      	ldr	r3, [pc, #756]	; (8001ae0 <StartEjection1+0x340>)
 80017ec:	edd3 7a00 	vldr	s15, [r3]
 80017f0:	eeb0 0a67 	vmov.f32	s0, s15
 80017f4:	f001 ffe8 	bl	80037c8 <MRT_getAltitude>
 80017f8:	eef0 7a40 	vmov.f32	s15, s0
 80017fc:	4bb9      	ldr	r3, [pc, #740]	; (8001ae4 <StartEjection1+0x344>)
 80017fe:	edc3 7a00 	vstr	s15, [r3]

	  //TODO UPDATE TRUE APOGEE (TESTING?)
	  if (altitude_m > rtc_bckp_reg_alt_true_apogee){
 8001802:	4bb9      	ldr	r3, [pc, #740]	; (8001ae8 <StartEjection1+0x348>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	ee07 3a90 	vmov	s15, r3
 800180a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800180e:	4bb5      	ldr	r3, [pc, #724]	; (8001ae4 <StartEjection1+0x344>)
 8001810:	edd3 7a00 	vldr	s15, [r3]
 8001814:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181c:	d514      	bpl.n	8001848 <StartEjection1+0xa8>
		  rtc_bckp_reg_alt_true_apogee = altitude_m;
 800181e:	4bb1      	ldr	r3, [pc, #708]	; (8001ae4 <StartEjection1+0x344>)
 8001820:	edd3 7a00 	vldr	s15, [r3]
 8001824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001828:	ee17 2a90 	vmov	r2, s15
 800182c:	4bae      	ldr	r3, [pc, #696]	; (8001ae8 <StartEjection1+0x348>)
 800182e:	601a      	str	r2, [r3, #0]
		  rtc_bckp_reg_true_apogee_time = 100*prev_min + prev_sec;
 8001830:	4bae      	ldr	r3, [pc, #696]	; (8001aec <StartEjection1+0x34c>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	2364      	movs	r3, #100	; 0x64
 8001838:	fb03 f302 	mul.w	r3, r3, r2
 800183c:	4aac      	ldr	r2, [pc, #688]	; (8001af0 <StartEjection1+0x350>)
 800183e:	7812      	ldrb	r2, [r2, #0]
 8001840:	4413      	add	r3, r2
 8001842:	461a      	mov	r2, r3
 8001844:	4bab      	ldr	r3, [pc, #684]	; (8001af4 <StartEjection1+0x354>)
 8001846:	601a      	str	r2, [r3, #0]
	  }

	  //TODO check for apogee (starting to go down or stagnating, add to counter)
	  if(altitude_m < prev_alt || MAX(altitude_m - prev_alt, prev_alt - altitude_m) < ALT_ERROR_MARGIN){
 8001848:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800184c:	ee07 3a90 	vmov	s15, r3
 8001850:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001854:	4ba3      	ldr	r3, [pc, #652]	; (8001ae4 <StartEjection1+0x344>)
 8001856:	edd3 7a00 	vldr	s15, [r3]
 800185a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800185e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001862:	dc3c      	bgt.n	80018de <StartEjection1+0x13e>
 8001864:	4b9f      	ldr	r3, [pc, #636]	; (8001ae4 <StartEjection1+0x344>)
 8001866:	ed93 7a00 	vldr	s14, [r3]
 800186a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800186e:	ee07 3a90 	vmov	s15, r3
 8001872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001876:	ee37 7a67 	vsub.f32	s14, s14, s15
 800187a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800187e:	ee07 3a90 	vmov	s15, r3
 8001882:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001886:	4b97      	ldr	r3, [pc, #604]	; (8001ae4 <StartEjection1+0x344>)
 8001888:	edd3 7a00 	vldr	s15, [r3]
 800188c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001890:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001898:	dd0b      	ble.n	80018b2 <StartEjection1+0x112>
 800189a:	4b92      	ldr	r3, [pc, #584]	; (8001ae4 <StartEjection1+0x344>)
 800189c:	ed93 7a00 	vldr	s14, [r3]
 80018a0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80018a4:	ee07 3a90 	vmov	s15, r3
 80018a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018b0:	e00a      	b.n	80018c8 <StartEjection1+0x128>
 80018b2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80018b6:	ee07 3a90 	vmov	s15, r3
 80018ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018be:	4b89      	ldr	r3, [pc, #548]	; (8001ae4 <StartEjection1+0x344>)
 80018c0:	edd3 7a00 	vldr	s15, [r3]
 80018c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018c8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80018cc:	ee07 3a10 	vmov	s14, r3
 80018d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80018d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018dc:	d54f      	bpl.n	800197e <StartEjection1+0x1de>
		  counter++;
 80018de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80018e2:	3301      	adds	r3, #1
 80018e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		  char buff[50];
		  sprintf(buff, "Alt: %i,  MAX:%i, counter: %i", altitude_m, MAX(altitude_m - prev_alt, prev_alt - altitude_m), counter);
 80018e8:	4b7e      	ldr	r3, [pc, #504]	; (8001ae4 <StartEjection1+0x344>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe fe4b 	bl	8000588 <__aeabi_f2d>
 80018f2:	4604      	mov	r4, r0
 80018f4:	460d      	mov	r5, r1
 80018f6:	4b7b      	ldr	r3, [pc, #492]	; (8001ae4 <StartEjection1+0x344>)
 80018f8:	ed93 7a00 	vldr	s14, [r3]
 80018fc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001908:	ee37 7a67 	vsub.f32	s14, s14, s15
 800190c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001910:	ee07 3a90 	vmov	s15, r3
 8001914:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001918:	4b72      	ldr	r3, [pc, #456]	; (8001ae4 <StartEjection1+0x344>)
 800191a:	edd3 7a00 	vldr	s15, [r3]
 800191e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001922:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192a:	dd0b      	ble.n	8001944 <StartEjection1+0x1a4>
 800192c:	4b6d      	ldr	r3, [pc, #436]	; (8001ae4 <StartEjection1+0x344>)
 800192e:	ed93 7a00 	vldr	s14, [r3]
 8001932:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001936:	ee07 3a90 	vmov	s15, r3
 800193a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800193e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001942:	e00a      	b.n	800195a <StartEjection1+0x1ba>
 8001944:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001948:	ee07 3a90 	vmov	s15, r3
 800194c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001950:	4b64      	ldr	r3, [pc, #400]	; (8001ae4 <StartEjection1+0x344>)
 8001952:	edd3 7a00 	vldr	s15, [r3]
 8001956:	ee77 7a67 	vsub.f32	s15, s14, s15
 800195a:	ee17 0a90 	vmov	r0, s15
 800195e:	f7fe fe13 	bl	8000588 <__aeabi_f2d>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800196a:	f107 000c 	add.w	r0, r7, #12
 800196e:	9102      	str	r1, [sp, #8]
 8001970:	e9cd 2300 	strd	r2, r3, [sp]
 8001974:	4622      	mov	r2, r4
 8001976:	462b      	mov	r3, r5
 8001978:	495f      	ldr	r1, [pc, #380]	; (8001af8 <StartEjection1+0x358>)
 800197a:	f014 fae1 	bl	8015f40 <siprintf>
	  }

	  if (counter == COUNTER_THRESHOLD || ejection_stage_flag >= DROGUE_DESCENT){
 800197e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001982:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001986:	429a      	cmp	r2, r3
 8001988:	d004      	beq.n	8001994 <StartEjection1+0x1f4>
 800198a:	4b53      	ldr	r3, [pc, #332]	; (8001ad8 <StartEjection1+0x338>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b01      	cmp	r3, #1
 8001990:	f240 8145 	bls.w	8001c1e <StartEjection1+0x47e>

		  if (ejection_stage_flag < DROGUE_DESCENT){
 8001994:	4b50      	ldr	r3, [pc, #320]	; (8001ad8 <StartEjection1+0x338>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d827      	bhi.n	80019ec <StartEjection1+0x24c>

			  //TODO update value to be saved in rtc bckp registers
			  rtc_bckp_reg_alt_apogee = altitude_m;
 800199c:	4b51      	ldr	r3, [pc, #324]	; (8001ae4 <StartEjection1+0x344>)
 800199e:	edd3 7a00 	vldr	s15, [r3]
 80019a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019a6:	ee17 2a90 	vmov	r2, s15
 80019aa:	4b54      	ldr	r3, [pc, #336]	; (8001afc <StartEjection1+0x35c>)
 80019ac:	601a      	str	r2, [r3, #0]
			  rtc_bckp_reg_apogee_time = 100*prev_min + prev_sec;
 80019ae:	4b4f      	ldr	r3, [pc, #316]	; (8001aec <StartEjection1+0x34c>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	461a      	mov	r2, r3
 80019b4:	2364      	movs	r3, #100	; 0x64
 80019b6:	fb03 f302 	mul.w	r3, r3, r2
 80019ba:	4a4d      	ldr	r2, [pc, #308]	; (8001af0 <StartEjection1+0x350>)
 80019bc:	7812      	ldrb	r2, [r2, #0]
 80019be:	4413      	add	r3, r2
 80019c0:	461a      	mov	r2, r3
 80019c2:	4b4f      	ldr	r3, [pc, #316]	; (8001b00 <StartEjection1+0x360>)
 80019c4:	601a      	str	r2, [r3, #0]

			  //Update state (save the state in WatchDog thread)
			  ejection_stage_flag = DROGUE_DESCENT;
 80019c6:	4b44      	ldr	r3, [pc, #272]	; (8001ad8 <StartEjection1+0x338>)
 80019c8:	2202      	movs	r2, #2
 80019ca:	701a      	strb	r2, [r3, #0]
			  apogee_flag = 1; //Apogee reached //TODO is it where we change it???
 80019cc:	4b4d      	ldr	r3, [pc, #308]	; (8001b04 <StartEjection1+0x364>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	701a      	strb	r2, [r3, #0]
			  wd_ejection_flag = 1; //Raise the flag
 80019d2:	4b4d      	ldr	r3, [pc, #308]	; (8001b08 <StartEjection1+0x368>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	701a      	strb	r2, [r3, #0]

			  println("Eject Drogue");
 80019d8:	484c      	ldr	r0, [pc, #304]	; (8001b0c <StartEjection1+0x36c>)
 80019da:	f7ff fb77 	bl	80010cc <println>
		  }

		  //Put outside of "if" such that we only need to remember the ejection stage instead if it + arming state
		  //TODO should I put a while loop, a foor loop or just "one time functions"?
		  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 80019de:	e005      	b.n	80019ec <StartEjection1+0x24c>
			  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 80019e0:	2201      	movs	r2, #1
 80019e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019e6:	484a      	ldr	r0, [pc, #296]	; (8001b10 <StartEjection1+0x370>)
 80019e8:	f009 fcf8 	bl	800b3dc <HAL_GPIO_WritePin>
		  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 80019ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019f0:	4847      	ldr	r0, [pc, #284]	; (8001b10 <StartEjection1+0x370>)
 80019f2:	f009 fcdb 	bl	800b3ac <HAL_GPIO_ReadPin>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0f1      	beq.n	80019e0 <StartEjection1+0x240>
		  }
		  while(!HAL_GPIO_ReadPin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin)){
 80019fc:	e005      	b.n	8001a0a <StartEjection1+0x26a>
			  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, SET); //PG12 DROGUE GATE
 80019fe:	2201      	movs	r2, #1
 8001a00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a04:	4842      	ldr	r0, [pc, #264]	; (8001b10 <StartEjection1+0x370>)
 8001a06:	f009 fce9 	bl	800b3dc <HAL_GPIO_WritePin>
		  while(!HAL_GPIO_ReadPin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin)){
 8001a0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a0e:	4840      	ldr	r0, [pc, #256]	; (8001b10 <StartEjection1+0x370>)
 8001a10:	f009 fccc 	bl	800b3ac <HAL_GPIO_ReadPin>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0f1      	beq.n	80019fe <StartEjection1+0x25e>
		  }
		  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001a1a:	e005      	b.n	8001a28 <StartEjection1+0x288>
			  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, RESET); //PG14 ARMING RCOV
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a22:	483b      	ldr	r0, [pc, #236]	; (8001b10 <StartEjection1+0x370>)
 8001a24:	f009 fcda 	bl	800b3dc <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001a28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a2c:	4838      	ldr	r0, [pc, #224]	; (8001b10 <StartEjection1+0x370>)
 8001a2e:	f009 fcbd 	bl	800b3ac <HAL_GPIO_ReadPin>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1f1      	bne.n	8001a1c <StartEjection1+0x27c>
		  }

		  for(;;){

			  altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa);
 8001a38:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <StartEjection1+0x340>)
 8001a3a:	edd3 7a00 	vldr	s15, [r3]
 8001a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a42:	f001 fec1 	bl	80037c8 <MRT_getAltitude>
 8001a46:	eef0 7a40 	vmov.f32	s15, s0
 8001a4a:	4b26      	ldr	r3, [pc, #152]	; (8001ae4 <StartEjection1+0x344>)
 8001a4c:	edc3 7a00 	vstr	s15, [r3]

			  //We reached main deployment altitude
			  if (altitude_m < DEPLOY_ALT || ejection_stage_flag >= MAIN_DESCENT){
 8001a50:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <StartEjection1+0x344>)
 8001a52:	edd3 7a00 	vldr	s15, [r3]
 8001a56:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001b14 <StartEjection1+0x374>
 8001a5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a62:	d404      	bmi.n	8001a6e <StartEjection1+0x2ce>
 8001a64:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <StartEjection1+0x338>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	f240 80d4 	bls.w	8001c16 <StartEjection1+0x476>

				  if (ejection_stage_flag < MAIN_DESCENT){
 8001a6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <StartEjection1+0x338>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d824      	bhi.n	8001ac0 <StartEjection1+0x320>

					  //TODO update value to be saved in rtc bckp registers
					  rtc_bckp_reg_alt_main = altitude_m;
 8001a76:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <StartEjection1+0x344>)
 8001a78:	edd3 7a00 	vldr	s15, [r3]
 8001a7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a80:	ee17 2a90 	vmov	r2, s15
 8001a84:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <StartEjection1+0x378>)
 8001a86:	601a      	str	r2, [r3, #0]
					  rtc_bckp_reg_main_time = 100*prev_min + prev_sec;
 8001a88:	4b18      	ldr	r3, [pc, #96]	; (8001aec <StartEjection1+0x34c>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	2364      	movs	r3, #100	; 0x64
 8001a90:	fb03 f302 	mul.w	r3, r3, r2
 8001a94:	4a16      	ldr	r2, [pc, #88]	; (8001af0 <StartEjection1+0x350>)
 8001a96:	7812      	ldrb	r2, [r2, #0]
 8001a98:	4413      	add	r3, r2
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <StartEjection1+0x37c>)
 8001a9e:	601a      	str	r2, [r3, #0]

					  //Update state (save the state in WatchDog thread)
					  ejection_stage_flag = MAIN_DESCENT;
 8001aa0:	4b0d      	ldr	r3, [pc, #52]	; (8001ad8 <StartEjection1+0x338>)
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	701a      	strb	r2, [r3, #0]
					  wd_ejection_flag = 1; //Raise the flag
 8001aa6:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <StartEjection1+0x368>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	701a      	strb	r2, [r3, #0]

					  println("Eject Main");
 8001aac:	481c      	ldr	r0, [pc, #112]	; (8001b20 <StartEjection1+0x380>)
 8001aae:	f7ff fb0d 	bl	80010cc <println>
				  }

				  //Put outside of "if" such that we only need to remember the ejection stage instead if it + arming state
				  //TODO should I put a while loop, a foor loop or just "one time functions"?
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001ab2:	e005      	b.n	8001ac0 <StartEjection1+0x320>
					  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aba:	4815      	ldr	r0, [pc, #84]	; (8001b10 <StartEjection1+0x370>)
 8001abc:	f009 fc8e 	bl	800b3dc <HAL_GPIO_WritePin>
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001ac0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ac4:	4812      	ldr	r0, [pc, #72]	; (8001b10 <StartEjection1+0x370>)
 8001ac6:	f009 fc71 	bl	800b3ac <HAL_GPIO_ReadPin>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0f1      	beq.n	8001ab4 <StartEjection1+0x314>
				  }
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin)){
 8001ad0:	e02e      	b.n	8001b30 <StartEjection1+0x390>
 8001ad2:	bf00      	nop
 8001ad4:	20005b3c 	.word	0x20005b3c
 8001ad8:	200003dc 	.word	0x200003dc
 8001adc:	200003d9 	.word	0x200003d9
 8001ae0:	20000420 	.word	0x20000420
 8001ae4:	20000330 	.word	0x20000330
 8001ae8:	200003a4 	.word	0x200003a4
 8001aec:	200003de 	.word	0x200003de
 8001af0:	200003df 	.word	0x200003df
 8001af4:	200003a8 	.word	0x200003a8
 8001af8:	0801a8f8 	.word	0x0801a8f8
 8001afc:	200003ac 	.word	0x200003ac
 8001b00:	200003b0 	.word	0x200003b0
 8001b04:	200003db 	.word	0x200003db
 8001b08:	20000334 	.word	0x20000334
 8001b0c:	0801a918 	.word	0x0801a918
 8001b10:	40021800 	.word	0x40021800
 8001b14:	44fa0000 	.word	0x44fa0000
 8001b18:	200003b4 	.word	0x200003b4
 8001b1c:	200003b8 	.word	0x200003b8
 8001b20:	0801a928 	.word	0x0801a928
					  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, SET); //PG11 MAIN GATE
 8001b24:	2201      	movs	r2, #1
 8001b26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b2a:	4844      	ldr	r0, [pc, #272]	; (8001c3c <StartEjection1+0x49c>)
 8001b2c:	f009 fc56 	bl	800b3dc <HAL_GPIO_WritePin>
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin)){
 8001b30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b34:	4841      	ldr	r0, [pc, #260]	; (8001c3c <StartEjection1+0x49c>)
 8001b36:	f009 fc39 	bl	800b3ac <HAL_GPIO_ReadPin>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0f1      	beq.n	8001b24 <StartEjection1+0x384>
				  }
				  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001b40:	e005      	b.n	8001b4e <StartEjection1+0x3ae>
					  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, RESET); //PG14 ARMING RCOV
 8001b42:	2200      	movs	r2, #0
 8001b44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b48:	483c      	ldr	r0, [pc, #240]	; (8001c3c <StartEjection1+0x49c>)
 8001b4a:	f009 fc47 	bl	800b3dc <HAL_GPIO_WritePin>
				  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001b4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b52:	483a      	ldr	r0, [pc, #232]	; (8001c3c <StartEjection1+0x49c>)
 8001b54:	f009 fc2a 	bl	800b3ac <HAL_GPIO_ReadPin>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f1      	bne.n	8001b42 <StartEjection1+0x3a2>
				  }

				  uint8_t prev_altitude = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
				  uint8_t cur_altitude = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
				  uint8_t counter = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
				  while(counter < 5){
 8001b70:	e02d      	b.n	8001bce <StartEjection1+0x42e>
					  cur_altitude = MRT_getAltitude(hlps22hh.pressure_hPa);
 8001b72:	4b33      	ldr	r3, [pc, #204]	; (8001c40 <StartEjection1+0x4a0>)
 8001b74:	edd3 7a00 	vldr	s15, [r3]
 8001b78:	eeb0 0a67 	vmov.f32	s0, s15
 8001b7c:	f001 fe24 	bl	80037c8 <MRT_getAltitude>
 8001b80:	eef0 7a40 	vmov.f32	s15, s0
 8001b84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b88:	edc7 7a00 	vstr	s15, [r7]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
					  if (cur_altitude - prev_altitude < 1 && cur_altitude - prev_altitude > -1){ //TODO might need a bigger range to account for errors (gotta know what we expect to be our slowest descent speed)
 8001b92:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8001b96:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	dc0c      	bgt.n	8001bba <StartEjection1+0x41a>
 8001ba0:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8001ba4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	db05      	blt.n	8001bba <StartEjection1+0x41a>
						  counter++;
 8001bae:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8001bb8:	e002      	b.n	8001bc0 <StartEjection1+0x420>
					  }
					  else{
						  counter = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					  }
					  prev_altitude = cur_altitude;
 8001bc0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001bc4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
					  osDelay(100);
 8001bc8:	2064      	movs	r0, #100	; 0x64
 8001bca:	f00e fe35 	bl	8010838 <osDelay>
				  while(counter < 5){
 8001bce:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	d9cd      	bls.n	8001b72 <StartEjection1+0x3d2>
				  }

				  //TODO update value to be saved in rtc bckp registers
				  rtc_bckp_reg_alt_landed = altitude_m;
 8001bd6:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <StartEjection1+0x4a4>)
 8001bd8:	edd3 7a00 	vldr	s15, [r3]
 8001bdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001be0:	ee17 2a90 	vmov	r2, s15
 8001be4:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <StartEjection1+0x4a8>)
 8001be6:	601a      	str	r2, [r3, #0]
				  rtc_bckp_reg_landed_time = 100*prev_min + prev_sec;
 8001be8:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <StartEjection1+0x4ac>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	2364      	movs	r3, #100	; 0x64
 8001bf0:	fb03 f302 	mul.w	r3, r3, r2
 8001bf4:	4a16      	ldr	r2, [pc, #88]	; (8001c50 <StartEjection1+0x4b0>)
 8001bf6:	7812      	ldrb	r2, [r2, #0]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <StartEjection1+0x4b4>)
 8001bfe:	601a      	str	r2, [r3, #0]

				  //Update state (saved state in WatchDog thread)
				  ejection_stage_flag = LANDED;
 8001c00:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <StartEjection1+0x4b8>)
 8001c02:	2204      	movs	r2, #4
 8001c04:	701a      	strb	r2, [r3, #0]
				  wd_ejection_flag = 1;
 8001c06:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <StartEjection1+0x4bc>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	701a      	strb	r2, [r3, #0]

				  println("Ground Level Reached");
 8001c0c:	4814      	ldr	r0, [pc, #80]	; (8001c60 <StartEjection1+0x4c0>)
 8001c0e:	f7ff fa5d 	bl	80010cc <println>
				  osThreadExit();
 8001c12:	f00e fdde 	bl	80107d2 <osThreadExit>

			  }

			  osDelay(10);
 8001c16:	200a      	movs	r0, #10
 8001c18:	f00e fe0e 	bl	8010838 <osDelay>
			  altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa);
 8001c1c:	e70c      	b.n	8001a38 <StartEjection1+0x298>
		  }
	  }


	  //Update previous altitude
	  prev_alt = altitude_m;
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <StartEjection1+0x4a4>)
 8001c20:	edd3 7a00 	vldr	s15, [r3]
 8001c24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c28:	edc7 7a00 	vstr	s15, [r7]
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	  osDelay(10);
 8001c32:	200a      	movs	r0, #10
 8001c34:	f00e fe00 	bl	8010838 <osDelay>
	  altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa);
 8001c38:	e5d7      	b.n	80017ea <StartEjection1+0x4a>
 8001c3a:	bf00      	nop
 8001c3c:	40021800 	.word	0x40021800
 8001c40:	20000420 	.word	0x20000420
 8001c44:	20000330 	.word	0x20000330
 8001c48:	200003bc 	.word	0x200003bc
 8001c4c:	200003de 	.word	0x200003de
 8001c50:	200003df 	.word	0x200003df
 8001c54:	200003c0 	.word	0x200003c0
 8001c58:	200003dc 	.word	0x200003dc
 8001c5c:	20000334 	.word	0x20000334
 8001c60:	0801a934 	.word	0x0801a934

08001c64 <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b0c4      	sub	sp, #272	; 0x110
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartTelemetry2 */

	//Add thread id to the list
	threadsID[2]=osThreadGetId();
 8001c6e:	f00e fd47 	bl	8010700 <osThreadGetId>
 8001c72:	4603      	mov	r3, r0
 8001c74:	4a39      	ldr	r2, [pc, #228]	; (8001d5c <StartTelemetry2+0xf8>)
 8001c76:	6093      	str	r3, [r2, #8]
	#if !TELEMETRY_THREAD
	osThreadExit();
	#endif

	char radio_buffer[RADIO_BUFFER_SIZE];
	uint8_t counter = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint8_t iridium_counter = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 8001c84:	2201      	movs	r2, #1
 8001c86:	2108      	movs	r1, #8
 8001c88:	4835      	ldr	r0, [pc, #212]	; (8001d60 <StartTelemetry2+0xfc>)
 8001c8a:	f009 fba7 	bl	800b3dc <HAL_GPIO_WritePin>

	  if(apogee_flag == 0){ //Only send prop data pre-apogee
 8001c8e:	4b35      	ldr	r3, [pc, #212]	; (8001d64 <StartTelemetry2+0x100>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d118      	bne.n	8001cc8 <StartTelemetry2+0x64>

		  //Send propulsion data
		  memset(radio_buffer, 0, RADIO_BUFFER_SIZE);
 8001c96:	f107 030c 	add.w	r3, r7, #12
 8001c9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f012 fe51 	bl	8014948 <memset>
		  MRT_formatPropulsion();
 8001ca6:	f003 f853 	bl	8004d50 <MRT_formatPropulsion>
		  memcpy(radio_buffer, msg_buffer_pr, strlen(msg_buffer_pr));
 8001caa:	482f      	ldr	r0, [pc, #188]	; (8001d68 <StartTelemetry2+0x104>)
 8001cac:	f7fe faaa 	bl	8000204 <strlen>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	f107 030c 	add.w	r3, r7, #12
 8001cb6:	492c      	ldr	r1, [pc, #176]	; (8001d68 <StartTelemetry2+0x104>)
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f012 fe1d 	bl	80148f8 <memcpy>
		  MRT_radio_tx((char*) radio_buffer);
 8001cbe:	f107 030c 	add.w	r3, r7, #12
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f008 fbfc 	bl	800a4c0 <MRT_radio_tx>
	  }


	  if (counter == SENSORS_SEND_FREQ_DIVIDER){
 8001cc8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ccc:	2b0a      	cmp	r3, #10
 8001cce:	d12e      	bne.n	8001d2e <StartTelemetry2+0xca>
		  counter = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		  float SEC = (uint8_t) time % 60; sprintf(&SEC,"%.0f",SEC);
		  float SUBSEC = time / 3600.0; sprintf(&SUBSEC,"%.0f",SUBSEC);
		  */

	  	  //Send sensors data
		  memset(radio_buffer, 0, RADIO_BUFFER_SIZE);
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f012 fe31 	bl	8014948 <memset>
		  MRT_formatAvionics();
 8001ce6:	f001 fdf1 	bl	80038cc <MRT_formatAvionics>
		  memcpy(radio_buffer, msg_buffer_av, strlen(msg_buffer_av));
 8001cea:	4820      	ldr	r0, [pc, #128]	; (8001d6c <StartTelemetry2+0x108>)
 8001cec:	f7fe fa8a 	bl	8000204 <strlen>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f107 030c 	add.w	r3, r7, #12
 8001cf6:	491d      	ldr	r1, [pc, #116]	; (8001d6c <StartTelemetry2+0x108>)
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f012 fdfd 	bl	80148f8 <memcpy>
		  MRT_radio_tx((char*) radio_buffer);
 8001cfe:	f107 030c 	add.w	r3, r7, #12
 8001d02:	4618      	mov	r0, r3
 8001d04:	f008 fbdc 	bl	800a4c0 <MRT_radio_tx>


		  if(apogee_flag && iridium_counter == IRIDIUM_SEND_FREQ_DIVIDER){
 8001d08:	4b16      	ldr	r3, [pc, #88]	; (8001d64 <StartTelemetry2+0x100>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d009      	beq.n	8001d24 <StartTelemetry2+0xc0>
 8001d10:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001d14:	2b05      	cmp	r3, #5
 8001d16:	d105      	bne.n	8001d24 <StartTelemetry2+0xc0>
			  iridium_counter = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
			  #if IRIDIUM_ //Iridium send
			  hiridium.getTime(); //TODO doesn't cost anything
 8001d1e:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <StartTelemetry2+0x10c>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	4798      	blx	r3
			  //hiridium.sendMessage(msg); TODO IT COSTS CREDITS WATCH OUT
			  #endif
		  }
		  iridium_counter++;
 8001d24:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001d28:	3301      	adds	r3, #1
 8001d2a:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	  }
	  counter++;
 8001d2e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d32:	3301      	adds	r3, #1
 8001d34:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f


	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2108      	movs	r1, #8
 8001d3c:	4808      	ldr	r0, [pc, #32]	; (8001d60 <StartTelemetry2+0xfc>)
 8001d3e:	f009 fb4d 	bl	800b3dc <HAL_GPIO_WritePin>

	  if (apogee_flag){
 8001d42:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <StartTelemetry2+0x100>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <StartTelemetry2+0xee>
		  osDelay(1000/POST_APOGEE_SEND_FREQ);
 8001d4a:	200a      	movs	r0, #10
 8001d4c:	f00e fd74 	bl	8010838 <osDelay>
 8001d50:	e798      	b.n	8001c84 <StartTelemetry2+0x20>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_SEND_FREQ);
 8001d52:	2014      	movs	r0, #20
 8001d54:	f00e fd70 	bl	8010838 <osDelay>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 8001d58:	e794      	b.n	8001c84 <StartTelemetry2+0x20>
 8001d5a:	bf00      	nop
 8001d5c:	20005b3c 	.word	0x20005b3c
 8001d60:	40020800 	.word	0x40020800
 8001d64:	200003db 	.word	0x200003db
 8001d68:	20005f94 	.word	0x20005f94
 8001d6c:	20005e8c 	.word	0x20005e8c
 8001d70:	2000044c 	.word	0x2000044c

08001d74 <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	//Add thread id to the list
	threadsID[3]=osThreadGetId();
 8001d7c:	f00e fcc0 	bl	8010700 <osThreadGetId>
 8001d80:	4603      	mov	r3, r0
 8001d82:	4a13      	ldr	r2, [pc, #76]	; (8001dd0 <StartSensors3+0x5c>)
 8001d84:	60d3      	str	r3, [r2, #12]


  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8001d86:	2201      	movs	r2, #1
 8001d88:	2102      	movs	r1, #2
 8001d8a:	4812      	ldr	r0, [pc, #72]	; (8001dd4 <StartSensors3+0x60>)
 8001d8c:	f009 fb26 	bl	800b3dc <HAL_GPIO_WritePin>

	  //GPS
	  hgps.pollAll();
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <StartSensors3+0x64>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	4798      	blx	r3

	  //LSM6DSR
	  hlsm6dsr.pollAll();
 8001d96:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <StartSensors3+0x68>)
 8001d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9a:	4798      	blx	r3

	  //LPS22HH
	  hlps22hh.pollAll();
 8001d9c:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <StartSensors3+0x6c>)
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	4798      	blx	r3

	  //Gates continuity
	  gates_continuity = MRT_getContinuity();
 8001da2:	f001 fd5f 	bl	8003864 <MRT_getContinuity>
 8001da6:	4603      	mov	r3, r0
 8001da8:	461a      	mov	r2, r3
 8001daa:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <StartSensors3+0x70>)
 8001dac:	701a      	strb	r2, [r3, #0]

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2102      	movs	r1, #2
 8001db2:	4808      	ldr	r0, [pc, #32]	; (8001dd4 <StartSensors3+0x60>)
 8001db4:	f009 fb12 	bl	800b3dc <HAL_GPIO_WritePin>

	  if (apogee_flag){
 8001db8:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <StartSensors3+0x74>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <StartSensors3+0x54>
		  osDelay(1000/POST_APOGEE_POLL_FREQ);
 8001dc0:	200a      	movs	r0, #10
 8001dc2:	f00e fd39 	bl	8010838 <osDelay>
 8001dc6:	e7de      	b.n	8001d86 <StartSensors3+0x12>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_POLL_FREQ);
 8001dc8:	2014      	movs	r0, #20
 8001dca:	f00e fd35 	bl	8010838 <osDelay>
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8001dce:	e7da      	b.n	8001d86 <StartSensors3+0x12>
 8001dd0:	20005b3c 	.word	0x20005b3c
 8001dd4:	40020800 	.word	0x40020800
 8001dd8:	20000434 	.word	0x20000434
 8001ddc:	200003f4 	.word	0x200003f4
 8001de0:	20000420 	.word	0x20000420
 8001de4:	200003c5 	.word	0x200003c5
 8001de8:	200003db 	.word	0x200003db

08001dec <StartWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchDog */
void StartWatchDog(void *argument)
{
 8001dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001df0:	b0c6      	sub	sp, #280	; 0x118
 8001df2:	af04      	add	r7, sp, #16
 8001df4:	1d3b      	adds	r3, r7, #4
 8001df6:	6018      	str	r0, [r3, #0]
	char buffer[WD_BUFFER_SIZE];

  /* Infinite loop */
  for(;;)
  {
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8001df8:	2201      	movs	r2, #1
 8001dfa:	2104      	movs	r1, #4
 8001dfc:	4858      	ldr	r0, [pc, #352]	; (8001f60 <StartWatchDog+0x174>)
 8001dfe:	f009 faed 	bl	800b3dc <HAL_GPIO_WritePin>

	 HAL_IWDG_Refresh(&hiwdg);

	 //Save the RTC time
	 MRT_saveTotalTime();
 8001e02:	f001 ff3f 	bl	8003c84 <MRT_saveTotalTime>

	 //TODO remove for comp
	 memset(buffer, 0, WD_BUFFER_SIZE);
 8001e06:	f107 0308 	add.w	r3, r7, #8
 8001e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e0e:	2100      	movs	r1, #0
 8001e10:	4618      	mov	r0, r3
 8001e12:	f012 fd99 	bl	8014948 <memset>
	 sprintf(buffer, "Time: %i:%i:%i ::%lu	Altitude: \r\n %f\r\n", prev_hour,prev_min,prev_sec,prev_subsec , altitude_m);
 8001e16:	4b53      	ldr	r3, [pc, #332]	; (8001f64 <StartWatchDog+0x178>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	461e      	mov	r6, r3
 8001e1c:	4b52      	ldr	r3, [pc, #328]	; (8001f68 <StartWatchDog+0x17c>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	4698      	mov	r8, r3
 8001e22:	4b52      	ldr	r3, [pc, #328]	; (8001f6c <StartWatchDog+0x180>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	461d      	mov	r5, r3
 8001e28:	4b51      	ldr	r3, [pc, #324]	; (8001f70 <StartWatchDog+0x184>)
 8001e2a:	681c      	ldr	r4, [r3, #0]
 8001e2c:	4b51      	ldr	r3, [pc, #324]	; (8001f74 <StartWatchDog+0x188>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe fba9 	bl	8000588 <__aeabi_f2d>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	f107 0008 	add.w	r0, r7, #8
 8001e3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e42:	9401      	str	r4, [sp, #4]
 8001e44:	9500      	str	r5, [sp, #0]
 8001e46:	4643      	mov	r3, r8
 8001e48:	4632      	mov	r2, r6
 8001e4a:	494b      	ldr	r1, [pc, #300]	; (8001f78 <StartWatchDog+0x18c>)
 8001e4c:	f014 f878 	bl	8015f40 <siprintf>
	 println((char*) buffer);
 8001e50:	f107 0308 	add.w	r3, r7, #8
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff f939 	bl	80010cc <println>


	 //Check if new ejection stage to save in memory
	 if(wd_ejection_flag == 1){
 8001e5a:	4b48      	ldr	r3, [pc, #288]	; (8001f7c <StartWatchDog+0x190>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d15d      	bne.n	8001f1e <StartWatchDog+0x132>

		wd_ejection_flag = 0;
 8001e62:	4b46      	ldr	r3, [pc, #280]	; (8001f7c <StartWatchDog+0x190>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	701a      	strb	r2, [r3, #0]

		//Update ejection stage flag and save it
		rtc_bckp_reg_ejection_stage = ejection_stage_flag;
 8001e68:	4b45      	ldr	r3, [pc, #276]	; (8001f80 <StartWatchDog+0x194>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b45      	ldr	r3, [pc, #276]	; (8001f84 <StartWatchDog+0x198>)
 8001e70:	601a      	str	r2, [r3, #0]
		ext_flash_ejection_stage = ejection_stage_flag;
 8001e72:	4b43      	ldr	r3, [pc, #268]	; (8001f80 <StartWatchDog+0x194>)
 8001e74:	781a      	ldrb	r2, [r3, #0]
 8001e76:	4b44      	ldr	r3, [pc, #272]	; (8001f88 <StartWatchDog+0x19c>)
 8001e78:	701a      	strb	r2, [r3, #0]
		MRT_saveFlagValue(FC_STATE_FLIGHT);
 8001e7a:	2004      	movs	r0, #4
 8001e7c:	f001 fe76 	bl	8003b6c <MRT_saveFlagValue>

		//If applicable, update apogee flag
		if (ejection_stage_flag >= DROGUE_DESCENT){
 8001e80:	4b3f      	ldr	r3, [pc, #252]	; (8001f80 <StartWatchDog+0x194>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d90e      	bls.n	8001ea6 <StartWatchDog+0xba>
			apogee_flag = 1;
 8001e88:	4b40      	ldr	r3, [pc, #256]	; (8001f8c <StartWatchDog+0x1a0>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	701a      	strb	r2, [r3, #0]
			rtc_bckp_reg_apogee = apogee_flag;
 8001e8e:	4b3f      	ldr	r3, [pc, #252]	; (8001f8c <StartWatchDog+0x1a0>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	461a      	mov	r2, r3
 8001e94:	4b3e      	ldr	r3, [pc, #248]	; (8001f90 <StartWatchDog+0x1a4>)
 8001e96:	601a      	str	r2, [r3, #0]
			ext_flash_apogee = apogee_flag;
 8001e98:	4b3c      	ldr	r3, [pc, #240]	; (8001f8c <StartWatchDog+0x1a0>)
 8001e9a:	781a      	ldrb	r2, [r3, #0]
 8001e9c:	4b3d      	ldr	r3, [pc, #244]	; (8001f94 <StartWatchDog+0x1a8>)
 8001e9e:	701a      	strb	r2, [r3, #0]
			MRT_saveFlagValue(FC_STATE_APOGEE);
 8001ea0:	2003      	movs	r0, #3
 8001ea2:	f001 fe63 	bl	8003b6c <MRT_saveFlagValue>
		}

		//TODO TESTING SAVE EVERY ALT REGISTERS
		MRT_RTC_setBackupReg(FC_STATE_ALT_PAD, rtc_bckp_reg_alt_pad);
 8001ea6:	4b3c      	ldr	r3, [pc, #240]	; (8001f98 <StartWatchDog+0x1ac>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4619      	mov	r1, r3
 8001eac:	2009      	movs	r0, #9
 8001eae:	f000 fff1 	bl	8002e94 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_PAD_TIME, rtc_bckp_reg_pad_time);
 8001eb2:	4b3a      	ldr	r3, [pc, #232]	; (8001f9c <StartWatchDog+0x1b0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	200a      	movs	r0, #10
 8001eba:	f000 ffeb 	bl	8002e94 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_STATE_TRUE_APOGEE, rtc_bckp_reg_alt_true_apogee);
 8001ebe:	4b38      	ldr	r3, [pc, #224]	; (8001fa0 <StartWatchDog+0x1b4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	200b      	movs	r0, #11
 8001ec6:	f000 ffe5 	bl	8002e94 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_TRUE_APOGEE_TIME, rtc_bckp_reg_true_apogee_time);
 8001eca:	4b36      	ldr	r3, [pc, #216]	; (8001fa4 <StartWatchDog+0x1b8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4619      	mov	r1, r3
 8001ed0:	200c      	movs	r0, #12
 8001ed2:	f000 ffdf 	bl	8002e94 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_STATE_ALT_APOGEE, rtc_bckp_reg_alt_apogee);
 8001ed6:	4b34      	ldr	r3, [pc, #208]	; (8001fa8 <StartWatchDog+0x1bc>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4619      	mov	r1, r3
 8001edc:	200d      	movs	r0, #13
 8001ede:	f000 ffd9 	bl	8002e94 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_APOGEE_TIME, rtc_bckp_reg_apogee_time);
 8001ee2:	4b32      	ldr	r3, [pc, #200]	; (8001fac <StartWatchDog+0x1c0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	200e      	movs	r0, #14
 8001eea:	f000 ffd3 	bl	8002e94 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_STATE_ALT_MAIN, rtc_bckp_reg_alt_main);
 8001eee:	4b30      	ldr	r3, [pc, #192]	; (8001fb0 <StartWatchDog+0x1c4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	200f      	movs	r0, #15
 8001ef6:	f000 ffcd 	bl	8002e94 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_MAIN_TIME, rtc_bckp_reg_main_time);
 8001efa:	4b2e      	ldr	r3, [pc, #184]	; (8001fb4 <StartWatchDog+0x1c8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4619      	mov	r1, r3
 8001f00:	2010      	movs	r0, #16
 8001f02:	f000 ffc7 	bl	8002e94 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_STATE_ALT_LANDED, rtc_bckp_reg_alt_landed);
 8001f06:	4b2c      	ldr	r3, [pc, #176]	; (8001fb8 <StartWatchDog+0x1cc>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	2011      	movs	r0, #17
 8001f0e:	f000 ffc1 	bl	8002e94 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_LANDED_TIME, rtc_bckp_reg_landed_time);
 8001f12:	4b2a      	ldr	r3, [pc, #168]	; (8001fbc <StartWatchDog+0x1d0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4619      	mov	r1, r3
 8001f18:	2012      	movs	r0, #18
 8001f1a:	f000 ffbb 	bl	8002e94 <MRT_RTC_setBackupReg>
	 }

	  //Check if it's sleep time
	  if (flagA==1){
 8001f1e:	4b28      	ldr	r3, [pc, #160]	; (8001fc0 <StartWatchDog+0x1d4>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d110      	bne.n	8001f48 <StartWatchDog+0x15c>
		//Update iwdg_flag
		iwdg_flag = 1;
 8001f26:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <StartWatchDog+0x1d8>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	701a      	strb	r2, [r3, #0]
		rtc_bckp_reg_apogee = iwdg_flag;
 8001f2c:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <StartWatchDog+0x1d8>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <StartWatchDog+0x1a4>)
 8001f34:	601a      	str	r2, [r3, #0]
		ext_flash_apogee = iwdg_flag;
 8001f36:	4b23      	ldr	r3, [pc, #140]	; (8001fc4 <StartWatchDog+0x1d8>)
 8001f38:	781a      	ldrb	r2, [r3, #0]
 8001f3a:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <StartWatchDog+0x1a8>)
 8001f3c:	701a      	strb	r2, [r3, #0]
		MRT_saveFlagValue(FC_STATE_IWDG);
 8001f3e:	2002      	movs	r0, #2
 8001f40:	f001 fe14 	bl	8003b6c <MRT_saveFlagValue>

		//Reset to deactivate IWDG
		NVIC_SystemReset();
 8001f44:	f7ff fb60 	bl	8001608 <__NVIC_SystemReset>
	  }

	  MRT_checkThreadStates();
 8001f48:	f000 f864 	bl	8002014 <MRT_checkThreadStates>

	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2104      	movs	r1, #4
 8001f50:	4803      	ldr	r0, [pc, #12]	; (8001f60 <StartWatchDog+0x174>)
 8001f52:	f009 fa43 	bl	800b3dc <HAL_GPIO_WritePin>

	  osDelay(1000/WD_FREQ);
 8001f56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f5a:	f00e fc6d 	bl	8010838 <osDelay>
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8001f5e:	e74b      	b.n	8001df8 <StartWatchDog+0xc>
 8001f60:	40020800 	.word	0x40020800
 8001f64:	200003dd 	.word	0x200003dd
 8001f68:	200003de 	.word	0x200003de
 8001f6c:	200003df 	.word	0x200003df
 8001f70:	200003e0 	.word	0x200003e0
 8001f74:	20000330 	.word	0x20000330
 8001f78:	0801a94c 	.word	0x0801a94c
 8001f7c:	20000334 	.word	0x20000334
 8001f80:	200003dc 	.word	0x200003dc
 8001f84:	20000388 	.word	0x20000388
 8001f88:	200003ca 	.word	0x200003ca
 8001f8c:	200003db 	.word	0x200003db
 8001f90:	20000384 	.word	0x20000384
 8001f94:	200003c9 	.word	0x200003c9
 8001f98:	2000039c 	.word	0x2000039c
 8001f9c:	200003a0 	.word	0x200003a0
 8001fa0:	200003a4 	.word	0x200003a4
 8001fa4:	200003a8 	.word	0x200003a8
 8001fa8:	200003ac 	.word	0x200003ac
 8001fac:	200003b0 	.word	0x200003b0
 8001fb0:	200003b4 	.word	0x200003b4
 8001fb4:	200003b8 	.word	0x200003b8
 8001fb8:	200003bc 	.word	0x200003bc
 8001fbc:	200003c0 	.word	0x200003c0
 8001fc0:	200003c4 	.word	0x200003c4
 8001fc4:	200003da 	.word	0x200003da

08001fc8 <StartPropulsion4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPropulsion4 */
void StartPropulsion4(void *argument)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPropulsion4 */

	//Add thread id to the list
	threadsID[4]=osThreadGetId();
 8001fd0:	f00e fb96 	bl	8010700 <osThreadGetId>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	4a0c      	ldr	r2, [pc, #48]	; (8002008 <StartPropulsion4+0x40>)
 8001fd8:	6113      	str	r3, [r2, #16]

	#if !PROPULSION_THREAD
	osThreadExit();
	#endif

	if (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT){
 8001fda:	4b0c      	ldr	r3, [pc, #48]	; (800200c <StartPropulsion4+0x44>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d103      	bne.n	8001fea <StartPropulsion4+0x22>
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <StartPropulsion4+0x48>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d901      	bls.n	8001fee <StartPropulsion4+0x26>
		osThreadExit();
 8001fea:	f00e fbf2 	bl	80107d2 <osThreadExit>

  /* Infinite loop */
  for(;;)
  {
	  //Poll propulsion sensors
	  MRT_pollPropulsion();
 8001fee:	f002 fe77 	bl	8004ce0 <MRT_pollPropulsion>

	  if (apogee_flag){
 8001ff2:	4b06      	ldr	r3, [pc, #24]	; (800200c <StartPropulsion4+0x44>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <StartPropulsion4+0x36>
		  osThreadExit();
 8001ffa:	f00e fbea 	bl	80107d2 <osThreadExit>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_POLL_FREQ);
 8001ffe:	2014      	movs	r0, #20
 8002000:	f00e fc1a 	bl	8010838 <osDelay>
	  MRT_pollPropulsion();
 8002004:	e7f3      	b.n	8001fee <StartPropulsion4+0x26>
 8002006:	bf00      	nop
 8002008:	20005b3c 	.word	0x20005b3c
 800200c:	200003db 	.word	0x200003db
 8002010:	200003dc 	.word	0x200003dc

08002014 <MRT_checkThreadStates>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

//TODO private functions

void MRT_checkThreadStates(void){
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
	  //Check each thread state
	  #if THREAD_KEEPER

	  osThreadState_t thread_state;

	  for (int i=0; i < NUMBER_OF_THREADS;i++){
 800201a:	2300      	movs	r3, #0
 800201c:	607b      	str	r3, [r7, #4]
 800201e:	e055      	b.n	80020cc <MRT_checkThreadStates+0xb8>

		  thread_state = osThreadGetState(threadsID[i]);
 8002020:	4a2e      	ldr	r2, [pc, #184]	; (80020dc <MRT_checkThreadStates+0xc8>)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002028:	4618      	mov	r0, r3
 800202a:	f00e fb75 	bl	8010718 <osThreadGetState>
 800202e:	6038      	str	r0, [r7, #0]

		  if (thread_state == osThreadInactive ||
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d005      	beq.n	8002042 <MRT_checkThreadStates+0x2e>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	2b03      	cmp	r3, #3
 800203a:	d002      	beq.n	8002042 <MRT_checkThreadStates+0x2e>
			  thread_state == osThreadBlocked  ||
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	2b04      	cmp	r3, #4
 8002040:	d128      	bne.n	8002094 <MRT_checkThreadStates+0x80>
			  thread_state == osThreadTerminated){

			  //Ejection thread
			  if (i==1 && ejection_stage_flag < LANDED){
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d10a      	bne.n	800205e <MRT_checkThreadStates+0x4a>
 8002048:	4b25      	ldr	r3, [pc, #148]	; (80020e0 <MRT_checkThreadStates+0xcc>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b03      	cmp	r3, #3
 800204e:	d806      	bhi.n	800205e <MRT_checkThreadStates+0x4a>
				 osThreadResume(threadsID[i]);
 8002050:	4a22      	ldr	r2, [pc, #136]	; (80020dc <MRT_checkThreadStates+0xc8>)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002058:	4618      	mov	r0, r3
 800205a:	f00e fb99 	bl	8010790 <osThreadResume>
			  }

			  //Propulsion thread
			  if (i==4 && (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT)){
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b04      	cmp	r3, #4
 8002062:	d10f      	bne.n	8002084 <MRT_checkThreadStates+0x70>
 8002064:	4b1f      	ldr	r3, [pc, #124]	; (80020e4 <MRT_checkThreadStates+0xd0>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d103      	bne.n	8002074 <MRT_checkThreadStates+0x60>
 800206c:	4b1c      	ldr	r3, [pc, #112]	; (80020e0 <MRT_checkThreadStates+0xcc>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d907      	bls.n	8002084 <MRT_checkThreadStates+0x70>
				  osThreadTerminate(threadsID[i]);
 8002074:	4a19      	ldr	r2, [pc, #100]	; (80020dc <MRT_checkThreadStates+0xc8>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207c:	4618      	mov	r0, r3
 800207e:	f00e fbae 	bl	80107de <osThreadTerminate>
				  continue;
 8002082:	e020      	b.n	80020c6 <MRT_checkThreadStates+0xb2>
			  }
			  else {
				 //Resume otherwise
				 osThreadResume(threadsID[i]);
 8002084:	4a15      	ldr	r2, [pc, #84]	; (80020dc <MRT_checkThreadStates+0xc8>)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208c:	4618      	mov	r0, r3
 800208e:	f00e fb7f 	bl	8010790 <osThreadResume>
			  if (i==4 && (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT)){
 8002092:	e018      	b.n	80020c6 <MRT_checkThreadStates+0xb2>
			  }
		  }

		  else if (thread_state == osThreadError){
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800209a:	d114      	bne.n	80020c6 <MRT_checkThreadStates+0xb2>
			  //If it's the propulsion thread
			  if (i==4 && (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT)){
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d10f      	bne.n	80020c2 <MRT_checkThreadStates+0xae>
 80020a2:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <MRT_checkThreadStates+0xd0>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d103      	bne.n	80020b2 <MRT_checkThreadStates+0x9e>
 80020aa:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <MRT_checkThreadStates+0xcc>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d907      	bls.n	80020c2 <MRT_checkThreadStates+0xae>
				  osThreadTerminate(threadsID[i]);
 80020b2:	4a0a      	ldr	r2, [pc, #40]	; (80020dc <MRT_checkThreadStates+0xc8>)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f00e fb8f 	bl	80107de <osThreadTerminate>
				  continue;
 80020c0:	e001      	b.n	80020c6 <MRT_checkThreadStates+0xb2>
			  }
			  else{
				 //Reset otherwise
				 NVIC_SystemReset();
 80020c2:	f7ff faa1 	bl	8001608 <__NVIC_SystemReset>
	  for (int i=0; i < NUMBER_OF_THREADS;i++){
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3301      	adds	r3, #1
 80020ca:	607b      	str	r3, [r7, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	dda6      	ble.n	8002020 <MRT_checkThreadStates+0xc>
		  else if (thread_state == osThreadReserved){ TODO not sure what is this state
		  }
		  */
	  }
	  #endif
}
 80020d2:	bf00      	nop
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20005b3c 	.word	0x20005b3c
 80020e0:	200003dc 	.word	0x200003dc
 80020e4:	200003db 	.word	0x200003db

080020e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08e      	sub	sp, #56	; 0x38
 80020ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	609a      	str	r2, [r3, #8]
 80020fa:	60da      	str	r2, [r3, #12]
 80020fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	623b      	str	r3, [r7, #32]
 8002102:	4bb5      	ldr	r3, [pc, #724]	; (80023d8 <MX_GPIO_Init+0x2f0>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4ab4      	ldr	r2, [pc, #720]	; (80023d8 <MX_GPIO_Init+0x2f0>)
 8002108:	f043 0310 	orr.w	r3, r3, #16
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4bb2      	ldr	r3, [pc, #712]	; (80023d8 <MX_GPIO_Init+0x2f0>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0310 	and.w	r3, r3, #16
 8002116:	623b      	str	r3, [r7, #32]
 8002118:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
 800211e:	4bae      	ldr	r3, [pc, #696]	; (80023d8 <MX_GPIO_Init+0x2f0>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	4aad      	ldr	r2, [pc, #692]	; (80023d8 <MX_GPIO_Init+0x2f0>)
 8002124:	f043 0304 	orr.w	r3, r3, #4
 8002128:	6313      	str	r3, [r2, #48]	; 0x30
 800212a:	4bab      	ldr	r3, [pc, #684]	; (80023d8 <MX_GPIO_Init+0x2f0>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f003 0304 	and.w	r3, r3, #4
 8002132:	61fb      	str	r3, [r7, #28]
 8002134:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	61bb      	str	r3, [r7, #24]
 800213a:	4ba7      	ldr	r3, [pc, #668]	; (80023d8 <MX_GPIO_Init+0x2f0>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4aa6      	ldr	r2, [pc, #664]	; (80023d8 <MX_GPIO_Init+0x2f0>)
 8002140:	f043 0320 	orr.w	r3, r3, #32
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4ba4      	ldr	r3, [pc, #656]	; (80023d8 <MX_GPIO_Init+0x2f0>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0320 	and.w	r3, r3, #32
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	4ba0      	ldr	r3, [pc, #640]	; (80023d8 <MX_GPIO_Init+0x2f0>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a9f      	ldr	r2, [pc, #636]	; (80023d8 <MX_GPIO_Init+0x2f0>)
 800215c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b9d      	ldr	r3, [pc, #628]	; (80023d8 <MX_GPIO_Init+0x2f0>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	4b99      	ldr	r3, [pc, #612]	; (80023d8 <MX_GPIO_Init+0x2f0>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a98      	ldr	r2, [pc, #608]	; (80023d8 <MX_GPIO_Init+0x2f0>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b96      	ldr	r3, [pc, #600]	; (80023d8 <MX_GPIO_Init+0x2f0>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	4b92      	ldr	r3, [pc, #584]	; (80023d8 <MX_GPIO_Init+0x2f0>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	4a91      	ldr	r2, [pc, #580]	; (80023d8 <MX_GPIO_Init+0x2f0>)
 8002194:	f043 0302 	orr.w	r3, r3, #2
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b8f      	ldr	r3, [pc, #572]	; (80023d8 <MX_GPIO_Init+0x2f0>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	4b8b      	ldr	r3, [pc, #556]	; (80023d8 <MX_GPIO_Init+0x2f0>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	4a8a      	ldr	r2, [pc, #552]	; (80023d8 <MX_GPIO_Init+0x2f0>)
 80021b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021b4:	6313      	str	r3, [r2, #48]	; 0x30
 80021b6:	4b88      	ldr	r3, [pc, #544]	; (80023d8 <MX_GPIO_Init+0x2f0>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]
 80021c6:	4b84      	ldr	r3, [pc, #528]	; (80023d8 <MX_GPIO_Init+0x2f0>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	4a83      	ldr	r2, [pc, #524]	; (80023d8 <MX_GPIO_Init+0x2f0>)
 80021cc:	f043 0308 	orr.w	r3, r3, #8
 80021d0:	6313      	str	r3, [r2, #48]	; 0x30
 80021d2:	4b81      	ldr	r3, [pc, #516]	; (80023d8 <MX_GPIO_Init+0x2f0>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 80021de:	2200      	movs	r2, #0
 80021e0:	f248 4184 	movw	r1, #33924	; 0x8484
 80021e4:	487d      	ldr	r0, [pc, #500]	; (80023dc <MX_GPIO_Init+0x2f4>)
 80021e6:	f009 f8f9 	bl	800b3dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 80021ea:	2200      	movs	r2, #0
 80021ec:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 80021f0:	487b      	ldr	r0, [pc, #492]	; (80023e0 <MX_GPIO_Init+0x2f8>)
 80021f2:	f009 f8f3 	bl	800b3dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 80021f6:	2200      	movs	r2, #0
 80021f8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80021fc:	4879      	ldr	r0, [pc, #484]	; (80023e4 <MX_GPIO_Init+0x2fc>)
 80021fe:	f009 f8ed 	bl	800b3dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 8002202:	2200      	movs	r2, #0
 8002204:	2108      	movs	r1, #8
 8002206:	4878      	ldr	r0, [pc, #480]	; (80023e8 <MX_GPIO_Init+0x300>)
 8002208:	f009 f8e8 	bl	800b3dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 800220c:	2200      	movs	r2, #0
 800220e:	f645 2126 	movw	r1, #23078	; 0x5a26
 8002212:	4876      	ldr	r0, [pc, #472]	; (80023ec <MX_GPIO_Init+0x304>)
 8002214:	f009 f8e2 	bl	800b3dc <HAL_GPIO_WritePin>
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin, GPIO_PIN_RESET);
 8002218:	2200      	movs	r2, #0
 800221a:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 800221e:	4874      	ldr	r0, [pc, #464]	; (80023f0 <MX_GPIO_Init+0x308>)
 8002220:	f009 f8dc 	bl	800b3dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002224:	2200      	movs	r2, #0
 8002226:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 800222a:	4872      	ldr	r0, [pc, #456]	; (80023f4 <MX_GPIO_Init+0x30c>)
 800222c:	f009 f8d6 	bl	800b3dc <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 8002230:	f248 4384 	movw	r3, #33924	; 0x8484
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002236:	2301      	movs	r3, #1
 8002238:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223e:	2300      	movs	r3, #0
 8002240:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002246:	4619      	mov	r1, r3
 8002248:	4864      	ldr	r0, [pc, #400]	; (80023dc <MX_GPIO_Init+0x2f4>)
 800224a:	f008 ff03 	bl	800b054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800224e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002254:	2301      	movs	r3, #1
 8002256:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002258:	2301      	movs	r3, #1
 800225a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225c:	2300      	movs	r3, #0
 800225e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002264:	4619      	mov	r1, r3
 8002266:	485e      	ldr	r0, [pc, #376]	; (80023e0 <MX_GPIO_Init+0x2f8>)
 8002268:	f008 fef4 	bl	800b054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 800226c:	2301      	movs	r3, #1
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002270:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002274:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 800227a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800227e:	4619      	mov	r1, r3
 8002280:	4858      	ldr	r0, [pc, #352]	; (80023e4 <MX_GPIO_Init+0x2fc>)
 8002282:	f008 fee7 	bl	800b054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 8002286:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800228c:	2301      	movs	r3, #1
 800228e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	2300      	movs	r3, #0
 8002296:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800229c:	4619      	mov	r1, r3
 800229e:	4851      	ldr	r0, [pc, #324]	; (80023e4 <MX_GPIO_Init+0x2fc>)
 80022a0:	f008 fed8 	bl	800b054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 80022a4:	2308      	movs	r3, #8
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a8:	2301      	movs	r3, #1
 80022aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b0:	2300      	movs	r3, #0
 80022b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 80022b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b8:	4619      	mov	r1, r3
 80022ba:	484b      	ldr	r0, [pc, #300]	; (80023e8 <MX_GPIO_Init+0x300>)
 80022bc:	f008 feca 	bl	800b054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 80022c0:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c6:	2300      	movs	r3, #0
 80022c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d2:	4619      	mov	r1, r3
 80022d4:	4843      	ldr	r0, [pc, #268]	; (80023e4 <MX_GPIO_Init+0x2fc>)
 80022d6:	f008 febd 	bl	800b054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 80022da:	2302      	movs	r3, #2
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022de:	2300      	movs	r3, #0
 80022e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 80022e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ea:	4619      	mov	r1, r3
 80022ec:	4840      	ldr	r0, [pc, #256]	; (80023f0 <MX_GPIO_Init+0x308>)
 80022ee:	f008 feb1 	bl	800b054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 80022f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f8:	2300      	movs	r3, #0
 80022fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8002300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002304:	4619      	mov	r1, r3
 8002306:	4836      	ldr	r0, [pc, #216]	; (80023e0 <MX_GPIO_Init+0x2f8>)
 8002308:	f008 fea4 	bl	800b054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 800230c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002312:	2301      	movs	r3, #1
 8002314:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231a:	2300      	movs	r3, #0
 800231c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800231e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002322:	4619      	mov	r1, r3
 8002324:	482e      	ldr	r0, [pc, #184]	; (80023e0 <MX_GPIO_Init+0x2f8>)
 8002326:	f008 fe95 	bl	800b054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|IN_EJ_Main_Cont_Pin
 800232a:	f242 4319 	movw	r3, #9241	; 0x2419
 800232e:	627b      	str	r3, [r7, #36]	; 0x24
                          |IN_EJ_Drogue_Cont_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002330:	2300      	movs	r3, #0
 8002332:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800233c:	4619      	mov	r1, r3
 800233e:	482b      	ldr	r0, [pc, #172]	; (80023ec <MX_GPIO_Init+0x304>)
 8002340:	f008 fe88 	bl	800b054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 8002344:	f645 2326 	movw	r3, #23078	; 0x5a26
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234a:	2301      	movs	r3, #1
 800234c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002352:	2300      	movs	r3, #0
 8002354:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800235a:	4619      	mov	r1, r3
 800235c:	4823      	ldr	r0, [pc, #140]	; (80023ec <MX_GPIO_Init+0x304>)
 800235e:	f008 fe79 	bl	800b054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 8002362:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002368:	2300      	movs	r3, #0
 800236a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002374:	4619      	mov	r1, r3
 8002376:	4819      	ldr	r0, [pc, #100]	; (80023dc <MX_GPIO_Init+0x2f4>)
 8002378:	f008 fe6c 	bl	800b054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB8 PBPin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin;
 800237c:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002382:	2301      	movs	r3, #1
 8002384:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238a:	2300      	movs	r3, #0
 800238c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800238e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002392:	4619      	mov	r1, r3
 8002394:	4816      	ldr	r0, [pc, #88]	; (80023f0 <MX_GPIO_Init+0x308>)
 8002396:	f008 fe5d 	bl	800b054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 800239a:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a0:	2301      	movs	r3, #1
 80023a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a8:	2300      	movs	r3, #0
 80023aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023b0:	4619      	mov	r1, r3
 80023b2:	4810      	ldr	r0, [pc, #64]	; (80023f4 <MX_GPIO_Init+0x30c>)
 80023b4:	f008 fe4e 	bl	800b054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 80023b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023be:	2300      	movs	r3, #0
 80023c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 80023c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ca:	4619      	mov	r1, r3
 80023cc:	4809      	ldr	r0, [pc, #36]	; (80023f4 <MX_GPIO_Init+0x30c>)
 80023ce:	f008 fe41 	bl	800b054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 80023d2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80023d6:	e00f      	b.n	80023f8 <MX_GPIO_Init+0x310>
 80023d8:	40023800 	.word	0x40023800
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40021400 	.word	0x40021400
 80023e4:	40020800 	.word	0x40020800
 80023e8:	40020000 	.word	0x40020000
 80023ec:	40021800 	.word	0x40021800
 80023f0:	40020400 	.word	0x40020400
 80023f4:	40020c00 	.word	0x40020c00
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80023fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002408:	4619      	mov	r1, r3
 800240a:	4807      	ldr	r0, [pc, #28]	; (8002428 <MX_GPIO_Init+0x340>)
 800240c:	f008 fe22 	bl	800b054 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002410:	2200      	movs	r2, #0
 8002412:	2105      	movs	r1, #5
 8002414:	2006      	movs	r0, #6
 8002416:	f008 fde5 	bl	800afe4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800241a:	2006      	movs	r0, #6
 800241c:	f008 fdfe 	bl	800b01c <HAL_NVIC_EnableIRQ>

}
 8002420:	bf00      	nop
 8002422:	3738      	adds	r7, #56	; 0x38
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40021800 	.word	0x40021800

0800242c <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002430:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <MX_I2C2_Init+0x74>)
 8002432:	4a1c      	ldr	r2, [pc, #112]	; (80024a4 <MX_I2C2_Init+0x78>)
 8002434:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002436:	4b1a      	ldr	r3, [pc, #104]	; (80024a0 <MX_I2C2_Init+0x74>)
 8002438:	4a1b      	ldr	r2, [pc, #108]	; (80024a8 <MX_I2C2_Init+0x7c>)
 800243a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800243c:	4b18      	ldr	r3, [pc, #96]	; (80024a0 <MX_I2C2_Init+0x74>)
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002442:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <MX_I2C2_Init+0x74>)
 8002444:	2200      	movs	r2, #0
 8002446:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002448:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <MX_I2C2_Init+0x74>)
 800244a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800244e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002450:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <MX_I2C2_Init+0x74>)
 8002452:	2200      	movs	r2, #0
 8002454:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002456:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <MX_I2C2_Init+0x74>)
 8002458:	2200      	movs	r2, #0
 800245a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800245c:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <MX_I2C2_Init+0x74>)
 800245e:	2200      	movs	r2, #0
 8002460:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002462:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <MX_I2C2_Init+0x74>)
 8002464:	2200      	movs	r2, #0
 8002466:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002468:	480d      	ldr	r0, [pc, #52]	; (80024a0 <MX_I2C2_Init+0x74>)
 800246a:	f008 ffe9 	bl	800b440 <HAL_I2C_Init>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002474:	f000 fa3c 	bl	80028f0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002478:	2100      	movs	r1, #0
 800247a:	4809      	ldr	r0, [pc, #36]	; (80024a0 <MX_I2C2_Init+0x74>)
 800247c:	f009 ffd5 	bl	800c42a <HAL_I2CEx_ConfigAnalogFilter>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8002486:	f000 fa33 	bl	80028f0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800248a:	2100      	movs	r1, #0
 800248c:	4804      	ldr	r0, [pc, #16]	; (80024a0 <MX_I2C2_Init+0x74>)
 800248e:	f00a f808 	bl	800c4a2 <HAL_I2CEx_ConfigDigitalFilter>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8002498:	f000 fa2a 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800249c:	bf00      	nop
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20005bb4 	.word	0x20005bb4
 80024a4:	40005800 	.word	0x40005800
 80024a8:	000186a0 	.word	0x000186a0

080024ac <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80024b0:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <MX_I2C3_Init+0x74>)
 80024b2:	4a1c      	ldr	r2, [pc, #112]	; (8002524 <MX_I2C3_Init+0x78>)
 80024b4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80024b6:	4b1a      	ldr	r3, [pc, #104]	; (8002520 <MX_I2C3_Init+0x74>)
 80024b8:	4a1b      	ldr	r2, [pc, #108]	; (8002528 <MX_I2C3_Init+0x7c>)
 80024ba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024bc:	4b18      	ldr	r3, [pc, #96]	; (8002520 <MX_I2C3_Init+0x74>)
 80024be:	2200      	movs	r2, #0
 80024c0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80024c2:	4b17      	ldr	r3, [pc, #92]	; (8002520 <MX_I2C3_Init+0x74>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024c8:	4b15      	ldr	r3, [pc, #84]	; (8002520 <MX_I2C3_Init+0x74>)
 80024ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024ce:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024d0:	4b13      	ldr	r3, [pc, #76]	; (8002520 <MX_I2C3_Init+0x74>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80024d6:	4b12      	ldr	r3, [pc, #72]	; (8002520 <MX_I2C3_Init+0x74>)
 80024d8:	2200      	movs	r2, #0
 80024da:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024dc:	4b10      	ldr	r3, [pc, #64]	; (8002520 <MX_I2C3_Init+0x74>)
 80024de:	2200      	movs	r2, #0
 80024e0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024e2:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <MX_I2C3_Init+0x74>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80024e8:	480d      	ldr	r0, [pc, #52]	; (8002520 <MX_I2C3_Init+0x74>)
 80024ea:	f008 ffa9 	bl	800b440 <HAL_I2C_Init>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80024f4:	f000 f9fc 	bl	80028f0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024f8:	2100      	movs	r1, #0
 80024fa:	4809      	ldr	r0, [pc, #36]	; (8002520 <MX_I2C3_Init+0x74>)
 80024fc:	f009 ff95 	bl	800c42a <HAL_I2CEx_ConfigAnalogFilter>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002506:	f000 f9f3 	bl	80028f0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800250a:	2100      	movs	r1, #0
 800250c:	4804      	ldr	r0, [pc, #16]	; (8002520 <MX_I2C3_Init+0x74>)
 800250e:	f009 ffc8 	bl	800c4a2 <HAL_I2CEx_ConfigDigitalFilter>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002518:	f000 f9ea 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800251c:	bf00      	nop
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20005b60 	.word	0x20005b60
 8002524:	40005c00 	.word	0x40005c00
 8002528:	000186a0 	.word	0x000186a0

0800252c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08c      	sub	sp, #48	; 0x30
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002534:	f107 031c 	add.w	r3, r7, #28
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a42      	ldr	r2, [pc, #264]	; (8002654 <HAL_I2C_MspInit+0x128>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d12d      	bne.n	80025aa <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	4b41      	ldr	r3, [pc, #260]	; (8002658 <HAL_I2C_MspInit+0x12c>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	4a40      	ldr	r2, [pc, #256]	; (8002658 <HAL_I2C_MspInit+0x12c>)
 8002558:	f043 0302 	orr.w	r3, r3, #2
 800255c:	6313      	str	r3, [r2, #48]	; 0x30
 800255e:	4b3e      	ldr	r3, [pc, #248]	; (8002658 <HAL_I2C_MspInit+0x12c>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	61bb      	str	r3, [r7, #24]
 8002568:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800256a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800256e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002570:	2312      	movs	r3, #18
 8002572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002574:	2301      	movs	r3, #1
 8002576:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002578:	2303      	movs	r3, #3
 800257a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800257c:	2304      	movs	r3, #4
 800257e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002580:	f107 031c 	add.w	r3, r7, #28
 8002584:	4619      	mov	r1, r3
 8002586:	4835      	ldr	r0, [pc, #212]	; (800265c <HAL_I2C_MspInit+0x130>)
 8002588:	f008 fd64 	bl	800b054 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	4b31      	ldr	r3, [pc, #196]	; (8002658 <HAL_I2C_MspInit+0x12c>)
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	4a30      	ldr	r2, [pc, #192]	; (8002658 <HAL_I2C_MspInit+0x12c>)
 8002596:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800259a:	6413      	str	r3, [r2, #64]	; 0x40
 800259c:	4b2e      	ldr	r3, [pc, #184]	; (8002658 <HAL_I2C_MspInit+0x12c>)
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80025a8:	e050      	b.n	800264c <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a2c      	ldr	r2, [pc, #176]	; (8002660 <HAL_I2C_MspInit+0x134>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d14b      	bne.n	800264c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025b4:	2300      	movs	r3, #0
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	4b27      	ldr	r3, [pc, #156]	; (8002658 <HAL_I2C_MspInit+0x12c>)
 80025ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025bc:	4a26      	ldr	r2, [pc, #152]	; (8002658 <HAL_I2C_MspInit+0x12c>)
 80025be:	f043 0304 	orr.w	r3, r3, #4
 80025c2:	6313      	str	r3, [r2, #48]	; 0x30
 80025c4:	4b24      	ldr	r3, [pc, #144]	; (8002658 <HAL_I2C_MspInit+0x12c>)
 80025c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	4b20      	ldr	r3, [pc, #128]	; (8002658 <HAL_I2C_MspInit+0x12c>)
 80025d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d8:	4a1f      	ldr	r2, [pc, #124]	; (8002658 <HAL_I2C_MspInit+0x12c>)
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	6313      	str	r3, [r2, #48]	; 0x30
 80025e0:	4b1d      	ldr	r3, [pc, #116]	; (8002658 <HAL_I2C_MspInit+0x12c>)
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80025ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025f2:	2312      	movs	r3, #18
 80025f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025f6:	2301      	movs	r3, #1
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fa:	2303      	movs	r3, #3
 80025fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025fe:	2304      	movs	r3, #4
 8002600:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002602:	f107 031c 	add.w	r3, r7, #28
 8002606:	4619      	mov	r1, r3
 8002608:	4816      	ldr	r0, [pc, #88]	; (8002664 <HAL_I2C_MspInit+0x138>)
 800260a:	f008 fd23 	bl	800b054 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800260e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002614:	2312      	movs	r3, #18
 8002616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002618:	2301      	movs	r3, #1
 800261a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800261c:	2303      	movs	r3, #3
 800261e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002620:	2304      	movs	r3, #4
 8002622:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002624:	f107 031c 	add.w	r3, r7, #28
 8002628:	4619      	mov	r1, r3
 800262a:	480f      	ldr	r0, [pc, #60]	; (8002668 <HAL_I2C_MspInit+0x13c>)
 800262c:	f008 fd12 	bl	800b054 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002630:	2300      	movs	r3, #0
 8002632:	60bb      	str	r3, [r7, #8]
 8002634:	4b08      	ldr	r3, [pc, #32]	; (8002658 <HAL_I2C_MspInit+0x12c>)
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	4a07      	ldr	r2, [pc, #28]	; (8002658 <HAL_I2C_MspInit+0x12c>)
 800263a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800263e:	6413      	str	r3, [r2, #64]	; 0x40
 8002640:	4b05      	ldr	r3, [pc, #20]	; (8002658 <HAL_I2C_MspInit+0x12c>)
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	68bb      	ldr	r3, [r7, #8]
}
 800264c:	bf00      	nop
 800264e:	3730      	adds	r7, #48	; 0x30
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40005800 	.word	0x40005800
 8002658:	40023800 	.word	0x40023800
 800265c:	40020400 	.word	0x40020400
 8002660:	40005c00 	.word	0x40005c00
 8002664:	40020800 	.word	0x40020800
 8002668:	40020000 	.word	0x40020000

0800266c <main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int main(void){
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
	MRT_STM_Init();
 8002670:	f000 f894 	bl	800279c <MRT_STM_Init>
	println("\r\n\r\nSTM Init...OK");
 8002674:	480c      	ldr	r0, [pc, #48]	; (80026a8 <main+0x3c>)
 8002676:	f7fe fd29 	bl	80010cc <println>

	MRT_Init();
 800267a:	f7fe fdc5 	bl	8001208 <MRT_Init>

	println("\r\n\r\n/****Starting FC****/\r\n\r\n");
 800267e:	480b      	ldr	r0, [pc, #44]	; (80026ac <main+0x40>)
 8002680:	f7fe fd24 	bl	80010cc <println>
	HAL_IWDG_Refresh(&hiwdg);
	buzz_startup_success();
 8002684:	f7fe fda8 	bl	80011d8 <buzz_startup_success>

	MRT_waitForLaunch();
 8002688:	f000 f8aa 	bl	80027e0 <MRT_waitForLaunch>
	//if (DEBUG) TESTING_LOOP(); //TODO remove

	//TODO I2C SENSORS (lsm and lps) SOMETIMES DON'T WANT TO WORK ANYMORE -> NEED TO RESET THE POWER (Enter quick standByMode?)

	//Initialize the os
	MX_FREERTOS_Init();
 800268c:	f7fe ffd2 	bl	8001634 <MX_FREERTOS_Init>

	//Starting the os
	println("\r\n/****Starting the OS****/\r\n");
 8002690:	4807      	ldr	r0, [pc, #28]	; (80026b0 <main+0x44>)
 8002692:	f7fe fd1b 	bl	80010cc <println>
	osKernelStart();
 8002696:	f00d ff7b 	bl	8010590 <osKernelStart>

	println("SOMETHING WENT HORRIBLY WRONG, WAITING FOR WATCH DOG RESET");
 800269a:	4806      	ldr	r0, [pc, #24]	; (80026b4 <main+0x48>)
 800269c:	f7fe fd16 	bl	80010cc <println>
	HAL_IWDG_Refresh(&hiwdg);
	MRT_Deinit();
 80026a0:	f7fe fdc8 	bl	8001234 <MRT_Deinit>
	while (1){}
 80026a4:	e7fe      	b.n	80026a4 <main+0x38>
 80026a6:	bf00      	nop
 80026a8:	0801a974 	.word	0x0801a974
 80026ac:	0801a988 	.word	0x0801a988
 80026b0:	0801a9a8 	.word	0x0801a9a8
 80026b4:	0801a9c8 	.word	0x0801a9c8

080026b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b094      	sub	sp, #80	; 0x50
 80026bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026be:	f107 0320 	add.w	r3, r7, #32
 80026c2:	2230      	movs	r2, #48	; 0x30
 80026c4:	2100      	movs	r1, #0
 80026c6:	4618      	mov	r0, r3
 80026c8:	f012 f93e 	bl	8014948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026cc:	f107 030c 	add.w	r3, r7, #12
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026dc:	2300      	movs	r3, #0
 80026de:	60bb      	str	r3, [r7, #8]
 80026e0:	4b2c      	ldr	r3, [pc, #176]	; (8002794 <SystemClock_Config+0xdc>)
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	4a2b      	ldr	r2, [pc, #172]	; (8002794 <SystemClock_Config+0xdc>)
 80026e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ea:	6413      	str	r3, [r2, #64]	; 0x40
 80026ec:	4b29      	ldr	r3, [pc, #164]	; (8002794 <SystemClock_Config+0xdc>)
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026f8:	2300      	movs	r3, #0
 80026fa:	607b      	str	r3, [r7, #4]
 80026fc:	4b26      	ldr	r3, [pc, #152]	; (8002798 <SystemClock_Config+0xe0>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a25      	ldr	r2, [pc, #148]	; (8002798 <SystemClock_Config+0xe0>)
 8002702:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002706:	6013      	str	r3, [r2, #0]
 8002708:	4b23      	ldr	r3, [pc, #140]	; (8002798 <SystemClock_Config+0xe0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002710:	607b      	str	r3, [r7, #4]
 8002712:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002714:	2309      	movs	r3, #9
 8002716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800271e:	2301      	movs	r3, #1
 8002720:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002722:	2302      	movs	r3, #2
 8002724:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002726:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800272a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800272c:	2308      	movs	r3, #8
 800272e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002730:	23b4      	movs	r3, #180	; 0xb4
 8002732:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002734:	2302      	movs	r3, #2
 8002736:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002738:	2303      	movs	r3, #3
 800273a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800273c:	f107 0320 	add.w	r3, r7, #32
 8002740:	4618      	mov	r0, r3
 8002742:	f009 ff7b 	bl	800c63c <HAL_RCC_OscConfig>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800274c:	f000 f8d0 	bl	80028f0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002750:	f009 ff24 	bl	800c59c <HAL_PWREx_EnableOverDrive>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800275a:	f000 f8c9 	bl	80028f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800275e:	230f      	movs	r3, #15
 8002760:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002762:	2302      	movs	r3, #2
 8002764:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800276a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800276e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002770:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002774:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002776:	f107 030c 	add.w	r3, r7, #12
 800277a:	2105      	movs	r1, #5
 800277c:	4618      	mov	r0, r3
 800277e:	f00a f9d5 	bl	800cb2c <HAL_RCC_ClockConfig>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002788:	f000 f8b2 	bl	80028f0 <Error_Handler>
  }
}
 800278c:	bf00      	nop
 800278e:	3750      	adds	r7, #80	; 0x50
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40023800 	.word	0x40023800
 8002798:	40007000 	.word	0x40007000

0800279c <MRT_STM_Init>:

/* USER CODE BEGIN 4 */

void MRT_STM_Init(void){
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
	HAL_Init();
 80027a0:	f007 fece 	bl	800a540 <HAL_Init>
	SystemClock_Config();
 80027a4:	f7ff ff88 	bl	80026b8 <SystemClock_Config>

	MX_GPIO_Init();
 80027a8:	f7ff fc9e 	bl	80020e8 <MX_GPIO_Init>
	MX_ADC1_Init();
 80027ac:	f7fe fe96 	bl	80014dc <MX_ADC1_Init>
	MX_I2C2_Init();
 80027b0:	f7ff fe3c 	bl	800242c <MX_I2C2_Init>
	MX_I2C3_Init();
 80027b4:	f7ff fe7a 	bl	80024ac <MX_I2C3_Init>
	MX_SPI2_Init();
 80027b8:	f000 fb8a 	bl	8002ed0 <MX_SPI2_Init>
	MX_SPI4_Init();
 80027bc:	f000 fbbe 	bl	8002f3c <MX_SPI4_Init>
	MX_SPI5_Init();
 80027c0:	f000 fbf2 	bl	8002fa8 <MX_SPI5_Init>
	MX_TIM2_Init();
 80027c4:	f000 fdd4 	bl	8003370 <MX_TIM2_Init>
	MX_UART8_Init();
 80027c8:	f000 fea0 	bl	800350c <MX_UART8_Init>
	MX_USART3_UART_Init();
 80027cc:	f000 fec8 	bl	8003560 <MX_USART3_UART_Init>
	MX_USART6_UART_Init();
 80027d0:	f000 fef0 	bl	80035b4 <MX_USART6_UART_Init>
	MX_RTC_Init();
 80027d4:	f000 f892 	bl	80028fc <MX_RTC_Init>
	//MX_IWDG_Init(); TODO ADDED IN MRT_Init()
	MX_FATFS_Init();
 80027d8:	f00d fdac 	bl	8010334 <MX_FATFS_Init>
}
 80027dc:	bf00      	nop
 80027de:	bd80      	pop	{r7, pc}

080027e0 <MRT_waitForLaunch>:

void MRT_waitForLaunch(void){
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b0c2      	sub	sp, #264	; 0x108
 80027e4:	af00      	add	r7, sp, #0

	println("Waiting for launch command from ground station\r\n");
 80027e6:	482e      	ldr	r0, [pc, #184]	; (80028a0 <MRT_waitForLaunch+0xc0>)
 80027e8:	f7fe fc70 	bl	80010cc <println>

	//TODO for testing (saved in wd thread)
	hlps22hh.getPressure();
 80027ec:	4b2d      	ldr	r3, [pc, #180]	; (80028a4 <MRT_waitForLaunch+0xc4>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	4798      	blx	r3
	rtc_bckp_reg_alt_pad = MRT_getAltitude(hlps22hh.pressure_hPa);
 80027f2:	4b2c      	ldr	r3, [pc, #176]	; (80028a4 <MRT_waitForLaunch+0xc4>)
 80027f4:	edd3 7a00 	vldr	s15, [r3]
 80027f8:	eeb0 0a67 	vmov.f32	s0, s15
 80027fc:	f000 ffe4 	bl	80037c8 <MRT_getAltitude>
 8002800:	eef0 7a40 	vmov.f32	s15, s0
 8002804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002808:	ee17 2a90 	vmov	r2, s15
 800280c:	4b26      	ldr	r3, [pc, #152]	; (80028a8 <MRT_waitForLaunch+0xc8>)
 800280e:	601a      	str	r2, [r3, #0]
	MRT_RTC_setBackupReg(FC_STATE_ALT_PAD, rtc_bckp_reg_alt_pad);
 8002810:	4b25      	ldr	r3, [pc, #148]	; (80028a8 <MRT_waitForLaunch+0xc8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4619      	mov	r1, r3
 8002816:	2009      	movs	r0, #9
 8002818:	f000 fb3c 	bl	8002e94 <MRT_RTC_setBackupReg>

	char radio_buffer[RADIO_BUFFER_SIZE];
	radio_command cmd = -1;
 800281c:	23ff      	movs	r3, #255	; 0xff
 800281e:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

	//Poll propulsion until launch command sent
	while((XTEND_ || SRADIO_) && ejection_stage_flag == PAD && wu_flag == 0){
 8002822:	bf00      	nop
	}


	//TODO testing time (saved in watchdog thread
	 //Get RTC time
	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002824:	2200      	movs	r2, #0
 8002826:	4921      	ldr	r1, [pc, #132]	; (80028ac <MRT_waitForLaunch+0xcc>)
 8002828:	4821      	ldr	r0, [pc, #132]	; (80028b0 <MRT_waitForLaunch+0xd0>)
 800282a:	f00a feb7 	bl	800d59c <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800282e:	2200      	movs	r2, #0
 8002830:	4920      	ldr	r1, [pc, #128]	; (80028b4 <MRT_waitForLaunch+0xd4>)
 8002832:	481f      	ldr	r0, [pc, #124]	; (80028b0 <MRT_waitForLaunch+0xd0>)
 8002834:	f00a ffb7 	bl	800d7a6 <HAL_RTC_GetDate>
	 prev_min = sTime.Minutes;
 8002838:	4b1c      	ldr	r3, [pc, #112]	; (80028ac <MRT_waitForLaunch+0xcc>)
 800283a:	785a      	ldrb	r2, [r3, #1]
 800283c:	4b1e      	ldr	r3, [pc, #120]	; (80028b8 <MRT_waitForLaunch+0xd8>)
 800283e:	701a      	strb	r2, [r3, #0]
	 prev_sec = sTime.Seconds;
 8002840:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <MRT_waitForLaunch+0xcc>)
 8002842:	789a      	ldrb	r2, [r3, #2]
 8002844:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <MRT_waitForLaunch+0xdc>)
 8002846:	701a      	strb	r2, [r3, #0]
	 if (__HAL_RTC_SHIFT_GET_FLAG(&hrtc, RTC_FLAG_SHPF)) prev_sec++; //Adjust following the user manual
 8002848:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <MRT_waitForLaunch+0xd0>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d005      	beq.n	8002862 <MRT_waitForLaunch+0x82>
 8002856:	4b19      	ldr	r3, [pc, #100]	; (80028bc <MRT_waitForLaunch+0xdc>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	3301      	adds	r3, #1
 800285c:	b2da      	uxtb	r2, r3
 800285e:	4b17      	ldr	r3, [pc, #92]	; (80028bc <MRT_waitForLaunch+0xdc>)
 8002860:	701a      	strb	r2, [r3, #0]
	 prev_subsec = sTime.SubSeconds;
 8002862:	4b12      	ldr	r3, [pc, #72]	; (80028ac <MRT_waitForLaunch+0xcc>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	4a16      	ldr	r2, [pc, #88]	; (80028c0 <MRT_waitForLaunch+0xe0>)
 8002868:	6013      	str	r3, [r2, #0]
	 rtc_bckp_reg_pad_time = 100*prev_min + prev_sec;
 800286a:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <MRT_waitForLaunch+0xd8>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	461a      	mov	r2, r3
 8002870:	2364      	movs	r3, #100	; 0x64
 8002872:	fb03 f302 	mul.w	r3, r3, r2
 8002876:	4a11      	ldr	r2, [pc, #68]	; (80028bc <MRT_waitForLaunch+0xdc>)
 8002878:	7812      	ldrb	r2, [r2, #0]
 800287a:	4413      	add	r3, r2
 800287c:	461a      	mov	r2, r3
 800287e:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <MRT_waitForLaunch+0xe4>)
 8002880:	601a      	str	r2, [r3, #0]
	 MRT_RTC_setBackupReg(FC_PAD_TIME, rtc_bckp_reg_pad_time);
 8002882:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <MRT_waitForLaunch+0xe4>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4619      	mov	r1, r3
 8002888:	200a      	movs	r0, #10
 800288a:	f000 fb03 	bl	8002e94 <MRT_RTC_setBackupReg>


	//Send acknowledgement
	MRT_radio_tx((char*) "LAUNCH COMMAND RECEIVED"); //TODO CHECK AT WHAT JASPER DID
 800288e:	480e      	ldr	r0, [pc, #56]	; (80028c8 <MRT_waitForLaunch+0xe8>)
 8002890:	f007 fe16 	bl	800a4c0 <MRT_radio_tx>
}
 8002894:	bf00      	nop
 8002896:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	0801aa04 	.word	0x0801aa04
 80028a4:	20000420 	.word	0x20000420
 80028a8:	2000039c 	.word	0x2000039c
 80028ac:	20000338 	.word	0x20000338
 80028b0:	20005c08 	.word	0x20005c08
 80028b4:	2000034c 	.word	0x2000034c
 80028b8:	200003de 	.word	0x200003de
 80028bc:	200003df 	.word	0x200003df
 80028c0:	200003e0 	.word	0x200003e0
 80028c4:	200003a0 	.word	0x200003a0
 80028c8:	0801aa38 	.word	0x0801aa38

080028cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a04      	ldr	r2, [pc, #16]	; (80028ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d101      	bne.n	80028e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80028de:	f007 fe51 	bl	800a584 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40001000 	.word	0x40001000

080028f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80028f4:	b672      	cpsid	i
}
 80028f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028f8:	e7fe      	b.n	80028f8 <Error_Handler+0x8>
	...

080028fc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b090      	sub	sp, #64	; 0x40
 8002900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002902:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	605a      	str	r2, [r3, #4]
 800290c:	609a      	str	r2, [r3, #8]
 800290e:	60da      	str	r2, [r3, #12]
 8002910:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002912:	2300      	movs	r3, #0
 8002914:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8002916:	463b      	mov	r3, r7
 8002918:	2228      	movs	r2, #40	; 0x28
 800291a:	2100      	movs	r1, #0
 800291c:	4618      	mov	r0, r3
 800291e:	f012 f813 	bl	8014948 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002922:	4b3a      	ldr	r3, [pc, #232]	; (8002a0c <MX_RTC_Init+0x110>)
 8002924:	4a3a      	ldr	r2, [pc, #232]	; (8002a10 <MX_RTC_Init+0x114>)
 8002926:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002928:	4b38      	ldr	r3, [pc, #224]	; (8002a0c <MX_RTC_Init+0x110>)
 800292a:	2200      	movs	r2, #0
 800292c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800292e:	4b37      	ldr	r3, [pc, #220]	; (8002a0c <MX_RTC_Init+0x110>)
 8002930:	227f      	movs	r2, #127	; 0x7f
 8002932:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002934:	4b35      	ldr	r3, [pc, #212]	; (8002a0c <MX_RTC_Init+0x110>)
 8002936:	22ff      	movs	r2, #255	; 0xff
 8002938:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800293a:	4b34      	ldr	r3, [pc, #208]	; (8002a0c <MX_RTC_Init+0x110>)
 800293c:	2200      	movs	r2, #0
 800293e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002940:	4b32      	ldr	r3, [pc, #200]	; (8002a0c <MX_RTC_Init+0x110>)
 8002942:	2200      	movs	r2, #0
 8002944:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002946:	4b31      	ldr	r3, [pc, #196]	; (8002a0c <MX_RTC_Init+0x110>)
 8002948:	2200      	movs	r2, #0
 800294a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800294c:	482f      	ldr	r0, [pc, #188]	; (8002a0c <MX_RTC_Init+0x110>)
 800294e:	f00a fcd7 	bl	800d300 <HAL_RTC_Init>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002958:	f7ff ffca 	bl	80028f0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800295c:	2300      	movs	r3, #0
 800295e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8002962:	2300      	movs	r3, #0
 8002964:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8002968:	2300      	movs	r3, #0
 800296a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800296e:	2300      	movs	r3, #0
 8002970:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002972:	2300      	movs	r3, #0
 8002974:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002976:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800297a:	2201      	movs	r2, #1
 800297c:	4619      	mov	r1, r3
 800297e:	4823      	ldr	r0, [pc, #140]	; (8002a0c <MX_RTC_Init+0x110>)
 8002980:	f00a fd4f 	bl	800d422 <HAL_RTC_SetTime>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800298a:	f7ff ffb1 	bl	80028f0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800298e:	2301      	movs	r3, #1
 8002990:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002994:	2301      	movs	r3, #1
 8002996:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 800299a:	2301      	movs	r3, #1
 800299c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80029a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029aa:	2201      	movs	r2, #1
 80029ac:	4619      	mov	r1, r3
 80029ae:	4817      	ldr	r0, [pc, #92]	; (8002a0c <MX_RTC_Init+0x110>)
 80029b0:	f00a fe52 	bl	800d658 <HAL_RTC_SetDate>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80029ba:	f7ff ff99 	bl	80028f0 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80029be:	2300      	movs	r3, #0
 80029c0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 80029c2:	2301      	movs	r3, #1
 80029c4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80029da:	2300      	movs	r3, #0
 80029dc:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80029de:	2300      	movs	r3, #0
 80029e0:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80029e2:	2301      	movs	r3, #1
 80029e4:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80029e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80029ee:	463b      	mov	r3, r7
 80029f0:	2201      	movs	r2, #1
 80029f2:	4619      	mov	r1, r3
 80029f4:	4805      	ldr	r0, [pc, #20]	; (8002a0c <MX_RTC_Init+0x110>)
 80029f6:	f00a ff25 	bl	800d844 <HAL_RTC_SetAlarm_IT>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002a00:	f7ff ff76 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002a04:	bf00      	nop
 8002a06:	3740      	adds	r7, #64	; 0x40
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20005c08 	.word	0x20005c08
 8002a10:	40002800 	.word	0x40002800

08002a14 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08e      	sub	sp, #56	; 0x38
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a1c:	f107 0308 	add.w	r3, r7, #8
 8002a20:	2230      	movs	r2, #48	; 0x30
 8002a22:	2100      	movs	r1, #0
 8002a24:	4618      	mov	r0, r3
 8002a26:	f011 ff8f 	bl	8014948 <memset>
  if(rtcHandle->Instance==RTC)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a10      	ldr	r2, [pc, #64]	; (8002a70 <HAL_RTC_MspInit+0x5c>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d119      	bne.n	8002a68 <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002a34:	2320      	movs	r3, #32
 8002a36:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002a38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a3c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a3e:	f107 0308 	add.w	r3, r7, #8
 8002a42:	4618      	mov	r0, r3
 8002a44:	f00a fa9e 	bl	800cf84 <HAL_RCCEx_PeriphCLKConfig>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002a4e:	f7ff ff4f 	bl	80028f0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a52:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <HAL_RTC_MspInit+0x60>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8002a58:	2200      	movs	r2, #0
 8002a5a:	2105      	movs	r1, #5
 8002a5c:	2029      	movs	r0, #41	; 0x29
 8002a5e:	f008 fac1 	bl	800afe4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002a62:	2029      	movs	r0, #41	; 0x29
 8002a64:	f008 fada 	bl	800b01c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002a68:	bf00      	nop
 8002a6a:	3738      	adds	r7, #56	; 0x38
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40002800 	.word	0x40002800
 8002a74:	42470e3c 	.word	0x42470e3c

08002a78 <MRT_rtc_Init>:


//**************************************************//
//FUNCTIONS

void MRT_rtc_Init(void){
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
	println("\r\nMRT RTC Init");
 8002a7c:	4816      	ldr	r0, [pc, #88]	; (8002ad8 <MRT_rtc_Init+0x60>)
 8002a7e:	f7fe fb25 	bl	80010cc <println>

	print("\tSetting RTC to previous time...");
 8002a82:	4816      	ldr	r0, [pc, #88]	; (8002adc <MRT_rtc_Init+0x64>)
 8002a84:	f7fe fb40 	bl	8001108 <print>
	MRT_set_rtc(prev_hour,prev_min,prev_sec);
 8002a88:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <MRT_rtc_Init+0x68>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	4a15      	ldr	r2, [pc, #84]	; (8002ae4 <MRT_rtc_Init+0x6c>)
 8002a8e:	7811      	ldrb	r1, [r2, #0]
 8002a90:	4a15      	ldr	r2, [pc, #84]	; (8002ae8 <MRT_rtc_Init+0x70>)
 8002a92:	7812      	ldrb	r2, [r2, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 f8c3 	bl	8002c20 <MRT_set_rtc>
	println("OK");
 8002a9a:	4814      	ldr	r0, [pc, #80]	; (8002aec <MRT_rtc_Init+0x74>)
 8002a9c:	f7fe fb16 	bl	80010cc <println>

	#if ALARM_A_ACTIVE
		print("\tSetting alarmA...");
 8002aa0:	4813      	ldr	r0, [pc, #76]	; (8002af0 <MRT_rtc_Init+0x78>)
 8002aa2:	f7fe fb31 	bl	8001108 <print>
		HAL_Delay(2000); //To make sure that when you set the Alarm it doesn't go off automatically
 8002aa6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002aaa:	f007 fd8b 	bl	800a5c4 <HAL_Delay>
		if (wu_flag == 0){
 8002aae:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <MRT_rtc_Init+0x7c>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d105      	bne.n	8002ac2 <MRT_rtc_Init+0x4a>
			MRT_set_alarmA(PRE_WHEN_SLEEP_TIME_HOURS, PRE_WHEN_SLEEP_TIME_MIN, PRE_WHEN_SLEEP_TIME_SEC);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	211e      	movs	r1, #30
 8002aba:	2004      	movs	r0, #4
 8002abc:	f000 f8f6 	bl	8002cac <MRT_set_alarmA>
 8002ac0:	e004      	b.n	8002acc <MRT_rtc_Init+0x54>
		}
		else{
			MRT_set_alarmA(POST_WHEN_SLEEP_TIME_HOURS, POST_WHEN_SLEEP_TIME_MIN, POST_WHEN_SLEEP_TIME_SEC);
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	200e      	movs	r0, #14
 8002ac8:	f000 f8f0 	bl	8002cac <MRT_set_alarmA>
		}
		println("OK");
 8002acc:	4807      	ldr	r0, [pc, #28]	; (8002aec <MRT_rtc_Init+0x74>)
 8002ace:	f7fe fafd 	bl	80010cc <println>
	#endif
}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	0801aa50 	.word	0x0801aa50
 8002adc:	0801aa60 	.word	0x0801aa60
 8002ae0:	200003dd 	.word	0x200003dd
 8002ae4:	200003de 	.word	0x200003de
 8002ae8:	200003df 	.word	0x200003df
 8002aec:	0801aa84 	.word	0x0801aa84
 8002af0:	0801aa88 	.word	0x0801aa88
 8002af4:	200003d9 	.word	0x200003d9

08002af8 <MRT_clear_alarms_flags>:



void MRT_clear_alarms_flags(void){
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	print("Clearing the flags\r\n");
 8002afc:	482a      	ldr	r0, [pc, #168]	; (8002ba8 <MRT_clear_alarms_flags+0xb0>)
 8002afe:	f7fe fb03 	bl	8001108 <print>

	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002b02:	4b2a      	ldr	r3, [pc, #168]	; (8002bac <MRT_clear_alarms_flags+0xb4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	22ca      	movs	r2, #202	; 0xca
 8002b08:	625a      	str	r2, [r3, #36]	; 0x24
 8002b0a:	4b28      	ldr	r3, [pc, #160]	; (8002bac <MRT_clear_alarms_flags+0xb4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2253      	movs	r2, #83	; 0x53
 8002b10:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8002b12:	e008      	b.n	8002b26 <MRT_clear_alarms_flags+0x2e>
		//print("Clearing alarm A flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002b14:	4b25      	ldr	r3, [pc, #148]	; (8002bac <MRT_clear_alarms_flags+0xb4>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	4b23      	ldr	r3, [pc, #140]	; (8002bac <MRT_clear_alarms_flags+0xb4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002b24:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8002b26:	4b21      	ldr	r3, [pc, #132]	; (8002bac <MRT_clear_alarms_flags+0xb4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1ef      	bne.n	8002b14 <MRT_clear_alarms_flags+0x1c>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002b34:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <MRT_clear_alarms_flags+0xb4>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	22ff      	movs	r2, #255	; 0xff
 8002b3a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002b3c:	4b1c      	ldr	r3, [pc, #112]	; (8002bb0 <MRT_clear_alarms_flags+0xb8>)
 8002b3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b42:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002b44:	4b19      	ldr	r3, [pc, #100]	; (8002bac <MRT_clear_alarms_flags+0xb4>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	22ca      	movs	r2, #202	; 0xca
 8002b4a:	625a      	str	r2, [r3, #36]	; 0x24
 8002b4c:	4b17      	ldr	r3, [pc, #92]	; (8002bac <MRT_clear_alarms_flags+0xb4>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2253      	movs	r2, #83	; 0x53
 8002b52:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8002b54:	e008      	b.n	8002b68 <MRT_clear_alarms_flags+0x70>
		//print("Clearing alarm B flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 8002b56:	4b15      	ldr	r3, [pc, #84]	; (8002bac <MRT_clear_alarms_flags+0xb4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	4b13      	ldr	r3, [pc, #76]	; (8002bac <MRT_clear_alarms_flags+0xb4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002b66:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8002b68:	4b10      	ldr	r3, [pc, #64]	; (8002bac <MRT_clear_alarms_flags+0xb4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1ef      	bne.n	8002b56 <MRT_clear_alarms_flags+0x5e>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002b76:	4b0d      	ldr	r3, [pc, #52]	; (8002bac <MRT_clear_alarms_flags+0xb4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	22ff      	movs	r2, #255	; 0xff
 8002b7c:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002b7e:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <MRT_clear_alarms_flags+0xb8>)
 8002b80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b84:	615a      	str	r2, [r3, #20]

	/* Clear the WU FLAG */
	//print("Clearing wake up flag\r\n");
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8002b86:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <MRT_clear_alarms_flags+0xbc>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <MRT_clear_alarms_flags+0xbc>)
 8002b8c:	f043 0304 	orr.w	r3, r3, #4
 8002b90:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//print("Clearing RTC wake up flag\r\n");
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8002b92:	4b06      	ldr	r3, [pc, #24]	; (8002bac <MRT_clear_alarms_flags+0xb4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	4b04      	ldr	r3, [pc, #16]	; (8002bac <MRT_clear_alarms_flags+0xb4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002ba2:	60da      	str	r2, [r3, #12]
}
 8002ba4:	bf00      	nop
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	0801aa9c 	.word	0x0801aa9c
 8002bac:	20005c08 	.word	0x20005c08
 8002bb0:	40013c00 	.word	0x40013c00
 8002bb4:	40007000 	.word	0x40007000

08002bb8 <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode(uint32_t seconds){
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08c      	sub	sp, #48	; 0x30
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
	print("\r\n/*****StandByMode*****/\r\n");
 8002bc0:	4813      	ldr	r0, [pc, #76]	; (8002c10 <MRT_StandByMode+0x58>)
 8002bc2:	f7fe faa1 	bl	8001108 <print>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8002bc6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002bca:	f009 fca9 	bl	800c520 <HAL_PWR_EnableWakeUpPin>

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_clear_alarms_flags();
 8002bce:	f7ff ff93 	bl	8002af8 <MRT_clear_alarms_flags>

	//Setup RTC wake up timer
	println("Setting up RTCW");
 8002bd2:	4810      	ldr	r0, [pc, #64]	; (8002c14 <MRT_StandByMode+0x5c>)
 8002bd4:	f7fe fa7a 	bl	80010cc <println>
	  Error_Handler();
	}
	*/

	char msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds",(int) seconds);
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	f107 030c 	add.w	r3, r7, #12
 8002bde:	490e      	ldr	r1, [pc, #56]	; (8002c18 <MRT_StandByMode+0x60>)
 8002be0:	4618      	mov	r0, r3
 8002be2:	f013 f9ad 	bl	8015f40 <siprintf>
	println(msg);
 8002be6:	f107 030c 	add.w	r3, r7, #12
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fe fa6e 	bl	80010cc <println>

	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8002bf0:	2204      	movs	r2, #4
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4809      	ldr	r0, [pc, #36]	; (8002c1c <MRT_StandByMode+0x64>)
 8002bf6:	f00b f83d 	bl	800dc74 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <MRT_StandByMode+0x4c>
	{
	  Error_Handler();
 8002c00:	f7ff fe76 	bl	80028f0 <Error_Handler>
	}

	HAL_PWR_EnterSTANDBYMode();
 8002c04:	f009 fcb2 	bl	800c56c <HAL_PWR_EnterSTANDBYMode>
}
 8002c08:	bf00      	nop
 8002c0a:	3730      	adds	r7, #48	; 0x30
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	0801aab4 	.word	0x0801aab4
 8002c14:	0801aad0 	.word	0x0801aad0
 8002c18:	0801aae0 	.word	0x0801aae0
 8002c1c:	20005c08 	.word	0x20005c08

08002c20 <MRT_set_rtc>:




void MRT_set_rtc(uint8_t h, uint8_t m, uint8_t s){
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	71fb      	strb	r3, [r7, #7]
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	71bb      	strb	r3, [r7, #6]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	717b      	strb	r3, [r7, #5]
	  /** Initialize RTC and set the Time and Date
	  */
	  RTC_TimeTypeDef sTime;

	  sTime.Hours = int_to_hex_table[h];
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	4a1a      	ldr	r2, [pc, #104]	; (8002ca0 <MRT_set_rtc+0x80>)
 8002c36:	5cd3      	ldrb	r3, [r2, r3]
 8002c38:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = int_to_hex_table[m];
 8002c3a:	79bb      	ldrb	r3, [r7, #6]
 8002c3c:	4a18      	ldr	r2, [pc, #96]	; (8002ca0 <MRT_set_rtc+0x80>)
 8002c3e:	5cd3      	ldrb	r3, [r2, r3]
 8002c40:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = int_to_hex_table[s];
 8002c42:	797b      	ldrb	r3, [r7, #5]
 8002c44:	4a16      	ldr	r2, [pc, #88]	; (8002ca0 <MRT_set_rtc+0x80>)
 8002c46:	5cd3      	ldrb	r3, [r2, r3]
 8002c48:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002c52:	f107 030c 	add.w	r3, r7, #12
 8002c56:	2201      	movs	r2, #1
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4812      	ldr	r0, [pc, #72]	; (8002ca4 <MRT_set_rtc+0x84>)
 8002c5c:	f00a fbe1 	bl	800d422 <HAL_RTC_SetTime>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <MRT_set_rtc+0x4a>
	  {
	    Error_Handler();
 8002c66:	f7ff fe43 	bl	80028f0 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002c6a:	4b0f      	ldr	r3, [pc, #60]	; (8002ca8 <MRT_set_rtc+0x88>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 8002c70:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <MRT_set_rtc+0x88>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 8002c76:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <MRT_set_rtc+0x88>)
 8002c78:	2201      	movs	r2, #1
 8002c7a:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 8002c7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <MRT_set_rtc+0x88>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002c82:	2201      	movs	r2, #1
 8002c84:	4908      	ldr	r1, [pc, #32]	; (8002ca8 <MRT_set_rtc+0x88>)
 8002c86:	4807      	ldr	r0, [pc, #28]	; (8002ca4 <MRT_set_rtc+0x84>)
 8002c88:	f00a fce6 	bl	800d658 <HAL_RTC_SetDate>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <MRT_set_rtc+0x76>
	  {
	    Error_Handler();
 8002c92:	f7ff fe2d 	bl	80028f0 <Error_Handler>
	  }
}
 8002c96:	bf00      	nop
 8002c98:	3720      	adds	r7, #32
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	2000004c 	.word	0x2000004c
 8002ca4:	20005c08 	.word	0x20005c08
 8002ca8:	2000034c 	.word	0x2000034c

08002cac <MRT_set_alarmA>:



void MRT_set_alarmA(uint8_t h, uint8_t m, uint8_t s){
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	71fb      	strb	r3, [r7, #7]
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	71bb      	strb	r3, [r7, #6]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	4a1a      	ldr	r2, [pc, #104]	; (8002d2c <MRT_set_alarmA+0x80>)
 8002cc2:	5cd2      	ldrb	r2, [r2, r3]
 8002cc4:	4b1a      	ldr	r3, [pc, #104]	; (8002d30 <MRT_set_alarmA+0x84>)
 8002cc6:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 8002cc8:	79bb      	ldrb	r3, [r7, #6]
 8002cca:	4a18      	ldr	r2, [pc, #96]	; (8002d2c <MRT_set_alarmA+0x80>)
 8002ccc:	5cd2      	ldrb	r2, [r2, r3]
 8002cce:	4b18      	ldr	r3, [pc, #96]	; (8002d30 <MRT_set_alarmA+0x84>)
 8002cd0:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 8002cd2:	797b      	ldrb	r3, [r7, #5]
 8002cd4:	4a15      	ldr	r2, [pc, #84]	; (8002d2c <MRT_set_alarmA+0x80>)
 8002cd6:	5cd2      	ldrb	r2, [r2, r3]
 8002cd8:	4b15      	ldr	r3, [pc, #84]	; (8002d30 <MRT_set_alarmA+0x84>)
 8002cda:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002cdc:	4b14      	ldr	r3, [pc, #80]	; (8002d30 <MRT_set_alarmA+0x84>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002ce2:	4b13      	ldr	r3, [pc, #76]	; (8002d30 <MRT_set_alarmA+0x84>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002ce8:	4b11      	ldr	r3, [pc, #68]	; (8002d30 <MRT_set_alarmA+0x84>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002cee:	4b10      	ldr	r3, [pc, #64]	; (8002d30 <MRT_set_alarmA+0x84>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002cf4:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <MRT_set_alarmA+0x84>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002cfa:	4b0d      	ldr	r3, [pc, #52]	; (8002d30 <MRT_set_alarmA+0x84>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <MRT_set_alarmA+0x84>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 8002d08:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <MRT_set_alarmA+0x84>)
 8002d0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d0e:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002d10:	2201      	movs	r2, #1
 8002d12:	4907      	ldr	r1, [pc, #28]	; (8002d30 <MRT_set_alarmA+0x84>)
 8002d14:	4807      	ldr	r0, [pc, #28]	; (8002d34 <MRT_set_alarmA+0x88>)
 8002d16:	f00a fd95 	bl	800d844 <HAL_RTC_SetAlarm_IT>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <MRT_set_alarmA+0x78>
	  {
	    Error_Handler();
 8002d20:	f7ff fde6 	bl	80028f0 <Error_Handler>
	  }
}
 8002d24:	bf00      	nop
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	2000004c 	.word	0x2000004c
 8002d30:	20000350 	.word	0x20000350
 8002d34:	20005c08 	.word	0x20005c08

08002d38 <MRT_RTC_backup_regs_Init>:
							  &rtc_bckp_reg_alt_apogee, &rtc_bckp_reg_apogee_time, &rtc_bckp_reg_alt_main, &rtc_bckp_reg_main_time,
							  &rtc_bckp_reg_alt_landed, &rtc_bckp_reg_landed_time};


//Get all the backup regs values (initialization)
void MRT_RTC_backup_regs_Init(void){
 8002d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d3a:	b0cf      	sub	sp, #316	; 0x13c
 8002d3c:	af08      	add	r7, sp, #32
	for (int i = 0; i < NB_RTC_BCKP_REGS; i++){
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002d44:	e011      	b.n	8002d6a <MRT_RTC_backup_regs_Init+0x32>
		*rtc_bckp_regs[i] = MRT_RTC_getBackupReg(i);
 8002d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	4924      	ldr	r1, [pc, #144]	; (8002de0 <MRT_RTC_backup_regs_Init+0xa8>)
 8002d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d52:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8002d56:	4610      	mov	r0, r2
 8002d58:	f000 f87e 	bl	8002e58 <MRT_RTC_getBackupReg>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < NB_RTC_BCKP_REGS; i++){
 8002d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d64:	3301      	adds	r3, #1
 8002d66:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d6e:	2b12      	cmp	r3, #18
 8002d70:	dde9      	ble.n	8002d46 <MRT_RTC_backup_regs_Init+0xe>
	}

	//TODO TESTING
	char buffer[256];
	sprintf(buffer, "ALTITUDES:\r\n\tGround: %i \tTime: %i"
 8002d72:	4b1c      	ldr	r3, [pc, #112]	; (8002de4 <MRT_RTC_backup_regs_Init+0xac>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <MRT_RTC_backup_regs_Init+0xb0>)
 8002d7a:	6819      	ldr	r1, [r3, #0]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	4b1b      	ldr	r3, [pc, #108]	; (8002dec <MRT_RTC_backup_regs_Init+0xb4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a1b      	ldr	r2, [pc, #108]	; (8002df0 <MRT_RTC_backup_regs_Init+0xb8>)
 8002d84:	6812      	ldr	r2, [r2, #0]
 8002d86:	491b      	ldr	r1, [pc, #108]	; (8002df4 <MRT_RTC_backup_regs_Init+0xbc>)
 8002d88:	6809      	ldr	r1, [r1, #0]
 8002d8a:	481b      	ldr	r0, [pc, #108]	; (8002df8 <MRT_RTC_backup_regs_Init+0xc0>)
 8002d8c:	6800      	ldr	r0, [r0, #0]
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	4c1a      	ldr	r4, [pc, #104]	; (8002dfc <MRT_RTC_backup_regs_Init+0xc4>)
 8002d92:	6824      	ldr	r4, [r4, #0]
 8002d94:	4d1a      	ldr	r5, [pc, #104]	; (8002e00 <MRT_RTC_backup_regs_Init+0xc8>)
 8002d96:	682d      	ldr	r5, [r5, #0]
 8002d98:	4e1a      	ldr	r6, [pc, #104]	; (8002e04 <MRT_RTC_backup_regs_Init+0xcc>)
 8002d9a:	6836      	ldr	r6, [r6, #0]
 8002d9c:	481a      	ldr	r0, [pc, #104]	; (8002e08 <MRT_RTC_backup_regs_Init+0xd0>)
 8002d9e:	6800      	ldr	r0, [r0, #0]
 8002da0:	f107 0c14 	add.w	ip, r7, #20
 8002da4:	9007      	str	r0, [sp, #28]
 8002da6:	9606      	str	r6, [sp, #24]
 8002da8:	9505      	str	r5, [sp, #20]
 8002daa:	9404      	str	r4, [sp, #16]
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	9003      	str	r0, [sp, #12]
 8002db0:	9102      	str	r1, [sp, #8]
 8002db2:	9201      	str	r2, [sp, #4]
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	4914      	ldr	r1, [pc, #80]	; (8002e0c <MRT_RTC_backup_regs_Init+0xd4>)
 8002dbc:	4660      	mov	r0, ip
 8002dbe:	f013 f8bf 	bl	8015f40 <siprintf>
					"\r\n\tMain: %i \tTime: %i"
					"\r\n\tLanded: %i \tTime: %i\r\n",
			rtc_bckp_reg_alt_pad, rtc_bckp_reg_pad_time,  rtc_bckp_reg_alt_true_apogee, rtc_bckp_reg_true_apogee_time,
			rtc_bckp_reg_alt_apogee, rtc_bckp_reg_apogee_time, rtc_bckp_reg_alt_main, rtc_bckp_reg_main_time,
			rtc_bckp_reg_alt_landed, rtc_bckp_reg_landed_time);
	print(buffer);
 8002dc2:	f107 0314 	add.w	r3, r7, #20
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fe f99e 	bl	8001108 <print>

	HAL_Delay(20000);
 8002dcc:	f644 6020 	movw	r0, #20000	; 0x4e20
 8002dd0:	f007 fbf8 	bl	800a5c4 <HAL_Delay>
}
 8002dd4:	bf00      	nop
 8002dd6:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20000000 	.word	0x20000000
 8002de4:	2000039c 	.word	0x2000039c
 8002de8:	200003a0 	.word	0x200003a0
 8002dec:	200003a4 	.word	0x200003a4
 8002df0:	200003a8 	.word	0x200003a8
 8002df4:	200003ac 	.word	0x200003ac
 8002df8:	200003b0 	.word	0x200003b0
 8002dfc:	200003b4 	.word	0x200003b4
 8002e00:	200003b8 	.word	0x200003b8
 8002e04:	200003bc 	.word	0x200003bc
 8002e08:	200003c0 	.word	0x200003c0
 8002e0c:	0801ab00 	.word	0x0801ab00

08002e10 <MRT_RTC_clearBackupRegs>:

// initializes backup register values to zero
void MRT_RTC_clearBackupRegs(void) {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002e16:	4b0f      	ldr	r3, [pc, #60]	; (8002e54 <MRT_RTC_clearBackupRegs+0x44>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	22ca      	movs	r2, #202	; 0xca
 8002e1c:	625a      	str	r2, [r3, #36]	; 0x24
 8002e1e:	4b0d      	ldr	r3, [pc, #52]	; (8002e54 <MRT_RTC_clearBackupRegs+0x44>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2253      	movs	r2, #83	; 0x53
 8002e24:	625a      	str	r2, [r3, #36]	; 0x24
	for (uint8_t i = 0; i < 20; i++) {
 8002e26:	2300      	movs	r3, #0
 8002e28:	71fb      	strb	r3, [r7, #7]
 8002e2a:	e008      	b.n	8002e3e <MRT_RTC_clearBackupRegs+0x2e>
		HAL_RTCEx_BKUPWrite(&hrtc, i, 0);	// set all backup register values to zero
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	4619      	mov	r1, r3
 8002e32:	4808      	ldr	r0, [pc, #32]	; (8002e54 <MRT_RTC_clearBackupRegs+0x44>)
 8002e34:	f00b f836 	bl	800dea4 <HAL_RTCEx_BKUPWrite>
	for (uint8_t i = 0; i < 20; i++) {
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	71fb      	strb	r3, [r7, #7]
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	2b13      	cmp	r3, #19
 8002e42:	d9f3      	bls.n	8002e2c <MRT_RTC_clearBackupRegs+0x1c>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002e44:	4b03      	ldr	r3, [pc, #12]	; (8002e54 <MRT_RTC_clearBackupRegs+0x44>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	22ff      	movs	r2, #255	; 0xff
 8002e4a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002e4c:	bf00      	nop
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20005c08 	.word	0x20005c08

08002e58 <MRT_RTC_getBackupReg>:

// gets the backup register value for the specified state
uint32_t MRT_RTC_getBackupReg(rtc_backup_reg state) {
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	71fb      	strb	r3, [r7, #7]
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002e62:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <MRT_RTC_getBackupReg+0x38>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	22ca      	movs	r2, #202	; 0xca
 8002e68:	625a      	str	r2, [r3, #36]	; 0x24
 8002e6a:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <MRT_RTC_getBackupReg+0x38>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2253      	movs	r2, #83	; 0x53
 8002e70:	625a      	str	r2, [r3, #36]	; 0x24
	uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, (uint32_t) state);
 8002e72:	79fb      	ldrb	r3, [r7, #7]
 8002e74:	4619      	mov	r1, r3
 8002e76:	4806      	ldr	r0, [pc, #24]	; (8002e90 <MRT_RTC_getBackupReg+0x38>)
 8002e78:	f00b f82e 	bl	800ded8 <HAL_RTCEx_BKUPRead>
 8002e7c:	60f8      	str	r0, [r7, #12]
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002e7e:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <MRT_RTC_getBackupReg+0x38>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	22ff      	movs	r2, #255	; 0xff
 8002e84:	625a      	str	r2, [r3, #36]	; 0x24
	return val;
 8002e86:	68fb      	ldr	r3, [r7, #12]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20005c08 	.word	0x20005c08

08002e94 <MRT_RTC_setBackupReg>:

// sets the backup register value for the specified state
void MRT_RTC_setBackupReg(rtc_backup_reg state, uint32_t value) {
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	6039      	str	r1, [r7, #0]
 8002e9e:	71fb      	strb	r3, [r7, #7]
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002ea0:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <MRT_RTC_setBackupReg+0x38>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	22ca      	movs	r2, #202	; 0xca
 8002ea6:	625a      	str	r2, [r3, #36]	; 0x24
 8002ea8:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <MRT_RTC_setBackupReg+0x38>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2253      	movs	r2, #83	; 0x53
 8002eae:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RTCEx_BKUPWrite(&hrtc, (uint32_t) state, value);
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4805      	ldr	r0, [pc, #20]	; (8002ecc <MRT_RTC_setBackupReg+0x38>)
 8002eb8:	f00a fff4 	bl	800dea4 <HAL_RTCEx_BKUPWrite>
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002ebc:	4b03      	ldr	r3, [pc, #12]	; (8002ecc <MRT_RTC_setBackupReg+0x38>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	22ff      	movs	r2, #255	; 0xff
 8002ec2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002ec4:	bf00      	nop
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	20005c08 	.word	0x20005c08

08002ed0 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002ed4:	4b17      	ldr	r3, [pc, #92]	; (8002f34 <MX_SPI2_Init+0x64>)
 8002ed6:	4a18      	ldr	r2, [pc, #96]	; (8002f38 <MX_SPI2_Init+0x68>)
 8002ed8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002eda:	4b16      	ldr	r3, [pc, #88]	; (8002f34 <MX_SPI2_Init+0x64>)
 8002edc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ee0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002ee2:	4b14      	ldr	r3, [pc, #80]	; (8002f34 <MX_SPI2_Init+0x64>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ee8:	4b12      	ldr	r3, [pc, #72]	; (8002f34 <MX_SPI2_Init+0x64>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002eee:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <MX_SPI2_Init+0x64>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ef4:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <MX_SPI2_Init+0x64>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002efa:	4b0e      	ldr	r3, [pc, #56]	; (8002f34 <MX_SPI2_Init+0x64>)
 8002efc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f00:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f02:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <MX_SPI2_Init+0x64>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f08:	4b0a      	ldr	r3, [pc, #40]	; (8002f34 <MX_SPI2_Init+0x64>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f0e:	4b09      	ldr	r3, [pc, #36]	; (8002f34 <MX_SPI2_Init+0x64>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f14:	4b07      	ldr	r3, [pc, #28]	; (8002f34 <MX_SPI2_Init+0x64>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002f1a:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <MX_SPI2_Init+0x64>)
 8002f1c:	220a      	movs	r2, #10
 8002f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002f20:	4804      	ldr	r0, [pc, #16]	; (8002f34 <MX_SPI2_Init+0x64>)
 8002f22:	f00a fffb 	bl	800df1c <HAL_SPI_Init>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002f2c:	f7ff fce0 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002f30:	bf00      	nop
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20005c28 	.word	0x20005c28
 8002f38:	40003800 	.word	0x40003800

08002f3c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002f40:	4b17      	ldr	r3, [pc, #92]	; (8002fa0 <MX_SPI4_Init+0x64>)
 8002f42:	4a18      	ldr	r2, [pc, #96]	; (8002fa4 <MX_SPI4_Init+0x68>)
 8002f44:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002f46:	4b16      	ldr	r3, [pc, #88]	; (8002fa0 <MX_SPI4_Init+0x64>)
 8002f48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f4c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002f4e:	4b14      	ldr	r3, [pc, #80]	; (8002fa0 <MX_SPI4_Init+0x64>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f54:	4b12      	ldr	r3, [pc, #72]	; (8002fa0 <MX_SPI4_Init+0x64>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f5a:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <MX_SPI4_Init+0x64>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f60:	4b0f      	ldr	r3, [pc, #60]	; (8002fa0 <MX_SPI4_Init+0x64>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002f66:	4b0e      	ldr	r3, [pc, #56]	; (8002fa0 <MX_SPI4_Init+0x64>)
 8002f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f6c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f6e:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <MX_SPI4_Init+0x64>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f74:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <MX_SPI4_Init+0x64>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f7a:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <MX_SPI4_Init+0x64>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f80:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <MX_SPI4_Init+0x64>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8002f86:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <MX_SPI4_Init+0x64>)
 8002f88:	220a      	movs	r2, #10
 8002f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002f8c:	4804      	ldr	r0, [pc, #16]	; (8002fa0 <MX_SPI4_Init+0x64>)
 8002f8e:	f00a ffc5 	bl	800df1c <HAL_SPI_Init>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8002f98:	f7ff fcaa 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002f9c:	bf00      	nop
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	20005cd8 	.word	0x20005cd8
 8002fa4:	40013400 	.word	0x40013400

08002fa8 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8002fac:	4b17      	ldr	r3, [pc, #92]	; (800300c <MX_SPI5_Init+0x64>)
 8002fae:	4a18      	ldr	r2, [pc, #96]	; (8003010 <MX_SPI5_Init+0x68>)
 8002fb0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002fb2:	4b16      	ldr	r3, [pc, #88]	; (800300c <MX_SPI5_Init+0x64>)
 8002fb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002fb8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002fba:	4b14      	ldr	r3, [pc, #80]	; (800300c <MX_SPI5_Init+0x64>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fc0:	4b12      	ldr	r3, [pc, #72]	; (800300c <MX_SPI5_Init+0x64>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fc6:	4b11      	ldr	r3, [pc, #68]	; (800300c <MX_SPI5_Init+0x64>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fcc:	4b0f      	ldr	r3, [pc, #60]	; (800300c <MX_SPI5_Init+0x64>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002fd2:	4b0e      	ldr	r3, [pc, #56]	; (800300c <MX_SPI5_Init+0x64>)
 8002fd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fd8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fda:	4b0c      	ldr	r3, [pc, #48]	; (800300c <MX_SPI5_Init+0x64>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fe0:	4b0a      	ldr	r3, [pc, #40]	; (800300c <MX_SPI5_Init+0x64>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fe6:	4b09      	ldr	r3, [pc, #36]	; (800300c <MX_SPI5_Init+0x64>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fec:	4b07      	ldr	r3, [pc, #28]	; (800300c <MX_SPI5_Init+0x64>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002ff2:	4b06      	ldr	r3, [pc, #24]	; (800300c <MX_SPI5_Init+0x64>)
 8002ff4:	220a      	movs	r2, #10
 8002ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002ff8:	4804      	ldr	r0, [pc, #16]	; (800300c <MX_SPI5_Init+0x64>)
 8002ffa:	f00a ff8f 	bl	800df1c <HAL_SPI_Init>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8003004:	f7ff fc74 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8003008:	bf00      	nop
 800300a:	bd80      	pop	{r7, pc}
 800300c:	20005c80 	.word	0x20005c80
 8003010:	40015000 	.word	0x40015000

08003014 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08e      	sub	sp, #56	; 0x38
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	60da      	str	r2, [r3, #12]
 800302a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a4c      	ldr	r2, [pc, #304]	; (8003164 <HAL_SPI_MspInit+0x150>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d12d      	bne.n	8003092 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	623b      	str	r3, [r7, #32]
 800303a:	4b4b      	ldr	r3, [pc, #300]	; (8003168 <HAL_SPI_MspInit+0x154>)
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	4a4a      	ldr	r2, [pc, #296]	; (8003168 <HAL_SPI_MspInit+0x154>)
 8003040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003044:	6413      	str	r3, [r2, #64]	; 0x40
 8003046:	4b48      	ldr	r3, [pc, #288]	; (8003168 <HAL_SPI_MspInit+0x154>)
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800304e:	623b      	str	r3, [r7, #32]
 8003050:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	61fb      	str	r3, [r7, #28]
 8003056:	4b44      	ldr	r3, [pc, #272]	; (8003168 <HAL_SPI_MspInit+0x154>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	4a43      	ldr	r2, [pc, #268]	; (8003168 <HAL_SPI_MspInit+0x154>)
 800305c:	f043 0302 	orr.w	r3, r3, #2
 8003060:	6313      	str	r3, [r2, #48]	; 0x30
 8003062:	4b41      	ldr	r3, [pc, #260]	; (8003168 <HAL_SPI_MspInit+0x154>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	61fb      	str	r3, [r7, #28]
 800306c:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800306e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003074:	2302      	movs	r3, #2
 8003076:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003078:	2300      	movs	r3, #0
 800307a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800307c:	2303      	movs	r3, #3
 800307e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003080:	2305      	movs	r3, #5
 8003082:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003088:	4619      	mov	r1, r3
 800308a:	4838      	ldr	r0, [pc, #224]	; (800316c <HAL_SPI_MspInit+0x158>)
 800308c:	f007 ffe2 	bl	800b054 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8003090:	e064      	b.n	800315c <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI4)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a36      	ldr	r2, [pc, #216]	; (8003170 <HAL_SPI_MspInit+0x15c>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d12d      	bne.n	80030f8 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800309c:	2300      	movs	r3, #0
 800309e:	61bb      	str	r3, [r7, #24]
 80030a0:	4b31      	ldr	r3, [pc, #196]	; (8003168 <HAL_SPI_MspInit+0x154>)
 80030a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a4:	4a30      	ldr	r2, [pc, #192]	; (8003168 <HAL_SPI_MspInit+0x154>)
 80030a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030aa:	6453      	str	r3, [r2, #68]	; 0x44
 80030ac:	4b2e      	ldr	r3, [pc, #184]	; (8003168 <HAL_SPI_MspInit+0x154>)
 80030ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030b4:	61bb      	str	r3, [r7, #24]
 80030b6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80030b8:	2300      	movs	r3, #0
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	4b2a      	ldr	r3, [pc, #168]	; (8003168 <HAL_SPI_MspInit+0x154>)
 80030be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c0:	4a29      	ldr	r2, [pc, #164]	; (8003168 <HAL_SPI_MspInit+0x154>)
 80030c2:	f043 0310 	orr.w	r3, r3, #16
 80030c6:	6313      	str	r3, [r2, #48]	; 0x30
 80030c8:	4b27      	ldr	r3, [pc, #156]	; (8003168 <HAL_SPI_MspInit+0x154>)
 80030ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80030d4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030da:	2302      	movs	r3, #2
 80030dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e2:	2303      	movs	r3, #3
 80030e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80030e6:	2305      	movs	r3, #5
 80030e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ee:	4619      	mov	r1, r3
 80030f0:	4820      	ldr	r0, [pc, #128]	; (8003174 <HAL_SPI_MspInit+0x160>)
 80030f2:	f007 ffaf 	bl	800b054 <HAL_GPIO_Init>
}
 80030f6:	e031      	b.n	800315c <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI5)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a1e      	ldr	r2, [pc, #120]	; (8003178 <HAL_SPI_MspInit+0x164>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d12c      	bne.n	800315c <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	613b      	str	r3, [r7, #16]
 8003106:	4b18      	ldr	r3, [pc, #96]	; (8003168 <HAL_SPI_MspInit+0x154>)
 8003108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310a:	4a17      	ldr	r2, [pc, #92]	; (8003168 <HAL_SPI_MspInit+0x154>)
 800310c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003110:	6453      	str	r3, [r2, #68]	; 0x44
 8003112:	4b15      	ldr	r3, [pc, #84]	; (8003168 <HAL_SPI_MspInit+0x154>)
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800311a:	613b      	str	r3, [r7, #16]
 800311c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	4b11      	ldr	r3, [pc, #68]	; (8003168 <HAL_SPI_MspInit+0x154>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	4a10      	ldr	r2, [pc, #64]	; (8003168 <HAL_SPI_MspInit+0x154>)
 8003128:	f043 0320 	orr.w	r3, r3, #32
 800312c:	6313      	str	r3, [r2, #48]	; 0x30
 800312e:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <HAL_SPI_MspInit+0x154>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	f003 0320 	and.w	r3, r3, #32
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800313a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003140:	2302      	movs	r3, #2
 8003142:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003144:	2301      	movs	r3, #1
 8003146:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003148:	2303      	movs	r3, #3
 800314a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800314c:	2305      	movs	r3, #5
 800314e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003154:	4619      	mov	r1, r3
 8003156:	4809      	ldr	r0, [pc, #36]	; (800317c <HAL_SPI_MspInit+0x168>)
 8003158:	f007 ff7c 	bl	800b054 <HAL_GPIO_Init>
}
 800315c:	bf00      	nop
 800315e:	3738      	adds	r7, #56	; 0x38
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40003800 	.word	0x40003800
 8003168:	40023800 	.word	0x40023800
 800316c:	40020400 	.word	0x40020400
 8003170:	40013400 	.word	0x40013400
 8003174:	40021000 	.word	0x40021000
 8003178:	40015000 	.word	0x40015000
 800317c:	40021400 	.word	0x40021400

08003180 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	607b      	str	r3, [r7, #4]
 800318a:	4b12      	ldr	r3, [pc, #72]	; (80031d4 <HAL_MspInit+0x54>)
 800318c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318e:	4a11      	ldr	r2, [pc, #68]	; (80031d4 <HAL_MspInit+0x54>)
 8003190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003194:	6453      	str	r3, [r2, #68]	; 0x44
 8003196:	4b0f      	ldr	r3, [pc, #60]	; (80031d4 <HAL_MspInit+0x54>)
 8003198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800319e:	607b      	str	r3, [r7, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	603b      	str	r3, [r7, #0]
 80031a6:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <HAL_MspInit+0x54>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <HAL_MspInit+0x54>)
 80031ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b0:	6413      	str	r3, [r2, #64]	; 0x40
 80031b2:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <HAL_MspInit+0x54>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80031be:	2200      	movs	r2, #0
 80031c0:	210f      	movs	r1, #15
 80031c2:	f06f 0001 	mvn.w	r0, #1
 80031c6:	f007 ff0d 	bl	800afe4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40023800 	.word	0x40023800

080031d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08c      	sub	sp, #48	; 0x30
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80031e0:	2300      	movs	r3, #0
 80031e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80031e4:	2300      	movs	r3, #0
 80031e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80031e8:	2200      	movs	r2, #0
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	2036      	movs	r0, #54	; 0x36
 80031ee:	f007 fef9 	bl	800afe4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80031f2:	2036      	movs	r0, #54	; 0x36
 80031f4:	f007 ff12 	bl	800b01c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	4b1f      	ldr	r3, [pc, #124]	; (800327c <HAL_InitTick+0xa4>)
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	4a1e      	ldr	r2, [pc, #120]	; (800327c <HAL_InitTick+0xa4>)
 8003202:	f043 0310 	orr.w	r3, r3, #16
 8003206:	6413      	str	r3, [r2, #64]	; 0x40
 8003208:	4b1c      	ldr	r3, [pc, #112]	; (800327c <HAL_InitTick+0xa4>)
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	f003 0310 	and.w	r3, r3, #16
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003214:	f107 0210 	add.w	r2, r7, #16
 8003218:	f107 0314 	add.w	r3, r7, #20
 800321c:	4611      	mov	r1, r2
 800321e:	4618      	mov	r0, r3
 8003220:	f009 fe7e 	bl	800cf20 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003224:	f009 fe54 	bl	800ced0 <HAL_RCC_GetPCLK1Freq>
 8003228:	4603      	mov	r3, r0
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800322e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003230:	4a13      	ldr	r2, [pc, #76]	; (8003280 <HAL_InitTick+0xa8>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	0c9b      	lsrs	r3, r3, #18
 8003238:	3b01      	subs	r3, #1
 800323a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800323c:	4b11      	ldr	r3, [pc, #68]	; (8003284 <HAL_InitTick+0xac>)
 800323e:	4a12      	ldr	r2, [pc, #72]	; (8003288 <HAL_InitTick+0xb0>)
 8003240:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003242:	4b10      	ldr	r3, [pc, #64]	; (8003284 <HAL_InitTick+0xac>)
 8003244:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003248:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800324a:	4a0e      	ldr	r2, [pc, #56]	; (8003284 <HAL_InitTick+0xac>)
 800324c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003250:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <HAL_InitTick+0xac>)
 8003252:	2200      	movs	r2, #0
 8003254:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003256:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <HAL_InitTick+0xac>)
 8003258:	2200      	movs	r2, #0
 800325a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800325c:	4809      	ldr	r0, [pc, #36]	; (8003284 <HAL_InitTick+0xac>)
 800325e:	f00b fc05 	bl	800ea6c <HAL_TIM_Base_Init>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d104      	bne.n	8003272 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003268:	4806      	ldr	r0, [pc, #24]	; (8003284 <HAL_InitTick+0xac>)
 800326a:	f00b fc4f 	bl	800eb0c <HAL_TIM_Base_Start_IT>
 800326e:	4603      	mov	r3, r0
 8003270:	e000      	b.n	8003274 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
}
 8003274:	4618      	mov	r0, r3
 8003276:	3730      	adds	r7, #48	; 0x30
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40023800 	.word	0x40023800
 8003280:	431bde83 	.word	0x431bde83
 8003284:	20005d30 	.word	0x20005d30
 8003288:	40001000 	.word	0x40001000

0800328c <__NVIC_SystemReset>:
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003290:	f3bf 8f4f 	dsb	sy
}
 8003294:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003296:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <__NVIC_SystemReset+0x24>)
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800329e:	4904      	ldr	r1, [pc, #16]	; (80032b0 <__NVIC_SystemReset+0x24>)
 80032a0:	4b04      	ldr	r3, [pc, #16]	; (80032b4 <__NVIC_SystemReset+0x28>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80032a6:	f3bf 8f4f 	dsb	sy
}
 80032aa:	bf00      	nop
    __NOP();
 80032ac:	bf00      	nop
 80032ae:	e7fd      	b.n	80032ac <__NVIC_SystemReset+0x20>
 80032b0:	e000ed00 	.word	0xe000ed00
 80032b4:	05fa0004 	.word	0x05fa0004

080032b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032bc:	e7fe      	b.n	80032bc <NMI_Handler+0x4>

080032be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032be:	b480      	push	{r7}
 80032c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032c2:	e7fe      	b.n	80032c2 <HardFault_Handler+0x4>

080032c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032c8:	e7fe      	b.n	80032c8 <MemManage_Handler+0x4>

080032ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032ca:	b480      	push	{r7}
 80032cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032ce:	e7fe      	b.n	80032ce <BusFault_Handler+0x4>

080032d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032d4:	e7fe      	b.n	80032d4 <UsageFault_Handler+0x4>

080032d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032d6:	b480      	push	{r7}
 80032d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032da:	bf00      	nop
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80032e8:	2001      	movs	r0, #1
 80032ea:	f008 f891 	bl	800b410 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80032ee:	bf00      	nop
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80032f8:	4802      	ldr	r0, [pc, #8]	; (8003304 <RTC_Alarm_IRQHandler+0x10>)
 80032fa:	f00a fbdb 	bl	800dab4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20005c08 	.word	0x20005c08

08003308 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800330c:	4802      	ldr	r0, [pc, #8]	; (8003318 <TIM6_DAC_IRQHandler+0x10>)
 800330e:	f00b fdff 	bl	800ef10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003312:	bf00      	nop
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20005d30 	.word	0x20005d30

0800331c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == IN_Button_Pin){
 8003326:	88fb      	ldrh	r3, [r7, #6]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d101      	bne.n	8003330 <HAL_GPIO_EXTI_Callback+0x14>
		//Manual reset from external button
		MRT_resetFromStart();
 800332c:	f000 f804 	bl	8003338 <MRT_resetFromStart>
	}
}
 8003330:	bf00      	nop
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <MRT_resetFromStart>:



void MRT_resetFromStart(void){
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0

	//Clear memory
	MRT_clearExternalFlash();
 800333c:	f000 fbfc 	bl	8003b38 <MRT_clearExternalFlash>
	MRT_RTC_clearBackupRegs();
 8003340:	f7ff fd66 	bl	8002e10 <MRT_RTC_clearBackupRegs>

	//Shutdown Iridium
	//TODO should have deninit for every system?
	MRT_Iridium_Deinit();
 8003344:	f006 fa4c 	bl	80097e0 <MRT_Iridium_Deinit>

	//Reset function
	NVIC_SystemReset();
 8003348:	f7ff ffa0 	bl	800328c <__NVIC_SystemReset>

0800334c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003350:	4b06      	ldr	r3, [pc, #24]	; (800336c <SystemInit+0x20>)
 8003352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003356:	4a05      	ldr	r2, [pc, #20]	; (800336c <SystemInit+0x20>)
 8003358:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800335c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003360:	bf00      	nop
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	e000ed00 	.word	0xe000ed00

08003370 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b08e      	sub	sp, #56	; 0x38
 8003374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800337a:	2200      	movs	r2, #0
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	605a      	str	r2, [r3, #4]
 8003380:	609a      	str	r2, [r3, #8]
 8003382:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003384:	f107 0320 	add.w	r3, r7, #32
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800338e:	1d3b      	adds	r3, r7, #4
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	605a      	str	r2, [r3, #4]
 8003396:	609a      	str	r2, [r3, #8]
 8003398:	60da      	str	r2, [r3, #12]
 800339a:	611a      	str	r2, [r3, #16]
 800339c:	615a      	str	r2, [r3, #20]
 800339e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80033a0:	4b2d      	ldr	r3, [pc, #180]	; (8003458 <MX_TIM2_Init+0xe8>)
 80033a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80033a8:	4b2b      	ldr	r3, [pc, #172]	; (8003458 <MX_TIM2_Init+0xe8>)
 80033aa:	2259      	movs	r2, #89	; 0x59
 80033ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ae:	4b2a      	ldr	r3, [pc, #168]	; (8003458 <MX_TIM2_Init+0xe8>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 80033b4:	4b28      	ldr	r3, [pc, #160]	; (8003458 <MX_TIM2_Init+0xe8>)
 80033b6:	f240 128f 	movw	r2, #399	; 0x18f
 80033ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033bc:	4b26      	ldr	r3, [pc, #152]	; (8003458 <MX_TIM2_Init+0xe8>)
 80033be:	2200      	movs	r2, #0
 80033c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033c2:	4b25      	ldr	r3, [pc, #148]	; (8003458 <MX_TIM2_Init+0xe8>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80033c8:	4823      	ldr	r0, [pc, #140]	; (8003458 <MX_TIM2_Init+0xe8>)
 80033ca:	f00b fb4f 	bl	800ea6c <HAL_TIM_Base_Init>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80033d4:	f7ff fa8c 	bl	80028f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80033de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033e2:	4619      	mov	r1, r3
 80033e4:	481c      	ldr	r0, [pc, #112]	; (8003458 <MX_TIM2_Init+0xe8>)
 80033e6:	f00b ff5d 	bl	800f2a4 <HAL_TIM_ConfigClockSource>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80033f0:	f7ff fa7e 	bl	80028f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80033f4:	4818      	ldr	r0, [pc, #96]	; (8003458 <MX_TIM2_Init+0xe8>)
 80033f6:	f00b fbf9 	bl	800ebec <HAL_TIM_PWM_Init>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003400:	f7ff fa76 	bl	80028f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003404:	2320      	movs	r3, #32
 8003406:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003408:	2300      	movs	r3, #0
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800340c:	f107 0320 	add.w	r3, r7, #32
 8003410:	4619      	mov	r1, r3
 8003412:	4811      	ldr	r0, [pc, #68]	; (8003458 <MX_TIM2_Init+0xe8>)
 8003414:	f00c fb46 	bl	800faa4 <HAL_TIMEx_MasterConfigSynchronization>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800341e:	f7ff fa67 	bl	80028f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003422:	2360      	movs	r3, #96	; 0x60
 8003424:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8003426:	2364      	movs	r3, #100	; 0x64
 8003428:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800342a:	2300      	movs	r3, #0
 800342c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800342e:	2300      	movs	r3, #0
 8003430:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003432:	1d3b      	adds	r3, r7, #4
 8003434:	2208      	movs	r2, #8
 8003436:	4619      	mov	r1, r3
 8003438:	4807      	ldr	r0, [pc, #28]	; (8003458 <MX_TIM2_Init+0xe8>)
 800343a:	f00b fe71 	bl	800f120 <HAL_TIM_PWM_ConfigChannel>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003444:	f7ff fa54 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003448:	4803      	ldr	r0, [pc, #12]	; (8003458 <MX_TIM2_Init+0xe8>)
 800344a:	f000 f827 	bl	800349c <HAL_TIM_MspPostInit>

}
 800344e:	bf00      	nop
 8003450:	3738      	adds	r7, #56	; 0x38
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20005d78 	.word	0x20005d78

0800345c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800346c:	d10d      	bne.n	800348a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800346e:	2300      	movs	r3, #0
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	4b09      	ldr	r3, [pc, #36]	; (8003498 <HAL_TIM_Base_MspInit+0x3c>)
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	4a08      	ldr	r2, [pc, #32]	; (8003498 <HAL_TIM_Base_MspInit+0x3c>)
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	6413      	str	r3, [r2, #64]	; 0x40
 800347e:	4b06      	ldr	r3, [pc, #24]	; (8003498 <HAL_TIM_Base_MspInit+0x3c>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800348a:	bf00      	nop
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40023800 	.word	0x40023800

0800349c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a4:	f107 030c 	add.w	r3, r7, #12
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	605a      	str	r2, [r3, #4]
 80034ae:	609a      	str	r2, [r3, #8]
 80034b0:	60da      	str	r2, [r3, #12]
 80034b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034bc:	d11d      	bne.n	80034fa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	60bb      	str	r3, [r7, #8]
 80034c2:	4b10      	ldr	r3, [pc, #64]	; (8003504 <HAL_TIM_MspPostInit+0x68>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	4a0f      	ldr	r2, [pc, #60]	; (8003504 <HAL_TIM_MspPostInit+0x68>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	6313      	str	r3, [r2, #48]	; 0x30
 80034ce:	4b0d      	ldr	r3, [pc, #52]	; (8003504 <HAL_TIM_MspPostInit+0x68>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	60bb      	str	r3, [r7, #8]
 80034d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 80034da:	2304      	movs	r3, #4
 80034dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034de:	2302      	movs	r3, #2
 80034e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e6:	2300      	movs	r3, #0
 80034e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80034ea:	2301      	movs	r3, #1
 80034ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80034ee:	f107 030c 	add.w	r3, r7, #12
 80034f2:	4619      	mov	r1, r3
 80034f4:	4804      	ldr	r0, [pc, #16]	; (8003508 <HAL_TIM_MspPostInit+0x6c>)
 80034f6:	f007 fdad 	bl	800b054 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80034fa:	bf00      	nop
 80034fc:	3720      	adds	r7, #32
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40023800 	.word	0x40023800
 8003508:	40020000 	.word	0x40020000

0800350c <MX_UART8_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART8 init function */
void MX_UART8_Init(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8003510:	4b11      	ldr	r3, [pc, #68]	; (8003558 <MX_UART8_Init+0x4c>)
 8003512:	4a12      	ldr	r2, [pc, #72]	; (800355c <MX_UART8_Init+0x50>)
 8003514:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8003516:	4b10      	ldr	r3, [pc, #64]	; (8003558 <MX_UART8_Init+0x4c>)
 8003518:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800351c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800351e:	4b0e      	ldr	r3, [pc, #56]	; (8003558 <MX_UART8_Init+0x4c>)
 8003520:	2200      	movs	r2, #0
 8003522:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8003524:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <MX_UART8_Init+0x4c>)
 8003526:	2200      	movs	r2, #0
 8003528:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800352a:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <MX_UART8_Init+0x4c>)
 800352c:	2200      	movs	r2, #0
 800352e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8003530:	4b09      	ldr	r3, [pc, #36]	; (8003558 <MX_UART8_Init+0x4c>)
 8003532:	220c      	movs	r2, #12
 8003534:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003536:	4b08      	ldr	r3, [pc, #32]	; (8003558 <MX_UART8_Init+0x4c>)
 8003538:	2200      	movs	r2, #0
 800353a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800353c:	4b06      	ldr	r3, [pc, #24]	; (8003558 <MX_UART8_Init+0x4c>)
 800353e:	2200      	movs	r2, #0
 8003540:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8003542:	4805      	ldr	r0, [pc, #20]	; (8003558 <MX_UART8_Init+0x4c>)
 8003544:	f00c fb3e 	bl	800fbc4 <HAL_UART_Init>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 800354e:	f7ff f9cf 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8003552:	bf00      	nop
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	20005e04 	.word	0x20005e04
 800355c:	40007c00 	.word	0x40007c00

08003560 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003564:	4b11      	ldr	r3, [pc, #68]	; (80035ac <MX_USART3_UART_Init+0x4c>)
 8003566:	4a12      	ldr	r2, [pc, #72]	; (80035b0 <MX_USART3_UART_Init+0x50>)
 8003568:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800356a:	4b10      	ldr	r3, [pc, #64]	; (80035ac <MX_USART3_UART_Init+0x4c>)
 800356c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003570:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003572:	4b0e      	ldr	r3, [pc, #56]	; (80035ac <MX_USART3_UART_Init+0x4c>)
 8003574:	2200      	movs	r2, #0
 8003576:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003578:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <MX_USART3_UART_Init+0x4c>)
 800357a:	2200      	movs	r2, #0
 800357c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800357e:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <MX_USART3_UART_Init+0x4c>)
 8003580:	2200      	movs	r2, #0
 8003582:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003584:	4b09      	ldr	r3, [pc, #36]	; (80035ac <MX_USART3_UART_Init+0x4c>)
 8003586:	220c      	movs	r2, #12
 8003588:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800358a:	4b08      	ldr	r3, [pc, #32]	; (80035ac <MX_USART3_UART_Init+0x4c>)
 800358c:	2200      	movs	r2, #0
 800358e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003590:	4b06      	ldr	r3, [pc, #24]	; (80035ac <MX_USART3_UART_Init+0x4c>)
 8003592:	2200      	movs	r2, #0
 8003594:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003596:	4805      	ldr	r0, [pc, #20]	; (80035ac <MX_USART3_UART_Init+0x4c>)
 8003598:	f00c fb14 	bl	800fbc4 <HAL_UART_Init>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80035a2:	f7ff f9a5 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20005dc0 	.word	0x20005dc0
 80035b0:	40004800 	.word	0x40004800

080035b4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80035b8:	4b11      	ldr	r3, [pc, #68]	; (8003600 <MX_USART6_UART_Init+0x4c>)
 80035ba:	4a12      	ldr	r2, [pc, #72]	; (8003604 <MX_USART6_UART_Init+0x50>)
 80035bc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80035be:	4b10      	ldr	r3, [pc, #64]	; (8003600 <MX_USART6_UART_Init+0x4c>)
 80035c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80035c4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80035c6:	4b0e      	ldr	r3, [pc, #56]	; (8003600 <MX_USART6_UART_Init+0x4c>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80035cc:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <MX_USART6_UART_Init+0x4c>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80035d2:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <MX_USART6_UART_Init+0x4c>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80035d8:	4b09      	ldr	r3, [pc, #36]	; (8003600 <MX_USART6_UART_Init+0x4c>)
 80035da:	220c      	movs	r2, #12
 80035dc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035de:	4b08      	ldr	r3, [pc, #32]	; (8003600 <MX_USART6_UART_Init+0x4c>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80035e4:	4b06      	ldr	r3, [pc, #24]	; (8003600 <MX_USART6_UART_Init+0x4c>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80035ea:	4805      	ldr	r0, [pc, #20]	; (8003600 <MX_USART6_UART_Init+0x4c>)
 80035ec:	f00c faea 	bl	800fbc4 <HAL_UART_Init>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80035f6:	f7ff f97b 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80035fa:	bf00      	nop
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	20005e48 	.word	0x20005e48
 8003604:	40011400 	.word	0x40011400

08003608 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b08e      	sub	sp, #56	; 0x38
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	605a      	str	r2, [r3, #4]
 800361a:	609a      	str	r2, [r3, #8]
 800361c:	60da      	str	r2, [r3, #12]
 800361e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a4b      	ldr	r2, [pc, #300]	; (8003754 <HAL_UART_MspInit+0x14c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d12c      	bne.n	8003684 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800362a:	2300      	movs	r3, #0
 800362c:	623b      	str	r3, [r7, #32]
 800362e:	4b4a      	ldr	r3, [pc, #296]	; (8003758 <HAL_UART_MspInit+0x150>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	4a49      	ldr	r2, [pc, #292]	; (8003758 <HAL_UART_MspInit+0x150>)
 8003634:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003638:	6413      	str	r3, [r2, #64]	; 0x40
 800363a:	4b47      	ldr	r3, [pc, #284]	; (8003758 <HAL_UART_MspInit+0x150>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003642:	623b      	str	r3, [r7, #32]
 8003644:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	61fb      	str	r3, [r7, #28]
 800364a:	4b43      	ldr	r3, [pc, #268]	; (8003758 <HAL_UART_MspInit+0x150>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	4a42      	ldr	r2, [pc, #264]	; (8003758 <HAL_UART_MspInit+0x150>)
 8003650:	f043 0310 	orr.w	r3, r3, #16
 8003654:	6313      	str	r3, [r2, #48]	; 0x30
 8003656:	4b40      	ldr	r3, [pc, #256]	; (8003758 <HAL_UART_MspInit+0x150>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	f003 0310 	and.w	r3, r3, #16
 800365e:	61fb      	str	r3, [r7, #28]
 8003660:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8003662:	2303      	movs	r3, #3
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003666:	2302      	movs	r3, #2
 8003668:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366a:	2300      	movs	r3, #0
 800366c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800366e:	2303      	movs	r3, #3
 8003670:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8003672:	2308      	movs	r3, #8
 8003674:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800367a:	4619      	mov	r1, r3
 800367c:	4837      	ldr	r0, [pc, #220]	; (800375c <HAL_UART_MspInit+0x154>)
 800367e:	f007 fce9 	bl	800b054 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003682:	e063      	b.n	800374c <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART3)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a35      	ldr	r2, [pc, #212]	; (8003760 <HAL_UART_MspInit+0x158>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d12d      	bne.n	80036ea <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800368e:	2300      	movs	r3, #0
 8003690:	61bb      	str	r3, [r7, #24]
 8003692:	4b31      	ldr	r3, [pc, #196]	; (8003758 <HAL_UART_MspInit+0x150>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	4a30      	ldr	r2, [pc, #192]	; (8003758 <HAL_UART_MspInit+0x150>)
 8003698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800369c:	6413      	str	r3, [r2, #64]	; 0x40
 800369e:	4b2e      	ldr	r3, [pc, #184]	; (8003758 <HAL_UART_MspInit+0x150>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036a6:	61bb      	str	r3, [r7, #24]
 80036a8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036aa:	2300      	movs	r3, #0
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	4b2a      	ldr	r3, [pc, #168]	; (8003758 <HAL_UART_MspInit+0x150>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	4a29      	ldr	r2, [pc, #164]	; (8003758 <HAL_UART_MspInit+0x150>)
 80036b4:	f043 0308 	orr.w	r3, r3, #8
 80036b8:	6313      	str	r3, [r2, #48]	; 0x30
 80036ba:	4b27      	ldr	r3, [pc, #156]	; (8003758 <HAL_UART_MspInit+0x150>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 80036c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036cc:	2302      	movs	r3, #2
 80036ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d0:	2300      	movs	r3, #0
 80036d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036d4:	2303      	movs	r3, #3
 80036d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80036d8:	2307      	movs	r3, #7
 80036da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036e0:	4619      	mov	r1, r3
 80036e2:	4820      	ldr	r0, [pc, #128]	; (8003764 <HAL_UART_MspInit+0x15c>)
 80036e4:	f007 fcb6 	bl	800b054 <HAL_GPIO_Init>
}
 80036e8:	e030      	b.n	800374c <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART6)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a1e      	ldr	r2, [pc, #120]	; (8003768 <HAL_UART_MspInit+0x160>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d12b      	bne.n	800374c <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 80036f4:	2300      	movs	r3, #0
 80036f6:	613b      	str	r3, [r7, #16]
 80036f8:	4b17      	ldr	r3, [pc, #92]	; (8003758 <HAL_UART_MspInit+0x150>)
 80036fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fc:	4a16      	ldr	r2, [pc, #88]	; (8003758 <HAL_UART_MspInit+0x150>)
 80036fe:	f043 0320 	orr.w	r3, r3, #32
 8003702:	6453      	str	r3, [r2, #68]	; 0x44
 8003704:	4b14      	ldr	r3, [pc, #80]	; (8003758 <HAL_UART_MspInit+0x150>)
 8003706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003708:	f003 0320 	and.w	r3, r3, #32
 800370c:	613b      	str	r3, [r7, #16]
 800370e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003710:	2300      	movs	r3, #0
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	4b10      	ldr	r3, [pc, #64]	; (8003758 <HAL_UART_MspInit+0x150>)
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003718:	4a0f      	ldr	r2, [pc, #60]	; (8003758 <HAL_UART_MspInit+0x150>)
 800371a:	f043 0304 	orr.w	r3, r3, #4
 800371e:	6313      	str	r3, [r2, #48]	; 0x30
 8003720:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <HAL_UART_MspInit+0x150>)
 8003722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 800372c:	23c0      	movs	r3, #192	; 0xc0
 800372e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003730:	2302      	movs	r3, #2
 8003732:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003734:	2300      	movs	r3, #0
 8003736:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003738:	2303      	movs	r3, #3
 800373a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800373c:	2308      	movs	r3, #8
 800373e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003744:	4619      	mov	r1, r3
 8003746:	4809      	ldr	r0, [pc, #36]	; (800376c <HAL_UART_MspInit+0x164>)
 8003748:	f007 fc84 	bl	800b054 <HAL_GPIO_Init>
}
 800374c:	bf00      	nop
 800374e:	3738      	adds	r7, #56	; 0x38
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40007c00 	.word	0x40007c00
 8003758:	40023800 	.word	0x40023800
 800375c:	40021000 	.word	0x40021000
 8003760:	40004800 	.word	0x40004800
 8003764:	40020c00 	.word	0x40020c00
 8003768:	40011400 	.word	0x40011400
 800376c:	40020800 	.word	0x40020800

08003770 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003770:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003774:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003776:	e003      	b.n	8003780 <LoopCopyDataInit>

08003778 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003778:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800377a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800377c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800377e:	3104      	adds	r1, #4

08003780 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003780:	480b      	ldr	r0, [pc, #44]	; (80037b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003782:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003784:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003786:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003788:	d3f6      	bcc.n	8003778 <CopyDataInit>
  ldr  r2, =_sbss
 800378a:	4a0b      	ldr	r2, [pc, #44]	; (80037b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800378c:	e002      	b.n	8003794 <LoopFillZerobss>

0800378e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800378e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003790:	f842 3b04 	str.w	r3, [r2], #4

08003794 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003794:	4b09      	ldr	r3, [pc, #36]	; (80037bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003796:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003798:	d3f9      	bcc.n	800378e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800379a:	f7ff fdd7 	bl	800334c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800379e:	f010 ff55 	bl	801464c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037a2:	f7fe ff63 	bl	800266c <main>
  bx  lr    
 80037a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80037a8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80037ac:	0801cd24 	.word	0x0801cd24
  ldr  r0, =_sdata
 80037b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80037b4:	20000314 	.word	0x20000314
  ldr  r2, =_sbss
 80037b8:	20000314 	.word	0x20000314
  ldr  r3, = _ebss
 80037bc:	20006558 	.word	0x20006558

080037c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037c0:	e7fe      	b.n	80037c0 <ADC_IRQHandler>
 80037c2:	0000      	movs	r0, r0
 80037c4:	0000      	movs	r0, r0
	...

080037c8 <MRT_getAltitude>:

/*
 * Gets the altitude using temperature, pressure and sea-level pressure
 *https://www.mide.com/air-pressure-at-altitude-calculator
 */
float MRT_getAltitude(float pressure){
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	ed87 0a01 	vstr	s0, [r7, #4]
	return BASE_HEIGHT+(SEA_LEVEL_TEMPERATURE/-0.0065)*(pow(pressure/SEA_LEVEL_PRESSURE,0.190263236)-1); //(-R*-0.0065/(go*M)) = 0.190263236
 80037d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80037d6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003858 <MRT_getAltitude+0x90>
 80037da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80037de:	ee16 0a90 	vmov	r0, s13
 80037e2:	f7fc fed1 	bl	8000588 <__aeabi_f2d>
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8003848 <MRT_getAltitude+0x80>
 80037ee:	ec43 2b10 	vmov	d0, r2, r3
 80037f2:	f00f fe6b 	bl	80134cc <pow>
 80037f6:	ec51 0b10 	vmov	r0, r1, d0
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	4b17      	ldr	r3, [pc, #92]	; (800385c <MRT_getAltitude+0x94>)
 8003800:	f7fc fd62 	bl	80002c8 <__aeabi_dsub>
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	4610      	mov	r0, r2
 800380a:	4619      	mov	r1, r3
 800380c:	a310      	add	r3, pc, #64	; (adr r3, 8003850 <MRT_getAltitude+0x88>)
 800380e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003812:	f7fc ff11 	bl	8000638 <__aeabi_dmul>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	4610      	mov	r0, r2
 800381c:	4619      	mov	r1, r3
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <MRT_getAltitude+0x98>)
 8003824:	f7fc fd52 	bl	80002cc <__adddf3>
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	4610      	mov	r0, r2
 800382e:	4619      	mov	r1, r3
 8003830:	f7fd f9fa 	bl	8000c28 <__aeabi_d2f>
 8003834:	4603      	mov	r3, r0
 8003836:	ee07 3a90 	vmov	s15, r3
}
 800383a:	eeb0 0a67 	vmov.f32	s0, s15
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	f3af 8000 	nop.w
 8003848:	b4202506 	.word	0xb4202506
 800384c:	3fc85a8b 	.word	0x3fc85a8b
 8003850:	76276276 	.word	0x76276276
 8003854:	c0e481c2 	.word	0xc0e481c2
 8003858:	447d8000 	.word	0x447d8000
 800385c:	3ff00000 	.word	0x3ff00000
 8003860:	40590000 	.word	0x40590000

08003864 <MRT_getContinuity>:
 * Checks the continuity of the gates
 *
 * returns a binary number in its decimal form. Each bit is the state of a gate.
 * bit3 bit2 bit1 bit0 = drogue1 drogue2 prop1 prop2
 */
uint8_t MRT_getContinuity(void){
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
	uint8_t drogue1 = HAL_GPIO_ReadPin(IN_EJ_Drogue_Cont_GPIO_Port, IN_EJ_Drogue_Cont_Pin);
 800386a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800386e:	4815      	ldr	r0, [pc, #84]	; (80038c4 <MRT_getContinuity+0x60>)
 8003870:	f007 fd9c 	bl	800b3ac <HAL_GPIO_ReadPin>
 8003874:	4603      	mov	r3, r0
 8003876:	71fb      	strb	r3, [r7, #7]
	uint8_t drogue2 = HAL_GPIO_ReadPin(IN_EJ_Main_Cont_GPIO_Port, IN_EJ_Main_Cont_Pin);
 8003878:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800387c:	4811      	ldr	r0, [pc, #68]	; (80038c4 <MRT_getContinuity+0x60>)
 800387e:	f007 fd95 	bl	800b3ac <HAL_GPIO_ReadPin>
 8003882:	4603      	mov	r3, r0
 8003884:	71bb      	strb	r3, [r7, #6]
	uint8_t prop1 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_1_GPIO_Port, IN_PyroValve_Cont_1_Pin);
 8003886:	2101      	movs	r1, #1
 8003888:	480e      	ldr	r0, [pc, #56]	; (80038c4 <MRT_getContinuity+0x60>)
 800388a:	f007 fd8f 	bl	800b3ac <HAL_GPIO_ReadPin>
 800388e:	4603      	mov	r3, r0
 8003890:	717b      	strb	r3, [r7, #5]
	uint8_t prop2 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_2_GPIO_Port, IN_PyroValve_Cont_2_Pin);
 8003892:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003896:	480c      	ldr	r0, [pc, #48]	; (80038c8 <MRT_getContinuity+0x64>)
 8003898:	f007 fd88 	bl	800b3ac <HAL_GPIO_ReadPin>
 800389c:	4603      	mov	r3, r0
 800389e:	713b      	strb	r3, [r7, #4]
	uint8_t continuity = 8*drogue1 + 4*drogue2 + 2*prop1 + prop2;
 80038a0:	79fb      	ldrb	r3, [r7, #7]
 80038a2:	005a      	lsls	r2, r3, #1
 80038a4:	79bb      	ldrb	r3, [r7, #6]
 80038a6:	4413      	add	r3, r2
 80038a8:	005a      	lsls	r2, r3, #1
 80038aa:	797b      	ldrb	r3, [r7, #5]
 80038ac:	4413      	add	r3, r2
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	793b      	ldrb	r3, [r7, #4]
 80038b6:	4413      	add	r3, r2
 80038b8:	70fb      	strb	r3, [r7, #3]
	return continuity;
 80038ba:	78fb      	ldrb	r3, [r7, #3]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40021800 	.word	0x40021800
 80038c8:	40021400 	.word	0x40021400

080038cc <MRT_formatAvionics>:


// formats avionics telemetry string using sprintf
void MRT_formatAvionics(void) {
 80038cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038d0:	b0a3      	sub	sp, #140	; 0x8c
 80038d2:	af16      	add	r7, sp, #88	; 0x58
	memset(msg_buffer_av, 0, 200);
 80038d4:	22c8      	movs	r2, #200	; 0xc8
 80038d6:	2100      	movs	r1, #0
 80038d8:	483c      	ldr	r0, [pc, #240]	; (80039cc <MRT_formatAvionics+0x100>)
 80038da:	f011 f835 	bl	8014948 <memset>
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 80038de:	4b3c      	ldr	r3, [pc, #240]	; (80039d0 <MRT_formatAvionics+0x104>)
 80038e0:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fc fe50 	bl	8000588 <__aeabi_f2d>
 80038e8:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 80038ec:	4b38      	ldr	r3, [pc, #224]	; (80039d0 <MRT_formatAvionics+0x104>)
 80038ee:	685b      	ldr	r3, [r3, #4]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7fc fe49 	bl	8000588 <__aeabi_f2d>
 80038f6:	e9c7 0108 	strd	r0, r1, [r7, #32]
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 80038fa:	4b35      	ldr	r3, [pc, #212]	; (80039d0 <MRT_formatAvionics+0x104>)
 80038fc:	689b      	ldr	r3, [r3, #8]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fc fe42 	bl	8000588 <__aeabi_f2d>
 8003904:	e9c7 0106 	strd	r0, r1, [r7, #24]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 8003908:	4b31      	ldr	r3, [pc, #196]	; (80039d0 <MRT_formatAvionics+0x104>)
 800390a:	68db      	ldr	r3, [r3, #12]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 800390c:	4618      	mov	r0, r3
 800390e:	f7fc fe3b 	bl	8000588 <__aeabi_f2d>
 8003912:	e9c7 0104 	strd	r0, r1, [r7, #16]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 8003916:	4b2e      	ldr	r3, [pc, #184]	; (80039d0 <MRT_formatAvionics+0x104>)
 8003918:	691b      	ldr	r3, [r3, #16]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 800391a:	4618      	mov	r0, r3
 800391c:	f7fc fe34 	bl	8000588 <__aeabi_f2d>
 8003920:	e9c7 0102 	strd	r0, r1, [r7, #8]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 8003924:	4b2a      	ldr	r3, [pc, #168]	; (80039d0 <MRT_formatAvionics+0x104>)
 8003926:	695b      	ldr	r3, [r3, #20]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 8003928:	4618      	mov	r0, r3
 800392a:	f7fc fe2d 	bl	8000588 <__aeabi_f2d>
 800392e:	e9c7 0100 	strd	r0, r1, [r7]
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 8003932:	4b28      	ldr	r3, [pc, #160]	; (80039d4 <MRT_formatAvionics+0x108>)
 8003934:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 8003936:	4618      	mov	r0, r3
 8003938:	f7fc fe26 	bl	8000588 <__aeabi_f2d>
 800393c:	4682      	mov	sl, r0
 800393e:	468b      	mov	fp, r1
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 8003940:	4b25      	ldr	r3, [pc, #148]	; (80039d8 <MRT_formatAvionics+0x10c>)
 8003942:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 8003944:	4618      	mov	r0, r3
 8003946:	f7fc fe1f 	bl	8000588 <__aeabi_f2d>
 800394a:	4680      	mov	r8, r0
 800394c:	4689      	mov	r9, r1
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 800394e:	4b22      	ldr	r3, [pc, #136]	; (80039d8 <MRT_formatAvionics+0x10c>)
 8003950:	685b      	ldr	r3, [r3, #4]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 8003952:	4618      	mov	r0, r3
 8003954:	f7fc fe18 	bl	8000588 <__aeabi_f2d>
 8003958:	4604      	mov	r4, r0
 800395a:	460d      	mov	r5, r1
 800395c:	4b1f      	ldr	r3, [pc, #124]	; (80039dc <MRT_formatAvionics+0x110>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	461e      	mov	r6, r3
 8003962:	4b1f      	ldr	r3, [pc, #124]	; (80039e0 <MRT_formatAvionics+0x114>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	4b1e      	ldr	r3, [pc, #120]	; (80039e4 <MRT_formatAvionics+0x118>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4b1e      	ldr	r3, [pc, #120]	; (80039e8 <MRT_formatAvionics+0x11c>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	4619      	mov	r1, r3
 8003972:	4b1e      	ldr	r3, [pc, #120]	; (80039ec <MRT_formatAvionics+0x120>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	9314      	str	r3, [sp, #80]	; 0x50
 8003978:	9113      	str	r1, [sp, #76]	; 0x4c
 800397a:	9212      	str	r2, [sp, #72]	; 0x48
 800397c:	9011      	str	r0, [sp, #68]	; 0x44
 800397e:	9610      	str	r6, [sp, #64]	; 0x40
 8003980:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8003984:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8003988:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800398c:	ed97 7b00 	vldr	d7, [r7]
 8003990:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003994:	ed97 7b02 	vldr	d7, [r7, #8]
 8003998:	ed8d 7b06 	vstr	d7, [sp, #24]
 800399c:	ed97 7b04 	vldr	d7, [r7, #16]
 80039a0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80039a4:	ed97 7b06 	vldr	d7, [r7, #24]
 80039a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80039ac:	ed97 7b08 	vldr	d7, [r7, #32]
 80039b0:	ed8d 7b00 	vstr	d7, [sp]
 80039b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039b8:	490d      	ldr	r1, [pc, #52]	; (80039f0 <MRT_formatAvionics+0x124>)
 80039ba:	4804      	ldr	r0, [pc, #16]	; (80039cc <MRT_formatAvionics+0x100>)
 80039bc:	f012 fac0 	bl	8015f40 <siprintf>
		prev_min, prev_sec, prev_subsec,
		gates_continuity,	ejection_stage_flag);
}
 80039c0:	bf00      	nop
 80039c2:	3734      	adds	r7, #52	; 0x34
 80039c4:	46bd      	mov	sp, r7
 80039c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039ca:	bf00      	nop
 80039cc:	20005e8c 	.word	0x20005e8c
 80039d0:	200003f4 	.word	0x200003f4
 80039d4:	20000420 	.word	0x20000420
 80039d8:	20000434 	.word	0x20000434
 80039dc:	200003de 	.word	0x200003de
 80039e0:	200003df 	.word	0x200003df
 80039e4:	200003e0 	.word	0x200003e0
 80039e8:	200003c5 	.word	0x200003c5
 80039ec:	200003dc 	.word	0x200003dc
 80039f0:	0801ab84 	.word	0x0801ab84

080039f4 <MRT_external_flash_Init>:


//**************************************************//
//FUNCTIONS

void MRT_external_flash_Init(void){
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0

	for (int i = 0; i < NB_OF_FLAGS; i++){
 80039fa:	2300      	movs	r3, #0
 80039fc:	607b      	str	r3, [r7, #4]
 80039fe:	e007      	b.n	8003a10 <MRT_external_flash_Init+0x1c>
		FLAGS_NULL_BUFFER[i] = 0; //Setup the flags null buffer for the correct number of values
 8003a00:	4a13      	ldr	r2, [pc, #76]	; (8003a50 <MRT_external_flash_Init+0x5c>)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4413      	add	r3, r2
 8003a06:	2200      	movs	r2, #0
 8003a08:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	607b      	str	r3, [r7, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	ddf4      	ble.n	8003a00 <MRT_external_flash_Init+0xc>
	}

	if (!W25qxx_Init()) {
 8003a16:	f000 fc83 	bl	8004320 <W25qxx_Init>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	f083 0301 	eor.w	r3, r3, #1
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <MRT_external_flash_Init+0x36>
		Error_Handler(); // hangs and blinks LEDF
 8003a26:	f7fe ff63 	bl	80028f0 <Error_Handler>
	}

	//Retrieve flags
	W25qxx_ReadSector(ext_flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8003a2a:	2305      	movs	r3, #5
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	2101      	movs	r1, #1
 8003a30:	4808      	ldr	r0, [pc, #32]	; (8003a54 <MRT_external_flash_Init+0x60>)
 8003a32:	f001 f84f 	bl	8004ad4 <W25qxx_ReadSector>

	//Retrieve RTC time (last recorded)
	W25qxx_ReadSector(ext_flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003a36:	2304      	movs	r3, #4
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2102      	movs	r1, #2
 8003a3c:	4806      	ldr	r0, [pc, #24]	; (8003a58 <MRT_external_flash_Init+0x64>)
 8003a3e:	f001 f849 	bl	8004ad4 <W25qxx_ReadSector>

	//Assign each value read to their variable
	MRT_updateExternalFlashValues();
 8003a42:	f000 f843 	bl	8003acc <MRT_updateExternalFlashValues>
}
 8003a46:	bf00      	nop
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	20005f54 	.word	0x20005f54
 8003a54:	20005f60 	.word	0x20005f60
 8003a58:	20005f5c 	.word	0x20005f5c

08003a5c <MRT_updateExternalFlashBuffers>:


void MRT_updateExternalFlashBuffers(void){
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003a62:	2300      	movs	r3, #0
 8003a64:	607b      	str	r3, [r7, #4]
 8003a66:	e00c      	b.n	8003a82 <MRT_updateExternalFlashBuffers+0x26>
		ext_flash_flags_buffer[i] = *ext_flash_flags[i];
 8003a68:	4a14      	ldr	r2, [pc, #80]	; (8003abc <MRT_updateExternalFlashBuffers+0x60>)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a70:	7819      	ldrb	r1, [r3, #0]
 8003a72:	4a13      	ldr	r2, [pc, #76]	; (8003ac0 <MRT_updateExternalFlashBuffers+0x64>)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4413      	add	r3, r2
 8003a78:	460a      	mov	r2, r1
 8003a7a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	607b      	str	r3, [r7, #4]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	ddef      	ble.n	8003a68 <MRT_updateExternalFlashBuffers+0xc>
	}
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003a88:	2300      	movs	r3, #0
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	e00c      	b.n	8003aa8 <MRT_updateExternalFlashBuffers+0x4c>
		ext_flash_time_buffer[i] = *ext_flash_time[i];
 8003a8e:	4a0d      	ldr	r2, [pc, #52]	; (8003ac4 <MRT_updateExternalFlashBuffers+0x68>)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a96:	7819      	ldrb	r1, [r3, #0]
 8003a98:	4a0b      	ldr	r2, [pc, #44]	; (8003ac8 <MRT_updateExternalFlashBuffers+0x6c>)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	460a      	mov	r2, r1
 8003aa0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	603b      	str	r3, [r7, #0]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	ddef      	ble.n	8003a8e <MRT_updateExternalFlashBuffers+0x32>
	}
}
 8003aae:	bf00      	nop
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	2000008c 	.word	0x2000008c
 8003ac0:	20005f60 	.word	0x20005f60
 8003ac4:	200000a0 	.word	0x200000a0
 8003ac8:	20005f5c 	.word	0x20005f5c

08003acc <MRT_updateExternalFlashValues>:


void MRT_updateExternalFlashValues(void){
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	607b      	str	r3, [r7, #4]
 8003ad6:	e00b      	b.n	8003af0 <MRT_updateExternalFlashValues+0x24>
		*ext_flash_flags[i] = ext_flash_flags_buffer[i];
 8003ad8:	4a13      	ldr	r2, [pc, #76]	; (8003b28 <MRT_updateExternalFlashValues+0x5c>)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ae0:	4912      	ldr	r1, [pc, #72]	; (8003b2c <MRT_updateExternalFlashValues+0x60>)
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	440a      	add	r2, r1
 8003ae6:	7812      	ldrb	r2, [r2, #0]
 8003ae8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3301      	adds	r3, #1
 8003aee:	607b      	str	r3, [r7, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	ddf0      	ble.n	8003ad8 <MRT_updateExternalFlashValues+0xc>
	}
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003af6:	2300      	movs	r3, #0
 8003af8:	603b      	str	r3, [r7, #0]
 8003afa:	e00b      	b.n	8003b14 <MRT_updateExternalFlashValues+0x48>
		*ext_flash_time[i] = ext_flash_time_buffer[i];
 8003afc:	4a0c      	ldr	r2, [pc, #48]	; (8003b30 <MRT_updateExternalFlashValues+0x64>)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b04:	490b      	ldr	r1, [pc, #44]	; (8003b34 <MRT_updateExternalFlashValues+0x68>)
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	440a      	add	r2, r1
 8003b0a:	7812      	ldrb	r2, [r2, #0]
 8003b0c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	3301      	adds	r3, #1
 8003b12:	603b      	str	r3, [r7, #0]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	2b03      	cmp	r3, #3
 8003b18:	ddf0      	ble.n	8003afc <MRT_updateExternalFlashValues+0x30>
	}
}
 8003b1a:	bf00      	nop
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	2000008c 	.word	0x2000008c
 8003b2c:	20005f60 	.word	0x20005f60
 8003b30:	200000a0 	.word	0x200000a0
 8003b34:	20005f5c 	.word	0x20005f5c

08003b38 <MRT_clearExternalFlash>:


void MRT_clearExternalFlash(void){
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
	//Clear flags
	W25qxx_EraseSector(FLAGS_SECTOR);
 8003b3c:	2001      	movs	r0, #1
 8003b3e:	f000 fd41 	bl	80045c4 <W25qxx_EraseSector>
	W25qxx_WriteSector(FLAGS_NULL_BUFFER, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8003b42:	2305      	movs	r3, #5
 8003b44:	2200      	movs	r2, #0
 8003b46:	2101      	movs	r1, #1
 8003b48:	4806      	ldr	r0, [pc, #24]	; (8003b64 <MRT_clearExternalFlash+0x2c>)
 8003b4a:	f000 fe85 	bl	8004858 <W25qxx_WriteSector>

	//Clear RTC time (last recorded)
	W25qxx_EraseSector(RTC_SECTOR);
 8003b4e:	2002      	movs	r0, #2
 8003b50:	f000 fd38 	bl	80045c4 <W25qxx_EraseSector>
	W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003b54:	2304      	movs	r3, #4
 8003b56:	2200      	movs	r2, #0
 8003b58:	2102      	movs	r1, #2
 8003b5a:	4803      	ldr	r0, [pc, #12]	; (8003b68 <MRT_clearExternalFlash+0x30>)
 8003b5c:	f000 fe7c 	bl	8004858 <W25qxx_WriteSector>
}
 8003b60:	bf00      	nop
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	20005f54 	.word	0x20005f54
 8003b68:	200003d4 	.word	0x200003d4

08003b6c <MRT_saveFlagValue>:
//Public functions

/*
 * Save a flag value (value updated outside the function)
 */
void MRT_saveFlagValue(rtc_backup_reg state){
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	4603      	mov	r3, r0
 8003b74:	71fb      	strb	r3, [r7, #7]
	//Write new flags to flash memory
	MRT_updateExternalFlashBuffers();
 8003b76:	f7ff ff71 	bl	8003a5c <MRT_updateExternalFlashBuffers>
	W25qxx_EraseSector(FLAGS_SECTOR);
 8003b7a:	2001      	movs	r0, #1
 8003b7c:	f000 fd22 	bl	80045c4 <W25qxx_EraseSector>
	W25qxx_WriteSector(ext_flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8003b80:	2305      	movs	r3, #5
 8003b82:	2200      	movs	r2, #0
 8003b84:	2101      	movs	r1, #1
 8003b86:	4808      	ldr	r0, [pc, #32]	; (8003ba8 <MRT_saveFlagValue+0x3c>)
 8003b88:	f000 fe66 	bl	8004858 <W25qxx_WriteSector>

	//Write new flag to RTC backup register
	MRT_RTC_setBackupReg(state, *rtc_bckp_regs[state]);
 8003b8c:	79fb      	ldrb	r3, [r7, #7]
 8003b8e:	4a07      	ldr	r2, [pc, #28]	; (8003bac <MRT_saveFlagValue+0x40>)
 8003b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	79fb      	ldrb	r3, [r7, #7]
 8003b98:	4611      	mov	r1, r2
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff f97a 	bl	8002e94 <MRT_RTC_setBackupReg>
}
 8003ba0:	bf00      	nop
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	20005f60 	.word	0x20005f60
 8003bac:	20000000 	.word	0x20000000

08003bb0 <MRT_checkFlagsValues>:


/*
 * Check for memory issues
 */
uint8_t MRT_checkFlagsValues(rtc_backup_reg val_index, uint32_t max_val){
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	6039      	str	r1, [r7, #0]
 8003bba:	71fb      	strb	r3, [r7, #7]

	uint8_t ret = true;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	73fb      	strb	r3, [r7, #15]

	//Check for a random value (unsigned int so can't be negative)
	if (*rtc_bckp_regs[val_index] > max_val){
 8003bc0:	79fb      	ldrb	r3, [r7, #7]
 8003bc2:	4a2e      	ldr	r2, [pc, #184]	; (8003c7c <MRT_checkFlagsValues+0xcc>)
 8003bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d207      	bcs.n	8003be0 <MRT_checkFlagsValues+0x30>
		*rtc_bckp_regs[val_index] = 0;
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
 8003bd2:	4a2a      	ldr	r2, [pc, #168]	; (8003c7c <MRT_checkFlagsValues+0xcc>)
 8003bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
		ret = false;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	73fb      	strb	r3, [r7, #15]
	}
	if (*ext_flash_flags[val_index] > max_val){
 8003be0:	79fb      	ldrb	r3, [r7, #7]
 8003be2:	4a27      	ldr	r2, [pc, #156]	; (8003c80 <MRT_checkFlagsValues+0xd0>)
 8003be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	461a      	mov	r2, r3
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d207      	bcs.n	8003c02 <MRT_checkFlagsValues+0x52>
		*ext_flash_flags[val_index] = 0;
 8003bf2:	79fb      	ldrb	r3, [r7, #7]
 8003bf4:	4a22      	ldr	r2, [pc, #136]	; (8003c80 <MRT_checkFlagsValues+0xd0>)
 8003bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	701a      	strb	r2, [r3, #0]
		ret = false;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	73fb      	strb	r3, [r7, #15]
	}

	if (*rtc_bckp_regs[val_index] != *ext_flash_flags[val_index]){
 8003c02:	79fb      	ldrb	r3, [r7, #7]
 8003c04:	4a1d      	ldr	r2, [pc, #116]	; (8003c7c <MRT_checkFlagsValues+0xcc>)
 8003c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	79fa      	ldrb	r2, [r7, #7]
 8003c0e:	491c      	ldr	r1, [pc, #112]	; (8003c80 <MRT_checkFlagsValues+0xd0>)
 8003c10:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003c14:	7812      	ldrb	r2, [r2, #0]
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d028      	beq.n	8003c6c <MRT_checkFlagsValues+0xbc>
		*rtc_bckp_regs[val_index] = MAX(*rtc_bckp_regs[val_index], *ext_flash_flags[val_index]);
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	4a18      	ldr	r2, [pc, #96]	; (8003c80 <MRT_checkFlagsValues+0xd0>)
 8003c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	4618      	mov	r0, r3
 8003c26:	79fb      	ldrb	r3, [r7, #7]
 8003c28:	4a14      	ldr	r2, [pc, #80]	; (8003c7c <MRT_checkFlagsValues+0xcc>)
 8003c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	79fb      	ldrb	r3, [r7, #7]
 8003c32:	4912      	ldr	r1, [pc, #72]	; (8003c7c <MRT_checkFlagsValues+0xcc>)
 8003c34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c38:	4282      	cmp	r2, r0
 8003c3a:	bf38      	it	cc
 8003c3c:	4602      	movcc	r2, r0
 8003c3e:	601a      	str	r2, [r3, #0]
		*ext_flash_flags[val_index] = MAX(*rtc_bckp_regs[val_index], *ext_flash_flags[val_index]);
 8003c40:	79fb      	ldrb	r3, [r7, #7]
 8003c42:	4a0f      	ldr	r2, [pc, #60]	; (8003c80 <MRT_checkFlagsValues+0xd0>)
 8003c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	79fb      	ldrb	r3, [r7, #7]
 8003c4e:	4a0b      	ldr	r2, [pc, #44]	; (8003c7c <MRT_checkFlagsValues+0xcc>)
 8003c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4299      	cmp	r1, r3
 8003c58:	bf38      	it	cc
 8003c5a:	4619      	movcc	r1, r3
 8003c5c:	79fb      	ldrb	r3, [r7, #7]
 8003c5e:	4a08      	ldr	r2, [pc, #32]	; (8003c80 <MRT_checkFlagsValues+0xd0>)
 8003c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c64:	b2ca      	uxtb	r2, r1
 8003c66:	701a      	strb	r2, [r3, #0]
		ret = false;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	20000000 	.word	0x20000000
 8003c80:	2000008c 	.word	0x2000008c

08003c84 <MRT_saveTotalTime>:
//Public functions

/*
 * Update every time values in memory
 */
void MRT_saveTotalTime(void){
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0

	//Update variables
	MRT_updateTimeValues();
 8003c88:	f000 f890 	bl	8003dac <MRT_updateTimeValues>

	//Write new RTC time to external flash
	MRT_updateExternalFlashBuffers();
 8003c8c:	f7ff fee6 	bl	8003a5c <MRT_updateExternalFlashBuffers>
	W25qxx_EraseSector(RTC_SECTOR);
 8003c90:	2002      	movs	r0, #2
 8003c92:	f000 fc97 	bl	80045c4 <W25qxx_EraseSector>
	W25qxx_WriteSector(ext_flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003c96:	2304      	movs	r3, #4
 8003c98:	2200      	movs	r2, #0
 8003c9a:	2102      	movs	r1, #2
 8003c9c:	480e      	ldr	r0, [pc, #56]	; (8003cd8 <MRT_saveTotalTime+0x54>)
 8003c9e:	f000 fddb 	bl	8004858 <W25qxx_WriteSector>

	//Write new RTC time to backup registers
	MRT_RTC_setBackupReg(RTC_HOUR, rtc_bckp_reg_hour);
 8003ca2:	4b0e      	ldr	r3, [pc, #56]	; (8003cdc <MRT_saveTotalTime+0x58>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	2005      	movs	r0, #5
 8003caa:	f7ff f8f3 	bl	8002e94 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_MINUTE, rtc_bckp_reg_min);
 8003cae:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <MRT_saveTotalTime+0x5c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	2006      	movs	r0, #6
 8003cb6:	f7ff f8ed 	bl	8002e94 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_SECOND, rtc_bckp_reg_sec);
 8003cba:	4b0a      	ldr	r3, [pc, #40]	; (8003ce4 <MRT_saveTotalTime+0x60>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	2007      	movs	r0, #7
 8003cc2:	f7ff f8e7 	bl	8002e94 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_SUBSEC, rtc_bckp_reg_subsec);
 8003cc6:	4b08      	ldr	r3, [pc, #32]	; (8003ce8 <MRT_saveTotalTime+0x64>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4619      	mov	r1, r3
 8003ccc:	2008      	movs	r0, #8
 8003cce:	f7ff f8e1 	bl	8002e94 <MRT_RTC_setBackupReg>
}
 8003cd2:	bf00      	nop
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20005f5c 	.word	0x20005f5c
 8003cdc:	2000038c 	.word	0x2000038c
 8003ce0:	20000390 	.word	0x20000390
 8003ce4:	20000394 	.word	0x20000394
 8003ce8:	20000398 	.word	0x20000398

08003cec <MRT_resetTotalTime>:


void MRT_resetTotalTime(void){
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0

	//Clear RTC time (last recorded) in external flash
	W25qxx_EraseSector(RTC_SECTOR);
 8003cf2:	2002      	movs	r0, #2
 8003cf4:	f000 fc66 	bl	80045c4 <W25qxx_EraseSector>
	W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003cf8:	2304      	movs	r3, #4
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	2102      	movs	r1, #2
 8003cfe:	4817      	ldr	r0, [pc, #92]	; (8003d5c <MRT_resetTotalTime+0x70>)
 8003d00:	f000 fdaa 	bl	8004858 <W25qxx_WriteSector>

	//Clear RTC time in backup registers
	MRT_RTC_setBackupReg(RTC_HOUR, 0);
 8003d04:	2100      	movs	r1, #0
 8003d06:	2005      	movs	r0, #5
 8003d08:	f7ff f8c4 	bl	8002e94 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_MINUTE, 0);
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	2006      	movs	r0, #6
 8003d10:	f7ff f8c0 	bl	8002e94 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_SECOND, 0);
 8003d14:	2100      	movs	r1, #0
 8003d16:	2007      	movs	r0, #7
 8003d18:	f7ff f8bc 	bl	8002e94 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_SUBSEC, 0);
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	2008      	movs	r0, #8
 8003d20:	f7ff f8b8 	bl	8002e94 <MRT_RTC_setBackupReg>

	//Update variables (to 0)
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003d24:	2300      	movs	r3, #0
 8003d26:	607b      	str	r3, [r7, #4]
 8003d28:	e00f      	b.n	8003d4a <MRT_resetTotalTime+0x5e>
	  *ext_flash_time[i] = 0x0;
 8003d2a:	4a0d      	ldr	r2, [pc, #52]	; (8003d60 <MRT_resetTotalTime+0x74>)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d32:	2200      	movs	r2, #0
 8003d34:	701a      	strb	r2, [r3, #0]
	  *rtc_bckp_regs[i + NB_OF_FLAGS] = 0x0;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3305      	adds	r3, #5
 8003d3a:	4a0a      	ldr	r2, [pc, #40]	; (8003d64 <MRT_resetTotalTime+0x78>)
 8003d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3301      	adds	r3, #1
 8003d48:	607b      	str	r3, [r7, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b03      	cmp	r3, #3
 8003d4e:	ddec      	ble.n	8003d2a <MRT_resetTotalTime+0x3e>
	}
}
 8003d50:	bf00      	nop
 8003d52:	bf00      	nop
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	200003d4 	.word	0x200003d4
 8003d60:	200000a0 	.word	0x200000a0
 8003d64:	20000000 	.word	0x20000000

08003d68 <MRT_saveTimeValue>:
//Private functions

/*
 * Save an RTC value (value updated outside the function)
 */
void MRT_saveTimeValue(rtc_backup_reg state){
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	71fb      	strb	r3, [r7, #7]

	//Write new RTC time to flash memory
	MRT_updateExternalFlashBuffers();
 8003d72:	f7ff fe73 	bl	8003a5c <MRT_updateExternalFlashBuffers>
	W25qxx_EraseSector(RTC_SECTOR);
 8003d76:	2002      	movs	r0, #2
 8003d78:	f000 fc24 	bl	80045c4 <W25qxx_EraseSector>
	W25qxx_WriteSector(ext_flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003d7c:	2304      	movs	r3, #4
 8003d7e:	2200      	movs	r2, #0
 8003d80:	2102      	movs	r1, #2
 8003d82:	4808      	ldr	r0, [pc, #32]	; (8003da4 <MRT_saveTimeValue+0x3c>)
 8003d84:	f000 fd68 	bl	8004858 <W25qxx_WriteSector>

	//Write new RTC time to backup registers
	MRT_RTC_setBackupReg(state, *rtc_bckp_regs[state]);
 8003d88:	79fb      	ldrb	r3, [r7, #7]
 8003d8a:	4a07      	ldr	r2, [pc, #28]	; (8003da8 <MRT_saveTimeValue+0x40>)
 8003d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	79fb      	ldrb	r3, [r7, #7]
 8003d94:	4611      	mov	r1, r2
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff f87c 	bl	8002e94 <MRT_RTC_setBackupReg>
}
 8003d9c:	bf00      	nop
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	20005f5c 	.word	0x20005f5c
 8003da8:	20000000 	.word	0x20000000

08003dac <MRT_updateTimeValues>:


/*
 * Update all time values
 */
void MRT_updateTimeValues(void){
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
	//External Flash
	ext_flash_hour = prev_hour;
 8003db0:	4b13      	ldr	r3, [pc, #76]	; (8003e00 <MRT_updateTimeValues+0x54>)
 8003db2:	781a      	ldrb	r2, [r3, #0]
 8003db4:	4b13      	ldr	r3, [pc, #76]	; (8003e04 <MRT_updateTimeValues+0x58>)
 8003db6:	701a      	strb	r2, [r3, #0]
	ext_flash_min = prev_min;
 8003db8:	4b13      	ldr	r3, [pc, #76]	; (8003e08 <MRT_updateTimeValues+0x5c>)
 8003dba:	781a      	ldrb	r2, [r3, #0]
 8003dbc:	4b13      	ldr	r3, [pc, #76]	; (8003e0c <MRT_updateTimeValues+0x60>)
 8003dbe:	701a      	strb	r2, [r3, #0]
	ext_flash_sec = prev_sec;
 8003dc0:	4b13      	ldr	r3, [pc, #76]	; (8003e10 <MRT_updateTimeValues+0x64>)
 8003dc2:	781a      	ldrb	r2, [r3, #0]
 8003dc4:	4b13      	ldr	r3, [pc, #76]	; (8003e14 <MRT_updateTimeValues+0x68>)
 8003dc6:	701a      	strb	r2, [r3, #0]
	ext_flash_subsec = prev_subsec;
 8003dc8:	4b13      	ldr	r3, [pc, #76]	; (8003e18 <MRT_updateTimeValues+0x6c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a13      	ldr	r2, [pc, #76]	; (8003e1c <MRT_updateTimeValues+0x70>)
 8003dce:	6013      	str	r3, [r2, #0]

	//RTC backup registers
	rtc_bckp_reg_hour = prev_hour;
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <MRT_updateTimeValues+0x54>)
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	4b12      	ldr	r3, [pc, #72]	; (8003e20 <MRT_updateTimeValues+0x74>)
 8003dd8:	601a      	str	r2, [r3, #0]
	rtc_bckp_reg_min = prev_min;
 8003dda:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <MRT_updateTimeValues+0x5c>)
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	461a      	mov	r2, r3
 8003de0:	4b10      	ldr	r3, [pc, #64]	; (8003e24 <MRT_updateTimeValues+0x78>)
 8003de2:	601a      	str	r2, [r3, #0]
	rtc_bckp_reg_sec = prev_sec;
 8003de4:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <MRT_updateTimeValues+0x64>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	461a      	mov	r2, r3
 8003dea:	4b0f      	ldr	r3, [pc, #60]	; (8003e28 <MRT_updateTimeValues+0x7c>)
 8003dec:	601a      	str	r2, [r3, #0]
	rtc_bckp_reg_subsec = prev_subsec;
 8003dee:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <MRT_updateTimeValues+0x6c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a0e      	ldr	r2, [pc, #56]	; (8003e2c <MRT_updateTimeValues+0x80>)
 8003df4:	6013      	str	r3, [r2, #0]
}
 8003df6:	bf00      	nop
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	200003dd 	.word	0x200003dd
 8003e04:	200003cb 	.word	0x200003cb
 8003e08:	200003de 	.word	0x200003de
 8003e0c:	200003cc 	.word	0x200003cc
 8003e10:	200003df 	.word	0x200003df
 8003e14:	200003cd 	.word	0x200003cd
 8003e18:	200003e0 	.word	0x200003e0
 8003e1c:	200003d0 	.word	0x200003d0
 8003e20:	2000038c 	.word	0x2000038c
 8003e24:	20000390 	.word	0x20000390
 8003e28:	20000394 	.word	0x20000394
 8003e2c:	20000398 	.word	0x20000398

08003e30 <MRT_checkTimeValues>:


/*
 * Check for memory issues
 */
uint8_t MRT_checkTimeValues(rtc_backup_reg val_index, uint32_t max_val){
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	6039      	str	r1, [r7, #0]
 8003e3a:	71fb      	strb	r3, [r7, #7]

	uint8_t ret = true;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	73fb      	strb	r3, [r7, #15]

	//Check for a random value (unsigned int so can't be negative)
	if (*rtc_bckp_regs[val_index] > max_val){
 8003e40:	79fb      	ldrb	r3, [r7, #7]
 8003e42:	4a31      	ldr	r2, [pc, #196]	; (8003f08 <MRT_checkTimeValues+0xd8>)
 8003e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d207      	bcs.n	8003e60 <MRT_checkTimeValues+0x30>
		*rtc_bckp_regs[val_index] = 0;
 8003e50:	79fb      	ldrb	r3, [r7, #7]
 8003e52:	4a2d      	ldr	r2, [pc, #180]	; (8003f08 <MRT_checkTimeValues+0xd8>)
 8003e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]
		ret = false;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	73fb      	strb	r3, [r7, #15]
	}
	if (*ext_flash_time[val_index - NB_OF_FLAGS] > max_val){
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	3b05      	subs	r3, #5
 8003e64:	4a29      	ldr	r2, [pc, #164]	; (8003f0c <MRT_checkTimeValues+0xdc>)
 8003e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d208      	bcs.n	8003e86 <MRT_checkTimeValues+0x56>
		*ext_flash_time[val_index - NB_OF_FLAGS] = 0;
 8003e74:	79fb      	ldrb	r3, [r7, #7]
 8003e76:	3b05      	subs	r3, #5
 8003e78:	4a24      	ldr	r2, [pc, #144]	; (8003f0c <MRT_checkTimeValues+0xdc>)
 8003e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	701a      	strb	r2, [r3, #0]
		ret = false;
 8003e82:	2300      	movs	r3, #0
 8003e84:	73fb      	strb	r3, [r7, #15]
	}

	if (*rtc_bckp_regs[val_index] != *ext_flash_time[val_index - NB_OF_FLAGS]){
 8003e86:	79fb      	ldrb	r3, [r7, #7]
 8003e88:	4a1f      	ldr	r2, [pc, #124]	; (8003f08 <MRT_checkTimeValues+0xd8>)
 8003e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	79fa      	ldrb	r2, [r7, #7]
 8003e92:	3a05      	subs	r2, #5
 8003e94:	491d      	ldr	r1, [pc, #116]	; (8003f0c <MRT_checkTimeValues+0xdc>)
 8003e96:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003e9a:	7812      	ldrb	r2, [r2, #0]
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d02b      	beq.n	8003ef8 <MRT_checkTimeValues+0xc8>
		*rtc_bckp_regs[val_index] = MAX(*rtc_bckp_regs[val_index], *ext_flash_time[val_index - NB_OF_FLAGS]);
 8003ea0:	79fb      	ldrb	r3, [r7, #7]
 8003ea2:	3b05      	subs	r3, #5
 8003ea4:	4a19      	ldr	r2, [pc, #100]	; (8003f0c <MRT_checkTimeValues+0xdc>)
 8003ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	79fb      	ldrb	r3, [r7, #7]
 8003eb0:	4a15      	ldr	r2, [pc, #84]	; (8003f08 <MRT_checkTimeValues+0xd8>)
 8003eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	79fb      	ldrb	r3, [r7, #7]
 8003eba:	4913      	ldr	r1, [pc, #76]	; (8003f08 <MRT_checkTimeValues+0xd8>)
 8003ebc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ec0:	4282      	cmp	r2, r0
 8003ec2:	bf38      	it	cc
 8003ec4:	4602      	movcc	r2, r0
 8003ec6:	601a      	str	r2, [r3, #0]
		*ext_flash_time[val_index - NB_OF_FLAGS] = MAX(*rtc_bckp_regs[val_index], *ext_flash_time[val_index - NB_OF_FLAGS]);
 8003ec8:	79fb      	ldrb	r3, [r7, #7]
 8003eca:	3b05      	subs	r3, #5
 8003ecc:	4a0f      	ldr	r2, [pc, #60]	; (8003f0c <MRT_checkTimeValues+0xdc>)
 8003ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	79fb      	ldrb	r3, [r7, #7]
 8003ed8:	4a0b      	ldr	r2, [pc, #44]	; (8003f08 <MRT_checkTimeValues+0xd8>)
 8003eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4299      	cmp	r1, r3
 8003ee2:	bf38      	it	cc
 8003ee4:	4619      	movcc	r1, r3
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	3b05      	subs	r3, #5
 8003eea:	4a08      	ldr	r2, [pc, #32]	; (8003f0c <MRT_checkTimeValues+0xdc>)
 8003eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ef0:	b2ca      	uxtb	r2, r1
 8003ef2:	701a      	strb	r2, [r3, #0]
		ret = false;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	20000000 	.word	0x20000000
 8003f0c:	200000a0 	.word	0x200000a0

08003f10 <MRT_MEMORY_Init>:
//**************************************************//
//MISC


//Public
void MRT_MEMORY_Init(void){
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0

	//External flash
	MRT_external_flash_Init();
 8003f14:	f7ff fd6e 	bl	80039f4 <MRT_external_flash_Init>

	//Backup registers
	MRT_RTC_backup_regs_Init();
 8003f18:	f7fe ff0e 	bl	8002d38 <MRT_RTC_backup_regs_Init>

	//Get the previous flags and rtc time from memory
	MRT_stateRestoration();
 8003f1c:	f000 f802 	bl	8003f24 <MRT_stateRestoration>
			else {
			  Error_Handler();
			}
		#endif
	#endif
}
 8003f20:	bf00      	nop
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <MRT_stateRestoration>:


//Private

//Get the flags values and RTC time
void MRT_stateRestoration(void){
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0

	//Check for a wakeup
	MRT_checkWakeUp();
 8003f28:	f000 f8ca 	bl	80040c0 <MRT_checkWakeUp>

	//If RTC detected a wake up, update the flash memory and the backup registers
	if (wu_flag == 1){
 8003f2c:	4b51      	ldr	r3, [pc, #324]	; (8004074 <MRT_stateRestoration+0x150>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d111      	bne.n	8003f58 <MRT_stateRestoration+0x34>

		//Update values
		ext_flash_wu += 1;
 8003f34:	4b50      	ldr	r3, [pc, #320]	; (8004078 <MRT_stateRestoration+0x154>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	4b4e      	ldr	r3, [pc, #312]	; (8004078 <MRT_stateRestoration+0x154>)
 8003f3e:	701a      	strb	r2, [r3, #0]
		rtc_bckp_reg_wu += 1;
 8003f40:	4b4e      	ldr	r3, [pc, #312]	; (800407c <MRT_stateRestoration+0x158>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3301      	adds	r3, #1
 8003f46:	4a4d      	ldr	r2, [pc, #308]	; (800407c <MRT_stateRestoration+0x158>)
 8003f48:	6013      	str	r3, [r2, #0]

		//Check for memory issues¸
		MRT_checkFlagsValues(FC_STATE_WU, 2);
 8003f4a:	2102      	movs	r1, #2
 8003f4c:	2001      	movs	r0, #1
 8003f4e:	f7ff fe2f 	bl	8003bb0 <MRT_checkFlagsValues>

		//Update memory
		MRT_saveFlagValue(FC_STATE_WU);
 8003f52:	2001      	movs	r0, #1
 8003f54:	f7ff fe0a 	bl	8003b6c <MRT_saveFlagValue>
	}
	//Update the wu_flag value
	wu_flag = rtc_bckp_reg_wu;
 8003f58:	4b48      	ldr	r3, [pc, #288]	; (800407c <MRT_stateRestoration+0x158>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	4b45      	ldr	r3, [pc, #276]	; (8004074 <MRT_stateRestoration+0x150>)
 8003f60:	701a      	strb	r2, [r3, #0]


	//Check flags values

	//Reset flag
	if(MRT_checkFlagsValues(FC_STATE_RESET, 1) == false)	MRT_saveFlagValue(FC_STATE_RESET);
 8003f62:	2101      	movs	r1, #1
 8003f64:	2000      	movs	r0, #0
 8003f66:	f7ff fe23 	bl	8003bb0 <MRT_checkFlagsValues>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d102      	bne.n	8003f76 <MRT_stateRestoration+0x52>
 8003f70:	2000      	movs	r0, #0
 8003f72:	f7ff fdfb 	bl	8003b6c <MRT_saveFlagValue>
	reset_flag = rtc_bckp_reg_reset;
 8003f76:	4b42      	ldr	r3, [pc, #264]	; (8004080 <MRT_stateRestoration+0x15c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	4b41      	ldr	r3, [pc, #260]	; (8004084 <MRT_stateRestoration+0x160>)
 8003f7e:	701a      	strb	r2, [r3, #0]

	//Wake up flag (TODO double check??)
	if(MRT_checkFlagsValues(FC_STATE_WU, 1) == false)	MRT_saveFlagValue(FC_STATE_WU);
 8003f80:	2101      	movs	r1, #1
 8003f82:	2001      	movs	r0, #1
 8003f84:	f7ff fe14 	bl	8003bb0 <MRT_checkFlagsValues>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d102      	bne.n	8003f94 <MRT_stateRestoration+0x70>
 8003f8e:	2001      	movs	r0, #1
 8003f90:	f7ff fdec 	bl	8003b6c <MRT_saveFlagValue>
	wu_flag = rtc_bckp_reg_wu;
 8003f94:	4b39      	ldr	r3, [pc, #228]	; (800407c <MRT_stateRestoration+0x158>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	4b36      	ldr	r3, [pc, #216]	; (8004074 <MRT_stateRestoration+0x150>)
 8003f9c:	701a      	strb	r2, [r3, #0]

	//IWDG flag
	if(MRT_checkFlagsValues(FC_STATE_IWDG, 1) == false)	MRT_saveFlagValue(FC_STATE_IWDG);
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	2002      	movs	r0, #2
 8003fa2:	f7ff fe05 	bl	8003bb0 <MRT_checkFlagsValues>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d102      	bne.n	8003fb2 <MRT_stateRestoration+0x8e>
 8003fac:	2002      	movs	r0, #2
 8003fae:	f7ff fddd 	bl	8003b6c <MRT_saveFlagValue>
	iwdg_flag = rtc_bckp_reg_iwdg;
 8003fb2:	4b35      	ldr	r3, [pc, #212]	; (8004088 <MRT_stateRestoration+0x164>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	4b34      	ldr	r3, [pc, #208]	; (800408c <MRT_stateRestoration+0x168>)
 8003fba:	701a      	strb	r2, [r3, #0]

	//Apogee flag
	if(MRT_checkFlagsValues(FC_STATE_APOGEE, 1) == false)	MRT_saveFlagValue(FC_STATE_APOGEE);
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	2003      	movs	r0, #3
 8003fc0:	f7ff fdf6 	bl	8003bb0 <MRT_checkFlagsValues>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d102      	bne.n	8003fd0 <MRT_stateRestoration+0xac>
 8003fca:	2003      	movs	r0, #3
 8003fcc:	f7ff fdce 	bl	8003b6c <MRT_saveFlagValue>
	apogee_flag = rtc_bckp_reg_apogee;
 8003fd0:	4b2f      	ldr	r3, [pc, #188]	; (8004090 <MRT_stateRestoration+0x16c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	4b2f      	ldr	r3, [pc, #188]	; (8004094 <MRT_stateRestoration+0x170>)
 8003fd8:	701a      	strb	r2, [r3, #0]

	//Ejection state flag
	if(MRT_checkFlagsValues(FC_STATE_FLIGHT, 4) == false)	MRT_saveFlagValue(FC_STATE_FLIGHT);
 8003fda:	2104      	movs	r1, #4
 8003fdc:	2004      	movs	r0, #4
 8003fde:	f7ff fde7 	bl	8003bb0 <MRT_checkFlagsValues>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d102      	bne.n	8003fee <MRT_stateRestoration+0xca>
 8003fe8:	2004      	movs	r0, #4
 8003fea:	f7ff fdbf 	bl	8003b6c <MRT_saveFlagValue>
	ejection_stage_flag = rtc_bckp_reg_ejection_stage;
 8003fee:	4b2a      	ldr	r3, [pc, #168]	; (8004098 <MRT_stateRestoration+0x174>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	4b29      	ldr	r3, [pc, #164]	; (800409c <MRT_stateRestoration+0x178>)
 8003ff6:	701a      	strb	r2, [r3, #0]


	//Check RTC time values
	//Hours
	if(MRT_checkTimeValues(RTC_HOUR, 23) == false)	MRT_saveTimeValue(RTC_HOUR);
 8003ff8:	2117      	movs	r1, #23
 8003ffa:	2005      	movs	r0, #5
 8003ffc:	f7ff ff18 	bl	8003e30 <MRT_checkTimeValues>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d102      	bne.n	800400c <MRT_stateRestoration+0xe8>
 8004006:	2005      	movs	r0, #5
 8004008:	f7ff feae 	bl	8003d68 <MRT_saveTimeValue>
	prev_hour = rtc_bckp_reg_hour;
 800400c:	4b24      	ldr	r3, [pc, #144]	; (80040a0 <MRT_stateRestoration+0x17c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	b2da      	uxtb	r2, r3
 8004012:	4b24      	ldr	r3, [pc, #144]	; (80040a4 <MRT_stateRestoration+0x180>)
 8004014:	701a      	strb	r2, [r3, #0]

	//Minutes
	if(MRT_checkTimeValues(RTC_MINUTE, 59) == false)	MRT_saveTimeValue(RTC_MINUTE);
 8004016:	213b      	movs	r1, #59	; 0x3b
 8004018:	2006      	movs	r0, #6
 800401a:	f7ff ff09 	bl	8003e30 <MRT_checkTimeValues>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d102      	bne.n	800402a <MRT_stateRestoration+0x106>
 8004024:	2006      	movs	r0, #6
 8004026:	f7ff fe9f 	bl	8003d68 <MRT_saveTimeValue>
	prev_min = rtc_bckp_reg_min;
 800402a:	4b1f      	ldr	r3, [pc, #124]	; (80040a8 <MRT_stateRestoration+0x184>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	b2da      	uxtb	r2, r3
 8004030:	4b1e      	ldr	r3, [pc, #120]	; (80040ac <MRT_stateRestoration+0x188>)
 8004032:	701a      	strb	r2, [r3, #0]

	//Seconds
	if(MRT_checkTimeValues(RTC_SECOND, 59) == false)	MRT_saveTimeValue(RTC_SECOND);
 8004034:	213b      	movs	r1, #59	; 0x3b
 8004036:	2007      	movs	r0, #7
 8004038:	f7ff fefa 	bl	8003e30 <MRT_checkTimeValues>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d102      	bne.n	8004048 <MRT_stateRestoration+0x124>
 8004042:	2007      	movs	r0, #7
 8004044:	f7ff fe90 	bl	8003d68 <MRT_saveTimeValue>
	prev_sec = rtc_bckp_reg_sec;
 8004048:	4b19      	ldr	r3, [pc, #100]	; (80040b0 <MRT_stateRestoration+0x18c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	b2da      	uxtb	r2, r3
 800404e:	4b19      	ldr	r3, [pc, #100]	; (80040b4 <MRT_stateRestoration+0x190>)
 8004050:	701a      	strb	r2, [r3, #0]

	//Sub-Seconds
	if(MRT_checkTimeValues(RTC_SUBSEC, 999) == false)	MRT_saveTimeValue(RTC_SUBSEC);
 8004052:	f240 31e7 	movw	r1, #999	; 0x3e7
 8004056:	2008      	movs	r0, #8
 8004058:	f7ff feea 	bl	8003e30 <MRT_checkTimeValues>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d102      	bne.n	8004068 <MRT_stateRestoration+0x144>
 8004062:	2008      	movs	r0, #8
 8004064:	f7ff fe80 	bl	8003d68 <MRT_saveTimeValue>
	prev_subsec = rtc_bckp_reg_subsec;
 8004068:	4b13      	ldr	r3, [pc, #76]	; (80040b8 <MRT_stateRestoration+0x194>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a13      	ldr	r2, [pc, #76]	; (80040bc <MRT_stateRestoration+0x198>)
 800406e:	6013      	str	r3, [r2, #0]
}
 8004070:	bf00      	nop
 8004072:	bd80      	pop	{r7, pc}
 8004074:	200003d9 	.word	0x200003d9
 8004078:	200003c7 	.word	0x200003c7
 800407c:	2000037c 	.word	0x2000037c
 8004080:	20000378 	.word	0x20000378
 8004084:	200003d8 	.word	0x200003d8
 8004088:	20000380 	.word	0x20000380
 800408c:	200003da 	.word	0x200003da
 8004090:	20000384 	.word	0x20000384
 8004094:	200003db 	.word	0x200003db
 8004098:	20000388 	.word	0x20000388
 800409c:	200003dc 	.word	0x200003dc
 80040a0:	2000038c 	.word	0x2000038c
 80040a4:	200003dd 	.word	0x200003dd
 80040a8:	20000390 	.word	0x20000390
 80040ac:	200003de 	.word	0x200003de
 80040b0:	20000394 	.word	0x20000394
 80040b4:	200003df 	.word	0x200003df
 80040b8:	20000398 	.word	0x20000398
 80040bc:	200003e0 	.word	0x200003e0

080040c0 <MRT_checkWakeUp>:


/*
 * Check if FC is back from wakeup
 */
void MRT_checkWakeUp(void){
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 80040c4:	4b0e      	ldr	r3, [pc, #56]	; (8004100 <MRT_checkWakeUp+0x40>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d112      	bne.n	80040f6 <MRT_checkWakeUp+0x36>
	{

		wu_flag = 1;
 80040d0:	4b0c      	ldr	r3, [pc, #48]	; (8004104 <MRT_checkWakeUp+0x44>)
 80040d2:	2201      	movs	r2, #1
 80040d4:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 80040d6:	4b0a      	ldr	r3, [pc, #40]	; (8004100 <MRT_checkWakeUp+0x40>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a09      	ldr	r2, [pc, #36]	; (8004100 <MRT_checkWakeUp+0x40>)
 80040dc:	f043 0308 	orr.w	r3, r3, #8
 80040e0:	6013      	str	r3, [r2, #0]

		println("Wakeup from STANDBY MODE");
 80040e2:	4809      	ldr	r0, [pc, #36]	; (8004108 <MRT_checkWakeUp+0x48>)
 80040e4:	f7fc fff2 	bl	80010cc <println>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 80040e8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80040ec:	f008 fa2a 	bl	800c544 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80040f0:	4806      	ldr	r0, [pc, #24]	; (800410c <MRT_checkWakeUp+0x4c>)
 80040f2:	f009 fe7f 	bl	800ddf4 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_clear_alarms_flags();
 80040f6:	f7fe fcff 	bl	8002af8 <MRT_clear_alarms_flags>
}
 80040fa:	bf00      	nop
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	40007000 	.word	0x40007000
 8004104:	200003d9 	.word	0x200003d9
 8004108:	0801abdc 	.word	0x0801abdc
 800410c:	20005c08 	.word	0x20005c08

08004110 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af02      	add	r7, sp, #8
 8004116:	4603      	mov	r3, r0
 8004118:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 800411a:	f107 020f 	add.w	r2, r7, #15
 800411e:	1df9      	adds	r1, r7, #7
 8004120:	2364      	movs	r3, #100	; 0x64
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	2301      	movs	r3, #1
 8004126:	4804      	ldr	r0, [pc, #16]	; (8004138 <W25qxx_Spi+0x28>)
 8004128:	f00a f9ce 	bl	800e4c8 <HAL_SPI_TransmitReceive>
	return ret;
 800412c:	7bfb      	ldrb	r3, [r7, #15]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	20005c80 	.word	0x20005c80

0800413c <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	2300      	movs	r3, #0
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	2300      	movs	r3, #0
 800414c:	607b      	str	r3, [r7, #4]
 800414e:	2300      	movs	r3, #0
 8004150:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004152:	2200      	movs	r2, #0
 8004154:	2140      	movs	r1, #64	; 0x40
 8004156:	4813      	ldr	r0, [pc, #76]	; (80041a4 <W25qxx_ReadID+0x68>)
 8004158:	f007 f940 	bl	800b3dc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 800415c:	209f      	movs	r0, #159	; 0x9f
 800415e:	f7ff ffd7 	bl	8004110 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004162:	20a5      	movs	r0, #165	; 0xa5
 8004164:	f7ff ffd4 	bl	8004110 <W25qxx_Spi>
 8004168:	4603      	mov	r3, r0
 800416a:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800416c:	20a5      	movs	r0, #165	; 0xa5
 800416e:	f7ff ffcf 	bl	8004110 <W25qxx_Spi>
 8004172:	4603      	mov	r3, r0
 8004174:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004176:	20a5      	movs	r0, #165	; 0xa5
 8004178:	f7ff ffca 	bl	8004110 <W25qxx_Spi>
 800417c:	4603      	mov	r3, r0
 800417e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004180:	2201      	movs	r2, #1
 8004182:	2140      	movs	r1, #64	; 0x40
 8004184:	4807      	ldr	r0, [pc, #28]	; (80041a4 <W25qxx_ReadID+0x68>)
 8004186:	f007 f929 	bl	800b3dc <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	041a      	lsls	r2, r3, #16
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	021b      	lsls	r3, r3, #8
 8004192:	4313      	orrs	r3, r2
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]
	return Temp;
 800419a:	68fb      	ldr	r3, [r7, #12]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	40020c00 	.word	0x40020c00

080041a8 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80041a8:	b590      	push	{r4, r7, lr}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80041ae:	2200      	movs	r2, #0
 80041b0:	2140      	movs	r1, #64	; 0x40
 80041b2:	4816      	ldr	r0, [pc, #88]	; (800420c <W25qxx_ReadUniqID+0x64>)
 80041b4:	f007 f912 	bl	800b3dc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 80041b8:	204b      	movs	r0, #75	; 0x4b
 80041ba:	f7ff ffa9 	bl	8004110 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80041be:	2300      	movs	r3, #0
 80041c0:	71fb      	strb	r3, [r7, #7]
 80041c2:	e005      	b.n	80041d0 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80041c4:	20a5      	movs	r0, #165	; 0xa5
 80041c6:	f7ff ffa3 	bl	8004110 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	3301      	adds	r3, #1
 80041ce:	71fb      	strb	r3, [r7, #7]
 80041d0:	79fb      	ldrb	r3, [r7, #7]
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	d9f6      	bls.n	80041c4 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 80041d6:	2300      	movs	r3, #0
 80041d8:	71bb      	strb	r3, [r7, #6]
 80041da:	e00b      	b.n	80041f4 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80041dc:	79bc      	ldrb	r4, [r7, #6]
 80041de:	20a5      	movs	r0, #165	; 0xa5
 80041e0:	f7ff ff96 	bl	8004110 <W25qxx_Spi>
 80041e4:	4603      	mov	r3, r0
 80041e6:	461a      	mov	r2, r3
 80041e8:	4b09      	ldr	r3, [pc, #36]	; (8004210 <W25qxx_ReadUniqID+0x68>)
 80041ea:	4423      	add	r3, r4
 80041ec:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 80041ee:	79bb      	ldrb	r3, [r7, #6]
 80041f0:	3301      	adds	r3, #1
 80041f2:	71bb      	strb	r3, [r7, #6]
 80041f4:	79bb      	ldrb	r3, [r7, #6]
 80041f6:	2b07      	cmp	r3, #7
 80041f8:	d9f0      	bls.n	80041dc <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80041fa:	2201      	movs	r2, #1
 80041fc:	2140      	movs	r1, #64	; 0x40
 80041fe:	4803      	ldr	r0, [pc, #12]	; (800420c <W25qxx_ReadUniqID+0x64>)
 8004200:	f007 f8ec 	bl	800b3dc <HAL_GPIO_WritePin>
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	bd90      	pop	{r4, r7, pc}
 800420c:	40020c00 	.word	0x40020c00
 8004210:	20005f68 	.word	0x20005f68

08004214 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004218:	2200      	movs	r2, #0
 800421a:	2140      	movs	r1, #64	; 0x40
 800421c:	4807      	ldr	r0, [pc, #28]	; (800423c <W25qxx_WriteEnable+0x28>)
 800421e:	f007 f8dd 	bl	800b3dc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8004222:	2006      	movs	r0, #6
 8004224:	f7ff ff74 	bl	8004110 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004228:	2201      	movs	r2, #1
 800422a:	2140      	movs	r1, #64	; 0x40
 800422c:	4803      	ldr	r0, [pc, #12]	; (800423c <W25qxx_WriteEnable+0x28>)
 800422e:	f007 f8d5 	bl	800b3dc <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8004232:	2001      	movs	r0, #1
 8004234:	f00c fb00 	bl	8010838 <osDelay>
}
 8004238:	bf00      	nop
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40020c00 	.word	0x40020c00

08004240 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	4603      	mov	r3, r0
 8004248:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 800424a:	2300      	movs	r3, #0
 800424c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800424e:	2200      	movs	r2, #0
 8004250:	2140      	movs	r1, #64	; 0x40
 8004252:	481c      	ldr	r0, [pc, #112]	; (80042c4 <W25qxx_ReadStatusRegister+0x84>)
 8004254:	f007 f8c2 	bl	800b3dc <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8004258:	79fb      	ldrb	r3, [r7, #7]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d10c      	bne.n	8004278 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 800425e:	2005      	movs	r0, #5
 8004260:	f7ff ff56 	bl	8004110 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004264:	20a5      	movs	r0, #165	; 0xa5
 8004266:	f7ff ff53 	bl	8004110 <W25qxx_Spi>
 800426a:	4603      	mov	r3, r0
 800426c:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 800426e:	4a16      	ldr	r2, [pc, #88]	; (80042c8 <W25qxx_ReadStatusRegister+0x88>)
 8004270:	7bfb      	ldrb	r3, [r7, #15]
 8004272:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8004276:	e01b      	b.n	80042b0 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8004278:	79fb      	ldrb	r3, [r7, #7]
 800427a:	2b02      	cmp	r3, #2
 800427c:	d10c      	bne.n	8004298 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 800427e:	2035      	movs	r0, #53	; 0x35
 8004280:	f7ff ff46 	bl	8004110 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004284:	20a5      	movs	r0, #165	; 0xa5
 8004286:	f7ff ff43 	bl	8004110 <W25qxx_Spi>
 800428a:	4603      	mov	r3, r0
 800428c:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 800428e:	4a0e      	ldr	r2, [pc, #56]	; (80042c8 <W25qxx_ReadStatusRegister+0x88>)
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8004296:	e00b      	b.n	80042b0 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8004298:	2015      	movs	r0, #21
 800429a:	f7ff ff39 	bl	8004110 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800429e:	20a5      	movs	r0, #165	; 0xa5
 80042a0:	f7ff ff36 	bl	8004110 <W25qxx_Spi>
 80042a4:	4603      	mov	r3, r0
 80042a6:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 80042a8:	4a07      	ldr	r2, [pc, #28]	; (80042c8 <W25qxx_ReadStatusRegister+0x88>)
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
 80042ac:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80042b0:	2201      	movs	r2, #1
 80042b2:	2140      	movs	r1, #64	; 0x40
 80042b4:	4803      	ldr	r0, [pc, #12]	; (80042c4 <W25qxx_ReadStatusRegister+0x84>)
 80042b6:	f007 f891 	bl	800b3dc <HAL_GPIO_WritePin>
	return status;
 80042ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40020c00 	.word	0x40020c00
 80042c8:	20005f68 	.word	0x20005f68

080042cc <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 80042d0:	2001      	movs	r0, #1
 80042d2:	f00c fab1 	bl	8010838 <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80042d6:	2200      	movs	r2, #0
 80042d8:	2140      	movs	r1, #64	; 0x40
 80042da:	480f      	ldr	r0, [pc, #60]	; (8004318 <W25qxx_WaitForWriteEnd+0x4c>)
 80042dc:	f007 f87e 	bl	800b3dc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 80042e0:	2005      	movs	r0, #5
 80042e2:	f7ff ff15 	bl	8004110 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80042e6:	20a5      	movs	r0, #165	; 0xa5
 80042e8:	f7ff ff12 	bl	8004110 <W25qxx_Spi>
 80042ec:	4603      	mov	r3, r0
 80042ee:	461a      	mov	r2, r3
 80042f0:	4b0a      	ldr	r3, [pc, #40]	; (800431c <W25qxx_WaitForWriteEnd+0x50>)
 80042f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 80042f6:	2001      	movs	r0, #1
 80042f8:	f00c fa9e 	bl	8010838 <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80042fc:	4b07      	ldr	r3, [pc, #28]	; (800431c <W25qxx_WaitForWriteEnd+0x50>)
 80042fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1ed      	bne.n	80042e6 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800430a:	2201      	movs	r2, #1
 800430c:	2140      	movs	r1, #64	; 0x40
 800430e:	4802      	ldr	r0, [pc, #8]	; (8004318 <W25qxx_WaitForWriteEnd+0x4c>)
 8004310:	f007 f864 	bl	800b3dc <HAL_GPIO_WritePin>
}
 8004314:	bf00      	nop
 8004316:	bd80      	pop	{r7, pc}
 8004318:	40020c00 	.word	0x40020c00
 800431c:	20005f68 	.word	0x20005f68

08004320 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8004326:	4b90      	ldr	r3, [pc, #576]	; (8004568 <W25qxx_Init+0x248>)
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 800432e:	e002      	b.n	8004336 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8004330:	2001      	movs	r0, #1
 8004332:	f00c fa81 	bl	8010838 <osDelay>
	while (HAL_GetTick() < 100)
 8004336:	f006 f939 	bl	800a5ac <HAL_GetTick>
 800433a:	4603      	mov	r3, r0
 800433c:	2b63      	cmp	r3, #99	; 0x63
 800433e:	d9f7      	bls.n	8004330 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004340:	2201      	movs	r2, #1
 8004342:	2140      	movs	r1, #64	; 0x40
 8004344:	4889      	ldr	r0, [pc, #548]	; (800456c <W25qxx_Init+0x24c>)
 8004346:	f007 f849 	bl	800b3dc <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 800434a:	2064      	movs	r0, #100	; 0x64
 800434c:	f00c fa74 	bl	8010838 <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 8004350:	4887      	ldr	r0, [pc, #540]	; (8004570 <W25qxx_Init+0x250>)
 8004352:	f011 fd29 	bl	8015da8 <puts>
#endif
	id = W25qxx_ReadID();
 8004356:	f7ff fef1 	bl	800413c <W25qxx_ReadID>
 800435a:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	4885      	ldr	r0, [pc, #532]	; (8004574 <W25qxx_Init+0x254>)
 8004360:	f011 fc9c 	bl	8015c9c <iprintf>
#endif
	switch (id & 0x000000FF)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	b2db      	uxtb	r3, r3
 8004368:	3b11      	subs	r3, #17
 800436a:	2b0f      	cmp	r3, #15
 800436c:	f200 808b 	bhi.w	8004486 <W25qxx_Init+0x166>
 8004370:	a201      	add	r2, pc, #4	; (adr r2, 8004378 <W25qxx_Init+0x58>)
 8004372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004376:	bf00      	nop
 8004378:	08004473 	.word	0x08004473
 800437c:	0800445f 	.word	0x0800445f
 8004380:	0800444b 	.word	0x0800444b
 8004384:	08004437 	.word	0x08004437
 8004388:	08004423 	.word	0x08004423
 800438c:	0800440f 	.word	0x0800440f
 8004390:	080043fb 	.word	0x080043fb
 8004394:	080043e5 	.word	0x080043e5
 8004398:	080043cf 	.word	0x080043cf
 800439c:	08004487 	.word	0x08004487
 80043a0:	08004487 	.word	0x08004487
 80043a4:	08004487 	.word	0x08004487
 80043a8:	08004487 	.word	0x08004487
 80043ac:	08004487 	.word	0x08004487
 80043b0:	08004487 	.word	0x08004487
 80043b4:	080043b9 	.word	0x080043b9
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 80043b8:	4b6b      	ldr	r3, [pc, #428]	; (8004568 <W25qxx_Init+0x248>)
 80043ba:	220a      	movs	r2, #10
 80043bc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 80043be:	4b6a      	ldr	r3, [pc, #424]	; (8004568 <W25qxx_Init+0x248>)
 80043c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043c4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 80043c6:	486c      	ldr	r0, [pc, #432]	; (8004578 <W25qxx_Init+0x258>)
 80043c8:	f011 fcee 	bl	8015da8 <puts>
#endif
		break;
 80043cc:	e064      	b.n	8004498 <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 80043ce:	4b66      	ldr	r3, [pc, #408]	; (8004568 <W25qxx_Init+0x248>)
 80043d0:	2209      	movs	r2, #9
 80043d2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 80043d4:	4b64      	ldr	r3, [pc, #400]	; (8004568 <W25qxx_Init+0x248>)
 80043d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043da:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 80043dc:	4867      	ldr	r0, [pc, #412]	; (800457c <W25qxx_Init+0x25c>)
 80043de:	f011 fce3 	bl	8015da8 <puts>
#endif
		break;
 80043e2:	e059      	b.n	8004498 <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 80043e4:	4b60      	ldr	r3, [pc, #384]	; (8004568 <W25qxx_Init+0x248>)
 80043e6:	2208      	movs	r2, #8
 80043e8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 80043ea:	4b5f      	ldr	r3, [pc, #380]	; (8004568 <W25qxx_Init+0x248>)
 80043ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043f0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 80043f2:	4863      	ldr	r0, [pc, #396]	; (8004580 <W25qxx_Init+0x260>)
 80043f4:	f011 fcd8 	bl	8015da8 <puts>
#endif
		break;
 80043f8:	e04e      	b.n	8004498 <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 80043fa:	4b5b      	ldr	r3, [pc, #364]	; (8004568 <W25qxx_Init+0x248>)
 80043fc:	2207      	movs	r2, #7
 80043fe:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8004400:	4b59      	ldr	r3, [pc, #356]	; (8004568 <W25qxx_Init+0x248>)
 8004402:	2280      	movs	r2, #128	; 0x80
 8004404:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 8004406:	485f      	ldr	r0, [pc, #380]	; (8004584 <W25qxx_Init+0x264>)
 8004408:	f011 fcce 	bl	8015da8 <puts>
#endif
		break;
 800440c:	e044      	b.n	8004498 <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 800440e:	4b56      	ldr	r3, [pc, #344]	; (8004568 <W25qxx_Init+0x248>)
 8004410:	2206      	movs	r2, #6
 8004412:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8004414:	4b54      	ldr	r3, [pc, #336]	; (8004568 <W25qxx_Init+0x248>)
 8004416:	2240      	movs	r2, #64	; 0x40
 8004418:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 800441a:	485b      	ldr	r0, [pc, #364]	; (8004588 <W25qxx_Init+0x268>)
 800441c:	f011 fcc4 	bl	8015da8 <puts>
#endif
		break;
 8004420:	e03a      	b.n	8004498 <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8004422:	4b51      	ldr	r3, [pc, #324]	; (8004568 <W25qxx_Init+0x248>)
 8004424:	2205      	movs	r2, #5
 8004426:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8004428:	4b4f      	ldr	r3, [pc, #316]	; (8004568 <W25qxx_Init+0x248>)
 800442a:	2220      	movs	r2, #32
 800442c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 800442e:	4857      	ldr	r0, [pc, #348]	; (800458c <W25qxx_Init+0x26c>)
 8004430:	f011 fcba 	bl	8015da8 <puts>
#endif
		break;
 8004434:	e030      	b.n	8004498 <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8004436:	4b4c      	ldr	r3, [pc, #304]	; (8004568 <W25qxx_Init+0x248>)
 8004438:	2204      	movs	r2, #4
 800443a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 800443c:	4b4a      	ldr	r3, [pc, #296]	; (8004568 <W25qxx_Init+0x248>)
 800443e:	2210      	movs	r2, #16
 8004440:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 8004442:	4853      	ldr	r0, [pc, #332]	; (8004590 <W25qxx_Init+0x270>)
 8004444:	f011 fcb0 	bl	8015da8 <puts>
#endif
		break;
 8004448:	e026      	b.n	8004498 <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 800444a:	4b47      	ldr	r3, [pc, #284]	; (8004568 <W25qxx_Init+0x248>)
 800444c:	2203      	movs	r2, #3
 800444e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8004450:	4b45      	ldr	r3, [pc, #276]	; (8004568 <W25qxx_Init+0x248>)
 8004452:	2208      	movs	r2, #8
 8004454:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 8004456:	484f      	ldr	r0, [pc, #316]	; (8004594 <W25qxx_Init+0x274>)
 8004458:	f011 fca6 	bl	8015da8 <puts>
#endif
		break;
 800445c:	e01c      	b.n	8004498 <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 800445e:	4b42      	ldr	r3, [pc, #264]	; (8004568 <W25qxx_Init+0x248>)
 8004460:	2202      	movs	r2, #2
 8004462:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8004464:	4b40      	ldr	r3, [pc, #256]	; (8004568 <W25qxx_Init+0x248>)
 8004466:	2204      	movs	r2, #4
 8004468:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 800446a:	484b      	ldr	r0, [pc, #300]	; (8004598 <W25qxx_Init+0x278>)
 800446c:	f011 fc9c 	bl	8015da8 <puts>
#endif
		break;
 8004470:	e012      	b.n	8004498 <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8004472:	4b3d      	ldr	r3, [pc, #244]	; (8004568 <W25qxx_Init+0x248>)
 8004474:	2201      	movs	r2, #1
 8004476:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8004478:	4b3b      	ldr	r3, [pc, #236]	; (8004568 <W25qxx_Init+0x248>)
 800447a:	2202      	movs	r2, #2
 800447c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 800447e:	4847      	ldr	r0, [pc, #284]	; (800459c <W25qxx_Init+0x27c>)
 8004480:	f011 fc92 	bl	8015da8 <puts>
#endif
		break;
 8004484:	e008      	b.n	8004498 <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 8004486:	4846      	ldr	r0, [pc, #280]	; (80045a0 <W25qxx_Init+0x280>)
 8004488:	f011 fc8e 	bl	8015da8 <puts>
#endif
		w25qxx.Lock = 0;
 800448c:	4b36      	ldr	r3, [pc, #216]	; (8004568 <W25qxx_Init+0x248>)
 800448e:	2200      	movs	r2, #0
 8004490:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8004494:	2300      	movs	r3, #0
 8004496:	e063      	b.n	8004560 <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 8004498:	4b33      	ldr	r3, [pc, #204]	; (8004568 <W25qxx_Init+0x248>)
 800449a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800449e:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 80044a0:	4b31      	ldr	r3, [pc, #196]	; (8004568 <W25qxx_Init+0x248>)
 80044a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80044a6:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 80044a8:	4b2f      	ldr	r3, [pc, #188]	; (8004568 <W25qxx_Init+0x248>)
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	4a2e      	ldr	r2, [pc, #184]	; (8004568 <W25qxx_Init+0x248>)
 80044b0:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80044b2:	4b2d      	ldr	r3, [pc, #180]	; (8004568 <W25qxx_Init+0x248>)
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	4a2c      	ldr	r2, [pc, #176]	; (8004568 <W25qxx_Init+0x248>)
 80044b8:	6912      	ldr	r2, [r2, #16]
 80044ba:	fb02 f303 	mul.w	r3, r2, r3
 80044be:	4a2a      	ldr	r2, [pc, #168]	; (8004568 <W25qxx_Init+0x248>)
 80044c0:	8952      	ldrh	r2, [r2, #10]
 80044c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80044c6:	4a28      	ldr	r2, [pc, #160]	; (8004568 <W25qxx_Init+0x248>)
 80044c8:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80044ca:	4b27      	ldr	r3, [pc, #156]	; (8004568 <W25qxx_Init+0x248>)
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	011b      	lsls	r3, r3, #4
 80044d0:	4a25      	ldr	r2, [pc, #148]	; (8004568 <W25qxx_Init+0x248>)
 80044d2:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80044d4:	4b24      	ldr	r3, [pc, #144]	; (8004568 <W25qxx_Init+0x248>)
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	4a23      	ldr	r2, [pc, #140]	; (8004568 <W25qxx_Init+0x248>)
 80044da:	6912      	ldr	r2, [r2, #16]
 80044dc:	fb02 f303 	mul.w	r3, r2, r3
 80044e0:	0a9b      	lsrs	r3, r3, #10
 80044e2:	4a21      	ldr	r2, [pc, #132]	; (8004568 <W25qxx_Init+0x248>)
 80044e4:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80044e6:	f7ff fe5f 	bl	80041a8 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80044ea:	2001      	movs	r0, #1
 80044ec:	f7ff fea8 	bl	8004240 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80044f0:	2002      	movs	r0, #2
 80044f2:	f7ff fea5 	bl	8004240 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80044f6:	2003      	movs	r0, #3
 80044f8:	f7ff fea2 	bl	8004240 <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 80044fc:	4b1a      	ldr	r3, [pc, #104]	; (8004568 <W25qxx_Init+0x248>)
 80044fe:	895b      	ldrh	r3, [r3, #10]
 8004500:	4619      	mov	r1, r3
 8004502:	4828      	ldr	r0, [pc, #160]	; (80045a4 <W25qxx_Init+0x284>)
 8004504:	f011 fbca 	bl	8015c9c <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 8004508:	4b17      	ldr	r3, [pc, #92]	; (8004568 <W25qxx_Init+0x248>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	4619      	mov	r1, r3
 800450e:	4826      	ldr	r0, [pc, #152]	; (80045a8 <W25qxx_Init+0x288>)
 8004510:	f011 fbc4 	bl	8015c9c <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 8004514:	4b14      	ldr	r3, [pc, #80]	; (8004568 <W25qxx_Init+0x248>)
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	4619      	mov	r1, r3
 800451a:	4824      	ldr	r0, [pc, #144]	; (80045ac <W25qxx_Init+0x28c>)
 800451c:	f011 fbbe 	bl	8015c9c <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 8004520:	4b11      	ldr	r3, [pc, #68]	; (8004568 <W25qxx_Init+0x248>)
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	4619      	mov	r1, r3
 8004526:	4822      	ldr	r0, [pc, #136]	; (80045b0 <W25qxx_Init+0x290>)
 8004528:	f011 fbb8 	bl	8015c9c <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 800452c:	4b0e      	ldr	r3, [pc, #56]	; (8004568 <W25qxx_Init+0x248>)
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	4619      	mov	r1, r3
 8004532:	4820      	ldr	r0, [pc, #128]	; (80045b4 <W25qxx_Init+0x294>)
 8004534:	f011 fbb2 	bl	8015c9c <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 8004538:	4b0b      	ldr	r3, [pc, #44]	; (8004568 <W25qxx_Init+0x248>)
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	4619      	mov	r1, r3
 800453e:	481e      	ldr	r0, [pc, #120]	; (80045b8 <W25qxx_Init+0x298>)
 8004540:	f011 fbac 	bl	8015c9c <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 8004544:	4b08      	ldr	r3, [pc, #32]	; (8004568 <W25qxx_Init+0x248>)
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	4619      	mov	r1, r3
 800454a:	481c      	ldr	r0, [pc, #112]	; (80045bc <W25qxx_Init+0x29c>)
 800454c:	f011 fba6 	bl	8015c9c <iprintf>
	printf("w25qxx Init Done\r\n");
 8004550:	481b      	ldr	r0, [pc, #108]	; (80045c0 <W25qxx_Init+0x2a0>)
 8004552:	f011 fc29 	bl	8015da8 <puts>
#endif
	w25qxx.Lock = 0;
 8004556:	4b04      	ldr	r3, [pc, #16]	; (8004568 <W25qxx_Init+0x248>)
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 800455e:	2301      	movs	r3, #1
}
 8004560:	4618      	mov	r0, r3
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	20005f68 	.word	0x20005f68
 800456c:	40020c00 	.word	0x40020c00
 8004570:	0801abf8 	.word	0x0801abf8
 8004574:	0801ac10 	.word	0x0801ac10
 8004578:	0801ac24 	.word	0x0801ac24
 800457c:	0801ac3c 	.word	0x0801ac3c
 8004580:	0801ac54 	.word	0x0801ac54
 8004584:	0801ac6c 	.word	0x0801ac6c
 8004588:	0801ac84 	.word	0x0801ac84
 800458c:	0801ac9c 	.word	0x0801ac9c
 8004590:	0801acb4 	.word	0x0801acb4
 8004594:	0801accc 	.word	0x0801accc
 8004598:	0801ace4 	.word	0x0801ace4
 800459c:	0801acfc 	.word	0x0801acfc
 80045a0:	0801ad14 	.word	0x0801ad14
 80045a4:	0801ad28 	.word	0x0801ad28
 80045a8:	0801ad48 	.word	0x0801ad48
 80045ac:	0801ad60 	.word	0x0801ad60
 80045b0:	0801ad80 	.word	0x0801ad80
 80045b4:	0801ad9c 	.word	0x0801ad9c
 80045b8:	0801adbc 	.word	0x0801adbc
 80045bc:	0801add8 	.word	0x0801add8
 80045c0:	0801adf8 	.word	0x0801adf8

080045c4 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 80045cc:	e002      	b.n	80045d4 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 80045ce:	2001      	movs	r0, #1
 80045d0:	f00c f932 	bl	8010838 <osDelay>
	while (w25qxx.Lock == 1)
 80045d4:	4b2d      	ldr	r3, [pc, #180]	; (800468c <W25qxx_EraseSector+0xc8>)
 80045d6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d0f7      	beq.n	80045ce <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 80045de:	4b2b      	ldr	r3, [pc, #172]	; (800468c <W25qxx_EraseSector+0xc8>)
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 80045e6:	f005 ffe1 	bl	800a5ac <HAL_GetTick>
 80045ea:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 80045ec:	6879      	ldr	r1, [r7, #4]
 80045ee:	4828      	ldr	r0, [pc, #160]	; (8004690 <W25qxx_EraseSector+0xcc>)
 80045f0:	f011 fb54 	bl	8015c9c <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 80045f4:	f7ff fe6a 	bl	80042cc <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 80045f8:	4b24      	ldr	r3, [pc, #144]	; (800468c <W25qxx_EraseSector+0xc8>)
 80045fa:	691a      	ldr	r2, [r3, #16]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	fb02 f303 	mul.w	r3, r2, r3
 8004602:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8004604:	f7ff fe06 	bl	8004214 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004608:	2200      	movs	r2, #0
 800460a:	2140      	movs	r1, #64	; 0x40
 800460c:	4821      	ldr	r0, [pc, #132]	; (8004694 <W25qxx_EraseSector+0xd0>)
 800460e:	f006 fee5 	bl	800b3dc <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004612:	4b1e      	ldr	r3, [pc, #120]	; (800468c <W25qxx_EraseSector+0xc8>)
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	2b08      	cmp	r3, #8
 8004618:	d909      	bls.n	800462e <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 800461a:	2021      	movs	r0, #33	; 0x21
 800461c:	f7ff fd78 	bl	8004110 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	0e1b      	lsrs	r3, r3, #24
 8004624:	b2db      	uxtb	r3, r3
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff fd72 	bl	8004110 <W25qxx_Spi>
 800462c:	e002      	b.n	8004634 <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 800462e:	2020      	movs	r0, #32
 8004630:	f7ff fd6e 	bl	8004110 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	0c1b      	lsrs	r3, r3, #16
 8004638:	b2db      	uxtb	r3, r3
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff fd68 	bl	8004110 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	0a1b      	lsrs	r3, r3, #8
 8004644:	b2db      	uxtb	r3, r3
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff fd62 	bl	8004110 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	b2db      	uxtb	r3, r3
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff fd5d 	bl	8004110 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004656:	2201      	movs	r2, #1
 8004658:	2140      	movs	r1, #64	; 0x40
 800465a:	480e      	ldr	r0, [pc, #56]	; (8004694 <W25qxx_EraseSector+0xd0>)
 800465c:	f006 febe 	bl	800b3dc <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004660:	f7ff fe34 	bl	80042cc <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 8004664:	f005 ffa2 	bl	800a5ac <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	4619      	mov	r1, r3
 8004670:	4809      	ldr	r0, [pc, #36]	; (8004698 <W25qxx_EraseSector+0xd4>)
 8004672:	f011 fb13 	bl	8015c9c <iprintf>
#endif
	W25qxx_Delay(1);
 8004676:	2001      	movs	r0, #1
 8004678:	f00c f8de 	bl	8010838 <osDelay>
	w25qxx.Lock = 0;
 800467c:	4b03      	ldr	r3, [pc, #12]	; (800468c <W25qxx_EraseSector+0xc8>)
 800467e:	2200      	movs	r2, #0
 8004680:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004684:	bf00      	nop
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	20005f68 	.word	0x20005f68
 8004690:	0801ae50 	.word	0x0801ae50
 8004694:	40020c00 	.word	0x40020c00
 8004698:	0801ae74 	.word	0x0801ae74

0800469c <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 80046a4:	4b07      	ldr	r3, [pc, #28]	; (80046c4 <W25qxx_SectorToPage+0x28>)
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	fb02 f303 	mul.w	r3, r2, r3
 80046ae:	4a05      	ldr	r2, [pc, #20]	; (80046c4 <W25qxx_SectorToPage+0x28>)
 80046b0:	8952      	ldrh	r2, [r2, #10]
 80046b2:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	20005f68 	.word	0x20005f68

080046c8 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
 80046d4:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80046d6:	e002      	b.n	80046de <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 80046d8:	2001      	movs	r0, #1
 80046da:	f00c f8ad 	bl	8010838 <osDelay>
	while (w25qxx.Lock == 1)
 80046de:	4b57      	ldr	r3, [pc, #348]	; (800483c <W25qxx_WritePage+0x174>)
 80046e0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d0f7      	beq.n	80046d8 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 80046e8:	4b54      	ldr	r3, [pc, #336]	; (800483c <W25qxx_WritePage+0x174>)
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4413      	add	r3, r2
 80046f6:	4a51      	ldr	r2, [pc, #324]	; (800483c <W25qxx_WritePage+0x174>)
 80046f8:	8952      	ldrh	r2, [r2, #10]
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d802      	bhi.n	8004704 <W25qxx_WritePage+0x3c>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d105      	bne.n	8004710 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004704:	4b4d      	ldr	r3, [pc, #308]	; (800483c <W25qxx_WritePage+0x174>)
 8004706:	895b      	ldrh	r3, [r3, #10]
 8004708:	461a      	mov	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	4413      	add	r3, r2
 8004716:	4a49      	ldr	r2, [pc, #292]	; (800483c <W25qxx_WritePage+0x174>)
 8004718:	8952      	ldrh	r2, [r2, #10]
 800471a:	4293      	cmp	r3, r2
 800471c:	d905      	bls.n	800472a <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800471e:	4b47      	ldr	r3, [pc, #284]	; (800483c <W25qxx_WritePage+0x174>)
 8004720:	895b      	ldrh	r3, [r3, #10]
 8004722:	461a      	mov	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	68b9      	ldr	r1, [r7, #8]
 8004730:	4843      	ldr	r0, [pc, #268]	; (8004840 <W25qxx_WritePage+0x178>)
 8004732:	f011 fab3 	bl	8015c9c <iprintf>
	W25qxx_Delay(100);
 8004736:	2064      	movs	r0, #100	; 0x64
 8004738:	f00c f87e 	bl	8010838 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 800473c:	f005 ff36 	bl	800a5ac <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 8004742:	f7ff fdc3 	bl	80042cc <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8004746:	f7ff fd65 	bl	8004214 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800474a:	2200      	movs	r2, #0
 800474c:	2140      	movs	r1, #64	; 0x40
 800474e:	483d      	ldr	r0, [pc, #244]	; (8004844 <W25qxx_WritePage+0x17c>)
 8004750:	f006 fe44 	bl	800b3dc <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8004754:	4b39      	ldr	r3, [pc, #228]	; (800483c <W25qxx_WritePage+0x174>)
 8004756:	895b      	ldrh	r3, [r3, #10]
 8004758:	461a      	mov	r2, r3
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	fb03 f302 	mul.w	r3, r3, r2
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	4413      	add	r3, r2
 8004764:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8004766:	4b35      	ldr	r3, [pc, #212]	; (800483c <W25qxx_WritePage+0x174>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2b08      	cmp	r3, #8
 800476c:	d909      	bls.n	8004782 <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 800476e:	2012      	movs	r0, #18
 8004770:	f7ff fcce 	bl	8004110 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	0e1b      	lsrs	r3, r3, #24
 8004778:	b2db      	uxtb	r3, r3
 800477a:	4618      	mov	r0, r3
 800477c:	f7ff fcc8 	bl	8004110 <W25qxx_Spi>
 8004780:	e002      	b.n	8004788 <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 8004782:	2002      	movs	r0, #2
 8004784:	f7ff fcc4 	bl	8004110 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	0c1b      	lsrs	r3, r3, #16
 800478c:	b2db      	uxtb	r3, r3
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff fcbe 	bl	8004110 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	0a1b      	lsrs	r3, r3, #8
 8004798:	b2db      	uxtb	r3, r3
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff fcb8 	bl	8004110 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7ff fcb3 	bl	8004110 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	2364      	movs	r3, #100	; 0x64
 80047b0:	68f9      	ldr	r1, [r7, #12]
 80047b2:	4825      	ldr	r0, [pc, #148]	; (8004848 <W25qxx_WritePage+0x180>)
 80047b4:	f009 fc3b 	bl	800e02e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80047b8:	2201      	movs	r2, #1
 80047ba:	2140      	movs	r1, #64	; 0x40
 80047bc:	4821      	ldr	r0, [pc, #132]	; (8004844 <W25qxx_WritePage+0x17c>)
 80047be:	f006 fe0d 	bl	800b3dc <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80047c2:	f7ff fd83 	bl	80042cc <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 80047c6:	f005 fef1 	bl	800a5ac <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 80047d2:	2300      	movs	r3, #0
 80047d4:	617b      	str	r3, [r7, #20]
 80047d6:	e018      	b.n	800480a <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d108      	bne.n	80047f4 <W25qxx_WritePage+0x12c>
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d905      	bls.n	80047f4 <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 80047e8:	4818      	ldr	r0, [pc, #96]	; (800484c <W25qxx_WritePage+0x184>)
 80047ea:	f011 fadd 	bl	8015da8 <puts>
			W25qxx_Delay(10);
 80047ee:	200a      	movs	r0, #10
 80047f0:	f00c f822 	bl	8010838 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	4413      	add	r3, r2
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	4619      	mov	r1, r3
 80047fe:	4814      	ldr	r0, [pc, #80]	; (8004850 <W25qxx_WritePage+0x188>)
 8004800:	f011 fa4c 	bl	8015c9c <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	3301      	adds	r3, #1
 8004808:	617b      	str	r3, [r7, #20]
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d3e2      	bcc.n	80047d8 <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 8004812:	480e      	ldr	r0, [pc, #56]	; (800484c <W25qxx_WritePage+0x184>)
 8004814:	f011 fac8 	bl	8015da8 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 8004818:	6939      	ldr	r1, [r7, #16]
 800481a:	480e      	ldr	r0, [pc, #56]	; (8004854 <W25qxx_WritePage+0x18c>)
 800481c:	f011 fa3e 	bl	8015c9c <iprintf>
	W25qxx_Delay(100);
 8004820:	2064      	movs	r0, #100	; 0x64
 8004822:	f00c f809 	bl	8010838 <osDelay>
#endif
	W25qxx_Delay(1);
 8004826:	2001      	movs	r0, #1
 8004828:	f00c f806 	bl	8010838 <osDelay>
	w25qxx.Lock = 0;
 800482c:	4b03      	ldr	r3, [pc, #12]	; (800483c <W25qxx_WritePage+0x174>)
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004834:	bf00      	nop
 8004836:	3718      	adds	r7, #24
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	20005f68 	.word	0x20005f68
 8004840:	0801b0d8 	.word	0x0801b0d8
 8004844:	40020c00 	.word	0x40020c00
 8004848:	20005c80 	.word	0x20005c80
 800484c:	0801b114 	.word	0x0801b114
 8004850:	0801b118 	.word	0x0801b118
 8004854:	0801b120 	.word	0x0801b120

08004858 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b088      	sub	sp, #32
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
 8004864:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8004866:	4b36      	ldr	r3, [pc, #216]	; (8004940 <W25qxx_WriteSector+0xe8>)
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	429a      	cmp	r2, r3
 800486e:	d802      	bhi.n	8004876 <W25qxx_WriteSector+0x1e>
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d102      	bne.n	800487c <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8004876:	4b32      	ldr	r3, [pc, #200]	; (8004940 <W25qxx_WriteSector+0xe8>)
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	68b9      	ldr	r1, [r7, #8]
 8004882:	4830      	ldr	r0, [pc, #192]	; (8004944 <W25qxx_WriteSector+0xec>)
 8004884:	f011 fa0a 	bl	8015c9c <iprintf>
	W25qxx_Delay(100);
 8004888:	2064      	movs	r0, #100	; 0x64
 800488a:	f00b ffd5 	bl	8010838 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 800488e:	4b2c      	ldr	r3, [pc, #176]	; (8004940 <W25qxx_WriteSector+0xe8>)
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	429a      	cmp	r2, r3
 8004896:	d306      	bcc.n	80048a6 <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 8004898:	482b      	ldr	r0, [pc, #172]	; (8004948 <W25qxx_WriteSector+0xf0>)
 800489a:	f011 fa85 	bl	8015da8 <puts>
		W25qxx_Delay(100);
 800489e:	2064      	movs	r0, #100	; 0x64
 80048a0:	f00b ffca 	bl	8010838 <osDelay>
#endif
		return;
 80048a4:	e048      	b.n	8004938 <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	441a      	add	r2, r3
 80048ac:	4b24      	ldr	r3, [pc, #144]	; (8004940 <W25qxx_WriteSector+0xe8>)
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d905      	bls.n	80048c0 <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 80048b4:	4b22      	ldr	r3, [pc, #136]	; (8004940 <W25qxx_WriteSector+0xe8>)
 80048b6:	691a      	ldr	r2, [r3, #16]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	61bb      	str	r3, [r7, #24]
 80048be:	e001      	b.n	80048c4 <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80048c4:	68b8      	ldr	r0, [r7, #8]
 80048c6:	f7ff fee9 	bl	800469c <W25qxx_SectorToPage>
 80048ca:	4602      	mov	r2, r0
 80048cc:	4b1c      	ldr	r3, [pc, #112]	; (8004940 <W25qxx_WriteSector+0xe8>)
 80048ce:	895b      	ldrh	r3, [r3, #10]
 80048d0:	4619      	mov	r1, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80048d8:	4413      	add	r3, r2
 80048da:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80048dc:	4b18      	ldr	r3, [pc, #96]	; (8004940 <W25qxx_WriteSector+0xe8>)
 80048de:	895b      	ldrh	r3, [r3, #10]
 80048e0:	461a      	mov	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80048e8:	fb02 f201 	mul.w	r2, r2, r1
 80048ec:	1a9b      	subs	r3, r3, r2
 80048ee:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	69f9      	ldr	r1, [r7, #28]
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f7ff fee6 	bl	80046c8 <W25qxx_WritePage>
		StartPage++;
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	3301      	adds	r3, #1
 8004900:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8004902:	4b0f      	ldr	r3, [pc, #60]	; (8004940 <W25qxx_WriteSector+0xe8>)
 8004904:	895b      	ldrh	r3, [r3, #10]
 8004906:	461a      	mov	r2, r3
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	1a9a      	subs	r2, r3, r2
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	4413      	add	r3, r2
 8004910:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8004912:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <W25qxx_WriteSector+0xe8>)
 8004914:	895b      	ldrh	r3, [r3, #10]
 8004916:	461a      	mov	r2, r3
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	4413      	add	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8004922:	2300      	movs	r3, #0
 8004924:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	2b00      	cmp	r3, #0
 800492a:	dce1      	bgt.n	80048f0 <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 800492c:	4807      	ldr	r0, [pc, #28]	; (800494c <W25qxx_WriteSector+0xf4>)
 800492e:	f011 fa3b 	bl	8015da8 <puts>
	W25qxx_Delay(100);
 8004932:	2064      	movs	r0, #100	; 0x64
 8004934:	f00b ff80 	bl	8010838 <osDelay>
#endif
}
 8004938:	3720      	adds	r7, #32
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	20005f68 	.word	0x20005f68
 8004944:	0801b144 	.word	0x0801b144
 8004948:	0801b184 	.word	0x0801b184
 800494c:	0801b1a4 	.word	0x0801b1a4

08004950 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
 800495c:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800495e:	e002      	b.n	8004966 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8004960:	2001      	movs	r0, #1
 8004962:	f00b ff69 	bl	8010838 <osDelay>
	while (w25qxx.Lock == 1)
 8004966:	4b54      	ldr	r3, [pc, #336]	; (8004ab8 <W25qxx_ReadPage+0x168>)
 8004968:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800496c:	2b01      	cmp	r3, #1
 800496e:	d0f7      	beq.n	8004960 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8004970:	4b51      	ldr	r3, [pc, #324]	; (8004ab8 <W25qxx_ReadPage+0x168>)
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8004978:	4b4f      	ldr	r3, [pc, #316]	; (8004ab8 <W25qxx_ReadPage+0x168>)
 800497a:	895b      	ldrh	r3, [r3, #10]
 800497c:	461a      	mov	r2, r3
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	4293      	cmp	r3, r2
 8004982:	d802      	bhi.n	800498a <W25qxx_ReadPage+0x3a>
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d102      	bne.n	8004990 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800498a:	4b4b      	ldr	r3, [pc, #300]	; (8004ab8 <W25qxx_ReadPage+0x168>)
 800498c:	895b      	ldrh	r3, [r3, #10]
 800498e:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	4413      	add	r3, r2
 8004996:	4a48      	ldr	r2, [pc, #288]	; (8004ab8 <W25qxx_ReadPage+0x168>)
 8004998:	8952      	ldrh	r2, [r2, #10]
 800499a:	4293      	cmp	r3, r2
 800499c:	d905      	bls.n	80049aa <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800499e:	4b46      	ldr	r3, [pc, #280]	; (8004ab8 <W25qxx_ReadPage+0x168>)
 80049a0:	895b      	ldrh	r3, [r3, #10]
 80049a2:	461a      	mov	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	68b9      	ldr	r1, [r7, #8]
 80049b0:	4842      	ldr	r0, [pc, #264]	; (8004abc <W25qxx_ReadPage+0x16c>)
 80049b2:	f011 f973 	bl	8015c9c <iprintf>
	W25qxx_Delay(100);
 80049b6:	2064      	movs	r0, #100	; 0x64
 80049b8:	f00b ff3e 	bl	8010838 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 80049bc:	f005 fdf6 	bl	800a5ac <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 80049c2:	4b3d      	ldr	r3, [pc, #244]	; (8004ab8 <W25qxx_ReadPage+0x168>)
 80049c4:	895b      	ldrh	r3, [r3, #10]
 80049c6:	461a      	mov	r2, r3
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	fb03 f302 	mul.w	r3, r3, r2
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	4413      	add	r3, r2
 80049d2:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80049d4:	2200      	movs	r2, #0
 80049d6:	2140      	movs	r1, #64	; 0x40
 80049d8:	4839      	ldr	r0, [pc, #228]	; (8004ac0 <W25qxx_ReadPage+0x170>)
 80049da:	f006 fcff 	bl	800b3dc <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80049de:	4b36      	ldr	r3, [pc, #216]	; (8004ab8 <W25qxx_ReadPage+0x168>)
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	2b08      	cmp	r3, #8
 80049e4:	d909      	bls.n	80049fa <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 80049e6:	200c      	movs	r0, #12
 80049e8:	f7ff fb92 	bl	8004110 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	0e1b      	lsrs	r3, r3, #24
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7ff fb8c 	bl	8004110 <W25qxx_Spi>
 80049f8:	e002      	b.n	8004a00 <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 80049fa:	200b      	movs	r0, #11
 80049fc:	f7ff fb88 	bl	8004110 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	0c1b      	lsrs	r3, r3, #16
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff fb82 	bl	8004110 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	0a1b      	lsrs	r3, r3, #8
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff fb7c 	bl	8004110 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff fb77 	bl	8004110 <W25qxx_Spi>
	W25qxx_Spi(0);
 8004a22:	2000      	movs	r0, #0
 8004a24:	f7ff fb74 	bl	8004110 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	2364      	movs	r3, #100	; 0x64
 8004a2e:	68f9      	ldr	r1, [r7, #12]
 8004a30:	4824      	ldr	r0, [pc, #144]	; (8004ac4 <W25qxx_ReadPage+0x174>)
 8004a32:	f009 fc38 	bl	800e2a6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004a36:	2201      	movs	r2, #1
 8004a38:	2140      	movs	r1, #64	; 0x40
 8004a3a:	4821      	ldr	r0, [pc, #132]	; (8004ac0 <W25qxx_ReadPage+0x170>)
 8004a3c:	f006 fcce 	bl	800b3dc <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8004a40:	f005 fdb4 	bl	800a5ac <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	617b      	str	r3, [r7, #20]
 8004a50:	e018      	b.n	8004a84 <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d108      	bne.n	8004a6e <W25qxx_ReadPage+0x11e>
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d905      	bls.n	8004a6e <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 8004a62:	4819      	ldr	r0, [pc, #100]	; (8004ac8 <W25qxx_ReadPage+0x178>)
 8004a64:	f011 f9a0 	bl	8015da8 <puts>
			W25qxx_Delay(10);
 8004a68:	200a      	movs	r0, #10
 8004a6a:	f00b fee5 	bl	8010838 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	4413      	add	r3, r2
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	4619      	mov	r1, r3
 8004a78:	4814      	ldr	r0, [pc, #80]	; (8004acc <W25qxx_ReadPage+0x17c>)
 8004a7a:	f011 f90f 	bl	8015c9c <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	3301      	adds	r3, #1
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d3e2      	bcc.n	8004a52 <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 8004a8c:	480e      	ldr	r0, [pc, #56]	; (8004ac8 <W25qxx_ReadPage+0x178>)
 8004a8e:	f011 f98b 	bl	8015da8 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 8004a92:	6939      	ldr	r1, [r7, #16]
 8004a94:	480e      	ldr	r0, [pc, #56]	; (8004ad0 <W25qxx_ReadPage+0x180>)
 8004a96:	f011 f901 	bl	8015c9c <iprintf>
	W25qxx_Delay(100);
 8004a9a:	2064      	movs	r0, #100	; 0x64
 8004a9c:	f00b fecc 	bl	8010838 <osDelay>
#endif
	W25qxx_Delay(1);
 8004aa0:	2001      	movs	r0, #1
 8004aa2:	f00b fec9 	bl	8010838 <osDelay>
	w25qxx.Lock = 0;
 8004aa6:	4b04      	ldr	r3, [pc, #16]	; (8004ab8 <W25qxx_ReadPage+0x168>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004aae:	bf00      	nop
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20005f68 	.word	0x20005f68
 8004abc:	0801b2f0 	.word	0x0801b2f0
 8004ac0:	40020c00 	.word	0x40020c00
 8004ac4:	20005c80 	.word	0x20005c80
 8004ac8:	0801b114 	.word	0x0801b114
 8004acc:	0801b118 	.word	0x0801b118
 8004ad0:	0801b32c 	.word	0x0801b32c

08004ad4 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8004ae2:	4b36      	ldr	r3, [pc, #216]	; (8004bbc <W25qxx_ReadSector+0xe8>)
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d802      	bhi.n	8004af2 <W25qxx_ReadSector+0x1e>
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d102      	bne.n	8004af8 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8004af2:	4b32      	ldr	r3, [pc, #200]	; (8004bbc <W25qxx_ReadSector+0xe8>)
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	68b9      	ldr	r1, [r7, #8]
 8004afe:	4830      	ldr	r0, [pc, #192]	; (8004bc0 <W25qxx_ReadSector+0xec>)
 8004b00:	f011 f8cc 	bl	8015c9c <iprintf>
	W25qxx_Delay(100);
 8004b04:	2064      	movs	r0, #100	; 0x64
 8004b06:	f00b fe97 	bl	8010838 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004b0a:	4b2c      	ldr	r3, [pc, #176]	; (8004bbc <W25qxx_ReadSector+0xe8>)
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d306      	bcc.n	8004b22 <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 8004b14:	482b      	ldr	r0, [pc, #172]	; (8004bc4 <W25qxx_ReadSector+0xf0>)
 8004b16:	f011 f947 	bl	8015da8 <puts>
		W25qxx_Delay(100);
 8004b1a:	2064      	movs	r0, #100	; 0x64
 8004b1c:	f00b fe8c 	bl	8010838 <osDelay>
#endif
		return;
 8004b20:	e048      	b.n	8004bb4 <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	441a      	add	r2, r3
 8004b28:	4b24      	ldr	r3, [pc, #144]	; (8004bbc <W25qxx_ReadSector+0xe8>)
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d905      	bls.n	8004b3c <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8004b30:	4b22      	ldr	r3, [pc, #136]	; (8004bbc <W25qxx_ReadSector+0xe8>)
 8004b32:	691a      	ldr	r2, [r3, #16]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	61bb      	str	r3, [r7, #24]
 8004b3a:	e001      	b.n	8004b40 <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004b40:	68b8      	ldr	r0, [r7, #8]
 8004b42:	f7ff fdab 	bl	800469c <W25qxx_SectorToPage>
 8004b46:	4602      	mov	r2, r0
 8004b48:	4b1c      	ldr	r3, [pc, #112]	; (8004bbc <W25qxx_ReadSector+0xe8>)
 8004b4a:	895b      	ldrh	r3, [r3, #10]
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b54:	4413      	add	r3, r2
 8004b56:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004b58:	4b18      	ldr	r3, [pc, #96]	; (8004bbc <W25qxx_ReadSector+0xe8>)
 8004b5a:	895b      	ldrh	r3, [r3, #10]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b64:	fb02 f201 	mul.w	r2, r2, r1
 8004b68:	1a9b      	subs	r3, r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	69f9      	ldr	r1, [r7, #28]
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f7ff feec 	bl	8004950 <W25qxx_ReadPage>
		StartPage++;
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8004b7e:	4b0f      	ldr	r3, [pc, #60]	; (8004bbc <W25qxx_ReadSector+0xe8>)
 8004b80:	895b      	ldrh	r3, [r3, #10]
 8004b82:	461a      	mov	r2, r3
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	1a9a      	subs	r2, r3, r2
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8004b8e:	4b0b      	ldr	r3, [pc, #44]	; (8004bbc <W25qxx_ReadSector+0xe8>)
 8004b90:	895b      	ldrh	r3, [r3, #10]
 8004b92:	461a      	mov	r2, r3
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	dce1      	bgt.n	8004b6c <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 8004ba8:	4807      	ldr	r0, [pc, #28]	; (8004bc8 <W25qxx_ReadSector+0xf4>)
 8004baa:	f011 f8fd 	bl	8015da8 <puts>
	W25qxx_Delay(100);
 8004bae:	2064      	movs	r0, #100	; 0x64
 8004bb0:	f00b fe42 	bl	8010838 <osDelay>
#endif
}
 8004bb4:	3720      	adds	r7, #32
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	20005f68 	.word	0x20005f68
 8004bc0:	0801b350 	.word	0x0801b350
 8004bc4:	0801b390 	.word	0x0801b390
 8004bc8:	0801b3b0 	.word	0x0801b3b0

08004bcc <Max31855_Read_Temp>:
uint32_t sign=0;									  // Sign bit
uint8_t DATARX[4];                                    // Raw Data from MAX6675
//uint8_t DATATX = {0xFF, 0xFF, 0xFF, 0xFF};                                    // Raw Data from MAX6675

// ------------------- Functions ----------------
float Max31855_Read_Temp(void) {
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
	int Temp = 0;                                        // Temperature Variable
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); // Low State for SPI Communication
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004bdc:	483b      	ldr	r0, [pc, #236]	; (8004ccc <Max31855_Read_Temp+0x100>)
 8004bde:	f006 fbfd 	bl	800b3dc <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, DATARX, 4, 1000);                // DATA Transfer
 8004be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004be6:	2204      	movs	r2, #4
 8004be8:	4939      	ldr	r1, [pc, #228]	; (8004cd0 <Max31855_Read_Temp+0x104>)
 8004bea:	483a      	ldr	r0, [pc, #232]	; (8004cd4 <Max31855_Read_Temp+0x108>)
 8004bec:	f009 fb5b 	bl	800e2a6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET); // High State for SPI Communication
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004bf6:	4835      	ldr	r0, [pc, #212]	; (8004ccc <Max31855_Read_Temp+0x100>)
 8004bf8:	f006 fbf0 	bl	800b3dc <HAL_GPIO_WritePin>


	uint32_t v = DATARX[3] | (DATARX[2] << 8) | (DATARX[1] << 16) | (DATARX[0] << 24);
 8004bfc:	4b34      	ldr	r3, [pc, #208]	; (8004cd0 <Max31855_Read_Temp+0x104>)
 8004bfe:	78db      	ldrb	r3, [r3, #3]
 8004c00:	461a      	mov	r2, r3
 8004c02:	4b33      	ldr	r3, [pc, #204]	; (8004cd0 <Max31855_Read_Temp+0x104>)
 8004c04:	789b      	ldrb	r3, [r3, #2]
 8004c06:	021b      	lsls	r3, r3, #8
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	4b31      	ldr	r3, [pc, #196]	; (8004cd0 <Max31855_Read_Temp+0x104>)
 8004c0c:	785b      	ldrb	r3, [r3, #1]
 8004c0e:	041b      	lsls	r3, r3, #16
 8004c10:	431a      	orrs	r2, r3
 8004c12:	4b2f      	ldr	r3, [pc, #188]	; (8004cd0 <Max31855_Read_Temp+0x104>)
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	061b      	lsls	r3, r3, #24
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	603b      	str	r3, [r7, #0]

	Error = v & 0x07;								  // Error Detection
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	4b2c      	ldr	r3, [pc, #176]	; (8004cd8 <Max31855_Read_Temp+0x10c>)
 8004c28:	701a      	strb	r2, [r3, #0]



		sign = (DATARX[0] & (0x80)) >> 7;					// Sign Bit calculation
 8004c2a:	4b29      	ldr	r3, [pc, #164]	; (8004cd0 <Max31855_Read_Temp+0x104>)
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	09db      	lsrs	r3, r3, #7
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	461a      	mov	r2, r3
 8004c34:	4b29      	ldr	r3, [pc, #164]	; (8004cdc <Max31855_Read_Temp+0x110>)
 8004c36:	601a      	str	r2, [r3, #0]

		if (DATARX[3] & 0x07)								 // Returns Error Number
 8004c38:	4b25      	ldr	r3, [pc, #148]	; (8004cd0 <Max31855_Read_Temp+0x104>)
 8004c3a:	78db      	ldrb	r3, [r3, #3]
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d009      	beq.n	8004c58 <Max31855_Read_Temp+0x8c>
			return (-1 * (DATARX[3] & 0x07));
 8004c44:	4b22      	ldr	r3, [pc, #136]	; (8004cd0 <Max31855_Read_Temp+0x104>)
 8004c46:	78db      	ldrb	r3, [r3, #3]
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	425b      	negs	r3, r3
 8004c4e:	ee07 3a90 	vmov	s15, r3
 8004c52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c56:	e033      	b.n	8004cc0 <Max31855_Read_Temp+0xf4>

		else if (sign == 1) {								// Negative Temperature
 8004c58:	4b20      	ldr	r3, [pc, #128]	; (8004cdc <Max31855_Read_Temp+0x110>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d11d      	bne.n	8004c9c <Max31855_Read_Temp+0xd0>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8004c60:	4b1b      	ldr	r3, [pc, #108]	; (8004cd0 <Max31855_Read_Temp+0x104>)
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	019b      	lsls	r3, r3, #6
 8004c66:	4a1a      	ldr	r2, [pc, #104]	; (8004cd0 <Max31855_Read_Temp+0x104>)
 8004c68:	7852      	ldrb	r2, [r2, #1]
 8004c6a:	0892      	lsrs	r2, r2, #2
 8004c6c:	b2d2      	uxtb	r2, r2
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	607b      	str	r3, [r7, #4]
			Temp &= 0b01111111111111;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c78:	607b      	str	r3, [r7, #4]
			Temp ^= 0b01111111111111;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f483 53ff 	eor.w	r3, r3, #8160	; 0x1fe0
 8004c80:	f083 031f 	eor.w	r3, r3, #31
 8004c84:	607b      	str	r3, [r7, #4]
			return ((float) -Temp / 4);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	425b      	negs	r3, r3
 8004c8a:	ee07 3a90 	vmov	s15, r3
 8004c8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c92:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8004c96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c9a:	e011      	b.n	8004cc0 <Max31855_Read_Temp+0xf4>
		}

		else												 // Positive Temperature
		{
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8004c9c:	4b0c      	ldr	r3, [pc, #48]	; (8004cd0 <Max31855_Read_Temp+0x104>)
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	019b      	lsls	r3, r3, #6
 8004ca2:	4a0b      	ldr	r2, [pc, #44]	; (8004cd0 <Max31855_Read_Temp+0x104>)
 8004ca4:	7852      	ldrb	r2, [r2, #1]
 8004ca6:	0892      	lsrs	r2, r2, #2
 8004ca8:	b2d2      	uxtb	r2, r2
 8004caa:	4313      	orrs	r3, r2
 8004cac:	607b      	str	r3, [r7, #4]
			return ((float) Temp / 4.0);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	ee07 3a90 	vmov	s15, r3
 8004cb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004cb8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8004cbc:	eec7 7a26 	vdiv.f32	s15, s14, s13

	// LSB = 0.25 degrees C
	centigrade *= 0.25;
	return centigrade;
	*/
}
 8004cc0:	eeb0 0a67 	vmov.f32	s0, s15
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	20005f90 	.word	0x20005f90
 8004cd4:	20005cd8 	.word	0x20005cd8
 8004cd8:	200003e4 	.word	0x200003e4
 8004cdc:	200003e8 	.word	0x200003e8

08004ce0 <MRT_pollPropulsion>:


//**************************************************//
//PUBLIC FUNCTIONS

void MRT_pollPropulsion(void){
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
	MRT_getThermoTemp();
 8004ce4:	f000 f806 	bl	8004cf4 <MRT_getThermoTemp>
	MRT_getTransducerVoltage();
 8004ce8:	f000 f812 	bl	8004d10 <MRT_getTransducerVoltage>
	MRT_getValveStatus();
 8004cec:	f000 f820 	bl	8004d30 <MRT_getValveStatus>
}
 8004cf0:	bf00      	nop
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <MRT_getThermoTemp>:

void MRT_getThermoTemp(void){
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0
	thermocouple_temperature = Max31855_Read_Temp();
 8004cf8:	f7ff ff68 	bl	8004bcc <Max31855_Read_Temp>
 8004cfc:	eef0 7a40 	vmov.f32	s15, s0
 8004d00:	4b02      	ldr	r3, [pc, #8]	; (8004d0c <MRT_getThermoTemp+0x18>)
 8004d02:	edc3 7a00 	vstr	s15, [r3]
}
 8004d06:	bf00      	nop
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	20005fc8 	.word	0x20005fc8

08004d10 <MRT_getTransducerVoltage>:

void MRT_getTransducerVoltage(void){
 8004d10:	b580      	push	{r7, lr}
 8004d12:	af00      	add	r7, sp, #0
	transducer_voltage = MRT_prop_poll_pressure_transducer(&TRANSDUCER_ADC);
 8004d14:	4804      	ldr	r0, [pc, #16]	; (8004d28 <MRT_getTransducerVoltage+0x18>)
 8004d16:	f000 f85f 	bl	8004dd8 <MRT_prop_poll_pressure_transducer>
 8004d1a:	eef0 7a40 	vmov.f32	s15, s0
 8004d1e:	4b03      	ldr	r3, [pc, #12]	; (8004d2c <MRT_getTransducerVoltage+0x1c>)
 8004d20:	edc3 7a00 	vstr	s15, [r3]
}
 8004d24:	bf00      	nop
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	20005aec 	.word	0x20005aec
 8004d2c:	20005fcc 	.word	0x20005fcc

08004d30 <MRT_getValveStatus>:

void MRT_getValveStatus(void){
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0
	valve_status = HAL_GPIO_ReadPin(IN_Prop_ActuatedVent_Feedback_GPIO_Port,IN_Prop_ActuatedVent_Feedback_Pin);
 8004d34:	2102      	movs	r1, #2
 8004d36:	4804      	ldr	r0, [pc, #16]	; (8004d48 <MRT_getValveStatus+0x18>)
 8004d38:	f006 fb38 	bl	800b3ac <HAL_GPIO_ReadPin>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	461a      	mov	r2, r3
 8004d40:	4b02      	ldr	r3, [pc, #8]	; (8004d4c <MRT_getValveStatus+0x1c>)
 8004d42:	701a      	strb	r2, [r3, #0]
}
 8004d44:	bf00      	nop
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	40020400 	.word	0x40020400
 8004d4c:	20005fc6 	.word	0x20005fc6

08004d50 <MRT_formatPropulsion>:

// formats propulsion telemetry string using sprintf
void MRT_formatPropulsion(void) {
 8004d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d52:	b089      	sub	sp, #36	; 0x24
 8004d54:	af06      	add	r7, sp, #24
	memset(msg_buffer_pr, 0, 50);
 8004d56:	2232      	movs	r2, #50	; 0x32
 8004d58:	2100      	movs	r1, #0
 8004d5a:	4816      	ldr	r0, [pc, #88]	; (8004db4 <MRT_formatPropulsion+0x64>)
 8004d5c:	f00f fdf4 	bl	8014948 <memset>
	//tank_pressure = convert_prop_tank_pressure(); // convert buffered readings to voltage TODO??
	sprintf(msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 8004d60:	4b15      	ldr	r3, [pc, #84]	; (8004db8 <MRT_formatPropulsion+0x68>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7fb fc0f 	bl	8000588 <__aeabi_f2d>
 8004d6a:	4604      	mov	r4, r0
 8004d6c:	460d      	mov	r5, r1
 8004d6e:	4b13      	ldr	r3, [pc, #76]	; (8004dbc <MRT_formatPropulsion+0x6c>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fb fc08 	bl	8000588 <__aeabi_f2d>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4910      	ldr	r1, [pc, #64]	; (8004dc0 <MRT_formatPropulsion+0x70>)
 8004d7e:	7809      	ldrb	r1, [r1, #0]
 8004d80:	4608      	mov	r0, r1
 8004d82:	4910      	ldr	r1, [pc, #64]	; (8004dc4 <MRT_formatPropulsion+0x74>)
 8004d84:	7809      	ldrb	r1, [r1, #0]
 8004d86:	460e      	mov	r6, r1
 8004d88:	490f      	ldr	r1, [pc, #60]	; (8004dc8 <MRT_formatPropulsion+0x78>)
 8004d8a:	7809      	ldrb	r1, [r1, #0]
 8004d8c:	6079      	str	r1, [r7, #4]
 8004d8e:	490f      	ldr	r1, [pc, #60]	; (8004dcc <MRT_formatPropulsion+0x7c>)
 8004d90:	6809      	ldr	r1, [r1, #0]
 8004d92:	9105      	str	r1, [sp, #20]
 8004d94:	6879      	ldr	r1, [r7, #4]
 8004d96:	9104      	str	r1, [sp, #16]
 8004d98:	9603      	str	r6, [sp, #12]
 8004d9a:	9002      	str	r0, [sp, #8]
 8004d9c:	e9cd 2300 	strd	r2, r3, [sp]
 8004da0:	4622      	mov	r2, r4
 8004da2:	462b      	mov	r3, r5
 8004da4:	490a      	ldr	r1, [pc, #40]	; (8004dd0 <MRT_formatPropulsion+0x80>)
 8004da6:	4803      	ldr	r0, [pc, #12]	; (8004db4 <MRT_formatPropulsion+0x64>)
 8004da8:	f011 f8ca 	bl	8015f40 <siprintf>
			transducer_voltage, thermocouple_temperature, valve_status,
			prev_min, prev_sec, prev_subsec);
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004db4:	20005f94 	.word	0x20005f94
 8004db8:	20005fcc 	.word	0x20005fcc
 8004dbc:	20005fc8 	.word	0x20005fc8
 8004dc0:	20005fc6 	.word	0x20005fc6
 8004dc4:	200003de 	.word	0x200003de
 8004dc8:	200003df 	.word	0x200003df
 8004dcc:	200003e0 	.word	0x200003e0
 8004dd0:	0801b444 	.word	0x0801b444
 8004dd4:	00000000 	.word	0x00000000

08004dd8 <MRT_prop_poll_pressure_transducer>:
//PRIVATE FUNCTIONS

/*
 * Get the pressure transducer voltage (poll ADC)
 */
float MRT_prop_poll_pressure_transducer(ADC_HandleTypeDef* hadc) {
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
	// reading adc
	HAL_ADC_Start(hadc);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f005 fc57 	bl	800a694 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1000);
 8004de6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f005 fd57 	bl	800a89e <HAL_ADC_PollForConversion>
	uint32_t pressure_sensor_raw = HAL_ADC_GetValue(hadc);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f005 fddf 	bl	800a9b4 <HAL_ADC_GetValue>
 8004df6:	60f8      	str	r0, [r7, #12]
	HAL_ADC_Stop(hadc);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f005 fd1d 	bl	800a838 <HAL_ADC_Stop>

	float voltage = (float) (pressure_sensor_raw / 4095.0) * 3.3; // assuming 12 bits
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f7fb fba0 	bl	8000544 <__aeabi_ui2d>
 8004e04:	a312      	add	r3, pc, #72	; (adr r3, 8004e50 <MRT_prop_poll_pressure_transducer+0x78>)
 8004e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0a:	f7fb fd3f 	bl	800088c <__aeabi_ddiv>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	460b      	mov	r3, r1
 8004e12:	4610      	mov	r0, r2
 8004e14:	4619      	mov	r1, r3
 8004e16:	f7fb ff07 	bl	8000c28 <__aeabi_d2f>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7fb fbb3 	bl	8000588 <__aeabi_f2d>
 8004e22:	a30d      	add	r3, pc, #52	; (adr r3, 8004e58 <MRT_prop_poll_pressure_transducer+0x80>)
 8004e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e28:	f7fb fc06 	bl	8000638 <__aeabi_dmul>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	460b      	mov	r3, r1
 8004e30:	4610      	mov	r0, r2
 8004e32:	4619      	mov	r1, r3
 8004e34:	f7fb fef8 	bl	8000c28 <__aeabi_d2f>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	60bb      	str	r3, [r7, #8]

	return voltage;
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	ee07 3a90 	vmov	s15, r3
}
 8004e42:	eeb0 0a67 	vmov.f32	s0, s15
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	f3af 8000 	nop.w
 8004e50:	00000000 	.word	0x00000000
 8004e54:	40affe00 	.word	0x40affe00
 8004e58:	66666666 	.word	0x66666666
 8004e5c:	400a6666 	.word	0x400a6666

08004e60 <MRT_LSM6DSR_Constructor>:


//**************************************************//
/*****LSM6DSR STATIC FUNCTIONS*****/

void MRT_LSM6DSR_Constructor(){
 8004e60:	b598      	push	{r3, r4, r7, lr}
 8004e62:	af00      	add	r7, sp, #0
	if (lsm6dsr==NULL){
 8004e64:	4b08      	ldr	r3, [pc, #32]	; (8004e88 <MRT_LSM6DSR_Constructor+0x28>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10b      	bne.n	8004e84 <MRT_LSM6DSR_Constructor+0x24>
		lsm6dsr = new LSM6DSR(&LSM6DSR_I2C, (uint8_t) MRT_LSM6DSR_ADDRESS);
 8004e6c:	203c      	movs	r0, #60	; 0x3c
 8004e6e:	f00e fafd 	bl	801346c <_Znwj>
 8004e72:	4603      	mov	r3, r0
 8004e74:	461c      	mov	r4, r3
 8004e76:	226a      	movs	r2, #106	; 0x6a
 8004e78:	4904      	ldr	r1, [pc, #16]	; (8004e8c <MRT_LSM6DSR_Constructor+0x2c>)
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	f000 f990 	bl	80051a0 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>
 8004e80:	4b01      	ldr	r3, [pc, #4]	; (8004e88 <MRT_LSM6DSR_Constructor+0x28>)
 8004e82:	601c      	str	r4, [r3, #0]
	}
}
 8004e84:	bf00      	nop
 8004e86:	bd98      	pop	{r3, r4, r7, pc}
 8004e88:	200003ec 	.word	0x200003ec
 8004e8c:	20005b60 	.word	0x20005b60

08004e90 <MRT_LSM6DSR_Destructor>:

void MRT_LSM6DSR_Destructor(){
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
	if (lsm6dsr!=NULL){
 8004e94:	4b05      	ldr	r3, [pc, #20]	; (8004eac <MRT_LSM6DSR_Destructor+0x1c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d002      	beq.n	8004ea2 <MRT_LSM6DSR_Destructor+0x12>
		lsm6dsr = NULL;
 8004e9c:	4b03      	ldr	r3, [pc, #12]	; (8004eac <MRT_LSM6DSR_Destructor+0x1c>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]
	}
}
 8004ea2:	bf00      	nop
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	200003ec 	.word	0x200003ec

08004eb0 <MRT_LSM6DSR_getAcceleration>:

void MRT_LSM6DSR_getAcceleration(void){
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
	float* temp_array = lsm6dsr->getAcceleration();
 8004eb6:	4b0b      	ldr	r3, [pc, #44]	; (8004ee4 <MRT_LSM6DSR_getAcceleration+0x34>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 fa1c 	bl	80052f8 <_ZN7LSM6DSR15getAccelerationEv>
 8004ec0:	6078      	str	r0, [r7, #4]
	hlsm6dsr.acceleration_mg[0] = temp_array[0];
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a08      	ldr	r2, [pc, #32]	; (8004ee8 <MRT_LSM6DSR_getAcceleration+0x38>)
 8004ec8:	6013      	str	r3, [r2, #0]
	hlsm6dsr.acceleration_mg[1] = temp_array[1];
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	4a06      	ldr	r2, [pc, #24]	; (8004ee8 <MRT_LSM6DSR_getAcceleration+0x38>)
 8004ed0:	6053      	str	r3, [r2, #4]
	hlsm6dsr.acceleration_mg[2] = temp_array[2];
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	4a04      	ldr	r2, [pc, #16]	; (8004ee8 <MRT_LSM6DSR_getAcceleration+0x38>)
 8004ed8:	6093      	str	r3, [r2, #8]
}
 8004eda:	bf00      	nop
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	200003ec 	.word	0x200003ec
 8004ee8:	200003f4 	.word	0x200003f4

08004eec <MRT_LSM6DSR_getAngularRate>:
void MRT_LSM6DSR_getAngularRate(void){
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
	float* temp_array = lsm6dsr->getAngularRate();
 8004ef2:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <MRT_LSM6DSR_getAngularRate+0x34>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 fa7c 	bl	80053f4 <_ZN7LSM6DSR14getAngularRateEv>
 8004efc:	6078      	str	r0, [r7, #4]
	hlsm6dsr.angular_rate_mdps[0] = temp_array[0];
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a08      	ldr	r2, [pc, #32]	; (8004f24 <MRT_LSM6DSR_getAngularRate+0x38>)
 8004f04:	60d3      	str	r3, [r2, #12]
	hlsm6dsr.angular_rate_mdps[1] = temp_array[1];
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	4a06      	ldr	r2, [pc, #24]	; (8004f24 <MRT_LSM6DSR_getAngularRate+0x38>)
 8004f0c:	6113      	str	r3, [r2, #16]
	hlsm6dsr.angular_rate_mdps[2] = temp_array[2];
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	4a04      	ldr	r2, [pc, #16]	; (8004f24 <MRT_LSM6DSR_getAngularRate+0x38>)
 8004f14:	6153      	str	r3, [r2, #20]
}
 8004f16:	bf00      	nop
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	200003ec 	.word	0x200003ec
 8004f24:	200003f4 	.word	0x200003f4

08004f28 <MRT_LSM6DSR_getTemperature>:
void MRT_LSM6DSR_getTemperature(void){
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
	lsm6dsr->getTemperature();
 8004f2c:	4b05      	ldr	r3, [pc, #20]	; (8004f44 <MRT_LSM6DSR_getTemperature+0x1c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 fa29 	bl	8005388 <_ZN7LSM6DSR14getTemperatureEv>
	hlsm6dsr.temperature_degC = lsm6dsr->temperature_degC;
 8004f36:	4b03      	ldr	r3, [pc, #12]	; (8004f44 <MRT_LSM6DSR_getTemperature+0x1c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	4a02      	ldr	r2, [pc, #8]	; (8004f48 <MRT_LSM6DSR_getTemperature+0x20>)
 8004f3e:	6193      	str	r3, [r2, #24]
}
 8004f40:	bf00      	nop
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	200003ec 	.word	0x200003ec
 8004f48:	200003f4 	.word	0x200003f4

08004f4c <MRT_LSM6DSR_pollAll>:

void MRT_LSM6DSR_pollAll(void){
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
	MRT_LSM6DSR_getAcceleration();
 8004f50:	f7ff ffae 	bl	8004eb0 <MRT_LSM6DSR_getAcceleration>
	MRT_LSM6DSR_getAngularRate();
 8004f54:	f7ff ffca 	bl	8004eec <MRT_LSM6DSR_getAngularRate>
	MRT_LSM6DSR_getTemperature();
 8004f58:	f7ff ffe6 	bl	8004f28 <MRT_LSM6DSR_getTemperature>
}
 8004f5c:	bf00      	nop
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <MRT_LPS22HH_Constructor>:


//**************************************************//
/*****LPS22HH STATIC FUNCTIONS*****/

void MRT_LPS22HH_Constructor(){
 8004f60:	b598      	push	{r3, r4, r7, lr}
 8004f62:	af00      	add	r7, sp, #0
	if (lps22hh==NULL){
 8004f64:	4b08      	ldr	r3, [pc, #32]	; (8004f88 <MRT_LPS22HH_Constructor+0x28>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10b      	bne.n	8004f84 <MRT_LPS22HH_Constructor+0x24>
		lps22hh = new LPS22HH(&LPS22HH_I2C, (uint8_t) MRT_LPS22HH_ADDRESS);
 8004f6c:	2020      	movs	r0, #32
 8004f6e:	f00e fa7d 	bl	801346c <_Znwj>
 8004f72:	4603      	mov	r3, r0
 8004f74:	461c      	mov	r4, r3
 8004f76:	22b3      	movs	r2, #179	; 0xb3
 8004f78:	4904      	ldr	r1, [pc, #16]	; (8004f8c <MRT_LPS22HH_Constructor+0x2c>)
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	f000 fabe 	bl	80054fc <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>
 8004f80:	4b01      	ldr	r3, [pc, #4]	; (8004f88 <MRT_LPS22HH_Constructor+0x28>)
 8004f82:	601c      	str	r4, [r3, #0]
	}
}
 8004f84:	bf00      	nop
 8004f86:	bd98      	pop	{r3, r4, r7, pc}
 8004f88:	200003f0 	.word	0x200003f0
 8004f8c:	20005b60 	.word	0x20005b60

08004f90 <MRT_LPS22HH_Destructor>:

void MRT_LPS22HH_Destructor(){
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
	if (lps22hh!=NULL){
 8004f94:	4b05      	ldr	r3, [pc, #20]	; (8004fac <MRT_LPS22HH_Destructor+0x1c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <MRT_LPS22HH_Destructor+0x12>
		lps22hh = NULL;
 8004f9c:	4b03      	ldr	r3, [pc, #12]	; (8004fac <MRT_LPS22HH_Destructor+0x1c>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	601a      	str	r2, [r3, #0]
	}
}
 8004fa2:	bf00      	nop
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	200003f0 	.word	0x200003f0

08004fb0 <MRT_LPS22HH_getPressure>:

void MRT_LPS22HH_getPressure(void){
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	af00      	add	r7, sp, #0
	hlps22hh.pressure_hPa = lps22hh->getPressure();
 8004fb4:	4b05      	ldr	r3, [pc, #20]	; (8004fcc <MRT_LPS22HH_getPressure+0x1c>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 fb27 	bl	800560c <_ZN7LPS22HH11getPressureEv>
 8004fbe:	eef0 7a40 	vmov.f32	s15, s0
 8004fc2:	4b03      	ldr	r3, [pc, #12]	; (8004fd0 <MRT_LPS22HH_getPressure+0x20>)
 8004fc4:	edc3 7a00 	vstr	s15, [r3]
}
 8004fc8:	bf00      	nop
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	200003f0 	.word	0x200003f0
 8004fd0:	20000420 	.word	0x20000420

08004fd4 <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(void){
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
	hlps22hh.temperature_degC = lps22hh->getTemperature();
 8004fd8:	4b05      	ldr	r3, [pc, #20]	; (8004ff0 <MRT_LPS22HH_getTemperature+0x1c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 fb49 	bl	8005674 <_ZN7LPS22HH14getTemperatureEv>
 8004fe2:	eef0 7a40 	vmov.f32	s15, s0
 8004fe6:	4b03      	ldr	r3, [pc, #12]	; (8004ff4 <MRT_LPS22HH_getTemperature+0x20>)
 8004fe8:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8004fec:	bf00      	nop
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	200003f0 	.word	0x200003f0
 8004ff4:	20000420 	.word	0x20000420

08004ff8 <MRT_LPS22HH_pollAll>:

void MRT_LPS22HH_pollAll(void){
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
	MRT_LPS22HH_getPressure();
 8004ffc:	f7ff ffd8 	bl	8004fb0 <MRT_LPS22HH_getPressure>
	MRT_LPS22HH_getTemperature();
 8005000:	f7ff ffe8 	bl	8004fd4 <MRT_LPS22HH_getTemperature>
}
 8005004:	bf00      	nop
 8005006:	bd80      	pop	{r7, pc}

08005008 <MRT_GPS_pollAll>:


//**************************************************//
/*****GPS STATIC FUNCTIONS*****/

void MRT_GPS_pollAll(void){
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
	GPS_Poll(&hgps.latitude, &hgps.longitude, &hgps.time);
 800500c:	4a03      	ldr	r2, [pc, #12]	; (800501c <MRT_GPS_pollAll+0x14>)
 800500e:	4904      	ldr	r1, [pc, #16]	; (8005020 <MRT_GPS_pollAll+0x18>)
 8005010:	4804      	ldr	r0, [pc, #16]	; (8005024 <MRT_GPS_pollAll+0x1c>)
 8005012:	f000 fb9f 	bl	8005754 <GPS_Poll>
}
 8005016:	bf00      	nop
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	2000043c 	.word	0x2000043c
 8005020:	20000438 	.word	0x20000438
 8005024:	20000434 	.word	0x20000434

08005028 <MRT_LSM6DSR_Init>:


//**************************************************//
/*****PUBLIC STATIC FUNCTIONS*****/

HLSM6DSR MRT_LSM6DSR_Init(void){
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
	MRT_LSM6DSR_Constructor();
 8005030:	f7ff ff16 	bl	8004e60 <MRT_LSM6DSR_Constructor>
	HLSM6DSR lsm6dsr_handler;
	lsm6dsr_handler.getAcceleration = &MRT_LSM6DSR_getAcceleration;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a16      	ldr	r2, [pc, #88]	; (8005090 <MRT_LSM6DSR_Init+0x68>)
 8005038:	61da      	str	r2, [r3, #28]
	lsm6dsr_handler.getAngularRate = &MRT_LSM6DSR_getAngularRate;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a15      	ldr	r2, [pc, #84]	; (8005094 <MRT_LSM6DSR_Init+0x6c>)
 800503e:	621a      	str	r2, [r3, #32]
	lsm6dsr_handler.getTemperature = &MRT_LSM6DSR_getTemperature;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a15      	ldr	r2, [pc, #84]	; (8005098 <MRT_LSM6DSR_Init+0x70>)
 8005044:	625a      	str	r2, [r3, #36]	; 0x24
	lsm6dsr_handler.pollAll = &MRT_LSM6DSR_pollAll;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a14      	ldr	r2, [pc, #80]	; (800509c <MRT_LSM6DSR_Init+0x74>)
 800504a:	629a      	str	r2, [r3, #40]	; 0x28

	lsm6dsr_handler.acceleration_mg[0] = 0;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f04f 0200 	mov.w	r2, #0
 8005052:	601a      	str	r2, [r3, #0]
	lsm6dsr_handler.acceleration_mg[1] = 0;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f04f 0200 	mov.w	r2, #0
 800505a:	605a      	str	r2, [r3, #4]
	lsm6dsr_handler.acceleration_mg[2] = 0;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f04f 0200 	mov.w	r2, #0
 8005062:	609a      	str	r2, [r3, #8]
	lsm6dsr_handler.angular_rate_mdps[0] = 0;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f04f 0200 	mov.w	r2, #0
 800506a:	60da      	str	r2, [r3, #12]
	lsm6dsr_handler.angular_rate_mdps[1] = 0;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f04f 0200 	mov.w	r2, #0
 8005072:	611a      	str	r2, [r3, #16]
	lsm6dsr_handler.angular_rate_mdps[2] = 0;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f04f 0200 	mov.w	r2, #0
 800507a:	615a      	str	r2, [r3, #20]
	lsm6dsr_handler.temperature_degC = 0;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f04f 0200 	mov.w	r2, #0
 8005082:	619a      	str	r2, [r3, #24]
	return lsm6dsr_handler;
 8005084:	bf00      	nop
}
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	08004eb1 	.word	0x08004eb1
 8005094:	08004eed 	.word	0x08004eed
 8005098:	08004f29 	.word	0x08004f29
 800509c:	08004f4d 	.word	0x08004f4d

080050a0 <MRT_LPS22HH_Init>:

struct HLPS22HH MRT_LPS22HH_Init(void){
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
	MRT_LPS22HH_Constructor();
 80050a8:	f7ff ff5a 	bl	8004f60 <MRT_LPS22HH_Constructor>
	struct HLPS22HH lps22hh_handler;
	lps22hh_handler.getPressure = &MRT_LPS22HH_getPressure;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a0a      	ldr	r2, [pc, #40]	; (80050d8 <MRT_LPS22HH_Init+0x38>)
 80050b0:	609a      	str	r2, [r3, #8]
	lps22hh_handler.getTemperature = &MRT_LPS22HH_getTemperature;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a09      	ldr	r2, [pc, #36]	; (80050dc <MRT_LPS22HH_Init+0x3c>)
 80050b6:	60da      	str	r2, [r3, #12]
	lps22hh_handler.pollAll = &MRT_LPS22HH_pollAll;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a09      	ldr	r2, [pc, #36]	; (80050e0 <MRT_LPS22HH_Init+0x40>)
 80050bc:	611a      	str	r2, [r3, #16]

	lps22hh_handler.pressure_hPa = 0;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	601a      	str	r2, [r3, #0]
	lps22hh_handler.temperature_degC = 0;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	605a      	str	r2, [r3, #4]
	return lps22hh_handler;
 80050ce:	bf00      	nop
}
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	08004fb1 	.word	0x08004fb1
 80050dc:	08004fd5 	.word	0x08004fd5
 80050e0:	08004ff9 	.word	0x08004ff9

080050e4 <MRT_GPS_Init>:

struct HGPS MRT_GPS_Init(void){
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
	struct HGPS gps_handler;
	gps_handler.pollAll = &MRT_GPS_pollAll;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a0c      	ldr	r2, [pc, #48]	; (8005120 <MRT_GPS_Init+0x3c>)
 80050f0:	60da      	str	r2, [r3, #12]
	GPS_Init(&GPS_UART, print, tone_freq);
 80050f2:	4a0c      	ldr	r2, [pc, #48]	; (8005124 <MRT_GPS_Init+0x40>)
 80050f4:	490c      	ldr	r1, [pc, #48]	; (8005128 <MRT_GPS_Init+0x44>)
 80050f6:	480d      	ldr	r0, [pc, #52]	; (800512c <MRT_GPS_Init+0x48>)
 80050f8:	f000 fd8c 	bl	8005c14 <GPS_Init>
	gps_handler.latitude = 0;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f04f 0200 	mov.w	r2, #0
 8005102:	601a      	str	r2, [r3, #0]
	gps_handler.longitude = 0;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f04f 0200 	mov.w	r2, #0
 800510a:	605a      	str	r2, [r3, #4]
	gps_handler.time = 0;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f04f 0200 	mov.w	r2, #0
 8005112:	609a      	str	r2, [r3, #8]
	return gps_handler;
 8005114:	bf00      	nop
}
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	08005009 	.word	0x08005009
 8005124:	08001135 	.word	0x08001135
 8005128:	08001109 	.word	0x08001109
 800512c:	20005e48 	.word	0x20005e48

08005130 <MRT_i2c_sensors_Init>:

void MRT_i2c_sensors_Init(void){
 8005130:	b5b0      	push	{r4, r5, r7, lr}
 8005132:	b08c      	sub	sp, #48	; 0x30
 8005134:	af00      	add	r7, sp, #0

	//LSM6DSR
	#if LSM6DSR_
	HAL_IWDG_Refresh(&hiwdg);
	hlsm6dsr = MRT_LSM6DSR_Init();
 8005136:	4c13      	ldr	r4, [pc, #76]	; (8005184 <MRT_i2c_sensors_Init+0x54>)
 8005138:	463b      	mov	r3, r7
 800513a:	4618      	mov	r0, r3
 800513c:	f7ff ff74 	bl	8005028 <MRT_LSM6DSR_Init>
 8005140:	4625      	mov	r5, r4
 8005142:	463c      	mov	r4, r7
 8005144:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005146:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005148:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800514a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800514c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005150:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	#endif

	//LPS22HH
	#if LPS22HH_
	HAL_IWDG_Refresh(&hiwdg);
	hlps22hh = MRT_LPS22HH_Init();
 8005154:	4c0c      	ldr	r4, [pc, #48]	; (8005188 <MRT_i2c_sensors_Init+0x58>)
 8005156:	463b      	mov	r3, r7
 8005158:	4618      	mov	r0, r3
 800515a:	f7ff ffa1 	bl	80050a0 <MRT_LPS22HH_Init>
 800515e:	4625      	mov	r5, r4
 8005160:	463c      	mov	r4, r7
 8005162:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005164:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005166:	6823      	ldr	r3, [r4, #0]
 8005168:	602b      	str	r3, [r5, #0]
	#endif

	//GPS
	#if GPS_
	HAL_IWDG_Refresh(&hiwdg);
	hgps = MRT_GPS_Init();
 800516a:	4c08      	ldr	r4, [pc, #32]	; (800518c <MRT_i2c_sensors_Init+0x5c>)
 800516c:	463b      	mov	r3, r7
 800516e:	4618      	mov	r0, r3
 8005170:	f7ff ffb8 	bl	80050e4 <MRT_GPS_Init>
 8005174:	463b      	mov	r3, r7
 8005176:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005178:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	#endif

}
 800517c:	bf00      	nop
 800517e:	3730      	adds	r7, #48	; 0x30
 8005180:	46bd      	mov	sp, r7
 8005182:	bdb0      	pop	{r4, r5, r7, pc}
 8005184:	200003f4 	.word	0x200003f4
 8005188:	20000420 	.word	0x20000420
 800518c:	20000434 	.word	0x20000434

08005190 <MRT_i2c_sensors_Deinit>:


void MRT_i2c_sensors_Deinit(void){
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0

	//LSM6DSR
	#if LSM6DSR_
	MRT_LSM6DSR_Destructor();
 8005194:	f7ff fe7c 	bl	8004e90 <MRT_LSM6DSR_Destructor>
	#endif

	//LPS22HH
	#if LPS22HH_
	MRT_LPS22HH_Destructor();
 8005198:	f7ff fefa 	bl	8004f90 <MRT_LPS22HH_Destructor>
	#endif

	//GPS
	//NO DEINIT NEEDED HERE
}
 800519c:	bf00      	nop
 800519e:	bd80      	pop	{r7, pc}

080051a0 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>:


//**************************************************//
/*****LSM6DSR*****/

LSM6DSR::LSM6DSR(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b088      	sub	sp, #32
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	4613      	mov	r3, r2
 80051ac:	71fb      	strb	r3, [r7, #7]
	println((char*) "\r\nLSM6DSR Init");
 80051ae:	4848      	ldr	r0, [pc, #288]	; (80052d0 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x130>)
 80051b0:	f7fb ff8c 	bl	80010cc <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4a47      	ldr	r2, [pc, #284]	; (80052d4 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x134>)
 80051b8:	61da      	str	r2, [r3, #28]
	ctx.read_reg = read;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	4a46      	ldr	r2, [pc, #280]	; (80052d8 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x138>)
 80051be:	621a      	str	r2, [r3, #32]
	ctx.handle = i2c_bus;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait sensor boot time */
	HAL_Delay(LSM6DSR_BOOT_TIME);
 80051c6:	2064      	movs	r0, #100	; 0x64
 80051c8:	f005 f9fc 	bl	800a5c4 <HAL_Delay>
	/* Check device ID */
	lsm6dsr_device_id_get(&ctx, &whoamI);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f103 021c 	add.w	r2, r3, #28
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	3338      	adds	r3, #56	; 0x38
 80051d6:	4619      	mov	r1, r3
 80051d8:	4610      	mov	r0, r2
 80051da:	f001 faf1 	bl	80067c0 <lsm6dsr_device_id_get>

	print((char*) "\tChecking Sensor ID...");
 80051de:	483f      	ldr	r0, [pc, #252]	; (80052dc <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x13c>)
 80051e0:	f7fb ff92 	bl	8001108 <print>
	if (whoamI != address){
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80051ea:	79fa      	ldrb	r2, [r7, #7]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d018      	beq.n	8005222 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x82>
	  println((char*) "NOT OK");
 80051f0:	483b      	ldr	r0, [pc, #236]	; (80052e0 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x140>)
 80051f2:	f7fb ff6b 	bl	80010cc <println>
	  print((char*) "\tThis Device is: ");
 80051f6:	483b      	ldr	r0, [pc, #236]	; (80052e4 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x144>)
 80051f8:	f7fb ff86 	bl	8001108 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005202:	461a      	mov	r2, r3
 8005204:	f107 0314 	add.w	r3, r7, #20
 8005208:	4937      	ldr	r1, [pc, #220]	; (80052e8 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x148>)
 800520a:	4618      	mov	r0, r3
 800520c:	f010 fe98 	bl	8015f40 <siprintf>
	  print(buffer);
 8005210:	f107 0314 	add.w	r3, r7, #20
 8005214:	4618      	mov	r0, r3
 8005216:	f7fb ff77 	bl	8001108 <print>

	  println((char*) "\n\rProgram Terminated\n\r");
 800521a:	4834      	ldr	r0, [pc, #208]	; (80052ec <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x14c>)
 800521c:	f7fb ff56 	bl	80010cc <println>
	  while(1);
 8005220:	e7fe      	b.n	8005220 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x80>
	}
	println((char*) "OK");
 8005222:	4833      	ldr	r0, [pc, #204]	; (80052f0 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x150>)
 8005224:	f7fb ff52 	bl	80010cc <println>

	/* Restore default configuration */
	print((char*) "\tRestore default configuration...");
 8005228:	4832      	ldr	r0, [pc, #200]	; (80052f4 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x154>)
 800522a:	f7fb ff6d 	bl	8001108 <print>
	lsm6dsr_reset_set(&ctx, PROPERTY_ENABLE);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	331c      	adds	r3, #28
 8005232:	2101      	movs	r1, #1
 8005234:	4618      	mov	r0, r3
 8005236:	f001 fad4 	bl	80067e2 <lsm6dsr_reset_set>
	HAL_Delay(500);
 800523a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800523e:	f005 f9c1 	bl	800a5c4 <HAL_Delay>
	do {
	lsm6dsr_reset_get(&ctx, &rst);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f103 021c 	add.w	r2, r3, #28
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	3339      	adds	r3, #57	; 0x39
 800524c:	4619      	mov	r1, r3
 800524e:	4610      	mov	r0, r2
 8005250:	f001 faed 	bl	800682e <lsm6dsr_reset_get>
	} while (rst);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800525a:	2b00      	cmp	r3, #0
 800525c:	d000      	beq.n	8005260 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0xc0>
	do {
 800525e:	e7f0      	b.n	8005242 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0xa2>
	println((char*) "OK");
 8005260:	4823      	ldr	r0, [pc, #140]	; (80052f0 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x150>)
 8005262:	f7fb ff33 	bl	80010cc <println>

	/* Disable I3C interface */
    lsm6dsr_i3c_disable_set(&ctx, LSM6DSR_I3C_DISABLE);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	331c      	adds	r3, #28
 800526a:	2180      	movs	r1, #128	; 0x80
 800526c:	4618      	mov	r0, r3
 800526e:	f001 fb55 	bl	800691c <lsm6dsr_i3c_disable_set>

	/* Enable Block Data Update */
	lsm6dsr_block_data_update_set(&ctx, PROPERTY_ENABLE);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	331c      	adds	r3, #28
 8005276:	2101      	movs	r1, #1
 8005278:	4618      	mov	r0, r3
 800527a:	f001 f951 	bl	8006520 <lsm6dsr_block_data_update_set>
	/* Set Output Data Rate */
	lsm6dsr_xl_data_rate_set(&ctx, LSM6DSR_XL_ODR_12Hz5);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	331c      	adds	r3, #28
 8005282:	2101      	movs	r1, #1
 8005284:	4618      	mov	r0, r3
 8005286:	f000 ff2d 	bl	80060e4 <lsm6dsr_xl_data_rate_set>
	lsm6dsr_gy_data_rate_set(&ctx, LSM6DSR_GY_ODR_12Hz5);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	331c      	adds	r3, #28
 800528e:	2101      	movs	r1, #1
 8005290:	4618      	mov	r0, r3
 8005292:	f001 f849 	bl	8006328 <lsm6dsr_gy_data_rate_set>
	/* Set full scale */
	lsm6dsr_xl_full_scale_set(&ctx, LSM6DSR_2g);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	331c      	adds	r3, #28
 800529a:	2100      	movs	r1, #0
 800529c:	4618      	mov	r0, r3
 800529e:	f000 fefb 	bl	8006098 <lsm6dsr_xl_full_scale_set>
	lsm6dsr_gy_full_scale_set(&ctx, LSM6DSR_2000dps);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	331c      	adds	r3, #28
 80052a6:	210c      	movs	r1, #12
 80052a8:	4618      	mov	r0, r3
 80052aa:	f001 f817 	bl	80062dc <lsm6dsr_gy_full_scale_set>
	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsr_xl_hp_path_on_out_set(&ctx, LSM6DSR_LP_ODR_DIV_100);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	331c      	adds	r3, #28
 80052b2:	2104      	movs	r1, #4
 80052b4:	4618      	mov	r0, r3
 80052b6:	f001 faf9 	bl	80068ac <lsm6dsr_xl_hp_path_on_out_set>
	lsm6dsr_xl_filter_lp2_set(&ctx, PROPERTY_ENABLE);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	331c      	adds	r3, #28
 80052be:	2101      	movs	r1, #1
 80052c0:	4618      	mov	r0, r3
 80052c2:	f001 facd 	bl	8006860 <lsm6dsr_xl_filter_lp2_set>
}
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	4618      	mov	r0, r3
 80052ca:	3720      	adds	r7, #32
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	0801b46c 	.word	0x0801b46c
 80052d4:	08005487 	.word	0x08005487
 80052d8:	080054c1 	.word	0x080054c1
 80052dc:	0801b47c 	.word	0x0801b47c
 80052e0:	0801b494 	.word	0x0801b494
 80052e4:	0801b49c 	.word	0x0801b49c
 80052e8:	0801b4b0 	.word	0x0801b4b0
 80052ec:	0801b4b8 	.word	0x0801b4b8
 80052f0:	0801b4d0 	.word	0x0801b4d0
 80052f4:	0801b4d4 	.word	0x0801b4d4

080052f8 <_ZN7LSM6DSR15getAccelerationEv>:


float* LSM6DSR::getAcceleration(void){
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
	lsm6dsr_xl_flag_data_ready_get(&ctx, &reg);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f103 021c 	add.w	r2, r3, #28
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	3328      	adds	r3, #40	; 0x28
 800530a:	4619      	mov	r1, r3
 800530c:	4610      	mov	r0, r2
 800530e:	f001 f92d 	bl	800656c <lsm6dsr_xl_flag_data_ready_get>

	if (reg){
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005318:	2b00      	cmp	r3, #0
 800531a:	d030      	beq.n	800537e <_ZN7LSM6DSR15getAccelerationEv+0x86>
		// Read magnetic field data
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	332a      	adds	r3, #42	; 0x2a
 8005320:	2206      	movs	r2, #6
 8005322:	2100      	movs	r1, #0
 8005324:	4618      	mov	r0, r3
 8005326:	f00f fb0f 	bl	8014948 <memset>
		lsm6dsr_acceleration_raw_get(&ctx, data_raw_acceleration);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f103 021c 	add.w	r2, r3, #28
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	332a      	adds	r3, #42	; 0x2a
 8005334:	4619      	mov	r1, r3
 8005336:	4610      	mov	r0, r2
 8005338:	f001 f9d1 	bl	80066de <lsm6dsr_acceleration_raw_get>
		acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[0]);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8005342:	4618      	mov	r0, r3
 8005344:	f000 fe5c 	bl	8006000 <lsm6dsr_from_fs2g_to_mg>
 8005348:	eef0 7a40 	vmov.f32	s15, s0
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	edc3 7a00 	vstr	s15, [r3]
		acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[1]);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8005358:	4618      	mov	r0, r3
 800535a:	f000 fe51 	bl	8006000 <lsm6dsr_from_fs2g_to_mg>
 800535e:	eef0 7a40 	vmov.f32	s15, s0
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	edc3 7a01 	vstr	s15, [r3, #4]
		acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[2]);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800536e:	4618      	mov	r0, r3
 8005370:	f000 fe46 	bl	8006000 <lsm6dsr_from_fs2g_to_mg>
 8005374:	eef0 7a40 	vmov.f32	s15, s0
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	return acceleration_mg;
 800537e:	687b      	ldr	r3, [r7, #4]
}
 8005380:	4618      	mov	r0, r3
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <_ZN7LSM6DSR14getTemperatureEv>:


float LSM6DSR::getTemperature(void){
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
    lsm6dsr_temp_flag_data_ready_get(&ctx, &reg);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f103 021c 	add.w	r2, r3, #28
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	3328      	adds	r3, #40	; 0x28
 800539a:	4619      	mov	r1, r3
 800539c:	4610      	mov	r0, r2
 800539e:	f001 f917 	bl	80065d0 <lsm6dsr_temp_flag_data_ready_get>

    if (reg){
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d01a      	beq.n	80053e2 <_ZN7LSM6DSR14getTemperatureEv+0x5a>
		// Read temperature data
		memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	3336      	adds	r3, #54	; 0x36
 80053b0:	2202      	movs	r2, #2
 80053b2:	2100      	movs	r1, #0
 80053b4:	4618      	mov	r0, r3
 80053b6:	f00f fac7 	bl	8014948 <memset>
		lsm6dsr_temperature_raw_get(&ctx, &data_raw_temperature);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f103 021c 	add.w	r2, r3, #28
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	3336      	adds	r3, #54	; 0x36
 80053c4:	4619      	mov	r1, r3
 80053c6:	4610      	mov	r0, r2
 80053c8:	f001 f91b 	bl	8006602 <lsm6dsr_temperature_raw_get>
		temperature_degC = lsm6dsr_from_lsb_to_celsius(data_raw_temperature);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 fe44 	bl	8006060 <lsm6dsr_from_lsb_to_celsius>
 80053d8:	eef0 7a40 	vmov.f32	s15, s0
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	edc3 7a06 	vstr	s15, [r3, #24]
	}
    return temperature_degC;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	ee07 3a90 	vmov	s15, r3
}
 80053ea:	eeb0 0a67 	vmov.f32	s0, s15
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <_ZN7LSM6DSR14getAngularRateEv>:


float* LSM6DSR::getAngularRate(void){
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
    lsm6dsr_gy_flag_data_ready_get(&ctx, &reg);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f103 021c 	add.w	r2, r3, #28
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	3328      	adds	r3, #40	; 0x28
 8005406:	4619      	mov	r1, r3
 8005408:	4610      	mov	r0, r2
 800540a:	f001 f8c8 	bl	800659e <lsm6dsr_gy_flag_data_ready_get>

    if (reg){
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005414:	2b00      	cmp	r3, #0
 8005416:	d030      	beq.n	800547a <_ZN7LSM6DSR14getAngularRateEv+0x86>
		// Read magnetic field data
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3330      	adds	r3, #48	; 0x30
 800541c:	2206      	movs	r2, #6
 800541e:	2100      	movs	r1, #0
 8005420:	4618      	mov	r0, r3
 8005422:	f00f fa91 	bl	8014948 <memset>
		lsm6dsr_angular_rate_raw_get(&ctx, data_raw_angular_rate);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f103 021c 	add.w	r2, r3, #28
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3330      	adds	r3, #48	; 0x30
 8005430:	4619      	mov	r1, r3
 8005432:	4610      	mov	r0, r2
 8005434:	f001 f908 	bl	8006648 <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fdf6 	bl	8006030 <lsm6dsr_from_fs2000dps_to_mdps>
 8005444:	eef0 7a40 	vmov.f32	s15, s0
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	edc3 7a03 	vstr	s15, [r3, #12]
		angular_rate_mdps[1] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8005454:	4618      	mov	r0, r3
 8005456:	f000 fdeb 	bl	8006030 <lsm6dsr_from_fs2000dps_to_mdps>
 800545a:	eef0 7a40 	vmov.f32	s15, s0
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	edc3 7a04 	vstr	s15, [r3, #16]
		angular_rate_mdps[2] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800546a:	4618      	mov	r0, r3
 800546c:	f000 fde0 	bl	8006030 <lsm6dsr_from_fs2000dps_to_mdps>
 8005470:	eef0 7a40 	vmov.f32	s15, s0
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	edc3 7a05 	vstr	s15, [r3, #20]
		fs500dps_to_mdps
		fs1000dps_to_mdps
		fs2000dps_to_mdps
		*/
	}
    return angular_rate_mdps;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	330c      	adds	r3, #12
}
 800547e:	4618      	mov	r0, r3
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <_ZN7LSM6DSR5writeEPvhPKht>:


int32_t LSM6DSR::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 8005486:	b580      	push	{r7, lr}
 8005488:	b088      	sub	sp, #32
 800548a:	af04      	add	r7, sp, #16
 800548c:	60f8      	str	r0, [r7, #12]
 800548e:	607a      	str	r2, [r7, #4]
 8005490:	461a      	mov	r2, r3
 8005492:	460b      	mov	r3, r1
 8005494:	72fb      	strb	r3, [r7, #11]
 8005496:	4613      	mov	r3, r2
 8005498:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 800549a:	7afb      	ldrb	r3, [r7, #11]
 800549c:	b29a      	uxth	r2, r3
 800549e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054a2:	9302      	str	r3, [sp, #8]
 80054a4:	893b      	ldrh	r3, [r7, #8]
 80054a6:	9301      	str	r3, [sp, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	2301      	movs	r3, #1
 80054ae:	21d5      	movs	r1, #213	; 0xd5
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f006 f909 	bl	800b6c8 <HAL_I2C_Mem_Write>
  return 0;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <_ZN7LSM6DSR4readEPvhPht>:

int32_t LSM6DSR::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b088      	sub	sp, #32
 80054c4:	af04      	add	r7, sp, #16
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	607a      	str	r2, [r7, #4]
 80054ca:	461a      	mov	r2, r3
 80054cc:	460b      	mov	r3, r1
 80054ce:	72fb      	strb	r3, [r7, #11]
 80054d0:	4613      	mov	r3, r2
 80054d2:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80054d4:	7afb      	ldrb	r3, [r7, #11]
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054dc:	9302      	str	r3, [sp, #8]
 80054de:	893b      	ldrh	r3, [r7, #8]
 80054e0:	9301      	str	r3, [sp, #4]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	2301      	movs	r3, #1
 80054e8:	21d5      	movs	r1, #213	; 0xd5
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f006 f9e6 	bl	800b8bc <HAL_I2C_Mem_Read>
  return 0;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
	...

080054fc <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>:

//**************************************************//
/*****LPS22HH*****/


LPS22HH::LPS22HH(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b088      	sub	sp, #32
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	4613      	mov	r3, r2
 8005508:	71fb      	strb	r3, [r7, #7]
	println((char*) "\r\nLPS22HH Init");
 800550a:	4836      	ldr	r0, [pc, #216]	; (80055e4 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xe8>)
 800550c:	f7fb fdde 	bl	80010cc <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4a35      	ldr	r2, [pc, #212]	; (80055e8 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xec>)
 8005514:	609a      	str	r2, [r3, #8]
	ctx.read_reg = read;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4a34      	ldr	r2, [pc, #208]	; (80055ec <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf0>)
 800551a:	60da      	str	r2, [r3, #12]
	ctx.handle = i2c_bus;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	611a      	str	r2, [r3, #16]
	/* Wait sensor boot time */
	HAL_Delay(LPS22HH_BOOT_TIME);
 8005522:	2064      	movs	r0, #100	; 0x64
 8005524:	f005 f84e 	bl	800a5c4 <HAL_Delay>
	/* Check device ID */
	whoamI = 0;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	779a      	strb	r2, [r3, #30]
	lps22hh_device_id_get(&ctx, &whoamI);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f103 0208 	add.w	r2, r3, #8
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	331e      	adds	r3, #30
 8005538:	4619      	mov	r1, r3
 800553a:	4610      	mov	r0, r2
 800553c:	f000 fce0 	bl	8005f00 <lps22hh_device_id_get>


	print((char*) "\tChecking Sensor ID...");
 8005540:	482b      	ldr	r0, [pc, #172]	; (80055f0 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf4>)
 8005542:	f7fb fde1 	bl	8001108 <print>
	if ( whoamI != address ){
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	7f9b      	ldrb	r3, [r3, #30]
 800554a:	79fa      	ldrb	r2, [r7, #7]
 800554c:	429a      	cmp	r2, r3
 800554e:	d017      	beq.n	8005580 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x84>
	  println((char*) "NOT OK");
 8005550:	4828      	ldr	r0, [pc, #160]	; (80055f4 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf8>)
 8005552:	f7fb fdbb 	bl	80010cc <println>
	  print((char*) "\tThis Device is: ");
 8005556:	4828      	ldr	r0, [pc, #160]	; (80055f8 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xfc>)
 8005558:	f7fb fdd6 	bl	8001108 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	7f9b      	ldrb	r3, [r3, #30]
 8005560:	461a      	mov	r2, r3
 8005562:	f107 0314 	add.w	r3, r7, #20
 8005566:	4925      	ldr	r1, [pc, #148]	; (80055fc <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x100>)
 8005568:	4618      	mov	r0, r3
 800556a:	f010 fce9 	bl	8015f40 <siprintf>
	  print(buffer);
 800556e:	f107 0314 	add.w	r3, r7, #20
 8005572:	4618      	mov	r0, r3
 8005574:	f7fb fdc8 	bl	8001108 <print>

	  println((char*) "\n\rProgram Terminated\n\r");
 8005578:	4821      	ldr	r0, [pc, #132]	; (8005600 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x104>)
 800557a:	f7fb fda7 	bl	80010cc <println>
	  while(1);
 800557e:	e7fe      	b.n	800557e <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x82>
	}
	println((char*) "OK");
 8005580:	4820      	ldr	r0, [pc, #128]	; (8005604 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x108>)
 8005582:	f7fb fda3 	bl	80010cc <println>

	/* Restore default configuration */
	print((char*) "\tRestore default configuration...");
 8005586:	4820      	ldr	r0, [pc, #128]	; (8005608 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x10c>)
 8005588:	f7fb fdbe 	bl	8001108 <print>
	lps22hh_reset_set(&ctx, PROPERTY_ENABLE);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	3308      	adds	r3, #8
 8005590:	2101      	movs	r1, #1
 8005592:	4618      	mov	r0, r3
 8005594:	f000 fcc5 	bl	8005f22 <lps22hh_reset_set>
	HAL_Delay(500);
 8005598:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800559c:	f005 f812 	bl	800a5c4 <HAL_Delay>
	do {
	lps22hh_reset_get(&ctx, &rst);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f103 0208 	add.w	r2, r3, #8
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	331f      	adds	r3, #31
 80055aa:	4619      	mov	r1, r3
 80055ac:	4610      	mov	r0, r2
 80055ae:	f000 fcde 	bl	8005f6e <lps22hh_reset_get>
	} while (rst);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	7fdb      	ldrb	r3, [r3, #31]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d000      	beq.n	80055bc <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xc0>
	do {
 80055ba:	e7f1      	b.n	80055a0 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xa4>
	println((char*) "OK");
 80055bc:	4811      	ldr	r0, [pc, #68]	; (8005604 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x108>)
 80055be:	f7fb fd85 	bl	80010cc <println>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&ctx, PROPERTY_ENABLE);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	3308      	adds	r3, #8
 80055c6:	2101      	movs	r1, #1
 80055c8:	4618      	mov	r0, r3
 80055ca:	f000 fba7 	bl	8005d1c <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&ctx, LPS22HH_75_Hz_LOW_NOISE);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3308      	adds	r3, #8
 80055d2:	2115      	movs	r1, #21
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 fbc7 	bl	8005d68 <lps22hh_data_rate_set>
}
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4618      	mov	r0, r3
 80055de:	3720      	adds	r7, #32
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	0801b4f8 	.word	0x0801b4f8
 80055e8:	080056df 	.word	0x080056df
 80055ec:	08005719 	.word	0x08005719
 80055f0:	0801b47c 	.word	0x0801b47c
 80055f4:	0801b494 	.word	0x0801b494
 80055f8:	0801b49c 	.word	0x0801b49c
 80055fc:	0801b4b0 	.word	0x0801b4b0
 8005600:	0801b4b8 	.word	0x0801b4b8
 8005604:	0801b4d0 	.word	0x0801b4d0
 8005608:	0801b4d4 	.word	0x0801b4d4

0800560c <_ZN7LPS22HH11getPressureEv>:



float LPS22HH::getPressure(void){
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_press_flag_data_ready_get(&ctx, &reg);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f103 0208 	add.w	r2, r3, #8
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	3314      	adds	r3, #20
 800561e:	4619      	mov	r1, r3
 8005620:	4610      	mov	r0, r2
 8005622:	f000 fbef 	bl	8005e04 <lps22hh_press_flag_data_ready_get>

	if (reg) {
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	7d1b      	ldrb	r3, [r3, #20]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d019      	beq.n	8005662 <_ZN7LPS22HH11getPressureEv+0x56>
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	3318      	adds	r3, #24
 8005632:	2204      	movs	r2, #4
 8005634:	2100      	movs	r1, #0
 8005636:	4618      	mov	r0, r3
 8005638:	f00f f986 	bl	8014948 <memset>
	  lps22hh_pressure_raw_get(&ctx, &data_raw_pressure);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f103 0208 	add.w	r2, r3, #8
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	3318      	adds	r3, #24
 8005646:	4619      	mov	r1, r3
 8005648:	4610      	mov	r0, r2
 800564a:	f000 fc0d 	bl	8005e68 <lps22hh_pressure_raw_get>
	  pressure_hPa = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	4618      	mov	r0, r3
 8005654:	f000 fb30 	bl	8005cb8 <lps22hh_from_lsb_to_hpa>
 8005658:	eef0 7a40 	vmov.f32	s15, s0
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	edc3 7a00 	vstr	s15, [r3]
	}
	return pressure_hPa;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	ee07 3a90 	vmov	s15, r3
}
 800566a:	eeb0 0a67 	vmov.f32	s0, s15
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <_ZN7LPS22HH14getTemperatureEv>:


float LPS22HH::getTemperature(void){
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_temp_flag_data_ready_get(&ctx, &reg);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f103 0208 	add.w	r2, r3, #8
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	3314      	adds	r3, #20
 8005686:	4619      	mov	r1, r3
 8005688:	4610      	mov	r0, r2
 800568a:	f000 fbd4 	bl	8005e36 <lps22hh_temp_flag_data_ready_get>

	if (reg) {
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	7d1b      	ldrb	r3, [r3, #20]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d01a      	beq.n	80056cc <_ZN7LPS22HH14getTemperatureEv+0x58>
	  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	331c      	adds	r3, #28
 800569a:	2202      	movs	r2, #2
 800569c:	2100      	movs	r1, #0
 800569e:	4618      	mov	r0, r3
 80056a0:	f00f f952 	bl	8014948 <memset>
	  lps22hh_temperature_raw_get(&ctx, &data_raw_temperature);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f103 0208 	add.w	r2, r3, #8
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	331c      	adds	r3, #28
 80056ae:	4619      	mov	r1, r3
 80056b0:	4610      	mov	r0, r2
 80056b2:	f000 fc02 	bl	8005eba <lps22hh_temperature_raw_get>
	  temperature_degC = lps22hh_from_lsb_to_celsius(data_raw_temperature);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 fb13 	bl	8005ce8 <lps22hh_from_lsb_to_celsius>
 80056c2:	eef0 7a40 	vmov.f32	s15, s0
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	return temperature_degC;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	ee07 3a90 	vmov	s15, r3
}
 80056d4:	eeb0 0a67 	vmov.f32	s0, s15
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <_ZN7LPS22HH5writeEPvhPKht>:



int32_t LPS22HH::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 80056de:	b580      	push	{r7, lr}
 80056e0:	b088      	sub	sp, #32
 80056e2:	af04      	add	r7, sp, #16
 80056e4:	60f8      	str	r0, [r7, #12]
 80056e6:	607a      	str	r2, [r7, #4]
 80056e8:	461a      	mov	r2, r3
 80056ea:	460b      	mov	r3, r1
 80056ec:	72fb      	strb	r3, [r7, #11]
 80056ee:	4613      	mov	r3, r2
 80056f0:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 80056f2:	7afb      	ldrb	r3, [r7, #11]
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056fa:	9302      	str	r3, [sp, #8]
 80056fc:	893b      	ldrh	r3, [r7, #8]
 80056fe:	9301      	str	r3, [sp, #4]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	2301      	movs	r3, #1
 8005706:	21b9      	movs	r1, #185	; 0xb9
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f005 ffdd 	bl	800b6c8 <HAL_I2C_Mem_Write>
  return 0;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <_ZN7LPS22HH4readEPvhPht>:

int32_t LPS22HH::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8005718:	b580      	push	{r7, lr}
 800571a:	b088      	sub	sp, #32
 800571c:	af04      	add	r7, sp, #16
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	607a      	str	r2, [r7, #4]
 8005722:	461a      	mov	r2, r3
 8005724:	460b      	mov	r3, r1
 8005726:	72fb      	strb	r3, [r7, #11]
 8005728:	4613      	mov	r3, r2
 800572a:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 800572c:	7afb      	ldrb	r3, [r7, #11]
 800572e:	b29a      	uxth	r2, r3
 8005730:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005734:	9302      	str	r3, [sp, #8]
 8005736:	893b      	ldrh	r3, [r7, #8]
 8005738:	9301      	str	r3, [sp, #4]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	2301      	movs	r3, #1
 8005740:	21b9      	movs	r1, #185	; 0xb9
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f006 f8ba 	bl	800b8bc <HAL_I2C_Mem_Read>
  return 0;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
	...

08005754 <GPS_Poll>:
#define LED3_GPIO_Port	((GPIO_TypeDef *) ((0x40000000UL + 0x00020000UL) + 0x0800UL))//OUT_LED3_GPIO_Port
#define LED3_Pin	(uint16_t)0x0008//OUT_LED3_Pin


void GPS_Poll(float *latitude, float *longitude, float *time)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b08c      	sub	sp, #48	; 0x30
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 8005760:	2364      	movs	r3, #100	; 0x64
 8005762:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 8005764:	2300      	movs	r3, #0
 8005766:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 8005768:	2300      	movs	r3, #0
 800576a:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 800576c:	e073      	b.n	8005856 <GPS_Poll+0x102>
		HAL_UART_Receive(GPS.uart, (uint8_t*)&rx_current, 1, 100);
 800576e:	4b3f      	ldr	r3, [pc, #252]	; (800586c <GPS_Poll+0x118>)
 8005770:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005772:	2364      	movs	r3, #100	; 0x64
 8005774:	2201      	movs	r2, #1
 8005776:	493e      	ldr	r1, [pc, #248]	; (8005870 <GPS_Poll+0x11c>)
 8005778:	f00a fb03 	bl	800fd82 <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 800577c:	4b3c      	ldr	r3, [pc, #240]	; (8005870 <GPS_Poll+0x11c>)
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	2b0a      	cmp	r3, #10
 8005782:	d00f      	beq.n	80057a4 <GPS_Poll+0x50>
 8005784:	4b3b      	ldr	r3, [pc, #236]	; (8005874 <GPS_Poll+0x120>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	2b63      	cmp	r3, #99	; 0x63
 800578a:	d80b      	bhi.n	80057a4 <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 800578c:	4b39      	ldr	r3, [pc, #228]	; (8005874 <GPS_Poll+0x120>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	1c5a      	adds	r2, r3, #1
 8005792:	b2d1      	uxtb	r1, r2
 8005794:	4a37      	ldr	r2, [pc, #220]	; (8005874 <GPS_Poll+0x120>)
 8005796:	7011      	strb	r1, [r2, #0]
 8005798:	461a      	mov	r2, r3
 800579a:	4b35      	ldr	r3, [pc, #212]	; (8005870 <GPS_Poll+0x11c>)
 800579c:	7819      	ldrb	r1, [r3, #0]
 800579e:	4b36      	ldr	r3, [pc, #216]	; (8005878 <GPS_Poll+0x124>)
 80057a0:	5499      	strb	r1, [r3, r2]
 80057a2:	e021      	b.n	80057e8 <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 80057a4:	4834      	ldr	r0, [pc, #208]	; (8005878 <GPS_Poll+0x124>)
 80057a6:	f000 f869 	bl	800587c <GPS_validate>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d013      	beq.n	80057d8 <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 80057b0:	4831      	ldr	r0, [pc, #196]	; (8005878 <GPS_Poll+0x124>)
 80057b2:	f000 f8c5 	bl	8005940 <GPS_parse>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00d      	beq.n	80057d8 <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 80057bc:	4b2b      	ldr	r3, [pc, #172]	; (800586c <GPS_Poll+0x118>)
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 80057c4:	4b29      	ldr	r3, [pc, #164]	; (800586c <GPS_Poll+0x118>)
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 80057cc:	4b27      	ldr	r3, [pc, #156]	; (800586c <GPS_Poll+0x118>)
 80057ce:	695a      	ldr	r2, [r3, #20]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	601a      	str	r2, [r3, #0]
					done = 1;
 80057d4:	2301      	movs	r3, #1
 80057d6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 80057d8:	4b26      	ldr	r3, [pc, #152]	; (8005874 <GPS_Poll+0x120>)
 80057da:	2200      	movs	r2, #0
 80057dc:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 80057de:	2264      	movs	r2, #100	; 0x64
 80057e0:	2100      	movs	r1, #0
 80057e2:	4825      	ldr	r0, [pc, #148]	; (8005878 <GPS_Poll+0x124>)
 80057e4:	f00f f8b0 	bl	8014948 <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS.uart);
 80057e8:	2300      	movs	r3, #0
 80057ea:	623b      	str	r3, [r7, #32]
 80057ec:	4b1f      	ldr	r3, [pc, #124]	; (800586c <GPS_Poll+0x118>)
 80057ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	623b      	str	r3, [r7, #32]
 80057f6:	4b1d      	ldr	r3, [pc, #116]	; (800586c <GPS_Poll+0x118>)
 80057f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	623b      	str	r3, [r7, #32]
 8005800:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS.uart);
 8005802:	2300      	movs	r3, #0
 8005804:	61fb      	str	r3, [r7, #28]
 8005806:	4b19      	ldr	r3, [pc, #100]	; (800586c <GPS_Poll+0x118>)
 8005808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	61fb      	str	r3, [r7, #28]
 8005810:	4b16      	ldr	r3, [pc, #88]	; (800586c <GPS_Poll+0x118>)
 8005812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	61fb      	str	r3, [r7, #28]
 800581a:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS.uart);
 800581c:	2300      	movs	r3, #0
 800581e:	61bb      	str	r3, [r7, #24]
 8005820:	4b12      	ldr	r3, [pc, #72]	; (800586c <GPS_Poll+0x118>)
 8005822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	61bb      	str	r3, [r7, #24]
 800582a:	4b10      	ldr	r3, [pc, #64]	; (800586c <GPS_Poll+0x118>)
 800582c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	61bb      	str	r3, [r7, #24]
 8005834:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS.uart);
 8005836:	2300      	movs	r3, #0
 8005838:	617b      	str	r3, [r7, #20]
 800583a:	4b0c      	ldr	r3, [pc, #48]	; (800586c <GPS_Poll+0x118>)
 800583c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	4b09      	ldr	r3, [pc, #36]	; (800586c <GPS_Poll+0x118>)
 8005846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	617b      	str	r3, [r7, #20]
 800584e:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 8005850:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005852:	3301      	adds	r3, #1
 8005854:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 8005856:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005858:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800585a:	429a      	cmp	r2, r3
 800585c:	d202      	bcs.n	8005864 <GPS_Poll+0x110>
 800585e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005860:	2b00      	cmp	r3, #0
 8005862:	d084      	beq.n	800576e <GPS_Poll+0x1a>
	}
}
 8005864:	bf00      	nop
 8005866:	3730      	adds	r7, #48	; 0x30
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	20005fd0 	.word	0x20005fd0
 8005870:	20000444 	.word	0x20000444
 8005874:	20000445 	.word	0x20000445
 8005878:	20006034 	.word	0x20006034

0800587c <GPS_validate>:

int GPS_validate(char *nmeastr){
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8005884:	2300      	movs	r3, #0
 8005886:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8005888:	2300      	movs	r3, #0
 800588a:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	4413      	add	r3, r2
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	2b24      	cmp	r3, #36	; 0x24
 8005896:	d103      	bne.n	80058a0 <GPS_validate+0x24>
        i++;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	3301      	adds	r3, #1
 800589c:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800589e:	e00c      	b.n	80058ba <GPS_validate+0x3e>
        return 0;
 80058a0:	2300      	movs	r3, #0
 80058a2:	e047      	b.n	8005934 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	4413      	add	r3, r2
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	461a      	mov	r2, r3
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	4053      	eors	r3, r2
 80058b2:	613b      	str	r3, [r7, #16]
        i++;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	3301      	adds	r3, #1
 80058b8:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	4413      	add	r3, r2
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d008      	beq.n	80058d8 <GPS_validate+0x5c>
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	4413      	add	r3, r2
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	2b2a      	cmp	r3, #42	; 0x2a
 80058d0:	d002      	beq.n	80058d8 <GPS_validate+0x5c>
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2b4a      	cmp	r3, #74	; 0x4a
 80058d6:	dde5      	ble.n	80058a4 <GPS_validate+0x28>
    }

    if(i >= 75){
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	2b4a      	cmp	r3, #74	; 0x4a
 80058dc:	dd01      	ble.n	80058e2 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80058de:	2300      	movs	r3, #0
 80058e0:	e028      	b.n	8005934 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	4413      	add	r3, r2
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	2b2a      	cmp	r3, #42	; 0x2a
 80058ec:	d119      	bne.n	8005922 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	3301      	adds	r3, #1
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	4413      	add	r3, r2
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	3302      	adds	r3, #2
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	4413      	add	r3, r2
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8005906:	2300      	movs	r3, #0
 8005908:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 800590a:	f107 0308 	add.w	r3, r7, #8
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	490a      	ldr	r1, [pc, #40]	; (800593c <GPS_validate+0xc0>)
 8005912:	4618      	mov	r0, r3
 8005914:	f010 fb14 	bl	8015f40 <siprintf>
    return((checkcalcstr[0] == check[0])
 8005918:	7a3a      	ldrb	r2, [r7, #8]
 800591a:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800591c:	429a      	cmp	r2, r3
 800591e:	d108      	bne.n	8005932 <GPS_validate+0xb6>
 8005920:	e001      	b.n	8005926 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8005922:	2300      	movs	r3, #0
 8005924:	e006      	b.n	8005934 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8005926:	7a7a      	ldrb	r2, [r7, #9]
 8005928:	7b7b      	ldrb	r3, [r7, #13]
 800592a:	429a      	cmp	r2, r3
 800592c:	d101      	bne.n	8005932 <GPS_validate+0xb6>
 800592e:	2301      	movs	r3, #1
 8005930:	e000      	b.n	8005934 <GPS_validate+0xb8>
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3718      	adds	r7, #24
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	0801b508 	.word	0x0801b508

08005940 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 8005940:	b580      	push	{r7, lr}
 8005942:	b08a      	sub	sp, #40	; 0x28
 8005944:	af08      	add	r7, sp, #32
 8005946:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 8005948:	2206      	movs	r2, #6
 800594a:	496d      	ldr	r1, [pc, #436]	; (8005b00 <GPS_parse+0x1c0>)
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f010 fb9d 	bl	801608c <strncmp>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d139      	bne.n	80059cc <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8005958:	4b6a      	ldr	r3, [pc, #424]	; (8005b04 <GPS_parse+0x1c4>)
 800595a:	9307      	str	r3, [sp, #28]
 800595c:	4b6a      	ldr	r3, [pc, #424]	; (8005b08 <GPS_parse+0x1c8>)
 800595e:	9306      	str	r3, [sp, #24]
 8005960:	4b6a      	ldr	r3, [pc, #424]	; (8005b0c <GPS_parse+0x1cc>)
 8005962:	9305      	str	r3, [sp, #20]
 8005964:	4b6a      	ldr	r3, [pc, #424]	; (8005b10 <GPS_parse+0x1d0>)
 8005966:	9304      	str	r3, [sp, #16]
 8005968:	4b6a      	ldr	r3, [pc, #424]	; (8005b14 <GPS_parse+0x1d4>)
 800596a:	9303      	str	r3, [sp, #12]
 800596c:	4b6a      	ldr	r3, [pc, #424]	; (8005b18 <GPS_parse+0x1d8>)
 800596e:	9302      	str	r3, [sp, #8]
 8005970:	4b6a      	ldr	r3, [pc, #424]	; (8005b1c <GPS_parse+0x1dc>)
 8005972:	9301      	str	r3, [sp, #4]
 8005974:	4b6a      	ldr	r3, [pc, #424]	; (8005b20 <GPS_parse+0x1e0>)
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	4b6a      	ldr	r3, [pc, #424]	; (8005b24 <GPS_parse+0x1e4>)
 800597a:	4a6b      	ldr	r2, [pc, #428]	; (8005b28 <GPS_parse+0x1e8>)
 800597c:	496b      	ldr	r1, [pc, #428]	; (8005b2c <GPS_parse+0x1ec>)
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f010 fafe 	bl	8015f80 <siscanf>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	f340 80b5 	ble.w	8005af6 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800598c:	4b68      	ldr	r3, [pc, #416]	; (8005b30 <GPS_parse+0x1f0>)
 800598e:	edd3 7a04 	vldr	s15, [r3, #16]
 8005992:	4b67      	ldr	r3, [pc, #412]	; (8005b30 <GPS_parse+0x1f0>)
 8005994:	7e1b      	ldrb	r3, [r3, #24]
 8005996:	4618      	mov	r0, r3
 8005998:	eeb0 0a67 	vmov.f32	s0, s15
 800599c:	f000 f8ec 	bl	8005b78 <GPS_nmea_to_dec>
 80059a0:	eef0 7a40 	vmov.f32	s15, s0
 80059a4:	4b62      	ldr	r3, [pc, #392]	; (8005b30 <GPS_parse+0x1f0>)
 80059a6:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80059aa:	4b61      	ldr	r3, [pc, #388]	; (8005b30 <GPS_parse+0x1f0>)
 80059ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80059b0:	4b5f      	ldr	r3, [pc, #380]	; (8005b30 <GPS_parse+0x1f0>)
 80059b2:	7e5b      	ldrb	r3, [r3, #25]
 80059b4:	4618      	mov	r0, r3
 80059b6:	eeb0 0a67 	vmov.f32	s0, s15
 80059ba:	f000 f8dd 	bl	8005b78 <GPS_nmea_to_dec>
 80059be:	eef0 7a40 	vmov.f32	s15, s0
 80059c2:	4b5b      	ldr	r3, [pc, #364]	; (8005b30 <GPS_parse+0x1f0>)
 80059c4:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e095      	b.n	8005af8 <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 80059cc:	2206      	movs	r2, #6
 80059ce:	4959      	ldr	r1, [pc, #356]	; (8005b34 <GPS_parse+0x1f4>)
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f010 fb5b 	bl	801608c <strncmp>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d134      	bne.n	8005a46 <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 80059dc:	4b56      	ldr	r3, [pc, #344]	; (8005b38 <GPS_parse+0x1f8>)
 80059de:	9305      	str	r3, [sp, #20]
 80059e0:	4b56      	ldr	r3, [pc, #344]	; (8005b3c <GPS_parse+0x1fc>)
 80059e2:	9304      	str	r3, [sp, #16]
 80059e4:	4b56      	ldr	r3, [pc, #344]	; (8005b40 <GPS_parse+0x200>)
 80059e6:	9303      	str	r3, [sp, #12]
 80059e8:	4b4b      	ldr	r3, [pc, #300]	; (8005b18 <GPS_parse+0x1d8>)
 80059ea:	9302      	str	r3, [sp, #8]
 80059ec:	4b4b      	ldr	r3, [pc, #300]	; (8005b1c <GPS_parse+0x1dc>)
 80059ee:	9301      	str	r3, [sp, #4]
 80059f0:	4b4b      	ldr	r3, [pc, #300]	; (8005b20 <GPS_parse+0x1e0>)
 80059f2:	9300      	str	r3, [sp, #0]
 80059f4:	4b4b      	ldr	r3, [pc, #300]	; (8005b24 <GPS_parse+0x1e4>)
 80059f6:	4a4c      	ldr	r2, [pc, #304]	; (8005b28 <GPS_parse+0x1e8>)
 80059f8:	4952      	ldr	r1, [pc, #328]	; (8005b44 <GPS_parse+0x204>)
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f010 fac0 	bl	8015f80 <siscanf>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	dd77      	ble.n	8005af6 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8005a06:	4b4a      	ldr	r3, [pc, #296]	; (8005b30 <GPS_parse+0x1f0>)
 8005a08:	edd3 7a04 	vldr	s15, [r3, #16]
 8005a0c:	4b48      	ldr	r3, [pc, #288]	; (8005b30 <GPS_parse+0x1f0>)
 8005a0e:	7e1b      	ldrb	r3, [r3, #24]
 8005a10:	4618      	mov	r0, r3
 8005a12:	eeb0 0a67 	vmov.f32	s0, s15
 8005a16:	f000 f8af 	bl	8005b78 <GPS_nmea_to_dec>
 8005a1a:	eef0 7a40 	vmov.f32	s15, s0
 8005a1e:	4b44      	ldr	r3, [pc, #272]	; (8005b30 <GPS_parse+0x1f0>)
 8005a20:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8005a24:	4b42      	ldr	r3, [pc, #264]	; (8005b30 <GPS_parse+0x1f0>)
 8005a26:	edd3 7a03 	vldr	s15, [r3, #12]
 8005a2a:	4b41      	ldr	r3, [pc, #260]	; (8005b30 <GPS_parse+0x1f0>)
 8005a2c:	7e5b      	ldrb	r3, [r3, #25]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	eeb0 0a67 	vmov.f32	s0, s15
 8005a34:	f000 f8a0 	bl	8005b78 <GPS_nmea_to_dec>
 8005a38:	eef0 7a40 	vmov.f32	s15, s0
 8005a3c:	4b3c      	ldr	r3, [pc, #240]	; (8005b30 <GPS_parse+0x1f0>)
 8005a3e:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e058      	b.n	8005af8 <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 8005a46:	2206      	movs	r2, #6
 8005a48:	493f      	ldr	r1, [pc, #252]	; (8005b48 <GPS_parse+0x208>)
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f010 fb1e 	bl	801608c <strncmp>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d130      	bne.n	8005ab8 <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 8005a56:	4b3d      	ldr	r3, [pc, #244]	; (8005b4c <GPS_parse+0x20c>)
 8005a58:	9303      	str	r3, [sp, #12]
 8005a5a:	4b33      	ldr	r3, [pc, #204]	; (8005b28 <GPS_parse+0x1e8>)
 8005a5c:	9302      	str	r3, [sp, #8]
 8005a5e:	4b2e      	ldr	r3, [pc, #184]	; (8005b18 <GPS_parse+0x1d8>)
 8005a60:	9301      	str	r3, [sp, #4]
 8005a62:	4b2e      	ldr	r3, [pc, #184]	; (8005b1c <GPS_parse+0x1dc>)
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	4b2e      	ldr	r3, [pc, #184]	; (8005b20 <GPS_parse+0x1e0>)
 8005a68:	4a2e      	ldr	r2, [pc, #184]	; (8005b24 <GPS_parse+0x1e4>)
 8005a6a:	4939      	ldr	r1, [pc, #228]	; (8005b50 <GPS_parse+0x210>)
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f010 fa87 	bl	8015f80 <siscanf>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	dd3e      	ble.n	8005af6 <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8005a78:	4b2d      	ldr	r3, [pc, #180]	; (8005b30 <GPS_parse+0x1f0>)
 8005a7a:	edd3 7a04 	vldr	s15, [r3, #16]
 8005a7e:	4b2c      	ldr	r3, [pc, #176]	; (8005b30 <GPS_parse+0x1f0>)
 8005a80:	7e1b      	ldrb	r3, [r3, #24]
 8005a82:	4618      	mov	r0, r3
 8005a84:	eeb0 0a67 	vmov.f32	s0, s15
 8005a88:	f000 f876 	bl	8005b78 <GPS_nmea_to_dec>
 8005a8c:	eef0 7a40 	vmov.f32	s15, s0
 8005a90:	4b27      	ldr	r3, [pc, #156]	; (8005b30 <GPS_parse+0x1f0>)
 8005a92:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8005a96:	4b26      	ldr	r3, [pc, #152]	; (8005b30 <GPS_parse+0x1f0>)
 8005a98:	edd3 7a03 	vldr	s15, [r3, #12]
 8005a9c:	4b24      	ldr	r3, [pc, #144]	; (8005b30 <GPS_parse+0x1f0>)
 8005a9e:	7e5b      	ldrb	r3, [r3, #25]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	eeb0 0a67 	vmov.f32	s0, s15
 8005aa6:	f000 f867 	bl	8005b78 <GPS_nmea_to_dec>
 8005aaa:	eef0 7a40 	vmov.f32	s15, s0
 8005aae:	4b20      	ldr	r3, [pc, #128]	; (8005b30 <GPS_parse+0x1f0>)
 8005ab0:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e01f      	b.n	8005af8 <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 8005ab8:	2206      	movs	r2, #6
 8005aba:	4926      	ldr	r1, [pc, #152]	; (8005b54 <GPS_parse+0x214>)
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f010 fae5 	bl	801608c <strncmp>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d116      	bne.n	8005af6 <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8005ac8:	4b23      	ldr	r3, [pc, #140]	; (8005b58 <GPS_parse+0x218>)
 8005aca:	9305      	str	r3, [sp, #20]
 8005acc:	4b23      	ldr	r3, [pc, #140]	; (8005b5c <GPS_parse+0x21c>)
 8005ace:	9304      	str	r3, [sp, #16]
 8005ad0:	4b23      	ldr	r3, [pc, #140]	; (8005b60 <GPS_parse+0x220>)
 8005ad2:	9303      	str	r3, [sp, #12]
 8005ad4:	4b1a      	ldr	r3, [pc, #104]	; (8005b40 <GPS_parse+0x200>)
 8005ad6:	9302      	str	r3, [sp, #8]
 8005ad8:	4b22      	ldr	r3, [pc, #136]	; (8005b64 <GPS_parse+0x224>)
 8005ada:	9301      	str	r3, [sp, #4]
 8005adc:	4b22      	ldr	r3, [pc, #136]	; (8005b68 <GPS_parse+0x228>)
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	4b22      	ldr	r3, [pc, #136]	; (8005b6c <GPS_parse+0x22c>)
 8005ae2:	4a23      	ldr	r2, [pc, #140]	; (8005b70 <GPS_parse+0x230>)
 8005ae4:	4923      	ldr	r1, [pc, #140]	; (8005b74 <GPS_parse+0x234>)
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f010 fa4a 	bl	8015f80 <siscanf>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	dd01      	ble.n	8005af6 <GPS_parse+0x1b6>
            return 0;
 8005af2:	2300      	movs	r3, #0
 8005af4:	e000      	b.n	8005af8 <GPS_parse+0x1b8>
    }
    return 0;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3708      	adds	r7, #8
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	0801b510 	.word	0x0801b510
 8005b04:	20005ffc 	.word	0x20005ffc
 8005b08:	20005ff8 	.word	0x20005ff8
 8005b0c:	20005ff4 	.word	0x20005ff4
 8005b10:	20005ff0 	.word	0x20005ff0
 8005b14:	20005fec 	.word	0x20005fec
 8005b18:	20005fe9 	.word	0x20005fe9
 8005b1c:	20005fdc 	.word	0x20005fdc
 8005b20:	20005fe8 	.word	0x20005fe8
 8005b24:	20005fe0 	.word	0x20005fe0
 8005b28:	20005fe4 	.word	0x20005fe4
 8005b2c:	0801b518 	.word	0x0801b518
 8005b30:	20005fd0 	.word	0x20005fd0
 8005b34:	0801b540 	.word	0x0801b540
 8005b38:	20006008 	.word	0x20006008
 8005b3c:	20006004 	.word	0x20006004
 8005b40:	20006000 	.word	0x20006000
 8005b44:	0801b548 	.word	0x0801b548
 8005b48:	0801b568 	.word	0x0801b568
 8005b4c:	2000600c 	.word	0x2000600c
 8005b50:	0801b570 	.word	0x0801b570
 8005b54:	0801b58c 	.word	0x0801b58c
 8005b58:	20006024 	.word	0x20006024
 8005b5c:	20006020 	.word	0x20006020
 8005b60:	2000601d 	.word	0x2000601d
 8005b64:	2000601c 	.word	0x2000601c
 8005b68:	20006018 	.word	0x20006018
 8005b6c:	20006014 	.word	0x20006014
 8005b70:	20006010 	.word	0x20006010
 8005b74:	0801b594 	.word	0x0801b594

08005b78 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8005b78:	b480      	push	{r7}
 8005b7a:	b087      	sub	sp, #28
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	ed87 0a01 	vstr	s0, [r7, #4]
 8005b82:	4603      	mov	r3, r0
 8005b84:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8005b86:	ed97 7a01 	vldr	s14, [r7, #4]
 8005b8a:	eddf 6a20 	vldr	s13, [pc, #128]	; 8005c0c <GPS_nmea_to_dec+0x94>
 8005b8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b96:	ee17 3a90 	vmov	r3, s15
 8005b9a:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	2264      	movs	r2, #100	; 0x64
 8005ba0:	fb02 f303 	mul.w	r3, r2, r3
 8005ba4:	ee07 3a90 	vmov	s15, r3
 8005ba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bac:	ed97 7a01 	vldr	s14, [r7, #4]
 8005bb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bb4:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8005bb8:	ed97 7a03 	vldr	s14, [r7, #12]
 8005bbc:	eddf 6a14 	vldr	s13, [pc, #80]	; 8005c10 <GPS_nmea_to_dec+0x98>
 8005bc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005bc4:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	ee07 3a90 	vmov	s15, r3
 8005bce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bd2:	ed97 7a02 	vldr	s14, [r7, #8]
 8005bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bda:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8005bde:	78fb      	ldrb	r3, [r7, #3]
 8005be0:	2b53      	cmp	r3, #83	; 0x53
 8005be2:	d002      	beq.n	8005bea <GPS_nmea_to_dec+0x72>
 8005be4:	78fb      	ldrb	r3, [r7, #3]
 8005be6:	2b57      	cmp	r3, #87	; 0x57
 8005be8:	d105      	bne.n	8005bf6 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8005bea:	edd7 7a05 	vldr	s15, [r7, #20]
 8005bee:	eef1 7a67 	vneg.f32	s15, s15
 8005bf2:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	ee07 3a90 	vmov	s15, r3
}
 8005bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8005c00:	371c      	adds	r7, #28
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	42c80000 	.word	0x42c80000
 8005c10:	42700000 	.word	0x42700000

08005c14 <GPS_Init>:
	}
}


void GPS_Init(UART_HandleTypeDef* data_uart, void (*gps_print)(char*),
		void (*gps_tone_freq)(uint32_t duration, uint32_t repeats, uint32_t freq)){
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
	GPS.print = gps_print;
 8005c20:	4a0a      	ldr	r2, [pc, #40]	; (8005c4c <GPS_Init+0x38>)
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	65d3      	str	r3, [r2, #92]	; 0x5c
	GPS.print((char*) "\r\nGPS Init...");
 8005c26:	4b09      	ldr	r3, [pc, #36]	; (8005c4c <GPS_Init+0x38>)
 8005c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c2a:	4809      	ldr	r0, [pc, #36]	; (8005c50 <GPS_Init+0x3c>)
 8005c2c:	4798      	blx	r3
	GPS.uart = data_uart;
 8005c2e:	4a07      	ldr	r2, [pc, #28]	; (8005c4c <GPS_Init+0x38>)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6593      	str	r3, [r2, #88]	; 0x58
	GPS.tone_freq = gps_tone_freq;
 8005c34:	4a05      	ldr	r2, [pc, #20]	; (8005c4c <GPS_Init+0x38>)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6613      	str	r3, [r2, #96]	; 0x60
	GPS.print((char*) "OK\r\n");
 8005c3a:	4b04      	ldr	r3, [pc, #16]	; (8005c4c <GPS_Init+0x38>)
 8005c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c3e:	4805      	ldr	r0, [pc, #20]	; (8005c54 <GPS_Init+0x40>)
 8005c40:	4798      	blx	r3
}
 8005c42:	bf00      	nop
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	20005fd0 	.word	0x20005fd0
 8005c50:	0801b5b4 	.word	0x0801b5b4
 8005c54:	0801b5c4 	.word	0x0801b5c4

08005c58 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005c58:	b590      	push	{r4, r7, lr}
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	607a      	str	r2, [r7, #4]
 8005c62:	461a      	mov	r2, r3
 8005c64:	460b      	mov	r3, r1
 8005c66:	72fb      	strb	r3, [r7, #11]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	685c      	ldr	r4, [r3, #4]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6898      	ldr	r0, [r3, #8]
 8005c74:	893b      	ldrh	r3, [r7, #8]
 8005c76:	7af9      	ldrb	r1, [r7, #11]
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	47a0      	blx	r4
 8005c7c:	6178      	str	r0, [r7, #20]

  return ret;
 8005c7e:	697b      	ldr	r3, [r7, #20]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	371c      	adds	r7, #28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd90      	pop	{r4, r7, pc}

08005c88 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005c88:	b590      	push	{r4, r7, lr}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	607a      	str	r2, [r7, #4]
 8005c92:	461a      	mov	r2, r3
 8005c94:	460b      	mov	r3, r1
 8005c96:	72fb      	strb	r3, [r7, #11]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681c      	ldr	r4, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6898      	ldr	r0, [r3, #8]
 8005ca4:	893b      	ldrh	r3, [r7, #8]
 8005ca6:	7af9      	ldrb	r1, [r7, #11]
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	47a0      	blx	r4
 8005cac:	6178      	str	r0, [r7, #20]

  return ret;
 8005cae:	697b      	ldr	r3, [r7, #20]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	371c      	adds	r7, #28
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd90      	pop	{r4, r7, pc}

08005cb8 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	ee07 3a90 	vmov	s15, r3
 8005cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cca:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005ce4 <lps22hh_from_lsb_to_hpa+0x2c>
 8005cce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005cd2:	eef0 7a66 	vmov.f32	s15, s13
}
 8005cd6:	eeb0 0a67 	vmov.f32	s0, s15
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	49800000 	.word	0x49800000

08005ce8 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	4603      	mov	r3, r0
 8005cf0:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8005cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cf6:	ee07 3a90 	vmov	s15, r3
 8005cfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cfe:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005d18 <lps22hh_from_lsb_to_celsius+0x30>
 8005d02:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005d06:	eef0 7a66 	vmov.f32	s15, s13
}
 8005d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	42c80000 	.word	0x42c80000

08005d1c <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	460b      	mov	r3, r1
 8005d26:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005d28:	f107 0208 	add.w	r2, r7, #8
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	2110      	movs	r1, #16
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f7ff ff91 	bl	8005c58 <lps22hh_read_reg>
 8005d36:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10f      	bne.n	8005d5e <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005d3e:	78fb      	ldrb	r3, [r7, #3]
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	7a3b      	ldrb	r3, [r7, #8]
 8005d48:	f362 0341 	bfi	r3, r2, #1, #1
 8005d4c:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005d4e:	f107 0208 	add.w	r2, r7, #8
 8005d52:	2301      	movs	r3, #1
 8005d54:	2110      	movs	r1, #16
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7ff ff96 	bl	8005c88 <lps22hh_write_reg>
 8005d5c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b086      	sub	sp, #24
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	460b      	mov	r3, r1
 8005d72:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005d74:	f107 0210 	add.w	r2, r7, #16
 8005d78:	2301      	movs	r3, #1
 8005d7a:	2110      	movs	r1, #16
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f7ff ff6b 	bl	8005c58 <lps22hh_read_reg>
 8005d82:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d107      	bne.n	8005d9a <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005d8a:	f107 020c 	add.w	r2, r7, #12
 8005d8e:	2301      	movs	r3, #1
 8005d90:	2111      	movs	r1, #17
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7ff ff60 	bl	8005c58 <lps22hh_read_reg>
 8005d98:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10f      	bne.n	8005dc0 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8005da0:	78fb      	ldrb	r3, [r7, #3]
 8005da2:	f003 0307 	and.w	r3, r3, #7
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	7c3b      	ldrb	r3, [r7, #16]
 8005daa:	f362 1306 	bfi	r3, r2, #4, #3
 8005dae:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005db0:	f107 0210 	add.w	r2, r7, #16
 8005db4:	2301      	movs	r3, #1
 8005db6:	2110      	movs	r1, #16
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f7ff ff65 	bl	8005c88 <lps22hh_write_reg>
 8005dbe:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d119      	bne.n	8005dfa <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8005dc6:	78fb      	ldrb	r3, [r7, #3]
 8005dc8:	091b      	lsrs	r3, r3, #4
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	7b3b      	ldrb	r3, [r7, #12]
 8005dd2:	f362 0341 	bfi	r3, r2, #1, #1
 8005dd6:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8005dd8:	78fb      	ldrb	r3, [r7, #3]
 8005dda:	08db      	lsrs	r3, r3, #3
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	b2da      	uxtb	r2, r3
 8005de2:	7b3b      	ldrb	r3, [r7, #12]
 8005de4:	f362 0300 	bfi	r3, r2, #0, #1
 8005de8:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005dea:	f107 020c 	add.w	r2, r7, #12
 8005dee:	2301      	movs	r3, #1
 8005df0:	2111      	movs	r1, #17
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7ff ff48 	bl	8005c88 <lps22hh_write_reg>
 8005df8:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8005dfa:	697b      	ldr	r3, [r7, #20]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3718      	adds	r7, #24
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <lps22hh_press_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_press_flag_data_ready_get(stmdev_ctx_t *ctx,
                                          uint8_t *val)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8005e0e:	f107 0208 	add.w	r2, r7, #8
 8005e12:	2301      	movs	r3, #1
 8005e14:	2127      	movs	r1, #39	; 0x27
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7ff ff1e 	bl	8005c58 <lps22hh_read_reg>
 8005e1c:	60f8      	str	r0, [r7, #12]
  *val = reg.p_da;
 8005e1e:	7a3b      	ldrb	r3, [r7, #8]
 8005e20:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	461a      	mov	r2, r3
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	701a      	strb	r2, [r3, #0]

  return ret;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b084      	sub	sp, #16
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8005e40:	f107 0208 	add.w	r2, r7, #8
 8005e44:	2301      	movs	r3, #1
 8005e46:	2127      	movs	r1, #39	; 0x27
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f7ff ff05 	bl	8005c58 <lps22hh_read_reg>
 8005e4e:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 8005e50:	7a3b      	ldrb	r3, [r7, #8]
 8005e52:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	461a      	mov	r2, r3
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	701a      	strb	r2, [r3, #0]

  return ret;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8005e72:	f107 0208 	add.w	r2, r7, #8
 8005e76:	2303      	movs	r3, #3
 8005e78:	2128      	movs	r1, #40	; 0x28
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7ff feec 	bl	8005c58 <lps22hh_read_reg>
 8005e80:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8005e82:	7abb      	ldrb	r3, [r7, #10]
 8005e84:	461a      	mov	r2, r3
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	021b      	lsls	r3, r3, #8
 8005e90:	7a7a      	ldrb	r2, [r7, #9]
 8005e92:	441a      	add	r2, r3
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	021b      	lsls	r3, r3, #8
 8005e9e:	7a3a      	ldrb	r2, [r7, #8]
 8005ea0:	441a      	add	r2, r3
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	021a      	lsls	r2, r3, #8
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	601a      	str	r2, [r3, #0]

  return ret;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b084      	sub	sp, #16
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
 8005ec2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8005ec4:	f107 0208 	add.w	r2, r7, #8
 8005ec8:	2302      	movs	r3, #2
 8005eca:	212b      	movs	r1, #43	; 0x2b
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7ff fec3 	bl	8005c58 <lps22hh_read_reg>
 8005ed2:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8005ed4:	7a7b      	ldrb	r3, [r7, #9]
 8005ed6:	b21a      	sxth	r2, r3
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	021b      	lsls	r3, r3, #8
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	7a3b      	ldrb	r3, [r7, #8]
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	4413      	add	r3, r2
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	b21a      	sxth	r2, r3
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	801a      	strh	r2, [r3, #0]

  return ret;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	683a      	ldr	r2, [r7, #0]
 8005f0e:	210f      	movs	r1, #15
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7ff fea1 	bl	8005c58 <lps22hh_read_reg>
 8005f16:	60f8      	str	r0, [r7, #12]

  return ret;
 8005f18:	68fb      	ldr	r3, [r7, #12]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b084      	sub	sp, #16
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005f2e:	f107 0208 	add.w	r2, r7, #8
 8005f32:	2301      	movs	r3, #1
 8005f34:	2111      	movs	r1, #17
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7ff fe8e 	bl	8005c58 <lps22hh_read_reg>
 8005f3c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10f      	bne.n	8005f64 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8005f44:	78fb      	ldrb	r3, [r7, #3]
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	b2da      	uxtb	r2, r3
 8005f4c:	7a3b      	ldrb	r3, [r7, #8]
 8005f4e:	f362 0382 	bfi	r3, r2, #2, #1
 8005f52:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005f54:	f107 0208 	add.w	r2, r7, #8
 8005f58:	2301      	movs	r3, #1
 8005f5a:	2111      	movs	r1, #17
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f7ff fe93 	bl	8005c88 <lps22hh_write_reg>
 8005f62:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005f64:	68fb      	ldr	r3, [r7, #12]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b084      	sub	sp, #16
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
 8005f76:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005f78:	f107 0208 	add.w	r2, r7, #8
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	2111      	movs	r1, #17
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f7ff fe69 	bl	8005c58 <lps22hh_read_reg>
 8005f86:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8005f88:	7a3b      	ldrb	r3, [r7, #8]
 8005f8a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	461a      	mov	r2, r3
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	701a      	strb	r2, [r3, #0]

  return ret;
 8005f96:	68fb      	ldr	r3, [r7, #12]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005fa0:	b590      	push	{r4, r7, lr}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	607a      	str	r2, [r7, #4]
 8005faa:	461a      	mov	r2, r3
 8005fac:	460b      	mov	r3, r1
 8005fae:	72fb      	strb	r3, [r7, #11]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	685c      	ldr	r4, [r3, #4]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6898      	ldr	r0, [r3, #8]
 8005fbc:	893b      	ldrh	r3, [r7, #8]
 8005fbe:	7af9      	ldrb	r1, [r7, #11]
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	47a0      	blx	r4
 8005fc4:	6178      	str	r0, [r7, #20]

  return ret;
 8005fc6:	697b      	ldr	r3, [r7, #20]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	371c      	adds	r7, #28
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd90      	pop	{r4, r7, pc}

08005fd0 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005fd0:	b590      	push	{r4, r7, lr}
 8005fd2:	b087      	sub	sp, #28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	607a      	str	r2, [r7, #4]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	460b      	mov	r3, r1
 8005fde:	72fb      	strb	r3, [r7, #11]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681c      	ldr	r4, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6898      	ldr	r0, [r3, #8]
 8005fec:	893b      	ldrh	r3, [r7, #8]
 8005fee:	7af9      	ldrb	r1, [r7, #11]
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	47a0      	blx	r4
 8005ff4:	6178      	str	r0, [r7, #20]

  return ret;
 8005ff6:	697b      	ldr	r3, [r7, #20]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	371c      	adds	r7, #28
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd90      	pop	{r4, r7, pc}

08006000 <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	4603      	mov	r3, r0
 8006008:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 800600a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800600e:	ee07 3a90 	vmov	s15, r3
 8006012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006016:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800602c <lsm6dsr_from_fs2g_to_mg+0x2c>
 800601a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800601e:	eeb0 0a67 	vmov.f32	s0, s15
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	3d79db23 	.word	0x3d79db23

08006030 <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	4603      	mov	r3, r0
 8006038:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 800603a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800603e:	ee07 3a90 	vmov	s15, r3
 8006042:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006046:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800605c <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 800604a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800604e:	eeb0 0a67 	vmov.f32	s0, s15
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr
 800605c:	428c0000 	.word	0x428c0000

08006060 <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	4603      	mov	r3, r0
 8006068:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 800606a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800606e:	ee07 3a90 	vmov	s15, r3
 8006072:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006076:	eddf 6a07 	vldr	s13, [pc, #28]	; 8006094 <lsm6dsr_from_lsb_to_celsius+0x34>
 800607a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800607e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8006082:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8006086:	eeb0 0a67 	vmov.f32	s0, s15
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	43800000 	.word	0x43800000

08006098 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	460b      	mov	r3, r1
 80060a2:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80060a4:	f107 0208 	add.w	r2, r7, #8
 80060a8:	2301      	movs	r3, #1
 80060aa:	2110      	movs	r1, #16
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f7ff ff77 	bl	8005fa0 <lsm6dsr_read_reg>
 80060b2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10f      	bne.n	80060da <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 80060ba:	78fb      	ldrb	r3, [r7, #3]
 80060bc:	f003 0303 	and.w	r3, r3, #3
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	7a3b      	ldrb	r3, [r7, #8]
 80060c4:	f362 0383 	bfi	r3, r2, #2, #2
 80060c8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 80060ca:	f107 0208 	add.w	r2, r7, #8
 80060ce:	2301      	movs	r3, #1
 80060d0:	2110      	movs	r1, #16
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7ff ff7c 	bl	8005fd0 <lsm6dsr_write_reg>
 80060d8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80060da:	68fb      	ldr	r3, [r7, #12]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	460b      	mov	r3, r1
 80060ee:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 80060f0:	78fb      	ldrb	r3, [r7, #3]
 80060f2:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 80060f4:	f107 030c 	add.w	r3, r7, #12
 80060f8:	4619      	mov	r1, r3
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 fc54 	bl	80069a8 <lsm6dsr_fsm_enable_get>
 8006100:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	2b00      	cmp	r3, #0
 8006106:	f040 80c4 	bne.w	8006292 <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800610a:	7b3b      	ldrb	r3, [r7, #12]
 800610c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006110:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006112:	7b3b      	ldrb	r3, [r7, #12]
 8006114:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006118:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800611a:	4313      	orrs	r3, r2
 800611c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800611e:	7b3b      	ldrb	r3, [r7, #12]
 8006120:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006124:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006126:	4313      	orrs	r3, r2
 8006128:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800612a:	7b3b      	ldrb	r3, [r7, #12]
 800612c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006130:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006132:	4313      	orrs	r3, r2
 8006134:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006136:	7b3b      	ldrb	r3, [r7, #12]
 8006138:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800613c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800613e:	4313      	orrs	r3, r2
 8006140:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006142:	7b3b      	ldrb	r3, [r7, #12]
 8006144:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006148:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800614a:	4313      	orrs	r3, r2
 800614c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800614e:	7b3b      	ldrb	r3, [r7, #12]
 8006150:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006154:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006156:	4313      	orrs	r3, r2
 8006158:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800615a:	7b3b      	ldrb	r3, [r7, #12]
 800615c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006160:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006162:	4313      	orrs	r3, r2
 8006164:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006166:	7b7b      	ldrb	r3, [r7, #13]
 8006168:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800616c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800616e:	4313      	orrs	r3, r2
 8006170:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006172:	7b7b      	ldrb	r3, [r7, #13]
 8006174:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006178:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800617a:	4313      	orrs	r3, r2
 800617c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800617e:	7b7b      	ldrb	r3, [r7, #13]
 8006180:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006184:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006186:	4313      	orrs	r3, r2
 8006188:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800618a:	7b7b      	ldrb	r3, [r7, #13]
 800618c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006190:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006192:	4313      	orrs	r3, r2
 8006194:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006196:	7b7b      	ldrb	r3, [r7, #13]
 8006198:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800619c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800619e:	4313      	orrs	r3, r2
 80061a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80061a2:	7b7b      	ldrb	r3, [r7, #13]
 80061a4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80061a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80061aa:	4313      	orrs	r3, r2
 80061ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80061ae:	7b7b      	ldrb	r3, [r7, #13]
 80061b0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80061b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80061b6:	4313      	orrs	r3, r2
 80061b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80061ba:	7b7b      	ldrb	r3, [r7, #13]
 80061bc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80061c0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80061c2:	4313      	orrs	r3, r2
 80061c4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d163      	bne.n	8006292 <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 80061ca:	f107 030b 	add.w	r3, r7, #11
 80061ce:	4619      	mov	r1, r3
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fc15 	bl	8006a00 <lsm6dsr_fsm_data_rate_get>
 80061d6:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d159      	bne.n	8006292 <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80061de:	7afb      	ldrb	r3, [r7, #11]
 80061e0:	2b03      	cmp	r3, #3
 80061e2:	d853      	bhi.n	800628c <lsm6dsr_xl_data_rate_set+0x1a8>
 80061e4:	a201      	add	r2, pc, #4	; (adr r2, 80061ec <lsm6dsr_xl_data_rate_set+0x108>)
 80061e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ea:	bf00      	nop
 80061ec:	080061fd 	.word	0x080061fd
 80061f0:	0800620f 	.word	0x0800620f
 80061f4:	0800622d 	.word	0x0800622d
 80061f8:	08006257 	.word	0x08006257
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 80061fc:	78fb      	ldrb	r3, [r7, #3]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d102      	bne.n	8006208 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 8006202:	2301      	movs	r3, #1
 8006204:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006206:	e045      	b.n	8006294 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006208:	78fb      	ldrb	r3, [r7, #3]
 800620a:	75fb      	strb	r3, [r7, #23]
            break;
 800620c:	e042      	b.n	8006294 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 800620e:	78fb      	ldrb	r3, [r7, #3]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d102      	bne.n	800621a <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8006214:	2302      	movs	r3, #2
 8006216:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006218:	e03c      	b.n	8006294 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 800621a:	78fb      	ldrb	r3, [r7, #3]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d102      	bne.n	8006226 <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8006220:	2302      	movs	r3, #2
 8006222:	75fb      	strb	r3, [r7, #23]
            break;
 8006224:	e036      	b.n	8006294 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006226:	78fb      	ldrb	r3, [r7, #3]
 8006228:	75fb      	strb	r3, [r7, #23]
            break;
 800622a:	e033      	b.n	8006294 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 800622c:	78fb      	ldrb	r3, [r7, #3]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d102      	bne.n	8006238 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8006232:	2303      	movs	r3, #3
 8006234:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006236:	e02d      	b.n	8006294 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8006238:	78fb      	ldrb	r3, [r7, #3]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d102      	bne.n	8006244 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800623e:	2303      	movs	r3, #3
 8006240:	75fb      	strb	r3, [r7, #23]
            break;
 8006242:	e027      	b.n	8006294 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8006244:	78fb      	ldrb	r3, [r7, #3]
 8006246:	2b02      	cmp	r3, #2
 8006248:	d102      	bne.n	8006250 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800624a:	2303      	movs	r3, #3
 800624c:	75fb      	strb	r3, [r7, #23]
            break;
 800624e:	e021      	b.n	8006294 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006250:	78fb      	ldrb	r3, [r7, #3]
 8006252:	75fb      	strb	r3, [r7, #23]
            break;
 8006254:	e01e      	b.n	8006294 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8006256:	78fb      	ldrb	r3, [r7, #3]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d102      	bne.n	8006262 <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800625c:	2304      	movs	r3, #4
 800625e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006260:	e018      	b.n	8006294 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8006262:	78fb      	ldrb	r3, [r7, #3]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d102      	bne.n	800626e <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006268:	2304      	movs	r3, #4
 800626a:	75fb      	strb	r3, [r7, #23]
            break;
 800626c:	e012      	b.n	8006294 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 800626e:	78fb      	ldrb	r3, [r7, #3]
 8006270:	2b02      	cmp	r3, #2
 8006272:	d102      	bne.n	800627a <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006274:	2304      	movs	r3, #4
 8006276:	75fb      	strb	r3, [r7, #23]
            break;
 8006278:	e00c      	b.n	8006294 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 800627a:	78fb      	ldrb	r3, [r7, #3]
 800627c:	2b03      	cmp	r3, #3
 800627e:	d102      	bne.n	8006286 <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006280:	2304      	movs	r3, #4
 8006282:	75fb      	strb	r3, [r7, #23]
            break;
 8006284:	e006      	b.n	8006294 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006286:	78fb      	ldrb	r3, [r7, #3]
 8006288:	75fb      	strb	r3, [r7, #23]
            break;
 800628a:	e003      	b.n	8006294 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 800628c:	78fb      	ldrb	r3, [r7, #3]
 800628e:	75fb      	strb	r3, [r7, #23]
            break;
 8006290:	e000      	b.n	8006294 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 8006292:	bf00      	nop
    }
  }

  if (ret == 0)
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d107      	bne.n	80062aa <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800629a:	f107 0208 	add.w	r2, r7, #8
 800629e:	2301      	movs	r3, #1
 80062a0:	2110      	movs	r1, #16
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f7ff fe7c 	bl	8005fa0 <lsm6dsr_read_reg>
 80062a8:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10f      	bne.n	80062d0 <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 80062b0:	7dfb      	ldrb	r3, [r7, #23]
 80062b2:	f003 030f 	and.w	r3, r3, #15
 80062b6:	b2da      	uxtb	r2, r3
 80062b8:	7a3b      	ldrb	r3, [r7, #8]
 80062ba:	f362 1307 	bfi	r3, r2, #4, #4
 80062be:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 80062c0:	f107 0208 	add.w	r2, r7, #8
 80062c4:	2301      	movs	r3, #1
 80062c6:	2110      	movs	r1, #16
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f7ff fe81 	bl	8005fd0 <lsm6dsr_write_reg>
 80062ce:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80062d0:	693b      	ldr	r3, [r7, #16]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3718      	adds	r7, #24
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop

080062dc <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	460b      	mov	r3, r1
 80062e6:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80062e8:	f107 0208 	add.w	r2, r7, #8
 80062ec:	2301      	movs	r3, #1
 80062ee:	2111      	movs	r1, #17
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f7ff fe55 	bl	8005fa0 <lsm6dsr_read_reg>
 80062f6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10f      	bne.n	800631e <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 80062fe:	78fb      	ldrb	r3, [r7, #3]
 8006300:	f003 030f 	and.w	r3, r3, #15
 8006304:	b2da      	uxtb	r2, r3
 8006306:	7a3b      	ldrb	r3, [r7, #8]
 8006308:	f362 0303 	bfi	r3, r2, #0, #4
 800630c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800630e:	f107 0208 	add.w	r2, r7, #8
 8006312:	2301      	movs	r3, #1
 8006314:	2111      	movs	r1, #17
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7ff fe5a 	bl	8005fd0 <lsm6dsr_write_reg>
 800631c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800631e:	68fb      	ldr	r3, [r7, #12]
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	460b      	mov	r3, r1
 8006332:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 8006334:	78fb      	ldrb	r3, [r7, #3]
 8006336:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8006338:	f107 030c 	add.w	r3, r7, #12
 800633c:	4619      	mov	r1, r3
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fb32 	bl	80069a8 <lsm6dsr_fsm_enable_get>
 8006344:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	2b00      	cmp	r3, #0
 800634a:	f040 80c4 	bne.w	80064d6 <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800634e:	7b3b      	ldrb	r3, [r7, #12]
 8006350:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006354:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006356:	7b3b      	ldrb	r3, [r7, #12]
 8006358:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800635c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800635e:	4313      	orrs	r3, r2
 8006360:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006362:	7b3b      	ldrb	r3, [r7, #12]
 8006364:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006368:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800636a:	4313      	orrs	r3, r2
 800636c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800636e:	7b3b      	ldrb	r3, [r7, #12]
 8006370:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006374:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006376:	4313      	orrs	r3, r2
 8006378:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800637a:	7b3b      	ldrb	r3, [r7, #12]
 800637c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006380:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006382:	4313      	orrs	r3, r2
 8006384:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006386:	7b3b      	ldrb	r3, [r7, #12]
 8006388:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800638c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800638e:	4313      	orrs	r3, r2
 8006390:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006392:	7b3b      	ldrb	r3, [r7, #12]
 8006394:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006398:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800639a:	4313      	orrs	r3, r2
 800639c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800639e:	7b3b      	ldrb	r3, [r7, #12]
 80063a0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80063a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80063a6:	4313      	orrs	r3, r2
 80063a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80063aa:	7b7b      	ldrb	r3, [r7, #13]
 80063ac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80063b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80063b2:	4313      	orrs	r3, r2
 80063b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80063b6:	7b7b      	ldrb	r3, [r7, #13]
 80063b8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80063bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80063be:	4313      	orrs	r3, r2
 80063c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80063c2:	7b7b      	ldrb	r3, [r7, #13]
 80063c4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80063c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80063ca:	4313      	orrs	r3, r2
 80063cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80063ce:	7b7b      	ldrb	r3, [r7, #13]
 80063d0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80063d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80063d6:	4313      	orrs	r3, r2
 80063d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80063da:	7b7b      	ldrb	r3, [r7, #13]
 80063dc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80063e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80063e2:	4313      	orrs	r3, r2
 80063e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80063e6:	7b7b      	ldrb	r3, [r7, #13]
 80063e8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80063ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80063ee:	4313      	orrs	r3, r2
 80063f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80063f2:	7b7b      	ldrb	r3, [r7, #13]
 80063f4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80063f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80063fa:	4313      	orrs	r3, r2
 80063fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80063fe:	7b7b      	ldrb	r3, [r7, #13]
 8006400:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006404:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006406:	4313      	orrs	r3, r2
 8006408:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800640a:	2b01      	cmp	r3, #1
 800640c:	d163      	bne.n	80064d6 <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 800640e:	f107 030b 	add.w	r3, r7, #11
 8006412:	4619      	mov	r1, r3
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 faf3 	bl	8006a00 <lsm6dsr_fsm_data_rate_get>
 800641a:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d159      	bne.n	80064d6 <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8006422:	7afb      	ldrb	r3, [r7, #11]
 8006424:	2b03      	cmp	r3, #3
 8006426:	d853      	bhi.n	80064d0 <lsm6dsr_gy_data_rate_set+0x1a8>
 8006428:	a201      	add	r2, pc, #4	; (adr r2, 8006430 <lsm6dsr_gy_data_rate_set+0x108>)
 800642a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642e:	bf00      	nop
 8006430:	08006441 	.word	0x08006441
 8006434:	08006453 	.word	0x08006453
 8006438:	08006471 	.word	0x08006471
 800643c:	0800649b 	.word	0x0800649b
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 8006440:	78fb      	ldrb	r3, [r7, #3]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d102      	bne.n	800644c <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 8006446:	2301      	movs	r3, #1
 8006448:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800644a:	e045      	b.n	80064d8 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800644c:	78fb      	ldrb	r3, [r7, #3]
 800644e:	75fb      	strb	r3, [r7, #23]
            break;
 8006450:	e042      	b.n	80064d8 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8006452:	78fb      	ldrb	r3, [r7, #3]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d102      	bne.n	800645e <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8006458:	2302      	movs	r3, #2
 800645a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800645c:	e03c      	b.n	80064d8 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 800645e:	78fb      	ldrb	r3, [r7, #3]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d102      	bne.n	800646a <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8006464:	2302      	movs	r3, #2
 8006466:	75fb      	strb	r3, [r7, #23]
            break;
 8006468:	e036      	b.n	80064d8 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800646a:	78fb      	ldrb	r3, [r7, #3]
 800646c:	75fb      	strb	r3, [r7, #23]
            break;
 800646e:	e033      	b.n	80064d8 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8006470:	78fb      	ldrb	r3, [r7, #3]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d102      	bne.n	800647c <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8006476:	2303      	movs	r3, #3
 8006478:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800647a:	e02d      	b.n	80064d8 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 800647c:	78fb      	ldrb	r3, [r7, #3]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d102      	bne.n	8006488 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8006482:	2303      	movs	r3, #3
 8006484:	75fb      	strb	r3, [r7, #23]
            break;
 8006486:	e027      	b.n	80064d8 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8006488:	78fb      	ldrb	r3, [r7, #3]
 800648a:	2b02      	cmp	r3, #2
 800648c:	d102      	bne.n	8006494 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800648e:	2303      	movs	r3, #3
 8006490:	75fb      	strb	r3, [r7, #23]
            break;
 8006492:	e021      	b.n	80064d8 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006494:	78fb      	ldrb	r3, [r7, #3]
 8006496:	75fb      	strb	r3, [r7, #23]
            break;
 8006498:	e01e      	b.n	80064d8 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800649a:	78fb      	ldrb	r3, [r7, #3]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d102      	bne.n	80064a6 <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80064a0:	2304      	movs	r3, #4
 80064a2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80064a4:	e018      	b.n	80064d8 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80064a6:	78fb      	ldrb	r3, [r7, #3]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d102      	bne.n	80064b2 <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80064ac:	2304      	movs	r3, #4
 80064ae:	75fb      	strb	r3, [r7, #23]
            break;
 80064b0:	e012      	b.n	80064d8 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 80064b2:	78fb      	ldrb	r3, [r7, #3]
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d102      	bne.n	80064be <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80064b8:	2304      	movs	r3, #4
 80064ba:	75fb      	strb	r3, [r7, #23]
            break;
 80064bc:	e00c      	b.n	80064d8 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 80064be:	78fb      	ldrb	r3, [r7, #3]
 80064c0:	2b03      	cmp	r3, #3
 80064c2:	d102      	bne.n	80064ca <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80064c4:	2304      	movs	r3, #4
 80064c6:	75fb      	strb	r3, [r7, #23]
            break;
 80064c8:	e006      	b.n	80064d8 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80064ca:	78fb      	ldrb	r3, [r7, #3]
 80064cc:	75fb      	strb	r3, [r7, #23]
            break;
 80064ce:	e003      	b.n	80064d8 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 80064d0:	78fb      	ldrb	r3, [r7, #3]
 80064d2:	75fb      	strb	r3, [r7, #23]
            break;
 80064d4:	e000      	b.n	80064d8 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 80064d6:	bf00      	nop
    }
  }

  if (ret == 0)
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d107      	bne.n	80064ee <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80064de:	f107 0208 	add.w	r2, r7, #8
 80064e2:	2301      	movs	r3, #1
 80064e4:	2111      	movs	r1, #17
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7ff fd5a 	bl	8005fa0 <lsm6dsr_read_reg>
 80064ec:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10f      	bne.n	8006514 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 80064f4:	7dfb      	ldrb	r3, [r7, #23]
 80064f6:	f003 030f 	and.w	r3, r3, #15
 80064fa:	b2da      	uxtb	r2, r3
 80064fc:	7a3b      	ldrb	r3, [r7, #8]
 80064fe:	f362 1307 	bfi	r3, r2, #4, #4
 8006502:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006504:	f107 0208 	add.w	r2, r7, #8
 8006508:	2301      	movs	r3, #1
 800650a:	2111      	movs	r1, #17
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7ff fd5f 	bl	8005fd0 <lsm6dsr_write_reg>
 8006512:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8006514:	693b      	ldr	r3, [r7, #16]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3718      	adds	r7, #24
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop

08006520 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	460b      	mov	r3, r1
 800652a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800652c:	f107 0208 	add.w	r2, r7, #8
 8006530:	2301      	movs	r3, #1
 8006532:	2112      	movs	r1, #18
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f7ff fd33 	bl	8005fa0 <lsm6dsr_read_reg>
 800653a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10f      	bne.n	8006562 <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8006542:	78fb      	ldrb	r3, [r7, #3]
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	b2da      	uxtb	r2, r3
 800654a:	7a3b      	ldrb	r3, [r7, #8]
 800654c:	f362 1386 	bfi	r3, r2, #6, #1
 8006550:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006552:	f107 0208 	add.w	r2, r7, #8
 8006556:	2301      	movs	r3, #1
 8006558:	2112      	movs	r1, #18
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7ff fd38 	bl	8005fd0 <lsm6dsr_write_reg>
 8006560:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006562:	68fb      	ldr	r3, [r7, #12]
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8006576:	f107 0208 	add.w	r2, r7, #8
 800657a:	2301      	movs	r3, #1
 800657c:	211e      	movs	r1, #30
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f7ff fd0e 	bl	8005fa0 <lsm6dsr_read_reg>
 8006584:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 8006586:	7a3b      	ldrb	r3, [r7, #8]
 8006588:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800658c:	b2db      	uxtb	r3, r3
 800658e:	461a      	mov	r2, r3
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	701a      	strb	r2, [r3, #0]

  return ret;
 8006594:	68fb      	ldr	r3, [r7, #12]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b084      	sub	sp, #16
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 80065a8:	f107 0208 	add.w	r2, r7, #8
 80065ac:	2301      	movs	r3, #1
 80065ae:	211e      	movs	r1, #30
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f7ff fcf5 	bl	8005fa0 <lsm6dsr_read_reg>
 80065b6:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 80065b8:	7a3b      	ldrb	r3, [r7, #8]
 80065ba:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	461a      	mov	r2, r3
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	701a      	strb	r2, [r3, #0]

  return ret;
 80065c6:	68fb      	ldr	r3, [r7, #12]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 80065da:	f107 0208 	add.w	r2, r7, #8
 80065de:	2301      	movs	r3, #1
 80065e0:	211e      	movs	r1, #30
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7ff fcdc 	bl	8005fa0 <lsm6dsr_read_reg>
 80065e8:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 80065ea:	7a3b      	ldrb	r3, [r7, #8]
 80065ec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	461a      	mov	r2, r3
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	701a      	strb	r2, [r3, #0]

  return ret;
 80065f8:	68fb      	ldr	r3, [r7, #12]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b084      	sub	sp, #16
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 800660c:	f107 0208 	add.w	r2, r7, #8
 8006610:	2302      	movs	r3, #2
 8006612:	2120      	movs	r1, #32
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f7ff fcc3 	bl	8005fa0 <lsm6dsr_read_reg>
 800661a:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 800661c:	7a7b      	ldrb	r3, [r7, #9]
 800661e:	b21a      	sxth	r2, r3
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	f9b3 3000 	ldrsh.w	r3, [r3]
 800662a:	b29b      	uxth	r3, r3
 800662c:	021b      	lsls	r3, r3, #8
 800662e:	b29a      	uxth	r2, r3
 8006630:	7a3b      	ldrb	r3, [r7, #8]
 8006632:	b29b      	uxth	r3, r3
 8006634:	4413      	add	r3, r2
 8006636:	b29b      	uxth	r3, r3
 8006638:	b21a      	sxth	r2, r3
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	801a      	strh	r2, [r3, #0]

  return ret;
 800663e:	68fb      	ldr	r3, [r7, #12]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 8006652:	f107 020c 	add.w	r2, r7, #12
 8006656:	2306      	movs	r3, #6
 8006658:	2122      	movs	r1, #34	; 0x22
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f7ff fca0 	bl	8005fa0 <lsm6dsr_read_reg>
 8006660:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006662:	7b7b      	ldrb	r3, [r7, #13]
 8006664:	b21a      	sxth	r2, r3
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006670:	b29b      	uxth	r3, r3
 8006672:	021b      	lsls	r3, r3, #8
 8006674:	b29a      	uxth	r2, r3
 8006676:	7b3b      	ldrb	r3, [r7, #12]
 8006678:	b29b      	uxth	r3, r3
 800667a:	4413      	add	r3, r2
 800667c:	b29b      	uxth	r3, r3
 800667e:	b21a      	sxth	r2, r3
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006684:	7bfa      	ldrb	r2, [r7, #15]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	3302      	adds	r3, #2
 800668a:	b212      	sxth	r2, r2
 800668c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	3302      	adds	r3, #2
 8006692:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006696:	b29b      	uxth	r3, r3
 8006698:	021b      	lsls	r3, r3, #8
 800669a:	b29a      	uxth	r2, r3
 800669c:	7bbb      	ldrb	r3, [r7, #14]
 800669e:	b29b      	uxth	r3, r3
 80066a0:	4413      	add	r3, r2
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	3302      	adds	r3, #2
 80066a8:	b212      	sxth	r2, r2
 80066aa:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80066ac:	7c7a      	ldrb	r2, [r7, #17]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	3304      	adds	r3, #4
 80066b2:	b212      	sxth	r2, r2
 80066b4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	3304      	adds	r3, #4
 80066ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066be:	b29b      	uxth	r3, r3
 80066c0:	021b      	lsls	r3, r3, #8
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	7c3b      	ldrb	r3, [r7, #16]
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	4413      	add	r3, r2
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	3304      	adds	r3, #4
 80066d0:	b212      	sxth	r2, r2
 80066d2:	801a      	strh	r2, [r3, #0]

  return ret;
 80066d4:	697b      	ldr	r3, [r7, #20]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3718      	adds	r7, #24
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b086      	sub	sp, #24
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
 80066e6:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 80066e8:	f107 020c 	add.w	r2, r7, #12
 80066ec:	2306      	movs	r3, #6
 80066ee:	2128      	movs	r1, #40	; 0x28
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f7ff fc55 	bl	8005fa0 <lsm6dsr_read_reg>
 80066f6:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80066f8:	7b7b      	ldrb	r3, [r7, #13]
 80066fa:	b21a      	sxth	r2, r3
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006706:	b29b      	uxth	r3, r3
 8006708:	021b      	lsls	r3, r3, #8
 800670a:	b29a      	uxth	r2, r3
 800670c:	7b3b      	ldrb	r3, [r7, #12]
 800670e:	b29b      	uxth	r3, r3
 8006710:	4413      	add	r3, r2
 8006712:	b29b      	uxth	r3, r3
 8006714:	b21a      	sxth	r2, r3
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800671a:	7bfa      	ldrb	r2, [r7, #15]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	3302      	adds	r3, #2
 8006720:	b212      	sxth	r2, r2
 8006722:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	3302      	adds	r3, #2
 8006728:	f9b3 3000 	ldrsh.w	r3, [r3]
 800672c:	b29b      	uxth	r3, r3
 800672e:	021b      	lsls	r3, r3, #8
 8006730:	b29a      	uxth	r2, r3
 8006732:	7bbb      	ldrb	r3, [r7, #14]
 8006734:	b29b      	uxth	r3, r3
 8006736:	4413      	add	r3, r2
 8006738:	b29a      	uxth	r2, r3
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	3302      	adds	r3, #2
 800673e:	b212      	sxth	r2, r2
 8006740:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006742:	7c7a      	ldrb	r2, [r7, #17]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	3304      	adds	r3, #4
 8006748:	b212      	sxth	r2, r2
 800674a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	3304      	adds	r3, #4
 8006750:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006754:	b29b      	uxth	r3, r3
 8006756:	021b      	lsls	r3, r3, #8
 8006758:	b29a      	uxth	r2, r3
 800675a:	7c3b      	ldrb	r3, [r7, #16]
 800675c:	b29b      	uxth	r3, r3
 800675e:	4413      	add	r3, r2
 8006760:	b29a      	uxth	r2, r3
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	3304      	adds	r3, #4
 8006766:	b212      	sxth	r2, r2
 8006768:	801a      	strh	r2, [r3, #0]

  return ret;
 800676a:	697b      	ldr	r3, [r7, #20]
}
 800676c:	4618      	mov	r0, r3
 800676e:	3718      	adds	r7, #24
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	460b      	mov	r3, r1
 800677e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8006780:	f107 0208 	add.w	r2, r7, #8
 8006784:	2301      	movs	r3, #1
 8006786:	2101      	movs	r1, #1
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f7ff fc09 	bl	8005fa0 <lsm6dsr_read_reg>
 800678e:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d10f      	bne.n	80067b6 <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 8006796:	78fb      	ldrb	r3, [r7, #3]
 8006798:	f003 0303 	and.w	r3, r3, #3
 800679c:	b2da      	uxtb	r2, r3
 800679e:	7a3b      	ldrb	r3, [r7, #8]
 80067a0:	f362 1387 	bfi	r3, r2, #6, #2
 80067a4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 80067a6:	f107 0208 	add.w	r2, r7, #8
 80067aa:	2301      	movs	r3, #1
 80067ac:	2101      	movs	r1, #1
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f7ff fc0e 	bl	8005fd0 <lsm6dsr_write_reg>
 80067b4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 80067b6:	68fb      	ldr	r3, [r7, #12]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 80067ca:	2301      	movs	r3, #1
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	210f      	movs	r1, #15
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f7ff fbe5 	bl	8005fa0 <lsm6dsr_read_reg>
 80067d6:	60f8      	str	r0, [r7, #12]

  return ret;
 80067d8:	68fb      	ldr	r3, [r7, #12]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b084      	sub	sp, #16
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	460b      	mov	r3, r1
 80067ec:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80067ee:	f107 0208 	add.w	r2, r7, #8
 80067f2:	2301      	movs	r3, #1
 80067f4:	2112      	movs	r1, #18
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7ff fbd2 	bl	8005fa0 <lsm6dsr_read_reg>
 80067fc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10f      	bne.n	8006824 <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8006804:	78fb      	ldrb	r3, [r7, #3]
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	b2da      	uxtb	r2, r3
 800680c:	7a3b      	ldrb	r3, [r7, #8]
 800680e:	f362 0300 	bfi	r3, r2, #0, #1
 8006812:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006814:	f107 0208 	add.w	r2, r7, #8
 8006818:	2301      	movs	r3, #1
 800681a:	2112      	movs	r1, #18
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f7ff fbd7 	bl	8005fd0 <lsm6dsr_write_reg>
 8006822:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006824:	68fb      	ldr	r3, [r7, #12]
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b084      	sub	sp, #16
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
 8006836:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006838:	f107 0208 	add.w	r2, r7, #8
 800683c:	2301      	movs	r3, #1
 800683e:	2112      	movs	r1, #18
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f7ff fbad 	bl	8005fa0 <lsm6dsr_read_reg>
 8006846:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8006848:	7a3b      	ldrb	r3, [r7, #8]
 800684a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800684e:	b2db      	uxtb	r3, r3
 8006850:	461a      	mov	r2, r3
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	701a      	strb	r2, [r3, #0]

  return ret;
 8006856:	68fb      	ldr	r3, [r7, #12]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <lsm6dsr_xl_filter_lp2_set>:
  * @param  val    Change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	460b      	mov	r3, r1
 800686a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800686c:	f107 0208 	add.w	r2, r7, #8
 8006870:	2301      	movs	r3, #1
 8006872:	2110      	movs	r1, #16
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f7ff fb93 	bl	8005fa0 <lsm6dsr_read_reg>
 800687a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10f      	bne.n	80068a2 <lsm6dsr_xl_filter_lp2_set+0x42>
  {
    ctrl1_xl.lpf2_xl_en = (uint8_t)val;
 8006882:	78fb      	ldrb	r3, [r7, #3]
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	b2da      	uxtb	r2, r3
 800688a:	7a3b      	ldrb	r3, [r7, #8]
 800688c:	f362 0341 	bfi	r3, r2, #1, #1
 8006890:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8006892:	f107 0208 	add.w	r2, r7, #8
 8006896:	2301      	movs	r3, #1
 8006898:	2110      	movs	r1, #16
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7ff fb98 	bl	8005fd0 <lsm6dsr_write_reg>
 80068a0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80068a2:	68fb      	ldr	r3, [r7, #12]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <lsm6dsr_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dsr_hp_slope_xl_en_t val)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	460b      	mov	r3, r1
 80068b6:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 80068b8:	f107 0208 	add.w	r2, r7, #8
 80068bc:	2301      	movs	r3, #1
 80068be:	2117      	movs	r1, #23
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f7ff fb6d 	bl	8005fa0 <lsm6dsr_read_reg>
 80068c6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d121      	bne.n	8006912 <lsm6dsr_xl_hp_path_on_out_set+0x66>
  {
    ctrl8_xl.hp_slope_xl_en = (((uint8_t)val & 0x10U) >> 4);
 80068ce:	78fb      	ldrb	r3, [r7, #3]
 80068d0:	091b      	lsrs	r3, r3, #4
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	7a3b      	ldrb	r3, [r7, #8]
 80068da:	f362 0382 	bfi	r3, r2, #2, #1
 80068de:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_ref_mode_xl = (((uint8_t)val & 0x20U) >> 5);
 80068e0:	78fb      	ldrb	r3, [r7, #3]
 80068e2:	095b      	lsrs	r3, r3, #5
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	b2da      	uxtb	r2, r3
 80068ea:	7a3b      	ldrb	r3, [r7, #8]
 80068ec:	f362 1304 	bfi	r3, r2, #4, #1
 80068f0:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 80068f2:	78fb      	ldrb	r3, [r7, #3]
 80068f4:	f003 0307 	and.w	r3, r3, #7
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	7a3b      	ldrb	r3, [r7, #8]
 80068fc:	f362 1347 	bfi	r3, r2, #5, #3
 8006900:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL8_XL,
 8006902:	f107 0208 	add.w	r2, r7, #8
 8006906:	2301      	movs	r3, #1
 8006908:	2117      	movs	r1, #23
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7ff fb60 	bl	8005fd0 <lsm6dsr_write_reg>
 8006910:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 8006912:	68fb      	ldr	r3, [r7, #12]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <lsm6dsr_i3c_disable_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dsr_i3c_disable_t val)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	460b      	mov	r3, r1
 8006926:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl9_xl_t ctrl9_xl;
  lsm6dsr_i3c_bus_avb_t i3c_bus_avb;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8006928:	f107 0210 	add.w	r2, r7, #16
 800692c:	2301      	movs	r3, #1
 800692e:	2118      	movs	r1, #24
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f7ff fb35 	bl	8005fa0 <lsm6dsr_read_reg>
 8006936:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d111      	bne.n	8006962 <lsm6dsr_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 800693e:	78fb      	ldrb	r3, [r7, #3]
 8006940:	09db      	lsrs	r3, r3, #7
 8006942:	b2db      	uxtb	r3, r3
 8006944:	f003 0301 	and.w	r3, r3, #1
 8006948:	b2da      	uxtb	r2, r3
 800694a:	7c3b      	ldrb	r3, [r7, #16]
 800694c:	f362 0341 	bfi	r3, r2, #1, #1
 8006950:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL9_XL,
 8006952:	f107 0210 	add.w	r2, r7, #16
 8006956:	2301      	movs	r3, #1
 8006958:	2118      	movs	r1, #24
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7ff fb38 	bl	8005fd0 <lsm6dsr_write_reg>
 8006960:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0)
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d107      	bne.n	8006978 <lsm6dsr_i3c_disable_set+0x5c>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8006968:	f107 020c 	add.w	r2, r7, #12
 800696c:	2301      	movs	r3, #1
 800696e:	2162      	movs	r1, #98	; 0x62
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f7ff fb15 	bl	8005fa0 <lsm6dsr_read_reg>
 8006976:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10f      	bne.n	800699e <lsm6dsr_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 800697e:	78fb      	ldrb	r3, [r7, #3]
 8006980:	f003 0303 	and.w	r3, r3, #3
 8006984:	b2da      	uxtb	r2, r3
 8006986:	7b3b      	ldrb	r3, [r7, #12]
 8006988:	f362 03c4 	bfi	r3, r2, #3, #2
 800698c:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 800698e:	f107 020c 	add.w	r2, r7, #12
 8006992:	2301      	movs	r3, #1
 8006994:	2162      	movs	r1, #98	; 0x62
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f7ff fb1a 	bl	8005fd0 <lsm6dsr_write_reg>
 800699c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 800699e:	697b      	ldr	r3, [r7, #20]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3718      	adds	r7, #24
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80069b2:	2102      	movs	r1, #2
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7ff fedd 	bl	8006774 <lsm6dsr_mem_bank_set>
 80069ba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d106      	bne.n	80069d0 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 80069c2:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 80069c4:	2301      	movs	r3, #1
 80069c6:	2146      	movs	r1, #70	; 0x46
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f7ff fae9 	bl	8005fa0 <lsm6dsr_read_reg>
 80069ce:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d107      	bne.n	80069e6 <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 80069da:	2301      	movs	r3, #1
 80069dc:	2147      	movs	r1, #71	; 0x47
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f7ff fade 	bl	8005fa0 <lsm6dsr_read_reg>
 80069e4:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d104      	bne.n	80069f6 <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 80069ec:	2100      	movs	r1, #0
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7ff fec0 	bl	8006774 <lsm6dsr_mem_bank_set>
 80069f4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80069f6:	68fb      	ldr	r3, [r7, #12]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8006a0a:	2102      	movs	r1, #2
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f7ff feb1 	bl	8006774 <lsm6dsr_mem_bank_set>
 8006a12:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d107      	bne.n	8006a2a <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 8006a1a:	f107 0208 	add.w	r2, r7, #8
 8006a1e:	2301      	movs	r3, #1
 8006a20:	215f      	movs	r1, #95	; 0x5f
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7ff fabc 	bl	8005fa0 <lsm6dsr_read_reg>
 8006a28:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d104      	bne.n	8006a3a <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8006a30:	2100      	movs	r1, #0
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f7ff fe9e 	bl	8006774 <lsm6dsr_mem_bank_set>
 8006a38:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8006a3a:	7a3b      	ldrb	r3, [r7, #8]
 8006a3c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	2b03      	cmp	r3, #3
 8006a44:	d81a      	bhi.n	8006a7c <lsm6dsr_fsm_data_rate_get+0x7c>
 8006a46:	a201      	add	r2, pc, #4	; (adr r2, 8006a4c <lsm6dsr_fsm_data_rate_get+0x4c>)
 8006a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4c:	08006a5d 	.word	0x08006a5d
 8006a50:	08006a65 	.word	0x08006a65
 8006a54:	08006a6d 	.word	0x08006a6d
 8006a58:	08006a75 	.word	0x08006a75
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	701a      	strb	r2, [r3, #0]
      break;
 8006a62:	e00f      	b.n	8006a84 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	2201      	movs	r2, #1
 8006a68:	701a      	strb	r2, [r3, #0]
      break;
 8006a6a:	e00b      	b.n	8006a84 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	2202      	movs	r2, #2
 8006a70:	701a      	strb	r2, [r3, #0]
      break;
 8006a72:	e007      	b.n	8006a84 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2203      	movs	r2, #3
 8006a78:	701a      	strb	r2, [r3, #0]
      break;
 8006a7a:	e003      	b.n	8006a84 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	701a      	strb	r2, [r3, #0]
      break;
 8006a82:	bf00      	nop
  }

  return ret;
 8006a84:	68fb      	ldr	r3, [r7, #12]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop

08006a90 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	683a      	ldr	r2, [r7, #0]
 8006aa2:	b2d2      	uxtb	r2, r2
 8006aa4:	4611      	mov	r1, r2
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	4798      	blx	r3
 8006aaa:	4603      	mov	r3, r0
 8006aac:	4618      	mov	r0, r3
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <_Z12ISBDCallbackv>:

bool ISBDCallback() __attribute__((weak));
void ISBDConsoleCallback(IridiumSBD *device, char c) __attribute__((weak));
void ISBDDiagsCallback(IridiumSBD *device, char c) __attribute__((weak));

bool ISBDCallback() { return true; }
 8006ab4:	b480      	push	{r7}
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	2301      	movs	r3, #1
 8006aba:	4618      	mov	r0, r3
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <_Z19ISBDConsoleCallbackP10IridiumSBDc>:
void ISBDConsoleCallback(IridiumSBD *device, char c) { }
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	460b      	mov	r3, r1
 8006ace:	70fb      	strb	r3, [r7, #3]
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <_Z17ISBDDiagsCallbackP10IridiumSBDc>:
void ISBDDiagsCallback(IridiumSBD *device, char c) { }
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	70fb      	strb	r3, [r7, #3]
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <_ZN10IridiumSBD5beginEv>:



// Power on the RockBLOCK or return from sleep
int IridiumSBD::begin()
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <_ZN10IridiumSBD5beginEv+0x16>
      return ISBD_REENTRANT;
 8006b06:	2309      	movs	r3, #9
 8006b08:	e01a      	b.n	8006b40 <_ZN10IridiumSBD5beginEv+0x4c>

   this->reentrant = true;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalBegin();
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 fb2a 	bl	800716c <_ZN10IridiumSBD13internalBeginEv>
 8006b18:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

   // Absent a successful startup, keep the device turned off
   if (ret != ISBD_SUCCESS)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00a      	beq.n	8006b3e <_ZN10IridiumSBD5beginEv+0x4a>
   {
      if (this->useSerial)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	7c5b      	ldrb	r3, [r3, #17]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d002      	beq.n	8006b36 <_ZN10IridiumSBD5beginEv+0x42>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f001 fc71 	bl	8008418 <_ZN10IridiumSBD13endSerialPortEv>
      power(false);
 8006b36:	2100      	movs	r1, #0
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f001 fbbf 	bl	80082bc <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <_ZN10IridiumSBD11sendSBDTextEPKc>:
   return ret;
}

// Transmit a text message
int IridiumSBD::sendSBDText(const char *message)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b086      	sub	sp, #24
 8006b4c:	af02      	add	r7, sp, #8
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
   if (this->reentrant)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d001      	beq.n	8006b60 <_ZN10IridiumSBD11sendSBDTextEPKc+0x18>
      return ISBD_REENTRANT;
 8006b5c:	2309      	movs	r3, #9
 8006b5e:	e013      	b.n	8006b88 <_ZN10IridiumSBD11sendSBDTextEPKc+0x40>

   this->reentrant = true;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalSendReceiveSBD(message, NULL, 0, NULL, NULL);
 8006b68:	2300      	movs	r3, #0
 8006b6a:	9301      	str	r3, [sp, #4]
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	2300      	movs	r3, #0
 8006b72:	2200      	movs	r2, #0
 8006b74:	6839      	ldr	r1, [r7, #0]
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 fc80 	bl	800747c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj>
 8006b7c:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 8006b86:	68fb      	ldr	r3, [r7, #12]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <_ZN10IridiumSBD16getSignalQualityERi>:
   return ret;
}

// High-level wrapper for AT+CSQ
int IridiumSBD::getSignalQuality(int &quality)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
   if (this->reentrant)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d001      	beq.n	8006ba8 <_ZN10IridiumSBD16getSignalQualityERi+0x18>
      return ISBD_REENTRANT;
 8006ba4:	2309      	movs	r3, #9
 8006ba6:	e00d      	b.n	8006bc4 <_ZN10IridiumSBD16getSignalQualityERi+0x34>

   this->reentrant = true;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalGetSignalQuality(quality);
 8006bb0:	6839      	ldr	r1, [r7, #0]
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 ff1e 	bl	80079f4 <_ZN10IridiumSBD24internalGetSignalQualityERi>
 8006bb8:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <_ZN10IridiumSBD5sleepEv>:

// Gracefully put device to lower power mode (if sleep pin provided)
int IridiumSBD::sleep()
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d001      	beq.n	8006be2 <_ZN10IridiumSBD5sleepEv+0x16>
      return ISBD_REENTRANT;
 8006bde:	2309      	movs	r3, #9
 8006be0:	e025      	b.n	8006c2e <_ZN10IridiumSBD5sleepEv+0x62>

   if (this->useSerial && (this->sleepPin == -1))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	7c5b      	ldrb	r3, [r3, #17]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d006      	beq.n	8006bf8 <_ZN10IridiumSBD5sleepEv+0x2c>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf2:	d101      	bne.n	8006bf8 <_ZN10IridiumSBD5sleepEv+0x2c>
      return ISBD_NO_SLEEP_PIN;
 8006bf4:	230b      	movs	r3, #11
 8006bf6:	e01a      	b.n	8006c2e <_ZN10IridiumSBD5sleepEv+0x62>

   this->reentrant = true;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalSleep();
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 ff7d 	bl	8007b00 <_ZN10IridiumSBD13internalSleepEv>
 8006c06:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

   if (ret == ISBD_SUCCESS)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10a      	bne.n	8006c2c <_ZN10IridiumSBD5sleepEv+0x60>
   {
      if (this->useSerial)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	7c5b      	ldrb	r3, [r3, #17]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d002      	beq.n	8006c24 <_ZN10IridiumSBD5sleepEv+0x58>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f001 fbfa 	bl	8008418 <_ZN10IridiumSBD13endSerialPortEv>
      power(false); // power off
 8006c24:	2100      	movs	r1, #0
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f001 fb48 	bl	80082bc <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <_ZN10IridiumSBD15adjustATTimeoutEi>:
   }
}

// Tweak AT timeout
void IridiumSBD::adjustATTimeout(int seconds)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b083      	sub	sp, #12
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	6039      	str	r1, [r7, #0]
   this->atTimeout = seconds;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006c46:	bf00      	nop
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <_ZN10IridiumSBD16enableRingAlertsEb>:
{
   this->msstmWorkaroundRequested = useWorkAround;
}

void IridiumSBD::enableRingAlerts(bool enable) // true to enable SBDRING alerts and RING signal pin
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b082      	sub	sp, #8
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	70fb      	strb	r3, [r7, #3]
   this->ringAlertsEnabled = enable;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	78fa      	ldrb	r2, [r7, #3]
 8006c62:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
   if (enable)
 8006c66:	78fb      	ldrb	r3, [r7, #3]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00d      	beq.n	8006c88 <_ZN10IridiumSBD16enableRingAlertsEb+0x36>
   {
      this->ringAsserted = false;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
      if (!this->useSerial) // If we are using I2C, clear the ring indicator flag
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	7c5b      	ldrb	r3, [r3, #17]
 8006c78:	f083 0301 	eor.w	r3, r3, #1
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d002      	beq.n	8006c88 <_ZN10IridiumSBD16enableRingAlertsEb+0x36>
      {
        clearRingIndicator();
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f9b2 	bl	8006fec <_ZN10IridiumSBD18clearRingIndicatorEv>
      }
   }
}
 8006c88:	bf00      	nop
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <_ZN10IridiumSBD13getSystemTimeER2tm>:

   return ret;
}

int IridiumSBD::getSystemTime(struct tm &tm)
{
 8006c90:	b5b0      	push	{r4, r5, r7, lr}
 8006c92:	b09c      	sub	sp, #112	; 0x70
 8006c94:	af02      	add	r7, sp, #8
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
   char msstmResponseBuf[24];

   send(F("AT-MSSTM\r"));
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	493f      	ldr	r1, [pc, #252]	; (8006d9c <_ZN10IridiumSBD13getSystemTimeER2tm+0x10c>)
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f001 fbc7 	bl	8008434 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(msstmResponseBuf, sizeof(msstmResponseBuf), "-MSSTM: "))
 8006ca6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8006caa:	4b3d      	ldr	r3, [pc, #244]	; (8006da0 <_ZN10IridiumSBD13getSystemTimeER2tm+0x110>)
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	4b3d      	ldr	r3, [pc, #244]	; (8006da4 <_ZN10IridiumSBD13getSystemTimeER2tm+0x114>)
 8006cb0:	2218      	movs	r2, #24
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 ff5c 	bl	8007b70 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	f083 0301 	eor.w	r3, r3, #1
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d009      	beq.n	8006cd8 <_ZN10IridiumSBD13getSystemTimeER2tm+0x48>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f001 f811 	bl	8007cec <_ZN10IridiumSBD9cancelledEv>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d001      	beq.n	8006cd4 <_ZN10IridiumSBD13getSystemTimeER2tm+0x44>
 8006cd0:	2304      	movs	r3, #4
 8006cd2:	e05e      	b.n	8006d92 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	e05c      	b.n	8006d92 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>

   if (!isxdigit(msstmResponseBuf[0]))
 8006cd8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f00d fcd9 	bl	8014694 <isxdigit>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d101      	bne.n	8006cec <_ZN10IridiumSBD13getSystemTimeER2tm+0x5c>
      return ISBD_NO_NETWORK;
 8006ce8:	230c      	movs	r3, #12
 8006cea:	e052      	b.n	8006d92 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>

   // Latest epoch began at May 11, 2014, at 14:23:55 UTC.
   struct tm epoch_start;
   epoch_start.tm_year = 2014 - 1900;
 8006cec:	2372      	movs	r3, #114	; 0x72
 8006cee:	62bb      	str	r3, [r7, #40]	; 0x28
   epoch_start.tm_mon = 5 - 1;
 8006cf0:	2304      	movs	r3, #4
 8006cf2:	627b      	str	r3, [r7, #36]	; 0x24
   epoch_start.tm_mday = 11;
 8006cf4:	230b      	movs	r3, #11
 8006cf6:	623b      	str	r3, [r7, #32]
   epoch_start.tm_hour = 14;
 8006cf8:	230e      	movs	r3, #14
 8006cfa:	61fb      	str	r3, [r7, #28]
   epoch_start.tm_min = 23;
 8006cfc:	2317      	movs	r3, #23
 8006cfe:	61bb      	str	r3, [r7, #24]
   epoch_start.tm_sec = 55;
 8006d00:	2337      	movs	r3, #55	; 0x37
 8006d02:	617b      	str	r3, [r7, #20]

   unsigned long ticks_since_epoch = strtoul(msstmResponseBuf, NULL, 16);
 8006d04:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006d08:	2210      	movs	r2, #16
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f010 f965 	bl	8016fdc <strtoul>
 8006d12:	6678      	str	r0, [r7, #100]	; 0x64
      seconds less than the equivalent ticks_since_epoch. Subtract that away and
      we'll be left with a small number that won't overflow when we scale by 90/1000.

      Many thanks to Scott Weldon for this suggestion.
   */
   unsigned long secs_since_epoch = (ticks_since_epoch / 1000) * 90;
 8006d14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d16:	4a24      	ldr	r2, [pc, #144]	; (8006da8 <_ZN10IridiumSBD13getSystemTimeER2tm+0x118>)
 8006d18:	fba2 2303 	umull	r2, r3, r2, r3
 8006d1c:	099b      	lsrs	r3, r3, #6
 8006d1e:	225a      	movs	r2, #90	; 0x5a
 8006d20:	fb02 f303 	mul.w	r3, r2, r3
 8006d24:	663b      	str	r3, [r7, #96]	; 0x60
   unsigned long small_ticks = ticks_since_epoch - (secs_since_epoch / 90) * 1000;
 8006d26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d28:	085b      	lsrs	r3, r3, #1
 8006d2a:	4a20      	ldr	r2, [pc, #128]	; (8006dac <_ZN10IridiumSBD13getSystemTimeER2tm+0x11c>)
 8006d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d30:	095b      	lsrs	r3, r3, #5
 8006d32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d36:	fb02 f303 	mul.w	r3, r2, r3
 8006d3a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	65fb      	str	r3, [r7, #92]	; 0x5c
   secs_since_epoch += small_ticks * 90 / 1000;
 8006d40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d42:	225a      	movs	r2, #90	; 0x5a
 8006d44:	fb02 f303 	mul.w	r3, r2, r3
 8006d48:	4a17      	ldr	r2, [pc, #92]	; (8006da8 <_ZN10IridiumSBD13getSystemTimeER2tm+0x118>)
 8006d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d4e:	099b      	lsrs	r3, r3, #6
 8006d50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d52:	4413      	add	r3, r2
 8006d54:	663b      	str	r3, [r7, #96]	; 0x60

   time_t epoch_time = mktime(&epoch_start);
 8006d56:	f107 0314 	add.w	r3, r7, #20
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f00d fed4 	bl	8014b08 <mktime>
 8006d60:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
   time_t now = epoch_time + secs_since_epoch;
 8006d64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d66:	4618      	mov	r0, r3
 8006d68:	f04f 0100 	mov.w	r1, #0
 8006d6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006d70:	1884      	adds	r4, r0, r2
 8006d72:	eb41 0503 	adc.w	r5, r1, r3
 8006d76:	e9c7 4502 	strd	r4, r5, [r7, #8]
   memcpy(&tm, localtime(&now), sizeof tm);
 8006d7a:	f107 0308 	add.w	r3, r7, #8
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f00d fc90 	bl	80146a4 <localtime>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2224      	movs	r2, #36	; 0x24
 8006d88:	4619      	mov	r1, r3
 8006d8a:	6838      	ldr	r0, [r7, #0]
 8006d8c:	f00d fdb4 	bl	80148f8 <memcpy>
   return ISBD_SUCCESS;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3768      	adds	r7, #104	; 0x68
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bdb0      	pop	{r4, r5, r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	0801b5f4 	.word	0x0801b5f4
 8006da0:	0801b60c 	.word	0x0801b60c
 8006da4:	0801b600 	.word	0x0801b600
 8006da8:	10624dd3 	.word	0x10624dd3
 8006dac:	b60b60b7 	.word	0xb60b60b7

08006db0 <_ZN10IridiumSBD18getFirmwareVersionEPcj>:

int IridiumSBD::getFirmwareVersion(char *version, size_t bufferSize)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af02      	add	r7, sp, #8
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
   if (bufferSize < 8)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b07      	cmp	r3, #7
 8006dc0:	d801      	bhi.n	8006dc6 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x16>
      return ISBD_RX_OVERFLOW;
 8006dc2:	2308      	movs	r3, #8
 8006dc4:	e01e      	b.n	8006e04 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   send(F("AT+CGMR\r"));
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	2201      	movs	r2, #1
 8006dca:	4910      	ldr	r1, [pc, #64]	; (8006e0c <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x5c>)
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f001 fb31 	bl	8008434 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(version, bufferSize, "Call Processor Version: "))
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	4b0e      	ldr	r3, [pc, #56]	; (8006e10 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x60>)
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	4b0e      	ldr	r3, [pc, #56]	; (8006e14 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x64>)
 8006dda:	68b9      	ldr	r1, [r7, #8]
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f000 fec7 	bl	8007b70 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006de2:	4603      	mov	r3, r0
 8006de4:	f083 0301 	eor.w	r3, r3, #1
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d009      	beq.n	8006e02 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x52>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f000 ff7c 	bl	8007cec <_ZN10IridiumSBD9cancelledEv>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d001      	beq.n	8006dfe <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x4e>
 8006dfa:	2304      	movs	r3, #4
 8006dfc:	e002      	b.n	8006e04 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e000      	b.n	8006e04 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   return ISBD_SUCCESS;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	0801b614 	.word	0x0801b614
 8006e10:	0801b60c 	.word	0x0801b60c
 8006e14:	0801b620 	.word	0x0801b620

08006e18 <_ZN10IridiumSBD21enableSuperCapChargerEb>:

void IridiumSBD::enableSuperCapCharger(bool enable)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	460b      	mov	r3, r1
 8006e22:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the charger manually)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	7c5b      	ldrb	r3, [r3, #17]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d004      	beq.n	8006e36 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x1e>
  {
    diagprint(F("enableSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8006e2c:	4918      	ldr	r1, [pc, #96]	; (8006e90 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x78>)
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f001 fc7e 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8006e34:	e028      	b.n	8006e88 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x70>
  }

  // Enable/disable the supercapacitor charger by pulling its SHDN pin high/low
  check9603pins(); // Update IO_REGISTER
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f001 ff6b 	bl	8008d12 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8006e3c:	78fb      	ldrb	r3, [r7, #3]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00b      	beq.n	8006e5a <_ZN10IridiumSBD21enableSuperCapChargerEb+0x42>
  {
    IO_REGISTER |= IO_SHDN; // Set the SHDN bit
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	b2da      	uxtb	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8006e58:	e00f      	b.n	8006e7a <_ZN10IridiumSBD21enableSuperCapChargerEb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_SHDN; // Clear the SHDN bit
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006e60:	b25a      	sxtb	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006e68:	b25b      	sxtb	r3, r3
 8006e6a:	43db      	mvns	r3, r3
 8006e6c:	b25b      	sxtb	r3, r3
 8006e6e:	4013      	ands	r3, r2
 8006e70:	b25b      	sxtb	r3, r3
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006e80:	4619      	mov	r1, r3
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f001 ff7e 	bl	8008d84 <_ZN10IridiumSBD11set9603pinsEh>
}
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	0801b63c 	.word	0x0801b63c

08006e94 <_ZN10IridiumSBD20checkSuperCapChargerEv>:

bool IridiumSBD::checkSuperCapCharger()
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial (the user will have to check PGOOD manually)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	7c5b      	ldrb	r3, [r3, #17]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d005      	beq.n	8006eb0 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x1c>
  {
    diagprint(F("checkSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8006ea4:	4912      	ldr	r1, [pc, #72]	; (8006ef0 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x5c>)
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f001 fc42 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return(false);
 8006eac:	2300      	movs	r3, #0
 8006eae:	e01a      	b.n	8006ee6 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x52>
  }

  // Check the status of the supercapacitor charger PGOOD pin
  check9603pins(); // Update IO_REGISTER
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f001 ff2e 	bl	8008d12 <_ZN10IridiumSBD13check9603pinsEv>
  if (IO_REGISTER &= IO_PGOOD) // If the PGOOD bit is set, return true
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	b2da      	uxtb	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	bf14      	ite	ne
 8006ed6:	2301      	movne	r3, #1
 8006ed8:	2300      	moveq	r3, #0
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d001      	beq.n	8006ee4 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x50>
  {
    return(true);
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e000      	b.n	8006ee6 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x52>
  }
  else
  {
    return(false);
 8006ee4:	2300      	movs	r3, #0
  }
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	0801b688 	.word	0x0801b688

08006ef4 <_ZN10IridiumSBD16enable9603NpowerEb>:

void IridiumSBD::enable9603Npower(bool enable)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	460b      	mov	r3, r1
 8006efe:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N power manually)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	7c5b      	ldrb	r3, [r3, #17]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d004      	beq.n	8006f12 <_ZN10IridiumSBD16enable9603NpowerEb+0x1e>
  {
    diagprint(F("enable9603Npower is only valid when using I2C on the Qwiic Iridium\r\n"));
 8006f08:	4918      	ldr	r1, [pc, #96]	; (8006f6c <_ZN10IridiumSBD16enable9603NpowerEb+0x78>)
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f001 fc10 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8006f10:	e028      	b.n	8006f64 <_ZN10IridiumSBD16enable9603NpowerEb+0x70>
  }

  // Enable/disable power to the 9603N by pulling PWR_EN high/low
  check9603pins(); // Update IO_REGISTER
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f001 fefd 	bl	8008d12 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8006f18:	78fb      	ldrb	r3, [r7, #3]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00b      	beq.n	8006f36 <_ZN10IridiumSBD16enable9603NpowerEb+0x42>
  {
    IO_REGISTER |= IO_PWR_EN; // Set the PWR_EN bit
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	b2da      	uxtb	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8006f34:	e00f      	b.n	8006f56 <_ZN10IridiumSBD16enable9603NpowerEb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_PWR_EN; // Clear the PWR_EN bit
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006f3c:	b25a      	sxtb	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8006f44:	b25b      	sxtb	r3, r3
 8006f46:	43db      	mvns	r3, r3
 8006f48:	b25b      	sxtb	r3, r3
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	b25b      	sxtb	r3, r3
 8006f4e:	b2da      	uxtb	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f001 ff10 	bl	8008d84 <_ZN10IridiumSBD11set9603pinsEh>
}
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	0801b6d4 	.word	0x0801b6d4

08006f70 <_ZN10IridiumSBD10enable9603Eb>:

void IridiumSBD::enable9603(bool enable)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	460b      	mov	r3, r1
 8006f7a:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N manually)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	7c5b      	ldrb	r3, [r3, #17]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d004      	beq.n	8006f8e <_ZN10IridiumSBD10enable9603Eb+0x1e>
  {
    diagprint(F("enable9603 is only valid when using I2C on the Qwiic Iridium\r\n"));
 8006f84:	4918      	ldr	r1, [pc, #96]	; (8006fe8 <_ZN10IridiumSBD10enable9603Eb+0x78>)
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f001 fbd2 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8006f8c:	e028      	b.n	8006fe0 <_ZN10IridiumSBD10enable9603Eb+0x70>
  }

  // Enable/disable the 9603 by pulling ON_OFF high/low
  check9603pins(); // Update IO_REGISTER
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f001 febf 	bl	8008d12 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8006f94:	78fb      	ldrb	r3, [r7, #3]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00b      	beq.n	8006fb2 <_ZN10IridiumSBD10enable9603Eb+0x42>
  {
    IO_REGISTER |= IO_ON_OFF; // Set the ON_OFF bit
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	b2da      	uxtb	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8006fb0:	e00f      	b.n	8006fd2 <_ZN10IridiumSBD10enable9603Eb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_ON_OFF; // Clear the ON_OFF bit
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006fb8:	b25a      	sxtb	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8006fc0:	b25b      	sxtb	r3, r3
 8006fc2:	43db      	mvns	r3, r3
 8006fc4:	b25b      	sxtb	r3, r3
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	b25b      	sxtb	r3, r3
 8006fca:	b2da      	uxtb	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006fd8:	4619      	mov	r1, r3
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f001 fed2 	bl	8008d84 <_ZN10IridiumSBD11set9603pinsEh>
}
 8006fe0:	3708      	adds	r7, #8
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	0801b71c 	.word	0x0801b71c

08006fec <_ZN10IridiumSBD18clearRingIndicatorEv>:
    return(false);
  }
}

void IridiumSBD::clearRingIndicator()
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	7c5b      	ldrb	r3, [r3, #17]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d004      	beq.n	8007006 <_ZN10IridiumSBD18clearRingIndicatorEv+0x1a>
  {
    diagprint(F("clearRingIndicator is only valid when using I2C on the Qwiic Iridium\r\n"));
 8006ffc:	4912      	ldr	r1, [pc, #72]	; (8007048 <_ZN10IridiumSBD18clearRingIndicatorEv+0x5c>)
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f001 fb96 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8007004:	e01d      	b.n	8007042 <_ZN10IridiumSBD18clearRingIndicatorEv+0x56>
  }

  // Clear the 9603 RI flag
  check9603pins(); // Update IO_REGISTER
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f001 fe83 	bl	8008d12 <_ZN10IridiumSBD13check9603pinsEv>
  IO_REGISTER &= ~IO_RI; // Clear the RI bit
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8007012:	b25a      	sxtb	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800701a:	b25b      	sxtb	r3, r3
 800701c:	43db      	mvns	r3, r3
 800701e:	b25b      	sxtb	r3, r3
 8007020:	4013      	ands	r3, r2
 8007022:	b25b      	sxtb	r3, r3
 8007024:	b2da      	uxtb	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  set9603pins(IO_REGISTER); // Update the pins
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8007032:	4619      	mov	r1, r3
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f001 fea5 	bl	8008d84 <_ZN10IridiumSBD11set9603pinsEh>
  this->ringAsserted = false; // Also clear the ringAsserted flag
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
}
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	0801b7ec 	.word	0x0801b7ec

0800704c <_ZN10IridiumSBD21checkNetworkAvailableEv>:

bool IridiumSBD::checkNetworkAvailable()
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	7c5b      	ldrb	r3, [r3, #17]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d005      	beq.n	8007068 <_ZN10IridiumSBD21checkNetworkAvailableEv+0x1c>
  {
    diagprint(F("checkNetworkAvailable is only valid when using I2C on the Qwiic Iridium\r\n"));
 800705c:	4912      	ldr	r1, [pc, #72]	; (80070a8 <_ZN10IridiumSBD21checkNetworkAvailableEv+0x5c>)
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f001 fb66 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return(false);
 8007064:	2300      	movs	r3, #0
 8007066:	e01a      	b.n	800709e <_ZN10IridiumSBD21checkNetworkAvailableEv+0x52>
  }

  // Check the status of the 9603 Network Available pin
  check9603pins(); // Update IO_REGISTER
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f001 fe52 	bl	8008d12 <_ZN10IridiumSBD13check9603pinsEv>
  if (IO_REGISTER &= IO_NA) // If the NA bit is set, return true
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800707a:	4013      	ands	r3, r2
 800707c:	b2da      	uxtb	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800708a:	2b00      	cmp	r3, #0
 800708c:	bf14      	ite	ne
 800708e:	2301      	movne	r3, #1
 8007090:	2300      	moveq	r3, #0
 8007092:	b2db      	uxtb	r3, r3
 8007094:	2b00      	cmp	r3, #0
 8007096:	d001      	beq.n	800709c <_ZN10IridiumSBD21checkNetworkAvailableEv+0x50>
  {
    return(true);
 8007098:	2301      	movs	r3, #1
 800709a:	e000      	b.n	800709e <_ZN10IridiumSBD21checkNetworkAvailableEv+0x52>
  }
  else
  {
    return(false);
 800709c:	2300      	movs	r3, #0
  }
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	0801b834 	.word	0x0801b834

080070ac <_ZN10IridiumSBD12clearBuffersEi>:

// High-level wrapper for AT+SBDD
int IridiumSBD::clearBuffers(int buffers)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
   if (this->reentrant)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d001      	beq.n	80070c4 <_ZN10IridiumSBD12clearBuffersEi+0x18>
      return ISBD_REENTRANT;
 80070c0:	2309      	movs	r3, #9
 80070c2:	e00d      	b.n	80070e0 <_ZN10IridiumSBD12clearBuffersEi+0x34>

   this->reentrant = true;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalClearBuffers(buffers);
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f001 fee2 	bl	8008e98 <_ZN10IridiumSBD20internalClearBuffersEi>
 80070d4:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 80070de:	68fb      	ldr	r3, [r7, #12]
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <_ZN10IridiumSBD7getIMEIEPcj>:

// High-level wrapper for AT+CGSN
int IridiumSBD::getIMEI(char *IMEI, size_t bufferSize)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
   if (this->reentrant)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d001      	beq.n	8007102 <_ZN10IridiumSBD7getIMEIEPcj+0x1a>
      return ISBD_REENTRANT;
 80070fe:	2309      	movs	r3, #9
 8007100:	e00e      	b.n	8007120 <_ZN10IridiumSBD7getIMEIEPcj+0x38>

   this->reentrant = true;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalGetIMEI(IMEI, bufferSize);
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	68b9      	ldr	r1, [r7, #8]
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f001 ff0e 	bl	8008f30 <_ZN10IridiumSBD15internalGetIMEIEPcj>
 8007114:	6178      	str	r0, [r7, #20]
   this->reentrant = false;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 800711e:	697b      	ldr	r3, [r7, #20]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3718      	adds	r7, #24
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <_ZN10IridiumSBD11isConnectedEv>:

//Returns true if the I2C device is connected
//Always returns true for serial
//boolean IridiumSBD::isConnected() TODO
bool IridiumSBD::isConnected()
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
   if (this->useSerial) // If we are using Serial
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	7c5b      	ldrb	r3, [r3, #17]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d001      	beq.n	800713c <_ZN10IridiumSBD11isConnectedEv+0x14>
   {
		return true;
 8007138:	2301      	movs	r3, #1
 800713a:	e012      	b.n	8007162 <_ZN10IridiumSBD11isConnectedEv+0x3a>
   }
   else
   {
		wireport->beginTransmission((uint8_t)deviceaddress);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68da      	ldr	r2, [r3, #12]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	7c1b      	ldrb	r3, [r3, #16]
 8007144:	4619      	mov	r1, r3
 8007146:	4610      	mov	r0, r2
 8007148:	f002 fd70 	bl	8009c2c <_ZN7TwoWire17beginTransmissionEh>
		return (wireport->endTransmission() == 0); // Check that the device ack's
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	4618      	mov	r0, r3
 8007152:	f002 fdb5 	bl	8009cc0 <_ZN7TwoWire15endTransmissionEv>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	bf0c      	ite	eq
 800715c:	2301      	moveq	r3, #1
 800715e:	2300      	movne	r3, #0
 8007160:	b2db      	uxtb	r3, r3
   }
}
 8007162:	4618      	mov	r0, r3
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <_ZN10IridiumSBD13internalBeginEv>:
/*
Private interface
*/

int IridiumSBD::internalBegin()
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b090      	sub	sp, #64	; 0x40
 8007170:	af02      	add	r7, sp, #8
 8007172:	6078      	str	r0, [r7, #4]
   diagprint(F("Calling internalBegin\r\n"));
 8007174:	49b0      	ldr	r1, [pc, #704]	; (8007438 <_ZN10IridiumSBD13internalBeginEv+0x2cc>)
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f001 fada 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (!this->asleep)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8007182:	f083 0301 	eor.w	r3, r3, #1
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b00      	cmp	r3, #0
 800718a:	d001      	beq.n	8007190 <_ZN10IridiumSBD13internalBeginEv+0x24>
      return ISBD_ALREADY_AWAKE;
 800718c:	2301      	movs	r3, #1
 800718e:	e14f      	b.n	8007430 <_ZN10IridiumSBD13internalBeginEv+0x2c4>

   if (!this->useSerial) // If we are using I2C
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	7c5b      	ldrb	r3, [r3, #17]
 8007194:	f083 0301 	eor.w	r3, r3, #1
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b00      	cmp	r3, #0
 800719c:	d005      	beq.n	80071aa <_ZN10IridiumSBD13internalBeginEv+0x3e>
   {
      check9603pins(); // Update IO_REGISTER with the status of the 9603 pins
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f001 fdb7 	bl	8008d12 <_ZN10IridiumSBD13check9603pinsEv>
      check9603data(); // Get any waiting 9603 serial data
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f001 fce3 	bl	8008b70 <_ZN10IridiumSBD13check9603dataEv>
   }

   power(true); // power on
 80071aa:	2101      	movs	r1, #1
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f001 f885 	bl	80082bc <_ZN10IridiumSBD5powerEb>

   bool modemAlive = false;
 80071b2:	2300      	movs	r3, #0
 80071b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

   unsigned long startupTime = 500; //ms
 80071b8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80071bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   for (unsigned long start = millis(); millis() - start < startupTime;)
 80071be:	f003 f9f5 	bl	800a5ac <HAL_GetTick>
 80071c2:	62b8      	str	r0, [r7, #40]	; 0x28
 80071c4:	f003 f9f2 	bl	800a5ac <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071d0:	429a      	cmp	r2, r3
 80071d2:	bf8c      	ite	hi
 80071d4:	2301      	movhi	r3, #1
 80071d6:	2300      	movls	r3, #0
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d007      	beq.n	80071ee <_ZN10IridiumSBD13internalBeginEv+0x82>
      if (cancelled())
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fd84 	bl	8007cec <_ZN10IridiumSBD9cancelledEv>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d0ec      	beq.n	80071c4 <_ZN10IridiumSBD13internalBeginEv+0x58>
         return ISBD_CANCELLED;
 80071ea:	2304      	movs	r3, #4
 80071ec:	e120      	b.n	8007430 <_ZN10IridiumSBD13internalBeginEv+0x2c4>

   if (this->useSerial) // If we are using Serial
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	7c5b      	ldrb	r3, [r3, #17]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d002      	beq.n	80071fc <_ZN10IridiumSBD13internalBeginEv+0x90>
      beginSerialPort(); // Apollo3 v2.1 Serial fix - begin the Serial port 500ms after power(true)
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f001 f900 	bl	80083fc <_ZN10IridiumSBD15beginSerialPortEv>

   // Turn on modem and wait for a response from "AT" command to begin
   for (unsigned long start = millis(); !modemAlive && millis() - start < 1000UL * this->startupTimeout;)
 80071fc:	f003 f9d6 	bl	800a5ac <HAL_GetTick>
 8007200:	6278      	str	r0, [r7, #36]	; 0x24
 8007202:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007206:	f083 0301 	eor.w	r3, r3, #1
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00f      	beq.n	8007230 <_ZN10IridiumSBD13internalBeginEv+0xc4>
 8007210:	f003 f9cc 	bl	800a5ac <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	1ad2      	subs	r2, r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800721e:	4619      	mov	r1, r3
 8007220:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007224:	fb03 f301 	mul.w	r3, r3, r1
 8007228:	429a      	cmp	r2, r3
 800722a:	d201      	bcs.n	8007230 <_ZN10IridiumSBD13internalBeginEv+0xc4>
 800722c:	2301      	movs	r3, #1
 800722e:	e000      	b.n	8007232 <_ZN10IridiumSBD13internalBeginEv+0xc6>
 8007230:	2300      	movs	r3, #0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d018      	beq.n	8007268 <_ZN10IridiumSBD13internalBeginEv+0xfc>
   {
      send(F("AT\r"));
 8007236:	2301      	movs	r3, #1
 8007238:	2201      	movs	r2, #1
 800723a:	4980      	ldr	r1, [pc, #512]	; (800743c <_ZN10IridiumSBD13internalBeginEv+0x2d0>)
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f001 f8f9 	bl	8008434 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      modemAlive = waitForATResponse();
 8007242:	4b7f      	ldr	r3, [pc, #508]	; (8007440 <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	2300      	movs	r3, #0
 8007248:	2200      	movs	r2, #0
 800724a:	2100      	movs	r1, #0
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fc8f 	bl	8007b70 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8007252:	4603      	mov	r3, r0
 8007254:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (cancelled())
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 fd47 	bl	8007cec <_ZN10IridiumSBD9cancelledEv>
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d0ce      	beq.n	8007202 <_ZN10IridiumSBD13internalBeginEv+0x96>
         return ISBD_CANCELLED;
 8007264:	2304      	movs	r3, #4
 8007266:	e0e3      	b.n	8007430 <_ZN10IridiumSBD13internalBeginEv+0x2c4>
   }

   if (!modemAlive)
 8007268:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800726c:	f083 0301 	eor.w	r3, r3, #1
 8007270:	b2db      	uxtb	r3, r3
 8007272:	2b00      	cmp	r3, #0
 8007274:	d005      	beq.n	8007282 <_ZN10IridiumSBD13internalBeginEv+0x116>
   {
      diagprint(F("No modem detected.\r\n"));
 8007276:	4973      	ldr	r1, [pc, #460]	; (8007444 <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f001 fa59 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      return ISBD_NO_MODEM_DETECTED;
 800727e:	2305      	movs	r3, #5
 8007280:	e0d6      	b.n	8007430 <_ZN10IridiumSBD13internalBeginEv+0x2c4>
   }

   // The usual initialization sequence
   const char *strings[3] = { "ATE1\r", "AT&D0\r", "AT&K0\r" };
 8007282:	4a71      	ldr	r2, [pc, #452]	; (8007448 <_ZN10IridiumSBD13internalBeginEv+0x2dc>)
 8007284:	f107 0310 	add.w	r3, r7, #16
 8007288:	ca07      	ldmia	r2, {r0, r1, r2}
 800728a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   for (int i=0; i<3; ++i)
 800728e:	2300      	movs	r3, #0
 8007290:	633b      	str	r3, [r7, #48]	; 0x30
 8007292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007294:	2b02      	cmp	r3, #2
 8007296:	dc26      	bgt.n	80072e6 <_ZN10IridiumSBD13internalBeginEv+0x17a>
   {
      send(strings[i]);
 8007298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80072a0:	4413      	add	r3, r2
 80072a2:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80072a6:	4619      	mov	r1, r3
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f001 f91f 	bl	80084ec <_ZN10IridiumSBD4sendEPKc>
      if (!waitForATResponse())
 80072ae:	4b64      	ldr	r3, [pc, #400]	; (8007440 <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	2300      	movs	r3, #0
 80072b4:	2200      	movs	r2, #0
 80072b6:	2100      	movs	r1, #0
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fc59 	bl	8007b70 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80072be:	4603      	mov	r3, r0
 80072c0:	f083 0301 	eor.w	r3, r3, #1
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d009      	beq.n	80072de <_ZN10IridiumSBD13internalBeginEv+0x172>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fd0e 	bl	8007cec <_ZN10IridiumSBD9cancelledEv>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d001      	beq.n	80072da <_ZN10IridiumSBD13internalBeginEv+0x16e>
 80072d6:	2304      	movs	r3, #4
 80072d8:	e0aa      	b.n	8007430 <_ZN10IridiumSBD13internalBeginEv+0x2c4>
 80072da:	2303      	movs	r3, #3
 80072dc:	e0a8      	b.n	8007430 <_ZN10IridiumSBD13internalBeginEv+0x2c4>
   for (int i=0; i<3; ++i)
 80072de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e0:	3301      	adds	r3, #1
 80072e2:	633b      	str	r3, [r7, #48]	; 0x30
 80072e4:	e7d5      	b.n	8007292 <_ZN10IridiumSBD13internalBeginEv+0x126>
   }

   // Enable or disable RING alerts as requested by user
   // By default they are on if a RING pin was supplied on constructor
   diagprint(F("Ring alerts are")); diagprint(ringAlertsEnabled ? F("") : F(" NOT")); diagprint(F(" enabled.\r\n"));
 80072e6:	4959      	ldr	r1, [pc, #356]	; (800744c <_ZN10IridiumSBD13internalBeginEv+0x2e0>)
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f001 fa21 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d001      	beq.n	80072fc <_ZN10IridiumSBD13internalBeginEv+0x190>
 80072f8:	4b55      	ldr	r3, [pc, #340]	; (8007450 <_ZN10IridiumSBD13internalBeginEv+0x2e4>)
 80072fa:	e000      	b.n	80072fe <_ZN10IridiumSBD13internalBeginEv+0x192>
 80072fc:	4b55      	ldr	r3, [pc, #340]	; (8007454 <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 80072fe:	4619      	mov	r1, r3
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f001 fa15 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8007306:	4954      	ldr	r1, [pc, #336]	; (8007458 <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f001 fa11 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (ringAlertsEnabled) enableRingAlerts(true); // This will clear ringAsserted and the Ring Indicator flag
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007314:	2b00      	cmp	r3, #0
 8007316:	d004      	beq.n	8007322 <_ZN10IridiumSBD13internalBeginEv+0x1b6>
 8007318:	2101      	movs	r1, #1
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7ff fc99 	bl	8006c52 <_ZN10IridiumSBD16enableRingAlertsEb>
 8007320:	e009      	b.n	8007336 <_ZN10IridiumSBD13internalBeginEv+0x1ca>
   else {
	   if (!this->useSerial) clearRingIndicator(); // If ring alerts are not enabled and using I2C, make sure the Ring Indicator flag is clear
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	7c5b      	ldrb	r3, [r3, #17]
 8007326:	f083 0301 	eor.w	r3, r3, #1
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <_ZN10IridiumSBD13internalBeginEv+0x1ca>
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f7ff fe5b 	bl	8006fec <_ZN10IridiumSBD18clearRingIndicatorEv>
   }

   send(ringAlertsEnabled ? F("AT+SBDMTA=1\r") : F("AT+SBDMTA=0\r"));
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800733c:	2b00      	cmp	r3, #0
 800733e:	d001      	beq.n	8007344 <_ZN10IridiumSBD13internalBeginEv+0x1d8>
 8007340:	4946      	ldr	r1, [pc, #280]	; (800745c <_ZN10IridiumSBD13internalBeginEv+0x2f0>)
 8007342:	e000      	b.n	8007346 <_ZN10IridiumSBD13internalBeginEv+0x1da>
 8007344:	4946      	ldr	r1, [pc, #280]	; (8007460 <_ZN10IridiumSBD13internalBeginEv+0x2f4>)
 8007346:	2301      	movs	r3, #1
 8007348:	2201      	movs	r2, #1
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f001 f872 	bl	8008434 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   HAL_Delay(10); //TODO Added
 8007350:	200a      	movs	r0, #10
 8007352:	f003 f937 	bl	800a5c4 <HAL_Delay>
   if (!waitForATResponse())
 8007356:	4b3a      	ldr	r3, [pc, #232]	; (8007440 <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	2300      	movs	r3, #0
 800735c:	2200      	movs	r2, #0
 800735e:	2100      	movs	r1, #0
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fc05 	bl	8007b70 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8007366:	4603      	mov	r3, r0
 8007368:	f083 0301 	eor.w	r3, r3, #1
 800736c:	b2db      	uxtb	r3, r3
 800736e:	2b00      	cmp	r3, #0
 8007370:	d009      	beq.n	8007386 <_ZN10IridiumSBD13internalBeginEv+0x21a>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fcba 	bl	8007cec <_ZN10IridiumSBD9cancelledEv>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d001      	beq.n	8007382 <_ZN10IridiumSBD13internalBeginEv+0x216>
 800737e:	2304      	movs	r3, #4
 8007380:	e056      	b.n	8007430 <_ZN10IridiumSBD13internalBeginEv+0x2c4>
 8007382:	2303      	movs	r3, #3
 8007384:	e054      	b.n	8007430 <_ZN10IridiumSBD13internalBeginEv+0x2c4>

   // Decide whether the internal MSSTM workaround should be enforced on TX/RX
   // By default it is unless the firmware rev is >= TA13001
   char version[8];
   int ret = getFirmwareVersion(version, sizeof(version));
 8007386:	f107 0308 	add.w	r3, r7, #8
 800738a:	2208      	movs	r2, #8
 800738c:	4619      	mov	r1, r3
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f7ff fd0e 	bl	8006db0 <_ZN10IridiumSBD18getFirmwareVersionEPcj>
 8007394:	6238      	str	r0, [r7, #32]
   if (ret != ISBD_SUCCESS)
 8007396:	6a3b      	ldr	r3, [r7, #32]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d008      	beq.n	80073ae <_ZN10IridiumSBD13internalBeginEv+0x242>
   {
      diagprint(F("Unknown FW version\r\n"));
 800739c:	4931      	ldr	r1, [pc, #196]	; (8007464 <_ZN10IridiumSBD13internalBeginEv+0x2f8>)
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f001 f9c6 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      msstmWorkaroundRequested = true;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 80073ac:	e027      	b.n	80073fe <_ZN10IridiumSBD13internalBeginEv+0x292>
   }
   else
   {
      diagprint(F("Firmware version is ")); diagprint(version); diagprint(F("\r\n"));
 80073ae:	492e      	ldr	r1, [pc, #184]	; (8007468 <_ZN10IridiumSBD13internalBeginEv+0x2fc>)
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f001 f9bd 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 80073b6:	f107 0308 	add.w	r3, r7, #8
 80073ba:	4619      	mov	r1, r3
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f001 f9d5 	bl	800876c <_ZN10IridiumSBD9diagprintEPKc>
 80073c2:	492a      	ldr	r1, [pc, #168]	; (800746c <_ZN10IridiumSBD13internalBeginEv+0x300>)
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f001 f9b3 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (version[0] == 'T' && version[1] == 'A')
 80073ca:	7a3b      	ldrb	r3, [r7, #8]
 80073cc:	2b54      	cmp	r3, #84	; 0x54
 80073ce:	d116      	bne.n	80073fe <_ZN10IridiumSBD13internalBeginEv+0x292>
 80073d0:	7a7b      	ldrb	r3, [r7, #9]
 80073d2:	2b41      	cmp	r3, #65	; 0x41
 80073d4:	d113      	bne.n	80073fe <_ZN10IridiumSBD13internalBeginEv+0x292>
      {
         unsigned long ver = strtoul(version + 2, NULL, 10);
 80073d6:	f107 0308 	add.w	r3, r7, #8
 80073da:	3302      	adds	r3, #2
 80073dc:	220a      	movs	r2, #10
 80073de:	2100      	movs	r1, #0
 80073e0:	4618      	mov	r0, r3
 80073e2:	f00f fdfb 	bl	8016fdc <strtoul>
 80073e6:	61f8      	str	r0, [r7, #28]
         msstmWorkaroundRequested = ver < ISBD_MSSTM_WORKAROUND_FW_VER;
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80073ee:	4293      	cmp	r3, r2
 80073f0:	bf94      	ite	ls
 80073f2:	2301      	movls	r3, #1
 80073f4:	2300      	movhi	r3, #0
 80073f6:	b2da      	uxtb	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
      }
   }
   diagprint(F("MSSTM workaround is")); diagprint(msstmWorkaroundRequested ? F("") : F(" NOT")); diagprint(F(" enforced.\r\n"));
 80073fe:	491c      	ldr	r1, [pc, #112]	; (8007470 <_ZN10IridiumSBD13internalBeginEv+0x304>)
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f001 f995 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <_ZN10IridiumSBD13internalBeginEv+0x2a8>
 8007410:	4b0f      	ldr	r3, [pc, #60]	; (8007450 <_ZN10IridiumSBD13internalBeginEv+0x2e4>)
 8007412:	e000      	b.n	8007416 <_ZN10IridiumSBD13internalBeginEv+0x2aa>
 8007414:	4b0f      	ldr	r3, [pc, #60]	; (8007454 <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 8007416:	4619      	mov	r1, r3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f001 f989 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 800741e:	4915      	ldr	r1, [pc, #84]	; (8007474 <_ZN10IridiumSBD13internalBeginEv+0x308>)
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f001 f985 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   // Done!
   diagprint(F("InternalBegin: success!\r\n"));
 8007426:	4914      	ldr	r1, [pc, #80]	; (8007478 <_ZN10IridiumSBD13internalBeginEv+0x30c>)
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f001 f981 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   return ISBD_SUCCESS;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3738      	adds	r7, #56	; 0x38
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	0801b90c 	.word	0x0801b90c
 800743c:	0801b924 	.word	0x0801b924
 8007440:	0801b60c 	.word	0x0801b60c
 8007444:	0801b928 	.word	0x0801b928
 8007448:	0801b9fc 	.word	0x0801b9fc
 800744c:	0801b940 	.word	0x0801b940
 8007450:	0801b950 	.word	0x0801b950
 8007454:	0801b954 	.word	0x0801b954
 8007458:	0801b95c 	.word	0x0801b95c
 800745c:	0801b968 	.word	0x0801b968
 8007460:	0801b978 	.word	0x0801b978
 8007464:	0801b988 	.word	0x0801b988
 8007468:	0801b9a0 	.word	0x0801b9a0
 800746c:	0801b9b8 	.word	0x0801b9b8
 8007470:	0801b9bc 	.word	0x0801b9bc
 8007474:	0801b9d0 	.word	0x0801b9d0
 8007478:	0801b9e0 	.word	0x0801b9e0

0800747c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj>:

int IridiumSBD::internalSendReceiveSBD(const char *txTxtMessage, const uint8_t *txData, size_t txDataSize, uint8_t *rxBuffer, size_t *prxBufferSize)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b096      	sub	sp, #88	; 0x58
 8007480:	af04      	add	r7, sp, #16
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
 8007488:	603b      	str	r3, [r7, #0]
   diagprint(F("internalSendReceive\r\n"));
 800748a:	49a5      	ldr	r1, [pc, #660]	; (8007720 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2a4>)
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f001 f94f 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (this->asleep)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8007498:	2b00      	cmp	r3, #0
 800749a:	d001      	beq.n	80074a0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x24>
      return ISBD_IS_ASLEEP;
 800749c:	230a      	movs	r3, #10
 800749e:	e289      	b.n	80079b4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

   // Binary transmission?
   if (txData && txDataSize)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 8152 	beq.w	800774c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2d0>
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f000 814e 	beq.w	800774c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2d0>
   {
      if (txDataSize > ISBD_MAX_MESSAGE_LENGTH)
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80074b6:	d901      	bls.n	80074bc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x40>
         return ISBD_MSG_TOO_LONG;
 80074b8:	230d      	movs	r3, #13
 80074ba:	e27b      	b.n	80079b4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

      // send will use serial or wire as appropriate
      send(F("AT+SBDWB="), true, false);
 80074bc:	2300      	movs	r3, #0
 80074be:	2201      	movs	r2, #1
 80074c0:	4998      	ldr	r1, [pc, #608]	; (8007724 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2a8>)
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f000 ffb6 	bl	8008434 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      send(txDataSize);
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	4619      	mov	r1, r3
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f001 f8e8 	bl	80086a4 <_ZN10IridiumSBD4sendEt>
      send(F("\r"), false);
 80074d4:	2301      	movs	r3, #1
 80074d6:	2200      	movs	r2, #0
 80074d8:	4993      	ldr	r1, [pc, #588]	; (8007728 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2ac>)
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f000 ffaa 	bl	8008434 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      if (!waitForATResponse(NULL, 0, NULL, "READY\r\n"))
 80074e0:	4b92      	ldr	r3, [pc, #584]	; (800772c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2b0>)
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	2300      	movs	r3, #0
 80074e6:	2200      	movs	r2, #0
 80074e8:	2100      	movs	r1, #0
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f000 fb40 	bl	8007b70 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80074f0:	4603      	mov	r3, r0
 80074f2:	f083 0301 	eor.w	r3, r3, #1
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d009      	beq.n	8007510 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x94>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f000 fbf5 	bl	8007cec <_ZN10IridiumSBD9cancelledEv>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d001      	beq.n	800750c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x90>
 8007508:	2304      	movs	r3, #4
 800750a:	e253      	b.n	80079b4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 800750c:	2303      	movs	r3, #3
 800750e:	e251      	b.n	80079b4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

      uint16_t checksum = 0;
 8007510:	2300      	movs	r3, #0
 8007512:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

      if (this->useSerial)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	7c5b      	ldrb	r3, [r3, #17]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d03a      	beq.n	8007594 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x118>
      {
         for (size_t i=0; i<txDataSize; ++i)
 800751e:	2300      	movs	r3, #0
 8007520:	643b      	str	r3, [r7, #64]	; 0x40
 8007522:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	429a      	cmp	r2, r3
 8007528:	d21a      	bcs.n	8007560 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0xe4>
         {
            stream->write(txData[i]);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	4618      	mov	r0, r3
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	6879      	ldr	r1, [r7, #4]
 800753a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800753c:	440a      	add	r2, r1
 800753e:	7812      	ldrb	r2, [r2, #0]
 8007540:	4611      	mov	r1, r2
 8007542:	4798      	blx	r3
            checksum += (uint16_t)txData[i];
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007548:	4413      	add	r3, r2
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	b29a      	uxth	r2, r3
 800754e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007552:	4413      	add	r3, r2
 8007554:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
         for (size_t i=0; i<txDataSize; ++i)
 8007558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800755a:	3301      	adds	r3, #1
 800755c:	643b      	str	r3, [r7, #64]	; 0x40
 800755e:	e7e0      	b.n	8007522 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0xa6>
         }
         stream->write((uint8_t)(checksum >> 8));
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	4618      	mov	r0, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8007572:	1212      	asrs	r2, r2, #8
 8007574:	b2d2      	uxtb	r2, r2
 8007576:	4611      	mov	r1, r2
 8007578:	4798      	blx	r3
         stream->write((uint8_t)(checksum & 0xFF));
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	4618      	mov	r0, r3
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800758c:	b2d2      	uxtb	r2, r2
 800758e:	4611      	mov	r1, r2
 8007590:	4798      	blx	r3
 8007592:	e092      	b.n	80076ba <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x23e>
      }
      else
      {
         //lastCheck = millis(); // Update lastCheck so we enforce a full I2C_POLLING_WAIT
         // We need to make sure we don't send too much I2C data in one go (otherwise we will overflow the ATtiny841's I2C buffer)
         size_t bytes_to_send = txDataSize; // Send this many bytes in total
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	63fb      	str	r3, [r7, #60]	; 0x3c
         size_t i=0;
 8007598:	2300      	movs	r3, #0
 800759a:	63bb      	str	r3, [r7, #56]	; 0x38
         size_t nexti;
         while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 3)) // If there are too many bytes to send all in one go
 800759c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800759e:	2b1d      	cmp	r3, #29
 80075a0:	d937      	bls.n	8007612 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x196>
         {
            nexti = i + (TINY_I2C_BUFFER_LENGTH - 3);
 80075a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a4:	331d      	adds	r3, #29
 80075a6:	637b      	str	r3, [r7, #52]	; 0x34
            wireport->beginTransmission((uint8_t)deviceaddress);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	68da      	ldr	r2, [r3, #12]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	7c1b      	ldrb	r3, [r3, #16]
 80075b0:	4619      	mov	r1, r3
 80075b2:	4610      	mov	r0, r2
 80075b4:	f002 fb3a 	bl	8009c2c <_ZN7TwoWire17beginTransmissionEh>
            wireport->write(DATA_REG); // Point to the serial data 'register'
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	21ff      	movs	r1, #255	; 0xff
 80075be:	4618      	mov	r0, r3
 80075c0:	f7ff fa66 	bl	8006a90 <_ZN7TwoWire5writeEi>
            for (; i<nexti; ++i)
 80075c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d219      	bcs.n	8007600 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x184>
            {
               wireport->write(txData[i]); // Write each byte
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	68d8      	ldr	r0, [r3, #12]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6879      	ldr	r1, [r7, #4]
 80075da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075dc:	440a      	add	r2, r1
 80075de:	7812      	ldrb	r2, [r2, #0]
 80075e0:	4611      	mov	r1, r2
 80075e2:	4798      	blx	r3
               checksum += (uint16_t)txData[i];
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e8:	4413      	add	r3, r2
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80075f2:	4413      	add	r3, r2
 80075f4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            for (; i<nexti; ++i)
 80075f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fa:	3301      	adds	r3, #1
 80075fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80075fe:	e7e1      	b.n	80075c4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x148>
            }
            bytes_to_send = bytes_to_send - (TINY_I2C_BUFFER_LENGTH - 3); // Decrease the number of bytes still to send
 8007600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007602:	3b1d      	subs	r3, #29
 8007604:	63fb      	str	r3, [r7, #60]	; 0x3c
            wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	4618      	mov	r0, r3
 800760c:	f002 fb58 	bl	8009cc0 <_ZN7TwoWire15endTransmissionEv>
         while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 3)) // If there are too many bytes to send all in one go
 8007610:	e7c4      	b.n	800759c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x120>
         }
         // There are now <= (TINY_I2C_BUFFER_LENGTH - 3) bytes left to send, so send them and then release the bus
         wireport->beginTransmission((uint8_t)deviceaddress);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	68da      	ldr	r2, [r3, #12]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	7c1b      	ldrb	r3, [r3, #16]
 800761a:	4619      	mov	r1, r3
 800761c:	4610      	mov	r0, r2
 800761e:	f002 fb05 	bl	8009c2c <_ZN7TwoWire17beginTransmissionEh>
         wireport->write(DATA_REG); // Point to the 'serial register'
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	21ff      	movs	r1, #255	; 0xff
 8007628:	4618      	mov	r0, r3
 800762a:	f7ff fa31 	bl	8006a90 <_ZN7TwoWire5writeEi>
         for (; i<txDataSize; ++i)
 800762e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	429a      	cmp	r2, r3
 8007634:	d219      	bcs.n	800766a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x1ee>
         {
            wireport->write(txData[i]);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	68d8      	ldr	r0, [r3, #12]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	6879      	ldr	r1, [r7, #4]
 8007644:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007646:	440a      	add	r2, r1
 8007648:	7812      	ldrb	r2, [r2, #0]
 800764a:	4611      	mov	r1, r2
 800764c:	4798      	blx	r3
            checksum += (uint16_t)txData[i];
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007652:	4413      	add	r3, r2
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	b29a      	uxth	r2, r3
 8007658:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800765c:	4413      	add	r3, r2
 800765e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
         for (; i<txDataSize; ++i)
 8007662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007664:	3301      	adds	r3, #1
 8007666:	63bb      	str	r3, [r7, #56]	; 0x38
 8007668:	e7e1      	b.n	800762e <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x1b2>
         }
         wireport->write((uint8_t)(checksum >> 8));
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	68d8      	ldr	r0, [r3, #12]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800767a:	1212      	asrs	r2, r2, #8
 800767c:	b2d2      	uxtb	r2, r2
 800767e:	4611      	mov	r1, r2
 8007680:	4798      	blx	r3
         wireport->write((uint8_t)(checksum & 0xFF));
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	68da      	ldr	r2, [r3, #12]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8007692:	b2c9      	uxtb	r1, r1
 8007694:	4610      	mov	r0, r2
 8007696:	4798      	blx	r3
         if (wireport->endTransmission() != 0) //Send data and release bus
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	4618      	mov	r0, r3
 800769e:	f002 fb0f 	bl	8009cc0 <_ZN7TwoWire15endTransmissionEv>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	bf14      	ite	ne
 80076a8:	2301      	movne	r3, #1
 80076aa:	2300      	moveq	r3, #0
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d003      	beq.n	80076ba <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x23e>
            diagprint(F("I2C write was not successful!\r\n"));
 80076b2:	491f      	ldr	r1, [pc, #124]	; (8007730 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2b4>)
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f001 f83b 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      }

      consoleprint(F("["));
 80076ba:	491e      	ldr	r1, [pc, #120]	; (8007734 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2b8>)
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f001 f88f 	bl	80087e0 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
      consoleprint((uint16_t)txDataSize);
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	4619      	mov	r1, r3
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f001 f8c1 	bl	8008850 <_ZN10IridiumSBD12consoleprintEt>
      consoleprint(F(" bytes]"));
 80076ce:	491a      	ldr	r1, [pc, #104]	; (8007738 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2bc>)
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f001 f885 	bl	80087e0 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

      diagprint(F("Checksum:"));
 80076d6:	4919      	ldr	r1, [pc, #100]	; (800773c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2c0>)
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f001 f829 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      diagprint(checksum);
 80076de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80076e2:	4619      	mov	r1, r3
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f001 f85b 	bl	80087a0 <_ZN10IridiumSBD9diagprintEt>
      diagprint(F("\r\n"));
 80076ea:	4915      	ldr	r1, [pc, #84]	; (8007740 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2c4>)
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f001 f81f 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

      if (!waitForATResponse(NULL, 0, NULL, "0\r\n\r\nOK\r\n"))
 80076f2:	4b14      	ldr	r3, [pc, #80]	; (8007744 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2c8>)
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	2300      	movs	r3, #0
 80076f8:	2200      	movs	r2, #0
 80076fa:	2100      	movs	r1, #0
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 fa37 	bl	8007b70 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8007702:	4603      	mov	r3, r0
 8007704:	f083 0301 	eor.w	r3, r3, #1
 8007708:	b2db      	uxtb	r3, r3
 800770a:	2b00      	cmp	r3, #0
 800770c:	f000 8091 	beq.w	8007832 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b6>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f000 faeb 	bl	8007cec <_ZN10IridiumSBD9cancelledEv>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d015      	beq.n	8007748 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2cc>
 800771c:	2304      	movs	r3, #4
 800771e:	e149      	b.n	80079b4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 8007720:	0801ba08 	.word	0x0801ba08
 8007724:	0801ba20 	.word	0x0801ba20
 8007728:	0801ba2c 	.word	0x0801ba2c
 800772c:	0801ba30 	.word	0x0801ba30
 8007730:	0801ba38 	.word	0x0801ba38
 8007734:	0801ba58 	.word	0x0801ba58
 8007738:	0801ba5c 	.word	0x0801ba5c
 800773c:	0801ba64 	.word	0x0801ba64
 8007740:	0801b9b8 	.word	0x0801b9b8
 8007744:	0801ba70 	.word	0x0801ba70
 8007748:	2303      	movs	r3, #3
 800774a:	e133      	b.n	80079b4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
   }

   else // Text transmission
   {
#if true // use long string implementation
      if (txTxtMessage == NULL) // It's ok to have a NULL txtTxtMessage if the transaction is RX only
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d11d      	bne.n	800778e <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x312>
      {
         send(F("AT+SBDWT=\r"));
 8007752:	2301      	movs	r3, #1
 8007754:	2201      	movs	r2, #1
 8007756:	4999      	ldr	r1, [pc, #612]	; (80079bc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x540>)
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f000 fe6b 	bl	8008434 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
         if (!waitForATResponse())
 800775e:	4b98      	ldr	r3, [pc, #608]	; (80079c0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x544>)
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	2300      	movs	r3, #0
 8007764:	2200      	movs	r2, #0
 8007766:	2100      	movs	r1, #0
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f000 fa01 	bl	8007b70 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 800776e:	4603      	mov	r3, r0
 8007770:	f083 0301 	eor.w	r3, r3, #1
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d05c      	beq.n	8007834 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b8>
            return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f000 fab6 	bl	8007cec <_ZN10IridiumSBD9cancelledEv>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d001      	beq.n	800778a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x30e>
 8007786:	2304      	movs	r3, #4
 8007788:	e114      	b.n	80079b4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 800778a:	2303      	movs	r3, #3
 800778c:	e112      	b.n	80079b4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
      }
      else
      {
         // remove any embedded \r
         char *p = strchr(txTxtMessage, '\r');
 800778e:	210d      	movs	r1, #13
 8007790:	68b8      	ldr	r0, [r7, #8]
 8007792:	f00e fc66 	bl	8016062 <strchr>
 8007796:	6338      	str	r0, [r7, #48]	; 0x30
         if (p) *p = 0;
 8007798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779a:	2b00      	cmp	r3, #0
 800779c:	d002      	beq.n	80077a4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x328>
 800779e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a0:	2200      	movs	r2, #0
 80077a2:	701a      	strb	r2, [r3, #0]
         if (strlen(txTxtMessage) > ISBD_MAX_MESSAGE_LENGTH)
 80077a4:	68b8      	ldr	r0, [r7, #8]
 80077a6:	f7f8 fd2d 	bl	8000204 <strlen>
 80077aa:	4603      	mov	r3, r0
 80077ac:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80077b0:	d901      	bls.n	80077b6 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x33a>
            return ISBD_MSG_TOO_LONG;
 80077b2:	230d      	movs	r3, #13
 80077b4:	e0fe      	b.n	80079b4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         send(F("AT+SBDWT\r"));
 80077b6:	2301      	movs	r3, #1
 80077b8:	2201      	movs	r2, #1
 80077ba:	4982      	ldr	r1, [pc, #520]	; (80079c4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x548>)
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f000 fe39 	bl	8008434 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
         if (!waitForATResponse(NULL, 0, NULL, "READY\r\n"))
 80077c2:	4b81      	ldr	r3, [pc, #516]	; (80079c8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x54c>)
 80077c4:	9300      	str	r3, [sp, #0]
 80077c6:	2300      	movs	r3, #0
 80077c8:	2200      	movs	r2, #0
 80077ca:	2100      	movs	r1, #0
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f000 f9cf 	bl	8007b70 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80077d2:	4603      	mov	r3, r0
 80077d4:	f083 0301 	eor.w	r3, r3, #1
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d009      	beq.n	80077f2 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x376>
            return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	f000 fa84 	bl	8007cec <_ZN10IridiumSBD9cancelledEv>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d001      	beq.n	80077ee <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x372>
 80077ea:	2304      	movs	r3, #4
 80077ec:	e0e2      	b.n	80079b4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 80077ee:	2303      	movs	r3, #3
 80077f0:	e0e0      	b.n	80079b4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         sendlong(txTxtMessage);
 80077f2:	68b9      	ldr	r1, [r7, #8]
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f000 fec5 	bl	8008584 <_ZN10IridiumSBD8sendlongEPKc>
         send("\r");
 80077fa:	4974      	ldr	r1, [pc, #464]	; (80079cc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x550>)
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f000 fe75 	bl	80084ec <_ZN10IridiumSBD4sendEPKc>
         if (!waitForATResponse(NULL, 0, NULL, "0\r\n\r\nOK\r\n"))
 8007802:	4b73      	ldr	r3, [pc, #460]	; (80079d0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x554>)
 8007804:	9300      	str	r3, [sp, #0]
 8007806:	2300      	movs	r3, #0
 8007808:	2200      	movs	r2, #0
 800780a:	2100      	movs	r1, #0
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f000 f9af 	bl	8007b70 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8007812:	4603      	mov	r3, r0
 8007814:	f083 0301 	eor.w	r3, r3, #1
 8007818:	b2db      	uxtb	r3, r3
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00a      	beq.n	8007834 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b8>
            return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f000 fa64 	bl	8007cec <_ZN10IridiumSBD9cancelledEv>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d001      	beq.n	800782e <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b2>
 800782a:	2304      	movs	r3, #4
 800782c:	e0c2      	b.n	80079b4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 800782e:	2303      	movs	r3, #3
 8007830:	e0c0      	b.n	80079b4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8007832:	bf00      	nop
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
#endif
   }

   // Long SBDIX loop begins here
   for (unsigned long start = millis(); millis() - start < 1000UL * this->sendReceiveTimeout;)
 8007834:	f002 feba 	bl	800a5ac <HAL_GetTick>
 8007838:	62f8      	str	r0, [r7, #44]	; 0x2c
 800783a:	f002 feb7 	bl	800a5ac <HAL_GetTick>
 800783e:	4602      	mov	r2, r0
 8007840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007842:	1ad2      	subs	r2, r2, r3
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007848:	4619      	mov	r1, r3
 800784a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800784e:	fb03 f301 	mul.w	r3, r3, r1
 8007852:	429a      	cmp	r2, r3
 8007854:	bf34      	ite	cc
 8007856:	2301      	movcc	r3, #1
 8007858:	2300      	movcs	r3, #0
 800785a:	b2db      	uxtb	r3, r3
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 80a4 	beq.w	80079aa <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x52e>
   {
      bool okToProceed = true;
 8007862:	2301      	movs	r3, #1
 8007864:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      if (this->msstmWorkaroundRequested)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00e      	beq.n	8007890 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x414>
      {
         okToProceed = false;
 8007872:	2300      	movs	r3, #0
 8007874:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
         int ret = internalMSSTMWorkaround(okToProceed);
 8007878:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800787c:	4619      	mov	r1, r3
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f000 f902 	bl	8007a88 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb>
 8007884:	62b8      	str	r0, [r7, #40]	; 0x28
         if (ret != ISBD_SUCCESS)
 8007886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007888:	2b00      	cmp	r3, #0
 800788a:	d001      	beq.n	8007890 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x414>
            return ret;
 800788c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788e:	e091      	b.n	80079b4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
      }

      if (okToProceed)
 8007890:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007894:	2b00      	cmp	r3, #0
 8007896:	d077      	beq.n	8007988 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50c>
      {
         uint16_t moCode = 0, moMSN = 0, mtCode = 0, mtMSN = 0, mtLen = 0, mtRemaining = 0;
 8007898:	2300      	movs	r3, #0
 800789a:	843b      	strh	r3, [r7, #32]
 800789c:	2300      	movs	r3, #0
 800789e:	83fb      	strh	r3, [r7, #30]
 80078a0:	2300      	movs	r3, #0
 80078a2:	83bb      	strh	r3, [r7, #28]
 80078a4:	2300      	movs	r3, #0
 80078a6:	837b      	strh	r3, [r7, #26]
 80078a8:	2300      	movs	r3, #0
 80078aa:	833b      	strh	r3, [r7, #24]
 80078ac:	2300      	movs	r3, #0
 80078ae:	82fb      	strh	r3, [r7, #22]
         int ret = doSBDIX(moCode, moMSN, mtCode, mtMSN, mtLen, mtRemaining);
 80078b0:	f107 001c 	add.w	r0, r7, #28
 80078b4:	f107 021e 	add.w	r2, r7, #30
 80078b8:	f107 0120 	add.w	r1, r7, #32
 80078bc:	f107 0316 	add.w	r3, r7, #22
 80078c0:	9302      	str	r3, [sp, #8]
 80078c2:	f107 0318 	add.w	r3, r7, #24
 80078c6:	9301      	str	r3, [sp, #4]
 80078c8:	f107 031a 	add.w	r3, r7, #26
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	4603      	mov	r3, r0
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f000 fa3b 	bl	8007d4c <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_>
 80078d6:	6278      	str	r0, [r7, #36]	; 0x24
         if (ret != ISBD_SUCCESS)
 80078d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d001      	beq.n	80078e2 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x466>
            return ret;
 80078de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e0:	e068      	b.n	80079b4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

         diagprint(F("SBDIX MO code: "));
 80078e2:	493c      	ldr	r1, [pc, #240]	; (80079d4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x558>)
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f000 ff23 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
         diagprint(moCode);
 80078ea:	8c3b      	ldrh	r3, [r7, #32]
 80078ec:	4619      	mov	r1, r3
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f000 ff56 	bl	80087a0 <_ZN10IridiumSBD9diagprintEt>
         diagprint(F("\r\n"));
 80078f4:	4938      	ldr	r1, [pc, #224]	; (80079d8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x55c>)
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f000 ff1a 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

         if (moCode <= 4) // this range indicates successful return!
 80078fc:	8c3b      	ldrh	r3, [r7, #32]
 80078fe:	2b04      	cmp	r3, #4
 8007900:	d820      	bhi.n	8007944 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4c8>
         {
            diagprint(F("SBDIX success!\r\n"));
 8007902:	4936      	ldr	r1, [pc, #216]	; (80079dc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x560>)
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	f000 ff13 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

            this->remainingMessages = mtRemaining;
 800790a:	8afb      	ldrh	r3, [r7, #22]
 800790c:	461a      	mov	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	675a      	str	r2, [r3, #116]	; 0x74
            if (mtCode == 1 && rxBuffer) // retrieved 1 message
 8007912:	8bbb      	ldrh	r3, [r7, #28]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d10d      	bne.n	8007934 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4b8>
 8007918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00a      	beq.n	8007934 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4b8>
            {
               diagprint(F("Incoming message!\r\n"));
 800791e:	4930      	ldr	r1, [pc, #192]	; (80079e0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x564>)
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f000 ff05 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
               return doSBDRB(rxBuffer, prxBufferSize);
 8007926:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007928:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f000 fa74 	bl	8007e18 <_ZN10IridiumSBD7doSBDRBEPhPj>
 8007930:	4603      	mov	r3, r0
 8007932:	e028      	b.n	8007986 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50a>
            }

            else
            {
               // No data returned
               if (prxBufferSize)
 8007934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007936:	2b00      	cmp	r3, #0
 8007938:	d002      	beq.n	8007940 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4c4>
                  *prxBufferSize = 0;
 800793a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800793c:	2200      	movs	r2, #0
 800793e:	601a      	str	r2, [r3, #0]
            }
            return ISBD_SUCCESS;
 8007940:	2300      	movs	r3, #0
 8007942:	e020      	b.n	8007986 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50a>
         }

         else if (moCode == 12 || moCode == 14 || moCode == 16) // fatal failure: no retry
 8007944:	8c3b      	ldrh	r3, [r7, #32]
 8007946:	2b0c      	cmp	r3, #12
 8007948:	d005      	beq.n	8007956 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4da>
 800794a:	8c3b      	ldrh	r3, [r7, #32]
 800794c:	2b0e      	cmp	r3, #14
 800794e:	d002      	beq.n	8007956 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4da>
 8007950:	8c3b      	ldrh	r3, [r7, #32]
 8007952:	2b10      	cmp	r3, #16
 8007954:	d105      	bne.n	8007962 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4e6>
         {
            diagprint(F("SBDIX fatal!\r\n"));
 8007956:	4923      	ldr	r1, [pc, #140]	; (80079e4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x568>)
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f000 fee9 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
            return ISBD_SBDIX_FATAL_ERROR;
 800795e:	2306      	movs	r3, #6
 8007960:	e011      	b.n	8007986 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50a>
         }

         else // retry
         {
            diagprint(F("Waiting for SBDIX retry...\r\n"));
 8007962:	4921      	ldr	r1, [pc, #132]	; (80079e8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x56c>)
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f000 fee3 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
            if (!noBlockWait(sbdixInterval))
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800796e:	4619      	mov	r1, r3
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f000 f8d7 	bl	8007b24 <_ZN10IridiumSBD11noBlockWaitEi>
 8007976:	4603      	mov	r3, r0
 8007978:	f083 0301 	eor.w	r3, r3, #1
 800797c:	b2db      	uxtb	r3, r3
 800797e:	2b00      	cmp	r3, #0
 8007980:	f43f af5b 	beq.w	800783a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3be>
               return ISBD_CANCELLED;
 8007984:	2304      	movs	r3, #4
            return ret;
 8007986:	e015      	b.n	80079b4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         }
      }

      else // MSSTM check fail
      {
         diagprint(F("Waiting for MSSTM retry...\r\n"));
 8007988:	4918      	ldr	r1, [pc, #96]	; (80079ec <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x570>)
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	f000 fed0 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
         if (!noBlockWait(ISBD_MSSTM_RETRY_INTERVAL))
 8007990:	210a      	movs	r1, #10
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f000 f8c6 	bl	8007b24 <_ZN10IridiumSBD11noBlockWaitEi>
 8007998:	4603      	mov	r3, r0
 800799a:	f083 0301 	eor.w	r3, r3, #1
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f43f af4a 	beq.w	800783a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3be>
            return ISBD_CANCELLED;
 80079a6:	2304      	movs	r3, #4
 80079a8:	e004      	b.n	80079b4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
      }
   } // big wait loop

   diagprint(F("SBDIX timeout!\r\n"));
 80079aa:	4911      	ldr	r1, [pc, #68]	; (80079f0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x574>)
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 febf 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   return ISBD_SENDRECEIVE_TIMEOUT;
 80079b2:	2307      	movs	r3, #7
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3748      	adds	r7, #72	; 0x48
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	0801ba7c 	.word	0x0801ba7c
 80079c0:	0801b60c 	.word	0x0801b60c
 80079c4:	0801ba88 	.word	0x0801ba88
 80079c8:	0801ba30 	.word	0x0801ba30
 80079cc:	0801ba2c 	.word	0x0801ba2c
 80079d0:	0801ba70 	.word	0x0801ba70
 80079d4:	0801ba94 	.word	0x0801ba94
 80079d8:	0801b9b8 	.word	0x0801b9b8
 80079dc:	0801baa4 	.word	0x0801baa4
 80079e0:	0801bab8 	.word	0x0801bab8
 80079e4:	0801bacc 	.word	0x0801bacc
 80079e8:	0801badc 	.word	0x0801badc
 80079ec:	0801bafc 	.word	0x0801bafc
 80079f0:	0801bb1c 	.word	0x0801bb1c

080079f4 <_ZN10IridiumSBD24internalGetSignalQualityERi>:

int IridiumSBD::internalGetSignalQuality(int &quality)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af02      	add	r7, sp, #8
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
   if (this->asleep)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d001      	beq.n	8007a0c <_ZN10IridiumSBD24internalGetSignalQualityERi+0x18>
      return ISBD_IS_ASLEEP;
 8007a08:	230a      	movs	r3, #10
 8007a0a:	e032      	b.n	8007a72 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>

   char csqResponseBuf[2];

   send(F("AT+CSQ\r"));
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	2201      	movs	r2, #1
 8007a10:	491a      	ldr	r1, [pc, #104]	; (8007a7c <_ZN10IridiumSBD24internalGetSignalQualityERi+0x88>)
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 fd0e 	bl	8008434 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(csqResponseBuf, sizeof(csqResponseBuf), "+CSQ:"))
 8007a18:	f107 010c 	add.w	r1, r7, #12
 8007a1c:	4b18      	ldr	r3, [pc, #96]	; (8007a80 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x8c>)
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	4b18      	ldr	r3, [pc, #96]	; (8007a84 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x90>)
 8007a22:	2202      	movs	r2, #2
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 f8a3 	bl	8007b70 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	f083 0301 	eor.w	r3, r3, #1
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d009      	beq.n	8007a4a <_ZN10IridiumSBD24internalGetSignalQualityERi+0x56>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f958 	bl	8007cec <_ZN10IridiumSBD9cancelledEv>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x52>
 8007a42:	2304      	movs	r3, #4
 8007a44:	e015      	b.n	8007a72 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>
 8007a46:	2303      	movs	r3, #3
 8007a48:	e013      	b.n	8007a72 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>

   if (isdigit(csqResponseBuf[0]))
 8007a4a:	7b3b      	ldrb	r3, [r7, #12]
 8007a4c:	3b30      	subs	r3, #48	; 0x30
 8007a4e:	2b09      	cmp	r3, #9
 8007a50:	bf94      	ite	ls
 8007a52:	2301      	movls	r3, #1
 8007a54:	2300      	movhi	r3, #0
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d009      	beq.n	8007a70 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7c>
   {
      quality = atoi(csqResponseBuf);
 8007a5c:	f107 030c 	add.w	r3, r7, #12
 8007a60:	4618      	mov	r0, r3
 8007a62:	f00c fcee 	bl	8014442 <atoi>
 8007a66:	4602      	mov	r2, r0
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	601a      	str	r2, [r3, #0]
      return ISBD_SUCCESS;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	e000      	b.n	8007a72 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>
   }

   return ISBD_PROTOCOL_ERROR;
 8007a70:	2303      	movs	r3, #3
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	0801bb30 	.word	0x0801bb30
 8007a80:	0801b60c 	.word	0x0801b60c
 8007a84:	0801bb38 	.word	0x0801bb38

08007a88 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb>:

int IridiumSBD::internalMSSTMWorkaround(bool &okToProceed)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b08a      	sub	sp, #40	; 0x28
 8007a8c:	af02      	add	r7, sp, #8
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
   satellite. Ensuring that the received signal strength reported in response to AT command +CSQ and +CIER is above 2-3 bars
   before attempting SBD communication will protect against lockout.
   */
   char msstmResponseBuf[24];

   send(F("AT-MSSTM\r"));
 8007a92:	2301      	movs	r3, #1
 8007a94:	2201      	movs	r2, #1
 8007a96:	4917      	ldr	r1, [pc, #92]	; (8007af4 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x6c>)
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 fccb 	bl	8008434 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(msstmResponseBuf, sizeof(msstmResponseBuf), "-MSSTM: "))
 8007a9e:	f107 0108 	add.w	r1, r7, #8
 8007aa2:	4b15      	ldr	r3, [pc, #84]	; (8007af8 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x70>)
 8007aa4:	9300      	str	r3, [sp, #0]
 8007aa6:	4b15      	ldr	r3, [pc, #84]	; (8007afc <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x74>)
 8007aa8:	2218      	movs	r2, #24
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f860 	bl	8007b70 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	f083 0301 	eor.w	r3, r3, #1
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d009      	beq.n	8007ad0 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x48>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f915 	bl	8007cec <_ZN10IridiumSBD9cancelledEv>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d001      	beq.n	8007acc <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x44>
 8007ac8:	2304      	movs	r3, #4
 8007aca:	e00e      	b.n	8007aea <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x62>
 8007acc:	2303      	movs	r3, #3
 8007ace:	e00c      	b.n	8007aea <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x62>

   // Response buf now contains either an 8-digit number or the string "no network service"
   okToProceed = isxdigit(msstmResponseBuf[0]);
 8007ad0:	7a3b      	ldrb	r3, [r7, #8]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f00c fdde 	bl	8014694 <isxdigit>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	bf14      	ite	ne
 8007ade:	2301      	movne	r3, #1
 8007ae0:	2300      	moveq	r3, #0
 8007ae2:	b2da      	uxtb	r2, r3
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	701a      	strb	r2, [r3, #0]
   return ISBD_SUCCESS;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3720      	adds	r7, #32
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	0801b5f4 	.word	0x0801b5f4
 8007af8:	0801b60c 	.word	0x0801b60c
 8007afc:	0801b600 	.word	0x0801b600

08007b00 <_ZN10IridiumSBD13internalSleepEv>:

int IridiumSBD::internalSleep()
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
   if (this->asleep)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d001      	beq.n	8007b16 <_ZN10IridiumSBD13internalSleepEv+0x16>
      return ISBD_IS_ASLEEP;
 8007b12:	230a      	movs	r3, #10
 8007b14:	e000      	b.n	8007b18 <_ZN10IridiumSBD13internalSleepEv+0x18>

   if (!waitForATResponse())
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
#endif

   return ISBD_SUCCESS;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <_ZN10IridiumSBD11noBlockWaitEi>:

bool IridiumSBD::noBlockWait(int seconds)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
   for (unsigned long start=millis(); millis() - start < 1000UL * seconds;)
 8007b2e:	f002 fd3d 	bl	800a5ac <HAL_GetTick>
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	f002 fd3a 	bl	800a5ac <HAL_GetTick>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	1ad2      	subs	r2, r2, r3
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007b44:	fb01 f303 	mul.w	r3, r1, r3
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	bf34      	ite	cc
 8007b4c:	2301      	movcc	r3, #1
 8007b4e:	2300      	movcs	r3, #0
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d007      	beq.n	8007b66 <_ZN10IridiumSBD11noBlockWaitEi+0x42>
      if (cancelled())
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f8c8 	bl	8007cec <_ZN10IridiumSBD9cancelledEv>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d0e8      	beq.n	8007b34 <_ZN10IridiumSBD11noBlockWaitEi+0x10>
         return false;
 8007b62:	2300      	movs	r3, #0
 8007b64:	e000      	b.n	8007b68 <_ZN10IridiumSBD11noBlockWaitEi+0x44>

   return true;
 8007b66:	2301      	movs	r3, #1
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>:

// Wait for response from previous AT command.  This process terminates when "terminator" string is seen or upon timeout.
// If "prompt" string is provided (example "+CSQ:"), then all characters following prompt up to the next CRLF are
// stored in response buffer for later parsing by caller.
bool IridiumSBD::waitForATResponse(char *response, int responseSize, const char *prompt, const char *terminator)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b08a      	sub	sp, #40	; 0x28
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
 8007b7c:	603b      	str	r3, [r7, #0]
   diagprint(F("Waiting for response "));
 8007b7e:	4959      	ldr	r1, [pc, #356]	; (8007ce4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x174>)
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f000 fdd5 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   diagprint(terminator);
 8007b86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f000 fdef 	bl	800876c <_ZN10IridiumSBD9diagprintEPKc>
   this->print((char*) terminator); //TODO doesn't print otherwise
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b94:	4798      	blx	r3
   diagprint(F("\r\n"));
 8007b96:	4954      	ldr	r1, [pc, #336]	; (8007ce8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x178>)
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f000 fdc9 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (response)
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d005      	beq.n	8007bb0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x40>
      memset(response, 0, responseSize);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	2100      	movs	r1, #0
 8007baa:	68b8      	ldr	r0, [r7, #8]
 8007bac:	f00c fecc 	bl	8014948 <memset>

   int matchPromptPos = 0; // Matches chars in prompt
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	627b      	str	r3, [r7, #36]	; 0x24
   int matchTerminatorPos = 0; // Matches chars in terminator
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	623b      	str	r3, [r7, #32]
   enum {LOOKING_FOR_PROMPT, GATHERING_RESPONSE, LOOKING_FOR_TERMINATOR};
   int promptState = prompt ? LOOKING_FOR_PROMPT : LOOKING_FOR_TERMINATOR;
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d001      	beq.n	8007bc2 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x52>
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	e000      	b.n	8007bc4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x54>
 8007bc2:	2302      	movs	r3, #2
 8007bc4:	61fb      	str	r3, [r7, #28]
   //consoleprint(F("<< ")); //TODO If we comment out this it looks cleaner in the serial

   for (unsigned long start=millis(); millis() - start < 1000UL * atTimeout;)
 8007bc6:	f002 fcf1 	bl	800a5ac <HAL_GetTick>
 8007bca:	61b8      	str	r0, [r7, #24]
 8007bcc:	f002 fcee 	bl	800a5ac <HAL_GetTick>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	1ad2      	subs	r2, r2, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bda:	4619      	mov	r1, r3
 8007bdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007be0:	fb03 f301 	mul.w	r3, r3, r1
 8007be4:	429a      	cmp	r2, r3
 8007be6:	bf34      	ite	cc
 8007be8:	2301      	movcc	r3, #1
 8007bea:	2300      	movcs	r3, #0
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d072      	beq.n	8007cd8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x168>
   {
      if (cancelled())
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f000 f87a 	bl	8007cec <_ZN10IridiumSBD9cancelledEv>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d001      	beq.n	8007c02 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x92>
         return false;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	e06b      	b.n	8007cda <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x16a>

      while (filteredavailable() > 0)
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	f000 ff52 	bl	8008aac <_ZN10IridiumSBD17filteredavailableEv>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	bfcc      	ite	gt
 8007c0e:	2301      	movgt	r3, #1
 8007c10:	2300      	movle	r3, #0
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d0d9      	beq.n	8007bcc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x5c>
      {
         char c = filteredread();
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f000 ff63 	bl	8008ae4 <_ZN10IridiumSBD12filteredreadEv>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	75fb      	strb	r3, [r7, #23]
         if (prompt)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d03b      	beq.n	8007ca0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x130>
         {
            switch (promptState)
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d003      	beq.n	8007c36 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xc6>
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d01d      	beq.n	8007c70 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x100>
 8007c34:	e034      	b.n	8007ca0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x130>
            {
            case LOOKING_FOR_PROMPT:
               if (c == prompt[matchPromptPos])
 8007c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c38:	683a      	ldr	r2, [r7, #0]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	7dfa      	ldrb	r2, [r7, #23]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d10b      	bne.n	8007c5c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xec>
               {
                  ++matchPromptPos;
 8007c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c46:	3301      	adds	r3, #1
 8007c48:	627b      	str	r3, [r7, #36]	; 0x24
                  if (prompt[matchPromptPos] == '\0')
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4c:	683a      	ldr	r2, [r7, #0]
 8007c4e:	4413      	add	r3, r2
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d121      	bne.n	8007c9a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
                     promptState = GATHERING_RESPONSE;
 8007c56:	2301      	movs	r3, #1
 8007c58:	61fb      	str	r3, [r7, #28]
               else
               {
                  matchPromptPos = c == prompt[0] ? 1 : 0;
               }

               break;
 8007c5a:	e01e      	b.n	8007c9a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
                  matchPromptPos = c == prompt[0] ? 1 : 0;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	7dfa      	ldrb	r2, [r7, #23]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d101      	bne.n	8007c6a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xfa>
 8007c66:	2301      	movs	r3, #1
 8007c68:	e000      	b.n	8007c6c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xfc>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	627b      	str	r3, [r7, #36]	; 0x24
               break;
 8007c6e:	e014      	b.n	8007c9a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
            case GATHERING_RESPONSE: // gathering response from end of prompt to first \r
               if (response)
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d013      	beq.n	8007c9e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12e>
               {
                  if (c == '\r' || responseSize < 2)
 8007c76:	7dfb      	ldrb	r3, [r7, #23]
 8007c78:	2b0d      	cmp	r3, #13
 8007c7a:	d002      	beq.n	8007c82 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x112>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	dc02      	bgt.n	8007c88 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x118>
                  {
                     promptState = LOOKING_FOR_TERMINATOR;
 8007c82:	2302      	movs	r3, #2
 8007c84:	61fb      	str	r3, [r7, #28]
                  {
                     *response++ = c;
                     responseSize--;
                  }
               }
               break;
 8007c86:	e00a      	b.n	8007c9e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12e>
                     *response++ = c;
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	1c5a      	adds	r2, r3, #1
 8007c8c:	60ba      	str	r2, [r7, #8]
 8007c8e:	7dfa      	ldrb	r2, [r7, #23]
 8007c90:	701a      	strb	r2, [r3, #0]
                     responseSize--;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	3b01      	subs	r3, #1
 8007c96:	607b      	str	r3, [r7, #4]
               break;
 8007c98:	e001      	b.n	8007c9e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12e>
               break;
 8007c9a:	bf00      	nop
 8007c9c:	e000      	b.n	8007ca0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x130>
               break;
 8007c9e:	bf00      	nop
            }
         }

         if (c == terminator[matchTerminatorPos])
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ca4:	4413      	add	r3, r2
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	7dfa      	ldrb	r2, [r7, #23]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d10a      	bne.n	8007cc4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x154>
         {
            ++matchTerminatorPos;
 8007cae:	6a3b      	ldr	r3, [r7, #32]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	623b      	str	r3, [r7, #32]
            if (terminator[matchTerminatorPos] == '\0')
 8007cb4:	6a3b      	ldr	r3, [r7, #32]
 8007cb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cb8:	4413      	add	r3, r2
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1a0      	bne.n	8007c02 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x92>
               return true;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e00a      	b.n	8007cda <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x16a>
         }
         else
         {
            matchTerminatorPos = c == terminator[0] ? 1 : 0;
 8007cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	7dfa      	ldrb	r2, [r7, #23]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d101      	bne.n	8007cd2 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x162>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e000      	b.n	8007cd4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x164>
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	623b      	str	r3, [r7, #32]
      while (filteredavailable() > 0)
 8007cd6:	e794      	b.n	8007c02 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x92>
         }
      } // while (filteredavailable() > 0)
   } // timer loop
   return false;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3728      	adds	r7, #40	; 0x28
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	0801bb40 	.word	0x0801bb40
 8007ce8:	0801b9b8 	.word	0x0801b9b8

08007cec <_ZN10IridiumSBD9cancelledEv>:

bool IridiumSBD::cancelled()
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
   if (this->useSerial)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	7c5b      	ldrb	r3, [r3, #17]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d019      	beq.n	8007d30 <_ZN10IridiumSBD9cancelledEv+0x44>
   {
	   //TODO For some reason when using digitalRead here it didn't work so simply replaced with HAL function
	   //if ((ringPin != -1) && digitalRead(ringPin) == LOW)
	     if ((ringPin != -1) && HAL_GPIO_ReadPin(ringPin_GPIO_Port,ringPin_Pin) == LOW)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d06:	d008      	beq.n	8007d1a <_ZN10IridiumSBD9cancelledEv+0x2e>
 8007d08:	2110      	movs	r1, #16
 8007d0a:	480e      	ldr	r0, [pc, #56]	; (8007d44 <_ZN10IridiumSBD9cancelledEv+0x58>)
 8007d0c:	f003 fb4e 	bl	800b3ac <HAL_GPIO_ReadPin>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <_ZN10IridiumSBD9cancelledEv+0x2e>
 8007d16:	2301      	movs	r3, #1
 8007d18:	e000      	b.n	8007d1c <_ZN10IridiumSBD9cancelledEv+0x30>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d007      	beq.n	8007d30 <_ZN10IridiumSBD9cancelledEv+0x44>
	  {
         ringAsserted = true;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
		 diagprint(F("ringPin seen!\r\n"));
 8007d28:	4907      	ldr	r1, [pc, #28]	; (8007d48 <_ZN10IridiumSBD9cancelledEv+0x5c>)
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fd00 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
	  }
   }

   return !ISBDCallback();
 8007d30:	f7fe fec0 	bl	8006ab4 <_Z12ISBDCallbackv>
 8007d34:	4603      	mov	r3, r0
 8007d36:	f083 0301 	eor.w	r3, r3, #1
 8007d3a:	b2db      	uxtb	r3, r3
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	40020800 	.word	0x40020800
 8007d48:	0801bb58 	.word	0x0801bb58

08007d4c <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_>:

int IridiumSBD::doSBDIX(uint16_t &moCode, uint16_t &moMSN, uint16_t &mtCode, uint16_t &mtMSN, uint16_t &mtLen, uint16_t &mtRemaining)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b096      	sub	sp, #88	; 0x58
 8007d50:	af02      	add	r7, sp, #8
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
 8007d58:	603b      	str	r3, [r7, #0]
   // Returns xx,xxxxx,xx,xxxxx,xx,xxx
   char sbdixResponseBuf[32];
   send(F("AT+SBDIX\r"));
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	492a      	ldr	r1, [pc, #168]	; (8007e08 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xbc>)
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f000 fb67 	bl	8008434 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(sbdixResponseBuf, sizeof(sbdixResponseBuf), "+SBDIX: "))
 8007d66:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8007d6a:	4b28      	ldr	r3, [pc, #160]	; (8007e0c <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xc0>)
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	4b28      	ldr	r3, [pc, #160]	; (8007e10 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xc4>)
 8007d70:	2220      	movs	r2, #32
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f7ff fefc 	bl	8007b70 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	f083 0301 	eor.w	r3, r3, #1
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d009      	beq.n	8007d98 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x4c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f7ff ffb1 	bl	8007cec <_ZN10IridiumSBD9cancelledEv>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d001      	beq.n	8007d94 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x48>
 8007d90:	2304      	movs	r3, #4
 8007d92:	e035      	b.n	8007e00 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb4>
 8007d94:	2303      	movs	r3, #3
 8007d96:	e033      	b.n	8007e00 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb4>

   uint16_t *values[6] = { &moCode, &moMSN, &mtCode, &mtMSN, &mtLen, &mtRemaining };
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	613b      	str	r3, [r7, #16]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	617b      	str	r3, [r7, #20]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	61bb      	str	r3, [r7, #24]
 8007da4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007da6:	61fb      	str	r3, [r7, #28]
 8007da8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007daa:	623b      	str	r3, [r7, #32]
 8007dac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dae:	627b      	str	r3, [r7, #36]	; 0x24
   for (int i=0; i<6; ++i)
 8007db0:	2300      	movs	r3, #0
 8007db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007db6:	2b05      	cmp	r3, #5
 8007db8:	dc21      	bgt.n	8007dfe <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb2>
   {
      char *p = strtok(i == 0 ? sbdixResponseBuf : NULL, ", ");
 8007dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d102      	bne.n	8007dc6 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x7a>
 8007dc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007dc4:	e000      	b.n	8007dc8 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x7c>
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	4912      	ldr	r1, [pc, #72]	; (8007e14 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xc8>)
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f00e ff9c 	bl	8016d08 <strtok>
 8007dd0:	64b8      	str	r0, [r7, #72]	; 0x48
      if (p == NULL)
 8007dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d101      	bne.n	8007ddc <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x90>
         return ISBD_PROTOCOL_ERROR;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e011      	b.n	8007e00 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb4>
      *values[i] = atol(p);
 8007ddc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007dde:	f00c fb34 	bl	801444a <atol>
 8007de2:	4602      	mov	r2, r0
 8007de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8007dec:	440b      	add	r3, r1
 8007dee:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8007df2:	b292      	uxth	r2, r2
 8007df4:	801a      	strh	r2, [r3, #0]
   for (int i=0; i<6; ++i)
 8007df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007df8:	3301      	adds	r3, #1
 8007dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dfc:	e7da      	b.n	8007db4 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x68>
   }
   return ISBD_SUCCESS;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3750      	adds	r7, #80	; 0x50
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	0801bb68 	.word	0x0801bb68
 8007e0c:	0801b60c 	.word	0x0801b60c
 8007e10:	0801bb74 	.word	0x0801bb74
 8007e14:	0801bb80 	.word	0x0801bb80

08007e18 <_ZN10IridiumSBD7doSBDRBEPhPj>:

int IridiumSBD::doSBDRB(uint8_t *rxBuffer, size_t *prxBufferSize)
{
 8007e18:	b590      	push	{r4, r7, lr}
 8007e1a:	b08b      	sub	sp, #44	; 0x2c
 8007e1c:	af02      	add	r7, sp, #8
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]
   bool rxOverflow = false;
 8007e24:	2300      	movs	r3, #0
 8007e26:	77fb      	strb	r3, [r7, #31]

   send(F("AT+SBDRB\r"));
 8007e28:	2301      	movs	r3, #1
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	49a2      	ldr	r1, [pc, #648]	; (80080b8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a0>)
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f000 fb00 	bl	8008434 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(NULL, 0, NULL, "AT+SBDRB\r")) // waits for its own echo
 8007e34:	4ba0      	ldr	r3, [pc, #640]	; (80080b8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a0>)
 8007e36:	9300      	str	r3, [sp, #0]
 8007e38:	2300      	movs	r3, #0
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f7ff fe96 	bl	8007b70 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8007e44:	4603      	mov	r3, r0
 8007e46:	f083 0301 	eor.w	r3, r3, #1
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d009      	beq.n	8007e64 <_ZN10IridiumSBD7doSBDRBEPhPj+0x4c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f7ff ff4b 	bl	8007cec <_ZN10IridiumSBD9cancelledEv>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d001      	beq.n	8007e60 <_ZN10IridiumSBD7doSBDRBEPhPj+0x48>
 8007e5c:	2304      	movs	r3, #4
 8007e5e:	e223      	b.n	80082a8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
 8007e60:	2303      	movs	r3, #3
 8007e62:	e221      	b.n	80082a8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   if(!this->useSerial) check9603data(); // Check for any 9603 serial data
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	7c5b      	ldrb	r3, [r3, #17]
 8007e68:	f083 0301 	eor.w	r3, r3, #1
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d002      	beq.n	8007e78 <_ZN10IridiumSBD7doSBDRBEPhPj+0x60>
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f000 fe7c 	bl	8008b70 <_ZN10IridiumSBD13check9603dataEv>

   // Time to read the binary data: size[2], body[size], checksum[2]
   unsigned long start = millis();
 8007e78:	f002 fb98 	bl	800a5ac <HAL_GetTick>
 8007e7c:	6138      	str	r0, [r7, #16]
   while (millis() - start < 1000UL * atTimeout)
 8007e7e:	f002 fb95 	bl	800a5ac <HAL_GetTick>
 8007e82:	4602      	mov	r2, r0
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	1ad2      	subs	r2, r2, r3
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e92:	fb03 f301 	mul.w	r3, r3, r1
 8007e96:	429a      	cmp	r2, r3
 8007e98:	bf34      	ite	cc
 8007e9a:	2301      	movcc	r3, #1
 8007e9c:	2300      	movcs	r3, #0
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d03c      	beq.n	8007f1e <_ZN10IridiumSBD7doSBDRBEPhPj+0x106>
   {
      if(!this->useSerial) check9603data(); // Keep checking for new 9603 serial data
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	7c5b      	ldrb	r3, [r3, #17]
 8007ea8:	f083 0301 	eor.w	r3, r3, #1
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d002      	beq.n	8007eb8 <_ZN10IridiumSBD7doSBDRBEPhPj+0xa0>
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	f000 fe5c 	bl	8008b70 <_ZN10IridiumSBD13check9603dataEv>
      if (cancelled())
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f7ff ff17 	bl	8007cec <_ZN10IridiumSBD9cancelledEv>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d001      	beq.n	8007ec8 <_ZN10IridiumSBD7doSBDRBEPhPj+0xb0>
         return ISBD_CANCELLED;
 8007ec4:	2304      	movs	r3, #4
 8007ec6:	e1ef      	b.n	80082a8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
      if (this->useSerial && (stream->available() >= 2))
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	7c5b      	ldrb	r3, [r3, #17]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00d      	beq.n	8007eec <_ZN10IridiumSBD7doSBDRBEPhPj+0xd4>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	689a      	ldr	r2, [r3, #8]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	3308      	adds	r3, #8
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4610      	mov	r0, r2
 8007ee0:	4798      	blx	r3
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	dd01      	ble.n	8007eec <_ZN10IridiumSBD7doSBDRBEPhPj+0xd4>
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e000      	b.n	8007eee <_ZN10IridiumSBD7doSBDRBEPhPj+0xd6>
 8007eec:	2300      	movs	r3, #0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d112      	bne.n	8007f18 <_ZN10IridiumSBD7doSBDRBEPhPj+0x100>
         break;
      if ((!this->useSerial) && (i2cSerAvailable() >= 2))
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	7c5b      	ldrb	r3, [r3, #17]
 8007ef6:	f083 0301 	eor.w	r3, r3, #1
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d007      	beq.n	8007f10 <_ZN10IridiumSBD7doSBDRBEPhPj+0xf8>
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f000 ff65 	bl	8008dd0 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	dd01      	ble.n	8007f10 <_ZN10IridiumSBD7doSBDRBEPhPj+0xf8>
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e000      	b.n	8007f12 <_ZN10IridiumSBD7doSBDRBEPhPj+0xfa>
 8007f10:	2300      	movs	r3, #0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d102      	bne.n	8007f1c <_ZN10IridiumSBD7doSBDRBEPhPj+0x104>
   while (millis() - start < 1000UL * atTimeout)
 8007f16:	e7b2      	b.n	8007e7e <_ZN10IridiumSBD7doSBDRBEPhPj+0x66>
         break;
 8007f18:	bf00      	nop
 8007f1a:	e000      	b.n	8007f1e <_ZN10IridiumSBD7doSBDRBEPhPj+0x106>
         break;
 8007f1c:	bf00      	nop
   }

   if (this->useSerial && (stream->available() < 2))
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	7c5b      	ldrb	r3, [r3, #17]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d00d      	beq.n	8007f42 <_ZN10IridiumSBD7doSBDRBEPhPj+0x12a>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	689a      	ldr	r2, [r3, #8]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	3308      	adds	r3, #8
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4610      	mov	r0, r2
 8007f36:	4798      	blx	r3
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	dc01      	bgt.n	8007f42 <_ZN10IridiumSBD7doSBDRBEPhPj+0x12a>
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e000      	b.n	8007f44 <_ZN10IridiumSBD7doSBDRBEPhPj+0x12c>
 8007f42:	2300      	movs	r3, #0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d001      	beq.n	8007f4c <_ZN10IridiumSBD7doSBDRBEPhPj+0x134>
      return ISBD_SENDRECEIVE_TIMEOUT;
 8007f48:	2307      	movs	r3, #7
 8007f4a:	e1ad      	b.n	80082a8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
   if ((!this->useSerial) && (i2cSerAvailable() < 2))
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	7c5b      	ldrb	r3, [r3, #17]
 8007f50:	f083 0301 	eor.w	r3, r3, #1
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d007      	beq.n	8007f6a <_ZN10IridiumSBD7doSBDRBEPhPj+0x152>
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f000 ff38 	bl	8008dd0 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	dc01      	bgt.n	8007f6a <_ZN10IridiumSBD7doSBDRBEPhPj+0x152>
 8007f66:	2301      	movs	r3, #1
 8007f68:	e000      	b.n	8007f6c <_ZN10IridiumSBD7doSBDRBEPhPj+0x154>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d001      	beq.n	8007f74 <_ZN10IridiumSBD7doSBDRBEPhPj+0x15c>
      return ISBD_SENDRECEIVE_TIMEOUT;
 8007f70:	2307      	movs	r3, #7
 8007f72:	e199      	b.n	80082a8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   uint16_t size;
   if (this->useSerial)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	7c5b      	ldrb	r3, [r3, #17]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d01a      	beq.n	8007fb2 <_ZN10IridiumSBD7doSBDRBEPhPj+0x19a>
   {
      size = 256 * stream->read() + stream->read();
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	689a      	ldr	r2, [r3, #8]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	330c      	adds	r3, #12
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4610      	mov	r0, r2
 8007f8c:	4798      	blx	r3
 8007f8e:	4603      	mov	r3, r0
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	021b      	lsls	r3, r3, #8
 8007f94:	b29c      	uxth	r4, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	689a      	ldr	r2, [r3, #8]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	330c      	adds	r3, #12
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4610      	mov	r0, r2
 8007fa6:	4798      	blx	r3
 8007fa8:	4603      	mov	r3, r0
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	4423      	add	r3, r4
 8007fae:	83bb      	strh	r3, [r7, #28]
 8007fb0:	e00d      	b.n	8007fce <_ZN10IridiumSBD7doSBDRBEPhPj+0x1b6>
   }
   else
   {
      size = 256 * i2cSerRead() + i2cSerRead();
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	f000 ff24 	bl	8008e00 <_ZN10IridiumSBD10i2cSerReadEv>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	021b      	lsls	r3, r3, #8
 8007fbe:	b29c      	uxth	r4, r3
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f000 ff1d 	bl	8008e00 <_ZN10IridiumSBD10i2cSerReadEv>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	4423      	add	r3, r4
 8007fcc:	83bb      	strh	r3, [r7, #28]
   }
   consoleprint(F("[Binary size:"));
 8007fce:	493b      	ldr	r1, [pc, #236]	; (80080bc <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a4>)
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f000 fc05 	bl	80087e0 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(size);
 8007fd6:	8bbb      	ldrh	r3, [r7, #28]
 8007fd8:	4619      	mov	r1, r3
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f000 fc38 	bl	8008850 <_ZN10IridiumSBD12consoleprintEt>
   consoleprint(F("]"));
 8007fe0:	4937      	ldr	r1, [pc, #220]	; (80080c0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a8>)
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f000 fbfc 	bl	80087e0 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

   for (uint16_t bytesRead = 0; bytesRead < size;)
 8007fe8:	2300      	movs	r3, #0
 8007fea:	837b      	strh	r3, [r7, #26]
 8007fec:	8b7a      	ldrh	r2, [r7, #26]
 8007fee:	8bbb      	ldrh	r3, [r7, #28]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d27f      	bcs.n	80080f4 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2dc>
   {
      if (cancelled())
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f7ff fe79 	bl	8007cec <_ZN10IridiumSBD9cancelledEv>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d001      	beq.n	8008004 <_ZN10IridiumSBD7doSBDRBEPhPj+0x1ec>
         return ISBD_CANCELLED;
 8008000:	2304      	movs	r3, #4
 8008002:	e151      	b.n	80082a8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

      if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	7c5b      	ldrb	r3, [r3, #17]
 8008008:	f083 0301 	eor.w	r3, r3, #1
 800800c:	b2db      	uxtb	r3, r3
 800800e:	2b00      	cmp	r3, #0
 8008010:	d002      	beq.n	8008018 <_ZN10IridiumSBD7doSBDRBEPhPj+0x200>
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f000 fdac 	bl	8008b70 <_ZN10IridiumSBD13check9603dataEv>

      if ((this->useSerial && (stream->available())) || ((!this->useSerial) && i2cSerAvailable()))
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	7c5b      	ldrb	r3, [r3, #17]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d00b      	beq.n	8008038 <_ZN10IridiumSBD7doSBDRBEPhPj+0x220>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	689a      	ldr	r2, [r3, #8]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	3308      	adds	r3, #8
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4610      	mov	r0, r2
 8008030:	4798      	blx	r3
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d10c      	bne.n	8008052 <_ZN10IridiumSBD7doSBDRBEPhPj+0x23a>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	7c5b      	ldrb	r3, [r3, #17]
 800803c:	f083 0301 	eor.w	r3, r3, #1
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b00      	cmp	r3, #0
 8008044:	d007      	beq.n	8008056 <_ZN10IridiumSBD7doSBDRBEPhPj+0x23e>
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	f000 fec2 	bl	8008dd0 <_ZN10IridiumSBD15i2cSerAvailableEv>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d001      	beq.n	8008056 <_ZN10IridiumSBD7doSBDRBEPhPj+0x23e>
 8008052:	2301      	movs	r3, #1
 8008054:	e000      	b.n	8008058 <_ZN10IridiumSBD7doSBDRBEPhPj+0x240>
 8008056:	2300      	movs	r3, #0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d035      	beq.n	80080c8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
      {
         uint8_t c;
         if (this->useSerial)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	7c5b      	ldrb	r3, [r3, #17]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00b      	beq.n	800807c <_ZN10IridiumSBD7doSBDRBEPhPj+0x264>
         {
            c = stream->read();
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	689a      	ldr	r2, [r3, #8]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	330c      	adds	r3, #12
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4610      	mov	r0, r2
 8008074:	4798      	blx	r3
 8008076:	4603      	mov	r3, r0
 8008078:	767b      	strb	r3, [r7, #25]
 800807a:	e004      	b.n	8008086 <_ZN10IridiumSBD7doSBDRBEPhPj+0x26e>
         }
         else
         {
            c = i2cSerRead();
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f000 febf 	bl	8008e00 <_ZN10IridiumSBD10i2cSerReadEv>
 8008082:	4603      	mov	r3, r0
 8008084:	767b      	strb	r3, [r7, #25]
         }
         bytesRead++;
 8008086:	8b7b      	ldrh	r3, [r7, #26]
 8008088:	3301      	adds	r3, #1
 800808a:	837b      	strh	r3, [r7, #26]
         if (rxBuffer && prxBufferSize)
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d01a      	beq.n	80080c8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d017      	beq.n	80080c8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
         {
            if (*prxBufferSize > 0)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d011      	beq.n	80080c4 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2ac>
            {
               *rxBuffer++ = c;
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	1c5a      	adds	r2, r3, #1
 80080a4:	60ba      	str	r2, [r7, #8]
 80080a6:	7e7a      	ldrb	r2, [r7, #25]
 80080a8:	701a      	strb	r2, [r3, #0]
               (*prxBufferSize)--;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	1e5a      	subs	r2, r3, #1
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	e008      	b.n	80080c8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
 80080b6:	bf00      	nop
 80080b8:	0801bb84 	.word	0x0801bb84
 80080bc:	0801bb90 	.word	0x0801bb90
 80080c0:	0801bba0 	.word	0x0801bba0
            }
            else
            {
               rxOverflow = true;
 80080c4:	2301      	movs	r3, #1
 80080c6:	77fb      	strb	r3, [r7, #31]
            }
         }
      }

      if (millis() - start >= 1000UL * atTimeout)
 80080c8:	f002 fa70 	bl	800a5ac <HAL_GetTick>
 80080cc:	4602      	mov	r2, r0
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	1ad2      	subs	r2, r2, r3
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080d6:	4619      	mov	r1, r3
 80080d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80080dc:	fb03 f301 	mul.w	r3, r3, r1
 80080e0:	429a      	cmp	r2, r3
 80080e2:	bf2c      	ite	cs
 80080e4:	2301      	movcs	r3, #1
 80080e6:	2300      	movcc	r3, #0
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	f43f af7e 	beq.w	8007fec <_ZN10IridiumSBD7doSBDRBEPhPj+0x1d4>
         return ISBD_SENDRECEIVE_TIMEOUT;
 80080f0:	2307      	movs	r3, #7
 80080f2:	e0d9      	b.n	80082a8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
   }

   while (millis() - start < 1000UL * atTimeout)
 80080f4:	f002 fa5a 	bl	800a5ac <HAL_GetTick>
 80080f8:	4602      	mov	r2, r0
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	1ad2      	subs	r2, r2, r3
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008102:	4619      	mov	r1, r3
 8008104:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008108:	fb03 f301 	mul.w	r3, r3, r1
 800810c:	429a      	cmp	r2, r3
 800810e:	bf34      	ite	cc
 8008110:	2301      	movcc	r3, #1
 8008112:	2300      	movcs	r3, #0
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b00      	cmp	r3, #0
 8008118:	d03c      	beq.n	8008194 <_ZN10IridiumSBD7doSBDRBEPhPj+0x37c>
   {
      if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	7c5b      	ldrb	r3, [r3, #17]
 800811e:	f083 0301 	eor.w	r3, r3, #1
 8008122:	b2db      	uxtb	r3, r3
 8008124:	2b00      	cmp	r3, #0
 8008126:	d002      	beq.n	800812e <_ZN10IridiumSBD7doSBDRBEPhPj+0x316>
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f000 fd21 	bl	8008b70 <_ZN10IridiumSBD13check9603dataEv>
      if (cancelled())
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f7ff fddc 	bl	8007cec <_ZN10IridiumSBD9cancelledEv>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d001      	beq.n	800813e <_ZN10IridiumSBD7doSBDRBEPhPj+0x326>
         return ISBD_CANCELLED;
 800813a:	2304      	movs	r3, #4
 800813c:	e0b4      	b.n	80082a8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
      if (this->useSerial && (stream->available() >= 2))
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	7c5b      	ldrb	r3, [r3, #17]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00d      	beq.n	8008162 <_ZN10IridiumSBD7doSBDRBEPhPj+0x34a>
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	689a      	ldr	r2, [r3, #8]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	3308      	adds	r3, #8
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4610      	mov	r0, r2
 8008156:	4798      	blx	r3
 8008158:	4603      	mov	r3, r0
 800815a:	2b01      	cmp	r3, #1
 800815c:	dd01      	ble.n	8008162 <_ZN10IridiumSBD7doSBDRBEPhPj+0x34a>
 800815e:	2301      	movs	r3, #1
 8008160:	e000      	b.n	8008164 <_ZN10IridiumSBD7doSBDRBEPhPj+0x34c>
 8008162:	2300      	movs	r3, #0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d112      	bne.n	800818e <_ZN10IridiumSBD7doSBDRBEPhPj+0x376>
         break;
      if ((!this->useSerial) && (i2cSerAvailable() >= 2))
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	7c5b      	ldrb	r3, [r3, #17]
 800816c:	f083 0301 	eor.w	r3, r3, #1
 8008170:	b2db      	uxtb	r3, r3
 8008172:	2b00      	cmp	r3, #0
 8008174:	d007      	beq.n	8008186 <_ZN10IridiumSBD7doSBDRBEPhPj+0x36e>
 8008176:	68f8      	ldr	r0, [r7, #12]
 8008178:	f000 fe2a 	bl	8008dd0 <_ZN10IridiumSBD15i2cSerAvailableEv>
 800817c:	4603      	mov	r3, r0
 800817e:	2b01      	cmp	r3, #1
 8008180:	dd01      	ble.n	8008186 <_ZN10IridiumSBD7doSBDRBEPhPj+0x36e>
 8008182:	2301      	movs	r3, #1
 8008184:	e000      	b.n	8008188 <_ZN10IridiumSBD7doSBDRBEPhPj+0x370>
 8008186:	2300      	movs	r3, #0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d102      	bne.n	8008192 <_ZN10IridiumSBD7doSBDRBEPhPj+0x37a>
   while (millis() - start < 1000UL * atTimeout)
 800818c:	e7b2      	b.n	80080f4 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2dc>
         break;
 800818e:	bf00      	nop
 8008190:	e000      	b.n	8008194 <_ZN10IridiumSBD7doSBDRBEPhPj+0x37c>
         break;
 8008192:	bf00      	nop
   }

   if (this->useSerial && (stream->available() < 2))
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	7c5b      	ldrb	r3, [r3, #17]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00d      	beq.n	80081b8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3a0>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	689a      	ldr	r2, [r3, #8]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	3308      	adds	r3, #8
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4610      	mov	r0, r2
 80081ac:	4798      	blx	r3
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	dc01      	bgt.n	80081b8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3a0>
 80081b4:	2301      	movs	r3, #1
 80081b6:	e000      	b.n	80081ba <_ZN10IridiumSBD7doSBDRBEPhPj+0x3a2>
 80081b8:	2300      	movs	r3, #0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d001      	beq.n	80081c2 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3aa>
      return ISBD_SENDRECEIVE_TIMEOUT;
 80081be:	2307      	movs	r3, #7
 80081c0:	e072      	b.n	80082a8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
   if ((!this->useSerial) && (i2cSerAvailable() < 2))
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	7c5b      	ldrb	r3, [r3, #17]
 80081c6:	f083 0301 	eor.w	r3, r3, #1
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d007      	beq.n	80081e0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3c8>
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f000 fdfd 	bl	8008dd0 <_ZN10IridiumSBD15i2cSerAvailableEv>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b01      	cmp	r3, #1
 80081da:	dc01      	bgt.n	80081e0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3c8>
 80081dc:	2301      	movs	r3, #1
 80081de:	e000      	b.n	80081e2 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3ca>
 80081e0:	2300      	movs	r3, #0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <_ZN10IridiumSBD7doSBDRBEPhPj+0x3d2>
      return ISBD_SENDRECEIVE_TIMEOUT;
 80081e6:	2307      	movs	r3, #7
 80081e8:	e05e      	b.n	80082a8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   uint16_t checksum;
   if (this->useSerial)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	7c5b      	ldrb	r3, [r3, #17]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d01a      	beq.n	8008228 <_ZN10IridiumSBD7doSBDRBEPhPj+0x410>
   {
      checksum = 256 * stream->read() + stream->read();
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	689a      	ldr	r2, [r3, #8]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	330c      	adds	r3, #12
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4610      	mov	r0, r2
 8008202:	4798      	blx	r3
 8008204:	4603      	mov	r3, r0
 8008206:	b29b      	uxth	r3, r3
 8008208:	021b      	lsls	r3, r3, #8
 800820a:	b29c      	uxth	r4, r3
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	689a      	ldr	r2, [r3, #8]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	330c      	adds	r3, #12
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4610      	mov	r0, r2
 800821c:	4798      	blx	r3
 800821e:	4603      	mov	r3, r0
 8008220:	b29b      	uxth	r3, r3
 8008222:	4423      	add	r3, r4
 8008224:	82fb      	strh	r3, [r7, #22]
 8008226:	e00d      	b.n	8008244 <_ZN10IridiumSBD7doSBDRBEPhPj+0x42c>
   }
   else
   {
      checksum = 256 * i2cSerRead() + i2cSerRead();
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f000 fde9 	bl	8008e00 <_ZN10IridiumSBD10i2cSerReadEv>
 800822e:	4603      	mov	r3, r0
 8008230:	b29b      	uxth	r3, r3
 8008232:	021b      	lsls	r3, r3, #8
 8008234:	b29c      	uxth	r4, r3
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f000 fde2 	bl	8008e00 <_ZN10IridiumSBD10i2cSerReadEv>
 800823c:	4603      	mov	r3, r0
 800823e:	b29b      	uxth	r3, r3
 8008240:	4423      	add	r3, r4
 8008242:	82fb      	strh	r3, [r7, #22]
   }
   consoleprint(F("[csum:"));
 8008244:	491a      	ldr	r1, [pc, #104]	; (80082b0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x498>)
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f000 faca 	bl	80087e0 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(checksum);
 800824c:	8afb      	ldrh	r3, [r7, #22]
 800824e:	4619      	mov	r1, r3
 8008250:	68f8      	ldr	r0, [r7, #12]
 8008252:	f000 fafd 	bl	8008850 <_ZN10IridiumSBD12consoleprintEt>
   consoleprint(F("]"));
 8008256:	4917      	ldr	r1, [pc, #92]	; (80082b4 <_ZN10IridiumSBD7doSBDRBEPhPj+0x49c>)
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f000 fac1 	bl	80087e0 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

   // Return actual size of returned buffer
   if (prxBufferSize)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d002      	beq.n	800826a <_ZN10IridiumSBD7doSBDRBEPhPj+0x452>
      *prxBufferSize = (size_t)size;
 8008264:	8bba      	ldrh	r2, [r7, #28]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	601a      	str	r2, [r3, #0]

   // Wait for final OK
   if (!waitForATResponse())
 800826a:	4b13      	ldr	r3, [pc, #76]	; (80082b8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x4a0>)
 800826c:	9300      	str	r3, [sp, #0]
 800826e:	2300      	movs	r3, #0
 8008270:	2200      	movs	r2, #0
 8008272:	2100      	movs	r1, #0
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f7ff fc7b 	bl	8007b70 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 800827a:	4603      	mov	r3, r0
 800827c:	f083 0301 	eor.w	r3, r3, #1
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b00      	cmp	r3, #0
 8008284:	d009      	beq.n	800829a <_ZN10IridiumSBD7doSBDRBEPhPj+0x482>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8008286:	68f8      	ldr	r0, [r7, #12]
 8008288:	f7ff fd30 	bl	8007cec <_ZN10IridiumSBD9cancelledEv>
 800828c:	4603      	mov	r3, r0
 800828e:	2b00      	cmp	r3, #0
 8008290:	d001      	beq.n	8008296 <_ZN10IridiumSBD7doSBDRBEPhPj+0x47e>
 8008292:	2304      	movs	r3, #4
 8008294:	e008      	b.n	80082a8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
 8008296:	2303      	movs	r3, #3
 8008298:	e006      	b.n	80082a8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
 800829a:	7ffb      	ldrb	r3, [r7, #31]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d001      	beq.n	80082a4 <_ZN10IridiumSBD7doSBDRBEPhPj+0x48c>
 80082a0:	2308      	movs	r3, #8
 80082a2:	e000      	b.n	80082a6 <_ZN10IridiumSBD7doSBDRBEPhPj+0x48e>
 80082a4:	2300      	movs	r3, #0
 80082a6:	bf00      	nop
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3724      	adds	r7, #36	; 0x24
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd90      	pop	{r4, r7, pc}
 80082b0:	0801bba4 	.word	0x0801bba4
 80082b4:	0801bba0 	.word	0x0801bba0
 80082b8:	0801b60c 	.word	0x0801b60c

080082bc <_ZN10IridiumSBD5powerEb>:

void IridiumSBD::power(bool on)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	460b      	mov	r3, r1
 80082c6:	70fb      	strb	r3, [r7, #3]
   this->asleep = !on;
 80082c8:	78fb      	ldrb	r3, [r7, #3]
 80082ca:	f083 0301 	eor.w	r3, r3, #1
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

   if (this->useSerial)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	7c5b      	ldrb	r3, [r3, #17]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d010      	beq.n	8008300 <_ZN10IridiumSBD5powerEb+0x44>
   {
      if (this->sleepPin == -1)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e6:	d04a      	beq.n	800837e <_ZN10IridiumSBD5powerEb+0xc2>
      {
         return;
      }
      else
      {
          if (this->sleepPinConfigured == false)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d106      	bne.n	8008300 <_ZN10IridiumSBD5powerEb+0x44>
          {
             configureSleepPin();
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 f84c 	bl	8008390 <_ZN10IridiumSBD17configureSleepPinEv>
             this->sleepPinConfigured = true;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          }
      }
   }

   if (on)
 8008300:	78fb      	ldrb	r3, [r7, #3]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d017      	beq.n	8008336 <_ZN10IridiumSBD5powerEb+0x7a>
   {
      diagprint(F("Powering on modem...\r\n"));
 8008306:	4920      	ldr	r1, [pc, #128]	; (8008388 <_ZN10IridiumSBD5powerEb+0xcc>)
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 fa11 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	7c5b      	ldrb	r3, [r3, #17]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d004      	beq.n	8008320 <_ZN10IridiumSBD5powerEb+0x64>
      {
         setSleepPin(HIGH); // HIGH = awake
 8008316:	2101      	movs	r1, #1
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 f847 	bl	80083ac <_ZN10IridiumSBD11setSleepPinEh>
 800831e:	e003      	b.n	8008328 <_ZN10IridiumSBD5powerEb+0x6c>
      }
      else
      {
         enable9603(true);
 8008320:	2101      	movs	r1, #1
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f7fe fe24 	bl	8006f70 <_ZN10IridiumSBD10enable9603Eb>
      }
      lastPowerOnTime = millis();
 8008328:	f002 f940 	bl	800a5ac <HAL_GetTick>
 800832c:	4602      	mov	r2, r0
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8008334:	e024      	b.n	8008380 <_ZN10IridiumSBD5powerEb+0xc4>
   }
   else
   {
      // Best Practices Guide suggests waiting at least 2 seconds
      // before powering off again
      unsigned long elapsed = millis() - lastPowerOnTime;
 8008336:	f002 f939 	bl	800a5ac <HAL_GetTick>
 800833a:	4602      	mov	r2, r0
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008342:	1ad3      	subs	r3, r2, r3
 8008344:	60fb      	str	r3, [r7, #12]
      if (elapsed < 2000UL)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800834c:	d205      	bcs.n	800835a <_ZN10IridiumSBD5powerEb+0x9e>
         //delay(2000UL - elapsed); TODO
    	  HAL_Delay(2000UL - elapsed);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8008354:	4618      	mov	r0, r3
 8008356:	f002 f935 	bl	800a5c4 <HAL_Delay>

      diagprint(F("Powering off modem...\r\n"));
 800835a:	490c      	ldr	r1, [pc, #48]	; (800838c <_ZN10IridiumSBD5powerEb+0xd0>)
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 f9e7 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	7c5b      	ldrb	r3, [r3, #17]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d004      	beq.n	8008374 <_ZN10IridiumSBD5powerEb+0xb8>
      {
         setSleepPin(LOW); // LOW = asleep
 800836a:	2100      	movs	r1, #0
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 f81d 	bl	80083ac <_ZN10IridiumSBD11setSleepPinEh>
 8008372:	e005      	b.n	8008380 <_ZN10IridiumSBD5powerEb+0xc4>
      }
      else
      {
         enable9603(false);
 8008374:	2100      	movs	r1, #0
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f7fe fdfa 	bl	8006f70 <_ZN10IridiumSBD10enable9603Eb>
 800837c:	e000      	b.n	8008380 <_ZN10IridiumSBD5powerEb+0xc4>
         return;
 800837e:	bf00      	nop
      }
   }
}
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	0801bbac 	.word	0x0801bbac
 800838c:	0801bbc4 	.word	0x0801bbc4

08008390 <_ZN10IridiumSBD17configureSleepPinEv>:

void IridiumSBD::configureSleepPin()
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
	//pinMode(sleepPin, OUTPUT); // Make the sleep pin an output TODO (doesnt work with this)
   //pinMode(sleepPin, OUTPUT_PP); // Make the sleep pin an output
   diagprint(F("configureSleepPin: sleepPin configured\r\n"));
 8008398:	4903      	ldr	r1, [pc, #12]	; (80083a8 <_ZN10IridiumSBD17configureSleepPinEv+0x18>)
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f9c8 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80083a0:	bf00      	nop
 80083a2:	3708      	adds	r7, #8
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	0801bbdc 	.word	0x0801bbdc

080083ac <_ZN10IridiumSBD11setSleepPinEh>:

void IridiumSBD::setSleepPin(uint8_t enable)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	460b      	mov	r3, r1
 80083b6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(sleepPin_GPIO_Port,sleepPin_Pin,GPIO_PIN_SET);
 80083b8:	2201      	movs	r2, #1
 80083ba:	2108      	movs	r1, #8
 80083bc:	480b      	ldr	r0, [pc, #44]	; (80083ec <_ZN10IridiumSBD11setSleepPinEh+0x40>)
 80083be:	f003 f80d 	bl	800b3dc <HAL_GPIO_WritePin>
   //digitalWrite(this->sleepPin, enable); // HIGH = awake, LOW = asleep TODO
   diagprint(F("setSleepPin: sleepPin set "));
 80083c2:	490b      	ldr	r1, [pc, #44]	; (80083f0 <_ZN10IridiumSBD11setSleepPinEh+0x44>)
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 f9b3 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   if (enable == HIGH)
 80083ca:	78fb      	ldrb	r3, [r7, #3]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d104      	bne.n	80083da <_ZN10IridiumSBD11setSleepPinEh+0x2e>
      diagprint(F("HIGH\r\n"));
 80083d0:	4908      	ldr	r1, [pc, #32]	; (80083f4 <_ZN10IridiumSBD11setSleepPinEh+0x48>)
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 f9ac 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   else
      diagprint(F("LOW\r\n"));
}
 80083d8:	e003      	b.n	80083e2 <_ZN10IridiumSBD11setSleepPinEh+0x36>
      diagprint(F("LOW\r\n"));
 80083da:	4907      	ldr	r1, [pc, #28]	; (80083f8 <_ZN10IridiumSBD11setSleepPinEh+0x4c>)
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 f9a7 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80083e2:	bf00      	nop
 80083e4:	3708      	adds	r7, #8
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	40020800 	.word	0x40020800
 80083f0:	0801bc08 	.word	0x0801bc08
 80083f4:	0801bc24 	.word	0x0801bc24
 80083f8:	0801bc2c 	.word	0x0801bc2c

080083fc <_ZN10IridiumSBD15beginSerialPortEv>:

void IridiumSBD::beginSerialPort()
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::beginSerialPort\r\n"));
 8008404:	4903      	ldr	r1, [pc, #12]	; (8008414 <_ZN10IridiumSBD15beginSerialPortEv+0x18>)
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 f992 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 800840c:	bf00      	nop
 800840e:	3708      	adds	r7, #8
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}
 8008414:	0801bc34 	.word	0x0801bc34

08008418 <_ZN10IridiumSBD13endSerialPortEv>:

void IridiumSBD::endSerialPort()
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::endSerialPort\r\n"));
 8008420:	4903      	ldr	r1, [pc, #12]	; (8008430 <_ZN10IridiumSBD13endSerialPortEv+0x18>)
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f984 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8008428:	bf00      	nop
 800842a:	3708      	adds	r7, #8
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	0801bc54 	.word	0x0801bc54

08008434 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>:

void IridiumSBD::send(FlashString str, bool beginLine, bool endLine)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	4611      	mov	r1, r2
 8008440:	461a      	mov	r2, r3
 8008442:	460b      	mov	r3, r1
 8008444:	71fb      	strb	r3, [r7, #7]
 8008446:	4613      	mov	r3, r2
 8008448:	71bb      	strb	r3, [r7, #6]
   if (beginLine)
 800844a:	79fb      	ldrb	r3, [r7, #7]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d003      	beq.n	8008458 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x24>
      consoleprint(F(">> "));
 8008450:	4923      	ldr	r1, [pc, #140]	; (80084e0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xac>)
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f000 f9c4 	bl	80087e0 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 8008458:	68b9      	ldr	r1, [r7, #8]
 800845a:	68f8      	ldr	r0, [r7, #12]
 800845c:	f000 f9c0 	bl	80087e0 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (endLine)
 8008460:	79bb      	ldrb	r3, [r7, #6]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d003      	beq.n	800846e <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x3a>
      consoleprint(F("\r\n"));
 8008466:	491f      	ldr	r1, [pc, #124]	; (80084e4 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xb0>)
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f000 f9b9 	bl	80087e0 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	7c5b      	ldrb	r3, [r3, #17]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d006      	beq.n	8008484 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x50>
   {
      stream->print(str);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	68b9      	ldr	r1, [r7, #8]
 800847c:	4618      	mov	r0, r3
 800847e:	f001 fa61 	bl	8009944 <_ZN5Print5printEPK19__FlashStringHelper>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8008482:	e029      	b.n	80084d8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xa4>
      lastCheck = millis(); // Update lastCheck so we enforce a full I2C_POLLING_WAIT //TODO Uncommented this line
 8008484:	f002 f892 	bl	800a5ac <HAL_GetTick>
 8008488:	4602      	mov	r2, r0
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	66da      	str	r2, [r3, #108]	; 0x6c
      wireport->beginTransmission((uint8_t)deviceaddress);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	68da      	ldr	r2, [r3, #12]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	7c1b      	ldrb	r3, [r3, #16]
 8008496:	4619      	mov	r1, r3
 8008498:	4610      	mov	r0, r2
 800849a:	f001 fbc7 	bl	8009c2c <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	21ff      	movs	r1, #255	; 0xff
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7fe faf3 	bl	8006a90 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	68b9      	ldr	r1, [r7, #8]
 80084b0:	4618      	mov	r0, r3
 80084b2:	f001 fa47 	bl	8009944 <_ZN5Print5printEPK19__FlashStringHelper>
      if (wireport->endTransmission() != 0) //Release bus
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	4618      	mov	r0, r3
 80084bc:	f001 fc00 	bl	8009cc0 <_ZN7TwoWire15endTransmissionEv>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	bf14      	ite	ne
 80084c6:	2301      	movne	r3, #1
 80084c8:	2300      	moveq	r3, #0
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d003      	beq.n	80084d8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xa4>
         diagprint(F("I2C write was not successful!\r\n"));
 80084d0:	4905      	ldr	r1, [pc, #20]	; (80084e8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xb4>)
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	f000 f92c 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80084d8:	bf00      	nop
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	0801bc70 	.word	0x0801bc70
 80084e4:	0801b9b8 	.word	0x0801b9b8
 80084e8:	0801ba38 	.word	0x0801ba38

080084ec <_ZN10IridiumSBD4sendEPKc>:

void IridiumSBD::send(const char *str)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
   consoleprint(F(">> "));
 80084f6:	4920      	ldr	r1, [pc, #128]	; (8008578 <_ZN10IridiumSBD4sendEPKc+0x8c>)
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 f971 	bl	80087e0 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 f98b 	bl	800881c <_ZN10IridiumSBD12consoleprintEPKc>
   consoleprint(F("\r\n"));
 8008506:	491d      	ldr	r1, [pc, #116]	; (800857c <_ZN10IridiumSBD4sendEPKc+0x90>)
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 f969 	bl	80087e0 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	7c5b      	ldrb	r3, [r3, #17]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d006      	beq.n	8008524 <_ZN10IridiumSBD4sendEPKc+0x38>
   {
      stream->print(str);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	6839      	ldr	r1, [r7, #0]
 800851c:	4618      	mov	r0, r3
 800851e:	f001 fa1f 	bl	8009960 <_ZN5Print5printEPKc>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8008522:	e024      	b.n	800856e <_ZN10IridiumSBD4sendEPKc+0x82>
      wireport->beginTransmission((uint8_t)deviceaddress);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	68da      	ldr	r2, [r3, #12]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	7c1b      	ldrb	r3, [r3, #16]
 800852c:	4619      	mov	r1, r3
 800852e:	4610      	mov	r0, r2
 8008530:	f001 fb7c 	bl	8009c2c <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	21ff      	movs	r1, #255	; 0xff
 800853a:	4618      	mov	r0, r3
 800853c:	f7fe faa8 	bl	8006a90 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	6839      	ldr	r1, [r7, #0]
 8008546:	4618      	mov	r0, r3
 8008548:	f001 fa0a 	bl	8009960 <_ZN5Print5printEPKc>
      if (wireport->endTransmission() != 0) //Release bus
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	4618      	mov	r0, r3
 8008552:	f001 fbb5 	bl	8009cc0 <_ZN7TwoWire15endTransmissionEv>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	bf14      	ite	ne
 800855c:	2301      	movne	r3, #1
 800855e:	2300      	moveq	r3, #0
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b00      	cmp	r3, #0
 8008564:	d003      	beq.n	800856e <_ZN10IridiumSBD4sendEPKc+0x82>
         diagprint(F("I2C write was not successful!\r\n"));
 8008566:	4906      	ldr	r1, [pc, #24]	; (8008580 <_ZN10IridiumSBD4sendEPKc+0x94>)
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f8e1 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 800856e:	bf00      	nop
 8008570:	3708      	adds	r7, #8
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	0801bc70 	.word	0x0801bc70
 800857c:	0801b9b8 	.word	0x0801b9b8
 8008580:	0801ba38 	.word	0x0801ba38

08008584 <_ZN10IridiumSBD8sendlongEPKc>:

void IridiumSBD::sendlong(const char *str)
// Send a long string that might need to be broken up for the I2C port
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b086      	sub	sp, #24
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
   consoleprint(F(">> "));
 800858e:	4942      	ldr	r1, [pc, #264]	; (8008698 <_ZN10IridiumSBD8sendlongEPKc+0x114>)
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 f925 	bl	80087e0 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   this->print((char*) str);//TODO doesn't print otherwise
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	6838      	ldr	r0, [r7, #0]
 800859c:	4798      	blx	r3
   consoleprint(str);
 800859e:	6839      	ldr	r1, [r7, #0]
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 f93b 	bl	800881c <_ZN10IridiumSBD12consoleprintEPKc>
   consoleprint(F("\r\n"));
 80085a6:	493d      	ldr	r1, [pc, #244]	; (800869c <_ZN10IridiumSBD8sendlongEPKc+0x118>)
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 f919 	bl	80087e0 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

   if (this->useSerial)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	7c5b      	ldrb	r3, [r3, #17]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d006      	beq.n	80085c4 <_ZN10IridiumSBD8sendlongEPKc+0x40>
   {
      stream->print(str); // If we are using serial then send it and don't worry about the long length
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	6839      	ldr	r1, [r7, #0]
 80085bc:	4618      	mov	r0, r3
 80085be:	f001 f9cf 	bl	8009960 <_ZN5Print5printEPKc>
         wireport->write(str[i]);
      }
      if (wireport->endTransmission() != 0) //Send data and release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 80085c2:	e065      	b.n	8008690 <_ZN10IridiumSBD8sendlongEPKc+0x10c>
      size_t bytes_to_send = strlen(str); // Send this many bytes in total
 80085c4:	6838      	ldr	r0, [r7, #0]
 80085c6:	f7f7 fe1d 	bl	8000204 <strlen>
 80085ca:	6178      	str	r0, [r7, #20]
      size_t txDataSize = bytes_to_send;
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	60fb      	str	r3, [r7, #12]
      size_t i=0;
 80085d0:	2300      	movs	r3, #0
 80085d2:	613b      	str	r3, [r7, #16]
      while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 1)) // If there are too many bytes to send all in one go
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	2b1f      	cmp	r3, #31
 80085d8:	d92a      	bls.n	8008630 <_ZN10IridiumSBD8sendlongEPKc+0xac>
         nexti = i + (TINY_I2C_BUFFER_LENGTH - 1);
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	331f      	adds	r3, #31
 80085de:	60bb      	str	r3, [r7, #8]
         wireport->beginTransmission((uint8_t)deviceaddress);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	68da      	ldr	r2, [r3, #12]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	7c1b      	ldrb	r3, [r3, #16]
 80085e8:	4619      	mov	r1, r3
 80085ea:	4610      	mov	r0, r2
 80085ec:	f001 fb1e 	bl	8009c2c <_ZN7TwoWire17beginTransmissionEh>
         wireport->write(DATA_REG); // Point to the 'serial register'
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	21ff      	movs	r1, #255	; 0xff
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7fe fa4a 	bl	8006a90 <_ZN7TwoWire5writeEi>
         for (; i<nexti; ++i)
 80085fc:	693a      	ldr	r2, [r7, #16]
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	429a      	cmp	r2, r3
 8008602:	d20c      	bcs.n	800861e <_ZN10IridiumSBD8sendlongEPKc+0x9a>
            wireport->write(str[i]); // Write each byte
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	68d8      	ldr	r0, [r3, #12]
 8008608:	683a      	ldr	r2, [r7, #0]
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	4413      	add	r3, r2
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	4619      	mov	r1, r3
 8008612:	f7fe fa3d 	bl	8006a90 <_ZN7TwoWire5writeEi>
         for (; i<nexti; ++i)
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	3301      	adds	r3, #1
 800861a:	613b      	str	r3, [r7, #16]
 800861c:	e7ee      	b.n	80085fc <_ZN10IridiumSBD8sendlongEPKc+0x78>
         bytes_to_send = bytes_to_send - (TINY_I2C_BUFFER_LENGTH - 1); // Decrease the number of bytes still to send
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	3b1f      	subs	r3, #31
 8008622:	617b      	str	r3, [r7, #20]
         wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	4618      	mov	r0, r3
 800862a:	f001 fb49 	bl	8009cc0 <_ZN7TwoWire15endTransmissionEv>
      while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 1)) // If there are too many bytes to send all in one go
 800862e:	e7d1      	b.n	80085d4 <_ZN10IridiumSBD8sendlongEPKc+0x50>
      wireport->beginTransmission((uint8_t)deviceaddress);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	68da      	ldr	r2, [r3, #12]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	7c1b      	ldrb	r3, [r3, #16]
 8008638:	4619      	mov	r1, r3
 800863a:	4610      	mov	r0, r2
 800863c:	f001 faf6 	bl	8009c2c <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	21ff      	movs	r1, #255	; 0xff
 8008646:	4618      	mov	r0, r3
 8008648:	f7fe fa22 	bl	8006a90 <_ZN7TwoWire5writeEi>
      for (; i<txDataSize; ++i)
 800864c:	693a      	ldr	r2, [r7, #16]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	429a      	cmp	r2, r3
 8008652:	d20c      	bcs.n	800866e <_ZN10IridiumSBD8sendlongEPKc+0xea>
         wireport->write(str[i]);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	68d8      	ldr	r0, [r3, #12]
 8008658:	683a      	ldr	r2, [r7, #0]
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	4413      	add	r3, r2
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	4619      	mov	r1, r3
 8008662:	f7fe fa15 	bl	8006a90 <_ZN7TwoWire5writeEi>
      for (; i<txDataSize; ++i)
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	3301      	adds	r3, #1
 800866a:	613b      	str	r3, [r7, #16]
 800866c:	e7ee      	b.n	800864c <_ZN10IridiumSBD8sendlongEPKc+0xc8>
      if (wireport->endTransmission() != 0) //Send data and release bus
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	4618      	mov	r0, r3
 8008674:	f001 fb24 	bl	8009cc0 <_ZN7TwoWire15endTransmissionEv>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	bf14      	ite	ne
 800867e:	2301      	movne	r3, #1
 8008680:	2300      	moveq	r3, #0
 8008682:	b2db      	uxtb	r3, r3
 8008684:	2b00      	cmp	r3, #0
 8008686:	d003      	beq.n	8008690 <_ZN10IridiumSBD8sendlongEPKc+0x10c>
         diagprint(F("I2C write was not successful!\r\n"));
 8008688:	4905      	ldr	r1, [pc, #20]	; (80086a0 <_ZN10IridiumSBD8sendlongEPKc+0x11c>)
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f850 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8008690:	bf00      	nop
 8008692:	3718      	adds	r7, #24
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	0801bc70 	.word	0x0801bc70
 800869c:	0801b9b8 	.word	0x0801b9b8
 80086a0:	0801ba38 	.word	0x0801ba38

080086a4 <_ZN10IridiumSBD4sendEt>:

void IridiumSBD::send(uint16_t n)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	460b      	mov	r3, r1
 80086ae:	807b      	strh	r3, [r7, #2]
   consoleprint(n);
 80086b0:	887b      	ldrh	r3, [r7, #2]
 80086b2:	4619      	mov	r1, r3
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 f8cb 	bl	8008850 <_ZN10IridiumSBD12consoleprintEt>
   if (this->useSerial)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	7c5b      	ldrb	r3, [r3, #17]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d008      	beq.n	80086d4 <_ZN10IridiumSBD4sendEt+0x30>
   {
      stream->print(n);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	4618      	mov	r0, r3
 80086c8:	887b      	ldrh	r3, [r7, #2]
 80086ca:	220a      	movs	r2, #10
 80086cc:	4619      	mov	r1, r3
 80086ce:	f001 f967 	bl	80099a0 <_ZN5Print5printEii>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(n);
      if (wireport->endTransmission() != 0) //Send data and release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 80086d2:	e026      	b.n	8008722 <_ZN10IridiumSBD4sendEt+0x7e>
      wireport->beginTransmission((uint8_t)deviceaddress);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	68da      	ldr	r2, [r3, #12]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	7c1b      	ldrb	r3, [r3, #16]
 80086dc:	4619      	mov	r1, r3
 80086de:	4610      	mov	r0, r2
 80086e0:	f001 faa4 	bl	8009c2c <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	21ff      	movs	r1, #255	; 0xff
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7fe f9d0 	bl	8006a90 <_ZN7TwoWire5writeEi>
      wireport->print(n);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	4618      	mov	r0, r3
 80086f6:	887b      	ldrh	r3, [r7, #2]
 80086f8:	220a      	movs	r2, #10
 80086fa:	4619      	mov	r1, r3
 80086fc:	f001 f950 	bl	80099a0 <_ZN5Print5printEii>
      if (wireport->endTransmission() != 0) //Send data and release bus
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	4618      	mov	r0, r3
 8008706:	f001 fadb 	bl	8009cc0 <_ZN7TwoWire15endTransmissionEv>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	bf14      	ite	ne
 8008710:	2301      	movne	r3, #1
 8008712:	2300      	moveq	r3, #0
 8008714:	b2db      	uxtb	r3, r3
 8008716:	2b00      	cmp	r3, #0
 8008718:	d003      	beq.n	8008722 <_ZN10IridiumSBD4sendEt+0x7e>
         diagprint(F("I2C write was not successful!\r\n"));
 800871a:	4904      	ldr	r1, [pc, #16]	; (800872c <_ZN10IridiumSBD4sendEt+0x88>)
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 f807 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8008722:	bf00      	nop
 8008724:	3708      	adds	r7, #8
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	0801ba38 	.word	0x0801ba38

08008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>:

void IridiumSBD::diagprint(FlashString str)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	1c5a      	adds	r2, r3, #1
 8008742:	60fa      	str	r2, [r7, #12]
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 8008748:	7afb      	ldrb	r3, [r7, #11]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d005      	beq.n	800875a <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0x2a>
      ISBDDiagsCallback(this, c);
 800874e:	7afb      	ldrb	r3, [r7, #11]
 8008750:	4619      	mov	r1, r3
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f7fe f9c2 	bl	8006adc <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   }
 8008758:	e7f1      	b.n	800873e <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 800875a:	bf00      	nop

   //TODO
   this->print((char*) str);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	6838      	ldr	r0, [r7, #0]
 8008762:	4798      	blx	r3
}
 8008764:	bf00      	nop
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <_ZN10IridiumSBD9diagprintEPKc>:

void IridiumSBD::diagprint(const char *str)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
   while (*str)
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d008      	beq.n	8008790 <_ZN10IridiumSBD9diagprintEPKc+0x24>
      ISBDDiagsCallback(this, *str++);
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	1c5a      	adds	r2, r3, #1
 8008782:	603a      	str	r2, [r7, #0]
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	4619      	mov	r1, r3
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f7fe f9a7 	bl	8006adc <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   while (*str)
 800878e:	e7f2      	b.n	8008776 <_ZN10IridiumSBD9diagprintEPKc+0xa>

   //TODO
   this->print((char*) str);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	6838      	ldr	r0, [r7, #0]
 8008796:	4798      	blx	r3
}
 8008798:	bf00      	nop
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <_ZN10IridiumSBD9diagprintEt>:

void IridiumSBD::diagprint(uint16_t n)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	460b      	mov	r3, r1
 80087aa:	807b      	strh	r3, [r7, #2]
   char str[10];
   sprintf(str, "%u", n);
 80087ac:	887a      	ldrh	r2, [r7, #2]
 80087ae:	f107 030c 	add.w	r3, r7, #12
 80087b2:	490a      	ldr	r1, [pc, #40]	; (80087dc <_ZN10IridiumSBD9diagprintEt+0x3c>)
 80087b4:	4618      	mov	r0, r3
 80087b6:	f00d fbc3 	bl	8015f40 <siprintf>
   diagprint(str);
 80087ba:	f107 030c 	add.w	r3, r7, #12
 80087be:	4619      	mov	r1, r3
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f7ff ffd3 	bl	800876c <_ZN10IridiumSBD9diagprintEPKc>

   //TODO
   this->print((char*) str);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f107 020c 	add.w	r2, r7, #12
 80087ce:	4610      	mov	r0, r2
 80087d0:	4798      	blx	r3
}
 80087d2:	bf00      	nop
 80087d4:	3718      	adds	r7, #24
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	0801bc74 	.word	0x0801bc74

080087e0 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>:

void IridiumSBD::consoleprint(FlashString str)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	1c5a      	adds	r2, r3, #1
 80087f2:	60fa      	str	r2, [r7, #12]
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 80087f8:	7afb      	ldrb	r3, [r7, #11]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d005      	beq.n	800880a <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0x2a>
      ISBDConsoleCallback(this, c);
 80087fe:	7afb      	ldrb	r3, [r7, #11]
 8008800:	4619      	mov	r1, r3
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f7fe f95e 	bl	8006ac4 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   }
 8008808:	e7f1      	b.n	80087ee <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 800880a:	bf00      	nop

   //TODO
   this->print((char*) str);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	6838      	ldr	r0, [r7, #0]
 8008812:	4798      	blx	r3
}
 8008814:	bf00      	nop
 8008816:	3710      	adds	r7, #16
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <_ZN10IridiumSBD12consoleprintEPKc>:

void IridiumSBD::consoleprint(const char *str)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
   while (*str)
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d008      	beq.n	8008840 <_ZN10IridiumSBD12consoleprintEPKc+0x24>
      ISBDConsoleCallback(this, *str++);
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	1c5a      	adds	r2, r3, #1
 8008832:	603a      	str	r2, [r7, #0]
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	4619      	mov	r1, r3
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f7fe f943 	bl	8006ac4 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   while (*str)
 800883e:	e7f2      	b.n	8008826 <_ZN10IridiumSBD12consoleprintEPKc+0xa>

   //TODO
   this->print((char*) str);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	6838      	ldr	r0, [r7, #0]
 8008846:	4798      	blx	r3
}
 8008848:	bf00      	nop
 800884a:	3708      	adds	r7, #8
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <_ZN10IridiumSBD12consoleprintEt>:

void IridiumSBD::consoleprint(uint16_t n)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b086      	sub	sp, #24
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	460b      	mov	r3, r1
 800885a:	807b      	strh	r3, [r7, #2]
   char str[10];
   sprintf(str, "%u", n);
 800885c:	887a      	ldrh	r2, [r7, #2]
 800885e:	f107 030c 	add.w	r3, r7, #12
 8008862:	490a      	ldr	r1, [pc, #40]	; (800888c <_ZN10IridiumSBD12consoleprintEt+0x3c>)
 8008864:	4618      	mov	r0, r3
 8008866:	f00d fb6b 	bl	8015f40 <siprintf>
   consoleprint(str); //TODO
 800886a:	f107 030c 	add.w	r3, r7, #12
 800886e:	4619      	mov	r1, r3
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f7ff ffd3 	bl	800881c <_ZN10IridiumSBD12consoleprintEPKc>
   //consoleprint((const char*) str);
   this->print((char*) str);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f107 020c 	add.w	r2, r7, #12
 800887e:	4610      	mov	r0, r2
 8008880:	4798      	blx	r3
}
 8008882:	bf00      	nop
 8008884:	3718      	adds	r7, #24
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	0801bc74 	.word	0x0801bc74

08008890 <_ZN10IridiumSBD12consoleprintEc>:

void IridiumSBD::consoleprint(char c)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	460b      	mov	r3, r1
 800889a:	70fb      	strb	r3, [r7, #3]
   ISBDConsoleCallback(this, c);
 800889c:	78fb      	ldrb	r3, [r7, #3]
 800889e:	4619      	mov	r1, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f7fe f90f 	bl	8006ac4 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
}
 80088a6:	bf00      	nop
 80088a8:	3708      	adds	r7, #8
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
	...

080088b0 <_ZN10IridiumSBD11SBDRINGSeenEv>:

void IridiumSBD::SBDRINGSeen()
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
   ringAsserted = true;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
   diagprint(F("SBDRING alert seen!\r\n"));
 80088c0:	4903      	ldr	r1, [pc, #12]	; (80088d0 <_ZN10IridiumSBD11SBDRINGSeenEv+0x20>)
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f7ff ff34 	bl	8008730 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80088c8:	bf00      	nop
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	0801bc78 	.word	0x0801bc78

080088d4 <_ZN10IridiumSBD13filterSBDRINGEv>:
// Read characters until we find one that doesn't match SBDRING
// If nextChar is -1 it means we are still entertaining a possible
// match with SBDRING\r\n.  Once we find a mismatch, stuff it into
// nextChar.
void IridiumSBD::filterSBDRING()
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
   if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	7c5b      	ldrb	r3, [r3, #17]
 80088e0:	f083 0301 	eor.w	r3, r3, #1
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d002      	beq.n	80088f0 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c>
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 f940 	bl	8008b70 <_ZN10IridiumSBD13check9603dataEv>
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	7c5b      	ldrb	r3, [r3, #17]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00b      	beq.n	8008910 <_ZN10IridiumSBD13filterSBDRINGEv+0x3c>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	689a      	ldr	r2, [r3, #8]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	3308      	adds	r3, #8
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4610      	mov	r0, r2
 8008908:	4798      	blx	r3
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	dc0c      	bgt.n	800892a <_ZN10IridiumSBD13filterSBDRINGEv+0x56>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	7c5b      	ldrb	r3, [r3, #17]
 8008914:	f083 0301 	eor.w	r3, r3, #1
 8008918:	b2db      	uxtb	r3, r3
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00d      	beq.n	800893a <_ZN10IridiumSBD13filterSBDRINGEv+0x66>
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 fa56 	bl	8008dd0 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8008924:	4603      	mov	r3, r0
 8008926:	2b00      	cmp	r3, #0
 8008928:	dd07      	ble.n	800893a <_ZN10IridiumSBD13filterSBDRINGEv+0x66>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008934:	d101      	bne.n	800893a <_ZN10IridiumSBD13filterSBDRINGEv+0x66>
 8008936:	2301      	movs	r3, #1
 8008938:	e000      	b.n	800893c <_ZN10IridiumSBD13filterSBDRINGEv+0x68>
 800893a:	2300      	movs	r3, #0
 800893c:	2b00      	cmp	r3, #0
 800893e:	f000 80af 	beq.w	8008aa0 <_ZN10IridiumSBD13filterSBDRINGEv+0x1cc>
   {
      char c;
      if (this->useSerial)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	7c5b      	ldrb	r3, [r3, #17]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00b      	beq.n	8008962 <_ZN10IridiumSBD13filterSBDRINGEv+0x8e>
      {
         c = stream->read();
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	689a      	ldr	r2, [r3, #8]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	330c      	adds	r3, #12
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4610      	mov	r0, r2
 800895a:	4798      	blx	r3
 800895c:	4603      	mov	r3, r0
 800895e:	73fb      	strb	r3, [r7, #15]
 8008960:	e004      	b.n	800896c <_ZN10IridiumSBD13filterSBDRINGEv+0x98>
      }
      else
      {
         c = i2cSerRead();
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 fa4c 	bl	8008e00 <_ZN10IridiumSBD10i2cSerReadEv>
 8008968:	4603      	mov	r3, r0
 800896a:	73fb      	strb	r3, [r7, #15]
      }
      consoleprint(c);
 800896c:	7bfb      	ldrb	r3, [r7, #15]
 800896e:	4619      	mov	r1, r3
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f7ff ff8d 	bl	8008890 <_ZN10IridiumSBD12consoleprintEc>
      if (*head != 0 && c == *head)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	f000 8087 	beq.w	8008a92 <_ZN10IridiumSBD13filterSBDRINGEv+0x1be>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	7bfa      	ldrb	r2, [r7, #15]
 800898e:	429a      	cmp	r2, r3
 8008990:	d17f      	bne.n	8008a92 <_ZN10IridiumSBD13filterSBDRINGEv+0x1be>
      {
         ++head;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008998:	1c5a      	adds	r2, r3, #1
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
         if (*head == 0)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d10d      	bne.n	80089c8 <_ZN10IridiumSBD13filterSBDRINGEv+0xf4>
         {
            SBDRINGSeen();
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f7ff ff7f 	bl	80088b0 <_ZN10IridiumSBD11SBDRINGSeenEv>
            head = tail = SBDRING;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4a3c      	ldr	r2, [pc, #240]	; (8008aa8 <_ZN10IridiumSBD13filterSBDRINGEv+0x1d4>)
 80089b6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
            {
               --head;
               nextChar = c;
            }
         }
 80089c6:	e069      	b.n	8008a9c <_ZN10IridiumSBD13filterSBDRINGEv+0x1c8>
            for (unsigned long start = millis(); ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) && millis() - start < FILTERTIMEOUT; );
 80089c8:	f001 fdf0 	bl	800a5ac <HAL_GetTick>
 80089cc:	60b8      	str	r0, [r7, #8]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	7c5b      	ldrb	r3, [r3, #17]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00b      	beq.n	80089ee <_ZN10IridiumSBD13filterSBDRINGEv+0x11a>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	689a      	ldr	r2, [r3, #8]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	3308      	adds	r3, #8
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4610      	mov	r0, r2
 80089e6:	4798      	blx	r3
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00c      	beq.n	8008a08 <_ZN10IridiumSBD13filterSBDRINGEv+0x134>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	7c5b      	ldrb	r3, [r3, #17]
 80089f2:	f083 0301 	eor.w	r3, r3, #1
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d00e      	beq.n	8008a1a <_ZN10IridiumSBD13filterSBDRINGEv+0x146>
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 f9e7 	bl	8008dd0 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d108      	bne.n	8008a1a <_ZN10IridiumSBD13filterSBDRINGEv+0x146>
 8008a08:	f001 fdd0 	bl	800a5ac <HAL_GetTick>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	1ad3      	subs	r3, r2, r3
 8008a12:	2b09      	cmp	r3, #9
 8008a14:	d801      	bhi.n	8008a1a <_ZN10IridiumSBD13filterSBDRINGEv+0x146>
 8008a16:	2301      	movs	r3, #1
 8008a18:	e000      	b.n	8008a1c <_ZN10IridiumSBD13filterSBDRINGEv+0x148>
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d000      	beq.n	8008a22 <_ZN10IridiumSBD13filterSBDRINGEv+0x14e>
 8008a20:	e7d5      	b.n	80089ce <_ZN10IridiumSBD13filterSBDRINGEv+0xfa>
            if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	7c5b      	ldrb	r3, [r3, #17]
 8008a26:	f083 0301 	eor.w	r3, r3, #1
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d002      	beq.n	8008a36 <_ZN10IridiumSBD13filterSBDRINGEv+0x162>
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 f89d 	bl	8008b70 <_ZN10IridiumSBD13check9603dataEv>
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	7c5b      	ldrb	r3, [r3, #17]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00b      	beq.n	8008a56 <_ZN10IridiumSBD13filterSBDRINGEv+0x182>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	689a      	ldr	r2, [r3, #8]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	3308      	adds	r3, #8
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4610      	mov	r0, r2
 8008a4e:	4798      	blx	r3
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00c      	beq.n	8008a70 <_ZN10IridiumSBD13filterSBDRINGEv+0x19c>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	7c5b      	ldrb	r3, [r3, #17]
 8008a5a:	f083 0301 	eor.w	r3, r3, #1
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d007      	beq.n	8008a74 <_ZN10IridiumSBD13filterSBDRINGEv+0x1a0>
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 f9b3 	bl	8008dd0 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d101      	bne.n	8008a74 <_ZN10IridiumSBD13filterSBDRINGEv+0x1a0>
 8008a70:	2301      	movs	r3, #1
 8008a72:	e000      	b.n	8008a76 <_ZN10IridiumSBD13filterSBDRINGEv+0x1a2>
 8008a74:	2300      	movs	r3, #0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d010      	beq.n	8008a9c <_ZN10IridiumSBD13filterSBDRINGEv+0x1c8>
               --head;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a80:	1e5a      	subs	r2, r3, #1
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
               nextChar = c;
 8008a88:	7bfa      	ldrb	r2, [r7, #15]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
         }
 8008a90:	e004      	b.n	8008a9c <_ZN10IridiumSBD13filterSBDRINGEv+0x1c8>
      }
      else
      {
         nextChar = c;
 8008a92:	7bfa      	ldrb	r2, [r7, #15]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8008a9a:	e729      	b.n	80088f0 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c>
         }
 8008a9c:	bf00      	nop
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 8008a9e:	e727      	b.n	80088f0 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c>
      }
   }
}
 8008aa0:	bf00      	nop
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	0801c5ec 	.word	0x0801c5ec

08008aac <_ZN10IridiumSBD17filteredavailableEv>:

const char IridiumSBD::SBDRING[] = "SBDRING\r\n";

int IridiumSBD::filteredavailable()
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f7ff ff0d 	bl	80088d4 <_ZN10IridiumSBD13filterSBDRINGEv>
   return head - tail + (nextChar != -1 ? 1 : 0);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ac6:	1ad3      	subs	r3, r2, r3
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8008ace:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008ad2:	d001      	beq.n	8008ad8 <_ZN10IridiumSBD17filteredavailableEv+0x2c>
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	e000      	b.n	8008ada <_ZN10IridiumSBD17filteredavailableEv+0x2e>
 8008ad8:	2200      	movs	r2, #0
 8008ada:	4413      	add	r3, r2
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3708      	adds	r7, #8
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <_ZN10IridiumSBD12filteredreadEv>:

int IridiumSBD::filteredread()
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f7ff fef1 	bl	80088d4 <_ZN10IridiumSBD13filterSBDRINGEv>

   // Use up the queue first
   if (head > tail)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d91c      	bls.n	8008b3c <_ZN10IridiumSBD12filteredreadEv+0x58>
   {
      char c = *tail++;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b08:	1c59      	adds	r1, r3, #1
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	73bb      	strb	r3, [r7, #14]
      if (head == tail)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d109      	bne.n	8008b38 <_ZN10IridiumSBD12filteredreadEv+0x54>
         head = tail = SBDRING;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	4a11      	ldr	r2, [pc, #68]	; (8008b6c <_ZN10IridiumSBD12filteredreadEv+0x88>)
 8008b28:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      return c;
 8008b38:	7bbb      	ldrb	r3, [r7, #14]
 8008b3a:	e012      	b.n	8008b62 <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   // Then the "extra" char
   else if (nextChar != -1)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b46:	d00a      	beq.n	8008b5e <_ZN10IridiumSBD12filteredreadEv+0x7a>
   {
      char c = (char)nextChar;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008b4e:	73fb      	strb	r3, [r7, #15]
      nextChar = -1;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f04f 32ff 	mov.w	r2, #4294967295
 8008b56:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      return c;
 8008b5a:	7bfb      	ldrb	r3, [r7, #15]
 8008b5c:	e001      	b.n	8008b62 <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   return -1;
 8008b5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	0801c5ec 	.word	0x0801c5ec

08008b70 <_ZN10IridiumSBD13check9603dataEv>:

//Checks the number of available serial bytes
//Reads the available serial bytes (if any) and stores them in i2c_ser_buffer
void IridiumSBD::check9603data()
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  if (millis() - lastCheck >= I2C_POLLING_WAIT_MS)
 8008b78:	f001 fd18 	bl	800a5ac <HAL_GetTick>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b82:	1ad3      	subs	r3, r2, r3
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	bf2c      	ite	cs
 8008b8e:	2301      	movcs	r3, #1
 8008b90:	2300      	movcc	r3, #0
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	f000 80b8 	beq.w	8008d0a <_ZN10IridiumSBD13check9603dataEv+0x19a>
  {
    //Check how many serial bytes are waiting to be read
    uint16_t bytesAvailable = 0;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	81fb      	strh	r3, [r7, #14]
    wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	68da      	ldr	r2, [r3, #12]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	7c1b      	ldrb	r3, [r3, #16]
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	4610      	mov	r0, r2
 8008baa:	f001 f83f 	bl	8009c2c <_ZN7TwoWire17beginTransmissionEh>
    wireport->write(LEN_REG); // Point to the serial buffer length
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	21fd      	movs	r1, #253	; 0xfd
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7fd ff6b 	bl	8006a90 <_ZN7TwoWire5writeEi>
    wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f001 f87e 	bl	8009cc0 <_ZN7TwoWire15endTransmissionEv>
    if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)2) == 2) // Request two bytes
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	68d8      	ldr	r0, [r3, #12]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	7c1b      	ldrb	r3, [r3, #16]
 8008bcc:	2202      	movs	r2, #2
 8008bce:	4619      	mov	r1, r3
 8008bd0:	f001 f819 	bl	8009c06 <_ZN7TwoWire11requestFromEhh>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b02      	cmp	r3, #2
 8008bd8:	bf0c      	ite	eq
 8008bda:	2301      	moveq	r3, #1
 8008bdc:	2300      	movne	r3, #0
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d01d      	beq.n	8008c20 <_ZN10IridiumSBD13check9603dataEv+0xb0>
    {
      uint8_t msb = wireport->read();
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	68da      	ldr	r2, [r3, #12]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	330c      	adds	r3, #12
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4610      	mov	r0, r2
 8008bf4:	4798      	blx	r3
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	737b      	strb	r3, [r7, #13]
      uint8_t lsb = wireport->read();
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	68da      	ldr	r2, [r3, #12]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	330c      	adds	r3, #12
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4610      	mov	r0, r2
 8008c0a:	4798      	blx	r3
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	733b      	strb	r3, [r7, #12]
      bytesAvailable = (((uint16_t)msb) << 8) | lsb;
 8008c10:	7b7b      	ldrb	r3, [r7, #13]
 8008c12:	021b      	lsls	r3, r3, #8
 8008c14:	b21a      	sxth	r2, r3
 8008c16:	7b3b      	ldrb	r3, [r7, #12]
 8008c18:	b21b      	sxth	r3, r3
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	b21b      	sxth	r3, r3
 8008c1e:	81fb      	strh	r3, [r7, #14]
    }

    //Now read the serial bytes (if any)
    if (bytesAvailable > 0)
 8008c20:	89fb      	ldrh	r3, [r7, #14]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d06c      	beq.n	8008d00 <_ZN10IridiumSBD13check9603dataEv+0x190>
    {
      // Request the bytes
      // Poke them into the i2c_serial buffer
      // Release the bus afterwards
      wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	68da      	ldr	r2, [r3, #12]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	7c1b      	ldrb	r3, [r3, #16]
 8008c2e:	4619      	mov	r1, r3
 8008c30:	4610      	mov	r0, r2
 8008c32:	f000 fffb 	bl	8009c2c <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the serial buffer
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	21ff      	movs	r1, #255	; 0xff
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7fd ff27 	bl	8006a90 <_ZN7TwoWire5writeEi>
      wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	4618      	mov	r0, r3
 8008c48:	f001 f83a 	bl	8009cc0 <_ZN7TwoWire15endTransmissionEv>
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 8008c4c:	89fb      	ldrh	r3, [r7, #14]
 8008c4e:	2b08      	cmp	r3, #8
 8008c50:	d92c      	bls.n	8008cac <_ZN10IridiumSBD13check9603dataEv+0x13c>
      {
        wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)SER_PACKET_SIZE, (uint8_t)false); // Request SER_PACKET_SIZE bytes, don't release the bus
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	68d8      	ldr	r0, [r3, #12]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	7c19      	ldrb	r1, [r3, #16]
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	2208      	movs	r2, #8
 8008c5e:	f000 ff97 	bl	8009b90 <_ZN7TwoWire11requestFromEhhh>
        while (wireport->available())
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	68da      	ldr	r2, [r3, #12]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	3308      	adds	r3, #8
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4610      	mov	r0, r2
 8008c72:	4798      	blx	r3
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	bf14      	ite	ne
 8008c7a:	2301      	movne	r3, #1
 8008c7c:	2300      	moveq	r3, #0
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d00f      	beq.n	8008ca4 <_ZN10IridiumSBD13check9603dataEv+0x134>
        {
          i2cSerPoke(wireport->read()); // Read and store each byte
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	68da      	ldr	r2, [r3, #12]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	330c      	adds	r3, #12
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4610      	mov	r0, r2
 8008c94:	4798      	blx	r3
 8008c96:	4603      	mov	r3, r0
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 f8d5 	bl	8008e4c <_ZN10IridiumSBD10i2cSerPokeEc>
        while (wireport->available())
 8008ca2:	e7de      	b.n	8008c62 <_ZN10IridiumSBD13check9603dataEv+0xf2>
        }
        bytesAvailable -= SER_PACKET_SIZE; // Decrease the number of bytes available by SER_PACKET_SIZE
 8008ca4:	89fb      	ldrh	r3, [r7, #14]
 8008ca6:	3b08      	subs	r3, #8
 8008ca8:	81fb      	strh	r3, [r7, #14]
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 8008caa:	e7cf      	b.n	8008c4c <_ZN10IridiumSBD13check9603dataEv+0xdc>
      }
      wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)bytesAvailable); // Request remaining bytes, release the bus
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	68d8      	ldr	r0, [r3, #12]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	7c1b      	ldrb	r3, [r3, #16]
 8008cb4:	89fa      	ldrh	r2, [r7, #14]
 8008cb6:	b2d2      	uxtb	r2, r2
 8008cb8:	4619      	mov	r1, r3
 8008cba:	f000 ffa4 	bl	8009c06 <_ZN7TwoWire11requestFromEhh>
      while (wireport->available())
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	68da      	ldr	r2, [r3, #12]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	3308      	adds	r3, #8
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4610      	mov	r0, r2
 8008cce:	4798      	blx	r3
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	bf14      	ite	ne
 8008cd6:	2301      	movne	r3, #1
 8008cd8:	2300      	moveq	r3, #0
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00f      	beq.n	8008d00 <_ZN10IridiumSBD13check9603dataEv+0x190>
      {
        i2cSerPoke(wireport->read()); // Read and store each byte
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	68da      	ldr	r2, [r3, #12]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	330c      	adds	r3, #12
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4610      	mov	r0, r2
 8008cf0:	4798      	blx	r3
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 f8a7 	bl	8008e4c <_ZN10IridiumSBD10i2cSerPokeEc>
      while (wireport->available())
 8008cfe:	e7de      	b.n	8008cbe <_ZN10IridiumSBD13check9603dataEv+0x14e>
      }
    }

    lastCheck = millis(); //Put off checking to avoid excessive I2C bus traffic
 8008d00:	f001 fc54 	bl	800a5ac <HAL_GetTick>
 8008d04:	4602      	mov	r2, r0
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8008d0a:	bf00      	nop
 8008d0c:	3710      	adds	r7, #16
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <_ZN10IridiumSBD13check9603pinsEv>:

//Reads the IO pins and update IO_REGISTER
void IridiumSBD::check9603pins()
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b082      	sub	sp, #8
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
  //Read the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	68da      	ldr	r2, [r3, #12]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	7c1b      	ldrb	r3, [r3, #16]
 8008d22:	4619      	mov	r1, r3
 8008d24:	4610      	mov	r0, r2
 8008d26:	f000 ff81 	bl	8009c2c <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	2110      	movs	r1, #16
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7fd fead 	bl	8006a90 <_ZN7TwoWire5writeEi>
  wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f000 ffc0 	bl	8009cc0 <_ZN7TwoWire15endTransmissionEv>
  if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)1) == 1) // Request one byte from the IO register
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	68d8      	ldr	r0, [r3, #12]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	7c1b      	ldrb	r3, [r3, #16]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	f000 ff5b 	bl	8009c06 <_ZN7TwoWire11requestFromEhh>
 8008d50:	4603      	mov	r3, r0
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	bf0c      	ite	eq
 8008d56:	2301      	moveq	r3, #1
 8008d58:	2300      	movne	r3, #0
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00d      	beq.n	8008d7c <_ZN10IridiumSBD13check9603pinsEv+0x6a>
  {
    IO_REGISTER = wireport->read(); // Read the IO register
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	68da      	ldr	r2, [r3, #12]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	330c      	adds	r3, #12
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4610      	mov	r0, r2
 8008d70:	4798      	blx	r3
 8008d72:	4603      	mov	r3, r0
 8008d74:	b2da      	uxtb	r2, r3
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
}
 8008d7c:	bf00      	nop
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <_ZN10IridiumSBD11set9603pinsEh>:

//Set the IO pins
void IridiumSBD::set9603pins(uint8_t pins)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	70fb      	strb	r3, [r7, #3]
  //Write to the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	68da      	ldr	r2, [r3, #12]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	7c1b      	ldrb	r3, [r3, #16]
 8008d98:	4619      	mov	r1, r3
 8008d9a:	4610      	mov	r0, r2
 8008d9c:	f000 ff46 	bl	8009c2c <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	2110      	movs	r1, #16
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fd fe72 	bl	8006a90 <_ZN7TwoWire5writeEi>
  wireport->write(pins); // Set the pins
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	68da      	ldr	r2, [r3, #12]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	78f9      	ldrb	r1, [r7, #3]
 8008dba:	4610      	mov	r0, r2
 8008dbc:	4798      	blx	r3
  wireport->endTransmission(); // Send data and surrender the bus
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f000 ff7c 	bl	8009cc0 <_ZN7TwoWire15endTransmissionEv>
}
 8008dc8:	bf00      	nop
 8008dca:	3708      	adds	r7, #8
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <_ZN10IridiumSBD15i2cSerAvailableEv>:
    return(ISBD_SUCCESS);
}

// I2C_SER functions
int IridiumSBD::i2cSerAvailable()
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  return (i2c_ser_buffer_tail + I2C_SER_MAX_BUFF - i2c_ser_buffer_head) % I2C_SER_MAX_BUFF;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ddc:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008de4:	1ad3      	subs	r3, r2, r3
 8008de6:	425a      	negs	r2, r3
 8008de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008dec:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8008df0:	bf58      	it	pl
 8008df2:	4253      	negpl	r3, r2
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <_ZN10IridiumSBD10i2cSerReadEv>:

int IridiumSBD::i2cSerRead()
{
 8008e00:	b480      	push	{r7}
 8008e02:	b085      	sub	sp, #20
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  // Empty buffer?
  if (i2c_ser_buffer_head == i2c_ser_buffer_tail)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d102      	bne.n	8008e1a <_ZN10IridiumSBD10i2cSerReadEv+0x1a>
    return -1;
 8008e14:	f04f 33ff 	mov.w	r3, #4294967295
 8008e18:	e012      	b.n	8008e40 <_ZN10IridiumSBD10i2cSerReadEv+0x40>

  // Read from "head"
  uint8_t d = i2c_ser_buffer[i2c_ser_buffer_head]; // grab next byte
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	4413      	add	r3, r2
 8008e22:	7c9b      	ldrb	r3, [r3, #18]
 8008e24:	73fb      	strb	r3, [r7, #15]
  i2c_ser_buffer_head = (i2c_ser_buffer_head + 1) % I2C_SER_MAX_BUFF; // update head
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	425a      	negs	r2, r3
 8008e2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e32:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8008e36:	bf58      	it	pl
 8008e38:	4253      	negpl	r3, r2
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	6593      	str	r3, [r2, #88]	; 0x58
  return d;
 8008e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3714      	adds	r7, #20
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <_ZN10IridiumSBD10i2cSerPokeEc>:

void IridiumSBD::i2cSerPoke(char serChar)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	460b      	mov	r3, r1
 8008e56:	70fb      	strb	r3, [r7, #3]
  // Calculate the new value for the tail
  int next = (i2c_ser_buffer_tail + 1) % I2C_SER_MAX_BUFF;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	425a      	negs	r2, r3
 8008e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e64:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8008e68:	bf58      	it	pl
 8008e6a:	4253      	negpl	r3, r2
 8008e6c:	60fb      	str	r3, [r7, #12]
  // If the buffer is not full (i.e. we are not about to overwrite the head byte)
  // If the buffer is full, the byte is lost
  if (next != i2c_ser_buffer_head)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d008      	beq.n	8008e8a <_ZN10IridiumSBD10i2cSerPokeEc+0x3e>
  {
    // save new data in buffer: tail points to where byte goes
    i2c_ser_buffer[i2c_ser_buffer_tail] = serChar; // save new byte
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	4413      	add	r3, r2
 8008e80:	78fa      	ldrb	r2, [r7, #3]
 8008e82:	749a      	strb	r2, [r3, #18]
    i2c_ser_buffer_tail = next;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 8008e8a:	bf00      	nop
 8008e8c:	3714      	adds	r7, #20
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
	...

08008e98 <_ZN10IridiumSBD20internalClearBuffersEi>:

int IridiumSBD::internalClearBuffers(int buffers)
// Clear the MO/MT/Both buffers
// Defaults to clearing the MO buffer to avoid resending old messages
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af02      	add	r7, sp, #8
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
   if (this->asleep)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d001      	beq.n	8008eb0 <_ZN10IridiumSBD20internalClearBuffersEi+0x18>
      return ISBD_IS_ASLEEP;
 8008eac:	230a      	movs	r3, #10
 8008eae:	e032      	b.n	8008f16 <_ZN10IridiumSBD20internalClearBuffersEi+0x7e>

   if (buffers == ISBD_CLEAR_MT) // Clear MT buffer
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d106      	bne.n	8008ec4 <_ZN10IridiumSBD20internalClearBuffersEi+0x2c>
   {
      send(F("AT+SBDD1\r"));
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	2201      	movs	r2, #1
 8008eba:	4919      	ldr	r1, [pc, #100]	; (8008f20 <_ZN10IridiumSBD20internalClearBuffersEi+0x88>)
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f7ff fab9 	bl	8008434 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
 8008ec2:	e00f      	b.n	8008ee4 <_ZN10IridiumSBD20internalClearBuffersEi+0x4c>
   }
   else if (buffers == ISBD_CLEAR_BOTH) // Clear both buffers
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	d106      	bne.n	8008ed8 <_ZN10IridiumSBD20internalClearBuffersEi+0x40>
   {
      send(F("AT+SBDD2\r"));
 8008eca:	2301      	movs	r3, #1
 8008ecc:	2201      	movs	r2, #1
 8008ece:	4915      	ldr	r1, [pc, #84]	; (8008f24 <_ZN10IridiumSBD20internalClearBuffersEi+0x8c>)
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f7ff faaf 	bl	8008434 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
 8008ed6:	e005      	b.n	8008ee4 <_ZN10IridiumSBD20internalClearBuffersEi+0x4c>
   }
   else // Clear MO buffer
   {
      send(F("AT+SBDD0\r"));
 8008ed8:	2301      	movs	r3, #1
 8008eda:	2201      	movs	r2, #1
 8008edc:	4912      	ldr	r1, [pc, #72]	; (8008f28 <_ZN10IridiumSBD20internalClearBuffersEi+0x90>)
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f7ff faa8 	bl	8008434 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   }
   if (!waitForATResponse())
 8008ee4:	4b11      	ldr	r3, [pc, #68]	; (8008f2c <_ZN10IridiumSBD20internalClearBuffersEi+0x94>)
 8008ee6:	9300      	str	r3, [sp, #0]
 8008ee8:	2300      	movs	r3, #0
 8008eea:	2200      	movs	r2, #0
 8008eec:	2100      	movs	r1, #0
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f7fe fe3e 	bl	8007b70 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	f083 0301 	eor.w	r3, r3, #1
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d009      	beq.n	8008f14 <_ZN10IridiumSBD20internalClearBuffersEi+0x7c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f7fe fef3 	bl	8007cec <_ZN10IridiumSBD9cancelledEv>
 8008f06:	4603      	mov	r3, r0
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d001      	beq.n	8008f10 <_ZN10IridiumSBD20internalClearBuffersEi+0x78>
 8008f0c:	2304      	movs	r3, #4
 8008f0e:	e002      	b.n	8008f16 <_ZN10IridiumSBD20internalClearBuffersEi+0x7e>
 8008f10:	2303      	movs	r3, #3
 8008f12:	e000      	b.n	8008f16 <_ZN10IridiumSBD20internalClearBuffersEi+0x7e>

   return ISBD_SUCCESS;
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	0801bcc4 	.word	0x0801bcc4
 8008f24:	0801bcd0 	.word	0x0801bcd0
 8008f28:	0801bcdc 	.word	0x0801bcdc
 8008f2c:	0801b60c 	.word	0x0801b60c

08008f30 <_ZN10IridiumSBD15internalGetIMEIEPcj>:

int IridiumSBD::internalGetIMEI(char *IMEI, size_t bufferSize)
// Get the IMEI
// https://github.com/mikalhart/IridiumSBD/pull/21
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b086      	sub	sp, #24
 8008f34:	af02      	add	r7, sp, #8
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	607a      	str	r2, [r7, #4]
   if (this->asleep)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d001      	beq.n	8008f4a <_ZN10IridiumSBD15internalGetIMEIEPcj+0x1a>
      return ISBD_IS_ASLEEP;
 8008f46:	230a      	movs	r3, #10
 8008f48:	e023      	b.n	8008f92 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>

   if (bufferSize < 16) // IMEI is 15 digits
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2b0f      	cmp	r3, #15
 8008f4e:	d801      	bhi.n	8008f54 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x24>
      return ISBD_RX_OVERFLOW;
 8008f50:	2308      	movs	r3, #8
 8008f52:	e01e      	b.n	8008f92 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>

   send(F("AT+CGSN\r"));
 8008f54:	2301      	movs	r3, #1
 8008f56:	2201      	movs	r2, #1
 8008f58:	4910      	ldr	r1, [pc, #64]	; (8008f9c <_ZN10IridiumSBD15internalGetIMEIEPcj+0x6c>)
 8008f5a:	68f8      	ldr	r0, [r7, #12]
 8008f5c:	f7ff fa6a 	bl	8008434 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(IMEI, bufferSize, "\n"))
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	4b0f      	ldr	r3, [pc, #60]	; (8008fa0 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x70>)
 8008f64:	9300      	str	r3, [sp, #0]
 8008f66:	4b0f      	ldr	r3, [pc, #60]	; (8008fa4 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x74>)
 8008f68:	68b9      	ldr	r1, [r7, #8]
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f7fe fe00 	bl	8007b70 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8008f70:	4603      	mov	r3, r0
 8008f72:	f083 0301 	eor.w	r3, r3, #1
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d009      	beq.n	8008f90 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x60>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f7fe feb5 	bl	8007cec <_ZN10IridiumSBD9cancelledEv>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d001      	beq.n	8008f8c <_ZN10IridiumSBD15internalGetIMEIEPcj+0x5c>
 8008f88:	2304      	movs	r3, #4
 8008f8a:	e002      	b.n	8008f92 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	e000      	b.n	8008f92 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>

   return ISBD_SUCCESS;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	0801bce8 	.word	0x0801bce8
 8008fa0:	0801b60c 	.word	0x0801b60c
 8008fa4:	0801bcf4 	.word	0x0801bcf4

08008fa8 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE>:
}
#endif


//uint8_t IridiumSBD::MRT_Iridium_setup(UART_HandleTypeDef huart,POWERPROFILE profile){ TODO??
uint8_t IridiumSBD::MRT_Iridium_setup(uint8_t timeout, uint8_t i2c_bus, void (*iridium_print)(char*)){
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b092      	sub	sp, #72	; 0x48
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	607b      	str	r3, [r7, #4]
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	72fb      	strb	r3, [r7, #11]
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	72bb      	strb	r3, [r7, #10]
	this->print = iridium_print;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	601a      	str	r2, [r3, #0]
	this->print((char*) "\r\nIridium 9603N Init\r\n");
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	485b      	ldr	r0, [pc, #364]	; (8009134 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x18c>)
 8008fc6:	4798      	blx	r3

	this->print((char*) "\tSetting I2C bus...");
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	485a      	ldr	r0, [pc, #360]	; (8009138 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x190>)
 8008fce:	4798      	blx	r3
	if (i2c_bus == 1){
 8008fd0:	7abb      	ldrb	r3, [r7, #10]
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d103      	bne.n	8008fde <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x36>
		this->wireport = &Wire;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	4a58      	ldr	r2, [pc, #352]	; (800913c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x194>)
 8008fda:	60da      	str	r2, [r3, #12]
 8008fdc:	e00c      	b.n	8008ff8 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x50>
	}
	else if (i2c_bus == 2){
 8008fde:	7abb      	ldrb	r3, [r7, #10]
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	d103      	bne.n	8008fec <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x44>
		this->wireport = &Wire1;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	4a56      	ldr	r2, [pc, #344]	; (8009140 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x198>)
 8008fe8:	60da      	str	r2, [r3, #12]
 8008fea:	e005      	b.n	8008ff8 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x50>
	}
	else if (i2c_bus == 3){
 8008fec:	7abb      	ldrb	r3, [r7, #10]
 8008fee:	2b03      	cmp	r3, #3
 8008ff0:	d102      	bne.n	8008ff8 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x50>
		this->wireport = &Wire2;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	4a53      	ldr	r2, [pc, #332]	; (8009144 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x19c>)
 8008ff6:	60da      	str	r2, [r3, #12]
	}
	this->print((char*) "OK\r\n");
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4852      	ldr	r0, [pc, #328]	; (8009148 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 8008ffe:	4798      	blx	r3

	this->print((char*) "\tChecking device connection...");
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4851      	ldr	r0, [pc, #324]	; (800914c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a4>)
 8009006:	4798      	blx	r3
	while(!this->isConnected()){
 8009008:	68f8      	ldr	r0, [r7, #12]
 800900a:	f7fe f88d 	bl	8007128 <_ZN10IridiumSBD11isConnectedEv>
 800900e:	4603      	mov	r3, r0
 8009010:	f083 0301 	eor.w	r3, r3, #1
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2b00      	cmp	r3, #0
 8009018:	d020      	beq.n	800905c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0xb4>
		HAL_Delay(300);
 800901a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800901e:	f001 fad1 	bl	800a5c4 <HAL_Delay>
		this->print((char*) "\r\tChecking device connection   ");
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	484a      	ldr	r0, [pc, #296]	; (8009150 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a8>)
 8009028:	4798      	blx	r3
		HAL_Delay(300);
 800902a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800902e:	f001 fac9 	bl	800a5c4 <HAL_Delay>
		this->print((char*) "\r\tChecking device connection.  ");
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4847      	ldr	r0, [pc, #284]	; (8009154 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1ac>)
 8009038:	4798      	blx	r3
		HAL_Delay(300);
 800903a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800903e:	f001 fac1 	bl	800a5c4 <HAL_Delay>
		this->print((char*) "\r\tChecking device connection.. ");
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4844      	ldr	r0, [pc, #272]	; (8009158 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1b0>)
 8009048:	4798      	blx	r3
		HAL_Delay(300);
 800904a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800904e:	f001 fab9 	bl	800a5c4 <HAL_Delay>
		this->print((char*) "\r\tChecking device connection...");
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4841      	ldr	r0, [pc, #260]	; (800915c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1b4>)
 8009058:	4798      	blx	r3
	while(!this->isConnected()){
 800905a:	e7d5      	b.n	8009008 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x60>
	}
	this->print((char*) "OK\r\n");
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4839      	ldr	r0, [pc, #228]	; (8009148 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 8009062:	4798      	blx	r3

	//Activate the superchargers
	this->print((char*) "\tActivating the superchargers...");
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	483d      	ldr	r0, [pc, #244]	; (8009160 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1b8>)
 800906a:	4798      	blx	r3
	this->enableSuperCapCharger(true);
 800906c:	2101      	movs	r1, #1
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f7fd fed2 	bl	8006e18 <_ZN10IridiumSBD21enableSuperCapChargerEb>
	this->print((char*) "OK\r\n");
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4833      	ldr	r0, [pc, #204]	; (8009148 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 800907a:	4798      	blx	r3


	//Wait for the supercapacitors to charge
	//int start=millis();
	this->print((char*) "\tWaiting for the supercapacitors to charge...");
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4838      	ldr	r0, [pc, #224]	; (8009164 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1bc>)
 8009082:	4798      	blx	r3
	while (!this->checkSuperCapCharger()){
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f7fd ff05 	bl	8006e94 <_ZN10IridiumSBD20checkSuperCapChargerEv>
 800908a:	4603      	mov	r3, r0
 800908c:	f083 0301 	eor.w	r3, r3, #1
 8009090:	b2db      	uxtb	r3, r3
 8009092:	2b00      	cmp	r3, #0
 8009094:	d004      	beq.n	80090a0 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0xf8>
		HAL_Delay(333);
 8009096:	f240 104d 	movw	r0, #333	; 0x14d
 800909a:	f001 fa93 	bl	800a5c4 <HAL_Delay>
	while (!this->checkSuperCapCharger()){
 800909e:	e7f1      	b.n	8009084 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0xdc>
	}
	this->print((char*) "OK\r\n");
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4828      	ldr	r0, [pc, #160]	; (8009148 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 80090a6:	4798      	blx	r3


	//Enable power for the 9603N
	this->print((char*) "\tEnabling 9603N power...");
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	482e      	ldr	r0, [pc, #184]	; (8009168 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1c0>)
 80090ae:	4798      	blx	r3
	this->enable9603Npower(true);
 80090b0:	2101      	movs	r1, #1
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	f7fd ff1e 	bl	8006ef4 <_ZN10IridiumSBD16enable9603NpowerEb>
	this->print((char*) "OK\r\n");
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4822      	ldr	r0, [pc, #136]	; (8009148 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 80090be:	4798      	blx	r3
	/*
	 * Begin satellite modem operation
	 */

	//Power on the rockblock
	this->print((char*) "\tStarting Modem...");
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4829      	ldr	r0, [pc, #164]	; (800916c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1c4>)
 80090c6:	4798      	blx	r3
	//this->setPowerProfile(profile);
	int err = this->begin();
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f7fd fd13 	bl	8006af4 <_ZN10IridiumSBD5beginEv>
 80090ce:	6478      	str	r0, [r7, #68]	; 0x44
	if (err != ISBD_SUCCESS)
 80090d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00b      	beq.n	80090ee <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x146>
	  {
		this->print((char*) "Failed: ");
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4825      	ldr	r0, [pc, #148]	; (8009170 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1c8>)
 80090dc:	4798      	blx	r3
		this->MRT_Iridium_ErrorMessage(err);
 80090de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	4619      	mov	r1, r3
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	f000 f89f 	bl	8009228 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>

	    return HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	e01d      	b.n	800912a <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x182>
	  }
	this->print((char*) "OK\r\n");
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4815      	ldr	r0, [pc, #84]	; (8009148 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 80090f4:	4798      	blx	r3

	//Setup default IMEI to 000000000000000 (no IMEI)
	IMEI= (char*) "000000000000000";
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	4a1e      	ldr	r2, [pc, #120]	; (8009174 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1cc>)
 80090fa:	605a      	str	r2, [r3, #4]

	char str[50];
	sprintf(str, "\tSetting timeout of %i seconds...", timeout);
 80090fc:	7afa      	ldrb	r2, [r7, #11]
 80090fe:	f107 0310 	add.w	r3, r7, #16
 8009102:	491d      	ldr	r1, [pc, #116]	; (8009178 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1d0>)
 8009104:	4618      	mov	r0, r3
 8009106:	f00c ff1b 	bl	8015f40 <siprintf>
	this->print((char*) str);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f107 0210 	add.w	r2, r7, #16
 8009112:	4610      	mov	r0, r2
 8009114:	4798      	blx	r3
	adjustATTimeout(timeout);
 8009116:	7afb      	ldrb	r3, [r7, #11]
 8009118:	4619      	mov	r1, r3
 800911a:	68f8      	ldr	r0, [r7, #12]
 800911c:	f7fd fd8b 	bl	8006c36 <_ZN10IridiumSBD15adjustATTimeoutEi>
	this->print((char*) "OK\r\n");
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4808      	ldr	r0, [pc, #32]	; (8009148 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 8009126:	4798      	blx	r3

	return HAL_OK;
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3748      	adds	r7, #72	; 0x48
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	0801bcf8 	.word	0x0801bcf8
 8009138:	0801bd10 	.word	0x0801bd10
 800913c:	20000460 	.word	0x20000460
 8009140:	20000518 	.word	0x20000518
 8009144:	200005d0 	.word	0x200005d0
 8009148:	0801b60c 	.word	0x0801b60c
 800914c:	0801bd24 	.word	0x0801bd24
 8009150:	0801bd44 	.word	0x0801bd44
 8009154:	0801bd64 	.word	0x0801bd64
 8009158:	0801bd84 	.word	0x0801bd84
 800915c:	0801bda4 	.word	0x0801bda4
 8009160:	0801bdc4 	.word	0x0801bdc4
 8009164:	0801bde8 	.word	0x0801bde8
 8009168:	0801be18 	.word	0x0801be18
 800916c:	0801be34 	.word	0x0801be34
 8009170:	0801be48 	.word	0x0801be48
 8009174:	0801be54 	.word	0x0801be54
 8009178:	0801be64 	.word	0x0801be64

0800917c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>:


boolean IridiumSBD::MRT_Iridium_shutdown(void){
 800917c:	b580      	push	{r7, lr}
 800917e:	b08a      	sub	sp, #40	; 0x28
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]

	this->print((char*) "Iridium 9603N Deinit\r\n");
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4820      	ldr	r0, [pc, #128]	; (800920c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x90>)
 800918a:	4798      	blx	r3

	// Power down the modem
	this->print((char*) "\tPutting the 9603N to sleep...");
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	481f      	ldr	r0, [pc, #124]	; (8009210 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x94>)
 8009192:	4798      	blx	r3
	int err = this->sleep();
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f7fd fd19 	bl	8006bcc <_ZN10IridiumSBD5sleepEv>
 800919a:	6278      	str	r0, [r7, #36]	; 0x24
	if (err != ISBD_SUCCESS)
 800919c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00e      	beq.n	80091c0 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x44>
	{
		char str[24+sizeof(int)];
		sprintf(str, "sleep failed: error  %i\r\n", err);
 80091a2:	f107 0308 	add.w	r3, r7, #8
 80091a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091a8:	491a      	ldr	r1, [pc, #104]	; (8009214 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x98>)
 80091aa:	4618      	mov	r0, r3
 80091ac:	f00c fec8 	bl	8015f40 <siprintf>
		this->print((char*) str);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f107 0208 	add.w	r2, r7, #8
 80091b8:	4610      	mov	r0, r2
 80091ba:	4798      	blx	r3
		return false;
 80091bc:	2300      	movs	r3, #0
 80091be:	e020      	b.n	8009202 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x86>
	}
	this->print((char*) "OK\r\n");
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4814      	ldr	r0, [pc, #80]	; (8009218 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x9c>)
 80091c6:	4798      	blx	r3

	// Disable 9603N power
	this->print((char*) "\tDisabling 9603N power...");
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4813      	ldr	r0, [pc, #76]	; (800921c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xa0>)
 80091ce:	4798      	blx	r3
	this->enable9603Npower(false);
 80091d0:	2100      	movs	r1, #0
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f7fd fe8e 	bl	8006ef4 <_ZN10IridiumSBD16enable9603NpowerEb>
	this->print((char*) "OK\r\n");
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	480e      	ldr	r0, [pc, #56]	; (8009218 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x9c>)
 80091de:	4798      	blx	r3

	// Disable the supercapacitor charger
	this->print((char*) "\tDisabling the supercapacitor charger...");
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	480e      	ldr	r0, [pc, #56]	; (8009220 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xa4>)
 80091e6:	4798      	blx	r3
	this->enableSuperCapCharger(false);
 80091e8:	2100      	movs	r1, #0
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f7fd fe14 	bl	8006e18 <_ZN10IridiumSBD21enableSuperCapChargerEb>
	this->print((char*) "OK\r\n");
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4808      	ldr	r0, [pc, #32]	; (8009218 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x9c>)
 80091f6:	4798      	blx	r3

	this->print((char*) "\tIridium successfully shutdown\r\n");
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4809      	ldr	r0, [pc, #36]	; (8009224 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xa8>)
 80091fe:	4798      	blx	r3
	return true;
 8009200:	2301      	movs	r3, #1
}
 8009202:	4618      	mov	r0, r3
 8009204:	3728      	adds	r7, #40	; 0x28
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	0801be88 	.word	0x0801be88
 8009210:	0801bea0 	.word	0x0801bea0
 8009214:	0801bec0 	.word	0x0801bec0
 8009218:	0801b60c 	.word	0x0801b60c
 800921c:	0801bedc 	.word	0x0801bedc
 8009220:	0801bef8 	.word	0x0801bef8
 8009224:	0801bf24 	.word	0x0801bf24

08009228 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>:



void IridiumSBD::MRT_Iridium_ErrorMessage(uint8_t error){
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	460b      	mov	r3, r1
 8009232:	70fb      	strb	r3, [r7, #3]
	this->print((char*) "\r\n\tError:\t");
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4834      	ldr	r0, [pc, #208]	; (800930c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xe4>)
 800923a:	4798      	blx	r3
	if (error == ISBD_ALREADY_AWAKE){
 800923c:	78fb      	ldrb	r3, [r7, #3]
 800923e:	2b01      	cmp	r3, #1
 8009240:	d104      	bne.n	800924c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x24>
		this->print((char*) "\tAlready Awake\r\n");
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4832      	ldr	r0, [pc, #200]	; (8009310 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xe8>)
 8009248:	4798      	blx	r3
		this->print((char*) "\tDEBUG LINE REACHED\r\n");
	}
	else{
		this->print((char*) "\tUNKNOWN\r\n");
	}
}
 800924a:	e05b      	b.n	8009304 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_SERIAL_FAILURE){
 800924c:	78fb      	ldrb	r3, [r7, #3]
 800924e:	2b02      	cmp	r3, #2
 8009250:	d104      	bne.n	800925c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x34>
		this->print((char*) "\tSerial Failure\r\n");
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	482f      	ldr	r0, [pc, #188]	; (8009314 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xec>)
 8009258:	4798      	blx	r3
}
 800925a:	e053      	b.n	8009304 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_PROTOCOL_ERROR){
 800925c:	78fb      	ldrb	r3, [r7, #3]
 800925e:	2b03      	cmp	r3, #3
 8009260:	d104      	bne.n	800926c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x44>
		this->print((char*) "\tProtocol Error\r\n");
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	482c      	ldr	r0, [pc, #176]	; (8009318 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf0>)
 8009268:	4798      	blx	r3
}
 800926a:	e04b      	b.n	8009304 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_CANCELLED){
 800926c:	78fb      	ldrb	r3, [r7, #3]
 800926e:	2b04      	cmp	r3, #4
 8009270:	d104      	bne.n	800927c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x54>
		this->print((char*) "\tCancelled\r\n");
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4829      	ldr	r0, [pc, #164]	; (800931c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf4>)
 8009278:	4798      	blx	r3
}
 800927a:	e043      	b.n	8009304 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_NO_MODEM_DETECTED){
 800927c:	78fb      	ldrb	r3, [r7, #3]
 800927e:	2b05      	cmp	r3, #5
 8009280:	d104      	bne.n	800928c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x64>
		this->print((char*) "\tNo modem detected: check wiring.\r\n");
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4826      	ldr	r0, [pc, #152]	; (8009320 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf8>)
 8009288:	4798      	blx	r3
}
 800928a:	e03b      	b.n	8009304 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_SBDIX_FATAL_ERROR){
 800928c:	78fb      	ldrb	r3, [r7, #3]
 800928e:	2b06      	cmp	r3, #6
 8009290:	d104      	bne.n	800929c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x74>
		this->print((char*) "\tSDBIX Fatal Error\r\n");
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4823      	ldr	r0, [pc, #140]	; (8009324 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xfc>)
 8009298:	4798      	blx	r3
}
 800929a:	e033      	b.n	8009304 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_SENDRECEIVE_TIMEOUT){
 800929c:	78fb      	ldrb	r3, [r7, #3]
 800929e:	2b07      	cmp	r3, #7
 80092a0:	d104      	bne.n	80092ac <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x84>
		this->print((char*) "\tSend-Receive Timeout\r\n");
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4820      	ldr	r0, [pc, #128]	; (8009328 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x100>)
 80092a8:	4798      	blx	r3
}
 80092aa:	e02b      	b.n	8009304 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_RX_OVERFLOW){
 80092ac:	78fb      	ldrb	r3, [r7, #3]
 80092ae:	2b08      	cmp	r3, #8
 80092b0:	d104      	bne.n	80092bc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x94>
		this->print((char*) "\tRX Overflow\r\n");
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	481d      	ldr	r0, [pc, #116]	; (800932c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x104>)
 80092b8:	4798      	blx	r3
}
 80092ba:	e023      	b.n	8009304 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_REENTRANT){
 80092bc:	78fb      	ldrb	r3, [r7, #3]
 80092be:	2b09      	cmp	r3, #9
 80092c0:	d104      	bne.n	80092cc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xa4>
		this->print((char*) "\tREENTRANT\r\n");
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	481a      	ldr	r0, [pc, #104]	; (8009330 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x108>)
 80092c8:	4798      	blx	r3
}
 80092ca:	e01b      	b.n	8009304 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_IS_ASLEEP){
 80092cc:	78fb      	ldrb	r3, [r7, #3]
 80092ce:	2b0a      	cmp	r3, #10
 80092d0:	d104      	bne.n	80092dc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xb4>
		this->print((char*) "\tIs Asleep\r\n");
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4817      	ldr	r0, [pc, #92]	; (8009334 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x10c>)
 80092d8:	4798      	blx	r3
}
 80092da:	e013      	b.n	8009304 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_NO_SLEEP_PIN){
 80092dc:	78fb      	ldrb	r3, [r7, #3]
 80092de:	2b0b      	cmp	r3, #11
 80092e0:	d104      	bne.n	80092ec <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xc4>
		this->print((char*) "\tNo Sleep Pin\r\n");
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4814      	ldr	r0, [pc, #80]	; (8009338 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x110>)
 80092e8:	4798      	blx	r3
}
 80092ea:	e00b      	b.n	8009304 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if(error == 20){
 80092ec:	78fb      	ldrb	r3, [r7, #3]
 80092ee:	2b14      	cmp	r3, #20
 80092f0:	d104      	bne.n	80092fc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xd4>
		this->print((char*) "\tDEBUG LINE REACHED\r\n");
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4811      	ldr	r0, [pc, #68]	; (800933c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x114>)
 80092f8:	4798      	blx	r3
}
 80092fa:	e003      	b.n	8009304 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
		this->print((char*) "\tUNKNOWN\r\n");
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	480f      	ldr	r0, [pc, #60]	; (8009340 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x118>)
 8009302:	4798      	blx	r3
}
 8009304:	bf00      	nop
 8009306:	3708      	adds	r7, #8
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}
 800930c:	0801bf48 	.word	0x0801bf48
 8009310:	0801bf54 	.word	0x0801bf54
 8009314:	0801bf68 	.word	0x0801bf68
 8009318:	0801bf7c 	.word	0x0801bf7c
 800931c:	0801bf90 	.word	0x0801bf90
 8009320:	0801bfa0 	.word	0x0801bfa0
 8009324:	0801bfc4 	.word	0x0801bfc4
 8009328:	0801bfdc 	.word	0x0801bfdc
 800932c:	0801bff4 	.word	0x0801bff4
 8009330:	0801c004 	.word	0x0801c004
 8009334:	0801c014 	.word	0x0801c014
 8009338:	0801c024 	.word	0x0801c024
 800933c:	0801c034 	.word	0x0801c034
 8009340:	0801c04c 	.word	0x0801c04c

08009344 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv>:


/*
 * This function requests the satellite modem's IMEI number.
 */
boolean IridiumSBD::MRT_Iridium_getIMEI(void){
 8009344:	b580      	push	{r7, lr}
 8009346:	b092      	sub	sp, #72	; 0x48
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]

	//Check if we already have the IMEI
	if (strcmp(IMEI,"000000000000000")==0){
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	491f      	ldr	r1, [pc, #124]	; (80093d0 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x8c>)
 8009352:	4618      	mov	r0, r3
 8009354:	f7f6 ff4c 	bl	80001f0 <strcmp>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d124      	bne.n	80093a8 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x64>

		//Reset the IMEI
		IMEI=new char[16];
 800935e:	2010      	movs	r0, #16
 8009360:	f00a f895 	bl	801348e <_Znaj>
 8009364:	4603      	mov	r3, r0
 8009366:	461a      	mov	r2, r3
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	605a      	str	r2, [r3, #4]

		// Get the IMEI
		this->print((char*) "\r\nIridium: Retrieving the IMEI\r\n");
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4818      	ldr	r0, [pc, #96]	; (80093d4 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x90>)
 8009372:	4798      	blx	r3
		int err = this->getIMEI(IMEI, 16);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	2210      	movs	r2, #16
 800937a:	4619      	mov	r1, r3
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f7fd feb3 	bl	80070e8 <_ZN10IridiumSBD7getIMEIEPcj>
 8009382:	6478      	str	r0, [r7, #68]	; 0x44
		if (err != ISBD_SUCCESS)
 8009384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00e      	beq.n	80093a8 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x64>
		{
			char str[24+sizeof(int)];
		    sprintf(str, "\tgetIMEI failed: error %i\r\n", err);
 800938a:	f107 030c 	add.w	r3, r7, #12
 800938e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009390:	4911      	ldr	r1, [pc, #68]	; (80093d8 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x94>)
 8009392:	4618      	mov	r0, r3
 8009394:	f00c fdd4 	bl	8015f40 <siprintf>
		    this->print((char*) str);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f107 020c 	add.w	r2, r7, #12
 80093a0:	4610      	mov	r0, r2
 80093a2:	4798      	blx	r3
		    return false;
 80093a4:	2300      	movs	r3, #0
 80093a6:	e00e      	b.n	80093c6 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x82>
		  }
	}

	char str[28];//IMEI is 15 integers long
	sprintf(str, "\tIMEI is %s\r\n", IMEI);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	685a      	ldr	r2, [r3, #4]
 80093ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80093b0:	490a      	ldr	r1, [pc, #40]	; (80093dc <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x98>)
 80093b2:	4618      	mov	r0, r3
 80093b4:	f00c fdc4 	bl	8015f40 <siprintf>
	this->print((char*) str);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80093c0:	4610      	mov	r0, r2
 80093c2:	4798      	blx	r3
	return true;
 80093c4:	2301      	movs	r3, #1
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3748      	adds	r7, #72	; 0x48
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	0801be54 	.word	0x0801be54
 80093d4:	0801c058 	.word	0x0801c058
 80093d8:	0801c07c 	.word	0x0801c07c
 80093dc:	0801c098 	.word	0x0801c098

080093e0 <_ZN10IridiumSBD15MRT_Iridium_CSQEv>:
 * This sketch checks the Iridium signal quality and returns the status
 * of the Network Available signal.
 *
 * The boolean param is if you want to check for network availability
 */
int IridiumSBD::MRT_Iridium_CSQ(){
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b09e      	sub	sp, #120	; 0x78
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
	this->print((char*) "\r\nIridium: Checking Signal Quality\r\n");
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	481c      	ldr	r0, [pc, #112]	; (8009460 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x80>)
 80093ee:	4798      	blx	r3
	int signalQuality = -1;
 80093f0:	f04f 33ff 	mov.w	r3, #4294967295
 80093f4:	673b      	str	r3, [r7, #112]	; 0x70

	this->MRT_Iridium_getIMEI();
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f7ff ffa4 	bl	8009344 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv>

	// Check the signal quality.
	// This returns a number between 0 and 5.
	// 2 or better is preferred.
	int err = this->getSignalQuality(signalQuality);
 80093fc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009400:	4619      	mov	r1, r3
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f7fd fbc4 	bl	8006b90 <_ZN10IridiumSBD16getSignalQualityERi>
 8009408:	6778      	str	r0, [r7, #116]	; 0x74
	if (err != ISBD_SUCCESS)
 800940a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800940c:	2b00      	cmp	r3, #0
 800940e:	d015      	beq.n	800943c <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x5c>
	{
	  char str[34+sizeof(int)];
	  sprintf(str, "\tSignalQuality failed: error  %i\r\n", err);
 8009410:	f107 030c 	add.w	r3, r7, #12
 8009414:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009416:	4913      	ldr	r1, [pc, #76]	; (8009464 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x84>)
 8009418:	4618      	mov	r0, r3
 800941a:	f00c fd91 	bl	8015f40 <siprintf>
	  this->print((char*) str);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f107 020c 	add.w	r2, r7, #12
 8009426:	4610      	mov	r0, r2
 8009428:	4798      	blx	r3
	  this->MRT_Iridium_ErrorMessage(err);
 800942a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800942c:	b2db      	uxtb	r3, r3
 800942e:	4619      	mov	r1, r3
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f7ff fef9 	bl	8009228 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
	  return -1;
 8009436:	f04f 33ff 	mov.w	r3, #4294967295
 800943a:	e00d      	b.n	8009458 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x78>
	}

	char str[56+sizeof(int)];
	sprintf(str, "\tOn a scale of 0 to 5, signal quality is currently  %i\r\n", signalQuality);
 800943c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800943e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009442:	4909      	ldr	r1, [pc, #36]	; (8009468 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x88>)
 8009444:	4618      	mov	r0, r3
 8009446:	f00c fd7b 	bl	8015f40 <siprintf>
	this->print((char*) str);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009452:	4610      	mov	r0, r2
 8009454:	4798      	blx	r3

	return signalQuality;
 8009456:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 8009458:	4618      	mov	r0, r3
 800945a:	3778      	adds	r7, #120	; 0x78
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	0801c0a8 	.word	0x0801c0a8
 8009464:	0801c0d0 	.word	0x0801c0d0
 8009468:	0801c0f4 	.word	0x0801c0f4

0800946c <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv>:


/*
 * This function checks if a network is available
 */
boolean IridiumSBD::MRT_Iridium_NetworkAvailability(void){
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]

	// Check Network Available.
	this->print((char*) "\r\nIridium: Checking if Network is Available:\t");
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	480c      	ldr	r0, [pc, #48]	; (80094ac <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x40>)
 800947a:	4798      	blx	r3
	if (!this->checkNetworkAvailable()){
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f7fd fde5 	bl	800704c <_ZN10IridiumSBD21checkNetworkAvailableEv>
 8009482:	4603      	mov	r3, r0
 8009484:	f083 0301 	eor.w	r3, r3, #1
 8009488:	b2db      	uxtb	r3, r3
 800948a:	2b00      	cmp	r3, #0
 800948c:	d005      	beq.n	800949a <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x2e>
		this->print((char*) "not available.\r\n");
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4807      	ldr	r0, [pc, #28]	; (80094b0 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x44>)
 8009494:	4798      	blx	r3
		//diagprint(F("(This might be because the 9603N has not yet aquired the ring channel.)\r\n"));
		return false;
 8009496:	2300      	movs	r3, #0
 8009498:	e004      	b.n	80094a4 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x38>
	}

	this->print((char*) "available.\r\n");
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4805      	ldr	r0, [pc, #20]	; (80094b4 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x48>)
 80094a0:	4798      	blx	r3
	return true;
 80094a2:	2301      	movs	r3, #1
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3708      	adds	r7, #8
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	0801c130 	.word	0x0801c130
 80094b0:	0801c160 	.word	0x0801c160
 80094b4:	0801c174 	.word	0x0801c174

080094b8 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv>:


/*
 * This function requests the time
 */
boolean IridiumSBD::MRT_Iridium_getTime(void){
 80094b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094ba:	b0a1      	sub	sp, #132	; 0x84
 80094bc:	af04      	add	r7, sp, #16
 80094be:	6078      	str	r0, [r7, #4]
	this->print((char*) "\r\nIridium: Retrieving time\r\n");
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4820      	ldr	r0, [pc, #128]	; (8009548 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x90>)
 80094c6:	4798      	blx	r3
	struct tm t; // struct tm is defined in time.h
	int err = this->getSystemTime(t); // Ask the 9603N for the system time
 80094c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80094cc:	4619      	mov	r1, r3
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f7fd fbde 	bl	8006c90 <_ZN10IridiumSBD13getSystemTimeER2tm>
 80094d4:	66f8      	str	r0, [r7, #108]	; 0x6c
	if (err == ISBD_SUCCESS) // Was it successful?
 80094d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d11c      	bne.n	8009516 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x5e>
	    {
		char buf[61];
		sprintf(buf, "\r\n\t<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
				t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
 80094dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
		sprintf(buf, "\r\n\t<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
 80094de:	f203 756c 	addw	r5, r3, #1900	; 0x76c
				t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
 80094e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		sprintf(buf, "\r\n\t<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
 80094e4:	1c5e      	adds	r6, r3, #1
 80094e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80094ea:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80094ec:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80094ee:	f107 0408 	add.w	r4, r7, #8
 80094f2:	9003      	str	r0, [sp, #12]
 80094f4:	9102      	str	r1, [sp, #8]
 80094f6:	9201      	str	r2, [sp, #4]
 80094f8:	9300      	str	r3, [sp, #0]
 80094fa:	4633      	mov	r3, r6
 80094fc:	462a      	mov	r2, r5
 80094fe:	4913      	ldr	r1, [pc, #76]	; (800954c <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x94>)
 8009500:	4620      	mov	r0, r4
 8009502:	f00c fd1d 	bl	8015f40 <siprintf>
		this->print((char*) buf);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f107 0208 	add.w	r2, r7, #8
 800950e:	4610      	mov	r0, r2
 8009510:	4798      	blx	r3
		return true;
 8009512:	2301      	movs	r3, #1
 8009514:	e013      	b.n	800953e <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x86>
	}

	else if (err == ISBD_NO_NETWORK) // Did it fail because the 9603N has not yet seen the network?
 8009516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009518:	2b0c      	cmp	r3, #12
 800951a:	d105      	bne.n	8009528 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x70>
	     {
		 this->print((char*) "\tNo network detected.\r\n");
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	480b      	ldr	r0, [pc, #44]	; (8009550 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x98>)
 8009522:	4798      	blx	r3
	   	 return false;
 8009524:	2300      	movs	r3, #0
 8009526:	e00a      	b.n	800953e <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x86>
	}

	else
	    {
		this->print((char*) "\tUnexpected Error ");
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4809      	ldr	r0, [pc, #36]	; (8009554 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x9c>)
 800952e:	4798      	blx	r3
		this->MRT_Iridium_ErrorMessage(err);
 8009530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009532:	b2db      	uxtb	r3, r3
 8009534:	4619      	mov	r1, r3
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f7ff fe76 	bl	8009228 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
		return false;
 800953c:	2300      	movs	r3, #0
	}
}
 800953e:	4618      	mov	r0, r3
 8009540:	3774      	adds	r7, #116	; 0x74
 8009542:	46bd      	mov	sp, r7
 8009544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009546:	bf00      	nop
 8009548:	0801c184 	.word	0x0801c184
 800954c:	0801c1a4 	.word	0x0801c1a4
 8009550:	0801c1e0 	.word	0x0801c1e0
 8009554:	0801c1f8 	.word	0x0801c1f8

08009558 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc>:
 * This sketch sends a "Hello, world!" message from the satellite modem.
 * If you have activated your account and have credits, this message
 * should arrive at the endpoints (delivery group) you have configured
 * (email address or HTTP POST).
 */
boolean IridiumSBD::MRT_Iridium_sendMessage(char* msg){
 8009558:	b580      	push	{r7, lr}
 800955a:	b090      	sub	sp, #64	; 0x40
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
	int temp = this->atTimeout; //Save default atTimeout
	adjustATTimeout(timeout);
*/

	// Send the message
	this->print((char*) "\r\nIridium: Trying to send the message.  This might take several minutes.\r\n");
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4828      	ldr	r0, [pc, #160]	; (8009608 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xb0>)
 8009568:	4798      	blx	r3
	int err = this->sendSBDText((const char*) msg);
 800956a:	6839      	ldr	r1, [r7, #0]
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f7fd faeb 	bl	8006b48 <_ZN10IridiumSBD11sendSBDTextEPKc>
 8009572:	63f8      	str	r0, [r7, #60]	; 0x3c
	//int err = this->sendSBDText((const char*) "Hello, world!");
	//int err = ISBD_SENDRECEIVE_TIMEOUT;

	if (err != ISBD_SUCCESS){
 8009574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009576:	2b00      	cmp	r3, #0
 8009578:	d01b      	beq.n	80095b2 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0x5a>
		char str[50];
		sprintf(str, "\tsendSBDText failed: error -> %i\r\n", err);
 800957a:	f107 0308 	add.w	r3, r7, #8
 800957e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009580:	4922      	ldr	r1, [pc, #136]	; (800960c <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xb4>)
 8009582:	4618      	mov	r0, r3
 8009584:	f00c fcdc 	bl	8015f40 <siprintf>
		this->print((char*) str);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f107 0208 	add.w	r2, r7, #8
 8009590:	4610      	mov	r0, r2
 8009592:	4798      	blx	r3
	    if (err == ISBD_SENDRECEIVE_TIMEOUT){
 8009594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009596:	2b07      	cmp	r3, #7
 8009598:	d103      	bne.n	80095a2 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0x4a>
	    	this->print((char*) "\tTry again with a better view of the sky.\r\n");
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	481c      	ldr	r0, [pc, #112]	; (8009610 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xb8>)
 80095a0:	4798      	blx	r3
	    }
	    this->MRT_Iridium_ErrorMessage((uint8_t) err);
 80095a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	4619      	mov	r1, r3
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f7ff fe3d 	bl	8009228 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
	    return false;
 80095ae:	2300      	movs	r3, #0
 80095b0:	e025      	b.n	80095fe <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xa6>
	}

	else{
		this->print((char*) "\tMessage sent\r\n");
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4817      	ldr	r0, [pc, #92]	; (8009614 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xbc>)
 80095b8:	4798      	blx	r3
	}

	// Clear the Mobile Originated message buffer
	this->print((char*) "\tClearing the MO buffer.\r\n");
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4816      	ldr	r0, [pc, #88]	; (8009618 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xc0>)
 80095c0:	4798      	blx	r3
	err = this->clearBuffers(ISBD_CLEAR_MO); // Clear MO buffer
 80095c2:	2100      	movs	r1, #0
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f7fd fd71 	bl	80070ac <_ZN10IridiumSBD12clearBuffersEi>
 80095ca:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (err != ISBD_SUCCESS){
 80095cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d014      	beq.n	80095fc <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xa4>
		char str[50];
		sprintf(str, "clearBuffers failed: error -> %i\r\n", err);
 80095d2:	f107 0308 	add.w	r3, r7, #8
 80095d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80095d8:	4910      	ldr	r1, [pc, #64]	; (800961c <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xc4>)
 80095da:	4618      	mov	r0, r3
 80095dc:	f00c fcb0 	bl	8015f40 <siprintf>
		this->print((char*) str);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f107 0208 	add.w	r2, r7, #8
 80095e8:	4610      	mov	r0, r2
 80095ea:	4798      	blx	r3
		this->MRT_Iridium_ErrorMessage((uint8_t) err);
 80095ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	4619      	mov	r1, r3
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f7ff fe18 	bl	8009228 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
		return false;
 80095f8:	2300      	movs	r3, #0
 80095fa:	e000      	b.n	80095fe <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xa6>
	}
	return true;
 80095fc:	2301      	movs	r3, #1
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3740      	adds	r7, #64	; 0x40
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	0801c20c 	.word	0x0801c20c
 800960c:	0801c258 	.word	0x0801c258
 8009610:	0801c27c 	.word	0x0801c27c
 8009614:	0801c2a8 	.word	0x0801c2a8
 8009618:	0801c2b8 	.word	0x0801c2b8
 800961c:	0801c2d4 	.word	0x0801c2d4

08009620 <_ZN10IridiumSBDC1ER7TwoWireh>:
      if (ringPin != -1)
         pinMode(ringPin, INPUT);
   }
   */

IridiumSBD(TwoWire &wirePort = IRIDIUM_I2C, uint8_t deviceAddress = 0x63)
 8009620:	b480      	push	{r7}
 8009622:	b085      	sub	sp, #20
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	4613      	mov	r3, r2
 800962c:	71fb      	strb	r3, [r7, #7]
   {
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2200      	movs	r2, #0
 8009632:	66da      	str	r2, [r3, #108]	; 0x6c
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2205      	movs	r2, #5
 8009638:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2202      	movs	r2, #2
 8009648:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2204      	movs	r2, #4
 8009650:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2208      	movs	r2, #8
 8009658:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2210      	movs	r2, #16
 8009660:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2220      	movs	r2, #32
 8009668:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2240      	movs	r2, #64	; 0x40
 8009670:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
      useSerial = false;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2200      	movs	r2, #0
 8009678:	745a      	strb	r2, [r3, #17]
      wireport = &wirePort;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	68ba      	ldr	r2, [r7, #8]
 800967e:	60da      	str	r2, [r3, #12]
      deviceaddress = deviceAddress;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	79fa      	ldrb	r2, [r7, #7]
 8009684:	741a      	strb	r2, [r3, #16]
      sbdixInterval = ISBD_USB_SBDIX_INTERVAL;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	221e      	movs	r2, #30
 800968a:	65da      	str	r2, [r3, #92]	; 0x5c
      atTimeout = ISBD_DEFAULT_AT_TIMEOUT;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	221e      	movs	r2, #30
 8009690:	661a      	str	r2, [r3, #96]	; 0x60
      sendReceiveTimeout = ISBD_DEFAULT_SENDRECEIVE_TIME;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009698:	665a      	str	r2, [r3, #100]	; 0x64
      startupTimeout = ISBD_STARTUP_MAX_TIME;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	22f0      	movs	r2, #240	; 0xf0
 800969e:	669a      	str	r2, [r3, #104]	; 0x68
      remainingMessages = -1;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f04f 32ff 	mov.w	r2, #4294967295
 80096a6:	675a      	str	r2, [r3, #116]	; 0x74
      asleep = true;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2201      	movs	r2, #1
 80096ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
      reentrant = false;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
      sleepPin = -1;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f04f 32ff 	mov.w	r2, #4294967295
 80096be:	67da      	str	r2, [r3, #124]	; 0x7c
      sleepPinConfigured = false;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2200      	movs	r2, #0
 80096c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      ringPin = -1;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f04f 32ff 	mov.w	r2, #4294967295
 80096ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      msstmWorkaroundRequested = false;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
      ringAlertsEnabled = true;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2201      	movs	r2, #1
 80096de:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
      ringAsserted = false;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
      lastPowerOnTime = 0UL;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2200      	movs	r2, #0
 80096ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      head = SBDRING;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	4a0c      	ldr	r2, [pc, #48]	; (8009728 <_ZN10IridiumSBDC1ER7TwoWireh+0x108>)
 80096f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      tail = SBDRING;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	4a0a      	ldr	r2, [pc, #40]	; (8009728 <_ZN10IridiumSBDC1ER7TwoWireh+0x108>)
 80096fe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      nextChar = -1;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f04f 32ff 	mov.w	r2, #4294967295
 8009708:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      i2c_ser_buffer_tail = 0;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2200      	movs	r2, #0
 8009710:	655a      	str	r2, [r3, #84]	; 0x54
      i2c_ser_buffer_head = 0;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2200      	movs	r2, #0
 8009716:	659a      	str	r2, [r3, #88]	; 0x58
   }
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	4618      	mov	r0, r3
 800971c:	3714      	adds	r7, #20
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr
 8009726:	bf00      	nop
 8009728:	0801c5ec 	.word	0x0801c5ec

0800972c <MRT_Iridium_Constructor>:

//C structs
struct HIRIDIUM hiridium;


void MRT_Iridium_Constructor(){
 800972c:	b598      	push	{r3, r4, r7, lr}
 800972e:	af00      	add	r7, sp, #0
	if (E_T==NULL){
 8009730:	4b08      	ldr	r3, [pc, #32]	; (8009754 <MRT_Iridium_Constructor+0x28>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d10b      	bne.n	8009750 <MRT_Iridium_Constructor+0x24>
		E_T = new IridiumSBD();
 8009738:	20a4      	movs	r0, #164	; 0xa4
 800973a:	f009 fe97 	bl	801346c <_Znwj>
 800973e:	4603      	mov	r3, r0
 8009740:	461c      	mov	r4, r3
 8009742:	2263      	movs	r2, #99	; 0x63
 8009744:	4904      	ldr	r1, [pc, #16]	; (8009758 <MRT_Iridium_Constructor+0x2c>)
 8009746:	4620      	mov	r0, r4
 8009748:	f7ff ff6a 	bl	8009620 <_ZN10IridiumSBDC1ER7TwoWireh>
 800974c:	4b01      	ldr	r3, [pc, #4]	; (8009754 <MRT_Iridium_Constructor+0x28>)
 800974e:	601c      	str	r4, [r3, #0]
	}
}
 8009750:	bf00      	nop
 8009752:	bd98      	pop	{r3, r4, r7, pc}
 8009754:	20000448 	.word	0x20000448
 8009758:	20000460 	.word	0x20000460

0800975c <MRT_Iridium_Destructor>:

void MRT_Iridium_Destructor(){
 800975c:	b480      	push	{r7}
 800975e:	af00      	add	r7, sp, #0
	if (E_T!=NULL){
 8009760:	4b05      	ldr	r3, [pc, #20]	; (8009778 <MRT_Iridium_Destructor+0x1c>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d002      	beq.n	800976e <MRT_Iridium_Destructor+0x12>
		E_T = NULL;
 8009768:	4b03      	ldr	r3, [pc, #12]	; (8009778 <MRT_Iridium_Destructor+0x1c>)
 800976a:	2200      	movs	r2, #0
 800976c:	601a      	str	r2, [r3, #0]
	}
}
 800976e:	bf00      	nop
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr
 8009778:	20000448 	.word	0x20000448

0800977c <MRT_Iridium_Init>:


struct HIRIDIUM MRT_Iridium_Init(uint8_t timeout, uint8_t i2c_bus, void (*iridium_print)(char*)){
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	607b      	str	r3, [r7, #4]
 8009786:	460b      	mov	r3, r1
 8009788:	72fb      	strb	r3, [r7, #11]
 800978a:	4613      	mov	r3, r2
 800978c:	72bb      	strb	r3, [r7, #10]
	MRT_Iridium_Constructor();
 800978e:	f7ff ffcd 	bl	800972c <MRT_Iridium_Constructor>
	E_T->MRT_Iridium_setup(timeout, i2c_bus, iridium_print);
 8009792:	4b0d      	ldr	r3, [pc, #52]	; (80097c8 <MRT_Iridium_Init+0x4c>)
 8009794:	6818      	ldr	r0, [r3, #0]
 8009796:	7aba      	ldrb	r2, [r7, #10]
 8009798:	7af9      	ldrb	r1, [r7, #11]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f7ff fc04 	bl	8008fa8 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE>
	HIRIDIUM iridium_handler;
	iridium_handler.CSQ = &MRT_Iridium_CSQ;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	4a0a      	ldr	r2, [pc, #40]	; (80097cc <MRT_Iridium_Init+0x50>)
 80097a4:	60da      	str	r2, [r3, #12]
	iridium_handler.getIMEI = &MRT_Iridium_getIMEI;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	4a09      	ldr	r2, [pc, #36]	; (80097d0 <MRT_Iridium_Init+0x54>)
 80097aa:	601a      	str	r2, [r3, #0]
	iridium_handler.getNetworkAvailability = &MRT_Iridium_NetworkAvailability;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	4a09      	ldr	r2, [pc, #36]	; (80097d4 <MRT_Iridium_Init+0x58>)
 80097b0:	609a      	str	r2, [r3, #8]
	iridium_handler.getTime = &MRT_Iridium_getTime;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	4a08      	ldr	r2, [pc, #32]	; (80097d8 <MRT_Iridium_Init+0x5c>)
 80097b6:	605a      	str	r2, [r3, #4]
	iridium_handler.sendMessage = &MRT_Iridium_sendMessage;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	4a08      	ldr	r2, [pc, #32]	; (80097dc <MRT_Iridium_Init+0x60>)
 80097bc:	611a      	str	r2, [r3, #16]
	return iridium_handler;
 80097be:	bf00      	nop
}
 80097c0:	68f8      	ldr	r0, [r7, #12]
 80097c2:	3710      	adds	r7, #16
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}
 80097c8:	20000448 	.word	0x20000448
 80097cc:	08009835 	.word	0x08009835
 80097d0:	08009811 	.word	0x08009811
 80097d4:	0800984d 	.word	0x0800984d
 80097d8:	08009871 	.word	0x08009871
 80097dc:	08009895 	.word	0x08009895

080097e0 <MRT_Iridium_Deinit>:

bool MRT_Iridium_Deinit(void){
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b082      	sub	sp, #8
 80097e4:	af00      	add	r7, sp, #0
	bool b = E_T->MRT_Iridium_shutdown();
 80097e6:	4b09      	ldr	r3, [pc, #36]	; (800980c <MRT_Iridium_Deinit+0x2c>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7ff fcc6 	bl	800917c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	bf14      	ite	ne
 80097f6:	2301      	movne	r3, #1
 80097f8:	2300      	moveq	r3, #0
 80097fa:	71fb      	strb	r3, [r7, #7]
	MRT_Iridium_Destructor();
 80097fc:	f7ff ffae 	bl	800975c <MRT_Iridium_Destructor>
	return b;
 8009800:	79fb      	ldrb	r3, [r7, #7]
}
 8009802:	4618      	mov	r0, r3
 8009804:	3708      	adds	r7, #8
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	20000448 	.word	0x20000448

08009810 <MRT_Iridium_getIMEI>:

void MRT_Iridium_ErrorMessage(uint8_t error){
	return E_T->MRT_Iridium_ErrorMessage(error);
}

bool MRT_Iridium_getIMEI(void){
 8009810:	b580      	push	{r7, lr}
 8009812:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_getIMEI();
 8009814:	4b06      	ldr	r3, [pc, #24]	; (8009830 <MRT_Iridium_getIMEI+0x20>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4618      	mov	r0, r3
 800981a:	f7ff fd93 	bl	8009344 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv>
 800981e:	4603      	mov	r3, r0
 8009820:	2b00      	cmp	r3, #0
 8009822:	bf14      	ite	ne
 8009824:	2301      	movne	r3, #1
 8009826:	2300      	moveq	r3, #0
 8009828:	b2db      	uxtb	r3, r3
}
 800982a:	4618      	mov	r0, r3
 800982c:	bd80      	pop	{r7, pc}
 800982e:	bf00      	nop
 8009830:	20000448 	.word	0x20000448

08009834 <MRT_Iridium_CSQ>:


int MRT_Iridium_CSQ(){
 8009834:	b580      	push	{r7, lr}
 8009836:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_CSQ();
 8009838:	4b03      	ldr	r3, [pc, #12]	; (8009848 <MRT_Iridium_CSQ+0x14>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4618      	mov	r0, r3
 800983e:	f7ff fdcf 	bl	80093e0 <_ZN10IridiumSBD15MRT_Iridium_CSQEv>
 8009842:	4603      	mov	r3, r0
}
 8009844:	4618      	mov	r0, r3
 8009846:	bd80      	pop	{r7, pc}
 8009848:	20000448 	.word	0x20000448

0800984c <MRT_Iridium_NetworkAvailability>:

bool MRT_Iridium_NetworkAvailability(){
 800984c:	b580      	push	{r7, lr}
 800984e:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_NetworkAvailability();
 8009850:	4b06      	ldr	r3, [pc, #24]	; (800986c <MRT_Iridium_NetworkAvailability+0x20>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4618      	mov	r0, r3
 8009856:	f7ff fe09 	bl	800946c <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	bf14      	ite	ne
 8009860:	2301      	movne	r3, #1
 8009862:	2300      	moveq	r3, #0
 8009864:	b2db      	uxtb	r3, r3
}
 8009866:	4618      	mov	r0, r3
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	20000448 	.word	0x20000448

08009870 <MRT_Iridium_getTime>:


bool MRT_Iridium_getTime(void){
 8009870:	b580      	push	{r7, lr}
 8009872:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_getTime();
 8009874:	4b06      	ldr	r3, [pc, #24]	; (8009890 <MRT_Iridium_getTime+0x20>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4618      	mov	r0, r3
 800987a:	f7ff fe1d 	bl	80094b8 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv>
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	bf14      	ite	ne
 8009884:	2301      	movne	r3, #1
 8009886:	2300      	moveq	r3, #0
 8009888:	b2db      	uxtb	r3, r3
}
 800988a:	4618      	mov	r0, r3
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	20000448 	.word	0x20000448

08009894 <MRT_Iridium_sendMessage>:

bool MRT_Iridium_sendMessage(char* msg){
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
	return E_T->MRT_Iridium_sendMessage(msg);
 800989c:	4b07      	ldr	r3, [pc, #28]	; (80098bc <MRT_Iridium_sendMessage+0x28>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	6879      	ldr	r1, [r7, #4]
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7ff fe58 	bl	8009558 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	bf14      	ite	ne
 80098ae:	2301      	movne	r3, #1
 80098b0:	2300      	moveq	r3, #0
 80098b2:	b2db      	uxtb	r3, r3
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3708      	adds	r7, #8
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	20000448 	.word	0x20000448

080098c0 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80098c0:	b590      	push	{r4, r7, lr}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d101      	bne.n	80098d4 <_ZN5Print5writeEPKc+0x14>
 80098d0:	2300      	movs	r3, #0
 80098d2:	e00d      	b.n	80098f0 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	3304      	adds	r3, #4
 80098da:	681c      	ldr	r4, [r3, #0]
 80098dc:	6838      	ldr	r0, [r7, #0]
 80098de:	f7f6 fc91 	bl	8000204 <strlen>
 80098e2:	4603      	mov	r3, r0
 80098e4:	461a      	mov	r2, r3
 80098e6:	6839      	ldr	r1, [r7, #0]
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	47a0      	blx	r4
 80098ec:	4603      	mov	r3, r0
 80098ee:	bf00      	nop
    }
 80098f0:	4618      	mov	r0, r3
 80098f2:	370c      	adds	r7, #12
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd90      	pop	{r4, r7, pc}

080098f8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b086      	sub	sp, #24
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	60b9      	str	r1, [r7, #8]
 8009902:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8009904:	2300      	movs	r3, #0
 8009906:	617b      	str	r3, [r7, #20]
  while (size--) {
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	1e5a      	subs	r2, r3, #1
 800990c:	607a      	str	r2, [r7, #4]
 800990e:	2b00      	cmp	r3, #0
 8009910:	bf14      	ite	ne
 8009912:	2301      	movne	r3, #1
 8009914:	2300      	moveq	r3, #0
 8009916:	b2db      	uxtb	r3, r3
 8009918:	2b00      	cmp	r3, #0
 800991a:	d00e      	beq.n	800993a <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	1c59      	adds	r1, r3, #1
 8009926:	60b9      	str	r1, [r7, #8]
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	4619      	mov	r1, r3
 800992c:	68f8      	ldr	r0, [r7, #12]
 800992e:	4790      	blx	r2
 8009930:	4602      	mov	r2, r0
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	4413      	add	r3, r2
 8009936:	617b      	str	r3, [r7, #20]
  while (size--) {
 8009938:	e7e6      	b.n	8009908 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 800993a:	697b      	ldr	r3, [r7, #20]
}
 800993c:	4618      	mov	r0, r3
 800993e:	3718      	adds	r7, #24
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 800994e:	6839      	ldr	r1, [r7, #0]
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 f805 	bl	8009960 <_ZN5Print5printEPKc>
 8009956:	4603      	mov	r3, r0
}
 8009958:	4618      	mov	r0, r3
 800995a:	3708      	adds	r7, #8
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
  return write(str);
 800996a:	6839      	ldr	r1, [r7, #0]
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f7ff ffa7 	bl	80098c0 <_ZN5Print5writeEPKc>
 8009972:	4603      	mov	r3, r0
}
 8009974:	4618      	mov	r0, r3
 8009976:	3708      	adds	r7, #8
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	460b      	mov	r3, r1
 8009986:	70fb      	strb	r3, [r7, #3]
  return write(c);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	78fa      	ldrb	r2, [r7, #3]
 8009990:	4611      	mov	r1, r2
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	4798      	blx	r3
 8009996:	4603      	mov	r3, r0
}
 8009998:	4618      	mov	r0, r3
 800999a:	3708      	adds	r7, #8
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	68b9      	ldr	r1, [r7, #8]
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	f000 f805 	bl	80099c0 <_ZN5Print5printEli>
 80099b6:	4603      	mov	r3, r0
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b086      	sub	sp, #24
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d109      	bne.n	80099e6 <_ZN5Print5printEli+0x26>
    return write(n);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	68ba      	ldr	r2, [r7, #8]
 80099da:	b2d2      	uxtb	r2, r2
 80099dc:	4611      	mov	r1, r2
 80099de:	68f8      	ldr	r0, [r7, #12]
 80099e0:	4798      	blx	r3
 80099e2:	4603      	mov	r3, r0
 80099e4:	e029      	b.n	8009a3a <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2b0a      	cmp	r3, #10
 80099ea:	d11d      	bne.n	8009a28 <_ZN5Print5printEli+0x68>
    if (n < 0) {
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	da12      	bge.n	8009a18 <_ZN5Print5printEli+0x58>
      int t = print('-');
 80099f2:	212d      	movs	r1, #45	; 0x2d
 80099f4:	68f8      	ldr	r0, [r7, #12]
 80099f6:	f7ff ffc1 	bl	800997c <_ZN5Print5printEc>
 80099fa:	4603      	mov	r3, r0
 80099fc:	617b      	str	r3, [r7, #20]
      n = -n;
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	425b      	negs	r3, r3
 8009a02:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	220a      	movs	r2, #10
 8009a08:	4619      	mov	r1, r3
 8009a0a:	68f8      	ldr	r0, [r7, #12]
 8009a0c:	f000 f819 	bl	8009a42 <_ZN5Print11printNumberEmh>
 8009a10:	4602      	mov	r2, r0
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	4413      	add	r3, r2
 8009a16:	e010      	b.n	8009a3a <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	220a      	movs	r2, #10
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	68f8      	ldr	r0, [r7, #12]
 8009a20:	f000 f80f 	bl	8009a42 <_ZN5Print11printNumberEmh>
 8009a24:	4603      	mov	r3, r0
 8009a26:	e008      	b.n	8009a3a <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	b2d2      	uxtb	r2, r2
 8009a2e:	4619      	mov	r1, r3
 8009a30:	68f8      	ldr	r0, [r7, #12]
 8009a32:	f000 f806 	bl	8009a42 <_ZN5Print11printNumberEmh>
 8009a36:	4603      	mov	r3, r0
 8009a38:	bf00      	nop
  }
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3718      	adds	r7, #24
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b090      	sub	sp, #64	; 0x40
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	60f8      	str	r0, [r7, #12]
 8009a4a:	60b9      	str	r1, [r7, #8]
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 8009a50:	f107 0314 	add.w	r3, r7, #20
 8009a54:	3320      	adds	r3, #32
 8009a56:	63fb      	str	r3, [r7, #60]	; 0x3c

  *str = '\0';
 8009a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8009a5e:	79fb      	ldrb	r3, [r7, #7]
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d801      	bhi.n	8009a68 <_ZN5Print11printNumberEmh+0x26>
 8009a64:	230a      	movs	r3, #10
 8009a66:	71fb      	strb	r3, [r7, #7]

  do {
    unsigned long m = n;
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	63bb      	str	r3, [r7, #56]	; 0x38
    n /= base;
 8009a6c:	79fb      	ldrb	r3, [r7, #7]
 8009a6e:	68ba      	ldr	r2, [r7, #8]
 8009a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a74:	60bb      	str	r3, [r7, #8]
    char c = m - base * n;
 8009a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a78:	b2da      	uxtb	r2, r3
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	79f9      	ldrb	r1, [r7, #7]
 8009a80:	fb11 f303 	smulbb	r3, r1, r3
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	1ad3      	subs	r3, r2, r3
 8009a88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8009a8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a90:	2b09      	cmp	r3, #9
 8009a92:	d804      	bhi.n	8009a9e <_ZN5Print11printNumberEmh+0x5c>
 8009a94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a98:	3330      	adds	r3, #48	; 0x30
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	e003      	b.n	8009aa6 <_ZN5Print11printNumberEmh+0x64>
 8009a9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009aa2:	3337      	adds	r3, #55	; 0x37
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009aa8:	3a01      	subs	r2, #1
 8009aaa:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009aac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009aae:	7013      	strb	r3, [r2, #0]
  } while(n);
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d000      	beq.n	8009ab8 <_ZN5Print11printNumberEmh+0x76>
  do {
 8009ab6:	e7d7      	b.n	8009a68 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 8009ab8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009aba:	68f8      	ldr	r0, [r7, #12]
 8009abc:	f7ff ff00 	bl	80098c0 <_ZN5Print5writeEPKc>
 8009ac0:	4603      	mov	r3, r0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3740      	adds	r7, #64	; 0x40
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
	...

08009acc <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	4a06      	ldr	r2, [pc, #24]	; (8009af0 <_ZN5PrintC1Ev+0x24>)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	601a      	str	r2, [r3, #0]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	605a      	str	r2, [r3, #4]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	370c      	adds	r7, #12
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr
 8009aee:	bf00      	nop
 8009af0:	0801c600 	.word	0x0801c600

08009af4 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7ff ffe4 	bl	8009acc <_ZN5PrintC1Ev>
 8009b04:	4a05      	ldr	r2, [pc, #20]	; (8009b1c <_ZN6StreamC1Ev+0x28>)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	601a      	str	r2, [r3, #0]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009b10:	609a      	str	r2, [r3, #8]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4618      	mov	r0, r3
 8009b16:	3708      	adds	r7, #8
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	0801c630 	.word	0x0801c630

08009b20 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7ff ffe1 	bl	8009af4 <_ZN6StreamC1Ev>
 8009b32:	4a16      	ldr	r2, [pc, #88]	; (8009b8c <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	683a      	ldr	r2, [r7, #0]
 8009b3c:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	3390      	adds	r3, #144	; 0x90
 8009b42:	2220      	movs	r2, #32
 8009b44:	2100      	movs	r1, #0
 8009b46:	4618      	mov	r0, r3
 8009b48:	f00a fefe 	bl	8014948 <memset>
  rxBufferIndex = 0;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	4618      	mov	r0, r3
 8009b86:	3708      	adds	r7, #8
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}
 8009b8c:	0801c610 	.word	0x0801c610

08009b90 <_ZN7TwoWire11requestFromEhhh>:
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  HAL_I2C_Init(&I2cHandle);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b086      	sub	sp, #24
 8009b94:	af02      	add	r7, sp, #8
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	4608      	mov	r0, r1
 8009b9a:	4611      	mov	r1, r2
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	70fb      	strb	r3, [r7, #3]
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	70bb      	strb	r3, [r7, #2]
 8009ba6:	4613      	mov	r3, r2
 8009ba8:	707b      	strb	r3, [r7, #1]
  uint8_t ret_val;

  disableInterrupt();
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 fc24 	bl	800a3f8 <_ZN7TwoWire16disableInterruptEv>

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
 8009bb0:	78bb      	ldrb	r3, [r7, #2]
 8009bb2:	2b20      	cmp	r3, #32
 8009bb4:	d901      	bls.n	8009bba <_ZN7TwoWire11requestFromEhhh+0x2a>
    quantity = BUFFER_LENGTH;
 8009bb6:	2320      	movs	r3, #32
 8009bb8:	70bb      	strb	r3, [r7, #2]
  }
  // perform blocking read into buffer
  int read = i2c_master_read((address << 1), (char *)rxBuffer, quantity, sendStop);
 8009bba:	78fb      	ldrb	r3, [r7, #3]
 8009bbc:	005b      	lsls	r3, r3, #1
 8009bbe:	b2d9      	uxtb	r1, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8009bc6:	78b8      	ldrb	r0, [r7, #2]
 8009bc8:	787b      	ldrb	r3, [r7, #1]
 8009bca:	9300      	str	r3, [sp, #0]
 8009bcc:	4603      	mov	r3, r0
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 f9cf 	bl	8009f72 <_ZN7TwoWire15i2c_master_readEhPchh>
 8009bd4:	60b8      	str	r0, [r7, #8]

  if(read < 0)
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	da02      	bge.n	8009be2 <_ZN7TwoWire11requestFromEhhh+0x52>
  {
    ret_val = 0;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	73fb      	strb	r3, [r7, #15]
 8009be0:	e001      	b.n	8009be6 <_ZN7TwoWire11requestFromEhhh+0x56>
  }else
  {
    ret_val = read;
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	73fb      	strb	r3, [r7, #15]
  }

  // set rx buffer iterator vars
  rxBufferIndex = 0;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = ret_val;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	7bfa      	ldrb	r2, [r7, #15]
 8009bf2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

  enableInterrupt();
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 fbcc 	bl	800a394 <_ZN7TwoWire15enableInterruptEv>

  return ret_val;
 8009bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b082      	sub	sp, #8
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
 8009c0e:	460b      	mov	r3, r1
 8009c10:	70fb      	strb	r3, [r7, #3]
 8009c12:	4613      	mov	r3, r2
 8009c14:	70bb      	strb	r3, [r7, #2]
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 8009c16:	78ba      	ldrb	r2, [r7, #2]
 8009c18:	78f9      	ldrb	r1, [r7, #3]
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f7ff ffb7 	bl	8009b90 <_ZN7TwoWire11requestFromEhhh>
 8009c22:	4603      	mov	r3, r0
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3708      	adds	r7, #8
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <_ZN7TwoWire17beginTransmissionEh>:
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	460b      	mov	r3, r1
 8009c36:	70fb      	strb	r3, [r7, #3]
  // indicate that we are transmitting
  transmitting = 1;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  // set address of targeted slave
  txAddress = address;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	78fa      	ldrb	r2, [r7, #3]
 8009c44:	741a      	strb	r2, [r3, #16]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2200      	movs	r2, #0
 8009c52:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8009c56:	bf00      	nop
 8009c58:	370c      	adds	r7, #12
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr

08009c62 <_ZN7TwoWire15endTransmissionEh>:
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b086      	sub	sp, #24
 8009c66:	af02      	add	r7, sp, #8
 8009c68:	6078      	str	r0, [r7, #4]
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	70fb      	strb	r3, [r7, #3]
  // transmit buffer (blocking)
  disableInterrupt();
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 fbc2 	bl	800a3f8 <_ZN7TwoWire16disableInterruptEv>

  int8_t ret = i2c_master_write((txAddress << 1), (const char *)txBuffer, txBufferLength, sendStop);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	7c1b      	ldrb	r3, [r3, #16]
 8009c78:	0059      	lsls	r1, r3, #1
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f103 0211 	add.w	r2, r3, #17
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009c86:	4618      	mov	r0, r3
 8009c88:	78fb      	ldrb	r3, [r7, #3]
 8009c8a:	9300      	str	r3, [sp, #0]
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 fa00 	bl	800a094 <_ZN7TwoWire16i2c_master_writeEiPKcii>
 8009c94:	4603      	mov	r3, r0
 8009c96:	73fb      	strb	r3, [r7, #15]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  // indicate that we are done transmitting
  transmitting = 0;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  enableInterrupt();
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 fb6f 	bl	800a394 <_ZN7TwoWire15enableInterruptEv>

  return ret;
 8009cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3710      	adds	r7, #16
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <_ZN7TwoWire15endTransmissionEv>:

//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
 8009cc8:	2101      	movs	r1, #1
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f7ff ffc9 	bl	8009c62 <_ZN7TwoWire15endTransmissionEh>
 8009cd0:	4603      	mov	r3, r0
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3708      	adds	r7, #8
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b082      	sub	sp, #8
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d01d      	beq.n	8009d2c <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009cf6:	2b1f      	cmp	r3, #31
 8009cf8:	d901      	bls.n	8009cfe <_ZN7TwoWire5writeEh+0x24>
      return 0;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	e028      	b.n	8009d50 <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009d04:	4619      	mov	r1, r3
 8009d06:	78fa      	ldrb	r2, [r7, #3]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	440b      	add	r3, r1
 8009d0c:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009d14:	3301      	adds	r3, #1
 8009d16:	b2da      	uxtb	r2, r3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8009d2a:	e010      	b.n	8009d4e <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 fb63 	bl	800a3f8 <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 8009d32:	1cfb      	adds	r3, r7, #3
 8009d34:	2201      	movs	r2, #1
 8009d36:	4619      	mov	r1, r3
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 fa95 	bl	800a268 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 fb28 	bl	800a394 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	333c      	adds	r3, #60	; 0x3c
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f001 ffdd 	bl	800bd08 <HAL_I2C_EnableListen_IT>
  }
  return 1;
 8009d4e:	2301      	movs	r3, #1
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3708      	adds	r7, #8
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b086      	sub	sp, #24
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	607a      	str	r2, [r7, #4]
  if(transmitting){
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d013      	beq.n	8009d96 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 8009d6e:	2300      	movs	r3, #0
 8009d70:	617b      	str	r3, [r7, #20]
 8009d72:	697a      	ldr	r2, [r7, #20]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d21e      	bcs.n	8009db8 <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	68b9      	ldr	r1, [r7, #8]
 8009d82:	697a      	ldr	r2, [r7, #20]
 8009d84:	440a      	add	r2, r1
 8009d86:	7812      	ldrb	r2, [r2, #0]
 8009d88:	4611      	mov	r1, r2
 8009d8a:	68f8      	ldr	r0, [r7, #12]
 8009d8c:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	3301      	adds	r3, #1
 8009d92:	617b      	str	r3, [r7, #20]
 8009d94:	e7ed      	b.n	8009d72 <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 8009d96:	68f8      	ldr	r0, [r7, #12]
 8009d98:	f000 fb2e 	bl	800a3f8 <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	461a      	mov	r2, r3
 8009da0:	68b9      	ldr	r1, [r7, #8]
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	f000 fa60 	bl	800a268 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8009da8:	68f8      	ldr	r0, [r7, #12]
 8009daa:	f000 faf3 	bl	800a394 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	333c      	adds	r3, #60	; 0x3c
 8009db2:	4618      	mov	r0, r3
 8009db4:	f001 ffa8 	bl	800bd08 <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 8009db8:	687b      	ldr	r3, [r7, #4]
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3718      	adds	r7, #24
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}

08009dc2 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 8009dc2:	b480      	push	{r7}
 8009dc4:	b083      	sub	sp, #12
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	1ad3      	subs	r3, r2, r3
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	370c      	adds	r7, #12
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr

08009dea <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 8009dea:	b480      	push	{r7}
 8009dec:	b085      	sub	sp, #20
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
  int value = -1;
 8009df2:	f04f 33ff 	mov.w	r3, #4294967295
 8009df6:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009dfe:	b2da      	uxtb	r2, r3
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	bf34      	ite	cc
 8009e0c:	2301      	movcc	r3, #1
 8009e0e:	2300      	movcs	r3, #0
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d012      	beq.n	8009e3c <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	461a      	mov	r2, r3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4413      	add	r3, r2
 8009e24:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009e28:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	3301      	adds	r3, #1
 8009e34:	b2da      	uxtb	r2, r3
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3714      	adds	r7, #20
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr

08009e4a <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 8009e4a:	b480      	push	{r7}
 8009e4c:	b085      	sub	sp, #20
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
  int value = -1;
 8009e52:	f04f 33ff 	mov.w	r3, #4294967295
 8009e56:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009e5e:	b2da      	uxtb	r2, r3
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	bf34      	ite	cc
 8009e6c:	2301      	movcc	r3, #1
 8009e6e:	2300      	movcs	r3, #0
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d009      	beq.n	8009e8a <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	461a      	mov	r2, r3
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	4413      	add	r3, r2
 8009e84:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009e88:	60fb      	str	r3, [r7, #12]
  }

  return value;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3714      	adds	r7, #20
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 8009ea0:	bf00      	nop
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <_ZN7TwoWire16i2c_master_startEv>:
{
  user_onRequest = function;
}

int TwoWire::i2c_master_start()
{
 8009eac:	b480      	push	{r7}
 8009eae:	b085      	sub	sp, #20
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eb8:	60bb      	str	r3, [r7, #8]

    int timeout;

    // Clear Acknowledge failure flag
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ebe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009ec2:	615a      	str	r2, [r3, #20]

    // Wait the STOP condition has been previously correctly sent
  // This timeout can be avoid in some specific cases by simply clearing the STOP bit
    timeout = FLAG_TIMEOUT;
 8009ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ec8:	60fb      	str	r3, [r7, #12]
    while ((i2c->CR1 & I2C_CR1_STOP) == I2C_CR1_STOP) {
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ed6:	bf0c      	ite	eq
 8009ed8:	2301      	moveq	r3, #1
 8009eda:	2300      	movne	r3, #0
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d00b      	beq.n	8009efa <_ZN7TwoWire16i2c_master_startEv+0x4e>
        if ((timeout--) == 0) {
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	1e5a      	subs	r2, r3, #1
 8009ee6:	60fa      	str	r2, [r7, #12]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	bf0c      	ite	eq
 8009eec:	2301      	moveq	r3, #1
 8009eee:	2300      	movne	r3, #0
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d0e9      	beq.n	8009eca <_ZN7TwoWire16i2c_master_startEv+0x1e>
            return 1;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e021      	b.n	8009f3e <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    // Generate the START condition
    i2c->CR1 |= I2C_CR1_START;
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	601a      	str	r2, [r3, #0]

    // Wait the START condition has been correctly sent
    timeout = FLAG_TIMEOUT;
 8009f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f0a:	60fb      	str	r3, [r7, #12]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f10:	695b      	ldr	r3, [r3, #20]
 8009f12:	f003 0301 	and.w	r3, r3, #1
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	bf14      	ite	ne
 8009f1a:	2301      	movne	r3, #1
 8009f1c:	2300      	moveq	r3, #0
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d00b      	beq.n	8009f3c <_ZN7TwoWire16i2c_master_startEv+0x90>
        if ((timeout--) == 0) {
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	1e5a      	subs	r2, r3, #1
 8009f28:	60fa      	str	r2, [r7, #12]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	bf0c      	ite	eq
 8009f2e:	2301      	moveq	r3, #1
 8009f30:	2300      	movne	r3, #0
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d0e9      	beq.n	8009f0c <_ZN7TwoWire16i2c_master_startEv+0x60>
            return 1;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	e000      	b.n	8009f3e <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    return 0;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3714      	adds	r7, #20
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr

08009f4a <_ZN7TwoWire15i2c_master_stopEv>:

int TwoWire::i2c_master_stop()
{
 8009f4a:	b480      	push	{r7}
 8009f4c:	b085      	sub	sp, #20
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f56:	60fb      	str	r3, [r7, #12]

    // Generate the STOP condition
    i2c->CR1 |= I2C_CR1_STOP;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	601a      	str	r2, [r3, #0]

    return 0;
 8009f64:	2300      	movs	r3, #0
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3714      	adds	r7, #20
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr

08009f72 <_ZN7TwoWire15i2c_master_readEhPchh>:

int TwoWire::i2c_master_read(uint8_t address, char *data, uint8_t length, uint8_t stop)
{
 8009f72:	b580      	push	{r7, lr}
 8009f74:	b08a      	sub	sp, #40	; 0x28
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	60f8      	str	r0, [r7, #12]
 8009f7a:	607a      	str	r2, [r7, #4]
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	460b      	mov	r3, r1
 8009f80:	72fb      	strb	r3, [r7, #11]
 8009f82:	4613      	mov	r3, r2
 8009f84:	72bb      	strb	r3, [r7, #10]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f8a:	61fb      	str	r3, [r7, #28]
    int timeout;
    int count;
    int value;
    int ret;

    i2c_master_start();
 8009f8c:	68f8      	ldr	r0, [r7, #12]
 8009f8e:	f7ff ff8d 	bl	8009eac <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 8009f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f96:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f9c:	695b      	ldr	r3, [r3, #20]
 8009f9e:	f003 0301 	and.w	r3, r3, #1
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	bf14      	ite	ne
 8009fa6:	2301      	movne	r3, #1
 8009fa8:	2300      	moveq	r3, #0
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d008      	beq.n	8009fc2 <_ZN7TwoWire15i2c_master_readEhPchh+0x50>
        timeout--;
 8009fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb2:	3b01      	subs	r3, #1
 8009fb4:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 8009fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d1ed      	bne.n	8009f98 <_ZN7TwoWire15i2c_master_readEhPchh+0x26>
            return -1;
 8009fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8009fc0:	e064      	b.n	800a08c <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_READ(address);
 8009fc2:	7afb      	ldrb	r3, [r7, #11]
 8009fc4:	f043 0301 	orr.w	r3, r3, #1
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	461a      	mov	r2, r3
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 8009fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fd4:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fda:	695b      	ldr	r3, [r3, #20]
 8009fdc:	f003 0302 	and.w	r3, r3, #2
 8009fe0:	2b02      	cmp	r3, #2
 8009fe2:	bf14      	ite	ne
 8009fe4:	2301      	movne	r3, #1
 8009fe6:	2300      	moveq	r3, #0
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d008      	beq.n	800a000 <_ZN7TwoWire15i2c_master_readEhPchh+0x8e>
        timeout--;
 8009fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 8009ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d1ed      	bne.n	8009fd6 <_ZN7TwoWire15i2c_master_readEhPchh+0x64>
            return -1;
 8009ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8009ffe:	e045      	b.n	800a08c <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 800a000:	2300      	movs	r3, #0
 800a002:	613b      	str	r3, [r7, #16]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a008:	695b      	ldr	r3, [r3, #20]
 800a00a:	613b      	str	r3, [r7, #16]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a010:	699b      	ldr	r3, [r3, #24]
 800a012:	613b      	str	r3, [r7, #16]
 800a014:	693b      	ldr	r3, [r7, #16]

    // Read all bytes except last one
    for (count = 0; count < (length - 1); count++) {
 800a016:	2300      	movs	r3, #0
 800a018:	623b      	str	r3, [r7, #32]
 800a01a:	7abb      	ldrb	r3, [r7, #10]
 800a01c:	3b01      	subs	r3, #1
 800a01e:	6a3a      	ldr	r2, [r7, #32]
 800a020:	429a      	cmp	r2, r3
 800a022:	da17      	bge.n	800a054 <_ZN7TwoWire15i2c_master_readEhPchh+0xe2>
        ret = i2c_master_byte_read(&value, 0);
 800a024:	f107 0314 	add.w	r3, r7, #20
 800a028:	2200      	movs	r2, #0
 800a02a:	4619      	mov	r1, r3
 800a02c:	68f8      	ldr	r0, [r7, #12]
 800a02e:	f000 f8a4 	bl	800a17a <_ZN7TwoWire20i2c_master_byte_readEPii>
 800a032:	61b8      	str	r0, [r7, #24]
        if(ret)
 800a034:	69bb      	ldr	r3, [r7, #24]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d002      	beq.n	800a040 <_ZN7TwoWire15i2c_master_readEhPchh+0xce>
        {
          return -1;
 800a03a:	f04f 33ff 	mov.w	r3, #4294967295
 800a03e:	e025      	b.n	800a08c <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
        data[count] = (char)value;
 800a040:	6979      	ldr	r1, [r7, #20]
 800a042:	6a3b      	ldr	r3, [r7, #32]
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	4413      	add	r3, r2
 800a048:	b2ca      	uxtb	r2, r1
 800a04a:	701a      	strb	r2, [r3, #0]
    for (count = 0; count < (length - 1); count++) {
 800a04c:	6a3b      	ldr	r3, [r7, #32]
 800a04e:	3301      	adds	r3, #1
 800a050:	623b      	str	r3, [r7, #32]
 800a052:	e7e2      	b.n	800a01a <_ZN7TwoWire15i2c_master_readEhPchh+0xa8>
    }

    // If not repeated start, send stop.
    // Warning: must be done BEFORE the data is read.
    if (stop) {
 800a054:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d002      	beq.n	800a062 <_ZN7TwoWire15i2c_master_readEhPchh+0xf0>
        i2c_master_stop();
 800a05c:	68f8      	ldr	r0, [r7, #12]
 800a05e:	f7ff ff74 	bl	8009f4a <_ZN7TwoWire15i2c_master_stopEv>
    }

    // Read the last byte
    ret = i2c_master_byte_read(&value, 1);
 800a062:	f107 0314 	add.w	r3, r7, #20
 800a066:	2201      	movs	r2, #1
 800a068:	4619      	mov	r1, r3
 800a06a:	68f8      	ldr	r0, [r7, #12]
 800a06c:	f000 f885 	bl	800a17a <_ZN7TwoWire20i2c_master_byte_readEPii>
 800a070:	61b8      	str	r0, [r7, #24]
    if(ret)
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d002      	beq.n	800a07e <_ZN7TwoWire15i2c_master_readEhPchh+0x10c>
    {
      return -1;
 800a078:	f04f 33ff 	mov.w	r3, #4294967295
 800a07c:	e006      	b.n	800a08c <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
    }
    data[count] = (char)value;
 800a07e:	6979      	ldr	r1, [r7, #20]
 800a080:	6a3b      	ldr	r3, [r7, #32]
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	4413      	add	r3, r2
 800a086:	b2ca      	uxtb	r2, r1
 800a088:	701a      	strb	r2, [r3, #0]

    return length;
 800a08a:	7abb      	ldrb	r3, [r7, #10]
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3728      	adds	r7, #40	; 0x28
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <_ZN7TwoWire16i2c_master_writeEiPKcii>:

int TwoWire::i2c_master_write(int address, const char *data, int length, int stop)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b088      	sub	sp, #32
 800a098:	af00      	add	r7, sp, #0
 800a09a:	60f8      	str	r0, [r7, #12]
 800a09c:	60b9      	str	r1, [r7, #8]
 800a09e:	607a      	str	r2, [r7, #4]
 800a0a0:	603b      	str	r3, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0a6:	617b      	str	r3, [r7, #20]
    int timeout;
    int count;

    i2c_master_start();
 800a0a8:	68f8      	ldr	r0, [r7, #12]
 800a0aa:	f7ff feff 	bl	8009eac <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 800a0ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0b2:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0b8:	695b      	ldr	r3, [r3, #20]
 800a0ba:	f003 0301 	and.w	r3, r3, #1
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	bf14      	ite	ne
 800a0c2:	2301      	movne	r3, #1
 800a0c4:	2300      	moveq	r3, #0
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d007      	beq.n	800a0dc <_ZN7TwoWire16i2c_master_writeEiPKcii+0x48>
        timeout--;
 800a0cc:	69fb      	ldr	r3, [r7, #28]
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 800a0d2:	69fb      	ldr	r3, [r7, #28]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d1ed      	bne.n	800a0b4 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x20>
            return 4;
 800a0d8:	2304      	movs	r3, #4
 800a0da:	e04a      	b.n	800a172 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_WRITE(address);
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 800a0e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0ec:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0f2:	695b      	ldr	r3, [r3, #20]
 800a0f4:	f003 0302 	and.w	r3, r3, #2
 800a0f8:	2b02      	cmp	r3, #2
 800a0fa:	bf14      	ite	ne
 800a0fc:	2301      	movne	r3, #1
 800a0fe:	2300      	moveq	r3, #0
 800a100:	b2db      	uxtb	r3, r3
 800a102:	2b00      	cmp	r3, #0
 800a104:	d007      	beq.n	800a116 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x82>
        timeout--;
 800a106:	69fb      	ldr	r3, [r7, #28]
 800a108:	3b01      	subs	r3, #1
 800a10a:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d1ed      	bne.n	800a0ee <_ZN7TwoWire16i2c_master_writeEiPKcii+0x5a>
            return 2;
 800a112:	2302      	movs	r3, #2
 800a114:	e02d      	b.n	800a172 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 800a116:	2300      	movs	r3, #0
 800a118:	613b      	str	r3, [r7, #16]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a11e:	695b      	ldr	r3, [r3, #20]
 800a120:	613b      	str	r3, [r7, #16]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a126:	699b      	ldr	r3, [r3, #24]
 800a128:	613b      	str	r3, [r7, #16]
 800a12a:	693b      	ldr	r3, [r7, #16]

    for (count = 0; count < length; count++) {
 800a12c:	2300      	movs	r3, #0
 800a12e:	61bb      	str	r3, [r7, #24]
 800a130:	69ba      	ldr	r2, [r7, #24]
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	429a      	cmp	r2, r3
 800a136:	da15      	bge.n	800a164 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xd0>
        if (i2c_master_byte_write(data[count]) != 1) {
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	4413      	add	r3, r2
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	4619      	mov	r1, r3
 800a142:	68f8      	ldr	r0, [r7, #12]
 800a144:	f000 f85a 	bl	800a1fc <_ZN7TwoWire21i2c_master_byte_writeEi>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	bf14      	ite	ne
 800a14e:	2301      	movne	r3, #1
 800a150:	2300      	moveq	r3, #0
 800a152:	b2db      	uxtb	r3, r3
 800a154:	2b00      	cmp	r3, #0
 800a156:	d001      	beq.n	800a15c <_ZN7TwoWire16i2c_master_writeEiPKcii+0xc8>
            return 3;
 800a158:	2303      	movs	r3, #3
 800a15a:	e00a      	b.n	800a172 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
    for (count = 0; count < length; count++) {
 800a15c:	69bb      	ldr	r3, [r7, #24]
 800a15e:	3301      	adds	r3, #1
 800a160:	61bb      	str	r3, [r7, #24]
 800a162:	e7e5      	b.n	800a130 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x9c>
        }
    }

    // If not repeated start, send stop.
    if (stop) {
 800a164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a166:	2b00      	cmp	r3, #0
 800a168:	d002      	beq.n	800a170 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xdc>
        i2c_master_stop();
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f7ff feed 	bl	8009f4a <_ZN7TwoWire15i2c_master_stopEv>
    }

    return 0;
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	3720      	adds	r7, #32
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}

0800a17a <_ZN7TwoWire20i2c_master_byte_readEPii>:

int TwoWire::i2c_master_byte_read(int *value, int last)
{
 800a17a:	b480      	push	{r7}
 800a17c:	b087      	sub	sp, #28
 800a17e:	af00      	add	r7, sp, #0
 800a180:	60f8      	str	r0, [r7, #12]
 800a182:	60b9      	str	r1, [r7, #8]
 800a184:	607a      	str	r2, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a18a:	613b      	str	r3, [r7, #16]
    int timeout;

    if (last) {
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d006      	beq.n	800a1a0 <_ZN7TwoWire20i2c_master_byte_readEPii+0x26>
        // Don't acknowledge the last byte
        i2c->CR1 &= ~I2C_CR1_ACK;
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	601a      	str	r2, [r3, #0]
 800a19e:	e005      	b.n	800a1ac <_ZN7TwoWire20i2c_master_byte_readEPii+0x32>
    } else {
        // Acknowledge the byte
        i2c->CR1 |= I2C_CR1_ACK;
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	601a      	str	r2, [r3, #0]
    }

    // Wait until the byte is received
    timeout = FLAG_TIMEOUT;
 800a1ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a1b0:	617b      	str	r3, [r7, #20]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_RXNE) == RESET) {
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1b6:	695b      	ldr	r3, [r3, #20]
 800a1b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1bc:	2b40      	cmp	r3, #64	; 0x40
 800a1be:	bf14      	ite	ne
 800a1c0:	2301      	movne	r3, #1
 800a1c2:	2300      	moveq	r3, #0
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d00c      	beq.n	800a1e4 <_ZN7TwoWire20i2c_master_byte_readEPii+0x6a>
        if ((timeout--) == 0) {
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	1e5a      	subs	r2, r3, #1
 800a1ce:	617a      	str	r2, [r7, #20]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	bf0c      	ite	eq
 800a1d4:	2301      	moveq	r3, #1
 800a1d6:	2300      	movne	r3, #0
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d0e9      	beq.n	800a1b2 <_ZN7TwoWire20i2c_master_byte_readEPii+0x38>
            return -1;
 800a1de:	f04f 33ff 	mov.w	r3, #4294967295
 800a1e2:	e005      	b.n	800a1f0 <_ZN7TwoWire20i2c_master_byte_readEPii+0x76>
        }
    }

    *value = (int)i2c->DR;
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	691b      	ldr	r3, [r3, #16]
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	601a      	str	r2, [r3, #0]

    return 0;
 800a1ee:	2300      	movs	r3, #0
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	371c      	adds	r7, #28
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr

0800a1fc <_ZN7TwoWire21i2c_master_byte_writeEi>:

int TwoWire::i2c_master_byte_write(int data)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b085      	sub	sp, #20
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	6039      	str	r1, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a20a:	60bb      	str	r3, [r7, #8]
    int timeout;

    i2c->DR = (uint8_t)data;
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	461a      	mov	r2, r3
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	611a      	str	r2, [r3, #16]

    // Wait until the byte is transmitted
    timeout = FLAG_TIMEOUT;
 800a216:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a21a:	60fb      	str	r3, [r7, #12]
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a220:	695b      	ldr	r3, [r3, #20]
 800a222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a226:	2b80      	cmp	r3, #128	; 0x80
 800a228:	d008      	beq.n	800a23c <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
            (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == RESET)) {
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a22e:	695b      	ldr	r3, [r3, #20]
 800a230:	f003 0304 	and.w	r3, r3, #4
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 800a234:	2b04      	cmp	r3, #4
 800a236:	d001      	beq.n	800a23c <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
 800a238:	2301      	movs	r3, #1
 800a23a:	e000      	b.n	800a23e <_ZN7TwoWire21i2c_master_byte_writeEi+0x42>
 800a23c:	2300      	movs	r3, #0
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d00b      	beq.n	800a25a <_ZN7TwoWire21i2c_master_byte_writeEi+0x5e>
        if ((timeout--) == 0) {
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	1e5a      	subs	r2, r3, #1
 800a246:	60fa      	str	r2, [r7, #12]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	bf0c      	ite	eq
 800a24c:	2301      	moveq	r3, #1
 800a24e:	2300      	movne	r3, #0
 800a250:	b2db      	uxtb	r3, r3
 800a252:	2b00      	cmp	r3, #0
 800a254:	d0e2      	beq.n	800a21c <_ZN7TwoWire21i2c_master_byte_writeEi+0x20>
            return 0;
 800a256:	2300      	movs	r3, #0
 800a258:	e000      	b.n	800a25c <_ZN7TwoWire21i2c_master_byte_writeEi+0x60>
        }
    }

    return 1;
 800a25a:	2301      	movs	r3, #1
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3714      	adds	r7, #20
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <_ZN7TwoWire15i2c_slave_writeEPKci>:

int TwoWire::i2c_slave_write(const char *data, int length)
{
 800a268:	b480      	push	{r7}
 800a26a:	b089      	sub	sp, #36	; 0x24
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 800a274:	2300      	movs	r3, #0
 800a276:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a27c:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2b00      	cmp	r3, #0
 800a282:	dd41      	ble.n	800a308 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 800a284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a288:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a28e:	695b      	ldr	r3, [r3, #20]
 800a290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a294:	2b80      	cmp	r3, #128	; 0x80
 800a296:	bf14      	ite	ne
 800a298:	2301      	movne	r3, #1
 800a29a:	2300      	moveq	r3, #0
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d008      	beq.n	800a2b4 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 800a2a2:	69fb      	ldr	r3, [r7, #28]
 800a2a4:	3b01      	subs	r3, #1
 800a2a6:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 800a2a8:	69fb      	ldr	r3, [r7, #28]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d1ed      	bne.n	800a28a <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 800a2ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a2b2:	e068      	b.n	800a386 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	1c5a      	adds	r2, r3, #1
 800a2b8:	60ba      	str	r2, [r7, #8]
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	461a      	mov	r2, r3
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	611a      	str	r2, [r3, #16]
        length--;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	3b01      	subs	r3, #1
 800a2c6:	607b      	str	r3, [r7, #4]
        size++;
 800a2c8:	69bb      	ldr	r3, [r7, #24]
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2d2:	695b      	ldr	r3, [r3, #20]
 800a2d4:	f003 0304 	and.w	r3, r3, #4
 800a2d8:	2b04      	cmp	r3, #4
 800a2da:	d104      	bne.n	800a2e6 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d001      	beq.n	800a2e6 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	e000      	b.n	800a2e8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d0c8      	beq.n	800a27e <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	1c5a      	adds	r2, r3, #1
 800a2f0:	60ba      	str	r2, [r7, #8]
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	611a      	str	r2, [r3, #16]
            length--;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	607b      	str	r3, [r7, #4]
            size++;
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	3301      	adds	r3, #1
 800a304:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 800a306:	e7ba      	b.n	800a27e <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 800a308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a30c:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a312:	695b      	ldr	r3, [r3, #20]
 800a314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a31c:	bf14      	ite	ne
 800a31e:	2301      	movne	r3, #1
 800a320:	2300      	moveq	r3, #0
 800a322:	b2db      	uxtb	r3, r3
 800a324:	2b00      	cmp	r3, #0
 800a326:	d008      	beq.n	800a33a <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	3b01      	subs	r3, #1
 800a32c:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d1ec      	bne.n	800a30e <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 800a334:	f04f 33ff 	mov.w	r3, #4294967295
 800a338:	e025      	b.n	800a386 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a33e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a342:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 800a344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a348:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a34e:	699b      	ldr	r3, [r3, #24]
 800a350:	f003 0302 	and.w	r3, r3, #2
 800a354:	2b02      	cmp	r3, #2
 800a356:	bf0c      	ite	eq
 800a358:	2301      	moveq	r3, #1
 800a35a:	2300      	movne	r3, #0
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d008      	beq.n	800a374 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 800a362:	69fb      	ldr	r3, [r7, #28]
 800a364:	3b01      	subs	r3, #1
 800a366:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 800a368:	69fb      	ldr	r3, [r7, #28]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1ed      	bne.n	800a34a <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 800a36e:	f04f 33ff 	mov.w	r3, #4294967295
 800a372:	e008      	b.n	800a386 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2220      	movs	r2, #32
 800a378:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2200      	movs	r2, #0
 800a380:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 800a384:	69bb      	ldr	r3, [r7, #24]
}
 800a386:	4618      	mov	r0, r3
 800a388:	3724      	adds	r7, #36	; 0x24
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr
	...

0800a394 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3a0:	4a12      	ldr	r2, [pc, #72]	; (800a3ec <_ZN7TwoWire15enableInterruptEv+0x58>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d106      	bne.n	800a3b4 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 800a3a6:	2049      	movs	r0, #73	; 0x49
 800a3a8:	f000 fe38 	bl	800b01c <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800a3ac:	2048      	movs	r0, #72	; 0x48
 800a3ae:	f000 fe35 	bl	800b01c <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 800a3b2:	e016      	b.n	800a3e2 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3b8:	4a0d      	ldr	r2, [pc, #52]	; (800a3f0 <_ZN7TwoWire15enableInterruptEv+0x5c>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d106      	bne.n	800a3cc <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800a3be:	2022      	movs	r0, #34	; 0x22
 800a3c0:	f000 fe2c 	bl	800b01c <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800a3c4:	2021      	movs	r0, #33	; 0x21
 800a3c6:	f000 fe29 	bl	800b01c <HAL_NVIC_EnableIRQ>
}
 800a3ca:	e00a      	b.n	800a3e2 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3d0:	4a08      	ldr	r2, [pc, #32]	; (800a3f4 <_ZN7TwoWire15enableInterruptEv+0x60>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d105      	bne.n	800a3e2 <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800a3d6:	2020      	movs	r0, #32
 800a3d8:	f000 fe20 	bl	800b01c <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800a3dc:	201f      	movs	r0, #31
 800a3de:	f000 fe1d 	bl	800b01c <HAL_NVIC_EnableIRQ>
}
 800a3e2:	bf00      	nop
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	40005c00 	.word	0x40005c00
 800a3f0:	40005800 	.word	0x40005800
 800a3f4:	40005400 	.word	0x40005400

0800a3f8 <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a404:	4a12      	ldr	r2, [pc, #72]	; (800a450 <_ZN7TwoWire16disableInterruptEv+0x58>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d106      	bne.n	800a418 <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 800a40a:	2049      	movs	r0, #73	; 0x49
 800a40c:	f000 fe14 	bl	800b038 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 800a410:	2048      	movs	r0, #72	; 0x48
 800a412:	f000 fe11 	bl	800b038 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 800a416:	e016      	b.n	800a446 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a41c:	4a0d      	ldr	r2, [pc, #52]	; (800a454 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d106      	bne.n	800a430 <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 800a422:	2022      	movs	r0, #34	; 0x22
 800a424:	f000 fe08 	bl	800b038 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 800a428:	2021      	movs	r0, #33	; 0x21
 800a42a:	f000 fe05 	bl	800b038 <HAL_NVIC_DisableIRQ>
}
 800a42e:	e00a      	b.n	800a446 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a434:	4a08      	ldr	r2, [pc, #32]	; (800a458 <_ZN7TwoWire16disableInterruptEv+0x60>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d105      	bne.n	800a446 <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 800a43a:	2020      	movs	r0, #32
 800a43c:	f000 fdfc 	bl	800b038 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800a440:	201f      	movs	r0, #31
 800a442:	f000 fdf9 	bl	800b038 <HAL_NVIC_DisableIRQ>
}
 800a446:	bf00      	nop
 800a448:	3708      	adds	r7, #8
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	40005c00 	.word	0x40005c00
 800a454:	40005800 	.word	0x40005800
 800a458:	40005400 	.word	0x40005400

0800a45c <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d110      	bne.n	800a48e <_Z41__static_initialization_and_destruction_0ii+0x32>
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a472:	4293      	cmp	r3, r2
 800a474:	d10b      	bne.n	800a48e <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 800a476:	4908      	ldr	r1, [pc, #32]	; (800a498 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 800a478:	4808      	ldr	r0, [pc, #32]	; (800a49c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800a47a:	f7ff fb51 	bl	8009b20 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 800a47e:	4908      	ldr	r1, [pc, #32]	; (800a4a0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800a480:	4808      	ldr	r0, [pc, #32]	; (800a4a4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800a482:	f7ff fb4d 	bl	8009b20 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 800a486:	4908      	ldr	r1, [pc, #32]	; (800a4a8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800a488:	4808      	ldr	r0, [pc, #32]	; (800a4ac <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800a48a:	f7ff fb49 	bl	8009b20 <_ZN7TwoWireC1EP11I2C_TypeDef>
 800a48e:	bf00      	nop
 800a490:	3708      	adds	r7, #8
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	40005400 	.word	0x40005400
 800a49c:	20000460 	.word	0x20000460
 800a4a0:	40005800 	.word	0x40005800
 800a4a4:	20000518 	.word	0x20000518
 800a4a8:	40005c00 	.word	0x40005c00
 800a4ac:	200005d0 	.word	0x200005d0

0800a4b0 <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a4b8:	2001      	movs	r0, #1
 800a4ba:	f7ff ffcf 	bl	800a45c <_Z41__static_initialization_and_destruction_0ii>
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <MRT_radio_tx>:
#include <iwdg.h>
#include <string.h>
#include <sx126x.h>


void MRT_radio_tx(char* buffer){
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
			//sx126x_set_tx(); TODO
			TxProtocol(buffer, strlen(buffer));
		}
	#endif

	print((char*) "Radio sending:\t");
 800a4c8:	4804      	ldr	r0, [pc, #16]	; (800a4dc <MRT_radio_tx+0x1c>)
 800a4ca:	f7f6 fe1d 	bl	8001108 <print>
	println(buffer);
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f7f6 fdfc 	bl	80010cc <println>
}
 800a4d4:	bf00      	nop
 800a4d6:	3708      	adds	r7, #8
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	0801c488 	.word	0x0801c488

0800a4e0 <MRT_radio_Init>:
	println(buffer);
}



void MRT_radio_Init(void){
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	af00      	add	r7, sp, #0
	println("\r\nRadio Init");
 800a4e4:	4803      	ldr	r0, [pc, #12]	; (800a4f4 <MRT_radio_Init+0x14>)
 800a4e6:	f7f6 fdf1 	bl	80010cc <println>
	set_NRESET_pin(SX_RST_GPIO_Port, SX_RST_Pin);
	set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
	Tx_setup();
	println("OK");
	#else
	println("\tNo radio currently in use");
 800a4ea:	4803      	ldr	r0, [pc, #12]	; (800a4f8 <MRT_radio_Init+0x18>)
 800a4ec:	f7f6 fdee 	bl	80010cc <println>
	#endif
}
 800a4f0:	bf00      	nop
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	0801c4ac 	.word	0x0801c4ac
 800a4f8:	0801c4bc 	.word	0x0801c4bc

0800a4fc <MRT_TELEMETRY_Init>:


void MRT_TELEMETRY_Init(void){
 800a4fc:	b5b0      	push	{r4, r5, r7, lr}
 800a4fe:	b086      	sub	sp, #24
 800a500:	af00      	add	r7, sp, #0

	MRT_radio_Init();
 800a502:	f7ff ffed 	bl	800a4e0 <MRT_radio_Init>

	HAL_IWDG_Refresh(&hiwdg);

	#if IRIDIUM_
		HAL_GPIO_WritePin(Iridium_RST_GPIO_Port, Iridium_RST_Pin, SET);
 800a506:	2201      	movs	r2, #1
 800a508:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a50c:	4809      	ldr	r0, [pc, #36]	; (800a534 <MRT_TELEMETRY_Init+0x38>)
 800a50e:	f000 ff65 	bl	800b3dc <HAL_GPIO_WritePin>
		#if IRIDIUM_INTERNAL_PRINT
		hiridium = MRT_Iridium_Init(IRIDIUM_TIMEOUT, IRIDIUM_I2C, print);
 800a512:	4c09      	ldr	r4, [pc, #36]	; (800a538 <MRT_TELEMETRY_Init+0x3c>)
 800a514:	4638      	mov	r0, r7
 800a516:	4b09      	ldr	r3, [pc, #36]	; (800a53c <MRT_TELEMETRY_Init+0x40>)
 800a518:	2202      	movs	r2, #2
 800a51a:	2101      	movs	r1, #1
 800a51c:	f7ff f92e 	bl	800977c <MRT_Iridium_Init>
 800a520:	4625      	mov	r5, r4
 800a522:	463c      	mov	r4, r7
 800a524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a526:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a528:	6823      	ldr	r3, [r4, #0]
 800a52a:	602b      	str	r3, [r5, #0]
		#else
		hiridium = MRT_Iridium_Init(IRIDIUM_TIMEOUT, IRIDIUM_I2C, no_print); //Doesn't print the internal commands
		#endif
	#endif
}
 800a52c:	bf00      	nop
 800a52e:	3718      	adds	r7, #24
 800a530:	46bd      	mov	sp, r7
 800a532:	bdb0      	pop	{r4, r5, r7, pc}
 800a534:	40021000 	.word	0x40021000
 800a538:	2000044c 	.word	0x2000044c
 800a53c:	08001109 	.word	0x08001109

0800a540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a544:	4b0e      	ldr	r3, [pc, #56]	; (800a580 <HAL_Init+0x40>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a0d      	ldr	r2, [pc, #52]	; (800a580 <HAL_Init+0x40>)
 800a54a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a54e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a550:	4b0b      	ldr	r3, [pc, #44]	; (800a580 <HAL_Init+0x40>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a0a      	ldr	r2, [pc, #40]	; (800a580 <HAL_Init+0x40>)
 800a556:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a55a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a55c:	4b08      	ldr	r3, [pc, #32]	; (800a580 <HAL_Init+0x40>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a07      	ldr	r2, [pc, #28]	; (800a580 <HAL_Init+0x40>)
 800a562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a566:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a568:	2003      	movs	r0, #3
 800a56a:	f000 fd30 	bl	800afce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a56e:	2000      	movs	r0, #0
 800a570:	f7f8 fe32 	bl	80031d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a574:	f7f8 fe04 	bl	8003180 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a578:	2300      	movs	r3, #0
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop
 800a580:	40023c00 	.word	0x40023c00

0800a584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a584:	b480      	push	{r7}
 800a586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a588:	4b06      	ldr	r3, [pc, #24]	; (800a5a4 <HAL_IncTick+0x20>)
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	461a      	mov	r2, r3
 800a58e:	4b06      	ldr	r3, [pc, #24]	; (800a5a8 <HAL_IncTick+0x24>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4413      	add	r3, r2
 800a594:	4a04      	ldr	r2, [pc, #16]	; (800a5a8 <HAL_IncTick+0x24>)
 800a596:	6013      	str	r3, [r2, #0]
}
 800a598:	bf00      	nop
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	200000b4 	.word	0x200000b4
 800a5a8:	20006098 	.word	0x20006098

0800a5ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	af00      	add	r7, sp, #0
  return uwTick;
 800a5b0:	4b03      	ldr	r3, [pc, #12]	; (800a5c0 <HAL_GetTick+0x14>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr
 800a5be:	bf00      	nop
 800a5c0:	20006098 	.word	0x20006098

0800a5c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b084      	sub	sp, #16
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a5cc:	f7ff ffee 	bl	800a5ac <HAL_GetTick>
 800a5d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5dc:	d005      	beq.n	800a5ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a5de:	4b0a      	ldr	r3, [pc, #40]	; (800a608 <HAL_Delay+0x44>)
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	4413      	add	r3, r2
 800a5e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a5ea:	bf00      	nop
 800a5ec:	f7ff ffde 	bl	800a5ac <HAL_GetTick>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	1ad3      	subs	r3, r2, r3
 800a5f6:	68fa      	ldr	r2, [r7, #12]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d8f7      	bhi.n	800a5ec <HAL_Delay+0x28>
  {
  }
}
 800a5fc:	bf00      	nop
 800a5fe:	bf00      	nop
 800a600:	3710      	adds	r7, #16
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	200000b4 	.word	0x200000b4

0800a60c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a614:	2300      	movs	r3, #0
 800a616:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d101      	bne.n	800a622 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800a61e:	2301      	movs	r3, #1
 800a620:	e033      	b.n	800a68a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a626:	2b00      	cmp	r3, #0
 800a628:	d109      	bne.n	800a63e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f7f6 ffa8 	bl	8001580 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2200      	movs	r2, #0
 800a634:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a642:	f003 0310 	and.w	r3, r3, #16
 800a646:	2b00      	cmp	r3, #0
 800a648:	d118      	bne.n	800a67c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a64e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800a652:	f023 0302 	bic.w	r3, r3, #2
 800a656:	f043 0202 	orr.w	r2, r3, #2
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 fae8 	bl	800ac34 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2200      	movs	r2, #0
 800a668:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a66e:	f023 0303 	bic.w	r3, r3, #3
 800a672:	f043 0201 	orr.w	r2, r3, #1
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	641a      	str	r2, [r3, #64]	; 0x40
 800a67a:	e001      	b.n	800a680 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800a67c:	2301      	movs	r3, #1
 800a67e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2200      	movs	r2, #0
 800a684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800a688:	7bfb      	ldrb	r3, [r7, #15]
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3710      	adds	r7, #16
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
	...

0800a694 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800a694:	b480      	push	{r7}
 800a696:	b085      	sub	sp, #20
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800a69c:	2300      	movs	r3, #0
 800a69e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d101      	bne.n	800a6ae <HAL_ADC_Start+0x1a>
 800a6aa:	2302      	movs	r3, #2
 800a6ac:	e0b2      	b.n	800a814 <HAL_ADC_Start+0x180>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	f003 0301 	and.w	r3, r3, #1
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d018      	beq.n	800a6f6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	689a      	ldr	r2, [r3, #8]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f042 0201 	orr.w	r2, r2, #1
 800a6d2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800a6d4:	4b52      	ldr	r3, [pc, #328]	; (800a820 <HAL_ADC_Start+0x18c>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a52      	ldr	r2, [pc, #328]	; (800a824 <HAL_ADC_Start+0x190>)
 800a6da:	fba2 2303 	umull	r2, r3, r2, r3
 800a6de:	0c9a      	lsrs	r2, r3, #18
 800a6e0:	4613      	mov	r3, r2
 800a6e2:	005b      	lsls	r3, r3, #1
 800a6e4:	4413      	add	r3, r2
 800a6e6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800a6e8:	e002      	b.n	800a6f0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	3b01      	subs	r3, #1
 800a6ee:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d1f9      	bne.n	800a6ea <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	689b      	ldr	r3, [r3, #8]
 800a6fc:	f003 0301 	and.w	r3, r3, #1
 800a700:	2b01      	cmp	r3, #1
 800a702:	d17a      	bne.n	800a7fa <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a708:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a70c:	f023 0301 	bic.w	r3, r3, #1
 800a710:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a722:	2b00      	cmp	r3, #0
 800a724:	d007      	beq.n	800a736 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a72a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a72e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a73a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a73e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a742:	d106      	bne.n	800a752 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a748:	f023 0206 	bic.w	r2, r3, #6
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	645a      	str	r2, [r3, #68]	; 0x44
 800a750:	e002      	b.n	800a758 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2200      	movs	r2, #0
 800a756:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a760:	4b31      	ldr	r3, [pc, #196]	; (800a828 <HAL_ADC_Start+0x194>)
 800a762:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800a76c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	f003 031f 	and.w	r3, r3, #31
 800a776:	2b00      	cmp	r3, #0
 800a778:	d12a      	bne.n	800a7d0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a2b      	ldr	r2, [pc, #172]	; (800a82c <HAL_ADC_Start+0x198>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d015      	beq.n	800a7b0 <HAL_ADC_Start+0x11c>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a29      	ldr	r2, [pc, #164]	; (800a830 <HAL_ADC_Start+0x19c>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d105      	bne.n	800a79a <HAL_ADC_Start+0x106>
 800a78e:	4b26      	ldr	r3, [pc, #152]	; (800a828 <HAL_ADC_Start+0x194>)
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	f003 031f 	and.w	r3, r3, #31
 800a796:	2b00      	cmp	r3, #0
 800a798:	d00a      	beq.n	800a7b0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a25      	ldr	r2, [pc, #148]	; (800a834 <HAL_ADC_Start+0x1a0>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d136      	bne.n	800a812 <HAL_ADC_Start+0x17e>
 800a7a4:	4b20      	ldr	r3, [pc, #128]	; (800a828 <HAL_ADC_Start+0x194>)
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	f003 0310 	and.w	r3, r3, #16
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d130      	bne.n	800a812 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d129      	bne.n	800a812 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	689a      	ldr	r2, [r3, #8]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a7cc:	609a      	str	r2, [r3, #8]
 800a7ce:	e020      	b.n	800a812 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a15      	ldr	r2, [pc, #84]	; (800a82c <HAL_ADC_Start+0x198>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d11b      	bne.n	800a812 <HAL_ADC_Start+0x17e>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d114      	bne.n	800a812 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	689a      	ldr	r2, [r3, #8]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a7f6:	609a      	str	r2, [r3, #8]
 800a7f8:	e00b      	b.n	800a812 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7fe:	f043 0210 	orr.w	r2, r3, #16
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a80a:	f043 0201 	orr.w	r2, r3, #1
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800a812:	2300      	movs	r3, #0
}
 800a814:	4618      	mov	r0, r3
 800a816:	3714      	adds	r7, #20
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr
 800a820:	20000088 	.word	0x20000088
 800a824:	431bde83 	.word	0x431bde83
 800a828:	40012300 	.word	0x40012300
 800a82c:	40012000 	.word	0x40012000
 800a830:	40012100 	.word	0x40012100
 800a834:	40012200 	.word	0x40012200

0800a838 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a846:	2b01      	cmp	r3, #1
 800a848:	d101      	bne.n	800a84e <HAL_ADC_Stop+0x16>
 800a84a:	2302      	movs	r3, #2
 800a84c:	e021      	b.n	800a892 <HAL_ADC_Stop+0x5a>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2201      	movs	r2, #1
 800a852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	689a      	ldr	r2, [r3, #8]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f022 0201 	bic.w	r2, r2, #1
 800a864:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	689b      	ldr	r3, [r3, #8]
 800a86c:	f003 0301 	and.w	r3, r3, #1
 800a870:	2b00      	cmp	r3, #0
 800a872:	d109      	bne.n	800a888 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a878:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800a87c:	f023 0301 	bic.w	r3, r3, #1
 800a880:	f043 0201 	orr.w	r2, r3, #1
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a890:	2300      	movs	r3, #0
}
 800a892:	4618      	mov	r0, r3
 800a894:	370c      	adds	r7, #12
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr

0800a89e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800a89e:	b580      	push	{r7, lr}
 800a8a0:	b084      	sub	sp, #16
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	6078      	str	r0, [r7, #4]
 800a8a6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	689b      	ldr	r3, [r3, #8]
 800a8b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8ba:	d113      	bne.n	800a8e4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800a8c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8ca:	d10b      	bne.n	800a8e4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d0:	f043 0220 	orr.w	r2, r3, #32
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	e063      	b.n	800a9ac <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800a8e4:	f7ff fe62 	bl	800a5ac <HAL_GetTick>
 800a8e8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800a8ea:	e021      	b.n	800a930 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8f2:	d01d      	beq.n	800a930 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d007      	beq.n	800a90a <HAL_ADC_PollForConversion+0x6c>
 800a8fa:	f7ff fe57 	bl	800a5ac <HAL_GetTick>
 800a8fe:	4602      	mov	r2, r0
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	1ad3      	subs	r3, r2, r3
 800a904:	683a      	ldr	r2, [r7, #0]
 800a906:	429a      	cmp	r2, r3
 800a908:	d212      	bcs.n	800a930 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f003 0302 	and.w	r3, r3, #2
 800a914:	2b02      	cmp	r3, #2
 800a916:	d00b      	beq.n	800a930 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a91c:	f043 0204 	orr.w	r2, r3, #4
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2200      	movs	r2, #0
 800a928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800a92c:	2303      	movs	r3, #3
 800a92e:	e03d      	b.n	800a9ac <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f003 0302 	and.w	r3, r3, #2
 800a93a:	2b02      	cmp	r3, #2
 800a93c:	d1d6      	bne.n	800a8ec <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f06f 0212 	mvn.w	r2, #18
 800a946:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a94c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	689b      	ldr	r3, [r3, #8]
 800a95a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d123      	bne.n	800a9aa <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a966:	2b00      	cmp	r3, #0
 800a968:	d11f      	bne.n	800a9aa <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a970:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a974:	2b00      	cmp	r3, #0
 800a976:	d006      	beq.n	800a986 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800a982:	2b00      	cmp	r3, #0
 800a984:	d111      	bne.n	800a9aa <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a98a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a996:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d105      	bne.n	800a9aa <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a2:	f043 0201 	orr.w	r2, r3, #1
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800a9aa:	2300      	movs	r3, #0
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3710      	adds	r7, #16
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800a9b4:	b480      	push	{r7}
 800a9b6:	b083      	sub	sp, #12
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	370c      	adds	r7, #12
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr
	...

0800a9d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b085      	sub	sp, #20
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d101      	bne.n	800a9ec <HAL_ADC_ConfigChannel+0x1c>
 800a9e8:	2302      	movs	r3, #2
 800a9ea:	e113      	b.n	800ac14 <HAL_ADC_ConfigChannel+0x244>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	2b09      	cmp	r3, #9
 800a9fa:	d925      	bls.n	800aa48 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	68d9      	ldr	r1, [r3, #12]
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	461a      	mov	r2, r3
 800aa0a:	4613      	mov	r3, r2
 800aa0c:	005b      	lsls	r3, r3, #1
 800aa0e:	4413      	add	r3, r2
 800aa10:	3b1e      	subs	r3, #30
 800aa12:	2207      	movs	r2, #7
 800aa14:	fa02 f303 	lsl.w	r3, r2, r3
 800aa18:	43da      	mvns	r2, r3
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	400a      	ands	r2, r1
 800aa20:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	68d9      	ldr	r1, [r3, #12]
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	689a      	ldr	r2, [r3, #8]
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	4618      	mov	r0, r3
 800aa34:	4603      	mov	r3, r0
 800aa36:	005b      	lsls	r3, r3, #1
 800aa38:	4403      	add	r3, r0
 800aa3a:	3b1e      	subs	r3, #30
 800aa3c:	409a      	lsls	r2, r3
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	430a      	orrs	r2, r1
 800aa44:	60da      	str	r2, [r3, #12]
 800aa46:	e022      	b.n	800aa8e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	6919      	ldr	r1, [r3, #16]
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	461a      	mov	r2, r3
 800aa56:	4613      	mov	r3, r2
 800aa58:	005b      	lsls	r3, r3, #1
 800aa5a:	4413      	add	r3, r2
 800aa5c:	2207      	movs	r2, #7
 800aa5e:	fa02 f303 	lsl.w	r3, r2, r3
 800aa62:	43da      	mvns	r2, r3
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	400a      	ands	r2, r1
 800aa6a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	6919      	ldr	r1, [r3, #16]
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	689a      	ldr	r2, [r3, #8]
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	4603      	mov	r3, r0
 800aa80:	005b      	lsls	r3, r3, #1
 800aa82:	4403      	add	r3, r0
 800aa84:	409a      	lsls	r2, r3
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	430a      	orrs	r2, r1
 800aa8c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	2b06      	cmp	r3, #6
 800aa94:	d824      	bhi.n	800aae0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	685a      	ldr	r2, [r3, #4]
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	4413      	add	r3, r2
 800aaa6:	3b05      	subs	r3, #5
 800aaa8:	221f      	movs	r2, #31
 800aaaa:	fa02 f303 	lsl.w	r3, r2, r3
 800aaae:	43da      	mvns	r2, r3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	400a      	ands	r2, r1
 800aab6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	4618      	mov	r0, r3
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	685a      	ldr	r2, [r3, #4]
 800aaca:	4613      	mov	r3, r2
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	4413      	add	r3, r2
 800aad0:	3b05      	subs	r3, #5
 800aad2:	fa00 f203 	lsl.w	r2, r0, r3
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	430a      	orrs	r2, r1
 800aadc:	635a      	str	r2, [r3, #52]	; 0x34
 800aade:	e04c      	b.n	800ab7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	2b0c      	cmp	r3, #12
 800aae6:	d824      	bhi.n	800ab32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	685a      	ldr	r2, [r3, #4]
 800aaf2:	4613      	mov	r3, r2
 800aaf4:	009b      	lsls	r3, r3, #2
 800aaf6:	4413      	add	r3, r2
 800aaf8:	3b23      	subs	r3, #35	; 0x23
 800aafa:	221f      	movs	r2, #31
 800aafc:	fa02 f303 	lsl.w	r3, r2, r3
 800ab00:	43da      	mvns	r2, r3
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	400a      	ands	r2, r1
 800ab08:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	4618      	mov	r0, r3
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	685a      	ldr	r2, [r3, #4]
 800ab1c:	4613      	mov	r3, r2
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	4413      	add	r3, r2
 800ab22:	3b23      	subs	r3, #35	; 0x23
 800ab24:	fa00 f203 	lsl.w	r2, r0, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	430a      	orrs	r2, r1
 800ab2e:	631a      	str	r2, [r3, #48]	; 0x30
 800ab30:	e023      	b.n	800ab7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	685a      	ldr	r2, [r3, #4]
 800ab3c:	4613      	mov	r3, r2
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	4413      	add	r3, r2
 800ab42:	3b41      	subs	r3, #65	; 0x41
 800ab44:	221f      	movs	r2, #31
 800ab46:	fa02 f303 	lsl.w	r3, r2, r3
 800ab4a:	43da      	mvns	r2, r3
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	400a      	ands	r2, r1
 800ab52:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	4618      	mov	r0, r3
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	685a      	ldr	r2, [r3, #4]
 800ab66:	4613      	mov	r3, r2
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	4413      	add	r3, r2
 800ab6c:	3b41      	subs	r3, #65	; 0x41
 800ab6e:	fa00 f203 	lsl.w	r2, r0, r3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	430a      	orrs	r2, r1
 800ab78:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800ab7a:	4b29      	ldr	r3, [pc, #164]	; (800ac20 <HAL_ADC_ConfigChannel+0x250>)
 800ab7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4a28      	ldr	r2, [pc, #160]	; (800ac24 <HAL_ADC_ConfigChannel+0x254>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d10f      	bne.n	800aba8 <HAL_ADC_ConfigChannel+0x1d8>
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	2b12      	cmp	r3, #18
 800ab8e:	d10b      	bne.n	800aba8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a1d      	ldr	r2, [pc, #116]	; (800ac24 <HAL_ADC_ConfigChannel+0x254>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d12b      	bne.n	800ac0a <HAL_ADC_ConfigChannel+0x23a>
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4a1c      	ldr	r2, [pc, #112]	; (800ac28 <HAL_ADC_ConfigChannel+0x258>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d003      	beq.n	800abc4 <HAL_ADC_ConfigChannel+0x1f4>
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	2b11      	cmp	r3, #17
 800abc2:	d122      	bne.n	800ac0a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a11      	ldr	r2, [pc, #68]	; (800ac28 <HAL_ADC_ConfigChannel+0x258>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d111      	bne.n	800ac0a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800abe6:	4b11      	ldr	r3, [pc, #68]	; (800ac2c <HAL_ADC_ConfigChannel+0x25c>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4a11      	ldr	r2, [pc, #68]	; (800ac30 <HAL_ADC_ConfigChannel+0x260>)
 800abec:	fba2 2303 	umull	r2, r3, r2, r3
 800abf0:	0c9a      	lsrs	r2, r3, #18
 800abf2:	4613      	mov	r3, r2
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	4413      	add	r3, r2
 800abf8:	005b      	lsls	r3, r3, #1
 800abfa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800abfc:	e002      	b.n	800ac04 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	3b01      	subs	r3, #1
 800ac02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d1f9      	bne.n	800abfe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800ac12:	2300      	movs	r3, #0
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3714      	adds	r7, #20
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr
 800ac20:	40012300 	.word	0x40012300
 800ac24:	40012000 	.word	0x40012000
 800ac28:	10000012 	.word	0x10000012
 800ac2c:	20000088 	.word	0x20000088
 800ac30:	431bde83 	.word	0x431bde83

0800ac34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b085      	sub	sp, #20
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800ac3c:	4b79      	ldr	r3, [pc, #484]	; (800ae24 <ADC_Init+0x1f0>)
 800ac3e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	685a      	ldr	r2, [r3, #4]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	431a      	orrs	r2, r3
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	685a      	ldr	r2, [r3, #4]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ac68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	6859      	ldr	r1, [r3, #4]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	691b      	ldr	r3, [r3, #16]
 800ac74:	021a      	lsls	r2, r3, #8
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	430a      	orrs	r2, r1
 800ac7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	685a      	ldr	r2, [r3, #4]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800ac8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	6859      	ldr	r1, [r3, #4]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	689a      	ldr	r2, [r3, #8]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	430a      	orrs	r2, r1
 800ac9e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	689a      	ldr	r2, [r3, #8]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800acae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	6899      	ldr	r1, [r3, #8]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	68da      	ldr	r2, [r3, #12]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	430a      	orrs	r2, r1
 800acc0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acc6:	4a58      	ldr	r2, [pc, #352]	; (800ae28 <ADC_Init+0x1f4>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d022      	beq.n	800ad12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	689a      	ldr	r2, [r3, #8]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800acda:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	6899      	ldr	r1, [r3, #8]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	430a      	orrs	r2, r1
 800acec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	689a      	ldr	r2, [r3, #8]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800acfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	6899      	ldr	r1, [r3, #8]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	430a      	orrs	r2, r1
 800ad0e:	609a      	str	r2, [r3, #8]
 800ad10:	e00f      	b.n	800ad32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	689a      	ldr	r2, [r3, #8]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ad20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	689a      	ldr	r2, [r3, #8]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800ad30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	689a      	ldr	r2, [r3, #8]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f022 0202 	bic.w	r2, r2, #2
 800ad40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	6899      	ldr	r1, [r3, #8]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	7e1b      	ldrb	r3, [r3, #24]
 800ad4c:	005a      	lsls	r2, r3, #1
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	430a      	orrs	r2, r1
 800ad54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d01b      	beq.n	800ad98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	685a      	ldr	r2, [r3, #4]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	685a      	ldr	r2, [r3, #4]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800ad7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	6859      	ldr	r1, [r3, #4]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad8a:	3b01      	subs	r3, #1
 800ad8c:	035a      	lsls	r2, r3, #13
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	430a      	orrs	r2, r1
 800ad94:	605a      	str	r2, [r3, #4]
 800ad96:	e007      	b.n	800ada8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	685a      	ldr	r2, [r3, #4]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ada6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800adb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	69db      	ldr	r3, [r3, #28]
 800adc2:	3b01      	subs	r3, #1
 800adc4:	051a      	lsls	r2, r3, #20
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	430a      	orrs	r2, r1
 800adcc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	689a      	ldr	r2, [r3, #8]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800addc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	6899      	ldr	r1, [r3, #8]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800adea:	025a      	lsls	r2, r3, #9
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	430a      	orrs	r2, r1
 800adf2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	689a      	ldr	r2, [r3, #8]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	6899      	ldr	r1, [r3, #8]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	695b      	ldr	r3, [r3, #20]
 800ae0e:	029a      	lsls	r2, r3, #10
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	430a      	orrs	r2, r1
 800ae16:	609a      	str	r2, [r3, #8]
}
 800ae18:	bf00      	nop
 800ae1a:	3714      	adds	r7, #20
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr
 800ae24:	40012300 	.word	0x40012300
 800ae28:	0f000001 	.word	0x0f000001

0800ae2c <__NVIC_SetPriorityGrouping>:
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b085      	sub	sp, #20
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f003 0307 	and.w	r3, r3, #7
 800ae3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ae3c:	4b0c      	ldr	r3, [pc, #48]	; (800ae70 <__NVIC_SetPriorityGrouping+0x44>)
 800ae3e:	68db      	ldr	r3, [r3, #12]
 800ae40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ae42:	68ba      	ldr	r2, [r7, #8]
 800ae44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ae48:	4013      	ands	r3, r2
 800ae4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ae54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ae58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ae5e:	4a04      	ldr	r2, [pc, #16]	; (800ae70 <__NVIC_SetPriorityGrouping+0x44>)
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	60d3      	str	r3, [r2, #12]
}
 800ae64:	bf00      	nop
 800ae66:	3714      	adds	r7, #20
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr
 800ae70:	e000ed00 	.word	0xe000ed00

0800ae74 <__NVIC_GetPriorityGrouping>:
{
 800ae74:	b480      	push	{r7}
 800ae76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ae78:	4b04      	ldr	r3, [pc, #16]	; (800ae8c <__NVIC_GetPriorityGrouping+0x18>)
 800ae7a:	68db      	ldr	r3, [r3, #12]
 800ae7c:	0a1b      	lsrs	r3, r3, #8
 800ae7e:	f003 0307 	and.w	r3, r3, #7
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr
 800ae8c:	e000ed00 	.word	0xe000ed00

0800ae90 <__NVIC_EnableIRQ>:
{
 800ae90:	b480      	push	{r7}
 800ae92:	b083      	sub	sp, #12
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	4603      	mov	r3, r0
 800ae98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ae9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	db0b      	blt.n	800aeba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800aea2:	79fb      	ldrb	r3, [r7, #7]
 800aea4:	f003 021f 	and.w	r2, r3, #31
 800aea8:	4907      	ldr	r1, [pc, #28]	; (800aec8 <__NVIC_EnableIRQ+0x38>)
 800aeaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aeae:	095b      	lsrs	r3, r3, #5
 800aeb0:	2001      	movs	r0, #1
 800aeb2:	fa00 f202 	lsl.w	r2, r0, r2
 800aeb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800aeba:	bf00      	nop
 800aebc:	370c      	adds	r7, #12
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr
 800aec6:	bf00      	nop
 800aec8:	e000e100 	.word	0xe000e100

0800aecc <__NVIC_DisableIRQ>:
{
 800aecc:	b480      	push	{r7}
 800aece:	b083      	sub	sp, #12
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	4603      	mov	r3, r0
 800aed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	db12      	blt.n	800af04 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800aede:	79fb      	ldrb	r3, [r7, #7]
 800aee0:	f003 021f 	and.w	r2, r3, #31
 800aee4:	490a      	ldr	r1, [pc, #40]	; (800af10 <__NVIC_DisableIRQ+0x44>)
 800aee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aeea:	095b      	lsrs	r3, r3, #5
 800aeec:	2001      	movs	r0, #1
 800aeee:	fa00 f202 	lsl.w	r2, r0, r2
 800aef2:	3320      	adds	r3, #32
 800aef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800aef8:	f3bf 8f4f 	dsb	sy
}
 800aefc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800aefe:	f3bf 8f6f 	isb	sy
}
 800af02:	bf00      	nop
}
 800af04:	bf00      	nop
 800af06:	370c      	adds	r7, #12
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr
 800af10:	e000e100 	.word	0xe000e100

0800af14 <__NVIC_SetPriority>:
{
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
 800af1a:	4603      	mov	r3, r0
 800af1c:	6039      	str	r1, [r7, #0]
 800af1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800af20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af24:	2b00      	cmp	r3, #0
 800af26:	db0a      	blt.n	800af3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	b2da      	uxtb	r2, r3
 800af2c:	490c      	ldr	r1, [pc, #48]	; (800af60 <__NVIC_SetPriority+0x4c>)
 800af2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af32:	0112      	lsls	r2, r2, #4
 800af34:	b2d2      	uxtb	r2, r2
 800af36:	440b      	add	r3, r1
 800af38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800af3c:	e00a      	b.n	800af54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	b2da      	uxtb	r2, r3
 800af42:	4908      	ldr	r1, [pc, #32]	; (800af64 <__NVIC_SetPriority+0x50>)
 800af44:	79fb      	ldrb	r3, [r7, #7]
 800af46:	f003 030f 	and.w	r3, r3, #15
 800af4a:	3b04      	subs	r3, #4
 800af4c:	0112      	lsls	r2, r2, #4
 800af4e:	b2d2      	uxtb	r2, r2
 800af50:	440b      	add	r3, r1
 800af52:	761a      	strb	r2, [r3, #24]
}
 800af54:	bf00      	nop
 800af56:	370c      	adds	r7, #12
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr
 800af60:	e000e100 	.word	0xe000e100
 800af64:	e000ed00 	.word	0xe000ed00

0800af68 <NVIC_EncodePriority>:
{
 800af68:	b480      	push	{r7}
 800af6a:	b089      	sub	sp, #36	; 0x24
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	60f8      	str	r0, [r7, #12]
 800af70:	60b9      	str	r1, [r7, #8]
 800af72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f003 0307 	and.w	r3, r3, #7
 800af7a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	f1c3 0307 	rsb	r3, r3, #7
 800af82:	2b04      	cmp	r3, #4
 800af84:	bf28      	it	cs
 800af86:	2304      	movcs	r3, #4
 800af88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800af8a:	69fb      	ldr	r3, [r7, #28]
 800af8c:	3304      	adds	r3, #4
 800af8e:	2b06      	cmp	r3, #6
 800af90:	d902      	bls.n	800af98 <NVIC_EncodePriority+0x30>
 800af92:	69fb      	ldr	r3, [r7, #28]
 800af94:	3b03      	subs	r3, #3
 800af96:	e000      	b.n	800af9a <NVIC_EncodePriority+0x32>
 800af98:	2300      	movs	r3, #0
 800af9a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800af9c:	f04f 32ff 	mov.w	r2, #4294967295
 800afa0:	69bb      	ldr	r3, [r7, #24]
 800afa2:	fa02 f303 	lsl.w	r3, r2, r3
 800afa6:	43da      	mvns	r2, r3
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	401a      	ands	r2, r3
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800afb0:	f04f 31ff 	mov.w	r1, #4294967295
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	fa01 f303 	lsl.w	r3, r1, r3
 800afba:	43d9      	mvns	r1, r3
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800afc0:	4313      	orrs	r3, r2
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3724      	adds	r7, #36	; 0x24
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr

0800afce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800afce:	b580      	push	{r7, lr}
 800afd0:	b082      	sub	sp, #8
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f7ff ff28 	bl	800ae2c <__NVIC_SetPriorityGrouping>
}
 800afdc:	bf00      	nop
 800afde:	3708      	adds	r7, #8
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b086      	sub	sp, #24
 800afe8:	af00      	add	r7, sp, #0
 800afea:	4603      	mov	r3, r0
 800afec:	60b9      	str	r1, [r7, #8]
 800afee:	607a      	str	r2, [r7, #4]
 800aff0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800aff2:	2300      	movs	r3, #0
 800aff4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800aff6:	f7ff ff3d 	bl	800ae74 <__NVIC_GetPriorityGrouping>
 800affa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	68b9      	ldr	r1, [r7, #8]
 800b000:	6978      	ldr	r0, [r7, #20]
 800b002:	f7ff ffb1 	bl	800af68 <NVIC_EncodePriority>
 800b006:	4602      	mov	r2, r0
 800b008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b00c:	4611      	mov	r1, r2
 800b00e:	4618      	mov	r0, r3
 800b010:	f7ff ff80 	bl	800af14 <__NVIC_SetPriority>
}
 800b014:	bf00      	nop
 800b016:	3718      	adds	r7, #24
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
 800b022:	4603      	mov	r3, r0
 800b024:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7ff ff30 	bl	800ae90 <__NVIC_EnableIRQ>
}
 800b030:	bf00      	nop
 800b032:	3708      	adds	r7, #8
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b082      	sub	sp, #8
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	4603      	mov	r3, r0
 800b040:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800b042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b046:	4618      	mov	r0, r3
 800b048:	f7ff ff40 	bl	800aecc <__NVIC_DisableIRQ>
}
 800b04c:	bf00      	nop
 800b04e:	3708      	adds	r7, #8
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b054:	b480      	push	{r7}
 800b056:	b089      	sub	sp, #36	; 0x24
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b05e:	2300      	movs	r3, #0
 800b060:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b062:	2300      	movs	r3, #0
 800b064:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b066:	2300      	movs	r3, #0
 800b068:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b06a:	2300      	movs	r3, #0
 800b06c:	61fb      	str	r3, [r7, #28]
 800b06e:	e177      	b.n	800b360 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b070:	2201      	movs	r2, #1
 800b072:	69fb      	ldr	r3, [r7, #28]
 800b074:	fa02 f303 	lsl.w	r3, r2, r3
 800b078:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	697a      	ldr	r2, [r7, #20]
 800b080:	4013      	ands	r3, r2
 800b082:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b084:	693a      	ldr	r2, [r7, #16]
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	429a      	cmp	r2, r3
 800b08a:	f040 8166 	bne.w	800b35a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	f003 0303 	and.w	r3, r3, #3
 800b096:	2b01      	cmp	r3, #1
 800b098:	d005      	beq.n	800b0a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	d130      	bne.n	800b108 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	689b      	ldr	r3, [r3, #8]
 800b0aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b0ac:	69fb      	ldr	r3, [r7, #28]
 800b0ae:	005b      	lsls	r3, r3, #1
 800b0b0:	2203      	movs	r2, #3
 800b0b2:	fa02 f303 	lsl.w	r3, r2, r3
 800b0b6:	43db      	mvns	r3, r3
 800b0b8:	69ba      	ldr	r2, [r7, #24]
 800b0ba:	4013      	ands	r3, r2
 800b0bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	68da      	ldr	r2, [r3, #12]
 800b0c2:	69fb      	ldr	r3, [r7, #28]
 800b0c4:	005b      	lsls	r3, r3, #1
 800b0c6:	fa02 f303 	lsl.w	r3, r2, r3
 800b0ca:	69ba      	ldr	r2, [r7, #24]
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	69ba      	ldr	r2, [r7, #24]
 800b0d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b0dc:	2201      	movs	r2, #1
 800b0de:	69fb      	ldr	r3, [r7, #28]
 800b0e0:	fa02 f303 	lsl.w	r3, r2, r3
 800b0e4:	43db      	mvns	r3, r3
 800b0e6:	69ba      	ldr	r2, [r7, #24]
 800b0e8:	4013      	ands	r3, r2
 800b0ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	091b      	lsrs	r3, r3, #4
 800b0f2:	f003 0201 	and.w	r2, r3, #1
 800b0f6:	69fb      	ldr	r3, [r7, #28]
 800b0f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b0fc:	69ba      	ldr	r2, [r7, #24]
 800b0fe:	4313      	orrs	r3, r2
 800b100:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	69ba      	ldr	r2, [r7, #24]
 800b106:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	f003 0303 	and.w	r3, r3, #3
 800b110:	2b03      	cmp	r3, #3
 800b112:	d017      	beq.n	800b144 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	68db      	ldr	r3, [r3, #12]
 800b118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b11a:	69fb      	ldr	r3, [r7, #28]
 800b11c:	005b      	lsls	r3, r3, #1
 800b11e:	2203      	movs	r2, #3
 800b120:	fa02 f303 	lsl.w	r3, r2, r3
 800b124:	43db      	mvns	r3, r3
 800b126:	69ba      	ldr	r2, [r7, #24]
 800b128:	4013      	ands	r3, r2
 800b12a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	689a      	ldr	r2, [r3, #8]
 800b130:	69fb      	ldr	r3, [r7, #28]
 800b132:	005b      	lsls	r3, r3, #1
 800b134:	fa02 f303 	lsl.w	r3, r2, r3
 800b138:	69ba      	ldr	r2, [r7, #24]
 800b13a:	4313      	orrs	r3, r2
 800b13c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	69ba      	ldr	r2, [r7, #24]
 800b142:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	685b      	ldr	r3, [r3, #4]
 800b148:	f003 0303 	and.w	r3, r3, #3
 800b14c:	2b02      	cmp	r3, #2
 800b14e:	d123      	bne.n	800b198 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b150:	69fb      	ldr	r3, [r7, #28]
 800b152:	08da      	lsrs	r2, r3, #3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	3208      	adds	r2, #8
 800b158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b15c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b15e:	69fb      	ldr	r3, [r7, #28]
 800b160:	f003 0307 	and.w	r3, r3, #7
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	220f      	movs	r2, #15
 800b168:	fa02 f303 	lsl.w	r3, r2, r3
 800b16c:	43db      	mvns	r3, r3
 800b16e:	69ba      	ldr	r2, [r7, #24]
 800b170:	4013      	ands	r3, r2
 800b172:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	691a      	ldr	r2, [r3, #16]
 800b178:	69fb      	ldr	r3, [r7, #28]
 800b17a:	f003 0307 	and.w	r3, r3, #7
 800b17e:	009b      	lsls	r3, r3, #2
 800b180:	fa02 f303 	lsl.w	r3, r2, r3
 800b184:	69ba      	ldr	r2, [r7, #24]
 800b186:	4313      	orrs	r3, r2
 800b188:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b18a:	69fb      	ldr	r3, [r7, #28]
 800b18c:	08da      	lsrs	r2, r3, #3
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	3208      	adds	r2, #8
 800b192:	69b9      	ldr	r1, [r7, #24]
 800b194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b19e:	69fb      	ldr	r3, [r7, #28]
 800b1a0:	005b      	lsls	r3, r3, #1
 800b1a2:	2203      	movs	r2, #3
 800b1a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b1a8:	43db      	mvns	r3, r3
 800b1aa:	69ba      	ldr	r2, [r7, #24]
 800b1ac:	4013      	ands	r3, r2
 800b1ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	f003 0203 	and.w	r2, r3, #3
 800b1b8:	69fb      	ldr	r3, [r7, #28]
 800b1ba:	005b      	lsls	r3, r3, #1
 800b1bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b1c0:	69ba      	ldr	r2, [r7, #24]
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	69ba      	ldr	r2, [r7, #24]
 800b1ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	f000 80c0 	beq.w	800b35a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b1da:	2300      	movs	r3, #0
 800b1dc:	60fb      	str	r3, [r7, #12]
 800b1de:	4b66      	ldr	r3, [pc, #408]	; (800b378 <HAL_GPIO_Init+0x324>)
 800b1e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1e2:	4a65      	ldr	r2, [pc, #404]	; (800b378 <HAL_GPIO_Init+0x324>)
 800b1e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b1e8:	6453      	str	r3, [r2, #68]	; 0x44
 800b1ea:	4b63      	ldr	r3, [pc, #396]	; (800b378 <HAL_GPIO_Init+0x324>)
 800b1ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1f2:	60fb      	str	r3, [r7, #12]
 800b1f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b1f6:	4a61      	ldr	r2, [pc, #388]	; (800b37c <HAL_GPIO_Init+0x328>)
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	089b      	lsrs	r3, r3, #2
 800b1fc:	3302      	adds	r3, #2
 800b1fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b202:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b204:	69fb      	ldr	r3, [r7, #28]
 800b206:	f003 0303 	and.w	r3, r3, #3
 800b20a:	009b      	lsls	r3, r3, #2
 800b20c:	220f      	movs	r2, #15
 800b20e:	fa02 f303 	lsl.w	r3, r2, r3
 800b212:	43db      	mvns	r3, r3
 800b214:	69ba      	ldr	r2, [r7, #24]
 800b216:	4013      	ands	r3, r2
 800b218:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4a58      	ldr	r2, [pc, #352]	; (800b380 <HAL_GPIO_Init+0x32c>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d037      	beq.n	800b292 <HAL_GPIO_Init+0x23e>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	4a57      	ldr	r2, [pc, #348]	; (800b384 <HAL_GPIO_Init+0x330>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d031      	beq.n	800b28e <HAL_GPIO_Init+0x23a>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	4a56      	ldr	r2, [pc, #344]	; (800b388 <HAL_GPIO_Init+0x334>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d02b      	beq.n	800b28a <HAL_GPIO_Init+0x236>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	4a55      	ldr	r2, [pc, #340]	; (800b38c <HAL_GPIO_Init+0x338>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d025      	beq.n	800b286 <HAL_GPIO_Init+0x232>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	4a54      	ldr	r2, [pc, #336]	; (800b390 <HAL_GPIO_Init+0x33c>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d01f      	beq.n	800b282 <HAL_GPIO_Init+0x22e>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	4a53      	ldr	r2, [pc, #332]	; (800b394 <HAL_GPIO_Init+0x340>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d019      	beq.n	800b27e <HAL_GPIO_Init+0x22a>
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	4a52      	ldr	r2, [pc, #328]	; (800b398 <HAL_GPIO_Init+0x344>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d013      	beq.n	800b27a <HAL_GPIO_Init+0x226>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	4a51      	ldr	r2, [pc, #324]	; (800b39c <HAL_GPIO_Init+0x348>)
 800b256:	4293      	cmp	r3, r2
 800b258:	d00d      	beq.n	800b276 <HAL_GPIO_Init+0x222>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	4a50      	ldr	r2, [pc, #320]	; (800b3a0 <HAL_GPIO_Init+0x34c>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d007      	beq.n	800b272 <HAL_GPIO_Init+0x21e>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	4a4f      	ldr	r2, [pc, #316]	; (800b3a4 <HAL_GPIO_Init+0x350>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d101      	bne.n	800b26e <HAL_GPIO_Init+0x21a>
 800b26a:	2309      	movs	r3, #9
 800b26c:	e012      	b.n	800b294 <HAL_GPIO_Init+0x240>
 800b26e:	230a      	movs	r3, #10
 800b270:	e010      	b.n	800b294 <HAL_GPIO_Init+0x240>
 800b272:	2308      	movs	r3, #8
 800b274:	e00e      	b.n	800b294 <HAL_GPIO_Init+0x240>
 800b276:	2307      	movs	r3, #7
 800b278:	e00c      	b.n	800b294 <HAL_GPIO_Init+0x240>
 800b27a:	2306      	movs	r3, #6
 800b27c:	e00a      	b.n	800b294 <HAL_GPIO_Init+0x240>
 800b27e:	2305      	movs	r3, #5
 800b280:	e008      	b.n	800b294 <HAL_GPIO_Init+0x240>
 800b282:	2304      	movs	r3, #4
 800b284:	e006      	b.n	800b294 <HAL_GPIO_Init+0x240>
 800b286:	2303      	movs	r3, #3
 800b288:	e004      	b.n	800b294 <HAL_GPIO_Init+0x240>
 800b28a:	2302      	movs	r3, #2
 800b28c:	e002      	b.n	800b294 <HAL_GPIO_Init+0x240>
 800b28e:	2301      	movs	r3, #1
 800b290:	e000      	b.n	800b294 <HAL_GPIO_Init+0x240>
 800b292:	2300      	movs	r3, #0
 800b294:	69fa      	ldr	r2, [r7, #28]
 800b296:	f002 0203 	and.w	r2, r2, #3
 800b29a:	0092      	lsls	r2, r2, #2
 800b29c:	4093      	lsls	r3, r2
 800b29e:	69ba      	ldr	r2, [r7, #24]
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b2a4:	4935      	ldr	r1, [pc, #212]	; (800b37c <HAL_GPIO_Init+0x328>)
 800b2a6:	69fb      	ldr	r3, [r7, #28]
 800b2a8:	089b      	lsrs	r3, r3, #2
 800b2aa:	3302      	adds	r3, #2
 800b2ac:	69ba      	ldr	r2, [r7, #24]
 800b2ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b2b2:	4b3d      	ldr	r3, [pc, #244]	; (800b3a8 <HAL_GPIO_Init+0x354>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	43db      	mvns	r3, r3
 800b2bc:	69ba      	ldr	r2, [r7, #24]
 800b2be:	4013      	ands	r3, r2
 800b2c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d003      	beq.n	800b2d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800b2ce:	69ba      	ldr	r2, [r7, #24]
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b2d6:	4a34      	ldr	r2, [pc, #208]	; (800b3a8 <HAL_GPIO_Init+0x354>)
 800b2d8:	69bb      	ldr	r3, [r7, #24]
 800b2da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b2dc:	4b32      	ldr	r3, [pc, #200]	; (800b3a8 <HAL_GPIO_Init+0x354>)
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	43db      	mvns	r3, r3
 800b2e6:	69ba      	ldr	r2, [r7, #24]
 800b2e8:	4013      	ands	r3, r2
 800b2ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d003      	beq.n	800b300 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800b2f8:	69ba      	ldr	r2, [r7, #24]
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b300:	4a29      	ldr	r2, [pc, #164]	; (800b3a8 <HAL_GPIO_Init+0x354>)
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b306:	4b28      	ldr	r3, [pc, #160]	; (800b3a8 <HAL_GPIO_Init+0x354>)
 800b308:	689b      	ldr	r3, [r3, #8]
 800b30a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	43db      	mvns	r3, r3
 800b310:	69ba      	ldr	r2, [r7, #24]
 800b312:	4013      	ands	r3, r2
 800b314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d003      	beq.n	800b32a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800b322:	69ba      	ldr	r2, [r7, #24]
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	4313      	orrs	r3, r2
 800b328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b32a:	4a1f      	ldr	r2, [pc, #124]	; (800b3a8 <HAL_GPIO_Init+0x354>)
 800b32c:	69bb      	ldr	r3, [r7, #24]
 800b32e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b330:	4b1d      	ldr	r3, [pc, #116]	; (800b3a8 <HAL_GPIO_Init+0x354>)
 800b332:	68db      	ldr	r3, [r3, #12]
 800b334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	43db      	mvns	r3, r3
 800b33a:	69ba      	ldr	r2, [r7, #24]
 800b33c:	4013      	ands	r3, r2
 800b33e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d003      	beq.n	800b354 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800b34c:	69ba      	ldr	r2, [r7, #24]
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	4313      	orrs	r3, r2
 800b352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b354:	4a14      	ldr	r2, [pc, #80]	; (800b3a8 <HAL_GPIO_Init+0x354>)
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b35a:	69fb      	ldr	r3, [r7, #28]
 800b35c:	3301      	adds	r3, #1
 800b35e:	61fb      	str	r3, [r7, #28]
 800b360:	69fb      	ldr	r3, [r7, #28]
 800b362:	2b0f      	cmp	r3, #15
 800b364:	f67f ae84 	bls.w	800b070 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b368:	bf00      	nop
 800b36a:	bf00      	nop
 800b36c:	3724      	adds	r7, #36	; 0x24
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr
 800b376:	bf00      	nop
 800b378:	40023800 	.word	0x40023800
 800b37c:	40013800 	.word	0x40013800
 800b380:	40020000 	.word	0x40020000
 800b384:	40020400 	.word	0x40020400
 800b388:	40020800 	.word	0x40020800
 800b38c:	40020c00 	.word	0x40020c00
 800b390:	40021000 	.word	0x40021000
 800b394:	40021400 	.word	0x40021400
 800b398:	40021800 	.word	0x40021800
 800b39c:	40021c00 	.word	0x40021c00
 800b3a0:	40022000 	.word	0x40022000
 800b3a4:	40022400 	.word	0x40022400
 800b3a8:	40013c00 	.word	0x40013c00

0800b3ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b085      	sub	sp, #20
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	460b      	mov	r3, r1
 800b3b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	691a      	ldr	r2, [r3, #16]
 800b3bc:	887b      	ldrh	r3, [r7, #2]
 800b3be:	4013      	ands	r3, r2
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d002      	beq.n	800b3ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	73fb      	strb	r3, [r7, #15]
 800b3c8:	e001      	b.n	800b3ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b3ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3714      	adds	r7, #20
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr

0800b3dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b083      	sub	sp, #12
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	807b      	strh	r3, [r7, #2]
 800b3e8:	4613      	mov	r3, r2
 800b3ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b3ec:	787b      	ldrb	r3, [r7, #1]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d003      	beq.n	800b3fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b3f2:	887a      	ldrh	r2, [r7, #2]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b3f8:	e003      	b.n	800b402 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b3fa:	887b      	ldrh	r3, [r7, #2]
 800b3fc:	041a      	lsls	r2, r3, #16
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	619a      	str	r2, [r3, #24]
}
 800b402:	bf00      	nop
 800b404:	370c      	adds	r7, #12
 800b406:	46bd      	mov	sp, r7
 800b408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40c:	4770      	bx	lr
	...

0800b410 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b082      	sub	sp, #8
 800b414:	af00      	add	r7, sp, #0
 800b416:	4603      	mov	r3, r0
 800b418:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b41a:	4b08      	ldr	r3, [pc, #32]	; (800b43c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b41c:	695a      	ldr	r2, [r3, #20]
 800b41e:	88fb      	ldrh	r3, [r7, #6]
 800b420:	4013      	ands	r3, r2
 800b422:	2b00      	cmp	r3, #0
 800b424:	d006      	beq.n	800b434 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b426:	4a05      	ldr	r2, [pc, #20]	; (800b43c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b428:	88fb      	ldrh	r3, [r7, #6]
 800b42a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b42c:	88fb      	ldrh	r3, [r7, #6]
 800b42e:	4618      	mov	r0, r3
 800b430:	f7f7 ff74 	bl	800331c <HAL_GPIO_EXTI_Callback>
  }
}
 800b434:	bf00      	nop
 800b436:	3708      	adds	r7, #8
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}
 800b43c:	40013c00 	.word	0x40013c00

0800b440 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d101      	bne.n	800b452 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b44e:	2301      	movs	r3, #1
 800b450:	e12b      	b.n	800b6aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d106      	bne.n	800b46c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f7f7 f860 	bl	800252c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2224      	movs	r2, #36	; 0x24
 800b470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	681a      	ldr	r2, [r3, #0]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f022 0201 	bic.w	r2, r2, #1
 800b482:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b492:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	681a      	ldr	r2, [r3, #0]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b4a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b4a4:	f001 fd14 	bl	800ced0 <HAL_RCC_GetPCLK1Freq>
 800b4a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	4a81      	ldr	r2, [pc, #516]	; (800b6b4 <HAL_I2C_Init+0x274>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d807      	bhi.n	800b4c4 <HAL_I2C_Init+0x84>
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	4a80      	ldr	r2, [pc, #512]	; (800b6b8 <HAL_I2C_Init+0x278>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	bf94      	ite	ls
 800b4bc:	2301      	movls	r3, #1
 800b4be:	2300      	movhi	r3, #0
 800b4c0:	b2db      	uxtb	r3, r3
 800b4c2:	e006      	b.n	800b4d2 <HAL_I2C_Init+0x92>
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	4a7d      	ldr	r2, [pc, #500]	; (800b6bc <HAL_I2C_Init+0x27c>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	bf94      	ite	ls
 800b4cc:	2301      	movls	r3, #1
 800b4ce:	2300      	movhi	r3, #0
 800b4d0:	b2db      	uxtb	r3, r3
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d001      	beq.n	800b4da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	e0e7      	b.n	800b6aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	4a78      	ldr	r2, [pc, #480]	; (800b6c0 <HAL_I2C_Init+0x280>)
 800b4de:	fba2 2303 	umull	r2, r3, r2, r3
 800b4e2:	0c9b      	lsrs	r3, r3, #18
 800b4e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	68ba      	ldr	r2, [r7, #8]
 800b4f6:	430a      	orrs	r2, r1
 800b4f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	6a1b      	ldr	r3, [r3, #32]
 800b500:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	4a6a      	ldr	r2, [pc, #424]	; (800b6b4 <HAL_I2C_Init+0x274>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d802      	bhi.n	800b514 <HAL_I2C_Init+0xd4>
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	3301      	adds	r3, #1
 800b512:	e009      	b.n	800b528 <HAL_I2C_Init+0xe8>
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b51a:	fb02 f303 	mul.w	r3, r2, r3
 800b51e:	4a69      	ldr	r2, [pc, #420]	; (800b6c4 <HAL_I2C_Init+0x284>)
 800b520:	fba2 2303 	umull	r2, r3, r2, r3
 800b524:	099b      	lsrs	r3, r3, #6
 800b526:	3301      	adds	r3, #1
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	6812      	ldr	r2, [r2, #0]
 800b52c:	430b      	orrs	r3, r1
 800b52e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	69db      	ldr	r3, [r3, #28]
 800b536:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b53a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	495c      	ldr	r1, [pc, #368]	; (800b6b4 <HAL_I2C_Init+0x274>)
 800b544:	428b      	cmp	r3, r1
 800b546:	d819      	bhi.n	800b57c <HAL_I2C_Init+0x13c>
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	1e59      	subs	r1, r3, #1
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	005b      	lsls	r3, r3, #1
 800b552:	fbb1 f3f3 	udiv	r3, r1, r3
 800b556:	1c59      	adds	r1, r3, #1
 800b558:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b55c:	400b      	ands	r3, r1
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d00a      	beq.n	800b578 <HAL_I2C_Init+0x138>
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	1e59      	subs	r1, r3, #1
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	005b      	lsls	r3, r3, #1
 800b56c:	fbb1 f3f3 	udiv	r3, r1, r3
 800b570:	3301      	adds	r3, #1
 800b572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b576:	e051      	b.n	800b61c <HAL_I2C_Init+0x1dc>
 800b578:	2304      	movs	r3, #4
 800b57a:	e04f      	b.n	800b61c <HAL_I2C_Init+0x1dc>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	689b      	ldr	r3, [r3, #8]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d111      	bne.n	800b5a8 <HAL_I2C_Init+0x168>
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	1e58      	subs	r0, r3, #1
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6859      	ldr	r1, [r3, #4]
 800b58c:	460b      	mov	r3, r1
 800b58e:	005b      	lsls	r3, r3, #1
 800b590:	440b      	add	r3, r1
 800b592:	fbb0 f3f3 	udiv	r3, r0, r3
 800b596:	3301      	adds	r3, #1
 800b598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	bf0c      	ite	eq
 800b5a0:	2301      	moveq	r3, #1
 800b5a2:	2300      	movne	r3, #0
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	e012      	b.n	800b5ce <HAL_I2C_Init+0x18e>
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	1e58      	subs	r0, r3, #1
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6859      	ldr	r1, [r3, #4]
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	009b      	lsls	r3, r3, #2
 800b5b4:	440b      	add	r3, r1
 800b5b6:	0099      	lsls	r1, r3, #2
 800b5b8:	440b      	add	r3, r1
 800b5ba:	fbb0 f3f3 	udiv	r3, r0, r3
 800b5be:	3301      	adds	r3, #1
 800b5c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	bf0c      	ite	eq
 800b5c8:	2301      	moveq	r3, #1
 800b5ca:	2300      	movne	r3, #0
 800b5cc:	b2db      	uxtb	r3, r3
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d001      	beq.n	800b5d6 <HAL_I2C_Init+0x196>
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	e022      	b.n	800b61c <HAL_I2C_Init+0x1dc>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	689b      	ldr	r3, [r3, #8]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d10e      	bne.n	800b5fc <HAL_I2C_Init+0x1bc>
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	1e58      	subs	r0, r3, #1
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6859      	ldr	r1, [r3, #4]
 800b5e6:	460b      	mov	r3, r1
 800b5e8:	005b      	lsls	r3, r3, #1
 800b5ea:	440b      	add	r3, r1
 800b5ec:	fbb0 f3f3 	udiv	r3, r0, r3
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b5fa:	e00f      	b.n	800b61c <HAL_I2C_Init+0x1dc>
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	1e58      	subs	r0, r3, #1
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6859      	ldr	r1, [r3, #4]
 800b604:	460b      	mov	r3, r1
 800b606:	009b      	lsls	r3, r3, #2
 800b608:	440b      	add	r3, r1
 800b60a:	0099      	lsls	r1, r3, #2
 800b60c:	440b      	add	r3, r1
 800b60e:	fbb0 f3f3 	udiv	r3, r0, r3
 800b612:	3301      	adds	r3, #1
 800b614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b618:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b61c:	6879      	ldr	r1, [r7, #4]
 800b61e:	6809      	ldr	r1, [r1, #0]
 800b620:	4313      	orrs	r3, r2
 800b622:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	69da      	ldr	r2, [r3, #28]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6a1b      	ldr	r3, [r3, #32]
 800b636:	431a      	orrs	r2, r3
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	430a      	orrs	r2, r1
 800b63e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	689b      	ldr	r3, [r3, #8]
 800b646:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b64a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b64e:	687a      	ldr	r2, [r7, #4]
 800b650:	6911      	ldr	r1, [r2, #16]
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	68d2      	ldr	r2, [r2, #12]
 800b656:	4311      	orrs	r1, r2
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	6812      	ldr	r2, [r2, #0]
 800b65c:	430b      	orrs	r3, r1
 800b65e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	695a      	ldr	r2, [r3, #20]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	699b      	ldr	r3, [r3, #24]
 800b672:	431a      	orrs	r2, r3
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	430a      	orrs	r2, r1
 800b67a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	681a      	ldr	r2, [r3, #0]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f042 0201 	orr.w	r2, r2, #1
 800b68a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2200      	movs	r2, #0
 800b690:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2220      	movs	r2, #32
 800b696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2200      	movs	r2, #0
 800b69e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b6a8:	2300      	movs	r3, #0
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	000186a0 	.word	0x000186a0
 800b6b8:	001e847f 	.word	0x001e847f
 800b6bc:	003d08ff 	.word	0x003d08ff
 800b6c0:	431bde83 	.word	0x431bde83
 800b6c4:	10624dd3 	.word	0x10624dd3

0800b6c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b088      	sub	sp, #32
 800b6cc:	af02      	add	r7, sp, #8
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	4608      	mov	r0, r1
 800b6d2:	4611      	mov	r1, r2
 800b6d4:	461a      	mov	r2, r3
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	817b      	strh	r3, [r7, #10]
 800b6da:	460b      	mov	r3, r1
 800b6dc:	813b      	strh	r3, [r7, #8]
 800b6de:	4613      	mov	r3, r2
 800b6e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b6e2:	f7fe ff63 	bl	800a5ac <HAL_GetTick>
 800b6e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6ee:	b2db      	uxtb	r3, r3
 800b6f0:	2b20      	cmp	r3, #32
 800b6f2:	f040 80d9 	bne.w	800b8a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	9300      	str	r3, [sp, #0]
 800b6fa:	2319      	movs	r3, #25
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	496d      	ldr	r1, [pc, #436]	; (800b8b4 <HAL_I2C_Mem_Write+0x1ec>)
 800b700:	68f8      	ldr	r0, [r7, #12]
 800b702:	f000 fcb5 	bl	800c070 <I2C_WaitOnFlagUntilTimeout>
 800b706:	4603      	mov	r3, r0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d001      	beq.n	800b710 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800b70c:	2302      	movs	r3, #2
 800b70e:	e0cc      	b.n	800b8aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b716:	2b01      	cmp	r3, #1
 800b718:	d101      	bne.n	800b71e <HAL_I2C_Mem_Write+0x56>
 800b71a:	2302      	movs	r3, #2
 800b71c:	e0c5      	b.n	800b8aa <HAL_I2C_Mem_Write+0x1e2>
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2201      	movs	r2, #1
 800b722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f003 0301 	and.w	r3, r3, #1
 800b730:	2b01      	cmp	r3, #1
 800b732:	d007      	beq.n	800b744 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f042 0201 	orr.w	r2, r2, #1
 800b742:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b752:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2221      	movs	r2, #33	; 0x21
 800b758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	2240      	movs	r2, #64	; 0x40
 800b760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	2200      	movs	r2, #0
 800b768:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	6a3a      	ldr	r2, [r7, #32]
 800b76e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b774:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b77a:	b29a      	uxth	r2, r3
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	4a4d      	ldr	r2, [pc, #308]	; (800b8b8 <HAL_I2C_Mem_Write+0x1f0>)
 800b784:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b786:	88f8      	ldrh	r0, [r7, #6]
 800b788:	893a      	ldrh	r2, [r7, #8]
 800b78a:	8979      	ldrh	r1, [r7, #10]
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	9301      	str	r3, [sp, #4]
 800b790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b792:	9300      	str	r3, [sp, #0]
 800b794:	4603      	mov	r3, r0
 800b796:	68f8      	ldr	r0, [r7, #12]
 800b798:	f000 faec 	bl	800bd74 <I2C_RequestMemoryWrite>
 800b79c:	4603      	mov	r3, r0
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d052      	beq.n	800b848 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	e081      	b.n	800b8aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b7a6:	697a      	ldr	r2, [r7, #20]
 800b7a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b7aa:	68f8      	ldr	r0, [r7, #12]
 800b7ac:	f000 fd36 	bl	800c21c <I2C_WaitOnTXEFlagUntilTimeout>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d00d      	beq.n	800b7d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ba:	2b04      	cmp	r3, #4
 800b7bc:	d107      	bne.n	800b7ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	681a      	ldr	r2, [r3, #0]
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	e06b      	b.n	800b8aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d6:	781a      	ldrb	r2, [r3, #0]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e2:	1c5a      	adds	r2, r3, #1
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7ec:	3b01      	subs	r3, #1
 800b7ee:	b29a      	uxth	r2, r3
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7f8:	b29b      	uxth	r3, r3
 800b7fa:	3b01      	subs	r3, #1
 800b7fc:	b29a      	uxth	r2, r3
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	695b      	ldr	r3, [r3, #20]
 800b808:	f003 0304 	and.w	r3, r3, #4
 800b80c:	2b04      	cmp	r3, #4
 800b80e:	d11b      	bne.n	800b848 <HAL_I2C_Mem_Write+0x180>
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b814:	2b00      	cmp	r3, #0
 800b816:	d017      	beq.n	800b848 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81c:	781a      	ldrb	r2, [r3, #0]
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b828:	1c5a      	adds	r2, r3, #1
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b832:	3b01      	subs	r3, #1
 800b834:	b29a      	uxth	r2, r3
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b83e:	b29b      	uxth	r3, r3
 800b840:	3b01      	subs	r3, #1
 800b842:	b29a      	uxth	r2, r3
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d1aa      	bne.n	800b7a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b850:	697a      	ldr	r2, [r7, #20]
 800b852:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b854:	68f8      	ldr	r0, [r7, #12]
 800b856:	f000 fd22 	bl	800c29e <I2C_WaitOnBTFFlagUntilTimeout>
 800b85a:	4603      	mov	r3, r0
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d00d      	beq.n	800b87c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b864:	2b04      	cmp	r3, #4
 800b866:	d107      	bne.n	800b878 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	681a      	ldr	r2, [r3, #0]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b876:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b878:	2301      	movs	r3, #1
 800b87a:	e016      	b.n	800b8aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b88a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2220      	movs	r2, #32
 800b890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2200      	movs	r2, #0
 800b898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	e000      	b.n	800b8aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800b8a8:	2302      	movs	r3, #2
  }
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3718      	adds	r7, #24
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	00100002 	.word	0x00100002
 800b8b8:	ffff0000 	.word	0xffff0000

0800b8bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b08c      	sub	sp, #48	; 0x30
 800b8c0:	af02      	add	r7, sp, #8
 800b8c2:	60f8      	str	r0, [r7, #12]
 800b8c4:	4608      	mov	r0, r1
 800b8c6:	4611      	mov	r1, r2
 800b8c8:	461a      	mov	r2, r3
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	817b      	strh	r3, [r7, #10]
 800b8ce:	460b      	mov	r3, r1
 800b8d0:	813b      	strh	r3, [r7, #8]
 800b8d2:	4613      	mov	r3, r2
 800b8d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b8d6:	f7fe fe69 	bl	800a5ac <HAL_GetTick>
 800b8da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8e2:	b2db      	uxtb	r3, r3
 800b8e4:	2b20      	cmp	r3, #32
 800b8e6:	f040 8208 	bne.w	800bcfa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ec:	9300      	str	r3, [sp, #0]
 800b8ee:	2319      	movs	r3, #25
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	497b      	ldr	r1, [pc, #492]	; (800bae0 <HAL_I2C_Mem_Read+0x224>)
 800b8f4:	68f8      	ldr	r0, [r7, #12]
 800b8f6:	f000 fbbb 	bl	800c070 <I2C_WaitOnFlagUntilTimeout>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d001      	beq.n	800b904 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800b900:	2302      	movs	r3, #2
 800b902:	e1fb      	b.n	800bcfc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	d101      	bne.n	800b912 <HAL_I2C_Mem_Read+0x56>
 800b90e:	2302      	movs	r3, #2
 800b910:	e1f4      	b.n	800bcfc <HAL_I2C_Mem_Read+0x440>
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	2201      	movs	r2, #1
 800b916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f003 0301 	and.w	r3, r3, #1
 800b924:	2b01      	cmp	r3, #1
 800b926:	d007      	beq.n	800b938 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	681a      	ldr	r2, [r3, #0]
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f042 0201 	orr.w	r2, r2, #1
 800b936:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	681a      	ldr	r2, [r3, #0]
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b946:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2222      	movs	r2, #34	; 0x22
 800b94c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2240      	movs	r2, #64	; 0x40
 800b954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2200      	movs	r2, #0
 800b95c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b962:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800b968:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b96e:	b29a      	uxth	r2, r3
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	4a5b      	ldr	r2, [pc, #364]	; (800bae4 <HAL_I2C_Mem_Read+0x228>)
 800b978:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b97a:	88f8      	ldrh	r0, [r7, #6]
 800b97c:	893a      	ldrh	r2, [r7, #8]
 800b97e:	8979      	ldrh	r1, [r7, #10]
 800b980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b982:	9301      	str	r3, [sp, #4]
 800b984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b986:	9300      	str	r3, [sp, #0]
 800b988:	4603      	mov	r3, r0
 800b98a:	68f8      	ldr	r0, [r7, #12]
 800b98c:	f000 fa88 	bl	800bea0 <I2C_RequestMemoryRead>
 800b990:	4603      	mov	r3, r0
 800b992:	2b00      	cmp	r3, #0
 800b994:	d001      	beq.n	800b99a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800b996:	2301      	movs	r3, #1
 800b998:	e1b0      	b.n	800bcfc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d113      	bne.n	800b9ca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	623b      	str	r3, [r7, #32]
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	695b      	ldr	r3, [r3, #20]
 800b9ac:	623b      	str	r3, [r7, #32]
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	699b      	ldr	r3, [r3, #24]
 800b9b4:	623b      	str	r3, [r7, #32]
 800b9b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	681a      	ldr	r2, [r3, #0]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9c6:	601a      	str	r2, [r3, #0]
 800b9c8:	e184      	b.n	800bcd4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d11b      	bne.n	800ba0a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	681a      	ldr	r2, [r3, #0]
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b9e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	61fb      	str	r3, [r7, #28]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	695b      	ldr	r3, [r3, #20]
 800b9ec:	61fb      	str	r3, [r7, #28]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	699b      	ldr	r3, [r3, #24]
 800b9f4:	61fb      	str	r3, [r7, #28]
 800b9f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	681a      	ldr	r2, [r3, #0]
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba06:	601a      	str	r2, [r3, #0]
 800ba08:	e164      	b.n	800bcd4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba0e:	2b02      	cmp	r3, #2
 800ba10:	d11b      	bne.n	800ba4a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	681a      	ldr	r2, [r3, #0]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba20:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba32:	2300      	movs	r3, #0
 800ba34:	61bb      	str	r3, [r7, #24]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	695b      	ldr	r3, [r3, #20]
 800ba3c:	61bb      	str	r3, [r7, #24]
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	699b      	ldr	r3, [r3, #24]
 800ba44:	61bb      	str	r3, [r7, #24]
 800ba46:	69bb      	ldr	r3, [r7, #24]
 800ba48:	e144      	b.n	800bcd4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	617b      	str	r3, [r7, #20]
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	695b      	ldr	r3, [r3, #20]
 800ba54:	617b      	str	r3, [r7, #20]
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	699b      	ldr	r3, [r3, #24]
 800ba5c:	617b      	str	r3, [r7, #20]
 800ba5e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800ba60:	e138      	b.n	800bcd4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba66:	2b03      	cmp	r3, #3
 800ba68:	f200 80f1 	bhi.w	800bc4e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d123      	bne.n	800babc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ba74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ba78:	68f8      	ldr	r0, [r7, #12]
 800ba7a:	f000 fc51 	bl	800c320 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d001      	beq.n	800ba88 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800ba84:	2301      	movs	r3, #1
 800ba86:	e139      	b.n	800bcfc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	691a      	ldr	r2, [r3, #16]
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba92:	b2d2      	uxtb	r2, r2
 800ba94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba9a:	1c5a      	adds	r2, r3, #1
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800baa4:	3b01      	subs	r3, #1
 800baa6:	b29a      	uxth	r2, r3
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bab0:	b29b      	uxth	r3, r3
 800bab2:	3b01      	subs	r3, #1
 800bab4:	b29a      	uxth	r2, r3
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800baba:	e10b      	b.n	800bcd4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bac0:	2b02      	cmp	r3, #2
 800bac2:	d14e      	bne.n	800bb62 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac6:	9300      	str	r3, [sp, #0]
 800bac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baca:	2200      	movs	r2, #0
 800bacc:	4906      	ldr	r1, [pc, #24]	; (800bae8 <HAL_I2C_Mem_Read+0x22c>)
 800bace:	68f8      	ldr	r0, [r7, #12]
 800bad0:	f000 face 	bl	800c070 <I2C_WaitOnFlagUntilTimeout>
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d008      	beq.n	800baec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800bada:	2301      	movs	r3, #1
 800badc:	e10e      	b.n	800bcfc <HAL_I2C_Mem_Read+0x440>
 800bade:	bf00      	nop
 800bae0:	00100002 	.word	0x00100002
 800bae4:	ffff0000 	.word	0xffff0000
 800bae8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	681a      	ldr	r2, [r3, #0]
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bafa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	691a      	ldr	r2, [r3, #16]
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb06:	b2d2      	uxtb	r2, r2
 800bb08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb0e:	1c5a      	adds	r2, r3, #1
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb18:	3b01      	subs	r3, #1
 800bb1a:	b29a      	uxth	r2, r3
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb24:	b29b      	uxth	r3, r3
 800bb26:	3b01      	subs	r3, #1
 800bb28:	b29a      	uxth	r2, r3
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	691a      	ldr	r2, [r3, #16]
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb38:	b2d2      	uxtb	r2, r2
 800bb3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb40:	1c5a      	adds	r2, r3, #1
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb4a:	3b01      	subs	r3, #1
 800bb4c:	b29a      	uxth	r2, r3
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	3b01      	subs	r3, #1
 800bb5a:	b29a      	uxth	r2, r3
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bb60:	e0b8      	b.n	800bcd4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb64:	9300      	str	r3, [sp, #0]
 800bb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb68:	2200      	movs	r2, #0
 800bb6a:	4966      	ldr	r1, [pc, #408]	; (800bd04 <HAL_I2C_Mem_Read+0x448>)
 800bb6c:	68f8      	ldr	r0, [r7, #12]
 800bb6e:	f000 fa7f 	bl	800c070 <I2C_WaitOnFlagUntilTimeout>
 800bb72:	4603      	mov	r3, r0
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d001      	beq.n	800bb7c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	e0bf      	b.n	800bcfc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	691a      	ldr	r2, [r3, #16]
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb96:	b2d2      	uxtb	r2, r2
 800bb98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb9e:	1c5a      	adds	r2, r3, #1
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bba8:	3b01      	subs	r3, #1
 800bbaa:	b29a      	uxth	r2, r3
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbb4:	b29b      	uxth	r3, r3
 800bbb6:	3b01      	subs	r3, #1
 800bbb8:	b29a      	uxth	r2, r3
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc0:	9300      	str	r3, [sp, #0]
 800bbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	494f      	ldr	r1, [pc, #316]	; (800bd04 <HAL_I2C_Mem_Read+0x448>)
 800bbc8:	68f8      	ldr	r0, [r7, #12]
 800bbca:	f000 fa51 	bl	800c070 <I2C_WaitOnFlagUntilTimeout>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d001      	beq.n	800bbd8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	e091      	b.n	800bcfc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	681a      	ldr	r2, [r3, #0]
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bbe6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	691a      	ldr	r2, [r3, #16]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf2:	b2d2      	uxtb	r2, r2
 800bbf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbfa:	1c5a      	adds	r2, r3, #1
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc04:	3b01      	subs	r3, #1
 800bc06:	b29a      	uxth	r2, r3
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc10:	b29b      	uxth	r3, r3
 800bc12:	3b01      	subs	r3, #1
 800bc14:	b29a      	uxth	r2, r3
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	691a      	ldr	r2, [r3, #16]
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc24:	b2d2      	uxtb	r2, r2
 800bc26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2c:	1c5a      	adds	r2, r3, #1
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc36:	3b01      	subs	r3, #1
 800bc38:	b29a      	uxth	r2, r3
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc42:	b29b      	uxth	r3, r3
 800bc44:	3b01      	subs	r3, #1
 800bc46:	b29a      	uxth	r2, r3
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bc4c:	e042      	b.n	800bcd4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bc52:	68f8      	ldr	r0, [r7, #12]
 800bc54:	f000 fb64 	bl	800c320 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d001      	beq.n	800bc62 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800bc5e:	2301      	movs	r3, #1
 800bc60:	e04c      	b.n	800bcfc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	691a      	ldr	r2, [r3, #16]
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc6c:	b2d2      	uxtb	r2, r2
 800bc6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc74:	1c5a      	adds	r2, r3, #1
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc7e:	3b01      	subs	r3, #1
 800bc80:	b29a      	uxth	r2, r3
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc8a:	b29b      	uxth	r3, r3
 800bc8c:	3b01      	subs	r3, #1
 800bc8e:	b29a      	uxth	r2, r3
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	695b      	ldr	r3, [r3, #20]
 800bc9a:	f003 0304 	and.w	r3, r3, #4
 800bc9e:	2b04      	cmp	r3, #4
 800bca0:	d118      	bne.n	800bcd4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	691a      	ldr	r2, [r3, #16]
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcac:	b2d2      	uxtb	r2, r2
 800bcae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb4:	1c5a      	adds	r2, r3, #1
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcbe:	3b01      	subs	r3, #1
 800bcc0:	b29a      	uxth	r2, r3
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcca:	b29b      	uxth	r3, r3
 800bccc:	3b01      	subs	r3, #1
 800bcce:	b29a      	uxth	r2, r3
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	f47f aec2 	bne.w	800ba62 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2220      	movs	r2, #32
 800bce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	2200      	movs	r2, #0
 800bcea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	e000      	b.n	800bcfc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800bcfa:	2302      	movs	r3, #2
  }
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3728      	adds	r7, #40	; 0x28
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}
 800bd04:	00010004 	.word	0x00010004

0800bd08 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b083      	sub	sp, #12
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd16:	b2db      	uxtb	r3, r3
 800bd18:	2b20      	cmp	r3, #32
 800bd1a:	d124      	bne.n	800bd66 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2228      	movs	r2, #40	; 0x28
 800bd20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f003 0301 	and.w	r3, r3, #1
 800bd2e:	2b01      	cmp	r3, #1
 800bd30:	d007      	beq.n	800bd42 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f042 0201 	orr.w	r2, r2, #1
 800bd40:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	681a      	ldr	r2, [r3, #0]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bd50:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	685a      	ldr	r2, [r3, #4]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800bd60:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800bd62:	2300      	movs	r3, #0
 800bd64:	e000      	b.n	800bd68 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800bd66:	2302      	movs	r3, #2
  }
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	370c      	adds	r7, #12
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr

0800bd74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b088      	sub	sp, #32
 800bd78:	af02      	add	r7, sp, #8
 800bd7a:	60f8      	str	r0, [r7, #12]
 800bd7c:	4608      	mov	r0, r1
 800bd7e:	4611      	mov	r1, r2
 800bd80:	461a      	mov	r2, r3
 800bd82:	4603      	mov	r3, r0
 800bd84:	817b      	strh	r3, [r7, #10]
 800bd86:	460b      	mov	r3, r1
 800bd88:	813b      	strh	r3, [r7, #8]
 800bd8a:	4613      	mov	r3, r2
 800bd8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda0:	9300      	str	r3, [sp, #0]
 800bda2:	6a3b      	ldr	r3, [r7, #32]
 800bda4:	2200      	movs	r2, #0
 800bda6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bdaa:	68f8      	ldr	r0, [r7, #12]
 800bdac:	f000 f960 	bl	800c070 <I2C_WaitOnFlagUntilTimeout>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d00d      	beq.n	800bdd2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdc4:	d103      	bne.n	800bdce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bdcc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bdce:	2303      	movs	r3, #3
 800bdd0:	e05f      	b.n	800be92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bdd2:	897b      	ldrh	r3, [r7, #10]
 800bdd4:	b2db      	uxtb	r3, r3
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bde0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde4:	6a3a      	ldr	r2, [r7, #32]
 800bde6:	492d      	ldr	r1, [pc, #180]	; (800be9c <I2C_RequestMemoryWrite+0x128>)
 800bde8:	68f8      	ldr	r0, [r7, #12]
 800bdea:	f000 f998 	bl	800c11e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d001      	beq.n	800bdf8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	e04c      	b.n	800be92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	617b      	str	r3, [r7, #20]
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	695b      	ldr	r3, [r3, #20]
 800be02:	617b      	str	r3, [r7, #20]
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	699b      	ldr	r3, [r3, #24]
 800be0a:	617b      	str	r3, [r7, #20]
 800be0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be10:	6a39      	ldr	r1, [r7, #32]
 800be12:	68f8      	ldr	r0, [r7, #12]
 800be14:	f000 fa02 	bl	800c21c <I2C_WaitOnTXEFlagUntilTimeout>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d00d      	beq.n	800be3a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be22:	2b04      	cmp	r3, #4
 800be24:	d107      	bne.n	800be36 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800be36:	2301      	movs	r3, #1
 800be38:	e02b      	b.n	800be92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800be3a:	88fb      	ldrh	r3, [r7, #6]
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	d105      	bne.n	800be4c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800be40:	893b      	ldrh	r3, [r7, #8]
 800be42:	b2da      	uxtb	r2, r3
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	611a      	str	r2, [r3, #16]
 800be4a:	e021      	b.n	800be90 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800be4c:	893b      	ldrh	r3, [r7, #8]
 800be4e:	0a1b      	lsrs	r3, r3, #8
 800be50:	b29b      	uxth	r3, r3
 800be52:	b2da      	uxtb	r2, r3
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be5c:	6a39      	ldr	r1, [r7, #32]
 800be5e:	68f8      	ldr	r0, [r7, #12]
 800be60:	f000 f9dc 	bl	800c21c <I2C_WaitOnTXEFlagUntilTimeout>
 800be64:	4603      	mov	r3, r0
 800be66:	2b00      	cmp	r3, #0
 800be68:	d00d      	beq.n	800be86 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be6e:	2b04      	cmp	r3, #4
 800be70:	d107      	bne.n	800be82 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	681a      	ldr	r2, [r3, #0]
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800be82:	2301      	movs	r3, #1
 800be84:	e005      	b.n	800be92 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800be86:	893b      	ldrh	r3, [r7, #8]
 800be88:	b2da      	uxtb	r2, r3
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800be90:	2300      	movs	r3, #0
}
 800be92:	4618      	mov	r0, r3
 800be94:	3718      	adds	r7, #24
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	00010002 	.word	0x00010002

0800bea0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b088      	sub	sp, #32
 800bea4:	af02      	add	r7, sp, #8
 800bea6:	60f8      	str	r0, [r7, #12]
 800bea8:	4608      	mov	r0, r1
 800beaa:	4611      	mov	r1, r2
 800beac:	461a      	mov	r2, r3
 800beae:	4603      	mov	r3, r0
 800beb0:	817b      	strh	r3, [r7, #10]
 800beb2:	460b      	mov	r3, r1
 800beb4:	813b      	strh	r3, [r7, #8]
 800beb6:	4613      	mov	r3, r2
 800beb8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	681a      	ldr	r2, [r3, #0]
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bec8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bed8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800beda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bedc:	9300      	str	r3, [sp, #0]
 800bede:	6a3b      	ldr	r3, [r7, #32]
 800bee0:	2200      	movs	r2, #0
 800bee2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bee6:	68f8      	ldr	r0, [r7, #12]
 800bee8:	f000 f8c2 	bl	800c070 <I2C_WaitOnFlagUntilTimeout>
 800beec:	4603      	mov	r3, r0
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d00d      	beq.n	800bf0e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800befc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf00:	d103      	bne.n	800bf0a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bf0a:	2303      	movs	r3, #3
 800bf0c:	e0aa      	b.n	800c064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bf0e:	897b      	ldrh	r3, [r7, #10]
 800bf10:	b2db      	uxtb	r3, r3
 800bf12:	461a      	mov	r2, r3
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bf1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bf1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf20:	6a3a      	ldr	r2, [r7, #32]
 800bf22:	4952      	ldr	r1, [pc, #328]	; (800c06c <I2C_RequestMemoryRead+0x1cc>)
 800bf24:	68f8      	ldr	r0, [r7, #12]
 800bf26:	f000 f8fa 	bl	800c11e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d001      	beq.n	800bf34 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800bf30:	2301      	movs	r3, #1
 800bf32:	e097      	b.n	800c064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bf34:	2300      	movs	r3, #0
 800bf36:	617b      	str	r3, [r7, #20]
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	695b      	ldr	r3, [r3, #20]
 800bf3e:	617b      	str	r3, [r7, #20]
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	699b      	ldr	r3, [r3, #24]
 800bf46:	617b      	str	r3, [r7, #20]
 800bf48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf4c:	6a39      	ldr	r1, [r7, #32]
 800bf4e:	68f8      	ldr	r0, [r7, #12]
 800bf50:	f000 f964 	bl	800c21c <I2C_WaitOnTXEFlagUntilTimeout>
 800bf54:	4603      	mov	r3, r0
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d00d      	beq.n	800bf76 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf5e:	2b04      	cmp	r3, #4
 800bf60:	d107      	bne.n	800bf72 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800bf72:	2301      	movs	r3, #1
 800bf74:	e076      	b.n	800c064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bf76:	88fb      	ldrh	r3, [r7, #6]
 800bf78:	2b01      	cmp	r3, #1
 800bf7a:	d105      	bne.n	800bf88 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bf7c:	893b      	ldrh	r3, [r7, #8]
 800bf7e:	b2da      	uxtb	r2, r3
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	611a      	str	r2, [r3, #16]
 800bf86:	e021      	b.n	800bfcc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800bf88:	893b      	ldrh	r3, [r7, #8]
 800bf8a:	0a1b      	lsrs	r3, r3, #8
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	b2da      	uxtb	r2, r3
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf98:	6a39      	ldr	r1, [r7, #32]
 800bf9a:	68f8      	ldr	r0, [r7, #12]
 800bf9c:	f000 f93e 	bl	800c21c <I2C_WaitOnTXEFlagUntilTimeout>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d00d      	beq.n	800bfc2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfaa:	2b04      	cmp	r3, #4
 800bfac:	d107      	bne.n	800bfbe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	681a      	ldr	r2, [r3, #0]
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bfbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	e050      	b.n	800c064 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bfc2:	893b      	ldrh	r3, [r7, #8]
 800bfc4:	b2da      	uxtb	r2, r3
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bfcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfce:	6a39      	ldr	r1, [r7, #32]
 800bfd0:	68f8      	ldr	r0, [r7, #12]
 800bfd2:	f000 f923 	bl	800c21c <I2C_WaitOnTXEFlagUntilTimeout>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d00d      	beq.n	800bff8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfe0:	2b04      	cmp	r3, #4
 800bfe2:	d107      	bne.n	800bff4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	681a      	ldr	r2, [r3, #0]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bff2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800bff4:	2301      	movs	r3, #1
 800bff6:	e035      	b.n	800c064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	681a      	ldr	r2, [r3, #0]
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c006:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c00a:	9300      	str	r3, [sp, #0]
 800c00c:	6a3b      	ldr	r3, [r7, #32]
 800c00e:	2200      	movs	r2, #0
 800c010:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c014:	68f8      	ldr	r0, [r7, #12]
 800c016:	f000 f82b 	bl	800c070 <I2C_WaitOnFlagUntilTimeout>
 800c01a:	4603      	mov	r3, r0
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d00d      	beq.n	800c03c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c02a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c02e:	d103      	bne.n	800c038 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c036:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c038:	2303      	movs	r3, #3
 800c03a:	e013      	b.n	800c064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800c03c:	897b      	ldrh	r3, [r7, #10]
 800c03e:	b2db      	uxtb	r3, r3
 800c040:	f043 0301 	orr.w	r3, r3, #1
 800c044:	b2da      	uxtb	r2, r3
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c04e:	6a3a      	ldr	r2, [r7, #32]
 800c050:	4906      	ldr	r1, [pc, #24]	; (800c06c <I2C_RequestMemoryRead+0x1cc>)
 800c052:	68f8      	ldr	r0, [r7, #12]
 800c054:	f000 f863 	bl	800c11e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c058:	4603      	mov	r3, r0
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d001      	beq.n	800c062 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800c05e:	2301      	movs	r3, #1
 800c060:	e000      	b.n	800c064 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800c062:	2300      	movs	r3, #0
}
 800c064:	4618      	mov	r0, r3
 800c066:	3718      	adds	r7, #24
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	00010002 	.word	0x00010002

0800c070 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
 800c076:	60f8      	str	r0, [r7, #12]
 800c078:	60b9      	str	r1, [r7, #8]
 800c07a:	603b      	str	r3, [r7, #0]
 800c07c:	4613      	mov	r3, r2
 800c07e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c080:	e025      	b.n	800c0ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c088:	d021      	beq.n	800c0ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c08a:	f7fe fa8f 	bl	800a5ac <HAL_GetTick>
 800c08e:	4602      	mov	r2, r0
 800c090:	69bb      	ldr	r3, [r7, #24]
 800c092:	1ad3      	subs	r3, r2, r3
 800c094:	683a      	ldr	r2, [r7, #0]
 800c096:	429a      	cmp	r2, r3
 800c098:	d302      	bcc.n	800c0a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d116      	bne.n	800c0ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2220      	movs	r2, #32
 800c0aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ba:	f043 0220 	orr.w	r2, r3, #32
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	e023      	b.n	800c116 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	0c1b      	lsrs	r3, r3, #16
 800c0d2:	b2db      	uxtb	r3, r3
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d10d      	bne.n	800c0f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	695b      	ldr	r3, [r3, #20]
 800c0de:	43da      	mvns	r2, r3
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	4013      	ands	r3, r2
 800c0e4:	b29b      	uxth	r3, r3
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	bf0c      	ite	eq
 800c0ea:	2301      	moveq	r3, #1
 800c0ec:	2300      	movne	r3, #0
 800c0ee:	b2db      	uxtb	r3, r3
 800c0f0:	461a      	mov	r2, r3
 800c0f2:	e00c      	b.n	800c10e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	699b      	ldr	r3, [r3, #24]
 800c0fa:	43da      	mvns	r2, r3
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	4013      	ands	r3, r2
 800c100:	b29b      	uxth	r3, r3
 800c102:	2b00      	cmp	r3, #0
 800c104:	bf0c      	ite	eq
 800c106:	2301      	moveq	r3, #1
 800c108:	2300      	movne	r3, #0
 800c10a:	b2db      	uxtb	r3, r3
 800c10c:	461a      	mov	r2, r3
 800c10e:	79fb      	ldrb	r3, [r7, #7]
 800c110:	429a      	cmp	r2, r3
 800c112:	d0b6      	beq.n	800c082 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c114:	2300      	movs	r3, #0
}
 800c116:	4618      	mov	r0, r3
 800c118:	3710      	adds	r7, #16
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}

0800c11e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c11e:	b580      	push	{r7, lr}
 800c120:	b084      	sub	sp, #16
 800c122:	af00      	add	r7, sp, #0
 800c124:	60f8      	str	r0, [r7, #12]
 800c126:	60b9      	str	r1, [r7, #8]
 800c128:	607a      	str	r2, [r7, #4]
 800c12a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c12c:	e051      	b.n	800c1d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	695b      	ldr	r3, [r3, #20]
 800c134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c13c:	d123      	bne.n	800c186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	681a      	ldr	r2, [r3, #0]
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c14c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c156:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	2200      	movs	r2, #0
 800c15c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	2220      	movs	r2, #32
 800c162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2200      	movs	r2, #0
 800c16a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c172:	f043 0204 	orr.w	r2, r3, #4
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2200      	movs	r2, #0
 800c17e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c182:	2301      	movs	r3, #1
 800c184:	e046      	b.n	800c214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c18c:	d021      	beq.n	800c1d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c18e:	f7fe fa0d 	bl	800a5ac <HAL_GetTick>
 800c192:	4602      	mov	r2, r0
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	1ad3      	subs	r3, r2, r3
 800c198:	687a      	ldr	r2, [r7, #4]
 800c19a:	429a      	cmp	r2, r3
 800c19c:	d302      	bcc.n	800c1a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d116      	bne.n	800c1d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	2220      	movs	r2, #32
 800c1ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1be:	f043 0220 	orr.w	r2, r3, #32
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e020      	b.n	800c214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	0c1b      	lsrs	r3, r3, #16
 800c1d6:	b2db      	uxtb	r3, r3
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	d10c      	bne.n	800c1f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	695b      	ldr	r3, [r3, #20]
 800c1e2:	43da      	mvns	r2, r3
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	4013      	ands	r3, r2
 800c1e8:	b29b      	uxth	r3, r3
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	bf14      	ite	ne
 800c1ee:	2301      	movne	r3, #1
 800c1f0:	2300      	moveq	r3, #0
 800c1f2:	b2db      	uxtb	r3, r3
 800c1f4:	e00b      	b.n	800c20e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	699b      	ldr	r3, [r3, #24]
 800c1fc:	43da      	mvns	r2, r3
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	4013      	ands	r3, r2
 800c202:	b29b      	uxth	r3, r3
 800c204:	2b00      	cmp	r3, #0
 800c206:	bf14      	ite	ne
 800c208:	2301      	movne	r3, #1
 800c20a:	2300      	moveq	r3, #0
 800c20c:	b2db      	uxtb	r3, r3
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d18d      	bne.n	800c12e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800c212:	2300      	movs	r3, #0
}
 800c214:	4618      	mov	r0, r3
 800c216:	3710      	adds	r7, #16
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b084      	sub	sp, #16
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c228:	e02d      	b.n	800c286 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c22a:	68f8      	ldr	r0, [r7, #12]
 800c22c:	f000 f8ce 	bl	800c3cc <I2C_IsAcknowledgeFailed>
 800c230:	4603      	mov	r3, r0
 800c232:	2b00      	cmp	r3, #0
 800c234:	d001      	beq.n	800c23a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c236:	2301      	movs	r3, #1
 800c238:	e02d      	b.n	800c296 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c240:	d021      	beq.n	800c286 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c242:	f7fe f9b3 	bl	800a5ac <HAL_GetTick>
 800c246:	4602      	mov	r2, r0
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	1ad3      	subs	r3, r2, r3
 800c24c:	68ba      	ldr	r2, [r7, #8]
 800c24e:	429a      	cmp	r2, r3
 800c250:	d302      	bcc.n	800c258 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d116      	bne.n	800c286 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	2200      	movs	r2, #0
 800c25c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	2220      	movs	r2, #32
 800c262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	2200      	movs	r2, #0
 800c26a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c272:	f043 0220 	orr.w	r2, r3, #32
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	2200      	movs	r2, #0
 800c27e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c282:	2301      	movs	r3, #1
 800c284:	e007      	b.n	800c296 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	695b      	ldr	r3, [r3, #20]
 800c28c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c290:	2b80      	cmp	r3, #128	; 0x80
 800c292:	d1ca      	bne.n	800c22a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c294:	2300      	movs	r3, #0
}
 800c296:	4618      	mov	r0, r3
 800c298:	3710      	adds	r7, #16
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}

0800c29e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c29e:	b580      	push	{r7, lr}
 800c2a0:	b084      	sub	sp, #16
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	60f8      	str	r0, [r7, #12]
 800c2a6:	60b9      	str	r1, [r7, #8]
 800c2a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c2aa:	e02d      	b.n	800c308 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c2ac:	68f8      	ldr	r0, [r7, #12]
 800c2ae:	f000 f88d 	bl	800c3cc <I2C_IsAcknowledgeFailed>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d001      	beq.n	800c2bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	e02d      	b.n	800c318 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2c2:	d021      	beq.n	800c308 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c2c4:	f7fe f972 	bl	800a5ac <HAL_GetTick>
 800c2c8:	4602      	mov	r2, r0
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	1ad3      	subs	r3, r2, r3
 800c2ce:	68ba      	ldr	r2, [r7, #8]
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d302      	bcc.n	800c2da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d116      	bne.n	800c308 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2220      	movs	r2, #32
 800c2e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2f4:	f043 0220 	orr.w	r2, r3, #32
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2200      	movs	r2, #0
 800c300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c304:	2301      	movs	r3, #1
 800c306:	e007      	b.n	800c318 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	695b      	ldr	r3, [r3, #20]
 800c30e:	f003 0304 	and.w	r3, r3, #4
 800c312:	2b04      	cmp	r3, #4
 800c314:	d1ca      	bne.n	800c2ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c316:	2300      	movs	r3, #0
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3710      	adds	r7, #16
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}

0800c320 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b084      	sub	sp, #16
 800c324:	af00      	add	r7, sp, #0
 800c326:	60f8      	str	r0, [r7, #12]
 800c328:	60b9      	str	r1, [r7, #8]
 800c32a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c32c:	e042      	b.n	800c3b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	695b      	ldr	r3, [r3, #20]
 800c334:	f003 0310 	and.w	r3, r3, #16
 800c338:	2b10      	cmp	r3, #16
 800c33a:	d119      	bne.n	800c370 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f06f 0210 	mvn.w	r2, #16
 800c344:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	2200      	movs	r2, #0
 800c34a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	2220      	movs	r2, #32
 800c350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2200      	movs	r2, #0
 800c358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	2200      	movs	r2, #0
 800c368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c36c:	2301      	movs	r3, #1
 800c36e:	e029      	b.n	800c3c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c370:	f7fe f91c 	bl	800a5ac <HAL_GetTick>
 800c374:	4602      	mov	r2, r0
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	1ad3      	subs	r3, r2, r3
 800c37a:	68ba      	ldr	r2, [r7, #8]
 800c37c:	429a      	cmp	r2, r3
 800c37e:	d302      	bcc.n	800c386 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d116      	bne.n	800c3b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	2200      	movs	r2, #0
 800c38a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2220      	movs	r2, #32
 800c390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	2200      	movs	r2, #0
 800c398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3a0:	f043 0220 	orr.w	r2, r3, #32
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	e007      	b.n	800c3c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	695b      	ldr	r3, [r3, #20]
 800c3ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3be:	2b40      	cmp	r3, #64	; 0x40
 800c3c0:	d1b5      	bne.n	800c32e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c3c2:	2300      	movs	r3, #0
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3710      	adds	r7, #16
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}

0800c3cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	695b      	ldr	r3, [r3, #20]
 800c3da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c3de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3e2:	d11b      	bne.n	800c41c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c3ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2220      	movs	r2, #32
 800c3f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2200      	movs	r2, #0
 800c400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c408:	f043 0204 	orr.w	r2, r3, #4
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2200      	movs	r2, #0
 800c414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c418:	2301      	movs	r3, #1
 800c41a:	e000      	b.n	800c41e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c41c:	2300      	movs	r3, #0
}
 800c41e:	4618      	mov	r0, r3
 800c420:	370c      	adds	r7, #12
 800c422:	46bd      	mov	sp, r7
 800c424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c428:	4770      	bx	lr

0800c42a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c42a:	b480      	push	{r7}
 800c42c:	b083      	sub	sp, #12
 800c42e:	af00      	add	r7, sp, #0
 800c430:	6078      	str	r0, [r7, #4]
 800c432:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c43a:	b2db      	uxtb	r3, r3
 800c43c:	2b20      	cmp	r3, #32
 800c43e:	d129      	bne.n	800c494 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2224      	movs	r2, #36	; 0x24
 800c444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	681a      	ldr	r2, [r3, #0]
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f022 0201 	bic.w	r2, r2, #1
 800c456:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f022 0210 	bic.w	r2, r2, #16
 800c466:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	683a      	ldr	r2, [r7, #0]
 800c474:	430a      	orrs	r2, r1
 800c476:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	681a      	ldr	r2, [r3, #0]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f042 0201 	orr.w	r2, r2, #1
 800c486:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2220      	movs	r2, #32
 800c48c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c490:	2300      	movs	r3, #0
 800c492:	e000      	b.n	800c496 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800c494:	2302      	movs	r3, #2
  }
}
 800c496:	4618      	mov	r0, r3
 800c498:	370c      	adds	r7, #12
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr

0800c4a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c4a2:	b480      	push	{r7}
 800c4a4:	b085      	sub	sp, #20
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	6078      	str	r0, [r7, #4]
 800c4aa:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4b6:	b2db      	uxtb	r3, r3
 800c4b8:	2b20      	cmp	r3, #32
 800c4ba:	d12a      	bne.n	800c512 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2224      	movs	r2, #36	; 0x24
 800c4c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	681a      	ldr	r2, [r3, #0]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f022 0201 	bic.w	r2, r2, #1
 800c4d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4da:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800c4dc:	89fb      	ldrh	r3, [r7, #14]
 800c4de:	f023 030f 	bic.w	r3, r3, #15
 800c4e2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	b29a      	uxth	r2, r3
 800c4e8:	89fb      	ldrh	r3, [r7, #14]
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	89fa      	ldrh	r2, [r7, #14]
 800c4f4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	681a      	ldr	r2, [r3, #0]
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f042 0201 	orr.w	r2, r2, #1
 800c504:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2220      	movs	r2, #32
 800c50a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c50e:	2300      	movs	r3, #0
 800c510:	e000      	b.n	800c514 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800c512:	2302      	movs	r3, #2
  }
}
 800c514:	4618      	mov	r0, r3
 800c516:	3714      	adds	r7, #20
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr

0800c520 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 800c520:	b480      	push	{r7}
 800c522:	b083      	sub	sp, #12
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 800c528:	4b05      	ldr	r3, [pc, #20]	; (800c540 <HAL_PWR_EnableWakeUpPin+0x20>)
 800c52a:	685a      	ldr	r2, [r3, #4]
 800c52c:	4904      	ldr	r1, [pc, #16]	; (800c540 <HAL_PWR_EnableWakeUpPin+0x20>)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	4313      	orrs	r3, r2
 800c532:	604b      	str	r3, [r1, #4]
}
 800c534:	bf00      	nop
 800c536:	370c      	adds	r7, #12
 800c538:	46bd      	mov	sp, r7
 800c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53e:	4770      	bx	lr
 800c540:	40007000 	.word	0x40007000

0800c544 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800c544:	b480      	push	{r7}
 800c546:	b083      	sub	sp, #12
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 800c54c:	4b06      	ldr	r3, [pc, #24]	; (800c568 <HAL_PWR_DisableWakeUpPin+0x24>)
 800c54e:	685a      	ldr	r2, [r3, #4]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	43db      	mvns	r3, r3
 800c554:	4904      	ldr	r1, [pc, #16]	; (800c568 <HAL_PWR_DisableWakeUpPin+0x24>)
 800c556:	4013      	ands	r3, r2
 800c558:	604b      	str	r3, [r1, #4]
}
 800c55a:	bf00      	nop
 800c55c:	370c      	adds	r7, #12
 800c55e:	46bd      	mov	sp, r7
 800c560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c564:	4770      	bx	lr
 800c566:	bf00      	nop
 800c568:	40007000 	.word	0x40007000

0800c56c <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800c56c:	b480      	push	{r7}
 800c56e:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800c570:	4b08      	ldr	r3, [pc, #32]	; (800c594 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	4a07      	ldr	r2, [pc, #28]	; (800c594 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800c576:	f043 0302 	orr.w	r3, r3, #2
 800c57a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800c57c:	4b06      	ldr	r3, [pc, #24]	; (800c598 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800c57e:	691b      	ldr	r3, [r3, #16]
 800c580:	4a05      	ldr	r2, [pc, #20]	; (800c598 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800c582:	f043 0304 	orr.w	r3, r3, #4
 800c586:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800c588:	bf30      	wfi
}
 800c58a:	bf00      	nop
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr
 800c594:	40007000 	.word	0x40007000
 800c598:	e000ed00 	.word	0xe000ed00

0800c59c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b082      	sub	sp, #8
 800c5a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	603b      	str	r3, [r7, #0]
 800c5aa:	4b20      	ldr	r3, [pc, #128]	; (800c62c <HAL_PWREx_EnableOverDrive+0x90>)
 800c5ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ae:	4a1f      	ldr	r2, [pc, #124]	; (800c62c <HAL_PWREx_EnableOverDrive+0x90>)
 800c5b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5b4:	6413      	str	r3, [r2, #64]	; 0x40
 800c5b6:	4b1d      	ldr	r3, [pc, #116]	; (800c62c <HAL_PWREx_EnableOverDrive+0x90>)
 800c5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5be:	603b      	str	r3, [r7, #0]
 800c5c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c5c2:	4b1b      	ldr	r3, [pc, #108]	; (800c630 <HAL_PWREx_EnableOverDrive+0x94>)
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c5c8:	f7fd fff0 	bl	800a5ac <HAL_GetTick>
 800c5cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c5ce:	e009      	b.n	800c5e4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c5d0:	f7fd ffec 	bl	800a5ac <HAL_GetTick>
 800c5d4:	4602      	mov	r2, r0
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	1ad3      	subs	r3, r2, r3
 800c5da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c5de:	d901      	bls.n	800c5e4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800c5e0:	2303      	movs	r3, #3
 800c5e2:	e01f      	b.n	800c624 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c5e4:	4b13      	ldr	r3, [pc, #76]	; (800c634 <HAL_PWREx_EnableOverDrive+0x98>)
 800c5e6:	685b      	ldr	r3, [r3, #4]
 800c5e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c5ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5f0:	d1ee      	bne.n	800c5d0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c5f2:	4b11      	ldr	r3, [pc, #68]	; (800c638 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c5f8:	f7fd ffd8 	bl	800a5ac <HAL_GetTick>
 800c5fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c5fe:	e009      	b.n	800c614 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c600:	f7fd ffd4 	bl	800a5ac <HAL_GetTick>
 800c604:	4602      	mov	r2, r0
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	1ad3      	subs	r3, r2, r3
 800c60a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c60e:	d901      	bls.n	800c614 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800c610:	2303      	movs	r3, #3
 800c612:	e007      	b.n	800c624 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c614:	4b07      	ldr	r3, [pc, #28]	; (800c634 <HAL_PWREx_EnableOverDrive+0x98>)
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c61c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c620:	d1ee      	bne.n	800c600 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800c622:	2300      	movs	r3, #0
}
 800c624:	4618      	mov	r0, r3
 800c626:	3708      	adds	r7, #8
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}
 800c62c:	40023800 	.word	0x40023800
 800c630:	420e0040 	.word	0x420e0040
 800c634:	40007000 	.word	0x40007000
 800c638:	420e0044 	.word	0x420e0044

0800c63c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b086      	sub	sp, #24
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d101      	bne.n	800c64e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c64a:	2301      	movs	r3, #1
 800c64c:	e264      	b.n	800cb18 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f003 0301 	and.w	r3, r3, #1
 800c656:	2b00      	cmp	r3, #0
 800c658:	d075      	beq.n	800c746 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c65a:	4ba3      	ldr	r3, [pc, #652]	; (800c8e8 <HAL_RCC_OscConfig+0x2ac>)
 800c65c:	689b      	ldr	r3, [r3, #8]
 800c65e:	f003 030c 	and.w	r3, r3, #12
 800c662:	2b04      	cmp	r3, #4
 800c664:	d00c      	beq.n	800c680 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c666:	4ba0      	ldr	r3, [pc, #640]	; (800c8e8 <HAL_RCC_OscConfig+0x2ac>)
 800c668:	689b      	ldr	r3, [r3, #8]
 800c66a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c66e:	2b08      	cmp	r3, #8
 800c670:	d112      	bne.n	800c698 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c672:	4b9d      	ldr	r3, [pc, #628]	; (800c8e8 <HAL_RCC_OscConfig+0x2ac>)
 800c674:	685b      	ldr	r3, [r3, #4]
 800c676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c67a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c67e:	d10b      	bne.n	800c698 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c680:	4b99      	ldr	r3, [pc, #612]	; (800c8e8 <HAL_RCC_OscConfig+0x2ac>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d05b      	beq.n	800c744 <HAL_RCC_OscConfig+0x108>
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	685b      	ldr	r3, [r3, #4]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d157      	bne.n	800c744 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c694:	2301      	movs	r3, #1
 800c696:	e23f      	b.n	800cb18 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	685b      	ldr	r3, [r3, #4]
 800c69c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6a0:	d106      	bne.n	800c6b0 <HAL_RCC_OscConfig+0x74>
 800c6a2:	4b91      	ldr	r3, [pc, #580]	; (800c8e8 <HAL_RCC_OscConfig+0x2ac>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	4a90      	ldr	r2, [pc, #576]	; (800c8e8 <HAL_RCC_OscConfig+0x2ac>)
 800c6a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c6ac:	6013      	str	r3, [r2, #0]
 800c6ae:	e01d      	b.n	800c6ec <HAL_RCC_OscConfig+0xb0>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	685b      	ldr	r3, [r3, #4]
 800c6b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c6b8:	d10c      	bne.n	800c6d4 <HAL_RCC_OscConfig+0x98>
 800c6ba:	4b8b      	ldr	r3, [pc, #556]	; (800c8e8 <HAL_RCC_OscConfig+0x2ac>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	4a8a      	ldr	r2, [pc, #552]	; (800c8e8 <HAL_RCC_OscConfig+0x2ac>)
 800c6c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c6c4:	6013      	str	r3, [r2, #0]
 800c6c6:	4b88      	ldr	r3, [pc, #544]	; (800c8e8 <HAL_RCC_OscConfig+0x2ac>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4a87      	ldr	r2, [pc, #540]	; (800c8e8 <HAL_RCC_OscConfig+0x2ac>)
 800c6cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c6d0:	6013      	str	r3, [r2, #0]
 800c6d2:	e00b      	b.n	800c6ec <HAL_RCC_OscConfig+0xb0>
 800c6d4:	4b84      	ldr	r3, [pc, #528]	; (800c8e8 <HAL_RCC_OscConfig+0x2ac>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4a83      	ldr	r2, [pc, #524]	; (800c8e8 <HAL_RCC_OscConfig+0x2ac>)
 800c6da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c6de:	6013      	str	r3, [r2, #0]
 800c6e0:	4b81      	ldr	r3, [pc, #516]	; (800c8e8 <HAL_RCC_OscConfig+0x2ac>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	4a80      	ldr	r2, [pc, #512]	; (800c8e8 <HAL_RCC_OscConfig+0x2ac>)
 800c6e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c6ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d013      	beq.n	800c71c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c6f4:	f7fd ff5a 	bl	800a5ac <HAL_GetTick>
 800c6f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c6fa:	e008      	b.n	800c70e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c6fc:	f7fd ff56 	bl	800a5ac <HAL_GetTick>
 800c700:	4602      	mov	r2, r0
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	1ad3      	subs	r3, r2, r3
 800c706:	2b64      	cmp	r3, #100	; 0x64
 800c708:	d901      	bls.n	800c70e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c70a:	2303      	movs	r3, #3
 800c70c:	e204      	b.n	800cb18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c70e:	4b76      	ldr	r3, [pc, #472]	; (800c8e8 <HAL_RCC_OscConfig+0x2ac>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c716:	2b00      	cmp	r3, #0
 800c718:	d0f0      	beq.n	800c6fc <HAL_RCC_OscConfig+0xc0>
 800c71a:	e014      	b.n	800c746 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c71c:	f7fd ff46 	bl	800a5ac <HAL_GetTick>
 800c720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c722:	e008      	b.n	800c736 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c724:	f7fd ff42 	bl	800a5ac <HAL_GetTick>
 800c728:	4602      	mov	r2, r0
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	1ad3      	subs	r3, r2, r3
 800c72e:	2b64      	cmp	r3, #100	; 0x64
 800c730:	d901      	bls.n	800c736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c732:	2303      	movs	r3, #3
 800c734:	e1f0      	b.n	800cb18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c736:	4b6c      	ldr	r3, [pc, #432]	; (800c8e8 <HAL_RCC_OscConfig+0x2ac>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d1f0      	bne.n	800c724 <HAL_RCC_OscConfig+0xe8>
 800c742:	e000      	b.n	800c746 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f003 0302 	and.w	r3, r3, #2
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d063      	beq.n	800c81a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c752:	4b65      	ldr	r3, [pc, #404]	; (800c8e8 <HAL_RCC_OscConfig+0x2ac>)
 800c754:	689b      	ldr	r3, [r3, #8]
 800c756:	f003 030c 	and.w	r3, r3, #12
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d00b      	beq.n	800c776 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c75e:	4b62      	ldr	r3, [pc, #392]	; (800c8e8 <HAL_RCC_OscConfig+0x2ac>)
 800c760:	689b      	ldr	r3, [r3, #8]
 800c762:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c766:	2b08      	cmp	r3, #8
 800c768:	d11c      	bne.n	800c7a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c76a:	4b5f      	ldr	r3, [pc, #380]	; (800c8e8 <HAL_RCC_OscConfig+0x2ac>)
 800c76c:	685b      	ldr	r3, [r3, #4]
 800c76e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c772:	2b00      	cmp	r3, #0
 800c774:	d116      	bne.n	800c7a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c776:	4b5c      	ldr	r3, [pc, #368]	; (800c8e8 <HAL_RCC_OscConfig+0x2ac>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f003 0302 	and.w	r3, r3, #2
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d005      	beq.n	800c78e <HAL_RCC_OscConfig+0x152>
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	68db      	ldr	r3, [r3, #12]
 800c786:	2b01      	cmp	r3, #1
 800c788:	d001      	beq.n	800c78e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c78a:	2301      	movs	r3, #1
 800c78c:	e1c4      	b.n	800cb18 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c78e:	4b56      	ldr	r3, [pc, #344]	; (800c8e8 <HAL_RCC_OscConfig+0x2ac>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	691b      	ldr	r3, [r3, #16]
 800c79a:	00db      	lsls	r3, r3, #3
 800c79c:	4952      	ldr	r1, [pc, #328]	; (800c8e8 <HAL_RCC_OscConfig+0x2ac>)
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c7a2:	e03a      	b.n	800c81a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	68db      	ldr	r3, [r3, #12]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d020      	beq.n	800c7ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c7ac:	4b4f      	ldr	r3, [pc, #316]	; (800c8ec <HAL_RCC_OscConfig+0x2b0>)
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7b2:	f7fd fefb 	bl	800a5ac <HAL_GetTick>
 800c7b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c7b8:	e008      	b.n	800c7cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c7ba:	f7fd fef7 	bl	800a5ac <HAL_GetTick>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	1ad3      	subs	r3, r2, r3
 800c7c4:	2b02      	cmp	r3, #2
 800c7c6:	d901      	bls.n	800c7cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c7c8:	2303      	movs	r3, #3
 800c7ca:	e1a5      	b.n	800cb18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c7cc:	4b46      	ldr	r3, [pc, #280]	; (800c8e8 <HAL_RCC_OscConfig+0x2ac>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f003 0302 	and.w	r3, r3, #2
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d0f0      	beq.n	800c7ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c7d8:	4b43      	ldr	r3, [pc, #268]	; (800c8e8 <HAL_RCC_OscConfig+0x2ac>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	691b      	ldr	r3, [r3, #16]
 800c7e4:	00db      	lsls	r3, r3, #3
 800c7e6:	4940      	ldr	r1, [pc, #256]	; (800c8e8 <HAL_RCC_OscConfig+0x2ac>)
 800c7e8:	4313      	orrs	r3, r2
 800c7ea:	600b      	str	r3, [r1, #0]
 800c7ec:	e015      	b.n	800c81a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c7ee:	4b3f      	ldr	r3, [pc, #252]	; (800c8ec <HAL_RCC_OscConfig+0x2b0>)
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7f4:	f7fd feda 	bl	800a5ac <HAL_GetTick>
 800c7f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c7fa:	e008      	b.n	800c80e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c7fc:	f7fd fed6 	bl	800a5ac <HAL_GetTick>
 800c800:	4602      	mov	r2, r0
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	1ad3      	subs	r3, r2, r3
 800c806:	2b02      	cmp	r3, #2
 800c808:	d901      	bls.n	800c80e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c80a:	2303      	movs	r3, #3
 800c80c:	e184      	b.n	800cb18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c80e:	4b36      	ldr	r3, [pc, #216]	; (800c8e8 <HAL_RCC_OscConfig+0x2ac>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f003 0302 	and.w	r3, r3, #2
 800c816:	2b00      	cmp	r3, #0
 800c818:	d1f0      	bne.n	800c7fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f003 0308 	and.w	r3, r3, #8
 800c822:	2b00      	cmp	r3, #0
 800c824:	d030      	beq.n	800c888 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	695b      	ldr	r3, [r3, #20]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d016      	beq.n	800c85c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c82e:	4b30      	ldr	r3, [pc, #192]	; (800c8f0 <HAL_RCC_OscConfig+0x2b4>)
 800c830:	2201      	movs	r2, #1
 800c832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c834:	f7fd feba 	bl	800a5ac <HAL_GetTick>
 800c838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c83a:	e008      	b.n	800c84e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c83c:	f7fd feb6 	bl	800a5ac <HAL_GetTick>
 800c840:	4602      	mov	r2, r0
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	1ad3      	subs	r3, r2, r3
 800c846:	2b02      	cmp	r3, #2
 800c848:	d901      	bls.n	800c84e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c84a:	2303      	movs	r3, #3
 800c84c:	e164      	b.n	800cb18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c84e:	4b26      	ldr	r3, [pc, #152]	; (800c8e8 <HAL_RCC_OscConfig+0x2ac>)
 800c850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c852:	f003 0302 	and.w	r3, r3, #2
 800c856:	2b00      	cmp	r3, #0
 800c858:	d0f0      	beq.n	800c83c <HAL_RCC_OscConfig+0x200>
 800c85a:	e015      	b.n	800c888 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c85c:	4b24      	ldr	r3, [pc, #144]	; (800c8f0 <HAL_RCC_OscConfig+0x2b4>)
 800c85e:	2200      	movs	r2, #0
 800c860:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c862:	f7fd fea3 	bl	800a5ac <HAL_GetTick>
 800c866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c868:	e008      	b.n	800c87c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c86a:	f7fd fe9f 	bl	800a5ac <HAL_GetTick>
 800c86e:	4602      	mov	r2, r0
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	1ad3      	subs	r3, r2, r3
 800c874:	2b02      	cmp	r3, #2
 800c876:	d901      	bls.n	800c87c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c878:	2303      	movs	r3, #3
 800c87a:	e14d      	b.n	800cb18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c87c:	4b1a      	ldr	r3, [pc, #104]	; (800c8e8 <HAL_RCC_OscConfig+0x2ac>)
 800c87e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c880:	f003 0302 	and.w	r3, r3, #2
 800c884:	2b00      	cmp	r3, #0
 800c886:	d1f0      	bne.n	800c86a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f003 0304 	and.w	r3, r3, #4
 800c890:	2b00      	cmp	r3, #0
 800c892:	f000 80a0 	beq.w	800c9d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c896:	2300      	movs	r3, #0
 800c898:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c89a:	4b13      	ldr	r3, [pc, #76]	; (800c8e8 <HAL_RCC_OscConfig+0x2ac>)
 800c89c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c89e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d10f      	bne.n	800c8c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	60bb      	str	r3, [r7, #8]
 800c8aa:	4b0f      	ldr	r3, [pc, #60]	; (800c8e8 <HAL_RCC_OscConfig+0x2ac>)
 800c8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ae:	4a0e      	ldr	r2, [pc, #56]	; (800c8e8 <HAL_RCC_OscConfig+0x2ac>)
 800c8b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c8b4:	6413      	str	r3, [r2, #64]	; 0x40
 800c8b6:	4b0c      	ldr	r3, [pc, #48]	; (800c8e8 <HAL_RCC_OscConfig+0x2ac>)
 800c8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8be:	60bb      	str	r3, [r7, #8]
 800c8c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c8c6:	4b0b      	ldr	r3, [pc, #44]	; (800c8f4 <HAL_RCC_OscConfig+0x2b8>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d121      	bne.n	800c916 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c8d2:	4b08      	ldr	r3, [pc, #32]	; (800c8f4 <HAL_RCC_OscConfig+0x2b8>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	4a07      	ldr	r2, [pc, #28]	; (800c8f4 <HAL_RCC_OscConfig+0x2b8>)
 800c8d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c8dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c8de:	f7fd fe65 	bl	800a5ac <HAL_GetTick>
 800c8e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c8e4:	e011      	b.n	800c90a <HAL_RCC_OscConfig+0x2ce>
 800c8e6:	bf00      	nop
 800c8e8:	40023800 	.word	0x40023800
 800c8ec:	42470000 	.word	0x42470000
 800c8f0:	42470e80 	.word	0x42470e80
 800c8f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c8f8:	f7fd fe58 	bl	800a5ac <HAL_GetTick>
 800c8fc:	4602      	mov	r2, r0
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	1ad3      	subs	r3, r2, r3
 800c902:	2b02      	cmp	r3, #2
 800c904:	d901      	bls.n	800c90a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800c906:	2303      	movs	r3, #3
 800c908:	e106      	b.n	800cb18 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c90a:	4b85      	ldr	r3, [pc, #532]	; (800cb20 <HAL_RCC_OscConfig+0x4e4>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c912:	2b00      	cmp	r3, #0
 800c914:	d0f0      	beq.n	800c8f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	689b      	ldr	r3, [r3, #8]
 800c91a:	2b01      	cmp	r3, #1
 800c91c:	d106      	bne.n	800c92c <HAL_RCC_OscConfig+0x2f0>
 800c91e:	4b81      	ldr	r3, [pc, #516]	; (800cb24 <HAL_RCC_OscConfig+0x4e8>)
 800c920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c922:	4a80      	ldr	r2, [pc, #512]	; (800cb24 <HAL_RCC_OscConfig+0x4e8>)
 800c924:	f043 0301 	orr.w	r3, r3, #1
 800c928:	6713      	str	r3, [r2, #112]	; 0x70
 800c92a:	e01c      	b.n	800c966 <HAL_RCC_OscConfig+0x32a>
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	689b      	ldr	r3, [r3, #8]
 800c930:	2b05      	cmp	r3, #5
 800c932:	d10c      	bne.n	800c94e <HAL_RCC_OscConfig+0x312>
 800c934:	4b7b      	ldr	r3, [pc, #492]	; (800cb24 <HAL_RCC_OscConfig+0x4e8>)
 800c936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c938:	4a7a      	ldr	r2, [pc, #488]	; (800cb24 <HAL_RCC_OscConfig+0x4e8>)
 800c93a:	f043 0304 	orr.w	r3, r3, #4
 800c93e:	6713      	str	r3, [r2, #112]	; 0x70
 800c940:	4b78      	ldr	r3, [pc, #480]	; (800cb24 <HAL_RCC_OscConfig+0x4e8>)
 800c942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c944:	4a77      	ldr	r2, [pc, #476]	; (800cb24 <HAL_RCC_OscConfig+0x4e8>)
 800c946:	f043 0301 	orr.w	r3, r3, #1
 800c94a:	6713      	str	r3, [r2, #112]	; 0x70
 800c94c:	e00b      	b.n	800c966 <HAL_RCC_OscConfig+0x32a>
 800c94e:	4b75      	ldr	r3, [pc, #468]	; (800cb24 <HAL_RCC_OscConfig+0x4e8>)
 800c950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c952:	4a74      	ldr	r2, [pc, #464]	; (800cb24 <HAL_RCC_OscConfig+0x4e8>)
 800c954:	f023 0301 	bic.w	r3, r3, #1
 800c958:	6713      	str	r3, [r2, #112]	; 0x70
 800c95a:	4b72      	ldr	r3, [pc, #456]	; (800cb24 <HAL_RCC_OscConfig+0x4e8>)
 800c95c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c95e:	4a71      	ldr	r2, [pc, #452]	; (800cb24 <HAL_RCC_OscConfig+0x4e8>)
 800c960:	f023 0304 	bic.w	r3, r3, #4
 800c964:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	689b      	ldr	r3, [r3, #8]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d015      	beq.n	800c99a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c96e:	f7fd fe1d 	bl	800a5ac <HAL_GetTick>
 800c972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c974:	e00a      	b.n	800c98c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c976:	f7fd fe19 	bl	800a5ac <HAL_GetTick>
 800c97a:	4602      	mov	r2, r0
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	1ad3      	subs	r3, r2, r3
 800c980:	f241 3288 	movw	r2, #5000	; 0x1388
 800c984:	4293      	cmp	r3, r2
 800c986:	d901      	bls.n	800c98c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800c988:	2303      	movs	r3, #3
 800c98a:	e0c5      	b.n	800cb18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c98c:	4b65      	ldr	r3, [pc, #404]	; (800cb24 <HAL_RCC_OscConfig+0x4e8>)
 800c98e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c990:	f003 0302 	and.w	r3, r3, #2
 800c994:	2b00      	cmp	r3, #0
 800c996:	d0ee      	beq.n	800c976 <HAL_RCC_OscConfig+0x33a>
 800c998:	e014      	b.n	800c9c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c99a:	f7fd fe07 	bl	800a5ac <HAL_GetTick>
 800c99e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c9a0:	e00a      	b.n	800c9b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c9a2:	f7fd fe03 	bl	800a5ac <HAL_GetTick>
 800c9a6:	4602      	mov	r2, r0
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	1ad3      	subs	r3, r2, r3
 800c9ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	d901      	bls.n	800c9b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800c9b4:	2303      	movs	r3, #3
 800c9b6:	e0af      	b.n	800cb18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c9b8:	4b5a      	ldr	r3, [pc, #360]	; (800cb24 <HAL_RCC_OscConfig+0x4e8>)
 800c9ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9bc:	f003 0302 	and.w	r3, r3, #2
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d1ee      	bne.n	800c9a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c9c4:	7dfb      	ldrb	r3, [r7, #23]
 800c9c6:	2b01      	cmp	r3, #1
 800c9c8:	d105      	bne.n	800c9d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c9ca:	4b56      	ldr	r3, [pc, #344]	; (800cb24 <HAL_RCC_OscConfig+0x4e8>)
 800c9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ce:	4a55      	ldr	r2, [pc, #340]	; (800cb24 <HAL_RCC_OscConfig+0x4e8>)
 800c9d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c9d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	699b      	ldr	r3, [r3, #24]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	f000 809b 	beq.w	800cb16 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c9e0:	4b50      	ldr	r3, [pc, #320]	; (800cb24 <HAL_RCC_OscConfig+0x4e8>)
 800c9e2:	689b      	ldr	r3, [r3, #8]
 800c9e4:	f003 030c 	and.w	r3, r3, #12
 800c9e8:	2b08      	cmp	r3, #8
 800c9ea:	d05c      	beq.n	800caa6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	699b      	ldr	r3, [r3, #24]
 800c9f0:	2b02      	cmp	r3, #2
 800c9f2:	d141      	bne.n	800ca78 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c9f4:	4b4c      	ldr	r3, [pc, #304]	; (800cb28 <HAL_RCC_OscConfig+0x4ec>)
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c9fa:	f7fd fdd7 	bl	800a5ac <HAL_GetTick>
 800c9fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca00:	e008      	b.n	800ca14 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ca02:	f7fd fdd3 	bl	800a5ac <HAL_GetTick>
 800ca06:	4602      	mov	r2, r0
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	1ad3      	subs	r3, r2, r3
 800ca0c:	2b02      	cmp	r3, #2
 800ca0e:	d901      	bls.n	800ca14 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800ca10:	2303      	movs	r3, #3
 800ca12:	e081      	b.n	800cb18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca14:	4b43      	ldr	r3, [pc, #268]	; (800cb24 <HAL_RCC_OscConfig+0x4e8>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d1f0      	bne.n	800ca02 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	69da      	ldr	r2, [r3, #28]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6a1b      	ldr	r3, [r3, #32]
 800ca28:	431a      	orrs	r2, r3
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca2e:	019b      	lsls	r3, r3, #6
 800ca30:	431a      	orrs	r2, r3
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca36:	085b      	lsrs	r3, r3, #1
 800ca38:	3b01      	subs	r3, #1
 800ca3a:	041b      	lsls	r3, r3, #16
 800ca3c:	431a      	orrs	r2, r3
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca42:	061b      	lsls	r3, r3, #24
 800ca44:	4937      	ldr	r1, [pc, #220]	; (800cb24 <HAL_RCC_OscConfig+0x4e8>)
 800ca46:	4313      	orrs	r3, r2
 800ca48:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ca4a:	4b37      	ldr	r3, [pc, #220]	; (800cb28 <HAL_RCC_OscConfig+0x4ec>)
 800ca4c:	2201      	movs	r2, #1
 800ca4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca50:	f7fd fdac 	bl	800a5ac <HAL_GetTick>
 800ca54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ca56:	e008      	b.n	800ca6a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ca58:	f7fd fda8 	bl	800a5ac <HAL_GetTick>
 800ca5c:	4602      	mov	r2, r0
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	1ad3      	subs	r3, r2, r3
 800ca62:	2b02      	cmp	r3, #2
 800ca64:	d901      	bls.n	800ca6a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800ca66:	2303      	movs	r3, #3
 800ca68:	e056      	b.n	800cb18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ca6a:	4b2e      	ldr	r3, [pc, #184]	; (800cb24 <HAL_RCC_OscConfig+0x4e8>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d0f0      	beq.n	800ca58 <HAL_RCC_OscConfig+0x41c>
 800ca76:	e04e      	b.n	800cb16 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ca78:	4b2b      	ldr	r3, [pc, #172]	; (800cb28 <HAL_RCC_OscConfig+0x4ec>)
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca7e:	f7fd fd95 	bl	800a5ac <HAL_GetTick>
 800ca82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca84:	e008      	b.n	800ca98 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ca86:	f7fd fd91 	bl	800a5ac <HAL_GetTick>
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	1ad3      	subs	r3, r2, r3
 800ca90:	2b02      	cmp	r3, #2
 800ca92:	d901      	bls.n	800ca98 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800ca94:	2303      	movs	r3, #3
 800ca96:	e03f      	b.n	800cb18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca98:	4b22      	ldr	r3, [pc, #136]	; (800cb24 <HAL_RCC_OscConfig+0x4e8>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d1f0      	bne.n	800ca86 <HAL_RCC_OscConfig+0x44a>
 800caa4:	e037      	b.n	800cb16 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	699b      	ldr	r3, [r3, #24]
 800caaa:	2b01      	cmp	r3, #1
 800caac:	d101      	bne.n	800cab2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800caae:	2301      	movs	r3, #1
 800cab0:	e032      	b.n	800cb18 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800cab2:	4b1c      	ldr	r3, [pc, #112]	; (800cb24 <HAL_RCC_OscConfig+0x4e8>)
 800cab4:	685b      	ldr	r3, [r3, #4]
 800cab6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	699b      	ldr	r3, [r3, #24]
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	d028      	beq.n	800cb12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800caca:	429a      	cmp	r2, r3
 800cacc:	d121      	bne.n	800cb12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cad8:	429a      	cmp	r2, r3
 800cada:	d11a      	bne.n	800cb12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cadc:	68fa      	ldr	r2, [r7, #12]
 800cade:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800cae2:	4013      	ands	r3, r2
 800cae4:	687a      	ldr	r2, [r7, #4]
 800cae6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cae8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800caea:	4293      	cmp	r3, r2
 800caec:	d111      	bne.n	800cb12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caf8:	085b      	lsrs	r3, r3, #1
 800cafa:	3b01      	subs	r3, #1
 800cafc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d107      	bne.n	800cb12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb0c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d001      	beq.n	800cb16 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800cb12:	2301      	movs	r3, #1
 800cb14:	e000      	b.n	800cb18 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800cb16:	2300      	movs	r3, #0
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3718      	adds	r7, #24
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}
 800cb20:	40007000 	.word	0x40007000
 800cb24:	40023800 	.word	0x40023800
 800cb28:	42470060 	.word	0x42470060

0800cb2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b084      	sub	sp, #16
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
 800cb34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d101      	bne.n	800cb40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	e0cc      	b.n	800ccda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800cb40:	4b68      	ldr	r3, [pc, #416]	; (800cce4 <HAL_RCC_ClockConfig+0x1b8>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f003 030f 	and.w	r3, r3, #15
 800cb48:	683a      	ldr	r2, [r7, #0]
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d90c      	bls.n	800cb68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cb4e:	4b65      	ldr	r3, [pc, #404]	; (800cce4 <HAL_RCC_ClockConfig+0x1b8>)
 800cb50:	683a      	ldr	r2, [r7, #0]
 800cb52:	b2d2      	uxtb	r2, r2
 800cb54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb56:	4b63      	ldr	r3, [pc, #396]	; (800cce4 <HAL_RCC_ClockConfig+0x1b8>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f003 030f 	and.w	r3, r3, #15
 800cb5e:	683a      	ldr	r2, [r7, #0]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d001      	beq.n	800cb68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800cb64:	2301      	movs	r3, #1
 800cb66:	e0b8      	b.n	800ccda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f003 0302 	and.w	r3, r3, #2
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d020      	beq.n	800cbb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f003 0304 	and.w	r3, r3, #4
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d005      	beq.n	800cb8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cb80:	4b59      	ldr	r3, [pc, #356]	; (800cce8 <HAL_RCC_ClockConfig+0x1bc>)
 800cb82:	689b      	ldr	r3, [r3, #8]
 800cb84:	4a58      	ldr	r2, [pc, #352]	; (800cce8 <HAL_RCC_ClockConfig+0x1bc>)
 800cb86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800cb8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f003 0308 	and.w	r3, r3, #8
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d005      	beq.n	800cba4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cb98:	4b53      	ldr	r3, [pc, #332]	; (800cce8 <HAL_RCC_ClockConfig+0x1bc>)
 800cb9a:	689b      	ldr	r3, [r3, #8]
 800cb9c:	4a52      	ldr	r2, [pc, #328]	; (800cce8 <HAL_RCC_ClockConfig+0x1bc>)
 800cb9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800cba2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cba4:	4b50      	ldr	r3, [pc, #320]	; (800cce8 <HAL_RCC_ClockConfig+0x1bc>)
 800cba6:	689b      	ldr	r3, [r3, #8]
 800cba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	689b      	ldr	r3, [r3, #8]
 800cbb0:	494d      	ldr	r1, [pc, #308]	; (800cce8 <HAL_RCC_ClockConfig+0x1bc>)
 800cbb2:	4313      	orrs	r3, r2
 800cbb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f003 0301 	and.w	r3, r3, #1
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d044      	beq.n	800cc4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	2b01      	cmp	r3, #1
 800cbc8:	d107      	bne.n	800cbda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cbca:	4b47      	ldr	r3, [pc, #284]	; (800cce8 <HAL_RCC_ClockConfig+0x1bc>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d119      	bne.n	800cc0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	e07f      	b.n	800ccda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	685b      	ldr	r3, [r3, #4]
 800cbde:	2b02      	cmp	r3, #2
 800cbe0:	d003      	beq.n	800cbea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cbe6:	2b03      	cmp	r3, #3
 800cbe8:	d107      	bne.n	800cbfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cbea:	4b3f      	ldr	r3, [pc, #252]	; (800cce8 <HAL_RCC_ClockConfig+0x1bc>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d109      	bne.n	800cc0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	e06f      	b.n	800ccda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cbfa:	4b3b      	ldr	r3, [pc, #236]	; (800cce8 <HAL_RCC_ClockConfig+0x1bc>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f003 0302 	and.w	r3, r3, #2
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d101      	bne.n	800cc0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cc06:	2301      	movs	r3, #1
 800cc08:	e067      	b.n	800ccda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cc0a:	4b37      	ldr	r3, [pc, #220]	; (800cce8 <HAL_RCC_ClockConfig+0x1bc>)
 800cc0c:	689b      	ldr	r3, [r3, #8]
 800cc0e:	f023 0203 	bic.w	r2, r3, #3
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	685b      	ldr	r3, [r3, #4]
 800cc16:	4934      	ldr	r1, [pc, #208]	; (800cce8 <HAL_RCC_ClockConfig+0x1bc>)
 800cc18:	4313      	orrs	r3, r2
 800cc1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cc1c:	f7fd fcc6 	bl	800a5ac <HAL_GetTick>
 800cc20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc22:	e00a      	b.n	800cc3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cc24:	f7fd fcc2 	bl	800a5ac <HAL_GetTick>
 800cc28:	4602      	mov	r2, r0
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	1ad3      	subs	r3, r2, r3
 800cc2e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc32:	4293      	cmp	r3, r2
 800cc34:	d901      	bls.n	800cc3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cc36:	2303      	movs	r3, #3
 800cc38:	e04f      	b.n	800ccda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc3a:	4b2b      	ldr	r3, [pc, #172]	; (800cce8 <HAL_RCC_ClockConfig+0x1bc>)
 800cc3c:	689b      	ldr	r3, [r3, #8]
 800cc3e:	f003 020c 	and.w	r2, r3, #12
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	685b      	ldr	r3, [r3, #4]
 800cc46:	009b      	lsls	r3, r3, #2
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d1eb      	bne.n	800cc24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800cc4c:	4b25      	ldr	r3, [pc, #148]	; (800cce4 <HAL_RCC_ClockConfig+0x1b8>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f003 030f 	and.w	r3, r3, #15
 800cc54:	683a      	ldr	r2, [r7, #0]
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d20c      	bcs.n	800cc74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc5a:	4b22      	ldr	r3, [pc, #136]	; (800cce4 <HAL_RCC_ClockConfig+0x1b8>)
 800cc5c:	683a      	ldr	r2, [r7, #0]
 800cc5e:	b2d2      	uxtb	r2, r2
 800cc60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc62:	4b20      	ldr	r3, [pc, #128]	; (800cce4 <HAL_RCC_ClockConfig+0x1b8>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f003 030f 	and.w	r3, r3, #15
 800cc6a:	683a      	ldr	r2, [r7, #0]
 800cc6c:	429a      	cmp	r2, r3
 800cc6e:	d001      	beq.n	800cc74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800cc70:	2301      	movs	r3, #1
 800cc72:	e032      	b.n	800ccda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f003 0304 	and.w	r3, r3, #4
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d008      	beq.n	800cc92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cc80:	4b19      	ldr	r3, [pc, #100]	; (800cce8 <HAL_RCC_ClockConfig+0x1bc>)
 800cc82:	689b      	ldr	r3, [r3, #8]
 800cc84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	68db      	ldr	r3, [r3, #12]
 800cc8c:	4916      	ldr	r1, [pc, #88]	; (800cce8 <HAL_RCC_ClockConfig+0x1bc>)
 800cc8e:	4313      	orrs	r3, r2
 800cc90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f003 0308 	and.w	r3, r3, #8
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d009      	beq.n	800ccb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cc9e:	4b12      	ldr	r3, [pc, #72]	; (800cce8 <HAL_RCC_ClockConfig+0x1bc>)
 800cca0:	689b      	ldr	r3, [r3, #8]
 800cca2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	691b      	ldr	r3, [r3, #16]
 800ccaa:	00db      	lsls	r3, r3, #3
 800ccac:	490e      	ldr	r1, [pc, #56]	; (800cce8 <HAL_RCC_ClockConfig+0x1bc>)
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ccb2:	f000 f821 	bl	800ccf8 <HAL_RCC_GetSysClockFreq>
 800ccb6:	4602      	mov	r2, r0
 800ccb8:	4b0b      	ldr	r3, [pc, #44]	; (800cce8 <HAL_RCC_ClockConfig+0x1bc>)
 800ccba:	689b      	ldr	r3, [r3, #8]
 800ccbc:	091b      	lsrs	r3, r3, #4
 800ccbe:	f003 030f 	and.w	r3, r3, #15
 800ccc2:	490a      	ldr	r1, [pc, #40]	; (800ccec <HAL_RCC_ClockConfig+0x1c0>)
 800ccc4:	5ccb      	ldrb	r3, [r1, r3]
 800ccc6:	fa22 f303 	lsr.w	r3, r2, r3
 800ccca:	4a09      	ldr	r2, [pc, #36]	; (800ccf0 <HAL_RCC_ClockConfig+0x1c4>)
 800cccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ccce:	4b09      	ldr	r3, [pc, #36]	; (800ccf4 <HAL_RCC_ClockConfig+0x1c8>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7f6 fa80 	bl	80031d8 <HAL_InitTick>

  return HAL_OK;
 800ccd8:	2300      	movs	r3, #0
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3710      	adds	r7, #16
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
 800cce2:	bf00      	nop
 800cce4:	40023c00 	.word	0x40023c00
 800cce8:	40023800 	.word	0x40023800
 800ccec:	0801c5d4 	.word	0x0801c5d4
 800ccf0:	20000088 	.word	0x20000088
 800ccf4:	200000b0 	.word	0x200000b0

0800ccf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ccf8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ccfc:	b084      	sub	sp, #16
 800ccfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800cd00:	2300      	movs	r3, #0
 800cd02:	607b      	str	r3, [r7, #4]
 800cd04:	2300      	movs	r3, #0
 800cd06:	60fb      	str	r3, [r7, #12]
 800cd08:	2300      	movs	r3, #0
 800cd0a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cd10:	4b67      	ldr	r3, [pc, #412]	; (800ceb0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800cd12:	689b      	ldr	r3, [r3, #8]
 800cd14:	f003 030c 	and.w	r3, r3, #12
 800cd18:	2b08      	cmp	r3, #8
 800cd1a:	d00d      	beq.n	800cd38 <HAL_RCC_GetSysClockFreq+0x40>
 800cd1c:	2b08      	cmp	r3, #8
 800cd1e:	f200 80bd 	bhi.w	800ce9c <HAL_RCC_GetSysClockFreq+0x1a4>
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d002      	beq.n	800cd2c <HAL_RCC_GetSysClockFreq+0x34>
 800cd26:	2b04      	cmp	r3, #4
 800cd28:	d003      	beq.n	800cd32 <HAL_RCC_GetSysClockFreq+0x3a>
 800cd2a:	e0b7      	b.n	800ce9c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cd2c:	4b61      	ldr	r3, [pc, #388]	; (800ceb4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800cd2e:	60bb      	str	r3, [r7, #8]
       break;
 800cd30:	e0b7      	b.n	800cea2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800cd32:	4b60      	ldr	r3, [pc, #384]	; (800ceb4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800cd34:	60bb      	str	r3, [r7, #8]
      break;
 800cd36:	e0b4      	b.n	800cea2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800cd38:	4b5d      	ldr	r3, [pc, #372]	; (800ceb0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800cd3a:	685b      	ldr	r3, [r3, #4]
 800cd3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd40:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800cd42:	4b5b      	ldr	r3, [pc, #364]	; (800ceb0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800cd44:	685b      	ldr	r3, [r3, #4]
 800cd46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d04d      	beq.n	800cdea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cd4e:	4b58      	ldr	r3, [pc, #352]	; (800ceb0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800cd50:	685b      	ldr	r3, [r3, #4]
 800cd52:	099b      	lsrs	r3, r3, #6
 800cd54:	461a      	mov	r2, r3
 800cd56:	f04f 0300 	mov.w	r3, #0
 800cd5a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800cd5e:	f04f 0100 	mov.w	r1, #0
 800cd62:	ea02 0800 	and.w	r8, r2, r0
 800cd66:	ea03 0901 	and.w	r9, r3, r1
 800cd6a:	4640      	mov	r0, r8
 800cd6c:	4649      	mov	r1, r9
 800cd6e:	f04f 0200 	mov.w	r2, #0
 800cd72:	f04f 0300 	mov.w	r3, #0
 800cd76:	014b      	lsls	r3, r1, #5
 800cd78:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800cd7c:	0142      	lsls	r2, r0, #5
 800cd7e:	4610      	mov	r0, r2
 800cd80:	4619      	mov	r1, r3
 800cd82:	ebb0 0008 	subs.w	r0, r0, r8
 800cd86:	eb61 0109 	sbc.w	r1, r1, r9
 800cd8a:	f04f 0200 	mov.w	r2, #0
 800cd8e:	f04f 0300 	mov.w	r3, #0
 800cd92:	018b      	lsls	r3, r1, #6
 800cd94:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800cd98:	0182      	lsls	r2, r0, #6
 800cd9a:	1a12      	subs	r2, r2, r0
 800cd9c:	eb63 0301 	sbc.w	r3, r3, r1
 800cda0:	f04f 0000 	mov.w	r0, #0
 800cda4:	f04f 0100 	mov.w	r1, #0
 800cda8:	00d9      	lsls	r1, r3, #3
 800cdaa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cdae:	00d0      	lsls	r0, r2, #3
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	460b      	mov	r3, r1
 800cdb4:	eb12 0208 	adds.w	r2, r2, r8
 800cdb8:	eb43 0309 	adc.w	r3, r3, r9
 800cdbc:	f04f 0000 	mov.w	r0, #0
 800cdc0:	f04f 0100 	mov.w	r1, #0
 800cdc4:	0299      	lsls	r1, r3, #10
 800cdc6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800cdca:	0290      	lsls	r0, r2, #10
 800cdcc:	4602      	mov	r2, r0
 800cdce:	460b      	mov	r3, r1
 800cdd0:	4610      	mov	r0, r2
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	461a      	mov	r2, r3
 800cdd8:	f04f 0300 	mov.w	r3, #0
 800cddc:	f7f3 ffc4 	bl	8000d68 <__aeabi_uldivmod>
 800cde0:	4602      	mov	r2, r0
 800cde2:	460b      	mov	r3, r1
 800cde4:	4613      	mov	r3, r2
 800cde6:	60fb      	str	r3, [r7, #12]
 800cde8:	e04a      	b.n	800ce80 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cdea:	4b31      	ldr	r3, [pc, #196]	; (800ceb0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800cdec:	685b      	ldr	r3, [r3, #4]
 800cdee:	099b      	lsrs	r3, r3, #6
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	f04f 0300 	mov.w	r3, #0
 800cdf6:	f240 10ff 	movw	r0, #511	; 0x1ff
 800cdfa:	f04f 0100 	mov.w	r1, #0
 800cdfe:	ea02 0400 	and.w	r4, r2, r0
 800ce02:	ea03 0501 	and.w	r5, r3, r1
 800ce06:	4620      	mov	r0, r4
 800ce08:	4629      	mov	r1, r5
 800ce0a:	f04f 0200 	mov.w	r2, #0
 800ce0e:	f04f 0300 	mov.w	r3, #0
 800ce12:	014b      	lsls	r3, r1, #5
 800ce14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800ce18:	0142      	lsls	r2, r0, #5
 800ce1a:	4610      	mov	r0, r2
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	1b00      	subs	r0, r0, r4
 800ce20:	eb61 0105 	sbc.w	r1, r1, r5
 800ce24:	f04f 0200 	mov.w	r2, #0
 800ce28:	f04f 0300 	mov.w	r3, #0
 800ce2c:	018b      	lsls	r3, r1, #6
 800ce2e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ce32:	0182      	lsls	r2, r0, #6
 800ce34:	1a12      	subs	r2, r2, r0
 800ce36:	eb63 0301 	sbc.w	r3, r3, r1
 800ce3a:	f04f 0000 	mov.w	r0, #0
 800ce3e:	f04f 0100 	mov.w	r1, #0
 800ce42:	00d9      	lsls	r1, r3, #3
 800ce44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ce48:	00d0      	lsls	r0, r2, #3
 800ce4a:	4602      	mov	r2, r0
 800ce4c:	460b      	mov	r3, r1
 800ce4e:	1912      	adds	r2, r2, r4
 800ce50:	eb45 0303 	adc.w	r3, r5, r3
 800ce54:	f04f 0000 	mov.w	r0, #0
 800ce58:	f04f 0100 	mov.w	r1, #0
 800ce5c:	0299      	lsls	r1, r3, #10
 800ce5e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800ce62:	0290      	lsls	r0, r2, #10
 800ce64:	4602      	mov	r2, r0
 800ce66:	460b      	mov	r3, r1
 800ce68:	4610      	mov	r0, r2
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	461a      	mov	r2, r3
 800ce70:	f04f 0300 	mov.w	r3, #0
 800ce74:	f7f3 ff78 	bl	8000d68 <__aeabi_uldivmod>
 800ce78:	4602      	mov	r2, r0
 800ce7a:	460b      	mov	r3, r1
 800ce7c:	4613      	mov	r3, r2
 800ce7e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ce80:	4b0b      	ldr	r3, [pc, #44]	; (800ceb0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ce82:	685b      	ldr	r3, [r3, #4]
 800ce84:	0c1b      	lsrs	r3, r3, #16
 800ce86:	f003 0303 	and.w	r3, r3, #3
 800ce8a:	3301      	adds	r3, #1
 800ce8c:	005b      	lsls	r3, r3, #1
 800ce8e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800ce90:	68fa      	ldr	r2, [r7, #12]
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce98:	60bb      	str	r3, [r7, #8]
      break;
 800ce9a:	e002      	b.n	800cea2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ce9c:	4b05      	ldr	r3, [pc, #20]	; (800ceb4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800ce9e:	60bb      	str	r3, [r7, #8]
      break;
 800cea0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cea2:	68bb      	ldr	r3, [r7, #8]
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3710      	adds	r7, #16
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ceae:	bf00      	nop
 800ceb0:	40023800 	.word	0x40023800
 800ceb4:	00f42400 	.word	0x00f42400

0800ceb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ceb8:	b480      	push	{r7}
 800ceba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cebc:	4b03      	ldr	r3, [pc, #12]	; (800cecc <HAL_RCC_GetHCLKFreq+0x14>)
 800cebe:	681b      	ldr	r3, [r3, #0]
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	46bd      	mov	sp, r7
 800cec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec8:	4770      	bx	lr
 800ceca:	bf00      	nop
 800cecc:	20000088 	.word	0x20000088

0800ced0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ced4:	f7ff fff0 	bl	800ceb8 <HAL_RCC_GetHCLKFreq>
 800ced8:	4602      	mov	r2, r0
 800ceda:	4b05      	ldr	r3, [pc, #20]	; (800cef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800cedc:	689b      	ldr	r3, [r3, #8]
 800cede:	0a9b      	lsrs	r3, r3, #10
 800cee0:	f003 0307 	and.w	r3, r3, #7
 800cee4:	4903      	ldr	r1, [pc, #12]	; (800cef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cee6:	5ccb      	ldrb	r3, [r1, r3]
 800cee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	bd80      	pop	{r7, pc}
 800cef0:	40023800 	.word	0x40023800
 800cef4:	0801c5e4 	.word	0x0801c5e4

0800cef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800cefc:	f7ff ffdc 	bl	800ceb8 <HAL_RCC_GetHCLKFreq>
 800cf00:	4602      	mov	r2, r0
 800cf02:	4b05      	ldr	r3, [pc, #20]	; (800cf18 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cf04:	689b      	ldr	r3, [r3, #8]
 800cf06:	0b5b      	lsrs	r3, r3, #13
 800cf08:	f003 0307 	and.w	r3, r3, #7
 800cf0c:	4903      	ldr	r1, [pc, #12]	; (800cf1c <HAL_RCC_GetPCLK2Freq+0x24>)
 800cf0e:	5ccb      	ldrb	r3, [r1, r3]
 800cf10:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	bd80      	pop	{r7, pc}
 800cf18:	40023800 	.word	0x40023800
 800cf1c:	0801c5e4 	.word	0x0801c5e4

0800cf20 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cf20:	b480      	push	{r7}
 800cf22:	b083      	sub	sp, #12
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	220f      	movs	r2, #15
 800cf2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800cf30:	4b12      	ldr	r3, [pc, #72]	; (800cf7c <HAL_RCC_GetClockConfig+0x5c>)
 800cf32:	689b      	ldr	r3, [r3, #8]
 800cf34:	f003 0203 	and.w	r2, r3, #3
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800cf3c:	4b0f      	ldr	r3, [pc, #60]	; (800cf7c <HAL_RCC_GetClockConfig+0x5c>)
 800cf3e:	689b      	ldr	r3, [r3, #8]
 800cf40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800cf48:	4b0c      	ldr	r3, [pc, #48]	; (800cf7c <HAL_RCC_GetClockConfig+0x5c>)
 800cf4a:	689b      	ldr	r3, [r3, #8]
 800cf4c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800cf54:	4b09      	ldr	r3, [pc, #36]	; (800cf7c <HAL_RCC_GetClockConfig+0x5c>)
 800cf56:	689b      	ldr	r3, [r3, #8]
 800cf58:	08db      	lsrs	r3, r3, #3
 800cf5a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cf62:	4b07      	ldr	r3, [pc, #28]	; (800cf80 <HAL_RCC_GetClockConfig+0x60>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f003 020f 	and.w	r2, r3, #15
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	601a      	str	r2, [r3, #0]
}
 800cf6e:	bf00      	nop
 800cf70:	370c      	adds	r7, #12
 800cf72:	46bd      	mov	sp, r7
 800cf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf78:	4770      	bx	lr
 800cf7a:	bf00      	nop
 800cf7c:	40023800 	.word	0x40023800
 800cf80:	40023c00 	.word	0x40023c00

0800cf84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b086      	sub	sp, #24
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800cf90:	2300      	movs	r3, #0
 800cf92:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f003 0301 	and.w	r3, r3, #1
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d10b      	bne.n	800cfb8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d105      	bne.n	800cfb8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d075      	beq.n	800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800cfb8:	4bad      	ldr	r3, [pc, #692]	; (800d270 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800cfba:	2200      	movs	r2, #0
 800cfbc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800cfbe:	f7fd faf5 	bl	800a5ac <HAL_GetTick>
 800cfc2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800cfc4:	e008      	b.n	800cfd8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800cfc6:	f7fd faf1 	bl	800a5ac <HAL_GetTick>
 800cfca:	4602      	mov	r2, r0
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	1ad3      	subs	r3, r2, r3
 800cfd0:	2b02      	cmp	r3, #2
 800cfd2:	d901      	bls.n	800cfd8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cfd4:	2303      	movs	r3, #3
 800cfd6:	e18b      	b.n	800d2f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800cfd8:	4ba6      	ldr	r3, [pc, #664]	; (800d274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d1f0      	bne.n	800cfc6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	f003 0301 	and.w	r3, r3, #1
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d009      	beq.n	800d004 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	685b      	ldr	r3, [r3, #4]
 800cff4:	019a      	lsls	r2, r3, #6
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	689b      	ldr	r3, [r3, #8]
 800cffa:	071b      	lsls	r3, r3, #28
 800cffc:	499d      	ldr	r1, [pc, #628]	; (800d274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cffe:	4313      	orrs	r3, r2
 800d000:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	f003 0302 	and.w	r3, r3, #2
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d01f      	beq.n	800d050 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d010:	4b98      	ldr	r3, [pc, #608]	; (800d274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d016:	0f1b      	lsrs	r3, r3, #28
 800d018:	f003 0307 	and.w	r3, r3, #7
 800d01c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	685b      	ldr	r3, [r3, #4]
 800d022:	019a      	lsls	r2, r3, #6
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	68db      	ldr	r3, [r3, #12]
 800d028:	061b      	lsls	r3, r3, #24
 800d02a:	431a      	orrs	r2, r3
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	071b      	lsls	r3, r3, #28
 800d030:	4990      	ldr	r1, [pc, #576]	; (800d274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d032:	4313      	orrs	r3, r2
 800d034:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800d038:	4b8e      	ldr	r3, [pc, #568]	; (800d274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d03a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d03e:	f023 021f 	bic.w	r2, r3, #31
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	69db      	ldr	r3, [r3, #28]
 800d046:	3b01      	subs	r3, #1
 800d048:	498a      	ldr	r1, [pc, #552]	; (800d274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d04a:	4313      	orrs	r3, r2
 800d04c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d00d      	beq.n	800d078 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	685b      	ldr	r3, [r3, #4]
 800d060:	019a      	lsls	r2, r3, #6
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	68db      	ldr	r3, [r3, #12]
 800d066:	061b      	lsls	r3, r3, #24
 800d068:	431a      	orrs	r2, r3
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	689b      	ldr	r3, [r3, #8]
 800d06e:	071b      	lsls	r3, r3, #28
 800d070:	4980      	ldr	r1, [pc, #512]	; (800d274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d072:	4313      	orrs	r3, r2
 800d074:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800d078:	4b7d      	ldr	r3, [pc, #500]	; (800d270 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800d07a:	2201      	movs	r2, #1
 800d07c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800d07e:	f7fd fa95 	bl	800a5ac <HAL_GetTick>
 800d082:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d084:	e008      	b.n	800d098 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800d086:	f7fd fa91 	bl	800a5ac <HAL_GetTick>
 800d08a:	4602      	mov	r2, r0
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	1ad3      	subs	r3, r2, r3
 800d090:	2b02      	cmp	r3, #2
 800d092:	d901      	bls.n	800d098 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d094:	2303      	movs	r3, #3
 800d096:	e12b      	b.n	800d2f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d098:	4b76      	ldr	r3, [pc, #472]	; (800d274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d0f0      	beq.n	800d086 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	f003 0304 	and.w	r3, r3, #4
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d105      	bne.n	800d0bc <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d079      	beq.n	800d1b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800d0bc:	4b6e      	ldr	r3, [pc, #440]	; (800d278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d0be:	2200      	movs	r2, #0
 800d0c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800d0c2:	f7fd fa73 	bl	800a5ac <HAL_GetTick>
 800d0c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d0c8:	e008      	b.n	800d0dc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800d0ca:	f7fd fa6f 	bl	800a5ac <HAL_GetTick>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	1ad3      	subs	r3, r2, r3
 800d0d4:	2b02      	cmp	r3, #2
 800d0d6:	d901      	bls.n	800d0dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d0d8:	2303      	movs	r3, #3
 800d0da:	e109      	b.n	800d2f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d0dc:	4b65      	ldr	r3, [pc, #404]	; (800d274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d0e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d0e8:	d0ef      	beq.n	800d0ca <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	f003 0304 	and.w	r3, r3, #4
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d020      	beq.n	800d138 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d0f6:	4b5f      	ldr	r3, [pc, #380]	; (800d274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d0f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0fc:	0f1b      	lsrs	r3, r3, #28
 800d0fe:	f003 0307 	and.w	r3, r3, #7
 800d102:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	691b      	ldr	r3, [r3, #16]
 800d108:	019a      	lsls	r2, r3, #6
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	695b      	ldr	r3, [r3, #20]
 800d10e:	061b      	lsls	r3, r3, #24
 800d110:	431a      	orrs	r2, r3
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	071b      	lsls	r3, r3, #28
 800d116:	4957      	ldr	r1, [pc, #348]	; (800d274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d118:	4313      	orrs	r3, r2
 800d11a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d11e:	4b55      	ldr	r3, [pc, #340]	; (800d274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d124:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	6a1b      	ldr	r3, [r3, #32]
 800d12c:	3b01      	subs	r3, #1
 800d12e:	021b      	lsls	r3, r3, #8
 800d130:	4950      	ldr	r1, [pc, #320]	; (800d274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d132:	4313      	orrs	r3, r2
 800d134:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f003 0308 	and.w	r3, r3, #8
 800d140:	2b00      	cmp	r3, #0
 800d142:	d01e      	beq.n	800d182 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d144:	4b4b      	ldr	r3, [pc, #300]	; (800d274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d14a:	0e1b      	lsrs	r3, r3, #24
 800d14c:	f003 030f 	and.w	r3, r3, #15
 800d150:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	691b      	ldr	r3, [r3, #16]
 800d156:	019a      	lsls	r2, r3, #6
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	061b      	lsls	r3, r3, #24
 800d15c:	431a      	orrs	r2, r3
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	699b      	ldr	r3, [r3, #24]
 800d162:	071b      	lsls	r3, r3, #28
 800d164:	4943      	ldr	r1, [pc, #268]	; (800d274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d166:	4313      	orrs	r3, r2
 800d168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800d16c:	4b41      	ldr	r3, [pc, #260]	; (800d274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d16e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d172:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d17a:	493e      	ldr	r1, [pc, #248]	; (800d274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d17c:	4313      	orrs	r3, r2
 800d17e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800d182:	4b3d      	ldr	r3, [pc, #244]	; (800d278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d184:	2201      	movs	r2, #1
 800d186:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800d188:	f7fd fa10 	bl	800a5ac <HAL_GetTick>
 800d18c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d18e:	e008      	b.n	800d1a2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800d190:	f7fd fa0c 	bl	800a5ac <HAL_GetTick>
 800d194:	4602      	mov	r2, r0
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	1ad3      	subs	r3, r2, r3
 800d19a:	2b02      	cmp	r3, #2
 800d19c:	d901      	bls.n	800d1a2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d19e:	2303      	movs	r3, #3
 800d1a0:	e0a6      	b.n	800d2f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d1a2:	4b34      	ldr	r3, [pc, #208]	; (800d274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d1aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d1ae:	d1ef      	bne.n	800d190 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	f003 0320 	and.w	r3, r3, #32
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	f000 808d 	beq.w	800d2d8 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800d1be:	2300      	movs	r3, #0
 800d1c0:	60fb      	str	r3, [r7, #12]
 800d1c2:	4b2c      	ldr	r3, [pc, #176]	; (800d274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1c6:	4a2b      	ldr	r2, [pc, #172]	; (800d274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d1c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d1cc:	6413      	str	r3, [r2, #64]	; 0x40
 800d1ce:	4b29      	ldr	r3, [pc, #164]	; (800d274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d1d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d1d6:	60fb      	str	r3, [r7, #12]
 800d1d8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800d1da:	4b28      	ldr	r3, [pc, #160]	; (800d27c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	4a27      	ldr	r2, [pc, #156]	; (800d27c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800d1e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d1e4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d1e6:	f7fd f9e1 	bl	800a5ac <HAL_GetTick>
 800d1ea:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800d1ec:	e008      	b.n	800d200 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800d1ee:	f7fd f9dd 	bl	800a5ac <HAL_GetTick>
 800d1f2:	4602      	mov	r2, r0
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	1ad3      	subs	r3, r2, r3
 800d1f8:	2b02      	cmp	r3, #2
 800d1fa:	d901      	bls.n	800d200 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800d1fc:	2303      	movs	r3, #3
 800d1fe:	e077      	b.n	800d2f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800d200:	4b1e      	ldr	r3, [pc, #120]	; (800d27c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d0f0      	beq.n	800d1ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800d20c:	4b19      	ldr	r3, [pc, #100]	; (800d274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d20e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d210:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d214:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d039      	beq.n	800d290 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d220:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d224:	693a      	ldr	r2, [r7, #16]
 800d226:	429a      	cmp	r2, r3
 800d228:	d032      	beq.n	800d290 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d22a:	4b12      	ldr	r3, [pc, #72]	; (800d274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d22c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d22e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d232:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800d234:	4b12      	ldr	r3, [pc, #72]	; (800d280 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800d236:	2201      	movs	r2, #1
 800d238:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d23a:	4b11      	ldr	r3, [pc, #68]	; (800d280 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800d23c:	2200      	movs	r2, #0
 800d23e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800d240:	4a0c      	ldr	r2, [pc, #48]	; (800d274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800d246:	4b0b      	ldr	r3, [pc, #44]	; (800d274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d24a:	f003 0301 	and.w	r3, r3, #1
 800d24e:	2b01      	cmp	r3, #1
 800d250:	d11e      	bne.n	800d290 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800d252:	f7fd f9ab 	bl	800a5ac <HAL_GetTick>
 800d256:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d258:	e014      	b.n	800d284 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d25a:	f7fd f9a7 	bl	800a5ac <HAL_GetTick>
 800d25e:	4602      	mov	r2, r0
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	1ad3      	subs	r3, r2, r3
 800d264:	f241 3288 	movw	r2, #5000	; 0x1388
 800d268:	4293      	cmp	r3, r2
 800d26a:	d90b      	bls.n	800d284 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800d26c:	2303      	movs	r3, #3
 800d26e:	e03f      	b.n	800d2f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800d270:	42470068 	.word	0x42470068
 800d274:	40023800 	.word	0x40023800
 800d278:	42470070 	.word	0x42470070
 800d27c:	40007000 	.word	0x40007000
 800d280:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d284:	4b1c      	ldr	r3, [pc, #112]	; (800d2f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d288:	f003 0302 	and.w	r3, r3, #2
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d0e4      	beq.n	800d25a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d294:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d298:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d29c:	d10d      	bne.n	800d2ba <HAL_RCCEx_PeriphCLKConfig+0x336>
 800d29e:	4b16      	ldr	r3, [pc, #88]	; (800d2f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d2a0:	689b      	ldr	r3, [r3, #8]
 800d2a2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2aa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d2ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d2b2:	4911      	ldr	r1, [pc, #68]	; (800d2f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d2b4:	4313      	orrs	r3, r2
 800d2b6:	608b      	str	r3, [r1, #8]
 800d2b8:	e005      	b.n	800d2c6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800d2ba:	4b0f      	ldr	r3, [pc, #60]	; (800d2f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d2bc:	689b      	ldr	r3, [r3, #8]
 800d2be:	4a0e      	ldr	r2, [pc, #56]	; (800d2f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d2c0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800d2c4:	6093      	str	r3, [r2, #8]
 800d2c6:	4b0c      	ldr	r3, [pc, #48]	; (800d2f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d2c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d2d2:	4909      	ldr	r1, [pc, #36]	; (800d2f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d2d4:	4313      	orrs	r3, r2
 800d2d6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	f003 0310 	and.w	r3, r3, #16
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d004      	beq.n	800d2ee <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800d2ea:	4b04      	ldr	r3, [pc, #16]	; (800d2fc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800d2ec:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800d2ee:	2300      	movs	r3, #0
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3718      	adds	r7, #24
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}
 800d2f8:	40023800 	.word	0x40023800
 800d2fc:	424711e0 	.word	0x424711e0

0800d300 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b082      	sub	sp, #8
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d101      	bne.n	800d312 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800d30e:	2301      	movs	r3, #1
 800d310:	e083      	b.n	800d41a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	7f5b      	ldrb	r3, [r3, #29]
 800d316:	b2db      	uxtb	r3, r3
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d105      	bne.n	800d328 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2200      	movs	r2, #0
 800d320:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d322:	6878      	ldr	r0, [r7, #4]
 800d324:	f7f5 fb76 	bl	8002a14 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2202      	movs	r2, #2
 800d32c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	22ca      	movs	r2, #202	; 0xca
 800d334:	625a      	str	r2, [r3, #36]	; 0x24
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	2253      	movs	r2, #83	; 0x53
 800d33c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f000 fc30 	bl	800dba4 <RTC_EnterInitMode>
 800d344:	4603      	mov	r3, r0
 800d346:	2b00      	cmp	r3, #0
 800d348:	d008      	beq.n	800d35c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	22ff      	movs	r2, #255	; 0xff
 800d350:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2204      	movs	r2, #4
 800d356:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800d358:	2301      	movs	r3, #1
 800d35a:	e05e      	b.n	800d41a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	689b      	ldr	r3, [r3, #8]
 800d362:	687a      	ldr	r2, [r7, #4]
 800d364:	6812      	ldr	r2, [r2, #0]
 800d366:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d36a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d36e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	6899      	ldr	r1, [r3, #8]
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	685a      	ldr	r2, [r3, #4]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	691b      	ldr	r3, [r3, #16]
 800d37e:	431a      	orrs	r2, r3
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	695b      	ldr	r3, [r3, #20]
 800d384:	431a      	orrs	r2, r3
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	430a      	orrs	r2, r1
 800d38c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	687a      	ldr	r2, [r7, #4]
 800d394:	68d2      	ldr	r2, [r2, #12]
 800d396:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	6919      	ldr	r1, [r3, #16]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	689b      	ldr	r3, [r3, #8]
 800d3a2:	041a      	lsls	r2, r3, #16
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	430a      	orrs	r2, r1
 800d3aa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	68da      	ldr	r2, [r3, #12]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d3ba:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	689b      	ldr	r3, [r3, #8]
 800d3c2:	f003 0320 	and.w	r3, r3, #32
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d10e      	bne.n	800d3e8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f000 fbc2 	bl	800db54 <HAL_RTC_WaitForSynchro>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d008      	beq.n	800d3e8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	22ff      	movs	r2, #255	; 0xff
 800d3dc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2204      	movs	r2, #4
 800d3e2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	e018      	b.n	800d41a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d3f6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	699a      	ldr	r2, [r3, #24]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	430a      	orrs	r2, r1
 800d408:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	22ff      	movs	r2, #255	; 0xff
 800d410:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2201      	movs	r2, #1
 800d416:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800d418:	2300      	movs	r3, #0
  }
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3708      	adds	r7, #8
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}

0800d422 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d422:	b590      	push	{r4, r7, lr}
 800d424:	b087      	sub	sp, #28
 800d426:	af00      	add	r7, sp, #0
 800d428:	60f8      	str	r0, [r7, #12]
 800d42a:	60b9      	str	r1, [r7, #8]
 800d42c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800d42e:	2300      	movs	r3, #0
 800d430:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	7f1b      	ldrb	r3, [r3, #28]
 800d436:	2b01      	cmp	r3, #1
 800d438:	d101      	bne.n	800d43e <HAL_RTC_SetTime+0x1c>
 800d43a:	2302      	movs	r3, #2
 800d43c:	e0aa      	b.n	800d594 <HAL_RTC_SetTime+0x172>
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	2201      	movs	r2, #1
 800d442:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	2202      	movs	r2, #2
 800d448:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d126      	bne.n	800d49e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	689b      	ldr	r3, [r3, #8]
 800d456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d102      	bne.n	800d464 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	2200      	movs	r2, #0
 800d462:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	781b      	ldrb	r3, [r3, #0]
 800d468:	4618      	mov	r0, r3
 800d46a:	f000 fbc7 	bl	800dbfc <RTC_ByteToBcd2>
 800d46e:	4603      	mov	r3, r0
 800d470:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	785b      	ldrb	r3, [r3, #1]
 800d476:	4618      	mov	r0, r3
 800d478:	f000 fbc0 	bl	800dbfc <RTC_ByteToBcd2>
 800d47c:	4603      	mov	r3, r0
 800d47e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d480:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	789b      	ldrb	r3, [r3, #2]
 800d486:	4618      	mov	r0, r3
 800d488:	f000 fbb8 	bl	800dbfc <RTC_ByteToBcd2>
 800d48c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d48e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	78db      	ldrb	r3, [r3, #3]
 800d496:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d498:	4313      	orrs	r3, r2
 800d49a:	617b      	str	r3, [r7, #20]
 800d49c:	e018      	b.n	800d4d0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	689b      	ldr	r3, [r3, #8]
 800d4a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d102      	bne.n	800d4b2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	781b      	ldrb	r3, [r3, #0]
 800d4b6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	785b      	ldrb	r3, [r3, #1]
 800d4bc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d4be:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800d4c0:	68ba      	ldr	r2, [r7, #8]
 800d4c2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d4c4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800d4c6:	68bb      	ldr	r3, [r7, #8]
 800d4c8:	78db      	ldrb	r3, [r3, #3]
 800d4ca:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	22ca      	movs	r2, #202	; 0xca
 800d4d6:	625a      	str	r2, [r3, #36]	; 0x24
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	2253      	movs	r2, #83	; 0x53
 800d4de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d4e0:	68f8      	ldr	r0, [r7, #12]
 800d4e2:	f000 fb5f 	bl	800dba4 <RTC_EnterInitMode>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d00b      	beq.n	800d504 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	22ff      	movs	r2, #255	; 0xff
 800d4f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	2204      	movs	r2, #4
 800d4f8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800d500:	2301      	movs	r3, #1
 800d502:	e047      	b.n	800d594 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	681a      	ldr	r2, [r3, #0]
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800d50e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d512:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	689a      	ldr	r2, [r3, #8]
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d522:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	6899      	ldr	r1, [r3, #8]
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	68da      	ldr	r2, [r3, #12]
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	691b      	ldr	r3, [r3, #16]
 800d532:	431a      	orrs	r2, r3
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	430a      	orrs	r2, r1
 800d53a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	68da      	ldr	r2, [r3, #12]
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d54a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	689b      	ldr	r3, [r3, #8]
 800d552:	f003 0320 	and.w	r3, r3, #32
 800d556:	2b00      	cmp	r3, #0
 800d558:	d111      	bne.n	800d57e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d55a:	68f8      	ldr	r0, [r7, #12]
 800d55c:	f000 fafa 	bl	800db54 <HAL_RTC_WaitForSynchro>
 800d560:	4603      	mov	r3, r0
 800d562:	2b00      	cmp	r3, #0
 800d564:	d00b      	beq.n	800d57e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	22ff      	movs	r2, #255	; 0xff
 800d56c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	2204      	movs	r2, #4
 800d572:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	2200      	movs	r2, #0
 800d578:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800d57a:	2301      	movs	r3, #1
 800d57c:	e00a      	b.n	800d594 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	22ff      	movs	r2, #255	; 0xff
 800d584:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	2201      	movs	r2, #1
 800d58a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	2200      	movs	r2, #0
 800d590:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800d592:	2300      	movs	r3, #0
  }
}
 800d594:	4618      	mov	r0, r3
 800d596:	371c      	adds	r7, #28
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd90      	pop	{r4, r7, pc}

0800d59c <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b086      	sub	sp, #24
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	60f8      	str	r0, [r7, #12]
 800d5a4:	60b9      	str	r1, [r7, #8]
 800d5a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	691b      	ldr	r3, [r3, #16]
 800d5bc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800d5ce:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d5d2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	0c1b      	lsrs	r3, r3, #16
 800d5d8:	b2db      	uxtb	r3, r3
 800d5da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d5de:	b2da      	uxtb	r2, r3
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	0a1b      	lsrs	r3, r3, #8
 800d5e8:	b2db      	uxtb	r3, r3
 800d5ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5ee:	b2da      	uxtb	r2, r3
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	b2db      	uxtb	r3, r3
 800d5f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5fc:	b2da      	uxtb	r2, r3
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	0c1b      	lsrs	r3, r3, #16
 800d606:	b2db      	uxtb	r3, r3
 800d608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d60c:	b2da      	uxtb	r2, r3
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d11a      	bne.n	800d64e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	781b      	ldrb	r3, [r3, #0]
 800d61c:	4618      	mov	r0, r3
 800d61e:	f000 fb0b 	bl	800dc38 <RTC_Bcd2ToByte>
 800d622:	4603      	mov	r3, r0
 800d624:	461a      	mov	r2, r3
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	785b      	ldrb	r3, [r3, #1]
 800d62e:	4618      	mov	r0, r3
 800d630:	f000 fb02 	bl	800dc38 <RTC_Bcd2ToByte>
 800d634:	4603      	mov	r3, r0
 800d636:	461a      	mov	r2, r3
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	789b      	ldrb	r3, [r3, #2]
 800d640:	4618      	mov	r0, r3
 800d642:	f000 faf9 	bl	800dc38 <RTC_Bcd2ToByte>
 800d646:	4603      	mov	r3, r0
 800d648:	461a      	mov	r2, r3
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d64e:	2300      	movs	r3, #0
}
 800d650:	4618      	mov	r0, r3
 800d652:	3718      	adds	r7, #24
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}

0800d658 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d658:	b590      	push	{r4, r7, lr}
 800d65a:	b087      	sub	sp, #28
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	60f8      	str	r0, [r7, #12]
 800d660:	60b9      	str	r1, [r7, #8]
 800d662:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800d664:	2300      	movs	r3, #0
 800d666:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	7f1b      	ldrb	r3, [r3, #28]
 800d66c:	2b01      	cmp	r3, #1
 800d66e:	d101      	bne.n	800d674 <HAL_RTC_SetDate+0x1c>
 800d670:	2302      	movs	r3, #2
 800d672:	e094      	b.n	800d79e <HAL_RTC_SetDate+0x146>
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	2201      	movs	r2, #1
 800d678:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	2202      	movs	r2, #2
 800d67e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d10e      	bne.n	800d6a4 <HAL_RTC_SetDate+0x4c>
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	785b      	ldrb	r3, [r3, #1]
 800d68a:	f003 0310 	and.w	r3, r3, #16
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d008      	beq.n	800d6a4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	785b      	ldrb	r3, [r3, #1]
 800d696:	f023 0310 	bic.w	r3, r3, #16
 800d69a:	b2db      	uxtb	r3, r3
 800d69c:	330a      	adds	r3, #10
 800d69e:	b2da      	uxtb	r2, r3
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d11c      	bne.n	800d6e4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	78db      	ldrb	r3, [r3, #3]
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f000 faa4 	bl	800dbfc <RTC_ByteToBcd2>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	785b      	ldrb	r3, [r3, #1]
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f000 fa9d 	bl	800dbfc <RTC_ByteToBcd2>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d6c6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	789b      	ldrb	r3, [r3, #2]
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f000 fa95 	bl	800dbfc <RTC_ByteToBcd2>
 800d6d2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800d6d4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	781b      	ldrb	r3, [r3, #0]
 800d6dc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d6de:	4313      	orrs	r3, r2
 800d6e0:	617b      	str	r3, [r7, #20]
 800d6e2:	e00e      	b.n	800d702 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d6e4:	68bb      	ldr	r3, [r7, #8]
 800d6e6:	78db      	ldrb	r3, [r3, #3]
 800d6e8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	785b      	ldrb	r3, [r3, #1]
 800d6ee:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d6f0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800d6f2:	68ba      	ldr	r2, [r7, #8]
 800d6f4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800d6f6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	781b      	ldrb	r3, [r3, #0]
 800d6fc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d6fe:	4313      	orrs	r3, r2
 800d700:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	22ca      	movs	r2, #202	; 0xca
 800d708:	625a      	str	r2, [r3, #36]	; 0x24
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	2253      	movs	r2, #83	; 0x53
 800d710:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d712:	68f8      	ldr	r0, [r7, #12]
 800d714:	f000 fa46 	bl	800dba4 <RTC_EnterInitMode>
 800d718:	4603      	mov	r3, r0
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d00b      	beq.n	800d736 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	22ff      	movs	r2, #255	; 0xff
 800d724:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	2204      	movs	r2, #4
 800d72a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	2200      	movs	r2, #0
 800d730:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800d732:	2301      	movs	r3, #1
 800d734:	e033      	b.n	800d79e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	681a      	ldr	r2, [r3, #0]
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d740:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d744:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	68da      	ldr	r2, [r3, #12]
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d754:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	689b      	ldr	r3, [r3, #8]
 800d75c:	f003 0320 	and.w	r3, r3, #32
 800d760:	2b00      	cmp	r3, #0
 800d762:	d111      	bne.n	800d788 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d764:	68f8      	ldr	r0, [r7, #12]
 800d766:	f000 f9f5 	bl	800db54 <HAL_RTC_WaitForSynchro>
 800d76a:	4603      	mov	r3, r0
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d00b      	beq.n	800d788 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	22ff      	movs	r2, #255	; 0xff
 800d776:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2204      	movs	r2, #4
 800d77c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	2200      	movs	r2, #0
 800d782:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800d784:	2301      	movs	r3, #1
 800d786:	e00a      	b.n	800d79e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	22ff      	movs	r2, #255	; 0xff
 800d78e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	2201      	movs	r2, #1
 800d794:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	2200      	movs	r2, #0
 800d79a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800d79c:	2300      	movs	r3, #0
  }
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	371c      	adds	r7, #28
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd90      	pop	{r4, r7, pc}

0800d7a6 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d7a6:	b580      	push	{r7, lr}
 800d7a8:	b086      	sub	sp, #24
 800d7aa:	af00      	add	r7, sp, #0
 800d7ac:	60f8      	str	r0, [r7, #12]
 800d7ae:	60b9      	str	r1, [r7, #8]
 800d7b0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	685b      	ldr	r3, [r3, #4]
 800d7bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d7c0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d7c4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	0c1b      	lsrs	r3, r3, #16
 800d7ca:	b2da      	uxtb	r2, r3
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	0a1b      	lsrs	r3, r3, #8
 800d7d4:	b2db      	uxtb	r3, r3
 800d7d6:	f003 031f 	and.w	r3, r3, #31
 800d7da:	b2da      	uxtb	r2, r3
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	b2db      	uxtb	r3, r3
 800d7e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d7e8:	b2da      	uxtb	r2, r3
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	0b5b      	lsrs	r3, r3, #13
 800d7f2:	b2db      	uxtb	r3, r3
 800d7f4:	f003 0307 	and.w	r3, r3, #7
 800d7f8:	b2da      	uxtb	r2, r3
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d11a      	bne.n	800d83a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	78db      	ldrb	r3, [r3, #3]
 800d808:	4618      	mov	r0, r3
 800d80a:	f000 fa15 	bl	800dc38 <RTC_Bcd2ToByte>
 800d80e:	4603      	mov	r3, r0
 800d810:	461a      	mov	r2, r3
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	785b      	ldrb	r3, [r3, #1]
 800d81a:	4618      	mov	r0, r3
 800d81c:	f000 fa0c 	bl	800dc38 <RTC_Bcd2ToByte>
 800d820:	4603      	mov	r3, r0
 800d822:	461a      	mov	r2, r3
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	789b      	ldrb	r3, [r3, #2]
 800d82c:	4618      	mov	r0, r3
 800d82e:	f000 fa03 	bl	800dc38 <RTC_Bcd2ToByte>
 800d832:	4603      	mov	r3, r0
 800d834:	461a      	mov	r2, r3
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800d83a:	2300      	movs	r3, #0
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3718      	adds	r7, #24
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}

0800d844 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800d844:	b590      	push	{r4, r7, lr}
 800d846:	b089      	sub	sp, #36	; 0x24
 800d848:	af00      	add	r7, sp, #0
 800d84a:	60f8      	str	r0, [r7, #12]
 800d84c:	60b9      	str	r1, [r7, #8]
 800d84e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800d850:	2300      	movs	r3, #0
 800d852:	61fb      	str	r3, [r7, #28]
 800d854:	2300      	movs	r3, #0
 800d856:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800d858:	4b93      	ldr	r3, [pc, #588]	; (800daa8 <HAL_RTC_SetAlarm_IT+0x264>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	4a93      	ldr	r2, [pc, #588]	; (800daac <HAL_RTC_SetAlarm_IT+0x268>)
 800d85e:	fba2 2303 	umull	r2, r3, r2, r3
 800d862:	0adb      	lsrs	r3, r3, #11
 800d864:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d868:	fb02 f303 	mul.w	r3, r2, r3
 800d86c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	7f1b      	ldrb	r3, [r3, #28]
 800d872:	2b01      	cmp	r3, #1
 800d874:	d101      	bne.n	800d87a <HAL_RTC_SetAlarm_IT+0x36>
 800d876:	2302      	movs	r3, #2
 800d878:	e111      	b.n	800da9e <HAL_RTC_SetAlarm_IT+0x25a>
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	2201      	movs	r2, #1
 800d87e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	2202      	movs	r2, #2
 800d884:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d137      	bne.n	800d8fc <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	689b      	ldr	r3, [r3, #8]
 800d892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d896:	2b00      	cmp	r3, #0
 800d898:	d102      	bne.n	800d8a0 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	2200      	movs	r2, #0
 800d89e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	781b      	ldrb	r3, [r3, #0]
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f000 f9a9 	bl	800dbfc <RTC_ByteToBcd2>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	785b      	ldrb	r3, [r3, #1]
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f000 f9a2 	bl	800dbfc <RTC_ByteToBcd2>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800d8bc:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	789b      	ldrb	r3, [r3, #2]
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f000 f99a 	bl	800dbfc <RTC_ByteToBcd2>
 800d8c8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800d8ca:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	78db      	ldrb	r3, [r3, #3]
 800d8d2:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800d8d4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f000 f98c 	bl	800dbfc <RTC_ByteToBcd2>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800d8e8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800d8f0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800d8f6:	4313      	orrs	r3, r2
 800d8f8:	61fb      	str	r3, [r7, #28]
 800d8fa:	e023      	b.n	800d944 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	689b      	ldr	r3, [r3, #8]
 800d902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d906:	2b00      	cmp	r3, #0
 800d908:	d102      	bne.n	800d910 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800d90a:	68bb      	ldr	r3, [r7, #8]
 800d90c:	2200      	movs	r2, #0
 800d90e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	781b      	ldrb	r3, [r3, #0]
 800d914:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	785b      	ldrb	r3, [r3, #1]
 800d91a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800d91c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800d91e:	68ba      	ldr	r2, [r7, #8]
 800d920:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800d922:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	78db      	ldrb	r3, [r3, #3]
 800d928:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800d92a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d932:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800d934:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800d93a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800d940:	4313      	orrs	r3, r2
 800d942:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	685a      	ldr	r2, [r3, #4]
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	699b      	ldr	r3, [r3, #24]
 800d94c:	4313      	orrs	r3, r2
 800d94e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	22ca      	movs	r2, #202	; 0xca
 800d956:	625a      	str	r2, [r3, #36]	; 0x24
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	2253      	movs	r2, #83	; 0x53
 800d95e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d968:	d141      	bne.n	800d9ee <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	689a      	ldr	r2, [r3, #8]
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d978:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	68db      	ldr	r3, [r3, #12]
 800d980:	b2da      	uxtb	r2, r3
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800d98a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	1e5a      	subs	r2, r3, #1
 800d990:	617a      	str	r2, [r7, #20]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d10b      	bne.n	800d9ae <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	22ff      	movs	r2, #255	; 0xff
 800d99c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2203      	movs	r2, #3
 800d9a2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d9aa:	2303      	movs	r3, #3
 800d9ac:	e077      	b.n	800da9e <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	68db      	ldr	r3, [r3, #12]
 800d9b4:	f003 0301 	and.w	r3, r3, #1
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d0e7      	beq.n	800d98c <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	69fa      	ldr	r2, [r7, #28]
 800d9c2:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	69ba      	ldr	r2, [r7, #24]
 800d9ca:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	689a      	ldr	r2, [r3, #8]
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d9da:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	689a      	ldr	r2, [r3, #8]
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d9ea:	609a      	str	r2, [r3, #8]
 800d9ec:	e040      	b.n	800da70 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	689a      	ldr	r2, [r3, #8]
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d9fc:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	68db      	ldr	r3, [r3, #12]
 800da04:	b2da      	uxtb	r2, r3
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800da0e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	1e5a      	subs	r2, r3, #1
 800da14:	617a      	str	r2, [r7, #20]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d10b      	bne.n	800da32 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	22ff      	movs	r2, #255	; 0xff
 800da20:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	2203      	movs	r2, #3
 800da26:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	2200      	movs	r2, #0
 800da2c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800da2e:	2303      	movs	r3, #3
 800da30:	e035      	b.n	800da9e <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	68db      	ldr	r3, [r3, #12]
 800da38:	f003 0302 	and.w	r3, r3, #2
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d0e7      	beq.n	800da10 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	69fa      	ldr	r2, [r7, #28]
 800da46:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	69ba      	ldr	r2, [r7, #24]
 800da4e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	689a      	ldr	r2, [r3, #8]
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da5e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	689a      	ldr	r2, [r3, #8]
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800da6e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800da70:	4b0f      	ldr	r3, [pc, #60]	; (800dab0 <HAL_RTC_SetAlarm_IT+0x26c>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	4a0e      	ldr	r2, [pc, #56]	; (800dab0 <HAL_RTC_SetAlarm_IT+0x26c>)
 800da76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800da7a:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800da7c:	4b0c      	ldr	r3, [pc, #48]	; (800dab0 <HAL_RTC_SetAlarm_IT+0x26c>)
 800da7e:	689b      	ldr	r3, [r3, #8]
 800da80:	4a0b      	ldr	r2, [pc, #44]	; (800dab0 <HAL_RTC_SetAlarm_IT+0x26c>)
 800da82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800da86:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	22ff      	movs	r2, #255	; 0xff
 800da8e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	2201      	movs	r2, #1
 800da94:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	2200      	movs	r2, #0
 800da9a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800da9c:	2300      	movs	r3, #0
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3724      	adds	r7, #36	; 0x24
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd90      	pop	{r4, r7, pc}
 800daa6:	bf00      	nop
 800daa8:	20000088 	.word	0x20000088
 800daac:	10624dd3 	.word	0x10624dd3
 800dab0:	40013c00 	.word	0x40013c00

0800dab4 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b082      	sub	sp, #8
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	689b      	ldr	r3, [r3, #8]
 800dac2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d012      	beq.n	800daf0 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	68db      	ldr	r3, [r3, #12]
 800dad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d00b      	beq.n	800daf0 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f000 f831 	bl	800db40 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	68db      	ldr	r3, [r3, #12]
 800dae4:	b2da      	uxtb	r2, r3
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800daee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	689b      	ldr	r3, [r3, #8]
 800daf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d012      	beq.n	800db24 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	68db      	ldr	r3, [r3, #12]
 800db04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d00b      	beq.n	800db24 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	f000 f9fb 	bl	800df08 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	68db      	ldr	r3, [r3, #12]
 800db18:	b2da      	uxtb	r2, r3
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	f462 7220 	orn	r2, r2, #640	; 0x280
 800db22:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800db24:	4b05      	ldr	r3, [pc, #20]	; (800db3c <HAL_RTC_AlarmIRQHandler+0x88>)
 800db26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800db2a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2201      	movs	r2, #1
 800db30:	775a      	strb	r2, [r3, #29]
}
 800db32:	bf00      	nop
 800db34:	3708      	adds	r7, #8
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}
 800db3a:	bf00      	nop
 800db3c:	40013c00 	.word	0x40013c00

0800db40 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800db40:	b480      	push	{r7}
 800db42:	b083      	sub	sp, #12
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800db48:	bf00      	nop
 800db4a:	370c      	adds	r7, #12
 800db4c:	46bd      	mov	sp, r7
 800db4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db52:	4770      	bx	lr

0800db54 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b084      	sub	sp, #16
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800db5c:	2300      	movs	r3, #0
 800db5e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	68da      	ldr	r2, [r3, #12]
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800db6e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800db70:	f7fc fd1c 	bl	800a5ac <HAL_GetTick>
 800db74:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800db76:	e009      	b.n	800db8c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800db78:	f7fc fd18 	bl	800a5ac <HAL_GetTick>
 800db7c:	4602      	mov	r2, r0
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	1ad3      	subs	r3, r2, r3
 800db82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800db86:	d901      	bls.n	800db8c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800db88:	2303      	movs	r3, #3
 800db8a:	e007      	b.n	800db9c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	68db      	ldr	r3, [r3, #12]
 800db92:	f003 0320 	and.w	r3, r3, #32
 800db96:	2b00      	cmp	r3, #0
 800db98:	d0ee      	beq.n	800db78 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800db9a:	2300      	movs	r3, #0
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3710      	adds	r7, #16
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b084      	sub	sp, #16
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800dbac:	2300      	movs	r3, #0
 800dbae:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	68db      	ldr	r3, [r3, #12]
 800dbb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d119      	bne.n	800dbf2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	f04f 32ff 	mov.w	r2, #4294967295
 800dbc6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800dbc8:	f7fc fcf0 	bl	800a5ac <HAL_GetTick>
 800dbcc:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800dbce:	e009      	b.n	800dbe4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800dbd0:	f7fc fcec 	bl	800a5ac <HAL_GetTick>
 800dbd4:	4602      	mov	r2, r0
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	1ad3      	subs	r3, r2, r3
 800dbda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dbde:	d901      	bls.n	800dbe4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800dbe0:	2303      	movs	r3, #3
 800dbe2:	e007      	b.n	800dbf4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	68db      	ldr	r3, [r3, #12]
 800dbea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d0ee      	beq.n	800dbd0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800dbf2:	2300      	movs	r3, #0
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	3710      	adds	r7, #16
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}

0800dbfc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800dbfc:	b480      	push	{r7}
 800dbfe:	b085      	sub	sp, #20
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	4603      	mov	r3, r0
 800dc04:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800dc06:	2300      	movs	r3, #0
 800dc08:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800dc0a:	e005      	b.n	800dc18 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	3301      	adds	r3, #1
 800dc10:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800dc12:	79fb      	ldrb	r3, [r7, #7]
 800dc14:	3b0a      	subs	r3, #10
 800dc16:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800dc18:	79fb      	ldrb	r3, [r7, #7]
 800dc1a:	2b09      	cmp	r3, #9
 800dc1c:	d8f6      	bhi.n	800dc0c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	b2db      	uxtb	r3, r3
 800dc22:	011b      	lsls	r3, r3, #4
 800dc24:	b2da      	uxtb	r2, r3
 800dc26:	79fb      	ldrb	r3, [r7, #7]
 800dc28:	4313      	orrs	r3, r2
 800dc2a:	b2db      	uxtb	r3, r3
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3714      	adds	r7, #20
 800dc30:	46bd      	mov	sp, r7
 800dc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc36:	4770      	bx	lr

0800dc38 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800dc38:	b480      	push	{r7}
 800dc3a:	b085      	sub	sp, #20
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	4603      	mov	r3, r0
 800dc40:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800dc42:	2300      	movs	r3, #0
 800dc44:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800dc46:	79fb      	ldrb	r3, [r7, #7]
 800dc48:	091b      	lsrs	r3, r3, #4
 800dc4a:	b2db      	uxtb	r3, r3
 800dc4c:	461a      	mov	r2, r3
 800dc4e:	4613      	mov	r3, r2
 800dc50:	009b      	lsls	r3, r3, #2
 800dc52:	4413      	add	r3, r2
 800dc54:	005b      	lsls	r3, r3, #1
 800dc56:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800dc58:	79fb      	ldrb	r3, [r7, #7]
 800dc5a:	f003 030f 	and.w	r3, r3, #15
 800dc5e:	b2da      	uxtb	r2, r3
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	b2db      	uxtb	r3, r3
 800dc64:	4413      	add	r3, r2
 800dc66:	b2db      	uxtb	r3, r3
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3714      	adds	r7, #20
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc72:	4770      	bx	lr

0800dc74 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800dc74:	b480      	push	{r7}
 800dc76:	b087      	sub	sp, #28
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	60f8      	str	r0, [r7, #12]
 800dc7c:	60b9      	str	r1, [r7, #8]
 800dc7e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	7f1b      	ldrb	r3, [r3, #28]
 800dc84:	2b01      	cmp	r3, #1
 800dc86:	d101      	bne.n	800dc8c <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 800dc88:	2302      	movs	r3, #2
 800dc8a:	e0a6      	b.n	800ddda <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	2201      	movs	r2, #1
 800dc90:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	2202      	movs	r2, #2
 800dc96:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	22ca      	movs	r2, #202	; 0xca
 800dc9e:	625a      	str	r2, [r3, #36]	; 0x24
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	2253      	movs	r2, #83	; 0x53
 800dca6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	689b      	ldr	r3, [r3, #8]
 800dcae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d022      	beq.n	800dcfc <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800dcb6:	4b4c      	ldr	r3, [pc, #304]	; (800dde8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	4a4c      	ldr	r2, [pc, #304]	; (800ddec <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800dcbc:	fba2 2303 	umull	r2, r3, r2, r3
 800dcc0:	0adb      	lsrs	r3, r3, #11
 800dcc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dcc6:	fb02 f303 	mul.w	r3, r2, r3
 800dcca:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	1e5a      	subs	r2, r3, #1
 800dcd0:	617a      	str	r2, [r7, #20]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d10b      	bne.n	800dcee <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	22ff      	movs	r2, #255	; 0xff
 800dcdc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	2203      	movs	r2, #3
 800dce2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	2200      	movs	r2, #0
 800dce8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800dcea:	2303      	movs	r3, #3
 800dcec:	e075      	b.n	800ddda <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	68db      	ldr	r3, [r3, #12]
 800dcf4:	f003 0304 	and.w	r3, r3, #4
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d1e7      	bne.n	800dccc <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	689a      	ldr	r2, [r3, #8]
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dd0a:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800dd0c:	4b36      	ldr	r3, [pc, #216]	; (800dde8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	4a36      	ldr	r2, [pc, #216]	; (800ddec <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800dd12:	fba2 2303 	umull	r2, r3, r2, r3
 800dd16:	0adb      	lsrs	r3, r3, #11
 800dd18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dd1c:	fb02 f303 	mul.w	r3, r2, r3
 800dd20:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	1e5a      	subs	r2, r3, #1
 800dd26:	617a      	str	r2, [r7, #20]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d10b      	bne.n	800dd44 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	22ff      	movs	r2, #255	; 0xff
 800dd32:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	2203      	movs	r2, #3
 800dd38:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800dd40:	2303      	movs	r3, #3
 800dd42:	e04a      	b.n	800ddda <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	68db      	ldr	r3, [r3, #12]
 800dd4a:	f003 0304 	and.w	r3, r3, #4
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d0e7      	beq.n	800dd22 <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	68ba      	ldr	r2, [r7, #8]
 800dd58:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	689a      	ldr	r2, [r3, #8]
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	f022 0207 	bic.w	r2, r2, #7
 800dd68:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	6899      	ldr	r1, [r3, #8]
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	687a      	ldr	r2, [r7, #4]
 800dd76:	430a      	orrs	r2, r1
 800dd78:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800dd7a:	4b1d      	ldr	r3, [pc, #116]	; (800ddf0 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	4a1c      	ldr	r2, [pc, #112]	; (800ddf0 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800dd80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800dd84:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800dd86:	4b1a      	ldr	r3, [pc, #104]	; (800ddf0 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800dd88:	689b      	ldr	r3, [r3, #8]
 800dd8a:	4a19      	ldr	r2, [pc, #100]	; (800ddf0 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800dd8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800dd90:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	68db      	ldr	r3, [r3, #12]
 800dd98:	b2da      	uxtb	r2, r3
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800dda2:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	689a      	ldr	r2, [r3, #8]
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ddb2:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	689a      	ldr	r2, [r3, #8]
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ddc2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	22ff      	movs	r2, #255	; 0xff
 800ddca:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	2201      	movs	r2, #1
 800ddd0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800ddd8:	2300      	movs	r3, #0
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	371c      	adds	r7, #28
 800ddde:	46bd      	mov	sp, r7
 800dde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde4:	4770      	bx	lr
 800dde6:	bf00      	nop
 800dde8:	20000088 	.word	0x20000088
 800ddec:	10624dd3 	.word	0x10624dd3
 800ddf0:	40013c00 	.word	0x40013c00

0800ddf4 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b084      	sub	sp, #16
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	7f1b      	ldrb	r3, [r3, #28]
 800de04:	2b01      	cmp	r3, #1
 800de06:	d101      	bne.n	800de0c <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 800de08:	2302      	movs	r3, #2
 800de0a:	e047      	b.n	800de9c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2201      	movs	r2, #1
 800de10:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2202      	movs	r2, #2
 800de16:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	22ca      	movs	r2, #202	; 0xca
 800de1e:	625a      	str	r2, [r3, #36]	; 0x24
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	2253      	movs	r2, #83	; 0x53
 800de26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	689a      	ldr	r2, [r3, #8]
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800de36:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	689a      	ldr	r2, [r3, #8]
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800de46:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800de48:	f7fc fbb0 	bl	800a5ac <HAL_GetTick>
 800de4c:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800de4e:	e013      	b.n	800de78 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800de50:	f7fc fbac 	bl	800a5ac <HAL_GetTick>
 800de54:	4602      	mov	r2, r0
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	1ad3      	subs	r3, r2, r3
 800de5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de5e:	d90b      	bls.n	800de78 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	22ff      	movs	r2, #255	; 0xff
 800de66:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2203      	movs	r2, #3
 800de6c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2200      	movs	r2, #0
 800de72:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800de74:	2303      	movs	r3, #3
 800de76:	e011      	b.n	800de9c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	68db      	ldr	r3, [r3, #12]
 800de7e:	f003 0304 	and.w	r3, r3, #4
 800de82:	2b00      	cmp	r3, #0
 800de84:	d0e4      	beq.n	800de50 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	22ff      	movs	r2, #255	; 0xff
 800de8c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2201      	movs	r2, #1
 800de92:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2200      	movs	r2, #0
 800de98:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800de9a:	2300      	movs	r3, #0
}
 800de9c:	4618      	mov	r0, r3
 800de9e:	3710      	adds	r7, #16
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}

0800dea4 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800dea4:	b480      	push	{r7}
 800dea6:	b087      	sub	sp, #28
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	60f8      	str	r0, [r7, #12]
 800deac:	60b9      	str	r1, [r7, #8]
 800deae:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800deb0:	2300      	movs	r3, #0
 800deb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	3350      	adds	r3, #80	; 0x50
 800deba:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	009b      	lsls	r3, r3, #2
 800dec0:	697a      	ldr	r2, [r7, #20]
 800dec2:	4413      	add	r3, r2
 800dec4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	687a      	ldr	r2, [r7, #4]
 800deca:	601a      	str	r2, [r3, #0]
}
 800decc:	bf00      	nop
 800dece:	371c      	adds	r7, #28
 800ded0:	46bd      	mov	sp, r7
 800ded2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded6:	4770      	bx	lr

0800ded8 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800ded8:	b480      	push	{r7}
 800deda:	b085      	sub	sp, #20
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
 800dee0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800dee2:	2300      	movs	r3, #0
 800dee4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	3350      	adds	r3, #80	; 0x50
 800deec:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	009b      	lsls	r3, r3, #2
 800def2:	68fa      	ldr	r2, [r7, #12]
 800def4:	4413      	add	r3, r2
 800def6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	681b      	ldr	r3, [r3, #0]
}
 800defc:	4618      	mov	r0, r3
 800defe:	3714      	adds	r7, #20
 800df00:	46bd      	mov	sp, r7
 800df02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df06:	4770      	bx	lr

0800df08 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800df08:	b480      	push	{r7}
 800df0a:	b083      	sub	sp, #12
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800df10:	bf00      	nop
 800df12:	370c      	adds	r7, #12
 800df14:	46bd      	mov	sp, r7
 800df16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1a:	4770      	bx	lr

0800df1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b082      	sub	sp, #8
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d101      	bne.n	800df2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800df2a:	2301      	movs	r3, #1
 800df2c:	e07b      	b.n	800e026 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df32:	2b00      	cmp	r3, #0
 800df34:	d108      	bne.n	800df48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	685b      	ldr	r3, [r3, #4]
 800df3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800df3e:	d009      	beq.n	800df54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2200      	movs	r2, #0
 800df44:	61da      	str	r2, [r3, #28]
 800df46:	e005      	b.n	800df54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2200      	movs	r2, #0
 800df4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2200      	movs	r2, #0
 800df52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2200      	movs	r2, #0
 800df58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800df60:	b2db      	uxtb	r3, r3
 800df62:	2b00      	cmp	r3, #0
 800df64:	d106      	bne.n	800df74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2200      	movs	r2, #0
 800df6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f7f5 f850 	bl	8003014 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2202      	movs	r2, #2
 800df78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	681a      	ldr	r2, [r3, #0]
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	685b      	ldr	r3, [r3, #4]
 800df90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	689b      	ldr	r3, [r3, #8]
 800df98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800df9c:	431a      	orrs	r2, r3
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	68db      	ldr	r3, [r3, #12]
 800dfa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dfa6:	431a      	orrs	r2, r3
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	691b      	ldr	r3, [r3, #16]
 800dfac:	f003 0302 	and.w	r3, r3, #2
 800dfb0:	431a      	orrs	r2, r3
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	695b      	ldr	r3, [r3, #20]
 800dfb6:	f003 0301 	and.w	r3, r3, #1
 800dfba:	431a      	orrs	r2, r3
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	699b      	ldr	r3, [r3, #24]
 800dfc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dfc4:	431a      	orrs	r2, r3
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	69db      	ldr	r3, [r3, #28]
 800dfca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dfce:	431a      	orrs	r2, r3
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6a1b      	ldr	r3, [r3, #32]
 800dfd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dfd8:	ea42 0103 	orr.w	r1, r2, r3
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfe0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	430a      	orrs	r2, r1
 800dfea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	699b      	ldr	r3, [r3, #24]
 800dff0:	0c1b      	lsrs	r3, r3, #16
 800dff2:	f003 0104 	and.w	r1, r3, #4
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dffa:	f003 0210 	and.w	r2, r3, #16
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	430a      	orrs	r2, r1
 800e004:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	69da      	ldr	r2, [r3, #28]
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e014:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2200      	movs	r2, #0
 800e01a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2201      	movs	r2, #1
 800e020:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e024:	2300      	movs	r3, #0
}
 800e026:	4618      	mov	r0, r3
 800e028:	3708      	adds	r7, #8
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}

0800e02e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e02e:	b580      	push	{r7, lr}
 800e030:	b088      	sub	sp, #32
 800e032:	af00      	add	r7, sp, #0
 800e034:	60f8      	str	r0, [r7, #12]
 800e036:	60b9      	str	r1, [r7, #8]
 800e038:	603b      	str	r3, [r7, #0]
 800e03a:	4613      	mov	r3, r2
 800e03c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e03e:	2300      	movs	r3, #0
 800e040:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e048:	2b01      	cmp	r3, #1
 800e04a:	d101      	bne.n	800e050 <HAL_SPI_Transmit+0x22>
 800e04c:	2302      	movs	r3, #2
 800e04e:	e126      	b.n	800e29e <HAL_SPI_Transmit+0x270>
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	2201      	movs	r2, #1
 800e054:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e058:	f7fc faa8 	bl	800a5ac <HAL_GetTick>
 800e05c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e05e:	88fb      	ldrh	r3, [r7, #6]
 800e060:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e068:	b2db      	uxtb	r3, r3
 800e06a:	2b01      	cmp	r3, #1
 800e06c:	d002      	beq.n	800e074 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e06e:	2302      	movs	r3, #2
 800e070:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e072:	e10b      	b.n	800e28c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d002      	beq.n	800e080 <HAL_SPI_Transmit+0x52>
 800e07a:	88fb      	ldrh	r3, [r7, #6]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d102      	bne.n	800e086 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e080:	2301      	movs	r3, #1
 800e082:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e084:	e102      	b.n	800e28c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	2203      	movs	r2, #3
 800e08a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	2200      	movs	r2, #0
 800e092:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	68ba      	ldr	r2, [r7, #8]
 800e098:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	88fa      	ldrh	r2, [r7, #6]
 800e09e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	88fa      	ldrh	r2, [r7, #6]
 800e0a4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	689b      	ldr	r3, [r3, #8]
 800e0c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e0cc:	d10f      	bne.n	800e0ee <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	681a      	ldr	r2, [r3, #0]
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e0dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	681a      	ldr	r2, [r3, #0]
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e0ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0f8:	2b40      	cmp	r3, #64	; 0x40
 800e0fa:	d007      	beq.n	800e10c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	681a      	ldr	r2, [r3, #0]
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e10a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	68db      	ldr	r3, [r3, #12]
 800e110:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e114:	d14b      	bne.n	800e1ae <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	685b      	ldr	r3, [r3, #4]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d002      	beq.n	800e124 <HAL_SPI_Transmit+0xf6>
 800e11e:	8afb      	ldrh	r3, [r7, #22]
 800e120:	2b01      	cmp	r3, #1
 800e122:	d13e      	bne.n	800e1a2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e128:	881a      	ldrh	r2, [r3, #0]
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e134:	1c9a      	adds	r2, r3, #2
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e13e:	b29b      	uxth	r3, r3
 800e140:	3b01      	subs	r3, #1
 800e142:	b29a      	uxth	r2, r3
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e148:	e02b      	b.n	800e1a2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	689b      	ldr	r3, [r3, #8]
 800e150:	f003 0302 	and.w	r3, r3, #2
 800e154:	2b02      	cmp	r3, #2
 800e156:	d112      	bne.n	800e17e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e15c:	881a      	ldrh	r2, [r3, #0]
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e168:	1c9a      	adds	r2, r3, #2
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e172:	b29b      	uxth	r3, r3
 800e174:	3b01      	subs	r3, #1
 800e176:	b29a      	uxth	r2, r3
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	86da      	strh	r2, [r3, #54]	; 0x36
 800e17c:	e011      	b.n	800e1a2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e17e:	f7fc fa15 	bl	800a5ac <HAL_GetTick>
 800e182:	4602      	mov	r2, r0
 800e184:	69bb      	ldr	r3, [r7, #24]
 800e186:	1ad3      	subs	r3, r2, r3
 800e188:	683a      	ldr	r2, [r7, #0]
 800e18a:	429a      	cmp	r2, r3
 800e18c:	d803      	bhi.n	800e196 <HAL_SPI_Transmit+0x168>
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e194:	d102      	bne.n	800e19c <HAL_SPI_Transmit+0x16e>
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d102      	bne.n	800e1a2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800e19c:	2303      	movs	r3, #3
 800e19e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e1a0:	e074      	b.n	800e28c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e1a6:	b29b      	uxth	r3, r3
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d1ce      	bne.n	800e14a <HAL_SPI_Transmit+0x11c>
 800e1ac:	e04c      	b.n	800e248 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	685b      	ldr	r3, [r3, #4]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d002      	beq.n	800e1bc <HAL_SPI_Transmit+0x18e>
 800e1b6:	8afb      	ldrh	r3, [r7, #22]
 800e1b8:	2b01      	cmp	r3, #1
 800e1ba:	d140      	bne.n	800e23e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	330c      	adds	r3, #12
 800e1c6:	7812      	ldrb	r2, [r2, #0]
 800e1c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1ce:	1c5a      	adds	r2, r3, #1
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e1d8:	b29b      	uxth	r3, r3
 800e1da:	3b01      	subs	r3, #1
 800e1dc:	b29a      	uxth	r2, r3
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e1e2:	e02c      	b.n	800e23e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	689b      	ldr	r3, [r3, #8]
 800e1ea:	f003 0302 	and.w	r3, r3, #2
 800e1ee:	2b02      	cmp	r3, #2
 800e1f0:	d113      	bne.n	800e21a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	330c      	adds	r3, #12
 800e1fc:	7812      	ldrb	r2, [r2, #0]
 800e1fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e204:	1c5a      	adds	r2, r3, #1
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e20e:	b29b      	uxth	r3, r3
 800e210:	3b01      	subs	r3, #1
 800e212:	b29a      	uxth	r2, r3
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	86da      	strh	r2, [r3, #54]	; 0x36
 800e218:	e011      	b.n	800e23e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e21a:	f7fc f9c7 	bl	800a5ac <HAL_GetTick>
 800e21e:	4602      	mov	r2, r0
 800e220:	69bb      	ldr	r3, [r7, #24]
 800e222:	1ad3      	subs	r3, r2, r3
 800e224:	683a      	ldr	r2, [r7, #0]
 800e226:	429a      	cmp	r2, r3
 800e228:	d803      	bhi.n	800e232 <HAL_SPI_Transmit+0x204>
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e230:	d102      	bne.n	800e238 <HAL_SPI_Transmit+0x20a>
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d102      	bne.n	800e23e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800e238:	2303      	movs	r3, #3
 800e23a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e23c:	e026      	b.n	800e28c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e242:	b29b      	uxth	r3, r3
 800e244:	2b00      	cmp	r3, #0
 800e246:	d1cd      	bne.n	800e1e4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e248:	69ba      	ldr	r2, [r7, #24]
 800e24a:	6839      	ldr	r1, [r7, #0]
 800e24c:	68f8      	ldr	r0, [r7, #12]
 800e24e:	f000 fbcb 	bl	800e9e8 <SPI_EndRxTxTransaction>
 800e252:	4603      	mov	r3, r0
 800e254:	2b00      	cmp	r3, #0
 800e256:	d002      	beq.n	800e25e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	2220      	movs	r2, #32
 800e25c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	689b      	ldr	r3, [r3, #8]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d10a      	bne.n	800e27c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e266:	2300      	movs	r3, #0
 800e268:	613b      	str	r3, [r7, #16]
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	68db      	ldr	r3, [r3, #12]
 800e270:	613b      	str	r3, [r7, #16]
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	689b      	ldr	r3, [r3, #8]
 800e278:	613b      	str	r3, [r7, #16]
 800e27a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e280:	2b00      	cmp	r3, #0
 800e282:	d002      	beq.n	800e28a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800e284:	2301      	movs	r3, #1
 800e286:	77fb      	strb	r3, [r7, #31]
 800e288:	e000      	b.n	800e28c <HAL_SPI_Transmit+0x25e>
  }

error:
 800e28a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	2201      	movs	r2, #1
 800e290:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	2200      	movs	r2, #0
 800e298:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e29c:	7ffb      	ldrb	r3, [r7, #31]
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	3720      	adds	r7, #32
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}

0800e2a6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e2a6:	b580      	push	{r7, lr}
 800e2a8:	b088      	sub	sp, #32
 800e2aa:	af02      	add	r7, sp, #8
 800e2ac:	60f8      	str	r0, [r7, #12]
 800e2ae:	60b9      	str	r1, [r7, #8]
 800e2b0:	603b      	str	r3, [r7, #0]
 800e2b2:	4613      	mov	r3, r2
 800e2b4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	685b      	ldr	r3, [r3, #4]
 800e2be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e2c2:	d112      	bne.n	800e2ea <HAL_SPI_Receive+0x44>
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	689b      	ldr	r3, [r3, #8]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d10e      	bne.n	800e2ea <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	2204      	movs	r2, #4
 800e2d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e2d4:	88fa      	ldrh	r2, [r7, #6]
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	9300      	str	r3, [sp, #0]
 800e2da:	4613      	mov	r3, r2
 800e2dc:	68ba      	ldr	r2, [r7, #8]
 800e2de:	68b9      	ldr	r1, [r7, #8]
 800e2e0:	68f8      	ldr	r0, [r7, #12]
 800e2e2:	f000 f8f1 	bl	800e4c8 <HAL_SPI_TransmitReceive>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	e0ea      	b.n	800e4c0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e2f0:	2b01      	cmp	r3, #1
 800e2f2:	d101      	bne.n	800e2f8 <HAL_SPI_Receive+0x52>
 800e2f4:	2302      	movs	r3, #2
 800e2f6:	e0e3      	b.n	800e4c0 <HAL_SPI_Receive+0x21a>
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	2201      	movs	r2, #1
 800e2fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e300:	f7fc f954 	bl	800a5ac <HAL_GetTick>
 800e304:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e30c:	b2db      	uxtb	r3, r3
 800e30e:	2b01      	cmp	r3, #1
 800e310:	d002      	beq.n	800e318 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e312:	2302      	movs	r3, #2
 800e314:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e316:	e0ca      	b.n	800e4ae <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d002      	beq.n	800e324 <HAL_SPI_Receive+0x7e>
 800e31e:	88fb      	ldrh	r3, [r7, #6]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d102      	bne.n	800e32a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e324:	2301      	movs	r3, #1
 800e326:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e328:	e0c1      	b.n	800e4ae <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	2204      	movs	r2, #4
 800e32e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	2200      	movs	r2, #0
 800e336:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	68ba      	ldr	r2, [r7, #8]
 800e33c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	88fa      	ldrh	r2, [r7, #6]
 800e342:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	88fa      	ldrh	r2, [r7, #6]
 800e348:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	2200      	movs	r2, #0
 800e34e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	2200      	movs	r2, #0
 800e354:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	2200      	movs	r2, #0
 800e35a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	2200      	movs	r2, #0
 800e360:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	2200      	movs	r2, #0
 800e366:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	689b      	ldr	r3, [r3, #8]
 800e36c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e370:	d10f      	bne.n	800e392 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	681a      	ldr	r2, [r3, #0]
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e380:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	681a      	ldr	r2, [r3, #0]
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e390:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e39c:	2b40      	cmp	r3, #64	; 0x40
 800e39e:	d007      	beq.n	800e3b0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	681a      	ldr	r2, [r3, #0]
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e3ae:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	68db      	ldr	r3, [r3, #12]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d162      	bne.n	800e47e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e3b8:	e02e      	b.n	800e418 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	689b      	ldr	r3, [r3, #8]
 800e3c0:	f003 0301 	and.w	r3, r3, #1
 800e3c4:	2b01      	cmp	r3, #1
 800e3c6:	d115      	bne.n	800e3f4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	f103 020c 	add.w	r2, r3, #12
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3d4:	7812      	ldrb	r2, [r2, #0]
 800e3d6:	b2d2      	uxtb	r2, r2
 800e3d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3de:	1c5a      	adds	r2, r3, #1
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e3e8:	b29b      	uxth	r3, r3
 800e3ea:	3b01      	subs	r3, #1
 800e3ec:	b29a      	uxth	r2, r3
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e3f2:	e011      	b.n	800e418 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e3f4:	f7fc f8da 	bl	800a5ac <HAL_GetTick>
 800e3f8:	4602      	mov	r2, r0
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	1ad3      	subs	r3, r2, r3
 800e3fe:	683a      	ldr	r2, [r7, #0]
 800e400:	429a      	cmp	r2, r3
 800e402:	d803      	bhi.n	800e40c <HAL_SPI_Receive+0x166>
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e40a:	d102      	bne.n	800e412 <HAL_SPI_Receive+0x16c>
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d102      	bne.n	800e418 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800e412:	2303      	movs	r3, #3
 800e414:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e416:	e04a      	b.n	800e4ae <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e41c:	b29b      	uxth	r3, r3
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d1cb      	bne.n	800e3ba <HAL_SPI_Receive+0x114>
 800e422:	e031      	b.n	800e488 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	689b      	ldr	r3, [r3, #8]
 800e42a:	f003 0301 	and.w	r3, r3, #1
 800e42e:	2b01      	cmp	r3, #1
 800e430:	d113      	bne.n	800e45a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	68da      	ldr	r2, [r3, #12]
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e43c:	b292      	uxth	r2, r2
 800e43e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e444:	1c9a      	adds	r2, r3, #2
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e44e:	b29b      	uxth	r3, r3
 800e450:	3b01      	subs	r3, #1
 800e452:	b29a      	uxth	r2, r3
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e458:	e011      	b.n	800e47e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e45a:	f7fc f8a7 	bl	800a5ac <HAL_GetTick>
 800e45e:	4602      	mov	r2, r0
 800e460:	693b      	ldr	r3, [r7, #16]
 800e462:	1ad3      	subs	r3, r2, r3
 800e464:	683a      	ldr	r2, [r7, #0]
 800e466:	429a      	cmp	r2, r3
 800e468:	d803      	bhi.n	800e472 <HAL_SPI_Receive+0x1cc>
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e470:	d102      	bne.n	800e478 <HAL_SPI_Receive+0x1d2>
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d102      	bne.n	800e47e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800e478:	2303      	movs	r3, #3
 800e47a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e47c:	e017      	b.n	800e4ae <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e482:	b29b      	uxth	r3, r3
 800e484:	2b00      	cmp	r3, #0
 800e486:	d1cd      	bne.n	800e424 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e488:	693a      	ldr	r2, [r7, #16]
 800e48a:	6839      	ldr	r1, [r7, #0]
 800e48c:	68f8      	ldr	r0, [r7, #12]
 800e48e:	f000 fa45 	bl	800e91c <SPI_EndRxTransaction>
 800e492:	4603      	mov	r3, r0
 800e494:	2b00      	cmp	r3, #0
 800e496:	d002      	beq.n	800e49e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	2220      	movs	r2, #32
 800e49c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d002      	beq.n	800e4ac <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800e4a6:	2301      	movs	r3, #1
 800e4a8:	75fb      	strb	r3, [r7, #23]
 800e4aa:	e000      	b.n	800e4ae <HAL_SPI_Receive+0x208>
  }

error :
 800e4ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	2201      	movs	r2, #1
 800e4b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e4be:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	3718      	adds	r7, #24
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}

0800e4c8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b08c      	sub	sp, #48	; 0x30
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	60f8      	str	r0, [r7, #12]
 800e4d0:	60b9      	str	r1, [r7, #8]
 800e4d2:	607a      	str	r2, [r7, #4]
 800e4d4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e4e6:	2b01      	cmp	r3, #1
 800e4e8:	d101      	bne.n	800e4ee <HAL_SPI_TransmitReceive+0x26>
 800e4ea:	2302      	movs	r3, #2
 800e4ec:	e18a      	b.n	800e804 <HAL_SPI_TransmitReceive+0x33c>
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	2201      	movs	r2, #1
 800e4f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e4f6:	f7fc f859 	bl	800a5ac <HAL_GetTick>
 800e4fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	685b      	ldr	r3, [r3, #4]
 800e50a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800e50c:	887b      	ldrh	r3, [r7, #2]
 800e50e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e510:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e514:	2b01      	cmp	r3, #1
 800e516:	d00f      	beq.n	800e538 <HAL_SPI_TransmitReceive+0x70>
 800e518:	69fb      	ldr	r3, [r7, #28]
 800e51a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e51e:	d107      	bne.n	800e530 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	689b      	ldr	r3, [r3, #8]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d103      	bne.n	800e530 <HAL_SPI_TransmitReceive+0x68>
 800e528:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e52c:	2b04      	cmp	r3, #4
 800e52e:	d003      	beq.n	800e538 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800e530:	2302      	movs	r3, #2
 800e532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e536:	e15b      	b.n	800e7f0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d005      	beq.n	800e54a <HAL_SPI_TransmitReceive+0x82>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d002      	beq.n	800e54a <HAL_SPI_TransmitReceive+0x82>
 800e544:	887b      	ldrh	r3, [r7, #2]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d103      	bne.n	800e552 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800e54a:	2301      	movs	r3, #1
 800e54c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e550:	e14e      	b.n	800e7f0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e558:	b2db      	uxtb	r3, r3
 800e55a:	2b04      	cmp	r3, #4
 800e55c:	d003      	beq.n	800e566 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	2205      	movs	r2, #5
 800e562:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	2200      	movs	r2, #0
 800e56a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	687a      	ldr	r2, [r7, #4]
 800e570:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	887a      	ldrh	r2, [r7, #2]
 800e576:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	887a      	ldrh	r2, [r7, #2]
 800e57c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	68ba      	ldr	r2, [r7, #8]
 800e582:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	887a      	ldrh	r2, [r7, #2]
 800e588:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	887a      	ldrh	r2, [r7, #2]
 800e58e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	2200      	movs	r2, #0
 800e594:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	2200      	movs	r2, #0
 800e59a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5a6:	2b40      	cmp	r3, #64	; 0x40
 800e5a8:	d007      	beq.n	800e5ba <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	681a      	ldr	r2, [r3, #0]
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e5b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	68db      	ldr	r3, [r3, #12]
 800e5be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e5c2:	d178      	bne.n	800e6b6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	685b      	ldr	r3, [r3, #4]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d002      	beq.n	800e5d2 <HAL_SPI_TransmitReceive+0x10a>
 800e5cc:	8b7b      	ldrh	r3, [r7, #26]
 800e5ce:	2b01      	cmp	r3, #1
 800e5d0:	d166      	bne.n	800e6a0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5d6:	881a      	ldrh	r2, [r3, #0]
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5e2:	1c9a      	adds	r2, r3, #2
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e5ec:	b29b      	uxth	r3, r3
 800e5ee:	3b01      	subs	r3, #1
 800e5f0:	b29a      	uxth	r2, r3
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e5f6:	e053      	b.n	800e6a0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	689b      	ldr	r3, [r3, #8]
 800e5fe:	f003 0302 	and.w	r3, r3, #2
 800e602:	2b02      	cmp	r3, #2
 800e604:	d11b      	bne.n	800e63e <HAL_SPI_TransmitReceive+0x176>
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e60a:	b29b      	uxth	r3, r3
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d016      	beq.n	800e63e <HAL_SPI_TransmitReceive+0x176>
 800e610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e612:	2b01      	cmp	r3, #1
 800e614:	d113      	bne.n	800e63e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e61a:	881a      	ldrh	r2, [r3, #0]
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e626:	1c9a      	adds	r2, r3, #2
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e630:	b29b      	uxth	r3, r3
 800e632:	3b01      	subs	r3, #1
 800e634:	b29a      	uxth	r2, r3
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e63a:	2300      	movs	r3, #0
 800e63c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	689b      	ldr	r3, [r3, #8]
 800e644:	f003 0301 	and.w	r3, r3, #1
 800e648:	2b01      	cmp	r3, #1
 800e64a:	d119      	bne.n	800e680 <HAL_SPI_TransmitReceive+0x1b8>
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e650:	b29b      	uxth	r3, r3
 800e652:	2b00      	cmp	r3, #0
 800e654:	d014      	beq.n	800e680 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	68da      	ldr	r2, [r3, #12]
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e660:	b292      	uxth	r2, r2
 800e662:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e668:	1c9a      	adds	r2, r3, #2
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e672:	b29b      	uxth	r3, r3
 800e674:	3b01      	subs	r3, #1
 800e676:	b29a      	uxth	r2, r3
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e67c:	2301      	movs	r3, #1
 800e67e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e680:	f7fb ff94 	bl	800a5ac <HAL_GetTick>
 800e684:	4602      	mov	r2, r0
 800e686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e688:	1ad3      	subs	r3, r2, r3
 800e68a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d807      	bhi.n	800e6a0 <HAL_SPI_TransmitReceive+0x1d8>
 800e690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e692:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e696:	d003      	beq.n	800e6a0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800e698:	2303      	movs	r3, #3
 800e69a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e69e:	e0a7      	b.n	800e7f0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6a4:	b29b      	uxth	r3, r3
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d1a6      	bne.n	800e5f8 <HAL_SPI_TransmitReceive+0x130>
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e6ae:	b29b      	uxth	r3, r3
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d1a1      	bne.n	800e5f8 <HAL_SPI_TransmitReceive+0x130>
 800e6b4:	e07c      	b.n	800e7b0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	685b      	ldr	r3, [r3, #4]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d002      	beq.n	800e6c4 <HAL_SPI_TransmitReceive+0x1fc>
 800e6be:	8b7b      	ldrh	r3, [r7, #26]
 800e6c0:	2b01      	cmp	r3, #1
 800e6c2:	d16b      	bne.n	800e79c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	330c      	adds	r3, #12
 800e6ce:	7812      	ldrb	r2, [r2, #0]
 800e6d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6d6:	1c5a      	adds	r2, r3, #1
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6e0:	b29b      	uxth	r3, r3
 800e6e2:	3b01      	subs	r3, #1
 800e6e4:	b29a      	uxth	r2, r3
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e6ea:	e057      	b.n	800e79c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	689b      	ldr	r3, [r3, #8]
 800e6f2:	f003 0302 	and.w	r3, r3, #2
 800e6f6:	2b02      	cmp	r3, #2
 800e6f8:	d11c      	bne.n	800e734 <HAL_SPI_TransmitReceive+0x26c>
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6fe:	b29b      	uxth	r3, r3
 800e700:	2b00      	cmp	r3, #0
 800e702:	d017      	beq.n	800e734 <HAL_SPI_TransmitReceive+0x26c>
 800e704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e706:	2b01      	cmp	r3, #1
 800e708:	d114      	bne.n	800e734 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	330c      	adds	r3, #12
 800e714:	7812      	ldrb	r2, [r2, #0]
 800e716:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e71c:	1c5a      	adds	r2, r3, #1
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e726:	b29b      	uxth	r3, r3
 800e728:	3b01      	subs	r3, #1
 800e72a:	b29a      	uxth	r2, r3
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e730:	2300      	movs	r3, #0
 800e732:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	689b      	ldr	r3, [r3, #8]
 800e73a:	f003 0301 	and.w	r3, r3, #1
 800e73e:	2b01      	cmp	r3, #1
 800e740:	d119      	bne.n	800e776 <HAL_SPI_TransmitReceive+0x2ae>
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e746:	b29b      	uxth	r3, r3
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d014      	beq.n	800e776 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	68da      	ldr	r2, [r3, #12]
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e756:	b2d2      	uxtb	r2, r2
 800e758:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e75e:	1c5a      	adds	r2, r3, #1
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e768:	b29b      	uxth	r3, r3
 800e76a:	3b01      	subs	r3, #1
 800e76c:	b29a      	uxth	r2, r3
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e772:	2301      	movs	r3, #1
 800e774:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e776:	f7fb ff19 	bl	800a5ac <HAL_GetTick>
 800e77a:	4602      	mov	r2, r0
 800e77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e77e:	1ad3      	subs	r3, r2, r3
 800e780:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e782:	429a      	cmp	r2, r3
 800e784:	d803      	bhi.n	800e78e <HAL_SPI_TransmitReceive+0x2c6>
 800e786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e78c:	d102      	bne.n	800e794 <HAL_SPI_TransmitReceive+0x2cc>
 800e78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e790:	2b00      	cmp	r3, #0
 800e792:	d103      	bne.n	800e79c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800e794:	2303      	movs	r3, #3
 800e796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e79a:	e029      	b.n	800e7f0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e7a0:	b29b      	uxth	r3, r3
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d1a2      	bne.n	800e6ec <HAL_SPI_TransmitReceive+0x224>
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e7aa:	b29b      	uxth	r3, r3
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d19d      	bne.n	800e6ec <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e7b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e7b4:	68f8      	ldr	r0, [r7, #12]
 800e7b6:	f000 f917 	bl	800e9e8 <SPI_EndRxTxTransaction>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d006      	beq.n	800e7ce <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800e7c0:	2301      	movs	r3, #1
 800e7c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	2220      	movs	r2, #32
 800e7ca:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800e7cc:	e010      	b.n	800e7f0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	689b      	ldr	r3, [r3, #8]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d10b      	bne.n	800e7ee <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	617b      	str	r3, [r7, #20]
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	68db      	ldr	r3, [r3, #12]
 800e7e0:	617b      	str	r3, [r7, #20]
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	689b      	ldr	r3, [r3, #8]
 800e7e8:	617b      	str	r3, [r7, #20]
 800e7ea:	697b      	ldr	r3, [r7, #20]
 800e7ec:	e000      	b.n	800e7f0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800e7ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e800:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e804:	4618      	mov	r0, r3
 800e806:	3730      	adds	r7, #48	; 0x30
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}

0800e80c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b088      	sub	sp, #32
 800e810:	af00      	add	r7, sp, #0
 800e812:	60f8      	str	r0, [r7, #12]
 800e814:	60b9      	str	r1, [r7, #8]
 800e816:	603b      	str	r3, [r7, #0]
 800e818:	4613      	mov	r3, r2
 800e81a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e81c:	f7fb fec6 	bl	800a5ac <HAL_GetTick>
 800e820:	4602      	mov	r2, r0
 800e822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e824:	1a9b      	subs	r3, r3, r2
 800e826:	683a      	ldr	r2, [r7, #0]
 800e828:	4413      	add	r3, r2
 800e82a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e82c:	f7fb febe 	bl	800a5ac <HAL_GetTick>
 800e830:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e832:	4b39      	ldr	r3, [pc, #228]	; (800e918 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	015b      	lsls	r3, r3, #5
 800e838:	0d1b      	lsrs	r3, r3, #20
 800e83a:	69fa      	ldr	r2, [r7, #28]
 800e83c:	fb02 f303 	mul.w	r3, r2, r3
 800e840:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e842:	e054      	b.n	800e8ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e84a:	d050      	beq.n	800e8ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e84c:	f7fb feae 	bl	800a5ac <HAL_GetTick>
 800e850:	4602      	mov	r2, r0
 800e852:	69bb      	ldr	r3, [r7, #24]
 800e854:	1ad3      	subs	r3, r2, r3
 800e856:	69fa      	ldr	r2, [r7, #28]
 800e858:	429a      	cmp	r2, r3
 800e85a:	d902      	bls.n	800e862 <SPI_WaitFlagStateUntilTimeout+0x56>
 800e85c:	69fb      	ldr	r3, [r7, #28]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d13d      	bne.n	800e8de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	685a      	ldr	r2, [r3, #4]
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e870:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	685b      	ldr	r3, [r3, #4]
 800e876:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e87a:	d111      	bne.n	800e8a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	689b      	ldr	r3, [r3, #8]
 800e880:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e884:	d004      	beq.n	800e890 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	689b      	ldr	r3, [r3, #8]
 800e88a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e88e:	d107      	bne.n	800e8a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	681a      	ldr	r2, [r3, #0]
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e89e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e8a8:	d10f      	bne.n	800e8ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	681a      	ldr	r2, [r3, #0]
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e8b8:	601a      	str	r2, [r3, #0]
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	681a      	ldr	r2, [r3, #0]
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e8c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	2201      	movs	r2, #1
 800e8ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800e8da:	2303      	movs	r3, #3
 800e8dc:	e017      	b.n	800e90e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800e8de:	697b      	ldr	r3, [r7, #20]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d101      	bne.n	800e8e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	3b01      	subs	r3, #1
 800e8ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	689a      	ldr	r2, [r3, #8]
 800e8f4:	68bb      	ldr	r3, [r7, #8]
 800e8f6:	4013      	ands	r3, r2
 800e8f8:	68ba      	ldr	r2, [r7, #8]
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	bf0c      	ite	eq
 800e8fe:	2301      	moveq	r3, #1
 800e900:	2300      	movne	r3, #0
 800e902:	b2db      	uxtb	r3, r3
 800e904:	461a      	mov	r2, r3
 800e906:	79fb      	ldrb	r3, [r7, #7]
 800e908:	429a      	cmp	r2, r3
 800e90a:	d19b      	bne.n	800e844 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e90c:	2300      	movs	r3, #0
}
 800e90e:	4618      	mov	r0, r3
 800e910:	3720      	adds	r7, #32
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}
 800e916:	bf00      	nop
 800e918:	20000088 	.word	0x20000088

0800e91c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b086      	sub	sp, #24
 800e920:	af02      	add	r7, sp, #8
 800e922:	60f8      	str	r0, [r7, #12]
 800e924:	60b9      	str	r1, [r7, #8]
 800e926:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	685b      	ldr	r3, [r3, #4]
 800e92c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e930:	d111      	bne.n	800e956 <SPI_EndRxTransaction+0x3a>
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	689b      	ldr	r3, [r3, #8]
 800e936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e93a:	d004      	beq.n	800e946 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	689b      	ldr	r3, [r3, #8]
 800e940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e944:	d107      	bne.n	800e956 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	681a      	ldr	r2, [r3, #0]
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e954:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	685b      	ldr	r3, [r3, #4]
 800e95a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e95e:	d12a      	bne.n	800e9b6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	689b      	ldr	r3, [r3, #8]
 800e964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e968:	d012      	beq.n	800e990 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	9300      	str	r3, [sp, #0]
 800e96e:	68bb      	ldr	r3, [r7, #8]
 800e970:	2200      	movs	r2, #0
 800e972:	2180      	movs	r1, #128	; 0x80
 800e974:	68f8      	ldr	r0, [r7, #12]
 800e976:	f7ff ff49 	bl	800e80c <SPI_WaitFlagStateUntilTimeout>
 800e97a:	4603      	mov	r3, r0
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d02d      	beq.n	800e9dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e984:	f043 0220 	orr.w	r2, r3, #32
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e98c:	2303      	movs	r3, #3
 800e98e:	e026      	b.n	800e9de <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	9300      	str	r3, [sp, #0]
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	2200      	movs	r2, #0
 800e998:	2101      	movs	r1, #1
 800e99a:	68f8      	ldr	r0, [r7, #12]
 800e99c:	f7ff ff36 	bl	800e80c <SPI_WaitFlagStateUntilTimeout>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d01a      	beq.n	800e9dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9aa:	f043 0220 	orr.w	r2, r3, #32
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e9b2:	2303      	movs	r3, #3
 800e9b4:	e013      	b.n	800e9de <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	9300      	str	r3, [sp, #0]
 800e9ba:	68bb      	ldr	r3, [r7, #8]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	2101      	movs	r1, #1
 800e9c0:	68f8      	ldr	r0, [r7, #12]
 800e9c2:	f7ff ff23 	bl	800e80c <SPI_WaitFlagStateUntilTimeout>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d007      	beq.n	800e9dc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9d0:	f043 0220 	orr.w	r2, r3, #32
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e9d8:	2303      	movs	r3, #3
 800e9da:	e000      	b.n	800e9de <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800e9dc:	2300      	movs	r3, #0
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	3710      	adds	r7, #16
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}
	...

0800e9e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b088      	sub	sp, #32
 800e9ec:	af02      	add	r7, sp, #8
 800e9ee:	60f8      	str	r0, [r7, #12]
 800e9f0:	60b9      	str	r1, [r7, #8]
 800e9f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e9f4:	4b1b      	ldr	r3, [pc, #108]	; (800ea64 <SPI_EndRxTxTransaction+0x7c>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	4a1b      	ldr	r2, [pc, #108]	; (800ea68 <SPI_EndRxTxTransaction+0x80>)
 800e9fa:	fba2 2303 	umull	r2, r3, r2, r3
 800e9fe:	0d5b      	lsrs	r3, r3, #21
 800ea00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ea04:	fb02 f303 	mul.w	r3, r2, r3
 800ea08:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	685b      	ldr	r3, [r3, #4]
 800ea0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea12:	d112      	bne.n	800ea3a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	9300      	str	r3, [sp, #0]
 800ea18:	68bb      	ldr	r3, [r7, #8]
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	2180      	movs	r1, #128	; 0x80
 800ea1e:	68f8      	ldr	r0, [r7, #12]
 800ea20:	f7ff fef4 	bl	800e80c <SPI_WaitFlagStateUntilTimeout>
 800ea24:	4603      	mov	r3, r0
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d016      	beq.n	800ea58 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea2e:	f043 0220 	orr.w	r2, r3, #32
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ea36:	2303      	movs	r3, #3
 800ea38:	e00f      	b.n	800ea5a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d00a      	beq.n	800ea56 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	3b01      	subs	r3, #1
 800ea44:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	689b      	ldr	r3, [r3, #8]
 800ea4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea50:	2b80      	cmp	r3, #128	; 0x80
 800ea52:	d0f2      	beq.n	800ea3a <SPI_EndRxTxTransaction+0x52>
 800ea54:	e000      	b.n	800ea58 <SPI_EndRxTxTransaction+0x70>
        break;
 800ea56:	bf00      	nop
  }

  return HAL_OK;
 800ea58:	2300      	movs	r3, #0
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	3718      	adds	r7, #24
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}
 800ea62:	bf00      	nop
 800ea64:	20000088 	.word	0x20000088
 800ea68:	165e9f81 	.word	0x165e9f81

0800ea6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b082      	sub	sp, #8
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d101      	bne.n	800ea7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	e041      	b.n	800eb02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea84:	b2db      	uxtb	r3, r3
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d106      	bne.n	800ea98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ea92:	6878      	ldr	r0, [r7, #4]
 800ea94:	f7f4 fce2 	bl	800345c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2202      	movs	r2, #2
 800ea9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681a      	ldr	r2, [r3, #0]
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	3304      	adds	r3, #4
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	4610      	mov	r0, r2
 800eaac:	f000 fcea 	bl	800f484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2201      	movs	r2, #1
 800eab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2201      	movs	r2, #1
 800eabc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	2201      	movs	r2, #1
 800eac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2201      	movs	r2, #1
 800eacc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2201      	movs	r2, #1
 800ead4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2201      	movs	r2, #1
 800eadc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2201      	movs	r2, #1
 800eae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2201      	movs	r2, #1
 800eaec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2201      	movs	r2, #1
 800eaf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2201      	movs	r2, #1
 800eafc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eb00:	2300      	movs	r3, #0
}
 800eb02:	4618      	mov	r0, r3
 800eb04:	3708      	adds	r7, #8
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}
	...

0800eb0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800eb0c:	b480      	push	{r7}
 800eb0e:	b085      	sub	sp, #20
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb1a:	b2db      	uxtb	r3, r3
 800eb1c:	2b01      	cmp	r3, #1
 800eb1e:	d001      	beq.n	800eb24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800eb20:	2301      	movs	r3, #1
 800eb22:	e04e      	b.n	800ebc2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2202      	movs	r2, #2
 800eb28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	68da      	ldr	r2, [r3, #12]
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	f042 0201 	orr.w	r2, r2, #1
 800eb3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	4a23      	ldr	r2, [pc, #140]	; (800ebd0 <HAL_TIM_Base_Start_IT+0xc4>)
 800eb42:	4293      	cmp	r3, r2
 800eb44:	d022      	beq.n	800eb8c <HAL_TIM_Base_Start_IT+0x80>
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb4e:	d01d      	beq.n	800eb8c <HAL_TIM_Base_Start_IT+0x80>
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	4a1f      	ldr	r2, [pc, #124]	; (800ebd4 <HAL_TIM_Base_Start_IT+0xc8>)
 800eb56:	4293      	cmp	r3, r2
 800eb58:	d018      	beq.n	800eb8c <HAL_TIM_Base_Start_IT+0x80>
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	4a1e      	ldr	r2, [pc, #120]	; (800ebd8 <HAL_TIM_Base_Start_IT+0xcc>)
 800eb60:	4293      	cmp	r3, r2
 800eb62:	d013      	beq.n	800eb8c <HAL_TIM_Base_Start_IT+0x80>
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	4a1c      	ldr	r2, [pc, #112]	; (800ebdc <HAL_TIM_Base_Start_IT+0xd0>)
 800eb6a:	4293      	cmp	r3, r2
 800eb6c:	d00e      	beq.n	800eb8c <HAL_TIM_Base_Start_IT+0x80>
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	4a1b      	ldr	r2, [pc, #108]	; (800ebe0 <HAL_TIM_Base_Start_IT+0xd4>)
 800eb74:	4293      	cmp	r3, r2
 800eb76:	d009      	beq.n	800eb8c <HAL_TIM_Base_Start_IT+0x80>
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	4a19      	ldr	r2, [pc, #100]	; (800ebe4 <HAL_TIM_Base_Start_IT+0xd8>)
 800eb7e:	4293      	cmp	r3, r2
 800eb80:	d004      	beq.n	800eb8c <HAL_TIM_Base_Start_IT+0x80>
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	4a18      	ldr	r2, [pc, #96]	; (800ebe8 <HAL_TIM_Base_Start_IT+0xdc>)
 800eb88:	4293      	cmp	r3, r2
 800eb8a:	d111      	bne.n	800ebb0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	689b      	ldr	r3, [r3, #8]
 800eb92:	f003 0307 	and.w	r3, r3, #7
 800eb96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	2b06      	cmp	r3, #6
 800eb9c:	d010      	beq.n	800ebc0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	681a      	ldr	r2, [r3, #0]
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	f042 0201 	orr.w	r2, r2, #1
 800ebac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ebae:	e007      	b.n	800ebc0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	681a      	ldr	r2, [r3, #0]
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	f042 0201 	orr.w	r2, r2, #1
 800ebbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ebc0:	2300      	movs	r3, #0
}
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	3714      	adds	r7, #20
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebcc:	4770      	bx	lr
 800ebce:	bf00      	nop
 800ebd0:	40010000 	.word	0x40010000
 800ebd4:	40000400 	.word	0x40000400
 800ebd8:	40000800 	.word	0x40000800
 800ebdc:	40000c00 	.word	0x40000c00
 800ebe0:	40010400 	.word	0x40010400
 800ebe4:	40014000 	.word	0x40014000
 800ebe8:	40001800 	.word	0x40001800

0800ebec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b082      	sub	sp, #8
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d101      	bne.n	800ebfe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ebfa:	2301      	movs	r3, #1
 800ebfc:	e041      	b.n	800ec82 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec04:	b2db      	uxtb	r3, r3
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d106      	bne.n	800ec18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ec12:	6878      	ldr	r0, [r7, #4]
 800ec14:	f000 f839 	bl	800ec8a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2202      	movs	r2, #2
 800ec1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681a      	ldr	r2, [r3, #0]
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	3304      	adds	r3, #4
 800ec28:	4619      	mov	r1, r3
 800ec2a:	4610      	mov	r0, r2
 800ec2c:	f000 fc2a 	bl	800f484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2201      	movs	r2, #1
 800ec34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2201      	movs	r2, #1
 800ec3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2201      	movs	r2, #1
 800ec44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2201      	movs	r2, #1
 800ec4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2201      	movs	r2, #1
 800ec54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2201      	movs	r2, #1
 800ec5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2201      	movs	r2, #1
 800ec64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2201      	movs	r2, #1
 800ec6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2201      	movs	r2, #1
 800ec74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2201      	movs	r2, #1
 800ec7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ec80:	2300      	movs	r3, #0
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3708      	adds	r7, #8
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}

0800ec8a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ec8a:	b480      	push	{r7}
 800ec8c:	b083      	sub	sp, #12
 800ec8e:	af00      	add	r7, sp, #0
 800ec90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ec92:	bf00      	nop
 800ec94:	370c      	adds	r7, #12
 800ec96:	46bd      	mov	sp, r7
 800ec98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9c:	4770      	bx	lr
	...

0800eca0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b084      	sub	sp, #16
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
 800eca8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d109      	bne.n	800ecc4 <HAL_TIM_PWM_Start+0x24>
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ecb6:	b2db      	uxtb	r3, r3
 800ecb8:	2b01      	cmp	r3, #1
 800ecba:	bf14      	ite	ne
 800ecbc:	2301      	movne	r3, #1
 800ecbe:	2300      	moveq	r3, #0
 800ecc0:	b2db      	uxtb	r3, r3
 800ecc2:	e022      	b.n	800ed0a <HAL_TIM_PWM_Start+0x6a>
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	2b04      	cmp	r3, #4
 800ecc8:	d109      	bne.n	800ecde <HAL_TIM_PWM_Start+0x3e>
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ecd0:	b2db      	uxtb	r3, r3
 800ecd2:	2b01      	cmp	r3, #1
 800ecd4:	bf14      	ite	ne
 800ecd6:	2301      	movne	r3, #1
 800ecd8:	2300      	moveq	r3, #0
 800ecda:	b2db      	uxtb	r3, r3
 800ecdc:	e015      	b.n	800ed0a <HAL_TIM_PWM_Start+0x6a>
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	2b08      	cmp	r3, #8
 800ece2:	d109      	bne.n	800ecf8 <HAL_TIM_PWM_Start+0x58>
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ecea:	b2db      	uxtb	r3, r3
 800ecec:	2b01      	cmp	r3, #1
 800ecee:	bf14      	ite	ne
 800ecf0:	2301      	movne	r3, #1
 800ecf2:	2300      	moveq	r3, #0
 800ecf4:	b2db      	uxtb	r3, r3
 800ecf6:	e008      	b.n	800ed0a <HAL_TIM_PWM_Start+0x6a>
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ecfe:	b2db      	uxtb	r3, r3
 800ed00:	2b01      	cmp	r3, #1
 800ed02:	bf14      	ite	ne
 800ed04:	2301      	movne	r3, #1
 800ed06:	2300      	moveq	r3, #0
 800ed08:	b2db      	uxtb	r3, r3
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d001      	beq.n	800ed12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800ed0e:	2301      	movs	r3, #1
 800ed10:	e07c      	b.n	800ee0c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d104      	bne.n	800ed22 <HAL_TIM_PWM_Start+0x82>
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2202      	movs	r2, #2
 800ed1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ed20:	e013      	b.n	800ed4a <HAL_TIM_PWM_Start+0xaa>
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	2b04      	cmp	r3, #4
 800ed26:	d104      	bne.n	800ed32 <HAL_TIM_PWM_Start+0x92>
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2202      	movs	r2, #2
 800ed2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ed30:	e00b      	b.n	800ed4a <HAL_TIM_PWM_Start+0xaa>
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	2b08      	cmp	r3, #8
 800ed36:	d104      	bne.n	800ed42 <HAL_TIM_PWM_Start+0xa2>
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2202      	movs	r2, #2
 800ed3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ed40:	e003      	b.n	800ed4a <HAL_TIM_PWM_Start+0xaa>
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2202      	movs	r2, #2
 800ed46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	2201      	movs	r2, #1
 800ed50:	6839      	ldr	r1, [r7, #0]
 800ed52:	4618      	mov	r0, r3
 800ed54:	f000 fe80 	bl	800fa58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	4a2d      	ldr	r2, [pc, #180]	; (800ee14 <HAL_TIM_PWM_Start+0x174>)
 800ed5e:	4293      	cmp	r3, r2
 800ed60:	d004      	beq.n	800ed6c <HAL_TIM_PWM_Start+0xcc>
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	4a2c      	ldr	r2, [pc, #176]	; (800ee18 <HAL_TIM_PWM_Start+0x178>)
 800ed68:	4293      	cmp	r3, r2
 800ed6a:	d101      	bne.n	800ed70 <HAL_TIM_PWM_Start+0xd0>
 800ed6c:	2301      	movs	r3, #1
 800ed6e:	e000      	b.n	800ed72 <HAL_TIM_PWM_Start+0xd2>
 800ed70:	2300      	movs	r3, #0
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d007      	beq.n	800ed86 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ed84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	4a22      	ldr	r2, [pc, #136]	; (800ee14 <HAL_TIM_PWM_Start+0x174>)
 800ed8c:	4293      	cmp	r3, r2
 800ed8e:	d022      	beq.n	800edd6 <HAL_TIM_PWM_Start+0x136>
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed98:	d01d      	beq.n	800edd6 <HAL_TIM_PWM_Start+0x136>
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	4a1f      	ldr	r2, [pc, #124]	; (800ee1c <HAL_TIM_PWM_Start+0x17c>)
 800eda0:	4293      	cmp	r3, r2
 800eda2:	d018      	beq.n	800edd6 <HAL_TIM_PWM_Start+0x136>
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	4a1d      	ldr	r2, [pc, #116]	; (800ee20 <HAL_TIM_PWM_Start+0x180>)
 800edaa:	4293      	cmp	r3, r2
 800edac:	d013      	beq.n	800edd6 <HAL_TIM_PWM_Start+0x136>
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	4a1c      	ldr	r2, [pc, #112]	; (800ee24 <HAL_TIM_PWM_Start+0x184>)
 800edb4:	4293      	cmp	r3, r2
 800edb6:	d00e      	beq.n	800edd6 <HAL_TIM_PWM_Start+0x136>
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	4a16      	ldr	r2, [pc, #88]	; (800ee18 <HAL_TIM_PWM_Start+0x178>)
 800edbe:	4293      	cmp	r3, r2
 800edc0:	d009      	beq.n	800edd6 <HAL_TIM_PWM_Start+0x136>
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	4a18      	ldr	r2, [pc, #96]	; (800ee28 <HAL_TIM_PWM_Start+0x188>)
 800edc8:	4293      	cmp	r3, r2
 800edca:	d004      	beq.n	800edd6 <HAL_TIM_PWM_Start+0x136>
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	4a16      	ldr	r2, [pc, #88]	; (800ee2c <HAL_TIM_PWM_Start+0x18c>)
 800edd2:	4293      	cmp	r3, r2
 800edd4:	d111      	bne.n	800edfa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	689b      	ldr	r3, [r3, #8]
 800eddc:	f003 0307 	and.w	r3, r3, #7
 800ede0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	2b06      	cmp	r3, #6
 800ede6:	d010      	beq.n	800ee0a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	681a      	ldr	r2, [r3, #0]
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	f042 0201 	orr.w	r2, r2, #1
 800edf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800edf8:	e007      	b.n	800ee0a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	681a      	ldr	r2, [r3, #0]
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	f042 0201 	orr.w	r2, r2, #1
 800ee08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ee0a:	2300      	movs	r3, #0
}
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	3710      	adds	r7, #16
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}
 800ee14:	40010000 	.word	0x40010000
 800ee18:	40010400 	.word	0x40010400
 800ee1c:	40000400 	.word	0x40000400
 800ee20:	40000800 	.word	0x40000800
 800ee24:	40000c00 	.word	0x40000c00
 800ee28:	40014000 	.word	0x40014000
 800ee2c:	40001800 	.word	0x40001800

0800ee30 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b082      	sub	sp, #8
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
 800ee38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	2200      	movs	r2, #0
 800ee40:	6839      	ldr	r1, [r7, #0]
 800ee42:	4618      	mov	r0, r3
 800ee44:	f000 fe08 	bl	800fa58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	4a2e      	ldr	r2, [pc, #184]	; (800ef08 <HAL_TIM_PWM_Stop+0xd8>)
 800ee4e:	4293      	cmp	r3, r2
 800ee50:	d004      	beq.n	800ee5c <HAL_TIM_PWM_Stop+0x2c>
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	4a2d      	ldr	r2, [pc, #180]	; (800ef0c <HAL_TIM_PWM_Stop+0xdc>)
 800ee58:	4293      	cmp	r3, r2
 800ee5a:	d101      	bne.n	800ee60 <HAL_TIM_PWM_Stop+0x30>
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	e000      	b.n	800ee62 <HAL_TIM_PWM_Stop+0x32>
 800ee60:	2300      	movs	r3, #0
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d017      	beq.n	800ee96 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	6a1a      	ldr	r2, [r3, #32]
 800ee6c:	f241 1311 	movw	r3, #4369	; 0x1111
 800ee70:	4013      	ands	r3, r2
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d10f      	bne.n	800ee96 <HAL_TIM_PWM_Stop+0x66>
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	6a1a      	ldr	r2, [r3, #32]
 800ee7c:	f240 4344 	movw	r3, #1092	; 0x444
 800ee80:	4013      	ands	r3, r2
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d107      	bne.n	800ee96 <HAL_TIM_PWM_Stop+0x66>
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ee94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	6a1a      	ldr	r2, [r3, #32]
 800ee9c:	f241 1311 	movw	r3, #4369	; 0x1111
 800eea0:	4013      	ands	r3, r2
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d10f      	bne.n	800eec6 <HAL_TIM_PWM_Stop+0x96>
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	6a1a      	ldr	r2, [r3, #32]
 800eeac:	f240 4344 	movw	r3, #1092	; 0x444
 800eeb0:	4013      	ands	r3, r2
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d107      	bne.n	800eec6 <HAL_TIM_PWM_Stop+0x96>
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	681a      	ldr	r2, [r3, #0]
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	f022 0201 	bic.w	r2, r2, #1
 800eec4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d104      	bne.n	800eed6 <HAL_TIM_PWM_Stop+0xa6>
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2201      	movs	r2, #1
 800eed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eed4:	e013      	b.n	800eefe <HAL_TIM_PWM_Stop+0xce>
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	2b04      	cmp	r3, #4
 800eeda:	d104      	bne.n	800eee6 <HAL_TIM_PWM_Stop+0xb6>
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2201      	movs	r2, #1
 800eee0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eee4:	e00b      	b.n	800eefe <HAL_TIM_PWM_Stop+0xce>
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	2b08      	cmp	r3, #8
 800eeea:	d104      	bne.n	800eef6 <HAL_TIM_PWM_Stop+0xc6>
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2201      	movs	r2, #1
 800eef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eef4:	e003      	b.n	800eefe <HAL_TIM_PWM_Stop+0xce>
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	2201      	movs	r2, #1
 800eefa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800eefe:	2300      	movs	r3, #0
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	3708      	adds	r7, #8
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}
 800ef08:	40010000 	.word	0x40010000
 800ef0c:	40010400 	.word	0x40010400

0800ef10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b082      	sub	sp, #8
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	691b      	ldr	r3, [r3, #16]
 800ef1e:	f003 0302 	and.w	r3, r3, #2
 800ef22:	2b02      	cmp	r3, #2
 800ef24:	d122      	bne.n	800ef6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	68db      	ldr	r3, [r3, #12]
 800ef2c:	f003 0302 	and.w	r3, r3, #2
 800ef30:	2b02      	cmp	r3, #2
 800ef32:	d11b      	bne.n	800ef6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	f06f 0202 	mvn.w	r2, #2
 800ef3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	2201      	movs	r2, #1
 800ef42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	699b      	ldr	r3, [r3, #24]
 800ef4a:	f003 0303 	and.w	r3, r3, #3
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d003      	beq.n	800ef5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f000 fa77 	bl	800f446 <HAL_TIM_IC_CaptureCallback>
 800ef58:	e005      	b.n	800ef66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef5a:	6878      	ldr	r0, [r7, #4]
 800ef5c:	f000 fa69 	bl	800f432 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef60:	6878      	ldr	r0, [r7, #4]
 800ef62:	f000 fa7a 	bl	800f45a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2200      	movs	r2, #0
 800ef6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	691b      	ldr	r3, [r3, #16]
 800ef72:	f003 0304 	and.w	r3, r3, #4
 800ef76:	2b04      	cmp	r3, #4
 800ef78:	d122      	bne.n	800efc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	68db      	ldr	r3, [r3, #12]
 800ef80:	f003 0304 	and.w	r3, r3, #4
 800ef84:	2b04      	cmp	r3, #4
 800ef86:	d11b      	bne.n	800efc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	f06f 0204 	mvn.w	r2, #4
 800ef90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2202      	movs	r2, #2
 800ef96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	699b      	ldr	r3, [r3, #24]
 800ef9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d003      	beq.n	800efae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f000 fa4d 	bl	800f446 <HAL_TIM_IC_CaptureCallback>
 800efac:	e005      	b.n	800efba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800efae:	6878      	ldr	r0, [r7, #4]
 800efb0:	f000 fa3f 	bl	800f432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800efb4:	6878      	ldr	r0, [r7, #4]
 800efb6:	f000 fa50 	bl	800f45a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2200      	movs	r2, #0
 800efbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	691b      	ldr	r3, [r3, #16]
 800efc6:	f003 0308 	and.w	r3, r3, #8
 800efca:	2b08      	cmp	r3, #8
 800efcc:	d122      	bne.n	800f014 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	68db      	ldr	r3, [r3, #12]
 800efd4:	f003 0308 	and.w	r3, r3, #8
 800efd8:	2b08      	cmp	r3, #8
 800efda:	d11b      	bne.n	800f014 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	f06f 0208 	mvn.w	r2, #8
 800efe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2204      	movs	r2, #4
 800efea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	69db      	ldr	r3, [r3, #28]
 800eff2:	f003 0303 	and.w	r3, r3, #3
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d003      	beq.n	800f002 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f000 fa23 	bl	800f446 <HAL_TIM_IC_CaptureCallback>
 800f000:	e005      	b.n	800f00e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	f000 fa15 	bl	800f432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f008:	6878      	ldr	r0, [r7, #4]
 800f00a:	f000 fa26 	bl	800f45a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	2200      	movs	r2, #0
 800f012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	691b      	ldr	r3, [r3, #16]
 800f01a:	f003 0310 	and.w	r3, r3, #16
 800f01e:	2b10      	cmp	r3, #16
 800f020:	d122      	bne.n	800f068 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	68db      	ldr	r3, [r3, #12]
 800f028:	f003 0310 	and.w	r3, r3, #16
 800f02c:	2b10      	cmp	r3, #16
 800f02e:	d11b      	bne.n	800f068 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	f06f 0210 	mvn.w	r2, #16
 800f038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	2208      	movs	r2, #8
 800f03e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	69db      	ldr	r3, [r3, #28]
 800f046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d003      	beq.n	800f056 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f000 f9f9 	bl	800f446 <HAL_TIM_IC_CaptureCallback>
 800f054:	e005      	b.n	800f062 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f000 f9eb 	bl	800f432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f000 f9fc 	bl	800f45a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	2200      	movs	r2, #0
 800f066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	691b      	ldr	r3, [r3, #16]
 800f06e:	f003 0301 	and.w	r3, r3, #1
 800f072:	2b01      	cmp	r3, #1
 800f074:	d10e      	bne.n	800f094 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	68db      	ldr	r3, [r3, #12]
 800f07c:	f003 0301 	and.w	r3, r3, #1
 800f080:	2b01      	cmp	r3, #1
 800f082:	d107      	bne.n	800f094 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f06f 0201 	mvn.w	r2, #1
 800f08c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f7f3 fc1c 	bl	80028cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	691b      	ldr	r3, [r3, #16]
 800f09a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f09e:	2b80      	cmp	r3, #128	; 0x80
 800f0a0:	d10e      	bne.n	800f0c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	68db      	ldr	r3, [r3, #12]
 800f0a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0ac:	2b80      	cmp	r3, #128	; 0x80
 800f0ae:	d107      	bne.n	800f0c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f0b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f000 fd78 	bl	800fbb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	691b      	ldr	r3, [r3, #16]
 800f0c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0ca:	2b40      	cmp	r3, #64	; 0x40
 800f0cc:	d10e      	bne.n	800f0ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	68db      	ldr	r3, [r3, #12]
 800f0d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0d8:	2b40      	cmp	r3, #64	; 0x40
 800f0da:	d107      	bne.n	800f0ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f0e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f0e6:	6878      	ldr	r0, [r7, #4]
 800f0e8:	f000 f9c1 	bl	800f46e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	691b      	ldr	r3, [r3, #16]
 800f0f2:	f003 0320 	and.w	r3, r3, #32
 800f0f6:	2b20      	cmp	r3, #32
 800f0f8:	d10e      	bne.n	800f118 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	68db      	ldr	r3, [r3, #12]
 800f100:	f003 0320 	and.w	r3, r3, #32
 800f104:	2b20      	cmp	r3, #32
 800f106:	d107      	bne.n	800f118 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	f06f 0220 	mvn.w	r2, #32
 800f110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f112:	6878      	ldr	r0, [r7, #4]
 800f114:	f000 fd42 	bl	800fb9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f118:	bf00      	nop
 800f11a:	3708      	adds	r7, #8
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd80      	pop	{r7, pc}

0800f120 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b086      	sub	sp, #24
 800f124:	af00      	add	r7, sp, #0
 800f126:	60f8      	str	r0, [r7, #12]
 800f128:	60b9      	str	r1, [r7, #8]
 800f12a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f12c:	2300      	movs	r3, #0
 800f12e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f136:	2b01      	cmp	r3, #1
 800f138:	d101      	bne.n	800f13e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f13a:	2302      	movs	r3, #2
 800f13c:	e0ae      	b.n	800f29c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	2201      	movs	r2, #1
 800f142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	2b0c      	cmp	r3, #12
 800f14a:	f200 809f 	bhi.w	800f28c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800f14e:	a201      	add	r2, pc, #4	; (adr r2, 800f154 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f154:	0800f189 	.word	0x0800f189
 800f158:	0800f28d 	.word	0x0800f28d
 800f15c:	0800f28d 	.word	0x0800f28d
 800f160:	0800f28d 	.word	0x0800f28d
 800f164:	0800f1c9 	.word	0x0800f1c9
 800f168:	0800f28d 	.word	0x0800f28d
 800f16c:	0800f28d 	.word	0x0800f28d
 800f170:	0800f28d 	.word	0x0800f28d
 800f174:	0800f20b 	.word	0x0800f20b
 800f178:	0800f28d 	.word	0x0800f28d
 800f17c:	0800f28d 	.word	0x0800f28d
 800f180:	0800f28d 	.word	0x0800f28d
 800f184:	0800f24b 	.word	0x0800f24b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	68b9      	ldr	r1, [r7, #8]
 800f18e:	4618      	mov	r0, r3
 800f190:	f000 fa18 	bl	800f5c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	699a      	ldr	r2, [r3, #24]
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	f042 0208 	orr.w	r2, r2, #8
 800f1a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	699a      	ldr	r2, [r3, #24]
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	f022 0204 	bic.w	r2, r2, #4
 800f1b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	6999      	ldr	r1, [r3, #24]
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	691a      	ldr	r2, [r3, #16]
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	430a      	orrs	r2, r1
 800f1c4:	619a      	str	r2, [r3, #24]
      break;
 800f1c6:	e064      	b.n	800f292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	68b9      	ldr	r1, [r7, #8]
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f000 fa68 	bl	800f6a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	699a      	ldr	r2, [r3, #24]
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f1e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	699a      	ldr	r2, [r3, #24]
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f1f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	6999      	ldr	r1, [r3, #24]
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	691b      	ldr	r3, [r3, #16]
 800f1fe:	021a      	lsls	r2, r3, #8
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	430a      	orrs	r2, r1
 800f206:	619a      	str	r2, [r3, #24]
      break;
 800f208:	e043      	b.n	800f292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	68b9      	ldr	r1, [r7, #8]
 800f210:	4618      	mov	r0, r3
 800f212:	f000 fabd 	bl	800f790 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	69da      	ldr	r2, [r3, #28]
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	f042 0208 	orr.w	r2, r2, #8
 800f224:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	69da      	ldr	r2, [r3, #28]
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	f022 0204 	bic.w	r2, r2, #4
 800f234:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	69d9      	ldr	r1, [r3, #28]
 800f23c:	68bb      	ldr	r3, [r7, #8]
 800f23e:	691a      	ldr	r2, [r3, #16]
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	430a      	orrs	r2, r1
 800f246:	61da      	str	r2, [r3, #28]
      break;
 800f248:	e023      	b.n	800f292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	68b9      	ldr	r1, [r7, #8]
 800f250:	4618      	mov	r0, r3
 800f252:	f000 fb11 	bl	800f878 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	69da      	ldr	r2, [r3, #28]
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f264:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	69da      	ldr	r2, [r3, #28]
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	69d9      	ldr	r1, [r3, #28]
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	691b      	ldr	r3, [r3, #16]
 800f280:	021a      	lsls	r2, r3, #8
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	430a      	orrs	r2, r1
 800f288:	61da      	str	r2, [r3, #28]
      break;
 800f28a:	e002      	b.n	800f292 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800f28c:	2301      	movs	r3, #1
 800f28e:	75fb      	strb	r3, [r7, #23]
      break;
 800f290:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	2200      	movs	r2, #0
 800f296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f29a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f29c:	4618      	mov	r0, r3
 800f29e:	3718      	adds	r7, #24
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}

0800f2a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b084      	sub	sp, #16
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
 800f2ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f2b8:	2b01      	cmp	r3, #1
 800f2ba:	d101      	bne.n	800f2c0 <HAL_TIM_ConfigClockSource+0x1c>
 800f2bc:	2302      	movs	r3, #2
 800f2be:	e0b4      	b.n	800f42a <HAL_TIM_ConfigClockSource+0x186>
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2201      	movs	r2, #1
 800f2c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2202      	movs	r2, #2
 800f2cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	689b      	ldr	r3, [r3, #8]
 800f2d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800f2de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f2e0:	68bb      	ldr	r3, [r7, #8]
 800f2e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f2e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	68ba      	ldr	r2, [r7, #8]
 800f2ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f2f8:	d03e      	beq.n	800f378 <HAL_TIM_ConfigClockSource+0xd4>
 800f2fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f2fe:	f200 8087 	bhi.w	800f410 <HAL_TIM_ConfigClockSource+0x16c>
 800f302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f306:	f000 8086 	beq.w	800f416 <HAL_TIM_ConfigClockSource+0x172>
 800f30a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f30e:	d87f      	bhi.n	800f410 <HAL_TIM_ConfigClockSource+0x16c>
 800f310:	2b70      	cmp	r3, #112	; 0x70
 800f312:	d01a      	beq.n	800f34a <HAL_TIM_ConfigClockSource+0xa6>
 800f314:	2b70      	cmp	r3, #112	; 0x70
 800f316:	d87b      	bhi.n	800f410 <HAL_TIM_ConfigClockSource+0x16c>
 800f318:	2b60      	cmp	r3, #96	; 0x60
 800f31a:	d050      	beq.n	800f3be <HAL_TIM_ConfigClockSource+0x11a>
 800f31c:	2b60      	cmp	r3, #96	; 0x60
 800f31e:	d877      	bhi.n	800f410 <HAL_TIM_ConfigClockSource+0x16c>
 800f320:	2b50      	cmp	r3, #80	; 0x50
 800f322:	d03c      	beq.n	800f39e <HAL_TIM_ConfigClockSource+0xfa>
 800f324:	2b50      	cmp	r3, #80	; 0x50
 800f326:	d873      	bhi.n	800f410 <HAL_TIM_ConfigClockSource+0x16c>
 800f328:	2b40      	cmp	r3, #64	; 0x40
 800f32a:	d058      	beq.n	800f3de <HAL_TIM_ConfigClockSource+0x13a>
 800f32c:	2b40      	cmp	r3, #64	; 0x40
 800f32e:	d86f      	bhi.n	800f410 <HAL_TIM_ConfigClockSource+0x16c>
 800f330:	2b30      	cmp	r3, #48	; 0x30
 800f332:	d064      	beq.n	800f3fe <HAL_TIM_ConfigClockSource+0x15a>
 800f334:	2b30      	cmp	r3, #48	; 0x30
 800f336:	d86b      	bhi.n	800f410 <HAL_TIM_ConfigClockSource+0x16c>
 800f338:	2b20      	cmp	r3, #32
 800f33a:	d060      	beq.n	800f3fe <HAL_TIM_ConfigClockSource+0x15a>
 800f33c:	2b20      	cmp	r3, #32
 800f33e:	d867      	bhi.n	800f410 <HAL_TIM_ConfigClockSource+0x16c>
 800f340:	2b00      	cmp	r3, #0
 800f342:	d05c      	beq.n	800f3fe <HAL_TIM_ConfigClockSource+0x15a>
 800f344:	2b10      	cmp	r3, #16
 800f346:	d05a      	beq.n	800f3fe <HAL_TIM_ConfigClockSource+0x15a>
 800f348:	e062      	b.n	800f410 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	6818      	ldr	r0, [r3, #0]
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	6899      	ldr	r1, [r3, #8]
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	685a      	ldr	r2, [r3, #4]
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	68db      	ldr	r3, [r3, #12]
 800f35a:	f000 fb5d 	bl	800fa18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	689b      	ldr	r3, [r3, #8]
 800f364:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f36c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	68ba      	ldr	r2, [r7, #8]
 800f374:	609a      	str	r2, [r3, #8]
      break;
 800f376:	e04f      	b.n	800f418 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	6818      	ldr	r0, [r3, #0]
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	6899      	ldr	r1, [r3, #8]
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	685a      	ldr	r2, [r3, #4]
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	68db      	ldr	r3, [r3, #12]
 800f388:	f000 fb46 	bl	800fa18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	689a      	ldr	r2, [r3, #8]
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f39a:	609a      	str	r2, [r3, #8]
      break;
 800f39c:	e03c      	b.n	800f418 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	6818      	ldr	r0, [r3, #0]
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	6859      	ldr	r1, [r3, #4]
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	68db      	ldr	r3, [r3, #12]
 800f3aa:	461a      	mov	r2, r3
 800f3ac:	f000 faba 	bl	800f924 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	2150      	movs	r1, #80	; 0x50
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f000 fb13 	bl	800f9e2 <TIM_ITRx_SetConfig>
      break;
 800f3bc:	e02c      	b.n	800f418 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	6818      	ldr	r0, [r3, #0]
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	6859      	ldr	r1, [r3, #4]
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	68db      	ldr	r3, [r3, #12]
 800f3ca:	461a      	mov	r2, r3
 800f3cc:	f000 fad9 	bl	800f982 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	2160      	movs	r1, #96	; 0x60
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f000 fb03 	bl	800f9e2 <TIM_ITRx_SetConfig>
      break;
 800f3dc:	e01c      	b.n	800f418 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	6818      	ldr	r0, [r3, #0]
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	6859      	ldr	r1, [r3, #4]
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	68db      	ldr	r3, [r3, #12]
 800f3ea:	461a      	mov	r2, r3
 800f3ec:	f000 fa9a 	bl	800f924 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	2140      	movs	r1, #64	; 0x40
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f000 faf3 	bl	800f9e2 <TIM_ITRx_SetConfig>
      break;
 800f3fc:	e00c      	b.n	800f418 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681a      	ldr	r2, [r3, #0]
 800f402:	683b      	ldr	r3, [r7, #0]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	4619      	mov	r1, r3
 800f408:	4610      	mov	r0, r2
 800f40a:	f000 faea 	bl	800f9e2 <TIM_ITRx_SetConfig>
      break;
 800f40e:	e003      	b.n	800f418 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800f410:	2301      	movs	r3, #1
 800f412:	73fb      	strb	r3, [r7, #15]
      break;
 800f414:	e000      	b.n	800f418 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800f416:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2201      	movs	r2, #1
 800f41c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2200      	movs	r2, #0
 800f424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f428:	7bfb      	ldrb	r3, [r7, #15]
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	3710      	adds	r7, #16
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}

0800f432 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f432:	b480      	push	{r7}
 800f434:	b083      	sub	sp, #12
 800f436:	af00      	add	r7, sp, #0
 800f438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f43a:	bf00      	nop
 800f43c:	370c      	adds	r7, #12
 800f43e:	46bd      	mov	sp, r7
 800f440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f444:	4770      	bx	lr

0800f446 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f446:	b480      	push	{r7}
 800f448:	b083      	sub	sp, #12
 800f44a:	af00      	add	r7, sp, #0
 800f44c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f44e:	bf00      	nop
 800f450:	370c      	adds	r7, #12
 800f452:	46bd      	mov	sp, r7
 800f454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f458:	4770      	bx	lr

0800f45a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f45a:	b480      	push	{r7}
 800f45c:	b083      	sub	sp, #12
 800f45e:	af00      	add	r7, sp, #0
 800f460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f462:	bf00      	nop
 800f464:	370c      	adds	r7, #12
 800f466:	46bd      	mov	sp, r7
 800f468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46c:	4770      	bx	lr

0800f46e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f46e:	b480      	push	{r7}
 800f470:	b083      	sub	sp, #12
 800f472:	af00      	add	r7, sp, #0
 800f474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f476:	bf00      	nop
 800f478:	370c      	adds	r7, #12
 800f47a:	46bd      	mov	sp, r7
 800f47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f480:	4770      	bx	lr
	...

0800f484 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f484:	b480      	push	{r7}
 800f486:	b085      	sub	sp, #20
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
 800f48c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	4a40      	ldr	r2, [pc, #256]	; (800f598 <TIM_Base_SetConfig+0x114>)
 800f498:	4293      	cmp	r3, r2
 800f49a:	d013      	beq.n	800f4c4 <TIM_Base_SetConfig+0x40>
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4a2:	d00f      	beq.n	800f4c4 <TIM_Base_SetConfig+0x40>
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	4a3d      	ldr	r2, [pc, #244]	; (800f59c <TIM_Base_SetConfig+0x118>)
 800f4a8:	4293      	cmp	r3, r2
 800f4aa:	d00b      	beq.n	800f4c4 <TIM_Base_SetConfig+0x40>
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	4a3c      	ldr	r2, [pc, #240]	; (800f5a0 <TIM_Base_SetConfig+0x11c>)
 800f4b0:	4293      	cmp	r3, r2
 800f4b2:	d007      	beq.n	800f4c4 <TIM_Base_SetConfig+0x40>
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	4a3b      	ldr	r2, [pc, #236]	; (800f5a4 <TIM_Base_SetConfig+0x120>)
 800f4b8:	4293      	cmp	r3, r2
 800f4ba:	d003      	beq.n	800f4c4 <TIM_Base_SetConfig+0x40>
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	4a3a      	ldr	r2, [pc, #232]	; (800f5a8 <TIM_Base_SetConfig+0x124>)
 800f4c0:	4293      	cmp	r3, r2
 800f4c2:	d108      	bne.n	800f4d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	685b      	ldr	r3, [r3, #4]
 800f4d0:	68fa      	ldr	r2, [r7, #12]
 800f4d2:	4313      	orrs	r3, r2
 800f4d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	4a2f      	ldr	r2, [pc, #188]	; (800f598 <TIM_Base_SetConfig+0x114>)
 800f4da:	4293      	cmp	r3, r2
 800f4dc:	d02b      	beq.n	800f536 <TIM_Base_SetConfig+0xb2>
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4e4:	d027      	beq.n	800f536 <TIM_Base_SetConfig+0xb2>
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	4a2c      	ldr	r2, [pc, #176]	; (800f59c <TIM_Base_SetConfig+0x118>)
 800f4ea:	4293      	cmp	r3, r2
 800f4ec:	d023      	beq.n	800f536 <TIM_Base_SetConfig+0xb2>
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	4a2b      	ldr	r2, [pc, #172]	; (800f5a0 <TIM_Base_SetConfig+0x11c>)
 800f4f2:	4293      	cmp	r3, r2
 800f4f4:	d01f      	beq.n	800f536 <TIM_Base_SetConfig+0xb2>
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	4a2a      	ldr	r2, [pc, #168]	; (800f5a4 <TIM_Base_SetConfig+0x120>)
 800f4fa:	4293      	cmp	r3, r2
 800f4fc:	d01b      	beq.n	800f536 <TIM_Base_SetConfig+0xb2>
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	4a29      	ldr	r2, [pc, #164]	; (800f5a8 <TIM_Base_SetConfig+0x124>)
 800f502:	4293      	cmp	r3, r2
 800f504:	d017      	beq.n	800f536 <TIM_Base_SetConfig+0xb2>
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	4a28      	ldr	r2, [pc, #160]	; (800f5ac <TIM_Base_SetConfig+0x128>)
 800f50a:	4293      	cmp	r3, r2
 800f50c:	d013      	beq.n	800f536 <TIM_Base_SetConfig+0xb2>
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	4a27      	ldr	r2, [pc, #156]	; (800f5b0 <TIM_Base_SetConfig+0x12c>)
 800f512:	4293      	cmp	r3, r2
 800f514:	d00f      	beq.n	800f536 <TIM_Base_SetConfig+0xb2>
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	4a26      	ldr	r2, [pc, #152]	; (800f5b4 <TIM_Base_SetConfig+0x130>)
 800f51a:	4293      	cmp	r3, r2
 800f51c:	d00b      	beq.n	800f536 <TIM_Base_SetConfig+0xb2>
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	4a25      	ldr	r2, [pc, #148]	; (800f5b8 <TIM_Base_SetConfig+0x134>)
 800f522:	4293      	cmp	r3, r2
 800f524:	d007      	beq.n	800f536 <TIM_Base_SetConfig+0xb2>
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	4a24      	ldr	r2, [pc, #144]	; (800f5bc <TIM_Base_SetConfig+0x138>)
 800f52a:	4293      	cmp	r3, r2
 800f52c:	d003      	beq.n	800f536 <TIM_Base_SetConfig+0xb2>
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	4a23      	ldr	r2, [pc, #140]	; (800f5c0 <TIM_Base_SetConfig+0x13c>)
 800f532:	4293      	cmp	r3, r2
 800f534:	d108      	bne.n	800f548 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f53c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	68db      	ldr	r3, [r3, #12]
 800f542:	68fa      	ldr	r2, [r7, #12]
 800f544:	4313      	orrs	r3, r2
 800f546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	695b      	ldr	r3, [r3, #20]
 800f552:	4313      	orrs	r3, r2
 800f554:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	68fa      	ldr	r2, [r7, #12]
 800f55a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	689a      	ldr	r2, [r3, #8]
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	681a      	ldr	r2, [r3, #0]
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	4a0a      	ldr	r2, [pc, #40]	; (800f598 <TIM_Base_SetConfig+0x114>)
 800f570:	4293      	cmp	r3, r2
 800f572:	d003      	beq.n	800f57c <TIM_Base_SetConfig+0xf8>
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	4a0c      	ldr	r2, [pc, #48]	; (800f5a8 <TIM_Base_SetConfig+0x124>)
 800f578:	4293      	cmp	r3, r2
 800f57a:	d103      	bne.n	800f584 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	691a      	ldr	r2, [r3, #16]
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	2201      	movs	r2, #1
 800f588:	615a      	str	r2, [r3, #20]
}
 800f58a:	bf00      	nop
 800f58c:	3714      	adds	r7, #20
 800f58e:	46bd      	mov	sp, r7
 800f590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f594:	4770      	bx	lr
 800f596:	bf00      	nop
 800f598:	40010000 	.word	0x40010000
 800f59c:	40000400 	.word	0x40000400
 800f5a0:	40000800 	.word	0x40000800
 800f5a4:	40000c00 	.word	0x40000c00
 800f5a8:	40010400 	.word	0x40010400
 800f5ac:	40014000 	.word	0x40014000
 800f5b0:	40014400 	.word	0x40014400
 800f5b4:	40014800 	.word	0x40014800
 800f5b8:	40001800 	.word	0x40001800
 800f5bc:	40001c00 	.word	0x40001c00
 800f5c0:	40002000 	.word	0x40002000

0800f5c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f5c4:	b480      	push	{r7}
 800f5c6:	b087      	sub	sp, #28
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
 800f5cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	6a1b      	ldr	r3, [r3, #32]
 800f5d2:	f023 0201 	bic.w	r2, r3, #1
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	6a1b      	ldr	r3, [r3, #32]
 800f5de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	685b      	ldr	r3, [r3, #4]
 800f5e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	699b      	ldr	r3, [r3, #24]
 800f5ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	f023 0303 	bic.w	r3, r3, #3
 800f5fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	68fa      	ldr	r2, [r7, #12]
 800f602:	4313      	orrs	r3, r2
 800f604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	f023 0302 	bic.w	r3, r3, #2
 800f60c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	689b      	ldr	r3, [r3, #8]
 800f612:	697a      	ldr	r2, [r7, #20]
 800f614:	4313      	orrs	r3, r2
 800f616:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	4a20      	ldr	r2, [pc, #128]	; (800f69c <TIM_OC1_SetConfig+0xd8>)
 800f61c:	4293      	cmp	r3, r2
 800f61e:	d003      	beq.n	800f628 <TIM_OC1_SetConfig+0x64>
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	4a1f      	ldr	r2, [pc, #124]	; (800f6a0 <TIM_OC1_SetConfig+0xdc>)
 800f624:	4293      	cmp	r3, r2
 800f626:	d10c      	bne.n	800f642 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f628:	697b      	ldr	r3, [r7, #20]
 800f62a:	f023 0308 	bic.w	r3, r3, #8
 800f62e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	68db      	ldr	r3, [r3, #12]
 800f634:	697a      	ldr	r2, [r7, #20]
 800f636:	4313      	orrs	r3, r2
 800f638:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f63a:	697b      	ldr	r3, [r7, #20]
 800f63c:	f023 0304 	bic.w	r3, r3, #4
 800f640:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	4a15      	ldr	r2, [pc, #84]	; (800f69c <TIM_OC1_SetConfig+0xd8>)
 800f646:	4293      	cmp	r3, r2
 800f648:	d003      	beq.n	800f652 <TIM_OC1_SetConfig+0x8e>
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	4a14      	ldr	r2, [pc, #80]	; (800f6a0 <TIM_OC1_SetConfig+0xdc>)
 800f64e:	4293      	cmp	r3, r2
 800f650:	d111      	bne.n	800f676 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f652:	693b      	ldr	r3, [r7, #16]
 800f654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f65a:	693b      	ldr	r3, [r7, #16]
 800f65c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	695b      	ldr	r3, [r3, #20]
 800f666:	693a      	ldr	r2, [r7, #16]
 800f668:	4313      	orrs	r3, r2
 800f66a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	699b      	ldr	r3, [r3, #24]
 800f670:	693a      	ldr	r2, [r7, #16]
 800f672:	4313      	orrs	r3, r2
 800f674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	693a      	ldr	r2, [r7, #16]
 800f67a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	68fa      	ldr	r2, [r7, #12]
 800f680:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f682:	683b      	ldr	r3, [r7, #0]
 800f684:	685a      	ldr	r2, [r3, #4]
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	697a      	ldr	r2, [r7, #20]
 800f68e:	621a      	str	r2, [r3, #32]
}
 800f690:	bf00      	nop
 800f692:	371c      	adds	r7, #28
 800f694:	46bd      	mov	sp, r7
 800f696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69a:	4770      	bx	lr
 800f69c:	40010000 	.word	0x40010000
 800f6a0:	40010400 	.word	0x40010400

0800f6a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b087      	sub	sp, #28
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
 800f6ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	6a1b      	ldr	r3, [r3, #32]
 800f6b2:	f023 0210 	bic.w	r2, r3, #16
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	6a1b      	ldr	r3, [r3, #32]
 800f6be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	685b      	ldr	r3, [r3, #4]
 800f6c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	699b      	ldr	r3, [r3, #24]
 800f6ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f6d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f6da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	021b      	lsls	r3, r3, #8
 800f6e2:	68fa      	ldr	r2, [r7, #12]
 800f6e4:	4313      	orrs	r3, r2
 800f6e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	f023 0320 	bic.w	r3, r3, #32
 800f6ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	689b      	ldr	r3, [r3, #8]
 800f6f4:	011b      	lsls	r3, r3, #4
 800f6f6:	697a      	ldr	r2, [r7, #20]
 800f6f8:	4313      	orrs	r3, r2
 800f6fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	4a22      	ldr	r2, [pc, #136]	; (800f788 <TIM_OC2_SetConfig+0xe4>)
 800f700:	4293      	cmp	r3, r2
 800f702:	d003      	beq.n	800f70c <TIM_OC2_SetConfig+0x68>
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	4a21      	ldr	r2, [pc, #132]	; (800f78c <TIM_OC2_SetConfig+0xe8>)
 800f708:	4293      	cmp	r3, r2
 800f70a:	d10d      	bne.n	800f728 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f70c:	697b      	ldr	r3, [r7, #20]
 800f70e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	68db      	ldr	r3, [r3, #12]
 800f718:	011b      	lsls	r3, r3, #4
 800f71a:	697a      	ldr	r2, [r7, #20]
 800f71c:	4313      	orrs	r3, r2
 800f71e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f720:	697b      	ldr	r3, [r7, #20]
 800f722:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f726:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	4a17      	ldr	r2, [pc, #92]	; (800f788 <TIM_OC2_SetConfig+0xe4>)
 800f72c:	4293      	cmp	r3, r2
 800f72e:	d003      	beq.n	800f738 <TIM_OC2_SetConfig+0x94>
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	4a16      	ldr	r2, [pc, #88]	; (800f78c <TIM_OC2_SetConfig+0xe8>)
 800f734:	4293      	cmp	r3, r2
 800f736:	d113      	bne.n	800f760 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f738:	693b      	ldr	r3, [r7, #16]
 800f73a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f73e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f740:	693b      	ldr	r3, [r7, #16]
 800f742:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f746:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	695b      	ldr	r3, [r3, #20]
 800f74c:	009b      	lsls	r3, r3, #2
 800f74e:	693a      	ldr	r2, [r7, #16]
 800f750:	4313      	orrs	r3, r2
 800f752:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	699b      	ldr	r3, [r3, #24]
 800f758:	009b      	lsls	r3, r3, #2
 800f75a:	693a      	ldr	r2, [r7, #16]
 800f75c:	4313      	orrs	r3, r2
 800f75e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	693a      	ldr	r2, [r7, #16]
 800f764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	68fa      	ldr	r2, [r7, #12]
 800f76a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	685a      	ldr	r2, [r3, #4]
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	697a      	ldr	r2, [r7, #20]
 800f778:	621a      	str	r2, [r3, #32]
}
 800f77a:	bf00      	nop
 800f77c:	371c      	adds	r7, #28
 800f77e:	46bd      	mov	sp, r7
 800f780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f784:	4770      	bx	lr
 800f786:	bf00      	nop
 800f788:	40010000 	.word	0x40010000
 800f78c:	40010400 	.word	0x40010400

0800f790 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f790:	b480      	push	{r7}
 800f792:	b087      	sub	sp, #28
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
 800f798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6a1b      	ldr	r3, [r3, #32]
 800f79e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6a1b      	ldr	r3, [r3, #32]
 800f7aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	69db      	ldr	r3, [r3, #28]
 800f7b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	f023 0303 	bic.w	r3, r3, #3
 800f7c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	68fa      	ldr	r2, [r7, #12]
 800f7ce:	4313      	orrs	r3, r2
 800f7d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f7d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	689b      	ldr	r3, [r3, #8]
 800f7de:	021b      	lsls	r3, r3, #8
 800f7e0:	697a      	ldr	r2, [r7, #20]
 800f7e2:	4313      	orrs	r3, r2
 800f7e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	4a21      	ldr	r2, [pc, #132]	; (800f870 <TIM_OC3_SetConfig+0xe0>)
 800f7ea:	4293      	cmp	r3, r2
 800f7ec:	d003      	beq.n	800f7f6 <TIM_OC3_SetConfig+0x66>
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	4a20      	ldr	r2, [pc, #128]	; (800f874 <TIM_OC3_SetConfig+0xe4>)
 800f7f2:	4293      	cmp	r3, r2
 800f7f4:	d10d      	bne.n	800f812 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f7fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f7fe:	683b      	ldr	r3, [r7, #0]
 800f800:	68db      	ldr	r3, [r3, #12]
 800f802:	021b      	lsls	r3, r3, #8
 800f804:	697a      	ldr	r2, [r7, #20]
 800f806:	4313      	orrs	r3, r2
 800f808:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f80a:	697b      	ldr	r3, [r7, #20]
 800f80c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f810:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	4a16      	ldr	r2, [pc, #88]	; (800f870 <TIM_OC3_SetConfig+0xe0>)
 800f816:	4293      	cmp	r3, r2
 800f818:	d003      	beq.n	800f822 <TIM_OC3_SetConfig+0x92>
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	4a15      	ldr	r2, [pc, #84]	; (800f874 <TIM_OC3_SetConfig+0xe4>)
 800f81e:	4293      	cmp	r3, r2
 800f820:	d113      	bne.n	800f84a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f822:	693b      	ldr	r3, [r7, #16]
 800f824:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f82a:	693b      	ldr	r3, [r7, #16]
 800f82c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	695b      	ldr	r3, [r3, #20]
 800f836:	011b      	lsls	r3, r3, #4
 800f838:	693a      	ldr	r2, [r7, #16]
 800f83a:	4313      	orrs	r3, r2
 800f83c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	699b      	ldr	r3, [r3, #24]
 800f842:	011b      	lsls	r3, r3, #4
 800f844:	693a      	ldr	r2, [r7, #16]
 800f846:	4313      	orrs	r3, r2
 800f848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	693a      	ldr	r2, [r7, #16]
 800f84e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	68fa      	ldr	r2, [r7, #12]
 800f854:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	685a      	ldr	r2, [r3, #4]
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	697a      	ldr	r2, [r7, #20]
 800f862:	621a      	str	r2, [r3, #32]
}
 800f864:	bf00      	nop
 800f866:	371c      	adds	r7, #28
 800f868:	46bd      	mov	sp, r7
 800f86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86e:	4770      	bx	lr
 800f870:	40010000 	.word	0x40010000
 800f874:	40010400 	.word	0x40010400

0800f878 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f878:	b480      	push	{r7}
 800f87a:	b087      	sub	sp, #28
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
 800f880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6a1b      	ldr	r3, [r3, #32]
 800f886:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	6a1b      	ldr	r3, [r3, #32]
 800f892:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	685b      	ldr	r3, [r3, #4]
 800f898:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	69db      	ldr	r3, [r3, #28]
 800f89e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f8a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f8ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f8b0:	683b      	ldr	r3, [r7, #0]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	021b      	lsls	r3, r3, #8
 800f8b6:	68fa      	ldr	r2, [r7, #12]
 800f8b8:	4313      	orrs	r3, r2
 800f8ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f8bc:	693b      	ldr	r3, [r7, #16]
 800f8be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f8c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	689b      	ldr	r3, [r3, #8]
 800f8c8:	031b      	lsls	r3, r3, #12
 800f8ca:	693a      	ldr	r2, [r7, #16]
 800f8cc:	4313      	orrs	r3, r2
 800f8ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	4a12      	ldr	r2, [pc, #72]	; (800f91c <TIM_OC4_SetConfig+0xa4>)
 800f8d4:	4293      	cmp	r3, r2
 800f8d6:	d003      	beq.n	800f8e0 <TIM_OC4_SetConfig+0x68>
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	4a11      	ldr	r2, [pc, #68]	; (800f920 <TIM_OC4_SetConfig+0xa8>)
 800f8dc:	4293      	cmp	r3, r2
 800f8de:	d109      	bne.n	800f8f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f8e0:	697b      	ldr	r3, [r7, #20]
 800f8e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f8e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	695b      	ldr	r3, [r3, #20]
 800f8ec:	019b      	lsls	r3, r3, #6
 800f8ee:	697a      	ldr	r2, [r7, #20]
 800f8f0:	4313      	orrs	r3, r2
 800f8f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	697a      	ldr	r2, [r7, #20]
 800f8f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	68fa      	ldr	r2, [r7, #12]
 800f8fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	685a      	ldr	r2, [r3, #4]
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	693a      	ldr	r2, [r7, #16]
 800f90c:	621a      	str	r2, [r3, #32]
}
 800f90e:	bf00      	nop
 800f910:	371c      	adds	r7, #28
 800f912:	46bd      	mov	sp, r7
 800f914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f918:	4770      	bx	lr
 800f91a:	bf00      	nop
 800f91c:	40010000 	.word	0x40010000
 800f920:	40010400 	.word	0x40010400

0800f924 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f924:	b480      	push	{r7}
 800f926:	b087      	sub	sp, #28
 800f928:	af00      	add	r7, sp, #0
 800f92a:	60f8      	str	r0, [r7, #12]
 800f92c:	60b9      	str	r1, [r7, #8]
 800f92e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	6a1b      	ldr	r3, [r3, #32]
 800f934:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	6a1b      	ldr	r3, [r3, #32]
 800f93a:	f023 0201 	bic.w	r2, r3, #1
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	699b      	ldr	r3, [r3, #24]
 800f946:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f948:	693b      	ldr	r3, [r7, #16]
 800f94a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f94e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	011b      	lsls	r3, r3, #4
 800f954:	693a      	ldr	r2, [r7, #16]
 800f956:	4313      	orrs	r3, r2
 800f958:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f95a:	697b      	ldr	r3, [r7, #20]
 800f95c:	f023 030a 	bic.w	r3, r3, #10
 800f960:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f962:	697a      	ldr	r2, [r7, #20]
 800f964:	68bb      	ldr	r3, [r7, #8]
 800f966:	4313      	orrs	r3, r2
 800f968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	693a      	ldr	r2, [r7, #16]
 800f96e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	697a      	ldr	r2, [r7, #20]
 800f974:	621a      	str	r2, [r3, #32]
}
 800f976:	bf00      	nop
 800f978:	371c      	adds	r7, #28
 800f97a:	46bd      	mov	sp, r7
 800f97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f980:	4770      	bx	lr

0800f982 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f982:	b480      	push	{r7}
 800f984:	b087      	sub	sp, #28
 800f986:	af00      	add	r7, sp, #0
 800f988:	60f8      	str	r0, [r7, #12]
 800f98a:	60b9      	str	r1, [r7, #8]
 800f98c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	6a1b      	ldr	r3, [r3, #32]
 800f992:	f023 0210 	bic.w	r2, r3, #16
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	699b      	ldr	r3, [r3, #24]
 800f99e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	6a1b      	ldr	r3, [r3, #32]
 800f9a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f9a6:	697b      	ldr	r3, [r7, #20]
 800f9a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f9ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	031b      	lsls	r3, r3, #12
 800f9b2:	697a      	ldr	r2, [r7, #20]
 800f9b4:	4313      	orrs	r3, r2
 800f9b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f9b8:	693b      	ldr	r3, [r7, #16]
 800f9ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f9be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f9c0:	68bb      	ldr	r3, [r7, #8]
 800f9c2:	011b      	lsls	r3, r3, #4
 800f9c4:	693a      	ldr	r2, [r7, #16]
 800f9c6:	4313      	orrs	r3, r2
 800f9c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	697a      	ldr	r2, [r7, #20]
 800f9ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	693a      	ldr	r2, [r7, #16]
 800f9d4:	621a      	str	r2, [r3, #32]
}
 800f9d6:	bf00      	nop
 800f9d8:	371c      	adds	r7, #28
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e0:	4770      	bx	lr

0800f9e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f9e2:	b480      	push	{r7}
 800f9e4:	b085      	sub	sp, #20
 800f9e6:	af00      	add	r7, sp, #0
 800f9e8:	6078      	str	r0, [r7, #4]
 800f9ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	689b      	ldr	r3, [r3, #8]
 800f9f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f9f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f9fa:	683a      	ldr	r2, [r7, #0]
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	4313      	orrs	r3, r2
 800fa00:	f043 0307 	orr.w	r3, r3, #7
 800fa04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	68fa      	ldr	r2, [r7, #12]
 800fa0a:	609a      	str	r2, [r3, #8]
}
 800fa0c:	bf00      	nop
 800fa0e:	3714      	adds	r7, #20
 800fa10:	46bd      	mov	sp, r7
 800fa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa16:	4770      	bx	lr

0800fa18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fa18:	b480      	push	{r7}
 800fa1a:	b087      	sub	sp, #28
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	60f8      	str	r0, [r7, #12]
 800fa20:	60b9      	str	r1, [r7, #8]
 800fa22:	607a      	str	r2, [r7, #4]
 800fa24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	689b      	ldr	r3, [r3, #8]
 800fa2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fa2c:	697b      	ldr	r3, [r7, #20]
 800fa2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fa32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	021a      	lsls	r2, r3, #8
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	431a      	orrs	r2, r3
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	4313      	orrs	r3, r2
 800fa40:	697a      	ldr	r2, [r7, #20]
 800fa42:	4313      	orrs	r3, r2
 800fa44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	697a      	ldr	r2, [r7, #20]
 800fa4a:	609a      	str	r2, [r3, #8]
}
 800fa4c:	bf00      	nop
 800fa4e:	371c      	adds	r7, #28
 800fa50:	46bd      	mov	sp, r7
 800fa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa56:	4770      	bx	lr

0800fa58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fa58:	b480      	push	{r7}
 800fa5a:	b087      	sub	sp, #28
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	60f8      	str	r0, [r7, #12]
 800fa60:	60b9      	str	r1, [r7, #8]
 800fa62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fa64:	68bb      	ldr	r3, [r7, #8]
 800fa66:	f003 031f 	and.w	r3, r3, #31
 800fa6a:	2201      	movs	r2, #1
 800fa6c:	fa02 f303 	lsl.w	r3, r2, r3
 800fa70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	6a1a      	ldr	r2, [r3, #32]
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	43db      	mvns	r3, r3
 800fa7a:	401a      	ands	r2, r3
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	6a1a      	ldr	r2, [r3, #32]
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	f003 031f 	and.w	r3, r3, #31
 800fa8a:	6879      	ldr	r1, [r7, #4]
 800fa8c:	fa01 f303 	lsl.w	r3, r1, r3
 800fa90:	431a      	orrs	r2, r3
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	621a      	str	r2, [r3, #32]
}
 800fa96:	bf00      	nop
 800fa98:	371c      	adds	r7, #28
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa0:	4770      	bx	lr
	...

0800faa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800faa4:	b480      	push	{r7}
 800faa6:	b085      	sub	sp, #20
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
 800faac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fab4:	2b01      	cmp	r3, #1
 800fab6:	d101      	bne.n	800fabc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fab8:	2302      	movs	r3, #2
 800faba:	e05a      	b.n	800fb72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2201      	movs	r2, #1
 800fac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2202      	movs	r2, #2
 800fac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	685b      	ldr	r3, [r3, #4]
 800fad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	689b      	ldr	r3, [r3, #8]
 800fada:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fae2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fae4:	683b      	ldr	r3, [r7, #0]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	68fa      	ldr	r2, [r7, #12]
 800faea:	4313      	orrs	r3, r2
 800faec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	68fa      	ldr	r2, [r7, #12]
 800faf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	4a21      	ldr	r2, [pc, #132]	; (800fb80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800fafc:	4293      	cmp	r3, r2
 800fafe:	d022      	beq.n	800fb46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fb08:	d01d      	beq.n	800fb46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	4a1d      	ldr	r2, [pc, #116]	; (800fb84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800fb10:	4293      	cmp	r3, r2
 800fb12:	d018      	beq.n	800fb46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	4a1b      	ldr	r2, [pc, #108]	; (800fb88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800fb1a:	4293      	cmp	r3, r2
 800fb1c:	d013      	beq.n	800fb46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	4a1a      	ldr	r2, [pc, #104]	; (800fb8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800fb24:	4293      	cmp	r3, r2
 800fb26:	d00e      	beq.n	800fb46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	4a18      	ldr	r2, [pc, #96]	; (800fb90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800fb2e:	4293      	cmp	r3, r2
 800fb30:	d009      	beq.n	800fb46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	4a17      	ldr	r2, [pc, #92]	; (800fb94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800fb38:	4293      	cmp	r3, r2
 800fb3a:	d004      	beq.n	800fb46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	4a15      	ldr	r2, [pc, #84]	; (800fb98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800fb42:	4293      	cmp	r3, r2
 800fb44:	d10c      	bne.n	800fb60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fb46:	68bb      	ldr	r3, [r7, #8]
 800fb48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fb4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fb4e:	683b      	ldr	r3, [r7, #0]
 800fb50:	685b      	ldr	r3, [r3, #4]
 800fb52:	68ba      	ldr	r2, [r7, #8]
 800fb54:	4313      	orrs	r3, r2
 800fb56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	68ba      	ldr	r2, [r7, #8]
 800fb5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2201      	movs	r2, #1
 800fb64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fb70:	2300      	movs	r3, #0
}
 800fb72:	4618      	mov	r0, r3
 800fb74:	3714      	adds	r7, #20
 800fb76:	46bd      	mov	sp, r7
 800fb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7c:	4770      	bx	lr
 800fb7e:	bf00      	nop
 800fb80:	40010000 	.word	0x40010000
 800fb84:	40000400 	.word	0x40000400
 800fb88:	40000800 	.word	0x40000800
 800fb8c:	40000c00 	.word	0x40000c00
 800fb90:	40010400 	.word	0x40010400
 800fb94:	40014000 	.word	0x40014000
 800fb98:	40001800 	.word	0x40001800

0800fb9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fb9c:	b480      	push	{r7}
 800fb9e:	b083      	sub	sp, #12
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fba4:	bf00      	nop
 800fba6:	370c      	adds	r7, #12
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbae:	4770      	bx	lr

0800fbb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fbb0:	b480      	push	{r7}
 800fbb2:	b083      	sub	sp, #12
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fbb8:	bf00      	nop
 800fbba:	370c      	adds	r7, #12
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc2:	4770      	bx	lr

0800fbc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b082      	sub	sp, #8
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d101      	bne.n	800fbd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fbd2:	2301      	movs	r3, #1
 800fbd4:	e03f      	b.n	800fc56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fbdc:	b2db      	uxtb	r3, r3
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d106      	bne.n	800fbf0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fbea:	6878      	ldr	r0, [r7, #4]
 800fbec:	f7f3 fd0c 	bl	8003608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2224      	movs	r2, #36	; 0x24
 800fbf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	68da      	ldr	r2, [r3, #12]
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fc06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800fc08:	6878      	ldr	r0, [r7, #4]
 800fc0a:	f000 f9cb 	bl	800ffa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	691a      	ldr	r2, [r3, #16]
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fc1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	695a      	ldr	r2, [r3, #20]
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fc2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	68da      	ldr	r2, [r3, #12]
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fc3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	2200      	movs	r2, #0
 800fc42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	2220      	movs	r2, #32
 800fc48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	2220      	movs	r2, #32
 800fc50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800fc54:	2300      	movs	r3, #0
}
 800fc56:	4618      	mov	r0, r3
 800fc58:	3708      	adds	r7, #8
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	bd80      	pop	{r7, pc}

0800fc5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fc5e:	b580      	push	{r7, lr}
 800fc60:	b08a      	sub	sp, #40	; 0x28
 800fc62:	af02      	add	r7, sp, #8
 800fc64:	60f8      	str	r0, [r7, #12]
 800fc66:	60b9      	str	r1, [r7, #8]
 800fc68:	603b      	str	r3, [r7, #0]
 800fc6a:	4613      	mov	r3, r2
 800fc6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800fc6e:	2300      	movs	r3, #0
 800fc70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fc78:	b2db      	uxtb	r3, r3
 800fc7a:	2b20      	cmp	r3, #32
 800fc7c:	d17c      	bne.n	800fd78 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800fc7e:	68bb      	ldr	r3, [r7, #8]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d002      	beq.n	800fc8a <HAL_UART_Transmit+0x2c>
 800fc84:	88fb      	ldrh	r3, [r7, #6]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d101      	bne.n	800fc8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	e075      	b.n	800fd7a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fc94:	2b01      	cmp	r3, #1
 800fc96:	d101      	bne.n	800fc9c <HAL_UART_Transmit+0x3e>
 800fc98:	2302      	movs	r3, #2
 800fc9a:	e06e      	b.n	800fd7a <HAL_UART_Transmit+0x11c>
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	2201      	movs	r2, #1
 800fca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	2200      	movs	r2, #0
 800fca8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	2221      	movs	r2, #33	; 0x21
 800fcae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fcb2:	f7fa fc7b 	bl	800a5ac <HAL_GetTick>
 800fcb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	88fa      	ldrh	r2, [r7, #6]
 800fcbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	88fa      	ldrh	r2, [r7, #6]
 800fcc2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	689b      	ldr	r3, [r3, #8]
 800fcc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fccc:	d108      	bne.n	800fce0 <HAL_UART_Transmit+0x82>
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	691b      	ldr	r3, [r3, #16]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d104      	bne.n	800fce0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	61bb      	str	r3, [r7, #24]
 800fcde:	e003      	b.n	800fce8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800fce0:	68bb      	ldr	r3, [r7, #8]
 800fce2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fce4:	2300      	movs	r3, #0
 800fce6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	2200      	movs	r2, #0
 800fcec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800fcf0:	e02a      	b.n	800fd48 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	9300      	str	r3, [sp, #0]
 800fcf6:	697b      	ldr	r3, [r7, #20]
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	2180      	movs	r1, #128	; 0x80
 800fcfc:	68f8      	ldr	r0, [r7, #12]
 800fcfe:	f000 f8e2 	bl	800fec6 <UART_WaitOnFlagUntilTimeout>
 800fd02:	4603      	mov	r3, r0
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d001      	beq.n	800fd0c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800fd08:	2303      	movs	r3, #3
 800fd0a:	e036      	b.n	800fd7a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800fd0c:	69fb      	ldr	r3, [r7, #28]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d10b      	bne.n	800fd2a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fd12:	69bb      	ldr	r3, [r7, #24]
 800fd14:	881b      	ldrh	r3, [r3, #0]
 800fd16:	461a      	mov	r2, r3
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fd20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800fd22:	69bb      	ldr	r3, [r7, #24]
 800fd24:	3302      	adds	r3, #2
 800fd26:	61bb      	str	r3, [r7, #24]
 800fd28:	e007      	b.n	800fd3a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800fd2a:	69fb      	ldr	r3, [r7, #28]
 800fd2c:	781a      	ldrb	r2, [r3, #0]
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800fd34:	69fb      	ldr	r3, [r7, #28]
 800fd36:	3301      	adds	r3, #1
 800fd38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800fd3e:	b29b      	uxth	r3, r3
 800fd40:	3b01      	subs	r3, #1
 800fd42:	b29a      	uxth	r2, r3
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800fd4c:	b29b      	uxth	r3, r3
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d1cf      	bne.n	800fcf2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	9300      	str	r3, [sp, #0]
 800fd56:	697b      	ldr	r3, [r7, #20]
 800fd58:	2200      	movs	r2, #0
 800fd5a:	2140      	movs	r1, #64	; 0x40
 800fd5c:	68f8      	ldr	r0, [r7, #12]
 800fd5e:	f000 f8b2 	bl	800fec6 <UART_WaitOnFlagUntilTimeout>
 800fd62:	4603      	mov	r3, r0
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d001      	beq.n	800fd6c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800fd68:	2303      	movs	r3, #3
 800fd6a:	e006      	b.n	800fd7a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	2220      	movs	r2, #32
 800fd70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800fd74:	2300      	movs	r3, #0
 800fd76:	e000      	b.n	800fd7a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800fd78:	2302      	movs	r3, #2
  }
}
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	3720      	adds	r7, #32
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}

0800fd82 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fd82:	b580      	push	{r7, lr}
 800fd84:	b08a      	sub	sp, #40	; 0x28
 800fd86:	af02      	add	r7, sp, #8
 800fd88:	60f8      	str	r0, [r7, #12]
 800fd8a:	60b9      	str	r1, [r7, #8]
 800fd8c:	603b      	str	r3, [r7, #0]
 800fd8e:	4613      	mov	r3, r2
 800fd90:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800fd92:	2300      	movs	r3, #0
 800fd94:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fd9c:	b2db      	uxtb	r3, r3
 800fd9e:	2b20      	cmp	r3, #32
 800fda0:	f040 808c 	bne.w	800febc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800fda4:	68bb      	ldr	r3, [r7, #8]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d002      	beq.n	800fdb0 <HAL_UART_Receive+0x2e>
 800fdaa:	88fb      	ldrh	r3, [r7, #6]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d101      	bne.n	800fdb4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800fdb0:	2301      	movs	r3, #1
 800fdb2:	e084      	b.n	800febe <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fdba:	2b01      	cmp	r3, #1
 800fdbc:	d101      	bne.n	800fdc2 <HAL_UART_Receive+0x40>
 800fdbe:	2302      	movs	r3, #2
 800fdc0:	e07d      	b.n	800febe <HAL_UART_Receive+0x13c>
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	2201      	movs	r2, #1
 800fdc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	2200      	movs	r2, #0
 800fdce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	2222      	movs	r2, #34	; 0x22
 800fdd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	2200      	movs	r2, #0
 800fddc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fdde:	f7fa fbe5 	bl	800a5ac <HAL_GetTick>
 800fde2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	88fa      	ldrh	r2, [r7, #6]
 800fde8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	88fa      	ldrh	r2, [r7, #6]
 800fdee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	689b      	ldr	r3, [r3, #8]
 800fdf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fdf8:	d108      	bne.n	800fe0c <HAL_UART_Receive+0x8a>
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	691b      	ldr	r3, [r3, #16]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d104      	bne.n	800fe0c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800fe02:	2300      	movs	r3, #0
 800fe04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fe06:	68bb      	ldr	r3, [r7, #8]
 800fe08:	61bb      	str	r3, [r7, #24]
 800fe0a:	e003      	b.n	800fe14 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fe10:	2300      	movs	r3, #0
 800fe12:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	2200      	movs	r2, #0
 800fe18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800fe1c:	e043      	b.n	800fea6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	9300      	str	r3, [sp, #0]
 800fe22:	697b      	ldr	r3, [r7, #20]
 800fe24:	2200      	movs	r2, #0
 800fe26:	2120      	movs	r1, #32
 800fe28:	68f8      	ldr	r0, [r7, #12]
 800fe2a:	f000 f84c 	bl	800fec6 <UART_WaitOnFlagUntilTimeout>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d001      	beq.n	800fe38 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800fe34:	2303      	movs	r3, #3
 800fe36:	e042      	b.n	800febe <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800fe38:	69fb      	ldr	r3, [r7, #28]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d10c      	bne.n	800fe58 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	685b      	ldr	r3, [r3, #4]
 800fe44:	b29b      	uxth	r3, r3
 800fe46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe4a:	b29a      	uxth	r2, r3
 800fe4c:	69bb      	ldr	r3, [r7, #24]
 800fe4e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800fe50:	69bb      	ldr	r3, [r7, #24]
 800fe52:	3302      	adds	r3, #2
 800fe54:	61bb      	str	r3, [r7, #24]
 800fe56:	e01f      	b.n	800fe98 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	689b      	ldr	r3, [r3, #8]
 800fe5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe60:	d007      	beq.n	800fe72 <HAL_UART_Receive+0xf0>
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	689b      	ldr	r3, [r3, #8]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d10a      	bne.n	800fe80 <HAL_UART_Receive+0xfe>
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	691b      	ldr	r3, [r3, #16]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d106      	bne.n	800fe80 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	685b      	ldr	r3, [r3, #4]
 800fe78:	b2da      	uxtb	r2, r3
 800fe7a:	69fb      	ldr	r3, [r7, #28]
 800fe7c:	701a      	strb	r2, [r3, #0]
 800fe7e:	e008      	b.n	800fe92 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	685b      	ldr	r3, [r3, #4]
 800fe86:	b2db      	uxtb	r3, r3
 800fe88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe8c:	b2da      	uxtb	r2, r3
 800fe8e:	69fb      	ldr	r3, [r7, #28]
 800fe90:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800fe92:	69fb      	ldr	r3, [r7, #28]
 800fe94:	3301      	adds	r3, #1
 800fe96:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800fe9c:	b29b      	uxth	r3, r3
 800fe9e:	3b01      	subs	r3, #1
 800fea0:	b29a      	uxth	r2, r3
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800feaa:	b29b      	uxth	r3, r3
 800feac:	2b00      	cmp	r3, #0
 800feae:	d1b6      	bne.n	800fe1e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	2220      	movs	r2, #32
 800feb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800feb8:	2300      	movs	r3, #0
 800feba:	e000      	b.n	800febe <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800febc:	2302      	movs	r3, #2
  }
}
 800febe:	4618      	mov	r0, r3
 800fec0:	3720      	adds	r7, #32
 800fec2:	46bd      	mov	sp, r7
 800fec4:	bd80      	pop	{r7, pc}

0800fec6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800fec6:	b580      	push	{r7, lr}
 800fec8:	b090      	sub	sp, #64	; 0x40
 800feca:	af00      	add	r7, sp, #0
 800fecc:	60f8      	str	r0, [r7, #12]
 800fece:	60b9      	str	r1, [r7, #8]
 800fed0:	603b      	str	r3, [r7, #0]
 800fed2:	4613      	mov	r3, r2
 800fed4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fed6:	e050      	b.n	800ff7a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800feda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fede:	d04c      	beq.n	800ff7a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800fee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d007      	beq.n	800fef6 <UART_WaitOnFlagUntilTimeout+0x30>
 800fee6:	f7fa fb61 	bl	800a5ac <HAL_GetTick>
 800feea:	4602      	mov	r2, r0
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	1ad3      	subs	r3, r2, r3
 800fef0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fef2:	429a      	cmp	r2, r3
 800fef4:	d241      	bcs.n	800ff7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	330c      	adds	r3, #12
 800fefc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff00:	e853 3f00 	ldrex	r3, [r3]
 800ff04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ff06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ff0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	330c      	adds	r3, #12
 800ff14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ff16:	637a      	str	r2, [r7, #52]	; 0x34
 800ff18:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ff1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff1e:	e841 2300 	strex	r3, r2, [r1]
 800ff22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ff24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d1e5      	bne.n	800fef6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	3314      	adds	r3, #20
 800ff30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff32:	697b      	ldr	r3, [r7, #20]
 800ff34:	e853 3f00 	ldrex	r3, [r3]
 800ff38:	613b      	str	r3, [r7, #16]
   return(result);
 800ff3a:	693b      	ldr	r3, [r7, #16]
 800ff3c:	f023 0301 	bic.w	r3, r3, #1
 800ff40:	63bb      	str	r3, [r7, #56]	; 0x38
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	3314      	adds	r3, #20
 800ff48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff4a:	623a      	str	r2, [r7, #32]
 800ff4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff4e:	69f9      	ldr	r1, [r7, #28]
 800ff50:	6a3a      	ldr	r2, [r7, #32]
 800ff52:	e841 2300 	strex	r3, r2, [r1]
 800ff56:	61bb      	str	r3, [r7, #24]
   return(result);
 800ff58:	69bb      	ldr	r3, [r7, #24]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d1e5      	bne.n	800ff2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	2220      	movs	r2, #32
 800ff62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	2220      	movs	r2, #32
 800ff6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	2200      	movs	r2, #0
 800ff72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ff76:	2303      	movs	r3, #3
 800ff78:	e00f      	b.n	800ff9a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	681a      	ldr	r2, [r3, #0]
 800ff80:	68bb      	ldr	r3, [r7, #8]
 800ff82:	4013      	ands	r3, r2
 800ff84:	68ba      	ldr	r2, [r7, #8]
 800ff86:	429a      	cmp	r2, r3
 800ff88:	bf0c      	ite	eq
 800ff8a:	2301      	moveq	r3, #1
 800ff8c:	2300      	movne	r3, #0
 800ff8e:	b2db      	uxtb	r3, r3
 800ff90:	461a      	mov	r2, r3
 800ff92:	79fb      	ldrb	r3, [r7, #7]
 800ff94:	429a      	cmp	r2, r3
 800ff96:	d09f      	beq.n	800fed8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ff98:	2300      	movs	r3, #0
}
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	3740      	adds	r7, #64	; 0x40
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	bd80      	pop	{r7, pc}
	...

0800ffa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ffa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffa8:	b09f      	sub	sp, #124	; 0x7c
 800ffaa:	af00      	add	r7, sp, #0
 800ffac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ffae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	691b      	ldr	r3, [r3, #16]
 800ffb4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ffb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffba:	68d9      	ldr	r1, [r3, #12]
 800ffbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffbe:	681a      	ldr	r2, [r3, #0]
 800ffc0:	ea40 0301 	orr.w	r3, r0, r1
 800ffc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ffc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffc8:	689a      	ldr	r2, [r3, #8]
 800ffca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffcc:	691b      	ldr	r3, [r3, #16]
 800ffce:	431a      	orrs	r2, r3
 800ffd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffd2:	695b      	ldr	r3, [r3, #20]
 800ffd4:	431a      	orrs	r2, r3
 800ffd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffd8:	69db      	ldr	r3, [r3, #28]
 800ffda:	4313      	orrs	r3, r2
 800ffdc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800ffde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	68db      	ldr	r3, [r3, #12]
 800ffe4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ffe8:	f021 010c 	bic.w	r1, r1, #12
 800ffec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffee:	681a      	ldr	r2, [r3, #0]
 800fff0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fff2:	430b      	orrs	r3, r1
 800fff4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800fff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	695b      	ldr	r3, [r3, #20]
 800fffc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8010000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010002:	6999      	ldr	r1, [r3, #24]
 8010004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010006:	681a      	ldr	r2, [r3, #0]
 8010008:	ea40 0301 	orr.w	r3, r0, r1
 801000c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801000e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010010:	681a      	ldr	r2, [r3, #0]
 8010012:	4bc5      	ldr	r3, [pc, #788]	; (8010328 <UART_SetConfig+0x384>)
 8010014:	429a      	cmp	r2, r3
 8010016:	d004      	beq.n	8010022 <UART_SetConfig+0x7e>
 8010018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801001a:	681a      	ldr	r2, [r3, #0]
 801001c:	4bc3      	ldr	r3, [pc, #780]	; (801032c <UART_SetConfig+0x388>)
 801001e:	429a      	cmp	r2, r3
 8010020:	d103      	bne.n	801002a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010022:	f7fc ff69 	bl	800cef8 <HAL_RCC_GetPCLK2Freq>
 8010026:	6778      	str	r0, [r7, #116]	; 0x74
 8010028:	e002      	b.n	8010030 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801002a:	f7fc ff51 	bl	800ced0 <HAL_RCC_GetPCLK1Freq>
 801002e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010032:	69db      	ldr	r3, [r3, #28]
 8010034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010038:	f040 80b6 	bne.w	80101a8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801003c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801003e:	461c      	mov	r4, r3
 8010040:	f04f 0500 	mov.w	r5, #0
 8010044:	4622      	mov	r2, r4
 8010046:	462b      	mov	r3, r5
 8010048:	1891      	adds	r1, r2, r2
 801004a:	6439      	str	r1, [r7, #64]	; 0x40
 801004c:	415b      	adcs	r3, r3
 801004e:	647b      	str	r3, [r7, #68]	; 0x44
 8010050:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010054:	1912      	adds	r2, r2, r4
 8010056:	eb45 0303 	adc.w	r3, r5, r3
 801005a:	f04f 0000 	mov.w	r0, #0
 801005e:	f04f 0100 	mov.w	r1, #0
 8010062:	00d9      	lsls	r1, r3, #3
 8010064:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8010068:	00d0      	lsls	r0, r2, #3
 801006a:	4602      	mov	r2, r0
 801006c:	460b      	mov	r3, r1
 801006e:	1911      	adds	r1, r2, r4
 8010070:	6639      	str	r1, [r7, #96]	; 0x60
 8010072:	416b      	adcs	r3, r5
 8010074:	667b      	str	r3, [r7, #100]	; 0x64
 8010076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010078:	685b      	ldr	r3, [r3, #4]
 801007a:	461a      	mov	r2, r3
 801007c:	f04f 0300 	mov.w	r3, #0
 8010080:	1891      	adds	r1, r2, r2
 8010082:	63b9      	str	r1, [r7, #56]	; 0x38
 8010084:	415b      	adcs	r3, r3
 8010086:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010088:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801008c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8010090:	f7f0 fe6a 	bl	8000d68 <__aeabi_uldivmod>
 8010094:	4602      	mov	r2, r0
 8010096:	460b      	mov	r3, r1
 8010098:	4ba5      	ldr	r3, [pc, #660]	; (8010330 <UART_SetConfig+0x38c>)
 801009a:	fba3 2302 	umull	r2, r3, r3, r2
 801009e:	095b      	lsrs	r3, r3, #5
 80100a0:	011e      	lsls	r6, r3, #4
 80100a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80100a4:	461c      	mov	r4, r3
 80100a6:	f04f 0500 	mov.w	r5, #0
 80100aa:	4622      	mov	r2, r4
 80100ac:	462b      	mov	r3, r5
 80100ae:	1891      	adds	r1, r2, r2
 80100b0:	6339      	str	r1, [r7, #48]	; 0x30
 80100b2:	415b      	adcs	r3, r3
 80100b4:	637b      	str	r3, [r7, #52]	; 0x34
 80100b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80100ba:	1912      	adds	r2, r2, r4
 80100bc:	eb45 0303 	adc.w	r3, r5, r3
 80100c0:	f04f 0000 	mov.w	r0, #0
 80100c4:	f04f 0100 	mov.w	r1, #0
 80100c8:	00d9      	lsls	r1, r3, #3
 80100ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80100ce:	00d0      	lsls	r0, r2, #3
 80100d0:	4602      	mov	r2, r0
 80100d2:	460b      	mov	r3, r1
 80100d4:	1911      	adds	r1, r2, r4
 80100d6:	65b9      	str	r1, [r7, #88]	; 0x58
 80100d8:	416b      	adcs	r3, r5
 80100da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80100dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80100de:	685b      	ldr	r3, [r3, #4]
 80100e0:	461a      	mov	r2, r3
 80100e2:	f04f 0300 	mov.w	r3, #0
 80100e6:	1891      	adds	r1, r2, r2
 80100e8:	62b9      	str	r1, [r7, #40]	; 0x28
 80100ea:	415b      	adcs	r3, r3
 80100ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80100ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80100f2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80100f6:	f7f0 fe37 	bl	8000d68 <__aeabi_uldivmod>
 80100fa:	4602      	mov	r2, r0
 80100fc:	460b      	mov	r3, r1
 80100fe:	4b8c      	ldr	r3, [pc, #560]	; (8010330 <UART_SetConfig+0x38c>)
 8010100:	fba3 1302 	umull	r1, r3, r3, r2
 8010104:	095b      	lsrs	r3, r3, #5
 8010106:	2164      	movs	r1, #100	; 0x64
 8010108:	fb01 f303 	mul.w	r3, r1, r3
 801010c:	1ad3      	subs	r3, r2, r3
 801010e:	00db      	lsls	r3, r3, #3
 8010110:	3332      	adds	r3, #50	; 0x32
 8010112:	4a87      	ldr	r2, [pc, #540]	; (8010330 <UART_SetConfig+0x38c>)
 8010114:	fba2 2303 	umull	r2, r3, r2, r3
 8010118:	095b      	lsrs	r3, r3, #5
 801011a:	005b      	lsls	r3, r3, #1
 801011c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010120:	441e      	add	r6, r3
 8010122:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010124:	4618      	mov	r0, r3
 8010126:	f04f 0100 	mov.w	r1, #0
 801012a:	4602      	mov	r2, r0
 801012c:	460b      	mov	r3, r1
 801012e:	1894      	adds	r4, r2, r2
 8010130:	623c      	str	r4, [r7, #32]
 8010132:	415b      	adcs	r3, r3
 8010134:	627b      	str	r3, [r7, #36]	; 0x24
 8010136:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801013a:	1812      	adds	r2, r2, r0
 801013c:	eb41 0303 	adc.w	r3, r1, r3
 8010140:	f04f 0400 	mov.w	r4, #0
 8010144:	f04f 0500 	mov.w	r5, #0
 8010148:	00dd      	lsls	r5, r3, #3
 801014a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801014e:	00d4      	lsls	r4, r2, #3
 8010150:	4622      	mov	r2, r4
 8010152:	462b      	mov	r3, r5
 8010154:	1814      	adds	r4, r2, r0
 8010156:	653c      	str	r4, [r7, #80]	; 0x50
 8010158:	414b      	adcs	r3, r1
 801015a:	657b      	str	r3, [r7, #84]	; 0x54
 801015c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801015e:	685b      	ldr	r3, [r3, #4]
 8010160:	461a      	mov	r2, r3
 8010162:	f04f 0300 	mov.w	r3, #0
 8010166:	1891      	adds	r1, r2, r2
 8010168:	61b9      	str	r1, [r7, #24]
 801016a:	415b      	adcs	r3, r3
 801016c:	61fb      	str	r3, [r7, #28]
 801016e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010172:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010176:	f7f0 fdf7 	bl	8000d68 <__aeabi_uldivmod>
 801017a:	4602      	mov	r2, r0
 801017c:	460b      	mov	r3, r1
 801017e:	4b6c      	ldr	r3, [pc, #432]	; (8010330 <UART_SetConfig+0x38c>)
 8010180:	fba3 1302 	umull	r1, r3, r3, r2
 8010184:	095b      	lsrs	r3, r3, #5
 8010186:	2164      	movs	r1, #100	; 0x64
 8010188:	fb01 f303 	mul.w	r3, r1, r3
 801018c:	1ad3      	subs	r3, r2, r3
 801018e:	00db      	lsls	r3, r3, #3
 8010190:	3332      	adds	r3, #50	; 0x32
 8010192:	4a67      	ldr	r2, [pc, #412]	; (8010330 <UART_SetConfig+0x38c>)
 8010194:	fba2 2303 	umull	r2, r3, r2, r3
 8010198:	095b      	lsrs	r3, r3, #5
 801019a:	f003 0207 	and.w	r2, r3, #7
 801019e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	4432      	add	r2, r6
 80101a4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80101a6:	e0b9      	b.n	801031c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80101a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80101aa:	461c      	mov	r4, r3
 80101ac:	f04f 0500 	mov.w	r5, #0
 80101b0:	4622      	mov	r2, r4
 80101b2:	462b      	mov	r3, r5
 80101b4:	1891      	adds	r1, r2, r2
 80101b6:	6139      	str	r1, [r7, #16]
 80101b8:	415b      	adcs	r3, r3
 80101ba:	617b      	str	r3, [r7, #20]
 80101bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80101c0:	1912      	adds	r2, r2, r4
 80101c2:	eb45 0303 	adc.w	r3, r5, r3
 80101c6:	f04f 0000 	mov.w	r0, #0
 80101ca:	f04f 0100 	mov.w	r1, #0
 80101ce:	00d9      	lsls	r1, r3, #3
 80101d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80101d4:	00d0      	lsls	r0, r2, #3
 80101d6:	4602      	mov	r2, r0
 80101d8:	460b      	mov	r3, r1
 80101da:	eb12 0804 	adds.w	r8, r2, r4
 80101de:	eb43 0905 	adc.w	r9, r3, r5
 80101e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101e4:	685b      	ldr	r3, [r3, #4]
 80101e6:	4618      	mov	r0, r3
 80101e8:	f04f 0100 	mov.w	r1, #0
 80101ec:	f04f 0200 	mov.w	r2, #0
 80101f0:	f04f 0300 	mov.w	r3, #0
 80101f4:	008b      	lsls	r3, r1, #2
 80101f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80101fa:	0082      	lsls	r2, r0, #2
 80101fc:	4640      	mov	r0, r8
 80101fe:	4649      	mov	r1, r9
 8010200:	f7f0 fdb2 	bl	8000d68 <__aeabi_uldivmod>
 8010204:	4602      	mov	r2, r0
 8010206:	460b      	mov	r3, r1
 8010208:	4b49      	ldr	r3, [pc, #292]	; (8010330 <UART_SetConfig+0x38c>)
 801020a:	fba3 2302 	umull	r2, r3, r3, r2
 801020e:	095b      	lsrs	r3, r3, #5
 8010210:	011e      	lsls	r6, r3, #4
 8010212:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010214:	4618      	mov	r0, r3
 8010216:	f04f 0100 	mov.w	r1, #0
 801021a:	4602      	mov	r2, r0
 801021c:	460b      	mov	r3, r1
 801021e:	1894      	adds	r4, r2, r2
 8010220:	60bc      	str	r4, [r7, #8]
 8010222:	415b      	adcs	r3, r3
 8010224:	60fb      	str	r3, [r7, #12]
 8010226:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801022a:	1812      	adds	r2, r2, r0
 801022c:	eb41 0303 	adc.w	r3, r1, r3
 8010230:	f04f 0400 	mov.w	r4, #0
 8010234:	f04f 0500 	mov.w	r5, #0
 8010238:	00dd      	lsls	r5, r3, #3
 801023a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801023e:	00d4      	lsls	r4, r2, #3
 8010240:	4622      	mov	r2, r4
 8010242:	462b      	mov	r3, r5
 8010244:	1814      	adds	r4, r2, r0
 8010246:	64bc      	str	r4, [r7, #72]	; 0x48
 8010248:	414b      	adcs	r3, r1
 801024a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801024c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801024e:	685b      	ldr	r3, [r3, #4]
 8010250:	4618      	mov	r0, r3
 8010252:	f04f 0100 	mov.w	r1, #0
 8010256:	f04f 0200 	mov.w	r2, #0
 801025a:	f04f 0300 	mov.w	r3, #0
 801025e:	008b      	lsls	r3, r1, #2
 8010260:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8010264:	0082      	lsls	r2, r0, #2
 8010266:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 801026a:	f7f0 fd7d 	bl	8000d68 <__aeabi_uldivmod>
 801026e:	4602      	mov	r2, r0
 8010270:	460b      	mov	r3, r1
 8010272:	4b2f      	ldr	r3, [pc, #188]	; (8010330 <UART_SetConfig+0x38c>)
 8010274:	fba3 1302 	umull	r1, r3, r3, r2
 8010278:	095b      	lsrs	r3, r3, #5
 801027a:	2164      	movs	r1, #100	; 0x64
 801027c:	fb01 f303 	mul.w	r3, r1, r3
 8010280:	1ad3      	subs	r3, r2, r3
 8010282:	011b      	lsls	r3, r3, #4
 8010284:	3332      	adds	r3, #50	; 0x32
 8010286:	4a2a      	ldr	r2, [pc, #168]	; (8010330 <UART_SetConfig+0x38c>)
 8010288:	fba2 2303 	umull	r2, r3, r2, r3
 801028c:	095b      	lsrs	r3, r3, #5
 801028e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010292:	441e      	add	r6, r3
 8010294:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010296:	4618      	mov	r0, r3
 8010298:	f04f 0100 	mov.w	r1, #0
 801029c:	4602      	mov	r2, r0
 801029e:	460b      	mov	r3, r1
 80102a0:	1894      	adds	r4, r2, r2
 80102a2:	603c      	str	r4, [r7, #0]
 80102a4:	415b      	adcs	r3, r3
 80102a6:	607b      	str	r3, [r7, #4]
 80102a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80102ac:	1812      	adds	r2, r2, r0
 80102ae:	eb41 0303 	adc.w	r3, r1, r3
 80102b2:	f04f 0400 	mov.w	r4, #0
 80102b6:	f04f 0500 	mov.w	r5, #0
 80102ba:	00dd      	lsls	r5, r3, #3
 80102bc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80102c0:	00d4      	lsls	r4, r2, #3
 80102c2:	4622      	mov	r2, r4
 80102c4:	462b      	mov	r3, r5
 80102c6:	eb12 0a00 	adds.w	sl, r2, r0
 80102ca:	eb43 0b01 	adc.w	fp, r3, r1
 80102ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102d0:	685b      	ldr	r3, [r3, #4]
 80102d2:	4618      	mov	r0, r3
 80102d4:	f04f 0100 	mov.w	r1, #0
 80102d8:	f04f 0200 	mov.w	r2, #0
 80102dc:	f04f 0300 	mov.w	r3, #0
 80102e0:	008b      	lsls	r3, r1, #2
 80102e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80102e6:	0082      	lsls	r2, r0, #2
 80102e8:	4650      	mov	r0, sl
 80102ea:	4659      	mov	r1, fp
 80102ec:	f7f0 fd3c 	bl	8000d68 <__aeabi_uldivmod>
 80102f0:	4602      	mov	r2, r0
 80102f2:	460b      	mov	r3, r1
 80102f4:	4b0e      	ldr	r3, [pc, #56]	; (8010330 <UART_SetConfig+0x38c>)
 80102f6:	fba3 1302 	umull	r1, r3, r3, r2
 80102fa:	095b      	lsrs	r3, r3, #5
 80102fc:	2164      	movs	r1, #100	; 0x64
 80102fe:	fb01 f303 	mul.w	r3, r1, r3
 8010302:	1ad3      	subs	r3, r2, r3
 8010304:	011b      	lsls	r3, r3, #4
 8010306:	3332      	adds	r3, #50	; 0x32
 8010308:	4a09      	ldr	r2, [pc, #36]	; (8010330 <UART_SetConfig+0x38c>)
 801030a:	fba2 2303 	umull	r2, r3, r2, r3
 801030e:	095b      	lsrs	r3, r3, #5
 8010310:	f003 020f 	and.w	r2, r3, #15
 8010314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	4432      	add	r2, r6
 801031a:	609a      	str	r2, [r3, #8]
}
 801031c:	bf00      	nop
 801031e:	377c      	adds	r7, #124	; 0x7c
 8010320:	46bd      	mov	sp, r7
 8010322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010326:	bf00      	nop
 8010328:	40011000 	.word	0x40011000
 801032c:	40011400 	.word	0x40011400
 8010330:	51eb851f 	.word	0x51eb851f

08010334 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8010338:	4904      	ldr	r1, [pc, #16]	; (801034c <MX_FATFS_Init+0x18>)
 801033a:	4805      	ldr	r0, [pc, #20]	; (8010350 <MX_FATFS_Init+0x1c>)
 801033c:	f000 f8b0 	bl	80104a0 <FATFS_LinkDriver>
 8010340:	4603      	mov	r3, r0
 8010342:	461a      	mov	r2, r3
 8010344:	4b03      	ldr	r3, [pc, #12]	; (8010354 <MX_FATFS_Init+0x20>)
 8010346:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010348:	bf00      	nop
 801034a:	bd80      	pop	{r7, pc}
 801034c:	2000609c 	.word	0x2000609c
 8010350:	200000b8 	.word	0x200000b8
 8010354:	200060a0 	.word	0x200060a0

08010358 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8010358:	b480      	push	{r7}
 801035a:	b083      	sub	sp, #12
 801035c:	af00      	add	r7, sp, #0
 801035e:	4603      	mov	r3, r0
 8010360:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8010362:	4b06      	ldr	r3, [pc, #24]	; (801037c <USER_initialize+0x24>)
 8010364:	2201      	movs	r2, #1
 8010366:	701a      	strb	r2, [r3, #0]
    return Stat;
 8010368:	4b04      	ldr	r3, [pc, #16]	; (801037c <USER_initialize+0x24>)
 801036a:	781b      	ldrb	r3, [r3, #0]
 801036c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 801036e:	4618      	mov	r0, r3
 8010370:	370c      	adds	r7, #12
 8010372:	46bd      	mov	sp, r7
 8010374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010378:	4770      	bx	lr
 801037a:	bf00      	nop
 801037c:	200000b5 	.word	0x200000b5

08010380 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8010380:	b480      	push	{r7}
 8010382:	b083      	sub	sp, #12
 8010384:	af00      	add	r7, sp, #0
 8010386:	4603      	mov	r3, r0
 8010388:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 801038a:	4b06      	ldr	r3, [pc, #24]	; (80103a4 <USER_status+0x24>)
 801038c:	2201      	movs	r2, #1
 801038e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8010390:	4b04      	ldr	r3, [pc, #16]	; (80103a4 <USER_status+0x24>)
 8010392:	781b      	ldrb	r3, [r3, #0]
 8010394:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8010396:	4618      	mov	r0, r3
 8010398:	370c      	adds	r7, #12
 801039a:	46bd      	mov	sp, r7
 801039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a0:	4770      	bx	lr
 80103a2:	bf00      	nop
 80103a4:	200000b5 	.word	0x200000b5

080103a8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80103a8:	b480      	push	{r7}
 80103aa:	b085      	sub	sp, #20
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	60b9      	str	r1, [r7, #8]
 80103b0:	607a      	str	r2, [r7, #4]
 80103b2:	603b      	str	r3, [r7, #0]
 80103b4:	4603      	mov	r3, r0
 80103b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80103b8:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80103ba:	4618      	mov	r0, r3
 80103bc:	3714      	adds	r7, #20
 80103be:	46bd      	mov	sp, r7
 80103c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c4:	4770      	bx	lr

080103c6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80103c6:	b480      	push	{r7}
 80103c8:	b085      	sub	sp, #20
 80103ca:	af00      	add	r7, sp, #0
 80103cc:	60b9      	str	r1, [r7, #8]
 80103ce:	607a      	str	r2, [r7, #4]
 80103d0:	603b      	str	r3, [r7, #0]
 80103d2:	4603      	mov	r3, r0
 80103d4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80103d6:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80103d8:	4618      	mov	r0, r3
 80103da:	3714      	adds	r7, #20
 80103dc:	46bd      	mov	sp, r7
 80103de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e2:	4770      	bx	lr

080103e4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80103e4:	b480      	push	{r7}
 80103e6:	b085      	sub	sp, #20
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	4603      	mov	r3, r0
 80103ec:	603a      	str	r2, [r7, #0]
 80103ee:	71fb      	strb	r3, [r7, #7]
 80103f0:	460b      	mov	r3, r1
 80103f2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80103f4:	2301      	movs	r3, #1
 80103f6:	73fb      	strb	r3, [r7, #15]
    return res;
 80103f8:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80103fa:	4618      	mov	r0, r3
 80103fc:	3714      	adds	r7, #20
 80103fe:	46bd      	mov	sp, r7
 8010400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010404:	4770      	bx	lr
	...

08010408 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010408:	b480      	push	{r7}
 801040a:	b087      	sub	sp, #28
 801040c:	af00      	add	r7, sp, #0
 801040e:	60f8      	str	r0, [r7, #12]
 8010410:	60b9      	str	r1, [r7, #8]
 8010412:	4613      	mov	r3, r2
 8010414:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010416:	2301      	movs	r3, #1
 8010418:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801041a:	2300      	movs	r3, #0
 801041c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801041e:	4b1f      	ldr	r3, [pc, #124]	; (801049c <FATFS_LinkDriverEx+0x94>)
 8010420:	7a5b      	ldrb	r3, [r3, #9]
 8010422:	b2db      	uxtb	r3, r3
 8010424:	2b00      	cmp	r3, #0
 8010426:	d131      	bne.n	801048c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010428:	4b1c      	ldr	r3, [pc, #112]	; (801049c <FATFS_LinkDriverEx+0x94>)
 801042a:	7a5b      	ldrb	r3, [r3, #9]
 801042c:	b2db      	uxtb	r3, r3
 801042e:	461a      	mov	r2, r3
 8010430:	4b1a      	ldr	r3, [pc, #104]	; (801049c <FATFS_LinkDriverEx+0x94>)
 8010432:	2100      	movs	r1, #0
 8010434:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010436:	4b19      	ldr	r3, [pc, #100]	; (801049c <FATFS_LinkDriverEx+0x94>)
 8010438:	7a5b      	ldrb	r3, [r3, #9]
 801043a:	b2db      	uxtb	r3, r3
 801043c:	4a17      	ldr	r2, [pc, #92]	; (801049c <FATFS_LinkDriverEx+0x94>)
 801043e:	009b      	lsls	r3, r3, #2
 8010440:	4413      	add	r3, r2
 8010442:	68fa      	ldr	r2, [r7, #12]
 8010444:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010446:	4b15      	ldr	r3, [pc, #84]	; (801049c <FATFS_LinkDriverEx+0x94>)
 8010448:	7a5b      	ldrb	r3, [r3, #9]
 801044a:	b2db      	uxtb	r3, r3
 801044c:	461a      	mov	r2, r3
 801044e:	4b13      	ldr	r3, [pc, #76]	; (801049c <FATFS_LinkDriverEx+0x94>)
 8010450:	4413      	add	r3, r2
 8010452:	79fa      	ldrb	r2, [r7, #7]
 8010454:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010456:	4b11      	ldr	r3, [pc, #68]	; (801049c <FATFS_LinkDriverEx+0x94>)
 8010458:	7a5b      	ldrb	r3, [r3, #9]
 801045a:	b2db      	uxtb	r3, r3
 801045c:	1c5a      	adds	r2, r3, #1
 801045e:	b2d1      	uxtb	r1, r2
 8010460:	4a0e      	ldr	r2, [pc, #56]	; (801049c <FATFS_LinkDriverEx+0x94>)
 8010462:	7251      	strb	r1, [r2, #9]
 8010464:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010466:	7dbb      	ldrb	r3, [r7, #22]
 8010468:	3330      	adds	r3, #48	; 0x30
 801046a:	b2da      	uxtb	r2, r3
 801046c:	68bb      	ldr	r3, [r7, #8]
 801046e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010470:	68bb      	ldr	r3, [r7, #8]
 8010472:	3301      	adds	r3, #1
 8010474:	223a      	movs	r2, #58	; 0x3a
 8010476:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010478:	68bb      	ldr	r3, [r7, #8]
 801047a:	3302      	adds	r3, #2
 801047c:	222f      	movs	r2, #47	; 0x2f
 801047e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	3303      	adds	r3, #3
 8010484:	2200      	movs	r2, #0
 8010486:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010488:	2300      	movs	r3, #0
 801048a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801048c:	7dfb      	ldrb	r3, [r7, #23]
}
 801048e:	4618      	mov	r0, r3
 8010490:	371c      	adds	r7, #28
 8010492:	46bd      	mov	sp, r7
 8010494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010498:	4770      	bx	lr
 801049a:	bf00      	nop
 801049c:	20000688 	.word	0x20000688

080104a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b082      	sub	sp, #8
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
 80104a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80104aa:	2200      	movs	r2, #0
 80104ac:	6839      	ldr	r1, [r7, #0]
 80104ae:	6878      	ldr	r0, [r7, #4]
 80104b0:	f7ff ffaa 	bl	8010408 <FATFS_LinkDriverEx>
 80104b4:	4603      	mov	r3, r0
}
 80104b6:	4618      	mov	r0, r3
 80104b8:	3708      	adds	r7, #8
 80104ba:	46bd      	mov	sp, r7
 80104bc:	bd80      	pop	{r7, pc}
	...

080104c0 <__NVIC_SetPriority>:
{
 80104c0:	b480      	push	{r7}
 80104c2:	b083      	sub	sp, #12
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	4603      	mov	r3, r0
 80104c8:	6039      	str	r1, [r7, #0]
 80104ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80104cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	db0a      	blt.n	80104ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80104d4:	683b      	ldr	r3, [r7, #0]
 80104d6:	b2da      	uxtb	r2, r3
 80104d8:	490c      	ldr	r1, [pc, #48]	; (801050c <__NVIC_SetPriority+0x4c>)
 80104da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104de:	0112      	lsls	r2, r2, #4
 80104e0:	b2d2      	uxtb	r2, r2
 80104e2:	440b      	add	r3, r1
 80104e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80104e8:	e00a      	b.n	8010500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80104ea:	683b      	ldr	r3, [r7, #0]
 80104ec:	b2da      	uxtb	r2, r3
 80104ee:	4908      	ldr	r1, [pc, #32]	; (8010510 <__NVIC_SetPriority+0x50>)
 80104f0:	79fb      	ldrb	r3, [r7, #7]
 80104f2:	f003 030f 	and.w	r3, r3, #15
 80104f6:	3b04      	subs	r3, #4
 80104f8:	0112      	lsls	r2, r2, #4
 80104fa:	b2d2      	uxtb	r2, r2
 80104fc:	440b      	add	r3, r1
 80104fe:	761a      	strb	r2, [r3, #24]
}
 8010500:	bf00      	nop
 8010502:	370c      	adds	r7, #12
 8010504:	46bd      	mov	sp, r7
 8010506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050a:	4770      	bx	lr
 801050c:	e000e100 	.word	0xe000e100
 8010510:	e000ed00 	.word	0xe000ed00

08010514 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8010514:	b580      	push	{r7, lr}
 8010516:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8010518:	4b05      	ldr	r3, [pc, #20]	; (8010530 <SysTick_Handler+0x1c>)
 801051a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801051c:	f001 ff3c 	bl	8012398 <xTaskGetSchedulerState>
 8010520:	4603      	mov	r3, r0
 8010522:	2b01      	cmp	r3, #1
 8010524:	d001      	beq.n	801052a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8010526:	f002 fd27 	bl	8012f78 <xPortSysTickHandler>
  }
}
 801052a:	bf00      	nop
 801052c:	bd80      	pop	{r7, pc}
 801052e:	bf00      	nop
 8010530:	e000e010 	.word	0xe000e010

08010534 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010534:	b580      	push	{r7, lr}
 8010536:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8010538:	2100      	movs	r1, #0
 801053a:	f06f 0004 	mvn.w	r0, #4
 801053e:	f7ff ffbf 	bl	80104c0 <__NVIC_SetPriority>
#endif
}
 8010542:	bf00      	nop
 8010544:	bd80      	pop	{r7, pc}
	...

08010548 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010548:	b480      	push	{r7}
 801054a:	b083      	sub	sp, #12
 801054c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801054e:	f3ef 8305 	mrs	r3, IPSR
 8010552:	603b      	str	r3, [r7, #0]
  return(result);
 8010554:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010556:	2b00      	cmp	r3, #0
 8010558:	d003      	beq.n	8010562 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801055a:	f06f 0305 	mvn.w	r3, #5
 801055e:	607b      	str	r3, [r7, #4]
 8010560:	e00c      	b.n	801057c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010562:	4b0a      	ldr	r3, [pc, #40]	; (801058c <osKernelInitialize+0x44>)
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d105      	bne.n	8010576 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801056a:	4b08      	ldr	r3, [pc, #32]	; (801058c <osKernelInitialize+0x44>)
 801056c:	2201      	movs	r2, #1
 801056e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010570:	2300      	movs	r3, #0
 8010572:	607b      	str	r3, [r7, #4]
 8010574:	e002      	b.n	801057c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8010576:	f04f 33ff 	mov.w	r3, #4294967295
 801057a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801057c:	687b      	ldr	r3, [r7, #4]
}
 801057e:	4618      	mov	r0, r3
 8010580:	370c      	adds	r7, #12
 8010582:	46bd      	mov	sp, r7
 8010584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010588:	4770      	bx	lr
 801058a:	bf00      	nop
 801058c:	20000694 	.word	0x20000694

08010590 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010590:	b580      	push	{r7, lr}
 8010592:	b082      	sub	sp, #8
 8010594:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010596:	f3ef 8305 	mrs	r3, IPSR
 801059a:	603b      	str	r3, [r7, #0]
  return(result);
 801059c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d003      	beq.n	80105aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80105a2:	f06f 0305 	mvn.w	r3, #5
 80105a6:	607b      	str	r3, [r7, #4]
 80105a8:	e010      	b.n	80105cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80105aa:	4b0b      	ldr	r3, [pc, #44]	; (80105d8 <osKernelStart+0x48>)
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	2b01      	cmp	r3, #1
 80105b0:	d109      	bne.n	80105c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80105b2:	f7ff ffbf 	bl	8010534 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80105b6:	4b08      	ldr	r3, [pc, #32]	; (80105d8 <osKernelStart+0x48>)
 80105b8:	2202      	movs	r2, #2
 80105ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80105bc:	f001 fa80 	bl	8011ac0 <vTaskStartScheduler>
      stat = osOK;
 80105c0:	2300      	movs	r3, #0
 80105c2:	607b      	str	r3, [r7, #4]
 80105c4:	e002      	b.n	80105cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80105c6:	f04f 33ff 	mov.w	r3, #4294967295
 80105ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80105cc:	687b      	ldr	r3, [r7, #4]
}
 80105ce:	4618      	mov	r0, r3
 80105d0:	3708      	adds	r7, #8
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}
 80105d6:	bf00      	nop
 80105d8:	20000694 	.word	0x20000694

080105dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80105dc:	b580      	push	{r7, lr}
 80105de:	b08e      	sub	sp, #56	; 0x38
 80105e0:	af04      	add	r7, sp, #16
 80105e2:	60f8      	str	r0, [r7, #12]
 80105e4:	60b9      	str	r1, [r7, #8]
 80105e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80105e8:	2300      	movs	r3, #0
 80105ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80105ec:	f3ef 8305 	mrs	r3, IPSR
 80105f0:	617b      	str	r3, [r7, #20]
  return(result);
 80105f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d17e      	bne.n	80106f6 <osThreadNew+0x11a>
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d07b      	beq.n	80106f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80105fe:	2380      	movs	r3, #128	; 0x80
 8010600:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8010602:	2318      	movs	r3, #24
 8010604:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8010606:	2300      	movs	r3, #0
 8010608:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801060a:	f04f 33ff 	mov.w	r3, #4294967295
 801060e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d045      	beq.n	80106a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d002      	beq.n	8010624 <osThreadNew+0x48>
        name = attr->name;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	699b      	ldr	r3, [r3, #24]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d002      	beq.n	8010632 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	699b      	ldr	r3, [r3, #24]
 8010630:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010632:	69fb      	ldr	r3, [r7, #28]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d008      	beq.n	801064a <osThreadNew+0x6e>
 8010638:	69fb      	ldr	r3, [r7, #28]
 801063a:	2b38      	cmp	r3, #56	; 0x38
 801063c:	d805      	bhi.n	801064a <osThreadNew+0x6e>
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	685b      	ldr	r3, [r3, #4]
 8010642:	f003 0301 	and.w	r3, r3, #1
 8010646:	2b00      	cmp	r3, #0
 8010648:	d001      	beq.n	801064e <osThreadNew+0x72>
        return (NULL);
 801064a:	2300      	movs	r3, #0
 801064c:	e054      	b.n	80106f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	695b      	ldr	r3, [r3, #20]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d003      	beq.n	801065e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	695b      	ldr	r3, [r3, #20]
 801065a:	089b      	lsrs	r3, r3, #2
 801065c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	689b      	ldr	r3, [r3, #8]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d00e      	beq.n	8010684 <osThreadNew+0xa8>
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	68db      	ldr	r3, [r3, #12]
 801066a:	2bbb      	cmp	r3, #187	; 0xbb
 801066c:	d90a      	bls.n	8010684 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010672:	2b00      	cmp	r3, #0
 8010674:	d006      	beq.n	8010684 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	695b      	ldr	r3, [r3, #20]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d002      	beq.n	8010684 <osThreadNew+0xa8>
        mem = 1;
 801067e:	2301      	movs	r3, #1
 8010680:	61bb      	str	r3, [r7, #24]
 8010682:	e010      	b.n	80106a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	689b      	ldr	r3, [r3, #8]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d10c      	bne.n	80106a6 <osThreadNew+0xca>
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	68db      	ldr	r3, [r3, #12]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d108      	bne.n	80106a6 <osThreadNew+0xca>
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	691b      	ldr	r3, [r3, #16]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d104      	bne.n	80106a6 <osThreadNew+0xca>
          mem = 0;
 801069c:	2300      	movs	r3, #0
 801069e:	61bb      	str	r3, [r7, #24]
 80106a0:	e001      	b.n	80106a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80106a2:	2300      	movs	r3, #0
 80106a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80106a6:	69bb      	ldr	r3, [r7, #24]
 80106a8:	2b01      	cmp	r3, #1
 80106aa:	d110      	bne.n	80106ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80106b0:	687a      	ldr	r2, [r7, #4]
 80106b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80106b4:	9202      	str	r2, [sp, #8]
 80106b6:	9301      	str	r3, [sp, #4]
 80106b8:	69fb      	ldr	r3, [r7, #28]
 80106ba:	9300      	str	r3, [sp, #0]
 80106bc:	68bb      	ldr	r3, [r7, #8]
 80106be:	6a3a      	ldr	r2, [r7, #32]
 80106c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80106c2:	68f8      	ldr	r0, [r7, #12]
 80106c4:	f000 fea8 	bl	8011418 <xTaskCreateStatic>
 80106c8:	4603      	mov	r3, r0
 80106ca:	613b      	str	r3, [r7, #16]
 80106cc:	e013      	b.n	80106f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80106ce:	69bb      	ldr	r3, [r7, #24]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d110      	bne.n	80106f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80106d4:	6a3b      	ldr	r3, [r7, #32]
 80106d6:	b29a      	uxth	r2, r3
 80106d8:	f107 0310 	add.w	r3, r7, #16
 80106dc:	9301      	str	r3, [sp, #4]
 80106de:	69fb      	ldr	r3, [r7, #28]
 80106e0:	9300      	str	r3, [sp, #0]
 80106e2:	68bb      	ldr	r3, [r7, #8]
 80106e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80106e6:	68f8      	ldr	r0, [r7, #12]
 80106e8:	f000 fef3 	bl	80114d2 <xTaskCreate>
 80106ec:	4603      	mov	r3, r0
 80106ee:	2b01      	cmp	r3, #1
 80106f0:	d001      	beq.n	80106f6 <osThreadNew+0x11a>
            hTask = NULL;
 80106f2:	2300      	movs	r3, #0
 80106f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80106f6:	693b      	ldr	r3, [r7, #16]
}
 80106f8:	4618      	mov	r0, r3
 80106fa:	3728      	adds	r7, #40	; 0x28
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}

08010700 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8010700:	b580      	push	{r7, lr}
 8010702:	b082      	sub	sp, #8
 8010704:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8010706:	f001 fe37 	bl	8012378 <xTaskGetCurrentTaskHandle>
 801070a:	6078      	str	r0, [r7, #4]

  return (id);
 801070c:	687b      	ldr	r3, [r7, #4]
}
 801070e:	4618      	mov	r0, r3
 8010710:	3708      	adds	r7, #8
 8010712:	46bd      	mov	sp, r7
 8010714:	bd80      	pop	{r7, pc}
	...

08010718 <osThreadGetState>:

osThreadState_t osThreadGetState (osThreadId_t thread_id) {
 8010718:	b580      	push	{r7, lr}
 801071a:	b086      	sub	sp, #24
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010724:	f3ef 8305 	mrs	r3, IPSR
 8010728:	60fb      	str	r3, [r7, #12]
  return(result);
 801072a:	68fb      	ldr	r3, [r7, #12]
  osThreadState_t state;

  if (IS_IRQ() || (hTask == NULL)) {
 801072c:	2b00      	cmp	r3, #0
 801072e:	d102      	bne.n	8010736 <osThreadGetState+0x1e>
 8010730:	693b      	ldr	r3, [r7, #16]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d103      	bne.n	801073e <osThreadGetState+0x26>
    state = osThreadError;
 8010736:	f04f 33ff 	mov.w	r3, #4294967295
 801073a:	617b      	str	r3, [r7, #20]
 801073c:	e022      	b.n	8010784 <osThreadGetState+0x6c>
  }
  else {
    switch (eTaskGetState (hTask)) {
 801073e:	6938      	ldr	r0, [r7, #16]
 8010740:	f001 f8c8 	bl	80118d4 <eTaskGetState>
 8010744:	4603      	mov	r3, r0
 8010746:	2b04      	cmp	r3, #4
 8010748:	d818      	bhi.n	801077c <osThreadGetState+0x64>
 801074a:	a201      	add	r2, pc, #4	; (adr r2, 8010750 <osThreadGetState+0x38>)
 801074c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010750:	08010765 	.word	0x08010765
 8010754:	0801076b 	.word	0x0801076b
 8010758:	08010771 	.word	0x08010771
 801075c:	08010771 	.word	0x08010771
 8010760:	08010777 	.word	0x08010777
      case eRunning:   state = osThreadRunning;    break;
 8010764:	2302      	movs	r3, #2
 8010766:	617b      	str	r3, [r7, #20]
 8010768:	e00c      	b.n	8010784 <osThreadGetState+0x6c>
      case eReady:     state = osThreadReady;      break;
 801076a:	2301      	movs	r3, #1
 801076c:	617b      	str	r3, [r7, #20]
 801076e:	e009      	b.n	8010784 <osThreadGetState+0x6c>
      case eBlocked:
      case eSuspended: state = osThreadBlocked;    break;
 8010770:	2303      	movs	r3, #3
 8010772:	617b      	str	r3, [r7, #20]
 8010774:	e006      	b.n	8010784 <osThreadGetState+0x6c>
      case eDeleted:   state = osThreadTerminated; break;
 8010776:	2304      	movs	r3, #4
 8010778:	617b      	str	r3, [r7, #20]
 801077a:	e003      	b.n	8010784 <osThreadGetState+0x6c>
      case eInvalid:
      default:         state = osThreadError;      break;
 801077c:	f04f 33ff 	mov.w	r3, #4294967295
 8010780:	617b      	str	r3, [r7, #20]
 8010782:	bf00      	nop
    }
  }

  return (state);
 8010784:	697b      	ldr	r3, [r7, #20]
}
 8010786:	4618      	mov	r0, r3
 8010788:	3718      	adds	r7, #24
 801078a:	46bd      	mov	sp, r7
 801078c:	bd80      	pop	{r7, pc}
 801078e:	bf00      	nop

08010790 <osThreadResume>:
  }

  return (stat);
}

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8010790:	b580      	push	{r7, lr}
 8010792:	b086      	sub	sp, #24
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801079c:	f3ef 8305 	mrs	r3, IPSR
 80107a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80107a2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d003      	beq.n	80107b0 <osThreadResume+0x20>
    stat = osErrorISR;
 80107a8:	f06f 0305 	mvn.w	r3, #5
 80107ac:	617b      	str	r3, [r7, #20]
 80107ae:	e00b      	b.n	80107c8 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 80107b0:	693b      	ldr	r3, [r7, #16]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d103      	bne.n	80107be <osThreadResume+0x2e>
    stat = osErrorParameter;
 80107b6:	f06f 0303 	mvn.w	r3, #3
 80107ba:	617b      	str	r3, [r7, #20]
 80107bc:	e004      	b.n	80107c8 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 80107be:	2300      	movs	r3, #0
 80107c0:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 80107c2:	6938      	ldr	r0, [r7, #16]
 80107c4:	f001 f91e 	bl	8011a04 <vTaskResume>
  }

  return (stat);
 80107c8:	697b      	ldr	r3, [r7, #20]
}
 80107ca:	4618      	mov	r0, r3
 80107cc:	3718      	adds	r7, #24
 80107ce:	46bd      	mov	sp, r7
 80107d0:	bd80      	pop	{r7, pc}

080107d2 <osThreadExit>:
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 80107d2:	b580      	push	{r7, lr}
 80107d4:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 80107d6:	2000      	movs	r0, #0
 80107d8:	f000 ffd6 	bl	8011788 <vTaskDelete>
#endif
  for (;;);
 80107dc:	e7fe      	b.n	80107dc <osThreadExit+0xa>

080107de <osThreadTerminate>:
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 80107de:	b580      	push	{r7, lr}
 80107e0:	b086      	sub	sp, #24
 80107e2:	af00      	add	r7, sp, #0
 80107e4:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80107ea:	f3ef 8305 	mrs	r3, IPSR
 80107ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80107f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d003      	beq.n	80107fe <osThreadTerminate+0x20>
    stat = osErrorISR;
 80107f6:	f06f 0305 	mvn.w	r3, #5
 80107fa:	617b      	str	r3, [r7, #20]
 80107fc:	e017      	b.n	801082e <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 80107fe:	693b      	ldr	r3, [r7, #16]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d103      	bne.n	801080c <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8010804:	f06f 0303 	mvn.w	r3, #3
 8010808:	617b      	str	r3, [r7, #20]
 801080a:	e010      	b.n	801082e <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 801080c:	6938      	ldr	r0, [r7, #16]
 801080e:	f001 f861 	bl	80118d4 <eTaskGetState>
 8010812:	4603      	mov	r3, r0
 8010814:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8010816:	7bfb      	ldrb	r3, [r7, #15]
 8010818:	2b04      	cmp	r3, #4
 801081a:	d005      	beq.n	8010828 <osThreadTerminate+0x4a>
      stat = osOK;
 801081c:	2300      	movs	r3, #0
 801081e:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8010820:	6938      	ldr	r0, [r7, #16]
 8010822:	f000 ffb1 	bl	8011788 <vTaskDelete>
 8010826:	e002      	b.n	801082e <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8010828:	f06f 0302 	mvn.w	r3, #2
 801082c:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 801082e:	697b      	ldr	r3, [r7, #20]
}
 8010830:	4618      	mov	r0, r3
 8010832:	3718      	adds	r7, #24
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}

08010838 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8010838:	b580      	push	{r7, lr}
 801083a:	b084      	sub	sp, #16
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010840:	f3ef 8305 	mrs	r3, IPSR
 8010844:	60bb      	str	r3, [r7, #8]
  return(result);
 8010846:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010848:	2b00      	cmp	r3, #0
 801084a:	d003      	beq.n	8010854 <osDelay+0x1c>
    stat = osErrorISR;
 801084c:	f06f 0305 	mvn.w	r3, #5
 8010850:	60fb      	str	r3, [r7, #12]
 8010852:	e007      	b.n	8010864 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8010854:	2300      	movs	r3, #0
 8010856:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d002      	beq.n	8010864 <osDelay+0x2c>
      vTaskDelay(ticks);
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	f001 f804 	bl	801186c <vTaskDelay>
    }
  }

  return (stat);
 8010864:	68fb      	ldr	r3, [r7, #12]
}
 8010866:	4618      	mov	r0, r3
 8010868:	3710      	adds	r7, #16
 801086a:	46bd      	mov	sp, r7
 801086c:	bd80      	pop	{r7, pc}
	...

08010870 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010870:	b480      	push	{r7}
 8010872:	b085      	sub	sp, #20
 8010874:	af00      	add	r7, sp, #0
 8010876:	60f8      	str	r0, [r7, #12]
 8010878:	60b9      	str	r1, [r7, #8]
 801087a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	4a07      	ldr	r2, [pc, #28]	; (801089c <vApplicationGetIdleTaskMemory+0x2c>)
 8010880:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010882:	68bb      	ldr	r3, [r7, #8]
 8010884:	4a06      	ldr	r2, [pc, #24]	; (80108a0 <vApplicationGetIdleTaskMemory+0x30>)
 8010886:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	2280      	movs	r2, #128	; 0x80
 801088c:	601a      	str	r2, [r3, #0]
}
 801088e:	bf00      	nop
 8010890:	3714      	adds	r7, #20
 8010892:	46bd      	mov	sp, r7
 8010894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010898:	4770      	bx	lr
 801089a:	bf00      	nop
 801089c:	20000698 	.word	0x20000698
 80108a0:	20000754 	.word	0x20000754

080108a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80108a4:	b480      	push	{r7}
 80108a6:	b085      	sub	sp, #20
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	60f8      	str	r0, [r7, #12]
 80108ac:	60b9      	str	r1, [r7, #8]
 80108ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	4a07      	ldr	r2, [pc, #28]	; (80108d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80108b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80108b6:	68bb      	ldr	r3, [r7, #8]
 80108b8:	4a06      	ldr	r2, [pc, #24]	; (80108d4 <vApplicationGetTimerTaskMemory+0x30>)
 80108ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80108c2:	601a      	str	r2, [r3, #0]
}
 80108c4:	bf00      	nop
 80108c6:	3714      	adds	r7, #20
 80108c8:	46bd      	mov	sp, r7
 80108ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ce:	4770      	bx	lr
 80108d0:	20000954 	.word	0x20000954
 80108d4:	20000a10 	.word	0x20000a10

080108d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80108d8:	b480      	push	{r7}
 80108da:	b083      	sub	sp, #12
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	f103 0208 	add.w	r2, r3, #8
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f04f 32ff 	mov.w	r2, #4294967295
 80108f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	f103 0208 	add.w	r2, r3, #8
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	f103 0208 	add.w	r2, r3, #8
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	2200      	movs	r2, #0
 801090a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801090c:	bf00      	nop
 801090e:	370c      	adds	r7, #12
 8010910:	46bd      	mov	sp, r7
 8010912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010916:	4770      	bx	lr

08010918 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010918:	b480      	push	{r7}
 801091a:	b083      	sub	sp, #12
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	2200      	movs	r2, #0
 8010924:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010926:	bf00      	nop
 8010928:	370c      	adds	r7, #12
 801092a:	46bd      	mov	sp, r7
 801092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010930:	4770      	bx	lr

08010932 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010932:	b480      	push	{r7}
 8010934:	b085      	sub	sp, #20
 8010936:	af00      	add	r7, sp, #0
 8010938:	6078      	str	r0, [r7, #4]
 801093a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	685b      	ldr	r3, [r3, #4]
 8010940:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010942:	683b      	ldr	r3, [r7, #0]
 8010944:	68fa      	ldr	r2, [r7, #12]
 8010946:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	689a      	ldr	r2, [r3, #8]
 801094c:	683b      	ldr	r3, [r7, #0]
 801094e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	689b      	ldr	r3, [r3, #8]
 8010954:	683a      	ldr	r2, [r7, #0]
 8010956:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	683a      	ldr	r2, [r7, #0]
 801095c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801095e:	683b      	ldr	r3, [r7, #0]
 8010960:	687a      	ldr	r2, [r7, #4]
 8010962:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	1c5a      	adds	r2, r3, #1
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	601a      	str	r2, [r3, #0]
}
 801096e:	bf00      	nop
 8010970:	3714      	adds	r7, #20
 8010972:	46bd      	mov	sp, r7
 8010974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010978:	4770      	bx	lr

0801097a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801097a:	b480      	push	{r7}
 801097c:	b085      	sub	sp, #20
 801097e:	af00      	add	r7, sp, #0
 8010980:	6078      	str	r0, [r7, #4]
 8010982:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801098a:	68bb      	ldr	r3, [r7, #8]
 801098c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010990:	d103      	bne.n	801099a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	691b      	ldr	r3, [r3, #16]
 8010996:	60fb      	str	r3, [r7, #12]
 8010998:	e00c      	b.n	80109b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	3308      	adds	r3, #8
 801099e:	60fb      	str	r3, [r7, #12]
 80109a0:	e002      	b.n	80109a8 <vListInsert+0x2e>
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	685b      	ldr	r3, [r3, #4]
 80109a6:	60fb      	str	r3, [r7, #12]
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	685b      	ldr	r3, [r3, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	68ba      	ldr	r2, [r7, #8]
 80109b0:	429a      	cmp	r2, r3
 80109b2:	d2f6      	bcs.n	80109a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	685a      	ldr	r2, [r3, #4]
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80109bc:	683b      	ldr	r3, [r7, #0]
 80109be:	685b      	ldr	r3, [r3, #4]
 80109c0:	683a      	ldr	r2, [r7, #0]
 80109c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80109c4:	683b      	ldr	r3, [r7, #0]
 80109c6:	68fa      	ldr	r2, [r7, #12]
 80109c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	683a      	ldr	r2, [r7, #0]
 80109ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80109d0:	683b      	ldr	r3, [r7, #0]
 80109d2:	687a      	ldr	r2, [r7, #4]
 80109d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	1c5a      	adds	r2, r3, #1
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	601a      	str	r2, [r3, #0]
}
 80109e0:	bf00      	nop
 80109e2:	3714      	adds	r7, #20
 80109e4:	46bd      	mov	sp, r7
 80109e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ea:	4770      	bx	lr

080109ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80109ec:	b480      	push	{r7}
 80109ee:	b085      	sub	sp, #20
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	691b      	ldr	r3, [r3, #16]
 80109f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	685b      	ldr	r3, [r3, #4]
 80109fe:	687a      	ldr	r2, [r7, #4]
 8010a00:	6892      	ldr	r2, [r2, #8]
 8010a02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	689b      	ldr	r3, [r3, #8]
 8010a08:	687a      	ldr	r2, [r7, #4]
 8010a0a:	6852      	ldr	r2, [r2, #4]
 8010a0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	685b      	ldr	r3, [r3, #4]
 8010a12:	687a      	ldr	r2, [r7, #4]
 8010a14:	429a      	cmp	r2, r3
 8010a16:	d103      	bne.n	8010a20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	689a      	ldr	r2, [r3, #8]
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2200      	movs	r2, #0
 8010a24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	1e5a      	subs	r2, r3, #1
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	681b      	ldr	r3, [r3, #0]
}
 8010a34:	4618      	mov	r0, r3
 8010a36:	3714      	adds	r7, #20
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3e:	4770      	bx	lr

08010a40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b084      	sub	sp, #16
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
 8010a48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d10a      	bne.n	8010a6a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a58:	f383 8811 	msr	BASEPRI, r3
 8010a5c:	f3bf 8f6f 	isb	sy
 8010a60:	f3bf 8f4f 	dsb	sy
 8010a64:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010a66:	bf00      	nop
 8010a68:	e7fe      	b.n	8010a68 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010a6a:	f002 f9f3 	bl	8012e54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	681a      	ldr	r2, [r3, #0]
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a76:	68f9      	ldr	r1, [r7, #12]
 8010a78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010a7a:	fb01 f303 	mul.w	r3, r1, r3
 8010a7e:	441a      	add	r2, r3
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	2200      	movs	r2, #0
 8010a88:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	681a      	ldr	r2, [r3, #0]
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	681a      	ldr	r2, [r3, #0]
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a9a:	3b01      	subs	r3, #1
 8010a9c:	68f9      	ldr	r1, [r7, #12]
 8010a9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010aa0:	fb01 f303 	mul.w	r3, r1, r3
 8010aa4:	441a      	add	r2, r3
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	22ff      	movs	r2, #255	; 0xff
 8010aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	22ff      	movs	r2, #255	; 0xff
 8010ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010aba:	683b      	ldr	r3, [r7, #0]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d114      	bne.n	8010aea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	691b      	ldr	r3, [r3, #16]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d01a      	beq.n	8010afe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	3310      	adds	r3, #16
 8010acc:	4618      	mov	r0, r3
 8010ace:	f001 fa91 	bl	8011ff4 <xTaskRemoveFromEventList>
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d012      	beq.n	8010afe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010ad8:	4b0c      	ldr	r3, [pc, #48]	; (8010b0c <xQueueGenericReset+0xcc>)
 8010ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ade:	601a      	str	r2, [r3, #0]
 8010ae0:	f3bf 8f4f 	dsb	sy
 8010ae4:	f3bf 8f6f 	isb	sy
 8010ae8:	e009      	b.n	8010afe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	3310      	adds	r3, #16
 8010aee:	4618      	mov	r0, r3
 8010af0:	f7ff fef2 	bl	80108d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	3324      	adds	r3, #36	; 0x24
 8010af8:	4618      	mov	r0, r3
 8010afa:	f7ff feed 	bl	80108d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010afe:	f002 f9d9 	bl	8012eb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010b02:	2301      	movs	r3, #1
}
 8010b04:	4618      	mov	r0, r3
 8010b06:	3710      	adds	r7, #16
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	bd80      	pop	{r7, pc}
 8010b0c:	e000ed04 	.word	0xe000ed04

08010b10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b08e      	sub	sp, #56	; 0x38
 8010b14:	af02      	add	r7, sp, #8
 8010b16:	60f8      	str	r0, [r7, #12]
 8010b18:	60b9      	str	r1, [r7, #8]
 8010b1a:	607a      	str	r2, [r7, #4]
 8010b1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d10a      	bne.n	8010b3a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b28:	f383 8811 	msr	BASEPRI, r3
 8010b2c:	f3bf 8f6f 	isb	sy
 8010b30:	f3bf 8f4f 	dsb	sy
 8010b34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010b36:	bf00      	nop
 8010b38:	e7fe      	b.n	8010b38 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d10a      	bne.n	8010b56 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8010b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b44:	f383 8811 	msr	BASEPRI, r3
 8010b48:	f3bf 8f6f 	isb	sy
 8010b4c:	f3bf 8f4f 	dsb	sy
 8010b50:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010b52:	bf00      	nop
 8010b54:	e7fe      	b.n	8010b54 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d002      	beq.n	8010b62 <xQueueGenericCreateStatic+0x52>
 8010b5c:	68bb      	ldr	r3, [r7, #8]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d001      	beq.n	8010b66 <xQueueGenericCreateStatic+0x56>
 8010b62:	2301      	movs	r3, #1
 8010b64:	e000      	b.n	8010b68 <xQueueGenericCreateStatic+0x58>
 8010b66:	2300      	movs	r3, #0
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d10a      	bne.n	8010b82 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b70:	f383 8811 	msr	BASEPRI, r3
 8010b74:	f3bf 8f6f 	isb	sy
 8010b78:	f3bf 8f4f 	dsb	sy
 8010b7c:	623b      	str	r3, [r7, #32]
}
 8010b7e:	bf00      	nop
 8010b80:	e7fe      	b.n	8010b80 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d102      	bne.n	8010b8e <xQueueGenericCreateStatic+0x7e>
 8010b88:	68bb      	ldr	r3, [r7, #8]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d101      	bne.n	8010b92 <xQueueGenericCreateStatic+0x82>
 8010b8e:	2301      	movs	r3, #1
 8010b90:	e000      	b.n	8010b94 <xQueueGenericCreateStatic+0x84>
 8010b92:	2300      	movs	r3, #0
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d10a      	bne.n	8010bae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8010b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b9c:	f383 8811 	msr	BASEPRI, r3
 8010ba0:	f3bf 8f6f 	isb	sy
 8010ba4:	f3bf 8f4f 	dsb	sy
 8010ba8:	61fb      	str	r3, [r7, #28]
}
 8010baa:	bf00      	nop
 8010bac:	e7fe      	b.n	8010bac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010bae:	2350      	movs	r3, #80	; 0x50
 8010bb0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	2b50      	cmp	r3, #80	; 0x50
 8010bb6:	d00a      	beq.n	8010bce <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8010bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bbc:	f383 8811 	msr	BASEPRI, r3
 8010bc0:	f3bf 8f6f 	isb	sy
 8010bc4:	f3bf 8f4f 	dsb	sy
 8010bc8:	61bb      	str	r3, [r7, #24]
}
 8010bca:	bf00      	nop
 8010bcc:	e7fe      	b.n	8010bcc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010bce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010bd0:	683b      	ldr	r3, [r7, #0]
 8010bd2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d00d      	beq.n	8010bf6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bdc:	2201      	movs	r2, #1
 8010bde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010be2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010be8:	9300      	str	r3, [sp, #0]
 8010bea:	4613      	mov	r3, r2
 8010bec:	687a      	ldr	r2, [r7, #4]
 8010bee:	68b9      	ldr	r1, [r7, #8]
 8010bf0:	68f8      	ldr	r0, [r7, #12]
 8010bf2:	f000 f805 	bl	8010c00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	3730      	adds	r7, #48	; 0x30
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bd80      	pop	{r7, pc}

08010c00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b084      	sub	sp, #16
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	60f8      	str	r0, [r7, #12]
 8010c08:	60b9      	str	r1, [r7, #8]
 8010c0a:	607a      	str	r2, [r7, #4]
 8010c0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010c0e:	68bb      	ldr	r3, [r7, #8]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d103      	bne.n	8010c1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010c14:	69bb      	ldr	r3, [r7, #24]
 8010c16:	69ba      	ldr	r2, [r7, #24]
 8010c18:	601a      	str	r2, [r3, #0]
 8010c1a:	e002      	b.n	8010c22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010c1c:	69bb      	ldr	r3, [r7, #24]
 8010c1e:	687a      	ldr	r2, [r7, #4]
 8010c20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010c22:	69bb      	ldr	r3, [r7, #24]
 8010c24:	68fa      	ldr	r2, [r7, #12]
 8010c26:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010c28:	69bb      	ldr	r3, [r7, #24]
 8010c2a:	68ba      	ldr	r2, [r7, #8]
 8010c2c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010c2e:	2101      	movs	r1, #1
 8010c30:	69b8      	ldr	r0, [r7, #24]
 8010c32:	f7ff ff05 	bl	8010a40 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010c36:	69bb      	ldr	r3, [r7, #24]
 8010c38:	78fa      	ldrb	r2, [r7, #3]
 8010c3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010c3e:	bf00      	nop
 8010c40:	3710      	adds	r7, #16
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}
	...

08010c48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b08e      	sub	sp, #56	; 0x38
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	60f8      	str	r0, [r7, #12]
 8010c50:	60b9      	str	r1, [r7, #8]
 8010c52:	607a      	str	r2, [r7, #4]
 8010c54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010c56:	2300      	movs	r3, #0
 8010c58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d10a      	bne.n	8010c7a <xQueueGenericSend+0x32>
	__asm volatile
 8010c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c68:	f383 8811 	msr	BASEPRI, r3
 8010c6c:	f3bf 8f6f 	isb	sy
 8010c70:	f3bf 8f4f 	dsb	sy
 8010c74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010c76:	bf00      	nop
 8010c78:	e7fe      	b.n	8010c78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010c7a:	68bb      	ldr	r3, [r7, #8]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d103      	bne.n	8010c88 <xQueueGenericSend+0x40>
 8010c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d101      	bne.n	8010c8c <xQueueGenericSend+0x44>
 8010c88:	2301      	movs	r3, #1
 8010c8a:	e000      	b.n	8010c8e <xQueueGenericSend+0x46>
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d10a      	bne.n	8010ca8 <xQueueGenericSend+0x60>
	__asm volatile
 8010c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c96:	f383 8811 	msr	BASEPRI, r3
 8010c9a:	f3bf 8f6f 	isb	sy
 8010c9e:	f3bf 8f4f 	dsb	sy
 8010ca2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010ca4:	bf00      	nop
 8010ca6:	e7fe      	b.n	8010ca6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010ca8:	683b      	ldr	r3, [r7, #0]
 8010caa:	2b02      	cmp	r3, #2
 8010cac:	d103      	bne.n	8010cb6 <xQueueGenericSend+0x6e>
 8010cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010cb2:	2b01      	cmp	r3, #1
 8010cb4:	d101      	bne.n	8010cba <xQueueGenericSend+0x72>
 8010cb6:	2301      	movs	r3, #1
 8010cb8:	e000      	b.n	8010cbc <xQueueGenericSend+0x74>
 8010cba:	2300      	movs	r3, #0
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d10a      	bne.n	8010cd6 <xQueueGenericSend+0x8e>
	__asm volatile
 8010cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc4:	f383 8811 	msr	BASEPRI, r3
 8010cc8:	f3bf 8f6f 	isb	sy
 8010ccc:	f3bf 8f4f 	dsb	sy
 8010cd0:	623b      	str	r3, [r7, #32]
}
 8010cd2:	bf00      	nop
 8010cd4:	e7fe      	b.n	8010cd4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010cd6:	f001 fb5f 	bl	8012398 <xTaskGetSchedulerState>
 8010cda:	4603      	mov	r3, r0
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d102      	bne.n	8010ce6 <xQueueGenericSend+0x9e>
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d101      	bne.n	8010cea <xQueueGenericSend+0xa2>
 8010ce6:	2301      	movs	r3, #1
 8010ce8:	e000      	b.n	8010cec <xQueueGenericSend+0xa4>
 8010cea:	2300      	movs	r3, #0
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d10a      	bne.n	8010d06 <xQueueGenericSend+0xbe>
	__asm volatile
 8010cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cf4:	f383 8811 	msr	BASEPRI, r3
 8010cf8:	f3bf 8f6f 	isb	sy
 8010cfc:	f3bf 8f4f 	dsb	sy
 8010d00:	61fb      	str	r3, [r7, #28]
}
 8010d02:	bf00      	nop
 8010d04:	e7fe      	b.n	8010d04 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010d06:	f002 f8a5 	bl	8012e54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d12:	429a      	cmp	r2, r3
 8010d14:	d302      	bcc.n	8010d1c <xQueueGenericSend+0xd4>
 8010d16:	683b      	ldr	r3, [r7, #0]
 8010d18:	2b02      	cmp	r3, #2
 8010d1a:	d129      	bne.n	8010d70 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010d1c:	683a      	ldr	r2, [r7, #0]
 8010d1e:	68b9      	ldr	r1, [r7, #8]
 8010d20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d22:	f000 fa0b 	bl	801113c <prvCopyDataToQueue>
 8010d26:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d010      	beq.n	8010d52 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d32:	3324      	adds	r3, #36	; 0x24
 8010d34:	4618      	mov	r0, r3
 8010d36:	f001 f95d 	bl	8011ff4 <xTaskRemoveFromEventList>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d013      	beq.n	8010d68 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010d40:	4b3f      	ldr	r3, [pc, #252]	; (8010e40 <xQueueGenericSend+0x1f8>)
 8010d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d46:	601a      	str	r2, [r3, #0]
 8010d48:	f3bf 8f4f 	dsb	sy
 8010d4c:	f3bf 8f6f 	isb	sy
 8010d50:	e00a      	b.n	8010d68 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d007      	beq.n	8010d68 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010d58:	4b39      	ldr	r3, [pc, #228]	; (8010e40 <xQueueGenericSend+0x1f8>)
 8010d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d5e:	601a      	str	r2, [r3, #0]
 8010d60:	f3bf 8f4f 	dsb	sy
 8010d64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010d68:	f002 f8a4 	bl	8012eb4 <vPortExitCritical>
				return pdPASS;
 8010d6c:	2301      	movs	r3, #1
 8010d6e:	e063      	b.n	8010e38 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d103      	bne.n	8010d7e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010d76:	f002 f89d 	bl	8012eb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	e05c      	b.n	8010e38 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d106      	bne.n	8010d92 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010d84:	f107 0314 	add.w	r3, r7, #20
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f001 f997 	bl	80120bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010d8e:	2301      	movs	r3, #1
 8010d90:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010d92:	f002 f88f 	bl	8012eb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010d96:	f000 ff03 	bl	8011ba0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010d9a:	f002 f85b 	bl	8012e54 <vPortEnterCritical>
 8010d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010da0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010da4:	b25b      	sxtb	r3, r3
 8010da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010daa:	d103      	bne.n	8010db4 <xQueueGenericSend+0x16c>
 8010dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dae:	2200      	movs	r2, #0
 8010db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010db6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010dba:	b25b      	sxtb	r3, r3
 8010dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dc0:	d103      	bne.n	8010dca <xQueueGenericSend+0x182>
 8010dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010dca:	f002 f873 	bl	8012eb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010dce:	1d3a      	adds	r2, r7, #4
 8010dd0:	f107 0314 	add.w	r3, r7, #20
 8010dd4:	4611      	mov	r1, r2
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	f001 f986 	bl	80120e8 <xTaskCheckForTimeOut>
 8010ddc:	4603      	mov	r3, r0
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d124      	bne.n	8010e2c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010de2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010de4:	f000 faa2 	bl	801132c <prvIsQueueFull>
 8010de8:	4603      	mov	r3, r0
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d018      	beq.n	8010e20 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010df0:	3310      	adds	r3, #16
 8010df2:	687a      	ldr	r2, [r7, #4]
 8010df4:	4611      	mov	r1, r2
 8010df6:	4618      	mov	r0, r3
 8010df8:	f001 f8ac 	bl	8011f54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010dfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010dfe:	f000 fa2d 	bl	801125c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010e02:	f000 fedb 	bl	8011bbc <xTaskResumeAll>
 8010e06:	4603      	mov	r3, r0
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	f47f af7c 	bne.w	8010d06 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8010e0e:	4b0c      	ldr	r3, [pc, #48]	; (8010e40 <xQueueGenericSend+0x1f8>)
 8010e10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e14:	601a      	str	r2, [r3, #0]
 8010e16:	f3bf 8f4f 	dsb	sy
 8010e1a:	f3bf 8f6f 	isb	sy
 8010e1e:	e772      	b.n	8010d06 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010e20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e22:	f000 fa1b 	bl	801125c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010e26:	f000 fec9 	bl	8011bbc <xTaskResumeAll>
 8010e2a:	e76c      	b.n	8010d06 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010e2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e2e:	f000 fa15 	bl	801125c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010e32:	f000 fec3 	bl	8011bbc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010e36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010e38:	4618      	mov	r0, r3
 8010e3a:	3738      	adds	r7, #56	; 0x38
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bd80      	pop	{r7, pc}
 8010e40:	e000ed04 	.word	0xe000ed04

08010e44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b090      	sub	sp, #64	; 0x40
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	60f8      	str	r0, [r7, #12]
 8010e4c:	60b9      	str	r1, [r7, #8]
 8010e4e:	607a      	str	r2, [r7, #4]
 8010e50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8010e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d10a      	bne.n	8010e72 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8010e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e60:	f383 8811 	msr	BASEPRI, r3
 8010e64:	f3bf 8f6f 	isb	sy
 8010e68:	f3bf 8f4f 	dsb	sy
 8010e6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010e6e:	bf00      	nop
 8010e70:	e7fe      	b.n	8010e70 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010e72:	68bb      	ldr	r3, [r7, #8]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d103      	bne.n	8010e80 <xQueueGenericSendFromISR+0x3c>
 8010e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d101      	bne.n	8010e84 <xQueueGenericSendFromISR+0x40>
 8010e80:	2301      	movs	r3, #1
 8010e82:	e000      	b.n	8010e86 <xQueueGenericSendFromISR+0x42>
 8010e84:	2300      	movs	r3, #0
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d10a      	bne.n	8010ea0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8010e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e8e:	f383 8811 	msr	BASEPRI, r3
 8010e92:	f3bf 8f6f 	isb	sy
 8010e96:	f3bf 8f4f 	dsb	sy
 8010e9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010e9c:	bf00      	nop
 8010e9e:	e7fe      	b.n	8010e9e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010ea0:	683b      	ldr	r3, [r7, #0]
 8010ea2:	2b02      	cmp	r3, #2
 8010ea4:	d103      	bne.n	8010eae <xQueueGenericSendFromISR+0x6a>
 8010ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010eaa:	2b01      	cmp	r3, #1
 8010eac:	d101      	bne.n	8010eb2 <xQueueGenericSendFromISR+0x6e>
 8010eae:	2301      	movs	r3, #1
 8010eb0:	e000      	b.n	8010eb4 <xQueueGenericSendFromISR+0x70>
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d10a      	bne.n	8010ece <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8010eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ebc:	f383 8811 	msr	BASEPRI, r3
 8010ec0:	f3bf 8f6f 	isb	sy
 8010ec4:	f3bf 8f4f 	dsb	sy
 8010ec8:	623b      	str	r3, [r7, #32]
}
 8010eca:	bf00      	nop
 8010ecc:	e7fe      	b.n	8010ecc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010ece:	f002 f8a3 	bl	8013018 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010ed2:	f3ef 8211 	mrs	r2, BASEPRI
 8010ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eda:	f383 8811 	msr	BASEPRI, r3
 8010ede:	f3bf 8f6f 	isb	sy
 8010ee2:	f3bf 8f4f 	dsb	sy
 8010ee6:	61fa      	str	r2, [r7, #28]
 8010ee8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010eea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010eec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ef6:	429a      	cmp	r2, r3
 8010ef8:	d302      	bcc.n	8010f00 <xQueueGenericSendFromISR+0xbc>
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	2b02      	cmp	r3, #2
 8010efe:	d12f      	bne.n	8010f60 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010f10:	683a      	ldr	r2, [r7, #0]
 8010f12:	68b9      	ldr	r1, [r7, #8]
 8010f14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010f16:	f000 f911 	bl	801113c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010f1a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8010f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f22:	d112      	bne.n	8010f4a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d016      	beq.n	8010f5a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f2e:	3324      	adds	r3, #36	; 0x24
 8010f30:	4618      	mov	r0, r3
 8010f32:	f001 f85f 	bl	8011ff4 <xTaskRemoveFromEventList>
 8010f36:	4603      	mov	r3, r0
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d00e      	beq.n	8010f5a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d00b      	beq.n	8010f5a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	2201      	movs	r2, #1
 8010f46:	601a      	str	r2, [r3, #0]
 8010f48:	e007      	b.n	8010f5a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010f4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010f4e:	3301      	adds	r3, #1
 8010f50:	b2db      	uxtb	r3, r3
 8010f52:	b25a      	sxtb	r2, r3
 8010f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010f5a:	2301      	movs	r3, #1
 8010f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8010f5e:	e001      	b.n	8010f64 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010f60:	2300      	movs	r3, #0
 8010f62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f66:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010f68:	697b      	ldr	r3, [r7, #20]
 8010f6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010f6e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010f72:	4618      	mov	r0, r3
 8010f74:	3740      	adds	r7, #64	; 0x40
 8010f76:	46bd      	mov	sp, r7
 8010f78:	bd80      	pop	{r7, pc}
	...

08010f7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b08c      	sub	sp, #48	; 0x30
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	60f8      	str	r0, [r7, #12]
 8010f84:	60b9      	str	r1, [r7, #8]
 8010f86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010f88:	2300      	movs	r3, #0
 8010f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d10a      	bne.n	8010fac <xQueueReceive+0x30>
	__asm volatile
 8010f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f9a:	f383 8811 	msr	BASEPRI, r3
 8010f9e:	f3bf 8f6f 	isb	sy
 8010fa2:	f3bf 8f4f 	dsb	sy
 8010fa6:	623b      	str	r3, [r7, #32]
}
 8010fa8:	bf00      	nop
 8010faa:	e7fe      	b.n	8010faa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010fac:	68bb      	ldr	r3, [r7, #8]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d103      	bne.n	8010fba <xQueueReceive+0x3e>
 8010fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d101      	bne.n	8010fbe <xQueueReceive+0x42>
 8010fba:	2301      	movs	r3, #1
 8010fbc:	e000      	b.n	8010fc0 <xQueueReceive+0x44>
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d10a      	bne.n	8010fda <xQueueReceive+0x5e>
	__asm volatile
 8010fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fc8:	f383 8811 	msr	BASEPRI, r3
 8010fcc:	f3bf 8f6f 	isb	sy
 8010fd0:	f3bf 8f4f 	dsb	sy
 8010fd4:	61fb      	str	r3, [r7, #28]
}
 8010fd6:	bf00      	nop
 8010fd8:	e7fe      	b.n	8010fd8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010fda:	f001 f9dd 	bl	8012398 <xTaskGetSchedulerState>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d102      	bne.n	8010fea <xQueueReceive+0x6e>
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d101      	bne.n	8010fee <xQueueReceive+0x72>
 8010fea:	2301      	movs	r3, #1
 8010fec:	e000      	b.n	8010ff0 <xQueueReceive+0x74>
 8010fee:	2300      	movs	r3, #0
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d10a      	bne.n	801100a <xQueueReceive+0x8e>
	__asm volatile
 8010ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ff8:	f383 8811 	msr	BASEPRI, r3
 8010ffc:	f3bf 8f6f 	isb	sy
 8011000:	f3bf 8f4f 	dsb	sy
 8011004:	61bb      	str	r3, [r7, #24]
}
 8011006:	bf00      	nop
 8011008:	e7fe      	b.n	8011008 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801100a:	f001 ff23 	bl	8012e54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801100e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011012:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011016:	2b00      	cmp	r3, #0
 8011018:	d01f      	beq.n	801105a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801101a:	68b9      	ldr	r1, [r7, #8]
 801101c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801101e:	f000 f8f7 	bl	8011210 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011024:	1e5a      	subs	r2, r3, #1
 8011026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011028:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801102a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801102c:	691b      	ldr	r3, [r3, #16]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d00f      	beq.n	8011052 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011034:	3310      	adds	r3, #16
 8011036:	4618      	mov	r0, r3
 8011038:	f000 ffdc 	bl	8011ff4 <xTaskRemoveFromEventList>
 801103c:	4603      	mov	r3, r0
 801103e:	2b00      	cmp	r3, #0
 8011040:	d007      	beq.n	8011052 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011042:	4b3d      	ldr	r3, [pc, #244]	; (8011138 <xQueueReceive+0x1bc>)
 8011044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011048:	601a      	str	r2, [r3, #0]
 801104a:	f3bf 8f4f 	dsb	sy
 801104e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011052:	f001 ff2f 	bl	8012eb4 <vPortExitCritical>
				return pdPASS;
 8011056:	2301      	movs	r3, #1
 8011058:	e069      	b.n	801112e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d103      	bne.n	8011068 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011060:	f001 ff28 	bl	8012eb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011064:	2300      	movs	r3, #0
 8011066:	e062      	b.n	801112e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801106a:	2b00      	cmp	r3, #0
 801106c:	d106      	bne.n	801107c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801106e:	f107 0310 	add.w	r3, r7, #16
 8011072:	4618      	mov	r0, r3
 8011074:	f001 f822 	bl	80120bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011078:	2301      	movs	r3, #1
 801107a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801107c:	f001 ff1a 	bl	8012eb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011080:	f000 fd8e 	bl	8011ba0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011084:	f001 fee6 	bl	8012e54 <vPortEnterCritical>
 8011088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801108a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801108e:	b25b      	sxtb	r3, r3
 8011090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011094:	d103      	bne.n	801109e <xQueueReceive+0x122>
 8011096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011098:	2200      	movs	r2, #0
 801109a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801109e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80110a4:	b25b      	sxtb	r3, r3
 80110a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110aa:	d103      	bne.n	80110b4 <xQueueReceive+0x138>
 80110ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ae:	2200      	movs	r2, #0
 80110b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80110b4:	f001 fefe 	bl	8012eb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80110b8:	1d3a      	adds	r2, r7, #4
 80110ba:	f107 0310 	add.w	r3, r7, #16
 80110be:	4611      	mov	r1, r2
 80110c0:	4618      	mov	r0, r3
 80110c2:	f001 f811 	bl	80120e8 <xTaskCheckForTimeOut>
 80110c6:	4603      	mov	r3, r0
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d123      	bne.n	8011114 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80110cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80110ce:	f000 f917 	bl	8011300 <prvIsQueueEmpty>
 80110d2:	4603      	mov	r3, r0
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d017      	beq.n	8011108 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80110d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110da:	3324      	adds	r3, #36	; 0x24
 80110dc:	687a      	ldr	r2, [r7, #4]
 80110de:	4611      	mov	r1, r2
 80110e0:	4618      	mov	r0, r3
 80110e2:	f000 ff37 	bl	8011f54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80110e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80110e8:	f000 f8b8 	bl	801125c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80110ec:	f000 fd66 	bl	8011bbc <xTaskResumeAll>
 80110f0:	4603      	mov	r3, r0
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d189      	bne.n	801100a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80110f6:	4b10      	ldr	r3, [pc, #64]	; (8011138 <xQueueReceive+0x1bc>)
 80110f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110fc:	601a      	str	r2, [r3, #0]
 80110fe:	f3bf 8f4f 	dsb	sy
 8011102:	f3bf 8f6f 	isb	sy
 8011106:	e780      	b.n	801100a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801110a:	f000 f8a7 	bl	801125c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801110e:	f000 fd55 	bl	8011bbc <xTaskResumeAll>
 8011112:	e77a      	b.n	801100a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011116:	f000 f8a1 	bl	801125c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801111a:	f000 fd4f 	bl	8011bbc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801111e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011120:	f000 f8ee 	bl	8011300 <prvIsQueueEmpty>
 8011124:	4603      	mov	r3, r0
 8011126:	2b00      	cmp	r3, #0
 8011128:	f43f af6f 	beq.w	801100a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801112c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801112e:	4618      	mov	r0, r3
 8011130:	3730      	adds	r7, #48	; 0x30
 8011132:	46bd      	mov	sp, r7
 8011134:	bd80      	pop	{r7, pc}
 8011136:	bf00      	nop
 8011138:	e000ed04 	.word	0xe000ed04

0801113c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b086      	sub	sp, #24
 8011140:	af00      	add	r7, sp, #0
 8011142:	60f8      	str	r0, [r7, #12]
 8011144:	60b9      	str	r1, [r7, #8]
 8011146:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011148:	2300      	movs	r3, #0
 801114a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011150:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011156:	2b00      	cmp	r3, #0
 8011158:	d10d      	bne.n	8011176 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d14d      	bne.n	80111fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	689b      	ldr	r3, [r3, #8]
 8011166:	4618      	mov	r0, r3
 8011168:	f001 f934 	bl	80123d4 <xTaskPriorityDisinherit>
 801116c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	2200      	movs	r2, #0
 8011172:	609a      	str	r2, [r3, #8]
 8011174:	e043      	b.n	80111fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d119      	bne.n	80111b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	6858      	ldr	r0, [r3, #4]
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011184:	461a      	mov	r2, r3
 8011186:	68b9      	ldr	r1, [r7, #8]
 8011188:	f003 fbb6 	bl	80148f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	685a      	ldr	r2, [r3, #4]
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011194:	441a      	add	r2, r3
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	685a      	ldr	r2, [r3, #4]
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	689b      	ldr	r3, [r3, #8]
 80111a2:	429a      	cmp	r2, r3
 80111a4:	d32b      	bcc.n	80111fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	681a      	ldr	r2, [r3, #0]
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	605a      	str	r2, [r3, #4]
 80111ae:	e026      	b.n	80111fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	68d8      	ldr	r0, [r3, #12]
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111b8:	461a      	mov	r2, r3
 80111ba:	68b9      	ldr	r1, [r7, #8]
 80111bc:	f003 fb9c 	bl	80148f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	68da      	ldr	r2, [r3, #12]
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111c8:	425b      	negs	r3, r3
 80111ca:	441a      	add	r2, r3
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	68da      	ldr	r2, [r3, #12]
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	429a      	cmp	r2, r3
 80111da:	d207      	bcs.n	80111ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	689a      	ldr	r2, [r3, #8]
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111e4:	425b      	negs	r3, r3
 80111e6:	441a      	add	r2, r3
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	2b02      	cmp	r3, #2
 80111f0:	d105      	bne.n	80111fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80111f2:	693b      	ldr	r3, [r7, #16]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d002      	beq.n	80111fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80111f8:	693b      	ldr	r3, [r7, #16]
 80111fa:	3b01      	subs	r3, #1
 80111fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80111fe:	693b      	ldr	r3, [r7, #16]
 8011200:	1c5a      	adds	r2, r3, #1
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011206:	697b      	ldr	r3, [r7, #20]
}
 8011208:	4618      	mov	r0, r3
 801120a:	3718      	adds	r7, #24
 801120c:	46bd      	mov	sp, r7
 801120e:	bd80      	pop	{r7, pc}

08011210 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011210:	b580      	push	{r7, lr}
 8011212:	b082      	sub	sp, #8
 8011214:	af00      	add	r7, sp, #0
 8011216:	6078      	str	r0, [r7, #4]
 8011218:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801121e:	2b00      	cmp	r3, #0
 8011220:	d018      	beq.n	8011254 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	68da      	ldr	r2, [r3, #12]
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801122a:	441a      	add	r2, r3
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	68da      	ldr	r2, [r3, #12]
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	689b      	ldr	r3, [r3, #8]
 8011238:	429a      	cmp	r2, r3
 801123a:	d303      	bcc.n	8011244 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	681a      	ldr	r2, [r3, #0]
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	68d9      	ldr	r1, [r3, #12]
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801124c:	461a      	mov	r2, r3
 801124e:	6838      	ldr	r0, [r7, #0]
 8011250:	f003 fb52 	bl	80148f8 <memcpy>
	}
}
 8011254:	bf00      	nop
 8011256:	3708      	adds	r7, #8
 8011258:	46bd      	mov	sp, r7
 801125a:	bd80      	pop	{r7, pc}

0801125c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801125c:	b580      	push	{r7, lr}
 801125e:	b084      	sub	sp, #16
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011264:	f001 fdf6 	bl	8012e54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801126e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011270:	e011      	b.n	8011296 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011276:	2b00      	cmp	r3, #0
 8011278:	d012      	beq.n	80112a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	3324      	adds	r3, #36	; 0x24
 801127e:	4618      	mov	r0, r3
 8011280:	f000 feb8 	bl	8011ff4 <xTaskRemoveFromEventList>
 8011284:	4603      	mov	r3, r0
 8011286:	2b00      	cmp	r3, #0
 8011288:	d001      	beq.n	801128e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801128a:	f000 ff8f 	bl	80121ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801128e:	7bfb      	ldrb	r3, [r7, #15]
 8011290:	3b01      	subs	r3, #1
 8011292:	b2db      	uxtb	r3, r3
 8011294:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801129a:	2b00      	cmp	r3, #0
 801129c:	dce9      	bgt.n	8011272 <prvUnlockQueue+0x16>
 801129e:	e000      	b.n	80112a2 <prvUnlockQueue+0x46>
					break;
 80112a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	22ff      	movs	r2, #255	; 0xff
 80112a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80112aa:	f001 fe03 	bl	8012eb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80112ae:	f001 fdd1 	bl	8012e54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80112b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80112ba:	e011      	b.n	80112e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	691b      	ldr	r3, [r3, #16]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d012      	beq.n	80112ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	3310      	adds	r3, #16
 80112c8:	4618      	mov	r0, r3
 80112ca:	f000 fe93 	bl	8011ff4 <xTaskRemoveFromEventList>
 80112ce:	4603      	mov	r3, r0
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d001      	beq.n	80112d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80112d4:	f000 ff6a 	bl	80121ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80112d8:	7bbb      	ldrb	r3, [r7, #14]
 80112da:	3b01      	subs	r3, #1
 80112dc:	b2db      	uxtb	r3, r3
 80112de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80112e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	dce9      	bgt.n	80112bc <prvUnlockQueue+0x60>
 80112e8:	e000      	b.n	80112ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80112ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	22ff      	movs	r2, #255	; 0xff
 80112f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80112f4:	f001 fdde 	bl	8012eb4 <vPortExitCritical>
}
 80112f8:	bf00      	nop
 80112fa:	3710      	adds	r7, #16
 80112fc:	46bd      	mov	sp, r7
 80112fe:	bd80      	pop	{r7, pc}

08011300 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011300:	b580      	push	{r7, lr}
 8011302:	b084      	sub	sp, #16
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011308:	f001 fda4 	bl	8012e54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011310:	2b00      	cmp	r3, #0
 8011312:	d102      	bne.n	801131a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011314:	2301      	movs	r3, #1
 8011316:	60fb      	str	r3, [r7, #12]
 8011318:	e001      	b.n	801131e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801131a:	2300      	movs	r3, #0
 801131c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801131e:	f001 fdc9 	bl	8012eb4 <vPortExitCritical>

	return xReturn;
 8011322:	68fb      	ldr	r3, [r7, #12]
}
 8011324:	4618      	mov	r0, r3
 8011326:	3710      	adds	r7, #16
 8011328:	46bd      	mov	sp, r7
 801132a:	bd80      	pop	{r7, pc}

0801132c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801132c:	b580      	push	{r7, lr}
 801132e:	b084      	sub	sp, #16
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011334:	f001 fd8e 	bl	8012e54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011340:	429a      	cmp	r2, r3
 8011342:	d102      	bne.n	801134a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011344:	2301      	movs	r3, #1
 8011346:	60fb      	str	r3, [r7, #12]
 8011348:	e001      	b.n	801134e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801134a:	2300      	movs	r3, #0
 801134c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801134e:	f001 fdb1 	bl	8012eb4 <vPortExitCritical>

	return xReturn;
 8011352:	68fb      	ldr	r3, [r7, #12]
}
 8011354:	4618      	mov	r0, r3
 8011356:	3710      	adds	r7, #16
 8011358:	46bd      	mov	sp, r7
 801135a:	bd80      	pop	{r7, pc}

0801135c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801135c:	b480      	push	{r7}
 801135e:	b085      	sub	sp, #20
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
 8011364:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011366:	2300      	movs	r3, #0
 8011368:	60fb      	str	r3, [r7, #12]
 801136a:	e014      	b.n	8011396 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801136c:	4a0f      	ldr	r2, [pc, #60]	; (80113ac <vQueueAddToRegistry+0x50>)
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d10b      	bne.n	8011390 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011378:	490c      	ldr	r1, [pc, #48]	; (80113ac <vQueueAddToRegistry+0x50>)
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	683a      	ldr	r2, [r7, #0]
 801137e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011382:	4a0a      	ldr	r2, [pc, #40]	; (80113ac <vQueueAddToRegistry+0x50>)
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	00db      	lsls	r3, r3, #3
 8011388:	4413      	add	r3, r2
 801138a:	687a      	ldr	r2, [r7, #4]
 801138c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801138e:	e006      	b.n	801139e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	3301      	adds	r3, #1
 8011394:	60fb      	str	r3, [r7, #12]
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	2b07      	cmp	r3, #7
 801139a:	d9e7      	bls.n	801136c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801139c:	bf00      	nop
 801139e:	bf00      	nop
 80113a0:	3714      	adds	r7, #20
 80113a2:	46bd      	mov	sp, r7
 80113a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a8:	4770      	bx	lr
 80113aa:	bf00      	nop
 80113ac:	20006508 	.word	0x20006508

080113b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b086      	sub	sp, #24
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	60f8      	str	r0, [r7, #12]
 80113b8:	60b9      	str	r1, [r7, #8]
 80113ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80113c0:	f001 fd48 	bl	8012e54 <vPortEnterCritical>
 80113c4:	697b      	ldr	r3, [r7, #20]
 80113c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80113ca:	b25b      	sxtb	r3, r3
 80113cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113d0:	d103      	bne.n	80113da <vQueueWaitForMessageRestricted+0x2a>
 80113d2:	697b      	ldr	r3, [r7, #20]
 80113d4:	2200      	movs	r2, #0
 80113d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80113da:	697b      	ldr	r3, [r7, #20]
 80113dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80113e0:	b25b      	sxtb	r3, r3
 80113e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113e6:	d103      	bne.n	80113f0 <vQueueWaitForMessageRestricted+0x40>
 80113e8:	697b      	ldr	r3, [r7, #20]
 80113ea:	2200      	movs	r2, #0
 80113ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80113f0:	f001 fd60 	bl	8012eb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80113f4:	697b      	ldr	r3, [r7, #20]
 80113f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d106      	bne.n	801140a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80113fc:	697b      	ldr	r3, [r7, #20]
 80113fe:	3324      	adds	r3, #36	; 0x24
 8011400:	687a      	ldr	r2, [r7, #4]
 8011402:	68b9      	ldr	r1, [r7, #8]
 8011404:	4618      	mov	r0, r3
 8011406:	f000 fdc9 	bl	8011f9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801140a:	6978      	ldr	r0, [r7, #20]
 801140c:	f7ff ff26 	bl	801125c <prvUnlockQueue>
	}
 8011410:	bf00      	nop
 8011412:	3718      	adds	r7, #24
 8011414:	46bd      	mov	sp, r7
 8011416:	bd80      	pop	{r7, pc}

08011418 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011418:	b580      	push	{r7, lr}
 801141a:	b08e      	sub	sp, #56	; 0x38
 801141c:	af04      	add	r7, sp, #16
 801141e:	60f8      	str	r0, [r7, #12]
 8011420:	60b9      	str	r1, [r7, #8]
 8011422:	607a      	str	r2, [r7, #4]
 8011424:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011428:	2b00      	cmp	r3, #0
 801142a:	d10a      	bne.n	8011442 <xTaskCreateStatic+0x2a>
	__asm volatile
 801142c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011430:	f383 8811 	msr	BASEPRI, r3
 8011434:	f3bf 8f6f 	isb	sy
 8011438:	f3bf 8f4f 	dsb	sy
 801143c:	623b      	str	r3, [r7, #32]
}
 801143e:	bf00      	nop
 8011440:	e7fe      	b.n	8011440 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011444:	2b00      	cmp	r3, #0
 8011446:	d10a      	bne.n	801145e <xTaskCreateStatic+0x46>
	__asm volatile
 8011448:	f04f 0350 	mov.w	r3, #80	; 0x50
 801144c:	f383 8811 	msr	BASEPRI, r3
 8011450:	f3bf 8f6f 	isb	sy
 8011454:	f3bf 8f4f 	dsb	sy
 8011458:	61fb      	str	r3, [r7, #28]
}
 801145a:	bf00      	nop
 801145c:	e7fe      	b.n	801145c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801145e:	23bc      	movs	r3, #188	; 0xbc
 8011460:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011462:	693b      	ldr	r3, [r7, #16]
 8011464:	2bbc      	cmp	r3, #188	; 0xbc
 8011466:	d00a      	beq.n	801147e <xTaskCreateStatic+0x66>
	__asm volatile
 8011468:	f04f 0350 	mov.w	r3, #80	; 0x50
 801146c:	f383 8811 	msr	BASEPRI, r3
 8011470:	f3bf 8f6f 	isb	sy
 8011474:	f3bf 8f4f 	dsb	sy
 8011478:	61bb      	str	r3, [r7, #24]
}
 801147a:	bf00      	nop
 801147c:	e7fe      	b.n	801147c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801147e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011482:	2b00      	cmp	r3, #0
 8011484:	d01e      	beq.n	80114c4 <xTaskCreateStatic+0xac>
 8011486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011488:	2b00      	cmp	r3, #0
 801148a:	d01b      	beq.n	80114c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801148c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801148e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011494:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011498:	2202      	movs	r2, #2
 801149a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801149e:	2300      	movs	r3, #0
 80114a0:	9303      	str	r3, [sp, #12]
 80114a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114a4:	9302      	str	r3, [sp, #8]
 80114a6:	f107 0314 	add.w	r3, r7, #20
 80114aa:	9301      	str	r3, [sp, #4]
 80114ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114ae:	9300      	str	r3, [sp, #0]
 80114b0:	683b      	ldr	r3, [r7, #0]
 80114b2:	687a      	ldr	r2, [r7, #4]
 80114b4:	68b9      	ldr	r1, [r7, #8]
 80114b6:	68f8      	ldr	r0, [r7, #12]
 80114b8:	f000 f850 	bl	801155c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80114bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80114be:	f000 f8f3 	bl	80116a8 <prvAddNewTaskToReadyList>
 80114c2:	e001      	b.n	80114c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80114c4:	2300      	movs	r3, #0
 80114c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80114c8:	697b      	ldr	r3, [r7, #20]
	}
 80114ca:	4618      	mov	r0, r3
 80114cc:	3728      	adds	r7, #40	; 0x28
 80114ce:	46bd      	mov	sp, r7
 80114d0:	bd80      	pop	{r7, pc}

080114d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80114d2:	b580      	push	{r7, lr}
 80114d4:	b08c      	sub	sp, #48	; 0x30
 80114d6:	af04      	add	r7, sp, #16
 80114d8:	60f8      	str	r0, [r7, #12]
 80114da:	60b9      	str	r1, [r7, #8]
 80114dc:	603b      	str	r3, [r7, #0]
 80114de:	4613      	mov	r3, r2
 80114e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80114e2:	88fb      	ldrh	r3, [r7, #6]
 80114e4:	009b      	lsls	r3, r3, #2
 80114e6:	4618      	mov	r0, r3
 80114e8:	f001 fdd6 	bl	8013098 <pvPortMalloc>
 80114ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80114ee:	697b      	ldr	r3, [r7, #20]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d00e      	beq.n	8011512 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80114f4:	20bc      	movs	r0, #188	; 0xbc
 80114f6:	f001 fdcf 	bl	8013098 <pvPortMalloc>
 80114fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80114fc:	69fb      	ldr	r3, [r7, #28]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d003      	beq.n	801150a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011502:	69fb      	ldr	r3, [r7, #28]
 8011504:	697a      	ldr	r2, [r7, #20]
 8011506:	631a      	str	r2, [r3, #48]	; 0x30
 8011508:	e005      	b.n	8011516 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801150a:	6978      	ldr	r0, [r7, #20]
 801150c:	f001 fe90 	bl	8013230 <vPortFree>
 8011510:	e001      	b.n	8011516 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011512:	2300      	movs	r3, #0
 8011514:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011516:	69fb      	ldr	r3, [r7, #28]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d017      	beq.n	801154c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801151c:	69fb      	ldr	r3, [r7, #28]
 801151e:	2200      	movs	r2, #0
 8011520:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011524:	88fa      	ldrh	r2, [r7, #6]
 8011526:	2300      	movs	r3, #0
 8011528:	9303      	str	r3, [sp, #12]
 801152a:	69fb      	ldr	r3, [r7, #28]
 801152c:	9302      	str	r3, [sp, #8]
 801152e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011530:	9301      	str	r3, [sp, #4]
 8011532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011534:	9300      	str	r3, [sp, #0]
 8011536:	683b      	ldr	r3, [r7, #0]
 8011538:	68b9      	ldr	r1, [r7, #8]
 801153a:	68f8      	ldr	r0, [r7, #12]
 801153c:	f000 f80e 	bl	801155c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011540:	69f8      	ldr	r0, [r7, #28]
 8011542:	f000 f8b1 	bl	80116a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011546:	2301      	movs	r3, #1
 8011548:	61bb      	str	r3, [r7, #24]
 801154a:	e002      	b.n	8011552 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801154c:	f04f 33ff 	mov.w	r3, #4294967295
 8011550:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011552:	69bb      	ldr	r3, [r7, #24]
	}
 8011554:	4618      	mov	r0, r3
 8011556:	3720      	adds	r7, #32
 8011558:	46bd      	mov	sp, r7
 801155a:	bd80      	pop	{r7, pc}

0801155c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b088      	sub	sp, #32
 8011560:	af00      	add	r7, sp, #0
 8011562:	60f8      	str	r0, [r7, #12]
 8011564:	60b9      	str	r1, [r7, #8]
 8011566:	607a      	str	r2, [r7, #4]
 8011568:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801156a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801156c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	009b      	lsls	r3, r3, #2
 8011572:	461a      	mov	r2, r3
 8011574:	21a5      	movs	r1, #165	; 0xa5
 8011576:	f003 f9e7 	bl	8014948 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801157a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801157c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011584:	3b01      	subs	r3, #1
 8011586:	009b      	lsls	r3, r3, #2
 8011588:	4413      	add	r3, r2
 801158a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801158c:	69bb      	ldr	r3, [r7, #24]
 801158e:	f023 0307 	bic.w	r3, r3, #7
 8011592:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011594:	69bb      	ldr	r3, [r7, #24]
 8011596:	f003 0307 	and.w	r3, r3, #7
 801159a:	2b00      	cmp	r3, #0
 801159c:	d00a      	beq.n	80115b4 <prvInitialiseNewTask+0x58>
	__asm volatile
 801159e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115a2:	f383 8811 	msr	BASEPRI, r3
 80115a6:	f3bf 8f6f 	isb	sy
 80115aa:	f3bf 8f4f 	dsb	sy
 80115ae:	617b      	str	r3, [r7, #20]
}
 80115b0:	bf00      	nop
 80115b2:	e7fe      	b.n	80115b2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80115b4:	68bb      	ldr	r3, [r7, #8]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d01f      	beq.n	80115fa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80115ba:	2300      	movs	r3, #0
 80115bc:	61fb      	str	r3, [r7, #28]
 80115be:	e012      	b.n	80115e6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80115c0:	68ba      	ldr	r2, [r7, #8]
 80115c2:	69fb      	ldr	r3, [r7, #28]
 80115c4:	4413      	add	r3, r2
 80115c6:	7819      	ldrb	r1, [r3, #0]
 80115c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115ca:	69fb      	ldr	r3, [r7, #28]
 80115cc:	4413      	add	r3, r2
 80115ce:	3334      	adds	r3, #52	; 0x34
 80115d0:	460a      	mov	r2, r1
 80115d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80115d4:	68ba      	ldr	r2, [r7, #8]
 80115d6:	69fb      	ldr	r3, [r7, #28]
 80115d8:	4413      	add	r3, r2
 80115da:	781b      	ldrb	r3, [r3, #0]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d006      	beq.n	80115ee <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80115e0:	69fb      	ldr	r3, [r7, #28]
 80115e2:	3301      	adds	r3, #1
 80115e4:	61fb      	str	r3, [r7, #28]
 80115e6:	69fb      	ldr	r3, [r7, #28]
 80115e8:	2b0f      	cmp	r3, #15
 80115ea:	d9e9      	bls.n	80115c0 <prvInitialiseNewTask+0x64>
 80115ec:	e000      	b.n	80115f0 <prvInitialiseNewTask+0x94>
			{
				break;
 80115ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80115f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115f2:	2200      	movs	r2, #0
 80115f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80115f8:	e003      	b.n	8011602 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80115fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115fc:	2200      	movs	r2, #0
 80115fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011604:	2b37      	cmp	r3, #55	; 0x37
 8011606:	d901      	bls.n	801160c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011608:	2337      	movs	r3, #55	; 0x37
 801160a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801160c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801160e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011610:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011616:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801161a:	2200      	movs	r2, #0
 801161c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801161e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011620:	3304      	adds	r3, #4
 8011622:	4618      	mov	r0, r3
 8011624:	f7ff f978 	bl	8010918 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801162a:	3318      	adds	r3, #24
 801162c:	4618      	mov	r0, r3
 801162e:	f7ff f973 	bl	8010918 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011636:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801163a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801163e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011640:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011646:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801164a:	2200      	movs	r2, #0
 801164c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011652:	2200      	movs	r2, #0
 8011654:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8011658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801165a:	3354      	adds	r3, #84	; 0x54
 801165c:	2260      	movs	r2, #96	; 0x60
 801165e:	2100      	movs	r1, #0
 8011660:	4618      	mov	r0, r3
 8011662:	f003 f971 	bl	8014948 <memset>
 8011666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011668:	4a0c      	ldr	r2, [pc, #48]	; (801169c <prvInitialiseNewTask+0x140>)
 801166a:	659a      	str	r2, [r3, #88]	; 0x58
 801166c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801166e:	4a0c      	ldr	r2, [pc, #48]	; (80116a0 <prvInitialiseNewTask+0x144>)
 8011670:	65da      	str	r2, [r3, #92]	; 0x5c
 8011672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011674:	4a0b      	ldr	r2, [pc, #44]	; (80116a4 <prvInitialiseNewTask+0x148>)
 8011676:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011678:	683a      	ldr	r2, [r7, #0]
 801167a:	68f9      	ldr	r1, [r7, #12]
 801167c:	69b8      	ldr	r0, [r7, #24]
 801167e:	f001 fab9 	bl	8012bf4 <pxPortInitialiseStack>
 8011682:	4602      	mov	r2, r0
 8011684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011686:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801168a:	2b00      	cmp	r3, #0
 801168c:	d002      	beq.n	8011694 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801168e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011692:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011694:	bf00      	nop
 8011696:	3720      	adds	r7, #32
 8011698:	46bd      	mov	sp, r7
 801169a:	bd80      	pop	{r7, pc}
 801169c:	0801c7ac 	.word	0x0801c7ac
 80116a0:	0801c7cc 	.word	0x0801c7cc
 80116a4:	0801c78c 	.word	0x0801c78c

080116a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b082      	sub	sp, #8
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80116b0:	f001 fbd0 	bl	8012e54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80116b4:	4b2d      	ldr	r3, [pc, #180]	; (801176c <prvAddNewTaskToReadyList+0xc4>)
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	3301      	adds	r3, #1
 80116ba:	4a2c      	ldr	r2, [pc, #176]	; (801176c <prvAddNewTaskToReadyList+0xc4>)
 80116bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80116be:	4b2c      	ldr	r3, [pc, #176]	; (8011770 <prvAddNewTaskToReadyList+0xc8>)
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d109      	bne.n	80116da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80116c6:	4a2a      	ldr	r2, [pc, #168]	; (8011770 <prvAddNewTaskToReadyList+0xc8>)
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80116cc:	4b27      	ldr	r3, [pc, #156]	; (801176c <prvAddNewTaskToReadyList+0xc4>)
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	2b01      	cmp	r3, #1
 80116d2:	d110      	bne.n	80116f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80116d4:	f000 fd8e 	bl	80121f4 <prvInitialiseTaskLists>
 80116d8:	e00d      	b.n	80116f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80116da:	4b26      	ldr	r3, [pc, #152]	; (8011774 <prvAddNewTaskToReadyList+0xcc>)
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d109      	bne.n	80116f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80116e2:	4b23      	ldr	r3, [pc, #140]	; (8011770 <prvAddNewTaskToReadyList+0xc8>)
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116ec:	429a      	cmp	r2, r3
 80116ee:	d802      	bhi.n	80116f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80116f0:	4a1f      	ldr	r2, [pc, #124]	; (8011770 <prvAddNewTaskToReadyList+0xc8>)
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80116f6:	4b20      	ldr	r3, [pc, #128]	; (8011778 <prvAddNewTaskToReadyList+0xd0>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	3301      	adds	r3, #1
 80116fc:	4a1e      	ldr	r2, [pc, #120]	; (8011778 <prvAddNewTaskToReadyList+0xd0>)
 80116fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011700:	4b1d      	ldr	r3, [pc, #116]	; (8011778 <prvAddNewTaskToReadyList+0xd0>)
 8011702:	681a      	ldr	r2, [r3, #0]
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801170c:	4b1b      	ldr	r3, [pc, #108]	; (801177c <prvAddNewTaskToReadyList+0xd4>)
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	429a      	cmp	r2, r3
 8011712:	d903      	bls.n	801171c <prvAddNewTaskToReadyList+0x74>
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011718:	4a18      	ldr	r2, [pc, #96]	; (801177c <prvAddNewTaskToReadyList+0xd4>)
 801171a:	6013      	str	r3, [r2, #0]
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011720:	4613      	mov	r3, r2
 8011722:	009b      	lsls	r3, r3, #2
 8011724:	4413      	add	r3, r2
 8011726:	009b      	lsls	r3, r3, #2
 8011728:	4a15      	ldr	r2, [pc, #84]	; (8011780 <prvAddNewTaskToReadyList+0xd8>)
 801172a:	441a      	add	r2, r3
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	3304      	adds	r3, #4
 8011730:	4619      	mov	r1, r3
 8011732:	4610      	mov	r0, r2
 8011734:	f7ff f8fd 	bl	8010932 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011738:	f001 fbbc 	bl	8012eb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801173c:	4b0d      	ldr	r3, [pc, #52]	; (8011774 <prvAddNewTaskToReadyList+0xcc>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d00e      	beq.n	8011762 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011744:	4b0a      	ldr	r3, [pc, #40]	; (8011770 <prvAddNewTaskToReadyList+0xc8>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801174e:	429a      	cmp	r2, r3
 8011750:	d207      	bcs.n	8011762 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011752:	4b0c      	ldr	r3, [pc, #48]	; (8011784 <prvAddNewTaskToReadyList+0xdc>)
 8011754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011758:	601a      	str	r2, [r3, #0]
 801175a:	f3bf 8f4f 	dsb	sy
 801175e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011762:	bf00      	nop
 8011764:	3708      	adds	r7, #8
 8011766:	46bd      	mov	sp, r7
 8011768:	bd80      	pop	{r7, pc}
 801176a:	bf00      	nop
 801176c:	200012e4 	.word	0x200012e4
 8011770:	20000e10 	.word	0x20000e10
 8011774:	200012f0 	.word	0x200012f0
 8011778:	20001300 	.word	0x20001300
 801177c:	200012ec 	.word	0x200012ec
 8011780:	20000e14 	.word	0x20000e14
 8011784:	e000ed04 	.word	0xe000ed04

08011788 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8011788:	b580      	push	{r7, lr}
 801178a:	b084      	sub	sp, #16
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8011790:	f001 fb60 	bl	8012e54 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d102      	bne.n	80117a0 <vTaskDelete+0x18>
 801179a:	4b2c      	ldr	r3, [pc, #176]	; (801184c <vTaskDelete+0xc4>)
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	e000      	b.n	80117a2 <vTaskDelete+0x1a>
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	3304      	adds	r3, #4
 80117a8:	4618      	mov	r0, r3
 80117aa:	f7ff f91f 	bl	80109ec <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d004      	beq.n	80117c0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	3318      	adds	r3, #24
 80117ba:	4618      	mov	r0, r3
 80117bc:	f7ff f916 	bl	80109ec <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80117c0:	4b23      	ldr	r3, [pc, #140]	; (8011850 <vTaskDelete+0xc8>)
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	3301      	adds	r3, #1
 80117c6:	4a22      	ldr	r2, [pc, #136]	; (8011850 <vTaskDelete+0xc8>)
 80117c8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80117ca:	4b20      	ldr	r3, [pc, #128]	; (801184c <vTaskDelete+0xc4>)
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	68fa      	ldr	r2, [r7, #12]
 80117d0:	429a      	cmp	r2, r3
 80117d2:	d10b      	bne.n	80117ec <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	3304      	adds	r3, #4
 80117d8:	4619      	mov	r1, r3
 80117da:	481e      	ldr	r0, [pc, #120]	; (8011854 <vTaskDelete+0xcc>)
 80117dc:	f7ff f8a9 	bl	8010932 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80117e0:	4b1d      	ldr	r3, [pc, #116]	; (8011858 <vTaskDelete+0xd0>)
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	3301      	adds	r3, #1
 80117e6:	4a1c      	ldr	r2, [pc, #112]	; (8011858 <vTaskDelete+0xd0>)
 80117e8:	6013      	str	r3, [r2, #0]
 80117ea:	e009      	b.n	8011800 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80117ec:	4b1b      	ldr	r3, [pc, #108]	; (801185c <vTaskDelete+0xd4>)
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	3b01      	subs	r3, #1
 80117f2:	4a1a      	ldr	r2, [pc, #104]	; (801185c <vTaskDelete+0xd4>)
 80117f4:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80117f6:	68f8      	ldr	r0, [r7, #12]
 80117f8:	f000 fd6a 	bl	80122d0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80117fc:	f000 fd9c 	bl	8012338 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8011800:	f001 fb58 	bl	8012eb4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8011804:	4b16      	ldr	r3, [pc, #88]	; (8011860 <vTaskDelete+0xd8>)
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d01b      	beq.n	8011844 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 801180c:	4b0f      	ldr	r3, [pc, #60]	; (801184c <vTaskDelete+0xc4>)
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	68fa      	ldr	r2, [r7, #12]
 8011812:	429a      	cmp	r2, r3
 8011814:	d116      	bne.n	8011844 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8011816:	4b13      	ldr	r3, [pc, #76]	; (8011864 <vTaskDelete+0xdc>)
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d00a      	beq.n	8011834 <vTaskDelete+0xac>
	__asm volatile
 801181e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011822:	f383 8811 	msr	BASEPRI, r3
 8011826:	f3bf 8f6f 	isb	sy
 801182a:	f3bf 8f4f 	dsb	sy
 801182e:	60bb      	str	r3, [r7, #8]
}
 8011830:	bf00      	nop
 8011832:	e7fe      	b.n	8011832 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8011834:	4b0c      	ldr	r3, [pc, #48]	; (8011868 <vTaskDelete+0xe0>)
 8011836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801183a:	601a      	str	r2, [r3, #0]
 801183c:	f3bf 8f4f 	dsb	sy
 8011840:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011844:	bf00      	nop
 8011846:	3710      	adds	r7, #16
 8011848:	46bd      	mov	sp, r7
 801184a:	bd80      	pop	{r7, pc}
 801184c:	20000e10 	.word	0x20000e10
 8011850:	20001300 	.word	0x20001300
 8011854:	200012b8 	.word	0x200012b8
 8011858:	200012cc 	.word	0x200012cc
 801185c:	200012e4 	.word	0x200012e4
 8011860:	200012f0 	.word	0x200012f0
 8011864:	2000130c 	.word	0x2000130c
 8011868:	e000ed04 	.word	0xe000ed04

0801186c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801186c:	b580      	push	{r7, lr}
 801186e:	b084      	sub	sp, #16
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011874:	2300      	movs	r3, #0
 8011876:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d017      	beq.n	80118ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801187e:	4b13      	ldr	r3, [pc, #76]	; (80118cc <vTaskDelay+0x60>)
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d00a      	beq.n	801189c <vTaskDelay+0x30>
	__asm volatile
 8011886:	f04f 0350 	mov.w	r3, #80	; 0x50
 801188a:	f383 8811 	msr	BASEPRI, r3
 801188e:	f3bf 8f6f 	isb	sy
 8011892:	f3bf 8f4f 	dsb	sy
 8011896:	60bb      	str	r3, [r7, #8]
}
 8011898:	bf00      	nop
 801189a:	e7fe      	b.n	801189a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801189c:	f000 f980 	bl	8011ba0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80118a0:	2100      	movs	r1, #0
 80118a2:	6878      	ldr	r0, [r7, #4]
 80118a4:	f000 fe04 	bl	80124b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80118a8:	f000 f988 	bl	8011bbc <xTaskResumeAll>
 80118ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d107      	bne.n	80118c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80118b4:	4b06      	ldr	r3, [pc, #24]	; (80118d0 <vTaskDelay+0x64>)
 80118b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118ba:	601a      	str	r2, [r3, #0]
 80118bc:	f3bf 8f4f 	dsb	sy
 80118c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80118c4:	bf00      	nop
 80118c6:	3710      	adds	r7, #16
 80118c8:	46bd      	mov	sp, r7
 80118ca:	bd80      	pop	{r7, pc}
 80118cc:	2000130c 	.word	0x2000130c
 80118d0:	e000ed04 	.word	0xe000ed04

080118d4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b088      	sub	sp, #32
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80118e0:	69bb      	ldr	r3, [r7, #24]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d10a      	bne.n	80118fc <eTaskGetState+0x28>
	__asm volatile
 80118e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118ea:	f383 8811 	msr	BASEPRI, r3
 80118ee:	f3bf 8f6f 	isb	sy
 80118f2:	f3bf 8f4f 	dsb	sy
 80118f6:	60bb      	str	r3, [r7, #8]
}
 80118f8:	bf00      	nop
 80118fa:	e7fe      	b.n	80118fa <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80118fc:	4b23      	ldr	r3, [pc, #140]	; (801198c <eTaskGetState+0xb8>)
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	69ba      	ldr	r2, [r7, #24]
 8011902:	429a      	cmp	r2, r3
 8011904:	d102      	bne.n	801190c <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8011906:	2300      	movs	r3, #0
 8011908:	77fb      	strb	r3, [r7, #31]
 801190a:	e03a      	b.n	8011982 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 801190c:	f001 faa2 	bl	8012e54 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8011910:	69bb      	ldr	r3, [r7, #24]
 8011912:	695b      	ldr	r3, [r3, #20]
 8011914:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8011916:	4b1e      	ldr	r3, [pc, #120]	; (8011990 <eTaskGetState+0xbc>)
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 801191c:	4b1d      	ldr	r3, [pc, #116]	; (8011994 <eTaskGetState+0xc0>)
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8011922:	f001 fac7 	bl	8012eb4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8011926:	697a      	ldr	r2, [r7, #20]
 8011928:	693b      	ldr	r3, [r7, #16]
 801192a:	429a      	cmp	r2, r3
 801192c:	d003      	beq.n	8011936 <eTaskGetState+0x62>
 801192e:	697a      	ldr	r2, [r7, #20]
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	429a      	cmp	r2, r3
 8011934:	d102      	bne.n	801193c <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8011936:	2302      	movs	r3, #2
 8011938:	77fb      	strb	r3, [r7, #31]
 801193a:	e022      	b.n	8011982 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 801193c:	697b      	ldr	r3, [r7, #20]
 801193e:	4a16      	ldr	r2, [pc, #88]	; (8011998 <eTaskGetState+0xc4>)
 8011940:	4293      	cmp	r3, r2
 8011942:	d112      	bne.n	801196a <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8011944:	69bb      	ldr	r3, [r7, #24]
 8011946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011948:	2b00      	cmp	r3, #0
 801194a:	d10b      	bne.n	8011964 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801194c:	69bb      	ldr	r3, [r7, #24]
 801194e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8011952:	b2db      	uxtb	r3, r3
 8011954:	2b01      	cmp	r3, #1
 8011956:	d102      	bne.n	801195e <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8011958:	2302      	movs	r3, #2
 801195a:	77fb      	strb	r3, [r7, #31]
 801195c:	e011      	b.n	8011982 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 801195e:	2303      	movs	r3, #3
 8011960:	77fb      	strb	r3, [r7, #31]
 8011962:	e00e      	b.n	8011982 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8011964:	2302      	movs	r3, #2
 8011966:	77fb      	strb	r3, [r7, #31]
 8011968:	e00b      	b.n	8011982 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 801196a:	697b      	ldr	r3, [r7, #20]
 801196c:	4a0b      	ldr	r2, [pc, #44]	; (801199c <eTaskGetState+0xc8>)
 801196e:	4293      	cmp	r3, r2
 8011970:	d002      	beq.n	8011978 <eTaskGetState+0xa4>
 8011972:	697b      	ldr	r3, [r7, #20]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d102      	bne.n	801197e <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8011978:	2304      	movs	r3, #4
 801197a:	77fb      	strb	r3, [r7, #31]
 801197c:	e001      	b.n	8011982 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 801197e:	2301      	movs	r3, #1
 8011980:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8011982:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8011984:	4618      	mov	r0, r3
 8011986:	3720      	adds	r7, #32
 8011988:	46bd      	mov	sp, r7
 801198a:	bd80      	pop	{r7, pc}
 801198c:	20000e10 	.word	0x20000e10
 8011990:	2000129c 	.word	0x2000129c
 8011994:	200012a0 	.word	0x200012a0
 8011998:	200012d0 	.word	0x200012d0
 801199c:	200012b8 	.word	0x200012b8

080119a0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80119a0:	b480      	push	{r7}
 80119a2:	b087      	sub	sp, #28
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80119a8:	2300      	movs	r3, #0
 80119aa:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d10a      	bne.n	80119cc <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80119b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119ba:	f383 8811 	msr	BASEPRI, r3
 80119be:	f3bf 8f6f 	isb	sy
 80119c2:	f3bf 8f4f 	dsb	sy
 80119c6:	60fb      	str	r3, [r7, #12]
}
 80119c8:	bf00      	nop
 80119ca:	e7fe      	b.n	80119ca <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80119cc:	693b      	ldr	r3, [r7, #16]
 80119ce:	695b      	ldr	r3, [r3, #20]
 80119d0:	4a0a      	ldr	r2, [pc, #40]	; (80119fc <prvTaskIsTaskSuspended+0x5c>)
 80119d2:	4293      	cmp	r3, r2
 80119d4:	d10a      	bne.n	80119ec <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80119d6:	693b      	ldr	r3, [r7, #16]
 80119d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119da:	4a09      	ldr	r2, [pc, #36]	; (8011a00 <prvTaskIsTaskSuspended+0x60>)
 80119dc:	4293      	cmp	r3, r2
 80119de:	d005      	beq.n	80119ec <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80119e0:	693b      	ldr	r3, [r7, #16]
 80119e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d101      	bne.n	80119ec <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80119e8:	2301      	movs	r3, #1
 80119ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80119ec:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80119ee:	4618      	mov	r0, r3
 80119f0:	371c      	adds	r7, #28
 80119f2:	46bd      	mov	sp, r7
 80119f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f8:	4770      	bx	lr
 80119fa:	bf00      	nop
 80119fc:	200012d0 	.word	0x200012d0
 8011a00:	200012a4 	.word	0x200012a4

08011a04 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b084      	sub	sp, #16
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d10a      	bne.n	8011a2c <vTaskResume+0x28>
	__asm volatile
 8011a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a1a:	f383 8811 	msr	BASEPRI, r3
 8011a1e:	f3bf 8f6f 	isb	sy
 8011a22:	f3bf 8f4f 	dsb	sy
 8011a26:	60bb      	str	r3, [r7, #8]
}
 8011a28:	bf00      	nop
 8011a2a:	e7fe      	b.n	8011a2a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8011a2c:	4b20      	ldr	r3, [pc, #128]	; (8011ab0 <vTaskResume+0xac>)
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	68fa      	ldr	r2, [r7, #12]
 8011a32:	429a      	cmp	r2, r3
 8011a34:	d038      	beq.n	8011aa8 <vTaskResume+0xa4>
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d035      	beq.n	8011aa8 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8011a3c:	f001 fa0a 	bl	8012e54 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8011a40:	68f8      	ldr	r0, [r7, #12]
 8011a42:	f7ff ffad 	bl	80119a0 <prvTaskIsTaskSuspended>
 8011a46:	4603      	mov	r3, r0
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d02b      	beq.n	8011aa4 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	3304      	adds	r3, #4
 8011a50:	4618      	mov	r0, r3
 8011a52:	f7fe ffcb 	bl	80109ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a5a:	4b16      	ldr	r3, [pc, #88]	; (8011ab4 <vTaskResume+0xb0>)
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	429a      	cmp	r2, r3
 8011a60:	d903      	bls.n	8011a6a <vTaskResume+0x66>
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a66:	4a13      	ldr	r2, [pc, #76]	; (8011ab4 <vTaskResume+0xb0>)
 8011a68:	6013      	str	r3, [r2, #0]
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a6e:	4613      	mov	r3, r2
 8011a70:	009b      	lsls	r3, r3, #2
 8011a72:	4413      	add	r3, r2
 8011a74:	009b      	lsls	r3, r3, #2
 8011a76:	4a10      	ldr	r2, [pc, #64]	; (8011ab8 <vTaskResume+0xb4>)
 8011a78:	441a      	add	r2, r3
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	3304      	adds	r3, #4
 8011a7e:	4619      	mov	r1, r3
 8011a80:	4610      	mov	r0, r2
 8011a82:	f7fe ff56 	bl	8010932 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a8a:	4b09      	ldr	r3, [pc, #36]	; (8011ab0 <vTaskResume+0xac>)
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a90:	429a      	cmp	r2, r3
 8011a92:	d307      	bcc.n	8011aa4 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8011a94:	4b09      	ldr	r3, [pc, #36]	; (8011abc <vTaskResume+0xb8>)
 8011a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a9a:	601a      	str	r2, [r3, #0]
 8011a9c:	f3bf 8f4f 	dsb	sy
 8011aa0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8011aa4:	f001 fa06 	bl	8012eb4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011aa8:	bf00      	nop
 8011aaa:	3710      	adds	r7, #16
 8011aac:	46bd      	mov	sp, r7
 8011aae:	bd80      	pop	{r7, pc}
 8011ab0:	20000e10 	.word	0x20000e10
 8011ab4:	200012ec 	.word	0x200012ec
 8011ab8:	20000e14 	.word	0x20000e14
 8011abc:	e000ed04 	.word	0xe000ed04

08011ac0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b08a      	sub	sp, #40	; 0x28
 8011ac4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011aca:	2300      	movs	r3, #0
 8011acc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011ace:	463a      	mov	r2, r7
 8011ad0:	1d39      	adds	r1, r7, #4
 8011ad2:	f107 0308 	add.w	r3, r7, #8
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	f7fe feca 	bl	8010870 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011adc:	6839      	ldr	r1, [r7, #0]
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	68ba      	ldr	r2, [r7, #8]
 8011ae2:	9202      	str	r2, [sp, #8]
 8011ae4:	9301      	str	r3, [sp, #4]
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	9300      	str	r3, [sp, #0]
 8011aea:	2300      	movs	r3, #0
 8011aec:	460a      	mov	r2, r1
 8011aee:	4924      	ldr	r1, [pc, #144]	; (8011b80 <vTaskStartScheduler+0xc0>)
 8011af0:	4824      	ldr	r0, [pc, #144]	; (8011b84 <vTaskStartScheduler+0xc4>)
 8011af2:	f7ff fc91 	bl	8011418 <xTaskCreateStatic>
 8011af6:	4603      	mov	r3, r0
 8011af8:	4a23      	ldr	r2, [pc, #140]	; (8011b88 <vTaskStartScheduler+0xc8>)
 8011afa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011afc:	4b22      	ldr	r3, [pc, #136]	; (8011b88 <vTaskStartScheduler+0xc8>)
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d002      	beq.n	8011b0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011b04:	2301      	movs	r3, #1
 8011b06:	617b      	str	r3, [r7, #20]
 8011b08:	e001      	b.n	8011b0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	2b01      	cmp	r3, #1
 8011b12:	d102      	bne.n	8011b1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011b14:	f000 fd20 	bl	8012558 <xTimerCreateTimerTask>
 8011b18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011b1a:	697b      	ldr	r3, [r7, #20]
 8011b1c:	2b01      	cmp	r3, #1
 8011b1e:	d11b      	bne.n	8011b58 <vTaskStartScheduler+0x98>
	__asm volatile
 8011b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b24:	f383 8811 	msr	BASEPRI, r3
 8011b28:	f3bf 8f6f 	isb	sy
 8011b2c:	f3bf 8f4f 	dsb	sy
 8011b30:	613b      	str	r3, [r7, #16]
}
 8011b32:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011b34:	4b15      	ldr	r3, [pc, #84]	; (8011b8c <vTaskStartScheduler+0xcc>)
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	3354      	adds	r3, #84	; 0x54
 8011b3a:	4a15      	ldr	r2, [pc, #84]	; (8011b90 <vTaskStartScheduler+0xd0>)
 8011b3c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011b3e:	4b15      	ldr	r3, [pc, #84]	; (8011b94 <vTaskStartScheduler+0xd4>)
 8011b40:	f04f 32ff 	mov.w	r2, #4294967295
 8011b44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011b46:	4b14      	ldr	r3, [pc, #80]	; (8011b98 <vTaskStartScheduler+0xd8>)
 8011b48:	2201      	movs	r2, #1
 8011b4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011b4c:	4b13      	ldr	r3, [pc, #76]	; (8011b9c <vTaskStartScheduler+0xdc>)
 8011b4e:	2200      	movs	r2, #0
 8011b50:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011b52:	f001 f8dd 	bl	8012d10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011b56:	e00e      	b.n	8011b76 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011b58:	697b      	ldr	r3, [r7, #20]
 8011b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b5e:	d10a      	bne.n	8011b76 <vTaskStartScheduler+0xb6>
	__asm volatile
 8011b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b64:	f383 8811 	msr	BASEPRI, r3
 8011b68:	f3bf 8f6f 	isb	sy
 8011b6c:	f3bf 8f4f 	dsb	sy
 8011b70:	60fb      	str	r3, [r7, #12]
}
 8011b72:	bf00      	nop
 8011b74:	e7fe      	b.n	8011b74 <vTaskStartScheduler+0xb4>
}
 8011b76:	bf00      	nop
 8011b78:	3718      	adds	r7, #24
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	bd80      	pop	{r7, pc}
 8011b7e:	bf00      	nop
 8011b80:	0801c4d8 	.word	0x0801c4d8
 8011b84:	080121c5 	.word	0x080121c5
 8011b88:	20001308 	.word	0x20001308
 8011b8c:	20000e10 	.word	0x20000e10
 8011b90:	200000d8 	.word	0x200000d8
 8011b94:	20001304 	.word	0x20001304
 8011b98:	200012f0 	.word	0x200012f0
 8011b9c:	200012e8 	.word	0x200012e8

08011ba0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011ba0:	b480      	push	{r7}
 8011ba2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011ba4:	4b04      	ldr	r3, [pc, #16]	; (8011bb8 <vTaskSuspendAll+0x18>)
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	3301      	adds	r3, #1
 8011baa:	4a03      	ldr	r2, [pc, #12]	; (8011bb8 <vTaskSuspendAll+0x18>)
 8011bac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011bae:	bf00      	nop
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb6:	4770      	bx	lr
 8011bb8:	2000130c 	.word	0x2000130c

08011bbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b084      	sub	sp, #16
 8011bc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011bca:	4b42      	ldr	r3, [pc, #264]	; (8011cd4 <xTaskResumeAll+0x118>)
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d10a      	bne.n	8011be8 <xTaskResumeAll+0x2c>
	__asm volatile
 8011bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bd6:	f383 8811 	msr	BASEPRI, r3
 8011bda:	f3bf 8f6f 	isb	sy
 8011bde:	f3bf 8f4f 	dsb	sy
 8011be2:	603b      	str	r3, [r7, #0]
}
 8011be4:	bf00      	nop
 8011be6:	e7fe      	b.n	8011be6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011be8:	f001 f934 	bl	8012e54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011bec:	4b39      	ldr	r3, [pc, #228]	; (8011cd4 <xTaskResumeAll+0x118>)
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	3b01      	subs	r3, #1
 8011bf2:	4a38      	ldr	r2, [pc, #224]	; (8011cd4 <xTaskResumeAll+0x118>)
 8011bf4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011bf6:	4b37      	ldr	r3, [pc, #220]	; (8011cd4 <xTaskResumeAll+0x118>)
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d162      	bne.n	8011cc4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011bfe:	4b36      	ldr	r3, [pc, #216]	; (8011cd8 <xTaskResumeAll+0x11c>)
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d05e      	beq.n	8011cc4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011c06:	e02f      	b.n	8011c68 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c08:	4b34      	ldr	r3, [pc, #208]	; (8011cdc <xTaskResumeAll+0x120>)
 8011c0a:	68db      	ldr	r3, [r3, #12]
 8011c0c:	68db      	ldr	r3, [r3, #12]
 8011c0e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	3318      	adds	r3, #24
 8011c14:	4618      	mov	r0, r3
 8011c16:	f7fe fee9 	bl	80109ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	3304      	adds	r3, #4
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f7fe fee4 	bl	80109ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c28:	4b2d      	ldr	r3, [pc, #180]	; (8011ce0 <xTaskResumeAll+0x124>)
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	429a      	cmp	r2, r3
 8011c2e:	d903      	bls.n	8011c38 <xTaskResumeAll+0x7c>
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c34:	4a2a      	ldr	r2, [pc, #168]	; (8011ce0 <xTaskResumeAll+0x124>)
 8011c36:	6013      	str	r3, [r2, #0]
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c3c:	4613      	mov	r3, r2
 8011c3e:	009b      	lsls	r3, r3, #2
 8011c40:	4413      	add	r3, r2
 8011c42:	009b      	lsls	r3, r3, #2
 8011c44:	4a27      	ldr	r2, [pc, #156]	; (8011ce4 <xTaskResumeAll+0x128>)
 8011c46:	441a      	add	r2, r3
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	3304      	adds	r3, #4
 8011c4c:	4619      	mov	r1, r3
 8011c4e:	4610      	mov	r0, r2
 8011c50:	f7fe fe6f 	bl	8010932 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c58:	4b23      	ldr	r3, [pc, #140]	; (8011ce8 <xTaskResumeAll+0x12c>)
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c5e:	429a      	cmp	r2, r3
 8011c60:	d302      	bcc.n	8011c68 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011c62:	4b22      	ldr	r3, [pc, #136]	; (8011cec <xTaskResumeAll+0x130>)
 8011c64:	2201      	movs	r2, #1
 8011c66:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011c68:	4b1c      	ldr	r3, [pc, #112]	; (8011cdc <xTaskResumeAll+0x120>)
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d1cb      	bne.n	8011c08 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d001      	beq.n	8011c7a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011c76:	f000 fb5f 	bl	8012338 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011c7a:	4b1d      	ldr	r3, [pc, #116]	; (8011cf0 <xTaskResumeAll+0x134>)
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d010      	beq.n	8011ca8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011c86:	f000 f847 	bl	8011d18 <xTaskIncrementTick>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d002      	beq.n	8011c96 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011c90:	4b16      	ldr	r3, [pc, #88]	; (8011cec <xTaskResumeAll+0x130>)
 8011c92:	2201      	movs	r2, #1
 8011c94:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	3b01      	subs	r3, #1
 8011c9a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d1f1      	bne.n	8011c86 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8011ca2:	4b13      	ldr	r3, [pc, #76]	; (8011cf0 <xTaskResumeAll+0x134>)
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011ca8:	4b10      	ldr	r3, [pc, #64]	; (8011cec <xTaskResumeAll+0x130>)
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d009      	beq.n	8011cc4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011cb0:	2301      	movs	r3, #1
 8011cb2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011cb4:	4b0f      	ldr	r3, [pc, #60]	; (8011cf4 <xTaskResumeAll+0x138>)
 8011cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cba:	601a      	str	r2, [r3, #0]
 8011cbc:	f3bf 8f4f 	dsb	sy
 8011cc0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011cc4:	f001 f8f6 	bl	8012eb4 <vPortExitCritical>

	return xAlreadyYielded;
 8011cc8:	68bb      	ldr	r3, [r7, #8]
}
 8011cca:	4618      	mov	r0, r3
 8011ccc:	3710      	adds	r7, #16
 8011cce:	46bd      	mov	sp, r7
 8011cd0:	bd80      	pop	{r7, pc}
 8011cd2:	bf00      	nop
 8011cd4:	2000130c 	.word	0x2000130c
 8011cd8:	200012e4 	.word	0x200012e4
 8011cdc:	200012a4 	.word	0x200012a4
 8011ce0:	200012ec 	.word	0x200012ec
 8011ce4:	20000e14 	.word	0x20000e14
 8011ce8:	20000e10 	.word	0x20000e10
 8011cec:	200012f8 	.word	0x200012f8
 8011cf0:	200012f4 	.word	0x200012f4
 8011cf4:	e000ed04 	.word	0xe000ed04

08011cf8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011cf8:	b480      	push	{r7}
 8011cfa:	b083      	sub	sp, #12
 8011cfc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011cfe:	4b05      	ldr	r3, [pc, #20]	; (8011d14 <xTaskGetTickCount+0x1c>)
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011d04:	687b      	ldr	r3, [r7, #4]
}
 8011d06:	4618      	mov	r0, r3
 8011d08:	370c      	adds	r7, #12
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d10:	4770      	bx	lr
 8011d12:	bf00      	nop
 8011d14:	200012e8 	.word	0x200012e8

08011d18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b086      	sub	sp, #24
 8011d1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011d1e:	2300      	movs	r3, #0
 8011d20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011d22:	4b4f      	ldr	r3, [pc, #316]	; (8011e60 <xTaskIncrementTick+0x148>)
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	f040 808f 	bne.w	8011e4a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011d2c:	4b4d      	ldr	r3, [pc, #308]	; (8011e64 <xTaskIncrementTick+0x14c>)
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	3301      	adds	r3, #1
 8011d32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011d34:	4a4b      	ldr	r2, [pc, #300]	; (8011e64 <xTaskIncrementTick+0x14c>)
 8011d36:	693b      	ldr	r3, [r7, #16]
 8011d38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011d3a:	693b      	ldr	r3, [r7, #16]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d120      	bne.n	8011d82 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011d40:	4b49      	ldr	r3, [pc, #292]	; (8011e68 <xTaskIncrementTick+0x150>)
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d00a      	beq.n	8011d60 <xTaskIncrementTick+0x48>
	__asm volatile
 8011d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d4e:	f383 8811 	msr	BASEPRI, r3
 8011d52:	f3bf 8f6f 	isb	sy
 8011d56:	f3bf 8f4f 	dsb	sy
 8011d5a:	603b      	str	r3, [r7, #0]
}
 8011d5c:	bf00      	nop
 8011d5e:	e7fe      	b.n	8011d5e <xTaskIncrementTick+0x46>
 8011d60:	4b41      	ldr	r3, [pc, #260]	; (8011e68 <xTaskIncrementTick+0x150>)
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	60fb      	str	r3, [r7, #12]
 8011d66:	4b41      	ldr	r3, [pc, #260]	; (8011e6c <xTaskIncrementTick+0x154>)
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	4a3f      	ldr	r2, [pc, #252]	; (8011e68 <xTaskIncrementTick+0x150>)
 8011d6c:	6013      	str	r3, [r2, #0]
 8011d6e:	4a3f      	ldr	r2, [pc, #252]	; (8011e6c <xTaskIncrementTick+0x154>)
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	6013      	str	r3, [r2, #0]
 8011d74:	4b3e      	ldr	r3, [pc, #248]	; (8011e70 <xTaskIncrementTick+0x158>)
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	3301      	adds	r3, #1
 8011d7a:	4a3d      	ldr	r2, [pc, #244]	; (8011e70 <xTaskIncrementTick+0x158>)
 8011d7c:	6013      	str	r3, [r2, #0]
 8011d7e:	f000 fadb 	bl	8012338 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011d82:	4b3c      	ldr	r3, [pc, #240]	; (8011e74 <xTaskIncrementTick+0x15c>)
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	693a      	ldr	r2, [r7, #16]
 8011d88:	429a      	cmp	r2, r3
 8011d8a:	d349      	bcc.n	8011e20 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011d8c:	4b36      	ldr	r3, [pc, #216]	; (8011e68 <xTaskIncrementTick+0x150>)
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d104      	bne.n	8011da0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d96:	4b37      	ldr	r3, [pc, #220]	; (8011e74 <xTaskIncrementTick+0x15c>)
 8011d98:	f04f 32ff 	mov.w	r2, #4294967295
 8011d9c:	601a      	str	r2, [r3, #0]
					break;
 8011d9e:	e03f      	b.n	8011e20 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011da0:	4b31      	ldr	r3, [pc, #196]	; (8011e68 <xTaskIncrementTick+0x150>)
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	68db      	ldr	r3, [r3, #12]
 8011da6:	68db      	ldr	r3, [r3, #12]
 8011da8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011daa:	68bb      	ldr	r3, [r7, #8]
 8011dac:	685b      	ldr	r3, [r3, #4]
 8011dae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011db0:	693a      	ldr	r2, [r7, #16]
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	429a      	cmp	r2, r3
 8011db6:	d203      	bcs.n	8011dc0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011db8:	4a2e      	ldr	r2, [pc, #184]	; (8011e74 <xTaskIncrementTick+0x15c>)
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011dbe:	e02f      	b.n	8011e20 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011dc0:	68bb      	ldr	r3, [r7, #8]
 8011dc2:	3304      	adds	r3, #4
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	f7fe fe11 	bl	80109ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011dca:	68bb      	ldr	r3, [r7, #8]
 8011dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d004      	beq.n	8011ddc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011dd2:	68bb      	ldr	r3, [r7, #8]
 8011dd4:	3318      	adds	r3, #24
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	f7fe fe08 	bl	80109ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011ddc:	68bb      	ldr	r3, [r7, #8]
 8011dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011de0:	4b25      	ldr	r3, [pc, #148]	; (8011e78 <xTaskIncrementTick+0x160>)
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	429a      	cmp	r2, r3
 8011de6:	d903      	bls.n	8011df0 <xTaskIncrementTick+0xd8>
 8011de8:	68bb      	ldr	r3, [r7, #8]
 8011dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dec:	4a22      	ldr	r2, [pc, #136]	; (8011e78 <xTaskIncrementTick+0x160>)
 8011dee:	6013      	str	r3, [r2, #0]
 8011df0:	68bb      	ldr	r3, [r7, #8]
 8011df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011df4:	4613      	mov	r3, r2
 8011df6:	009b      	lsls	r3, r3, #2
 8011df8:	4413      	add	r3, r2
 8011dfa:	009b      	lsls	r3, r3, #2
 8011dfc:	4a1f      	ldr	r2, [pc, #124]	; (8011e7c <xTaskIncrementTick+0x164>)
 8011dfe:	441a      	add	r2, r3
 8011e00:	68bb      	ldr	r3, [r7, #8]
 8011e02:	3304      	adds	r3, #4
 8011e04:	4619      	mov	r1, r3
 8011e06:	4610      	mov	r0, r2
 8011e08:	f7fe fd93 	bl	8010932 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011e0c:	68bb      	ldr	r3, [r7, #8]
 8011e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e10:	4b1b      	ldr	r3, [pc, #108]	; (8011e80 <xTaskIncrementTick+0x168>)
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e16:	429a      	cmp	r2, r3
 8011e18:	d3b8      	bcc.n	8011d8c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011e1a:	2301      	movs	r3, #1
 8011e1c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011e1e:	e7b5      	b.n	8011d8c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011e20:	4b17      	ldr	r3, [pc, #92]	; (8011e80 <xTaskIncrementTick+0x168>)
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e26:	4915      	ldr	r1, [pc, #84]	; (8011e7c <xTaskIncrementTick+0x164>)
 8011e28:	4613      	mov	r3, r2
 8011e2a:	009b      	lsls	r3, r3, #2
 8011e2c:	4413      	add	r3, r2
 8011e2e:	009b      	lsls	r3, r3, #2
 8011e30:	440b      	add	r3, r1
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	2b01      	cmp	r3, #1
 8011e36:	d901      	bls.n	8011e3c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011e38:	2301      	movs	r3, #1
 8011e3a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011e3c:	4b11      	ldr	r3, [pc, #68]	; (8011e84 <xTaskIncrementTick+0x16c>)
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d007      	beq.n	8011e54 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011e44:	2301      	movs	r3, #1
 8011e46:	617b      	str	r3, [r7, #20]
 8011e48:	e004      	b.n	8011e54 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011e4a:	4b0f      	ldr	r3, [pc, #60]	; (8011e88 <xTaskIncrementTick+0x170>)
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	3301      	adds	r3, #1
 8011e50:	4a0d      	ldr	r2, [pc, #52]	; (8011e88 <xTaskIncrementTick+0x170>)
 8011e52:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011e54:	697b      	ldr	r3, [r7, #20]
}
 8011e56:	4618      	mov	r0, r3
 8011e58:	3718      	adds	r7, #24
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bd80      	pop	{r7, pc}
 8011e5e:	bf00      	nop
 8011e60:	2000130c 	.word	0x2000130c
 8011e64:	200012e8 	.word	0x200012e8
 8011e68:	2000129c 	.word	0x2000129c
 8011e6c:	200012a0 	.word	0x200012a0
 8011e70:	200012fc 	.word	0x200012fc
 8011e74:	20001304 	.word	0x20001304
 8011e78:	200012ec 	.word	0x200012ec
 8011e7c:	20000e14 	.word	0x20000e14
 8011e80:	20000e10 	.word	0x20000e10
 8011e84:	200012f8 	.word	0x200012f8
 8011e88:	200012f4 	.word	0x200012f4

08011e8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011e8c:	b480      	push	{r7}
 8011e8e:	b085      	sub	sp, #20
 8011e90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011e92:	4b2a      	ldr	r3, [pc, #168]	; (8011f3c <vTaskSwitchContext+0xb0>)
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d003      	beq.n	8011ea2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011e9a:	4b29      	ldr	r3, [pc, #164]	; (8011f40 <vTaskSwitchContext+0xb4>)
 8011e9c:	2201      	movs	r2, #1
 8011e9e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011ea0:	e046      	b.n	8011f30 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8011ea2:	4b27      	ldr	r3, [pc, #156]	; (8011f40 <vTaskSwitchContext+0xb4>)
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ea8:	4b26      	ldr	r3, [pc, #152]	; (8011f44 <vTaskSwitchContext+0xb8>)
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	60fb      	str	r3, [r7, #12]
 8011eae:	e010      	b.n	8011ed2 <vTaskSwitchContext+0x46>
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d10a      	bne.n	8011ecc <vTaskSwitchContext+0x40>
	__asm volatile
 8011eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eba:	f383 8811 	msr	BASEPRI, r3
 8011ebe:	f3bf 8f6f 	isb	sy
 8011ec2:	f3bf 8f4f 	dsb	sy
 8011ec6:	607b      	str	r3, [r7, #4]
}
 8011ec8:	bf00      	nop
 8011eca:	e7fe      	b.n	8011eca <vTaskSwitchContext+0x3e>
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	3b01      	subs	r3, #1
 8011ed0:	60fb      	str	r3, [r7, #12]
 8011ed2:	491d      	ldr	r1, [pc, #116]	; (8011f48 <vTaskSwitchContext+0xbc>)
 8011ed4:	68fa      	ldr	r2, [r7, #12]
 8011ed6:	4613      	mov	r3, r2
 8011ed8:	009b      	lsls	r3, r3, #2
 8011eda:	4413      	add	r3, r2
 8011edc:	009b      	lsls	r3, r3, #2
 8011ede:	440b      	add	r3, r1
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d0e4      	beq.n	8011eb0 <vTaskSwitchContext+0x24>
 8011ee6:	68fa      	ldr	r2, [r7, #12]
 8011ee8:	4613      	mov	r3, r2
 8011eea:	009b      	lsls	r3, r3, #2
 8011eec:	4413      	add	r3, r2
 8011eee:	009b      	lsls	r3, r3, #2
 8011ef0:	4a15      	ldr	r2, [pc, #84]	; (8011f48 <vTaskSwitchContext+0xbc>)
 8011ef2:	4413      	add	r3, r2
 8011ef4:	60bb      	str	r3, [r7, #8]
 8011ef6:	68bb      	ldr	r3, [r7, #8]
 8011ef8:	685b      	ldr	r3, [r3, #4]
 8011efa:	685a      	ldr	r2, [r3, #4]
 8011efc:	68bb      	ldr	r3, [r7, #8]
 8011efe:	605a      	str	r2, [r3, #4]
 8011f00:	68bb      	ldr	r3, [r7, #8]
 8011f02:	685a      	ldr	r2, [r3, #4]
 8011f04:	68bb      	ldr	r3, [r7, #8]
 8011f06:	3308      	adds	r3, #8
 8011f08:	429a      	cmp	r2, r3
 8011f0a:	d104      	bne.n	8011f16 <vTaskSwitchContext+0x8a>
 8011f0c:	68bb      	ldr	r3, [r7, #8]
 8011f0e:	685b      	ldr	r3, [r3, #4]
 8011f10:	685a      	ldr	r2, [r3, #4]
 8011f12:	68bb      	ldr	r3, [r7, #8]
 8011f14:	605a      	str	r2, [r3, #4]
 8011f16:	68bb      	ldr	r3, [r7, #8]
 8011f18:	685b      	ldr	r3, [r3, #4]
 8011f1a:	68db      	ldr	r3, [r3, #12]
 8011f1c:	4a0b      	ldr	r2, [pc, #44]	; (8011f4c <vTaskSwitchContext+0xc0>)
 8011f1e:	6013      	str	r3, [r2, #0]
 8011f20:	4a08      	ldr	r2, [pc, #32]	; (8011f44 <vTaskSwitchContext+0xb8>)
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011f26:	4b09      	ldr	r3, [pc, #36]	; (8011f4c <vTaskSwitchContext+0xc0>)
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	3354      	adds	r3, #84	; 0x54
 8011f2c:	4a08      	ldr	r2, [pc, #32]	; (8011f50 <vTaskSwitchContext+0xc4>)
 8011f2e:	6013      	str	r3, [r2, #0]
}
 8011f30:	bf00      	nop
 8011f32:	3714      	adds	r7, #20
 8011f34:	46bd      	mov	sp, r7
 8011f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f3a:	4770      	bx	lr
 8011f3c:	2000130c 	.word	0x2000130c
 8011f40:	200012f8 	.word	0x200012f8
 8011f44:	200012ec 	.word	0x200012ec
 8011f48:	20000e14 	.word	0x20000e14
 8011f4c:	20000e10 	.word	0x20000e10
 8011f50:	200000d8 	.word	0x200000d8

08011f54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011f54:	b580      	push	{r7, lr}
 8011f56:	b084      	sub	sp, #16
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
 8011f5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d10a      	bne.n	8011f7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f68:	f383 8811 	msr	BASEPRI, r3
 8011f6c:	f3bf 8f6f 	isb	sy
 8011f70:	f3bf 8f4f 	dsb	sy
 8011f74:	60fb      	str	r3, [r7, #12]
}
 8011f76:	bf00      	nop
 8011f78:	e7fe      	b.n	8011f78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011f7a:	4b07      	ldr	r3, [pc, #28]	; (8011f98 <vTaskPlaceOnEventList+0x44>)
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	3318      	adds	r3, #24
 8011f80:	4619      	mov	r1, r3
 8011f82:	6878      	ldr	r0, [r7, #4]
 8011f84:	f7fe fcf9 	bl	801097a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011f88:	2101      	movs	r1, #1
 8011f8a:	6838      	ldr	r0, [r7, #0]
 8011f8c:	f000 fa90 	bl	80124b0 <prvAddCurrentTaskToDelayedList>
}
 8011f90:	bf00      	nop
 8011f92:	3710      	adds	r7, #16
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bd80      	pop	{r7, pc}
 8011f98:	20000e10 	.word	0x20000e10

08011f9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b086      	sub	sp, #24
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	60f8      	str	r0, [r7, #12]
 8011fa4:	60b9      	str	r1, [r7, #8]
 8011fa6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d10a      	bne.n	8011fc4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8011fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fb2:	f383 8811 	msr	BASEPRI, r3
 8011fb6:	f3bf 8f6f 	isb	sy
 8011fba:	f3bf 8f4f 	dsb	sy
 8011fbe:	617b      	str	r3, [r7, #20]
}
 8011fc0:	bf00      	nop
 8011fc2:	e7fe      	b.n	8011fc2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011fc4:	4b0a      	ldr	r3, [pc, #40]	; (8011ff0 <vTaskPlaceOnEventListRestricted+0x54>)
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	3318      	adds	r3, #24
 8011fca:	4619      	mov	r1, r3
 8011fcc:	68f8      	ldr	r0, [r7, #12]
 8011fce:	f7fe fcb0 	bl	8010932 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d002      	beq.n	8011fde <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8011fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8011fdc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011fde:	6879      	ldr	r1, [r7, #4]
 8011fe0:	68b8      	ldr	r0, [r7, #8]
 8011fe2:	f000 fa65 	bl	80124b0 <prvAddCurrentTaskToDelayedList>
	}
 8011fe6:	bf00      	nop
 8011fe8:	3718      	adds	r7, #24
 8011fea:	46bd      	mov	sp, r7
 8011fec:	bd80      	pop	{r7, pc}
 8011fee:	bf00      	nop
 8011ff0:	20000e10 	.word	0x20000e10

08011ff4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b086      	sub	sp, #24
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	68db      	ldr	r3, [r3, #12]
 8012000:	68db      	ldr	r3, [r3, #12]
 8012002:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012004:	693b      	ldr	r3, [r7, #16]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d10a      	bne.n	8012020 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801200a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801200e:	f383 8811 	msr	BASEPRI, r3
 8012012:	f3bf 8f6f 	isb	sy
 8012016:	f3bf 8f4f 	dsb	sy
 801201a:	60fb      	str	r3, [r7, #12]
}
 801201c:	bf00      	nop
 801201e:	e7fe      	b.n	801201e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012020:	693b      	ldr	r3, [r7, #16]
 8012022:	3318      	adds	r3, #24
 8012024:	4618      	mov	r0, r3
 8012026:	f7fe fce1 	bl	80109ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801202a:	4b1e      	ldr	r3, [pc, #120]	; (80120a4 <xTaskRemoveFromEventList+0xb0>)
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d11d      	bne.n	801206e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012032:	693b      	ldr	r3, [r7, #16]
 8012034:	3304      	adds	r3, #4
 8012036:	4618      	mov	r0, r3
 8012038:	f7fe fcd8 	bl	80109ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801203c:	693b      	ldr	r3, [r7, #16]
 801203e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012040:	4b19      	ldr	r3, [pc, #100]	; (80120a8 <xTaskRemoveFromEventList+0xb4>)
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	429a      	cmp	r2, r3
 8012046:	d903      	bls.n	8012050 <xTaskRemoveFromEventList+0x5c>
 8012048:	693b      	ldr	r3, [r7, #16]
 801204a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801204c:	4a16      	ldr	r2, [pc, #88]	; (80120a8 <xTaskRemoveFromEventList+0xb4>)
 801204e:	6013      	str	r3, [r2, #0]
 8012050:	693b      	ldr	r3, [r7, #16]
 8012052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012054:	4613      	mov	r3, r2
 8012056:	009b      	lsls	r3, r3, #2
 8012058:	4413      	add	r3, r2
 801205a:	009b      	lsls	r3, r3, #2
 801205c:	4a13      	ldr	r2, [pc, #76]	; (80120ac <xTaskRemoveFromEventList+0xb8>)
 801205e:	441a      	add	r2, r3
 8012060:	693b      	ldr	r3, [r7, #16]
 8012062:	3304      	adds	r3, #4
 8012064:	4619      	mov	r1, r3
 8012066:	4610      	mov	r0, r2
 8012068:	f7fe fc63 	bl	8010932 <vListInsertEnd>
 801206c:	e005      	b.n	801207a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801206e:	693b      	ldr	r3, [r7, #16]
 8012070:	3318      	adds	r3, #24
 8012072:	4619      	mov	r1, r3
 8012074:	480e      	ldr	r0, [pc, #56]	; (80120b0 <xTaskRemoveFromEventList+0xbc>)
 8012076:	f7fe fc5c 	bl	8010932 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801207a:	693b      	ldr	r3, [r7, #16]
 801207c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801207e:	4b0d      	ldr	r3, [pc, #52]	; (80120b4 <xTaskRemoveFromEventList+0xc0>)
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012084:	429a      	cmp	r2, r3
 8012086:	d905      	bls.n	8012094 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012088:	2301      	movs	r3, #1
 801208a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801208c:	4b0a      	ldr	r3, [pc, #40]	; (80120b8 <xTaskRemoveFromEventList+0xc4>)
 801208e:	2201      	movs	r2, #1
 8012090:	601a      	str	r2, [r3, #0]
 8012092:	e001      	b.n	8012098 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8012094:	2300      	movs	r3, #0
 8012096:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012098:	697b      	ldr	r3, [r7, #20]
}
 801209a:	4618      	mov	r0, r3
 801209c:	3718      	adds	r7, #24
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd80      	pop	{r7, pc}
 80120a2:	bf00      	nop
 80120a4:	2000130c 	.word	0x2000130c
 80120a8:	200012ec 	.word	0x200012ec
 80120ac:	20000e14 	.word	0x20000e14
 80120b0:	200012a4 	.word	0x200012a4
 80120b4:	20000e10 	.word	0x20000e10
 80120b8:	200012f8 	.word	0x200012f8

080120bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80120bc:	b480      	push	{r7}
 80120be:	b083      	sub	sp, #12
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80120c4:	4b06      	ldr	r3, [pc, #24]	; (80120e0 <vTaskInternalSetTimeOutState+0x24>)
 80120c6:	681a      	ldr	r2, [r3, #0]
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80120cc:	4b05      	ldr	r3, [pc, #20]	; (80120e4 <vTaskInternalSetTimeOutState+0x28>)
 80120ce:	681a      	ldr	r2, [r3, #0]
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	605a      	str	r2, [r3, #4]
}
 80120d4:	bf00      	nop
 80120d6:	370c      	adds	r7, #12
 80120d8:	46bd      	mov	sp, r7
 80120da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120de:	4770      	bx	lr
 80120e0:	200012fc 	.word	0x200012fc
 80120e4:	200012e8 	.word	0x200012e8

080120e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b088      	sub	sp, #32
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	6078      	str	r0, [r7, #4]
 80120f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d10a      	bne.n	801210e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80120f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120fc:	f383 8811 	msr	BASEPRI, r3
 8012100:	f3bf 8f6f 	isb	sy
 8012104:	f3bf 8f4f 	dsb	sy
 8012108:	613b      	str	r3, [r7, #16]
}
 801210a:	bf00      	nop
 801210c:	e7fe      	b.n	801210c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801210e:	683b      	ldr	r3, [r7, #0]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d10a      	bne.n	801212a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8012114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012118:	f383 8811 	msr	BASEPRI, r3
 801211c:	f3bf 8f6f 	isb	sy
 8012120:	f3bf 8f4f 	dsb	sy
 8012124:	60fb      	str	r3, [r7, #12]
}
 8012126:	bf00      	nop
 8012128:	e7fe      	b.n	8012128 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801212a:	f000 fe93 	bl	8012e54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801212e:	4b1d      	ldr	r3, [pc, #116]	; (80121a4 <xTaskCheckForTimeOut+0xbc>)
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	685b      	ldr	r3, [r3, #4]
 8012138:	69ba      	ldr	r2, [r7, #24]
 801213a:	1ad3      	subs	r3, r2, r3
 801213c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801213e:	683b      	ldr	r3, [r7, #0]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012146:	d102      	bne.n	801214e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012148:	2300      	movs	r3, #0
 801214a:	61fb      	str	r3, [r7, #28]
 801214c:	e023      	b.n	8012196 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	681a      	ldr	r2, [r3, #0]
 8012152:	4b15      	ldr	r3, [pc, #84]	; (80121a8 <xTaskCheckForTimeOut+0xc0>)
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	429a      	cmp	r2, r3
 8012158:	d007      	beq.n	801216a <xTaskCheckForTimeOut+0x82>
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	685b      	ldr	r3, [r3, #4]
 801215e:	69ba      	ldr	r2, [r7, #24]
 8012160:	429a      	cmp	r2, r3
 8012162:	d302      	bcc.n	801216a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012164:	2301      	movs	r3, #1
 8012166:	61fb      	str	r3, [r7, #28]
 8012168:	e015      	b.n	8012196 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801216a:	683b      	ldr	r3, [r7, #0]
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	697a      	ldr	r2, [r7, #20]
 8012170:	429a      	cmp	r2, r3
 8012172:	d20b      	bcs.n	801218c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012174:	683b      	ldr	r3, [r7, #0]
 8012176:	681a      	ldr	r2, [r3, #0]
 8012178:	697b      	ldr	r3, [r7, #20]
 801217a:	1ad2      	subs	r2, r2, r3
 801217c:	683b      	ldr	r3, [r7, #0]
 801217e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012180:	6878      	ldr	r0, [r7, #4]
 8012182:	f7ff ff9b 	bl	80120bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012186:	2300      	movs	r3, #0
 8012188:	61fb      	str	r3, [r7, #28]
 801218a:	e004      	b.n	8012196 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801218c:	683b      	ldr	r3, [r7, #0]
 801218e:	2200      	movs	r2, #0
 8012190:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012192:	2301      	movs	r3, #1
 8012194:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012196:	f000 fe8d 	bl	8012eb4 <vPortExitCritical>

	return xReturn;
 801219a:	69fb      	ldr	r3, [r7, #28]
}
 801219c:	4618      	mov	r0, r3
 801219e:	3720      	adds	r7, #32
 80121a0:	46bd      	mov	sp, r7
 80121a2:	bd80      	pop	{r7, pc}
 80121a4:	200012e8 	.word	0x200012e8
 80121a8:	200012fc 	.word	0x200012fc

080121ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80121ac:	b480      	push	{r7}
 80121ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80121b0:	4b03      	ldr	r3, [pc, #12]	; (80121c0 <vTaskMissedYield+0x14>)
 80121b2:	2201      	movs	r2, #1
 80121b4:	601a      	str	r2, [r3, #0]
}
 80121b6:	bf00      	nop
 80121b8:	46bd      	mov	sp, r7
 80121ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121be:	4770      	bx	lr
 80121c0:	200012f8 	.word	0x200012f8

080121c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b082      	sub	sp, #8
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80121cc:	f000 f852 	bl	8012274 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80121d0:	4b06      	ldr	r3, [pc, #24]	; (80121ec <prvIdleTask+0x28>)
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	2b01      	cmp	r3, #1
 80121d6:	d9f9      	bls.n	80121cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80121d8:	4b05      	ldr	r3, [pc, #20]	; (80121f0 <prvIdleTask+0x2c>)
 80121da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121de:	601a      	str	r2, [r3, #0]
 80121e0:	f3bf 8f4f 	dsb	sy
 80121e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80121e8:	e7f0      	b.n	80121cc <prvIdleTask+0x8>
 80121ea:	bf00      	nop
 80121ec:	20000e14 	.word	0x20000e14
 80121f0:	e000ed04 	.word	0xe000ed04

080121f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b082      	sub	sp, #8
 80121f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80121fa:	2300      	movs	r3, #0
 80121fc:	607b      	str	r3, [r7, #4]
 80121fe:	e00c      	b.n	801221a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012200:	687a      	ldr	r2, [r7, #4]
 8012202:	4613      	mov	r3, r2
 8012204:	009b      	lsls	r3, r3, #2
 8012206:	4413      	add	r3, r2
 8012208:	009b      	lsls	r3, r3, #2
 801220a:	4a12      	ldr	r2, [pc, #72]	; (8012254 <prvInitialiseTaskLists+0x60>)
 801220c:	4413      	add	r3, r2
 801220e:	4618      	mov	r0, r3
 8012210:	f7fe fb62 	bl	80108d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	3301      	adds	r3, #1
 8012218:	607b      	str	r3, [r7, #4]
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	2b37      	cmp	r3, #55	; 0x37
 801221e:	d9ef      	bls.n	8012200 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012220:	480d      	ldr	r0, [pc, #52]	; (8012258 <prvInitialiseTaskLists+0x64>)
 8012222:	f7fe fb59 	bl	80108d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012226:	480d      	ldr	r0, [pc, #52]	; (801225c <prvInitialiseTaskLists+0x68>)
 8012228:	f7fe fb56 	bl	80108d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801222c:	480c      	ldr	r0, [pc, #48]	; (8012260 <prvInitialiseTaskLists+0x6c>)
 801222e:	f7fe fb53 	bl	80108d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012232:	480c      	ldr	r0, [pc, #48]	; (8012264 <prvInitialiseTaskLists+0x70>)
 8012234:	f7fe fb50 	bl	80108d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012238:	480b      	ldr	r0, [pc, #44]	; (8012268 <prvInitialiseTaskLists+0x74>)
 801223a:	f7fe fb4d 	bl	80108d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801223e:	4b0b      	ldr	r3, [pc, #44]	; (801226c <prvInitialiseTaskLists+0x78>)
 8012240:	4a05      	ldr	r2, [pc, #20]	; (8012258 <prvInitialiseTaskLists+0x64>)
 8012242:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012244:	4b0a      	ldr	r3, [pc, #40]	; (8012270 <prvInitialiseTaskLists+0x7c>)
 8012246:	4a05      	ldr	r2, [pc, #20]	; (801225c <prvInitialiseTaskLists+0x68>)
 8012248:	601a      	str	r2, [r3, #0]
}
 801224a:	bf00      	nop
 801224c:	3708      	adds	r7, #8
 801224e:	46bd      	mov	sp, r7
 8012250:	bd80      	pop	{r7, pc}
 8012252:	bf00      	nop
 8012254:	20000e14 	.word	0x20000e14
 8012258:	20001274 	.word	0x20001274
 801225c:	20001288 	.word	0x20001288
 8012260:	200012a4 	.word	0x200012a4
 8012264:	200012b8 	.word	0x200012b8
 8012268:	200012d0 	.word	0x200012d0
 801226c:	2000129c 	.word	0x2000129c
 8012270:	200012a0 	.word	0x200012a0

08012274 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b082      	sub	sp, #8
 8012278:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801227a:	e019      	b.n	80122b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801227c:	f000 fdea 	bl	8012e54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012280:	4b10      	ldr	r3, [pc, #64]	; (80122c4 <prvCheckTasksWaitingTermination+0x50>)
 8012282:	68db      	ldr	r3, [r3, #12]
 8012284:	68db      	ldr	r3, [r3, #12]
 8012286:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	3304      	adds	r3, #4
 801228c:	4618      	mov	r0, r3
 801228e:	f7fe fbad 	bl	80109ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012292:	4b0d      	ldr	r3, [pc, #52]	; (80122c8 <prvCheckTasksWaitingTermination+0x54>)
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	3b01      	subs	r3, #1
 8012298:	4a0b      	ldr	r2, [pc, #44]	; (80122c8 <prvCheckTasksWaitingTermination+0x54>)
 801229a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801229c:	4b0b      	ldr	r3, [pc, #44]	; (80122cc <prvCheckTasksWaitingTermination+0x58>)
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	3b01      	subs	r3, #1
 80122a2:	4a0a      	ldr	r2, [pc, #40]	; (80122cc <prvCheckTasksWaitingTermination+0x58>)
 80122a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80122a6:	f000 fe05 	bl	8012eb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80122aa:	6878      	ldr	r0, [r7, #4]
 80122ac:	f000 f810 	bl	80122d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80122b0:	4b06      	ldr	r3, [pc, #24]	; (80122cc <prvCheckTasksWaitingTermination+0x58>)
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d1e1      	bne.n	801227c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80122b8:	bf00      	nop
 80122ba:	bf00      	nop
 80122bc:	3708      	adds	r7, #8
 80122be:	46bd      	mov	sp, r7
 80122c0:	bd80      	pop	{r7, pc}
 80122c2:	bf00      	nop
 80122c4:	200012b8 	.word	0x200012b8
 80122c8:	200012e4 	.word	0x200012e4
 80122cc:	200012cc 	.word	0x200012cc

080122d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b084      	sub	sp, #16
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	3354      	adds	r3, #84	; 0x54
 80122dc:	4618      	mov	r0, r3
 80122de:	f003 fd79 	bl	8015dd4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d108      	bne.n	80122fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122f0:	4618      	mov	r0, r3
 80122f2:	f000 ff9d 	bl	8013230 <vPortFree>
				vPortFree( pxTCB );
 80122f6:	6878      	ldr	r0, [r7, #4]
 80122f8:	f000 ff9a 	bl	8013230 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80122fc:	e018      	b.n	8012330 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8012304:	2b01      	cmp	r3, #1
 8012306:	d103      	bne.n	8012310 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8012308:	6878      	ldr	r0, [r7, #4]
 801230a:	f000 ff91 	bl	8013230 <vPortFree>
	}
 801230e:	e00f      	b.n	8012330 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8012316:	2b02      	cmp	r3, #2
 8012318:	d00a      	beq.n	8012330 <prvDeleteTCB+0x60>
	__asm volatile
 801231a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801231e:	f383 8811 	msr	BASEPRI, r3
 8012322:	f3bf 8f6f 	isb	sy
 8012326:	f3bf 8f4f 	dsb	sy
 801232a:	60fb      	str	r3, [r7, #12]
}
 801232c:	bf00      	nop
 801232e:	e7fe      	b.n	801232e <prvDeleteTCB+0x5e>
	}
 8012330:	bf00      	nop
 8012332:	3710      	adds	r7, #16
 8012334:	46bd      	mov	sp, r7
 8012336:	bd80      	pop	{r7, pc}

08012338 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012338:	b480      	push	{r7}
 801233a:	b083      	sub	sp, #12
 801233c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801233e:	4b0c      	ldr	r3, [pc, #48]	; (8012370 <prvResetNextTaskUnblockTime+0x38>)
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d104      	bne.n	8012352 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012348:	4b0a      	ldr	r3, [pc, #40]	; (8012374 <prvResetNextTaskUnblockTime+0x3c>)
 801234a:	f04f 32ff 	mov.w	r2, #4294967295
 801234e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012350:	e008      	b.n	8012364 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012352:	4b07      	ldr	r3, [pc, #28]	; (8012370 <prvResetNextTaskUnblockTime+0x38>)
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	68db      	ldr	r3, [r3, #12]
 8012358:	68db      	ldr	r3, [r3, #12]
 801235a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	685b      	ldr	r3, [r3, #4]
 8012360:	4a04      	ldr	r2, [pc, #16]	; (8012374 <prvResetNextTaskUnblockTime+0x3c>)
 8012362:	6013      	str	r3, [r2, #0]
}
 8012364:	bf00      	nop
 8012366:	370c      	adds	r7, #12
 8012368:	46bd      	mov	sp, r7
 801236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801236e:	4770      	bx	lr
 8012370:	2000129c 	.word	0x2000129c
 8012374:	20001304 	.word	0x20001304

08012378 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8012378:	b480      	push	{r7}
 801237a:	b083      	sub	sp, #12
 801237c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801237e:	4b05      	ldr	r3, [pc, #20]	; (8012394 <xTaskGetCurrentTaskHandle+0x1c>)
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	607b      	str	r3, [r7, #4]

		return xReturn;
 8012384:	687b      	ldr	r3, [r7, #4]
	}
 8012386:	4618      	mov	r0, r3
 8012388:	370c      	adds	r7, #12
 801238a:	46bd      	mov	sp, r7
 801238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012390:	4770      	bx	lr
 8012392:	bf00      	nop
 8012394:	20000e10 	.word	0x20000e10

08012398 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012398:	b480      	push	{r7}
 801239a:	b083      	sub	sp, #12
 801239c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801239e:	4b0b      	ldr	r3, [pc, #44]	; (80123cc <xTaskGetSchedulerState+0x34>)
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d102      	bne.n	80123ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80123a6:	2301      	movs	r3, #1
 80123a8:	607b      	str	r3, [r7, #4]
 80123aa:	e008      	b.n	80123be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80123ac:	4b08      	ldr	r3, [pc, #32]	; (80123d0 <xTaskGetSchedulerState+0x38>)
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d102      	bne.n	80123ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80123b4:	2302      	movs	r3, #2
 80123b6:	607b      	str	r3, [r7, #4]
 80123b8:	e001      	b.n	80123be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80123ba:	2300      	movs	r3, #0
 80123bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80123be:	687b      	ldr	r3, [r7, #4]
	}
 80123c0:	4618      	mov	r0, r3
 80123c2:	370c      	adds	r7, #12
 80123c4:	46bd      	mov	sp, r7
 80123c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ca:	4770      	bx	lr
 80123cc:	200012f0 	.word	0x200012f0
 80123d0:	2000130c 	.word	0x2000130c

080123d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b086      	sub	sp, #24
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80123e0:	2300      	movs	r3, #0
 80123e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d056      	beq.n	8012498 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80123ea:	4b2e      	ldr	r3, [pc, #184]	; (80124a4 <xTaskPriorityDisinherit+0xd0>)
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	693a      	ldr	r2, [r7, #16]
 80123f0:	429a      	cmp	r2, r3
 80123f2:	d00a      	beq.n	801240a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80123f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123f8:	f383 8811 	msr	BASEPRI, r3
 80123fc:	f3bf 8f6f 	isb	sy
 8012400:	f3bf 8f4f 	dsb	sy
 8012404:	60fb      	str	r3, [r7, #12]
}
 8012406:	bf00      	nop
 8012408:	e7fe      	b.n	8012408 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801240a:	693b      	ldr	r3, [r7, #16]
 801240c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801240e:	2b00      	cmp	r3, #0
 8012410:	d10a      	bne.n	8012428 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8012412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012416:	f383 8811 	msr	BASEPRI, r3
 801241a:	f3bf 8f6f 	isb	sy
 801241e:	f3bf 8f4f 	dsb	sy
 8012422:	60bb      	str	r3, [r7, #8]
}
 8012424:	bf00      	nop
 8012426:	e7fe      	b.n	8012426 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8012428:	693b      	ldr	r3, [r7, #16]
 801242a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801242c:	1e5a      	subs	r2, r3, #1
 801242e:	693b      	ldr	r3, [r7, #16]
 8012430:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012432:	693b      	ldr	r3, [r7, #16]
 8012434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012436:	693b      	ldr	r3, [r7, #16]
 8012438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801243a:	429a      	cmp	r2, r3
 801243c:	d02c      	beq.n	8012498 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801243e:	693b      	ldr	r3, [r7, #16]
 8012440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012442:	2b00      	cmp	r3, #0
 8012444:	d128      	bne.n	8012498 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012446:	693b      	ldr	r3, [r7, #16]
 8012448:	3304      	adds	r3, #4
 801244a:	4618      	mov	r0, r3
 801244c:	f7fe face 	bl	80109ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012450:	693b      	ldr	r3, [r7, #16]
 8012452:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012454:	693b      	ldr	r3, [r7, #16]
 8012456:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012458:	693b      	ldr	r3, [r7, #16]
 801245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801245c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012460:	693b      	ldr	r3, [r7, #16]
 8012462:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012464:	693b      	ldr	r3, [r7, #16]
 8012466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012468:	4b0f      	ldr	r3, [pc, #60]	; (80124a8 <xTaskPriorityDisinherit+0xd4>)
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	429a      	cmp	r2, r3
 801246e:	d903      	bls.n	8012478 <xTaskPriorityDisinherit+0xa4>
 8012470:	693b      	ldr	r3, [r7, #16]
 8012472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012474:	4a0c      	ldr	r2, [pc, #48]	; (80124a8 <xTaskPriorityDisinherit+0xd4>)
 8012476:	6013      	str	r3, [r2, #0]
 8012478:	693b      	ldr	r3, [r7, #16]
 801247a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801247c:	4613      	mov	r3, r2
 801247e:	009b      	lsls	r3, r3, #2
 8012480:	4413      	add	r3, r2
 8012482:	009b      	lsls	r3, r3, #2
 8012484:	4a09      	ldr	r2, [pc, #36]	; (80124ac <xTaskPriorityDisinherit+0xd8>)
 8012486:	441a      	add	r2, r3
 8012488:	693b      	ldr	r3, [r7, #16]
 801248a:	3304      	adds	r3, #4
 801248c:	4619      	mov	r1, r3
 801248e:	4610      	mov	r0, r2
 8012490:	f7fe fa4f 	bl	8010932 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012494:	2301      	movs	r3, #1
 8012496:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012498:	697b      	ldr	r3, [r7, #20]
	}
 801249a:	4618      	mov	r0, r3
 801249c:	3718      	adds	r7, #24
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd80      	pop	{r7, pc}
 80124a2:	bf00      	nop
 80124a4:	20000e10 	.word	0x20000e10
 80124a8:	200012ec 	.word	0x200012ec
 80124ac:	20000e14 	.word	0x20000e14

080124b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b084      	sub	sp, #16
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
 80124b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80124ba:	4b21      	ldr	r3, [pc, #132]	; (8012540 <prvAddCurrentTaskToDelayedList+0x90>)
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80124c0:	4b20      	ldr	r3, [pc, #128]	; (8012544 <prvAddCurrentTaskToDelayedList+0x94>)
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	3304      	adds	r3, #4
 80124c6:	4618      	mov	r0, r3
 80124c8:	f7fe fa90 	bl	80109ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124d2:	d10a      	bne.n	80124ea <prvAddCurrentTaskToDelayedList+0x3a>
 80124d4:	683b      	ldr	r3, [r7, #0]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d007      	beq.n	80124ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80124da:	4b1a      	ldr	r3, [pc, #104]	; (8012544 <prvAddCurrentTaskToDelayedList+0x94>)
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	3304      	adds	r3, #4
 80124e0:	4619      	mov	r1, r3
 80124e2:	4819      	ldr	r0, [pc, #100]	; (8012548 <prvAddCurrentTaskToDelayedList+0x98>)
 80124e4:	f7fe fa25 	bl	8010932 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80124e8:	e026      	b.n	8012538 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80124ea:	68fa      	ldr	r2, [r7, #12]
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	4413      	add	r3, r2
 80124f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80124f2:	4b14      	ldr	r3, [pc, #80]	; (8012544 <prvAddCurrentTaskToDelayedList+0x94>)
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	68ba      	ldr	r2, [r7, #8]
 80124f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80124fa:	68ba      	ldr	r2, [r7, #8]
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	429a      	cmp	r2, r3
 8012500:	d209      	bcs.n	8012516 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012502:	4b12      	ldr	r3, [pc, #72]	; (801254c <prvAddCurrentTaskToDelayedList+0x9c>)
 8012504:	681a      	ldr	r2, [r3, #0]
 8012506:	4b0f      	ldr	r3, [pc, #60]	; (8012544 <prvAddCurrentTaskToDelayedList+0x94>)
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	3304      	adds	r3, #4
 801250c:	4619      	mov	r1, r3
 801250e:	4610      	mov	r0, r2
 8012510:	f7fe fa33 	bl	801097a <vListInsert>
}
 8012514:	e010      	b.n	8012538 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012516:	4b0e      	ldr	r3, [pc, #56]	; (8012550 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012518:	681a      	ldr	r2, [r3, #0]
 801251a:	4b0a      	ldr	r3, [pc, #40]	; (8012544 <prvAddCurrentTaskToDelayedList+0x94>)
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	3304      	adds	r3, #4
 8012520:	4619      	mov	r1, r3
 8012522:	4610      	mov	r0, r2
 8012524:	f7fe fa29 	bl	801097a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012528:	4b0a      	ldr	r3, [pc, #40]	; (8012554 <prvAddCurrentTaskToDelayedList+0xa4>)
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	68ba      	ldr	r2, [r7, #8]
 801252e:	429a      	cmp	r2, r3
 8012530:	d202      	bcs.n	8012538 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012532:	4a08      	ldr	r2, [pc, #32]	; (8012554 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012534:	68bb      	ldr	r3, [r7, #8]
 8012536:	6013      	str	r3, [r2, #0]
}
 8012538:	bf00      	nop
 801253a:	3710      	adds	r7, #16
 801253c:	46bd      	mov	sp, r7
 801253e:	bd80      	pop	{r7, pc}
 8012540:	200012e8 	.word	0x200012e8
 8012544:	20000e10 	.word	0x20000e10
 8012548:	200012d0 	.word	0x200012d0
 801254c:	200012a0 	.word	0x200012a0
 8012550:	2000129c 	.word	0x2000129c
 8012554:	20001304 	.word	0x20001304

08012558 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012558:	b580      	push	{r7, lr}
 801255a:	b08a      	sub	sp, #40	; 0x28
 801255c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801255e:	2300      	movs	r3, #0
 8012560:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012562:	f000 fb07 	bl	8012b74 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012566:	4b1c      	ldr	r3, [pc, #112]	; (80125d8 <xTimerCreateTimerTask+0x80>)
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d021      	beq.n	80125b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801256e:	2300      	movs	r3, #0
 8012570:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012572:	2300      	movs	r3, #0
 8012574:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012576:	1d3a      	adds	r2, r7, #4
 8012578:	f107 0108 	add.w	r1, r7, #8
 801257c:	f107 030c 	add.w	r3, r7, #12
 8012580:	4618      	mov	r0, r3
 8012582:	f7fe f98f 	bl	80108a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012586:	6879      	ldr	r1, [r7, #4]
 8012588:	68bb      	ldr	r3, [r7, #8]
 801258a:	68fa      	ldr	r2, [r7, #12]
 801258c:	9202      	str	r2, [sp, #8]
 801258e:	9301      	str	r3, [sp, #4]
 8012590:	2302      	movs	r3, #2
 8012592:	9300      	str	r3, [sp, #0]
 8012594:	2300      	movs	r3, #0
 8012596:	460a      	mov	r2, r1
 8012598:	4910      	ldr	r1, [pc, #64]	; (80125dc <xTimerCreateTimerTask+0x84>)
 801259a:	4811      	ldr	r0, [pc, #68]	; (80125e0 <xTimerCreateTimerTask+0x88>)
 801259c:	f7fe ff3c 	bl	8011418 <xTaskCreateStatic>
 80125a0:	4603      	mov	r3, r0
 80125a2:	4a10      	ldr	r2, [pc, #64]	; (80125e4 <xTimerCreateTimerTask+0x8c>)
 80125a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80125a6:	4b0f      	ldr	r3, [pc, #60]	; (80125e4 <xTimerCreateTimerTask+0x8c>)
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d001      	beq.n	80125b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80125ae:	2301      	movs	r3, #1
 80125b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80125b2:	697b      	ldr	r3, [r7, #20]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d10a      	bne.n	80125ce <xTimerCreateTimerTask+0x76>
	__asm volatile
 80125b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125bc:	f383 8811 	msr	BASEPRI, r3
 80125c0:	f3bf 8f6f 	isb	sy
 80125c4:	f3bf 8f4f 	dsb	sy
 80125c8:	613b      	str	r3, [r7, #16]
}
 80125ca:	bf00      	nop
 80125cc:	e7fe      	b.n	80125cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80125ce:	697b      	ldr	r3, [r7, #20]
}
 80125d0:	4618      	mov	r0, r3
 80125d2:	3718      	adds	r7, #24
 80125d4:	46bd      	mov	sp, r7
 80125d6:	bd80      	pop	{r7, pc}
 80125d8:	20001340 	.word	0x20001340
 80125dc:	0801c4e0 	.word	0x0801c4e0
 80125e0:	0801271d 	.word	0x0801271d
 80125e4:	20001344 	.word	0x20001344

080125e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b08a      	sub	sp, #40	; 0x28
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	60f8      	str	r0, [r7, #12]
 80125f0:	60b9      	str	r1, [r7, #8]
 80125f2:	607a      	str	r2, [r7, #4]
 80125f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80125f6:	2300      	movs	r3, #0
 80125f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d10a      	bne.n	8012616 <xTimerGenericCommand+0x2e>
	__asm volatile
 8012600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012604:	f383 8811 	msr	BASEPRI, r3
 8012608:	f3bf 8f6f 	isb	sy
 801260c:	f3bf 8f4f 	dsb	sy
 8012610:	623b      	str	r3, [r7, #32]
}
 8012612:	bf00      	nop
 8012614:	e7fe      	b.n	8012614 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012616:	4b1a      	ldr	r3, [pc, #104]	; (8012680 <xTimerGenericCommand+0x98>)
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d02a      	beq.n	8012674 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801261e:	68bb      	ldr	r3, [r7, #8]
 8012620:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801262a:	68bb      	ldr	r3, [r7, #8]
 801262c:	2b05      	cmp	r3, #5
 801262e:	dc18      	bgt.n	8012662 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012630:	f7ff feb2 	bl	8012398 <xTaskGetSchedulerState>
 8012634:	4603      	mov	r3, r0
 8012636:	2b02      	cmp	r3, #2
 8012638:	d109      	bne.n	801264e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801263a:	4b11      	ldr	r3, [pc, #68]	; (8012680 <xTimerGenericCommand+0x98>)
 801263c:	6818      	ldr	r0, [r3, #0]
 801263e:	f107 0110 	add.w	r1, r7, #16
 8012642:	2300      	movs	r3, #0
 8012644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012646:	f7fe faff 	bl	8010c48 <xQueueGenericSend>
 801264a:	6278      	str	r0, [r7, #36]	; 0x24
 801264c:	e012      	b.n	8012674 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801264e:	4b0c      	ldr	r3, [pc, #48]	; (8012680 <xTimerGenericCommand+0x98>)
 8012650:	6818      	ldr	r0, [r3, #0]
 8012652:	f107 0110 	add.w	r1, r7, #16
 8012656:	2300      	movs	r3, #0
 8012658:	2200      	movs	r2, #0
 801265a:	f7fe faf5 	bl	8010c48 <xQueueGenericSend>
 801265e:	6278      	str	r0, [r7, #36]	; 0x24
 8012660:	e008      	b.n	8012674 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012662:	4b07      	ldr	r3, [pc, #28]	; (8012680 <xTimerGenericCommand+0x98>)
 8012664:	6818      	ldr	r0, [r3, #0]
 8012666:	f107 0110 	add.w	r1, r7, #16
 801266a:	2300      	movs	r3, #0
 801266c:	683a      	ldr	r2, [r7, #0]
 801266e:	f7fe fbe9 	bl	8010e44 <xQueueGenericSendFromISR>
 8012672:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012676:	4618      	mov	r0, r3
 8012678:	3728      	adds	r7, #40	; 0x28
 801267a:	46bd      	mov	sp, r7
 801267c:	bd80      	pop	{r7, pc}
 801267e:	bf00      	nop
 8012680:	20001340 	.word	0x20001340

08012684 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b088      	sub	sp, #32
 8012688:	af02      	add	r7, sp, #8
 801268a:	6078      	str	r0, [r7, #4]
 801268c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801268e:	4b22      	ldr	r3, [pc, #136]	; (8012718 <prvProcessExpiredTimer+0x94>)
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	68db      	ldr	r3, [r3, #12]
 8012694:	68db      	ldr	r3, [r3, #12]
 8012696:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012698:	697b      	ldr	r3, [r7, #20]
 801269a:	3304      	adds	r3, #4
 801269c:	4618      	mov	r0, r3
 801269e:	f7fe f9a5 	bl	80109ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80126a2:	697b      	ldr	r3, [r7, #20]
 80126a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80126a8:	f003 0304 	and.w	r3, r3, #4
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d022      	beq.n	80126f6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80126b0:	697b      	ldr	r3, [r7, #20]
 80126b2:	699a      	ldr	r2, [r3, #24]
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	18d1      	adds	r1, r2, r3
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	683a      	ldr	r2, [r7, #0]
 80126bc:	6978      	ldr	r0, [r7, #20]
 80126be:	f000 f8d1 	bl	8012864 <prvInsertTimerInActiveList>
 80126c2:	4603      	mov	r3, r0
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d01f      	beq.n	8012708 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80126c8:	2300      	movs	r3, #0
 80126ca:	9300      	str	r3, [sp, #0]
 80126cc:	2300      	movs	r3, #0
 80126ce:	687a      	ldr	r2, [r7, #4]
 80126d0:	2100      	movs	r1, #0
 80126d2:	6978      	ldr	r0, [r7, #20]
 80126d4:	f7ff ff88 	bl	80125e8 <xTimerGenericCommand>
 80126d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80126da:	693b      	ldr	r3, [r7, #16]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d113      	bne.n	8012708 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80126e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126e4:	f383 8811 	msr	BASEPRI, r3
 80126e8:	f3bf 8f6f 	isb	sy
 80126ec:	f3bf 8f4f 	dsb	sy
 80126f0:	60fb      	str	r3, [r7, #12]
}
 80126f2:	bf00      	nop
 80126f4:	e7fe      	b.n	80126f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80126f6:	697b      	ldr	r3, [r7, #20]
 80126f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80126fc:	f023 0301 	bic.w	r3, r3, #1
 8012700:	b2da      	uxtb	r2, r3
 8012702:	697b      	ldr	r3, [r7, #20]
 8012704:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012708:	697b      	ldr	r3, [r7, #20]
 801270a:	6a1b      	ldr	r3, [r3, #32]
 801270c:	6978      	ldr	r0, [r7, #20]
 801270e:	4798      	blx	r3
}
 8012710:	bf00      	nop
 8012712:	3718      	adds	r7, #24
 8012714:	46bd      	mov	sp, r7
 8012716:	bd80      	pop	{r7, pc}
 8012718:	20001338 	.word	0x20001338

0801271c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801271c:	b580      	push	{r7, lr}
 801271e:	b084      	sub	sp, #16
 8012720:	af00      	add	r7, sp, #0
 8012722:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012724:	f107 0308 	add.w	r3, r7, #8
 8012728:	4618      	mov	r0, r3
 801272a:	f000 f857 	bl	80127dc <prvGetNextExpireTime>
 801272e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012730:	68bb      	ldr	r3, [r7, #8]
 8012732:	4619      	mov	r1, r3
 8012734:	68f8      	ldr	r0, [r7, #12]
 8012736:	f000 f803 	bl	8012740 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801273a:	f000 f8d5 	bl	80128e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801273e:	e7f1      	b.n	8012724 <prvTimerTask+0x8>

08012740 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012740:	b580      	push	{r7, lr}
 8012742:	b084      	sub	sp, #16
 8012744:	af00      	add	r7, sp, #0
 8012746:	6078      	str	r0, [r7, #4]
 8012748:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801274a:	f7ff fa29 	bl	8011ba0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801274e:	f107 0308 	add.w	r3, r7, #8
 8012752:	4618      	mov	r0, r3
 8012754:	f000 f866 	bl	8012824 <prvSampleTimeNow>
 8012758:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801275a:	68bb      	ldr	r3, [r7, #8]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d130      	bne.n	80127c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012760:	683b      	ldr	r3, [r7, #0]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d10a      	bne.n	801277c <prvProcessTimerOrBlockTask+0x3c>
 8012766:	687a      	ldr	r2, [r7, #4]
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	429a      	cmp	r2, r3
 801276c:	d806      	bhi.n	801277c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801276e:	f7ff fa25 	bl	8011bbc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012772:	68f9      	ldr	r1, [r7, #12]
 8012774:	6878      	ldr	r0, [r7, #4]
 8012776:	f7ff ff85 	bl	8012684 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801277a:	e024      	b.n	80127c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801277c:	683b      	ldr	r3, [r7, #0]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d008      	beq.n	8012794 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012782:	4b13      	ldr	r3, [pc, #76]	; (80127d0 <prvProcessTimerOrBlockTask+0x90>)
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d101      	bne.n	8012790 <prvProcessTimerOrBlockTask+0x50>
 801278c:	2301      	movs	r3, #1
 801278e:	e000      	b.n	8012792 <prvProcessTimerOrBlockTask+0x52>
 8012790:	2300      	movs	r3, #0
 8012792:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012794:	4b0f      	ldr	r3, [pc, #60]	; (80127d4 <prvProcessTimerOrBlockTask+0x94>)
 8012796:	6818      	ldr	r0, [r3, #0]
 8012798:	687a      	ldr	r2, [r7, #4]
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	1ad3      	subs	r3, r2, r3
 801279e:	683a      	ldr	r2, [r7, #0]
 80127a0:	4619      	mov	r1, r3
 80127a2:	f7fe fe05 	bl	80113b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80127a6:	f7ff fa09 	bl	8011bbc <xTaskResumeAll>
 80127aa:	4603      	mov	r3, r0
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d10a      	bne.n	80127c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80127b0:	4b09      	ldr	r3, [pc, #36]	; (80127d8 <prvProcessTimerOrBlockTask+0x98>)
 80127b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127b6:	601a      	str	r2, [r3, #0]
 80127b8:	f3bf 8f4f 	dsb	sy
 80127bc:	f3bf 8f6f 	isb	sy
}
 80127c0:	e001      	b.n	80127c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80127c2:	f7ff f9fb 	bl	8011bbc <xTaskResumeAll>
}
 80127c6:	bf00      	nop
 80127c8:	3710      	adds	r7, #16
 80127ca:	46bd      	mov	sp, r7
 80127cc:	bd80      	pop	{r7, pc}
 80127ce:	bf00      	nop
 80127d0:	2000133c 	.word	0x2000133c
 80127d4:	20001340 	.word	0x20001340
 80127d8:	e000ed04 	.word	0xe000ed04

080127dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80127dc:	b480      	push	{r7}
 80127de:	b085      	sub	sp, #20
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80127e4:	4b0e      	ldr	r3, [pc, #56]	; (8012820 <prvGetNextExpireTime+0x44>)
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d101      	bne.n	80127f2 <prvGetNextExpireTime+0x16>
 80127ee:	2201      	movs	r2, #1
 80127f0:	e000      	b.n	80127f4 <prvGetNextExpireTime+0x18>
 80127f2:	2200      	movs	r2, #0
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d105      	bne.n	801280c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012800:	4b07      	ldr	r3, [pc, #28]	; (8012820 <prvGetNextExpireTime+0x44>)
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	68db      	ldr	r3, [r3, #12]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	60fb      	str	r3, [r7, #12]
 801280a:	e001      	b.n	8012810 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801280c:	2300      	movs	r3, #0
 801280e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012810:	68fb      	ldr	r3, [r7, #12]
}
 8012812:	4618      	mov	r0, r3
 8012814:	3714      	adds	r7, #20
 8012816:	46bd      	mov	sp, r7
 8012818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281c:	4770      	bx	lr
 801281e:	bf00      	nop
 8012820:	20001338 	.word	0x20001338

08012824 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b084      	sub	sp, #16
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801282c:	f7ff fa64 	bl	8011cf8 <xTaskGetTickCount>
 8012830:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012832:	4b0b      	ldr	r3, [pc, #44]	; (8012860 <prvSampleTimeNow+0x3c>)
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	68fa      	ldr	r2, [r7, #12]
 8012838:	429a      	cmp	r2, r3
 801283a:	d205      	bcs.n	8012848 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801283c:	f000 f936 	bl	8012aac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	2201      	movs	r2, #1
 8012844:	601a      	str	r2, [r3, #0]
 8012846:	e002      	b.n	801284e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	2200      	movs	r2, #0
 801284c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801284e:	4a04      	ldr	r2, [pc, #16]	; (8012860 <prvSampleTimeNow+0x3c>)
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012854:	68fb      	ldr	r3, [r7, #12]
}
 8012856:	4618      	mov	r0, r3
 8012858:	3710      	adds	r7, #16
 801285a:	46bd      	mov	sp, r7
 801285c:	bd80      	pop	{r7, pc}
 801285e:	bf00      	nop
 8012860:	20001348 	.word	0x20001348

08012864 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012864:	b580      	push	{r7, lr}
 8012866:	b086      	sub	sp, #24
 8012868:	af00      	add	r7, sp, #0
 801286a:	60f8      	str	r0, [r7, #12]
 801286c:	60b9      	str	r1, [r7, #8]
 801286e:	607a      	str	r2, [r7, #4]
 8012870:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012872:	2300      	movs	r3, #0
 8012874:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	68ba      	ldr	r2, [r7, #8]
 801287a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	68fa      	ldr	r2, [r7, #12]
 8012880:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012882:	68ba      	ldr	r2, [r7, #8]
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	429a      	cmp	r2, r3
 8012888:	d812      	bhi.n	80128b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801288a:	687a      	ldr	r2, [r7, #4]
 801288c:	683b      	ldr	r3, [r7, #0]
 801288e:	1ad2      	subs	r2, r2, r3
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	699b      	ldr	r3, [r3, #24]
 8012894:	429a      	cmp	r2, r3
 8012896:	d302      	bcc.n	801289e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012898:	2301      	movs	r3, #1
 801289a:	617b      	str	r3, [r7, #20]
 801289c:	e01b      	b.n	80128d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801289e:	4b10      	ldr	r3, [pc, #64]	; (80128e0 <prvInsertTimerInActiveList+0x7c>)
 80128a0:	681a      	ldr	r2, [r3, #0]
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	3304      	adds	r3, #4
 80128a6:	4619      	mov	r1, r3
 80128a8:	4610      	mov	r0, r2
 80128aa:	f7fe f866 	bl	801097a <vListInsert>
 80128ae:	e012      	b.n	80128d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80128b0:	687a      	ldr	r2, [r7, #4]
 80128b2:	683b      	ldr	r3, [r7, #0]
 80128b4:	429a      	cmp	r2, r3
 80128b6:	d206      	bcs.n	80128c6 <prvInsertTimerInActiveList+0x62>
 80128b8:	68ba      	ldr	r2, [r7, #8]
 80128ba:	683b      	ldr	r3, [r7, #0]
 80128bc:	429a      	cmp	r2, r3
 80128be:	d302      	bcc.n	80128c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80128c0:	2301      	movs	r3, #1
 80128c2:	617b      	str	r3, [r7, #20]
 80128c4:	e007      	b.n	80128d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80128c6:	4b07      	ldr	r3, [pc, #28]	; (80128e4 <prvInsertTimerInActiveList+0x80>)
 80128c8:	681a      	ldr	r2, [r3, #0]
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	3304      	adds	r3, #4
 80128ce:	4619      	mov	r1, r3
 80128d0:	4610      	mov	r0, r2
 80128d2:	f7fe f852 	bl	801097a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80128d6:	697b      	ldr	r3, [r7, #20]
}
 80128d8:	4618      	mov	r0, r3
 80128da:	3718      	adds	r7, #24
 80128dc:	46bd      	mov	sp, r7
 80128de:	bd80      	pop	{r7, pc}
 80128e0:	2000133c 	.word	0x2000133c
 80128e4:	20001338 	.word	0x20001338

080128e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b08e      	sub	sp, #56	; 0x38
 80128ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80128ee:	e0ca      	b.n	8012a86 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	da18      	bge.n	8012928 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80128f6:	1d3b      	adds	r3, r7, #4
 80128f8:	3304      	adds	r3, #4
 80128fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80128fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d10a      	bne.n	8012918 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8012902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012906:	f383 8811 	msr	BASEPRI, r3
 801290a:	f3bf 8f6f 	isb	sy
 801290e:	f3bf 8f4f 	dsb	sy
 8012912:	61fb      	str	r3, [r7, #28]
}
 8012914:	bf00      	nop
 8012916:	e7fe      	b.n	8012916 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801291e:	6850      	ldr	r0, [r2, #4]
 8012920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012922:	6892      	ldr	r2, [r2, #8]
 8012924:	4611      	mov	r1, r2
 8012926:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	2b00      	cmp	r3, #0
 801292c:	f2c0 80aa 	blt.w	8012a84 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012936:	695b      	ldr	r3, [r3, #20]
 8012938:	2b00      	cmp	r3, #0
 801293a:	d004      	beq.n	8012946 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801293c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801293e:	3304      	adds	r3, #4
 8012940:	4618      	mov	r0, r3
 8012942:	f7fe f853 	bl	80109ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012946:	463b      	mov	r3, r7
 8012948:	4618      	mov	r0, r3
 801294a:	f7ff ff6b 	bl	8012824 <prvSampleTimeNow>
 801294e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	2b09      	cmp	r3, #9
 8012954:	f200 8097 	bhi.w	8012a86 <prvProcessReceivedCommands+0x19e>
 8012958:	a201      	add	r2, pc, #4	; (adr r2, 8012960 <prvProcessReceivedCommands+0x78>)
 801295a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801295e:	bf00      	nop
 8012960:	08012989 	.word	0x08012989
 8012964:	08012989 	.word	0x08012989
 8012968:	08012989 	.word	0x08012989
 801296c:	080129fd 	.word	0x080129fd
 8012970:	08012a11 	.word	0x08012a11
 8012974:	08012a5b 	.word	0x08012a5b
 8012978:	08012989 	.word	0x08012989
 801297c:	08012989 	.word	0x08012989
 8012980:	080129fd 	.word	0x080129fd
 8012984:	08012a11 	.word	0x08012a11
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801298a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801298e:	f043 0301 	orr.w	r3, r3, #1
 8012992:	b2da      	uxtb	r2, r3
 8012994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012996:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801299a:	68ba      	ldr	r2, [r7, #8]
 801299c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801299e:	699b      	ldr	r3, [r3, #24]
 80129a0:	18d1      	adds	r1, r2, r3
 80129a2:	68bb      	ldr	r3, [r7, #8]
 80129a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129a8:	f7ff ff5c 	bl	8012864 <prvInsertTimerInActiveList>
 80129ac:	4603      	mov	r3, r0
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d069      	beq.n	8012a86 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80129b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129b4:	6a1b      	ldr	r3, [r3, #32]
 80129b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80129ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80129c0:	f003 0304 	and.w	r3, r3, #4
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d05e      	beq.n	8012a86 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80129c8:	68ba      	ldr	r2, [r7, #8]
 80129ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129cc:	699b      	ldr	r3, [r3, #24]
 80129ce:	441a      	add	r2, r3
 80129d0:	2300      	movs	r3, #0
 80129d2:	9300      	str	r3, [sp, #0]
 80129d4:	2300      	movs	r3, #0
 80129d6:	2100      	movs	r1, #0
 80129d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129da:	f7ff fe05 	bl	80125e8 <xTimerGenericCommand>
 80129de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80129e0:	6a3b      	ldr	r3, [r7, #32]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d14f      	bne.n	8012a86 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80129e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129ea:	f383 8811 	msr	BASEPRI, r3
 80129ee:	f3bf 8f6f 	isb	sy
 80129f2:	f3bf 8f4f 	dsb	sy
 80129f6:	61bb      	str	r3, [r7, #24]
}
 80129f8:	bf00      	nop
 80129fa:	e7fe      	b.n	80129fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80129fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a02:	f023 0301 	bic.w	r3, r3, #1
 8012a06:	b2da      	uxtb	r2, r3
 8012a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8012a0e:	e03a      	b.n	8012a86 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a16:	f043 0301 	orr.w	r3, r3, #1
 8012a1a:	b2da      	uxtb	r2, r3
 8012a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012a22:	68ba      	ldr	r2, [r7, #8]
 8012a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a26:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a2a:	699b      	ldr	r3, [r3, #24]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d10a      	bne.n	8012a46 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8012a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a34:	f383 8811 	msr	BASEPRI, r3
 8012a38:	f3bf 8f6f 	isb	sy
 8012a3c:	f3bf 8f4f 	dsb	sy
 8012a40:	617b      	str	r3, [r7, #20]
}
 8012a42:	bf00      	nop
 8012a44:	e7fe      	b.n	8012a44 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a48:	699a      	ldr	r2, [r3, #24]
 8012a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a4c:	18d1      	adds	r1, r2, r3
 8012a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a54:	f7ff ff06 	bl	8012864 <prvInsertTimerInActiveList>
					break;
 8012a58:	e015      	b.n	8012a86 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a60:	f003 0302 	and.w	r3, r3, #2
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d103      	bne.n	8012a70 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8012a68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a6a:	f000 fbe1 	bl	8013230 <vPortFree>
 8012a6e:	e00a      	b.n	8012a86 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a76:	f023 0301 	bic.w	r3, r3, #1
 8012a7a:	b2da      	uxtb	r2, r3
 8012a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012a82:	e000      	b.n	8012a86 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8012a84:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012a86:	4b08      	ldr	r3, [pc, #32]	; (8012aa8 <prvProcessReceivedCommands+0x1c0>)
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	1d39      	adds	r1, r7, #4
 8012a8c:	2200      	movs	r2, #0
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f7fe fa74 	bl	8010f7c <xQueueReceive>
 8012a94:	4603      	mov	r3, r0
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	f47f af2a 	bne.w	80128f0 <prvProcessReceivedCommands+0x8>
	}
}
 8012a9c:	bf00      	nop
 8012a9e:	bf00      	nop
 8012aa0:	3730      	adds	r7, #48	; 0x30
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	bd80      	pop	{r7, pc}
 8012aa6:	bf00      	nop
 8012aa8:	20001340 	.word	0x20001340

08012aac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012aac:	b580      	push	{r7, lr}
 8012aae:	b088      	sub	sp, #32
 8012ab0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012ab2:	e048      	b.n	8012b46 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012ab4:	4b2d      	ldr	r3, [pc, #180]	; (8012b6c <prvSwitchTimerLists+0xc0>)
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	68db      	ldr	r3, [r3, #12]
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012abe:	4b2b      	ldr	r3, [pc, #172]	; (8012b6c <prvSwitchTimerLists+0xc0>)
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	68db      	ldr	r3, [r3, #12]
 8012ac4:	68db      	ldr	r3, [r3, #12]
 8012ac6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	3304      	adds	r3, #4
 8012acc:	4618      	mov	r0, r3
 8012ace:	f7fd ff8d 	bl	80109ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	6a1b      	ldr	r3, [r3, #32]
 8012ad6:	68f8      	ldr	r0, [r7, #12]
 8012ad8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012ae0:	f003 0304 	and.w	r3, r3, #4
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d02e      	beq.n	8012b46 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	699b      	ldr	r3, [r3, #24]
 8012aec:	693a      	ldr	r2, [r7, #16]
 8012aee:	4413      	add	r3, r2
 8012af0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012af2:	68ba      	ldr	r2, [r7, #8]
 8012af4:	693b      	ldr	r3, [r7, #16]
 8012af6:	429a      	cmp	r2, r3
 8012af8:	d90e      	bls.n	8012b18 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	68ba      	ldr	r2, [r7, #8]
 8012afe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	68fa      	ldr	r2, [r7, #12]
 8012b04:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012b06:	4b19      	ldr	r3, [pc, #100]	; (8012b6c <prvSwitchTimerLists+0xc0>)
 8012b08:	681a      	ldr	r2, [r3, #0]
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	3304      	adds	r3, #4
 8012b0e:	4619      	mov	r1, r3
 8012b10:	4610      	mov	r0, r2
 8012b12:	f7fd ff32 	bl	801097a <vListInsert>
 8012b16:	e016      	b.n	8012b46 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012b18:	2300      	movs	r3, #0
 8012b1a:	9300      	str	r3, [sp, #0]
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	693a      	ldr	r2, [r7, #16]
 8012b20:	2100      	movs	r1, #0
 8012b22:	68f8      	ldr	r0, [r7, #12]
 8012b24:	f7ff fd60 	bl	80125e8 <xTimerGenericCommand>
 8012b28:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d10a      	bne.n	8012b46 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b34:	f383 8811 	msr	BASEPRI, r3
 8012b38:	f3bf 8f6f 	isb	sy
 8012b3c:	f3bf 8f4f 	dsb	sy
 8012b40:	603b      	str	r3, [r7, #0]
}
 8012b42:	bf00      	nop
 8012b44:	e7fe      	b.n	8012b44 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012b46:	4b09      	ldr	r3, [pc, #36]	; (8012b6c <prvSwitchTimerLists+0xc0>)
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d1b1      	bne.n	8012ab4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012b50:	4b06      	ldr	r3, [pc, #24]	; (8012b6c <prvSwitchTimerLists+0xc0>)
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012b56:	4b06      	ldr	r3, [pc, #24]	; (8012b70 <prvSwitchTimerLists+0xc4>)
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	4a04      	ldr	r2, [pc, #16]	; (8012b6c <prvSwitchTimerLists+0xc0>)
 8012b5c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012b5e:	4a04      	ldr	r2, [pc, #16]	; (8012b70 <prvSwitchTimerLists+0xc4>)
 8012b60:	697b      	ldr	r3, [r7, #20]
 8012b62:	6013      	str	r3, [r2, #0]
}
 8012b64:	bf00      	nop
 8012b66:	3718      	adds	r7, #24
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	bd80      	pop	{r7, pc}
 8012b6c:	20001338 	.word	0x20001338
 8012b70:	2000133c 	.word	0x2000133c

08012b74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012b74:	b580      	push	{r7, lr}
 8012b76:	b082      	sub	sp, #8
 8012b78:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012b7a:	f000 f96b 	bl	8012e54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012b7e:	4b15      	ldr	r3, [pc, #84]	; (8012bd4 <prvCheckForValidListAndQueue+0x60>)
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d120      	bne.n	8012bc8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012b86:	4814      	ldr	r0, [pc, #80]	; (8012bd8 <prvCheckForValidListAndQueue+0x64>)
 8012b88:	f7fd fea6 	bl	80108d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012b8c:	4813      	ldr	r0, [pc, #76]	; (8012bdc <prvCheckForValidListAndQueue+0x68>)
 8012b8e:	f7fd fea3 	bl	80108d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012b92:	4b13      	ldr	r3, [pc, #76]	; (8012be0 <prvCheckForValidListAndQueue+0x6c>)
 8012b94:	4a10      	ldr	r2, [pc, #64]	; (8012bd8 <prvCheckForValidListAndQueue+0x64>)
 8012b96:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012b98:	4b12      	ldr	r3, [pc, #72]	; (8012be4 <prvCheckForValidListAndQueue+0x70>)
 8012b9a:	4a10      	ldr	r2, [pc, #64]	; (8012bdc <prvCheckForValidListAndQueue+0x68>)
 8012b9c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	9300      	str	r3, [sp, #0]
 8012ba2:	4b11      	ldr	r3, [pc, #68]	; (8012be8 <prvCheckForValidListAndQueue+0x74>)
 8012ba4:	4a11      	ldr	r2, [pc, #68]	; (8012bec <prvCheckForValidListAndQueue+0x78>)
 8012ba6:	2110      	movs	r1, #16
 8012ba8:	200a      	movs	r0, #10
 8012baa:	f7fd ffb1 	bl	8010b10 <xQueueGenericCreateStatic>
 8012bae:	4603      	mov	r3, r0
 8012bb0:	4a08      	ldr	r2, [pc, #32]	; (8012bd4 <prvCheckForValidListAndQueue+0x60>)
 8012bb2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012bb4:	4b07      	ldr	r3, [pc, #28]	; (8012bd4 <prvCheckForValidListAndQueue+0x60>)
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d005      	beq.n	8012bc8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012bbc:	4b05      	ldr	r3, [pc, #20]	; (8012bd4 <prvCheckForValidListAndQueue+0x60>)
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	490b      	ldr	r1, [pc, #44]	; (8012bf0 <prvCheckForValidListAndQueue+0x7c>)
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	f7fe fbca 	bl	801135c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012bc8:	f000 f974 	bl	8012eb4 <vPortExitCritical>
}
 8012bcc:	bf00      	nop
 8012bce:	46bd      	mov	sp, r7
 8012bd0:	bd80      	pop	{r7, pc}
 8012bd2:	bf00      	nop
 8012bd4:	20001340 	.word	0x20001340
 8012bd8:	20001310 	.word	0x20001310
 8012bdc:	20001324 	.word	0x20001324
 8012be0:	20001338 	.word	0x20001338
 8012be4:	2000133c 	.word	0x2000133c
 8012be8:	200013ec 	.word	0x200013ec
 8012bec:	2000134c 	.word	0x2000134c
 8012bf0:	0801c4e8 	.word	0x0801c4e8

08012bf4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012bf4:	b480      	push	{r7}
 8012bf6:	b085      	sub	sp, #20
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	60f8      	str	r0, [r7, #12]
 8012bfc:	60b9      	str	r1, [r7, #8]
 8012bfe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	3b04      	subs	r3, #4
 8012c04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012c0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	3b04      	subs	r3, #4
 8012c12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012c14:	68bb      	ldr	r3, [r7, #8]
 8012c16:	f023 0201 	bic.w	r2, r3, #1
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	3b04      	subs	r3, #4
 8012c22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012c24:	4a0c      	ldr	r2, [pc, #48]	; (8012c58 <pxPortInitialiseStack+0x64>)
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	3b14      	subs	r3, #20
 8012c2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012c30:	687a      	ldr	r2, [r7, #4]
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	3b04      	subs	r3, #4
 8012c3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	f06f 0202 	mvn.w	r2, #2
 8012c42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	3b20      	subs	r3, #32
 8012c48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012c4a:	68fb      	ldr	r3, [r7, #12]
}
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	3714      	adds	r7, #20
 8012c50:	46bd      	mov	sp, r7
 8012c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c56:	4770      	bx	lr
 8012c58:	08012c5d 	.word	0x08012c5d

08012c5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012c5c:	b480      	push	{r7}
 8012c5e:	b085      	sub	sp, #20
 8012c60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012c62:	2300      	movs	r3, #0
 8012c64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012c66:	4b12      	ldr	r3, [pc, #72]	; (8012cb0 <prvTaskExitError+0x54>)
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c6e:	d00a      	beq.n	8012c86 <prvTaskExitError+0x2a>
	__asm volatile
 8012c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c74:	f383 8811 	msr	BASEPRI, r3
 8012c78:	f3bf 8f6f 	isb	sy
 8012c7c:	f3bf 8f4f 	dsb	sy
 8012c80:	60fb      	str	r3, [r7, #12]
}
 8012c82:	bf00      	nop
 8012c84:	e7fe      	b.n	8012c84 <prvTaskExitError+0x28>
	__asm volatile
 8012c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c8a:	f383 8811 	msr	BASEPRI, r3
 8012c8e:	f3bf 8f6f 	isb	sy
 8012c92:	f3bf 8f4f 	dsb	sy
 8012c96:	60bb      	str	r3, [r7, #8]
}
 8012c98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012c9a:	bf00      	nop
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d0fc      	beq.n	8012c9c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012ca2:	bf00      	nop
 8012ca4:	bf00      	nop
 8012ca6:	3714      	adds	r7, #20
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cae:	4770      	bx	lr
 8012cb0:	200000cc 	.word	0x200000cc
	...

08012cc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012cc0:	4b07      	ldr	r3, [pc, #28]	; (8012ce0 <pxCurrentTCBConst2>)
 8012cc2:	6819      	ldr	r1, [r3, #0]
 8012cc4:	6808      	ldr	r0, [r1, #0]
 8012cc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cca:	f380 8809 	msr	PSP, r0
 8012cce:	f3bf 8f6f 	isb	sy
 8012cd2:	f04f 0000 	mov.w	r0, #0
 8012cd6:	f380 8811 	msr	BASEPRI, r0
 8012cda:	4770      	bx	lr
 8012cdc:	f3af 8000 	nop.w

08012ce0 <pxCurrentTCBConst2>:
 8012ce0:	20000e10 	.word	0x20000e10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012ce4:	bf00      	nop
 8012ce6:	bf00      	nop

08012ce8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012ce8:	4808      	ldr	r0, [pc, #32]	; (8012d0c <prvPortStartFirstTask+0x24>)
 8012cea:	6800      	ldr	r0, [r0, #0]
 8012cec:	6800      	ldr	r0, [r0, #0]
 8012cee:	f380 8808 	msr	MSP, r0
 8012cf2:	f04f 0000 	mov.w	r0, #0
 8012cf6:	f380 8814 	msr	CONTROL, r0
 8012cfa:	b662      	cpsie	i
 8012cfc:	b661      	cpsie	f
 8012cfe:	f3bf 8f4f 	dsb	sy
 8012d02:	f3bf 8f6f 	isb	sy
 8012d06:	df00      	svc	0
 8012d08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012d0a:	bf00      	nop
 8012d0c:	e000ed08 	.word	0xe000ed08

08012d10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b086      	sub	sp, #24
 8012d14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012d16:	4b46      	ldr	r3, [pc, #280]	; (8012e30 <xPortStartScheduler+0x120>)
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	4a46      	ldr	r2, [pc, #280]	; (8012e34 <xPortStartScheduler+0x124>)
 8012d1c:	4293      	cmp	r3, r2
 8012d1e:	d10a      	bne.n	8012d36 <xPortStartScheduler+0x26>
	__asm volatile
 8012d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d24:	f383 8811 	msr	BASEPRI, r3
 8012d28:	f3bf 8f6f 	isb	sy
 8012d2c:	f3bf 8f4f 	dsb	sy
 8012d30:	613b      	str	r3, [r7, #16]
}
 8012d32:	bf00      	nop
 8012d34:	e7fe      	b.n	8012d34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012d36:	4b3e      	ldr	r3, [pc, #248]	; (8012e30 <xPortStartScheduler+0x120>)
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	4a3f      	ldr	r2, [pc, #252]	; (8012e38 <xPortStartScheduler+0x128>)
 8012d3c:	4293      	cmp	r3, r2
 8012d3e:	d10a      	bne.n	8012d56 <xPortStartScheduler+0x46>
	__asm volatile
 8012d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d44:	f383 8811 	msr	BASEPRI, r3
 8012d48:	f3bf 8f6f 	isb	sy
 8012d4c:	f3bf 8f4f 	dsb	sy
 8012d50:	60fb      	str	r3, [r7, #12]
}
 8012d52:	bf00      	nop
 8012d54:	e7fe      	b.n	8012d54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012d56:	4b39      	ldr	r3, [pc, #228]	; (8012e3c <xPortStartScheduler+0x12c>)
 8012d58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012d5a:	697b      	ldr	r3, [r7, #20]
 8012d5c:	781b      	ldrb	r3, [r3, #0]
 8012d5e:	b2db      	uxtb	r3, r3
 8012d60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012d62:	697b      	ldr	r3, [r7, #20]
 8012d64:	22ff      	movs	r2, #255	; 0xff
 8012d66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012d68:	697b      	ldr	r3, [r7, #20]
 8012d6a:	781b      	ldrb	r3, [r3, #0]
 8012d6c:	b2db      	uxtb	r3, r3
 8012d6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012d70:	78fb      	ldrb	r3, [r7, #3]
 8012d72:	b2db      	uxtb	r3, r3
 8012d74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012d78:	b2da      	uxtb	r2, r3
 8012d7a:	4b31      	ldr	r3, [pc, #196]	; (8012e40 <xPortStartScheduler+0x130>)
 8012d7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012d7e:	4b31      	ldr	r3, [pc, #196]	; (8012e44 <xPortStartScheduler+0x134>)
 8012d80:	2207      	movs	r2, #7
 8012d82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012d84:	e009      	b.n	8012d9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012d86:	4b2f      	ldr	r3, [pc, #188]	; (8012e44 <xPortStartScheduler+0x134>)
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	3b01      	subs	r3, #1
 8012d8c:	4a2d      	ldr	r2, [pc, #180]	; (8012e44 <xPortStartScheduler+0x134>)
 8012d8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012d90:	78fb      	ldrb	r3, [r7, #3]
 8012d92:	b2db      	uxtb	r3, r3
 8012d94:	005b      	lsls	r3, r3, #1
 8012d96:	b2db      	uxtb	r3, r3
 8012d98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012d9a:	78fb      	ldrb	r3, [r7, #3]
 8012d9c:	b2db      	uxtb	r3, r3
 8012d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012da2:	2b80      	cmp	r3, #128	; 0x80
 8012da4:	d0ef      	beq.n	8012d86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012da6:	4b27      	ldr	r3, [pc, #156]	; (8012e44 <xPortStartScheduler+0x134>)
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	f1c3 0307 	rsb	r3, r3, #7
 8012dae:	2b04      	cmp	r3, #4
 8012db0:	d00a      	beq.n	8012dc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8012db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012db6:	f383 8811 	msr	BASEPRI, r3
 8012dba:	f3bf 8f6f 	isb	sy
 8012dbe:	f3bf 8f4f 	dsb	sy
 8012dc2:	60bb      	str	r3, [r7, #8]
}
 8012dc4:	bf00      	nop
 8012dc6:	e7fe      	b.n	8012dc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012dc8:	4b1e      	ldr	r3, [pc, #120]	; (8012e44 <xPortStartScheduler+0x134>)
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	021b      	lsls	r3, r3, #8
 8012dce:	4a1d      	ldr	r2, [pc, #116]	; (8012e44 <xPortStartScheduler+0x134>)
 8012dd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012dd2:	4b1c      	ldr	r3, [pc, #112]	; (8012e44 <xPortStartScheduler+0x134>)
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012dda:	4a1a      	ldr	r2, [pc, #104]	; (8012e44 <xPortStartScheduler+0x134>)
 8012ddc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	b2da      	uxtb	r2, r3
 8012de2:	697b      	ldr	r3, [r7, #20]
 8012de4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012de6:	4b18      	ldr	r3, [pc, #96]	; (8012e48 <xPortStartScheduler+0x138>)
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	4a17      	ldr	r2, [pc, #92]	; (8012e48 <xPortStartScheduler+0x138>)
 8012dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012df0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012df2:	4b15      	ldr	r3, [pc, #84]	; (8012e48 <xPortStartScheduler+0x138>)
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	4a14      	ldr	r2, [pc, #80]	; (8012e48 <xPortStartScheduler+0x138>)
 8012df8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012dfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012dfe:	f000 f8dd 	bl	8012fbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012e02:	4b12      	ldr	r3, [pc, #72]	; (8012e4c <xPortStartScheduler+0x13c>)
 8012e04:	2200      	movs	r2, #0
 8012e06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012e08:	f000 f8fc 	bl	8013004 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012e0c:	4b10      	ldr	r3, [pc, #64]	; (8012e50 <xPortStartScheduler+0x140>)
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	4a0f      	ldr	r2, [pc, #60]	; (8012e50 <xPortStartScheduler+0x140>)
 8012e12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012e16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012e18:	f7ff ff66 	bl	8012ce8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012e1c:	f7ff f836 	bl	8011e8c <vTaskSwitchContext>
	prvTaskExitError();
 8012e20:	f7ff ff1c 	bl	8012c5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012e24:	2300      	movs	r3, #0
}
 8012e26:	4618      	mov	r0, r3
 8012e28:	3718      	adds	r7, #24
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	bd80      	pop	{r7, pc}
 8012e2e:	bf00      	nop
 8012e30:	e000ed00 	.word	0xe000ed00
 8012e34:	410fc271 	.word	0x410fc271
 8012e38:	410fc270 	.word	0x410fc270
 8012e3c:	e000e400 	.word	0xe000e400
 8012e40:	2000143c 	.word	0x2000143c
 8012e44:	20001440 	.word	0x20001440
 8012e48:	e000ed20 	.word	0xe000ed20
 8012e4c:	200000cc 	.word	0x200000cc
 8012e50:	e000ef34 	.word	0xe000ef34

08012e54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012e54:	b480      	push	{r7}
 8012e56:	b083      	sub	sp, #12
 8012e58:	af00      	add	r7, sp, #0
	__asm volatile
 8012e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e5e:	f383 8811 	msr	BASEPRI, r3
 8012e62:	f3bf 8f6f 	isb	sy
 8012e66:	f3bf 8f4f 	dsb	sy
 8012e6a:	607b      	str	r3, [r7, #4]
}
 8012e6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012e6e:	4b0f      	ldr	r3, [pc, #60]	; (8012eac <vPortEnterCritical+0x58>)
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	3301      	adds	r3, #1
 8012e74:	4a0d      	ldr	r2, [pc, #52]	; (8012eac <vPortEnterCritical+0x58>)
 8012e76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012e78:	4b0c      	ldr	r3, [pc, #48]	; (8012eac <vPortEnterCritical+0x58>)
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	2b01      	cmp	r3, #1
 8012e7e:	d10f      	bne.n	8012ea0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012e80:	4b0b      	ldr	r3, [pc, #44]	; (8012eb0 <vPortEnterCritical+0x5c>)
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	b2db      	uxtb	r3, r3
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d00a      	beq.n	8012ea0 <vPortEnterCritical+0x4c>
	__asm volatile
 8012e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e8e:	f383 8811 	msr	BASEPRI, r3
 8012e92:	f3bf 8f6f 	isb	sy
 8012e96:	f3bf 8f4f 	dsb	sy
 8012e9a:	603b      	str	r3, [r7, #0]
}
 8012e9c:	bf00      	nop
 8012e9e:	e7fe      	b.n	8012e9e <vPortEnterCritical+0x4a>
	}
}
 8012ea0:	bf00      	nop
 8012ea2:	370c      	adds	r7, #12
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eaa:	4770      	bx	lr
 8012eac:	200000cc 	.word	0x200000cc
 8012eb0:	e000ed04 	.word	0xe000ed04

08012eb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012eb4:	b480      	push	{r7}
 8012eb6:	b083      	sub	sp, #12
 8012eb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012eba:	4b12      	ldr	r3, [pc, #72]	; (8012f04 <vPortExitCritical+0x50>)
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d10a      	bne.n	8012ed8 <vPortExitCritical+0x24>
	__asm volatile
 8012ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ec6:	f383 8811 	msr	BASEPRI, r3
 8012eca:	f3bf 8f6f 	isb	sy
 8012ece:	f3bf 8f4f 	dsb	sy
 8012ed2:	607b      	str	r3, [r7, #4]
}
 8012ed4:	bf00      	nop
 8012ed6:	e7fe      	b.n	8012ed6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012ed8:	4b0a      	ldr	r3, [pc, #40]	; (8012f04 <vPortExitCritical+0x50>)
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	3b01      	subs	r3, #1
 8012ede:	4a09      	ldr	r2, [pc, #36]	; (8012f04 <vPortExitCritical+0x50>)
 8012ee0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012ee2:	4b08      	ldr	r3, [pc, #32]	; (8012f04 <vPortExitCritical+0x50>)
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d105      	bne.n	8012ef6 <vPortExitCritical+0x42>
 8012eea:	2300      	movs	r3, #0
 8012eec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012eee:	683b      	ldr	r3, [r7, #0]
 8012ef0:	f383 8811 	msr	BASEPRI, r3
}
 8012ef4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012ef6:	bf00      	nop
 8012ef8:	370c      	adds	r7, #12
 8012efa:	46bd      	mov	sp, r7
 8012efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f00:	4770      	bx	lr
 8012f02:	bf00      	nop
 8012f04:	200000cc 	.word	0x200000cc
	...

08012f10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012f10:	f3ef 8009 	mrs	r0, PSP
 8012f14:	f3bf 8f6f 	isb	sy
 8012f18:	4b15      	ldr	r3, [pc, #84]	; (8012f70 <pxCurrentTCBConst>)
 8012f1a:	681a      	ldr	r2, [r3, #0]
 8012f1c:	f01e 0f10 	tst.w	lr, #16
 8012f20:	bf08      	it	eq
 8012f22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012f26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f2a:	6010      	str	r0, [r2, #0]
 8012f2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012f30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012f34:	f380 8811 	msr	BASEPRI, r0
 8012f38:	f3bf 8f4f 	dsb	sy
 8012f3c:	f3bf 8f6f 	isb	sy
 8012f40:	f7fe ffa4 	bl	8011e8c <vTaskSwitchContext>
 8012f44:	f04f 0000 	mov.w	r0, #0
 8012f48:	f380 8811 	msr	BASEPRI, r0
 8012f4c:	bc09      	pop	{r0, r3}
 8012f4e:	6819      	ldr	r1, [r3, #0]
 8012f50:	6808      	ldr	r0, [r1, #0]
 8012f52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f56:	f01e 0f10 	tst.w	lr, #16
 8012f5a:	bf08      	it	eq
 8012f5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012f60:	f380 8809 	msr	PSP, r0
 8012f64:	f3bf 8f6f 	isb	sy
 8012f68:	4770      	bx	lr
 8012f6a:	bf00      	nop
 8012f6c:	f3af 8000 	nop.w

08012f70 <pxCurrentTCBConst>:
 8012f70:	20000e10 	.word	0x20000e10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012f74:	bf00      	nop
 8012f76:	bf00      	nop

08012f78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b082      	sub	sp, #8
 8012f7c:	af00      	add	r7, sp, #0
	__asm volatile
 8012f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f82:	f383 8811 	msr	BASEPRI, r3
 8012f86:	f3bf 8f6f 	isb	sy
 8012f8a:	f3bf 8f4f 	dsb	sy
 8012f8e:	607b      	str	r3, [r7, #4]
}
 8012f90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012f92:	f7fe fec1 	bl	8011d18 <xTaskIncrementTick>
 8012f96:	4603      	mov	r3, r0
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d003      	beq.n	8012fa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012f9c:	4b06      	ldr	r3, [pc, #24]	; (8012fb8 <xPortSysTickHandler+0x40>)
 8012f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012fa2:	601a      	str	r2, [r3, #0]
 8012fa4:	2300      	movs	r3, #0
 8012fa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012fa8:	683b      	ldr	r3, [r7, #0]
 8012faa:	f383 8811 	msr	BASEPRI, r3
}
 8012fae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012fb0:	bf00      	nop
 8012fb2:	3708      	adds	r7, #8
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	bd80      	pop	{r7, pc}
 8012fb8:	e000ed04 	.word	0xe000ed04

08012fbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012fbc:	b480      	push	{r7}
 8012fbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012fc0:	4b0b      	ldr	r3, [pc, #44]	; (8012ff0 <vPortSetupTimerInterrupt+0x34>)
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012fc6:	4b0b      	ldr	r3, [pc, #44]	; (8012ff4 <vPortSetupTimerInterrupt+0x38>)
 8012fc8:	2200      	movs	r2, #0
 8012fca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012fcc:	4b0a      	ldr	r3, [pc, #40]	; (8012ff8 <vPortSetupTimerInterrupt+0x3c>)
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	4a0a      	ldr	r2, [pc, #40]	; (8012ffc <vPortSetupTimerInterrupt+0x40>)
 8012fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8012fd6:	099b      	lsrs	r3, r3, #6
 8012fd8:	4a09      	ldr	r2, [pc, #36]	; (8013000 <vPortSetupTimerInterrupt+0x44>)
 8012fda:	3b01      	subs	r3, #1
 8012fdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012fde:	4b04      	ldr	r3, [pc, #16]	; (8012ff0 <vPortSetupTimerInterrupt+0x34>)
 8012fe0:	2207      	movs	r2, #7
 8012fe2:	601a      	str	r2, [r3, #0]
}
 8012fe4:	bf00      	nop
 8012fe6:	46bd      	mov	sp, r7
 8012fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fec:	4770      	bx	lr
 8012fee:	bf00      	nop
 8012ff0:	e000e010 	.word	0xe000e010
 8012ff4:	e000e018 	.word	0xe000e018
 8012ff8:	20000088 	.word	0x20000088
 8012ffc:	10624dd3 	.word	0x10624dd3
 8013000:	e000e014 	.word	0xe000e014

08013004 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013004:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013014 <vPortEnableVFP+0x10>
 8013008:	6801      	ldr	r1, [r0, #0]
 801300a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801300e:	6001      	str	r1, [r0, #0]
 8013010:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013012:	bf00      	nop
 8013014:	e000ed88 	.word	0xe000ed88

08013018 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013018:	b480      	push	{r7}
 801301a:	b085      	sub	sp, #20
 801301c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801301e:	f3ef 8305 	mrs	r3, IPSR
 8013022:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	2b0f      	cmp	r3, #15
 8013028:	d914      	bls.n	8013054 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801302a:	4a17      	ldr	r2, [pc, #92]	; (8013088 <vPortValidateInterruptPriority+0x70>)
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	4413      	add	r3, r2
 8013030:	781b      	ldrb	r3, [r3, #0]
 8013032:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013034:	4b15      	ldr	r3, [pc, #84]	; (801308c <vPortValidateInterruptPriority+0x74>)
 8013036:	781b      	ldrb	r3, [r3, #0]
 8013038:	7afa      	ldrb	r2, [r7, #11]
 801303a:	429a      	cmp	r2, r3
 801303c:	d20a      	bcs.n	8013054 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801303e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013042:	f383 8811 	msr	BASEPRI, r3
 8013046:	f3bf 8f6f 	isb	sy
 801304a:	f3bf 8f4f 	dsb	sy
 801304e:	607b      	str	r3, [r7, #4]
}
 8013050:	bf00      	nop
 8013052:	e7fe      	b.n	8013052 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013054:	4b0e      	ldr	r3, [pc, #56]	; (8013090 <vPortValidateInterruptPriority+0x78>)
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801305c:	4b0d      	ldr	r3, [pc, #52]	; (8013094 <vPortValidateInterruptPriority+0x7c>)
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	429a      	cmp	r2, r3
 8013062:	d90a      	bls.n	801307a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8013064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013068:	f383 8811 	msr	BASEPRI, r3
 801306c:	f3bf 8f6f 	isb	sy
 8013070:	f3bf 8f4f 	dsb	sy
 8013074:	603b      	str	r3, [r7, #0]
}
 8013076:	bf00      	nop
 8013078:	e7fe      	b.n	8013078 <vPortValidateInterruptPriority+0x60>
	}
 801307a:	bf00      	nop
 801307c:	3714      	adds	r7, #20
 801307e:	46bd      	mov	sp, r7
 8013080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013084:	4770      	bx	lr
 8013086:	bf00      	nop
 8013088:	e000e3f0 	.word	0xe000e3f0
 801308c:	2000143c 	.word	0x2000143c
 8013090:	e000ed0c 	.word	0xe000ed0c
 8013094:	20001440 	.word	0x20001440

08013098 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013098:	b580      	push	{r7, lr}
 801309a:	b08a      	sub	sp, #40	; 0x28
 801309c:	af00      	add	r7, sp, #0
 801309e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80130a0:	2300      	movs	r3, #0
 80130a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80130a4:	f7fe fd7c 	bl	8011ba0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80130a8:	4b5b      	ldr	r3, [pc, #364]	; (8013218 <pvPortMalloc+0x180>)
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d101      	bne.n	80130b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80130b0:	f000 f920 	bl	80132f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80130b4:	4b59      	ldr	r3, [pc, #356]	; (801321c <pvPortMalloc+0x184>)
 80130b6:	681a      	ldr	r2, [r3, #0]
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	4013      	ands	r3, r2
 80130bc:	2b00      	cmp	r3, #0
 80130be:	f040 8093 	bne.w	80131e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d01d      	beq.n	8013104 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80130c8:	2208      	movs	r2, #8
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	4413      	add	r3, r2
 80130ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	f003 0307 	and.w	r3, r3, #7
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d014      	beq.n	8013104 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	f023 0307 	bic.w	r3, r3, #7
 80130e0:	3308      	adds	r3, #8
 80130e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	f003 0307 	and.w	r3, r3, #7
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d00a      	beq.n	8013104 <pvPortMalloc+0x6c>
	__asm volatile
 80130ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130f2:	f383 8811 	msr	BASEPRI, r3
 80130f6:	f3bf 8f6f 	isb	sy
 80130fa:	f3bf 8f4f 	dsb	sy
 80130fe:	617b      	str	r3, [r7, #20]
}
 8013100:	bf00      	nop
 8013102:	e7fe      	b.n	8013102 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d06e      	beq.n	80131e8 <pvPortMalloc+0x150>
 801310a:	4b45      	ldr	r3, [pc, #276]	; (8013220 <pvPortMalloc+0x188>)
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	687a      	ldr	r2, [r7, #4]
 8013110:	429a      	cmp	r2, r3
 8013112:	d869      	bhi.n	80131e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013114:	4b43      	ldr	r3, [pc, #268]	; (8013224 <pvPortMalloc+0x18c>)
 8013116:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013118:	4b42      	ldr	r3, [pc, #264]	; (8013224 <pvPortMalloc+0x18c>)
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801311e:	e004      	b.n	801312a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8013120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013122:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801312c:	685b      	ldr	r3, [r3, #4]
 801312e:	687a      	ldr	r2, [r7, #4]
 8013130:	429a      	cmp	r2, r3
 8013132:	d903      	bls.n	801313c <pvPortMalloc+0xa4>
 8013134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d1f1      	bne.n	8013120 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801313c:	4b36      	ldr	r3, [pc, #216]	; (8013218 <pvPortMalloc+0x180>)
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013142:	429a      	cmp	r2, r3
 8013144:	d050      	beq.n	80131e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013146:	6a3b      	ldr	r3, [r7, #32]
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	2208      	movs	r2, #8
 801314c:	4413      	add	r3, r2
 801314e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013152:	681a      	ldr	r2, [r3, #0]
 8013154:	6a3b      	ldr	r3, [r7, #32]
 8013156:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801315a:	685a      	ldr	r2, [r3, #4]
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	1ad2      	subs	r2, r2, r3
 8013160:	2308      	movs	r3, #8
 8013162:	005b      	lsls	r3, r3, #1
 8013164:	429a      	cmp	r2, r3
 8013166:	d91f      	bls.n	80131a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	4413      	add	r3, r2
 801316e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013170:	69bb      	ldr	r3, [r7, #24]
 8013172:	f003 0307 	and.w	r3, r3, #7
 8013176:	2b00      	cmp	r3, #0
 8013178:	d00a      	beq.n	8013190 <pvPortMalloc+0xf8>
	__asm volatile
 801317a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801317e:	f383 8811 	msr	BASEPRI, r3
 8013182:	f3bf 8f6f 	isb	sy
 8013186:	f3bf 8f4f 	dsb	sy
 801318a:	613b      	str	r3, [r7, #16]
}
 801318c:	bf00      	nop
 801318e:	e7fe      	b.n	801318e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013192:	685a      	ldr	r2, [r3, #4]
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	1ad2      	subs	r2, r2, r3
 8013198:	69bb      	ldr	r3, [r7, #24]
 801319a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801319e:	687a      	ldr	r2, [r7, #4]
 80131a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80131a2:	69b8      	ldr	r0, [r7, #24]
 80131a4:	f000 f908 	bl	80133b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80131a8:	4b1d      	ldr	r3, [pc, #116]	; (8013220 <pvPortMalloc+0x188>)
 80131aa:	681a      	ldr	r2, [r3, #0]
 80131ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ae:	685b      	ldr	r3, [r3, #4]
 80131b0:	1ad3      	subs	r3, r2, r3
 80131b2:	4a1b      	ldr	r2, [pc, #108]	; (8013220 <pvPortMalloc+0x188>)
 80131b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80131b6:	4b1a      	ldr	r3, [pc, #104]	; (8013220 <pvPortMalloc+0x188>)
 80131b8:	681a      	ldr	r2, [r3, #0]
 80131ba:	4b1b      	ldr	r3, [pc, #108]	; (8013228 <pvPortMalloc+0x190>)
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	429a      	cmp	r2, r3
 80131c0:	d203      	bcs.n	80131ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80131c2:	4b17      	ldr	r3, [pc, #92]	; (8013220 <pvPortMalloc+0x188>)
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	4a18      	ldr	r2, [pc, #96]	; (8013228 <pvPortMalloc+0x190>)
 80131c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80131ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131cc:	685a      	ldr	r2, [r3, #4]
 80131ce:	4b13      	ldr	r3, [pc, #76]	; (801321c <pvPortMalloc+0x184>)
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	431a      	orrs	r2, r3
 80131d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80131d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131da:	2200      	movs	r2, #0
 80131dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80131de:	4b13      	ldr	r3, [pc, #76]	; (801322c <pvPortMalloc+0x194>)
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	3301      	adds	r3, #1
 80131e4:	4a11      	ldr	r2, [pc, #68]	; (801322c <pvPortMalloc+0x194>)
 80131e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80131e8:	f7fe fce8 	bl	8011bbc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80131ec:	69fb      	ldr	r3, [r7, #28]
 80131ee:	f003 0307 	and.w	r3, r3, #7
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d00a      	beq.n	801320c <pvPortMalloc+0x174>
	__asm volatile
 80131f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131fa:	f383 8811 	msr	BASEPRI, r3
 80131fe:	f3bf 8f6f 	isb	sy
 8013202:	f3bf 8f4f 	dsb	sy
 8013206:	60fb      	str	r3, [r7, #12]
}
 8013208:	bf00      	nop
 801320a:	e7fe      	b.n	801320a <pvPortMalloc+0x172>
	return pvReturn;
 801320c:	69fb      	ldr	r3, [r7, #28]
}
 801320e:	4618      	mov	r0, r3
 8013210:	3728      	adds	r7, #40	; 0x28
 8013212:	46bd      	mov	sp, r7
 8013214:	bd80      	pop	{r7, pc}
 8013216:	bf00      	nop
 8013218:	20005a9c 	.word	0x20005a9c
 801321c:	20005ab0 	.word	0x20005ab0
 8013220:	20005aa0 	.word	0x20005aa0
 8013224:	20005a94 	.word	0x20005a94
 8013228:	20005aa4 	.word	0x20005aa4
 801322c:	20005aa8 	.word	0x20005aa8

08013230 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b086      	sub	sp, #24
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d04d      	beq.n	80132de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013242:	2308      	movs	r3, #8
 8013244:	425b      	negs	r3, r3
 8013246:	697a      	ldr	r2, [r7, #20]
 8013248:	4413      	add	r3, r2
 801324a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801324c:	697b      	ldr	r3, [r7, #20]
 801324e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013250:	693b      	ldr	r3, [r7, #16]
 8013252:	685a      	ldr	r2, [r3, #4]
 8013254:	4b24      	ldr	r3, [pc, #144]	; (80132e8 <vPortFree+0xb8>)
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	4013      	ands	r3, r2
 801325a:	2b00      	cmp	r3, #0
 801325c:	d10a      	bne.n	8013274 <vPortFree+0x44>
	__asm volatile
 801325e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013262:	f383 8811 	msr	BASEPRI, r3
 8013266:	f3bf 8f6f 	isb	sy
 801326a:	f3bf 8f4f 	dsb	sy
 801326e:	60fb      	str	r3, [r7, #12]
}
 8013270:	bf00      	nop
 8013272:	e7fe      	b.n	8013272 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013274:	693b      	ldr	r3, [r7, #16]
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d00a      	beq.n	8013292 <vPortFree+0x62>
	__asm volatile
 801327c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013280:	f383 8811 	msr	BASEPRI, r3
 8013284:	f3bf 8f6f 	isb	sy
 8013288:	f3bf 8f4f 	dsb	sy
 801328c:	60bb      	str	r3, [r7, #8]
}
 801328e:	bf00      	nop
 8013290:	e7fe      	b.n	8013290 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013292:	693b      	ldr	r3, [r7, #16]
 8013294:	685a      	ldr	r2, [r3, #4]
 8013296:	4b14      	ldr	r3, [pc, #80]	; (80132e8 <vPortFree+0xb8>)
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	4013      	ands	r3, r2
 801329c:	2b00      	cmp	r3, #0
 801329e:	d01e      	beq.n	80132de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80132a0:	693b      	ldr	r3, [r7, #16]
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d11a      	bne.n	80132de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80132a8:	693b      	ldr	r3, [r7, #16]
 80132aa:	685a      	ldr	r2, [r3, #4]
 80132ac:	4b0e      	ldr	r3, [pc, #56]	; (80132e8 <vPortFree+0xb8>)
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	43db      	mvns	r3, r3
 80132b2:	401a      	ands	r2, r3
 80132b4:	693b      	ldr	r3, [r7, #16]
 80132b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80132b8:	f7fe fc72 	bl	8011ba0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80132bc:	693b      	ldr	r3, [r7, #16]
 80132be:	685a      	ldr	r2, [r3, #4]
 80132c0:	4b0a      	ldr	r3, [pc, #40]	; (80132ec <vPortFree+0xbc>)
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	4413      	add	r3, r2
 80132c6:	4a09      	ldr	r2, [pc, #36]	; (80132ec <vPortFree+0xbc>)
 80132c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80132ca:	6938      	ldr	r0, [r7, #16]
 80132cc:	f000 f874 	bl	80133b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80132d0:	4b07      	ldr	r3, [pc, #28]	; (80132f0 <vPortFree+0xc0>)
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	3301      	adds	r3, #1
 80132d6:	4a06      	ldr	r2, [pc, #24]	; (80132f0 <vPortFree+0xc0>)
 80132d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80132da:	f7fe fc6f 	bl	8011bbc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80132de:	bf00      	nop
 80132e0:	3718      	adds	r7, #24
 80132e2:	46bd      	mov	sp, r7
 80132e4:	bd80      	pop	{r7, pc}
 80132e6:	bf00      	nop
 80132e8:	20005ab0 	.word	0x20005ab0
 80132ec:	20005aa0 	.word	0x20005aa0
 80132f0:	20005aac 	.word	0x20005aac

080132f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80132f4:	b480      	push	{r7}
 80132f6:	b085      	sub	sp, #20
 80132f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80132fa:	f244 6350 	movw	r3, #18000	; 0x4650
 80132fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013300:	4b27      	ldr	r3, [pc, #156]	; (80133a0 <prvHeapInit+0xac>)
 8013302:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	f003 0307 	and.w	r3, r3, #7
 801330a:	2b00      	cmp	r3, #0
 801330c:	d00c      	beq.n	8013328 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	3307      	adds	r3, #7
 8013312:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	f023 0307 	bic.w	r3, r3, #7
 801331a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801331c:	68ba      	ldr	r2, [r7, #8]
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	1ad3      	subs	r3, r2, r3
 8013322:	4a1f      	ldr	r2, [pc, #124]	; (80133a0 <prvHeapInit+0xac>)
 8013324:	4413      	add	r3, r2
 8013326:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801332c:	4a1d      	ldr	r2, [pc, #116]	; (80133a4 <prvHeapInit+0xb0>)
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013332:	4b1c      	ldr	r3, [pc, #112]	; (80133a4 <prvHeapInit+0xb0>)
 8013334:	2200      	movs	r2, #0
 8013336:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	68ba      	ldr	r2, [r7, #8]
 801333c:	4413      	add	r3, r2
 801333e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013340:	2208      	movs	r2, #8
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	1a9b      	subs	r3, r3, r2
 8013346:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	f023 0307 	bic.w	r3, r3, #7
 801334e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	4a15      	ldr	r2, [pc, #84]	; (80133a8 <prvHeapInit+0xb4>)
 8013354:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013356:	4b14      	ldr	r3, [pc, #80]	; (80133a8 <prvHeapInit+0xb4>)
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	2200      	movs	r2, #0
 801335c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801335e:	4b12      	ldr	r3, [pc, #72]	; (80133a8 <prvHeapInit+0xb4>)
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	2200      	movs	r2, #0
 8013364:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801336a:	683b      	ldr	r3, [r7, #0]
 801336c:	68fa      	ldr	r2, [r7, #12]
 801336e:	1ad2      	subs	r2, r2, r3
 8013370:	683b      	ldr	r3, [r7, #0]
 8013372:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013374:	4b0c      	ldr	r3, [pc, #48]	; (80133a8 <prvHeapInit+0xb4>)
 8013376:	681a      	ldr	r2, [r3, #0]
 8013378:	683b      	ldr	r3, [r7, #0]
 801337a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801337c:	683b      	ldr	r3, [r7, #0]
 801337e:	685b      	ldr	r3, [r3, #4]
 8013380:	4a0a      	ldr	r2, [pc, #40]	; (80133ac <prvHeapInit+0xb8>)
 8013382:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013384:	683b      	ldr	r3, [r7, #0]
 8013386:	685b      	ldr	r3, [r3, #4]
 8013388:	4a09      	ldr	r2, [pc, #36]	; (80133b0 <prvHeapInit+0xbc>)
 801338a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801338c:	4b09      	ldr	r3, [pc, #36]	; (80133b4 <prvHeapInit+0xc0>)
 801338e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013392:	601a      	str	r2, [r3, #0]
}
 8013394:	bf00      	nop
 8013396:	3714      	adds	r7, #20
 8013398:	46bd      	mov	sp, r7
 801339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339e:	4770      	bx	lr
 80133a0:	20001444 	.word	0x20001444
 80133a4:	20005a94 	.word	0x20005a94
 80133a8:	20005a9c 	.word	0x20005a9c
 80133ac:	20005aa4 	.word	0x20005aa4
 80133b0:	20005aa0 	.word	0x20005aa0
 80133b4:	20005ab0 	.word	0x20005ab0

080133b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80133b8:	b480      	push	{r7}
 80133ba:	b085      	sub	sp, #20
 80133bc:	af00      	add	r7, sp, #0
 80133be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80133c0:	4b28      	ldr	r3, [pc, #160]	; (8013464 <prvInsertBlockIntoFreeList+0xac>)
 80133c2:	60fb      	str	r3, [r7, #12]
 80133c4:	e002      	b.n	80133cc <prvInsertBlockIntoFreeList+0x14>
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	60fb      	str	r3, [r7, #12]
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	687a      	ldr	r2, [r7, #4]
 80133d2:	429a      	cmp	r2, r3
 80133d4:	d8f7      	bhi.n	80133c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	685b      	ldr	r3, [r3, #4]
 80133de:	68ba      	ldr	r2, [r7, #8]
 80133e0:	4413      	add	r3, r2
 80133e2:	687a      	ldr	r2, [r7, #4]
 80133e4:	429a      	cmp	r2, r3
 80133e6:	d108      	bne.n	80133fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	685a      	ldr	r2, [r3, #4]
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	685b      	ldr	r3, [r3, #4]
 80133f0:	441a      	add	r2, r3
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	685b      	ldr	r3, [r3, #4]
 8013402:	68ba      	ldr	r2, [r7, #8]
 8013404:	441a      	add	r2, r3
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	429a      	cmp	r2, r3
 801340c:	d118      	bne.n	8013440 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	681a      	ldr	r2, [r3, #0]
 8013412:	4b15      	ldr	r3, [pc, #84]	; (8013468 <prvInsertBlockIntoFreeList+0xb0>)
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	429a      	cmp	r2, r3
 8013418:	d00d      	beq.n	8013436 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	685a      	ldr	r2, [r3, #4]
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	685b      	ldr	r3, [r3, #4]
 8013424:	441a      	add	r2, r3
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	681a      	ldr	r2, [r3, #0]
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	601a      	str	r2, [r3, #0]
 8013434:	e008      	b.n	8013448 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013436:	4b0c      	ldr	r3, [pc, #48]	; (8013468 <prvInsertBlockIntoFreeList+0xb0>)
 8013438:	681a      	ldr	r2, [r3, #0]
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	601a      	str	r2, [r3, #0]
 801343e:	e003      	b.n	8013448 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	681a      	ldr	r2, [r3, #0]
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013448:	68fa      	ldr	r2, [r7, #12]
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	429a      	cmp	r2, r3
 801344e:	d002      	beq.n	8013456 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	687a      	ldr	r2, [r7, #4]
 8013454:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013456:	bf00      	nop
 8013458:	3714      	adds	r7, #20
 801345a:	46bd      	mov	sp, r7
 801345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013460:	4770      	bx	lr
 8013462:	bf00      	nop
 8013464:	20005a94 	.word	0x20005a94
 8013468:	20005a9c 	.word	0x20005a9c

0801346c <_Znwj>:
 801346c:	2801      	cmp	r0, #1
 801346e:	bf38      	it	cc
 8013470:	2001      	movcc	r0, #1
 8013472:	b510      	push	{r4, lr}
 8013474:	4604      	mov	r4, r0
 8013476:	4620      	mov	r0, r4
 8013478:	f001 fa2e 	bl	80148d8 <malloc>
 801347c:	b930      	cbnz	r0, 801348c <_Znwj+0x20>
 801347e:	f000 f81d 	bl	80134bc <_ZSt15get_new_handlerv>
 8013482:	b908      	cbnz	r0, 8013488 <_Znwj+0x1c>
 8013484:	f000 ffd6 	bl	8014434 <abort>
 8013488:	4780      	blx	r0
 801348a:	e7f4      	b.n	8013476 <_Znwj+0xa>
 801348c:	bd10      	pop	{r4, pc}

0801348e <_Znaj>:
 801348e:	f7ff bfed 	b.w	801346c <_Znwj>

08013492 <__cxa_pure_virtual>:
 8013492:	b508      	push	{r3, lr}
 8013494:	f000 f80c 	bl	80134b0 <_ZSt9terminatev>

08013498 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8013498:	b508      	push	{r3, lr}
 801349a:	4780      	blx	r0
 801349c:	f000 ffca 	bl	8014434 <abort>

080134a0 <_ZSt13get_terminatev>:
 80134a0:	4b02      	ldr	r3, [pc, #8]	; (80134ac <_ZSt13get_terminatev+0xc>)
 80134a2:	6818      	ldr	r0, [r3, #0]
 80134a4:	f3bf 8f5b 	dmb	ish
 80134a8:	4770      	bx	lr
 80134aa:	bf00      	nop
 80134ac:	200000d0 	.word	0x200000d0

080134b0 <_ZSt9terminatev>:
 80134b0:	b508      	push	{r3, lr}
 80134b2:	f7ff fff5 	bl	80134a0 <_ZSt13get_terminatev>
 80134b6:	f7ff ffef 	bl	8013498 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080134bc <_ZSt15get_new_handlerv>:
 80134bc:	4b02      	ldr	r3, [pc, #8]	; (80134c8 <_ZSt15get_new_handlerv+0xc>)
 80134be:	6818      	ldr	r0, [r3, #0]
 80134c0:	f3bf 8f5b 	dmb	ish
 80134c4:	4770      	bx	lr
 80134c6:	bf00      	nop
 80134c8:	20005ab4 	.word	0x20005ab4

080134cc <pow>:
 80134cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134d0:	ec59 8b10 	vmov	r8, r9, d0
 80134d4:	ec57 6b11 	vmov	r6, r7, d1
 80134d8:	f000 f8a6 	bl	8013628 <__ieee754_pow>
 80134dc:	4b4e      	ldr	r3, [pc, #312]	; (8013618 <pow+0x14c>)
 80134de:	f993 3000 	ldrsb.w	r3, [r3]
 80134e2:	3301      	adds	r3, #1
 80134e4:	ec55 4b10 	vmov	r4, r5, d0
 80134e8:	d015      	beq.n	8013516 <pow+0x4a>
 80134ea:	4632      	mov	r2, r6
 80134ec:	463b      	mov	r3, r7
 80134ee:	4630      	mov	r0, r6
 80134f0:	4639      	mov	r1, r7
 80134f2:	f7ed fb3b 	bl	8000b6c <__aeabi_dcmpun>
 80134f6:	b970      	cbnz	r0, 8013516 <pow+0x4a>
 80134f8:	4642      	mov	r2, r8
 80134fa:	464b      	mov	r3, r9
 80134fc:	4640      	mov	r0, r8
 80134fe:	4649      	mov	r1, r9
 8013500:	f7ed fb34 	bl	8000b6c <__aeabi_dcmpun>
 8013504:	2200      	movs	r2, #0
 8013506:	2300      	movs	r3, #0
 8013508:	b148      	cbz	r0, 801351e <pow+0x52>
 801350a:	4630      	mov	r0, r6
 801350c:	4639      	mov	r1, r7
 801350e:	f7ed fafb 	bl	8000b08 <__aeabi_dcmpeq>
 8013512:	2800      	cmp	r0, #0
 8013514:	d17d      	bne.n	8013612 <pow+0x146>
 8013516:	ec45 4b10 	vmov	d0, r4, r5
 801351a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801351e:	4640      	mov	r0, r8
 8013520:	4649      	mov	r1, r9
 8013522:	f7ed faf1 	bl	8000b08 <__aeabi_dcmpeq>
 8013526:	b1e0      	cbz	r0, 8013562 <pow+0x96>
 8013528:	2200      	movs	r2, #0
 801352a:	2300      	movs	r3, #0
 801352c:	4630      	mov	r0, r6
 801352e:	4639      	mov	r1, r7
 8013530:	f7ed faea 	bl	8000b08 <__aeabi_dcmpeq>
 8013534:	2800      	cmp	r0, #0
 8013536:	d16c      	bne.n	8013612 <pow+0x146>
 8013538:	ec47 6b10 	vmov	d0, r6, r7
 801353c:	f000 fe53 	bl	80141e6 <finite>
 8013540:	2800      	cmp	r0, #0
 8013542:	d0e8      	beq.n	8013516 <pow+0x4a>
 8013544:	2200      	movs	r2, #0
 8013546:	2300      	movs	r3, #0
 8013548:	4630      	mov	r0, r6
 801354a:	4639      	mov	r1, r7
 801354c:	f7ed fae6 	bl	8000b1c <__aeabi_dcmplt>
 8013550:	2800      	cmp	r0, #0
 8013552:	d0e0      	beq.n	8013516 <pow+0x4a>
 8013554:	f000 ff7e 	bl	8014454 <__errno>
 8013558:	2321      	movs	r3, #33	; 0x21
 801355a:	6003      	str	r3, [r0, #0]
 801355c:	2400      	movs	r4, #0
 801355e:	4d2f      	ldr	r5, [pc, #188]	; (801361c <pow+0x150>)
 8013560:	e7d9      	b.n	8013516 <pow+0x4a>
 8013562:	ec45 4b10 	vmov	d0, r4, r5
 8013566:	f000 fe3e 	bl	80141e6 <finite>
 801356a:	bbb8      	cbnz	r0, 80135dc <pow+0x110>
 801356c:	ec49 8b10 	vmov	d0, r8, r9
 8013570:	f000 fe39 	bl	80141e6 <finite>
 8013574:	b390      	cbz	r0, 80135dc <pow+0x110>
 8013576:	ec47 6b10 	vmov	d0, r6, r7
 801357a:	f000 fe34 	bl	80141e6 <finite>
 801357e:	b368      	cbz	r0, 80135dc <pow+0x110>
 8013580:	4622      	mov	r2, r4
 8013582:	462b      	mov	r3, r5
 8013584:	4620      	mov	r0, r4
 8013586:	4629      	mov	r1, r5
 8013588:	f7ed faf0 	bl	8000b6c <__aeabi_dcmpun>
 801358c:	b160      	cbz	r0, 80135a8 <pow+0xdc>
 801358e:	f000 ff61 	bl	8014454 <__errno>
 8013592:	2321      	movs	r3, #33	; 0x21
 8013594:	6003      	str	r3, [r0, #0]
 8013596:	2200      	movs	r2, #0
 8013598:	2300      	movs	r3, #0
 801359a:	4610      	mov	r0, r2
 801359c:	4619      	mov	r1, r3
 801359e:	f7ed f975 	bl	800088c <__aeabi_ddiv>
 80135a2:	4604      	mov	r4, r0
 80135a4:	460d      	mov	r5, r1
 80135a6:	e7b6      	b.n	8013516 <pow+0x4a>
 80135a8:	f000 ff54 	bl	8014454 <__errno>
 80135ac:	2322      	movs	r3, #34	; 0x22
 80135ae:	6003      	str	r3, [r0, #0]
 80135b0:	2200      	movs	r2, #0
 80135b2:	2300      	movs	r3, #0
 80135b4:	4640      	mov	r0, r8
 80135b6:	4649      	mov	r1, r9
 80135b8:	f7ed fab0 	bl	8000b1c <__aeabi_dcmplt>
 80135bc:	2400      	movs	r4, #0
 80135be:	b158      	cbz	r0, 80135d8 <pow+0x10c>
 80135c0:	ec47 6b10 	vmov	d0, r6, r7
 80135c4:	f000 fe24 	bl	8014210 <rint>
 80135c8:	4632      	mov	r2, r6
 80135ca:	ec51 0b10 	vmov	r0, r1, d0
 80135ce:	463b      	mov	r3, r7
 80135d0:	f7ed fa9a 	bl	8000b08 <__aeabi_dcmpeq>
 80135d4:	2800      	cmp	r0, #0
 80135d6:	d0c2      	beq.n	801355e <pow+0x92>
 80135d8:	4d11      	ldr	r5, [pc, #68]	; (8013620 <pow+0x154>)
 80135da:	e79c      	b.n	8013516 <pow+0x4a>
 80135dc:	2200      	movs	r2, #0
 80135de:	2300      	movs	r3, #0
 80135e0:	4620      	mov	r0, r4
 80135e2:	4629      	mov	r1, r5
 80135e4:	f7ed fa90 	bl	8000b08 <__aeabi_dcmpeq>
 80135e8:	2800      	cmp	r0, #0
 80135ea:	d094      	beq.n	8013516 <pow+0x4a>
 80135ec:	ec49 8b10 	vmov	d0, r8, r9
 80135f0:	f000 fdf9 	bl	80141e6 <finite>
 80135f4:	2800      	cmp	r0, #0
 80135f6:	d08e      	beq.n	8013516 <pow+0x4a>
 80135f8:	ec47 6b10 	vmov	d0, r6, r7
 80135fc:	f000 fdf3 	bl	80141e6 <finite>
 8013600:	2800      	cmp	r0, #0
 8013602:	d088      	beq.n	8013516 <pow+0x4a>
 8013604:	f000 ff26 	bl	8014454 <__errno>
 8013608:	2322      	movs	r3, #34	; 0x22
 801360a:	6003      	str	r3, [r0, #0]
 801360c:	2400      	movs	r4, #0
 801360e:	2500      	movs	r5, #0
 8013610:	e781      	b.n	8013516 <pow+0x4a>
 8013612:	4d04      	ldr	r5, [pc, #16]	; (8013624 <pow+0x158>)
 8013614:	2400      	movs	r4, #0
 8013616:	e77e      	b.n	8013516 <pow+0x4a>
 8013618:	200000d4 	.word	0x200000d4
 801361c:	fff00000 	.word	0xfff00000
 8013620:	7ff00000 	.word	0x7ff00000
 8013624:	3ff00000 	.word	0x3ff00000

08013628 <__ieee754_pow>:
 8013628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801362c:	ed2d 8b06 	vpush	{d8-d10}
 8013630:	b08d      	sub	sp, #52	; 0x34
 8013632:	ed8d 1b02 	vstr	d1, [sp, #8]
 8013636:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 801363a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801363e:	ea56 0100 	orrs.w	r1, r6, r0
 8013642:	ec53 2b10 	vmov	r2, r3, d0
 8013646:	f000 84d1 	beq.w	8013fec <__ieee754_pow+0x9c4>
 801364a:	497f      	ldr	r1, [pc, #508]	; (8013848 <__ieee754_pow+0x220>)
 801364c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8013650:	428c      	cmp	r4, r1
 8013652:	ee10 8a10 	vmov	r8, s0
 8013656:	4699      	mov	r9, r3
 8013658:	dc09      	bgt.n	801366e <__ieee754_pow+0x46>
 801365a:	d103      	bne.n	8013664 <__ieee754_pow+0x3c>
 801365c:	b97a      	cbnz	r2, 801367e <__ieee754_pow+0x56>
 801365e:	42a6      	cmp	r6, r4
 8013660:	dd02      	ble.n	8013668 <__ieee754_pow+0x40>
 8013662:	e00c      	b.n	801367e <__ieee754_pow+0x56>
 8013664:	428e      	cmp	r6, r1
 8013666:	dc02      	bgt.n	801366e <__ieee754_pow+0x46>
 8013668:	428e      	cmp	r6, r1
 801366a:	d110      	bne.n	801368e <__ieee754_pow+0x66>
 801366c:	b178      	cbz	r0, 801368e <__ieee754_pow+0x66>
 801366e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013672:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013676:	ea54 0308 	orrs.w	r3, r4, r8
 801367a:	f000 84b7 	beq.w	8013fec <__ieee754_pow+0x9c4>
 801367e:	4873      	ldr	r0, [pc, #460]	; (801384c <__ieee754_pow+0x224>)
 8013680:	b00d      	add	sp, #52	; 0x34
 8013682:	ecbd 8b06 	vpop	{d8-d10}
 8013686:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801368a:	f000 bdb9 	b.w	8014200 <nan>
 801368e:	f1b9 0f00 	cmp.w	r9, #0
 8013692:	da36      	bge.n	8013702 <__ieee754_pow+0xda>
 8013694:	496e      	ldr	r1, [pc, #440]	; (8013850 <__ieee754_pow+0x228>)
 8013696:	428e      	cmp	r6, r1
 8013698:	dc51      	bgt.n	801373e <__ieee754_pow+0x116>
 801369a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 801369e:	428e      	cmp	r6, r1
 80136a0:	f340 84af 	ble.w	8014002 <__ieee754_pow+0x9da>
 80136a4:	1531      	asrs	r1, r6, #20
 80136a6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80136aa:	2914      	cmp	r1, #20
 80136ac:	dd0f      	ble.n	80136ce <__ieee754_pow+0xa6>
 80136ae:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80136b2:	fa20 fc01 	lsr.w	ip, r0, r1
 80136b6:	fa0c f101 	lsl.w	r1, ip, r1
 80136ba:	4281      	cmp	r1, r0
 80136bc:	f040 84a1 	bne.w	8014002 <__ieee754_pow+0x9da>
 80136c0:	f00c 0c01 	and.w	ip, ip, #1
 80136c4:	f1cc 0102 	rsb	r1, ip, #2
 80136c8:	9100      	str	r1, [sp, #0]
 80136ca:	b180      	cbz	r0, 80136ee <__ieee754_pow+0xc6>
 80136cc:	e059      	b.n	8013782 <__ieee754_pow+0x15a>
 80136ce:	2800      	cmp	r0, #0
 80136d0:	d155      	bne.n	801377e <__ieee754_pow+0x156>
 80136d2:	f1c1 0114 	rsb	r1, r1, #20
 80136d6:	fa46 fc01 	asr.w	ip, r6, r1
 80136da:	fa0c f101 	lsl.w	r1, ip, r1
 80136de:	42b1      	cmp	r1, r6
 80136e0:	f040 848c 	bne.w	8013ffc <__ieee754_pow+0x9d4>
 80136e4:	f00c 0c01 	and.w	ip, ip, #1
 80136e8:	f1cc 0102 	rsb	r1, ip, #2
 80136ec:	9100      	str	r1, [sp, #0]
 80136ee:	4959      	ldr	r1, [pc, #356]	; (8013854 <__ieee754_pow+0x22c>)
 80136f0:	428e      	cmp	r6, r1
 80136f2:	d12d      	bne.n	8013750 <__ieee754_pow+0x128>
 80136f4:	2f00      	cmp	r7, #0
 80136f6:	da79      	bge.n	80137ec <__ieee754_pow+0x1c4>
 80136f8:	4956      	ldr	r1, [pc, #344]	; (8013854 <__ieee754_pow+0x22c>)
 80136fa:	2000      	movs	r0, #0
 80136fc:	f7ed f8c6 	bl	800088c <__aeabi_ddiv>
 8013700:	e016      	b.n	8013730 <__ieee754_pow+0x108>
 8013702:	2100      	movs	r1, #0
 8013704:	9100      	str	r1, [sp, #0]
 8013706:	2800      	cmp	r0, #0
 8013708:	d13b      	bne.n	8013782 <__ieee754_pow+0x15a>
 801370a:	494f      	ldr	r1, [pc, #316]	; (8013848 <__ieee754_pow+0x220>)
 801370c:	428e      	cmp	r6, r1
 801370e:	d1ee      	bne.n	80136ee <__ieee754_pow+0xc6>
 8013710:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8013714:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8013718:	ea53 0308 	orrs.w	r3, r3, r8
 801371c:	f000 8466 	beq.w	8013fec <__ieee754_pow+0x9c4>
 8013720:	4b4d      	ldr	r3, [pc, #308]	; (8013858 <__ieee754_pow+0x230>)
 8013722:	429c      	cmp	r4, r3
 8013724:	dd0d      	ble.n	8013742 <__ieee754_pow+0x11a>
 8013726:	2f00      	cmp	r7, #0
 8013728:	f280 8464 	bge.w	8013ff4 <__ieee754_pow+0x9cc>
 801372c:	2000      	movs	r0, #0
 801372e:	2100      	movs	r1, #0
 8013730:	ec41 0b10 	vmov	d0, r0, r1
 8013734:	b00d      	add	sp, #52	; 0x34
 8013736:	ecbd 8b06 	vpop	{d8-d10}
 801373a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801373e:	2102      	movs	r1, #2
 8013740:	e7e0      	b.n	8013704 <__ieee754_pow+0xdc>
 8013742:	2f00      	cmp	r7, #0
 8013744:	daf2      	bge.n	801372c <__ieee754_pow+0x104>
 8013746:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 801374a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801374e:	e7ef      	b.n	8013730 <__ieee754_pow+0x108>
 8013750:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8013754:	d104      	bne.n	8013760 <__ieee754_pow+0x138>
 8013756:	4610      	mov	r0, r2
 8013758:	4619      	mov	r1, r3
 801375a:	f7ec ff6d 	bl	8000638 <__aeabi_dmul>
 801375e:	e7e7      	b.n	8013730 <__ieee754_pow+0x108>
 8013760:	493e      	ldr	r1, [pc, #248]	; (801385c <__ieee754_pow+0x234>)
 8013762:	428f      	cmp	r7, r1
 8013764:	d10d      	bne.n	8013782 <__ieee754_pow+0x15a>
 8013766:	f1b9 0f00 	cmp.w	r9, #0
 801376a:	db0a      	blt.n	8013782 <__ieee754_pow+0x15a>
 801376c:	ec43 2b10 	vmov	d0, r2, r3
 8013770:	b00d      	add	sp, #52	; 0x34
 8013772:	ecbd 8b06 	vpop	{d8-d10}
 8013776:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801377a:	f000 bc77 	b.w	801406c <__ieee754_sqrt>
 801377e:	2100      	movs	r1, #0
 8013780:	9100      	str	r1, [sp, #0]
 8013782:	ec43 2b10 	vmov	d0, r2, r3
 8013786:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801378a:	f000 fd23 	bl	80141d4 <fabs>
 801378e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013792:	ec51 0b10 	vmov	r0, r1, d0
 8013796:	f1b8 0f00 	cmp.w	r8, #0
 801379a:	d12a      	bne.n	80137f2 <__ieee754_pow+0x1ca>
 801379c:	b12c      	cbz	r4, 80137aa <__ieee754_pow+0x182>
 801379e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8013854 <__ieee754_pow+0x22c>
 80137a2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80137a6:	45e6      	cmp	lr, ip
 80137a8:	d123      	bne.n	80137f2 <__ieee754_pow+0x1ca>
 80137aa:	2f00      	cmp	r7, #0
 80137ac:	da05      	bge.n	80137ba <__ieee754_pow+0x192>
 80137ae:	4602      	mov	r2, r0
 80137b0:	460b      	mov	r3, r1
 80137b2:	2000      	movs	r0, #0
 80137b4:	4927      	ldr	r1, [pc, #156]	; (8013854 <__ieee754_pow+0x22c>)
 80137b6:	f7ed f869 	bl	800088c <__aeabi_ddiv>
 80137ba:	f1b9 0f00 	cmp.w	r9, #0
 80137be:	dab7      	bge.n	8013730 <__ieee754_pow+0x108>
 80137c0:	9b00      	ldr	r3, [sp, #0]
 80137c2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80137c6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80137ca:	4323      	orrs	r3, r4
 80137cc:	d108      	bne.n	80137e0 <__ieee754_pow+0x1b8>
 80137ce:	4602      	mov	r2, r0
 80137d0:	460b      	mov	r3, r1
 80137d2:	4610      	mov	r0, r2
 80137d4:	4619      	mov	r1, r3
 80137d6:	f7ec fd77 	bl	80002c8 <__aeabi_dsub>
 80137da:	4602      	mov	r2, r0
 80137dc:	460b      	mov	r3, r1
 80137de:	e78d      	b.n	80136fc <__ieee754_pow+0xd4>
 80137e0:	9b00      	ldr	r3, [sp, #0]
 80137e2:	2b01      	cmp	r3, #1
 80137e4:	d1a4      	bne.n	8013730 <__ieee754_pow+0x108>
 80137e6:	4602      	mov	r2, r0
 80137e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80137ec:	4610      	mov	r0, r2
 80137ee:	4619      	mov	r1, r3
 80137f0:	e79e      	b.n	8013730 <__ieee754_pow+0x108>
 80137f2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80137f6:	f10c 35ff 	add.w	r5, ip, #4294967295
 80137fa:	950a      	str	r5, [sp, #40]	; 0x28
 80137fc:	9d00      	ldr	r5, [sp, #0]
 80137fe:	46ac      	mov	ip, r5
 8013800:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8013802:	ea5c 0505 	orrs.w	r5, ip, r5
 8013806:	d0e4      	beq.n	80137d2 <__ieee754_pow+0x1aa>
 8013808:	4b15      	ldr	r3, [pc, #84]	; (8013860 <__ieee754_pow+0x238>)
 801380a:	429e      	cmp	r6, r3
 801380c:	f340 80fc 	ble.w	8013a08 <__ieee754_pow+0x3e0>
 8013810:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8013814:	429e      	cmp	r6, r3
 8013816:	4b10      	ldr	r3, [pc, #64]	; (8013858 <__ieee754_pow+0x230>)
 8013818:	dd07      	ble.n	801382a <__ieee754_pow+0x202>
 801381a:	429c      	cmp	r4, r3
 801381c:	dc0a      	bgt.n	8013834 <__ieee754_pow+0x20c>
 801381e:	2f00      	cmp	r7, #0
 8013820:	da84      	bge.n	801372c <__ieee754_pow+0x104>
 8013822:	a307      	add	r3, pc, #28	; (adr r3, 8013840 <__ieee754_pow+0x218>)
 8013824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013828:	e795      	b.n	8013756 <__ieee754_pow+0x12e>
 801382a:	429c      	cmp	r4, r3
 801382c:	dbf7      	blt.n	801381e <__ieee754_pow+0x1f6>
 801382e:	4b09      	ldr	r3, [pc, #36]	; (8013854 <__ieee754_pow+0x22c>)
 8013830:	429c      	cmp	r4, r3
 8013832:	dd17      	ble.n	8013864 <__ieee754_pow+0x23c>
 8013834:	2f00      	cmp	r7, #0
 8013836:	dcf4      	bgt.n	8013822 <__ieee754_pow+0x1fa>
 8013838:	e778      	b.n	801372c <__ieee754_pow+0x104>
 801383a:	bf00      	nop
 801383c:	f3af 8000 	nop.w
 8013840:	8800759c 	.word	0x8800759c
 8013844:	7e37e43c 	.word	0x7e37e43c
 8013848:	7ff00000 	.word	0x7ff00000
 801384c:	0801ca88 	.word	0x0801ca88
 8013850:	433fffff 	.word	0x433fffff
 8013854:	3ff00000 	.word	0x3ff00000
 8013858:	3fefffff 	.word	0x3fefffff
 801385c:	3fe00000 	.word	0x3fe00000
 8013860:	41e00000 	.word	0x41e00000
 8013864:	4b64      	ldr	r3, [pc, #400]	; (80139f8 <__ieee754_pow+0x3d0>)
 8013866:	2200      	movs	r2, #0
 8013868:	f7ec fd2e 	bl	80002c8 <__aeabi_dsub>
 801386c:	a356      	add	r3, pc, #344	; (adr r3, 80139c8 <__ieee754_pow+0x3a0>)
 801386e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013872:	4604      	mov	r4, r0
 8013874:	460d      	mov	r5, r1
 8013876:	f7ec fedf 	bl	8000638 <__aeabi_dmul>
 801387a:	a355      	add	r3, pc, #340	; (adr r3, 80139d0 <__ieee754_pow+0x3a8>)
 801387c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013880:	4606      	mov	r6, r0
 8013882:	460f      	mov	r7, r1
 8013884:	4620      	mov	r0, r4
 8013886:	4629      	mov	r1, r5
 8013888:	f7ec fed6 	bl	8000638 <__aeabi_dmul>
 801388c:	4b5b      	ldr	r3, [pc, #364]	; (80139fc <__ieee754_pow+0x3d4>)
 801388e:	4682      	mov	sl, r0
 8013890:	468b      	mov	fp, r1
 8013892:	2200      	movs	r2, #0
 8013894:	4620      	mov	r0, r4
 8013896:	4629      	mov	r1, r5
 8013898:	f7ec fece 	bl	8000638 <__aeabi_dmul>
 801389c:	4602      	mov	r2, r0
 801389e:	460b      	mov	r3, r1
 80138a0:	a14d      	add	r1, pc, #308	; (adr r1, 80139d8 <__ieee754_pow+0x3b0>)
 80138a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80138a6:	f7ec fd0f 	bl	80002c8 <__aeabi_dsub>
 80138aa:	4622      	mov	r2, r4
 80138ac:	462b      	mov	r3, r5
 80138ae:	f7ec fec3 	bl	8000638 <__aeabi_dmul>
 80138b2:	4602      	mov	r2, r0
 80138b4:	460b      	mov	r3, r1
 80138b6:	2000      	movs	r0, #0
 80138b8:	4951      	ldr	r1, [pc, #324]	; (8013a00 <__ieee754_pow+0x3d8>)
 80138ba:	f7ec fd05 	bl	80002c8 <__aeabi_dsub>
 80138be:	4622      	mov	r2, r4
 80138c0:	4680      	mov	r8, r0
 80138c2:	4689      	mov	r9, r1
 80138c4:	462b      	mov	r3, r5
 80138c6:	4620      	mov	r0, r4
 80138c8:	4629      	mov	r1, r5
 80138ca:	f7ec feb5 	bl	8000638 <__aeabi_dmul>
 80138ce:	4602      	mov	r2, r0
 80138d0:	460b      	mov	r3, r1
 80138d2:	4640      	mov	r0, r8
 80138d4:	4649      	mov	r1, r9
 80138d6:	f7ec feaf 	bl	8000638 <__aeabi_dmul>
 80138da:	a341      	add	r3, pc, #260	; (adr r3, 80139e0 <__ieee754_pow+0x3b8>)
 80138dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138e0:	f7ec feaa 	bl	8000638 <__aeabi_dmul>
 80138e4:	4602      	mov	r2, r0
 80138e6:	460b      	mov	r3, r1
 80138e8:	4650      	mov	r0, sl
 80138ea:	4659      	mov	r1, fp
 80138ec:	f7ec fcec 	bl	80002c8 <__aeabi_dsub>
 80138f0:	4602      	mov	r2, r0
 80138f2:	460b      	mov	r3, r1
 80138f4:	4680      	mov	r8, r0
 80138f6:	4689      	mov	r9, r1
 80138f8:	4630      	mov	r0, r6
 80138fa:	4639      	mov	r1, r7
 80138fc:	f7ec fce6 	bl	80002cc <__adddf3>
 8013900:	2400      	movs	r4, #0
 8013902:	4632      	mov	r2, r6
 8013904:	463b      	mov	r3, r7
 8013906:	4620      	mov	r0, r4
 8013908:	460d      	mov	r5, r1
 801390a:	f7ec fcdd 	bl	80002c8 <__aeabi_dsub>
 801390e:	4602      	mov	r2, r0
 8013910:	460b      	mov	r3, r1
 8013912:	4640      	mov	r0, r8
 8013914:	4649      	mov	r1, r9
 8013916:	f7ec fcd7 	bl	80002c8 <__aeabi_dsub>
 801391a:	9b00      	ldr	r3, [sp, #0]
 801391c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801391e:	3b01      	subs	r3, #1
 8013920:	4313      	orrs	r3, r2
 8013922:	4682      	mov	sl, r0
 8013924:	468b      	mov	fp, r1
 8013926:	f040 81f1 	bne.w	8013d0c <__ieee754_pow+0x6e4>
 801392a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80139e8 <__ieee754_pow+0x3c0>
 801392e:	eeb0 8a47 	vmov.f32	s16, s14
 8013932:	eef0 8a67 	vmov.f32	s17, s15
 8013936:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801393a:	2600      	movs	r6, #0
 801393c:	4632      	mov	r2, r6
 801393e:	463b      	mov	r3, r7
 8013940:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013944:	f7ec fcc0 	bl	80002c8 <__aeabi_dsub>
 8013948:	4622      	mov	r2, r4
 801394a:	462b      	mov	r3, r5
 801394c:	f7ec fe74 	bl	8000638 <__aeabi_dmul>
 8013950:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013954:	4680      	mov	r8, r0
 8013956:	4689      	mov	r9, r1
 8013958:	4650      	mov	r0, sl
 801395a:	4659      	mov	r1, fp
 801395c:	f7ec fe6c 	bl	8000638 <__aeabi_dmul>
 8013960:	4602      	mov	r2, r0
 8013962:	460b      	mov	r3, r1
 8013964:	4640      	mov	r0, r8
 8013966:	4649      	mov	r1, r9
 8013968:	f7ec fcb0 	bl	80002cc <__adddf3>
 801396c:	4632      	mov	r2, r6
 801396e:	463b      	mov	r3, r7
 8013970:	4680      	mov	r8, r0
 8013972:	4689      	mov	r9, r1
 8013974:	4620      	mov	r0, r4
 8013976:	4629      	mov	r1, r5
 8013978:	f7ec fe5e 	bl	8000638 <__aeabi_dmul>
 801397c:	460b      	mov	r3, r1
 801397e:	4604      	mov	r4, r0
 8013980:	460d      	mov	r5, r1
 8013982:	4602      	mov	r2, r0
 8013984:	4649      	mov	r1, r9
 8013986:	4640      	mov	r0, r8
 8013988:	f7ec fca0 	bl	80002cc <__adddf3>
 801398c:	4b1d      	ldr	r3, [pc, #116]	; (8013a04 <__ieee754_pow+0x3dc>)
 801398e:	4299      	cmp	r1, r3
 8013990:	ec45 4b19 	vmov	d9, r4, r5
 8013994:	4606      	mov	r6, r0
 8013996:	460f      	mov	r7, r1
 8013998:	468b      	mov	fp, r1
 801399a:	f340 82fe 	ble.w	8013f9a <__ieee754_pow+0x972>
 801399e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80139a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80139a6:	4303      	orrs	r3, r0
 80139a8:	f000 81f0 	beq.w	8013d8c <__ieee754_pow+0x764>
 80139ac:	a310      	add	r3, pc, #64	; (adr r3, 80139f0 <__ieee754_pow+0x3c8>)
 80139ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139b2:	ec51 0b18 	vmov	r0, r1, d8
 80139b6:	f7ec fe3f 	bl	8000638 <__aeabi_dmul>
 80139ba:	a30d      	add	r3, pc, #52	; (adr r3, 80139f0 <__ieee754_pow+0x3c8>)
 80139bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139c0:	e6cb      	b.n	801375a <__ieee754_pow+0x132>
 80139c2:	bf00      	nop
 80139c4:	f3af 8000 	nop.w
 80139c8:	60000000 	.word	0x60000000
 80139cc:	3ff71547 	.word	0x3ff71547
 80139d0:	f85ddf44 	.word	0xf85ddf44
 80139d4:	3e54ae0b 	.word	0x3e54ae0b
 80139d8:	55555555 	.word	0x55555555
 80139dc:	3fd55555 	.word	0x3fd55555
 80139e0:	652b82fe 	.word	0x652b82fe
 80139e4:	3ff71547 	.word	0x3ff71547
 80139e8:	00000000 	.word	0x00000000
 80139ec:	bff00000 	.word	0xbff00000
 80139f0:	8800759c 	.word	0x8800759c
 80139f4:	7e37e43c 	.word	0x7e37e43c
 80139f8:	3ff00000 	.word	0x3ff00000
 80139fc:	3fd00000 	.word	0x3fd00000
 8013a00:	3fe00000 	.word	0x3fe00000
 8013a04:	408fffff 	.word	0x408fffff
 8013a08:	4bd7      	ldr	r3, [pc, #860]	; (8013d68 <__ieee754_pow+0x740>)
 8013a0a:	ea03 0309 	and.w	r3, r3, r9
 8013a0e:	2200      	movs	r2, #0
 8013a10:	b92b      	cbnz	r3, 8013a1e <__ieee754_pow+0x3f6>
 8013a12:	4bd6      	ldr	r3, [pc, #856]	; (8013d6c <__ieee754_pow+0x744>)
 8013a14:	f7ec fe10 	bl	8000638 <__aeabi_dmul>
 8013a18:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8013a1c:	460c      	mov	r4, r1
 8013a1e:	1523      	asrs	r3, r4, #20
 8013a20:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013a24:	4413      	add	r3, r2
 8013a26:	9309      	str	r3, [sp, #36]	; 0x24
 8013a28:	4bd1      	ldr	r3, [pc, #836]	; (8013d70 <__ieee754_pow+0x748>)
 8013a2a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8013a2e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8013a32:	429c      	cmp	r4, r3
 8013a34:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013a38:	dd08      	ble.n	8013a4c <__ieee754_pow+0x424>
 8013a3a:	4bce      	ldr	r3, [pc, #824]	; (8013d74 <__ieee754_pow+0x74c>)
 8013a3c:	429c      	cmp	r4, r3
 8013a3e:	f340 8163 	ble.w	8013d08 <__ieee754_pow+0x6e0>
 8013a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a44:	3301      	adds	r3, #1
 8013a46:	9309      	str	r3, [sp, #36]	; 0x24
 8013a48:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8013a4c:	2400      	movs	r4, #0
 8013a4e:	00e3      	lsls	r3, r4, #3
 8013a50:	930b      	str	r3, [sp, #44]	; 0x2c
 8013a52:	4bc9      	ldr	r3, [pc, #804]	; (8013d78 <__ieee754_pow+0x750>)
 8013a54:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013a58:	ed93 7b00 	vldr	d7, [r3]
 8013a5c:	4629      	mov	r1, r5
 8013a5e:	ec53 2b17 	vmov	r2, r3, d7
 8013a62:	eeb0 8a47 	vmov.f32	s16, s14
 8013a66:	eef0 8a67 	vmov.f32	s17, s15
 8013a6a:	4682      	mov	sl, r0
 8013a6c:	f7ec fc2c 	bl	80002c8 <__aeabi_dsub>
 8013a70:	4652      	mov	r2, sl
 8013a72:	4606      	mov	r6, r0
 8013a74:	460f      	mov	r7, r1
 8013a76:	462b      	mov	r3, r5
 8013a78:	ec51 0b18 	vmov	r0, r1, d8
 8013a7c:	f7ec fc26 	bl	80002cc <__adddf3>
 8013a80:	4602      	mov	r2, r0
 8013a82:	460b      	mov	r3, r1
 8013a84:	2000      	movs	r0, #0
 8013a86:	49bd      	ldr	r1, [pc, #756]	; (8013d7c <__ieee754_pow+0x754>)
 8013a88:	f7ec ff00 	bl	800088c <__aeabi_ddiv>
 8013a8c:	ec41 0b19 	vmov	d9, r0, r1
 8013a90:	4602      	mov	r2, r0
 8013a92:	460b      	mov	r3, r1
 8013a94:	4630      	mov	r0, r6
 8013a96:	4639      	mov	r1, r7
 8013a98:	f7ec fdce 	bl	8000638 <__aeabi_dmul>
 8013a9c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013aa0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013aa4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013aa8:	2300      	movs	r3, #0
 8013aaa:	9304      	str	r3, [sp, #16]
 8013aac:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8013ab0:	46ab      	mov	fp, r5
 8013ab2:	106d      	asrs	r5, r5, #1
 8013ab4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8013ab8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8013abc:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	4640      	mov	r0, r8
 8013ac4:	4649      	mov	r1, r9
 8013ac6:	4614      	mov	r4, r2
 8013ac8:	461d      	mov	r5, r3
 8013aca:	f7ec fdb5 	bl	8000638 <__aeabi_dmul>
 8013ace:	4602      	mov	r2, r0
 8013ad0:	460b      	mov	r3, r1
 8013ad2:	4630      	mov	r0, r6
 8013ad4:	4639      	mov	r1, r7
 8013ad6:	f7ec fbf7 	bl	80002c8 <__aeabi_dsub>
 8013ada:	ec53 2b18 	vmov	r2, r3, d8
 8013ade:	4606      	mov	r6, r0
 8013ae0:	460f      	mov	r7, r1
 8013ae2:	4620      	mov	r0, r4
 8013ae4:	4629      	mov	r1, r5
 8013ae6:	f7ec fbef 	bl	80002c8 <__aeabi_dsub>
 8013aea:	4602      	mov	r2, r0
 8013aec:	460b      	mov	r3, r1
 8013aee:	4650      	mov	r0, sl
 8013af0:	4659      	mov	r1, fp
 8013af2:	f7ec fbe9 	bl	80002c8 <__aeabi_dsub>
 8013af6:	4642      	mov	r2, r8
 8013af8:	464b      	mov	r3, r9
 8013afa:	f7ec fd9d 	bl	8000638 <__aeabi_dmul>
 8013afe:	4602      	mov	r2, r0
 8013b00:	460b      	mov	r3, r1
 8013b02:	4630      	mov	r0, r6
 8013b04:	4639      	mov	r1, r7
 8013b06:	f7ec fbdf 	bl	80002c8 <__aeabi_dsub>
 8013b0a:	ec53 2b19 	vmov	r2, r3, d9
 8013b0e:	f7ec fd93 	bl	8000638 <__aeabi_dmul>
 8013b12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013b16:	ec41 0b18 	vmov	d8, r0, r1
 8013b1a:	4610      	mov	r0, r2
 8013b1c:	4619      	mov	r1, r3
 8013b1e:	f7ec fd8b 	bl	8000638 <__aeabi_dmul>
 8013b22:	a37d      	add	r3, pc, #500	; (adr r3, 8013d18 <__ieee754_pow+0x6f0>)
 8013b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b28:	4604      	mov	r4, r0
 8013b2a:	460d      	mov	r5, r1
 8013b2c:	f7ec fd84 	bl	8000638 <__aeabi_dmul>
 8013b30:	a37b      	add	r3, pc, #492	; (adr r3, 8013d20 <__ieee754_pow+0x6f8>)
 8013b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b36:	f7ec fbc9 	bl	80002cc <__adddf3>
 8013b3a:	4622      	mov	r2, r4
 8013b3c:	462b      	mov	r3, r5
 8013b3e:	f7ec fd7b 	bl	8000638 <__aeabi_dmul>
 8013b42:	a379      	add	r3, pc, #484	; (adr r3, 8013d28 <__ieee754_pow+0x700>)
 8013b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b48:	f7ec fbc0 	bl	80002cc <__adddf3>
 8013b4c:	4622      	mov	r2, r4
 8013b4e:	462b      	mov	r3, r5
 8013b50:	f7ec fd72 	bl	8000638 <__aeabi_dmul>
 8013b54:	a376      	add	r3, pc, #472	; (adr r3, 8013d30 <__ieee754_pow+0x708>)
 8013b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b5a:	f7ec fbb7 	bl	80002cc <__adddf3>
 8013b5e:	4622      	mov	r2, r4
 8013b60:	462b      	mov	r3, r5
 8013b62:	f7ec fd69 	bl	8000638 <__aeabi_dmul>
 8013b66:	a374      	add	r3, pc, #464	; (adr r3, 8013d38 <__ieee754_pow+0x710>)
 8013b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b6c:	f7ec fbae 	bl	80002cc <__adddf3>
 8013b70:	4622      	mov	r2, r4
 8013b72:	462b      	mov	r3, r5
 8013b74:	f7ec fd60 	bl	8000638 <__aeabi_dmul>
 8013b78:	a371      	add	r3, pc, #452	; (adr r3, 8013d40 <__ieee754_pow+0x718>)
 8013b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b7e:	f7ec fba5 	bl	80002cc <__adddf3>
 8013b82:	4622      	mov	r2, r4
 8013b84:	4606      	mov	r6, r0
 8013b86:	460f      	mov	r7, r1
 8013b88:	462b      	mov	r3, r5
 8013b8a:	4620      	mov	r0, r4
 8013b8c:	4629      	mov	r1, r5
 8013b8e:	f7ec fd53 	bl	8000638 <__aeabi_dmul>
 8013b92:	4602      	mov	r2, r0
 8013b94:	460b      	mov	r3, r1
 8013b96:	4630      	mov	r0, r6
 8013b98:	4639      	mov	r1, r7
 8013b9a:	f7ec fd4d 	bl	8000638 <__aeabi_dmul>
 8013b9e:	4642      	mov	r2, r8
 8013ba0:	4604      	mov	r4, r0
 8013ba2:	460d      	mov	r5, r1
 8013ba4:	464b      	mov	r3, r9
 8013ba6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013baa:	f7ec fb8f 	bl	80002cc <__adddf3>
 8013bae:	ec53 2b18 	vmov	r2, r3, d8
 8013bb2:	f7ec fd41 	bl	8000638 <__aeabi_dmul>
 8013bb6:	4622      	mov	r2, r4
 8013bb8:	462b      	mov	r3, r5
 8013bba:	f7ec fb87 	bl	80002cc <__adddf3>
 8013bbe:	4642      	mov	r2, r8
 8013bc0:	4682      	mov	sl, r0
 8013bc2:	468b      	mov	fp, r1
 8013bc4:	464b      	mov	r3, r9
 8013bc6:	4640      	mov	r0, r8
 8013bc8:	4649      	mov	r1, r9
 8013bca:	f7ec fd35 	bl	8000638 <__aeabi_dmul>
 8013bce:	4b6c      	ldr	r3, [pc, #432]	; (8013d80 <__ieee754_pow+0x758>)
 8013bd0:	2200      	movs	r2, #0
 8013bd2:	4606      	mov	r6, r0
 8013bd4:	460f      	mov	r7, r1
 8013bd6:	f7ec fb79 	bl	80002cc <__adddf3>
 8013bda:	4652      	mov	r2, sl
 8013bdc:	465b      	mov	r3, fp
 8013bde:	f7ec fb75 	bl	80002cc <__adddf3>
 8013be2:	9c04      	ldr	r4, [sp, #16]
 8013be4:	460d      	mov	r5, r1
 8013be6:	4622      	mov	r2, r4
 8013be8:	460b      	mov	r3, r1
 8013bea:	4640      	mov	r0, r8
 8013bec:	4649      	mov	r1, r9
 8013bee:	f7ec fd23 	bl	8000638 <__aeabi_dmul>
 8013bf2:	4b63      	ldr	r3, [pc, #396]	; (8013d80 <__ieee754_pow+0x758>)
 8013bf4:	4680      	mov	r8, r0
 8013bf6:	4689      	mov	r9, r1
 8013bf8:	2200      	movs	r2, #0
 8013bfa:	4620      	mov	r0, r4
 8013bfc:	4629      	mov	r1, r5
 8013bfe:	f7ec fb63 	bl	80002c8 <__aeabi_dsub>
 8013c02:	4632      	mov	r2, r6
 8013c04:	463b      	mov	r3, r7
 8013c06:	f7ec fb5f 	bl	80002c8 <__aeabi_dsub>
 8013c0a:	4602      	mov	r2, r0
 8013c0c:	460b      	mov	r3, r1
 8013c0e:	4650      	mov	r0, sl
 8013c10:	4659      	mov	r1, fp
 8013c12:	f7ec fb59 	bl	80002c8 <__aeabi_dsub>
 8013c16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013c1a:	f7ec fd0d 	bl	8000638 <__aeabi_dmul>
 8013c1e:	4622      	mov	r2, r4
 8013c20:	4606      	mov	r6, r0
 8013c22:	460f      	mov	r7, r1
 8013c24:	462b      	mov	r3, r5
 8013c26:	ec51 0b18 	vmov	r0, r1, d8
 8013c2a:	f7ec fd05 	bl	8000638 <__aeabi_dmul>
 8013c2e:	4602      	mov	r2, r0
 8013c30:	460b      	mov	r3, r1
 8013c32:	4630      	mov	r0, r6
 8013c34:	4639      	mov	r1, r7
 8013c36:	f7ec fb49 	bl	80002cc <__adddf3>
 8013c3a:	4606      	mov	r6, r0
 8013c3c:	460f      	mov	r7, r1
 8013c3e:	4602      	mov	r2, r0
 8013c40:	460b      	mov	r3, r1
 8013c42:	4640      	mov	r0, r8
 8013c44:	4649      	mov	r1, r9
 8013c46:	f7ec fb41 	bl	80002cc <__adddf3>
 8013c4a:	9c04      	ldr	r4, [sp, #16]
 8013c4c:	a33e      	add	r3, pc, #248	; (adr r3, 8013d48 <__ieee754_pow+0x720>)
 8013c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c52:	4620      	mov	r0, r4
 8013c54:	460d      	mov	r5, r1
 8013c56:	f7ec fcef 	bl	8000638 <__aeabi_dmul>
 8013c5a:	4642      	mov	r2, r8
 8013c5c:	ec41 0b18 	vmov	d8, r0, r1
 8013c60:	464b      	mov	r3, r9
 8013c62:	4620      	mov	r0, r4
 8013c64:	4629      	mov	r1, r5
 8013c66:	f7ec fb2f 	bl	80002c8 <__aeabi_dsub>
 8013c6a:	4602      	mov	r2, r0
 8013c6c:	460b      	mov	r3, r1
 8013c6e:	4630      	mov	r0, r6
 8013c70:	4639      	mov	r1, r7
 8013c72:	f7ec fb29 	bl	80002c8 <__aeabi_dsub>
 8013c76:	a336      	add	r3, pc, #216	; (adr r3, 8013d50 <__ieee754_pow+0x728>)
 8013c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c7c:	f7ec fcdc 	bl	8000638 <__aeabi_dmul>
 8013c80:	a335      	add	r3, pc, #212	; (adr r3, 8013d58 <__ieee754_pow+0x730>)
 8013c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c86:	4606      	mov	r6, r0
 8013c88:	460f      	mov	r7, r1
 8013c8a:	4620      	mov	r0, r4
 8013c8c:	4629      	mov	r1, r5
 8013c8e:	f7ec fcd3 	bl	8000638 <__aeabi_dmul>
 8013c92:	4602      	mov	r2, r0
 8013c94:	460b      	mov	r3, r1
 8013c96:	4630      	mov	r0, r6
 8013c98:	4639      	mov	r1, r7
 8013c9a:	f7ec fb17 	bl	80002cc <__adddf3>
 8013c9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013ca0:	4b38      	ldr	r3, [pc, #224]	; (8013d84 <__ieee754_pow+0x75c>)
 8013ca2:	4413      	add	r3, r2
 8013ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ca8:	f7ec fb10 	bl	80002cc <__adddf3>
 8013cac:	4682      	mov	sl, r0
 8013cae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013cb0:	468b      	mov	fp, r1
 8013cb2:	f7ec fc57 	bl	8000564 <__aeabi_i2d>
 8013cb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013cb8:	4b33      	ldr	r3, [pc, #204]	; (8013d88 <__ieee754_pow+0x760>)
 8013cba:	4413      	add	r3, r2
 8013cbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013cc0:	4606      	mov	r6, r0
 8013cc2:	460f      	mov	r7, r1
 8013cc4:	4652      	mov	r2, sl
 8013cc6:	465b      	mov	r3, fp
 8013cc8:	ec51 0b18 	vmov	r0, r1, d8
 8013ccc:	f7ec fafe 	bl	80002cc <__adddf3>
 8013cd0:	4642      	mov	r2, r8
 8013cd2:	464b      	mov	r3, r9
 8013cd4:	f7ec fafa 	bl	80002cc <__adddf3>
 8013cd8:	4632      	mov	r2, r6
 8013cda:	463b      	mov	r3, r7
 8013cdc:	f7ec faf6 	bl	80002cc <__adddf3>
 8013ce0:	9c04      	ldr	r4, [sp, #16]
 8013ce2:	4632      	mov	r2, r6
 8013ce4:	463b      	mov	r3, r7
 8013ce6:	4620      	mov	r0, r4
 8013ce8:	460d      	mov	r5, r1
 8013cea:	f7ec faed 	bl	80002c8 <__aeabi_dsub>
 8013cee:	4642      	mov	r2, r8
 8013cf0:	464b      	mov	r3, r9
 8013cf2:	f7ec fae9 	bl	80002c8 <__aeabi_dsub>
 8013cf6:	ec53 2b18 	vmov	r2, r3, d8
 8013cfa:	f7ec fae5 	bl	80002c8 <__aeabi_dsub>
 8013cfe:	4602      	mov	r2, r0
 8013d00:	460b      	mov	r3, r1
 8013d02:	4650      	mov	r0, sl
 8013d04:	4659      	mov	r1, fp
 8013d06:	e606      	b.n	8013916 <__ieee754_pow+0x2ee>
 8013d08:	2401      	movs	r4, #1
 8013d0a:	e6a0      	b.n	8013a4e <__ieee754_pow+0x426>
 8013d0c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8013d60 <__ieee754_pow+0x738>
 8013d10:	e60d      	b.n	801392e <__ieee754_pow+0x306>
 8013d12:	bf00      	nop
 8013d14:	f3af 8000 	nop.w
 8013d18:	4a454eef 	.word	0x4a454eef
 8013d1c:	3fca7e28 	.word	0x3fca7e28
 8013d20:	93c9db65 	.word	0x93c9db65
 8013d24:	3fcd864a 	.word	0x3fcd864a
 8013d28:	a91d4101 	.word	0xa91d4101
 8013d2c:	3fd17460 	.word	0x3fd17460
 8013d30:	518f264d 	.word	0x518f264d
 8013d34:	3fd55555 	.word	0x3fd55555
 8013d38:	db6fabff 	.word	0xdb6fabff
 8013d3c:	3fdb6db6 	.word	0x3fdb6db6
 8013d40:	33333303 	.word	0x33333303
 8013d44:	3fe33333 	.word	0x3fe33333
 8013d48:	e0000000 	.word	0xe0000000
 8013d4c:	3feec709 	.word	0x3feec709
 8013d50:	dc3a03fd 	.word	0xdc3a03fd
 8013d54:	3feec709 	.word	0x3feec709
 8013d58:	145b01f5 	.word	0x145b01f5
 8013d5c:	be3e2fe0 	.word	0xbe3e2fe0
 8013d60:	00000000 	.word	0x00000000
 8013d64:	3ff00000 	.word	0x3ff00000
 8013d68:	7ff00000 	.word	0x7ff00000
 8013d6c:	43400000 	.word	0x43400000
 8013d70:	0003988e 	.word	0x0003988e
 8013d74:	000bb679 	.word	0x000bb679
 8013d78:	0801c648 	.word	0x0801c648
 8013d7c:	3ff00000 	.word	0x3ff00000
 8013d80:	40080000 	.word	0x40080000
 8013d84:	0801c668 	.word	0x0801c668
 8013d88:	0801c658 	.word	0x0801c658
 8013d8c:	a3b5      	add	r3, pc, #724	; (adr r3, 8014064 <__ieee754_pow+0xa3c>)
 8013d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d92:	4640      	mov	r0, r8
 8013d94:	4649      	mov	r1, r9
 8013d96:	f7ec fa99 	bl	80002cc <__adddf3>
 8013d9a:	4622      	mov	r2, r4
 8013d9c:	ec41 0b1a 	vmov	d10, r0, r1
 8013da0:	462b      	mov	r3, r5
 8013da2:	4630      	mov	r0, r6
 8013da4:	4639      	mov	r1, r7
 8013da6:	f7ec fa8f 	bl	80002c8 <__aeabi_dsub>
 8013daa:	4602      	mov	r2, r0
 8013dac:	460b      	mov	r3, r1
 8013dae:	ec51 0b1a 	vmov	r0, r1, d10
 8013db2:	f7ec fed1 	bl	8000b58 <__aeabi_dcmpgt>
 8013db6:	2800      	cmp	r0, #0
 8013db8:	f47f adf8 	bne.w	80139ac <__ieee754_pow+0x384>
 8013dbc:	4aa4      	ldr	r2, [pc, #656]	; (8014050 <__ieee754_pow+0xa28>)
 8013dbe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013dc2:	4293      	cmp	r3, r2
 8013dc4:	f340 810b 	ble.w	8013fde <__ieee754_pow+0x9b6>
 8013dc8:	151b      	asrs	r3, r3, #20
 8013dca:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8013dce:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8013dd2:	fa4a f303 	asr.w	r3, sl, r3
 8013dd6:	445b      	add	r3, fp
 8013dd8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8013ddc:	4e9d      	ldr	r6, [pc, #628]	; (8014054 <__ieee754_pow+0xa2c>)
 8013dde:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8013de2:	4116      	asrs	r6, r2
 8013de4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8013de8:	2000      	movs	r0, #0
 8013dea:	ea23 0106 	bic.w	r1, r3, r6
 8013dee:	f1c2 0214 	rsb	r2, r2, #20
 8013df2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8013df6:	fa4a fa02 	asr.w	sl, sl, r2
 8013dfa:	f1bb 0f00 	cmp.w	fp, #0
 8013dfe:	4602      	mov	r2, r0
 8013e00:	460b      	mov	r3, r1
 8013e02:	4620      	mov	r0, r4
 8013e04:	4629      	mov	r1, r5
 8013e06:	bfb8      	it	lt
 8013e08:	f1ca 0a00 	rsblt	sl, sl, #0
 8013e0c:	f7ec fa5c 	bl	80002c8 <__aeabi_dsub>
 8013e10:	ec41 0b19 	vmov	d9, r0, r1
 8013e14:	4642      	mov	r2, r8
 8013e16:	464b      	mov	r3, r9
 8013e18:	ec51 0b19 	vmov	r0, r1, d9
 8013e1c:	f7ec fa56 	bl	80002cc <__adddf3>
 8013e20:	2400      	movs	r4, #0
 8013e22:	a379      	add	r3, pc, #484	; (adr r3, 8014008 <__ieee754_pow+0x9e0>)
 8013e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e28:	4620      	mov	r0, r4
 8013e2a:	460d      	mov	r5, r1
 8013e2c:	f7ec fc04 	bl	8000638 <__aeabi_dmul>
 8013e30:	ec53 2b19 	vmov	r2, r3, d9
 8013e34:	4606      	mov	r6, r0
 8013e36:	460f      	mov	r7, r1
 8013e38:	4620      	mov	r0, r4
 8013e3a:	4629      	mov	r1, r5
 8013e3c:	f7ec fa44 	bl	80002c8 <__aeabi_dsub>
 8013e40:	4602      	mov	r2, r0
 8013e42:	460b      	mov	r3, r1
 8013e44:	4640      	mov	r0, r8
 8013e46:	4649      	mov	r1, r9
 8013e48:	f7ec fa3e 	bl	80002c8 <__aeabi_dsub>
 8013e4c:	a370      	add	r3, pc, #448	; (adr r3, 8014010 <__ieee754_pow+0x9e8>)
 8013e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e52:	f7ec fbf1 	bl	8000638 <__aeabi_dmul>
 8013e56:	a370      	add	r3, pc, #448	; (adr r3, 8014018 <__ieee754_pow+0x9f0>)
 8013e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e5c:	4680      	mov	r8, r0
 8013e5e:	4689      	mov	r9, r1
 8013e60:	4620      	mov	r0, r4
 8013e62:	4629      	mov	r1, r5
 8013e64:	f7ec fbe8 	bl	8000638 <__aeabi_dmul>
 8013e68:	4602      	mov	r2, r0
 8013e6a:	460b      	mov	r3, r1
 8013e6c:	4640      	mov	r0, r8
 8013e6e:	4649      	mov	r1, r9
 8013e70:	f7ec fa2c 	bl	80002cc <__adddf3>
 8013e74:	4604      	mov	r4, r0
 8013e76:	460d      	mov	r5, r1
 8013e78:	4602      	mov	r2, r0
 8013e7a:	460b      	mov	r3, r1
 8013e7c:	4630      	mov	r0, r6
 8013e7e:	4639      	mov	r1, r7
 8013e80:	f7ec fa24 	bl	80002cc <__adddf3>
 8013e84:	4632      	mov	r2, r6
 8013e86:	463b      	mov	r3, r7
 8013e88:	4680      	mov	r8, r0
 8013e8a:	4689      	mov	r9, r1
 8013e8c:	f7ec fa1c 	bl	80002c8 <__aeabi_dsub>
 8013e90:	4602      	mov	r2, r0
 8013e92:	460b      	mov	r3, r1
 8013e94:	4620      	mov	r0, r4
 8013e96:	4629      	mov	r1, r5
 8013e98:	f7ec fa16 	bl	80002c8 <__aeabi_dsub>
 8013e9c:	4642      	mov	r2, r8
 8013e9e:	4606      	mov	r6, r0
 8013ea0:	460f      	mov	r7, r1
 8013ea2:	464b      	mov	r3, r9
 8013ea4:	4640      	mov	r0, r8
 8013ea6:	4649      	mov	r1, r9
 8013ea8:	f7ec fbc6 	bl	8000638 <__aeabi_dmul>
 8013eac:	a35c      	add	r3, pc, #368	; (adr r3, 8014020 <__ieee754_pow+0x9f8>)
 8013eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eb2:	4604      	mov	r4, r0
 8013eb4:	460d      	mov	r5, r1
 8013eb6:	f7ec fbbf 	bl	8000638 <__aeabi_dmul>
 8013eba:	a35b      	add	r3, pc, #364	; (adr r3, 8014028 <__ieee754_pow+0xa00>)
 8013ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ec0:	f7ec fa02 	bl	80002c8 <__aeabi_dsub>
 8013ec4:	4622      	mov	r2, r4
 8013ec6:	462b      	mov	r3, r5
 8013ec8:	f7ec fbb6 	bl	8000638 <__aeabi_dmul>
 8013ecc:	a358      	add	r3, pc, #352	; (adr r3, 8014030 <__ieee754_pow+0xa08>)
 8013ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ed2:	f7ec f9fb 	bl	80002cc <__adddf3>
 8013ed6:	4622      	mov	r2, r4
 8013ed8:	462b      	mov	r3, r5
 8013eda:	f7ec fbad 	bl	8000638 <__aeabi_dmul>
 8013ede:	a356      	add	r3, pc, #344	; (adr r3, 8014038 <__ieee754_pow+0xa10>)
 8013ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ee4:	f7ec f9f0 	bl	80002c8 <__aeabi_dsub>
 8013ee8:	4622      	mov	r2, r4
 8013eea:	462b      	mov	r3, r5
 8013eec:	f7ec fba4 	bl	8000638 <__aeabi_dmul>
 8013ef0:	a353      	add	r3, pc, #332	; (adr r3, 8014040 <__ieee754_pow+0xa18>)
 8013ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ef6:	f7ec f9e9 	bl	80002cc <__adddf3>
 8013efa:	4622      	mov	r2, r4
 8013efc:	462b      	mov	r3, r5
 8013efe:	f7ec fb9b 	bl	8000638 <__aeabi_dmul>
 8013f02:	4602      	mov	r2, r0
 8013f04:	460b      	mov	r3, r1
 8013f06:	4640      	mov	r0, r8
 8013f08:	4649      	mov	r1, r9
 8013f0a:	f7ec f9dd 	bl	80002c8 <__aeabi_dsub>
 8013f0e:	4604      	mov	r4, r0
 8013f10:	460d      	mov	r5, r1
 8013f12:	4602      	mov	r2, r0
 8013f14:	460b      	mov	r3, r1
 8013f16:	4640      	mov	r0, r8
 8013f18:	4649      	mov	r1, r9
 8013f1a:	f7ec fb8d 	bl	8000638 <__aeabi_dmul>
 8013f1e:	2200      	movs	r2, #0
 8013f20:	ec41 0b19 	vmov	d9, r0, r1
 8013f24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013f28:	4620      	mov	r0, r4
 8013f2a:	4629      	mov	r1, r5
 8013f2c:	f7ec f9cc 	bl	80002c8 <__aeabi_dsub>
 8013f30:	4602      	mov	r2, r0
 8013f32:	460b      	mov	r3, r1
 8013f34:	ec51 0b19 	vmov	r0, r1, d9
 8013f38:	f7ec fca8 	bl	800088c <__aeabi_ddiv>
 8013f3c:	4632      	mov	r2, r6
 8013f3e:	4604      	mov	r4, r0
 8013f40:	460d      	mov	r5, r1
 8013f42:	463b      	mov	r3, r7
 8013f44:	4640      	mov	r0, r8
 8013f46:	4649      	mov	r1, r9
 8013f48:	f7ec fb76 	bl	8000638 <__aeabi_dmul>
 8013f4c:	4632      	mov	r2, r6
 8013f4e:	463b      	mov	r3, r7
 8013f50:	f7ec f9bc 	bl	80002cc <__adddf3>
 8013f54:	4602      	mov	r2, r0
 8013f56:	460b      	mov	r3, r1
 8013f58:	4620      	mov	r0, r4
 8013f5a:	4629      	mov	r1, r5
 8013f5c:	f7ec f9b4 	bl	80002c8 <__aeabi_dsub>
 8013f60:	4642      	mov	r2, r8
 8013f62:	464b      	mov	r3, r9
 8013f64:	f7ec f9b0 	bl	80002c8 <__aeabi_dsub>
 8013f68:	460b      	mov	r3, r1
 8013f6a:	4602      	mov	r2, r0
 8013f6c:	493a      	ldr	r1, [pc, #232]	; (8014058 <__ieee754_pow+0xa30>)
 8013f6e:	2000      	movs	r0, #0
 8013f70:	f7ec f9aa 	bl	80002c8 <__aeabi_dsub>
 8013f74:	e9cd 0100 	strd	r0, r1, [sp]
 8013f78:	9b01      	ldr	r3, [sp, #4]
 8013f7a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8013f7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013f82:	da2f      	bge.n	8013fe4 <__ieee754_pow+0x9bc>
 8013f84:	4650      	mov	r0, sl
 8013f86:	ed9d 0b00 	vldr	d0, [sp]
 8013f8a:	f000 f9cd 	bl	8014328 <scalbn>
 8013f8e:	ec51 0b10 	vmov	r0, r1, d0
 8013f92:	ec53 2b18 	vmov	r2, r3, d8
 8013f96:	f7ff bbe0 	b.w	801375a <__ieee754_pow+0x132>
 8013f9a:	4b30      	ldr	r3, [pc, #192]	; (801405c <__ieee754_pow+0xa34>)
 8013f9c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8013fa0:	429e      	cmp	r6, r3
 8013fa2:	f77f af0b 	ble.w	8013dbc <__ieee754_pow+0x794>
 8013fa6:	4b2e      	ldr	r3, [pc, #184]	; (8014060 <__ieee754_pow+0xa38>)
 8013fa8:	440b      	add	r3, r1
 8013faa:	4303      	orrs	r3, r0
 8013fac:	d00b      	beq.n	8013fc6 <__ieee754_pow+0x99e>
 8013fae:	a326      	add	r3, pc, #152	; (adr r3, 8014048 <__ieee754_pow+0xa20>)
 8013fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fb4:	ec51 0b18 	vmov	r0, r1, d8
 8013fb8:	f7ec fb3e 	bl	8000638 <__aeabi_dmul>
 8013fbc:	a322      	add	r3, pc, #136	; (adr r3, 8014048 <__ieee754_pow+0xa20>)
 8013fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fc2:	f7ff bbca 	b.w	801375a <__ieee754_pow+0x132>
 8013fc6:	4622      	mov	r2, r4
 8013fc8:	462b      	mov	r3, r5
 8013fca:	f7ec f97d 	bl	80002c8 <__aeabi_dsub>
 8013fce:	4642      	mov	r2, r8
 8013fd0:	464b      	mov	r3, r9
 8013fd2:	f7ec fdb7 	bl	8000b44 <__aeabi_dcmpge>
 8013fd6:	2800      	cmp	r0, #0
 8013fd8:	f43f aef0 	beq.w	8013dbc <__ieee754_pow+0x794>
 8013fdc:	e7e7      	b.n	8013fae <__ieee754_pow+0x986>
 8013fde:	f04f 0a00 	mov.w	sl, #0
 8013fe2:	e717      	b.n	8013e14 <__ieee754_pow+0x7ec>
 8013fe4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013fe8:	4619      	mov	r1, r3
 8013fea:	e7d2      	b.n	8013f92 <__ieee754_pow+0x96a>
 8013fec:	491a      	ldr	r1, [pc, #104]	; (8014058 <__ieee754_pow+0xa30>)
 8013fee:	2000      	movs	r0, #0
 8013ff0:	f7ff bb9e 	b.w	8013730 <__ieee754_pow+0x108>
 8013ff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013ff8:	f7ff bb9a 	b.w	8013730 <__ieee754_pow+0x108>
 8013ffc:	9000      	str	r0, [sp, #0]
 8013ffe:	f7ff bb76 	b.w	80136ee <__ieee754_pow+0xc6>
 8014002:	2100      	movs	r1, #0
 8014004:	f7ff bb60 	b.w	80136c8 <__ieee754_pow+0xa0>
 8014008:	00000000 	.word	0x00000000
 801400c:	3fe62e43 	.word	0x3fe62e43
 8014010:	fefa39ef 	.word	0xfefa39ef
 8014014:	3fe62e42 	.word	0x3fe62e42
 8014018:	0ca86c39 	.word	0x0ca86c39
 801401c:	be205c61 	.word	0xbe205c61
 8014020:	72bea4d0 	.word	0x72bea4d0
 8014024:	3e663769 	.word	0x3e663769
 8014028:	c5d26bf1 	.word	0xc5d26bf1
 801402c:	3ebbbd41 	.word	0x3ebbbd41
 8014030:	af25de2c 	.word	0xaf25de2c
 8014034:	3f11566a 	.word	0x3f11566a
 8014038:	16bebd93 	.word	0x16bebd93
 801403c:	3f66c16c 	.word	0x3f66c16c
 8014040:	5555553e 	.word	0x5555553e
 8014044:	3fc55555 	.word	0x3fc55555
 8014048:	c2f8f359 	.word	0xc2f8f359
 801404c:	01a56e1f 	.word	0x01a56e1f
 8014050:	3fe00000 	.word	0x3fe00000
 8014054:	000fffff 	.word	0x000fffff
 8014058:	3ff00000 	.word	0x3ff00000
 801405c:	4090cbff 	.word	0x4090cbff
 8014060:	3f6f3400 	.word	0x3f6f3400
 8014064:	652b82fe 	.word	0x652b82fe
 8014068:	3c971547 	.word	0x3c971547

0801406c <__ieee754_sqrt>:
 801406c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014070:	ec55 4b10 	vmov	r4, r5, d0
 8014074:	4e56      	ldr	r6, [pc, #344]	; (80141d0 <__ieee754_sqrt+0x164>)
 8014076:	43ae      	bics	r6, r5
 8014078:	ee10 0a10 	vmov	r0, s0
 801407c:	ee10 3a10 	vmov	r3, s0
 8014080:	4629      	mov	r1, r5
 8014082:	462a      	mov	r2, r5
 8014084:	d110      	bne.n	80140a8 <__ieee754_sqrt+0x3c>
 8014086:	ee10 2a10 	vmov	r2, s0
 801408a:	462b      	mov	r3, r5
 801408c:	f7ec fad4 	bl	8000638 <__aeabi_dmul>
 8014090:	4602      	mov	r2, r0
 8014092:	460b      	mov	r3, r1
 8014094:	4620      	mov	r0, r4
 8014096:	4629      	mov	r1, r5
 8014098:	f7ec f918 	bl	80002cc <__adddf3>
 801409c:	4604      	mov	r4, r0
 801409e:	460d      	mov	r5, r1
 80140a0:	ec45 4b10 	vmov	d0, r4, r5
 80140a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140a8:	2d00      	cmp	r5, #0
 80140aa:	dc10      	bgt.n	80140ce <__ieee754_sqrt+0x62>
 80140ac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80140b0:	4330      	orrs	r0, r6
 80140b2:	d0f5      	beq.n	80140a0 <__ieee754_sqrt+0x34>
 80140b4:	b15d      	cbz	r5, 80140ce <__ieee754_sqrt+0x62>
 80140b6:	ee10 2a10 	vmov	r2, s0
 80140ba:	462b      	mov	r3, r5
 80140bc:	ee10 0a10 	vmov	r0, s0
 80140c0:	f7ec f902 	bl	80002c8 <__aeabi_dsub>
 80140c4:	4602      	mov	r2, r0
 80140c6:	460b      	mov	r3, r1
 80140c8:	f7ec fbe0 	bl	800088c <__aeabi_ddiv>
 80140cc:	e7e6      	b.n	801409c <__ieee754_sqrt+0x30>
 80140ce:	1509      	asrs	r1, r1, #20
 80140d0:	d076      	beq.n	80141c0 <__ieee754_sqrt+0x154>
 80140d2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80140d6:	07ce      	lsls	r6, r1, #31
 80140d8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80140dc:	bf5e      	ittt	pl
 80140de:	0fda      	lsrpl	r2, r3, #31
 80140e0:	005b      	lslpl	r3, r3, #1
 80140e2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80140e6:	0fda      	lsrs	r2, r3, #31
 80140e8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80140ec:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80140f0:	2000      	movs	r0, #0
 80140f2:	106d      	asrs	r5, r5, #1
 80140f4:	005b      	lsls	r3, r3, #1
 80140f6:	f04f 0e16 	mov.w	lr, #22
 80140fa:	4684      	mov	ip, r0
 80140fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014100:	eb0c 0401 	add.w	r4, ip, r1
 8014104:	4294      	cmp	r4, r2
 8014106:	bfde      	ittt	le
 8014108:	1b12      	suble	r2, r2, r4
 801410a:	eb04 0c01 	addle.w	ip, r4, r1
 801410e:	1840      	addle	r0, r0, r1
 8014110:	0052      	lsls	r2, r2, #1
 8014112:	f1be 0e01 	subs.w	lr, lr, #1
 8014116:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801411a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801411e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014122:	d1ed      	bne.n	8014100 <__ieee754_sqrt+0x94>
 8014124:	4671      	mov	r1, lr
 8014126:	2720      	movs	r7, #32
 8014128:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801412c:	4562      	cmp	r2, ip
 801412e:	eb04 060e 	add.w	r6, r4, lr
 8014132:	dc02      	bgt.n	801413a <__ieee754_sqrt+0xce>
 8014134:	d113      	bne.n	801415e <__ieee754_sqrt+0xf2>
 8014136:	429e      	cmp	r6, r3
 8014138:	d811      	bhi.n	801415e <__ieee754_sqrt+0xf2>
 801413a:	2e00      	cmp	r6, #0
 801413c:	eb06 0e04 	add.w	lr, r6, r4
 8014140:	da43      	bge.n	80141ca <__ieee754_sqrt+0x15e>
 8014142:	f1be 0f00 	cmp.w	lr, #0
 8014146:	db40      	blt.n	80141ca <__ieee754_sqrt+0x15e>
 8014148:	f10c 0801 	add.w	r8, ip, #1
 801414c:	eba2 020c 	sub.w	r2, r2, ip
 8014150:	429e      	cmp	r6, r3
 8014152:	bf88      	it	hi
 8014154:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8014158:	1b9b      	subs	r3, r3, r6
 801415a:	4421      	add	r1, r4
 801415c:	46c4      	mov	ip, r8
 801415e:	0052      	lsls	r2, r2, #1
 8014160:	3f01      	subs	r7, #1
 8014162:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8014166:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801416a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801416e:	d1dd      	bne.n	801412c <__ieee754_sqrt+0xc0>
 8014170:	4313      	orrs	r3, r2
 8014172:	d006      	beq.n	8014182 <__ieee754_sqrt+0x116>
 8014174:	1c4c      	adds	r4, r1, #1
 8014176:	bf13      	iteet	ne
 8014178:	3101      	addne	r1, #1
 801417a:	3001      	addeq	r0, #1
 801417c:	4639      	moveq	r1, r7
 801417e:	f021 0101 	bicne.w	r1, r1, #1
 8014182:	1043      	asrs	r3, r0, #1
 8014184:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8014188:	0849      	lsrs	r1, r1, #1
 801418a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801418e:	07c2      	lsls	r2, r0, #31
 8014190:	bf48      	it	mi
 8014192:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8014196:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801419a:	460c      	mov	r4, r1
 801419c:	463d      	mov	r5, r7
 801419e:	e77f      	b.n	80140a0 <__ieee754_sqrt+0x34>
 80141a0:	0ada      	lsrs	r2, r3, #11
 80141a2:	3815      	subs	r0, #21
 80141a4:	055b      	lsls	r3, r3, #21
 80141a6:	2a00      	cmp	r2, #0
 80141a8:	d0fa      	beq.n	80141a0 <__ieee754_sqrt+0x134>
 80141aa:	02d7      	lsls	r7, r2, #11
 80141ac:	d50a      	bpl.n	80141c4 <__ieee754_sqrt+0x158>
 80141ae:	f1c1 0420 	rsb	r4, r1, #32
 80141b2:	fa23 f404 	lsr.w	r4, r3, r4
 80141b6:	1e4d      	subs	r5, r1, #1
 80141b8:	408b      	lsls	r3, r1
 80141ba:	4322      	orrs	r2, r4
 80141bc:	1b41      	subs	r1, r0, r5
 80141be:	e788      	b.n	80140d2 <__ieee754_sqrt+0x66>
 80141c0:	4608      	mov	r0, r1
 80141c2:	e7f0      	b.n	80141a6 <__ieee754_sqrt+0x13a>
 80141c4:	0052      	lsls	r2, r2, #1
 80141c6:	3101      	adds	r1, #1
 80141c8:	e7ef      	b.n	80141aa <__ieee754_sqrt+0x13e>
 80141ca:	46e0      	mov	r8, ip
 80141cc:	e7be      	b.n	801414c <__ieee754_sqrt+0xe0>
 80141ce:	bf00      	nop
 80141d0:	7ff00000 	.word	0x7ff00000

080141d4 <fabs>:
 80141d4:	ec51 0b10 	vmov	r0, r1, d0
 80141d8:	ee10 2a10 	vmov	r2, s0
 80141dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80141e0:	ec43 2b10 	vmov	d0, r2, r3
 80141e4:	4770      	bx	lr

080141e6 <finite>:
 80141e6:	b082      	sub	sp, #8
 80141e8:	ed8d 0b00 	vstr	d0, [sp]
 80141ec:	9801      	ldr	r0, [sp, #4]
 80141ee:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80141f2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80141f6:	0fc0      	lsrs	r0, r0, #31
 80141f8:	b002      	add	sp, #8
 80141fa:	4770      	bx	lr
 80141fc:	0000      	movs	r0, r0
	...

08014200 <nan>:
 8014200:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014208 <nan+0x8>
 8014204:	4770      	bx	lr
 8014206:	bf00      	nop
 8014208:	00000000 	.word	0x00000000
 801420c:	7ff80000 	.word	0x7ff80000

08014210 <rint>:
 8014210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014212:	ec51 0b10 	vmov	r0, r1, d0
 8014216:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801421a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801421e:	2e13      	cmp	r6, #19
 8014220:	ee10 4a10 	vmov	r4, s0
 8014224:	460b      	mov	r3, r1
 8014226:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801422a:	dc58      	bgt.n	80142de <rint+0xce>
 801422c:	2e00      	cmp	r6, #0
 801422e:	da2b      	bge.n	8014288 <rint+0x78>
 8014230:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8014234:	4302      	orrs	r2, r0
 8014236:	d023      	beq.n	8014280 <rint+0x70>
 8014238:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801423c:	4302      	orrs	r2, r0
 801423e:	4254      	negs	r4, r2
 8014240:	4314      	orrs	r4, r2
 8014242:	0c4b      	lsrs	r3, r1, #17
 8014244:	0b24      	lsrs	r4, r4, #12
 8014246:	045b      	lsls	r3, r3, #17
 8014248:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801424c:	ea44 0103 	orr.w	r1, r4, r3
 8014250:	4b32      	ldr	r3, [pc, #200]	; (801431c <rint+0x10c>)
 8014252:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014256:	e9d3 6700 	ldrd	r6, r7, [r3]
 801425a:	4602      	mov	r2, r0
 801425c:	460b      	mov	r3, r1
 801425e:	4630      	mov	r0, r6
 8014260:	4639      	mov	r1, r7
 8014262:	f7ec f833 	bl	80002cc <__adddf3>
 8014266:	e9cd 0100 	strd	r0, r1, [sp]
 801426a:	463b      	mov	r3, r7
 801426c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014270:	4632      	mov	r2, r6
 8014272:	f7ec f829 	bl	80002c8 <__aeabi_dsub>
 8014276:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801427a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801427e:	4639      	mov	r1, r7
 8014280:	ec41 0b10 	vmov	d0, r0, r1
 8014284:	b003      	add	sp, #12
 8014286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014288:	4a25      	ldr	r2, [pc, #148]	; (8014320 <rint+0x110>)
 801428a:	4132      	asrs	r2, r6
 801428c:	ea01 0702 	and.w	r7, r1, r2
 8014290:	4307      	orrs	r7, r0
 8014292:	d0f5      	beq.n	8014280 <rint+0x70>
 8014294:	0851      	lsrs	r1, r2, #1
 8014296:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801429a:	4314      	orrs	r4, r2
 801429c:	d00c      	beq.n	80142b8 <rint+0xa8>
 801429e:	ea23 0201 	bic.w	r2, r3, r1
 80142a2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80142a6:	2e13      	cmp	r6, #19
 80142a8:	fa43 f606 	asr.w	r6, r3, r6
 80142ac:	bf0c      	ite	eq
 80142ae:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80142b2:	2400      	movne	r4, #0
 80142b4:	ea42 0306 	orr.w	r3, r2, r6
 80142b8:	4918      	ldr	r1, [pc, #96]	; (801431c <rint+0x10c>)
 80142ba:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80142be:	4622      	mov	r2, r4
 80142c0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80142c4:	4620      	mov	r0, r4
 80142c6:	4629      	mov	r1, r5
 80142c8:	f7ec f800 	bl	80002cc <__adddf3>
 80142cc:	e9cd 0100 	strd	r0, r1, [sp]
 80142d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80142d4:	4622      	mov	r2, r4
 80142d6:	462b      	mov	r3, r5
 80142d8:	f7eb fff6 	bl	80002c8 <__aeabi_dsub>
 80142dc:	e7d0      	b.n	8014280 <rint+0x70>
 80142de:	2e33      	cmp	r6, #51	; 0x33
 80142e0:	dd07      	ble.n	80142f2 <rint+0xe2>
 80142e2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80142e6:	d1cb      	bne.n	8014280 <rint+0x70>
 80142e8:	ee10 2a10 	vmov	r2, s0
 80142ec:	f7eb ffee 	bl	80002cc <__adddf3>
 80142f0:	e7c6      	b.n	8014280 <rint+0x70>
 80142f2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80142f6:	f04f 36ff 	mov.w	r6, #4294967295
 80142fa:	40d6      	lsrs	r6, r2
 80142fc:	4230      	tst	r0, r6
 80142fe:	d0bf      	beq.n	8014280 <rint+0x70>
 8014300:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8014304:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8014308:	bf1f      	itttt	ne
 801430a:	ea24 0101 	bicne.w	r1, r4, r1
 801430e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8014312:	fa44 f202 	asrne.w	r2, r4, r2
 8014316:	ea41 0402 	orrne.w	r4, r1, r2
 801431a:	e7cd      	b.n	80142b8 <rint+0xa8>
 801431c:	0801c678 	.word	0x0801c678
 8014320:	000fffff 	.word	0x000fffff
 8014324:	00000000 	.word	0x00000000

08014328 <scalbn>:
 8014328:	b570      	push	{r4, r5, r6, lr}
 801432a:	ec55 4b10 	vmov	r4, r5, d0
 801432e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8014332:	4606      	mov	r6, r0
 8014334:	462b      	mov	r3, r5
 8014336:	b99a      	cbnz	r2, 8014360 <scalbn+0x38>
 8014338:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801433c:	4323      	orrs	r3, r4
 801433e:	d036      	beq.n	80143ae <scalbn+0x86>
 8014340:	4b39      	ldr	r3, [pc, #228]	; (8014428 <scalbn+0x100>)
 8014342:	4629      	mov	r1, r5
 8014344:	ee10 0a10 	vmov	r0, s0
 8014348:	2200      	movs	r2, #0
 801434a:	f7ec f975 	bl	8000638 <__aeabi_dmul>
 801434e:	4b37      	ldr	r3, [pc, #220]	; (801442c <scalbn+0x104>)
 8014350:	429e      	cmp	r6, r3
 8014352:	4604      	mov	r4, r0
 8014354:	460d      	mov	r5, r1
 8014356:	da10      	bge.n	801437a <scalbn+0x52>
 8014358:	a32b      	add	r3, pc, #172	; (adr r3, 8014408 <scalbn+0xe0>)
 801435a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801435e:	e03a      	b.n	80143d6 <scalbn+0xae>
 8014360:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014364:	428a      	cmp	r2, r1
 8014366:	d10c      	bne.n	8014382 <scalbn+0x5a>
 8014368:	ee10 2a10 	vmov	r2, s0
 801436c:	4620      	mov	r0, r4
 801436e:	4629      	mov	r1, r5
 8014370:	f7eb ffac 	bl	80002cc <__adddf3>
 8014374:	4604      	mov	r4, r0
 8014376:	460d      	mov	r5, r1
 8014378:	e019      	b.n	80143ae <scalbn+0x86>
 801437a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801437e:	460b      	mov	r3, r1
 8014380:	3a36      	subs	r2, #54	; 0x36
 8014382:	4432      	add	r2, r6
 8014384:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014388:	428a      	cmp	r2, r1
 801438a:	dd08      	ble.n	801439e <scalbn+0x76>
 801438c:	2d00      	cmp	r5, #0
 801438e:	a120      	add	r1, pc, #128	; (adr r1, 8014410 <scalbn+0xe8>)
 8014390:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014394:	da1c      	bge.n	80143d0 <scalbn+0xa8>
 8014396:	a120      	add	r1, pc, #128	; (adr r1, 8014418 <scalbn+0xf0>)
 8014398:	e9d1 0100 	ldrd	r0, r1, [r1]
 801439c:	e018      	b.n	80143d0 <scalbn+0xa8>
 801439e:	2a00      	cmp	r2, #0
 80143a0:	dd08      	ble.n	80143b4 <scalbn+0x8c>
 80143a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80143a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80143aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80143ae:	ec45 4b10 	vmov	d0, r4, r5
 80143b2:	bd70      	pop	{r4, r5, r6, pc}
 80143b4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80143b8:	da19      	bge.n	80143ee <scalbn+0xc6>
 80143ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 80143be:	429e      	cmp	r6, r3
 80143c0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80143c4:	dd0a      	ble.n	80143dc <scalbn+0xb4>
 80143c6:	a112      	add	r1, pc, #72	; (adr r1, 8014410 <scalbn+0xe8>)
 80143c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d1e2      	bne.n	8014396 <scalbn+0x6e>
 80143d0:	a30f      	add	r3, pc, #60	; (adr r3, 8014410 <scalbn+0xe8>)
 80143d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143d6:	f7ec f92f 	bl	8000638 <__aeabi_dmul>
 80143da:	e7cb      	b.n	8014374 <scalbn+0x4c>
 80143dc:	a10a      	add	r1, pc, #40	; (adr r1, 8014408 <scalbn+0xe0>)
 80143de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d0b8      	beq.n	8014358 <scalbn+0x30>
 80143e6:	a10e      	add	r1, pc, #56	; (adr r1, 8014420 <scalbn+0xf8>)
 80143e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80143ec:	e7b4      	b.n	8014358 <scalbn+0x30>
 80143ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80143f2:	3236      	adds	r2, #54	; 0x36
 80143f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80143f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80143fc:	4620      	mov	r0, r4
 80143fe:	4b0c      	ldr	r3, [pc, #48]	; (8014430 <scalbn+0x108>)
 8014400:	2200      	movs	r2, #0
 8014402:	e7e8      	b.n	80143d6 <scalbn+0xae>
 8014404:	f3af 8000 	nop.w
 8014408:	c2f8f359 	.word	0xc2f8f359
 801440c:	01a56e1f 	.word	0x01a56e1f
 8014410:	8800759c 	.word	0x8800759c
 8014414:	7e37e43c 	.word	0x7e37e43c
 8014418:	8800759c 	.word	0x8800759c
 801441c:	fe37e43c 	.word	0xfe37e43c
 8014420:	c2f8f359 	.word	0xc2f8f359
 8014424:	81a56e1f 	.word	0x81a56e1f
 8014428:	43500000 	.word	0x43500000
 801442c:	ffff3cb0 	.word	0xffff3cb0
 8014430:	3c900000 	.word	0x3c900000

08014434 <abort>:
 8014434:	b508      	push	{r3, lr}
 8014436:	2006      	movs	r0, #6
 8014438:	f001 fd66 	bl	8015f08 <raise>
 801443c:	2001      	movs	r0, #1
 801443e:	f006 f949 	bl	801a6d4 <_exit>

08014442 <atoi>:
 8014442:	220a      	movs	r2, #10
 8014444:	2100      	movs	r1, #0
 8014446:	f002 bd41 	b.w	8016ecc <strtol>

0801444a <atol>:
 801444a:	220a      	movs	r2, #10
 801444c:	2100      	movs	r1, #0
 801444e:	f002 bd3d 	b.w	8016ecc <strtol>
	...

08014454 <__errno>:
 8014454:	4b01      	ldr	r3, [pc, #4]	; (801445c <__errno+0x8>)
 8014456:	6818      	ldr	r0, [r3, #0]
 8014458:	4770      	bx	lr
 801445a:	bf00      	nop
 801445c:	200000d8 	.word	0x200000d8

08014460 <std>:
 8014460:	2300      	movs	r3, #0
 8014462:	b510      	push	{r4, lr}
 8014464:	4604      	mov	r4, r0
 8014466:	e9c0 3300 	strd	r3, r3, [r0]
 801446a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801446e:	6083      	str	r3, [r0, #8]
 8014470:	8181      	strh	r1, [r0, #12]
 8014472:	6643      	str	r3, [r0, #100]	; 0x64
 8014474:	81c2      	strh	r2, [r0, #14]
 8014476:	6183      	str	r3, [r0, #24]
 8014478:	4619      	mov	r1, r3
 801447a:	2208      	movs	r2, #8
 801447c:	305c      	adds	r0, #92	; 0x5c
 801447e:	f000 fa63 	bl	8014948 <memset>
 8014482:	4b05      	ldr	r3, [pc, #20]	; (8014498 <std+0x38>)
 8014484:	6263      	str	r3, [r4, #36]	; 0x24
 8014486:	4b05      	ldr	r3, [pc, #20]	; (801449c <std+0x3c>)
 8014488:	62a3      	str	r3, [r4, #40]	; 0x28
 801448a:	4b05      	ldr	r3, [pc, #20]	; (80144a0 <std+0x40>)
 801448c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801448e:	4b05      	ldr	r3, [pc, #20]	; (80144a4 <std+0x44>)
 8014490:	6224      	str	r4, [r4, #32]
 8014492:	6323      	str	r3, [r4, #48]	; 0x30
 8014494:	bd10      	pop	{r4, pc}
 8014496:	bf00      	nop
 8014498:	08015fd9 	.word	0x08015fd9
 801449c:	08015fff 	.word	0x08015fff
 80144a0:	08016037 	.word	0x08016037
 80144a4:	0801605b 	.word	0x0801605b

080144a8 <_cleanup_r>:
 80144a8:	4901      	ldr	r1, [pc, #4]	; (80144b0 <_cleanup_r+0x8>)
 80144aa:	f000 b8af 	b.w	801460c <_fwalk_reent>
 80144ae:	bf00      	nop
 80144b0:	08018485 	.word	0x08018485

080144b4 <__sfmoreglue>:
 80144b4:	b570      	push	{r4, r5, r6, lr}
 80144b6:	1e4a      	subs	r2, r1, #1
 80144b8:	2568      	movs	r5, #104	; 0x68
 80144ba:	4355      	muls	r5, r2
 80144bc:	460e      	mov	r6, r1
 80144be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80144c2:	f000 fd17 	bl	8014ef4 <_malloc_r>
 80144c6:	4604      	mov	r4, r0
 80144c8:	b140      	cbz	r0, 80144dc <__sfmoreglue+0x28>
 80144ca:	2100      	movs	r1, #0
 80144cc:	e9c0 1600 	strd	r1, r6, [r0]
 80144d0:	300c      	adds	r0, #12
 80144d2:	60a0      	str	r0, [r4, #8]
 80144d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80144d8:	f000 fa36 	bl	8014948 <memset>
 80144dc:	4620      	mov	r0, r4
 80144de:	bd70      	pop	{r4, r5, r6, pc}

080144e0 <__sfp_lock_acquire>:
 80144e0:	4801      	ldr	r0, [pc, #4]	; (80144e8 <__sfp_lock_acquire+0x8>)
 80144e2:	f000 b9f5 	b.w	80148d0 <__retarget_lock_acquire_recursive>
 80144e6:	bf00      	nop
 80144e8:	20006550 	.word	0x20006550

080144ec <__sfp_lock_release>:
 80144ec:	4801      	ldr	r0, [pc, #4]	; (80144f4 <__sfp_lock_release+0x8>)
 80144ee:	f000 b9f1 	b.w	80148d4 <__retarget_lock_release_recursive>
 80144f2:	bf00      	nop
 80144f4:	20006550 	.word	0x20006550

080144f8 <__sinit_lock_acquire>:
 80144f8:	4801      	ldr	r0, [pc, #4]	; (8014500 <__sinit_lock_acquire+0x8>)
 80144fa:	f000 b9e9 	b.w	80148d0 <__retarget_lock_acquire_recursive>
 80144fe:	bf00      	nop
 8014500:	2000654b 	.word	0x2000654b

08014504 <__sinit_lock_release>:
 8014504:	4801      	ldr	r0, [pc, #4]	; (801450c <__sinit_lock_release+0x8>)
 8014506:	f000 b9e5 	b.w	80148d4 <__retarget_lock_release_recursive>
 801450a:	bf00      	nop
 801450c:	2000654b 	.word	0x2000654b

08014510 <__sinit>:
 8014510:	b510      	push	{r4, lr}
 8014512:	4604      	mov	r4, r0
 8014514:	f7ff fff0 	bl	80144f8 <__sinit_lock_acquire>
 8014518:	69a3      	ldr	r3, [r4, #24]
 801451a:	b11b      	cbz	r3, 8014524 <__sinit+0x14>
 801451c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014520:	f7ff bff0 	b.w	8014504 <__sinit_lock_release>
 8014524:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014528:	6523      	str	r3, [r4, #80]	; 0x50
 801452a:	4b13      	ldr	r3, [pc, #76]	; (8014578 <__sinit+0x68>)
 801452c:	4a13      	ldr	r2, [pc, #76]	; (801457c <__sinit+0x6c>)
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	62a2      	str	r2, [r4, #40]	; 0x28
 8014532:	42a3      	cmp	r3, r4
 8014534:	bf04      	itt	eq
 8014536:	2301      	moveq	r3, #1
 8014538:	61a3      	streq	r3, [r4, #24]
 801453a:	4620      	mov	r0, r4
 801453c:	f000 f820 	bl	8014580 <__sfp>
 8014540:	6060      	str	r0, [r4, #4]
 8014542:	4620      	mov	r0, r4
 8014544:	f000 f81c 	bl	8014580 <__sfp>
 8014548:	60a0      	str	r0, [r4, #8]
 801454a:	4620      	mov	r0, r4
 801454c:	f000 f818 	bl	8014580 <__sfp>
 8014550:	2200      	movs	r2, #0
 8014552:	60e0      	str	r0, [r4, #12]
 8014554:	2104      	movs	r1, #4
 8014556:	6860      	ldr	r0, [r4, #4]
 8014558:	f7ff ff82 	bl	8014460 <std>
 801455c:	68a0      	ldr	r0, [r4, #8]
 801455e:	2201      	movs	r2, #1
 8014560:	2109      	movs	r1, #9
 8014562:	f7ff ff7d 	bl	8014460 <std>
 8014566:	68e0      	ldr	r0, [r4, #12]
 8014568:	2202      	movs	r2, #2
 801456a:	2112      	movs	r1, #18
 801456c:	f7ff ff78 	bl	8014460 <std>
 8014570:	2301      	movs	r3, #1
 8014572:	61a3      	str	r3, [r4, #24]
 8014574:	e7d2      	b.n	801451c <__sinit+0xc>
 8014576:	bf00      	nop
 8014578:	0801c7ec 	.word	0x0801c7ec
 801457c:	080144a9 	.word	0x080144a9

08014580 <__sfp>:
 8014580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014582:	4607      	mov	r7, r0
 8014584:	f7ff ffac 	bl	80144e0 <__sfp_lock_acquire>
 8014588:	4b1e      	ldr	r3, [pc, #120]	; (8014604 <__sfp+0x84>)
 801458a:	681e      	ldr	r6, [r3, #0]
 801458c:	69b3      	ldr	r3, [r6, #24]
 801458e:	b913      	cbnz	r3, 8014596 <__sfp+0x16>
 8014590:	4630      	mov	r0, r6
 8014592:	f7ff ffbd 	bl	8014510 <__sinit>
 8014596:	3648      	adds	r6, #72	; 0x48
 8014598:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801459c:	3b01      	subs	r3, #1
 801459e:	d503      	bpl.n	80145a8 <__sfp+0x28>
 80145a0:	6833      	ldr	r3, [r6, #0]
 80145a2:	b30b      	cbz	r3, 80145e8 <__sfp+0x68>
 80145a4:	6836      	ldr	r6, [r6, #0]
 80145a6:	e7f7      	b.n	8014598 <__sfp+0x18>
 80145a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80145ac:	b9d5      	cbnz	r5, 80145e4 <__sfp+0x64>
 80145ae:	4b16      	ldr	r3, [pc, #88]	; (8014608 <__sfp+0x88>)
 80145b0:	60e3      	str	r3, [r4, #12]
 80145b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80145b6:	6665      	str	r5, [r4, #100]	; 0x64
 80145b8:	f000 f988 	bl	80148cc <__retarget_lock_init_recursive>
 80145bc:	f7ff ff96 	bl	80144ec <__sfp_lock_release>
 80145c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80145c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80145c8:	6025      	str	r5, [r4, #0]
 80145ca:	61a5      	str	r5, [r4, #24]
 80145cc:	2208      	movs	r2, #8
 80145ce:	4629      	mov	r1, r5
 80145d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80145d4:	f000 f9b8 	bl	8014948 <memset>
 80145d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80145dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80145e0:	4620      	mov	r0, r4
 80145e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145e4:	3468      	adds	r4, #104	; 0x68
 80145e6:	e7d9      	b.n	801459c <__sfp+0x1c>
 80145e8:	2104      	movs	r1, #4
 80145ea:	4638      	mov	r0, r7
 80145ec:	f7ff ff62 	bl	80144b4 <__sfmoreglue>
 80145f0:	4604      	mov	r4, r0
 80145f2:	6030      	str	r0, [r6, #0]
 80145f4:	2800      	cmp	r0, #0
 80145f6:	d1d5      	bne.n	80145a4 <__sfp+0x24>
 80145f8:	f7ff ff78 	bl	80144ec <__sfp_lock_release>
 80145fc:	230c      	movs	r3, #12
 80145fe:	603b      	str	r3, [r7, #0]
 8014600:	e7ee      	b.n	80145e0 <__sfp+0x60>
 8014602:	bf00      	nop
 8014604:	0801c7ec 	.word	0x0801c7ec
 8014608:	ffff0001 	.word	0xffff0001

0801460c <_fwalk_reent>:
 801460c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014610:	4606      	mov	r6, r0
 8014612:	4688      	mov	r8, r1
 8014614:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014618:	2700      	movs	r7, #0
 801461a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801461e:	f1b9 0901 	subs.w	r9, r9, #1
 8014622:	d505      	bpl.n	8014630 <_fwalk_reent+0x24>
 8014624:	6824      	ldr	r4, [r4, #0]
 8014626:	2c00      	cmp	r4, #0
 8014628:	d1f7      	bne.n	801461a <_fwalk_reent+0xe>
 801462a:	4638      	mov	r0, r7
 801462c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014630:	89ab      	ldrh	r3, [r5, #12]
 8014632:	2b01      	cmp	r3, #1
 8014634:	d907      	bls.n	8014646 <_fwalk_reent+0x3a>
 8014636:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801463a:	3301      	adds	r3, #1
 801463c:	d003      	beq.n	8014646 <_fwalk_reent+0x3a>
 801463e:	4629      	mov	r1, r5
 8014640:	4630      	mov	r0, r6
 8014642:	47c0      	blx	r8
 8014644:	4307      	orrs	r7, r0
 8014646:	3568      	adds	r5, #104	; 0x68
 8014648:	e7e9      	b.n	801461e <_fwalk_reent+0x12>
	...

0801464c <__libc_init_array>:
 801464c:	b570      	push	{r4, r5, r6, lr}
 801464e:	4d0d      	ldr	r5, [pc, #52]	; (8014684 <__libc_init_array+0x38>)
 8014650:	4c0d      	ldr	r4, [pc, #52]	; (8014688 <__libc_init_array+0x3c>)
 8014652:	1b64      	subs	r4, r4, r5
 8014654:	10a4      	asrs	r4, r4, #2
 8014656:	2600      	movs	r6, #0
 8014658:	42a6      	cmp	r6, r4
 801465a:	d109      	bne.n	8014670 <__libc_init_array+0x24>
 801465c:	4d0b      	ldr	r5, [pc, #44]	; (801468c <__libc_init_array+0x40>)
 801465e:	4c0c      	ldr	r4, [pc, #48]	; (8014690 <__libc_init_array+0x44>)
 8014660:	f006 f83a 	bl	801a6d8 <_init>
 8014664:	1b64      	subs	r4, r4, r5
 8014666:	10a4      	asrs	r4, r4, #2
 8014668:	2600      	movs	r6, #0
 801466a:	42a6      	cmp	r6, r4
 801466c:	d105      	bne.n	801467a <__libc_init_array+0x2e>
 801466e:	bd70      	pop	{r4, r5, r6, pc}
 8014670:	f855 3b04 	ldr.w	r3, [r5], #4
 8014674:	4798      	blx	r3
 8014676:	3601      	adds	r6, #1
 8014678:	e7ee      	b.n	8014658 <__libc_init_array+0xc>
 801467a:	f855 3b04 	ldr.w	r3, [r5], #4
 801467e:	4798      	blx	r3
 8014680:	3601      	adds	r6, #1
 8014682:	e7f2      	b.n	801466a <__libc_init_array+0x1e>
 8014684:	0801cd18 	.word	0x0801cd18
 8014688:	0801cd18 	.word	0x0801cd18
 801468c:	0801cd18 	.word	0x0801cd18
 8014690:	0801cd20 	.word	0x0801cd20

08014694 <isxdigit>:
 8014694:	4b02      	ldr	r3, [pc, #8]	; (80146a0 <isxdigit+0xc>)
 8014696:	4418      	add	r0, r3
 8014698:	7840      	ldrb	r0, [r0, #1]
 801469a:	f000 0044 	and.w	r0, r0, #68	; 0x44
 801469e:	4770      	bx	lr
 80146a0:	0801c688 	.word	0x0801c688

080146a4 <localtime>:
 80146a4:	b538      	push	{r3, r4, r5, lr}
 80146a6:	4b0b      	ldr	r3, [pc, #44]	; (80146d4 <localtime+0x30>)
 80146a8:	681d      	ldr	r5, [r3, #0]
 80146aa:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80146ac:	4604      	mov	r4, r0
 80146ae:	b953      	cbnz	r3, 80146c6 <localtime+0x22>
 80146b0:	2024      	movs	r0, #36	; 0x24
 80146b2:	f000 f911 	bl	80148d8 <malloc>
 80146b6:	4602      	mov	r2, r0
 80146b8:	63e8      	str	r0, [r5, #60]	; 0x3c
 80146ba:	b920      	cbnz	r0, 80146c6 <localtime+0x22>
 80146bc:	4b06      	ldr	r3, [pc, #24]	; (80146d8 <localtime+0x34>)
 80146be:	4807      	ldr	r0, [pc, #28]	; (80146dc <localtime+0x38>)
 80146c0:	2132      	movs	r1, #50	; 0x32
 80146c2:	f002 ff9d 	bl	8017600 <__assert_func>
 80146c6:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80146c8:	4620      	mov	r0, r4
 80146ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80146ce:	f000 b807 	b.w	80146e0 <localtime_r>
 80146d2:	bf00      	nop
 80146d4:	200000d8 	.word	0x200000d8
 80146d8:	0801c7f0 	.word	0x0801c7f0
 80146dc:	0801c807 	.word	0x0801c807

080146e0 <localtime_r>:
 80146e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80146e4:	4607      	mov	r7, r0
 80146e6:	9101      	str	r1, [sp, #4]
 80146e8:	f004 facc 	bl	8018c84 <__gettzinfo>
 80146ec:	9901      	ldr	r1, [sp, #4]
 80146ee:	4680      	mov	r8, r0
 80146f0:	4638      	mov	r0, r7
 80146f2:	f004 facb 	bl	8018c8c <gmtime_r>
 80146f6:	6943      	ldr	r3, [r0, #20]
 80146f8:	079a      	lsls	r2, r3, #30
 80146fa:	4604      	mov	r4, r0
 80146fc:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 8014700:	d105      	bne.n	801470e <localtime_r+0x2e>
 8014702:	2264      	movs	r2, #100	; 0x64
 8014704:	fb96 f3f2 	sdiv	r3, r6, r2
 8014708:	fb02 6313 	mls	r3, r2, r3, r6
 801470c:	bb7b      	cbnz	r3, 801476e <localtime_r+0x8e>
 801470e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8014712:	fb96 f5f3 	sdiv	r5, r6, r3
 8014716:	fb03 6515 	mls	r5, r3, r5, r6
 801471a:	fab5 f585 	clz	r5, r5
 801471e:	096d      	lsrs	r5, r5, #5
 8014720:	4b68      	ldr	r3, [pc, #416]	; (80148c4 <localtime_r+0x1e4>)
 8014722:	2230      	movs	r2, #48	; 0x30
 8014724:	fb02 3505 	mla	r5, r2, r5, r3
 8014728:	f002 fd0a 	bl	8017140 <__tz_lock>
 801472c:	f002 fd14 	bl	8017158 <_tzset_unlocked>
 8014730:	4b65      	ldr	r3, [pc, #404]	; (80148c8 <localtime_r+0x1e8>)
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	b353      	cbz	r3, 801478c <localtime_r+0xac>
 8014736:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801473a:	42b3      	cmp	r3, r6
 801473c:	d119      	bne.n	8014772 <localtime_r+0x92>
 801473e:	f8d8 1000 	ldr.w	r1, [r8]
 8014742:	e9d7 6700 	ldrd	r6, r7, [r7]
 8014746:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801474a:	b9d1      	cbnz	r1, 8014782 <localtime_r+0xa2>
 801474c:	4296      	cmp	r6, r2
 801474e:	eb77 0303 	sbcs.w	r3, r7, r3
 8014752:	da23      	bge.n	801479c <localtime_r+0xbc>
 8014754:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8014758:	4296      	cmp	r6, r2
 801475a:	eb77 0303 	sbcs.w	r3, r7, r3
 801475e:	bfb4      	ite	lt
 8014760:	2301      	movlt	r3, #1
 8014762:	2300      	movge	r3, #0
 8014764:	6223      	str	r3, [r4, #32]
 8014766:	db1b      	blt.n	80147a0 <localtime_r+0xc0>
 8014768:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 801476c:	e01a      	b.n	80147a4 <localtime_r+0xc4>
 801476e:	2501      	movs	r5, #1
 8014770:	e7d6      	b.n	8014720 <localtime_r+0x40>
 8014772:	4630      	mov	r0, r6
 8014774:	f002 fc3c 	bl	8016ff0 <__tzcalc_limits>
 8014778:	2800      	cmp	r0, #0
 801477a:	d1e0      	bne.n	801473e <localtime_r+0x5e>
 801477c:	f04f 33ff 	mov.w	r3, #4294967295
 8014780:	e004      	b.n	801478c <localtime_r+0xac>
 8014782:	4296      	cmp	r6, r2
 8014784:	eb77 0303 	sbcs.w	r3, r7, r3
 8014788:	da02      	bge.n	8014790 <localtime_r+0xb0>
 801478a:	2300      	movs	r3, #0
 801478c:	6223      	str	r3, [r4, #32]
 801478e:	e7eb      	b.n	8014768 <localtime_r+0x88>
 8014790:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8014794:	4296      	cmp	r6, r2
 8014796:	eb77 0303 	sbcs.w	r3, r7, r3
 801479a:	daf6      	bge.n	801478a <localtime_r+0xaa>
 801479c:	2301      	movs	r3, #1
 801479e:	6223      	str	r3, [r4, #32]
 80147a0:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 80147a4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80147a8:	203c      	movs	r0, #60	; 0x3c
 80147aa:	fb91 f6f3 	sdiv	r6, r1, r3
 80147ae:	fb03 1316 	mls	r3, r3, r6, r1
 80147b2:	6861      	ldr	r1, [r4, #4]
 80147b4:	fb93 f2f0 	sdiv	r2, r3, r0
 80147b8:	fb00 3012 	mls	r0, r0, r2, r3
 80147bc:	6823      	ldr	r3, [r4, #0]
 80147be:	1a89      	subs	r1, r1, r2
 80147c0:	68a2      	ldr	r2, [r4, #8]
 80147c2:	6061      	str	r1, [r4, #4]
 80147c4:	1a1b      	subs	r3, r3, r0
 80147c6:	1b92      	subs	r2, r2, r6
 80147c8:	2b3b      	cmp	r3, #59	; 0x3b
 80147ca:	6023      	str	r3, [r4, #0]
 80147cc:	60a2      	str	r2, [r4, #8]
 80147ce:	dd35      	ble.n	801483c <localtime_r+0x15c>
 80147d0:	3101      	adds	r1, #1
 80147d2:	6061      	str	r1, [r4, #4]
 80147d4:	3b3c      	subs	r3, #60	; 0x3c
 80147d6:	6023      	str	r3, [r4, #0]
 80147d8:	6863      	ldr	r3, [r4, #4]
 80147da:	2b3b      	cmp	r3, #59	; 0x3b
 80147dc:	dd34      	ble.n	8014848 <localtime_r+0x168>
 80147de:	3201      	adds	r2, #1
 80147e0:	60a2      	str	r2, [r4, #8]
 80147e2:	3b3c      	subs	r3, #60	; 0x3c
 80147e4:	6063      	str	r3, [r4, #4]
 80147e6:	68a3      	ldr	r3, [r4, #8]
 80147e8:	2b17      	cmp	r3, #23
 80147ea:	dd33      	ble.n	8014854 <localtime_r+0x174>
 80147ec:	69e2      	ldr	r2, [r4, #28]
 80147ee:	3201      	adds	r2, #1
 80147f0:	61e2      	str	r2, [r4, #28]
 80147f2:	69a2      	ldr	r2, [r4, #24]
 80147f4:	3201      	adds	r2, #1
 80147f6:	2a06      	cmp	r2, #6
 80147f8:	bfc8      	it	gt
 80147fa:	2200      	movgt	r2, #0
 80147fc:	61a2      	str	r2, [r4, #24]
 80147fe:	68e2      	ldr	r2, [r4, #12]
 8014800:	3b18      	subs	r3, #24
 8014802:	3201      	adds	r2, #1
 8014804:	60a3      	str	r3, [r4, #8]
 8014806:	6923      	ldr	r3, [r4, #16]
 8014808:	60e2      	str	r2, [r4, #12]
 801480a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801480e:	428a      	cmp	r2, r1
 8014810:	dd0e      	ble.n	8014830 <localtime_r+0x150>
 8014812:	2b0b      	cmp	r3, #11
 8014814:	eba2 0201 	sub.w	r2, r2, r1
 8014818:	60e2      	str	r2, [r4, #12]
 801481a:	f103 0201 	add.w	r2, r3, #1
 801481e:	bf09      	itett	eq
 8014820:	6963      	ldreq	r3, [r4, #20]
 8014822:	6122      	strne	r2, [r4, #16]
 8014824:	2200      	moveq	r2, #0
 8014826:	3301      	addeq	r3, #1
 8014828:	bf02      	ittt	eq
 801482a:	6122      	streq	r2, [r4, #16]
 801482c:	6163      	streq	r3, [r4, #20]
 801482e:	61e2      	streq	r2, [r4, #28]
 8014830:	f002 fc8c 	bl	801714c <__tz_unlock>
 8014834:	4620      	mov	r0, r4
 8014836:	b002      	add	sp, #8
 8014838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801483c:	2b00      	cmp	r3, #0
 801483e:	dacb      	bge.n	80147d8 <localtime_r+0xf8>
 8014840:	3901      	subs	r1, #1
 8014842:	6061      	str	r1, [r4, #4]
 8014844:	333c      	adds	r3, #60	; 0x3c
 8014846:	e7c6      	b.n	80147d6 <localtime_r+0xf6>
 8014848:	2b00      	cmp	r3, #0
 801484a:	dacc      	bge.n	80147e6 <localtime_r+0x106>
 801484c:	3a01      	subs	r2, #1
 801484e:	60a2      	str	r2, [r4, #8]
 8014850:	333c      	adds	r3, #60	; 0x3c
 8014852:	e7c7      	b.n	80147e4 <localtime_r+0x104>
 8014854:	2b00      	cmp	r3, #0
 8014856:	daeb      	bge.n	8014830 <localtime_r+0x150>
 8014858:	69e2      	ldr	r2, [r4, #28]
 801485a:	3a01      	subs	r2, #1
 801485c:	61e2      	str	r2, [r4, #28]
 801485e:	69a2      	ldr	r2, [r4, #24]
 8014860:	3a01      	subs	r2, #1
 8014862:	bf48      	it	mi
 8014864:	2206      	movmi	r2, #6
 8014866:	61a2      	str	r2, [r4, #24]
 8014868:	68e2      	ldr	r2, [r4, #12]
 801486a:	3318      	adds	r3, #24
 801486c:	3a01      	subs	r2, #1
 801486e:	60e2      	str	r2, [r4, #12]
 8014870:	60a3      	str	r3, [r4, #8]
 8014872:	2a00      	cmp	r2, #0
 8014874:	d1dc      	bne.n	8014830 <localtime_r+0x150>
 8014876:	6923      	ldr	r3, [r4, #16]
 8014878:	3b01      	subs	r3, #1
 801487a:	d405      	bmi.n	8014888 <localtime_r+0x1a8>
 801487c:	6123      	str	r3, [r4, #16]
 801487e:	6923      	ldr	r3, [r4, #16]
 8014880:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8014884:	60e3      	str	r3, [r4, #12]
 8014886:	e7d3      	b.n	8014830 <localtime_r+0x150>
 8014888:	230b      	movs	r3, #11
 801488a:	6123      	str	r3, [r4, #16]
 801488c:	6963      	ldr	r3, [r4, #20]
 801488e:	1e5a      	subs	r2, r3, #1
 8014890:	6162      	str	r2, [r4, #20]
 8014892:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 8014896:	0793      	lsls	r3, r2, #30
 8014898:	d105      	bne.n	80148a6 <localtime_r+0x1c6>
 801489a:	2164      	movs	r1, #100	; 0x64
 801489c:	fb92 f3f1 	sdiv	r3, r2, r1
 80148a0:	fb01 2313 	mls	r3, r1, r3, r2
 80148a4:	b963      	cbnz	r3, 80148c0 <localtime_r+0x1e0>
 80148a6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80148aa:	fb92 f3f1 	sdiv	r3, r2, r1
 80148ae:	fb01 2313 	mls	r3, r1, r3, r2
 80148b2:	fab3 f383 	clz	r3, r3
 80148b6:	095b      	lsrs	r3, r3, #5
 80148b8:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80148bc:	61e3      	str	r3, [r4, #28]
 80148be:	e7de      	b.n	801487e <localtime_r+0x19e>
 80148c0:	2301      	movs	r3, #1
 80148c2:	e7f9      	b.n	80148b8 <localtime_r+0x1d8>
 80148c4:	0801c8c8 	.word	0x0801c8c8
 80148c8:	20005adc 	.word	0x20005adc

080148cc <__retarget_lock_init_recursive>:
 80148cc:	4770      	bx	lr

080148ce <__retarget_lock_acquire>:
 80148ce:	4770      	bx	lr

080148d0 <__retarget_lock_acquire_recursive>:
 80148d0:	4770      	bx	lr

080148d2 <__retarget_lock_release>:
 80148d2:	4770      	bx	lr

080148d4 <__retarget_lock_release_recursive>:
 80148d4:	4770      	bx	lr
	...

080148d8 <malloc>:
 80148d8:	4b02      	ldr	r3, [pc, #8]	; (80148e4 <malloc+0xc>)
 80148da:	4601      	mov	r1, r0
 80148dc:	6818      	ldr	r0, [r3, #0]
 80148de:	f000 bb09 	b.w	8014ef4 <_malloc_r>
 80148e2:	bf00      	nop
 80148e4:	200000d8 	.word	0x200000d8

080148e8 <free>:
 80148e8:	4b02      	ldr	r3, [pc, #8]	; (80148f4 <free+0xc>)
 80148ea:	4601      	mov	r1, r0
 80148ec:	6818      	ldr	r0, [r3, #0]
 80148ee:	f000 bab1 	b.w	8014e54 <_free_r>
 80148f2:	bf00      	nop
 80148f4:	200000d8 	.word	0x200000d8

080148f8 <memcpy>:
 80148f8:	440a      	add	r2, r1
 80148fa:	4291      	cmp	r1, r2
 80148fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8014900:	d100      	bne.n	8014904 <memcpy+0xc>
 8014902:	4770      	bx	lr
 8014904:	b510      	push	{r4, lr}
 8014906:	f811 4b01 	ldrb.w	r4, [r1], #1
 801490a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801490e:	4291      	cmp	r1, r2
 8014910:	d1f9      	bne.n	8014906 <memcpy+0xe>
 8014912:	bd10      	pop	{r4, pc}

08014914 <memmove>:
 8014914:	4288      	cmp	r0, r1
 8014916:	b510      	push	{r4, lr}
 8014918:	eb01 0402 	add.w	r4, r1, r2
 801491c:	d902      	bls.n	8014924 <memmove+0x10>
 801491e:	4284      	cmp	r4, r0
 8014920:	4623      	mov	r3, r4
 8014922:	d807      	bhi.n	8014934 <memmove+0x20>
 8014924:	1e43      	subs	r3, r0, #1
 8014926:	42a1      	cmp	r1, r4
 8014928:	d008      	beq.n	801493c <memmove+0x28>
 801492a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801492e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014932:	e7f8      	b.n	8014926 <memmove+0x12>
 8014934:	4402      	add	r2, r0
 8014936:	4601      	mov	r1, r0
 8014938:	428a      	cmp	r2, r1
 801493a:	d100      	bne.n	801493e <memmove+0x2a>
 801493c:	bd10      	pop	{r4, pc}
 801493e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014942:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014946:	e7f7      	b.n	8014938 <memmove+0x24>

08014948 <memset>:
 8014948:	4402      	add	r2, r0
 801494a:	4603      	mov	r3, r0
 801494c:	4293      	cmp	r3, r2
 801494e:	d100      	bne.n	8014952 <memset+0xa>
 8014950:	4770      	bx	lr
 8014952:	f803 1b01 	strb.w	r1, [r3], #1
 8014956:	e7f9      	b.n	801494c <memset+0x4>

08014958 <validate_structure>:
 8014958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801495a:	6801      	ldr	r1, [r0, #0]
 801495c:	293b      	cmp	r1, #59	; 0x3b
 801495e:	4604      	mov	r4, r0
 8014960:	d911      	bls.n	8014986 <validate_structure+0x2e>
 8014962:	223c      	movs	r2, #60	; 0x3c
 8014964:	4668      	mov	r0, sp
 8014966:	f002 fe79 	bl	801765c <div>
 801496a:	9a01      	ldr	r2, [sp, #4]
 801496c:	6863      	ldr	r3, [r4, #4]
 801496e:	9900      	ldr	r1, [sp, #0]
 8014970:	2a00      	cmp	r2, #0
 8014972:	440b      	add	r3, r1
 8014974:	6063      	str	r3, [r4, #4]
 8014976:	bfbb      	ittet	lt
 8014978:	323c      	addlt	r2, #60	; 0x3c
 801497a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801497e:	6022      	strge	r2, [r4, #0]
 8014980:	6022      	strlt	r2, [r4, #0]
 8014982:	bfb8      	it	lt
 8014984:	6063      	strlt	r3, [r4, #4]
 8014986:	6861      	ldr	r1, [r4, #4]
 8014988:	293b      	cmp	r1, #59	; 0x3b
 801498a:	d911      	bls.n	80149b0 <validate_structure+0x58>
 801498c:	223c      	movs	r2, #60	; 0x3c
 801498e:	4668      	mov	r0, sp
 8014990:	f002 fe64 	bl	801765c <div>
 8014994:	9a01      	ldr	r2, [sp, #4]
 8014996:	68a3      	ldr	r3, [r4, #8]
 8014998:	9900      	ldr	r1, [sp, #0]
 801499a:	2a00      	cmp	r2, #0
 801499c:	440b      	add	r3, r1
 801499e:	60a3      	str	r3, [r4, #8]
 80149a0:	bfbb      	ittet	lt
 80149a2:	323c      	addlt	r2, #60	; 0x3c
 80149a4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80149a8:	6062      	strge	r2, [r4, #4]
 80149aa:	6062      	strlt	r2, [r4, #4]
 80149ac:	bfb8      	it	lt
 80149ae:	60a3      	strlt	r3, [r4, #8]
 80149b0:	68a1      	ldr	r1, [r4, #8]
 80149b2:	2917      	cmp	r1, #23
 80149b4:	d911      	bls.n	80149da <validate_structure+0x82>
 80149b6:	2218      	movs	r2, #24
 80149b8:	4668      	mov	r0, sp
 80149ba:	f002 fe4f 	bl	801765c <div>
 80149be:	9a01      	ldr	r2, [sp, #4]
 80149c0:	68e3      	ldr	r3, [r4, #12]
 80149c2:	9900      	ldr	r1, [sp, #0]
 80149c4:	2a00      	cmp	r2, #0
 80149c6:	440b      	add	r3, r1
 80149c8:	60e3      	str	r3, [r4, #12]
 80149ca:	bfbb      	ittet	lt
 80149cc:	3218      	addlt	r2, #24
 80149ce:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80149d2:	60a2      	strge	r2, [r4, #8]
 80149d4:	60a2      	strlt	r2, [r4, #8]
 80149d6:	bfb8      	it	lt
 80149d8:	60e3      	strlt	r3, [r4, #12]
 80149da:	6921      	ldr	r1, [r4, #16]
 80149dc:	290b      	cmp	r1, #11
 80149de:	d911      	bls.n	8014a04 <validate_structure+0xac>
 80149e0:	220c      	movs	r2, #12
 80149e2:	4668      	mov	r0, sp
 80149e4:	f002 fe3a 	bl	801765c <div>
 80149e8:	9a01      	ldr	r2, [sp, #4]
 80149ea:	6963      	ldr	r3, [r4, #20]
 80149ec:	9900      	ldr	r1, [sp, #0]
 80149ee:	2a00      	cmp	r2, #0
 80149f0:	440b      	add	r3, r1
 80149f2:	6163      	str	r3, [r4, #20]
 80149f4:	bfbb      	ittet	lt
 80149f6:	320c      	addlt	r2, #12
 80149f8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80149fc:	6122      	strge	r2, [r4, #16]
 80149fe:	6122      	strlt	r2, [r4, #16]
 8014a00:	bfb8      	it	lt
 8014a02:	6163      	strlt	r3, [r4, #20]
 8014a04:	6963      	ldr	r3, [r4, #20]
 8014a06:	0799      	lsls	r1, r3, #30
 8014a08:	d120      	bne.n	8014a4c <validate_structure+0xf4>
 8014a0a:	2164      	movs	r1, #100	; 0x64
 8014a0c:	fb93 f2f1 	sdiv	r2, r3, r1
 8014a10:	fb01 3212 	mls	r2, r1, r2, r3
 8014a14:	b9e2      	cbnz	r2, 8014a50 <validate_structure+0xf8>
 8014a16:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8014a1a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8014a1e:	fb93 f2f1 	sdiv	r2, r3, r1
 8014a22:	fb01 3312 	mls	r3, r1, r2, r3
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	bf14      	ite	ne
 8014a2a:	231c      	movne	r3, #28
 8014a2c:	231d      	moveq	r3, #29
 8014a2e:	68e2      	ldr	r2, [r4, #12]
 8014a30:	2a00      	cmp	r2, #0
 8014a32:	dc0f      	bgt.n	8014a54 <validate_structure+0xfc>
 8014a34:	4f33      	ldr	r7, [pc, #204]	; (8014b04 <validate_structure+0x1ac>)
 8014a36:	260b      	movs	r6, #11
 8014a38:	2064      	movs	r0, #100	; 0x64
 8014a3a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8014a3e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8014a42:	f1bc 0f00 	cmp.w	ip, #0
 8014a46:	dd31      	ble.n	8014aac <validate_structure+0x154>
 8014a48:	b003      	add	sp, #12
 8014a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a4c:	231c      	movs	r3, #28
 8014a4e:	e7ee      	b.n	8014a2e <validate_structure+0xd6>
 8014a50:	231d      	movs	r3, #29
 8014a52:	e7ec      	b.n	8014a2e <validate_structure+0xd6>
 8014a54:	4f2b      	ldr	r7, [pc, #172]	; (8014b04 <validate_structure+0x1ac>)
 8014a56:	f04f 0c00 	mov.w	ip, #0
 8014a5a:	2564      	movs	r5, #100	; 0x64
 8014a5c:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8014a60:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8014a64:	2a01      	cmp	r2, #1
 8014a66:	bf14      	ite	ne
 8014a68:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 8014a6c:	4618      	moveq	r0, r3
 8014a6e:	4281      	cmp	r1, r0
 8014a70:	ddea      	ble.n	8014a48 <validate_structure+0xf0>
 8014a72:	3201      	adds	r2, #1
 8014a74:	1a09      	subs	r1, r1, r0
 8014a76:	2a0c      	cmp	r2, #12
 8014a78:	60e1      	str	r1, [r4, #12]
 8014a7a:	6122      	str	r2, [r4, #16]
 8014a7c:	d1f0      	bne.n	8014a60 <validate_structure+0x108>
 8014a7e:	6963      	ldr	r3, [r4, #20]
 8014a80:	1c5a      	adds	r2, r3, #1
 8014a82:	0791      	lsls	r1, r2, #30
 8014a84:	e9c4 c204 	strd	ip, r2, [r4, #16]
 8014a88:	d137      	bne.n	8014afa <validate_structure+0x1a2>
 8014a8a:	fb92 f1f5 	sdiv	r1, r2, r5
 8014a8e:	fb05 2211 	mls	r2, r5, r1, r2
 8014a92:	2a00      	cmp	r2, #0
 8014a94:	d133      	bne.n	8014afe <validate_structure+0x1a6>
 8014a96:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8014a9a:	fb93 f2f6 	sdiv	r2, r3, r6
 8014a9e:	fb06 3312 	mls	r3, r6, r2, r3
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	bf14      	ite	ne
 8014aa6:	231c      	movne	r3, #28
 8014aa8:	231d      	moveq	r3, #29
 8014aaa:	e7d9      	b.n	8014a60 <validate_structure+0x108>
 8014aac:	6921      	ldr	r1, [r4, #16]
 8014aae:	3901      	subs	r1, #1
 8014ab0:	6121      	str	r1, [r4, #16]
 8014ab2:	3101      	adds	r1, #1
 8014ab4:	d114      	bne.n	8014ae0 <validate_structure+0x188>
 8014ab6:	6963      	ldr	r3, [r4, #20]
 8014ab8:	1e59      	subs	r1, r3, #1
 8014aba:	078a      	lsls	r2, r1, #30
 8014abc:	e9c4 6104 	strd	r6, r1, [r4, #16]
 8014ac0:	d117      	bne.n	8014af2 <validate_structure+0x19a>
 8014ac2:	fb91 f2f0 	sdiv	r2, r1, r0
 8014ac6:	fb00 1112 	mls	r1, r0, r2, r1
 8014aca:	b9a1      	cbnz	r1, 8014af6 <validate_structure+0x19e>
 8014acc:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8014ad0:	fb93 f2f5 	sdiv	r2, r3, r5
 8014ad4:	fb05 3312 	mls	r3, r5, r2, r3
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	bf14      	ite	ne
 8014adc:	231c      	movne	r3, #28
 8014ade:	231d      	moveq	r3, #29
 8014ae0:	6922      	ldr	r2, [r4, #16]
 8014ae2:	2a01      	cmp	r2, #1
 8014ae4:	bf14      	ite	ne
 8014ae6:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8014aea:	461a      	moveq	r2, r3
 8014aec:	4462      	add	r2, ip
 8014aee:	60e2      	str	r2, [r4, #12]
 8014af0:	e7a5      	b.n	8014a3e <validate_structure+0xe6>
 8014af2:	231c      	movs	r3, #28
 8014af4:	e7f4      	b.n	8014ae0 <validate_structure+0x188>
 8014af6:	231d      	movs	r3, #29
 8014af8:	e7f2      	b.n	8014ae0 <validate_structure+0x188>
 8014afa:	231c      	movs	r3, #28
 8014afc:	e7b0      	b.n	8014a60 <validate_structure+0x108>
 8014afe:	231d      	movs	r3, #29
 8014b00:	e7ae      	b.n	8014a60 <validate_structure+0x108>
 8014b02:	bf00      	nop
 8014b04:	0801c868 	.word	0x0801c868

08014b08 <mktime>:
 8014b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b0c:	b08b      	sub	sp, #44	; 0x2c
 8014b0e:	4605      	mov	r5, r0
 8014b10:	f004 f8b8 	bl	8018c84 <__gettzinfo>
 8014b14:	4607      	mov	r7, r0
 8014b16:	4628      	mov	r0, r5
 8014b18:	f7ff ff1e 	bl	8014958 <validate_structure>
 8014b1c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014b20:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 8014b24:	68a8      	ldr	r0, [r5, #8]
 8014b26:	696e      	ldr	r6, [r5, #20]
 8014b28:	fb0a 2303 	mla	r3, sl, r3, r2
 8014b2c:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 8014b30:	fb0a 3a00 	mla	sl, sl, r0, r3
 8014b34:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 8014b38:	4ac3      	ldr	r2, [pc, #780]	; (8014e48 <mktime+0x340>)
 8014b3a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8014b3e:	3c01      	subs	r4, #1
 8014b40:	2b01      	cmp	r3, #1
 8014b42:	4414      	add	r4, r2
 8014b44:	dd11      	ble.n	8014b6a <mktime+0x62>
 8014b46:	07b1      	lsls	r1, r6, #30
 8014b48:	d10f      	bne.n	8014b6a <mktime+0x62>
 8014b4a:	2264      	movs	r2, #100	; 0x64
 8014b4c:	fb96 f3f2 	sdiv	r3, r6, r2
 8014b50:	fb02 6313 	mls	r3, r2, r3, r6
 8014b54:	b943      	cbnz	r3, 8014b68 <mktime+0x60>
 8014b56:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8014b5a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8014b5e:	fb91 f3f2 	sdiv	r3, r1, r2
 8014b62:	fb02 1313 	mls	r3, r2, r3, r1
 8014b66:	b903      	cbnz	r3, 8014b6a <mktime+0x62>
 8014b68:	3401      	adds	r4, #1
 8014b6a:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8014b6e:	3310      	adds	r3, #16
 8014b70:	f644 6220 	movw	r2, #20000	; 0x4e20
 8014b74:	4293      	cmp	r3, r2
 8014b76:	61ec      	str	r4, [r5, #28]
 8014b78:	f200 8161 	bhi.w	8014e3e <mktime+0x336>
 8014b7c:	2e46      	cmp	r6, #70	; 0x46
 8014b7e:	dd77      	ble.n	8014c70 <mktime+0x168>
 8014b80:	2346      	movs	r3, #70	; 0x46
 8014b82:	f240 1e6d 	movw	lr, #365	; 0x16d
 8014b86:	2164      	movs	r1, #100	; 0x64
 8014b88:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8014b8c:	079a      	lsls	r2, r3, #30
 8014b8e:	d169      	bne.n	8014c64 <mktime+0x15c>
 8014b90:	fb93 f2f1 	sdiv	r2, r3, r1
 8014b94:	fb01 3212 	mls	r2, r1, r2, r3
 8014b98:	2a00      	cmp	r2, #0
 8014b9a:	d166      	bne.n	8014c6a <mktime+0x162>
 8014b9c:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8014ba0:	fb9c f2f0 	sdiv	r2, ip, r0
 8014ba4:	fb00 c212 	mls	r2, r0, r2, ip
 8014ba8:	2a00      	cmp	r2, #0
 8014baa:	bf14      	ite	ne
 8014bac:	4672      	movne	r2, lr
 8014bae:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8014bb2:	3301      	adds	r3, #1
 8014bb4:	429e      	cmp	r6, r3
 8014bb6:	4414      	add	r4, r2
 8014bb8:	d1e8      	bne.n	8014b8c <mktime+0x84>
 8014bba:	4ba4      	ldr	r3, [pc, #656]	; (8014e4c <mktime+0x344>)
 8014bbc:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8014bc0:	fbc3 ab04 	smlal	sl, fp, r3, r4
 8014bc4:	f002 fabc 	bl	8017140 <__tz_lock>
 8014bc8:	f002 fac6 	bl	8017158 <_tzset_unlocked>
 8014bcc:	4ba0      	ldr	r3, [pc, #640]	; (8014e50 <mktime+0x348>)
 8014bce:	f8d3 9000 	ldr.w	r9, [r3]
 8014bd2:	f1b9 0f00 	cmp.w	r9, #0
 8014bd6:	d03f      	beq.n	8014c58 <mktime+0x150>
 8014bd8:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8014bdc:	6968      	ldr	r0, [r5, #20]
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	f1b9 0f01 	cmp.w	r9, #1
 8014be4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8014be8:	46c8      	mov	r8, r9
 8014bea:	bfa8      	it	ge
 8014bec:	f04f 0801 	movge.w	r8, #1
 8014bf0:	4283      	cmp	r3, r0
 8014bf2:	d17f      	bne.n	8014cf4 <mktime+0x1ec>
 8014bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014bf6:	4619      	mov	r1, r3
 8014bf8:	17da      	asrs	r2, r3, #31
 8014bfa:	e9cd 1200 	strd	r1, r2, [sp]
 8014bfe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8014c02:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8014c06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c0c:	1a80      	subs	r0, r0, r2
 8014c0e:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 8014c12:	4582      	cmp	sl, r0
 8014c14:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014c18:	eb7b 0101 	sbcs.w	r1, fp, r1
 8014c1c:	da71      	bge.n	8014d02 <mktime+0x1fa>
 8014c1e:	9800      	ldr	r0, [sp, #0]
 8014c20:	6a39      	ldr	r1, [r7, #32]
 8014c22:	1a09      	subs	r1, r1, r0
 8014c24:	9104      	str	r1, [sp, #16]
 8014c26:	9801      	ldr	r0, [sp, #4]
 8014c28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014c2a:	eb61 0100 	sbc.w	r1, r1, r0
 8014c2e:	9105      	str	r1, [sp, #20]
 8014c30:	6839      	ldr	r1, [r7, #0]
 8014c32:	2900      	cmp	r1, #0
 8014c34:	d075      	beq.n	8014d22 <mktime+0x21a>
 8014c36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014c3a:	4582      	cmp	sl, r0
 8014c3c:	eb7b 0101 	sbcs.w	r1, fp, r1
 8014c40:	db05      	blt.n	8014c4e <mktime+0x146>
 8014c42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014c46:	4582      	cmp	sl, r0
 8014c48:	eb7b 0101 	sbcs.w	r1, fp, r1
 8014c4c:	db6f      	blt.n	8014d2e <mktime+0x226>
 8014c4e:	f1b9 0f00 	cmp.w	r9, #0
 8014c52:	f04f 0900 	mov.w	r9, #0
 8014c56:	da6f      	bge.n	8014d38 <mktime+0x230>
 8014c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c5a:	eb1a 0a03 	adds.w	sl, sl, r3
 8014c5e:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8014c62:	e0ae      	b.n	8014dc2 <mktime+0x2ba>
 8014c64:	f240 126d 	movw	r2, #365	; 0x16d
 8014c68:	e7a3      	b.n	8014bb2 <mktime+0xaa>
 8014c6a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8014c6e:	e7a0      	b.n	8014bb2 <mktime+0xaa>
 8014c70:	d0a3      	beq.n	8014bba <mktime+0xb2>
 8014c72:	2345      	movs	r3, #69	; 0x45
 8014c74:	f240 1e6d 	movw	lr, #365	; 0x16d
 8014c78:	2164      	movs	r1, #100	; 0x64
 8014c7a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8014c7e:	e012      	b.n	8014ca6 <mktime+0x19e>
 8014c80:	bb62      	cbnz	r2, 8014cdc <mktime+0x1d4>
 8014c82:	fb93 f2f1 	sdiv	r2, r3, r1
 8014c86:	fb01 3212 	mls	r2, r1, r2, r3
 8014c8a:	bb52      	cbnz	r2, 8014ce2 <mktime+0x1da>
 8014c8c:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8014c90:	fb9c f2f0 	sdiv	r2, ip, r0
 8014c94:	fb00 c212 	mls	r2, r0, r2, ip
 8014c98:	2a00      	cmp	r2, #0
 8014c9a:	bf14      	ite	ne
 8014c9c:	4672      	movne	r2, lr
 8014c9e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8014ca2:	1aa4      	subs	r4, r4, r2
 8014ca4:	3b01      	subs	r3, #1
 8014ca6:	429e      	cmp	r6, r3
 8014ca8:	f003 0203 	and.w	r2, r3, #3
 8014cac:	dbe8      	blt.n	8014c80 <mktime+0x178>
 8014cae:	b9da      	cbnz	r2, 8014ce8 <mktime+0x1e0>
 8014cb0:	2264      	movs	r2, #100	; 0x64
 8014cb2:	fb96 f3f2 	sdiv	r3, r6, r2
 8014cb6:	fb02 6313 	mls	r3, r2, r3, r6
 8014cba:	b9c3      	cbnz	r3, 8014cee <mktime+0x1e6>
 8014cbc:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8014cc0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8014cc4:	fb91 f3f2 	sdiv	r3, r1, r2
 8014cc8:	fb02 1313 	mls	r3, r2, r3, r1
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	f240 136d 	movw	r3, #365	; 0x16d
 8014cd2:	bf08      	it	eq
 8014cd4:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8014cd8:	1ae4      	subs	r4, r4, r3
 8014cda:	e76e      	b.n	8014bba <mktime+0xb2>
 8014cdc:	f240 126d 	movw	r2, #365	; 0x16d
 8014ce0:	e7df      	b.n	8014ca2 <mktime+0x19a>
 8014ce2:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8014ce6:	e7dc      	b.n	8014ca2 <mktime+0x19a>
 8014ce8:	f240 136d 	movw	r3, #365	; 0x16d
 8014cec:	e7f4      	b.n	8014cd8 <mktime+0x1d0>
 8014cee:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8014cf2:	e7f1      	b.n	8014cd8 <mktime+0x1d0>
 8014cf4:	f002 f97c 	bl	8016ff0 <__tzcalc_limits>
 8014cf8:	2800      	cmp	r0, #0
 8014cfa:	f47f af7b 	bne.w	8014bf4 <mktime+0xec>
 8014cfe:	46c1      	mov	r9, r8
 8014d00:	e054      	b.n	8014dac <mktime+0x2a4>
 8014d02:	9800      	ldr	r0, [sp, #0]
 8014d04:	9902      	ldr	r1, [sp, #8]
 8014d06:	1a09      	subs	r1, r1, r0
 8014d08:	9108      	str	r1, [sp, #32]
 8014d0a:	9801      	ldr	r0, [sp, #4]
 8014d0c:	9903      	ldr	r1, [sp, #12]
 8014d0e:	eb61 0100 	sbc.w	r1, r1, r0
 8014d12:	9109      	str	r1, [sp, #36]	; 0x24
 8014d14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014d18:	4582      	cmp	sl, r0
 8014d1a:	eb7b 0101 	sbcs.w	r1, fp, r1
 8014d1e:	dbee      	blt.n	8014cfe <mktime+0x1f6>
 8014d20:	e77d      	b.n	8014c1e <mktime+0x116>
 8014d22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014d26:	4582      	cmp	sl, r0
 8014d28:	eb7b 0101 	sbcs.w	r1, fp, r1
 8014d2c:	db89      	blt.n	8014c42 <mktime+0x13a>
 8014d2e:	f1b9 0f00 	cmp.w	r9, #0
 8014d32:	db3f      	blt.n	8014db4 <mktime+0x2ac>
 8014d34:	f04f 0901 	mov.w	r9, #1
 8014d38:	ea88 0809 	eor.w	r8, r8, r9
 8014d3c:	f1b8 0f01 	cmp.w	r8, #1
 8014d40:	d134      	bne.n	8014dac <mktime+0x2a4>
 8014d42:	f1b9 0f00 	cmp.w	r9, #0
 8014d46:	d04f      	beq.n	8014de8 <mktime+0x2e0>
 8014d48:	1ad3      	subs	r3, r2, r3
 8014d4a:	682a      	ldr	r2, [r5, #0]
 8014d4c:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8014d50:	441a      	add	r2, r3
 8014d52:	eb1a 0a03 	adds.w	sl, sl, r3
 8014d56:	602a      	str	r2, [r5, #0]
 8014d58:	4628      	mov	r0, r5
 8014d5a:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8014d5e:	f7ff fdfb 	bl	8014958 <validate_structure>
 8014d62:	68ea      	ldr	r2, [r5, #12]
 8014d64:	ebb2 0208 	subs.w	r2, r2, r8
 8014d68:	d020      	beq.n	8014dac <mktime+0x2a4>
 8014d6a:	2a01      	cmp	r2, #1
 8014d6c:	dc3e      	bgt.n	8014dec <mktime+0x2e4>
 8014d6e:	1c90      	adds	r0, r2, #2
 8014d70:	bfd8      	it	le
 8014d72:	2201      	movle	r2, #1
 8014d74:	69eb      	ldr	r3, [r5, #28]
 8014d76:	18d3      	adds	r3, r2, r3
 8014d78:	4414      	add	r4, r2
 8014d7a:	d540      	bpl.n	8014dfe <mktime+0x2f6>
 8014d7c:	1e72      	subs	r2, r6, #1
 8014d7e:	0791      	lsls	r1, r2, #30
 8014d80:	d137      	bne.n	8014df2 <mktime+0x2ea>
 8014d82:	2164      	movs	r1, #100	; 0x64
 8014d84:	fb92 f3f1 	sdiv	r3, r2, r1
 8014d88:	fb01 2313 	mls	r3, r1, r3, r2
 8014d8c:	bba3      	cbnz	r3, 8014df8 <mktime+0x2f0>
 8014d8e:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8014d92:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8014d96:	fb96 f3f2 	sdiv	r3, r6, r2
 8014d9a:	fb02 6613 	mls	r6, r2, r3, r6
 8014d9e:	2e00      	cmp	r6, #0
 8014da0:	f240 136d 	movw	r3, #365	; 0x16d
 8014da4:	bf18      	it	ne
 8014da6:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8014daa:	61eb      	str	r3, [r5, #28]
 8014dac:	f1b9 0f01 	cmp.w	r9, #1
 8014db0:	f47f af52 	bne.w	8014c58 <mktime+0x150>
 8014db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014db6:	eb1a 0a03 	adds.w	sl, sl, r3
 8014dba:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8014dbe:	f04f 0901 	mov.w	r9, #1
 8014dc2:	f002 f9c3 	bl	801714c <__tz_unlock>
 8014dc6:	3404      	adds	r4, #4
 8014dc8:	2307      	movs	r3, #7
 8014dca:	fb94 f3f3 	sdiv	r3, r4, r3
 8014dce:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8014dd2:	1ae4      	subs	r4, r4, r3
 8014dd4:	bf48      	it	mi
 8014dd6:	3407      	addmi	r4, #7
 8014dd8:	f8c5 9020 	str.w	r9, [r5, #32]
 8014ddc:	61ac      	str	r4, [r5, #24]
 8014dde:	4650      	mov	r0, sl
 8014de0:	4659      	mov	r1, fp
 8014de2:	b00b      	add	sp, #44	; 0x2c
 8014de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014de8:	1a9b      	subs	r3, r3, r2
 8014dea:	e7ae      	b.n	8014d4a <mktime+0x242>
 8014dec:	f04f 32ff 	mov.w	r2, #4294967295
 8014df0:	e7c0      	b.n	8014d74 <mktime+0x26c>
 8014df2:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8014df6:	e7d8      	b.n	8014daa <mktime+0x2a2>
 8014df8:	f240 136d 	movw	r3, #365	; 0x16d
 8014dfc:	e7d5      	b.n	8014daa <mktime+0x2a2>
 8014dfe:	07b2      	lsls	r2, r6, #30
 8014e00:	d117      	bne.n	8014e32 <mktime+0x32a>
 8014e02:	2164      	movs	r1, #100	; 0x64
 8014e04:	fb96 f2f1 	sdiv	r2, r6, r1
 8014e08:	fb01 6212 	mls	r2, r1, r2, r6
 8014e0c:	b9a2      	cbnz	r2, 8014e38 <mktime+0x330>
 8014e0e:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8014e12:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8014e16:	fb96 f2f1 	sdiv	r2, r6, r1
 8014e1a:	fb01 6612 	mls	r6, r1, r2, r6
 8014e1e:	2e00      	cmp	r6, #0
 8014e20:	f240 126d 	movw	r2, #365	; 0x16d
 8014e24:	bf08      	it	eq
 8014e26:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8014e2a:	4293      	cmp	r3, r2
 8014e2c:	bfa8      	it	ge
 8014e2e:	1a9b      	subge	r3, r3, r2
 8014e30:	e7bb      	b.n	8014daa <mktime+0x2a2>
 8014e32:	f240 126d 	movw	r2, #365	; 0x16d
 8014e36:	e7f8      	b.n	8014e2a <mktime+0x322>
 8014e38:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8014e3c:	e7f5      	b.n	8014e2a <mktime+0x322>
 8014e3e:	f04f 3aff 	mov.w	sl, #4294967295
 8014e42:	f04f 3bff 	mov.w	fp, #4294967295
 8014e46:	e7ca      	b.n	8014dde <mktime+0x2d6>
 8014e48:	0801c898 	.word	0x0801c898
 8014e4c:	00015180 	.word	0x00015180
 8014e50:	20005adc 	.word	0x20005adc

08014e54 <_free_r>:
 8014e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014e56:	2900      	cmp	r1, #0
 8014e58:	d048      	beq.n	8014eec <_free_r+0x98>
 8014e5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014e5e:	9001      	str	r0, [sp, #4]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	f1a1 0404 	sub.w	r4, r1, #4
 8014e66:	bfb8      	it	lt
 8014e68:	18e4      	addlt	r4, r4, r3
 8014e6a:	f004 f84b 	bl	8018f04 <__malloc_lock>
 8014e6e:	4a20      	ldr	r2, [pc, #128]	; (8014ef0 <_free_r+0x9c>)
 8014e70:	9801      	ldr	r0, [sp, #4]
 8014e72:	6813      	ldr	r3, [r2, #0]
 8014e74:	4615      	mov	r5, r2
 8014e76:	b933      	cbnz	r3, 8014e86 <_free_r+0x32>
 8014e78:	6063      	str	r3, [r4, #4]
 8014e7a:	6014      	str	r4, [r2, #0]
 8014e7c:	b003      	add	sp, #12
 8014e7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014e82:	f004 b845 	b.w	8018f10 <__malloc_unlock>
 8014e86:	42a3      	cmp	r3, r4
 8014e88:	d90b      	bls.n	8014ea2 <_free_r+0x4e>
 8014e8a:	6821      	ldr	r1, [r4, #0]
 8014e8c:	1862      	adds	r2, r4, r1
 8014e8e:	4293      	cmp	r3, r2
 8014e90:	bf04      	itt	eq
 8014e92:	681a      	ldreq	r2, [r3, #0]
 8014e94:	685b      	ldreq	r3, [r3, #4]
 8014e96:	6063      	str	r3, [r4, #4]
 8014e98:	bf04      	itt	eq
 8014e9a:	1852      	addeq	r2, r2, r1
 8014e9c:	6022      	streq	r2, [r4, #0]
 8014e9e:	602c      	str	r4, [r5, #0]
 8014ea0:	e7ec      	b.n	8014e7c <_free_r+0x28>
 8014ea2:	461a      	mov	r2, r3
 8014ea4:	685b      	ldr	r3, [r3, #4]
 8014ea6:	b10b      	cbz	r3, 8014eac <_free_r+0x58>
 8014ea8:	42a3      	cmp	r3, r4
 8014eaa:	d9fa      	bls.n	8014ea2 <_free_r+0x4e>
 8014eac:	6811      	ldr	r1, [r2, #0]
 8014eae:	1855      	adds	r5, r2, r1
 8014eb0:	42a5      	cmp	r5, r4
 8014eb2:	d10b      	bne.n	8014ecc <_free_r+0x78>
 8014eb4:	6824      	ldr	r4, [r4, #0]
 8014eb6:	4421      	add	r1, r4
 8014eb8:	1854      	adds	r4, r2, r1
 8014eba:	42a3      	cmp	r3, r4
 8014ebc:	6011      	str	r1, [r2, #0]
 8014ebe:	d1dd      	bne.n	8014e7c <_free_r+0x28>
 8014ec0:	681c      	ldr	r4, [r3, #0]
 8014ec2:	685b      	ldr	r3, [r3, #4]
 8014ec4:	6053      	str	r3, [r2, #4]
 8014ec6:	4421      	add	r1, r4
 8014ec8:	6011      	str	r1, [r2, #0]
 8014eca:	e7d7      	b.n	8014e7c <_free_r+0x28>
 8014ecc:	d902      	bls.n	8014ed4 <_free_r+0x80>
 8014ece:	230c      	movs	r3, #12
 8014ed0:	6003      	str	r3, [r0, #0]
 8014ed2:	e7d3      	b.n	8014e7c <_free_r+0x28>
 8014ed4:	6825      	ldr	r5, [r4, #0]
 8014ed6:	1961      	adds	r1, r4, r5
 8014ed8:	428b      	cmp	r3, r1
 8014eda:	bf04      	itt	eq
 8014edc:	6819      	ldreq	r1, [r3, #0]
 8014ede:	685b      	ldreq	r3, [r3, #4]
 8014ee0:	6063      	str	r3, [r4, #4]
 8014ee2:	bf04      	itt	eq
 8014ee4:	1949      	addeq	r1, r1, r5
 8014ee6:	6021      	streq	r1, [r4, #0]
 8014ee8:	6054      	str	r4, [r2, #4]
 8014eea:	e7c7      	b.n	8014e7c <_free_r+0x28>
 8014eec:	b003      	add	sp, #12
 8014eee:	bd30      	pop	{r4, r5, pc}
 8014ef0:	20005ab8 	.word	0x20005ab8

08014ef4 <_malloc_r>:
 8014ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ef6:	1ccd      	adds	r5, r1, #3
 8014ef8:	f025 0503 	bic.w	r5, r5, #3
 8014efc:	3508      	adds	r5, #8
 8014efe:	2d0c      	cmp	r5, #12
 8014f00:	bf38      	it	cc
 8014f02:	250c      	movcc	r5, #12
 8014f04:	2d00      	cmp	r5, #0
 8014f06:	4606      	mov	r6, r0
 8014f08:	db01      	blt.n	8014f0e <_malloc_r+0x1a>
 8014f0a:	42a9      	cmp	r1, r5
 8014f0c:	d903      	bls.n	8014f16 <_malloc_r+0x22>
 8014f0e:	230c      	movs	r3, #12
 8014f10:	6033      	str	r3, [r6, #0]
 8014f12:	2000      	movs	r0, #0
 8014f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f16:	f003 fff5 	bl	8018f04 <__malloc_lock>
 8014f1a:	4921      	ldr	r1, [pc, #132]	; (8014fa0 <_malloc_r+0xac>)
 8014f1c:	680a      	ldr	r2, [r1, #0]
 8014f1e:	4614      	mov	r4, r2
 8014f20:	b99c      	cbnz	r4, 8014f4a <_malloc_r+0x56>
 8014f22:	4f20      	ldr	r7, [pc, #128]	; (8014fa4 <_malloc_r+0xb0>)
 8014f24:	683b      	ldr	r3, [r7, #0]
 8014f26:	b923      	cbnz	r3, 8014f32 <_malloc_r+0x3e>
 8014f28:	4621      	mov	r1, r4
 8014f2a:	4630      	mov	r0, r6
 8014f2c:	f000 ffae 	bl	8015e8c <_sbrk_r>
 8014f30:	6038      	str	r0, [r7, #0]
 8014f32:	4629      	mov	r1, r5
 8014f34:	4630      	mov	r0, r6
 8014f36:	f000 ffa9 	bl	8015e8c <_sbrk_r>
 8014f3a:	1c43      	adds	r3, r0, #1
 8014f3c:	d123      	bne.n	8014f86 <_malloc_r+0x92>
 8014f3e:	230c      	movs	r3, #12
 8014f40:	6033      	str	r3, [r6, #0]
 8014f42:	4630      	mov	r0, r6
 8014f44:	f003 ffe4 	bl	8018f10 <__malloc_unlock>
 8014f48:	e7e3      	b.n	8014f12 <_malloc_r+0x1e>
 8014f4a:	6823      	ldr	r3, [r4, #0]
 8014f4c:	1b5b      	subs	r3, r3, r5
 8014f4e:	d417      	bmi.n	8014f80 <_malloc_r+0x8c>
 8014f50:	2b0b      	cmp	r3, #11
 8014f52:	d903      	bls.n	8014f5c <_malloc_r+0x68>
 8014f54:	6023      	str	r3, [r4, #0]
 8014f56:	441c      	add	r4, r3
 8014f58:	6025      	str	r5, [r4, #0]
 8014f5a:	e004      	b.n	8014f66 <_malloc_r+0x72>
 8014f5c:	6863      	ldr	r3, [r4, #4]
 8014f5e:	42a2      	cmp	r2, r4
 8014f60:	bf0c      	ite	eq
 8014f62:	600b      	streq	r3, [r1, #0]
 8014f64:	6053      	strne	r3, [r2, #4]
 8014f66:	4630      	mov	r0, r6
 8014f68:	f003 ffd2 	bl	8018f10 <__malloc_unlock>
 8014f6c:	f104 000b 	add.w	r0, r4, #11
 8014f70:	1d23      	adds	r3, r4, #4
 8014f72:	f020 0007 	bic.w	r0, r0, #7
 8014f76:	1ac2      	subs	r2, r0, r3
 8014f78:	d0cc      	beq.n	8014f14 <_malloc_r+0x20>
 8014f7a:	1a1b      	subs	r3, r3, r0
 8014f7c:	50a3      	str	r3, [r4, r2]
 8014f7e:	e7c9      	b.n	8014f14 <_malloc_r+0x20>
 8014f80:	4622      	mov	r2, r4
 8014f82:	6864      	ldr	r4, [r4, #4]
 8014f84:	e7cc      	b.n	8014f20 <_malloc_r+0x2c>
 8014f86:	1cc4      	adds	r4, r0, #3
 8014f88:	f024 0403 	bic.w	r4, r4, #3
 8014f8c:	42a0      	cmp	r0, r4
 8014f8e:	d0e3      	beq.n	8014f58 <_malloc_r+0x64>
 8014f90:	1a21      	subs	r1, r4, r0
 8014f92:	4630      	mov	r0, r6
 8014f94:	f000 ff7a 	bl	8015e8c <_sbrk_r>
 8014f98:	3001      	adds	r0, #1
 8014f9a:	d1dd      	bne.n	8014f58 <_malloc_r+0x64>
 8014f9c:	e7cf      	b.n	8014f3e <_malloc_r+0x4a>
 8014f9e:	bf00      	nop
 8014fa0:	20005ab8 	.word	0x20005ab8
 8014fa4:	20005abc 	.word	0x20005abc

08014fa8 <__cvt>:
 8014fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014fac:	ec55 4b10 	vmov	r4, r5, d0
 8014fb0:	2d00      	cmp	r5, #0
 8014fb2:	460e      	mov	r6, r1
 8014fb4:	4619      	mov	r1, r3
 8014fb6:	462b      	mov	r3, r5
 8014fb8:	bfbb      	ittet	lt
 8014fba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014fbe:	461d      	movlt	r5, r3
 8014fc0:	2300      	movge	r3, #0
 8014fc2:	232d      	movlt	r3, #45	; 0x2d
 8014fc4:	700b      	strb	r3, [r1, #0]
 8014fc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014fc8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014fcc:	4691      	mov	r9, r2
 8014fce:	f023 0820 	bic.w	r8, r3, #32
 8014fd2:	bfbc      	itt	lt
 8014fd4:	4622      	movlt	r2, r4
 8014fd6:	4614      	movlt	r4, r2
 8014fd8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014fdc:	d005      	beq.n	8014fea <__cvt+0x42>
 8014fde:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8014fe2:	d100      	bne.n	8014fe6 <__cvt+0x3e>
 8014fe4:	3601      	adds	r6, #1
 8014fe6:	2102      	movs	r1, #2
 8014fe8:	e000      	b.n	8014fec <__cvt+0x44>
 8014fea:	2103      	movs	r1, #3
 8014fec:	ab03      	add	r3, sp, #12
 8014fee:	9301      	str	r3, [sp, #4]
 8014ff0:	ab02      	add	r3, sp, #8
 8014ff2:	9300      	str	r3, [sp, #0]
 8014ff4:	ec45 4b10 	vmov	d0, r4, r5
 8014ff8:	4653      	mov	r3, sl
 8014ffa:	4632      	mov	r2, r6
 8014ffc:	f002 fbd0 	bl	80177a0 <_dtoa_r>
 8015000:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8015004:	4607      	mov	r7, r0
 8015006:	d102      	bne.n	801500e <__cvt+0x66>
 8015008:	f019 0f01 	tst.w	r9, #1
 801500c:	d022      	beq.n	8015054 <__cvt+0xac>
 801500e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015012:	eb07 0906 	add.w	r9, r7, r6
 8015016:	d110      	bne.n	801503a <__cvt+0x92>
 8015018:	783b      	ldrb	r3, [r7, #0]
 801501a:	2b30      	cmp	r3, #48	; 0x30
 801501c:	d10a      	bne.n	8015034 <__cvt+0x8c>
 801501e:	2200      	movs	r2, #0
 8015020:	2300      	movs	r3, #0
 8015022:	4620      	mov	r0, r4
 8015024:	4629      	mov	r1, r5
 8015026:	f7eb fd6f 	bl	8000b08 <__aeabi_dcmpeq>
 801502a:	b918      	cbnz	r0, 8015034 <__cvt+0x8c>
 801502c:	f1c6 0601 	rsb	r6, r6, #1
 8015030:	f8ca 6000 	str.w	r6, [sl]
 8015034:	f8da 3000 	ldr.w	r3, [sl]
 8015038:	4499      	add	r9, r3
 801503a:	2200      	movs	r2, #0
 801503c:	2300      	movs	r3, #0
 801503e:	4620      	mov	r0, r4
 8015040:	4629      	mov	r1, r5
 8015042:	f7eb fd61 	bl	8000b08 <__aeabi_dcmpeq>
 8015046:	b108      	cbz	r0, 801504c <__cvt+0xa4>
 8015048:	f8cd 900c 	str.w	r9, [sp, #12]
 801504c:	2230      	movs	r2, #48	; 0x30
 801504e:	9b03      	ldr	r3, [sp, #12]
 8015050:	454b      	cmp	r3, r9
 8015052:	d307      	bcc.n	8015064 <__cvt+0xbc>
 8015054:	9b03      	ldr	r3, [sp, #12]
 8015056:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015058:	1bdb      	subs	r3, r3, r7
 801505a:	4638      	mov	r0, r7
 801505c:	6013      	str	r3, [r2, #0]
 801505e:	b004      	add	sp, #16
 8015060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015064:	1c59      	adds	r1, r3, #1
 8015066:	9103      	str	r1, [sp, #12]
 8015068:	701a      	strb	r2, [r3, #0]
 801506a:	e7f0      	b.n	801504e <__cvt+0xa6>

0801506c <__exponent>:
 801506c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801506e:	4603      	mov	r3, r0
 8015070:	2900      	cmp	r1, #0
 8015072:	bfb8      	it	lt
 8015074:	4249      	neglt	r1, r1
 8015076:	f803 2b02 	strb.w	r2, [r3], #2
 801507a:	bfb4      	ite	lt
 801507c:	222d      	movlt	r2, #45	; 0x2d
 801507e:	222b      	movge	r2, #43	; 0x2b
 8015080:	2909      	cmp	r1, #9
 8015082:	7042      	strb	r2, [r0, #1]
 8015084:	dd2a      	ble.n	80150dc <__exponent+0x70>
 8015086:	f10d 0407 	add.w	r4, sp, #7
 801508a:	46a4      	mov	ip, r4
 801508c:	270a      	movs	r7, #10
 801508e:	46a6      	mov	lr, r4
 8015090:	460a      	mov	r2, r1
 8015092:	fb91 f6f7 	sdiv	r6, r1, r7
 8015096:	fb07 1516 	mls	r5, r7, r6, r1
 801509a:	3530      	adds	r5, #48	; 0x30
 801509c:	2a63      	cmp	r2, #99	; 0x63
 801509e:	f104 34ff 	add.w	r4, r4, #4294967295
 80150a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80150a6:	4631      	mov	r1, r6
 80150a8:	dcf1      	bgt.n	801508e <__exponent+0x22>
 80150aa:	3130      	adds	r1, #48	; 0x30
 80150ac:	f1ae 0502 	sub.w	r5, lr, #2
 80150b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80150b4:	1c44      	adds	r4, r0, #1
 80150b6:	4629      	mov	r1, r5
 80150b8:	4561      	cmp	r1, ip
 80150ba:	d30a      	bcc.n	80150d2 <__exponent+0x66>
 80150bc:	f10d 0209 	add.w	r2, sp, #9
 80150c0:	eba2 020e 	sub.w	r2, r2, lr
 80150c4:	4565      	cmp	r5, ip
 80150c6:	bf88      	it	hi
 80150c8:	2200      	movhi	r2, #0
 80150ca:	4413      	add	r3, r2
 80150cc:	1a18      	subs	r0, r3, r0
 80150ce:	b003      	add	sp, #12
 80150d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80150d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80150da:	e7ed      	b.n	80150b8 <__exponent+0x4c>
 80150dc:	2330      	movs	r3, #48	; 0x30
 80150de:	3130      	adds	r1, #48	; 0x30
 80150e0:	7083      	strb	r3, [r0, #2]
 80150e2:	70c1      	strb	r1, [r0, #3]
 80150e4:	1d03      	adds	r3, r0, #4
 80150e6:	e7f1      	b.n	80150cc <__exponent+0x60>

080150e8 <_printf_float>:
 80150e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150ec:	ed2d 8b02 	vpush	{d8}
 80150f0:	b08d      	sub	sp, #52	; 0x34
 80150f2:	460c      	mov	r4, r1
 80150f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80150f8:	4616      	mov	r6, r2
 80150fa:	461f      	mov	r7, r3
 80150fc:	4605      	mov	r5, r0
 80150fe:	f003 fe75 	bl	8018dec <_localeconv_r>
 8015102:	f8d0 a000 	ldr.w	sl, [r0]
 8015106:	4650      	mov	r0, sl
 8015108:	f7eb f87c 	bl	8000204 <strlen>
 801510c:	2300      	movs	r3, #0
 801510e:	930a      	str	r3, [sp, #40]	; 0x28
 8015110:	6823      	ldr	r3, [r4, #0]
 8015112:	9305      	str	r3, [sp, #20]
 8015114:	f8d8 3000 	ldr.w	r3, [r8]
 8015118:	f894 b018 	ldrb.w	fp, [r4, #24]
 801511c:	3307      	adds	r3, #7
 801511e:	f023 0307 	bic.w	r3, r3, #7
 8015122:	f103 0208 	add.w	r2, r3, #8
 8015126:	f8c8 2000 	str.w	r2, [r8]
 801512a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801512e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015132:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015136:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801513a:	9307      	str	r3, [sp, #28]
 801513c:	f8cd 8018 	str.w	r8, [sp, #24]
 8015140:	ee08 0a10 	vmov	s16, r0
 8015144:	4b9f      	ldr	r3, [pc, #636]	; (80153c4 <_printf_float+0x2dc>)
 8015146:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801514a:	f04f 32ff 	mov.w	r2, #4294967295
 801514e:	f7eb fd0d 	bl	8000b6c <__aeabi_dcmpun>
 8015152:	bb88      	cbnz	r0, 80151b8 <_printf_float+0xd0>
 8015154:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015158:	4b9a      	ldr	r3, [pc, #616]	; (80153c4 <_printf_float+0x2dc>)
 801515a:	f04f 32ff 	mov.w	r2, #4294967295
 801515e:	f7eb fce7 	bl	8000b30 <__aeabi_dcmple>
 8015162:	bb48      	cbnz	r0, 80151b8 <_printf_float+0xd0>
 8015164:	2200      	movs	r2, #0
 8015166:	2300      	movs	r3, #0
 8015168:	4640      	mov	r0, r8
 801516a:	4649      	mov	r1, r9
 801516c:	f7eb fcd6 	bl	8000b1c <__aeabi_dcmplt>
 8015170:	b110      	cbz	r0, 8015178 <_printf_float+0x90>
 8015172:	232d      	movs	r3, #45	; 0x2d
 8015174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015178:	4b93      	ldr	r3, [pc, #588]	; (80153c8 <_printf_float+0x2e0>)
 801517a:	4894      	ldr	r0, [pc, #592]	; (80153cc <_printf_float+0x2e4>)
 801517c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8015180:	bf94      	ite	ls
 8015182:	4698      	movls	r8, r3
 8015184:	4680      	movhi	r8, r0
 8015186:	2303      	movs	r3, #3
 8015188:	6123      	str	r3, [r4, #16]
 801518a:	9b05      	ldr	r3, [sp, #20]
 801518c:	f023 0204 	bic.w	r2, r3, #4
 8015190:	6022      	str	r2, [r4, #0]
 8015192:	f04f 0900 	mov.w	r9, #0
 8015196:	9700      	str	r7, [sp, #0]
 8015198:	4633      	mov	r3, r6
 801519a:	aa0b      	add	r2, sp, #44	; 0x2c
 801519c:	4621      	mov	r1, r4
 801519e:	4628      	mov	r0, r5
 80151a0:	f000 f9d8 	bl	8015554 <_printf_common>
 80151a4:	3001      	adds	r0, #1
 80151a6:	f040 8090 	bne.w	80152ca <_printf_float+0x1e2>
 80151aa:	f04f 30ff 	mov.w	r0, #4294967295
 80151ae:	b00d      	add	sp, #52	; 0x34
 80151b0:	ecbd 8b02 	vpop	{d8}
 80151b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151b8:	4642      	mov	r2, r8
 80151ba:	464b      	mov	r3, r9
 80151bc:	4640      	mov	r0, r8
 80151be:	4649      	mov	r1, r9
 80151c0:	f7eb fcd4 	bl	8000b6c <__aeabi_dcmpun>
 80151c4:	b140      	cbz	r0, 80151d8 <_printf_float+0xf0>
 80151c6:	464b      	mov	r3, r9
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	bfbc      	itt	lt
 80151cc:	232d      	movlt	r3, #45	; 0x2d
 80151ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80151d2:	487f      	ldr	r0, [pc, #508]	; (80153d0 <_printf_float+0x2e8>)
 80151d4:	4b7f      	ldr	r3, [pc, #508]	; (80153d4 <_printf_float+0x2ec>)
 80151d6:	e7d1      	b.n	801517c <_printf_float+0x94>
 80151d8:	6863      	ldr	r3, [r4, #4]
 80151da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80151de:	9206      	str	r2, [sp, #24]
 80151e0:	1c5a      	adds	r2, r3, #1
 80151e2:	d13f      	bne.n	8015264 <_printf_float+0x17c>
 80151e4:	2306      	movs	r3, #6
 80151e6:	6063      	str	r3, [r4, #4]
 80151e8:	9b05      	ldr	r3, [sp, #20]
 80151ea:	6861      	ldr	r1, [r4, #4]
 80151ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80151f0:	2300      	movs	r3, #0
 80151f2:	9303      	str	r3, [sp, #12]
 80151f4:	ab0a      	add	r3, sp, #40	; 0x28
 80151f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80151fa:	ab09      	add	r3, sp, #36	; 0x24
 80151fc:	ec49 8b10 	vmov	d0, r8, r9
 8015200:	9300      	str	r3, [sp, #0]
 8015202:	6022      	str	r2, [r4, #0]
 8015204:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015208:	4628      	mov	r0, r5
 801520a:	f7ff fecd 	bl	8014fa8 <__cvt>
 801520e:	9b06      	ldr	r3, [sp, #24]
 8015210:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015212:	2b47      	cmp	r3, #71	; 0x47
 8015214:	4680      	mov	r8, r0
 8015216:	d108      	bne.n	801522a <_printf_float+0x142>
 8015218:	1cc8      	adds	r0, r1, #3
 801521a:	db02      	blt.n	8015222 <_printf_float+0x13a>
 801521c:	6863      	ldr	r3, [r4, #4]
 801521e:	4299      	cmp	r1, r3
 8015220:	dd41      	ble.n	80152a6 <_printf_float+0x1be>
 8015222:	f1ab 0b02 	sub.w	fp, fp, #2
 8015226:	fa5f fb8b 	uxtb.w	fp, fp
 801522a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801522e:	d820      	bhi.n	8015272 <_printf_float+0x18a>
 8015230:	3901      	subs	r1, #1
 8015232:	465a      	mov	r2, fp
 8015234:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015238:	9109      	str	r1, [sp, #36]	; 0x24
 801523a:	f7ff ff17 	bl	801506c <__exponent>
 801523e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015240:	1813      	adds	r3, r2, r0
 8015242:	2a01      	cmp	r2, #1
 8015244:	4681      	mov	r9, r0
 8015246:	6123      	str	r3, [r4, #16]
 8015248:	dc02      	bgt.n	8015250 <_printf_float+0x168>
 801524a:	6822      	ldr	r2, [r4, #0]
 801524c:	07d2      	lsls	r2, r2, #31
 801524e:	d501      	bpl.n	8015254 <_printf_float+0x16c>
 8015250:	3301      	adds	r3, #1
 8015252:	6123      	str	r3, [r4, #16]
 8015254:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015258:	2b00      	cmp	r3, #0
 801525a:	d09c      	beq.n	8015196 <_printf_float+0xae>
 801525c:	232d      	movs	r3, #45	; 0x2d
 801525e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015262:	e798      	b.n	8015196 <_printf_float+0xae>
 8015264:	9a06      	ldr	r2, [sp, #24]
 8015266:	2a47      	cmp	r2, #71	; 0x47
 8015268:	d1be      	bne.n	80151e8 <_printf_float+0x100>
 801526a:	2b00      	cmp	r3, #0
 801526c:	d1bc      	bne.n	80151e8 <_printf_float+0x100>
 801526e:	2301      	movs	r3, #1
 8015270:	e7b9      	b.n	80151e6 <_printf_float+0xfe>
 8015272:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8015276:	d118      	bne.n	80152aa <_printf_float+0x1c2>
 8015278:	2900      	cmp	r1, #0
 801527a:	6863      	ldr	r3, [r4, #4]
 801527c:	dd0b      	ble.n	8015296 <_printf_float+0x1ae>
 801527e:	6121      	str	r1, [r4, #16]
 8015280:	b913      	cbnz	r3, 8015288 <_printf_float+0x1a0>
 8015282:	6822      	ldr	r2, [r4, #0]
 8015284:	07d0      	lsls	r0, r2, #31
 8015286:	d502      	bpl.n	801528e <_printf_float+0x1a6>
 8015288:	3301      	adds	r3, #1
 801528a:	440b      	add	r3, r1
 801528c:	6123      	str	r3, [r4, #16]
 801528e:	65a1      	str	r1, [r4, #88]	; 0x58
 8015290:	f04f 0900 	mov.w	r9, #0
 8015294:	e7de      	b.n	8015254 <_printf_float+0x16c>
 8015296:	b913      	cbnz	r3, 801529e <_printf_float+0x1b6>
 8015298:	6822      	ldr	r2, [r4, #0]
 801529a:	07d2      	lsls	r2, r2, #31
 801529c:	d501      	bpl.n	80152a2 <_printf_float+0x1ba>
 801529e:	3302      	adds	r3, #2
 80152a0:	e7f4      	b.n	801528c <_printf_float+0x1a4>
 80152a2:	2301      	movs	r3, #1
 80152a4:	e7f2      	b.n	801528c <_printf_float+0x1a4>
 80152a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80152aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80152ac:	4299      	cmp	r1, r3
 80152ae:	db05      	blt.n	80152bc <_printf_float+0x1d4>
 80152b0:	6823      	ldr	r3, [r4, #0]
 80152b2:	6121      	str	r1, [r4, #16]
 80152b4:	07d8      	lsls	r0, r3, #31
 80152b6:	d5ea      	bpl.n	801528e <_printf_float+0x1a6>
 80152b8:	1c4b      	adds	r3, r1, #1
 80152ba:	e7e7      	b.n	801528c <_printf_float+0x1a4>
 80152bc:	2900      	cmp	r1, #0
 80152be:	bfd4      	ite	le
 80152c0:	f1c1 0202 	rsble	r2, r1, #2
 80152c4:	2201      	movgt	r2, #1
 80152c6:	4413      	add	r3, r2
 80152c8:	e7e0      	b.n	801528c <_printf_float+0x1a4>
 80152ca:	6823      	ldr	r3, [r4, #0]
 80152cc:	055a      	lsls	r2, r3, #21
 80152ce:	d407      	bmi.n	80152e0 <_printf_float+0x1f8>
 80152d0:	6923      	ldr	r3, [r4, #16]
 80152d2:	4642      	mov	r2, r8
 80152d4:	4631      	mov	r1, r6
 80152d6:	4628      	mov	r0, r5
 80152d8:	47b8      	blx	r7
 80152da:	3001      	adds	r0, #1
 80152dc:	d12c      	bne.n	8015338 <_printf_float+0x250>
 80152de:	e764      	b.n	80151aa <_printf_float+0xc2>
 80152e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80152e4:	f240 80e0 	bls.w	80154a8 <_printf_float+0x3c0>
 80152e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80152ec:	2200      	movs	r2, #0
 80152ee:	2300      	movs	r3, #0
 80152f0:	f7eb fc0a 	bl	8000b08 <__aeabi_dcmpeq>
 80152f4:	2800      	cmp	r0, #0
 80152f6:	d034      	beq.n	8015362 <_printf_float+0x27a>
 80152f8:	4a37      	ldr	r2, [pc, #220]	; (80153d8 <_printf_float+0x2f0>)
 80152fa:	2301      	movs	r3, #1
 80152fc:	4631      	mov	r1, r6
 80152fe:	4628      	mov	r0, r5
 8015300:	47b8      	blx	r7
 8015302:	3001      	adds	r0, #1
 8015304:	f43f af51 	beq.w	80151aa <_printf_float+0xc2>
 8015308:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801530c:	429a      	cmp	r2, r3
 801530e:	db02      	blt.n	8015316 <_printf_float+0x22e>
 8015310:	6823      	ldr	r3, [r4, #0]
 8015312:	07d8      	lsls	r0, r3, #31
 8015314:	d510      	bpl.n	8015338 <_printf_float+0x250>
 8015316:	ee18 3a10 	vmov	r3, s16
 801531a:	4652      	mov	r2, sl
 801531c:	4631      	mov	r1, r6
 801531e:	4628      	mov	r0, r5
 8015320:	47b8      	blx	r7
 8015322:	3001      	adds	r0, #1
 8015324:	f43f af41 	beq.w	80151aa <_printf_float+0xc2>
 8015328:	f04f 0800 	mov.w	r8, #0
 801532c:	f104 091a 	add.w	r9, r4, #26
 8015330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015332:	3b01      	subs	r3, #1
 8015334:	4543      	cmp	r3, r8
 8015336:	dc09      	bgt.n	801534c <_printf_float+0x264>
 8015338:	6823      	ldr	r3, [r4, #0]
 801533a:	079b      	lsls	r3, r3, #30
 801533c:	f100 8105 	bmi.w	801554a <_printf_float+0x462>
 8015340:	68e0      	ldr	r0, [r4, #12]
 8015342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015344:	4298      	cmp	r0, r3
 8015346:	bfb8      	it	lt
 8015348:	4618      	movlt	r0, r3
 801534a:	e730      	b.n	80151ae <_printf_float+0xc6>
 801534c:	2301      	movs	r3, #1
 801534e:	464a      	mov	r2, r9
 8015350:	4631      	mov	r1, r6
 8015352:	4628      	mov	r0, r5
 8015354:	47b8      	blx	r7
 8015356:	3001      	adds	r0, #1
 8015358:	f43f af27 	beq.w	80151aa <_printf_float+0xc2>
 801535c:	f108 0801 	add.w	r8, r8, #1
 8015360:	e7e6      	b.n	8015330 <_printf_float+0x248>
 8015362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015364:	2b00      	cmp	r3, #0
 8015366:	dc39      	bgt.n	80153dc <_printf_float+0x2f4>
 8015368:	4a1b      	ldr	r2, [pc, #108]	; (80153d8 <_printf_float+0x2f0>)
 801536a:	2301      	movs	r3, #1
 801536c:	4631      	mov	r1, r6
 801536e:	4628      	mov	r0, r5
 8015370:	47b8      	blx	r7
 8015372:	3001      	adds	r0, #1
 8015374:	f43f af19 	beq.w	80151aa <_printf_float+0xc2>
 8015378:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801537c:	4313      	orrs	r3, r2
 801537e:	d102      	bne.n	8015386 <_printf_float+0x29e>
 8015380:	6823      	ldr	r3, [r4, #0]
 8015382:	07d9      	lsls	r1, r3, #31
 8015384:	d5d8      	bpl.n	8015338 <_printf_float+0x250>
 8015386:	ee18 3a10 	vmov	r3, s16
 801538a:	4652      	mov	r2, sl
 801538c:	4631      	mov	r1, r6
 801538e:	4628      	mov	r0, r5
 8015390:	47b8      	blx	r7
 8015392:	3001      	adds	r0, #1
 8015394:	f43f af09 	beq.w	80151aa <_printf_float+0xc2>
 8015398:	f04f 0900 	mov.w	r9, #0
 801539c:	f104 0a1a 	add.w	sl, r4, #26
 80153a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153a2:	425b      	negs	r3, r3
 80153a4:	454b      	cmp	r3, r9
 80153a6:	dc01      	bgt.n	80153ac <_printf_float+0x2c4>
 80153a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80153aa:	e792      	b.n	80152d2 <_printf_float+0x1ea>
 80153ac:	2301      	movs	r3, #1
 80153ae:	4652      	mov	r2, sl
 80153b0:	4631      	mov	r1, r6
 80153b2:	4628      	mov	r0, r5
 80153b4:	47b8      	blx	r7
 80153b6:	3001      	adds	r0, #1
 80153b8:	f43f aef7 	beq.w	80151aa <_printf_float+0xc2>
 80153bc:	f109 0901 	add.w	r9, r9, #1
 80153c0:	e7ee      	b.n	80153a0 <_printf_float+0x2b8>
 80153c2:	bf00      	nop
 80153c4:	7fefffff 	.word	0x7fefffff
 80153c8:	0801c928 	.word	0x0801c928
 80153cc:	0801c92c 	.word	0x0801c92c
 80153d0:	0801c934 	.word	0x0801c934
 80153d4:	0801c930 	.word	0x0801c930
 80153d8:	0801ccf9 	.word	0x0801ccf9
 80153dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80153de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80153e0:	429a      	cmp	r2, r3
 80153e2:	bfa8      	it	ge
 80153e4:	461a      	movge	r2, r3
 80153e6:	2a00      	cmp	r2, #0
 80153e8:	4691      	mov	r9, r2
 80153ea:	dc37      	bgt.n	801545c <_printf_float+0x374>
 80153ec:	f04f 0b00 	mov.w	fp, #0
 80153f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80153f4:	f104 021a 	add.w	r2, r4, #26
 80153f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80153fa:	9305      	str	r3, [sp, #20]
 80153fc:	eba3 0309 	sub.w	r3, r3, r9
 8015400:	455b      	cmp	r3, fp
 8015402:	dc33      	bgt.n	801546c <_printf_float+0x384>
 8015404:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015408:	429a      	cmp	r2, r3
 801540a:	db3b      	blt.n	8015484 <_printf_float+0x39c>
 801540c:	6823      	ldr	r3, [r4, #0]
 801540e:	07da      	lsls	r2, r3, #31
 8015410:	d438      	bmi.n	8015484 <_printf_float+0x39c>
 8015412:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015414:	9b05      	ldr	r3, [sp, #20]
 8015416:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015418:	1ad3      	subs	r3, r2, r3
 801541a:	eba2 0901 	sub.w	r9, r2, r1
 801541e:	4599      	cmp	r9, r3
 8015420:	bfa8      	it	ge
 8015422:	4699      	movge	r9, r3
 8015424:	f1b9 0f00 	cmp.w	r9, #0
 8015428:	dc35      	bgt.n	8015496 <_printf_float+0x3ae>
 801542a:	f04f 0800 	mov.w	r8, #0
 801542e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015432:	f104 0a1a 	add.w	sl, r4, #26
 8015436:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801543a:	1a9b      	subs	r3, r3, r2
 801543c:	eba3 0309 	sub.w	r3, r3, r9
 8015440:	4543      	cmp	r3, r8
 8015442:	f77f af79 	ble.w	8015338 <_printf_float+0x250>
 8015446:	2301      	movs	r3, #1
 8015448:	4652      	mov	r2, sl
 801544a:	4631      	mov	r1, r6
 801544c:	4628      	mov	r0, r5
 801544e:	47b8      	blx	r7
 8015450:	3001      	adds	r0, #1
 8015452:	f43f aeaa 	beq.w	80151aa <_printf_float+0xc2>
 8015456:	f108 0801 	add.w	r8, r8, #1
 801545a:	e7ec      	b.n	8015436 <_printf_float+0x34e>
 801545c:	4613      	mov	r3, r2
 801545e:	4631      	mov	r1, r6
 8015460:	4642      	mov	r2, r8
 8015462:	4628      	mov	r0, r5
 8015464:	47b8      	blx	r7
 8015466:	3001      	adds	r0, #1
 8015468:	d1c0      	bne.n	80153ec <_printf_float+0x304>
 801546a:	e69e      	b.n	80151aa <_printf_float+0xc2>
 801546c:	2301      	movs	r3, #1
 801546e:	4631      	mov	r1, r6
 8015470:	4628      	mov	r0, r5
 8015472:	9205      	str	r2, [sp, #20]
 8015474:	47b8      	blx	r7
 8015476:	3001      	adds	r0, #1
 8015478:	f43f ae97 	beq.w	80151aa <_printf_float+0xc2>
 801547c:	9a05      	ldr	r2, [sp, #20]
 801547e:	f10b 0b01 	add.w	fp, fp, #1
 8015482:	e7b9      	b.n	80153f8 <_printf_float+0x310>
 8015484:	ee18 3a10 	vmov	r3, s16
 8015488:	4652      	mov	r2, sl
 801548a:	4631      	mov	r1, r6
 801548c:	4628      	mov	r0, r5
 801548e:	47b8      	blx	r7
 8015490:	3001      	adds	r0, #1
 8015492:	d1be      	bne.n	8015412 <_printf_float+0x32a>
 8015494:	e689      	b.n	80151aa <_printf_float+0xc2>
 8015496:	9a05      	ldr	r2, [sp, #20]
 8015498:	464b      	mov	r3, r9
 801549a:	4442      	add	r2, r8
 801549c:	4631      	mov	r1, r6
 801549e:	4628      	mov	r0, r5
 80154a0:	47b8      	blx	r7
 80154a2:	3001      	adds	r0, #1
 80154a4:	d1c1      	bne.n	801542a <_printf_float+0x342>
 80154a6:	e680      	b.n	80151aa <_printf_float+0xc2>
 80154a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80154aa:	2a01      	cmp	r2, #1
 80154ac:	dc01      	bgt.n	80154b2 <_printf_float+0x3ca>
 80154ae:	07db      	lsls	r3, r3, #31
 80154b0:	d538      	bpl.n	8015524 <_printf_float+0x43c>
 80154b2:	2301      	movs	r3, #1
 80154b4:	4642      	mov	r2, r8
 80154b6:	4631      	mov	r1, r6
 80154b8:	4628      	mov	r0, r5
 80154ba:	47b8      	blx	r7
 80154bc:	3001      	adds	r0, #1
 80154be:	f43f ae74 	beq.w	80151aa <_printf_float+0xc2>
 80154c2:	ee18 3a10 	vmov	r3, s16
 80154c6:	4652      	mov	r2, sl
 80154c8:	4631      	mov	r1, r6
 80154ca:	4628      	mov	r0, r5
 80154cc:	47b8      	blx	r7
 80154ce:	3001      	adds	r0, #1
 80154d0:	f43f ae6b 	beq.w	80151aa <_printf_float+0xc2>
 80154d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80154d8:	2200      	movs	r2, #0
 80154da:	2300      	movs	r3, #0
 80154dc:	f7eb fb14 	bl	8000b08 <__aeabi_dcmpeq>
 80154e0:	b9d8      	cbnz	r0, 801551a <_printf_float+0x432>
 80154e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80154e4:	f108 0201 	add.w	r2, r8, #1
 80154e8:	3b01      	subs	r3, #1
 80154ea:	4631      	mov	r1, r6
 80154ec:	4628      	mov	r0, r5
 80154ee:	47b8      	blx	r7
 80154f0:	3001      	adds	r0, #1
 80154f2:	d10e      	bne.n	8015512 <_printf_float+0x42a>
 80154f4:	e659      	b.n	80151aa <_printf_float+0xc2>
 80154f6:	2301      	movs	r3, #1
 80154f8:	4652      	mov	r2, sl
 80154fa:	4631      	mov	r1, r6
 80154fc:	4628      	mov	r0, r5
 80154fe:	47b8      	blx	r7
 8015500:	3001      	adds	r0, #1
 8015502:	f43f ae52 	beq.w	80151aa <_printf_float+0xc2>
 8015506:	f108 0801 	add.w	r8, r8, #1
 801550a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801550c:	3b01      	subs	r3, #1
 801550e:	4543      	cmp	r3, r8
 8015510:	dcf1      	bgt.n	80154f6 <_printf_float+0x40e>
 8015512:	464b      	mov	r3, r9
 8015514:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015518:	e6dc      	b.n	80152d4 <_printf_float+0x1ec>
 801551a:	f04f 0800 	mov.w	r8, #0
 801551e:	f104 0a1a 	add.w	sl, r4, #26
 8015522:	e7f2      	b.n	801550a <_printf_float+0x422>
 8015524:	2301      	movs	r3, #1
 8015526:	4642      	mov	r2, r8
 8015528:	e7df      	b.n	80154ea <_printf_float+0x402>
 801552a:	2301      	movs	r3, #1
 801552c:	464a      	mov	r2, r9
 801552e:	4631      	mov	r1, r6
 8015530:	4628      	mov	r0, r5
 8015532:	47b8      	blx	r7
 8015534:	3001      	adds	r0, #1
 8015536:	f43f ae38 	beq.w	80151aa <_printf_float+0xc2>
 801553a:	f108 0801 	add.w	r8, r8, #1
 801553e:	68e3      	ldr	r3, [r4, #12]
 8015540:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015542:	1a5b      	subs	r3, r3, r1
 8015544:	4543      	cmp	r3, r8
 8015546:	dcf0      	bgt.n	801552a <_printf_float+0x442>
 8015548:	e6fa      	b.n	8015340 <_printf_float+0x258>
 801554a:	f04f 0800 	mov.w	r8, #0
 801554e:	f104 0919 	add.w	r9, r4, #25
 8015552:	e7f4      	b.n	801553e <_printf_float+0x456>

08015554 <_printf_common>:
 8015554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015558:	4616      	mov	r6, r2
 801555a:	4699      	mov	r9, r3
 801555c:	688a      	ldr	r2, [r1, #8]
 801555e:	690b      	ldr	r3, [r1, #16]
 8015560:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015564:	4293      	cmp	r3, r2
 8015566:	bfb8      	it	lt
 8015568:	4613      	movlt	r3, r2
 801556a:	6033      	str	r3, [r6, #0]
 801556c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015570:	4607      	mov	r7, r0
 8015572:	460c      	mov	r4, r1
 8015574:	b10a      	cbz	r2, 801557a <_printf_common+0x26>
 8015576:	3301      	adds	r3, #1
 8015578:	6033      	str	r3, [r6, #0]
 801557a:	6823      	ldr	r3, [r4, #0]
 801557c:	0699      	lsls	r1, r3, #26
 801557e:	bf42      	ittt	mi
 8015580:	6833      	ldrmi	r3, [r6, #0]
 8015582:	3302      	addmi	r3, #2
 8015584:	6033      	strmi	r3, [r6, #0]
 8015586:	6825      	ldr	r5, [r4, #0]
 8015588:	f015 0506 	ands.w	r5, r5, #6
 801558c:	d106      	bne.n	801559c <_printf_common+0x48>
 801558e:	f104 0a19 	add.w	sl, r4, #25
 8015592:	68e3      	ldr	r3, [r4, #12]
 8015594:	6832      	ldr	r2, [r6, #0]
 8015596:	1a9b      	subs	r3, r3, r2
 8015598:	42ab      	cmp	r3, r5
 801559a:	dc26      	bgt.n	80155ea <_printf_common+0x96>
 801559c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80155a0:	1e13      	subs	r3, r2, #0
 80155a2:	6822      	ldr	r2, [r4, #0]
 80155a4:	bf18      	it	ne
 80155a6:	2301      	movne	r3, #1
 80155a8:	0692      	lsls	r2, r2, #26
 80155aa:	d42b      	bmi.n	8015604 <_printf_common+0xb0>
 80155ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80155b0:	4649      	mov	r1, r9
 80155b2:	4638      	mov	r0, r7
 80155b4:	47c0      	blx	r8
 80155b6:	3001      	adds	r0, #1
 80155b8:	d01e      	beq.n	80155f8 <_printf_common+0xa4>
 80155ba:	6823      	ldr	r3, [r4, #0]
 80155bc:	68e5      	ldr	r5, [r4, #12]
 80155be:	6832      	ldr	r2, [r6, #0]
 80155c0:	f003 0306 	and.w	r3, r3, #6
 80155c4:	2b04      	cmp	r3, #4
 80155c6:	bf08      	it	eq
 80155c8:	1aad      	subeq	r5, r5, r2
 80155ca:	68a3      	ldr	r3, [r4, #8]
 80155cc:	6922      	ldr	r2, [r4, #16]
 80155ce:	bf0c      	ite	eq
 80155d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80155d4:	2500      	movne	r5, #0
 80155d6:	4293      	cmp	r3, r2
 80155d8:	bfc4      	itt	gt
 80155da:	1a9b      	subgt	r3, r3, r2
 80155dc:	18ed      	addgt	r5, r5, r3
 80155de:	2600      	movs	r6, #0
 80155e0:	341a      	adds	r4, #26
 80155e2:	42b5      	cmp	r5, r6
 80155e4:	d11a      	bne.n	801561c <_printf_common+0xc8>
 80155e6:	2000      	movs	r0, #0
 80155e8:	e008      	b.n	80155fc <_printf_common+0xa8>
 80155ea:	2301      	movs	r3, #1
 80155ec:	4652      	mov	r2, sl
 80155ee:	4649      	mov	r1, r9
 80155f0:	4638      	mov	r0, r7
 80155f2:	47c0      	blx	r8
 80155f4:	3001      	adds	r0, #1
 80155f6:	d103      	bne.n	8015600 <_printf_common+0xac>
 80155f8:	f04f 30ff 	mov.w	r0, #4294967295
 80155fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015600:	3501      	adds	r5, #1
 8015602:	e7c6      	b.n	8015592 <_printf_common+0x3e>
 8015604:	18e1      	adds	r1, r4, r3
 8015606:	1c5a      	adds	r2, r3, #1
 8015608:	2030      	movs	r0, #48	; 0x30
 801560a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801560e:	4422      	add	r2, r4
 8015610:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015614:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015618:	3302      	adds	r3, #2
 801561a:	e7c7      	b.n	80155ac <_printf_common+0x58>
 801561c:	2301      	movs	r3, #1
 801561e:	4622      	mov	r2, r4
 8015620:	4649      	mov	r1, r9
 8015622:	4638      	mov	r0, r7
 8015624:	47c0      	blx	r8
 8015626:	3001      	adds	r0, #1
 8015628:	d0e6      	beq.n	80155f8 <_printf_common+0xa4>
 801562a:	3601      	adds	r6, #1
 801562c:	e7d9      	b.n	80155e2 <_printf_common+0x8e>
	...

08015630 <_printf_i>:
 8015630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015634:	460c      	mov	r4, r1
 8015636:	4691      	mov	r9, r2
 8015638:	7e27      	ldrb	r7, [r4, #24]
 801563a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801563c:	2f78      	cmp	r7, #120	; 0x78
 801563e:	4680      	mov	r8, r0
 8015640:	469a      	mov	sl, r3
 8015642:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015646:	d807      	bhi.n	8015658 <_printf_i+0x28>
 8015648:	2f62      	cmp	r7, #98	; 0x62
 801564a:	d80a      	bhi.n	8015662 <_printf_i+0x32>
 801564c:	2f00      	cmp	r7, #0
 801564e:	f000 80d8 	beq.w	8015802 <_printf_i+0x1d2>
 8015652:	2f58      	cmp	r7, #88	; 0x58
 8015654:	f000 80a3 	beq.w	801579e <_printf_i+0x16e>
 8015658:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801565c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015660:	e03a      	b.n	80156d8 <_printf_i+0xa8>
 8015662:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015666:	2b15      	cmp	r3, #21
 8015668:	d8f6      	bhi.n	8015658 <_printf_i+0x28>
 801566a:	a001      	add	r0, pc, #4	; (adr r0, 8015670 <_printf_i+0x40>)
 801566c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8015670:	080156c9 	.word	0x080156c9
 8015674:	080156dd 	.word	0x080156dd
 8015678:	08015659 	.word	0x08015659
 801567c:	08015659 	.word	0x08015659
 8015680:	08015659 	.word	0x08015659
 8015684:	08015659 	.word	0x08015659
 8015688:	080156dd 	.word	0x080156dd
 801568c:	08015659 	.word	0x08015659
 8015690:	08015659 	.word	0x08015659
 8015694:	08015659 	.word	0x08015659
 8015698:	08015659 	.word	0x08015659
 801569c:	080157e9 	.word	0x080157e9
 80156a0:	0801570d 	.word	0x0801570d
 80156a4:	080157cb 	.word	0x080157cb
 80156a8:	08015659 	.word	0x08015659
 80156ac:	08015659 	.word	0x08015659
 80156b0:	0801580b 	.word	0x0801580b
 80156b4:	08015659 	.word	0x08015659
 80156b8:	0801570d 	.word	0x0801570d
 80156bc:	08015659 	.word	0x08015659
 80156c0:	08015659 	.word	0x08015659
 80156c4:	080157d3 	.word	0x080157d3
 80156c8:	680b      	ldr	r3, [r1, #0]
 80156ca:	1d1a      	adds	r2, r3, #4
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	600a      	str	r2, [r1, #0]
 80156d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80156d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80156d8:	2301      	movs	r3, #1
 80156da:	e0a3      	b.n	8015824 <_printf_i+0x1f4>
 80156dc:	6825      	ldr	r5, [r4, #0]
 80156de:	6808      	ldr	r0, [r1, #0]
 80156e0:	062e      	lsls	r6, r5, #24
 80156e2:	f100 0304 	add.w	r3, r0, #4
 80156e6:	d50a      	bpl.n	80156fe <_printf_i+0xce>
 80156e8:	6805      	ldr	r5, [r0, #0]
 80156ea:	600b      	str	r3, [r1, #0]
 80156ec:	2d00      	cmp	r5, #0
 80156ee:	da03      	bge.n	80156f8 <_printf_i+0xc8>
 80156f0:	232d      	movs	r3, #45	; 0x2d
 80156f2:	426d      	negs	r5, r5
 80156f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80156f8:	485e      	ldr	r0, [pc, #376]	; (8015874 <_printf_i+0x244>)
 80156fa:	230a      	movs	r3, #10
 80156fc:	e019      	b.n	8015732 <_printf_i+0x102>
 80156fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8015702:	6805      	ldr	r5, [r0, #0]
 8015704:	600b      	str	r3, [r1, #0]
 8015706:	bf18      	it	ne
 8015708:	b22d      	sxthne	r5, r5
 801570a:	e7ef      	b.n	80156ec <_printf_i+0xbc>
 801570c:	680b      	ldr	r3, [r1, #0]
 801570e:	6825      	ldr	r5, [r4, #0]
 8015710:	1d18      	adds	r0, r3, #4
 8015712:	6008      	str	r0, [r1, #0]
 8015714:	0628      	lsls	r0, r5, #24
 8015716:	d501      	bpl.n	801571c <_printf_i+0xec>
 8015718:	681d      	ldr	r5, [r3, #0]
 801571a:	e002      	b.n	8015722 <_printf_i+0xf2>
 801571c:	0669      	lsls	r1, r5, #25
 801571e:	d5fb      	bpl.n	8015718 <_printf_i+0xe8>
 8015720:	881d      	ldrh	r5, [r3, #0]
 8015722:	4854      	ldr	r0, [pc, #336]	; (8015874 <_printf_i+0x244>)
 8015724:	2f6f      	cmp	r7, #111	; 0x6f
 8015726:	bf0c      	ite	eq
 8015728:	2308      	moveq	r3, #8
 801572a:	230a      	movne	r3, #10
 801572c:	2100      	movs	r1, #0
 801572e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015732:	6866      	ldr	r6, [r4, #4]
 8015734:	60a6      	str	r6, [r4, #8]
 8015736:	2e00      	cmp	r6, #0
 8015738:	bfa2      	ittt	ge
 801573a:	6821      	ldrge	r1, [r4, #0]
 801573c:	f021 0104 	bicge.w	r1, r1, #4
 8015740:	6021      	strge	r1, [r4, #0]
 8015742:	b90d      	cbnz	r5, 8015748 <_printf_i+0x118>
 8015744:	2e00      	cmp	r6, #0
 8015746:	d04d      	beq.n	80157e4 <_printf_i+0x1b4>
 8015748:	4616      	mov	r6, r2
 801574a:	fbb5 f1f3 	udiv	r1, r5, r3
 801574e:	fb03 5711 	mls	r7, r3, r1, r5
 8015752:	5dc7      	ldrb	r7, [r0, r7]
 8015754:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015758:	462f      	mov	r7, r5
 801575a:	42bb      	cmp	r3, r7
 801575c:	460d      	mov	r5, r1
 801575e:	d9f4      	bls.n	801574a <_printf_i+0x11a>
 8015760:	2b08      	cmp	r3, #8
 8015762:	d10b      	bne.n	801577c <_printf_i+0x14c>
 8015764:	6823      	ldr	r3, [r4, #0]
 8015766:	07df      	lsls	r7, r3, #31
 8015768:	d508      	bpl.n	801577c <_printf_i+0x14c>
 801576a:	6923      	ldr	r3, [r4, #16]
 801576c:	6861      	ldr	r1, [r4, #4]
 801576e:	4299      	cmp	r1, r3
 8015770:	bfde      	ittt	le
 8015772:	2330      	movle	r3, #48	; 0x30
 8015774:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015778:	f106 36ff 	addle.w	r6, r6, #4294967295
 801577c:	1b92      	subs	r2, r2, r6
 801577e:	6122      	str	r2, [r4, #16]
 8015780:	f8cd a000 	str.w	sl, [sp]
 8015784:	464b      	mov	r3, r9
 8015786:	aa03      	add	r2, sp, #12
 8015788:	4621      	mov	r1, r4
 801578a:	4640      	mov	r0, r8
 801578c:	f7ff fee2 	bl	8015554 <_printf_common>
 8015790:	3001      	adds	r0, #1
 8015792:	d14c      	bne.n	801582e <_printf_i+0x1fe>
 8015794:	f04f 30ff 	mov.w	r0, #4294967295
 8015798:	b004      	add	sp, #16
 801579a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801579e:	4835      	ldr	r0, [pc, #212]	; (8015874 <_printf_i+0x244>)
 80157a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80157a4:	6823      	ldr	r3, [r4, #0]
 80157a6:	680e      	ldr	r6, [r1, #0]
 80157a8:	061f      	lsls	r7, r3, #24
 80157aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80157ae:	600e      	str	r6, [r1, #0]
 80157b0:	d514      	bpl.n	80157dc <_printf_i+0x1ac>
 80157b2:	07d9      	lsls	r1, r3, #31
 80157b4:	bf44      	itt	mi
 80157b6:	f043 0320 	orrmi.w	r3, r3, #32
 80157ba:	6023      	strmi	r3, [r4, #0]
 80157bc:	b91d      	cbnz	r5, 80157c6 <_printf_i+0x196>
 80157be:	6823      	ldr	r3, [r4, #0]
 80157c0:	f023 0320 	bic.w	r3, r3, #32
 80157c4:	6023      	str	r3, [r4, #0]
 80157c6:	2310      	movs	r3, #16
 80157c8:	e7b0      	b.n	801572c <_printf_i+0xfc>
 80157ca:	6823      	ldr	r3, [r4, #0]
 80157cc:	f043 0320 	orr.w	r3, r3, #32
 80157d0:	6023      	str	r3, [r4, #0]
 80157d2:	2378      	movs	r3, #120	; 0x78
 80157d4:	4828      	ldr	r0, [pc, #160]	; (8015878 <_printf_i+0x248>)
 80157d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80157da:	e7e3      	b.n	80157a4 <_printf_i+0x174>
 80157dc:	065e      	lsls	r6, r3, #25
 80157de:	bf48      	it	mi
 80157e0:	b2ad      	uxthmi	r5, r5
 80157e2:	e7e6      	b.n	80157b2 <_printf_i+0x182>
 80157e4:	4616      	mov	r6, r2
 80157e6:	e7bb      	b.n	8015760 <_printf_i+0x130>
 80157e8:	680b      	ldr	r3, [r1, #0]
 80157ea:	6826      	ldr	r6, [r4, #0]
 80157ec:	6960      	ldr	r0, [r4, #20]
 80157ee:	1d1d      	adds	r5, r3, #4
 80157f0:	600d      	str	r5, [r1, #0]
 80157f2:	0635      	lsls	r5, r6, #24
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	d501      	bpl.n	80157fc <_printf_i+0x1cc>
 80157f8:	6018      	str	r0, [r3, #0]
 80157fa:	e002      	b.n	8015802 <_printf_i+0x1d2>
 80157fc:	0671      	lsls	r1, r6, #25
 80157fe:	d5fb      	bpl.n	80157f8 <_printf_i+0x1c8>
 8015800:	8018      	strh	r0, [r3, #0]
 8015802:	2300      	movs	r3, #0
 8015804:	6123      	str	r3, [r4, #16]
 8015806:	4616      	mov	r6, r2
 8015808:	e7ba      	b.n	8015780 <_printf_i+0x150>
 801580a:	680b      	ldr	r3, [r1, #0]
 801580c:	1d1a      	adds	r2, r3, #4
 801580e:	600a      	str	r2, [r1, #0]
 8015810:	681e      	ldr	r6, [r3, #0]
 8015812:	6862      	ldr	r2, [r4, #4]
 8015814:	2100      	movs	r1, #0
 8015816:	4630      	mov	r0, r6
 8015818:	f7ea fd02 	bl	8000220 <memchr>
 801581c:	b108      	cbz	r0, 8015822 <_printf_i+0x1f2>
 801581e:	1b80      	subs	r0, r0, r6
 8015820:	6060      	str	r0, [r4, #4]
 8015822:	6863      	ldr	r3, [r4, #4]
 8015824:	6123      	str	r3, [r4, #16]
 8015826:	2300      	movs	r3, #0
 8015828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801582c:	e7a8      	b.n	8015780 <_printf_i+0x150>
 801582e:	6923      	ldr	r3, [r4, #16]
 8015830:	4632      	mov	r2, r6
 8015832:	4649      	mov	r1, r9
 8015834:	4640      	mov	r0, r8
 8015836:	47d0      	blx	sl
 8015838:	3001      	adds	r0, #1
 801583a:	d0ab      	beq.n	8015794 <_printf_i+0x164>
 801583c:	6823      	ldr	r3, [r4, #0]
 801583e:	079b      	lsls	r3, r3, #30
 8015840:	d413      	bmi.n	801586a <_printf_i+0x23a>
 8015842:	68e0      	ldr	r0, [r4, #12]
 8015844:	9b03      	ldr	r3, [sp, #12]
 8015846:	4298      	cmp	r0, r3
 8015848:	bfb8      	it	lt
 801584a:	4618      	movlt	r0, r3
 801584c:	e7a4      	b.n	8015798 <_printf_i+0x168>
 801584e:	2301      	movs	r3, #1
 8015850:	4632      	mov	r2, r6
 8015852:	4649      	mov	r1, r9
 8015854:	4640      	mov	r0, r8
 8015856:	47d0      	blx	sl
 8015858:	3001      	adds	r0, #1
 801585a:	d09b      	beq.n	8015794 <_printf_i+0x164>
 801585c:	3501      	adds	r5, #1
 801585e:	68e3      	ldr	r3, [r4, #12]
 8015860:	9903      	ldr	r1, [sp, #12]
 8015862:	1a5b      	subs	r3, r3, r1
 8015864:	42ab      	cmp	r3, r5
 8015866:	dcf2      	bgt.n	801584e <_printf_i+0x21e>
 8015868:	e7eb      	b.n	8015842 <_printf_i+0x212>
 801586a:	2500      	movs	r5, #0
 801586c:	f104 0619 	add.w	r6, r4, #25
 8015870:	e7f5      	b.n	801585e <_printf_i+0x22e>
 8015872:	bf00      	nop
 8015874:	0801c938 	.word	0x0801c938
 8015878:	0801c949 	.word	0x0801c949

0801587c <_scanf_float>:
 801587c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015880:	b087      	sub	sp, #28
 8015882:	4617      	mov	r7, r2
 8015884:	9303      	str	r3, [sp, #12]
 8015886:	688b      	ldr	r3, [r1, #8]
 8015888:	1e5a      	subs	r2, r3, #1
 801588a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801588e:	bf83      	ittte	hi
 8015890:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8015894:	195b      	addhi	r3, r3, r5
 8015896:	9302      	strhi	r3, [sp, #8]
 8015898:	2300      	movls	r3, #0
 801589a:	bf86      	itte	hi
 801589c:	f240 135d 	movwhi	r3, #349	; 0x15d
 80158a0:	608b      	strhi	r3, [r1, #8]
 80158a2:	9302      	strls	r3, [sp, #8]
 80158a4:	680b      	ldr	r3, [r1, #0]
 80158a6:	468b      	mov	fp, r1
 80158a8:	2500      	movs	r5, #0
 80158aa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80158ae:	f84b 3b1c 	str.w	r3, [fp], #28
 80158b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80158b6:	4680      	mov	r8, r0
 80158b8:	460c      	mov	r4, r1
 80158ba:	465e      	mov	r6, fp
 80158bc:	46aa      	mov	sl, r5
 80158be:	46a9      	mov	r9, r5
 80158c0:	9501      	str	r5, [sp, #4]
 80158c2:	68a2      	ldr	r2, [r4, #8]
 80158c4:	b152      	cbz	r2, 80158dc <_scanf_float+0x60>
 80158c6:	683b      	ldr	r3, [r7, #0]
 80158c8:	781b      	ldrb	r3, [r3, #0]
 80158ca:	2b4e      	cmp	r3, #78	; 0x4e
 80158cc:	d864      	bhi.n	8015998 <_scanf_float+0x11c>
 80158ce:	2b40      	cmp	r3, #64	; 0x40
 80158d0:	d83c      	bhi.n	801594c <_scanf_float+0xd0>
 80158d2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80158d6:	b2c8      	uxtb	r0, r1
 80158d8:	280e      	cmp	r0, #14
 80158da:	d93a      	bls.n	8015952 <_scanf_float+0xd6>
 80158dc:	f1b9 0f00 	cmp.w	r9, #0
 80158e0:	d003      	beq.n	80158ea <_scanf_float+0x6e>
 80158e2:	6823      	ldr	r3, [r4, #0]
 80158e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80158e8:	6023      	str	r3, [r4, #0]
 80158ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80158ee:	f1ba 0f01 	cmp.w	sl, #1
 80158f2:	f200 8113 	bhi.w	8015b1c <_scanf_float+0x2a0>
 80158f6:	455e      	cmp	r6, fp
 80158f8:	f200 8105 	bhi.w	8015b06 <_scanf_float+0x28a>
 80158fc:	2501      	movs	r5, #1
 80158fe:	4628      	mov	r0, r5
 8015900:	b007      	add	sp, #28
 8015902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015906:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801590a:	2a0d      	cmp	r2, #13
 801590c:	d8e6      	bhi.n	80158dc <_scanf_float+0x60>
 801590e:	a101      	add	r1, pc, #4	; (adr r1, 8015914 <_scanf_float+0x98>)
 8015910:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015914:	08015a53 	.word	0x08015a53
 8015918:	080158dd 	.word	0x080158dd
 801591c:	080158dd 	.word	0x080158dd
 8015920:	080158dd 	.word	0x080158dd
 8015924:	08015ab3 	.word	0x08015ab3
 8015928:	08015a8b 	.word	0x08015a8b
 801592c:	080158dd 	.word	0x080158dd
 8015930:	080158dd 	.word	0x080158dd
 8015934:	08015a61 	.word	0x08015a61
 8015938:	080158dd 	.word	0x080158dd
 801593c:	080158dd 	.word	0x080158dd
 8015940:	080158dd 	.word	0x080158dd
 8015944:	080158dd 	.word	0x080158dd
 8015948:	08015a19 	.word	0x08015a19
 801594c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8015950:	e7db      	b.n	801590a <_scanf_float+0x8e>
 8015952:	290e      	cmp	r1, #14
 8015954:	d8c2      	bhi.n	80158dc <_scanf_float+0x60>
 8015956:	a001      	add	r0, pc, #4	; (adr r0, 801595c <_scanf_float+0xe0>)
 8015958:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801595c:	08015a0b 	.word	0x08015a0b
 8015960:	080158dd 	.word	0x080158dd
 8015964:	08015a0b 	.word	0x08015a0b
 8015968:	08015a9f 	.word	0x08015a9f
 801596c:	080158dd 	.word	0x080158dd
 8015970:	080159b9 	.word	0x080159b9
 8015974:	080159f5 	.word	0x080159f5
 8015978:	080159f5 	.word	0x080159f5
 801597c:	080159f5 	.word	0x080159f5
 8015980:	080159f5 	.word	0x080159f5
 8015984:	080159f5 	.word	0x080159f5
 8015988:	080159f5 	.word	0x080159f5
 801598c:	080159f5 	.word	0x080159f5
 8015990:	080159f5 	.word	0x080159f5
 8015994:	080159f5 	.word	0x080159f5
 8015998:	2b6e      	cmp	r3, #110	; 0x6e
 801599a:	d809      	bhi.n	80159b0 <_scanf_float+0x134>
 801599c:	2b60      	cmp	r3, #96	; 0x60
 801599e:	d8b2      	bhi.n	8015906 <_scanf_float+0x8a>
 80159a0:	2b54      	cmp	r3, #84	; 0x54
 80159a2:	d077      	beq.n	8015a94 <_scanf_float+0x218>
 80159a4:	2b59      	cmp	r3, #89	; 0x59
 80159a6:	d199      	bne.n	80158dc <_scanf_float+0x60>
 80159a8:	2d07      	cmp	r5, #7
 80159aa:	d197      	bne.n	80158dc <_scanf_float+0x60>
 80159ac:	2508      	movs	r5, #8
 80159ae:	e029      	b.n	8015a04 <_scanf_float+0x188>
 80159b0:	2b74      	cmp	r3, #116	; 0x74
 80159b2:	d06f      	beq.n	8015a94 <_scanf_float+0x218>
 80159b4:	2b79      	cmp	r3, #121	; 0x79
 80159b6:	e7f6      	b.n	80159a6 <_scanf_float+0x12a>
 80159b8:	6821      	ldr	r1, [r4, #0]
 80159ba:	05c8      	lsls	r0, r1, #23
 80159bc:	d51a      	bpl.n	80159f4 <_scanf_float+0x178>
 80159be:	9b02      	ldr	r3, [sp, #8]
 80159c0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80159c4:	6021      	str	r1, [r4, #0]
 80159c6:	f109 0901 	add.w	r9, r9, #1
 80159ca:	b11b      	cbz	r3, 80159d4 <_scanf_float+0x158>
 80159cc:	3b01      	subs	r3, #1
 80159ce:	3201      	adds	r2, #1
 80159d0:	9302      	str	r3, [sp, #8]
 80159d2:	60a2      	str	r2, [r4, #8]
 80159d4:	68a3      	ldr	r3, [r4, #8]
 80159d6:	3b01      	subs	r3, #1
 80159d8:	60a3      	str	r3, [r4, #8]
 80159da:	6923      	ldr	r3, [r4, #16]
 80159dc:	3301      	adds	r3, #1
 80159de:	6123      	str	r3, [r4, #16]
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	3b01      	subs	r3, #1
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	607b      	str	r3, [r7, #4]
 80159e8:	f340 8084 	ble.w	8015af4 <_scanf_float+0x278>
 80159ec:	683b      	ldr	r3, [r7, #0]
 80159ee:	3301      	adds	r3, #1
 80159f0:	603b      	str	r3, [r7, #0]
 80159f2:	e766      	b.n	80158c2 <_scanf_float+0x46>
 80159f4:	eb1a 0f05 	cmn.w	sl, r5
 80159f8:	f47f af70 	bne.w	80158dc <_scanf_float+0x60>
 80159fc:	6822      	ldr	r2, [r4, #0]
 80159fe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8015a02:	6022      	str	r2, [r4, #0]
 8015a04:	f806 3b01 	strb.w	r3, [r6], #1
 8015a08:	e7e4      	b.n	80159d4 <_scanf_float+0x158>
 8015a0a:	6822      	ldr	r2, [r4, #0]
 8015a0c:	0610      	lsls	r0, r2, #24
 8015a0e:	f57f af65 	bpl.w	80158dc <_scanf_float+0x60>
 8015a12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015a16:	e7f4      	b.n	8015a02 <_scanf_float+0x186>
 8015a18:	f1ba 0f00 	cmp.w	sl, #0
 8015a1c:	d10e      	bne.n	8015a3c <_scanf_float+0x1c0>
 8015a1e:	f1b9 0f00 	cmp.w	r9, #0
 8015a22:	d10e      	bne.n	8015a42 <_scanf_float+0x1c6>
 8015a24:	6822      	ldr	r2, [r4, #0]
 8015a26:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8015a2a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8015a2e:	d108      	bne.n	8015a42 <_scanf_float+0x1c6>
 8015a30:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015a34:	6022      	str	r2, [r4, #0]
 8015a36:	f04f 0a01 	mov.w	sl, #1
 8015a3a:	e7e3      	b.n	8015a04 <_scanf_float+0x188>
 8015a3c:	f1ba 0f02 	cmp.w	sl, #2
 8015a40:	d055      	beq.n	8015aee <_scanf_float+0x272>
 8015a42:	2d01      	cmp	r5, #1
 8015a44:	d002      	beq.n	8015a4c <_scanf_float+0x1d0>
 8015a46:	2d04      	cmp	r5, #4
 8015a48:	f47f af48 	bne.w	80158dc <_scanf_float+0x60>
 8015a4c:	3501      	adds	r5, #1
 8015a4e:	b2ed      	uxtb	r5, r5
 8015a50:	e7d8      	b.n	8015a04 <_scanf_float+0x188>
 8015a52:	f1ba 0f01 	cmp.w	sl, #1
 8015a56:	f47f af41 	bne.w	80158dc <_scanf_float+0x60>
 8015a5a:	f04f 0a02 	mov.w	sl, #2
 8015a5e:	e7d1      	b.n	8015a04 <_scanf_float+0x188>
 8015a60:	b97d      	cbnz	r5, 8015a82 <_scanf_float+0x206>
 8015a62:	f1b9 0f00 	cmp.w	r9, #0
 8015a66:	f47f af3c 	bne.w	80158e2 <_scanf_float+0x66>
 8015a6a:	6822      	ldr	r2, [r4, #0]
 8015a6c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8015a70:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8015a74:	f47f af39 	bne.w	80158ea <_scanf_float+0x6e>
 8015a78:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015a7c:	6022      	str	r2, [r4, #0]
 8015a7e:	2501      	movs	r5, #1
 8015a80:	e7c0      	b.n	8015a04 <_scanf_float+0x188>
 8015a82:	2d03      	cmp	r5, #3
 8015a84:	d0e2      	beq.n	8015a4c <_scanf_float+0x1d0>
 8015a86:	2d05      	cmp	r5, #5
 8015a88:	e7de      	b.n	8015a48 <_scanf_float+0x1cc>
 8015a8a:	2d02      	cmp	r5, #2
 8015a8c:	f47f af26 	bne.w	80158dc <_scanf_float+0x60>
 8015a90:	2503      	movs	r5, #3
 8015a92:	e7b7      	b.n	8015a04 <_scanf_float+0x188>
 8015a94:	2d06      	cmp	r5, #6
 8015a96:	f47f af21 	bne.w	80158dc <_scanf_float+0x60>
 8015a9a:	2507      	movs	r5, #7
 8015a9c:	e7b2      	b.n	8015a04 <_scanf_float+0x188>
 8015a9e:	6822      	ldr	r2, [r4, #0]
 8015aa0:	0591      	lsls	r1, r2, #22
 8015aa2:	f57f af1b 	bpl.w	80158dc <_scanf_float+0x60>
 8015aa6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8015aaa:	6022      	str	r2, [r4, #0]
 8015aac:	f8cd 9004 	str.w	r9, [sp, #4]
 8015ab0:	e7a8      	b.n	8015a04 <_scanf_float+0x188>
 8015ab2:	6822      	ldr	r2, [r4, #0]
 8015ab4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8015ab8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8015abc:	d006      	beq.n	8015acc <_scanf_float+0x250>
 8015abe:	0550      	lsls	r0, r2, #21
 8015ac0:	f57f af0c 	bpl.w	80158dc <_scanf_float+0x60>
 8015ac4:	f1b9 0f00 	cmp.w	r9, #0
 8015ac8:	f43f af0f 	beq.w	80158ea <_scanf_float+0x6e>
 8015acc:	0591      	lsls	r1, r2, #22
 8015ace:	bf58      	it	pl
 8015ad0:	9901      	ldrpl	r1, [sp, #4]
 8015ad2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015ad6:	bf58      	it	pl
 8015ad8:	eba9 0101 	subpl.w	r1, r9, r1
 8015adc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8015ae0:	bf58      	it	pl
 8015ae2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8015ae6:	6022      	str	r2, [r4, #0]
 8015ae8:	f04f 0900 	mov.w	r9, #0
 8015aec:	e78a      	b.n	8015a04 <_scanf_float+0x188>
 8015aee:	f04f 0a03 	mov.w	sl, #3
 8015af2:	e787      	b.n	8015a04 <_scanf_float+0x188>
 8015af4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015af8:	4639      	mov	r1, r7
 8015afa:	4640      	mov	r0, r8
 8015afc:	4798      	blx	r3
 8015afe:	2800      	cmp	r0, #0
 8015b00:	f43f aedf 	beq.w	80158c2 <_scanf_float+0x46>
 8015b04:	e6ea      	b.n	80158dc <_scanf_float+0x60>
 8015b06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015b0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015b0e:	463a      	mov	r2, r7
 8015b10:	4640      	mov	r0, r8
 8015b12:	4798      	blx	r3
 8015b14:	6923      	ldr	r3, [r4, #16]
 8015b16:	3b01      	subs	r3, #1
 8015b18:	6123      	str	r3, [r4, #16]
 8015b1a:	e6ec      	b.n	80158f6 <_scanf_float+0x7a>
 8015b1c:	1e6b      	subs	r3, r5, #1
 8015b1e:	2b06      	cmp	r3, #6
 8015b20:	d825      	bhi.n	8015b6e <_scanf_float+0x2f2>
 8015b22:	2d02      	cmp	r5, #2
 8015b24:	d836      	bhi.n	8015b94 <_scanf_float+0x318>
 8015b26:	455e      	cmp	r6, fp
 8015b28:	f67f aee8 	bls.w	80158fc <_scanf_float+0x80>
 8015b2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015b30:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015b34:	463a      	mov	r2, r7
 8015b36:	4640      	mov	r0, r8
 8015b38:	4798      	blx	r3
 8015b3a:	6923      	ldr	r3, [r4, #16]
 8015b3c:	3b01      	subs	r3, #1
 8015b3e:	6123      	str	r3, [r4, #16]
 8015b40:	e7f1      	b.n	8015b26 <_scanf_float+0x2aa>
 8015b42:	9802      	ldr	r0, [sp, #8]
 8015b44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015b48:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8015b4c:	9002      	str	r0, [sp, #8]
 8015b4e:	463a      	mov	r2, r7
 8015b50:	4640      	mov	r0, r8
 8015b52:	4798      	blx	r3
 8015b54:	6923      	ldr	r3, [r4, #16]
 8015b56:	3b01      	subs	r3, #1
 8015b58:	6123      	str	r3, [r4, #16]
 8015b5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015b5e:	fa5f fa8a 	uxtb.w	sl, sl
 8015b62:	f1ba 0f02 	cmp.w	sl, #2
 8015b66:	d1ec      	bne.n	8015b42 <_scanf_float+0x2c6>
 8015b68:	3d03      	subs	r5, #3
 8015b6a:	b2ed      	uxtb	r5, r5
 8015b6c:	1b76      	subs	r6, r6, r5
 8015b6e:	6823      	ldr	r3, [r4, #0]
 8015b70:	05da      	lsls	r2, r3, #23
 8015b72:	d52f      	bpl.n	8015bd4 <_scanf_float+0x358>
 8015b74:	055b      	lsls	r3, r3, #21
 8015b76:	d510      	bpl.n	8015b9a <_scanf_float+0x31e>
 8015b78:	455e      	cmp	r6, fp
 8015b7a:	f67f aebf 	bls.w	80158fc <_scanf_float+0x80>
 8015b7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015b82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015b86:	463a      	mov	r2, r7
 8015b88:	4640      	mov	r0, r8
 8015b8a:	4798      	blx	r3
 8015b8c:	6923      	ldr	r3, [r4, #16]
 8015b8e:	3b01      	subs	r3, #1
 8015b90:	6123      	str	r3, [r4, #16]
 8015b92:	e7f1      	b.n	8015b78 <_scanf_float+0x2fc>
 8015b94:	46aa      	mov	sl, r5
 8015b96:	9602      	str	r6, [sp, #8]
 8015b98:	e7df      	b.n	8015b5a <_scanf_float+0x2de>
 8015b9a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8015b9e:	6923      	ldr	r3, [r4, #16]
 8015ba0:	2965      	cmp	r1, #101	; 0x65
 8015ba2:	f103 33ff 	add.w	r3, r3, #4294967295
 8015ba6:	f106 35ff 	add.w	r5, r6, #4294967295
 8015baa:	6123      	str	r3, [r4, #16]
 8015bac:	d00c      	beq.n	8015bc8 <_scanf_float+0x34c>
 8015bae:	2945      	cmp	r1, #69	; 0x45
 8015bb0:	d00a      	beq.n	8015bc8 <_scanf_float+0x34c>
 8015bb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015bb6:	463a      	mov	r2, r7
 8015bb8:	4640      	mov	r0, r8
 8015bba:	4798      	blx	r3
 8015bbc:	6923      	ldr	r3, [r4, #16]
 8015bbe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8015bc2:	3b01      	subs	r3, #1
 8015bc4:	1eb5      	subs	r5, r6, #2
 8015bc6:	6123      	str	r3, [r4, #16]
 8015bc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015bcc:	463a      	mov	r2, r7
 8015bce:	4640      	mov	r0, r8
 8015bd0:	4798      	blx	r3
 8015bd2:	462e      	mov	r6, r5
 8015bd4:	6825      	ldr	r5, [r4, #0]
 8015bd6:	f015 0510 	ands.w	r5, r5, #16
 8015bda:	d158      	bne.n	8015c8e <_scanf_float+0x412>
 8015bdc:	7035      	strb	r5, [r6, #0]
 8015bde:	6823      	ldr	r3, [r4, #0]
 8015be0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015be8:	d11c      	bne.n	8015c24 <_scanf_float+0x3a8>
 8015bea:	9b01      	ldr	r3, [sp, #4]
 8015bec:	454b      	cmp	r3, r9
 8015bee:	eba3 0209 	sub.w	r2, r3, r9
 8015bf2:	d124      	bne.n	8015c3e <_scanf_float+0x3c2>
 8015bf4:	2200      	movs	r2, #0
 8015bf6:	4659      	mov	r1, fp
 8015bf8:	4640      	mov	r0, r8
 8015bfa:	f001 f87f 	bl	8016cfc <_strtod_r>
 8015bfe:	9b03      	ldr	r3, [sp, #12]
 8015c00:	6821      	ldr	r1, [r4, #0]
 8015c02:	681b      	ldr	r3, [r3, #0]
 8015c04:	f011 0f02 	tst.w	r1, #2
 8015c08:	ec57 6b10 	vmov	r6, r7, d0
 8015c0c:	f103 0204 	add.w	r2, r3, #4
 8015c10:	d020      	beq.n	8015c54 <_scanf_float+0x3d8>
 8015c12:	9903      	ldr	r1, [sp, #12]
 8015c14:	600a      	str	r2, [r1, #0]
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	e9c3 6700 	strd	r6, r7, [r3]
 8015c1c:	68e3      	ldr	r3, [r4, #12]
 8015c1e:	3301      	adds	r3, #1
 8015c20:	60e3      	str	r3, [r4, #12]
 8015c22:	e66c      	b.n	80158fe <_scanf_float+0x82>
 8015c24:	9b04      	ldr	r3, [sp, #16]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d0e4      	beq.n	8015bf4 <_scanf_float+0x378>
 8015c2a:	9905      	ldr	r1, [sp, #20]
 8015c2c:	230a      	movs	r3, #10
 8015c2e:	462a      	mov	r2, r5
 8015c30:	3101      	adds	r1, #1
 8015c32:	4640      	mov	r0, r8
 8015c34:	f001 f948 	bl	8016ec8 <_strtol_r>
 8015c38:	9b04      	ldr	r3, [sp, #16]
 8015c3a:	9e05      	ldr	r6, [sp, #20]
 8015c3c:	1ac2      	subs	r2, r0, r3
 8015c3e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8015c42:	429e      	cmp	r6, r3
 8015c44:	bf28      	it	cs
 8015c46:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8015c4a:	4912      	ldr	r1, [pc, #72]	; (8015c94 <_scanf_float+0x418>)
 8015c4c:	4630      	mov	r0, r6
 8015c4e:	f000 f977 	bl	8015f40 <siprintf>
 8015c52:	e7cf      	b.n	8015bf4 <_scanf_float+0x378>
 8015c54:	f011 0f04 	tst.w	r1, #4
 8015c58:	9903      	ldr	r1, [sp, #12]
 8015c5a:	600a      	str	r2, [r1, #0]
 8015c5c:	d1db      	bne.n	8015c16 <_scanf_float+0x39a>
 8015c5e:	f8d3 8000 	ldr.w	r8, [r3]
 8015c62:	ee10 2a10 	vmov	r2, s0
 8015c66:	ee10 0a10 	vmov	r0, s0
 8015c6a:	463b      	mov	r3, r7
 8015c6c:	4639      	mov	r1, r7
 8015c6e:	f7ea ff7d 	bl	8000b6c <__aeabi_dcmpun>
 8015c72:	b128      	cbz	r0, 8015c80 <_scanf_float+0x404>
 8015c74:	4808      	ldr	r0, [pc, #32]	; (8015c98 <_scanf_float+0x41c>)
 8015c76:	f000 f919 	bl	8015eac <nanf>
 8015c7a:	ed88 0a00 	vstr	s0, [r8]
 8015c7e:	e7cd      	b.n	8015c1c <_scanf_float+0x3a0>
 8015c80:	4630      	mov	r0, r6
 8015c82:	4639      	mov	r1, r7
 8015c84:	f7ea ffd0 	bl	8000c28 <__aeabi_d2f>
 8015c88:	f8c8 0000 	str.w	r0, [r8]
 8015c8c:	e7c6      	b.n	8015c1c <_scanf_float+0x3a0>
 8015c8e:	2500      	movs	r5, #0
 8015c90:	e635      	b.n	80158fe <_scanf_float+0x82>
 8015c92:	bf00      	nop
 8015c94:	0801c95a 	.word	0x0801c95a
 8015c98:	0801ca88 	.word	0x0801ca88

08015c9c <iprintf>:
 8015c9c:	b40f      	push	{r0, r1, r2, r3}
 8015c9e:	4b0a      	ldr	r3, [pc, #40]	; (8015cc8 <iprintf+0x2c>)
 8015ca0:	b513      	push	{r0, r1, r4, lr}
 8015ca2:	681c      	ldr	r4, [r3, #0]
 8015ca4:	b124      	cbz	r4, 8015cb0 <iprintf+0x14>
 8015ca6:	69a3      	ldr	r3, [r4, #24]
 8015ca8:	b913      	cbnz	r3, 8015cb0 <iprintf+0x14>
 8015caa:	4620      	mov	r0, r4
 8015cac:	f7fe fc30 	bl	8014510 <__sinit>
 8015cb0:	ab05      	add	r3, sp, #20
 8015cb2:	9a04      	ldr	r2, [sp, #16]
 8015cb4:	68a1      	ldr	r1, [r4, #8]
 8015cb6:	9301      	str	r3, [sp, #4]
 8015cb8:	4620      	mov	r0, r4
 8015cba:	f004 f977 	bl	8019fac <_vfiprintf_r>
 8015cbe:	b002      	add	sp, #8
 8015cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015cc4:	b004      	add	sp, #16
 8015cc6:	4770      	bx	lr
 8015cc8:	200000d8 	.word	0x200000d8

08015ccc <_puts_r>:
 8015ccc:	b570      	push	{r4, r5, r6, lr}
 8015cce:	460e      	mov	r6, r1
 8015cd0:	4605      	mov	r5, r0
 8015cd2:	b118      	cbz	r0, 8015cdc <_puts_r+0x10>
 8015cd4:	6983      	ldr	r3, [r0, #24]
 8015cd6:	b90b      	cbnz	r3, 8015cdc <_puts_r+0x10>
 8015cd8:	f7fe fc1a 	bl	8014510 <__sinit>
 8015cdc:	69ab      	ldr	r3, [r5, #24]
 8015cde:	68ac      	ldr	r4, [r5, #8]
 8015ce0:	b913      	cbnz	r3, 8015ce8 <_puts_r+0x1c>
 8015ce2:	4628      	mov	r0, r5
 8015ce4:	f7fe fc14 	bl	8014510 <__sinit>
 8015ce8:	4b2c      	ldr	r3, [pc, #176]	; (8015d9c <_puts_r+0xd0>)
 8015cea:	429c      	cmp	r4, r3
 8015cec:	d120      	bne.n	8015d30 <_puts_r+0x64>
 8015cee:	686c      	ldr	r4, [r5, #4]
 8015cf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015cf2:	07db      	lsls	r3, r3, #31
 8015cf4:	d405      	bmi.n	8015d02 <_puts_r+0x36>
 8015cf6:	89a3      	ldrh	r3, [r4, #12]
 8015cf8:	0598      	lsls	r0, r3, #22
 8015cfa:	d402      	bmi.n	8015d02 <_puts_r+0x36>
 8015cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015cfe:	f7fe fde7 	bl	80148d0 <__retarget_lock_acquire_recursive>
 8015d02:	89a3      	ldrh	r3, [r4, #12]
 8015d04:	0719      	lsls	r1, r3, #28
 8015d06:	d51d      	bpl.n	8015d44 <_puts_r+0x78>
 8015d08:	6923      	ldr	r3, [r4, #16]
 8015d0a:	b1db      	cbz	r3, 8015d44 <_puts_r+0x78>
 8015d0c:	3e01      	subs	r6, #1
 8015d0e:	68a3      	ldr	r3, [r4, #8]
 8015d10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015d14:	3b01      	subs	r3, #1
 8015d16:	60a3      	str	r3, [r4, #8]
 8015d18:	bb39      	cbnz	r1, 8015d6a <_puts_r+0x9e>
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	da38      	bge.n	8015d90 <_puts_r+0xc4>
 8015d1e:	4622      	mov	r2, r4
 8015d20:	210a      	movs	r1, #10
 8015d22:	4628      	mov	r0, r5
 8015d24:	f001 fb9a 	bl	801745c <__swbuf_r>
 8015d28:	3001      	adds	r0, #1
 8015d2a:	d011      	beq.n	8015d50 <_puts_r+0x84>
 8015d2c:	250a      	movs	r5, #10
 8015d2e:	e011      	b.n	8015d54 <_puts_r+0x88>
 8015d30:	4b1b      	ldr	r3, [pc, #108]	; (8015da0 <_puts_r+0xd4>)
 8015d32:	429c      	cmp	r4, r3
 8015d34:	d101      	bne.n	8015d3a <_puts_r+0x6e>
 8015d36:	68ac      	ldr	r4, [r5, #8]
 8015d38:	e7da      	b.n	8015cf0 <_puts_r+0x24>
 8015d3a:	4b1a      	ldr	r3, [pc, #104]	; (8015da4 <_puts_r+0xd8>)
 8015d3c:	429c      	cmp	r4, r3
 8015d3e:	bf08      	it	eq
 8015d40:	68ec      	ldreq	r4, [r5, #12]
 8015d42:	e7d5      	b.n	8015cf0 <_puts_r+0x24>
 8015d44:	4621      	mov	r1, r4
 8015d46:	4628      	mov	r0, r5
 8015d48:	f001 fbec 	bl	8017524 <__swsetup_r>
 8015d4c:	2800      	cmp	r0, #0
 8015d4e:	d0dd      	beq.n	8015d0c <_puts_r+0x40>
 8015d50:	f04f 35ff 	mov.w	r5, #4294967295
 8015d54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015d56:	07da      	lsls	r2, r3, #31
 8015d58:	d405      	bmi.n	8015d66 <_puts_r+0x9a>
 8015d5a:	89a3      	ldrh	r3, [r4, #12]
 8015d5c:	059b      	lsls	r3, r3, #22
 8015d5e:	d402      	bmi.n	8015d66 <_puts_r+0x9a>
 8015d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015d62:	f7fe fdb7 	bl	80148d4 <__retarget_lock_release_recursive>
 8015d66:	4628      	mov	r0, r5
 8015d68:	bd70      	pop	{r4, r5, r6, pc}
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	da04      	bge.n	8015d78 <_puts_r+0xac>
 8015d6e:	69a2      	ldr	r2, [r4, #24]
 8015d70:	429a      	cmp	r2, r3
 8015d72:	dc06      	bgt.n	8015d82 <_puts_r+0xb6>
 8015d74:	290a      	cmp	r1, #10
 8015d76:	d004      	beq.n	8015d82 <_puts_r+0xb6>
 8015d78:	6823      	ldr	r3, [r4, #0]
 8015d7a:	1c5a      	adds	r2, r3, #1
 8015d7c:	6022      	str	r2, [r4, #0]
 8015d7e:	7019      	strb	r1, [r3, #0]
 8015d80:	e7c5      	b.n	8015d0e <_puts_r+0x42>
 8015d82:	4622      	mov	r2, r4
 8015d84:	4628      	mov	r0, r5
 8015d86:	f001 fb69 	bl	801745c <__swbuf_r>
 8015d8a:	3001      	adds	r0, #1
 8015d8c:	d1bf      	bne.n	8015d0e <_puts_r+0x42>
 8015d8e:	e7df      	b.n	8015d50 <_puts_r+0x84>
 8015d90:	6823      	ldr	r3, [r4, #0]
 8015d92:	250a      	movs	r5, #10
 8015d94:	1c5a      	adds	r2, r3, #1
 8015d96:	6022      	str	r2, [r4, #0]
 8015d98:	701d      	strb	r5, [r3, #0]
 8015d9a:	e7db      	b.n	8015d54 <_puts_r+0x88>
 8015d9c:	0801c7ac 	.word	0x0801c7ac
 8015da0:	0801c7cc 	.word	0x0801c7cc
 8015da4:	0801c78c 	.word	0x0801c78c

08015da8 <puts>:
 8015da8:	4b02      	ldr	r3, [pc, #8]	; (8015db4 <puts+0xc>)
 8015daa:	4601      	mov	r1, r0
 8015dac:	6818      	ldr	r0, [r3, #0]
 8015dae:	f7ff bf8d 	b.w	8015ccc <_puts_r>
 8015db2:	bf00      	nop
 8015db4:	200000d8 	.word	0x200000d8

08015db8 <cleanup_glue>:
 8015db8:	b538      	push	{r3, r4, r5, lr}
 8015dba:	460c      	mov	r4, r1
 8015dbc:	6809      	ldr	r1, [r1, #0]
 8015dbe:	4605      	mov	r5, r0
 8015dc0:	b109      	cbz	r1, 8015dc6 <cleanup_glue+0xe>
 8015dc2:	f7ff fff9 	bl	8015db8 <cleanup_glue>
 8015dc6:	4621      	mov	r1, r4
 8015dc8:	4628      	mov	r0, r5
 8015dca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015dce:	f7ff b841 	b.w	8014e54 <_free_r>
	...

08015dd4 <_reclaim_reent>:
 8015dd4:	4b2c      	ldr	r3, [pc, #176]	; (8015e88 <_reclaim_reent+0xb4>)
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	4283      	cmp	r3, r0
 8015dda:	b570      	push	{r4, r5, r6, lr}
 8015ddc:	4604      	mov	r4, r0
 8015dde:	d051      	beq.n	8015e84 <_reclaim_reent+0xb0>
 8015de0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8015de2:	b143      	cbz	r3, 8015df6 <_reclaim_reent+0x22>
 8015de4:	68db      	ldr	r3, [r3, #12]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d14a      	bne.n	8015e80 <_reclaim_reent+0xac>
 8015dea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015dec:	6819      	ldr	r1, [r3, #0]
 8015dee:	b111      	cbz	r1, 8015df6 <_reclaim_reent+0x22>
 8015df0:	4620      	mov	r0, r4
 8015df2:	f7ff f82f 	bl	8014e54 <_free_r>
 8015df6:	6961      	ldr	r1, [r4, #20]
 8015df8:	b111      	cbz	r1, 8015e00 <_reclaim_reent+0x2c>
 8015dfa:	4620      	mov	r0, r4
 8015dfc:	f7ff f82a 	bl	8014e54 <_free_r>
 8015e00:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015e02:	b111      	cbz	r1, 8015e0a <_reclaim_reent+0x36>
 8015e04:	4620      	mov	r0, r4
 8015e06:	f7ff f825 	bl	8014e54 <_free_r>
 8015e0a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015e0c:	b111      	cbz	r1, 8015e14 <_reclaim_reent+0x40>
 8015e0e:	4620      	mov	r0, r4
 8015e10:	f7ff f820 	bl	8014e54 <_free_r>
 8015e14:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8015e16:	b111      	cbz	r1, 8015e1e <_reclaim_reent+0x4a>
 8015e18:	4620      	mov	r0, r4
 8015e1a:	f7ff f81b 	bl	8014e54 <_free_r>
 8015e1e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8015e20:	b111      	cbz	r1, 8015e28 <_reclaim_reent+0x54>
 8015e22:	4620      	mov	r0, r4
 8015e24:	f7ff f816 	bl	8014e54 <_free_r>
 8015e28:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8015e2a:	b111      	cbz	r1, 8015e32 <_reclaim_reent+0x5e>
 8015e2c:	4620      	mov	r0, r4
 8015e2e:	f7ff f811 	bl	8014e54 <_free_r>
 8015e32:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8015e34:	b111      	cbz	r1, 8015e3c <_reclaim_reent+0x68>
 8015e36:	4620      	mov	r0, r4
 8015e38:	f7ff f80c 	bl	8014e54 <_free_r>
 8015e3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015e3e:	b111      	cbz	r1, 8015e46 <_reclaim_reent+0x72>
 8015e40:	4620      	mov	r0, r4
 8015e42:	f7ff f807 	bl	8014e54 <_free_r>
 8015e46:	69a3      	ldr	r3, [r4, #24]
 8015e48:	b1e3      	cbz	r3, 8015e84 <_reclaim_reent+0xb0>
 8015e4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015e4c:	4620      	mov	r0, r4
 8015e4e:	4798      	blx	r3
 8015e50:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8015e52:	b1b9      	cbz	r1, 8015e84 <_reclaim_reent+0xb0>
 8015e54:	4620      	mov	r0, r4
 8015e56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e5a:	f7ff bfad 	b.w	8015db8 <cleanup_glue>
 8015e5e:	5949      	ldr	r1, [r1, r5]
 8015e60:	b941      	cbnz	r1, 8015e74 <_reclaim_reent+0xa0>
 8015e62:	3504      	adds	r5, #4
 8015e64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015e66:	2d80      	cmp	r5, #128	; 0x80
 8015e68:	68d9      	ldr	r1, [r3, #12]
 8015e6a:	d1f8      	bne.n	8015e5e <_reclaim_reent+0x8a>
 8015e6c:	4620      	mov	r0, r4
 8015e6e:	f7fe fff1 	bl	8014e54 <_free_r>
 8015e72:	e7ba      	b.n	8015dea <_reclaim_reent+0x16>
 8015e74:	680e      	ldr	r6, [r1, #0]
 8015e76:	4620      	mov	r0, r4
 8015e78:	f7fe ffec 	bl	8014e54 <_free_r>
 8015e7c:	4631      	mov	r1, r6
 8015e7e:	e7ef      	b.n	8015e60 <_reclaim_reent+0x8c>
 8015e80:	2500      	movs	r5, #0
 8015e82:	e7ef      	b.n	8015e64 <_reclaim_reent+0x90>
 8015e84:	bd70      	pop	{r4, r5, r6, pc}
 8015e86:	bf00      	nop
 8015e88:	200000d8 	.word	0x200000d8

08015e8c <_sbrk_r>:
 8015e8c:	b538      	push	{r3, r4, r5, lr}
 8015e8e:	4d06      	ldr	r5, [pc, #24]	; (8015ea8 <_sbrk_r+0x1c>)
 8015e90:	2300      	movs	r3, #0
 8015e92:	4604      	mov	r4, r0
 8015e94:	4608      	mov	r0, r1
 8015e96:	602b      	str	r3, [r5, #0]
 8015e98:	f004 fc06 	bl	801a6a8 <_sbrk>
 8015e9c:	1c43      	adds	r3, r0, #1
 8015e9e:	d102      	bne.n	8015ea6 <_sbrk_r+0x1a>
 8015ea0:	682b      	ldr	r3, [r5, #0]
 8015ea2:	b103      	cbz	r3, 8015ea6 <_sbrk_r+0x1a>
 8015ea4:	6023      	str	r3, [r4, #0]
 8015ea6:	bd38      	pop	{r3, r4, r5, pc}
 8015ea8:	20006554 	.word	0x20006554

08015eac <nanf>:
 8015eac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015eb4 <nanf+0x8>
 8015eb0:	4770      	bx	lr
 8015eb2:	bf00      	nop
 8015eb4:	7fc00000 	.word	0x7fc00000

08015eb8 <_raise_r>:
 8015eb8:	291f      	cmp	r1, #31
 8015eba:	b538      	push	{r3, r4, r5, lr}
 8015ebc:	4604      	mov	r4, r0
 8015ebe:	460d      	mov	r5, r1
 8015ec0:	d904      	bls.n	8015ecc <_raise_r+0x14>
 8015ec2:	2316      	movs	r3, #22
 8015ec4:	6003      	str	r3, [r0, #0]
 8015ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8015eca:	bd38      	pop	{r3, r4, r5, pc}
 8015ecc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015ece:	b112      	cbz	r2, 8015ed6 <_raise_r+0x1e>
 8015ed0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015ed4:	b94b      	cbnz	r3, 8015eea <_raise_r+0x32>
 8015ed6:	4620      	mov	r0, r4
 8015ed8:	f000 f830 	bl	8015f3c <_getpid_r>
 8015edc:	462a      	mov	r2, r5
 8015ede:	4601      	mov	r1, r0
 8015ee0:	4620      	mov	r0, r4
 8015ee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015ee6:	f000 b817 	b.w	8015f18 <_kill_r>
 8015eea:	2b01      	cmp	r3, #1
 8015eec:	d00a      	beq.n	8015f04 <_raise_r+0x4c>
 8015eee:	1c59      	adds	r1, r3, #1
 8015ef0:	d103      	bne.n	8015efa <_raise_r+0x42>
 8015ef2:	2316      	movs	r3, #22
 8015ef4:	6003      	str	r3, [r0, #0]
 8015ef6:	2001      	movs	r0, #1
 8015ef8:	e7e7      	b.n	8015eca <_raise_r+0x12>
 8015efa:	2400      	movs	r4, #0
 8015efc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015f00:	4628      	mov	r0, r5
 8015f02:	4798      	blx	r3
 8015f04:	2000      	movs	r0, #0
 8015f06:	e7e0      	b.n	8015eca <_raise_r+0x12>

08015f08 <raise>:
 8015f08:	4b02      	ldr	r3, [pc, #8]	; (8015f14 <raise+0xc>)
 8015f0a:	4601      	mov	r1, r0
 8015f0c:	6818      	ldr	r0, [r3, #0]
 8015f0e:	f7ff bfd3 	b.w	8015eb8 <_raise_r>
 8015f12:	bf00      	nop
 8015f14:	200000d8 	.word	0x200000d8

08015f18 <_kill_r>:
 8015f18:	b538      	push	{r3, r4, r5, lr}
 8015f1a:	4d07      	ldr	r5, [pc, #28]	; (8015f38 <_kill_r+0x20>)
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	4604      	mov	r4, r0
 8015f20:	4608      	mov	r0, r1
 8015f22:	4611      	mov	r1, r2
 8015f24:	602b      	str	r3, [r5, #0]
 8015f26:	f004 fba7 	bl	801a678 <_kill>
 8015f2a:	1c43      	adds	r3, r0, #1
 8015f2c:	d102      	bne.n	8015f34 <_kill_r+0x1c>
 8015f2e:	682b      	ldr	r3, [r5, #0]
 8015f30:	b103      	cbz	r3, 8015f34 <_kill_r+0x1c>
 8015f32:	6023      	str	r3, [r4, #0]
 8015f34:	bd38      	pop	{r3, r4, r5, pc}
 8015f36:	bf00      	nop
 8015f38:	20006554 	.word	0x20006554

08015f3c <_getpid_r>:
 8015f3c:	f004 bb8c 	b.w	801a658 <_getpid>

08015f40 <siprintf>:
 8015f40:	b40e      	push	{r1, r2, r3}
 8015f42:	b500      	push	{lr}
 8015f44:	b09c      	sub	sp, #112	; 0x70
 8015f46:	ab1d      	add	r3, sp, #116	; 0x74
 8015f48:	9002      	str	r0, [sp, #8]
 8015f4a:	9006      	str	r0, [sp, #24]
 8015f4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015f50:	4809      	ldr	r0, [pc, #36]	; (8015f78 <siprintf+0x38>)
 8015f52:	9107      	str	r1, [sp, #28]
 8015f54:	9104      	str	r1, [sp, #16]
 8015f56:	4909      	ldr	r1, [pc, #36]	; (8015f7c <siprintf+0x3c>)
 8015f58:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f5c:	9105      	str	r1, [sp, #20]
 8015f5e:	6800      	ldr	r0, [r0, #0]
 8015f60:	9301      	str	r3, [sp, #4]
 8015f62:	a902      	add	r1, sp, #8
 8015f64:	f003 fd26 	bl	80199b4 <_svfiprintf_r>
 8015f68:	9b02      	ldr	r3, [sp, #8]
 8015f6a:	2200      	movs	r2, #0
 8015f6c:	701a      	strb	r2, [r3, #0]
 8015f6e:	b01c      	add	sp, #112	; 0x70
 8015f70:	f85d eb04 	ldr.w	lr, [sp], #4
 8015f74:	b003      	add	sp, #12
 8015f76:	4770      	bx	lr
 8015f78:	200000d8 	.word	0x200000d8
 8015f7c:	ffff0208 	.word	0xffff0208

08015f80 <siscanf>:
 8015f80:	b40e      	push	{r1, r2, r3}
 8015f82:	b510      	push	{r4, lr}
 8015f84:	b09f      	sub	sp, #124	; 0x7c
 8015f86:	ac21      	add	r4, sp, #132	; 0x84
 8015f88:	f44f 7101 	mov.w	r1, #516	; 0x204
 8015f8c:	f854 2b04 	ldr.w	r2, [r4], #4
 8015f90:	9201      	str	r2, [sp, #4]
 8015f92:	f8ad 101c 	strh.w	r1, [sp, #28]
 8015f96:	9004      	str	r0, [sp, #16]
 8015f98:	9008      	str	r0, [sp, #32]
 8015f9a:	f7ea f933 	bl	8000204 <strlen>
 8015f9e:	4b0c      	ldr	r3, [pc, #48]	; (8015fd0 <siscanf+0x50>)
 8015fa0:	9005      	str	r0, [sp, #20]
 8015fa2:	9009      	str	r0, [sp, #36]	; 0x24
 8015fa4:	930d      	str	r3, [sp, #52]	; 0x34
 8015fa6:	480b      	ldr	r0, [pc, #44]	; (8015fd4 <siscanf+0x54>)
 8015fa8:	9a01      	ldr	r2, [sp, #4]
 8015faa:	6800      	ldr	r0, [r0, #0]
 8015fac:	9403      	str	r4, [sp, #12]
 8015fae:	2300      	movs	r3, #0
 8015fb0:	9311      	str	r3, [sp, #68]	; 0x44
 8015fb2:	9316      	str	r3, [sp, #88]	; 0x58
 8015fb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015fb8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015fbc:	a904      	add	r1, sp, #16
 8015fbe:	4623      	mov	r3, r4
 8015fc0:	f003 fe52 	bl	8019c68 <__ssvfiscanf_r>
 8015fc4:	b01f      	add	sp, #124	; 0x7c
 8015fc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015fca:	b003      	add	sp, #12
 8015fcc:	4770      	bx	lr
 8015fce:	bf00      	nop
 8015fd0:	08015ffb 	.word	0x08015ffb
 8015fd4:	200000d8 	.word	0x200000d8

08015fd8 <__sread>:
 8015fd8:	b510      	push	{r4, lr}
 8015fda:	460c      	mov	r4, r1
 8015fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015fe0:	f004 fa60 	bl	801a4a4 <_read_r>
 8015fe4:	2800      	cmp	r0, #0
 8015fe6:	bfab      	itete	ge
 8015fe8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015fea:	89a3      	ldrhlt	r3, [r4, #12]
 8015fec:	181b      	addge	r3, r3, r0
 8015fee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015ff2:	bfac      	ite	ge
 8015ff4:	6563      	strge	r3, [r4, #84]	; 0x54
 8015ff6:	81a3      	strhlt	r3, [r4, #12]
 8015ff8:	bd10      	pop	{r4, pc}

08015ffa <__seofread>:
 8015ffa:	2000      	movs	r0, #0
 8015ffc:	4770      	bx	lr

08015ffe <__swrite>:
 8015ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016002:	461f      	mov	r7, r3
 8016004:	898b      	ldrh	r3, [r1, #12]
 8016006:	05db      	lsls	r3, r3, #23
 8016008:	4605      	mov	r5, r0
 801600a:	460c      	mov	r4, r1
 801600c:	4616      	mov	r6, r2
 801600e:	d505      	bpl.n	801601c <__swrite+0x1e>
 8016010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016014:	2302      	movs	r3, #2
 8016016:	2200      	movs	r2, #0
 8016018:	f002 feec 	bl	8018df4 <_lseek_r>
 801601c:	89a3      	ldrh	r3, [r4, #12]
 801601e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016022:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016026:	81a3      	strh	r3, [r4, #12]
 8016028:	4632      	mov	r2, r6
 801602a:	463b      	mov	r3, r7
 801602c:	4628      	mov	r0, r5
 801602e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016032:	f001 ba65 	b.w	8017500 <_write_r>

08016036 <__sseek>:
 8016036:	b510      	push	{r4, lr}
 8016038:	460c      	mov	r4, r1
 801603a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801603e:	f002 fed9 	bl	8018df4 <_lseek_r>
 8016042:	1c43      	adds	r3, r0, #1
 8016044:	89a3      	ldrh	r3, [r4, #12]
 8016046:	bf15      	itete	ne
 8016048:	6560      	strne	r0, [r4, #84]	; 0x54
 801604a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801604e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016052:	81a3      	strheq	r3, [r4, #12]
 8016054:	bf18      	it	ne
 8016056:	81a3      	strhne	r3, [r4, #12]
 8016058:	bd10      	pop	{r4, pc}

0801605a <__sclose>:
 801605a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801605e:	f001 baed 	b.w	801763c <_close_r>

08016062 <strchr>:
 8016062:	b2c9      	uxtb	r1, r1
 8016064:	4603      	mov	r3, r0
 8016066:	f810 2b01 	ldrb.w	r2, [r0], #1
 801606a:	b11a      	cbz	r2, 8016074 <strchr+0x12>
 801606c:	428a      	cmp	r2, r1
 801606e:	d1f9      	bne.n	8016064 <strchr+0x2>
 8016070:	4618      	mov	r0, r3
 8016072:	4770      	bx	lr
 8016074:	2900      	cmp	r1, #0
 8016076:	bf18      	it	ne
 8016078:	2300      	movne	r3, #0
 801607a:	e7f9      	b.n	8016070 <strchr+0xe>

0801607c <strcpy>:
 801607c:	4603      	mov	r3, r0
 801607e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016082:	f803 2b01 	strb.w	r2, [r3], #1
 8016086:	2a00      	cmp	r2, #0
 8016088:	d1f9      	bne.n	801607e <strcpy+0x2>
 801608a:	4770      	bx	lr

0801608c <strncmp>:
 801608c:	b510      	push	{r4, lr}
 801608e:	b16a      	cbz	r2, 80160ac <strncmp+0x20>
 8016090:	3901      	subs	r1, #1
 8016092:	1884      	adds	r4, r0, r2
 8016094:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016098:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801609c:	4293      	cmp	r3, r2
 801609e:	d103      	bne.n	80160a8 <strncmp+0x1c>
 80160a0:	42a0      	cmp	r0, r4
 80160a2:	d001      	beq.n	80160a8 <strncmp+0x1c>
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d1f5      	bne.n	8016094 <strncmp+0x8>
 80160a8:	1a98      	subs	r0, r3, r2
 80160aa:	bd10      	pop	{r4, pc}
 80160ac:	4610      	mov	r0, r2
 80160ae:	e7fc      	b.n	80160aa <strncmp+0x1e>

080160b0 <sulp>:
 80160b0:	b570      	push	{r4, r5, r6, lr}
 80160b2:	4604      	mov	r4, r0
 80160b4:	460d      	mov	r5, r1
 80160b6:	ec45 4b10 	vmov	d0, r4, r5
 80160ba:	4616      	mov	r6, r2
 80160bc:	f003 fa9a 	bl	80195f4 <__ulp>
 80160c0:	ec51 0b10 	vmov	r0, r1, d0
 80160c4:	b17e      	cbz	r6, 80160e6 <sulp+0x36>
 80160c6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80160ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	dd09      	ble.n	80160e6 <sulp+0x36>
 80160d2:	051b      	lsls	r3, r3, #20
 80160d4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80160d8:	2400      	movs	r4, #0
 80160da:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80160de:	4622      	mov	r2, r4
 80160e0:	462b      	mov	r3, r5
 80160e2:	f7ea faa9 	bl	8000638 <__aeabi_dmul>
 80160e6:	bd70      	pop	{r4, r5, r6, pc}

080160e8 <_strtod_l>:
 80160e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160ec:	b0a3      	sub	sp, #140	; 0x8c
 80160ee:	461f      	mov	r7, r3
 80160f0:	2300      	movs	r3, #0
 80160f2:	931e      	str	r3, [sp, #120]	; 0x78
 80160f4:	4ba4      	ldr	r3, [pc, #656]	; (8016388 <_strtod_l+0x2a0>)
 80160f6:	9219      	str	r2, [sp, #100]	; 0x64
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	9307      	str	r3, [sp, #28]
 80160fc:	4604      	mov	r4, r0
 80160fe:	4618      	mov	r0, r3
 8016100:	4688      	mov	r8, r1
 8016102:	f7ea f87f 	bl	8000204 <strlen>
 8016106:	f04f 0a00 	mov.w	sl, #0
 801610a:	4605      	mov	r5, r0
 801610c:	f04f 0b00 	mov.w	fp, #0
 8016110:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016114:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016116:	781a      	ldrb	r2, [r3, #0]
 8016118:	2a2b      	cmp	r2, #43	; 0x2b
 801611a:	d04c      	beq.n	80161b6 <_strtod_l+0xce>
 801611c:	d839      	bhi.n	8016192 <_strtod_l+0xaa>
 801611e:	2a0d      	cmp	r2, #13
 8016120:	d832      	bhi.n	8016188 <_strtod_l+0xa0>
 8016122:	2a08      	cmp	r2, #8
 8016124:	d832      	bhi.n	801618c <_strtod_l+0xa4>
 8016126:	2a00      	cmp	r2, #0
 8016128:	d03c      	beq.n	80161a4 <_strtod_l+0xbc>
 801612a:	2300      	movs	r3, #0
 801612c:	930e      	str	r3, [sp, #56]	; 0x38
 801612e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016130:	7833      	ldrb	r3, [r6, #0]
 8016132:	2b30      	cmp	r3, #48	; 0x30
 8016134:	f040 80b4 	bne.w	80162a0 <_strtod_l+0x1b8>
 8016138:	7873      	ldrb	r3, [r6, #1]
 801613a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801613e:	2b58      	cmp	r3, #88	; 0x58
 8016140:	d16c      	bne.n	801621c <_strtod_l+0x134>
 8016142:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016144:	9301      	str	r3, [sp, #4]
 8016146:	ab1e      	add	r3, sp, #120	; 0x78
 8016148:	9702      	str	r7, [sp, #8]
 801614a:	9300      	str	r3, [sp, #0]
 801614c:	4a8f      	ldr	r2, [pc, #572]	; (801638c <_strtod_l+0x2a4>)
 801614e:	ab1f      	add	r3, sp, #124	; 0x7c
 8016150:	a91d      	add	r1, sp, #116	; 0x74
 8016152:	4620      	mov	r0, r4
 8016154:	f002 fa4c 	bl	80185f0 <__gethex>
 8016158:	f010 0707 	ands.w	r7, r0, #7
 801615c:	4605      	mov	r5, r0
 801615e:	d005      	beq.n	801616c <_strtod_l+0x84>
 8016160:	2f06      	cmp	r7, #6
 8016162:	d12a      	bne.n	80161ba <_strtod_l+0xd2>
 8016164:	3601      	adds	r6, #1
 8016166:	2300      	movs	r3, #0
 8016168:	961d      	str	r6, [sp, #116]	; 0x74
 801616a:	930e      	str	r3, [sp, #56]	; 0x38
 801616c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801616e:	2b00      	cmp	r3, #0
 8016170:	f040 8596 	bne.w	8016ca0 <_strtod_l+0xbb8>
 8016174:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016176:	b1db      	cbz	r3, 80161b0 <_strtod_l+0xc8>
 8016178:	4652      	mov	r2, sl
 801617a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801617e:	ec43 2b10 	vmov	d0, r2, r3
 8016182:	b023      	add	sp, #140	; 0x8c
 8016184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016188:	2a20      	cmp	r2, #32
 801618a:	d1ce      	bne.n	801612a <_strtod_l+0x42>
 801618c:	3301      	adds	r3, #1
 801618e:	931d      	str	r3, [sp, #116]	; 0x74
 8016190:	e7c0      	b.n	8016114 <_strtod_l+0x2c>
 8016192:	2a2d      	cmp	r2, #45	; 0x2d
 8016194:	d1c9      	bne.n	801612a <_strtod_l+0x42>
 8016196:	2201      	movs	r2, #1
 8016198:	920e      	str	r2, [sp, #56]	; 0x38
 801619a:	1c5a      	adds	r2, r3, #1
 801619c:	921d      	str	r2, [sp, #116]	; 0x74
 801619e:	785b      	ldrb	r3, [r3, #1]
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d1c4      	bne.n	801612e <_strtod_l+0x46>
 80161a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80161a6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	f040 8576 	bne.w	8016c9c <_strtod_l+0xbb4>
 80161b0:	4652      	mov	r2, sl
 80161b2:	465b      	mov	r3, fp
 80161b4:	e7e3      	b.n	801617e <_strtod_l+0x96>
 80161b6:	2200      	movs	r2, #0
 80161b8:	e7ee      	b.n	8016198 <_strtod_l+0xb0>
 80161ba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80161bc:	b13a      	cbz	r2, 80161ce <_strtod_l+0xe6>
 80161be:	2135      	movs	r1, #53	; 0x35
 80161c0:	a820      	add	r0, sp, #128	; 0x80
 80161c2:	f003 fb22 	bl	801980a <__copybits>
 80161c6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80161c8:	4620      	mov	r0, r4
 80161ca:	f002 fee7 	bl	8018f9c <_Bfree>
 80161ce:	3f01      	subs	r7, #1
 80161d0:	2f05      	cmp	r7, #5
 80161d2:	d807      	bhi.n	80161e4 <_strtod_l+0xfc>
 80161d4:	e8df f007 	tbb	[pc, r7]
 80161d8:	1d180b0e 	.word	0x1d180b0e
 80161dc:	030e      	.short	0x030e
 80161de:	f04f 0b00 	mov.w	fp, #0
 80161e2:	46da      	mov	sl, fp
 80161e4:	0728      	lsls	r0, r5, #28
 80161e6:	d5c1      	bpl.n	801616c <_strtod_l+0x84>
 80161e8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80161ec:	e7be      	b.n	801616c <_strtod_l+0x84>
 80161ee:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80161f2:	e7f7      	b.n	80161e4 <_strtod_l+0xfc>
 80161f4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80161f8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80161fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80161fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016202:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016206:	e7ed      	b.n	80161e4 <_strtod_l+0xfc>
 8016208:	f8df b184 	ldr.w	fp, [pc, #388]	; 8016390 <_strtod_l+0x2a8>
 801620c:	f04f 0a00 	mov.w	sl, #0
 8016210:	e7e8      	b.n	80161e4 <_strtod_l+0xfc>
 8016212:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016216:	f04f 3aff 	mov.w	sl, #4294967295
 801621a:	e7e3      	b.n	80161e4 <_strtod_l+0xfc>
 801621c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801621e:	1c5a      	adds	r2, r3, #1
 8016220:	921d      	str	r2, [sp, #116]	; 0x74
 8016222:	785b      	ldrb	r3, [r3, #1]
 8016224:	2b30      	cmp	r3, #48	; 0x30
 8016226:	d0f9      	beq.n	801621c <_strtod_l+0x134>
 8016228:	2b00      	cmp	r3, #0
 801622a:	d09f      	beq.n	801616c <_strtod_l+0x84>
 801622c:	2301      	movs	r3, #1
 801622e:	f04f 0900 	mov.w	r9, #0
 8016232:	9304      	str	r3, [sp, #16]
 8016234:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016236:	930a      	str	r3, [sp, #40]	; 0x28
 8016238:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801623c:	464f      	mov	r7, r9
 801623e:	220a      	movs	r2, #10
 8016240:	981d      	ldr	r0, [sp, #116]	; 0x74
 8016242:	7806      	ldrb	r6, [r0, #0]
 8016244:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8016248:	b2d9      	uxtb	r1, r3
 801624a:	2909      	cmp	r1, #9
 801624c:	d92a      	bls.n	80162a4 <_strtod_l+0x1bc>
 801624e:	9907      	ldr	r1, [sp, #28]
 8016250:	462a      	mov	r2, r5
 8016252:	f7ff ff1b 	bl	801608c <strncmp>
 8016256:	b398      	cbz	r0, 80162c0 <_strtod_l+0x1d8>
 8016258:	2000      	movs	r0, #0
 801625a:	4633      	mov	r3, r6
 801625c:	463d      	mov	r5, r7
 801625e:	9007      	str	r0, [sp, #28]
 8016260:	4602      	mov	r2, r0
 8016262:	2b65      	cmp	r3, #101	; 0x65
 8016264:	d001      	beq.n	801626a <_strtod_l+0x182>
 8016266:	2b45      	cmp	r3, #69	; 0x45
 8016268:	d118      	bne.n	801629c <_strtod_l+0x1b4>
 801626a:	b91d      	cbnz	r5, 8016274 <_strtod_l+0x18c>
 801626c:	9b04      	ldr	r3, [sp, #16]
 801626e:	4303      	orrs	r3, r0
 8016270:	d098      	beq.n	80161a4 <_strtod_l+0xbc>
 8016272:	2500      	movs	r5, #0
 8016274:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8016278:	f108 0301 	add.w	r3, r8, #1
 801627c:	931d      	str	r3, [sp, #116]	; 0x74
 801627e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016282:	2b2b      	cmp	r3, #43	; 0x2b
 8016284:	d075      	beq.n	8016372 <_strtod_l+0x28a>
 8016286:	2b2d      	cmp	r3, #45	; 0x2d
 8016288:	d07b      	beq.n	8016382 <_strtod_l+0x29a>
 801628a:	f04f 0c00 	mov.w	ip, #0
 801628e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016292:	2909      	cmp	r1, #9
 8016294:	f240 8082 	bls.w	801639c <_strtod_l+0x2b4>
 8016298:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801629c:	2600      	movs	r6, #0
 801629e:	e09d      	b.n	80163dc <_strtod_l+0x2f4>
 80162a0:	2300      	movs	r3, #0
 80162a2:	e7c4      	b.n	801622e <_strtod_l+0x146>
 80162a4:	2f08      	cmp	r7, #8
 80162a6:	bfd8      	it	le
 80162a8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80162aa:	f100 0001 	add.w	r0, r0, #1
 80162ae:	bfda      	itte	le
 80162b0:	fb02 3301 	mlale	r3, r2, r1, r3
 80162b4:	9309      	strle	r3, [sp, #36]	; 0x24
 80162b6:	fb02 3909 	mlagt	r9, r2, r9, r3
 80162ba:	3701      	adds	r7, #1
 80162bc:	901d      	str	r0, [sp, #116]	; 0x74
 80162be:	e7bf      	b.n	8016240 <_strtod_l+0x158>
 80162c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80162c2:	195a      	adds	r2, r3, r5
 80162c4:	921d      	str	r2, [sp, #116]	; 0x74
 80162c6:	5d5b      	ldrb	r3, [r3, r5]
 80162c8:	2f00      	cmp	r7, #0
 80162ca:	d037      	beq.n	801633c <_strtod_l+0x254>
 80162cc:	9007      	str	r0, [sp, #28]
 80162ce:	463d      	mov	r5, r7
 80162d0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80162d4:	2a09      	cmp	r2, #9
 80162d6:	d912      	bls.n	80162fe <_strtod_l+0x216>
 80162d8:	2201      	movs	r2, #1
 80162da:	e7c2      	b.n	8016262 <_strtod_l+0x17a>
 80162dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80162de:	1c5a      	adds	r2, r3, #1
 80162e0:	921d      	str	r2, [sp, #116]	; 0x74
 80162e2:	785b      	ldrb	r3, [r3, #1]
 80162e4:	3001      	adds	r0, #1
 80162e6:	2b30      	cmp	r3, #48	; 0x30
 80162e8:	d0f8      	beq.n	80162dc <_strtod_l+0x1f4>
 80162ea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80162ee:	2a08      	cmp	r2, #8
 80162f0:	f200 84db 	bhi.w	8016caa <_strtod_l+0xbc2>
 80162f4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80162f6:	9007      	str	r0, [sp, #28]
 80162f8:	2000      	movs	r0, #0
 80162fa:	920a      	str	r2, [sp, #40]	; 0x28
 80162fc:	4605      	mov	r5, r0
 80162fe:	3b30      	subs	r3, #48	; 0x30
 8016300:	f100 0201 	add.w	r2, r0, #1
 8016304:	d014      	beq.n	8016330 <_strtod_l+0x248>
 8016306:	9907      	ldr	r1, [sp, #28]
 8016308:	4411      	add	r1, r2
 801630a:	9107      	str	r1, [sp, #28]
 801630c:	462a      	mov	r2, r5
 801630e:	eb00 0e05 	add.w	lr, r0, r5
 8016312:	210a      	movs	r1, #10
 8016314:	4572      	cmp	r2, lr
 8016316:	d113      	bne.n	8016340 <_strtod_l+0x258>
 8016318:	182a      	adds	r2, r5, r0
 801631a:	2a08      	cmp	r2, #8
 801631c:	f105 0501 	add.w	r5, r5, #1
 8016320:	4405      	add	r5, r0
 8016322:	dc1c      	bgt.n	801635e <_strtod_l+0x276>
 8016324:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016326:	220a      	movs	r2, #10
 8016328:	fb02 3301 	mla	r3, r2, r1, r3
 801632c:	9309      	str	r3, [sp, #36]	; 0x24
 801632e:	2200      	movs	r2, #0
 8016330:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016332:	1c59      	adds	r1, r3, #1
 8016334:	911d      	str	r1, [sp, #116]	; 0x74
 8016336:	785b      	ldrb	r3, [r3, #1]
 8016338:	4610      	mov	r0, r2
 801633a:	e7c9      	b.n	80162d0 <_strtod_l+0x1e8>
 801633c:	4638      	mov	r0, r7
 801633e:	e7d2      	b.n	80162e6 <_strtod_l+0x1fe>
 8016340:	2a08      	cmp	r2, #8
 8016342:	dc04      	bgt.n	801634e <_strtod_l+0x266>
 8016344:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8016346:	434e      	muls	r6, r1
 8016348:	9609      	str	r6, [sp, #36]	; 0x24
 801634a:	3201      	adds	r2, #1
 801634c:	e7e2      	b.n	8016314 <_strtod_l+0x22c>
 801634e:	f102 0c01 	add.w	ip, r2, #1
 8016352:	f1bc 0f10 	cmp.w	ip, #16
 8016356:	bfd8      	it	le
 8016358:	fb01 f909 	mulle.w	r9, r1, r9
 801635c:	e7f5      	b.n	801634a <_strtod_l+0x262>
 801635e:	2d10      	cmp	r5, #16
 8016360:	bfdc      	itt	le
 8016362:	220a      	movle	r2, #10
 8016364:	fb02 3909 	mlale	r9, r2, r9, r3
 8016368:	e7e1      	b.n	801632e <_strtod_l+0x246>
 801636a:	2300      	movs	r3, #0
 801636c:	9307      	str	r3, [sp, #28]
 801636e:	2201      	movs	r2, #1
 8016370:	e77c      	b.n	801626c <_strtod_l+0x184>
 8016372:	f04f 0c00 	mov.w	ip, #0
 8016376:	f108 0302 	add.w	r3, r8, #2
 801637a:	931d      	str	r3, [sp, #116]	; 0x74
 801637c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8016380:	e785      	b.n	801628e <_strtod_l+0x1a6>
 8016382:	f04f 0c01 	mov.w	ip, #1
 8016386:	e7f6      	b.n	8016376 <_strtod_l+0x28e>
 8016388:	0801cb70 	.word	0x0801cb70
 801638c:	0801c960 	.word	0x0801c960
 8016390:	7ff00000 	.word	0x7ff00000
 8016394:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016396:	1c59      	adds	r1, r3, #1
 8016398:	911d      	str	r1, [sp, #116]	; 0x74
 801639a:	785b      	ldrb	r3, [r3, #1]
 801639c:	2b30      	cmp	r3, #48	; 0x30
 801639e:	d0f9      	beq.n	8016394 <_strtod_l+0x2ac>
 80163a0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80163a4:	2908      	cmp	r1, #8
 80163a6:	f63f af79 	bhi.w	801629c <_strtod_l+0x1b4>
 80163aa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80163ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80163b0:	9308      	str	r3, [sp, #32]
 80163b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80163b4:	1c59      	adds	r1, r3, #1
 80163b6:	911d      	str	r1, [sp, #116]	; 0x74
 80163b8:	785b      	ldrb	r3, [r3, #1]
 80163ba:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80163be:	2e09      	cmp	r6, #9
 80163c0:	d937      	bls.n	8016432 <_strtod_l+0x34a>
 80163c2:	9e08      	ldr	r6, [sp, #32]
 80163c4:	1b89      	subs	r1, r1, r6
 80163c6:	2908      	cmp	r1, #8
 80163c8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80163cc:	dc02      	bgt.n	80163d4 <_strtod_l+0x2ec>
 80163ce:	4576      	cmp	r6, lr
 80163d0:	bfa8      	it	ge
 80163d2:	4676      	movge	r6, lr
 80163d4:	f1bc 0f00 	cmp.w	ip, #0
 80163d8:	d000      	beq.n	80163dc <_strtod_l+0x2f4>
 80163da:	4276      	negs	r6, r6
 80163dc:	2d00      	cmp	r5, #0
 80163de:	d14f      	bne.n	8016480 <_strtod_l+0x398>
 80163e0:	9904      	ldr	r1, [sp, #16]
 80163e2:	4301      	orrs	r1, r0
 80163e4:	f47f aec2 	bne.w	801616c <_strtod_l+0x84>
 80163e8:	2a00      	cmp	r2, #0
 80163ea:	f47f aedb 	bne.w	80161a4 <_strtod_l+0xbc>
 80163ee:	2b69      	cmp	r3, #105	; 0x69
 80163f0:	d027      	beq.n	8016442 <_strtod_l+0x35a>
 80163f2:	dc24      	bgt.n	801643e <_strtod_l+0x356>
 80163f4:	2b49      	cmp	r3, #73	; 0x49
 80163f6:	d024      	beq.n	8016442 <_strtod_l+0x35a>
 80163f8:	2b4e      	cmp	r3, #78	; 0x4e
 80163fa:	f47f aed3 	bne.w	80161a4 <_strtod_l+0xbc>
 80163fe:	499e      	ldr	r1, [pc, #632]	; (8016678 <_strtod_l+0x590>)
 8016400:	a81d      	add	r0, sp, #116	; 0x74
 8016402:	f002 fb4d 	bl	8018aa0 <__match>
 8016406:	2800      	cmp	r0, #0
 8016408:	f43f aecc 	beq.w	80161a4 <_strtod_l+0xbc>
 801640c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801640e:	781b      	ldrb	r3, [r3, #0]
 8016410:	2b28      	cmp	r3, #40	; 0x28
 8016412:	d12d      	bne.n	8016470 <_strtod_l+0x388>
 8016414:	4999      	ldr	r1, [pc, #612]	; (801667c <_strtod_l+0x594>)
 8016416:	aa20      	add	r2, sp, #128	; 0x80
 8016418:	a81d      	add	r0, sp, #116	; 0x74
 801641a:	f002 fb55 	bl	8018ac8 <__hexnan>
 801641e:	2805      	cmp	r0, #5
 8016420:	d126      	bne.n	8016470 <_strtod_l+0x388>
 8016422:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016424:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8016428:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801642c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016430:	e69c      	b.n	801616c <_strtod_l+0x84>
 8016432:	210a      	movs	r1, #10
 8016434:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016438:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801643c:	e7b9      	b.n	80163b2 <_strtod_l+0x2ca>
 801643e:	2b6e      	cmp	r3, #110	; 0x6e
 8016440:	e7db      	b.n	80163fa <_strtod_l+0x312>
 8016442:	498f      	ldr	r1, [pc, #572]	; (8016680 <_strtod_l+0x598>)
 8016444:	a81d      	add	r0, sp, #116	; 0x74
 8016446:	f002 fb2b 	bl	8018aa0 <__match>
 801644a:	2800      	cmp	r0, #0
 801644c:	f43f aeaa 	beq.w	80161a4 <_strtod_l+0xbc>
 8016450:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016452:	498c      	ldr	r1, [pc, #560]	; (8016684 <_strtod_l+0x59c>)
 8016454:	3b01      	subs	r3, #1
 8016456:	a81d      	add	r0, sp, #116	; 0x74
 8016458:	931d      	str	r3, [sp, #116]	; 0x74
 801645a:	f002 fb21 	bl	8018aa0 <__match>
 801645e:	b910      	cbnz	r0, 8016466 <_strtod_l+0x37e>
 8016460:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016462:	3301      	adds	r3, #1
 8016464:	931d      	str	r3, [sp, #116]	; 0x74
 8016466:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8016694 <_strtod_l+0x5ac>
 801646a:	f04f 0a00 	mov.w	sl, #0
 801646e:	e67d      	b.n	801616c <_strtod_l+0x84>
 8016470:	4885      	ldr	r0, [pc, #532]	; (8016688 <_strtod_l+0x5a0>)
 8016472:	f7fd fec5 	bl	8014200 <nan>
 8016476:	ed8d 0b04 	vstr	d0, [sp, #16]
 801647a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801647e:	e675      	b.n	801616c <_strtod_l+0x84>
 8016480:	9b07      	ldr	r3, [sp, #28]
 8016482:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016484:	1af3      	subs	r3, r6, r3
 8016486:	2f00      	cmp	r7, #0
 8016488:	bf08      	it	eq
 801648a:	462f      	moveq	r7, r5
 801648c:	2d10      	cmp	r5, #16
 801648e:	9308      	str	r3, [sp, #32]
 8016490:	46a8      	mov	r8, r5
 8016492:	bfa8      	it	ge
 8016494:	f04f 0810 	movge.w	r8, #16
 8016498:	f7ea f854 	bl	8000544 <__aeabi_ui2d>
 801649c:	2d09      	cmp	r5, #9
 801649e:	4682      	mov	sl, r0
 80164a0:	468b      	mov	fp, r1
 80164a2:	dd13      	ble.n	80164cc <_strtod_l+0x3e4>
 80164a4:	4b79      	ldr	r3, [pc, #484]	; (801668c <_strtod_l+0x5a4>)
 80164a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80164aa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80164ae:	f7ea f8c3 	bl	8000638 <__aeabi_dmul>
 80164b2:	4682      	mov	sl, r0
 80164b4:	4648      	mov	r0, r9
 80164b6:	468b      	mov	fp, r1
 80164b8:	f7ea f844 	bl	8000544 <__aeabi_ui2d>
 80164bc:	4602      	mov	r2, r0
 80164be:	460b      	mov	r3, r1
 80164c0:	4650      	mov	r0, sl
 80164c2:	4659      	mov	r1, fp
 80164c4:	f7e9 ff02 	bl	80002cc <__adddf3>
 80164c8:	4682      	mov	sl, r0
 80164ca:	468b      	mov	fp, r1
 80164cc:	2d0f      	cmp	r5, #15
 80164ce:	dc38      	bgt.n	8016542 <_strtod_l+0x45a>
 80164d0:	9b08      	ldr	r3, [sp, #32]
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	f43f ae4a 	beq.w	801616c <_strtod_l+0x84>
 80164d8:	dd24      	ble.n	8016524 <_strtod_l+0x43c>
 80164da:	2b16      	cmp	r3, #22
 80164dc:	dc0b      	bgt.n	80164f6 <_strtod_l+0x40e>
 80164de:	4d6b      	ldr	r5, [pc, #428]	; (801668c <_strtod_l+0x5a4>)
 80164e0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80164e4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80164e8:	4652      	mov	r2, sl
 80164ea:	465b      	mov	r3, fp
 80164ec:	f7ea f8a4 	bl	8000638 <__aeabi_dmul>
 80164f0:	4682      	mov	sl, r0
 80164f2:	468b      	mov	fp, r1
 80164f4:	e63a      	b.n	801616c <_strtod_l+0x84>
 80164f6:	9a08      	ldr	r2, [sp, #32]
 80164f8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80164fc:	4293      	cmp	r3, r2
 80164fe:	db20      	blt.n	8016542 <_strtod_l+0x45a>
 8016500:	4c62      	ldr	r4, [pc, #392]	; (801668c <_strtod_l+0x5a4>)
 8016502:	f1c5 050f 	rsb	r5, r5, #15
 8016506:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801650a:	4652      	mov	r2, sl
 801650c:	465b      	mov	r3, fp
 801650e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016512:	f7ea f891 	bl	8000638 <__aeabi_dmul>
 8016516:	9b08      	ldr	r3, [sp, #32]
 8016518:	1b5d      	subs	r5, r3, r5
 801651a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801651e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016522:	e7e3      	b.n	80164ec <_strtod_l+0x404>
 8016524:	9b08      	ldr	r3, [sp, #32]
 8016526:	3316      	adds	r3, #22
 8016528:	db0b      	blt.n	8016542 <_strtod_l+0x45a>
 801652a:	9b07      	ldr	r3, [sp, #28]
 801652c:	4a57      	ldr	r2, [pc, #348]	; (801668c <_strtod_l+0x5a4>)
 801652e:	1b9e      	subs	r6, r3, r6
 8016530:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8016534:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016538:	4650      	mov	r0, sl
 801653a:	4659      	mov	r1, fp
 801653c:	f7ea f9a6 	bl	800088c <__aeabi_ddiv>
 8016540:	e7d6      	b.n	80164f0 <_strtod_l+0x408>
 8016542:	9b08      	ldr	r3, [sp, #32]
 8016544:	eba5 0808 	sub.w	r8, r5, r8
 8016548:	4498      	add	r8, r3
 801654a:	f1b8 0f00 	cmp.w	r8, #0
 801654e:	dd71      	ble.n	8016634 <_strtod_l+0x54c>
 8016550:	f018 030f 	ands.w	r3, r8, #15
 8016554:	d00a      	beq.n	801656c <_strtod_l+0x484>
 8016556:	494d      	ldr	r1, [pc, #308]	; (801668c <_strtod_l+0x5a4>)
 8016558:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801655c:	4652      	mov	r2, sl
 801655e:	465b      	mov	r3, fp
 8016560:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016564:	f7ea f868 	bl	8000638 <__aeabi_dmul>
 8016568:	4682      	mov	sl, r0
 801656a:	468b      	mov	fp, r1
 801656c:	f038 080f 	bics.w	r8, r8, #15
 8016570:	d04d      	beq.n	801660e <_strtod_l+0x526>
 8016572:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016576:	dd22      	ble.n	80165be <_strtod_l+0x4d6>
 8016578:	2500      	movs	r5, #0
 801657a:	462e      	mov	r6, r5
 801657c:	9509      	str	r5, [sp, #36]	; 0x24
 801657e:	9507      	str	r5, [sp, #28]
 8016580:	2322      	movs	r3, #34	; 0x22
 8016582:	f8df b110 	ldr.w	fp, [pc, #272]	; 8016694 <_strtod_l+0x5ac>
 8016586:	6023      	str	r3, [r4, #0]
 8016588:	f04f 0a00 	mov.w	sl, #0
 801658c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801658e:	2b00      	cmp	r3, #0
 8016590:	f43f adec 	beq.w	801616c <_strtod_l+0x84>
 8016594:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016596:	4620      	mov	r0, r4
 8016598:	f002 fd00 	bl	8018f9c <_Bfree>
 801659c:	9907      	ldr	r1, [sp, #28]
 801659e:	4620      	mov	r0, r4
 80165a0:	f002 fcfc 	bl	8018f9c <_Bfree>
 80165a4:	4631      	mov	r1, r6
 80165a6:	4620      	mov	r0, r4
 80165a8:	f002 fcf8 	bl	8018f9c <_Bfree>
 80165ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80165ae:	4620      	mov	r0, r4
 80165b0:	f002 fcf4 	bl	8018f9c <_Bfree>
 80165b4:	4629      	mov	r1, r5
 80165b6:	4620      	mov	r0, r4
 80165b8:	f002 fcf0 	bl	8018f9c <_Bfree>
 80165bc:	e5d6      	b.n	801616c <_strtod_l+0x84>
 80165be:	2300      	movs	r3, #0
 80165c0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80165c4:	4650      	mov	r0, sl
 80165c6:	4659      	mov	r1, fp
 80165c8:	4699      	mov	r9, r3
 80165ca:	f1b8 0f01 	cmp.w	r8, #1
 80165ce:	dc21      	bgt.n	8016614 <_strtod_l+0x52c>
 80165d0:	b10b      	cbz	r3, 80165d6 <_strtod_l+0x4ee>
 80165d2:	4682      	mov	sl, r0
 80165d4:	468b      	mov	fp, r1
 80165d6:	4b2e      	ldr	r3, [pc, #184]	; (8016690 <_strtod_l+0x5a8>)
 80165d8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80165dc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80165e0:	4652      	mov	r2, sl
 80165e2:	465b      	mov	r3, fp
 80165e4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80165e8:	f7ea f826 	bl	8000638 <__aeabi_dmul>
 80165ec:	4b29      	ldr	r3, [pc, #164]	; (8016694 <_strtod_l+0x5ac>)
 80165ee:	460a      	mov	r2, r1
 80165f0:	400b      	ands	r3, r1
 80165f2:	4929      	ldr	r1, [pc, #164]	; (8016698 <_strtod_l+0x5b0>)
 80165f4:	428b      	cmp	r3, r1
 80165f6:	4682      	mov	sl, r0
 80165f8:	d8be      	bhi.n	8016578 <_strtod_l+0x490>
 80165fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80165fe:	428b      	cmp	r3, r1
 8016600:	bf86      	itte	hi
 8016602:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801669c <_strtod_l+0x5b4>
 8016606:	f04f 3aff 	movhi.w	sl, #4294967295
 801660a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801660e:	2300      	movs	r3, #0
 8016610:	9304      	str	r3, [sp, #16]
 8016612:	e081      	b.n	8016718 <_strtod_l+0x630>
 8016614:	f018 0f01 	tst.w	r8, #1
 8016618:	d007      	beq.n	801662a <_strtod_l+0x542>
 801661a:	4b1d      	ldr	r3, [pc, #116]	; (8016690 <_strtod_l+0x5a8>)
 801661c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8016620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016624:	f7ea f808 	bl	8000638 <__aeabi_dmul>
 8016628:	2301      	movs	r3, #1
 801662a:	f109 0901 	add.w	r9, r9, #1
 801662e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016632:	e7ca      	b.n	80165ca <_strtod_l+0x4e2>
 8016634:	d0eb      	beq.n	801660e <_strtod_l+0x526>
 8016636:	f1c8 0800 	rsb	r8, r8, #0
 801663a:	f018 020f 	ands.w	r2, r8, #15
 801663e:	d00a      	beq.n	8016656 <_strtod_l+0x56e>
 8016640:	4b12      	ldr	r3, [pc, #72]	; (801668c <_strtod_l+0x5a4>)
 8016642:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016646:	4650      	mov	r0, sl
 8016648:	4659      	mov	r1, fp
 801664a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801664e:	f7ea f91d 	bl	800088c <__aeabi_ddiv>
 8016652:	4682      	mov	sl, r0
 8016654:	468b      	mov	fp, r1
 8016656:	ea5f 1828 	movs.w	r8, r8, asr #4
 801665a:	d0d8      	beq.n	801660e <_strtod_l+0x526>
 801665c:	f1b8 0f1f 	cmp.w	r8, #31
 8016660:	dd1e      	ble.n	80166a0 <_strtod_l+0x5b8>
 8016662:	2500      	movs	r5, #0
 8016664:	462e      	mov	r6, r5
 8016666:	9509      	str	r5, [sp, #36]	; 0x24
 8016668:	9507      	str	r5, [sp, #28]
 801666a:	2322      	movs	r3, #34	; 0x22
 801666c:	f04f 0a00 	mov.w	sl, #0
 8016670:	f04f 0b00 	mov.w	fp, #0
 8016674:	6023      	str	r3, [r4, #0]
 8016676:	e789      	b.n	801658c <_strtod_l+0x4a4>
 8016678:	0801c935 	.word	0x0801c935
 801667c:	0801c974 	.word	0x0801c974
 8016680:	0801c92d 	.word	0x0801c92d
 8016684:	0801ca8c 	.word	0x0801ca8c
 8016688:	0801ca88 	.word	0x0801ca88
 801668c:	0801cc10 	.word	0x0801cc10
 8016690:	0801cbe8 	.word	0x0801cbe8
 8016694:	7ff00000 	.word	0x7ff00000
 8016698:	7ca00000 	.word	0x7ca00000
 801669c:	7fefffff 	.word	0x7fefffff
 80166a0:	f018 0310 	ands.w	r3, r8, #16
 80166a4:	bf18      	it	ne
 80166a6:	236a      	movne	r3, #106	; 0x6a
 80166a8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8016a60 <_strtod_l+0x978>
 80166ac:	9304      	str	r3, [sp, #16]
 80166ae:	4650      	mov	r0, sl
 80166b0:	4659      	mov	r1, fp
 80166b2:	2300      	movs	r3, #0
 80166b4:	f018 0f01 	tst.w	r8, #1
 80166b8:	d004      	beq.n	80166c4 <_strtod_l+0x5dc>
 80166ba:	e9d9 2300 	ldrd	r2, r3, [r9]
 80166be:	f7e9 ffbb 	bl	8000638 <__aeabi_dmul>
 80166c2:	2301      	movs	r3, #1
 80166c4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80166c8:	f109 0908 	add.w	r9, r9, #8
 80166cc:	d1f2      	bne.n	80166b4 <_strtod_l+0x5cc>
 80166ce:	b10b      	cbz	r3, 80166d4 <_strtod_l+0x5ec>
 80166d0:	4682      	mov	sl, r0
 80166d2:	468b      	mov	fp, r1
 80166d4:	9b04      	ldr	r3, [sp, #16]
 80166d6:	b1bb      	cbz	r3, 8016708 <_strtod_l+0x620>
 80166d8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80166dc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	4659      	mov	r1, fp
 80166e4:	dd10      	ble.n	8016708 <_strtod_l+0x620>
 80166e6:	2b1f      	cmp	r3, #31
 80166e8:	f340 8128 	ble.w	801693c <_strtod_l+0x854>
 80166ec:	2b34      	cmp	r3, #52	; 0x34
 80166ee:	bfde      	ittt	le
 80166f0:	3b20      	suble	r3, #32
 80166f2:	f04f 32ff 	movle.w	r2, #4294967295
 80166f6:	fa02 f303 	lslle.w	r3, r2, r3
 80166fa:	f04f 0a00 	mov.w	sl, #0
 80166fe:	bfcc      	ite	gt
 8016700:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016704:	ea03 0b01 	andle.w	fp, r3, r1
 8016708:	2200      	movs	r2, #0
 801670a:	2300      	movs	r3, #0
 801670c:	4650      	mov	r0, sl
 801670e:	4659      	mov	r1, fp
 8016710:	f7ea f9fa 	bl	8000b08 <__aeabi_dcmpeq>
 8016714:	2800      	cmp	r0, #0
 8016716:	d1a4      	bne.n	8016662 <_strtod_l+0x57a>
 8016718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801671a:	9300      	str	r3, [sp, #0]
 801671c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801671e:	462b      	mov	r3, r5
 8016720:	463a      	mov	r2, r7
 8016722:	4620      	mov	r0, r4
 8016724:	f002 fca6 	bl	8019074 <__s2b>
 8016728:	9009      	str	r0, [sp, #36]	; 0x24
 801672a:	2800      	cmp	r0, #0
 801672c:	f43f af24 	beq.w	8016578 <_strtod_l+0x490>
 8016730:	9b07      	ldr	r3, [sp, #28]
 8016732:	1b9e      	subs	r6, r3, r6
 8016734:	9b08      	ldr	r3, [sp, #32]
 8016736:	2b00      	cmp	r3, #0
 8016738:	bfb4      	ite	lt
 801673a:	4633      	movlt	r3, r6
 801673c:	2300      	movge	r3, #0
 801673e:	9310      	str	r3, [sp, #64]	; 0x40
 8016740:	9b08      	ldr	r3, [sp, #32]
 8016742:	2500      	movs	r5, #0
 8016744:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016748:	9318      	str	r3, [sp, #96]	; 0x60
 801674a:	462e      	mov	r6, r5
 801674c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801674e:	4620      	mov	r0, r4
 8016750:	6859      	ldr	r1, [r3, #4]
 8016752:	f002 fbe3 	bl	8018f1c <_Balloc>
 8016756:	9007      	str	r0, [sp, #28]
 8016758:	2800      	cmp	r0, #0
 801675a:	f43f af11 	beq.w	8016580 <_strtod_l+0x498>
 801675e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016760:	691a      	ldr	r2, [r3, #16]
 8016762:	3202      	adds	r2, #2
 8016764:	f103 010c 	add.w	r1, r3, #12
 8016768:	0092      	lsls	r2, r2, #2
 801676a:	300c      	adds	r0, #12
 801676c:	f7fe f8c4 	bl	80148f8 <memcpy>
 8016770:	ec4b ab10 	vmov	d0, sl, fp
 8016774:	aa20      	add	r2, sp, #128	; 0x80
 8016776:	a91f      	add	r1, sp, #124	; 0x7c
 8016778:	4620      	mov	r0, r4
 801677a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801677e:	f002 ffb5 	bl	80196ec <__d2b>
 8016782:	901e      	str	r0, [sp, #120]	; 0x78
 8016784:	2800      	cmp	r0, #0
 8016786:	f43f aefb 	beq.w	8016580 <_strtod_l+0x498>
 801678a:	2101      	movs	r1, #1
 801678c:	4620      	mov	r0, r4
 801678e:	f002 fd0b 	bl	80191a8 <__i2b>
 8016792:	4606      	mov	r6, r0
 8016794:	2800      	cmp	r0, #0
 8016796:	f43f aef3 	beq.w	8016580 <_strtod_l+0x498>
 801679a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801679c:	9904      	ldr	r1, [sp, #16]
 801679e:	2b00      	cmp	r3, #0
 80167a0:	bfab      	itete	ge
 80167a2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80167a4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80167a6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80167a8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80167ac:	bfac      	ite	ge
 80167ae:	eb03 0902 	addge.w	r9, r3, r2
 80167b2:	1ad7      	sublt	r7, r2, r3
 80167b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80167b6:	eba3 0801 	sub.w	r8, r3, r1
 80167ba:	4490      	add	r8, r2
 80167bc:	4ba3      	ldr	r3, [pc, #652]	; (8016a4c <_strtod_l+0x964>)
 80167be:	f108 38ff 	add.w	r8, r8, #4294967295
 80167c2:	4598      	cmp	r8, r3
 80167c4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80167c8:	f280 80cc 	bge.w	8016964 <_strtod_l+0x87c>
 80167cc:	eba3 0308 	sub.w	r3, r3, r8
 80167d0:	2b1f      	cmp	r3, #31
 80167d2:	eba2 0203 	sub.w	r2, r2, r3
 80167d6:	f04f 0101 	mov.w	r1, #1
 80167da:	f300 80b6 	bgt.w	801694a <_strtod_l+0x862>
 80167de:	fa01 f303 	lsl.w	r3, r1, r3
 80167e2:	9311      	str	r3, [sp, #68]	; 0x44
 80167e4:	2300      	movs	r3, #0
 80167e6:	930c      	str	r3, [sp, #48]	; 0x30
 80167e8:	eb09 0802 	add.w	r8, r9, r2
 80167ec:	9b04      	ldr	r3, [sp, #16]
 80167ee:	45c1      	cmp	r9, r8
 80167f0:	4417      	add	r7, r2
 80167f2:	441f      	add	r7, r3
 80167f4:	464b      	mov	r3, r9
 80167f6:	bfa8      	it	ge
 80167f8:	4643      	movge	r3, r8
 80167fa:	42bb      	cmp	r3, r7
 80167fc:	bfa8      	it	ge
 80167fe:	463b      	movge	r3, r7
 8016800:	2b00      	cmp	r3, #0
 8016802:	bfc2      	ittt	gt
 8016804:	eba8 0803 	subgt.w	r8, r8, r3
 8016808:	1aff      	subgt	r7, r7, r3
 801680a:	eba9 0903 	subgt.w	r9, r9, r3
 801680e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016810:	2b00      	cmp	r3, #0
 8016812:	dd17      	ble.n	8016844 <_strtod_l+0x75c>
 8016814:	4631      	mov	r1, r6
 8016816:	461a      	mov	r2, r3
 8016818:	4620      	mov	r0, r4
 801681a:	f002 fd81 	bl	8019320 <__pow5mult>
 801681e:	4606      	mov	r6, r0
 8016820:	2800      	cmp	r0, #0
 8016822:	f43f aead 	beq.w	8016580 <_strtod_l+0x498>
 8016826:	4601      	mov	r1, r0
 8016828:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801682a:	4620      	mov	r0, r4
 801682c:	f002 fcd2 	bl	80191d4 <__multiply>
 8016830:	900f      	str	r0, [sp, #60]	; 0x3c
 8016832:	2800      	cmp	r0, #0
 8016834:	f43f aea4 	beq.w	8016580 <_strtod_l+0x498>
 8016838:	991e      	ldr	r1, [sp, #120]	; 0x78
 801683a:	4620      	mov	r0, r4
 801683c:	f002 fbae 	bl	8018f9c <_Bfree>
 8016840:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016842:	931e      	str	r3, [sp, #120]	; 0x78
 8016844:	f1b8 0f00 	cmp.w	r8, #0
 8016848:	f300 8091 	bgt.w	801696e <_strtod_l+0x886>
 801684c:	9b08      	ldr	r3, [sp, #32]
 801684e:	2b00      	cmp	r3, #0
 8016850:	dd08      	ble.n	8016864 <_strtod_l+0x77c>
 8016852:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016854:	9907      	ldr	r1, [sp, #28]
 8016856:	4620      	mov	r0, r4
 8016858:	f002 fd62 	bl	8019320 <__pow5mult>
 801685c:	9007      	str	r0, [sp, #28]
 801685e:	2800      	cmp	r0, #0
 8016860:	f43f ae8e 	beq.w	8016580 <_strtod_l+0x498>
 8016864:	2f00      	cmp	r7, #0
 8016866:	dd08      	ble.n	801687a <_strtod_l+0x792>
 8016868:	9907      	ldr	r1, [sp, #28]
 801686a:	463a      	mov	r2, r7
 801686c:	4620      	mov	r0, r4
 801686e:	f002 fdb1 	bl	80193d4 <__lshift>
 8016872:	9007      	str	r0, [sp, #28]
 8016874:	2800      	cmp	r0, #0
 8016876:	f43f ae83 	beq.w	8016580 <_strtod_l+0x498>
 801687a:	f1b9 0f00 	cmp.w	r9, #0
 801687e:	dd08      	ble.n	8016892 <_strtod_l+0x7aa>
 8016880:	4631      	mov	r1, r6
 8016882:	464a      	mov	r2, r9
 8016884:	4620      	mov	r0, r4
 8016886:	f002 fda5 	bl	80193d4 <__lshift>
 801688a:	4606      	mov	r6, r0
 801688c:	2800      	cmp	r0, #0
 801688e:	f43f ae77 	beq.w	8016580 <_strtod_l+0x498>
 8016892:	9a07      	ldr	r2, [sp, #28]
 8016894:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016896:	4620      	mov	r0, r4
 8016898:	f002 fe24 	bl	80194e4 <__mdiff>
 801689c:	4605      	mov	r5, r0
 801689e:	2800      	cmp	r0, #0
 80168a0:	f43f ae6e 	beq.w	8016580 <_strtod_l+0x498>
 80168a4:	68c3      	ldr	r3, [r0, #12]
 80168a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80168a8:	2300      	movs	r3, #0
 80168aa:	60c3      	str	r3, [r0, #12]
 80168ac:	4631      	mov	r1, r6
 80168ae:	f002 fdfd 	bl	80194ac <__mcmp>
 80168b2:	2800      	cmp	r0, #0
 80168b4:	da65      	bge.n	8016982 <_strtod_l+0x89a>
 80168b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80168b8:	ea53 030a 	orrs.w	r3, r3, sl
 80168bc:	f040 8087 	bne.w	80169ce <_strtod_l+0x8e6>
 80168c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	f040 8082 	bne.w	80169ce <_strtod_l+0x8e6>
 80168ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80168ce:	0d1b      	lsrs	r3, r3, #20
 80168d0:	051b      	lsls	r3, r3, #20
 80168d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80168d6:	d97a      	bls.n	80169ce <_strtod_l+0x8e6>
 80168d8:	696b      	ldr	r3, [r5, #20]
 80168da:	b913      	cbnz	r3, 80168e2 <_strtod_l+0x7fa>
 80168dc:	692b      	ldr	r3, [r5, #16]
 80168de:	2b01      	cmp	r3, #1
 80168e0:	dd75      	ble.n	80169ce <_strtod_l+0x8e6>
 80168e2:	4629      	mov	r1, r5
 80168e4:	2201      	movs	r2, #1
 80168e6:	4620      	mov	r0, r4
 80168e8:	f002 fd74 	bl	80193d4 <__lshift>
 80168ec:	4631      	mov	r1, r6
 80168ee:	4605      	mov	r5, r0
 80168f0:	f002 fddc 	bl	80194ac <__mcmp>
 80168f4:	2800      	cmp	r0, #0
 80168f6:	dd6a      	ble.n	80169ce <_strtod_l+0x8e6>
 80168f8:	9904      	ldr	r1, [sp, #16]
 80168fa:	4a55      	ldr	r2, [pc, #340]	; (8016a50 <_strtod_l+0x968>)
 80168fc:	465b      	mov	r3, fp
 80168fe:	2900      	cmp	r1, #0
 8016900:	f000 8085 	beq.w	8016a0e <_strtod_l+0x926>
 8016904:	ea02 010b 	and.w	r1, r2, fp
 8016908:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801690c:	dc7f      	bgt.n	8016a0e <_strtod_l+0x926>
 801690e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016912:	f77f aeaa 	ble.w	801666a <_strtod_l+0x582>
 8016916:	4a4f      	ldr	r2, [pc, #316]	; (8016a54 <_strtod_l+0x96c>)
 8016918:	2300      	movs	r3, #0
 801691a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801691e:	4650      	mov	r0, sl
 8016920:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8016924:	4659      	mov	r1, fp
 8016926:	f7e9 fe87 	bl	8000638 <__aeabi_dmul>
 801692a:	460b      	mov	r3, r1
 801692c:	4303      	orrs	r3, r0
 801692e:	bf08      	it	eq
 8016930:	2322      	moveq	r3, #34	; 0x22
 8016932:	4682      	mov	sl, r0
 8016934:	468b      	mov	fp, r1
 8016936:	bf08      	it	eq
 8016938:	6023      	streq	r3, [r4, #0]
 801693a:	e62b      	b.n	8016594 <_strtod_l+0x4ac>
 801693c:	f04f 32ff 	mov.w	r2, #4294967295
 8016940:	fa02 f303 	lsl.w	r3, r2, r3
 8016944:	ea03 0a0a 	and.w	sl, r3, sl
 8016948:	e6de      	b.n	8016708 <_strtod_l+0x620>
 801694a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801694e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8016952:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8016956:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801695a:	fa01 f308 	lsl.w	r3, r1, r8
 801695e:	930c      	str	r3, [sp, #48]	; 0x30
 8016960:	9111      	str	r1, [sp, #68]	; 0x44
 8016962:	e741      	b.n	80167e8 <_strtod_l+0x700>
 8016964:	2300      	movs	r3, #0
 8016966:	930c      	str	r3, [sp, #48]	; 0x30
 8016968:	2301      	movs	r3, #1
 801696a:	9311      	str	r3, [sp, #68]	; 0x44
 801696c:	e73c      	b.n	80167e8 <_strtod_l+0x700>
 801696e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016970:	4642      	mov	r2, r8
 8016972:	4620      	mov	r0, r4
 8016974:	f002 fd2e 	bl	80193d4 <__lshift>
 8016978:	901e      	str	r0, [sp, #120]	; 0x78
 801697a:	2800      	cmp	r0, #0
 801697c:	f47f af66 	bne.w	801684c <_strtod_l+0x764>
 8016980:	e5fe      	b.n	8016580 <_strtod_l+0x498>
 8016982:	465f      	mov	r7, fp
 8016984:	d16e      	bne.n	8016a64 <_strtod_l+0x97c>
 8016986:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016988:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801698c:	b342      	cbz	r2, 80169e0 <_strtod_l+0x8f8>
 801698e:	4a32      	ldr	r2, [pc, #200]	; (8016a58 <_strtod_l+0x970>)
 8016990:	4293      	cmp	r3, r2
 8016992:	d128      	bne.n	80169e6 <_strtod_l+0x8fe>
 8016994:	9b04      	ldr	r3, [sp, #16]
 8016996:	4650      	mov	r0, sl
 8016998:	b1eb      	cbz	r3, 80169d6 <_strtod_l+0x8ee>
 801699a:	4a2d      	ldr	r2, [pc, #180]	; (8016a50 <_strtod_l+0x968>)
 801699c:	403a      	ands	r2, r7
 801699e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80169a2:	f04f 31ff 	mov.w	r1, #4294967295
 80169a6:	d819      	bhi.n	80169dc <_strtod_l+0x8f4>
 80169a8:	0d12      	lsrs	r2, r2, #20
 80169aa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80169ae:	fa01 f303 	lsl.w	r3, r1, r3
 80169b2:	4298      	cmp	r0, r3
 80169b4:	d117      	bne.n	80169e6 <_strtod_l+0x8fe>
 80169b6:	4b29      	ldr	r3, [pc, #164]	; (8016a5c <_strtod_l+0x974>)
 80169b8:	429f      	cmp	r7, r3
 80169ba:	d102      	bne.n	80169c2 <_strtod_l+0x8da>
 80169bc:	3001      	adds	r0, #1
 80169be:	f43f addf 	beq.w	8016580 <_strtod_l+0x498>
 80169c2:	4b23      	ldr	r3, [pc, #140]	; (8016a50 <_strtod_l+0x968>)
 80169c4:	403b      	ands	r3, r7
 80169c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80169ca:	f04f 0a00 	mov.w	sl, #0
 80169ce:	9b04      	ldr	r3, [sp, #16]
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d1a0      	bne.n	8016916 <_strtod_l+0x82e>
 80169d4:	e5de      	b.n	8016594 <_strtod_l+0x4ac>
 80169d6:	f04f 33ff 	mov.w	r3, #4294967295
 80169da:	e7ea      	b.n	80169b2 <_strtod_l+0x8ca>
 80169dc:	460b      	mov	r3, r1
 80169de:	e7e8      	b.n	80169b2 <_strtod_l+0x8ca>
 80169e0:	ea53 030a 	orrs.w	r3, r3, sl
 80169e4:	d088      	beq.n	80168f8 <_strtod_l+0x810>
 80169e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80169e8:	b1db      	cbz	r3, 8016a22 <_strtod_l+0x93a>
 80169ea:	423b      	tst	r3, r7
 80169ec:	d0ef      	beq.n	80169ce <_strtod_l+0x8e6>
 80169ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80169f0:	9a04      	ldr	r2, [sp, #16]
 80169f2:	4650      	mov	r0, sl
 80169f4:	4659      	mov	r1, fp
 80169f6:	b1c3      	cbz	r3, 8016a2a <_strtod_l+0x942>
 80169f8:	f7ff fb5a 	bl	80160b0 <sulp>
 80169fc:	4602      	mov	r2, r0
 80169fe:	460b      	mov	r3, r1
 8016a00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016a04:	f7e9 fc62 	bl	80002cc <__adddf3>
 8016a08:	4682      	mov	sl, r0
 8016a0a:	468b      	mov	fp, r1
 8016a0c:	e7df      	b.n	80169ce <_strtod_l+0x8e6>
 8016a0e:	4013      	ands	r3, r2
 8016a10:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016a14:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016a18:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016a1c:	f04f 3aff 	mov.w	sl, #4294967295
 8016a20:	e7d5      	b.n	80169ce <_strtod_l+0x8e6>
 8016a22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016a24:	ea13 0f0a 	tst.w	r3, sl
 8016a28:	e7e0      	b.n	80169ec <_strtod_l+0x904>
 8016a2a:	f7ff fb41 	bl	80160b0 <sulp>
 8016a2e:	4602      	mov	r2, r0
 8016a30:	460b      	mov	r3, r1
 8016a32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016a36:	f7e9 fc47 	bl	80002c8 <__aeabi_dsub>
 8016a3a:	2200      	movs	r2, #0
 8016a3c:	2300      	movs	r3, #0
 8016a3e:	4682      	mov	sl, r0
 8016a40:	468b      	mov	fp, r1
 8016a42:	f7ea f861 	bl	8000b08 <__aeabi_dcmpeq>
 8016a46:	2800      	cmp	r0, #0
 8016a48:	d0c1      	beq.n	80169ce <_strtod_l+0x8e6>
 8016a4a:	e60e      	b.n	801666a <_strtod_l+0x582>
 8016a4c:	fffffc02 	.word	0xfffffc02
 8016a50:	7ff00000 	.word	0x7ff00000
 8016a54:	39500000 	.word	0x39500000
 8016a58:	000fffff 	.word	0x000fffff
 8016a5c:	7fefffff 	.word	0x7fefffff
 8016a60:	0801c988 	.word	0x0801c988
 8016a64:	4631      	mov	r1, r6
 8016a66:	4628      	mov	r0, r5
 8016a68:	f002 fe9c 	bl	80197a4 <__ratio>
 8016a6c:	ec59 8b10 	vmov	r8, r9, d0
 8016a70:	ee10 0a10 	vmov	r0, s0
 8016a74:	2200      	movs	r2, #0
 8016a76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016a7a:	4649      	mov	r1, r9
 8016a7c:	f7ea f858 	bl	8000b30 <__aeabi_dcmple>
 8016a80:	2800      	cmp	r0, #0
 8016a82:	d07c      	beq.n	8016b7e <_strtod_l+0xa96>
 8016a84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d04c      	beq.n	8016b24 <_strtod_l+0xa3c>
 8016a8a:	4b95      	ldr	r3, [pc, #596]	; (8016ce0 <_strtod_l+0xbf8>)
 8016a8c:	2200      	movs	r2, #0
 8016a8e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016a92:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8016ce0 <_strtod_l+0xbf8>
 8016a96:	f04f 0800 	mov.w	r8, #0
 8016a9a:	4b92      	ldr	r3, [pc, #584]	; (8016ce4 <_strtod_l+0xbfc>)
 8016a9c:	403b      	ands	r3, r7
 8016a9e:	9311      	str	r3, [sp, #68]	; 0x44
 8016aa0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016aa2:	4b91      	ldr	r3, [pc, #580]	; (8016ce8 <_strtod_l+0xc00>)
 8016aa4:	429a      	cmp	r2, r3
 8016aa6:	f040 80b2 	bne.w	8016c0e <_strtod_l+0xb26>
 8016aaa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016aae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016ab2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8016ab6:	ec4b ab10 	vmov	d0, sl, fp
 8016aba:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8016abe:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016ac2:	f002 fd97 	bl	80195f4 <__ulp>
 8016ac6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016aca:	ec53 2b10 	vmov	r2, r3, d0
 8016ace:	f7e9 fdb3 	bl	8000638 <__aeabi_dmul>
 8016ad2:	4652      	mov	r2, sl
 8016ad4:	465b      	mov	r3, fp
 8016ad6:	f7e9 fbf9 	bl	80002cc <__adddf3>
 8016ada:	460b      	mov	r3, r1
 8016adc:	4981      	ldr	r1, [pc, #516]	; (8016ce4 <_strtod_l+0xbfc>)
 8016ade:	4a83      	ldr	r2, [pc, #524]	; (8016cec <_strtod_l+0xc04>)
 8016ae0:	4019      	ands	r1, r3
 8016ae2:	4291      	cmp	r1, r2
 8016ae4:	4682      	mov	sl, r0
 8016ae6:	d95e      	bls.n	8016ba6 <_strtod_l+0xabe>
 8016ae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016aea:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016aee:	4293      	cmp	r3, r2
 8016af0:	d103      	bne.n	8016afa <_strtod_l+0xa12>
 8016af2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016af4:	3301      	adds	r3, #1
 8016af6:	f43f ad43 	beq.w	8016580 <_strtod_l+0x498>
 8016afa:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8016cf8 <_strtod_l+0xc10>
 8016afe:	f04f 3aff 	mov.w	sl, #4294967295
 8016b02:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016b04:	4620      	mov	r0, r4
 8016b06:	f002 fa49 	bl	8018f9c <_Bfree>
 8016b0a:	9907      	ldr	r1, [sp, #28]
 8016b0c:	4620      	mov	r0, r4
 8016b0e:	f002 fa45 	bl	8018f9c <_Bfree>
 8016b12:	4631      	mov	r1, r6
 8016b14:	4620      	mov	r0, r4
 8016b16:	f002 fa41 	bl	8018f9c <_Bfree>
 8016b1a:	4629      	mov	r1, r5
 8016b1c:	4620      	mov	r0, r4
 8016b1e:	f002 fa3d 	bl	8018f9c <_Bfree>
 8016b22:	e613      	b.n	801674c <_strtod_l+0x664>
 8016b24:	f1ba 0f00 	cmp.w	sl, #0
 8016b28:	d11b      	bne.n	8016b62 <_strtod_l+0xa7a>
 8016b2a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016b2e:	b9f3      	cbnz	r3, 8016b6e <_strtod_l+0xa86>
 8016b30:	4b6b      	ldr	r3, [pc, #428]	; (8016ce0 <_strtod_l+0xbf8>)
 8016b32:	2200      	movs	r2, #0
 8016b34:	4640      	mov	r0, r8
 8016b36:	4649      	mov	r1, r9
 8016b38:	f7e9 fff0 	bl	8000b1c <__aeabi_dcmplt>
 8016b3c:	b9d0      	cbnz	r0, 8016b74 <_strtod_l+0xa8c>
 8016b3e:	4640      	mov	r0, r8
 8016b40:	4649      	mov	r1, r9
 8016b42:	4b6b      	ldr	r3, [pc, #428]	; (8016cf0 <_strtod_l+0xc08>)
 8016b44:	2200      	movs	r2, #0
 8016b46:	f7e9 fd77 	bl	8000638 <__aeabi_dmul>
 8016b4a:	4680      	mov	r8, r0
 8016b4c:	4689      	mov	r9, r1
 8016b4e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8016b52:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8016b56:	931b      	str	r3, [sp, #108]	; 0x6c
 8016b58:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8016b5c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016b60:	e79b      	b.n	8016a9a <_strtod_l+0x9b2>
 8016b62:	f1ba 0f01 	cmp.w	sl, #1
 8016b66:	d102      	bne.n	8016b6e <_strtod_l+0xa86>
 8016b68:	2f00      	cmp	r7, #0
 8016b6a:	f43f ad7e 	beq.w	801666a <_strtod_l+0x582>
 8016b6e:	4b61      	ldr	r3, [pc, #388]	; (8016cf4 <_strtod_l+0xc0c>)
 8016b70:	2200      	movs	r2, #0
 8016b72:	e78c      	b.n	8016a8e <_strtod_l+0x9a6>
 8016b74:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8016cf0 <_strtod_l+0xc08>
 8016b78:	f04f 0800 	mov.w	r8, #0
 8016b7c:	e7e7      	b.n	8016b4e <_strtod_l+0xa66>
 8016b7e:	4b5c      	ldr	r3, [pc, #368]	; (8016cf0 <_strtod_l+0xc08>)
 8016b80:	4640      	mov	r0, r8
 8016b82:	4649      	mov	r1, r9
 8016b84:	2200      	movs	r2, #0
 8016b86:	f7e9 fd57 	bl	8000638 <__aeabi_dmul>
 8016b8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016b8c:	4680      	mov	r8, r0
 8016b8e:	4689      	mov	r9, r1
 8016b90:	b933      	cbnz	r3, 8016ba0 <_strtod_l+0xab8>
 8016b92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016b96:	9012      	str	r0, [sp, #72]	; 0x48
 8016b98:	9313      	str	r3, [sp, #76]	; 0x4c
 8016b9a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016b9e:	e7dd      	b.n	8016b5c <_strtod_l+0xa74>
 8016ba0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8016ba4:	e7f9      	b.n	8016b9a <_strtod_l+0xab2>
 8016ba6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8016baa:	9b04      	ldr	r3, [sp, #16]
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d1a8      	bne.n	8016b02 <_strtod_l+0xa1a>
 8016bb0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016bb4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016bb6:	0d1b      	lsrs	r3, r3, #20
 8016bb8:	051b      	lsls	r3, r3, #20
 8016bba:	429a      	cmp	r2, r3
 8016bbc:	d1a1      	bne.n	8016b02 <_strtod_l+0xa1a>
 8016bbe:	4640      	mov	r0, r8
 8016bc0:	4649      	mov	r1, r9
 8016bc2:	f7ea f8e9 	bl	8000d98 <__aeabi_d2lz>
 8016bc6:	f7e9 fd09 	bl	80005dc <__aeabi_l2d>
 8016bca:	4602      	mov	r2, r0
 8016bcc:	460b      	mov	r3, r1
 8016bce:	4640      	mov	r0, r8
 8016bd0:	4649      	mov	r1, r9
 8016bd2:	f7e9 fb79 	bl	80002c8 <__aeabi_dsub>
 8016bd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016bd8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016bdc:	ea43 030a 	orr.w	r3, r3, sl
 8016be0:	4313      	orrs	r3, r2
 8016be2:	4680      	mov	r8, r0
 8016be4:	4689      	mov	r9, r1
 8016be6:	d053      	beq.n	8016c90 <_strtod_l+0xba8>
 8016be8:	a335      	add	r3, pc, #212	; (adr r3, 8016cc0 <_strtod_l+0xbd8>)
 8016bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bee:	f7e9 ff95 	bl	8000b1c <__aeabi_dcmplt>
 8016bf2:	2800      	cmp	r0, #0
 8016bf4:	f47f acce 	bne.w	8016594 <_strtod_l+0x4ac>
 8016bf8:	a333      	add	r3, pc, #204	; (adr r3, 8016cc8 <_strtod_l+0xbe0>)
 8016bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bfe:	4640      	mov	r0, r8
 8016c00:	4649      	mov	r1, r9
 8016c02:	f7e9 ffa9 	bl	8000b58 <__aeabi_dcmpgt>
 8016c06:	2800      	cmp	r0, #0
 8016c08:	f43f af7b 	beq.w	8016b02 <_strtod_l+0xa1a>
 8016c0c:	e4c2      	b.n	8016594 <_strtod_l+0x4ac>
 8016c0e:	9b04      	ldr	r3, [sp, #16]
 8016c10:	b333      	cbz	r3, 8016c60 <_strtod_l+0xb78>
 8016c12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016c14:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016c18:	d822      	bhi.n	8016c60 <_strtod_l+0xb78>
 8016c1a:	a32d      	add	r3, pc, #180	; (adr r3, 8016cd0 <_strtod_l+0xbe8>)
 8016c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c20:	4640      	mov	r0, r8
 8016c22:	4649      	mov	r1, r9
 8016c24:	f7e9 ff84 	bl	8000b30 <__aeabi_dcmple>
 8016c28:	b1a0      	cbz	r0, 8016c54 <_strtod_l+0xb6c>
 8016c2a:	4649      	mov	r1, r9
 8016c2c:	4640      	mov	r0, r8
 8016c2e:	f7e9 ffdb 	bl	8000be8 <__aeabi_d2uiz>
 8016c32:	2801      	cmp	r0, #1
 8016c34:	bf38      	it	cc
 8016c36:	2001      	movcc	r0, #1
 8016c38:	f7e9 fc84 	bl	8000544 <__aeabi_ui2d>
 8016c3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016c3e:	4680      	mov	r8, r0
 8016c40:	4689      	mov	r9, r1
 8016c42:	bb13      	cbnz	r3, 8016c8a <_strtod_l+0xba2>
 8016c44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016c48:	9014      	str	r0, [sp, #80]	; 0x50
 8016c4a:	9315      	str	r3, [sp, #84]	; 0x54
 8016c4c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016c50:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016c54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016c56:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016c58:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016c5c:	1a9b      	subs	r3, r3, r2
 8016c5e:	930d      	str	r3, [sp, #52]	; 0x34
 8016c60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016c64:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8016c68:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016c6c:	f002 fcc2 	bl	80195f4 <__ulp>
 8016c70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016c74:	ec53 2b10 	vmov	r2, r3, d0
 8016c78:	f7e9 fcde 	bl	8000638 <__aeabi_dmul>
 8016c7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016c80:	f7e9 fb24 	bl	80002cc <__adddf3>
 8016c84:	4682      	mov	sl, r0
 8016c86:	468b      	mov	fp, r1
 8016c88:	e78f      	b.n	8016baa <_strtod_l+0xac2>
 8016c8a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8016c8e:	e7dd      	b.n	8016c4c <_strtod_l+0xb64>
 8016c90:	a311      	add	r3, pc, #68	; (adr r3, 8016cd8 <_strtod_l+0xbf0>)
 8016c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c96:	f7e9 ff41 	bl	8000b1c <__aeabi_dcmplt>
 8016c9a:	e7b4      	b.n	8016c06 <_strtod_l+0xb1e>
 8016c9c:	2300      	movs	r3, #0
 8016c9e:	930e      	str	r3, [sp, #56]	; 0x38
 8016ca0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016ca2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016ca4:	6013      	str	r3, [r2, #0]
 8016ca6:	f7ff ba65 	b.w	8016174 <_strtod_l+0x8c>
 8016caa:	2b65      	cmp	r3, #101	; 0x65
 8016cac:	f43f ab5d 	beq.w	801636a <_strtod_l+0x282>
 8016cb0:	2b45      	cmp	r3, #69	; 0x45
 8016cb2:	f43f ab5a 	beq.w	801636a <_strtod_l+0x282>
 8016cb6:	2201      	movs	r2, #1
 8016cb8:	f7ff bb92 	b.w	80163e0 <_strtod_l+0x2f8>
 8016cbc:	f3af 8000 	nop.w
 8016cc0:	94a03595 	.word	0x94a03595
 8016cc4:	3fdfffff 	.word	0x3fdfffff
 8016cc8:	35afe535 	.word	0x35afe535
 8016ccc:	3fe00000 	.word	0x3fe00000
 8016cd0:	ffc00000 	.word	0xffc00000
 8016cd4:	41dfffff 	.word	0x41dfffff
 8016cd8:	94a03595 	.word	0x94a03595
 8016cdc:	3fcfffff 	.word	0x3fcfffff
 8016ce0:	3ff00000 	.word	0x3ff00000
 8016ce4:	7ff00000 	.word	0x7ff00000
 8016ce8:	7fe00000 	.word	0x7fe00000
 8016cec:	7c9fffff 	.word	0x7c9fffff
 8016cf0:	3fe00000 	.word	0x3fe00000
 8016cf4:	bff00000 	.word	0xbff00000
 8016cf8:	7fefffff 	.word	0x7fefffff

08016cfc <_strtod_r>:
 8016cfc:	4b01      	ldr	r3, [pc, #4]	; (8016d04 <_strtod_r+0x8>)
 8016cfe:	f7ff b9f3 	b.w	80160e8 <_strtod_l>
 8016d02:	bf00      	nop
 8016d04:	200001a4 	.word	0x200001a4

08016d08 <strtok>:
 8016d08:	4b16      	ldr	r3, [pc, #88]	; (8016d64 <strtok+0x5c>)
 8016d0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016d0c:	681e      	ldr	r6, [r3, #0]
 8016d0e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8016d10:	4605      	mov	r5, r0
 8016d12:	b9fc      	cbnz	r4, 8016d54 <strtok+0x4c>
 8016d14:	2050      	movs	r0, #80	; 0x50
 8016d16:	9101      	str	r1, [sp, #4]
 8016d18:	f7fd fdde 	bl	80148d8 <malloc>
 8016d1c:	9901      	ldr	r1, [sp, #4]
 8016d1e:	65b0      	str	r0, [r6, #88]	; 0x58
 8016d20:	4602      	mov	r2, r0
 8016d22:	b920      	cbnz	r0, 8016d2e <strtok+0x26>
 8016d24:	4b10      	ldr	r3, [pc, #64]	; (8016d68 <strtok+0x60>)
 8016d26:	4811      	ldr	r0, [pc, #68]	; (8016d6c <strtok+0x64>)
 8016d28:	2157      	movs	r1, #87	; 0x57
 8016d2a:	f000 fc69 	bl	8017600 <__assert_func>
 8016d2e:	e9c0 4400 	strd	r4, r4, [r0]
 8016d32:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8016d36:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8016d3a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8016d3e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8016d42:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8016d46:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8016d4a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8016d4e:	6184      	str	r4, [r0, #24]
 8016d50:	7704      	strb	r4, [r0, #28]
 8016d52:	6244      	str	r4, [r0, #36]	; 0x24
 8016d54:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8016d56:	2301      	movs	r3, #1
 8016d58:	4628      	mov	r0, r5
 8016d5a:	b002      	add	sp, #8
 8016d5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d60:	f000 b806 	b.w	8016d70 <__strtok_r>
 8016d64:	200000d8 	.word	0x200000d8
 8016d68:	0801c7f0 	.word	0x0801c7f0
 8016d6c:	0801c9b0 	.word	0x0801c9b0

08016d70 <__strtok_r>:
 8016d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d72:	b908      	cbnz	r0, 8016d78 <__strtok_r+0x8>
 8016d74:	6810      	ldr	r0, [r2, #0]
 8016d76:	b188      	cbz	r0, 8016d9c <__strtok_r+0x2c>
 8016d78:	4604      	mov	r4, r0
 8016d7a:	4620      	mov	r0, r4
 8016d7c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8016d80:	460f      	mov	r7, r1
 8016d82:	f817 6b01 	ldrb.w	r6, [r7], #1
 8016d86:	b91e      	cbnz	r6, 8016d90 <__strtok_r+0x20>
 8016d88:	b965      	cbnz	r5, 8016da4 <__strtok_r+0x34>
 8016d8a:	6015      	str	r5, [r2, #0]
 8016d8c:	4628      	mov	r0, r5
 8016d8e:	e005      	b.n	8016d9c <__strtok_r+0x2c>
 8016d90:	42b5      	cmp	r5, r6
 8016d92:	d1f6      	bne.n	8016d82 <__strtok_r+0x12>
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d1f0      	bne.n	8016d7a <__strtok_r+0xa>
 8016d98:	6014      	str	r4, [r2, #0]
 8016d9a:	7003      	strb	r3, [r0, #0]
 8016d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d9e:	461c      	mov	r4, r3
 8016da0:	e00c      	b.n	8016dbc <__strtok_r+0x4c>
 8016da2:	b915      	cbnz	r5, 8016daa <__strtok_r+0x3a>
 8016da4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016da8:	460e      	mov	r6, r1
 8016daa:	f816 5b01 	ldrb.w	r5, [r6], #1
 8016dae:	42ab      	cmp	r3, r5
 8016db0:	d1f7      	bne.n	8016da2 <__strtok_r+0x32>
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d0f3      	beq.n	8016d9e <__strtok_r+0x2e>
 8016db6:	2300      	movs	r3, #0
 8016db8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8016dbc:	6014      	str	r4, [r2, #0]
 8016dbe:	e7ed      	b.n	8016d9c <__strtok_r+0x2c>

08016dc0 <_strtol_l.isra.0>:
 8016dc0:	2b01      	cmp	r3, #1
 8016dc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016dc6:	d001      	beq.n	8016dcc <_strtol_l.isra.0+0xc>
 8016dc8:	2b24      	cmp	r3, #36	; 0x24
 8016dca:	d906      	bls.n	8016dda <_strtol_l.isra.0+0x1a>
 8016dcc:	f7fd fb42 	bl	8014454 <__errno>
 8016dd0:	2316      	movs	r3, #22
 8016dd2:	6003      	str	r3, [r0, #0]
 8016dd4:	2000      	movs	r0, #0
 8016dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016dda:	4f3a      	ldr	r7, [pc, #232]	; (8016ec4 <_strtol_l.isra.0+0x104>)
 8016ddc:	468e      	mov	lr, r1
 8016dde:	4676      	mov	r6, lr
 8016de0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8016de4:	5de5      	ldrb	r5, [r4, r7]
 8016de6:	f015 0508 	ands.w	r5, r5, #8
 8016dea:	d1f8      	bne.n	8016dde <_strtol_l.isra.0+0x1e>
 8016dec:	2c2d      	cmp	r4, #45	; 0x2d
 8016dee:	d134      	bne.n	8016e5a <_strtol_l.isra.0+0x9a>
 8016df0:	f89e 4000 	ldrb.w	r4, [lr]
 8016df4:	f04f 0801 	mov.w	r8, #1
 8016df8:	f106 0e02 	add.w	lr, r6, #2
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d05c      	beq.n	8016eba <_strtol_l.isra.0+0xfa>
 8016e00:	2b10      	cmp	r3, #16
 8016e02:	d10c      	bne.n	8016e1e <_strtol_l.isra.0+0x5e>
 8016e04:	2c30      	cmp	r4, #48	; 0x30
 8016e06:	d10a      	bne.n	8016e1e <_strtol_l.isra.0+0x5e>
 8016e08:	f89e 4000 	ldrb.w	r4, [lr]
 8016e0c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8016e10:	2c58      	cmp	r4, #88	; 0x58
 8016e12:	d14d      	bne.n	8016eb0 <_strtol_l.isra.0+0xf0>
 8016e14:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8016e18:	2310      	movs	r3, #16
 8016e1a:	f10e 0e02 	add.w	lr, lr, #2
 8016e1e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8016e22:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016e26:	2600      	movs	r6, #0
 8016e28:	fbbc f9f3 	udiv	r9, ip, r3
 8016e2c:	4635      	mov	r5, r6
 8016e2e:	fb03 ca19 	mls	sl, r3, r9, ip
 8016e32:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8016e36:	2f09      	cmp	r7, #9
 8016e38:	d818      	bhi.n	8016e6c <_strtol_l.isra.0+0xac>
 8016e3a:	463c      	mov	r4, r7
 8016e3c:	42a3      	cmp	r3, r4
 8016e3e:	dd24      	ble.n	8016e8a <_strtol_l.isra.0+0xca>
 8016e40:	2e00      	cmp	r6, #0
 8016e42:	db1f      	blt.n	8016e84 <_strtol_l.isra.0+0xc4>
 8016e44:	45a9      	cmp	r9, r5
 8016e46:	d31d      	bcc.n	8016e84 <_strtol_l.isra.0+0xc4>
 8016e48:	d101      	bne.n	8016e4e <_strtol_l.isra.0+0x8e>
 8016e4a:	45a2      	cmp	sl, r4
 8016e4c:	db1a      	blt.n	8016e84 <_strtol_l.isra.0+0xc4>
 8016e4e:	fb05 4503 	mla	r5, r5, r3, r4
 8016e52:	2601      	movs	r6, #1
 8016e54:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8016e58:	e7eb      	b.n	8016e32 <_strtol_l.isra.0+0x72>
 8016e5a:	2c2b      	cmp	r4, #43	; 0x2b
 8016e5c:	bf08      	it	eq
 8016e5e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8016e62:	46a8      	mov	r8, r5
 8016e64:	bf08      	it	eq
 8016e66:	f106 0e02 	addeq.w	lr, r6, #2
 8016e6a:	e7c7      	b.n	8016dfc <_strtol_l.isra.0+0x3c>
 8016e6c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8016e70:	2f19      	cmp	r7, #25
 8016e72:	d801      	bhi.n	8016e78 <_strtol_l.isra.0+0xb8>
 8016e74:	3c37      	subs	r4, #55	; 0x37
 8016e76:	e7e1      	b.n	8016e3c <_strtol_l.isra.0+0x7c>
 8016e78:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8016e7c:	2f19      	cmp	r7, #25
 8016e7e:	d804      	bhi.n	8016e8a <_strtol_l.isra.0+0xca>
 8016e80:	3c57      	subs	r4, #87	; 0x57
 8016e82:	e7db      	b.n	8016e3c <_strtol_l.isra.0+0x7c>
 8016e84:	f04f 36ff 	mov.w	r6, #4294967295
 8016e88:	e7e4      	b.n	8016e54 <_strtol_l.isra.0+0x94>
 8016e8a:	2e00      	cmp	r6, #0
 8016e8c:	da05      	bge.n	8016e9a <_strtol_l.isra.0+0xda>
 8016e8e:	2322      	movs	r3, #34	; 0x22
 8016e90:	6003      	str	r3, [r0, #0]
 8016e92:	4665      	mov	r5, ip
 8016e94:	b942      	cbnz	r2, 8016ea8 <_strtol_l.isra.0+0xe8>
 8016e96:	4628      	mov	r0, r5
 8016e98:	e79d      	b.n	8016dd6 <_strtol_l.isra.0+0x16>
 8016e9a:	f1b8 0f00 	cmp.w	r8, #0
 8016e9e:	d000      	beq.n	8016ea2 <_strtol_l.isra.0+0xe2>
 8016ea0:	426d      	negs	r5, r5
 8016ea2:	2a00      	cmp	r2, #0
 8016ea4:	d0f7      	beq.n	8016e96 <_strtol_l.isra.0+0xd6>
 8016ea6:	b10e      	cbz	r6, 8016eac <_strtol_l.isra.0+0xec>
 8016ea8:	f10e 31ff 	add.w	r1, lr, #4294967295
 8016eac:	6011      	str	r1, [r2, #0]
 8016eae:	e7f2      	b.n	8016e96 <_strtol_l.isra.0+0xd6>
 8016eb0:	2430      	movs	r4, #48	; 0x30
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d1b3      	bne.n	8016e1e <_strtol_l.isra.0+0x5e>
 8016eb6:	2308      	movs	r3, #8
 8016eb8:	e7b1      	b.n	8016e1e <_strtol_l.isra.0+0x5e>
 8016eba:	2c30      	cmp	r4, #48	; 0x30
 8016ebc:	d0a4      	beq.n	8016e08 <_strtol_l.isra.0+0x48>
 8016ebe:	230a      	movs	r3, #10
 8016ec0:	e7ad      	b.n	8016e1e <_strtol_l.isra.0+0x5e>
 8016ec2:	bf00      	nop
 8016ec4:	0801c689 	.word	0x0801c689

08016ec8 <_strtol_r>:
 8016ec8:	f7ff bf7a 	b.w	8016dc0 <_strtol_l.isra.0>

08016ecc <strtol>:
 8016ecc:	4613      	mov	r3, r2
 8016ece:	460a      	mov	r2, r1
 8016ed0:	4601      	mov	r1, r0
 8016ed2:	4802      	ldr	r0, [pc, #8]	; (8016edc <strtol+0x10>)
 8016ed4:	6800      	ldr	r0, [r0, #0]
 8016ed6:	f7ff bf73 	b.w	8016dc0 <_strtol_l.isra.0>
 8016eda:	bf00      	nop
 8016edc:	200000d8 	.word	0x200000d8

08016ee0 <_strtoul_l.isra.0>:
 8016ee0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ee4:	4e3b      	ldr	r6, [pc, #236]	; (8016fd4 <_strtoul_l.isra.0+0xf4>)
 8016ee6:	4686      	mov	lr, r0
 8016ee8:	468c      	mov	ip, r1
 8016eea:	4660      	mov	r0, ip
 8016eec:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8016ef0:	5da5      	ldrb	r5, [r4, r6]
 8016ef2:	f015 0508 	ands.w	r5, r5, #8
 8016ef6:	d1f8      	bne.n	8016eea <_strtoul_l.isra.0+0xa>
 8016ef8:	2c2d      	cmp	r4, #45	; 0x2d
 8016efa:	d134      	bne.n	8016f66 <_strtoul_l.isra.0+0x86>
 8016efc:	f89c 4000 	ldrb.w	r4, [ip]
 8016f00:	f04f 0801 	mov.w	r8, #1
 8016f04:	f100 0c02 	add.w	ip, r0, #2
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d05e      	beq.n	8016fca <_strtoul_l.isra.0+0xea>
 8016f0c:	2b10      	cmp	r3, #16
 8016f0e:	d10c      	bne.n	8016f2a <_strtoul_l.isra.0+0x4a>
 8016f10:	2c30      	cmp	r4, #48	; 0x30
 8016f12:	d10a      	bne.n	8016f2a <_strtoul_l.isra.0+0x4a>
 8016f14:	f89c 0000 	ldrb.w	r0, [ip]
 8016f18:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8016f1c:	2858      	cmp	r0, #88	; 0x58
 8016f1e:	d14f      	bne.n	8016fc0 <_strtoul_l.isra.0+0xe0>
 8016f20:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8016f24:	2310      	movs	r3, #16
 8016f26:	f10c 0c02 	add.w	ip, ip, #2
 8016f2a:	f04f 37ff 	mov.w	r7, #4294967295
 8016f2e:	2500      	movs	r5, #0
 8016f30:	fbb7 f7f3 	udiv	r7, r7, r3
 8016f34:	fb03 f907 	mul.w	r9, r3, r7
 8016f38:	ea6f 0909 	mvn.w	r9, r9
 8016f3c:	4628      	mov	r0, r5
 8016f3e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8016f42:	2e09      	cmp	r6, #9
 8016f44:	d818      	bhi.n	8016f78 <_strtoul_l.isra.0+0x98>
 8016f46:	4634      	mov	r4, r6
 8016f48:	42a3      	cmp	r3, r4
 8016f4a:	dd24      	ble.n	8016f96 <_strtoul_l.isra.0+0xb6>
 8016f4c:	2d00      	cmp	r5, #0
 8016f4e:	db1f      	blt.n	8016f90 <_strtoul_l.isra.0+0xb0>
 8016f50:	4287      	cmp	r7, r0
 8016f52:	d31d      	bcc.n	8016f90 <_strtoul_l.isra.0+0xb0>
 8016f54:	d101      	bne.n	8016f5a <_strtoul_l.isra.0+0x7a>
 8016f56:	45a1      	cmp	r9, r4
 8016f58:	db1a      	blt.n	8016f90 <_strtoul_l.isra.0+0xb0>
 8016f5a:	fb00 4003 	mla	r0, r0, r3, r4
 8016f5e:	2501      	movs	r5, #1
 8016f60:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8016f64:	e7eb      	b.n	8016f3e <_strtoul_l.isra.0+0x5e>
 8016f66:	2c2b      	cmp	r4, #43	; 0x2b
 8016f68:	bf08      	it	eq
 8016f6a:	f89c 4000 	ldrbeq.w	r4, [ip]
 8016f6e:	46a8      	mov	r8, r5
 8016f70:	bf08      	it	eq
 8016f72:	f100 0c02 	addeq.w	ip, r0, #2
 8016f76:	e7c7      	b.n	8016f08 <_strtoul_l.isra.0+0x28>
 8016f78:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8016f7c:	2e19      	cmp	r6, #25
 8016f7e:	d801      	bhi.n	8016f84 <_strtoul_l.isra.0+0xa4>
 8016f80:	3c37      	subs	r4, #55	; 0x37
 8016f82:	e7e1      	b.n	8016f48 <_strtoul_l.isra.0+0x68>
 8016f84:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8016f88:	2e19      	cmp	r6, #25
 8016f8a:	d804      	bhi.n	8016f96 <_strtoul_l.isra.0+0xb6>
 8016f8c:	3c57      	subs	r4, #87	; 0x57
 8016f8e:	e7db      	b.n	8016f48 <_strtoul_l.isra.0+0x68>
 8016f90:	f04f 35ff 	mov.w	r5, #4294967295
 8016f94:	e7e4      	b.n	8016f60 <_strtoul_l.isra.0+0x80>
 8016f96:	2d00      	cmp	r5, #0
 8016f98:	da07      	bge.n	8016faa <_strtoul_l.isra.0+0xca>
 8016f9a:	2322      	movs	r3, #34	; 0x22
 8016f9c:	f8ce 3000 	str.w	r3, [lr]
 8016fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8016fa4:	b942      	cbnz	r2, 8016fb8 <_strtoul_l.isra.0+0xd8>
 8016fa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016faa:	f1b8 0f00 	cmp.w	r8, #0
 8016fae:	d000      	beq.n	8016fb2 <_strtoul_l.isra.0+0xd2>
 8016fb0:	4240      	negs	r0, r0
 8016fb2:	2a00      	cmp	r2, #0
 8016fb4:	d0f7      	beq.n	8016fa6 <_strtoul_l.isra.0+0xc6>
 8016fb6:	b10d      	cbz	r5, 8016fbc <_strtoul_l.isra.0+0xdc>
 8016fb8:	f10c 31ff 	add.w	r1, ip, #4294967295
 8016fbc:	6011      	str	r1, [r2, #0]
 8016fbe:	e7f2      	b.n	8016fa6 <_strtoul_l.isra.0+0xc6>
 8016fc0:	2430      	movs	r4, #48	; 0x30
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d1b1      	bne.n	8016f2a <_strtoul_l.isra.0+0x4a>
 8016fc6:	2308      	movs	r3, #8
 8016fc8:	e7af      	b.n	8016f2a <_strtoul_l.isra.0+0x4a>
 8016fca:	2c30      	cmp	r4, #48	; 0x30
 8016fcc:	d0a2      	beq.n	8016f14 <_strtoul_l.isra.0+0x34>
 8016fce:	230a      	movs	r3, #10
 8016fd0:	e7ab      	b.n	8016f2a <_strtoul_l.isra.0+0x4a>
 8016fd2:	bf00      	nop
 8016fd4:	0801c689 	.word	0x0801c689

08016fd8 <_strtoul_r>:
 8016fd8:	f7ff bf82 	b.w	8016ee0 <_strtoul_l.isra.0>

08016fdc <strtoul>:
 8016fdc:	4613      	mov	r3, r2
 8016fde:	460a      	mov	r2, r1
 8016fe0:	4601      	mov	r1, r0
 8016fe2:	4802      	ldr	r0, [pc, #8]	; (8016fec <strtoul+0x10>)
 8016fe4:	6800      	ldr	r0, [r0, #0]
 8016fe6:	f7ff bf7b 	b.w	8016ee0 <_strtoul_l.isra.0>
 8016fea:	bf00      	nop
 8016fec:	200000d8 	.word	0x200000d8

08016ff0 <__tzcalc_limits>:
 8016ff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ff4:	4680      	mov	r8, r0
 8016ff6:	f001 fe45 	bl	8018c84 <__gettzinfo>
 8016ffa:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8016ffe:	4598      	cmp	r8, r3
 8017000:	f340 8098 	ble.w	8017134 <__tzcalc_limits+0x144>
 8017004:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8017008:	4443      	add	r3, r8
 801700a:	109b      	asrs	r3, r3, #2
 801700c:	f240 126d 	movw	r2, #365	; 0x16d
 8017010:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8017014:	fb02 3505 	mla	r5, r2, r5, r3
 8017018:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801701c:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8017020:	fb93 f3f2 	sdiv	r3, r3, r2
 8017024:	441d      	add	r5, r3
 8017026:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801702a:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801702e:	fb98 f7f3 	sdiv	r7, r8, r3
 8017032:	fb03 8717 	mls	r7, r3, r7, r8
 8017036:	4442      	add	r2, r8
 8017038:	fab7 fc87 	clz	ip, r7
 801703c:	fbb2 f2f3 	udiv	r2, r2, r3
 8017040:	f008 0303 	and.w	r3, r8, #3
 8017044:	4415      	add	r5, r2
 8017046:	2264      	movs	r2, #100	; 0x64
 8017048:	f8c0 8004 	str.w	r8, [r0, #4]
 801704c:	fb98 f6f2 	sdiv	r6, r8, r2
 8017050:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8017054:	fb02 8616 	mls	r6, r2, r6, r8
 8017058:	4604      	mov	r4, r0
 801705a:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801705e:	9300      	str	r3, [sp, #0]
 8017060:	f04f 0e07 	mov.w	lr, #7
 8017064:	7a22      	ldrb	r2, [r4, #8]
 8017066:	6963      	ldr	r3, [r4, #20]
 8017068:	2a4a      	cmp	r2, #74	; 0x4a
 801706a:	d128      	bne.n	80170be <__tzcalc_limits+0xce>
 801706c:	9900      	ldr	r1, [sp, #0]
 801706e:	18ea      	adds	r2, r5, r3
 8017070:	b901      	cbnz	r1, 8017074 <__tzcalc_limits+0x84>
 8017072:	b906      	cbnz	r6, 8017076 <__tzcalc_limits+0x86>
 8017074:	bb0f      	cbnz	r7, 80170ba <__tzcalc_limits+0xca>
 8017076:	2b3b      	cmp	r3, #59	; 0x3b
 8017078:	bfd4      	ite	le
 801707a:	2300      	movle	r3, #0
 801707c:	2301      	movgt	r3, #1
 801707e:	4413      	add	r3, r2
 8017080:	1e5a      	subs	r2, r3, #1
 8017082:	69a3      	ldr	r3, [r4, #24]
 8017084:	492c      	ldr	r1, [pc, #176]	; (8017138 <__tzcalc_limits+0x148>)
 8017086:	fb01 3202 	mla	r2, r1, r2, r3
 801708a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801708c:	4413      	add	r3, r2
 801708e:	461a      	mov	r2, r3
 8017090:	17db      	asrs	r3, r3, #31
 8017092:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8017096:	3428      	adds	r4, #40	; 0x28
 8017098:	45a3      	cmp	fp, r4
 801709a:	d1e3      	bne.n	8017064 <__tzcalc_limits+0x74>
 801709c:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80170a0:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80170a4:	4294      	cmp	r4, r2
 80170a6:	eb75 0303 	sbcs.w	r3, r5, r3
 80170aa:	bfb4      	ite	lt
 80170ac:	2301      	movlt	r3, #1
 80170ae:	2300      	movge	r3, #0
 80170b0:	6003      	str	r3, [r0, #0]
 80170b2:	2001      	movs	r0, #1
 80170b4:	b003      	add	sp, #12
 80170b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170ba:	2300      	movs	r3, #0
 80170bc:	e7df      	b.n	801707e <__tzcalc_limits+0x8e>
 80170be:	2a44      	cmp	r2, #68	; 0x44
 80170c0:	d101      	bne.n	80170c6 <__tzcalc_limits+0xd6>
 80170c2:	18ea      	adds	r2, r5, r3
 80170c4:	e7dd      	b.n	8017082 <__tzcalc_limits+0x92>
 80170c6:	9a00      	ldr	r2, [sp, #0]
 80170c8:	bb72      	cbnz	r2, 8017128 <__tzcalc_limits+0x138>
 80170ca:	2e00      	cmp	r6, #0
 80170cc:	bf0c      	ite	eq
 80170ce:	46e0      	moveq	r8, ip
 80170d0:	f04f 0801 	movne.w	r8, #1
 80170d4:	4919      	ldr	r1, [pc, #100]	; (801713c <__tzcalc_limits+0x14c>)
 80170d6:	68e2      	ldr	r2, [r4, #12]
 80170d8:	9201      	str	r2, [sp, #4]
 80170da:	f04f 0a30 	mov.w	sl, #48	; 0x30
 80170de:	fb0a 1808 	mla	r8, sl, r8, r1
 80170e2:	462a      	mov	r2, r5
 80170e4:	f04f 0900 	mov.w	r9, #0
 80170e8:	f1a8 0804 	sub.w	r8, r8, #4
 80170ec:	9901      	ldr	r1, [sp, #4]
 80170ee:	f109 0901 	add.w	r9, r9, #1
 80170f2:	4549      	cmp	r1, r9
 80170f4:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 80170f8:	dc18      	bgt.n	801712c <__tzcalc_limits+0x13c>
 80170fa:	f102 0804 	add.w	r8, r2, #4
 80170fe:	fb98 f9fe 	sdiv	r9, r8, lr
 8017102:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8017106:	eba8 0909 	sub.w	r9, r8, r9
 801710a:	ebb3 0909 	subs.w	r9, r3, r9
 801710e:	6923      	ldr	r3, [r4, #16]
 8017110:	f103 33ff 	add.w	r3, r3, #4294967295
 8017114:	bf48      	it	mi
 8017116:	f109 0907 	addmi.w	r9, r9, #7
 801711a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801711e:	444b      	add	r3, r9
 8017120:	4553      	cmp	r3, sl
 8017122:	da05      	bge.n	8017130 <__tzcalc_limits+0x140>
 8017124:	441a      	add	r2, r3
 8017126:	e7ac      	b.n	8017082 <__tzcalc_limits+0x92>
 8017128:	46e0      	mov	r8, ip
 801712a:	e7d3      	b.n	80170d4 <__tzcalc_limits+0xe4>
 801712c:	4452      	add	r2, sl
 801712e:	e7dd      	b.n	80170ec <__tzcalc_limits+0xfc>
 8017130:	3b07      	subs	r3, #7
 8017132:	e7f5      	b.n	8017120 <__tzcalc_limits+0x130>
 8017134:	2000      	movs	r0, #0
 8017136:	e7bd      	b.n	80170b4 <__tzcalc_limits+0xc4>
 8017138:	00015180 	.word	0x00015180
 801713c:	0801c8c8 	.word	0x0801c8c8

08017140 <__tz_lock>:
 8017140:	4801      	ldr	r0, [pc, #4]	; (8017148 <__tz_lock+0x8>)
 8017142:	f7fd bbc4 	b.w	80148ce <__retarget_lock_acquire>
 8017146:	bf00      	nop
 8017148:	2000654f 	.word	0x2000654f

0801714c <__tz_unlock>:
 801714c:	4801      	ldr	r0, [pc, #4]	; (8017154 <__tz_unlock+0x8>)
 801714e:	f7fd bbc0 	b.w	80148d2 <__retarget_lock_release>
 8017152:	bf00      	nop
 8017154:	2000654f 	.word	0x2000654f

08017158 <_tzset_unlocked>:
 8017158:	4b01      	ldr	r3, [pc, #4]	; (8017160 <_tzset_unlocked+0x8>)
 801715a:	6818      	ldr	r0, [r3, #0]
 801715c:	f000 b802 	b.w	8017164 <_tzset_unlocked_r>
 8017160:	200000d8 	.word	0x200000d8

08017164 <_tzset_unlocked_r>:
 8017164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017168:	b08d      	sub	sp, #52	; 0x34
 801716a:	4607      	mov	r7, r0
 801716c:	f001 fd8a 	bl	8018c84 <__gettzinfo>
 8017170:	49ae      	ldr	r1, [pc, #696]	; (801742c <_tzset_unlocked_r+0x2c8>)
 8017172:	4eaf      	ldr	r6, [pc, #700]	; (8017430 <_tzset_unlocked_r+0x2cc>)
 8017174:	4605      	mov	r5, r0
 8017176:	4638      	mov	r0, r7
 8017178:	f001 fd7c 	bl	8018c74 <_getenv_r>
 801717c:	4604      	mov	r4, r0
 801717e:	b970      	cbnz	r0, 801719e <_tzset_unlocked_r+0x3a>
 8017180:	4bac      	ldr	r3, [pc, #688]	; (8017434 <_tzset_unlocked_r+0x2d0>)
 8017182:	4aad      	ldr	r2, [pc, #692]	; (8017438 <_tzset_unlocked_r+0x2d4>)
 8017184:	6018      	str	r0, [r3, #0]
 8017186:	4bad      	ldr	r3, [pc, #692]	; (801743c <_tzset_unlocked_r+0x2d8>)
 8017188:	6018      	str	r0, [r3, #0]
 801718a:	4bad      	ldr	r3, [pc, #692]	; (8017440 <_tzset_unlocked_r+0x2dc>)
 801718c:	6830      	ldr	r0, [r6, #0]
 801718e:	e9c3 2200 	strd	r2, r2, [r3]
 8017192:	f7fd fba9 	bl	80148e8 <free>
 8017196:	6034      	str	r4, [r6, #0]
 8017198:	b00d      	add	sp, #52	; 0x34
 801719a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801719e:	6831      	ldr	r1, [r6, #0]
 80171a0:	2900      	cmp	r1, #0
 80171a2:	d15f      	bne.n	8017264 <_tzset_unlocked_r+0x100>
 80171a4:	6830      	ldr	r0, [r6, #0]
 80171a6:	f7fd fb9f 	bl	80148e8 <free>
 80171aa:	4620      	mov	r0, r4
 80171ac:	f7e9 f82a 	bl	8000204 <strlen>
 80171b0:	1c41      	adds	r1, r0, #1
 80171b2:	4638      	mov	r0, r7
 80171b4:	f7fd fe9e 	bl	8014ef4 <_malloc_r>
 80171b8:	6030      	str	r0, [r6, #0]
 80171ba:	2800      	cmp	r0, #0
 80171bc:	d157      	bne.n	801726e <_tzset_unlocked_r+0x10a>
 80171be:	7823      	ldrb	r3, [r4, #0]
 80171c0:	4aa0      	ldr	r2, [pc, #640]	; (8017444 <_tzset_unlocked_r+0x2e0>)
 80171c2:	49a1      	ldr	r1, [pc, #644]	; (8017448 <_tzset_unlocked_r+0x2e4>)
 80171c4:	2b3a      	cmp	r3, #58	; 0x3a
 80171c6:	bf08      	it	eq
 80171c8:	3401      	addeq	r4, #1
 80171ca:	ae0a      	add	r6, sp, #40	; 0x28
 80171cc:	4633      	mov	r3, r6
 80171ce:	4620      	mov	r0, r4
 80171d0:	f7fe fed6 	bl	8015f80 <siscanf>
 80171d4:	2800      	cmp	r0, #0
 80171d6:	dddf      	ble.n	8017198 <_tzset_unlocked_r+0x34>
 80171d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80171da:	18e7      	adds	r7, r4, r3
 80171dc:	5ce3      	ldrb	r3, [r4, r3]
 80171de:	2b2d      	cmp	r3, #45	; 0x2d
 80171e0:	d149      	bne.n	8017276 <_tzset_unlocked_r+0x112>
 80171e2:	3701      	adds	r7, #1
 80171e4:	f04f 34ff 	mov.w	r4, #4294967295
 80171e8:	f10d 0a20 	add.w	sl, sp, #32
 80171ec:	f10d 0b1e 	add.w	fp, sp, #30
 80171f0:	f04f 0800 	mov.w	r8, #0
 80171f4:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80171f8:	4994      	ldr	r1, [pc, #592]	; (801744c <_tzset_unlocked_r+0x2e8>)
 80171fa:	9603      	str	r6, [sp, #12]
 80171fc:	f8cd b000 	str.w	fp, [sp]
 8017200:	4633      	mov	r3, r6
 8017202:	aa07      	add	r2, sp, #28
 8017204:	4638      	mov	r0, r7
 8017206:	f8ad 801e 	strh.w	r8, [sp, #30]
 801720a:	f8ad 8020 	strh.w	r8, [sp, #32]
 801720e:	f7fe feb7 	bl	8015f80 <siscanf>
 8017212:	4540      	cmp	r0, r8
 8017214:	ddc0      	ble.n	8017198 <_tzset_unlocked_r+0x34>
 8017216:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801721a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801721e:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8017458 <_tzset_unlocked_r+0x2f4>
 8017222:	213c      	movs	r1, #60	; 0x3c
 8017224:	fb01 2203 	mla	r2, r1, r3, r2
 8017228:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801722c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8017230:	fb01 2303 	mla	r3, r1, r3, r2
 8017234:	435c      	muls	r4, r3
 8017236:	62ac      	str	r4, [r5, #40]	; 0x28
 8017238:	4c81      	ldr	r4, [pc, #516]	; (8017440 <_tzset_unlocked_r+0x2dc>)
 801723a:	4b82      	ldr	r3, [pc, #520]	; (8017444 <_tzset_unlocked_r+0x2e0>)
 801723c:	6023      	str	r3, [r4, #0]
 801723e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017240:	4981      	ldr	r1, [pc, #516]	; (8017448 <_tzset_unlocked_r+0x2e4>)
 8017242:	441f      	add	r7, r3
 8017244:	464a      	mov	r2, r9
 8017246:	4633      	mov	r3, r6
 8017248:	4638      	mov	r0, r7
 801724a:	f7fe fe99 	bl	8015f80 <siscanf>
 801724e:	4540      	cmp	r0, r8
 8017250:	dc16      	bgt.n	8017280 <_tzset_unlocked_r+0x11c>
 8017252:	6823      	ldr	r3, [r4, #0]
 8017254:	6063      	str	r3, [r4, #4]
 8017256:	4b77      	ldr	r3, [pc, #476]	; (8017434 <_tzset_unlocked_r+0x2d0>)
 8017258:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801725a:	601a      	str	r2, [r3, #0]
 801725c:	4b77      	ldr	r3, [pc, #476]	; (801743c <_tzset_unlocked_r+0x2d8>)
 801725e:	f8c3 8000 	str.w	r8, [r3]
 8017262:	e799      	b.n	8017198 <_tzset_unlocked_r+0x34>
 8017264:	f7e8 ffc4 	bl	80001f0 <strcmp>
 8017268:	2800      	cmp	r0, #0
 801726a:	d19b      	bne.n	80171a4 <_tzset_unlocked_r+0x40>
 801726c:	e794      	b.n	8017198 <_tzset_unlocked_r+0x34>
 801726e:	4621      	mov	r1, r4
 8017270:	f7fe ff04 	bl	801607c <strcpy>
 8017274:	e7a3      	b.n	80171be <_tzset_unlocked_r+0x5a>
 8017276:	2b2b      	cmp	r3, #43	; 0x2b
 8017278:	bf08      	it	eq
 801727a:	3701      	addeq	r7, #1
 801727c:	2401      	movs	r4, #1
 801727e:	e7b3      	b.n	80171e8 <_tzset_unlocked_r+0x84>
 8017280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017282:	f8c4 9004 	str.w	r9, [r4, #4]
 8017286:	18fc      	adds	r4, r7, r3
 8017288:	5cfb      	ldrb	r3, [r7, r3]
 801728a:	2b2d      	cmp	r3, #45	; 0x2d
 801728c:	f040 808b 	bne.w	80173a6 <_tzset_unlocked_r+0x242>
 8017290:	3401      	adds	r4, #1
 8017292:	f04f 37ff 	mov.w	r7, #4294967295
 8017296:	2300      	movs	r3, #0
 8017298:	f8ad 301c 	strh.w	r3, [sp, #28]
 801729c:	f8ad 301e 	strh.w	r3, [sp, #30]
 80172a0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80172a4:	930a      	str	r3, [sp, #40]	; 0x28
 80172a6:	e9cd a602 	strd	sl, r6, [sp, #8]
 80172aa:	e9cd b600 	strd	fp, r6, [sp]
 80172ae:	4967      	ldr	r1, [pc, #412]	; (801744c <_tzset_unlocked_r+0x2e8>)
 80172b0:	4633      	mov	r3, r6
 80172b2:	aa07      	add	r2, sp, #28
 80172b4:	4620      	mov	r0, r4
 80172b6:	f7fe fe63 	bl	8015f80 <siscanf>
 80172ba:	2800      	cmp	r0, #0
 80172bc:	dc78      	bgt.n	80173b0 <_tzset_unlocked_r+0x24c>
 80172be:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 80172c0:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 80172c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80172c6:	652f      	str	r7, [r5, #80]	; 0x50
 80172c8:	441c      	add	r4, r3
 80172ca:	462f      	mov	r7, r5
 80172cc:	f04f 0900 	mov.w	r9, #0
 80172d0:	7823      	ldrb	r3, [r4, #0]
 80172d2:	2b2c      	cmp	r3, #44	; 0x2c
 80172d4:	bf08      	it	eq
 80172d6:	3401      	addeq	r4, #1
 80172d8:	f894 8000 	ldrb.w	r8, [r4]
 80172dc:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80172e0:	d178      	bne.n	80173d4 <_tzset_unlocked_r+0x270>
 80172e2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80172e6:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80172ea:	ab09      	add	r3, sp, #36	; 0x24
 80172ec:	9300      	str	r3, [sp, #0]
 80172ee:	4958      	ldr	r1, [pc, #352]	; (8017450 <_tzset_unlocked_r+0x2ec>)
 80172f0:	9603      	str	r6, [sp, #12]
 80172f2:	4633      	mov	r3, r6
 80172f4:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80172f8:	4620      	mov	r0, r4
 80172fa:	f7fe fe41 	bl	8015f80 <siscanf>
 80172fe:	2803      	cmp	r0, #3
 8017300:	f47f af4a 	bne.w	8017198 <_tzset_unlocked_r+0x34>
 8017304:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8017308:	1e4b      	subs	r3, r1, #1
 801730a:	2b0b      	cmp	r3, #11
 801730c:	f63f af44 	bhi.w	8017198 <_tzset_unlocked_r+0x34>
 8017310:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8017314:	1e53      	subs	r3, r2, #1
 8017316:	2b04      	cmp	r3, #4
 8017318:	f63f af3e 	bhi.w	8017198 <_tzset_unlocked_r+0x34>
 801731c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8017320:	2b06      	cmp	r3, #6
 8017322:	f63f af39 	bhi.w	8017198 <_tzset_unlocked_r+0x34>
 8017326:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801732a:	f887 8008 	strb.w	r8, [r7, #8]
 801732e:	617b      	str	r3, [r7, #20]
 8017330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017332:	eb04 0803 	add.w	r8, r4, r3
 8017336:	2302      	movs	r3, #2
 8017338:	f8ad 301c 	strh.w	r3, [sp, #28]
 801733c:	2300      	movs	r3, #0
 801733e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017342:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017346:	930a      	str	r3, [sp, #40]	; 0x28
 8017348:	f898 3000 	ldrb.w	r3, [r8]
 801734c:	2b2f      	cmp	r3, #47	; 0x2f
 801734e:	d109      	bne.n	8017364 <_tzset_unlocked_r+0x200>
 8017350:	e9cd a602 	strd	sl, r6, [sp, #8]
 8017354:	e9cd b600 	strd	fp, r6, [sp]
 8017358:	493e      	ldr	r1, [pc, #248]	; (8017454 <_tzset_unlocked_r+0x2f0>)
 801735a:	4633      	mov	r3, r6
 801735c:	aa07      	add	r2, sp, #28
 801735e:	4640      	mov	r0, r8
 8017360:	f7fe fe0e 	bl	8015f80 <siscanf>
 8017364:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8017368:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801736c:	213c      	movs	r1, #60	; 0x3c
 801736e:	fb01 2203 	mla	r2, r1, r3, r2
 8017372:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8017376:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801737a:	fb01 2303 	mla	r3, r1, r3, r2
 801737e:	61bb      	str	r3, [r7, #24]
 8017380:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017382:	3728      	adds	r7, #40	; 0x28
 8017384:	4444      	add	r4, r8
 8017386:	f1b9 0f00 	cmp.w	r9, #0
 801738a:	d020      	beq.n	80173ce <_tzset_unlocked_r+0x26a>
 801738c:	6868      	ldr	r0, [r5, #4]
 801738e:	f7ff fe2f 	bl	8016ff0 <__tzcalc_limits>
 8017392:	4b28      	ldr	r3, [pc, #160]	; (8017434 <_tzset_unlocked_r+0x2d0>)
 8017394:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8017396:	601a      	str	r2, [r3, #0]
 8017398:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801739a:	1a9b      	subs	r3, r3, r2
 801739c:	4a27      	ldr	r2, [pc, #156]	; (801743c <_tzset_unlocked_r+0x2d8>)
 801739e:	bf18      	it	ne
 80173a0:	2301      	movne	r3, #1
 80173a2:	6013      	str	r3, [r2, #0]
 80173a4:	e6f8      	b.n	8017198 <_tzset_unlocked_r+0x34>
 80173a6:	2b2b      	cmp	r3, #43	; 0x2b
 80173a8:	bf08      	it	eq
 80173aa:	3401      	addeq	r4, #1
 80173ac:	2701      	movs	r7, #1
 80173ae:	e772      	b.n	8017296 <_tzset_unlocked_r+0x132>
 80173b0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80173b4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80173b8:	213c      	movs	r1, #60	; 0x3c
 80173ba:	fb01 2203 	mla	r2, r1, r3, r2
 80173be:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80173c2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80173c6:	fb01 2303 	mla	r3, r1, r3, r2
 80173ca:	435f      	muls	r7, r3
 80173cc:	e77a      	b.n	80172c4 <_tzset_unlocked_r+0x160>
 80173ce:	f04f 0901 	mov.w	r9, #1
 80173d2:	e77d      	b.n	80172d0 <_tzset_unlocked_r+0x16c>
 80173d4:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80173d8:	bf06      	itte	eq
 80173da:	3401      	addeq	r4, #1
 80173dc:	4643      	moveq	r3, r8
 80173de:	2344      	movne	r3, #68	; 0x44
 80173e0:	220a      	movs	r2, #10
 80173e2:	a90b      	add	r1, sp, #44	; 0x2c
 80173e4:	4620      	mov	r0, r4
 80173e6:	9305      	str	r3, [sp, #20]
 80173e8:	f7ff fdf8 	bl	8016fdc <strtoul>
 80173ec:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80173f0:	9b05      	ldr	r3, [sp, #20]
 80173f2:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80173f6:	45a0      	cmp	r8, r4
 80173f8:	d114      	bne.n	8017424 <_tzset_unlocked_r+0x2c0>
 80173fa:	234d      	movs	r3, #77	; 0x4d
 80173fc:	f1b9 0f00 	cmp.w	r9, #0
 8017400:	d107      	bne.n	8017412 <_tzset_unlocked_r+0x2ae>
 8017402:	722b      	strb	r3, [r5, #8]
 8017404:	2103      	movs	r1, #3
 8017406:	2302      	movs	r3, #2
 8017408:	e9c5 1303 	strd	r1, r3, [r5, #12]
 801740c:	f8c5 9014 	str.w	r9, [r5, #20]
 8017410:	e791      	b.n	8017336 <_tzset_unlocked_r+0x1d2>
 8017412:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8017416:	220b      	movs	r2, #11
 8017418:	2301      	movs	r3, #1
 801741a:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 801741e:	2300      	movs	r3, #0
 8017420:	63eb      	str	r3, [r5, #60]	; 0x3c
 8017422:	e788      	b.n	8017336 <_tzset_unlocked_r+0x1d2>
 8017424:	b280      	uxth	r0, r0
 8017426:	723b      	strb	r3, [r7, #8]
 8017428:	6178      	str	r0, [r7, #20]
 801742a:	e784      	b.n	8017336 <_tzset_unlocked_r+0x1d2>
 801742c:	0801ca11 	.word	0x0801ca11
 8017430:	20005ad8 	.word	0x20005ad8
 8017434:	20005ae0 	.word	0x20005ae0
 8017438:	0801ca14 	.word	0x0801ca14
 801743c:	20005adc 	.word	0x20005adc
 8017440:	2000013c 	.word	0x2000013c
 8017444:	20005acb 	.word	0x20005acb
 8017448:	0801ca18 	.word	0x0801ca18
 801744c:	0801ca3b 	.word	0x0801ca3b
 8017450:	0801ca27 	.word	0x0801ca27
 8017454:	0801ca3a 	.word	0x0801ca3a
 8017458:	20005ac0 	.word	0x20005ac0

0801745c <__swbuf_r>:
 801745c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801745e:	460e      	mov	r6, r1
 8017460:	4614      	mov	r4, r2
 8017462:	4605      	mov	r5, r0
 8017464:	b118      	cbz	r0, 801746e <__swbuf_r+0x12>
 8017466:	6983      	ldr	r3, [r0, #24]
 8017468:	b90b      	cbnz	r3, 801746e <__swbuf_r+0x12>
 801746a:	f7fd f851 	bl	8014510 <__sinit>
 801746e:	4b21      	ldr	r3, [pc, #132]	; (80174f4 <__swbuf_r+0x98>)
 8017470:	429c      	cmp	r4, r3
 8017472:	d12b      	bne.n	80174cc <__swbuf_r+0x70>
 8017474:	686c      	ldr	r4, [r5, #4]
 8017476:	69a3      	ldr	r3, [r4, #24]
 8017478:	60a3      	str	r3, [r4, #8]
 801747a:	89a3      	ldrh	r3, [r4, #12]
 801747c:	071a      	lsls	r2, r3, #28
 801747e:	d52f      	bpl.n	80174e0 <__swbuf_r+0x84>
 8017480:	6923      	ldr	r3, [r4, #16]
 8017482:	b36b      	cbz	r3, 80174e0 <__swbuf_r+0x84>
 8017484:	6923      	ldr	r3, [r4, #16]
 8017486:	6820      	ldr	r0, [r4, #0]
 8017488:	1ac0      	subs	r0, r0, r3
 801748a:	6963      	ldr	r3, [r4, #20]
 801748c:	b2f6      	uxtb	r6, r6
 801748e:	4283      	cmp	r3, r0
 8017490:	4637      	mov	r7, r6
 8017492:	dc04      	bgt.n	801749e <__swbuf_r+0x42>
 8017494:	4621      	mov	r1, r4
 8017496:	4628      	mov	r0, r5
 8017498:	f000 fff4 	bl	8018484 <_fflush_r>
 801749c:	bb30      	cbnz	r0, 80174ec <__swbuf_r+0x90>
 801749e:	68a3      	ldr	r3, [r4, #8]
 80174a0:	3b01      	subs	r3, #1
 80174a2:	60a3      	str	r3, [r4, #8]
 80174a4:	6823      	ldr	r3, [r4, #0]
 80174a6:	1c5a      	adds	r2, r3, #1
 80174a8:	6022      	str	r2, [r4, #0]
 80174aa:	701e      	strb	r6, [r3, #0]
 80174ac:	6963      	ldr	r3, [r4, #20]
 80174ae:	3001      	adds	r0, #1
 80174b0:	4283      	cmp	r3, r0
 80174b2:	d004      	beq.n	80174be <__swbuf_r+0x62>
 80174b4:	89a3      	ldrh	r3, [r4, #12]
 80174b6:	07db      	lsls	r3, r3, #31
 80174b8:	d506      	bpl.n	80174c8 <__swbuf_r+0x6c>
 80174ba:	2e0a      	cmp	r6, #10
 80174bc:	d104      	bne.n	80174c8 <__swbuf_r+0x6c>
 80174be:	4621      	mov	r1, r4
 80174c0:	4628      	mov	r0, r5
 80174c2:	f000 ffdf 	bl	8018484 <_fflush_r>
 80174c6:	b988      	cbnz	r0, 80174ec <__swbuf_r+0x90>
 80174c8:	4638      	mov	r0, r7
 80174ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174cc:	4b0a      	ldr	r3, [pc, #40]	; (80174f8 <__swbuf_r+0x9c>)
 80174ce:	429c      	cmp	r4, r3
 80174d0:	d101      	bne.n	80174d6 <__swbuf_r+0x7a>
 80174d2:	68ac      	ldr	r4, [r5, #8]
 80174d4:	e7cf      	b.n	8017476 <__swbuf_r+0x1a>
 80174d6:	4b09      	ldr	r3, [pc, #36]	; (80174fc <__swbuf_r+0xa0>)
 80174d8:	429c      	cmp	r4, r3
 80174da:	bf08      	it	eq
 80174dc:	68ec      	ldreq	r4, [r5, #12]
 80174de:	e7ca      	b.n	8017476 <__swbuf_r+0x1a>
 80174e0:	4621      	mov	r1, r4
 80174e2:	4628      	mov	r0, r5
 80174e4:	f000 f81e 	bl	8017524 <__swsetup_r>
 80174e8:	2800      	cmp	r0, #0
 80174ea:	d0cb      	beq.n	8017484 <__swbuf_r+0x28>
 80174ec:	f04f 37ff 	mov.w	r7, #4294967295
 80174f0:	e7ea      	b.n	80174c8 <__swbuf_r+0x6c>
 80174f2:	bf00      	nop
 80174f4:	0801c7ac 	.word	0x0801c7ac
 80174f8:	0801c7cc 	.word	0x0801c7cc
 80174fc:	0801c78c 	.word	0x0801c78c

08017500 <_write_r>:
 8017500:	b538      	push	{r3, r4, r5, lr}
 8017502:	4d07      	ldr	r5, [pc, #28]	; (8017520 <_write_r+0x20>)
 8017504:	4604      	mov	r4, r0
 8017506:	4608      	mov	r0, r1
 8017508:	4611      	mov	r1, r2
 801750a:	2200      	movs	r2, #0
 801750c:	602a      	str	r2, [r5, #0]
 801750e:	461a      	mov	r2, r3
 8017510:	f003 f8d8 	bl	801a6c4 <_write>
 8017514:	1c43      	adds	r3, r0, #1
 8017516:	d102      	bne.n	801751e <_write_r+0x1e>
 8017518:	682b      	ldr	r3, [r5, #0]
 801751a:	b103      	cbz	r3, 801751e <_write_r+0x1e>
 801751c:	6023      	str	r3, [r4, #0]
 801751e:	bd38      	pop	{r3, r4, r5, pc}
 8017520:	20006554 	.word	0x20006554

08017524 <__swsetup_r>:
 8017524:	4b32      	ldr	r3, [pc, #200]	; (80175f0 <__swsetup_r+0xcc>)
 8017526:	b570      	push	{r4, r5, r6, lr}
 8017528:	681d      	ldr	r5, [r3, #0]
 801752a:	4606      	mov	r6, r0
 801752c:	460c      	mov	r4, r1
 801752e:	b125      	cbz	r5, 801753a <__swsetup_r+0x16>
 8017530:	69ab      	ldr	r3, [r5, #24]
 8017532:	b913      	cbnz	r3, 801753a <__swsetup_r+0x16>
 8017534:	4628      	mov	r0, r5
 8017536:	f7fc ffeb 	bl	8014510 <__sinit>
 801753a:	4b2e      	ldr	r3, [pc, #184]	; (80175f4 <__swsetup_r+0xd0>)
 801753c:	429c      	cmp	r4, r3
 801753e:	d10f      	bne.n	8017560 <__swsetup_r+0x3c>
 8017540:	686c      	ldr	r4, [r5, #4]
 8017542:	89a3      	ldrh	r3, [r4, #12]
 8017544:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017548:	0719      	lsls	r1, r3, #28
 801754a:	d42c      	bmi.n	80175a6 <__swsetup_r+0x82>
 801754c:	06dd      	lsls	r5, r3, #27
 801754e:	d411      	bmi.n	8017574 <__swsetup_r+0x50>
 8017550:	2309      	movs	r3, #9
 8017552:	6033      	str	r3, [r6, #0]
 8017554:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017558:	81a3      	strh	r3, [r4, #12]
 801755a:	f04f 30ff 	mov.w	r0, #4294967295
 801755e:	e03e      	b.n	80175de <__swsetup_r+0xba>
 8017560:	4b25      	ldr	r3, [pc, #148]	; (80175f8 <__swsetup_r+0xd4>)
 8017562:	429c      	cmp	r4, r3
 8017564:	d101      	bne.n	801756a <__swsetup_r+0x46>
 8017566:	68ac      	ldr	r4, [r5, #8]
 8017568:	e7eb      	b.n	8017542 <__swsetup_r+0x1e>
 801756a:	4b24      	ldr	r3, [pc, #144]	; (80175fc <__swsetup_r+0xd8>)
 801756c:	429c      	cmp	r4, r3
 801756e:	bf08      	it	eq
 8017570:	68ec      	ldreq	r4, [r5, #12]
 8017572:	e7e6      	b.n	8017542 <__swsetup_r+0x1e>
 8017574:	0758      	lsls	r0, r3, #29
 8017576:	d512      	bpl.n	801759e <__swsetup_r+0x7a>
 8017578:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801757a:	b141      	cbz	r1, 801758e <__swsetup_r+0x6a>
 801757c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017580:	4299      	cmp	r1, r3
 8017582:	d002      	beq.n	801758a <__swsetup_r+0x66>
 8017584:	4630      	mov	r0, r6
 8017586:	f7fd fc65 	bl	8014e54 <_free_r>
 801758a:	2300      	movs	r3, #0
 801758c:	6363      	str	r3, [r4, #52]	; 0x34
 801758e:	89a3      	ldrh	r3, [r4, #12]
 8017590:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017594:	81a3      	strh	r3, [r4, #12]
 8017596:	2300      	movs	r3, #0
 8017598:	6063      	str	r3, [r4, #4]
 801759a:	6923      	ldr	r3, [r4, #16]
 801759c:	6023      	str	r3, [r4, #0]
 801759e:	89a3      	ldrh	r3, [r4, #12]
 80175a0:	f043 0308 	orr.w	r3, r3, #8
 80175a4:	81a3      	strh	r3, [r4, #12]
 80175a6:	6923      	ldr	r3, [r4, #16]
 80175a8:	b94b      	cbnz	r3, 80175be <__swsetup_r+0x9a>
 80175aa:	89a3      	ldrh	r3, [r4, #12]
 80175ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80175b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80175b4:	d003      	beq.n	80175be <__swsetup_r+0x9a>
 80175b6:	4621      	mov	r1, r4
 80175b8:	4630      	mov	r0, r6
 80175ba:	f001 fc51 	bl	8018e60 <__smakebuf_r>
 80175be:	89a0      	ldrh	r0, [r4, #12]
 80175c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80175c4:	f010 0301 	ands.w	r3, r0, #1
 80175c8:	d00a      	beq.n	80175e0 <__swsetup_r+0xbc>
 80175ca:	2300      	movs	r3, #0
 80175cc:	60a3      	str	r3, [r4, #8]
 80175ce:	6963      	ldr	r3, [r4, #20]
 80175d0:	425b      	negs	r3, r3
 80175d2:	61a3      	str	r3, [r4, #24]
 80175d4:	6923      	ldr	r3, [r4, #16]
 80175d6:	b943      	cbnz	r3, 80175ea <__swsetup_r+0xc6>
 80175d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80175dc:	d1ba      	bne.n	8017554 <__swsetup_r+0x30>
 80175de:	bd70      	pop	{r4, r5, r6, pc}
 80175e0:	0781      	lsls	r1, r0, #30
 80175e2:	bf58      	it	pl
 80175e4:	6963      	ldrpl	r3, [r4, #20]
 80175e6:	60a3      	str	r3, [r4, #8]
 80175e8:	e7f4      	b.n	80175d4 <__swsetup_r+0xb0>
 80175ea:	2000      	movs	r0, #0
 80175ec:	e7f7      	b.n	80175de <__swsetup_r+0xba>
 80175ee:	bf00      	nop
 80175f0:	200000d8 	.word	0x200000d8
 80175f4:	0801c7ac 	.word	0x0801c7ac
 80175f8:	0801c7cc 	.word	0x0801c7cc
 80175fc:	0801c78c 	.word	0x0801c78c

08017600 <__assert_func>:
 8017600:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017602:	4614      	mov	r4, r2
 8017604:	461a      	mov	r2, r3
 8017606:	4b09      	ldr	r3, [pc, #36]	; (801762c <__assert_func+0x2c>)
 8017608:	681b      	ldr	r3, [r3, #0]
 801760a:	4605      	mov	r5, r0
 801760c:	68d8      	ldr	r0, [r3, #12]
 801760e:	b14c      	cbz	r4, 8017624 <__assert_func+0x24>
 8017610:	4b07      	ldr	r3, [pc, #28]	; (8017630 <__assert_func+0x30>)
 8017612:	9100      	str	r1, [sp, #0]
 8017614:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017618:	4906      	ldr	r1, [pc, #24]	; (8017634 <__assert_func+0x34>)
 801761a:	462b      	mov	r3, r5
 801761c:	f000 ff6e 	bl	80184fc <fiprintf>
 8017620:	f7fc ff08 	bl	8014434 <abort>
 8017624:	4b04      	ldr	r3, [pc, #16]	; (8017638 <__assert_func+0x38>)
 8017626:	461c      	mov	r4, r3
 8017628:	e7f3      	b.n	8017612 <__assert_func+0x12>
 801762a:	bf00      	nop
 801762c:	200000d8 	.word	0x200000d8
 8017630:	0801ca4d 	.word	0x0801ca4d
 8017634:	0801ca5a 	.word	0x0801ca5a
 8017638:	0801ca88 	.word	0x0801ca88

0801763c <_close_r>:
 801763c:	b538      	push	{r3, r4, r5, lr}
 801763e:	4d06      	ldr	r5, [pc, #24]	; (8017658 <_close_r+0x1c>)
 8017640:	2300      	movs	r3, #0
 8017642:	4604      	mov	r4, r0
 8017644:	4608      	mov	r0, r1
 8017646:	602b      	str	r3, [r5, #0]
 8017648:	f002 fff6 	bl	801a638 <_close>
 801764c:	1c43      	adds	r3, r0, #1
 801764e:	d102      	bne.n	8017656 <_close_r+0x1a>
 8017650:	682b      	ldr	r3, [r5, #0]
 8017652:	b103      	cbz	r3, 8017656 <_close_r+0x1a>
 8017654:	6023      	str	r3, [r4, #0]
 8017656:	bd38      	pop	{r3, r4, r5, pc}
 8017658:	20006554 	.word	0x20006554

0801765c <div>:
 801765c:	2900      	cmp	r1, #0
 801765e:	b510      	push	{r4, lr}
 8017660:	fb91 f4f2 	sdiv	r4, r1, r2
 8017664:	fb02 1314 	mls	r3, r2, r4, r1
 8017668:	db06      	blt.n	8017678 <div+0x1c>
 801766a:	2b00      	cmp	r3, #0
 801766c:	da01      	bge.n	8017672 <div+0x16>
 801766e:	3401      	adds	r4, #1
 8017670:	1a9b      	subs	r3, r3, r2
 8017672:	e9c0 4300 	strd	r4, r3, [r0]
 8017676:	bd10      	pop	{r4, pc}
 8017678:	2b00      	cmp	r3, #0
 801767a:	bfc4      	itt	gt
 801767c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8017680:	189b      	addgt	r3, r3, r2
 8017682:	e7f6      	b.n	8017672 <div+0x16>

08017684 <quorem>:
 8017684:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017688:	6903      	ldr	r3, [r0, #16]
 801768a:	690c      	ldr	r4, [r1, #16]
 801768c:	42a3      	cmp	r3, r4
 801768e:	4607      	mov	r7, r0
 8017690:	f2c0 8081 	blt.w	8017796 <quorem+0x112>
 8017694:	3c01      	subs	r4, #1
 8017696:	f101 0814 	add.w	r8, r1, #20
 801769a:	f100 0514 	add.w	r5, r0, #20
 801769e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80176a2:	9301      	str	r3, [sp, #4]
 80176a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80176a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80176ac:	3301      	adds	r3, #1
 80176ae:	429a      	cmp	r2, r3
 80176b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80176b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80176b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80176bc:	d331      	bcc.n	8017722 <quorem+0x9e>
 80176be:	f04f 0e00 	mov.w	lr, #0
 80176c2:	4640      	mov	r0, r8
 80176c4:	46ac      	mov	ip, r5
 80176c6:	46f2      	mov	sl, lr
 80176c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80176cc:	b293      	uxth	r3, r2
 80176ce:	fb06 e303 	mla	r3, r6, r3, lr
 80176d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80176d6:	b29b      	uxth	r3, r3
 80176d8:	ebaa 0303 	sub.w	r3, sl, r3
 80176dc:	0c12      	lsrs	r2, r2, #16
 80176de:	f8dc a000 	ldr.w	sl, [ip]
 80176e2:	fb06 e202 	mla	r2, r6, r2, lr
 80176e6:	fa13 f38a 	uxtah	r3, r3, sl
 80176ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80176ee:	fa1f fa82 	uxth.w	sl, r2
 80176f2:	f8dc 2000 	ldr.w	r2, [ip]
 80176f6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80176fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80176fe:	b29b      	uxth	r3, r3
 8017700:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017704:	4581      	cmp	r9, r0
 8017706:	f84c 3b04 	str.w	r3, [ip], #4
 801770a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801770e:	d2db      	bcs.n	80176c8 <quorem+0x44>
 8017710:	f855 300b 	ldr.w	r3, [r5, fp]
 8017714:	b92b      	cbnz	r3, 8017722 <quorem+0x9e>
 8017716:	9b01      	ldr	r3, [sp, #4]
 8017718:	3b04      	subs	r3, #4
 801771a:	429d      	cmp	r5, r3
 801771c:	461a      	mov	r2, r3
 801771e:	d32e      	bcc.n	801777e <quorem+0xfa>
 8017720:	613c      	str	r4, [r7, #16]
 8017722:	4638      	mov	r0, r7
 8017724:	f001 fec2 	bl	80194ac <__mcmp>
 8017728:	2800      	cmp	r0, #0
 801772a:	db24      	blt.n	8017776 <quorem+0xf2>
 801772c:	3601      	adds	r6, #1
 801772e:	4628      	mov	r0, r5
 8017730:	f04f 0c00 	mov.w	ip, #0
 8017734:	f858 2b04 	ldr.w	r2, [r8], #4
 8017738:	f8d0 e000 	ldr.w	lr, [r0]
 801773c:	b293      	uxth	r3, r2
 801773e:	ebac 0303 	sub.w	r3, ip, r3
 8017742:	0c12      	lsrs	r2, r2, #16
 8017744:	fa13 f38e 	uxtah	r3, r3, lr
 8017748:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801774c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017750:	b29b      	uxth	r3, r3
 8017752:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017756:	45c1      	cmp	r9, r8
 8017758:	f840 3b04 	str.w	r3, [r0], #4
 801775c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017760:	d2e8      	bcs.n	8017734 <quorem+0xb0>
 8017762:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017766:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801776a:	b922      	cbnz	r2, 8017776 <quorem+0xf2>
 801776c:	3b04      	subs	r3, #4
 801776e:	429d      	cmp	r5, r3
 8017770:	461a      	mov	r2, r3
 8017772:	d30a      	bcc.n	801778a <quorem+0x106>
 8017774:	613c      	str	r4, [r7, #16]
 8017776:	4630      	mov	r0, r6
 8017778:	b003      	add	sp, #12
 801777a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801777e:	6812      	ldr	r2, [r2, #0]
 8017780:	3b04      	subs	r3, #4
 8017782:	2a00      	cmp	r2, #0
 8017784:	d1cc      	bne.n	8017720 <quorem+0x9c>
 8017786:	3c01      	subs	r4, #1
 8017788:	e7c7      	b.n	801771a <quorem+0x96>
 801778a:	6812      	ldr	r2, [r2, #0]
 801778c:	3b04      	subs	r3, #4
 801778e:	2a00      	cmp	r2, #0
 8017790:	d1f0      	bne.n	8017774 <quorem+0xf0>
 8017792:	3c01      	subs	r4, #1
 8017794:	e7eb      	b.n	801776e <quorem+0xea>
 8017796:	2000      	movs	r0, #0
 8017798:	e7ee      	b.n	8017778 <quorem+0xf4>
 801779a:	0000      	movs	r0, r0
 801779c:	0000      	movs	r0, r0
	...

080177a0 <_dtoa_r>:
 80177a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177a4:	ed2d 8b02 	vpush	{d8}
 80177a8:	ec57 6b10 	vmov	r6, r7, d0
 80177ac:	b095      	sub	sp, #84	; 0x54
 80177ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80177b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80177b4:	9105      	str	r1, [sp, #20]
 80177b6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80177ba:	4604      	mov	r4, r0
 80177bc:	9209      	str	r2, [sp, #36]	; 0x24
 80177be:	930f      	str	r3, [sp, #60]	; 0x3c
 80177c0:	b975      	cbnz	r5, 80177e0 <_dtoa_r+0x40>
 80177c2:	2010      	movs	r0, #16
 80177c4:	f7fd f888 	bl	80148d8 <malloc>
 80177c8:	4602      	mov	r2, r0
 80177ca:	6260      	str	r0, [r4, #36]	; 0x24
 80177cc:	b920      	cbnz	r0, 80177d8 <_dtoa_r+0x38>
 80177ce:	4bb2      	ldr	r3, [pc, #712]	; (8017a98 <_dtoa_r+0x2f8>)
 80177d0:	21ea      	movs	r1, #234	; 0xea
 80177d2:	48b2      	ldr	r0, [pc, #712]	; (8017a9c <_dtoa_r+0x2fc>)
 80177d4:	f7ff ff14 	bl	8017600 <__assert_func>
 80177d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80177dc:	6005      	str	r5, [r0, #0]
 80177de:	60c5      	str	r5, [r0, #12]
 80177e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80177e2:	6819      	ldr	r1, [r3, #0]
 80177e4:	b151      	cbz	r1, 80177fc <_dtoa_r+0x5c>
 80177e6:	685a      	ldr	r2, [r3, #4]
 80177e8:	604a      	str	r2, [r1, #4]
 80177ea:	2301      	movs	r3, #1
 80177ec:	4093      	lsls	r3, r2
 80177ee:	608b      	str	r3, [r1, #8]
 80177f0:	4620      	mov	r0, r4
 80177f2:	f001 fbd3 	bl	8018f9c <_Bfree>
 80177f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80177f8:	2200      	movs	r2, #0
 80177fa:	601a      	str	r2, [r3, #0]
 80177fc:	1e3b      	subs	r3, r7, #0
 80177fe:	bfb9      	ittee	lt
 8017800:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017804:	9303      	strlt	r3, [sp, #12]
 8017806:	2300      	movge	r3, #0
 8017808:	f8c8 3000 	strge.w	r3, [r8]
 801780c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8017810:	4ba3      	ldr	r3, [pc, #652]	; (8017aa0 <_dtoa_r+0x300>)
 8017812:	bfbc      	itt	lt
 8017814:	2201      	movlt	r2, #1
 8017816:	f8c8 2000 	strlt.w	r2, [r8]
 801781a:	ea33 0309 	bics.w	r3, r3, r9
 801781e:	d11b      	bne.n	8017858 <_dtoa_r+0xb8>
 8017820:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017822:	f242 730f 	movw	r3, #9999	; 0x270f
 8017826:	6013      	str	r3, [r2, #0]
 8017828:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801782c:	4333      	orrs	r3, r6
 801782e:	f000 857a 	beq.w	8018326 <_dtoa_r+0xb86>
 8017832:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017834:	b963      	cbnz	r3, 8017850 <_dtoa_r+0xb0>
 8017836:	4b9b      	ldr	r3, [pc, #620]	; (8017aa4 <_dtoa_r+0x304>)
 8017838:	e024      	b.n	8017884 <_dtoa_r+0xe4>
 801783a:	4b9b      	ldr	r3, [pc, #620]	; (8017aa8 <_dtoa_r+0x308>)
 801783c:	9300      	str	r3, [sp, #0]
 801783e:	3308      	adds	r3, #8
 8017840:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017842:	6013      	str	r3, [r2, #0]
 8017844:	9800      	ldr	r0, [sp, #0]
 8017846:	b015      	add	sp, #84	; 0x54
 8017848:	ecbd 8b02 	vpop	{d8}
 801784c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017850:	4b94      	ldr	r3, [pc, #592]	; (8017aa4 <_dtoa_r+0x304>)
 8017852:	9300      	str	r3, [sp, #0]
 8017854:	3303      	adds	r3, #3
 8017856:	e7f3      	b.n	8017840 <_dtoa_r+0xa0>
 8017858:	ed9d 7b02 	vldr	d7, [sp, #8]
 801785c:	2200      	movs	r2, #0
 801785e:	ec51 0b17 	vmov	r0, r1, d7
 8017862:	2300      	movs	r3, #0
 8017864:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8017868:	f7e9 f94e 	bl	8000b08 <__aeabi_dcmpeq>
 801786c:	4680      	mov	r8, r0
 801786e:	b158      	cbz	r0, 8017888 <_dtoa_r+0xe8>
 8017870:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017872:	2301      	movs	r3, #1
 8017874:	6013      	str	r3, [r2, #0]
 8017876:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017878:	2b00      	cmp	r3, #0
 801787a:	f000 8551 	beq.w	8018320 <_dtoa_r+0xb80>
 801787e:	488b      	ldr	r0, [pc, #556]	; (8017aac <_dtoa_r+0x30c>)
 8017880:	6018      	str	r0, [r3, #0]
 8017882:	1e43      	subs	r3, r0, #1
 8017884:	9300      	str	r3, [sp, #0]
 8017886:	e7dd      	b.n	8017844 <_dtoa_r+0xa4>
 8017888:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801788c:	aa12      	add	r2, sp, #72	; 0x48
 801788e:	a913      	add	r1, sp, #76	; 0x4c
 8017890:	4620      	mov	r0, r4
 8017892:	f001 ff2b 	bl	80196ec <__d2b>
 8017896:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801789a:	4683      	mov	fp, r0
 801789c:	2d00      	cmp	r5, #0
 801789e:	d07c      	beq.n	801799a <_dtoa_r+0x1fa>
 80178a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80178a2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80178a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80178aa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80178ae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80178b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80178b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80178ba:	4b7d      	ldr	r3, [pc, #500]	; (8017ab0 <_dtoa_r+0x310>)
 80178bc:	2200      	movs	r2, #0
 80178be:	4630      	mov	r0, r6
 80178c0:	4639      	mov	r1, r7
 80178c2:	f7e8 fd01 	bl	80002c8 <__aeabi_dsub>
 80178c6:	a36e      	add	r3, pc, #440	; (adr r3, 8017a80 <_dtoa_r+0x2e0>)
 80178c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178cc:	f7e8 feb4 	bl	8000638 <__aeabi_dmul>
 80178d0:	a36d      	add	r3, pc, #436	; (adr r3, 8017a88 <_dtoa_r+0x2e8>)
 80178d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178d6:	f7e8 fcf9 	bl	80002cc <__adddf3>
 80178da:	4606      	mov	r6, r0
 80178dc:	4628      	mov	r0, r5
 80178de:	460f      	mov	r7, r1
 80178e0:	f7e8 fe40 	bl	8000564 <__aeabi_i2d>
 80178e4:	a36a      	add	r3, pc, #424	; (adr r3, 8017a90 <_dtoa_r+0x2f0>)
 80178e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178ea:	f7e8 fea5 	bl	8000638 <__aeabi_dmul>
 80178ee:	4602      	mov	r2, r0
 80178f0:	460b      	mov	r3, r1
 80178f2:	4630      	mov	r0, r6
 80178f4:	4639      	mov	r1, r7
 80178f6:	f7e8 fce9 	bl	80002cc <__adddf3>
 80178fa:	4606      	mov	r6, r0
 80178fc:	460f      	mov	r7, r1
 80178fe:	f7e9 f94b 	bl	8000b98 <__aeabi_d2iz>
 8017902:	2200      	movs	r2, #0
 8017904:	4682      	mov	sl, r0
 8017906:	2300      	movs	r3, #0
 8017908:	4630      	mov	r0, r6
 801790a:	4639      	mov	r1, r7
 801790c:	f7e9 f906 	bl	8000b1c <__aeabi_dcmplt>
 8017910:	b148      	cbz	r0, 8017926 <_dtoa_r+0x186>
 8017912:	4650      	mov	r0, sl
 8017914:	f7e8 fe26 	bl	8000564 <__aeabi_i2d>
 8017918:	4632      	mov	r2, r6
 801791a:	463b      	mov	r3, r7
 801791c:	f7e9 f8f4 	bl	8000b08 <__aeabi_dcmpeq>
 8017920:	b908      	cbnz	r0, 8017926 <_dtoa_r+0x186>
 8017922:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017926:	f1ba 0f16 	cmp.w	sl, #22
 801792a:	d854      	bhi.n	80179d6 <_dtoa_r+0x236>
 801792c:	4b61      	ldr	r3, [pc, #388]	; (8017ab4 <_dtoa_r+0x314>)
 801792e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017936:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801793a:	f7e9 f8ef 	bl	8000b1c <__aeabi_dcmplt>
 801793e:	2800      	cmp	r0, #0
 8017940:	d04b      	beq.n	80179da <_dtoa_r+0x23a>
 8017942:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017946:	2300      	movs	r3, #0
 8017948:	930e      	str	r3, [sp, #56]	; 0x38
 801794a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801794c:	1b5d      	subs	r5, r3, r5
 801794e:	1e6b      	subs	r3, r5, #1
 8017950:	9304      	str	r3, [sp, #16]
 8017952:	bf43      	ittte	mi
 8017954:	2300      	movmi	r3, #0
 8017956:	f1c5 0801 	rsbmi	r8, r5, #1
 801795a:	9304      	strmi	r3, [sp, #16]
 801795c:	f04f 0800 	movpl.w	r8, #0
 8017960:	f1ba 0f00 	cmp.w	sl, #0
 8017964:	db3b      	blt.n	80179de <_dtoa_r+0x23e>
 8017966:	9b04      	ldr	r3, [sp, #16]
 8017968:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801796c:	4453      	add	r3, sl
 801796e:	9304      	str	r3, [sp, #16]
 8017970:	2300      	movs	r3, #0
 8017972:	9306      	str	r3, [sp, #24]
 8017974:	9b05      	ldr	r3, [sp, #20]
 8017976:	2b09      	cmp	r3, #9
 8017978:	d869      	bhi.n	8017a4e <_dtoa_r+0x2ae>
 801797a:	2b05      	cmp	r3, #5
 801797c:	bfc4      	itt	gt
 801797e:	3b04      	subgt	r3, #4
 8017980:	9305      	strgt	r3, [sp, #20]
 8017982:	9b05      	ldr	r3, [sp, #20]
 8017984:	f1a3 0302 	sub.w	r3, r3, #2
 8017988:	bfcc      	ite	gt
 801798a:	2500      	movgt	r5, #0
 801798c:	2501      	movle	r5, #1
 801798e:	2b03      	cmp	r3, #3
 8017990:	d869      	bhi.n	8017a66 <_dtoa_r+0x2c6>
 8017992:	e8df f003 	tbb	[pc, r3]
 8017996:	4e2c      	.short	0x4e2c
 8017998:	5a4c      	.short	0x5a4c
 801799a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801799e:	441d      	add	r5, r3
 80179a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80179a4:	2b20      	cmp	r3, #32
 80179a6:	bfc1      	itttt	gt
 80179a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80179ac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80179b0:	fa09 f303 	lslgt.w	r3, r9, r3
 80179b4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80179b8:	bfda      	itte	le
 80179ba:	f1c3 0320 	rsble	r3, r3, #32
 80179be:	fa06 f003 	lslle.w	r0, r6, r3
 80179c2:	4318      	orrgt	r0, r3
 80179c4:	f7e8 fdbe 	bl	8000544 <__aeabi_ui2d>
 80179c8:	2301      	movs	r3, #1
 80179ca:	4606      	mov	r6, r0
 80179cc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80179d0:	3d01      	subs	r5, #1
 80179d2:	9310      	str	r3, [sp, #64]	; 0x40
 80179d4:	e771      	b.n	80178ba <_dtoa_r+0x11a>
 80179d6:	2301      	movs	r3, #1
 80179d8:	e7b6      	b.n	8017948 <_dtoa_r+0x1a8>
 80179da:	900e      	str	r0, [sp, #56]	; 0x38
 80179dc:	e7b5      	b.n	801794a <_dtoa_r+0x1aa>
 80179de:	f1ca 0300 	rsb	r3, sl, #0
 80179e2:	9306      	str	r3, [sp, #24]
 80179e4:	2300      	movs	r3, #0
 80179e6:	eba8 080a 	sub.w	r8, r8, sl
 80179ea:	930d      	str	r3, [sp, #52]	; 0x34
 80179ec:	e7c2      	b.n	8017974 <_dtoa_r+0x1d4>
 80179ee:	2300      	movs	r3, #0
 80179f0:	9308      	str	r3, [sp, #32]
 80179f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	dc39      	bgt.n	8017a6c <_dtoa_r+0x2cc>
 80179f8:	f04f 0901 	mov.w	r9, #1
 80179fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8017a00:	464b      	mov	r3, r9
 8017a02:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8017a06:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017a08:	2200      	movs	r2, #0
 8017a0a:	6042      	str	r2, [r0, #4]
 8017a0c:	2204      	movs	r2, #4
 8017a0e:	f102 0614 	add.w	r6, r2, #20
 8017a12:	429e      	cmp	r6, r3
 8017a14:	6841      	ldr	r1, [r0, #4]
 8017a16:	d92f      	bls.n	8017a78 <_dtoa_r+0x2d8>
 8017a18:	4620      	mov	r0, r4
 8017a1a:	f001 fa7f 	bl	8018f1c <_Balloc>
 8017a1e:	9000      	str	r0, [sp, #0]
 8017a20:	2800      	cmp	r0, #0
 8017a22:	d14b      	bne.n	8017abc <_dtoa_r+0x31c>
 8017a24:	4b24      	ldr	r3, [pc, #144]	; (8017ab8 <_dtoa_r+0x318>)
 8017a26:	4602      	mov	r2, r0
 8017a28:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8017a2c:	e6d1      	b.n	80177d2 <_dtoa_r+0x32>
 8017a2e:	2301      	movs	r3, #1
 8017a30:	e7de      	b.n	80179f0 <_dtoa_r+0x250>
 8017a32:	2300      	movs	r3, #0
 8017a34:	9308      	str	r3, [sp, #32]
 8017a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a38:	eb0a 0903 	add.w	r9, sl, r3
 8017a3c:	f109 0301 	add.w	r3, r9, #1
 8017a40:	2b01      	cmp	r3, #1
 8017a42:	9301      	str	r3, [sp, #4]
 8017a44:	bfb8      	it	lt
 8017a46:	2301      	movlt	r3, #1
 8017a48:	e7dd      	b.n	8017a06 <_dtoa_r+0x266>
 8017a4a:	2301      	movs	r3, #1
 8017a4c:	e7f2      	b.n	8017a34 <_dtoa_r+0x294>
 8017a4e:	2501      	movs	r5, #1
 8017a50:	2300      	movs	r3, #0
 8017a52:	9305      	str	r3, [sp, #20]
 8017a54:	9508      	str	r5, [sp, #32]
 8017a56:	f04f 39ff 	mov.w	r9, #4294967295
 8017a5a:	2200      	movs	r2, #0
 8017a5c:	f8cd 9004 	str.w	r9, [sp, #4]
 8017a60:	2312      	movs	r3, #18
 8017a62:	9209      	str	r2, [sp, #36]	; 0x24
 8017a64:	e7cf      	b.n	8017a06 <_dtoa_r+0x266>
 8017a66:	2301      	movs	r3, #1
 8017a68:	9308      	str	r3, [sp, #32]
 8017a6a:	e7f4      	b.n	8017a56 <_dtoa_r+0x2b6>
 8017a6c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8017a70:	f8cd 9004 	str.w	r9, [sp, #4]
 8017a74:	464b      	mov	r3, r9
 8017a76:	e7c6      	b.n	8017a06 <_dtoa_r+0x266>
 8017a78:	3101      	adds	r1, #1
 8017a7a:	6041      	str	r1, [r0, #4]
 8017a7c:	0052      	lsls	r2, r2, #1
 8017a7e:	e7c6      	b.n	8017a0e <_dtoa_r+0x26e>
 8017a80:	636f4361 	.word	0x636f4361
 8017a84:	3fd287a7 	.word	0x3fd287a7
 8017a88:	8b60c8b3 	.word	0x8b60c8b3
 8017a8c:	3fc68a28 	.word	0x3fc68a28
 8017a90:	509f79fb 	.word	0x509f79fb
 8017a94:	3fd34413 	.word	0x3fd34413
 8017a98:	0801c7f0 	.word	0x0801c7f0
 8017a9c:	0801ca96 	.word	0x0801ca96
 8017aa0:	7ff00000 	.word	0x7ff00000
 8017aa4:	0801ca92 	.word	0x0801ca92
 8017aa8:	0801ca89 	.word	0x0801ca89
 8017aac:	0801ccfa 	.word	0x0801ccfa
 8017ab0:	3ff80000 	.word	0x3ff80000
 8017ab4:	0801cc10 	.word	0x0801cc10
 8017ab8:	0801caf5 	.word	0x0801caf5
 8017abc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017abe:	9a00      	ldr	r2, [sp, #0]
 8017ac0:	601a      	str	r2, [r3, #0]
 8017ac2:	9b01      	ldr	r3, [sp, #4]
 8017ac4:	2b0e      	cmp	r3, #14
 8017ac6:	f200 80ad 	bhi.w	8017c24 <_dtoa_r+0x484>
 8017aca:	2d00      	cmp	r5, #0
 8017acc:	f000 80aa 	beq.w	8017c24 <_dtoa_r+0x484>
 8017ad0:	f1ba 0f00 	cmp.w	sl, #0
 8017ad4:	dd36      	ble.n	8017b44 <_dtoa_r+0x3a4>
 8017ad6:	4ac3      	ldr	r2, [pc, #780]	; (8017de4 <_dtoa_r+0x644>)
 8017ad8:	f00a 030f 	and.w	r3, sl, #15
 8017adc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017ae0:	ed93 7b00 	vldr	d7, [r3]
 8017ae4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8017ae8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8017aec:	eeb0 8a47 	vmov.f32	s16, s14
 8017af0:	eef0 8a67 	vmov.f32	s17, s15
 8017af4:	d016      	beq.n	8017b24 <_dtoa_r+0x384>
 8017af6:	4bbc      	ldr	r3, [pc, #752]	; (8017de8 <_dtoa_r+0x648>)
 8017af8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017afc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017b00:	f7e8 fec4 	bl	800088c <__aeabi_ddiv>
 8017b04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017b08:	f007 070f 	and.w	r7, r7, #15
 8017b0c:	2503      	movs	r5, #3
 8017b0e:	4eb6      	ldr	r6, [pc, #728]	; (8017de8 <_dtoa_r+0x648>)
 8017b10:	b957      	cbnz	r7, 8017b28 <_dtoa_r+0x388>
 8017b12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017b16:	ec53 2b18 	vmov	r2, r3, d8
 8017b1a:	f7e8 feb7 	bl	800088c <__aeabi_ddiv>
 8017b1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017b22:	e029      	b.n	8017b78 <_dtoa_r+0x3d8>
 8017b24:	2502      	movs	r5, #2
 8017b26:	e7f2      	b.n	8017b0e <_dtoa_r+0x36e>
 8017b28:	07f9      	lsls	r1, r7, #31
 8017b2a:	d508      	bpl.n	8017b3e <_dtoa_r+0x39e>
 8017b2c:	ec51 0b18 	vmov	r0, r1, d8
 8017b30:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017b34:	f7e8 fd80 	bl	8000638 <__aeabi_dmul>
 8017b38:	ec41 0b18 	vmov	d8, r0, r1
 8017b3c:	3501      	adds	r5, #1
 8017b3e:	107f      	asrs	r7, r7, #1
 8017b40:	3608      	adds	r6, #8
 8017b42:	e7e5      	b.n	8017b10 <_dtoa_r+0x370>
 8017b44:	f000 80a6 	beq.w	8017c94 <_dtoa_r+0x4f4>
 8017b48:	f1ca 0600 	rsb	r6, sl, #0
 8017b4c:	4ba5      	ldr	r3, [pc, #660]	; (8017de4 <_dtoa_r+0x644>)
 8017b4e:	4fa6      	ldr	r7, [pc, #664]	; (8017de8 <_dtoa_r+0x648>)
 8017b50:	f006 020f 	and.w	r2, r6, #15
 8017b54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b5c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017b60:	f7e8 fd6a 	bl	8000638 <__aeabi_dmul>
 8017b64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017b68:	1136      	asrs	r6, r6, #4
 8017b6a:	2300      	movs	r3, #0
 8017b6c:	2502      	movs	r5, #2
 8017b6e:	2e00      	cmp	r6, #0
 8017b70:	f040 8085 	bne.w	8017c7e <_dtoa_r+0x4de>
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d1d2      	bne.n	8017b1e <_dtoa_r+0x37e>
 8017b78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	f000 808c 	beq.w	8017c98 <_dtoa_r+0x4f8>
 8017b80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017b84:	4b99      	ldr	r3, [pc, #612]	; (8017dec <_dtoa_r+0x64c>)
 8017b86:	2200      	movs	r2, #0
 8017b88:	4630      	mov	r0, r6
 8017b8a:	4639      	mov	r1, r7
 8017b8c:	f7e8 ffc6 	bl	8000b1c <__aeabi_dcmplt>
 8017b90:	2800      	cmp	r0, #0
 8017b92:	f000 8081 	beq.w	8017c98 <_dtoa_r+0x4f8>
 8017b96:	9b01      	ldr	r3, [sp, #4]
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d07d      	beq.n	8017c98 <_dtoa_r+0x4f8>
 8017b9c:	f1b9 0f00 	cmp.w	r9, #0
 8017ba0:	dd3c      	ble.n	8017c1c <_dtoa_r+0x47c>
 8017ba2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017ba6:	9307      	str	r3, [sp, #28]
 8017ba8:	2200      	movs	r2, #0
 8017baa:	4b91      	ldr	r3, [pc, #580]	; (8017df0 <_dtoa_r+0x650>)
 8017bac:	4630      	mov	r0, r6
 8017bae:	4639      	mov	r1, r7
 8017bb0:	f7e8 fd42 	bl	8000638 <__aeabi_dmul>
 8017bb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017bb8:	3501      	adds	r5, #1
 8017bba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8017bbe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017bc2:	4628      	mov	r0, r5
 8017bc4:	f7e8 fcce 	bl	8000564 <__aeabi_i2d>
 8017bc8:	4632      	mov	r2, r6
 8017bca:	463b      	mov	r3, r7
 8017bcc:	f7e8 fd34 	bl	8000638 <__aeabi_dmul>
 8017bd0:	4b88      	ldr	r3, [pc, #544]	; (8017df4 <_dtoa_r+0x654>)
 8017bd2:	2200      	movs	r2, #0
 8017bd4:	f7e8 fb7a 	bl	80002cc <__adddf3>
 8017bd8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8017bdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017be0:	9303      	str	r3, [sp, #12]
 8017be2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d15c      	bne.n	8017ca2 <_dtoa_r+0x502>
 8017be8:	4b83      	ldr	r3, [pc, #524]	; (8017df8 <_dtoa_r+0x658>)
 8017bea:	2200      	movs	r2, #0
 8017bec:	4630      	mov	r0, r6
 8017bee:	4639      	mov	r1, r7
 8017bf0:	f7e8 fb6a 	bl	80002c8 <__aeabi_dsub>
 8017bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017bf8:	4606      	mov	r6, r0
 8017bfa:	460f      	mov	r7, r1
 8017bfc:	f7e8 ffac 	bl	8000b58 <__aeabi_dcmpgt>
 8017c00:	2800      	cmp	r0, #0
 8017c02:	f040 8296 	bne.w	8018132 <_dtoa_r+0x992>
 8017c06:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017c0a:	4630      	mov	r0, r6
 8017c0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017c10:	4639      	mov	r1, r7
 8017c12:	f7e8 ff83 	bl	8000b1c <__aeabi_dcmplt>
 8017c16:	2800      	cmp	r0, #0
 8017c18:	f040 8288 	bne.w	801812c <_dtoa_r+0x98c>
 8017c1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017c20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017c24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	f2c0 8158 	blt.w	8017edc <_dtoa_r+0x73c>
 8017c2c:	f1ba 0f0e 	cmp.w	sl, #14
 8017c30:	f300 8154 	bgt.w	8017edc <_dtoa_r+0x73c>
 8017c34:	4b6b      	ldr	r3, [pc, #428]	; (8017de4 <_dtoa_r+0x644>)
 8017c36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017c3a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	f280 80e3 	bge.w	8017e0c <_dtoa_r+0x66c>
 8017c46:	9b01      	ldr	r3, [sp, #4]
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	f300 80df 	bgt.w	8017e0c <_dtoa_r+0x66c>
 8017c4e:	f040 826d 	bne.w	801812c <_dtoa_r+0x98c>
 8017c52:	4b69      	ldr	r3, [pc, #420]	; (8017df8 <_dtoa_r+0x658>)
 8017c54:	2200      	movs	r2, #0
 8017c56:	4640      	mov	r0, r8
 8017c58:	4649      	mov	r1, r9
 8017c5a:	f7e8 fced 	bl	8000638 <__aeabi_dmul>
 8017c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017c62:	f7e8 ff6f 	bl	8000b44 <__aeabi_dcmpge>
 8017c66:	9e01      	ldr	r6, [sp, #4]
 8017c68:	4637      	mov	r7, r6
 8017c6a:	2800      	cmp	r0, #0
 8017c6c:	f040 8243 	bne.w	80180f6 <_dtoa_r+0x956>
 8017c70:	9d00      	ldr	r5, [sp, #0]
 8017c72:	2331      	movs	r3, #49	; 0x31
 8017c74:	f805 3b01 	strb.w	r3, [r5], #1
 8017c78:	f10a 0a01 	add.w	sl, sl, #1
 8017c7c:	e23f      	b.n	80180fe <_dtoa_r+0x95e>
 8017c7e:	07f2      	lsls	r2, r6, #31
 8017c80:	d505      	bpl.n	8017c8e <_dtoa_r+0x4ee>
 8017c82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017c86:	f7e8 fcd7 	bl	8000638 <__aeabi_dmul>
 8017c8a:	3501      	adds	r5, #1
 8017c8c:	2301      	movs	r3, #1
 8017c8e:	1076      	asrs	r6, r6, #1
 8017c90:	3708      	adds	r7, #8
 8017c92:	e76c      	b.n	8017b6e <_dtoa_r+0x3ce>
 8017c94:	2502      	movs	r5, #2
 8017c96:	e76f      	b.n	8017b78 <_dtoa_r+0x3d8>
 8017c98:	9b01      	ldr	r3, [sp, #4]
 8017c9a:	f8cd a01c 	str.w	sl, [sp, #28]
 8017c9e:	930c      	str	r3, [sp, #48]	; 0x30
 8017ca0:	e78d      	b.n	8017bbe <_dtoa_r+0x41e>
 8017ca2:	9900      	ldr	r1, [sp, #0]
 8017ca4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017ca6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017ca8:	4b4e      	ldr	r3, [pc, #312]	; (8017de4 <_dtoa_r+0x644>)
 8017caa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017cae:	4401      	add	r1, r0
 8017cb0:	9102      	str	r1, [sp, #8]
 8017cb2:	9908      	ldr	r1, [sp, #32]
 8017cb4:	eeb0 8a47 	vmov.f32	s16, s14
 8017cb8:	eef0 8a67 	vmov.f32	s17, s15
 8017cbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017cc0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017cc4:	2900      	cmp	r1, #0
 8017cc6:	d045      	beq.n	8017d54 <_dtoa_r+0x5b4>
 8017cc8:	494c      	ldr	r1, [pc, #304]	; (8017dfc <_dtoa_r+0x65c>)
 8017cca:	2000      	movs	r0, #0
 8017ccc:	f7e8 fdde 	bl	800088c <__aeabi_ddiv>
 8017cd0:	ec53 2b18 	vmov	r2, r3, d8
 8017cd4:	f7e8 faf8 	bl	80002c8 <__aeabi_dsub>
 8017cd8:	9d00      	ldr	r5, [sp, #0]
 8017cda:	ec41 0b18 	vmov	d8, r0, r1
 8017cde:	4639      	mov	r1, r7
 8017ce0:	4630      	mov	r0, r6
 8017ce2:	f7e8 ff59 	bl	8000b98 <__aeabi_d2iz>
 8017ce6:	900c      	str	r0, [sp, #48]	; 0x30
 8017ce8:	f7e8 fc3c 	bl	8000564 <__aeabi_i2d>
 8017cec:	4602      	mov	r2, r0
 8017cee:	460b      	mov	r3, r1
 8017cf0:	4630      	mov	r0, r6
 8017cf2:	4639      	mov	r1, r7
 8017cf4:	f7e8 fae8 	bl	80002c8 <__aeabi_dsub>
 8017cf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017cfa:	3330      	adds	r3, #48	; 0x30
 8017cfc:	f805 3b01 	strb.w	r3, [r5], #1
 8017d00:	ec53 2b18 	vmov	r2, r3, d8
 8017d04:	4606      	mov	r6, r0
 8017d06:	460f      	mov	r7, r1
 8017d08:	f7e8 ff08 	bl	8000b1c <__aeabi_dcmplt>
 8017d0c:	2800      	cmp	r0, #0
 8017d0e:	d165      	bne.n	8017ddc <_dtoa_r+0x63c>
 8017d10:	4632      	mov	r2, r6
 8017d12:	463b      	mov	r3, r7
 8017d14:	4935      	ldr	r1, [pc, #212]	; (8017dec <_dtoa_r+0x64c>)
 8017d16:	2000      	movs	r0, #0
 8017d18:	f7e8 fad6 	bl	80002c8 <__aeabi_dsub>
 8017d1c:	ec53 2b18 	vmov	r2, r3, d8
 8017d20:	f7e8 fefc 	bl	8000b1c <__aeabi_dcmplt>
 8017d24:	2800      	cmp	r0, #0
 8017d26:	f040 80b9 	bne.w	8017e9c <_dtoa_r+0x6fc>
 8017d2a:	9b02      	ldr	r3, [sp, #8]
 8017d2c:	429d      	cmp	r5, r3
 8017d2e:	f43f af75 	beq.w	8017c1c <_dtoa_r+0x47c>
 8017d32:	4b2f      	ldr	r3, [pc, #188]	; (8017df0 <_dtoa_r+0x650>)
 8017d34:	ec51 0b18 	vmov	r0, r1, d8
 8017d38:	2200      	movs	r2, #0
 8017d3a:	f7e8 fc7d 	bl	8000638 <__aeabi_dmul>
 8017d3e:	4b2c      	ldr	r3, [pc, #176]	; (8017df0 <_dtoa_r+0x650>)
 8017d40:	ec41 0b18 	vmov	d8, r0, r1
 8017d44:	2200      	movs	r2, #0
 8017d46:	4630      	mov	r0, r6
 8017d48:	4639      	mov	r1, r7
 8017d4a:	f7e8 fc75 	bl	8000638 <__aeabi_dmul>
 8017d4e:	4606      	mov	r6, r0
 8017d50:	460f      	mov	r7, r1
 8017d52:	e7c4      	b.n	8017cde <_dtoa_r+0x53e>
 8017d54:	ec51 0b17 	vmov	r0, r1, d7
 8017d58:	f7e8 fc6e 	bl	8000638 <__aeabi_dmul>
 8017d5c:	9b02      	ldr	r3, [sp, #8]
 8017d5e:	9d00      	ldr	r5, [sp, #0]
 8017d60:	930c      	str	r3, [sp, #48]	; 0x30
 8017d62:	ec41 0b18 	vmov	d8, r0, r1
 8017d66:	4639      	mov	r1, r7
 8017d68:	4630      	mov	r0, r6
 8017d6a:	f7e8 ff15 	bl	8000b98 <__aeabi_d2iz>
 8017d6e:	9011      	str	r0, [sp, #68]	; 0x44
 8017d70:	f7e8 fbf8 	bl	8000564 <__aeabi_i2d>
 8017d74:	4602      	mov	r2, r0
 8017d76:	460b      	mov	r3, r1
 8017d78:	4630      	mov	r0, r6
 8017d7a:	4639      	mov	r1, r7
 8017d7c:	f7e8 faa4 	bl	80002c8 <__aeabi_dsub>
 8017d80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017d82:	3330      	adds	r3, #48	; 0x30
 8017d84:	f805 3b01 	strb.w	r3, [r5], #1
 8017d88:	9b02      	ldr	r3, [sp, #8]
 8017d8a:	429d      	cmp	r5, r3
 8017d8c:	4606      	mov	r6, r0
 8017d8e:	460f      	mov	r7, r1
 8017d90:	f04f 0200 	mov.w	r2, #0
 8017d94:	d134      	bne.n	8017e00 <_dtoa_r+0x660>
 8017d96:	4b19      	ldr	r3, [pc, #100]	; (8017dfc <_dtoa_r+0x65c>)
 8017d98:	ec51 0b18 	vmov	r0, r1, d8
 8017d9c:	f7e8 fa96 	bl	80002cc <__adddf3>
 8017da0:	4602      	mov	r2, r0
 8017da2:	460b      	mov	r3, r1
 8017da4:	4630      	mov	r0, r6
 8017da6:	4639      	mov	r1, r7
 8017da8:	f7e8 fed6 	bl	8000b58 <__aeabi_dcmpgt>
 8017dac:	2800      	cmp	r0, #0
 8017dae:	d175      	bne.n	8017e9c <_dtoa_r+0x6fc>
 8017db0:	ec53 2b18 	vmov	r2, r3, d8
 8017db4:	4911      	ldr	r1, [pc, #68]	; (8017dfc <_dtoa_r+0x65c>)
 8017db6:	2000      	movs	r0, #0
 8017db8:	f7e8 fa86 	bl	80002c8 <__aeabi_dsub>
 8017dbc:	4602      	mov	r2, r0
 8017dbe:	460b      	mov	r3, r1
 8017dc0:	4630      	mov	r0, r6
 8017dc2:	4639      	mov	r1, r7
 8017dc4:	f7e8 feaa 	bl	8000b1c <__aeabi_dcmplt>
 8017dc8:	2800      	cmp	r0, #0
 8017dca:	f43f af27 	beq.w	8017c1c <_dtoa_r+0x47c>
 8017dce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017dd0:	1e6b      	subs	r3, r5, #1
 8017dd2:	930c      	str	r3, [sp, #48]	; 0x30
 8017dd4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017dd8:	2b30      	cmp	r3, #48	; 0x30
 8017dda:	d0f8      	beq.n	8017dce <_dtoa_r+0x62e>
 8017ddc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8017de0:	e04a      	b.n	8017e78 <_dtoa_r+0x6d8>
 8017de2:	bf00      	nop
 8017de4:	0801cc10 	.word	0x0801cc10
 8017de8:	0801cbe8 	.word	0x0801cbe8
 8017dec:	3ff00000 	.word	0x3ff00000
 8017df0:	40240000 	.word	0x40240000
 8017df4:	401c0000 	.word	0x401c0000
 8017df8:	40140000 	.word	0x40140000
 8017dfc:	3fe00000 	.word	0x3fe00000
 8017e00:	4baf      	ldr	r3, [pc, #700]	; (80180c0 <_dtoa_r+0x920>)
 8017e02:	f7e8 fc19 	bl	8000638 <__aeabi_dmul>
 8017e06:	4606      	mov	r6, r0
 8017e08:	460f      	mov	r7, r1
 8017e0a:	e7ac      	b.n	8017d66 <_dtoa_r+0x5c6>
 8017e0c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017e10:	9d00      	ldr	r5, [sp, #0]
 8017e12:	4642      	mov	r2, r8
 8017e14:	464b      	mov	r3, r9
 8017e16:	4630      	mov	r0, r6
 8017e18:	4639      	mov	r1, r7
 8017e1a:	f7e8 fd37 	bl	800088c <__aeabi_ddiv>
 8017e1e:	f7e8 febb 	bl	8000b98 <__aeabi_d2iz>
 8017e22:	9002      	str	r0, [sp, #8]
 8017e24:	f7e8 fb9e 	bl	8000564 <__aeabi_i2d>
 8017e28:	4642      	mov	r2, r8
 8017e2a:	464b      	mov	r3, r9
 8017e2c:	f7e8 fc04 	bl	8000638 <__aeabi_dmul>
 8017e30:	4602      	mov	r2, r0
 8017e32:	460b      	mov	r3, r1
 8017e34:	4630      	mov	r0, r6
 8017e36:	4639      	mov	r1, r7
 8017e38:	f7e8 fa46 	bl	80002c8 <__aeabi_dsub>
 8017e3c:	9e02      	ldr	r6, [sp, #8]
 8017e3e:	9f01      	ldr	r7, [sp, #4]
 8017e40:	3630      	adds	r6, #48	; 0x30
 8017e42:	f805 6b01 	strb.w	r6, [r5], #1
 8017e46:	9e00      	ldr	r6, [sp, #0]
 8017e48:	1bae      	subs	r6, r5, r6
 8017e4a:	42b7      	cmp	r7, r6
 8017e4c:	4602      	mov	r2, r0
 8017e4e:	460b      	mov	r3, r1
 8017e50:	d137      	bne.n	8017ec2 <_dtoa_r+0x722>
 8017e52:	f7e8 fa3b 	bl	80002cc <__adddf3>
 8017e56:	4642      	mov	r2, r8
 8017e58:	464b      	mov	r3, r9
 8017e5a:	4606      	mov	r6, r0
 8017e5c:	460f      	mov	r7, r1
 8017e5e:	f7e8 fe7b 	bl	8000b58 <__aeabi_dcmpgt>
 8017e62:	b9c8      	cbnz	r0, 8017e98 <_dtoa_r+0x6f8>
 8017e64:	4642      	mov	r2, r8
 8017e66:	464b      	mov	r3, r9
 8017e68:	4630      	mov	r0, r6
 8017e6a:	4639      	mov	r1, r7
 8017e6c:	f7e8 fe4c 	bl	8000b08 <__aeabi_dcmpeq>
 8017e70:	b110      	cbz	r0, 8017e78 <_dtoa_r+0x6d8>
 8017e72:	9b02      	ldr	r3, [sp, #8]
 8017e74:	07d9      	lsls	r1, r3, #31
 8017e76:	d40f      	bmi.n	8017e98 <_dtoa_r+0x6f8>
 8017e78:	4620      	mov	r0, r4
 8017e7a:	4659      	mov	r1, fp
 8017e7c:	f001 f88e 	bl	8018f9c <_Bfree>
 8017e80:	2300      	movs	r3, #0
 8017e82:	702b      	strb	r3, [r5, #0]
 8017e84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017e86:	f10a 0001 	add.w	r0, sl, #1
 8017e8a:	6018      	str	r0, [r3, #0]
 8017e8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	f43f acd8 	beq.w	8017844 <_dtoa_r+0xa4>
 8017e94:	601d      	str	r5, [r3, #0]
 8017e96:	e4d5      	b.n	8017844 <_dtoa_r+0xa4>
 8017e98:	f8cd a01c 	str.w	sl, [sp, #28]
 8017e9c:	462b      	mov	r3, r5
 8017e9e:	461d      	mov	r5, r3
 8017ea0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017ea4:	2a39      	cmp	r2, #57	; 0x39
 8017ea6:	d108      	bne.n	8017eba <_dtoa_r+0x71a>
 8017ea8:	9a00      	ldr	r2, [sp, #0]
 8017eaa:	429a      	cmp	r2, r3
 8017eac:	d1f7      	bne.n	8017e9e <_dtoa_r+0x6fe>
 8017eae:	9a07      	ldr	r2, [sp, #28]
 8017eb0:	9900      	ldr	r1, [sp, #0]
 8017eb2:	3201      	adds	r2, #1
 8017eb4:	9207      	str	r2, [sp, #28]
 8017eb6:	2230      	movs	r2, #48	; 0x30
 8017eb8:	700a      	strb	r2, [r1, #0]
 8017eba:	781a      	ldrb	r2, [r3, #0]
 8017ebc:	3201      	adds	r2, #1
 8017ebe:	701a      	strb	r2, [r3, #0]
 8017ec0:	e78c      	b.n	8017ddc <_dtoa_r+0x63c>
 8017ec2:	4b7f      	ldr	r3, [pc, #508]	; (80180c0 <_dtoa_r+0x920>)
 8017ec4:	2200      	movs	r2, #0
 8017ec6:	f7e8 fbb7 	bl	8000638 <__aeabi_dmul>
 8017eca:	2200      	movs	r2, #0
 8017ecc:	2300      	movs	r3, #0
 8017ece:	4606      	mov	r6, r0
 8017ed0:	460f      	mov	r7, r1
 8017ed2:	f7e8 fe19 	bl	8000b08 <__aeabi_dcmpeq>
 8017ed6:	2800      	cmp	r0, #0
 8017ed8:	d09b      	beq.n	8017e12 <_dtoa_r+0x672>
 8017eda:	e7cd      	b.n	8017e78 <_dtoa_r+0x6d8>
 8017edc:	9a08      	ldr	r2, [sp, #32]
 8017ede:	2a00      	cmp	r2, #0
 8017ee0:	f000 80c4 	beq.w	801806c <_dtoa_r+0x8cc>
 8017ee4:	9a05      	ldr	r2, [sp, #20]
 8017ee6:	2a01      	cmp	r2, #1
 8017ee8:	f300 80a8 	bgt.w	801803c <_dtoa_r+0x89c>
 8017eec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017eee:	2a00      	cmp	r2, #0
 8017ef0:	f000 80a0 	beq.w	8018034 <_dtoa_r+0x894>
 8017ef4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017ef8:	9e06      	ldr	r6, [sp, #24]
 8017efa:	4645      	mov	r5, r8
 8017efc:	9a04      	ldr	r2, [sp, #16]
 8017efe:	2101      	movs	r1, #1
 8017f00:	441a      	add	r2, r3
 8017f02:	4620      	mov	r0, r4
 8017f04:	4498      	add	r8, r3
 8017f06:	9204      	str	r2, [sp, #16]
 8017f08:	f001 f94e 	bl	80191a8 <__i2b>
 8017f0c:	4607      	mov	r7, r0
 8017f0e:	2d00      	cmp	r5, #0
 8017f10:	dd0b      	ble.n	8017f2a <_dtoa_r+0x78a>
 8017f12:	9b04      	ldr	r3, [sp, #16]
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	dd08      	ble.n	8017f2a <_dtoa_r+0x78a>
 8017f18:	42ab      	cmp	r3, r5
 8017f1a:	9a04      	ldr	r2, [sp, #16]
 8017f1c:	bfa8      	it	ge
 8017f1e:	462b      	movge	r3, r5
 8017f20:	eba8 0803 	sub.w	r8, r8, r3
 8017f24:	1aed      	subs	r5, r5, r3
 8017f26:	1ad3      	subs	r3, r2, r3
 8017f28:	9304      	str	r3, [sp, #16]
 8017f2a:	9b06      	ldr	r3, [sp, #24]
 8017f2c:	b1fb      	cbz	r3, 8017f6e <_dtoa_r+0x7ce>
 8017f2e:	9b08      	ldr	r3, [sp, #32]
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	f000 809f 	beq.w	8018074 <_dtoa_r+0x8d4>
 8017f36:	2e00      	cmp	r6, #0
 8017f38:	dd11      	ble.n	8017f5e <_dtoa_r+0x7be>
 8017f3a:	4639      	mov	r1, r7
 8017f3c:	4632      	mov	r2, r6
 8017f3e:	4620      	mov	r0, r4
 8017f40:	f001 f9ee 	bl	8019320 <__pow5mult>
 8017f44:	465a      	mov	r2, fp
 8017f46:	4601      	mov	r1, r0
 8017f48:	4607      	mov	r7, r0
 8017f4a:	4620      	mov	r0, r4
 8017f4c:	f001 f942 	bl	80191d4 <__multiply>
 8017f50:	4659      	mov	r1, fp
 8017f52:	9007      	str	r0, [sp, #28]
 8017f54:	4620      	mov	r0, r4
 8017f56:	f001 f821 	bl	8018f9c <_Bfree>
 8017f5a:	9b07      	ldr	r3, [sp, #28]
 8017f5c:	469b      	mov	fp, r3
 8017f5e:	9b06      	ldr	r3, [sp, #24]
 8017f60:	1b9a      	subs	r2, r3, r6
 8017f62:	d004      	beq.n	8017f6e <_dtoa_r+0x7ce>
 8017f64:	4659      	mov	r1, fp
 8017f66:	4620      	mov	r0, r4
 8017f68:	f001 f9da 	bl	8019320 <__pow5mult>
 8017f6c:	4683      	mov	fp, r0
 8017f6e:	2101      	movs	r1, #1
 8017f70:	4620      	mov	r0, r4
 8017f72:	f001 f919 	bl	80191a8 <__i2b>
 8017f76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	4606      	mov	r6, r0
 8017f7c:	dd7c      	ble.n	8018078 <_dtoa_r+0x8d8>
 8017f7e:	461a      	mov	r2, r3
 8017f80:	4601      	mov	r1, r0
 8017f82:	4620      	mov	r0, r4
 8017f84:	f001 f9cc 	bl	8019320 <__pow5mult>
 8017f88:	9b05      	ldr	r3, [sp, #20]
 8017f8a:	2b01      	cmp	r3, #1
 8017f8c:	4606      	mov	r6, r0
 8017f8e:	dd76      	ble.n	801807e <_dtoa_r+0x8de>
 8017f90:	2300      	movs	r3, #0
 8017f92:	9306      	str	r3, [sp, #24]
 8017f94:	6933      	ldr	r3, [r6, #16]
 8017f96:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017f9a:	6918      	ldr	r0, [r3, #16]
 8017f9c:	f001 f8b4 	bl	8019108 <__hi0bits>
 8017fa0:	f1c0 0020 	rsb	r0, r0, #32
 8017fa4:	9b04      	ldr	r3, [sp, #16]
 8017fa6:	4418      	add	r0, r3
 8017fa8:	f010 001f 	ands.w	r0, r0, #31
 8017fac:	f000 8086 	beq.w	80180bc <_dtoa_r+0x91c>
 8017fb0:	f1c0 0320 	rsb	r3, r0, #32
 8017fb4:	2b04      	cmp	r3, #4
 8017fb6:	dd7f      	ble.n	80180b8 <_dtoa_r+0x918>
 8017fb8:	f1c0 001c 	rsb	r0, r0, #28
 8017fbc:	9b04      	ldr	r3, [sp, #16]
 8017fbe:	4403      	add	r3, r0
 8017fc0:	4480      	add	r8, r0
 8017fc2:	4405      	add	r5, r0
 8017fc4:	9304      	str	r3, [sp, #16]
 8017fc6:	f1b8 0f00 	cmp.w	r8, #0
 8017fca:	dd05      	ble.n	8017fd8 <_dtoa_r+0x838>
 8017fcc:	4659      	mov	r1, fp
 8017fce:	4642      	mov	r2, r8
 8017fd0:	4620      	mov	r0, r4
 8017fd2:	f001 f9ff 	bl	80193d4 <__lshift>
 8017fd6:	4683      	mov	fp, r0
 8017fd8:	9b04      	ldr	r3, [sp, #16]
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	dd05      	ble.n	8017fea <_dtoa_r+0x84a>
 8017fde:	4631      	mov	r1, r6
 8017fe0:	461a      	mov	r2, r3
 8017fe2:	4620      	mov	r0, r4
 8017fe4:	f001 f9f6 	bl	80193d4 <__lshift>
 8017fe8:	4606      	mov	r6, r0
 8017fea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d069      	beq.n	80180c4 <_dtoa_r+0x924>
 8017ff0:	4631      	mov	r1, r6
 8017ff2:	4658      	mov	r0, fp
 8017ff4:	f001 fa5a 	bl	80194ac <__mcmp>
 8017ff8:	2800      	cmp	r0, #0
 8017ffa:	da63      	bge.n	80180c4 <_dtoa_r+0x924>
 8017ffc:	2300      	movs	r3, #0
 8017ffe:	4659      	mov	r1, fp
 8018000:	220a      	movs	r2, #10
 8018002:	4620      	mov	r0, r4
 8018004:	f000 ffec 	bl	8018fe0 <__multadd>
 8018008:	9b08      	ldr	r3, [sp, #32]
 801800a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801800e:	4683      	mov	fp, r0
 8018010:	2b00      	cmp	r3, #0
 8018012:	f000 818f 	beq.w	8018334 <_dtoa_r+0xb94>
 8018016:	4639      	mov	r1, r7
 8018018:	2300      	movs	r3, #0
 801801a:	220a      	movs	r2, #10
 801801c:	4620      	mov	r0, r4
 801801e:	f000 ffdf 	bl	8018fe0 <__multadd>
 8018022:	f1b9 0f00 	cmp.w	r9, #0
 8018026:	4607      	mov	r7, r0
 8018028:	f300 808e 	bgt.w	8018148 <_dtoa_r+0x9a8>
 801802c:	9b05      	ldr	r3, [sp, #20]
 801802e:	2b02      	cmp	r3, #2
 8018030:	dc50      	bgt.n	80180d4 <_dtoa_r+0x934>
 8018032:	e089      	b.n	8018148 <_dtoa_r+0x9a8>
 8018034:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018036:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801803a:	e75d      	b.n	8017ef8 <_dtoa_r+0x758>
 801803c:	9b01      	ldr	r3, [sp, #4]
 801803e:	1e5e      	subs	r6, r3, #1
 8018040:	9b06      	ldr	r3, [sp, #24]
 8018042:	42b3      	cmp	r3, r6
 8018044:	bfbf      	itttt	lt
 8018046:	9b06      	ldrlt	r3, [sp, #24]
 8018048:	9606      	strlt	r6, [sp, #24]
 801804a:	1af2      	sublt	r2, r6, r3
 801804c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801804e:	bfb6      	itet	lt
 8018050:	189b      	addlt	r3, r3, r2
 8018052:	1b9e      	subge	r6, r3, r6
 8018054:	930d      	strlt	r3, [sp, #52]	; 0x34
 8018056:	9b01      	ldr	r3, [sp, #4]
 8018058:	bfb8      	it	lt
 801805a:	2600      	movlt	r6, #0
 801805c:	2b00      	cmp	r3, #0
 801805e:	bfb5      	itete	lt
 8018060:	eba8 0503 	sublt.w	r5, r8, r3
 8018064:	9b01      	ldrge	r3, [sp, #4]
 8018066:	2300      	movlt	r3, #0
 8018068:	4645      	movge	r5, r8
 801806a:	e747      	b.n	8017efc <_dtoa_r+0x75c>
 801806c:	9e06      	ldr	r6, [sp, #24]
 801806e:	9f08      	ldr	r7, [sp, #32]
 8018070:	4645      	mov	r5, r8
 8018072:	e74c      	b.n	8017f0e <_dtoa_r+0x76e>
 8018074:	9a06      	ldr	r2, [sp, #24]
 8018076:	e775      	b.n	8017f64 <_dtoa_r+0x7c4>
 8018078:	9b05      	ldr	r3, [sp, #20]
 801807a:	2b01      	cmp	r3, #1
 801807c:	dc18      	bgt.n	80180b0 <_dtoa_r+0x910>
 801807e:	9b02      	ldr	r3, [sp, #8]
 8018080:	b9b3      	cbnz	r3, 80180b0 <_dtoa_r+0x910>
 8018082:	9b03      	ldr	r3, [sp, #12]
 8018084:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018088:	b9a3      	cbnz	r3, 80180b4 <_dtoa_r+0x914>
 801808a:	9b03      	ldr	r3, [sp, #12]
 801808c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018090:	0d1b      	lsrs	r3, r3, #20
 8018092:	051b      	lsls	r3, r3, #20
 8018094:	b12b      	cbz	r3, 80180a2 <_dtoa_r+0x902>
 8018096:	9b04      	ldr	r3, [sp, #16]
 8018098:	3301      	adds	r3, #1
 801809a:	9304      	str	r3, [sp, #16]
 801809c:	f108 0801 	add.w	r8, r8, #1
 80180a0:	2301      	movs	r3, #1
 80180a2:	9306      	str	r3, [sp, #24]
 80180a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	f47f af74 	bne.w	8017f94 <_dtoa_r+0x7f4>
 80180ac:	2001      	movs	r0, #1
 80180ae:	e779      	b.n	8017fa4 <_dtoa_r+0x804>
 80180b0:	2300      	movs	r3, #0
 80180b2:	e7f6      	b.n	80180a2 <_dtoa_r+0x902>
 80180b4:	9b02      	ldr	r3, [sp, #8]
 80180b6:	e7f4      	b.n	80180a2 <_dtoa_r+0x902>
 80180b8:	d085      	beq.n	8017fc6 <_dtoa_r+0x826>
 80180ba:	4618      	mov	r0, r3
 80180bc:	301c      	adds	r0, #28
 80180be:	e77d      	b.n	8017fbc <_dtoa_r+0x81c>
 80180c0:	40240000 	.word	0x40240000
 80180c4:	9b01      	ldr	r3, [sp, #4]
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	dc38      	bgt.n	801813c <_dtoa_r+0x99c>
 80180ca:	9b05      	ldr	r3, [sp, #20]
 80180cc:	2b02      	cmp	r3, #2
 80180ce:	dd35      	ble.n	801813c <_dtoa_r+0x99c>
 80180d0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80180d4:	f1b9 0f00 	cmp.w	r9, #0
 80180d8:	d10d      	bne.n	80180f6 <_dtoa_r+0x956>
 80180da:	4631      	mov	r1, r6
 80180dc:	464b      	mov	r3, r9
 80180de:	2205      	movs	r2, #5
 80180e0:	4620      	mov	r0, r4
 80180e2:	f000 ff7d 	bl	8018fe0 <__multadd>
 80180e6:	4601      	mov	r1, r0
 80180e8:	4606      	mov	r6, r0
 80180ea:	4658      	mov	r0, fp
 80180ec:	f001 f9de 	bl	80194ac <__mcmp>
 80180f0:	2800      	cmp	r0, #0
 80180f2:	f73f adbd 	bgt.w	8017c70 <_dtoa_r+0x4d0>
 80180f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180f8:	9d00      	ldr	r5, [sp, #0]
 80180fa:	ea6f 0a03 	mvn.w	sl, r3
 80180fe:	f04f 0800 	mov.w	r8, #0
 8018102:	4631      	mov	r1, r6
 8018104:	4620      	mov	r0, r4
 8018106:	f000 ff49 	bl	8018f9c <_Bfree>
 801810a:	2f00      	cmp	r7, #0
 801810c:	f43f aeb4 	beq.w	8017e78 <_dtoa_r+0x6d8>
 8018110:	f1b8 0f00 	cmp.w	r8, #0
 8018114:	d005      	beq.n	8018122 <_dtoa_r+0x982>
 8018116:	45b8      	cmp	r8, r7
 8018118:	d003      	beq.n	8018122 <_dtoa_r+0x982>
 801811a:	4641      	mov	r1, r8
 801811c:	4620      	mov	r0, r4
 801811e:	f000 ff3d 	bl	8018f9c <_Bfree>
 8018122:	4639      	mov	r1, r7
 8018124:	4620      	mov	r0, r4
 8018126:	f000 ff39 	bl	8018f9c <_Bfree>
 801812a:	e6a5      	b.n	8017e78 <_dtoa_r+0x6d8>
 801812c:	2600      	movs	r6, #0
 801812e:	4637      	mov	r7, r6
 8018130:	e7e1      	b.n	80180f6 <_dtoa_r+0x956>
 8018132:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018134:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018138:	4637      	mov	r7, r6
 801813a:	e599      	b.n	8017c70 <_dtoa_r+0x4d0>
 801813c:	9b08      	ldr	r3, [sp, #32]
 801813e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018142:	2b00      	cmp	r3, #0
 8018144:	f000 80fd 	beq.w	8018342 <_dtoa_r+0xba2>
 8018148:	2d00      	cmp	r5, #0
 801814a:	dd05      	ble.n	8018158 <_dtoa_r+0x9b8>
 801814c:	4639      	mov	r1, r7
 801814e:	462a      	mov	r2, r5
 8018150:	4620      	mov	r0, r4
 8018152:	f001 f93f 	bl	80193d4 <__lshift>
 8018156:	4607      	mov	r7, r0
 8018158:	9b06      	ldr	r3, [sp, #24]
 801815a:	2b00      	cmp	r3, #0
 801815c:	d05c      	beq.n	8018218 <_dtoa_r+0xa78>
 801815e:	6879      	ldr	r1, [r7, #4]
 8018160:	4620      	mov	r0, r4
 8018162:	f000 fedb 	bl	8018f1c <_Balloc>
 8018166:	4605      	mov	r5, r0
 8018168:	b928      	cbnz	r0, 8018176 <_dtoa_r+0x9d6>
 801816a:	4b80      	ldr	r3, [pc, #512]	; (801836c <_dtoa_r+0xbcc>)
 801816c:	4602      	mov	r2, r0
 801816e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8018172:	f7ff bb2e 	b.w	80177d2 <_dtoa_r+0x32>
 8018176:	693a      	ldr	r2, [r7, #16]
 8018178:	3202      	adds	r2, #2
 801817a:	0092      	lsls	r2, r2, #2
 801817c:	f107 010c 	add.w	r1, r7, #12
 8018180:	300c      	adds	r0, #12
 8018182:	f7fc fbb9 	bl	80148f8 <memcpy>
 8018186:	2201      	movs	r2, #1
 8018188:	4629      	mov	r1, r5
 801818a:	4620      	mov	r0, r4
 801818c:	f001 f922 	bl	80193d4 <__lshift>
 8018190:	9b00      	ldr	r3, [sp, #0]
 8018192:	3301      	adds	r3, #1
 8018194:	9301      	str	r3, [sp, #4]
 8018196:	9b00      	ldr	r3, [sp, #0]
 8018198:	444b      	add	r3, r9
 801819a:	9307      	str	r3, [sp, #28]
 801819c:	9b02      	ldr	r3, [sp, #8]
 801819e:	f003 0301 	and.w	r3, r3, #1
 80181a2:	46b8      	mov	r8, r7
 80181a4:	9306      	str	r3, [sp, #24]
 80181a6:	4607      	mov	r7, r0
 80181a8:	9b01      	ldr	r3, [sp, #4]
 80181aa:	4631      	mov	r1, r6
 80181ac:	3b01      	subs	r3, #1
 80181ae:	4658      	mov	r0, fp
 80181b0:	9302      	str	r3, [sp, #8]
 80181b2:	f7ff fa67 	bl	8017684 <quorem>
 80181b6:	4603      	mov	r3, r0
 80181b8:	3330      	adds	r3, #48	; 0x30
 80181ba:	9004      	str	r0, [sp, #16]
 80181bc:	4641      	mov	r1, r8
 80181be:	4658      	mov	r0, fp
 80181c0:	9308      	str	r3, [sp, #32]
 80181c2:	f001 f973 	bl	80194ac <__mcmp>
 80181c6:	463a      	mov	r2, r7
 80181c8:	4681      	mov	r9, r0
 80181ca:	4631      	mov	r1, r6
 80181cc:	4620      	mov	r0, r4
 80181ce:	f001 f989 	bl	80194e4 <__mdiff>
 80181d2:	68c2      	ldr	r2, [r0, #12]
 80181d4:	9b08      	ldr	r3, [sp, #32]
 80181d6:	4605      	mov	r5, r0
 80181d8:	bb02      	cbnz	r2, 801821c <_dtoa_r+0xa7c>
 80181da:	4601      	mov	r1, r0
 80181dc:	4658      	mov	r0, fp
 80181de:	f001 f965 	bl	80194ac <__mcmp>
 80181e2:	9b08      	ldr	r3, [sp, #32]
 80181e4:	4602      	mov	r2, r0
 80181e6:	4629      	mov	r1, r5
 80181e8:	4620      	mov	r0, r4
 80181ea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80181ee:	f000 fed5 	bl	8018f9c <_Bfree>
 80181f2:	9b05      	ldr	r3, [sp, #20]
 80181f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80181f6:	9d01      	ldr	r5, [sp, #4]
 80181f8:	ea43 0102 	orr.w	r1, r3, r2
 80181fc:	9b06      	ldr	r3, [sp, #24]
 80181fe:	430b      	orrs	r3, r1
 8018200:	9b08      	ldr	r3, [sp, #32]
 8018202:	d10d      	bne.n	8018220 <_dtoa_r+0xa80>
 8018204:	2b39      	cmp	r3, #57	; 0x39
 8018206:	d029      	beq.n	801825c <_dtoa_r+0xabc>
 8018208:	f1b9 0f00 	cmp.w	r9, #0
 801820c:	dd01      	ble.n	8018212 <_dtoa_r+0xa72>
 801820e:	9b04      	ldr	r3, [sp, #16]
 8018210:	3331      	adds	r3, #49	; 0x31
 8018212:	9a02      	ldr	r2, [sp, #8]
 8018214:	7013      	strb	r3, [r2, #0]
 8018216:	e774      	b.n	8018102 <_dtoa_r+0x962>
 8018218:	4638      	mov	r0, r7
 801821a:	e7b9      	b.n	8018190 <_dtoa_r+0x9f0>
 801821c:	2201      	movs	r2, #1
 801821e:	e7e2      	b.n	80181e6 <_dtoa_r+0xa46>
 8018220:	f1b9 0f00 	cmp.w	r9, #0
 8018224:	db06      	blt.n	8018234 <_dtoa_r+0xa94>
 8018226:	9905      	ldr	r1, [sp, #20]
 8018228:	ea41 0909 	orr.w	r9, r1, r9
 801822c:	9906      	ldr	r1, [sp, #24]
 801822e:	ea59 0101 	orrs.w	r1, r9, r1
 8018232:	d120      	bne.n	8018276 <_dtoa_r+0xad6>
 8018234:	2a00      	cmp	r2, #0
 8018236:	ddec      	ble.n	8018212 <_dtoa_r+0xa72>
 8018238:	4659      	mov	r1, fp
 801823a:	2201      	movs	r2, #1
 801823c:	4620      	mov	r0, r4
 801823e:	9301      	str	r3, [sp, #4]
 8018240:	f001 f8c8 	bl	80193d4 <__lshift>
 8018244:	4631      	mov	r1, r6
 8018246:	4683      	mov	fp, r0
 8018248:	f001 f930 	bl	80194ac <__mcmp>
 801824c:	2800      	cmp	r0, #0
 801824e:	9b01      	ldr	r3, [sp, #4]
 8018250:	dc02      	bgt.n	8018258 <_dtoa_r+0xab8>
 8018252:	d1de      	bne.n	8018212 <_dtoa_r+0xa72>
 8018254:	07da      	lsls	r2, r3, #31
 8018256:	d5dc      	bpl.n	8018212 <_dtoa_r+0xa72>
 8018258:	2b39      	cmp	r3, #57	; 0x39
 801825a:	d1d8      	bne.n	801820e <_dtoa_r+0xa6e>
 801825c:	9a02      	ldr	r2, [sp, #8]
 801825e:	2339      	movs	r3, #57	; 0x39
 8018260:	7013      	strb	r3, [r2, #0]
 8018262:	462b      	mov	r3, r5
 8018264:	461d      	mov	r5, r3
 8018266:	3b01      	subs	r3, #1
 8018268:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801826c:	2a39      	cmp	r2, #57	; 0x39
 801826e:	d050      	beq.n	8018312 <_dtoa_r+0xb72>
 8018270:	3201      	adds	r2, #1
 8018272:	701a      	strb	r2, [r3, #0]
 8018274:	e745      	b.n	8018102 <_dtoa_r+0x962>
 8018276:	2a00      	cmp	r2, #0
 8018278:	dd03      	ble.n	8018282 <_dtoa_r+0xae2>
 801827a:	2b39      	cmp	r3, #57	; 0x39
 801827c:	d0ee      	beq.n	801825c <_dtoa_r+0xabc>
 801827e:	3301      	adds	r3, #1
 8018280:	e7c7      	b.n	8018212 <_dtoa_r+0xa72>
 8018282:	9a01      	ldr	r2, [sp, #4]
 8018284:	9907      	ldr	r1, [sp, #28]
 8018286:	f802 3c01 	strb.w	r3, [r2, #-1]
 801828a:	428a      	cmp	r2, r1
 801828c:	d02a      	beq.n	80182e4 <_dtoa_r+0xb44>
 801828e:	4659      	mov	r1, fp
 8018290:	2300      	movs	r3, #0
 8018292:	220a      	movs	r2, #10
 8018294:	4620      	mov	r0, r4
 8018296:	f000 fea3 	bl	8018fe0 <__multadd>
 801829a:	45b8      	cmp	r8, r7
 801829c:	4683      	mov	fp, r0
 801829e:	f04f 0300 	mov.w	r3, #0
 80182a2:	f04f 020a 	mov.w	r2, #10
 80182a6:	4641      	mov	r1, r8
 80182a8:	4620      	mov	r0, r4
 80182aa:	d107      	bne.n	80182bc <_dtoa_r+0xb1c>
 80182ac:	f000 fe98 	bl	8018fe0 <__multadd>
 80182b0:	4680      	mov	r8, r0
 80182b2:	4607      	mov	r7, r0
 80182b4:	9b01      	ldr	r3, [sp, #4]
 80182b6:	3301      	adds	r3, #1
 80182b8:	9301      	str	r3, [sp, #4]
 80182ba:	e775      	b.n	80181a8 <_dtoa_r+0xa08>
 80182bc:	f000 fe90 	bl	8018fe0 <__multadd>
 80182c0:	4639      	mov	r1, r7
 80182c2:	4680      	mov	r8, r0
 80182c4:	2300      	movs	r3, #0
 80182c6:	220a      	movs	r2, #10
 80182c8:	4620      	mov	r0, r4
 80182ca:	f000 fe89 	bl	8018fe0 <__multadd>
 80182ce:	4607      	mov	r7, r0
 80182d0:	e7f0      	b.n	80182b4 <_dtoa_r+0xb14>
 80182d2:	f1b9 0f00 	cmp.w	r9, #0
 80182d6:	9a00      	ldr	r2, [sp, #0]
 80182d8:	bfcc      	ite	gt
 80182da:	464d      	movgt	r5, r9
 80182dc:	2501      	movle	r5, #1
 80182de:	4415      	add	r5, r2
 80182e0:	f04f 0800 	mov.w	r8, #0
 80182e4:	4659      	mov	r1, fp
 80182e6:	2201      	movs	r2, #1
 80182e8:	4620      	mov	r0, r4
 80182ea:	9301      	str	r3, [sp, #4]
 80182ec:	f001 f872 	bl	80193d4 <__lshift>
 80182f0:	4631      	mov	r1, r6
 80182f2:	4683      	mov	fp, r0
 80182f4:	f001 f8da 	bl	80194ac <__mcmp>
 80182f8:	2800      	cmp	r0, #0
 80182fa:	dcb2      	bgt.n	8018262 <_dtoa_r+0xac2>
 80182fc:	d102      	bne.n	8018304 <_dtoa_r+0xb64>
 80182fe:	9b01      	ldr	r3, [sp, #4]
 8018300:	07db      	lsls	r3, r3, #31
 8018302:	d4ae      	bmi.n	8018262 <_dtoa_r+0xac2>
 8018304:	462b      	mov	r3, r5
 8018306:	461d      	mov	r5, r3
 8018308:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801830c:	2a30      	cmp	r2, #48	; 0x30
 801830e:	d0fa      	beq.n	8018306 <_dtoa_r+0xb66>
 8018310:	e6f7      	b.n	8018102 <_dtoa_r+0x962>
 8018312:	9a00      	ldr	r2, [sp, #0]
 8018314:	429a      	cmp	r2, r3
 8018316:	d1a5      	bne.n	8018264 <_dtoa_r+0xac4>
 8018318:	f10a 0a01 	add.w	sl, sl, #1
 801831c:	2331      	movs	r3, #49	; 0x31
 801831e:	e779      	b.n	8018214 <_dtoa_r+0xa74>
 8018320:	4b13      	ldr	r3, [pc, #76]	; (8018370 <_dtoa_r+0xbd0>)
 8018322:	f7ff baaf 	b.w	8017884 <_dtoa_r+0xe4>
 8018326:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018328:	2b00      	cmp	r3, #0
 801832a:	f47f aa86 	bne.w	801783a <_dtoa_r+0x9a>
 801832e:	4b11      	ldr	r3, [pc, #68]	; (8018374 <_dtoa_r+0xbd4>)
 8018330:	f7ff baa8 	b.w	8017884 <_dtoa_r+0xe4>
 8018334:	f1b9 0f00 	cmp.w	r9, #0
 8018338:	dc03      	bgt.n	8018342 <_dtoa_r+0xba2>
 801833a:	9b05      	ldr	r3, [sp, #20]
 801833c:	2b02      	cmp	r3, #2
 801833e:	f73f aec9 	bgt.w	80180d4 <_dtoa_r+0x934>
 8018342:	9d00      	ldr	r5, [sp, #0]
 8018344:	4631      	mov	r1, r6
 8018346:	4658      	mov	r0, fp
 8018348:	f7ff f99c 	bl	8017684 <quorem>
 801834c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8018350:	f805 3b01 	strb.w	r3, [r5], #1
 8018354:	9a00      	ldr	r2, [sp, #0]
 8018356:	1aaa      	subs	r2, r5, r2
 8018358:	4591      	cmp	r9, r2
 801835a:	ddba      	ble.n	80182d2 <_dtoa_r+0xb32>
 801835c:	4659      	mov	r1, fp
 801835e:	2300      	movs	r3, #0
 8018360:	220a      	movs	r2, #10
 8018362:	4620      	mov	r0, r4
 8018364:	f000 fe3c 	bl	8018fe0 <__multadd>
 8018368:	4683      	mov	fp, r0
 801836a:	e7eb      	b.n	8018344 <_dtoa_r+0xba4>
 801836c:	0801caf5 	.word	0x0801caf5
 8018370:	0801ccf9 	.word	0x0801ccf9
 8018374:	0801ca89 	.word	0x0801ca89

08018378 <__sflush_r>:
 8018378:	898a      	ldrh	r2, [r1, #12]
 801837a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801837e:	4605      	mov	r5, r0
 8018380:	0710      	lsls	r0, r2, #28
 8018382:	460c      	mov	r4, r1
 8018384:	d458      	bmi.n	8018438 <__sflush_r+0xc0>
 8018386:	684b      	ldr	r3, [r1, #4]
 8018388:	2b00      	cmp	r3, #0
 801838a:	dc05      	bgt.n	8018398 <__sflush_r+0x20>
 801838c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801838e:	2b00      	cmp	r3, #0
 8018390:	dc02      	bgt.n	8018398 <__sflush_r+0x20>
 8018392:	2000      	movs	r0, #0
 8018394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018398:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801839a:	2e00      	cmp	r6, #0
 801839c:	d0f9      	beq.n	8018392 <__sflush_r+0x1a>
 801839e:	2300      	movs	r3, #0
 80183a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80183a4:	682f      	ldr	r7, [r5, #0]
 80183a6:	602b      	str	r3, [r5, #0]
 80183a8:	d032      	beq.n	8018410 <__sflush_r+0x98>
 80183aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80183ac:	89a3      	ldrh	r3, [r4, #12]
 80183ae:	075a      	lsls	r2, r3, #29
 80183b0:	d505      	bpl.n	80183be <__sflush_r+0x46>
 80183b2:	6863      	ldr	r3, [r4, #4]
 80183b4:	1ac0      	subs	r0, r0, r3
 80183b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80183b8:	b10b      	cbz	r3, 80183be <__sflush_r+0x46>
 80183ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80183bc:	1ac0      	subs	r0, r0, r3
 80183be:	2300      	movs	r3, #0
 80183c0:	4602      	mov	r2, r0
 80183c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80183c4:	6a21      	ldr	r1, [r4, #32]
 80183c6:	4628      	mov	r0, r5
 80183c8:	47b0      	blx	r6
 80183ca:	1c43      	adds	r3, r0, #1
 80183cc:	89a3      	ldrh	r3, [r4, #12]
 80183ce:	d106      	bne.n	80183de <__sflush_r+0x66>
 80183d0:	6829      	ldr	r1, [r5, #0]
 80183d2:	291d      	cmp	r1, #29
 80183d4:	d82c      	bhi.n	8018430 <__sflush_r+0xb8>
 80183d6:	4a2a      	ldr	r2, [pc, #168]	; (8018480 <__sflush_r+0x108>)
 80183d8:	40ca      	lsrs	r2, r1
 80183da:	07d6      	lsls	r6, r2, #31
 80183dc:	d528      	bpl.n	8018430 <__sflush_r+0xb8>
 80183de:	2200      	movs	r2, #0
 80183e0:	6062      	str	r2, [r4, #4]
 80183e2:	04d9      	lsls	r1, r3, #19
 80183e4:	6922      	ldr	r2, [r4, #16]
 80183e6:	6022      	str	r2, [r4, #0]
 80183e8:	d504      	bpl.n	80183f4 <__sflush_r+0x7c>
 80183ea:	1c42      	adds	r2, r0, #1
 80183ec:	d101      	bne.n	80183f2 <__sflush_r+0x7a>
 80183ee:	682b      	ldr	r3, [r5, #0]
 80183f0:	b903      	cbnz	r3, 80183f4 <__sflush_r+0x7c>
 80183f2:	6560      	str	r0, [r4, #84]	; 0x54
 80183f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80183f6:	602f      	str	r7, [r5, #0]
 80183f8:	2900      	cmp	r1, #0
 80183fa:	d0ca      	beq.n	8018392 <__sflush_r+0x1a>
 80183fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018400:	4299      	cmp	r1, r3
 8018402:	d002      	beq.n	801840a <__sflush_r+0x92>
 8018404:	4628      	mov	r0, r5
 8018406:	f7fc fd25 	bl	8014e54 <_free_r>
 801840a:	2000      	movs	r0, #0
 801840c:	6360      	str	r0, [r4, #52]	; 0x34
 801840e:	e7c1      	b.n	8018394 <__sflush_r+0x1c>
 8018410:	6a21      	ldr	r1, [r4, #32]
 8018412:	2301      	movs	r3, #1
 8018414:	4628      	mov	r0, r5
 8018416:	47b0      	blx	r6
 8018418:	1c41      	adds	r1, r0, #1
 801841a:	d1c7      	bne.n	80183ac <__sflush_r+0x34>
 801841c:	682b      	ldr	r3, [r5, #0]
 801841e:	2b00      	cmp	r3, #0
 8018420:	d0c4      	beq.n	80183ac <__sflush_r+0x34>
 8018422:	2b1d      	cmp	r3, #29
 8018424:	d001      	beq.n	801842a <__sflush_r+0xb2>
 8018426:	2b16      	cmp	r3, #22
 8018428:	d101      	bne.n	801842e <__sflush_r+0xb6>
 801842a:	602f      	str	r7, [r5, #0]
 801842c:	e7b1      	b.n	8018392 <__sflush_r+0x1a>
 801842e:	89a3      	ldrh	r3, [r4, #12]
 8018430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018434:	81a3      	strh	r3, [r4, #12]
 8018436:	e7ad      	b.n	8018394 <__sflush_r+0x1c>
 8018438:	690f      	ldr	r7, [r1, #16]
 801843a:	2f00      	cmp	r7, #0
 801843c:	d0a9      	beq.n	8018392 <__sflush_r+0x1a>
 801843e:	0793      	lsls	r3, r2, #30
 8018440:	680e      	ldr	r6, [r1, #0]
 8018442:	bf08      	it	eq
 8018444:	694b      	ldreq	r3, [r1, #20]
 8018446:	600f      	str	r7, [r1, #0]
 8018448:	bf18      	it	ne
 801844a:	2300      	movne	r3, #0
 801844c:	eba6 0807 	sub.w	r8, r6, r7
 8018450:	608b      	str	r3, [r1, #8]
 8018452:	f1b8 0f00 	cmp.w	r8, #0
 8018456:	dd9c      	ble.n	8018392 <__sflush_r+0x1a>
 8018458:	6a21      	ldr	r1, [r4, #32]
 801845a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801845c:	4643      	mov	r3, r8
 801845e:	463a      	mov	r2, r7
 8018460:	4628      	mov	r0, r5
 8018462:	47b0      	blx	r6
 8018464:	2800      	cmp	r0, #0
 8018466:	dc06      	bgt.n	8018476 <__sflush_r+0xfe>
 8018468:	89a3      	ldrh	r3, [r4, #12]
 801846a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801846e:	81a3      	strh	r3, [r4, #12]
 8018470:	f04f 30ff 	mov.w	r0, #4294967295
 8018474:	e78e      	b.n	8018394 <__sflush_r+0x1c>
 8018476:	4407      	add	r7, r0
 8018478:	eba8 0800 	sub.w	r8, r8, r0
 801847c:	e7e9      	b.n	8018452 <__sflush_r+0xda>
 801847e:	bf00      	nop
 8018480:	20400001 	.word	0x20400001

08018484 <_fflush_r>:
 8018484:	b538      	push	{r3, r4, r5, lr}
 8018486:	690b      	ldr	r3, [r1, #16]
 8018488:	4605      	mov	r5, r0
 801848a:	460c      	mov	r4, r1
 801848c:	b913      	cbnz	r3, 8018494 <_fflush_r+0x10>
 801848e:	2500      	movs	r5, #0
 8018490:	4628      	mov	r0, r5
 8018492:	bd38      	pop	{r3, r4, r5, pc}
 8018494:	b118      	cbz	r0, 801849e <_fflush_r+0x1a>
 8018496:	6983      	ldr	r3, [r0, #24]
 8018498:	b90b      	cbnz	r3, 801849e <_fflush_r+0x1a>
 801849a:	f7fc f839 	bl	8014510 <__sinit>
 801849e:	4b14      	ldr	r3, [pc, #80]	; (80184f0 <_fflush_r+0x6c>)
 80184a0:	429c      	cmp	r4, r3
 80184a2:	d11b      	bne.n	80184dc <_fflush_r+0x58>
 80184a4:	686c      	ldr	r4, [r5, #4]
 80184a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d0ef      	beq.n	801848e <_fflush_r+0xa>
 80184ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80184b0:	07d0      	lsls	r0, r2, #31
 80184b2:	d404      	bmi.n	80184be <_fflush_r+0x3a>
 80184b4:	0599      	lsls	r1, r3, #22
 80184b6:	d402      	bmi.n	80184be <_fflush_r+0x3a>
 80184b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80184ba:	f7fc fa09 	bl	80148d0 <__retarget_lock_acquire_recursive>
 80184be:	4628      	mov	r0, r5
 80184c0:	4621      	mov	r1, r4
 80184c2:	f7ff ff59 	bl	8018378 <__sflush_r>
 80184c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80184c8:	07da      	lsls	r2, r3, #31
 80184ca:	4605      	mov	r5, r0
 80184cc:	d4e0      	bmi.n	8018490 <_fflush_r+0xc>
 80184ce:	89a3      	ldrh	r3, [r4, #12]
 80184d0:	059b      	lsls	r3, r3, #22
 80184d2:	d4dd      	bmi.n	8018490 <_fflush_r+0xc>
 80184d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80184d6:	f7fc f9fd 	bl	80148d4 <__retarget_lock_release_recursive>
 80184da:	e7d9      	b.n	8018490 <_fflush_r+0xc>
 80184dc:	4b05      	ldr	r3, [pc, #20]	; (80184f4 <_fflush_r+0x70>)
 80184de:	429c      	cmp	r4, r3
 80184e0:	d101      	bne.n	80184e6 <_fflush_r+0x62>
 80184e2:	68ac      	ldr	r4, [r5, #8]
 80184e4:	e7df      	b.n	80184a6 <_fflush_r+0x22>
 80184e6:	4b04      	ldr	r3, [pc, #16]	; (80184f8 <_fflush_r+0x74>)
 80184e8:	429c      	cmp	r4, r3
 80184ea:	bf08      	it	eq
 80184ec:	68ec      	ldreq	r4, [r5, #12]
 80184ee:	e7da      	b.n	80184a6 <_fflush_r+0x22>
 80184f0:	0801c7ac 	.word	0x0801c7ac
 80184f4:	0801c7cc 	.word	0x0801c7cc
 80184f8:	0801c78c 	.word	0x0801c78c

080184fc <fiprintf>:
 80184fc:	b40e      	push	{r1, r2, r3}
 80184fe:	b503      	push	{r0, r1, lr}
 8018500:	4601      	mov	r1, r0
 8018502:	ab03      	add	r3, sp, #12
 8018504:	4805      	ldr	r0, [pc, #20]	; (801851c <fiprintf+0x20>)
 8018506:	f853 2b04 	ldr.w	r2, [r3], #4
 801850a:	6800      	ldr	r0, [r0, #0]
 801850c:	9301      	str	r3, [sp, #4]
 801850e:	f001 fd4d 	bl	8019fac <_vfiprintf_r>
 8018512:	b002      	add	sp, #8
 8018514:	f85d eb04 	ldr.w	lr, [sp], #4
 8018518:	b003      	add	sp, #12
 801851a:	4770      	bx	lr
 801851c:	200000d8 	.word	0x200000d8

08018520 <rshift>:
 8018520:	6903      	ldr	r3, [r0, #16]
 8018522:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018526:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801852a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801852e:	f100 0414 	add.w	r4, r0, #20
 8018532:	dd45      	ble.n	80185c0 <rshift+0xa0>
 8018534:	f011 011f 	ands.w	r1, r1, #31
 8018538:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801853c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018540:	d10c      	bne.n	801855c <rshift+0x3c>
 8018542:	f100 0710 	add.w	r7, r0, #16
 8018546:	4629      	mov	r1, r5
 8018548:	42b1      	cmp	r1, r6
 801854a:	d334      	bcc.n	80185b6 <rshift+0x96>
 801854c:	1a9b      	subs	r3, r3, r2
 801854e:	009b      	lsls	r3, r3, #2
 8018550:	1eea      	subs	r2, r5, #3
 8018552:	4296      	cmp	r6, r2
 8018554:	bf38      	it	cc
 8018556:	2300      	movcc	r3, #0
 8018558:	4423      	add	r3, r4
 801855a:	e015      	b.n	8018588 <rshift+0x68>
 801855c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018560:	f1c1 0820 	rsb	r8, r1, #32
 8018564:	40cf      	lsrs	r7, r1
 8018566:	f105 0e04 	add.w	lr, r5, #4
 801856a:	46a1      	mov	r9, r4
 801856c:	4576      	cmp	r6, lr
 801856e:	46f4      	mov	ip, lr
 8018570:	d815      	bhi.n	801859e <rshift+0x7e>
 8018572:	1a9b      	subs	r3, r3, r2
 8018574:	009a      	lsls	r2, r3, #2
 8018576:	3a04      	subs	r2, #4
 8018578:	3501      	adds	r5, #1
 801857a:	42ae      	cmp	r6, r5
 801857c:	bf38      	it	cc
 801857e:	2200      	movcc	r2, #0
 8018580:	18a3      	adds	r3, r4, r2
 8018582:	50a7      	str	r7, [r4, r2]
 8018584:	b107      	cbz	r7, 8018588 <rshift+0x68>
 8018586:	3304      	adds	r3, #4
 8018588:	1b1a      	subs	r2, r3, r4
 801858a:	42a3      	cmp	r3, r4
 801858c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018590:	bf08      	it	eq
 8018592:	2300      	moveq	r3, #0
 8018594:	6102      	str	r2, [r0, #16]
 8018596:	bf08      	it	eq
 8018598:	6143      	streq	r3, [r0, #20]
 801859a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801859e:	f8dc c000 	ldr.w	ip, [ip]
 80185a2:	fa0c fc08 	lsl.w	ip, ip, r8
 80185a6:	ea4c 0707 	orr.w	r7, ip, r7
 80185aa:	f849 7b04 	str.w	r7, [r9], #4
 80185ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 80185b2:	40cf      	lsrs	r7, r1
 80185b4:	e7da      	b.n	801856c <rshift+0x4c>
 80185b6:	f851 cb04 	ldr.w	ip, [r1], #4
 80185ba:	f847 cf04 	str.w	ip, [r7, #4]!
 80185be:	e7c3      	b.n	8018548 <rshift+0x28>
 80185c0:	4623      	mov	r3, r4
 80185c2:	e7e1      	b.n	8018588 <rshift+0x68>

080185c4 <__hexdig_fun>:
 80185c4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80185c8:	2b09      	cmp	r3, #9
 80185ca:	d802      	bhi.n	80185d2 <__hexdig_fun+0xe>
 80185cc:	3820      	subs	r0, #32
 80185ce:	b2c0      	uxtb	r0, r0
 80185d0:	4770      	bx	lr
 80185d2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80185d6:	2b05      	cmp	r3, #5
 80185d8:	d801      	bhi.n	80185de <__hexdig_fun+0x1a>
 80185da:	3847      	subs	r0, #71	; 0x47
 80185dc:	e7f7      	b.n	80185ce <__hexdig_fun+0xa>
 80185de:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80185e2:	2b05      	cmp	r3, #5
 80185e4:	d801      	bhi.n	80185ea <__hexdig_fun+0x26>
 80185e6:	3827      	subs	r0, #39	; 0x27
 80185e8:	e7f1      	b.n	80185ce <__hexdig_fun+0xa>
 80185ea:	2000      	movs	r0, #0
 80185ec:	4770      	bx	lr
	...

080185f0 <__gethex>:
 80185f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185f4:	ed2d 8b02 	vpush	{d8}
 80185f8:	b089      	sub	sp, #36	; 0x24
 80185fa:	ee08 0a10 	vmov	s16, r0
 80185fe:	9304      	str	r3, [sp, #16]
 8018600:	4bbc      	ldr	r3, [pc, #752]	; (80188f4 <__gethex+0x304>)
 8018602:	681b      	ldr	r3, [r3, #0]
 8018604:	9301      	str	r3, [sp, #4]
 8018606:	4618      	mov	r0, r3
 8018608:	468b      	mov	fp, r1
 801860a:	4690      	mov	r8, r2
 801860c:	f7e7 fdfa 	bl	8000204 <strlen>
 8018610:	9b01      	ldr	r3, [sp, #4]
 8018612:	f8db 2000 	ldr.w	r2, [fp]
 8018616:	4403      	add	r3, r0
 8018618:	4682      	mov	sl, r0
 801861a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801861e:	9305      	str	r3, [sp, #20]
 8018620:	1c93      	adds	r3, r2, #2
 8018622:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8018626:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801862a:	32fe      	adds	r2, #254	; 0xfe
 801862c:	18d1      	adds	r1, r2, r3
 801862e:	461f      	mov	r7, r3
 8018630:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018634:	9100      	str	r1, [sp, #0]
 8018636:	2830      	cmp	r0, #48	; 0x30
 8018638:	d0f8      	beq.n	801862c <__gethex+0x3c>
 801863a:	f7ff ffc3 	bl	80185c4 <__hexdig_fun>
 801863e:	4604      	mov	r4, r0
 8018640:	2800      	cmp	r0, #0
 8018642:	d13a      	bne.n	80186ba <__gethex+0xca>
 8018644:	9901      	ldr	r1, [sp, #4]
 8018646:	4652      	mov	r2, sl
 8018648:	4638      	mov	r0, r7
 801864a:	f7fd fd1f 	bl	801608c <strncmp>
 801864e:	4605      	mov	r5, r0
 8018650:	2800      	cmp	r0, #0
 8018652:	d168      	bne.n	8018726 <__gethex+0x136>
 8018654:	f817 000a 	ldrb.w	r0, [r7, sl]
 8018658:	eb07 060a 	add.w	r6, r7, sl
 801865c:	f7ff ffb2 	bl	80185c4 <__hexdig_fun>
 8018660:	2800      	cmp	r0, #0
 8018662:	d062      	beq.n	801872a <__gethex+0x13a>
 8018664:	4633      	mov	r3, r6
 8018666:	7818      	ldrb	r0, [r3, #0]
 8018668:	2830      	cmp	r0, #48	; 0x30
 801866a:	461f      	mov	r7, r3
 801866c:	f103 0301 	add.w	r3, r3, #1
 8018670:	d0f9      	beq.n	8018666 <__gethex+0x76>
 8018672:	f7ff ffa7 	bl	80185c4 <__hexdig_fun>
 8018676:	2301      	movs	r3, #1
 8018678:	fab0 f480 	clz	r4, r0
 801867c:	0964      	lsrs	r4, r4, #5
 801867e:	4635      	mov	r5, r6
 8018680:	9300      	str	r3, [sp, #0]
 8018682:	463a      	mov	r2, r7
 8018684:	4616      	mov	r6, r2
 8018686:	3201      	adds	r2, #1
 8018688:	7830      	ldrb	r0, [r6, #0]
 801868a:	f7ff ff9b 	bl	80185c4 <__hexdig_fun>
 801868e:	2800      	cmp	r0, #0
 8018690:	d1f8      	bne.n	8018684 <__gethex+0x94>
 8018692:	9901      	ldr	r1, [sp, #4]
 8018694:	4652      	mov	r2, sl
 8018696:	4630      	mov	r0, r6
 8018698:	f7fd fcf8 	bl	801608c <strncmp>
 801869c:	b980      	cbnz	r0, 80186c0 <__gethex+0xd0>
 801869e:	b94d      	cbnz	r5, 80186b4 <__gethex+0xc4>
 80186a0:	eb06 050a 	add.w	r5, r6, sl
 80186a4:	462a      	mov	r2, r5
 80186a6:	4616      	mov	r6, r2
 80186a8:	3201      	adds	r2, #1
 80186aa:	7830      	ldrb	r0, [r6, #0]
 80186ac:	f7ff ff8a 	bl	80185c4 <__hexdig_fun>
 80186b0:	2800      	cmp	r0, #0
 80186b2:	d1f8      	bne.n	80186a6 <__gethex+0xb6>
 80186b4:	1bad      	subs	r5, r5, r6
 80186b6:	00ad      	lsls	r5, r5, #2
 80186b8:	e004      	b.n	80186c4 <__gethex+0xd4>
 80186ba:	2400      	movs	r4, #0
 80186bc:	4625      	mov	r5, r4
 80186be:	e7e0      	b.n	8018682 <__gethex+0x92>
 80186c0:	2d00      	cmp	r5, #0
 80186c2:	d1f7      	bne.n	80186b4 <__gethex+0xc4>
 80186c4:	7833      	ldrb	r3, [r6, #0]
 80186c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80186ca:	2b50      	cmp	r3, #80	; 0x50
 80186cc:	d13b      	bne.n	8018746 <__gethex+0x156>
 80186ce:	7873      	ldrb	r3, [r6, #1]
 80186d0:	2b2b      	cmp	r3, #43	; 0x2b
 80186d2:	d02c      	beq.n	801872e <__gethex+0x13e>
 80186d4:	2b2d      	cmp	r3, #45	; 0x2d
 80186d6:	d02e      	beq.n	8018736 <__gethex+0x146>
 80186d8:	1c71      	adds	r1, r6, #1
 80186da:	f04f 0900 	mov.w	r9, #0
 80186de:	7808      	ldrb	r0, [r1, #0]
 80186e0:	f7ff ff70 	bl	80185c4 <__hexdig_fun>
 80186e4:	1e43      	subs	r3, r0, #1
 80186e6:	b2db      	uxtb	r3, r3
 80186e8:	2b18      	cmp	r3, #24
 80186ea:	d82c      	bhi.n	8018746 <__gethex+0x156>
 80186ec:	f1a0 0210 	sub.w	r2, r0, #16
 80186f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80186f4:	f7ff ff66 	bl	80185c4 <__hexdig_fun>
 80186f8:	1e43      	subs	r3, r0, #1
 80186fa:	b2db      	uxtb	r3, r3
 80186fc:	2b18      	cmp	r3, #24
 80186fe:	d91d      	bls.n	801873c <__gethex+0x14c>
 8018700:	f1b9 0f00 	cmp.w	r9, #0
 8018704:	d000      	beq.n	8018708 <__gethex+0x118>
 8018706:	4252      	negs	r2, r2
 8018708:	4415      	add	r5, r2
 801870a:	f8cb 1000 	str.w	r1, [fp]
 801870e:	b1e4      	cbz	r4, 801874a <__gethex+0x15a>
 8018710:	9b00      	ldr	r3, [sp, #0]
 8018712:	2b00      	cmp	r3, #0
 8018714:	bf14      	ite	ne
 8018716:	2700      	movne	r7, #0
 8018718:	2706      	moveq	r7, #6
 801871a:	4638      	mov	r0, r7
 801871c:	b009      	add	sp, #36	; 0x24
 801871e:	ecbd 8b02 	vpop	{d8}
 8018722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018726:	463e      	mov	r6, r7
 8018728:	4625      	mov	r5, r4
 801872a:	2401      	movs	r4, #1
 801872c:	e7ca      	b.n	80186c4 <__gethex+0xd4>
 801872e:	f04f 0900 	mov.w	r9, #0
 8018732:	1cb1      	adds	r1, r6, #2
 8018734:	e7d3      	b.n	80186de <__gethex+0xee>
 8018736:	f04f 0901 	mov.w	r9, #1
 801873a:	e7fa      	b.n	8018732 <__gethex+0x142>
 801873c:	230a      	movs	r3, #10
 801873e:	fb03 0202 	mla	r2, r3, r2, r0
 8018742:	3a10      	subs	r2, #16
 8018744:	e7d4      	b.n	80186f0 <__gethex+0x100>
 8018746:	4631      	mov	r1, r6
 8018748:	e7df      	b.n	801870a <__gethex+0x11a>
 801874a:	1bf3      	subs	r3, r6, r7
 801874c:	3b01      	subs	r3, #1
 801874e:	4621      	mov	r1, r4
 8018750:	2b07      	cmp	r3, #7
 8018752:	dc0b      	bgt.n	801876c <__gethex+0x17c>
 8018754:	ee18 0a10 	vmov	r0, s16
 8018758:	f000 fbe0 	bl	8018f1c <_Balloc>
 801875c:	4604      	mov	r4, r0
 801875e:	b940      	cbnz	r0, 8018772 <__gethex+0x182>
 8018760:	4b65      	ldr	r3, [pc, #404]	; (80188f8 <__gethex+0x308>)
 8018762:	4602      	mov	r2, r0
 8018764:	21de      	movs	r1, #222	; 0xde
 8018766:	4865      	ldr	r0, [pc, #404]	; (80188fc <__gethex+0x30c>)
 8018768:	f7fe ff4a 	bl	8017600 <__assert_func>
 801876c:	3101      	adds	r1, #1
 801876e:	105b      	asrs	r3, r3, #1
 8018770:	e7ee      	b.n	8018750 <__gethex+0x160>
 8018772:	f100 0914 	add.w	r9, r0, #20
 8018776:	f04f 0b00 	mov.w	fp, #0
 801877a:	f1ca 0301 	rsb	r3, sl, #1
 801877e:	f8cd 9008 	str.w	r9, [sp, #8]
 8018782:	f8cd b000 	str.w	fp, [sp]
 8018786:	9306      	str	r3, [sp, #24]
 8018788:	42b7      	cmp	r7, r6
 801878a:	d340      	bcc.n	801880e <__gethex+0x21e>
 801878c:	9802      	ldr	r0, [sp, #8]
 801878e:	9b00      	ldr	r3, [sp, #0]
 8018790:	f840 3b04 	str.w	r3, [r0], #4
 8018794:	eba0 0009 	sub.w	r0, r0, r9
 8018798:	1080      	asrs	r0, r0, #2
 801879a:	0146      	lsls	r6, r0, #5
 801879c:	6120      	str	r0, [r4, #16]
 801879e:	4618      	mov	r0, r3
 80187a0:	f000 fcb2 	bl	8019108 <__hi0bits>
 80187a4:	1a30      	subs	r0, r6, r0
 80187a6:	f8d8 6000 	ldr.w	r6, [r8]
 80187aa:	42b0      	cmp	r0, r6
 80187ac:	dd63      	ble.n	8018876 <__gethex+0x286>
 80187ae:	1b87      	subs	r7, r0, r6
 80187b0:	4639      	mov	r1, r7
 80187b2:	4620      	mov	r0, r4
 80187b4:	f001 f84c 	bl	8019850 <__any_on>
 80187b8:	4682      	mov	sl, r0
 80187ba:	b1a8      	cbz	r0, 80187e8 <__gethex+0x1f8>
 80187bc:	1e7b      	subs	r3, r7, #1
 80187be:	1159      	asrs	r1, r3, #5
 80187c0:	f003 021f 	and.w	r2, r3, #31
 80187c4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80187c8:	f04f 0a01 	mov.w	sl, #1
 80187cc:	fa0a f202 	lsl.w	r2, sl, r2
 80187d0:	420a      	tst	r2, r1
 80187d2:	d009      	beq.n	80187e8 <__gethex+0x1f8>
 80187d4:	4553      	cmp	r3, sl
 80187d6:	dd05      	ble.n	80187e4 <__gethex+0x1f4>
 80187d8:	1eb9      	subs	r1, r7, #2
 80187da:	4620      	mov	r0, r4
 80187dc:	f001 f838 	bl	8019850 <__any_on>
 80187e0:	2800      	cmp	r0, #0
 80187e2:	d145      	bne.n	8018870 <__gethex+0x280>
 80187e4:	f04f 0a02 	mov.w	sl, #2
 80187e8:	4639      	mov	r1, r7
 80187ea:	4620      	mov	r0, r4
 80187ec:	f7ff fe98 	bl	8018520 <rshift>
 80187f0:	443d      	add	r5, r7
 80187f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80187f6:	42ab      	cmp	r3, r5
 80187f8:	da4c      	bge.n	8018894 <__gethex+0x2a4>
 80187fa:	ee18 0a10 	vmov	r0, s16
 80187fe:	4621      	mov	r1, r4
 8018800:	f000 fbcc 	bl	8018f9c <_Bfree>
 8018804:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018806:	2300      	movs	r3, #0
 8018808:	6013      	str	r3, [r2, #0]
 801880a:	27a3      	movs	r7, #163	; 0xa3
 801880c:	e785      	b.n	801871a <__gethex+0x12a>
 801880e:	1e73      	subs	r3, r6, #1
 8018810:	9a05      	ldr	r2, [sp, #20]
 8018812:	9303      	str	r3, [sp, #12]
 8018814:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018818:	4293      	cmp	r3, r2
 801881a:	d019      	beq.n	8018850 <__gethex+0x260>
 801881c:	f1bb 0f20 	cmp.w	fp, #32
 8018820:	d107      	bne.n	8018832 <__gethex+0x242>
 8018822:	9b02      	ldr	r3, [sp, #8]
 8018824:	9a00      	ldr	r2, [sp, #0]
 8018826:	f843 2b04 	str.w	r2, [r3], #4
 801882a:	9302      	str	r3, [sp, #8]
 801882c:	2300      	movs	r3, #0
 801882e:	9300      	str	r3, [sp, #0]
 8018830:	469b      	mov	fp, r3
 8018832:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018836:	f7ff fec5 	bl	80185c4 <__hexdig_fun>
 801883a:	9b00      	ldr	r3, [sp, #0]
 801883c:	f000 000f 	and.w	r0, r0, #15
 8018840:	fa00 f00b 	lsl.w	r0, r0, fp
 8018844:	4303      	orrs	r3, r0
 8018846:	9300      	str	r3, [sp, #0]
 8018848:	f10b 0b04 	add.w	fp, fp, #4
 801884c:	9b03      	ldr	r3, [sp, #12]
 801884e:	e00d      	b.n	801886c <__gethex+0x27c>
 8018850:	9b03      	ldr	r3, [sp, #12]
 8018852:	9a06      	ldr	r2, [sp, #24]
 8018854:	4413      	add	r3, r2
 8018856:	42bb      	cmp	r3, r7
 8018858:	d3e0      	bcc.n	801881c <__gethex+0x22c>
 801885a:	4618      	mov	r0, r3
 801885c:	9901      	ldr	r1, [sp, #4]
 801885e:	9307      	str	r3, [sp, #28]
 8018860:	4652      	mov	r2, sl
 8018862:	f7fd fc13 	bl	801608c <strncmp>
 8018866:	9b07      	ldr	r3, [sp, #28]
 8018868:	2800      	cmp	r0, #0
 801886a:	d1d7      	bne.n	801881c <__gethex+0x22c>
 801886c:	461e      	mov	r6, r3
 801886e:	e78b      	b.n	8018788 <__gethex+0x198>
 8018870:	f04f 0a03 	mov.w	sl, #3
 8018874:	e7b8      	b.n	80187e8 <__gethex+0x1f8>
 8018876:	da0a      	bge.n	801888e <__gethex+0x29e>
 8018878:	1a37      	subs	r7, r6, r0
 801887a:	4621      	mov	r1, r4
 801887c:	ee18 0a10 	vmov	r0, s16
 8018880:	463a      	mov	r2, r7
 8018882:	f000 fda7 	bl	80193d4 <__lshift>
 8018886:	1bed      	subs	r5, r5, r7
 8018888:	4604      	mov	r4, r0
 801888a:	f100 0914 	add.w	r9, r0, #20
 801888e:	f04f 0a00 	mov.w	sl, #0
 8018892:	e7ae      	b.n	80187f2 <__gethex+0x202>
 8018894:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018898:	42a8      	cmp	r0, r5
 801889a:	dd72      	ble.n	8018982 <__gethex+0x392>
 801889c:	1b45      	subs	r5, r0, r5
 801889e:	42ae      	cmp	r6, r5
 80188a0:	dc36      	bgt.n	8018910 <__gethex+0x320>
 80188a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80188a6:	2b02      	cmp	r3, #2
 80188a8:	d02a      	beq.n	8018900 <__gethex+0x310>
 80188aa:	2b03      	cmp	r3, #3
 80188ac:	d02c      	beq.n	8018908 <__gethex+0x318>
 80188ae:	2b01      	cmp	r3, #1
 80188b0:	d115      	bne.n	80188de <__gethex+0x2ee>
 80188b2:	42ae      	cmp	r6, r5
 80188b4:	d113      	bne.n	80188de <__gethex+0x2ee>
 80188b6:	2e01      	cmp	r6, #1
 80188b8:	d10b      	bne.n	80188d2 <__gethex+0x2e2>
 80188ba:	9a04      	ldr	r2, [sp, #16]
 80188bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80188c0:	6013      	str	r3, [r2, #0]
 80188c2:	2301      	movs	r3, #1
 80188c4:	6123      	str	r3, [r4, #16]
 80188c6:	f8c9 3000 	str.w	r3, [r9]
 80188ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80188cc:	2762      	movs	r7, #98	; 0x62
 80188ce:	601c      	str	r4, [r3, #0]
 80188d0:	e723      	b.n	801871a <__gethex+0x12a>
 80188d2:	1e71      	subs	r1, r6, #1
 80188d4:	4620      	mov	r0, r4
 80188d6:	f000 ffbb 	bl	8019850 <__any_on>
 80188da:	2800      	cmp	r0, #0
 80188dc:	d1ed      	bne.n	80188ba <__gethex+0x2ca>
 80188de:	ee18 0a10 	vmov	r0, s16
 80188e2:	4621      	mov	r1, r4
 80188e4:	f000 fb5a 	bl	8018f9c <_Bfree>
 80188e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80188ea:	2300      	movs	r3, #0
 80188ec:	6013      	str	r3, [r2, #0]
 80188ee:	2750      	movs	r7, #80	; 0x50
 80188f0:	e713      	b.n	801871a <__gethex+0x12a>
 80188f2:	bf00      	nop
 80188f4:	0801cb70 	.word	0x0801cb70
 80188f8:	0801caf5 	.word	0x0801caf5
 80188fc:	0801cb06 	.word	0x0801cb06
 8018900:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018902:	2b00      	cmp	r3, #0
 8018904:	d1eb      	bne.n	80188de <__gethex+0x2ee>
 8018906:	e7d8      	b.n	80188ba <__gethex+0x2ca>
 8018908:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801890a:	2b00      	cmp	r3, #0
 801890c:	d1d5      	bne.n	80188ba <__gethex+0x2ca>
 801890e:	e7e6      	b.n	80188de <__gethex+0x2ee>
 8018910:	1e6f      	subs	r7, r5, #1
 8018912:	f1ba 0f00 	cmp.w	sl, #0
 8018916:	d131      	bne.n	801897c <__gethex+0x38c>
 8018918:	b127      	cbz	r7, 8018924 <__gethex+0x334>
 801891a:	4639      	mov	r1, r7
 801891c:	4620      	mov	r0, r4
 801891e:	f000 ff97 	bl	8019850 <__any_on>
 8018922:	4682      	mov	sl, r0
 8018924:	117b      	asrs	r3, r7, #5
 8018926:	2101      	movs	r1, #1
 8018928:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801892c:	f007 071f 	and.w	r7, r7, #31
 8018930:	fa01 f707 	lsl.w	r7, r1, r7
 8018934:	421f      	tst	r7, r3
 8018936:	4629      	mov	r1, r5
 8018938:	4620      	mov	r0, r4
 801893a:	bf18      	it	ne
 801893c:	f04a 0a02 	orrne.w	sl, sl, #2
 8018940:	1b76      	subs	r6, r6, r5
 8018942:	f7ff fded 	bl	8018520 <rshift>
 8018946:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801894a:	2702      	movs	r7, #2
 801894c:	f1ba 0f00 	cmp.w	sl, #0
 8018950:	d048      	beq.n	80189e4 <__gethex+0x3f4>
 8018952:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018956:	2b02      	cmp	r3, #2
 8018958:	d015      	beq.n	8018986 <__gethex+0x396>
 801895a:	2b03      	cmp	r3, #3
 801895c:	d017      	beq.n	801898e <__gethex+0x39e>
 801895e:	2b01      	cmp	r3, #1
 8018960:	d109      	bne.n	8018976 <__gethex+0x386>
 8018962:	f01a 0f02 	tst.w	sl, #2
 8018966:	d006      	beq.n	8018976 <__gethex+0x386>
 8018968:	f8d9 0000 	ldr.w	r0, [r9]
 801896c:	ea4a 0a00 	orr.w	sl, sl, r0
 8018970:	f01a 0f01 	tst.w	sl, #1
 8018974:	d10e      	bne.n	8018994 <__gethex+0x3a4>
 8018976:	f047 0710 	orr.w	r7, r7, #16
 801897a:	e033      	b.n	80189e4 <__gethex+0x3f4>
 801897c:	f04f 0a01 	mov.w	sl, #1
 8018980:	e7d0      	b.n	8018924 <__gethex+0x334>
 8018982:	2701      	movs	r7, #1
 8018984:	e7e2      	b.n	801894c <__gethex+0x35c>
 8018986:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018988:	f1c3 0301 	rsb	r3, r3, #1
 801898c:	9315      	str	r3, [sp, #84]	; 0x54
 801898e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018990:	2b00      	cmp	r3, #0
 8018992:	d0f0      	beq.n	8018976 <__gethex+0x386>
 8018994:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018998:	f104 0314 	add.w	r3, r4, #20
 801899c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80189a0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80189a4:	f04f 0c00 	mov.w	ip, #0
 80189a8:	4618      	mov	r0, r3
 80189aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80189ae:	f1b2 3fff 	cmp.w	r2, #4294967295
 80189b2:	d01c      	beq.n	80189ee <__gethex+0x3fe>
 80189b4:	3201      	adds	r2, #1
 80189b6:	6002      	str	r2, [r0, #0]
 80189b8:	2f02      	cmp	r7, #2
 80189ba:	f104 0314 	add.w	r3, r4, #20
 80189be:	d13f      	bne.n	8018a40 <__gethex+0x450>
 80189c0:	f8d8 2000 	ldr.w	r2, [r8]
 80189c4:	3a01      	subs	r2, #1
 80189c6:	42b2      	cmp	r2, r6
 80189c8:	d10a      	bne.n	80189e0 <__gethex+0x3f0>
 80189ca:	1171      	asrs	r1, r6, #5
 80189cc:	2201      	movs	r2, #1
 80189ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80189d2:	f006 061f 	and.w	r6, r6, #31
 80189d6:	fa02 f606 	lsl.w	r6, r2, r6
 80189da:	421e      	tst	r6, r3
 80189dc:	bf18      	it	ne
 80189de:	4617      	movne	r7, r2
 80189e0:	f047 0720 	orr.w	r7, r7, #32
 80189e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80189e6:	601c      	str	r4, [r3, #0]
 80189e8:	9b04      	ldr	r3, [sp, #16]
 80189ea:	601d      	str	r5, [r3, #0]
 80189ec:	e695      	b.n	801871a <__gethex+0x12a>
 80189ee:	4299      	cmp	r1, r3
 80189f0:	f843 cc04 	str.w	ip, [r3, #-4]
 80189f4:	d8d8      	bhi.n	80189a8 <__gethex+0x3b8>
 80189f6:	68a3      	ldr	r3, [r4, #8]
 80189f8:	459b      	cmp	fp, r3
 80189fa:	db19      	blt.n	8018a30 <__gethex+0x440>
 80189fc:	6861      	ldr	r1, [r4, #4]
 80189fe:	ee18 0a10 	vmov	r0, s16
 8018a02:	3101      	adds	r1, #1
 8018a04:	f000 fa8a 	bl	8018f1c <_Balloc>
 8018a08:	4681      	mov	r9, r0
 8018a0a:	b918      	cbnz	r0, 8018a14 <__gethex+0x424>
 8018a0c:	4b1a      	ldr	r3, [pc, #104]	; (8018a78 <__gethex+0x488>)
 8018a0e:	4602      	mov	r2, r0
 8018a10:	2184      	movs	r1, #132	; 0x84
 8018a12:	e6a8      	b.n	8018766 <__gethex+0x176>
 8018a14:	6922      	ldr	r2, [r4, #16]
 8018a16:	3202      	adds	r2, #2
 8018a18:	f104 010c 	add.w	r1, r4, #12
 8018a1c:	0092      	lsls	r2, r2, #2
 8018a1e:	300c      	adds	r0, #12
 8018a20:	f7fb ff6a 	bl	80148f8 <memcpy>
 8018a24:	4621      	mov	r1, r4
 8018a26:	ee18 0a10 	vmov	r0, s16
 8018a2a:	f000 fab7 	bl	8018f9c <_Bfree>
 8018a2e:	464c      	mov	r4, r9
 8018a30:	6923      	ldr	r3, [r4, #16]
 8018a32:	1c5a      	adds	r2, r3, #1
 8018a34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018a38:	6122      	str	r2, [r4, #16]
 8018a3a:	2201      	movs	r2, #1
 8018a3c:	615a      	str	r2, [r3, #20]
 8018a3e:	e7bb      	b.n	80189b8 <__gethex+0x3c8>
 8018a40:	6922      	ldr	r2, [r4, #16]
 8018a42:	455a      	cmp	r2, fp
 8018a44:	dd0b      	ble.n	8018a5e <__gethex+0x46e>
 8018a46:	2101      	movs	r1, #1
 8018a48:	4620      	mov	r0, r4
 8018a4a:	f7ff fd69 	bl	8018520 <rshift>
 8018a4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018a52:	3501      	adds	r5, #1
 8018a54:	42ab      	cmp	r3, r5
 8018a56:	f6ff aed0 	blt.w	80187fa <__gethex+0x20a>
 8018a5a:	2701      	movs	r7, #1
 8018a5c:	e7c0      	b.n	80189e0 <__gethex+0x3f0>
 8018a5e:	f016 061f 	ands.w	r6, r6, #31
 8018a62:	d0fa      	beq.n	8018a5a <__gethex+0x46a>
 8018a64:	449a      	add	sl, r3
 8018a66:	f1c6 0620 	rsb	r6, r6, #32
 8018a6a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018a6e:	f000 fb4b 	bl	8019108 <__hi0bits>
 8018a72:	42b0      	cmp	r0, r6
 8018a74:	dbe7      	blt.n	8018a46 <__gethex+0x456>
 8018a76:	e7f0      	b.n	8018a5a <__gethex+0x46a>
 8018a78:	0801caf5 	.word	0x0801caf5

08018a7c <L_shift>:
 8018a7c:	f1c2 0208 	rsb	r2, r2, #8
 8018a80:	0092      	lsls	r2, r2, #2
 8018a82:	b570      	push	{r4, r5, r6, lr}
 8018a84:	f1c2 0620 	rsb	r6, r2, #32
 8018a88:	6843      	ldr	r3, [r0, #4]
 8018a8a:	6804      	ldr	r4, [r0, #0]
 8018a8c:	fa03 f506 	lsl.w	r5, r3, r6
 8018a90:	432c      	orrs	r4, r5
 8018a92:	40d3      	lsrs	r3, r2
 8018a94:	6004      	str	r4, [r0, #0]
 8018a96:	f840 3f04 	str.w	r3, [r0, #4]!
 8018a9a:	4288      	cmp	r0, r1
 8018a9c:	d3f4      	bcc.n	8018a88 <L_shift+0xc>
 8018a9e:	bd70      	pop	{r4, r5, r6, pc}

08018aa0 <__match>:
 8018aa0:	b530      	push	{r4, r5, lr}
 8018aa2:	6803      	ldr	r3, [r0, #0]
 8018aa4:	3301      	adds	r3, #1
 8018aa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018aaa:	b914      	cbnz	r4, 8018ab2 <__match+0x12>
 8018aac:	6003      	str	r3, [r0, #0]
 8018aae:	2001      	movs	r0, #1
 8018ab0:	bd30      	pop	{r4, r5, pc}
 8018ab2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018ab6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018aba:	2d19      	cmp	r5, #25
 8018abc:	bf98      	it	ls
 8018abe:	3220      	addls	r2, #32
 8018ac0:	42a2      	cmp	r2, r4
 8018ac2:	d0f0      	beq.n	8018aa6 <__match+0x6>
 8018ac4:	2000      	movs	r0, #0
 8018ac6:	e7f3      	b.n	8018ab0 <__match+0x10>

08018ac8 <__hexnan>:
 8018ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018acc:	680b      	ldr	r3, [r1, #0]
 8018ace:	6801      	ldr	r1, [r0, #0]
 8018ad0:	115e      	asrs	r6, r3, #5
 8018ad2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018ad6:	f013 031f 	ands.w	r3, r3, #31
 8018ada:	b087      	sub	sp, #28
 8018adc:	bf18      	it	ne
 8018ade:	3604      	addne	r6, #4
 8018ae0:	2500      	movs	r5, #0
 8018ae2:	1f37      	subs	r7, r6, #4
 8018ae4:	4682      	mov	sl, r0
 8018ae6:	4690      	mov	r8, r2
 8018ae8:	9301      	str	r3, [sp, #4]
 8018aea:	f846 5c04 	str.w	r5, [r6, #-4]
 8018aee:	46b9      	mov	r9, r7
 8018af0:	463c      	mov	r4, r7
 8018af2:	9502      	str	r5, [sp, #8]
 8018af4:	46ab      	mov	fp, r5
 8018af6:	784a      	ldrb	r2, [r1, #1]
 8018af8:	1c4b      	adds	r3, r1, #1
 8018afa:	9303      	str	r3, [sp, #12]
 8018afc:	b342      	cbz	r2, 8018b50 <__hexnan+0x88>
 8018afe:	4610      	mov	r0, r2
 8018b00:	9105      	str	r1, [sp, #20]
 8018b02:	9204      	str	r2, [sp, #16]
 8018b04:	f7ff fd5e 	bl	80185c4 <__hexdig_fun>
 8018b08:	2800      	cmp	r0, #0
 8018b0a:	d14f      	bne.n	8018bac <__hexnan+0xe4>
 8018b0c:	9a04      	ldr	r2, [sp, #16]
 8018b0e:	9905      	ldr	r1, [sp, #20]
 8018b10:	2a20      	cmp	r2, #32
 8018b12:	d818      	bhi.n	8018b46 <__hexnan+0x7e>
 8018b14:	9b02      	ldr	r3, [sp, #8]
 8018b16:	459b      	cmp	fp, r3
 8018b18:	dd13      	ble.n	8018b42 <__hexnan+0x7a>
 8018b1a:	454c      	cmp	r4, r9
 8018b1c:	d206      	bcs.n	8018b2c <__hexnan+0x64>
 8018b1e:	2d07      	cmp	r5, #7
 8018b20:	dc04      	bgt.n	8018b2c <__hexnan+0x64>
 8018b22:	462a      	mov	r2, r5
 8018b24:	4649      	mov	r1, r9
 8018b26:	4620      	mov	r0, r4
 8018b28:	f7ff ffa8 	bl	8018a7c <L_shift>
 8018b2c:	4544      	cmp	r4, r8
 8018b2e:	d950      	bls.n	8018bd2 <__hexnan+0x10a>
 8018b30:	2300      	movs	r3, #0
 8018b32:	f1a4 0904 	sub.w	r9, r4, #4
 8018b36:	f844 3c04 	str.w	r3, [r4, #-4]
 8018b3a:	f8cd b008 	str.w	fp, [sp, #8]
 8018b3e:	464c      	mov	r4, r9
 8018b40:	461d      	mov	r5, r3
 8018b42:	9903      	ldr	r1, [sp, #12]
 8018b44:	e7d7      	b.n	8018af6 <__hexnan+0x2e>
 8018b46:	2a29      	cmp	r2, #41	; 0x29
 8018b48:	d156      	bne.n	8018bf8 <__hexnan+0x130>
 8018b4a:	3102      	adds	r1, #2
 8018b4c:	f8ca 1000 	str.w	r1, [sl]
 8018b50:	f1bb 0f00 	cmp.w	fp, #0
 8018b54:	d050      	beq.n	8018bf8 <__hexnan+0x130>
 8018b56:	454c      	cmp	r4, r9
 8018b58:	d206      	bcs.n	8018b68 <__hexnan+0xa0>
 8018b5a:	2d07      	cmp	r5, #7
 8018b5c:	dc04      	bgt.n	8018b68 <__hexnan+0xa0>
 8018b5e:	462a      	mov	r2, r5
 8018b60:	4649      	mov	r1, r9
 8018b62:	4620      	mov	r0, r4
 8018b64:	f7ff ff8a 	bl	8018a7c <L_shift>
 8018b68:	4544      	cmp	r4, r8
 8018b6a:	d934      	bls.n	8018bd6 <__hexnan+0x10e>
 8018b6c:	f1a8 0204 	sub.w	r2, r8, #4
 8018b70:	4623      	mov	r3, r4
 8018b72:	f853 1b04 	ldr.w	r1, [r3], #4
 8018b76:	f842 1f04 	str.w	r1, [r2, #4]!
 8018b7a:	429f      	cmp	r7, r3
 8018b7c:	d2f9      	bcs.n	8018b72 <__hexnan+0xaa>
 8018b7e:	1b3b      	subs	r3, r7, r4
 8018b80:	f023 0303 	bic.w	r3, r3, #3
 8018b84:	3304      	adds	r3, #4
 8018b86:	3401      	adds	r4, #1
 8018b88:	3e03      	subs	r6, #3
 8018b8a:	42b4      	cmp	r4, r6
 8018b8c:	bf88      	it	hi
 8018b8e:	2304      	movhi	r3, #4
 8018b90:	4443      	add	r3, r8
 8018b92:	2200      	movs	r2, #0
 8018b94:	f843 2b04 	str.w	r2, [r3], #4
 8018b98:	429f      	cmp	r7, r3
 8018b9a:	d2fb      	bcs.n	8018b94 <__hexnan+0xcc>
 8018b9c:	683b      	ldr	r3, [r7, #0]
 8018b9e:	b91b      	cbnz	r3, 8018ba8 <__hexnan+0xe0>
 8018ba0:	4547      	cmp	r7, r8
 8018ba2:	d127      	bne.n	8018bf4 <__hexnan+0x12c>
 8018ba4:	2301      	movs	r3, #1
 8018ba6:	603b      	str	r3, [r7, #0]
 8018ba8:	2005      	movs	r0, #5
 8018baa:	e026      	b.n	8018bfa <__hexnan+0x132>
 8018bac:	3501      	adds	r5, #1
 8018bae:	2d08      	cmp	r5, #8
 8018bb0:	f10b 0b01 	add.w	fp, fp, #1
 8018bb4:	dd06      	ble.n	8018bc4 <__hexnan+0xfc>
 8018bb6:	4544      	cmp	r4, r8
 8018bb8:	d9c3      	bls.n	8018b42 <__hexnan+0x7a>
 8018bba:	2300      	movs	r3, #0
 8018bbc:	f844 3c04 	str.w	r3, [r4, #-4]
 8018bc0:	2501      	movs	r5, #1
 8018bc2:	3c04      	subs	r4, #4
 8018bc4:	6822      	ldr	r2, [r4, #0]
 8018bc6:	f000 000f 	and.w	r0, r0, #15
 8018bca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8018bce:	6022      	str	r2, [r4, #0]
 8018bd0:	e7b7      	b.n	8018b42 <__hexnan+0x7a>
 8018bd2:	2508      	movs	r5, #8
 8018bd4:	e7b5      	b.n	8018b42 <__hexnan+0x7a>
 8018bd6:	9b01      	ldr	r3, [sp, #4]
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d0df      	beq.n	8018b9c <__hexnan+0xd4>
 8018bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8018be0:	f1c3 0320 	rsb	r3, r3, #32
 8018be4:	fa22 f303 	lsr.w	r3, r2, r3
 8018be8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018bec:	401a      	ands	r2, r3
 8018bee:	f846 2c04 	str.w	r2, [r6, #-4]
 8018bf2:	e7d3      	b.n	8018b9c <__hexnan+0xd4>
 8018bf4:	3f04      	subs	r7, #4
 8018bf6:	e7d1      	b.n	8018b9c <__hexnan+0xd4>
 8018bf8:	2004      	movs	r0, #4
 8018bfa:	b007      	add	sp, #28
 8018bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018c00 <_findenv_r>:
 8018c00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c04:	4607      	mov	r7, r0
 8018c06:	4689      	mov	r9, r1
 8018c08:	4616      	mov	r6, r2
 8018c0a:	f001 fcdf 	bl	801a5cc <__env_lock>
 8018c0e:	4b18      	ldr	r3, [pc, #96]	; (8018c70 <_findenv_r+0x70>)
 8018c10:	681c      	ldr	r4, [r3, #0]
 8018c12:	469a      	mov	sl, r3
 8018c14:	b134      	cbz	r4, 8018c24 <_findenv_r+0x24>
 8018c16:	464b      	mov	r3, r9
 8018c18:	4698      	mov	r8, r3
 8018c1a:	f813 1b01 	ldrb.w	r1, [r3], #1
 8018c1e:	b139      	cbz	r1, 8018c30 <_findenv_r+0x30>
 8018c20:	293d      	cmp	r1, #61	; 0x3d
 8018c22:	d1f9      	bne.n	8018c18 <_findenv_r+0x18>
 8018c24:	4638      	mov	r0, r7
 8018c26:	f001 fcd7 	bl	801a5d8 <__env_unlock>
 8018c2a:	2000      	movs	r0, #0
 8018c2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c30:	eba8 0809 	sub.w	r8, r8, r9
 8018c34:	46a3      	mov	fp, r4
 8018c36:	f854 0b04 	ldr.w	r0, [r4], #4
 8018c3a:	2800      	cmp	r0, #0
 8018c3c:	d0f2      	beq.n	8018c24 <_findenv_r+0x24>
 8018c3e:	4642      	mov	r2, r8
 8018c40:	4649      	mov	r1, r9
 8018c42:	f7fd fa23 	bl	801608c <strncmp>
 8018c46:	2800      	cmp	r0, #0
 8018c48:	d1f4      	bne.n	8018c34 <_findenv_r+0x34>
 8018c4a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018c4e:	eb03 0508 	add.w	r5, r3, r8
 8018c52:	f813 3008 	ldrb.w	r3, [r3, r8]
 8018c56:	2b3d      	cmp	r3, #61	; 0x3d
 8018c58:	d1ec      	bne.n	8018c34 <_findenv_r+0x34>
 8018c5a:	f8da 3000 	ldr.w	r3, [sl]
 8018c5e:	ebab 0303 	sub.w	r3, fp, r3
 8018c62:	109b      	asrs	r3, r3, #2
 8018c64:	4638      	mov	r0, r7
 8018c66:	6033      	str	r3, [r6, #0]
 8018c68:	f001 fcb6 	bl	801a5d8 <__env_unlock>
 8018c6c:	1c68      	adds	r0, r5, #1
 8018c6e:	e7dd      	b.n	8018c2c <_findenv_r+0x2c>
 8018c70:	20000310 	.word	0x20000310

08018c74 <_getenv_r>:
 8018c74:	b507      	push	{r0, r1, r2, lr}
 8018c76:	aa01      	add	r2, sp, #4
 8018c78:	f7ff ffc2 	bl	8018c00 <_findenv_r>
 8018c7c:	b003      	add	sp, #12
 8018c7e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08018c84 <__gettzinfo>:
 8018c84:	4800      	ldr	r0, [pc, #0]	; (8018c88 <__gettzinfo+0x4>)
 8018c86:	4770      	bx	lr
 8018c88:	20000148 	.word	0x20000148

08018c8c <gmtime_r>:
 8018c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c90:	e9d0 6700 	ldrd	r6, r7, [r0]
 8018c94:	460c      	mov	r4, r1
 8018c96:	4a51      	ldr	r2, [pc, #324]	; (8018ddc <gmtime_r+0x150>)
 8018c98:	2300      	movs	r3, #0
 8018c9a:	4630      	mov	r0, r6
 8018c9c:	4639      	mov	r1, r7
 8018c9e:	f7e8 f813 	bl	8000cc8 <__aeabi_ldivmod>
 8018ca2:	4639      	mov	r1, r7
 8018ca4:	4605      	mov	r5, r0
 8018ca6:	4a4d      	ldr	r2, [pc, #308]	; (8018ddc <gmtime_r+0x150>)
 8018ca8:	4630      	mov	r0, r6
 8018caa:	2300      	movs	r3, #0
 8018cac:	f7e8 f80c 	bl	8000cc8 <__aeabi_ldivmod>
 8018cb0:	2a00      	cmp	r2, #0
 8018cb2:	bfbc      	itt	lt
 8018cb4:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8018cb8:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8018cbc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8018cc0:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8018cc4:	fbb2 f3f1 	udiv	r3, r2, r1
 8018cc8:	fb01 2213 	mls	r2, r1, r3, r2
 8018ccc:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8018cd0:	bfac      	ite	ge
 8018cd2:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 8018cd6:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8018cda:	60a3      	str	r3, [r4, #8]
 8018cdc:	fbb2 f3f1 	udiv	r3, r2, r1
 8018ce0:	fb01 2213 	mls	r2, r1, r3, r2
 8018ce4:	6063      	str	r3, [r4, #4]
 8018ce6:	6022      	str	r2, [r4, #0]
 8018ce8:	1cc3      	adds	r3, r0, #3
 8018cea:	2207      	movs	r2, #7
 8018cec:	fb93 f2f2 	sdiv	r2, r3, r2
 8018cf0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8018cf4:	1a9b      	subs	r3, r3, r2
 8018cf6:	bf48      	it	mi
 8018cf8:	3307      	addmi	r3, #7
 8018cfa:	2800      	cmp	r0, #0
 8018cfc:	61a3      	str	r3, [r4, #24]
 8018cfe:	bfb8      	it	lt
 8018d00:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8018d04:	4936      	ldr	r1, [pc, #216]	; (8018de0 <gmtime_r+0x154>)
 8018d06:	bfae      	itee	ge
 8018d08:	fb90 f1f1 	sdivge	r1, r0, r1
 8018d0c:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8018d10:	fb93 f1f1 	sdivlt	r1, r3, r1
 8018d14:	4b33      	ldr	r3, [pc, #204]	; (8018de4 <gmtime_r+0x158>)
 8018d16:	fb03 0001 	mla	r0, r3, r1, r0
 8018d1a:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8018d1e:	fbb0 f2f2 	udiv	r2, r0, r2
 8018d22:	4402      	add	r2, r0
 8018d24:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8018d28:	fbb0 f3fc 	udiv	r3, r0, ip
 8018d2c:	1ad2      	subs	r2, r2, r3
 8018d2e:	f240 176d 	movw	r7, #365	; 0x16d
 8018d32:	4b2d      	ldr	r3, [pc, #180]	; (8018de8 <gmtime_r+0x15c>)
 8018d34:	fbb0 f3f3 	udiv	r3, r0, r3
 8018d38:	2664      	movs	r6, #100	; 0x64
 8018d3a:	1ad3      	subs	r3, r2, r3
 8018d3c:	fbb3 f5f7 	udiv	r5, r3, r7
 8018d40:	fbb3 f3fc 	udiv	r3, r3, ip
 8018d44:	fbb5 f2f6 	udiv	r2, r5, r6
 8018d48:	1ad3      	subs	r3, r2, r3
 8018d4a:	4403      	add	r3, r0
 8018d4c:	fb07 3315 	mls	r3, r7, r5, r3
 8018d50:	2099      	movs	r0, #153	; 0x99
 8018d52:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8018d56:	f10c 0c02 	add.w	ip, ip, #2
 8018d5a:	f103 0e01 	add.w	lr, r3, #1
 8018d5e:	fbbc f7f0 	udiv	r7, ip, r0
 8018d62:	4378      	muls	r0, r7
 8018d64:	3002      	adds	r0, #2
 8018d66:	f04f 0805 	mov.w	r8, #5
 8018d6a:	fbb0 f0f8 	udiv	r0, r0, r8
 8018d6e:	ebae 0000 	sub.w	r0, lr, r0
 8018d72:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 8018d76:	45f4      	cmp	ip, lr
 8018d78:	bf94      	ite	ls
 8018d7a:	f04f 0c02 	movls.w	ip, #2
 8018d7e:	f06f 0c09 	mvnhi.w	ip, #9
 8018d82:	4467      	add	r7, ip
 8018d84:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8018d88:	fb0c 5101 	mla	r1, ip, r1, r5
 8018d8c:	2f01      	cmp	r7, #1
 8018d8e:	bf98      	it	ls
 8018d90:	3101      	addls	r1, #1
 8018d92:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8018d96:	d30c      	bcc.n	8018db2 <gmtime_r+0x126>
 8018d98:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8018d9c:	61e3      	str	r3, [r4, #28]
 8018d9e:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 8018da2:	2300      	movs	r3, #0
 8018da4:	60e0      	str	r0, [r4, #12]
 8018da6:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8018daa:	6223      	str	r3, [r4, #32]
 8018dac:	4620      	mov	r0, r4
 8018dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018db2:	f015 0f03 	tst.w	r5, #3
 8018db6:	d102      	bne.n	8018dbe <gmtime_r+0x132>
 8018db8:	fb06 5212 	mls	r2, r6, r2, r5
 8018dbc:	b95a      	cbnz	r2, 8018dd6 <gmtime_r+0x14a>
 8018dbe:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8018dc2:	fbb5 f2f6 	udiv	r2, r5, r6
 8018dc6:	fb06 5212 	mls	r2, r6, r2, r5
 8018dca:	fab2 f282 	clz	r2, r2
 8018dce:	0952      	lsrs	r2, r2, #5
 8018dd0:	333b      	adds	r3, #59	; 0x3b
 8018dd2:	4413      	add	r3, r2
 8018dd4:	e7e2      	b.n	8018d9c <gmtime_r+0x110>
 8018dd6:	2201      	movs	r2, #1
 8018dd8:	e7fa      	b.n	8018dd0 <gmtime_r+0x144>
 8018dda:	bf00      	nop
 8018ddc:	00015180 	.word	0x00015180
 8018de0:	00023ab1 	.word	0x00023ab1
 8018de4:	fffdc54f 	.word	0xfffdc54f
 8018de8:	00023ab0 	.word	0x00023ab0

08018dec <_localeconv_r>:
 8018dec:	4800      	ldr	r0, [pc, #0]	; (8018df0 <_localeconv_r+0x4>)
 8018dee:	4770      	bx	lr
 8018df0:	20000294 	.word	0x20000294

08018df4 <_lseek_r>:
 8018df4:	b538      	push	{r3, r4, r5, lr}
 8018df6:	4d07      	ldr	r5, [pc, #28]	; (8018e14 <_lseek_r+0x20>)
 8018df8:	4604      	mov	r4, r0
 8018dfa:	4608      	mov	r0, r1
 8018dfc:	4611      	mov	r1, r2
 8018dfe:	2200      	movs	r2, #0
 8018e00:	602a      	str	r2, [r5, #0]
 8018e02:	461a      	mov	r2, r3
 8018e04:	f001 fc40 	bl	801a688 <_lseek>
 8018e08:	1c43      	adds	r3, r0, #1
 8018e0a:	d102      	bne.n	8018e12 <_lseek_r+0x1e>
 8018e0c:	682b      	ldr	r3, [r5, #0]
 8018e0e:	b103      	cbz	r3, 8018e12 <_lseek_r+0x1e>
 8018e10:	6023      	str	r3, [r4, #0]
 8018e12:	bd38      	pop	{r3, r4, r5, pc}
 8018e14:	20006554 	.word	0x20006554

08018e18 <__swhatbuf_r>:
 8018e18:	b570      	push	{r4, r5, r6, lr}
 8018e1a:	460e      	mov	r6, r1
 8018e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018e20:	2900      	cmp	r1, #0
 8018e22:	b096      	sub	sp, #88	; 0x58
 8018e24:	4614      	mov	r4, r2
 8018e26:	461d      	mov	r5, r3
 8018e28:	da07      	bge.n	8018e3a <__swhatbuf_r+0x22>
 8018e2a:	2300      	movs	r3, #0
 8018e2c:	602b      	str	r3, [r5, #0]
 8018e2e:	89b3      	ldrh	r3, [r6, #12]
 8018e30:	061a      	lsls	r2, r3, #24
 8018e32:	d410      	bmi.n	8018e56 <__swhatbuf_r+0x3e>
 8018e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018e38:	e00e      	b.n	8018e58 <__swhatbuf_r+0x40>
 8018e3a:	466a      	mov	r2, sp
 8018e3c:	f001 fbd2 	bl	801a5e4 <_fstat_r>
 8018e40:	2800      	cmp	r0, #0
 8018e42:	dbf2      	blt.n	8018e2a <__swhatbuf_r+0x12>
 8018e44:	9a01      	ldr	r2, [sp, #4]
 8018e46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018e4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018e4e:	425a      	negs	r2, r3
 8018e50:	415a      	adcs	r2, r3
 8018e52:	602a      	str	r2, [r5, #0]
 8018e54:	e7ee      	b.n	8018e34 <__swhatbuf_r+0x1c>
 8018e56:	2340      	movs	r3, #64	; 0x40
 8018e58:	2000      	movs	r0, #0
 8018e5a:	6023      	str	r3, [r4, #0]
 8018e5c:	b016      	add	sp, #88	; 0x58
 8018e5e:	bd70      	pop	{r4, r5, r6, pc}

08018e60 <__smakebuf_r>:
 8018e60:	898b      	ldrh	r3, [r1, #12]
 8018e62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018e64:	079d      	lsls	r5, r3, #30
 8018e66:	4606      	mov	r6, r0
 8018e68:	460c      	mov	r4, r1
 8018e6a:	d507      	bpl.n	8018e7c <__smakebuf_r+0x1c>
 8018e6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018e70:	6023      	str	r3, [r4, #0]
 8018e72:	6123      	str	r3, [r4, #16]
 8018e74:	2301      	movs	r3, #1
 8018e76:	6163      	str	r3, [r4, #20]
 8018e78:	b002      	add	sp, #8
 8018e7a:	bd70      	pop	{r4, r5, r6, pc}
 8018e7c:	ab01      	add	r3, sp, #4
 8018e7e:	466a      	mov	r2, sp
 8018e80:	f7ff ffca 	bl	8018e18 <__swhatbuf_r>
 8018e84:	9900      	ldr	r1, [sp, #0]
 8018e86:	4605      	mov	r5, r0
 8018e88:	4630      	mov	r0, r6
 8018e8a:	f7fc f833 	bl	8014ef4 <_malloc_r>
 8018e8e:	b948      	cbnz	r0, 8018ea4 <__smakebuf_r+0x44>
 8018e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018e94:	059a      	lsls	r2, r3, #22
 8018e96:	d4ef      	bmi.n	8018e78 <__smakebuf_r+0x18>
 8018e98:	f023 0303 	bic.w	r3, r3, #3
 8018e9c:	f043 0302 	orr.w	r3, r3, #2
 8018ea0:	81a3      	strh	r3, [r4, #12]
 8018ea2:	e7e3      	b.n	8018e6c <__smakebuf_r+0xc>
 8018ea4:	4b0d      	ldr	r3, [pc, #52]	; (8018edc <__smakebuf_r+0x7c>)
 8018ea6:	62b3      	str	r3, [r6, #40]	; 0x28
 8018ea8:	89a3      	ldrh	r3, [r4, #12]
 8018eaa:	6020      	str	r0, [r4, #0]
 8018eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018eb0:	81a3      	strh	r3, [r4, #12]
 8018eb2:	9b00      	ldr	r3, [sp, #0]
 8018eb4:	6163      	str	r3, [r4, #20]
 8018eb6:	9b01      	ldr	r3, [sp, #4]
 8018eb8:	6120      	str	r0, [r4, #16]
 8018eba:	b15b      	cbz	r3, 8018ed4 <__smakebuf_r+0x74>
 8018ebc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018ec0:	4630      	mov	r0, r6
 8018ec2:	f001 fba1 	bl	801a608 <_isatty_r>
 8018ec6:	b128      	cbz	r0, 8018ed4 <__smakebuf_r+0x74>
 8018ec8:	89a3      	ldrh	r3, [r4, #12]
 8018eca:	f023 0303 	bic.w	r3, r3, #3
 8018ece:	f043 0301 	orr.w	r3, r3, #1
 8018ed2:	81a3      	strh	r3, [r4, #12]
 8018ed4:	89a0      	ldrh	r0, [r4, #12]
 8018ed6:	4305      	orrs	r5, r0
 8018ed8:	81a5      	strh	r5, [r4, #12]
 8018eda:	e7cd      	b.n	8018e78 <__smakebuf_r+0x18>
 8018edc:	080144a9 	.word	0x080144a9

08018ee0 <__ascii_mbtowc>:
 8018ee0:	b082      	sub	sp, #8
 8018ee2:	b901      	cbnz	r1, 8018ee6 <__ascii_mbtowc+0x6>
 8018ee4:	a901      	add	r1, sp, #4
 8018ee6:	b142      	cbz	r2, 8018efa <__ascii_mbtowc+0x1a>
 8018ee8:	b14b      	cbz	r3, 8018efe <__ascii_mbtowc+0x1e>
 8018eea:	7813      	ldrb	r3, [r2, #0]
 8018eec:	600b      	str	r3, [r1, #0]
 8018eee:	7812      	ldrb	r2, [r2, #0]
 8018ef0:	1e10      	subs	r0, r2, #0
 8018ef2:	bf18      	it	ne
 8018ef4:	2001      	movne	r0, #1
 8018ef6:	b002      	add	sp, #8
 8018ef8:	4770      	bx	lr
 8018efa:	4610      	mov	r0, r2
 8018efc:	e7fb      	b.n	8018ef6 <__ascii_mbtowc+0x16>
 8018efe:	f06f 0001 	mvn.w	r0, #1
 8018f02:	e7f8      	b.n	8018ef6 <__ascii_mbtowc+0x16>

08018f04 <__malloc_lock>:
 8018f04:	4801      	ldr	r0, [pc, #4]	; (8018f0c <__malloc_lock+0x8>)
 8018f06:	f7fb bce3 	b.w	80148d0 <__retarget_lock_acquire_recursive>
 8018f0a:	bf00      	nop
 8018f0c:	2000654c 	.word	0x2000654c

08018f10 <__malloc_unlock>:
 8018f10:	4801      	ldr	r0, [pc, #4]	; (8018f18 <__malloc_unlock+0x8>)
 8018f12:	f7fb bcdf 	b.w	80148d4 <__retarget_lock_release_recursive>
 8018f16:	bf00      	nop
 8018f18:	2000654c 	.word	0x2000654c

08018f1c <_Balloc>:
 8018f1c:	b570      	push	{r4, r5, r6, lr}
 8018f1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018f20:	4604      	mov	r4, r0
 8018f22:	460d      	mov	r5, r1
 8018f24:	b976      	cbnz	r6, 8018f44 <_Balloc+0x28>
 8018f26:	2010      	movs	r0, #16
 8018f28:	f7fb fcd6 	bl	80148d8 <malloc>
 8018f2c:	4602      	mov	r2, r0
 8018f2e:	6260      	str	r0, [r4, #36]	; 0x24
 8018f30:	b920      	cbnz	r0, 8018f3c <_Balloc+0x20>
 8018f32:	4b18      	ldr	r3, [pc, #96]	; (8018f94 <_Balloc+0x78>)
 8018f34:	4818      	ldr	r0, [pc, #96]	; (8018f98 <_Balloc+0x7c>)
 8018f36:	2166      	movs	r1, #102	; 0x66
 8018f38:	f7fe fb62 	bl	8017600 <__assert_func>
 8018f3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018f40:	6006      	str	r6, [r0, #0]
 8018f42:	60c6      	str	r6, [r0, #12]
 8018f44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018f46:	68f3      	ldr	r3, [r6, #12]
 8018f48:	b183      	cbz	r3, 8018f6c <_Balloc+0x50>
 8018f4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018f4c:	68db      	ldr	r3, [r3, #12]
 8018f4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018f52:	b9b8      	cbnz	r0, 8018f84 <_Balloc+0x68>
 8018f54:	2101      	movs	r1, #1
 8018f56:	fa01 f605 	lsl.w	r6, r1, r5
 8018f5a:	1d72      	adds	r2, r6, #5
 8018f5c:	0092      	lsls	r2, r2, #2
 8018f5e:	4620      	mov	r0, r4
 8018f60:	f000 fc97 	bl	8019892 <_calloc_r>
 8018f64:	b160      	cbz	r0, 8018f80 <_Balloc+0x64>
 8018f66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018f6a:	e00e      	b.n	8018f8a <_Balloc+0x6e>
 8018f6c:	2221      	movs	r2, #33	; 0x21
 8018f6e:	2104      	movs	r1, #4
 8018f70:	4620      	mov	r0, r4
 8018f72:	f000 fc8e 	bl	8019892 <_calloc_r>
 8018f76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018f78:	60f0      	str	r0, [r6, #12]
 8018f7a:	68db      	ldr	r3, [r3, #12]
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	d1e4      	bne.n	8018f4a <_Balloc+0x2e>
 8018f80:	2000      	movs	r0, #0
 8018f82:	bd70      	pop	{r4, r5, r6, pc}
 8018f84:	6802      	ldr	r2, [r0, #0]
 8018f86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018f8a:	2300      	movs	r3, #0
 8018f8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018f90:	e7f7      	b.n	8018f82 <_Balloc+0x66>
 8018f92:	bf00      	nop
 8018f94:	0801c7f0 	.word	0x0801c7f0
 8018f98:	0801cb84 	.word	0x0801cb84

08018f9c <_Bfree>:
 8018f9c:	b570      	push	{r4, r5, r6, lr}
 8018f9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018fa0:	4605      	mov	r5, r0
 8018fa2:	460c      	mov	r4, r1
 8018fa4:	b976      	cbnz	r6, 8018fc4 <_Bfree+0x28>
 8018fa6:	2010      	movs	r0, #16
 8018fa8:	f7fb fc96 	bl	80148d8 <malloc>
 8018fac:	4602      	mov	r2, r0
 8018fae:	6268      	str	r0, [r5, #36]	; 0x24
 8018fb0:	b920      	cbnz	r0, 8018fbc <_Bfree+0x20>
 8018fb2:	4b09      	ldr	r3, [pc, #36]	; (8018fd8 <_Bfree+0x3c>)
 8018fb4:	4809      	ldr	r0, [pc, #36]	; (8018fdc <_Bfree+0x40>)
 8018fb6:	218a      	movs	r1, #138	; 0x8a
 8018fb8:	f7fe fb22 	bl	8017600 <__assert_func>
 8018fbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018fc0:	6006      	str	r6, [r0, #0]
 8018fc2:	60c6      	str	r6, [r0, #12]
 8018fc4:	b13c      	cbz	r4, 8018fd6 <_Bfree+0x3a>
 8018fc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018fc8:	6862      	ldr	r2, [r4, #4]
 8018fca:	68db      	ldr	r3, [r3, #12]
 8018fcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018fd0:	6021      	str	r1, [r4, #0]
 8018fd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018fd6:	bd70      	pop	{r4, r5, r6, pc}
 8018fd8:	0801c7f0 	.word	0x0801c7f0
 8018fdc:	0801cb84 	.word	0x0801cb84

08018fe0 <__multadd>:
 8018fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018fe4:	690e      	ldr	r6, [r1, #16]
 8018fe6:	4607      	mov	r7, r0
 8018fe8:	4698      	mov	r8, r3
 8018fea:	460c      	mov	r4, r1
 8018fec:	f101 0014 	add.w	r0, r1, #20
 8018ff0:	2300      	movs	r3, #0
 8018ff2:	6805      	ldr	r5, [r0, #0]
 8018ff4:	b2a9      	uxth	r1, r5
 8018ff6:	fb02 8101 	mla	r1, r2, r1, r8
 8018ffa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8018ffe:	0c2d      	lsrs	r5, r5, #16
 8019000:	fb02 c505 	mla	r5, r2, r5, ip
 8019004:	b289      	uxth	r1, r1
 8019006:	3301      	adds	r3, #1
 8019008:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801900c:	429e      	cmp	r6, r3
 801900e:	f840 1b04 	str.w	r1, [r0], #4
 8019012:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8019016:	dcec      	bgt.n	8018ff2 <__multadd+0x12>
 8019018:	f1b8 0f00 	cmp.w	r8, #0
 801901c:	d022      	beq.n	8019064 <__multadd+0x84>
 801901e:	68a3      	ldr	r3, [r4, #8]
 8019020:	42b3      	cmp	r3, r6
 8019022:	dc19      	bgt.n	8019058 <__multadd+0x78>
 8019024:	6861      	ldr	r1, [r4, #4]
 8019026:	4638      	mov	r0, r7
 8019028:	3101      	adds	r1, #1
 801902a:	f7ff ff77 	bl	8018f1c <_Balloc>
 801902e:	4605      	mov	r5, r0
 8019030:	b928      	cbnz	r0, 801903e <__multadd+0x5e>
 8019032:	4602      	mov	r2, r0
 8019034:	4b0d      	ldr	r3, [pc, #52]	; (801906c <__multadd+0x8c>)
 8019036:	480e      	ldr	r0, [pc, #56]	; (8019070 <__multadd+0x90>)
 8019038:	21b5      	movs	r1, #181	; 0xb5
 801903a:	f7fe fae1 	bl	8017600 <__assert_func>
 801903e:	6922      	ldr	r2, [r4, #16]
 8019040:	3202      	adds	r2, #2
 8019042:	f104 010c 	add.w	r1, r4, #12
 8019046:	0092      	lsls	r2, r2, #2
 8019048:	300c      	adds	r0, #12
 801904a:	f7fb fc55 	bl	80148f8 <memcpy>
 801904e:	4621      	mov	r1, r4
 8019050:	4638      	mov	r0, r7
 8019052:	f7ff ffa3 	bl	8018f9c <_Bfree>
 8019056:	462c      	mov	r4, r5
 8019058:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801905c:	3601      	adds	r6, #1
 801905e:	f8c3 8014 	str.w	r8, [r3, #20]
 8019062:	6126      	str	r6, [r4, #16]
 8019064:	4620      	mov	r0, r4
 8019066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801906a:	bf00      	nop
 801906c:	0801caf5 	.word	0x0801caf5
 8019070:	0801cb84 	.word	0x0801cb84

08019074 <__s2b>:
 8019074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019078:	460c      	mov	r4, r1
 801907a:	4615      	mov	r5, r2
 801907c:	461f      	mov	r7, r3
 801907e:	2209      	movs	r2, #9
 8019080:	3308      	adds	r3, #8
 8019082:	4606      	mov	r6, r0
 8019084:	fb93 f3f2 	sdiv	r3, r3, r2
 8019088:	2100      	movs	r1, #0
 801908a:	2201      	movs	r2, #1
 801908c:	429a      	cmp	r2, r3
 801908e:	db09      	blt.n	80190a4 <__s2b+0x30>
 8019090:	4630      	mov	r0, r6
 8019092:	f7ff ff43 	bl	8018f1c <_Balloc>
 8019096:	b940      	cbnz	r0, 80190aa <__s2b+0x36>
 8019098:	4602      	mov	r2, r0
 801909a:	4b19      	ldr	r3, [pc, #100]	; (8019100 <__s2b+0x8c>)
 801909c:	4819      	ldr	r0, [pc, #100]	; (8019104 <__s2b+0x90>)
 801909e:	21ce      	movs	r1, #206	; 0xce
 80190a0:	f7fe faae 	bl	8017600 <__assert_func>
 80190a4:	0052      	lsls	r2, r2, #1
 80190a6:	3101      	adds	r1, #1
 80190a8:	e7f0      	b.n	801908c <__s2b+0x18>
 80190aa:	9b08      	ldr	r3, [sp, #32]
 80190ac:	6143      	str	r3, [r0, #20]
 80190ae:	2d09      	cmp	r5, #9
 80190b0:	f04f 0301 	mov.w	r3, #1
 80190b4:	6103      	str	r3, [r0, #16]
 80190b6:	dd16      	ble.n	80190e6 <__s2b+0x72>
 80190b8:	f104 0909 	add.w	r9, r4, #9
 80190bc:	46c8      	mov	r8, r9
 80190be:	442c      	add	r4, r5
 80190c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80190c4:	4601      	mov	r1, r0
 80190c6:	3b30      	subs	r3, #48	; 0x30
 80190c8:	220a      	movs	r2, #10
 80190ca:	4630      	mov	r0, r6
 80190cc:	f7ff ff88 	bl	8018fe0 <__multadd>
 80190d0:	45a0      	cmp	r8, r4
 80190d2:	d1f5      	bne.n	80190c0 <__s2b+0x4c>
 80190d4:	f1a5 0408 	sub.w	r4, r5, #8
 80190d8:	444c      	add	r4, r9
 80190da:	1b2d      	subs	r5, r5, r4
 80190dc:	1963      	adds	r3, r4, r5
 80190de:	42bb      	cmp	r3, r7
 80190e0:	db04      	blt.n	80190ec <__s2b+0x78>
 80190e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80190e6:	340a      	adds	r4, #10
 80190e8:	2509      	movs	r5, #9
 80190ea:	e7f6      	b.n	80190da <__s2b+0x66>
 80190ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80190f0:	4601      	mov	r1, r0
 80190f2:	3b30      	subs	r3, #48	; 0x30
 80190f4:	220a      	movs	r2, #10
 80190f6:	4630      	mov	r0, r6
 80190f8:	f7ff ff72 	bl	8018fe0 <__multadd>
 80190fc:	e7ee      	b.n	80190dc <__s2b+0x68>
 80190fe:	bf00      	nop
 8019100:	0801caf5 	.word	0x0801caf5
 8019104:	0801cb84 	.word	0x0801cb84

08019108 <__hi0bits>:
 8019108:	0c03      	lsrs	r3, r0, #16
 801910a:	041b      	lsls	r3, r3, #16
 801910c:	b9d3      	cbnz	r3, 8019144 <__hi0bits+0x3c>
 801910e:	0400      	lsls	r0, r0, #16
 8019110:	2310      	movs	r3, #16
 8019112:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019116:	bf04      	itt	eq
 8019118:	0200      	lsleq	r0, r0, #8
 801911a:	3308      	addeq	r3, #8
 801911c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019120:	bf04      	itt	eq
 8019122:	0100      	lsleq	r0, r0, #4
 8019124:	3304      	addeq	r3, #4
 8019126:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801912a:	bf04      	itt	eq
 801912c:	0080      	lsleq	r0, r0, #2
 801912e:	3302      	addeq	r3, #2
 8019130:	2800      	cmp	r0, #0
 8019132:	db05      	blt.n	8019140 <__hi0bits+0x38>
 8019134:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019138:	f103 0301 	add.w	r3, r3, #1
 801913c:	bf08      	it	eq
 801913e:	2320      	moveq	r3, #32
 8019140:	4618      	mov	r0, r3
 8019142:	4770      	bx	lr
 8019144:	2300      	movs	r3, #0
 8019146:	e7e4      	b.n	8019112 <__hi0bits+0xa>

08019148 <__lo0bits>:
 8019148:	6803      	ldr	r3, [r0, #0]
 801914a:	f013 0207 	ands.w	r2, r3, #7
 801914e:	4601      	mov	r1, r0
 8019150:	d00b      	beq.n	801916a <__lo0bits+0x22>
 8019152:	07da      	lsls	r2, r3, #31
 8019154:	d424      	bmi.n	80191a0 <__lo0bits+0x58>
 8019156:	0798      	lsls	r0, r3, #30
 8019158:	bf49      	itett	mi
 801915a:	085b      	lsrmi	r3, r3, #1
 801915c:	089b      	lsrpl	r3, r3, #2
 801915e:	2001      	movmi	r0, #1
 8019160:	600b      	strmi	r3, [r1, #0]
 8019162:	bf5c      	itt	pl
 8019164:	600b      	strpl	r3, [r1, #0]
 8019166:	2002      	movpl	r0, #2
 8019168:	4770      	bx	lr
 801916a:	b298      	uxth	r0, r3
 801916c:	b9b0      	cbnz	r0, 801919c <__lo0bits+0x54>
 801916e:	0c1b      	lsrs	r3, r3, #16
 8019170:	2010      	movs	r0, #16
 8019172:	f013 0fff 	tst.w	r3, #255	; 0xff
 8019176:	bf04      	itt	eq
 8019178:	0a1b      	lsreq	r3, r3, #8
 801917a:	3008      	addeq	r0, #8
 801917c:	071a      	lsls	r2, r3, #28
 801917e:	bf04      	itt	eq
 8019180:	091b      	lsreq	r3, r3, #4
 8019182:	3004      	addeq	r0, #4
 8019184:	079a      	lsls	r2, r3, #30
 8019186:	bf04      	itt	eq
 8019188:	089b      	lsreq	r3, r3, #2
 801918a:	3002      	addeq	r0, #2
 801918c:	07da      	lsls	r2, r3, #31
 801918e:	d403      	bmi.n	8019198 <__lo0bits+0x50>
 8019190:	085b      	lsrs	r3, r3, #1
 8019192:	f100 0001 	add.w	r0, r0, #1
 8019196:	d005      	beq.n	80191a4 <__lo0bits+0x5c>
 8019198:	600b      	str	r3, [r1, #0]
 801919a:	4770      	bx	lr
 801919c:	4610      	mov	r0, r2
 801919e:	e7e8      	b.n	8019172 <__lo0bits+0x2a>
 80191a0:	2000      	movs	r0, #0
 80191a2:	4770      	bx	lr
 80191a4:	2020      	movs	r0, #32
 80191a6:	4770      	bx	lr

080191a8 <__i2b>:
 80191a8:	b510      	push	{r4, lr}
 80191aa:	460c      	mov	r4, r1
 80191ac:	2101      	movs	r1, #1
 80191ae:	f7ff feb5 	bl	8018f1c <_Balloc>
 80191b2:	4602      	mov	r2, r0
 80191b4:	b928      	cbnz	r0, 80191c2 <__i2b+0x1a>
 80191b6:	4b05      	ldr	r3, [pc, #20]	; (80191cc <__i2b+0x24>)
 80191b8:	4805      	ldr	r0, [pc, #20]	; (80191d0 <__i2b+0x28>)
 80191ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80191be:	f7fe fa1f 	bl	8017600 <__assert_func>
 80191c2:	2301      	movs	r3, #1
 80191c4:	6144      	str	r4, [r0, #20]
 80191c6:	6103      	str	r3, [r0, #16]
 80191c8:	bd10      	pop	{r4, pc}
 80191ca:	bf00      	nop
 80191cc:	0801caf5 	.word	0x0801caf5
 80191d0:	0801cb84 	.word	0x0801cb84

080191d4 <__multiply>:
 80191d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191d8:	4614      	mov	r4, r2
 80191da:	690a      	ldr	r2, [r1, #16]
 80191dc:	6923      	ldr	r3, [r4, #16]
 80191de:	429a      	cmp	r2, r3
 80191e0:	bfb8      	it	lt
 80191e2:	460b      	movlt	r3, r1
 80191e4:	460d      	mov	r5, r1
 80191e6:	bfbc      	itt	lt
 80191e8:	4625      	movlt	r5, r4
 80191ea:	461c      	movlt	r4, r3
 80191ec:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80191f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80191f4:	68ab      	ldr	r3, [r5, #8]
 80191f6:	6869      	ldr	r1, [r5, #4]
 80191f8:	eb0a 0709 	add.w	r7, sl, r9
 80191fc:	42bb      	cmp	r3, r7
 80191fe:	b085      	sub	sp, #20
 8019200:	bfb8      	it	lt
 8019202:	3101      	addlt	r1, #1
 8019204:	f7ff fe8a 	bl	8018f1c <_Balloc>
 8019208:	b930      	cbnz	r0, 8019218 <__multiply+0x44>
 801920a:	4602      	mov	r2, r0
 801920c:	4b42      	ldr	r3, [pc, #264]	; (8019318 <__multiply+0x144>)
 801920e:	4843      	ldr	r0, [pc, #268]	; (801931c <__multiply+0x148>)
 8019210:	f240 115d 	movw	r1, #349	; 0x15d
 8019214:	f7fe f9f4 	bl	8017600 <__assert_func>
 8019218:	f100 0614 	add.w	r6, r0, #20
 801921c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8019220:	4633      	mov	r3, r6
 8019222:	2200      	movs	r2, #0
 8019224:	4543      	cmp	r3, r8
 8019226:	d31e      	bcc.n	8019266 <__multiply+0x92>
 8019228:	f105 0c14 	add.w	ip, r5, #20
 801922c:	f104 0314 	add.w	r3, r4, #20
 8019230:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8019234:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8019238:	9202      	str	r2, [sp, #8]
 801923a:	ebac 0205 	sub.w	r2, ip, r5
 801923e:	3a15      	subs	r2, #21
 8019240:	f022 0203 	bic.w	r2, r2, #3
 8019244:	3204      	adds	r2, #4
 8019246:	f105 0115 	add.w	r1, r5, #21
 801924a:	458c      	cmp	ip, r1
 801924c:	bf38      	it	cc
 801924e:	2204      	movcc	r2, #4
 8019250:	9201      	str	r2, [sp, #4]
 8019252:	9a02      	ldr	r2, [sp, #8]
 8019254:	9303      	str	r3, [sp, #12]
 8019256:	429a      	cmp	r2, r3
 8019258:	d808      	bhi.n	801926c <__multiply+0x98>
 801925a:	2f00      	cmp	r7, #0
 801925c:	dc55      	bgt.n	801930a <__multiply+0x136>
 801925e:	6107      	str	r7, [r0, #16]
 8019260:	b005      	add	sp, #20
 8019262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019266:	f843 2b04 	str.w	r2, [r3], #4
 801926a:	e7db      	b.n	8019224 <__multiply+0x50>
 801926c:	f8b3 a000 	ldrh.w	sl, [r3]
 8019270:	f1ba 0f00 	cmp.w	sl, #0
 8019274:	d020      	beq.n	80192b8 <__multiply+0xe4>
 8019276:	f105 0e14 	add.w	lr, r5, #20
 801927a:	46b1      	mov	r9, r6
 801927c:	2200      	movs	r2, #0
 801927e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8019282:	f8d9 b000 	ldr.w	fp, [r9]
 8019286:	b2a1      	uxth	r1, r4
 8019288:	fa1f fb8b 	uxth.w	fp, fp
 801928c:	fb0a b101 	mla	r1, sl, r1, fp
 8019290:	4411      	add	r1, r2
 8019292:	f8d9 2000 	ldr.w	r2, [r9]
 8019296:	0c24      	lsrs	r4, r4, #16
 8019298:	0c12      	lsrs	r2, r2, #16
 801929a:	fb0a 2404 	mla	r4, sl, r4, r2
 801929e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80192a2:	b289      	uxth	r1, r1
 80192a4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80192a8:	45f4      	cmp	ip, lr
 80192aa:	f849 1b04 	str.w	r1, [r9], #4
 80192ae:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80192b2:	d8e4      	bhi.n	801927e <__multiply+0xaa>
 80192b4:	9901      	ldr	r1, [sp, #4]
 80192b6:	5072      	str	r2, [r6, r1]
 80192b8:	9a03      	ldr	r2, [sp, #12]
 80192ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80192be:	3304      	adds	r3, #4
 80192c0:	f1b9 0f00 	cmp.w	r9, #0
 80192c4:	d01f      	beq.n	8019306 <__multiply+0x132>
 80192c6:	6834      	ldr	r4, [r6, #0]
 80192c8:	f105 0114 	add.w	r1, r5, #20
 80192cc:	46b6      	mov	lr, r6
 80192ce:	f04f 0a00 	mov.w	sl, #0
 80192d2:	880a      	ldrh	r2, [r1, #0]
 80192d4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80192d8:	fb09 b202 	mla	r2, r9, r2, fp
 80192dc:	4492      	add	sl, r2
 80192de:	b2a4      	uxth	r4, r4
 80192e0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80192e4:	f84e 4b04 	str.w	r4, [lr], #4
 80192e8:	f851 4b04 	ldr.w	r4, [r1], #4
 80192ec:	f8be 2000 	ldrh.w	r2, [lr]
 80192f0:	0c24      	lsrs	r4, r4, #16
 80192f2:	fb09 2404 	mla	r4, r9, r4, r2
 80192f6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80192fa:	458c      	cmp	ip, r1
 80192fc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8019300:	d8e7      	bhi.n	80192d2 <__multiply+0xfe>
 8019302:	9a01      	ldr	r2, [sp, #4]
 8019304:	50b4      	str	r4, [r6, r2]
 8019306:	3604      	adds	r6, #4
 8019308:	e7a3      	b.n	8019252 <__multiply+0x7e>
 801930a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801930e:	2b00      	cmp	r3, #0
 8019310:	d1a5      	bne.n	801925e <__multiply+0x8a>
 8019312:	3f01      	subs	r7, #1
 8019314:	e7a1      	b.n	801925a <__multiply+0x86>
 8019316:	bf00      	nop
 8019318:	0801caf5 	.word	0x0801caf5
 801931c:	0801cb84 	.word	0x0801cb84

08019320 <__pow5mult>:
 8019320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019324:	4615      	mov	r5, r2
 8019326:	f012 0203 	ands.w	r2, r2, #3
 801932a:	4606      	mov	r6, r0
 801932c:	460f      	mov	r7, r1
 801932e:	d007      	beq.n	8019340 <__pow5mult+0x20>
 8019330:	4c25      	ldr	r4, [pc, #148]	; (80193c8 <__pow5mult+0xa8>)
 8019332:	3a01      	subs	r2, #1
 8019334:	2300      	movs	r3, #0
 8019336:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801933a:	f7ff fe51 	bl	8018fe0 <__multadd>
 801933e:	4607      	mov	r7, r0
 8019340:	10ad      	asrs	r5, r5, #2
 8019342:	d03d      	beq.n	80193c0 <__pow5mult+0xa0>
 8019344:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8019346:	b97c      	cbnz	r4, 8019368 <__pow5mult+0x48>
 8019348:	2010      	movs	r0, #16
 801934a:	f7fb fac5 	bl	80148d8 <malloc>
 801934e:	4602      	mov	r2, r0
 8019350:	6270      	str	r0, [r6, #36]	; 0x24
 8019352:	b928      	cbnz	r0, 8019360 <__pow5mult+0x40>
 8019354:	4b1d      	ldr	r3, [pc, #116]	; (80193cc <__pow5mult+0xac>)
 8019356:	481e      	ldr	r0, [pc, #120]	; (80193d0 <__pow5mult+0xb0>)
 8019358:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801935c:	f7fe f950 	bl	8017600 <__assert_func>
 8019360:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019364:	6004      	str	r4, [r0, #0]
 8019366:	60c4      	str	r4, [r0, #12]
 8019368:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801936c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019370:	b94c      	cbnz	r4, 8019386 <__pow5mult+0x66>
 8019372:	f240 2171 	movw	r1, #625	; 0x271
 8019376:	4630      	mov	r0, r6
 8019378:	f7ff ff16 	bl	80191a8 <__i2b>
 801937c:	2300      	movs	r3, #0
 801937e:	f8c8 0008 	str.w	r0, [r8, #8]
 8019382:	4604      	mov	r4, r0
 8019384:	6003      	str	r3, [r0, #0]
 8019386:	f04f 0900 	mov.w	r9, #0
 801938a:	07eb      	lsls	r3, r5, #31
 801938c:	d50a      	bpl.n	80193a4 <__pow5mult+0x84>
 801938e:	4639      	mov	r1, r7
 8019390:	4622      	mov	r2, r4
 8019392:	4630      	mov	r0, r6
 8019394:	f7ff ff1e 	bl	80191d4 <__multiply>
 8019398:	4639      	mov	r1, r7
 801939a:	4680      	mov	r8, r0
 801939c:	4630      	mov	r0, r6
 801939e:	f7ff fdfd 	bl	8018f9c <_Bfree>
 80193a2:	4647      	mov	r7, r8
 80193a4:	106d      	asrs	r5, r5, #1
 80193a6:	d00b      	beq.n	80193c0 <__pow5mult+0xa0>
 80193a8:	6820      	ldr	r0, [r4, #0]
 80193aa:	b938      	cbnz	r0, 80193bc <__pow5mult+0x9c>
 80193ac:	4622      	mov	r2, r4
 80193ae:	4621      	mov	r1, r4
 80193b0:	4630      	mov	r0, r6
 80193b2:	f7ff ff0f 	bl	80191d4 <__multiply>
 80193b6:	6020      	str	r0, [r4, #0]
 80193b8:	f8c0 9000 	str.w	r9, [r0]
 80193bc:	4604      	mov	r4, r0
 80193be:	e7e4      	b.n	801938a <__pow5mult+0x6a>
 80193c0:	4638      	mov	r0, r7
 80193c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80193c6:	bf00      	nop
 80193c8:	0801ccd8 	.word	0x0801ccd8
 80193cc:	0801c7f0 	.word	0x0801c7f0
 80193d0:	0801cb84 	.word	0x0801cb84

080193d4 <__lshift>:
 80193d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80193d8:	460c      	mov	r4, r1
 80193da:	6849      	ldr	r1, [r1, #4]
 80193dc:	6923      	ldr	r3, [r4, #16]
 80193de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80193e2:	68a3      	ldr	r3, [r4, #8]
 80193e4:	4607      	mov	r7, r0
 80193e6:	4691      	mov	r9, r2
 80193e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80193ec:	f108 0601 	add.w	r6, r8, #1
 80193f0:	42b3      	cmp	r3, r6
 80193f2:	db0b      	blt.n	801940c <__lshift+0x38>
 80193f4:	4638      	mov	r0, r7
 80193f6:	f7ff fd91 	bl	8018f1c <_Balloc>
 80193fa:	4605      	mov	r5, r0
 80193fc:	b948      	cbnz	r0, 8019412 <__lshift+0x3e>
 80193fe:	4602      	mov	r2, r0
 8019400:	4b28      	ldr	r3, [pc, #160]	; (80194a4 <__lshift+0xd0>)
 8019402:	4829      	ldr	r0, [pc, #164]	; (80194a8 <__lshift+0xd4>)
 8019404:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019408:	f7fe f8fa 	bl	8017600 <__assert_func>
 801940c:	3101      	adds	r1, #1
 801940e:	005b      	lsls	r3, r3, #1
 8019410:	e7ee      	b.n	80193f0 <__lshift+0x1c>
 8019412:	2300      	movs	r3, #0
 8019414:	f100 0114 	add.w	r1, r0, #20
 8019418:	f100 0210 	add.w	r2, r0, #16
 801941c:	4618      	mov	r0, r3
 801941e:	4553      	cmp	r3, sl
 8019420:	db33      	blt.n	801948a <__lshift+0xb6>
 8019422:	6920      	ldr	r0, [r4, #16]
 8019424:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019428:	f104 0314 	add.w	r3, r4, #20
 801942c:	f019 091f 	ands.w	r9, r9, #31
 8019430:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019434:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019438:	d02b      	beq.n	8019492 <__lshift+0xbe>
 801943a:	f1c9 0e20 	rsb	lr, r9, #32
 801943e:	468a      	mov	sl, r1
 8019440:	2200      	movs	r2, #0
 8019442:	6818      	ldr	r0, [r3, #0]
 8019444:	fa00 f009 	lsl.w	r0, r0, r9
 8019448:	4302      	orrs	r2, r0
 801944a:	f84a 2b04 	str.w	r2, [sl], #4
 801944e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019452:	459c      	cmp	ip, r3
 8019454:	fa22 f20e 	lsr.w	r2, r2, lr
 8019458:	d8f3      	bhi.n	8019442 <__lshift+0x6e>
 801945a:	ebac 0304 	sub.w	r3, ip, r4
 801945e:	3b15      	subs	r3, #21
 8019460:	f023 0303 	bic.w	r3, r3, #3
 8019464:	3304      	adds	r3, #4
 8019466:	f104 0015 	add.w	r0, r4, #21
 801946a:	4584      	cmp	ip, r0
 801946c:	bf38      	it	cc
 801946e:	2304      	movcc	r3, #4
 8019470:	50ca      	str	r2, [r1, r3]
 8019472:	b10a      	cbz	r2, 8019478 <__lshift+0xa4>
 8019474:	f108 0602 	add.w	r6, r8, #2
 8019478:	3e01      	subs	r6, #1
 801947a:	4638      	mov	r0, r7
 801947c:	612e      	str	r6, [r5, #16]
 801947e:	4621      	mov	r1, r4
 8019480:	f7ff fd8c 	bl	8018f9c <_Bfree>
 8019484:	4628      	mov	r0, r5
 8019486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801948a:	f842 0f04 	str.w	r0, [r2, #4]!
 801948e:	3301      	adds	r3, #1
 8019490:	e7c5      	b.n	801941e <__lshift+0x4a>
 8019492:	3904      	subs	r1, #4
 8019494:	f853 2b04 	ldr.w	r2, [r3], #4
 8019498:	f841 2f04 	str.w	r2, [r1, #4]!
 801949c:	459c      	cmp	ip, r3
 801949e:	d8f9      	bhi.n	8019494 <__lshift+0xc0>
 80194a0:	e7ea      	b.n	8019478 <__lshift+0xa4>
 80194a2:	bf00      	nop
 80194a4:	0801caf5 	.word	0x0801caf5
 80194a8:	0801cb84 	.word	0x0801cb84

080194ac <__mcmp>:
 80194ac:	b530      	push	{r4, r5, lr}
 80194ae:	6902      	ldr	r2, [r0, #16]
 80194b0:	690c      	ldr	r4, [r1, #16]
 80194b2:	1b12      	subs	r2, r2, r4
 80194b4:	d10e      	bne.n	80194d4 <__mcmp+0x28>
 80194b6:	f100 0314 	add.w	r3, r0, #20
 80194ba:	3114      	adds	r1, #20
 80194bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80194c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80194c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80194c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80194cc:	42a5      	cmp	r5, r4
 80194ce:	d003      	beq.n	80194d8 <__mcmp+0x2c>
 80194d0:	d305      	bcc.n	80194de <__mcmp+0x32>
 80194d2:	2201      	movs	r2, #1
 80194d4:	4610      	mov	r0, r2
 80194d6:	bd30      	pop	{r4, r5, pc}
 80194d8:	4283      	cmp	r3, r0
 80194da:	d3f3      	bcc.n	80194c4 <__mcmp+0x18>
 80194dc:	e7fa      	b.n	80194d4 <__mcmp+0x28>
 80194de:	f04f 32ff 	mov.w	r2, #4294967295
 80194e2:	e7f7      	b.n	80194d4 <__mcmp+0x28>

080194e4 <__mdiff>:
 80194e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194e8:	460c      	mov	r4, r1
 80194ea:	4606      	mov	r6, r0
 80194ec:	4611      	mov	r1, r2
 80194ee:	4620      	mov	r0, r4
 80194f0:	4617      	mov	r7, r2
 80194f2:	f7ff ffdb 	bl	80194ac <__mcmp>
 80194f6:	1e05      	subs	r5, r0, #0
 80194f8:	d110      	bne.n	801951c <__mdiff+0x38>
 80194fa:	4629      	mov	r1, r5
 80194fc:	4630      	mov	r0, r6
 80194fe:	f7ff fd0d 	bl	8018f1c <_Balloc>
 8019502:	b930      	cbnz	r0, 8019512 <__mdiff+0x2e>
 8019504:	4b39      	ldr	r3, [pc, #228]	; (80195ec <__mdiff+0x108>)
 8019506:	4602      	mov	r2, r0
 8019508:	f240 2132 	movw	r1, #562	; 0x232
 801950c:	4838      	ldr	r0, [pc, #224]	; (80195f0 <__mdiff+0x10c>)
 801950e:	f7fe f877 	bl	8017600 <__assert_func>
 8019512:	2301      	movs	r3, #1
 8019514:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019518:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801951c:	bfa4      	itt	ge
 801951e:	463b      	movge	r3, r7
 8019520:	4627      	movge	r7, r4
 8019522:	4630      	mov	r0, r6
 8019524:	6879      	ldr	r1, [r7, #4]
 8019526:	bfa6      	itte	ge
 8019528:	461c      	movge	r4, r3
 801952a:	2500      	movge	r5, #0
 801952c:	2501      	movlt	r5, #1
 801952e:	f7ff fcf5 	bl	8018f1c <_Balloc>
 8019532:	b920      	cbnz	r0, 801953e <__mdiff+0x5a>
 8019534:	4b2d      	ldr	r3, [pc, #180]	; (80195ec <__mdiff+0x108>)
 8019536:	4602      	mov	r2, r0
 8019538:	f44f 7110 	mov.w	r1, #576	; 0x240
 801953c:	e7e6      	b.n	801950c <__mdiff+0x28>
 801953e:	693e      	ldr	r6, [r7, #16]
 8019540:	60c5      	str	r5, [r0, #12]
 8019542:	6925      	ldr	r5, [r4, #16]
 8019544:	f107 0114 	add.w	r1, r7, #20
 8019548:	f104 0914 	add.w	r9, r4, #20
 801954c:	f100 0e14 	add.w	lr, r0, #20
 8019550:	f107 0210 	add.w	r2, r7, #16
 8019554:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8019558:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801955c:	46f2      	mov	sl, lr
 801955e:	2700      	movs	r7, #0
 8019560:	f859 3b04 	ldr.w	r3, [r9], #4
 8019564:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019568:	fa1f f883 	uxth.w	r8, r3
 801956c:	fa17 f78b 	uxtah	r7, r7, fp
 8019570:	0c1b      	lsrs	r3, r3, #16
 8019572:	eba7 0808 	sub.w	r8, r7, r8
 8019576:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801957a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801957e:	fa1f f888 	uxth.w	r8, r8
 8019582:	141f      	asrs	r7, r3, #16
 8019584:	454d      	cmp	r5, r9
 8019586:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801958a:	f84a 3b04 	str.w	r3, [sl], #4
 801958e:	d8e7      	bhi.n	8019560 <__mdiff+0x7c>
 8019590:	1b2b      	subs	r3, r5, r4
 8019592:	3b15      	subs	r3, #21
 8019594:	f023 0303 	bic.w	r3, r3, #3
 8019598:	3304      	adds	r3, #4
 801959a:	3415      	adds	r4, #21
 801959c:	42a5      	cmp	r5, r4
 801959e:	bf38      	it	cc
 80195a0:	2304      	movcc	r3, #4
 80195a2:	4419      	add	r1, r3
 80195a4:	4473      	add	r3, lr
 80195a6:	469e      	mov	lr, r3
 80195a8:	460d      	mov	r5, r1
 80195aa:	4565      	cmp	r5, ip
 80195ac:	d30e      	bcc.n	80195cc <__mdiff+0xe8>
 80195ae:	f10c 0203 	add.w	r2, ip, #3
 80195b2:	1a52      	subs	r2, r2, r1
 80195b4:	f022 0203 	bic.w	r2, r2, #3
 80195b8:	3903      	subs	r1, #3
 80195ba:	458c      	cmp	ip, r1
 80195bc:	bf38      	it	cc
 80195be:	2200      	movcc	r2, #0
 80195c0:	441a      	add	r2, r3
 80195c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80195c6:	b17b      	cbz	r3, 80195e8 <__mdiff+0x104>
 80195c8:	6106      	str	r6, [r0, #16]
 80195ca:	e7a5      	b.n	8019518 <__mdiff+0x34>
 80195cc:	f855 8b04 	ldr.w	r8, [r5], #4
 80195d0:	fa17 f488 	uxtah	r4, r7, r8
 80195d4:	1422      	asrs	r2, r4, #16
 80195d6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80195da:	b2a4      	uxth	r4, r4
 80195dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80195e0:	f84e 4b04 	str.w	r4, [lr], #4
 80195e4:	1417      	asrs	r7, r2, #16
 80195e6:	e7e0      	b.n	80195aa <__mdiff+0xc6>
 80195e8:	3e01      	subs	r6, #1
 80195ea:	e7ea      	b.n	80195c2 <__mdiff+0xde>
 80195ec:	0801caf5 	.word	0x0801caf5
 80195f0:	0801cb84 	.word	0x0801cb84

080195f4 <__ulp>:
 80195f4:	b082      	sub	sp, #8
 80195f6:	ed8d 0b00 	vstr	d0, [sp]
 80195fa:	9b01      	ldr	r3, [sp, #4]
 80195fc:	4912      	ldr	r1, [pc, #72]	; (8019648 <__ulp+0x54>)
 80195fe:	4019      	ands	r1, r3
 8019600:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8019604:	2900      	cmp	r1, #0
 8019606:	dd05      	ble.n	8019614 <__ulp+0x20>
 8019608:	2200      	movs	r2, #0
 801960a:	460b      	mov	r3, r1
 801960c:	ec43 2b10 	vmov	d0, r2, r3
 8019610:	b002      	add	sp, #8
 8019612:	4770      	bx	lr
 8019614:	4249      	negs	r1, r1
 8019616:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801961a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801961e:	f04f 0200 	mov.w	r2, #0
 8019622:	f04f 0300 	mov.w	r3, #0
 8019626:	da04      	bge.n	8019632 <__ulp+0x3e>
 8019628:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801962c:	fa41 f300 	asr.w	r3, r1, r0
 8019630:	e7ec      	b.n	801960c <__ulp+0x18>
 8019632:	f1a0 0114 	sub.w	r1, r0, #20
 8019636:	291e      	cmp	r1, #30
 8019638:	bfda      	itte	le
 801963a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801963e:	fa20 f101 	lsrle.w	r1, r0, r1
 8019642:	2101      	movgt	r1, #1
 8019644:	460a      	mov	r2, r1
 8019646:	e7e1      	b.n	801960c <__ulp+0x18>
 8019648:	7ff00000 	.word	0x7ff00000

0801964c <__b2d>:
 801964c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801964e:	6905      	ldr	r5, [r0, #16]
 8019650:	f100 0714 	add.w	r7, r0, #20
 8019654:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019658:	1f2e      	subs	r6, r5, #4
 801965a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801965e:	4620      	mov	r0, r4
 8019660:	f7ff fd52 	bl	8019108 <__hi0bits>
 8019664:	f1c0 0320 	rsb	r3, r0, #32
 8019668:	280a      	cmp	r0, #10
 801966a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80196e8 <__b2d+0x9c>
 801966e:	600b      	str	r3, [r1, #0]
 8019670:	dc14      	bgt.n	801969c <__b2d+0x50>
 8019672:	f1c0 0e0b 	rsb	lr, r0, #11
 8019676:	fa24 f10e 	lsr.w	r1, r4, lr
 801967a:	42b7      	cmp	r7, r6
 801967c:	ea41 030c 	orr.w	r3, r1, ip
 8019680:	bf34      	ite	cc
 8019682:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019686:	2100      	movcs	r1, #0
 8019688:	3015      	adds	r0, #21
 801968a:	fa04 f000 	lsl.w	r0, r4, r0
 801968e:	fa21 f10e 	lsr.w	r1, r1, lr
 8019692:	ea40 0201 	orr.w	r2, r0, r1
 8019696:	ec43 2b10 	vmov	d0, r2, r3
 801969a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801969c:	42b7      	cmp	r7, r6
 801969e:	bf3a      	itte	cc
 80196a0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80196a4:	f1a5 0608 	subcc.w	r6, r5, #8
 80196a8:	2100      	movcs	r1, #0
 80196aa:	380b      	subs	r0, #11
 80196ac:	d017      	beq.n	80196de <__b2d+0x92>
 80196ae:	f1c0 0c20 	rsb	ip, r0, #32
 80196b2:	fa04 f500 	lsl.w	r5, r4, r0
 80196b6:	42be      	cmp	r6, r7
 80196b8:	fa21 f40c 	lsr.w	r4, r1, ip
 80196bc:	ea45 0504 	orr.w	r5, r5, r4
 80196c0:	bf8c      	ite	hi
 80196c2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80196c6:	2400      	movls	r4, #0
 80196c8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80196cc:	fa01 f000 	lsl.w	r0, r1, r0
 80196d0:	fa24 f40c 	lsr.w	r4, r4, ip
 80196d4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80196d8:	ea40 0204 	orr.w	r2, r0, r4
 80196dc:	e7db      	b.n	8019696 <__b2d+0x4a>
 80196de:	ea44 030c 	orr.w	r3, r4, ip
 80196e2:	460a      	mov	r2, r1
 80196e4:	e7d7      	b.n	8019696 <__b2d+0x4a>
 80196e6:	bf00      	nop
 80196e8:	3ff00000 	.word	0x3ff00000

080196ec <__d2b>:
 80196ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80196f0:	4689      	mov	r9, r1
 80196f2:	2101      	movs	r1, #1
 80196f4:	ec57 6b10 	vmov	r6, r7, d0
 80196f8:	4690      	mov	r8, r2
 80196fa:	f7ff fc0f 	bl	8018f1c <_Balloc>
 80196fe:	4604      	mov	r4, r0
 8019700:	b930      	cbnz	r0, 8019710 <__d2b+0x24>
 8019702:	4602      	mov	r2, r0
 8019704:	4b25      	ldr	r3, [pc, #148]	; (801979c <__d2b+0xb0>)
 8019706:	4826      	ldr	r0, [pc, #152]	; (80197a0 <__d2b+0xb4>)
 8019708:	f240 310a 	movw	r1, #778	; 0x30a
 801970c:	f7fd ff78 	bl	8017600 <__assert_func>
 8019710:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019714:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019718:	bb35      	cbnz	r5, 8019768 <__d2b+0x7c>
 801971a:	2e00      	cmp	r6, #0
 801971c:	9301      	str	r3, [sp, #4]
 801971e:	d028      	beq.n	8019772 <__d2b+0x86>
 8019720:	4668      	mov	r0, sp
 8019722:	9600      	str	r6, [sp, #0]
 8019724:	f7ff fd10 	bl	8019148 <__lo0bits>
 8019728:	9900      	ldr	r1, [sp, #0]
 801972a:	b300      	cbz	r0, 801976e <__d2b+0x82>
 801972c:	9a01      	ldr	r2, [sp, #4]
 801972e:	f1c0 0320 	rsb	r3, r0, #32
 8019732:	fa02 f303 	lsl.w	r3, r2, r3
 8019736:	430b      	orrs	r3, r1
 8019738:	40c2      	lsrs	r2, r0
 801973a:	6163      	str	r3, [r4, #20]
 801973c:	9201      	str	r2, [sp, #4]
 801973e:	9b01      	ldr	r3, [sp, #4]
 8019740:	61a3      	str	r3, [r4, #24]
 8019742:	2b00      	cmp	r3, #0
 8019744:	bf14      	ite	ne
 8019746:	2202      	movne	r2, #2
 8019748:	2201      	moveq	r2, #1
 801974a:	6122      	str	r2, [r4, #16]
 801974c:	b1d5      	cbz	r5, 8019784 <__d2b+0x98>
 801974e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019752:	4405      	add	r5, r0
 8019754:	f8c9 5000 	str.w	r5, [r9]
 8019758:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801975c:	f8c8 0000 	str.w	r0, [r8]
 8019760:	4620      	mov	r0, r4
 8019762:	b003      	add	sp, #12
 8019764:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019768:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801976c:	e7d5      	b.n	801971a <__d2b+0x2e>
 801976e:	6161      	str	r1, [r4, #20]
 8019770:	e7e5      	b.n	801973e <__d2b+0x52>
 8019772:	a801      	add	r0, sp, #4
 8019774:	f7ff fce8 	bl	8019148 <__lo0bits>
 8019778:	9b01      	ldr	r3, [sp, #4]
 801977a:	6163      	str	r3, [r4, #20]
 801977c:	2201      	movs	r2, #1
 801977e:	6122      	str	r2, [r4, #16]
 8019780:	3020      	adds	r0, #32
 8019782:	e7e3      	b.n	801974c <__d2b+0x60>
 8019784:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019788:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801978c:	f8c9 0000 	str.w	r0, [r9]
 8019790:	6918      	ldr	r0, [r3, #16]
 8019792:	f7ff fcb9 	bl	8019108 <__hi0bits>
 8019796:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801979a:	e7df      	b.n	801975c <__d2b+0x70>
 801979c:	0801caf5 	.word	0x0801caf5
 80197a0:	0801cb84 	.word	0x0801cb84

080197a4 <__ratio>:
 80197a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197a8:	4688      	mov	r8, r1
 80197aa:	4669      	mov	r1, sp
 80197ac:	4681      	mov	r9, r0
 80197ae:	f7ff ff4d 	bl	801964c <__b2d>
 80197b2:	a901      	add	r1, sp, #4
 80197b4:	4640      	mov	r0, r8
 80197b6:	ec55 4b10 	vmov	r4, r5, d0
 80197ba:	f7ff ff47 	bl	801964c <__b2d>
 80197be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80197c2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80197c6:	eba3 0c02 	sub.w	ip, r3, r2
 80197ca:	e9dd 3200 	ldrd	r3, r2, [sp]
 80197ce:	1a9b      	subs	r3, r3, r2
 80197d0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80197d4:	ec51 0b10 	vmov	r0, r1, d0
 80197d8:	2b00      	cmp	r3, #0
 80197da:	bfd6      	itet	le
 80197dc:	460a      	movle	r2, r1
 80197de:	462a      	movgt	r2, r5
 80197e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80197e4:	468b      	mov	fp, r1
 80197e6:	462f      	mov	r7, r5
 80197e8:	bfd4      	ite	le
 80197ea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80197ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80197f2:	4620      	mov	r0, r4
 80197f4:	ee10 2a10 	vmov	r2, s0
 80197f8:	465b      	mov	r3, fp
 80197fa:	4639      	mov	r1, r7
 80197fc:	f7e7 f846 	bl	800088c <__aeabi_ddiv>
 8019800:	ec41 0b10 	vmov	d0, r0, r1
 8019804:	b003      	add	sp, #12
 8019806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801980a <__copybits>:
 801980a:	3901      	subs	r1, #1
 801980c:	b570      	push	{r4, r5, r6, lr}
 801980e:	1149      	asrs	r1, r1, #5
 8019810:	6914      	ldr	r4, [r2, #16]
 8019812:	3101      	adds	r1, #1
 8019814:	f102 0314 	add.w	r3, r2, #20
 8019818:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801981c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019820:	1f05      	subs	r5, r0, #4
 8019822:	42a3      	cmp	r3, r4
 8019824:	d30c      	bcc.n	8019840 <__copybits+0x36>
 8019826:	1aa3      	subs	r3, r4, r2
 8019828:	3b11      	subs	r3, #17
 801982a:	f023 0303 	bic.w	r3, r3, #3
 801982e:	3211      	adds	r2, #17
 8019830:	42a2      	cmp	r2, r4
 8019832:	bf88      	it	hi
 8019834:	2300      	movhi	r3, #0
 8019836:	4418      	add	r0, r3
 8019838:	2300      	movs	r3, #0
 801983a:	4288      	cmp	r0, r1
 801983c:	d305      	bcc.n	801984a <__copybits+0x40>
 801983e:	bd70      	pop	{r4, r5, r6, pc}
 8019840:	f853 6b04 	ldr.w	r6, [r3], #4
 8019844:	f845 6f04 	str.w	r6, [r5, #4]!
 8019848:	e7eb      	b.n	8019822 <__copybits+0x18>
 801984a:	f840 3b04 	str.w	r3, [r0], #4
 801984e:	e7f4      	b.n	801983a <__copybits+0x30>

08019850 <__any_on>:
 8019850:	f100 0214 	add.w	r2, r0, #20
 8019854:	6900      	ldr	r0, [r0, #16]
 8019856:	114b      	asrs	r3, r1, #5
 8019858:	4298      	cmp	r0, r3
 801985a:	b510      	push	{r4, lr}
 801985c:	db11      	blt.n	8019882 <__any_on+0x32>
 801985e:	dd0a      	ble.n	8019876 <__any_on+0x26>
 8019860:	f011 011f 	ands.w	r1, r1, #31
 8019864:	d007      	beq.n	8019876 <__any_on+0x26>
 8019866:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801986a:	fa24 f001 	lsr.w	r0, r4, r1
 801986e:	fa00 f101 	lsl.w	r1, r0, r1
 8019872:	428c      	cmp	r4, r1
 8019874:	d10b      	bne.n	801988e <__any_on+0x3e>
 8019876:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801987a:	4293      	cmp	r3, r2
 801987c:	d803      	bhi.n	8019886 <__any_on+0x36>
 801987e:	2000      	movs	r0, #0
 8019880:	bd10      	pop	{r4, pc}
 8019882:	4603      	mov	r3, r0
 8019884:	e7f7      	b.n	8019876 <__any_on+0x26>
 8019886:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801988a:	2900      	cmp	r1, #0
 801988c:	d0f5      	beq.n	801987a <__any_on+0x2a>
 801988e:	2001      	movs	r0, #1
 8019890:	e7f6      	b.n	8019880 <__any_on+0x30>

08019892 <_calloc_r>:
 8019892:	b513      	push	{r0, r1, r4, lr}
 8019894:	434a      	muls	r2, r1
 8019896:	4611      	mov	r1, r2
 8019898:	9201      	str	r2, [sp, #4]
 801989a:	f7fb fb2b 	bl	8014ef4 <_malloc_r>
 801989e:	4604      	mov	r4, r0
 80198a0:	b118      	cbz	r0, 80198aa <_calloc_r+0x18>
 80198a2:	9a01      	ldr	r2, [sp, #4]
 80198a4:	2100      	movs	r1, #0
 80198a6:	f7fb f84f 	bl	8014948 <memset>
 80198aa:	4620      	mov	r0, r4
 80198ac:	b002      	add	sp, #8
 80198ae:	bd10      	pop	{r4, pc}

080198b0 <_realloc_r>:
 80198b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198b2:	4607      	mov	r7, r0
 80198b4:	4614      	mov	r4, r2
 80198b6:	460e      	mov	r6, r1
 80198b8:	b921      	cbnz	r1, 80198c4 <_realloc_r+0x14>
 80198ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80198be:	4611      	mov	r1, r2
 80198c0:	f7fb bb18 	b.w	8014ef4 <_malloc_r>
 80198c4:	b922      	cbnz	r2, 80198d0 <_realloc_r+0x20>
 80198c6:	f7fb fac5 	bl	8014e54 <_free_r>
 80198ca:	4625      	mov	r5, r4
 80198cc:	4628      	mov	r0, r5
 80198ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80198d0:	f000 feaa 	bl	801a628 <_malloc_usable_size_r>
 80198d4:	42a0      	cmp	r0, r4
 80198d6:	d20f      	bcs.n	80198f8 <_realloc_r+0x48>
 80198d8:	4621      	mov	r1, r4
 80198da:	4638      	mov	r0, r7
 80198dc:	f7fb fb0a 	bl	8014ef4 <_malloc_r>
 80198e0:	4605      	mov	r5, r0
 80198e2:	2800      	cmp	r0, #0
 80198e4:	d0f2      	beq.n	80198cc <_realloc_r+0x1c>
 80198e6:	4631      	mov	r1, r6
 80198e8:	4622      	mov	r2, r4
 80198ea:	f7fb f805 	bl	80148f8 <memcpy>
 80198ee:	4631      	mov	r1, r6
 80198f0:	4638      	mov	r0, r7
 80198f2:	f7fb faaf 	bl	8014e54 <_free_r>
 80198f6:	e7e9      	b.n	80198cc <_realloc_r+0x1c>
 80198f8:	4635      	mov	r5, r6
 80198fa:	e7e7      	b.n	80198cc <_realloc_r+0x1c>

080198fc <__ssputs_r>:
 80198fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019900:	688e      	ldr	r6, [r1, #8]
 8019902:	429e      	cmp	r6, r3
 8019904:	4682      	mov	sl, r0
 8019906:	460c      	mov	r4, r1
 8019908:	4690      	mov	r8, r2
 801990a:	461f      	mov	r7, r3
 801990c:	d838      	bhi.n	8019980 <__ssputs_r+0x84>
 801990e:	898a      	ldrh	r2, [r1, #12]
 8019910:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019914:	d032      	beq.n	801997c <__ssputs_r+0x80>
 8019916:	6825      	ldr	r5, [r4, #0]
 8019918:	6909      	ldr	r1, [r1, #16]
 801991a:	eba5 0901 	sub.w	r9, r5, r1
 801991e:	6965      	ldr	r5, [r4, #20]
 8019920:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019924:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019928:	3301      	adds	r3, #1
 801992a:	444b      	add	r3, r9
 801992c:	106d      	asrs	r5, r5, #1
 801992e:	429d      	cmp	r5, r3
 8019930:	bf38      	it	cc
 8019932:	461d      	movcc	r5, r3
 8019934:	0553      	lsls	r3, r2, #21
 8019936:	d531      	bpl.n	801999c <__ssputs_r+0xa0>
 8019938:	4629      	mov	r1, r5
 801993a:	f7fb fadb 	bl	8014ef4 <_malloc_r>
 801993e:	4606      	mov	r6, r0
 8019940:	b950      	cbnz	r0, 8019958 <__ssputs_r+0x5c>
 8019942:	230c      	movs	r3, #12
 8019944:	f8ca 3000 	str.w	r3, [sl]
 8019948:	89a3      	ldrh	r3, [r4, #12]
 801994a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801994e:	81a3      	strh	r3, [r4, #12]
 8019950:	f04f 30ff 	mov.w	r0, #4294967295
 8019954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019958:	6921      	ldr	r1, [r4, #16]
 801995a:	464a      	mov	r2, r9
 801995c:	f7fa ffcc 	bl	80148f8 <memcpy>
 8019960:	89a3      	ldrh	r3, [r4, #12]
 8019962:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801996a:	81a3      	strh	r3, [r4, #12]
 801996c:	6126      	str	r6, [r4, #16]
 801996e:	6165      	str	r5, [r4, #20]
 8019970:	444e      	add	r6, r9
 8019972:	eba5 0509 	sub.w	r5, r5, r9
 8019976:	6026      	str	r6, [r4, #0]
 8019978:	60a5      	str	r5, [r4, #8]
 801997a:	463e      	mov	r6, r7
 801997c:	42be      	cmp	r6, r7
 801997e:	d900      	bls.n	8019982 <__ssputs_r+0x86>
 8019980:	463e      	mov	r6, r7
 8019982:	4632      	mov	r2, r6
 8019984:	6820      	ldr	r0, [r4, #0]
 8019986:	4641      	mov	r1, r8
 8019988:	f7fa ffc4 	bl	8014914 <memmove>
 801998c:	68a3      	ldr	r3, [r4, #8]
 801998e:	6822      	ldr	r2, [r4, #0]
 8019990:	1b9b      	subs	r3, r3, r6
 8019992:	4432      	add	r2, r6
 8019994:	60a3      	str	r3, [r4, #8]
 8019996:	6022      	str	r2, [r4, #0]
 8019998:	2000      	movs	r0, #0
 801999a:	e7db      	b.n	8019954 <__ssputs_r+0x58>
 801999c:	462a      	mov	r2, r5
 801999e:	f7ff ff87 	bl	80198b0 <_realloc_r>
 80199a2:	4606      	mov	r6, r0
 80199a4:	2800      	cmp	r0, #0
 80199a6:	d1e1      	bne.n	801996c <__ssputs_r+0x70>
 80199a8:	6921      	ldr	r1, [r4, #16]
 80199aa:	4650      	mov	r0, sl
 80199ac:	f7fb fa52 	bl	8014e54 <_free_r>
 80199b0:	e7c7      	b.n	8019942 <__ssputs_r+0x46>
	...

080199b4 <_svfiprintf_r>:
 80199b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199b8:	4698      	mov	r8, r3
 80199ba:	898b      	ldrh	r3, [r1, #12]
 80199bc:	061b      	lsls	r3, r3, #24
 80199be:	b09d      	sub	sp, #116	; 0x74
 80199c0:	4607      	mov	r7, r0
 80199c2:	460d      	mov	r5, r1
 80199c4:	4614      	mov	r4, r2
 80199c6:	d50e      	bpl.n	80199e6 <_svfiprintf_r+0x32>
 80199c8:	690b      	ldr	r3, [r1, #16]
 80199ca:	b963      	cbnz	r3, 80199e6 <_svfiprintf_r+0x32>
 80199cc:	2140      	movs	r1, #64	; 0x40
 80199ce:	f7fb fa91 	bl	8014ef4 <_malloc_r>
 80199d2:	6028      	str	r0, [r5, #0]
 80199d4:	6128      	str	r0, [r5, #16]
 80199d6:	b920      	cbnz	r0, 80199e2 <_svfiprintf_r+0x2e>
 80199d8:	230c      	movs	r3, #12
 80199da:	603b      	str	r3, [r7, #0]
 80199dc:	f04f 30ff 	mov.w	r0, #4294967295
 80199e0:	e0d1      	b.n	8019b86 <_svfiprintf_r+0x1d2>
 80199e2:	2340      	movs	r3, #64	; 0x40
 80199e4:	616b      	str	r3, [r5, #20]
 80199e6:	2300      	movs	r3, #0
 80199e8:	9309      	str	r3, [sp, #36]	; 0x24
 80199ea:	2320      	movs	r3, #32
 80199ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80199f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80199f4:	2330      	movs	r3, #48	; 0x30
 80199f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019ba0 <_svfiprintf_r+0x1ec>
 80199fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80199fe:	f04f 0901 	mov.w	r9, #1
 8019a02:	4623      	mov	r3, r4
 8019a04:	469a      	mov	sl, r3
 8019a06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019a0a:	b10a      	cbz	r2, 8019a10 <_svfiprintf_r+0x5c>
 8019a0c:	2a25      	cmp	r2, #37	; 0x25
 8019a0e:	d1f9      	bne.n	8019a04 <_svfiprintf_r+0x50>
 8019a10:	ebba 0b04 	subs.w	fp, sl, r4
 8019a14:	d00b      	beq.n	8019a2e <_svfiprintf_r+0x7a>
 8019a16:	465b      	mov	r3, fp
 8019a18:	4622      	mov	r2, r4
 8019a1a:	4629      	mov	r1, r5
 8019a1c:	4638      	mov	r0, r7
 8019a1e:	f7ff ff6d 	bl	80198fc <__ssputs_r>
 8019a22:	3001      	adds	r0, #1
 8019a24:	f000 80aa 	beq.w	8019b7c <_svfiprintf_r+0x1c8>
 8019a28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019a2a:	445a      	add	r2, fp
 8019a2c:	9209      	str	r2, [sp, #36]	; 0x24
 8019a2e:	f89a 3000 	ldrb.w	r3, [sl]
 8019a32:	2b00      	cmp	r3, #0
 8019a34:	f000 80a2 	beq.w	8019b7c <_svfiprintf_r+0x1c8>
 8019a38:	2300      	movs	r3, #0
 8019a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8019a3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019a42:	f10a 0a01 	add.w	sl, sl, #1
 8019a46:	9304      	str	r3, [sp, #16]
 8019a48:	9307      	str	r3, [sp, #28]
 8019a4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019a4e:	931a      	str	r3, [sp, #104]	; 0x68
 8019a50:	4654      	mov	r4, sl
 8019a52:	2205      	movs	r2, #5
 8019a54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019a58:	4851      	ldr	r0, [pc, #324]	; (8019ba0 <_svfiprintf_r+0x1ec>)
 8019a5a:	f7e6 fbe1 	bl	8000220 <memchr>
 8019a5e:	9a04      	ldr	r2, [sp, #16]
 8019a60:	b9d8      	cbnz	r0, 8019a9a <_svfiprintf_r+0xe6>
 8019a62:	06d0      	lsls	r0, r2, #27
 8019a64:	bf44      	itt	mi
 8019a66:	2320      	movmi	r3, #32
 8019a68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019a6c:	0711      	lsls	r1, r2, #28
 8019a6e:	bf44      	itt	mi
 8019a70:	232b      	movmi	r3, #43	; 0x2b
 8019a72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019a76:	f89a 3000 	ldrb.w	r3, [sl]
 8019a7a:	2b2a      	cmp	r3, #42	; 0x2a
 8019a7c:	d015      	beq.n	8019aaa <_svfiprintf_r+0xf6>
 8019a7e:	9a07      	ldr	r2, [sp, #28]
 8019a80:	4654      	mov	r4, sl
 8019a82:	2000      	movs	r0, #0
 8019a84:	f04f 0c0a 	mov.w	ip, #10
 8019a88:	4621      	mov	r1, r4
 8019a8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019a8e:	3b30      	subs	r3, #48	; 0x30
 8019a90:	2b09      	cmp	r3, #9
 8019a92:	d94e      	bls.n	8019b32 <_svfiprintf_r+0x17e>
 8019a94:	b1b0      	cbz	r0, 8019ac4 <_svfiprintf_r+0x110>
 8019a96:	9207      	str	r2, [sp, #28]
 8019a98:	e014      	b.n	8019ac4 <_svfiprintf_r+0x110>
 8019a9a:	eba0 0308 	sub.w	r3, r0, r8
 8019a9e:	fa09 f303 	lsl.w	r3, r9, r3
 8019aa2:	4313      	orrs	r3, r2
 8019aa4:	9304      	str	r3, [sp, #16]
 8019aa6:	46a2      	mov	sl, r4
 8019aa8:	e7d2      	b.n	8019a50 <_svfiprintf_r+0x9c>
 8019aaa:	9b03      	ldr	r3, [sp, #12]
 8019aac:	1d19      	adds	r1, r3, #4
 8019aae:	681b      	ldr	r3, [r3, #0]
 8019ab0:	9103      	str	r1, [sp, #12]
 8019ab2:	2b00      	cmp	r3, #0
 8019ab4:	bfbb      	ittet	lt
 8019ab6:	425b      	neglt	r3, r3
 8019ab8:	f042 0202 	orrlt.w	r2, r2, #2
 8019abc:	9307      	strge	r3, [sp, #28]
 8019abe:	9307      	strlt	r3, [sp, #28]
 8019ac0:	bfb8      	it	lt
 8019ac2:	9204      	strlt	r2, [sp, #16]
 8019ac4:	7823      	ldrb	r3, [r4, #0]
 8019ac6:	2b2e      	cmp	r3, #46	; 0x2e
 8019ac8:	d10c      	bne.n	8019ae4 <_svfiprintf_r+0x130>
 8019aca:	7863      	ldrb	r3, [r4, #1]
 8019acc:	2b2a      	cmp	r3, #42	; 0x2a
 8019ace:	d135      	bne.n	8019b3c <_svfiprintf_r+0x188>
 8019ad0:	9b03      	ldr	r3, [sp, #12]
 8019ad2:	1d1a      	adds	r2, r3, #4
 8019ad4:	681b      	ldr	r3, [r3, #0]
 8019ad6:	9203      	str	r2, [sp, #12]
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	bfb8      	it	lt
 8019adc:	f04f 33ff 	movlt.w	r3, #4294967295
 8019ae0:	3402      	adds	r4, #2
 8019ae2:	9305      	str	r3, [sp, #20]
 8019ae4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019bb0 <_svfiprintf_r+0x1fc>
 8019ae8:	7821      	ldrb	r1, [r4, #0]
 8019aea:	2203      	movs	r2, #3
 8019aec:	4650      	mov	r0, sl
 8019aee:	f7e6 fb97 	bl	8000220 <memchr>
 8019af2:	b140      	cbz	r0, 8019b06 <_svfiprintf_r+0x152>
 8019af4:	2340      	movs	r3, #64	; 0x40
 8019af6:	eba0 000a 	sub.w	r0, r0, sl
 8019afa:	fa03 f000 	lsl.w	r0, r3, r0
 8019afe:	9b04      	ldr	r3, [sp, #16]
 8019b00:	4303      	orrs	r3, r0
 8019b02:	3401      	adds	r4, #1
 8019b04:	9304      	str	r3, [sp, #16]
 8019b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019b0a:	4826      	ldr	r0, [pc, #152]	; (8019ba4 <_svfiprintf_r+0x1f0>)
 8019b0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019b10:	2206      	movs	r2, #6
 8019b12:	f7e6 fb85 	bl	8000220 <memchr>
 8019b16:	2800      	cmp	r0, #0
 8019b18:	d038      	beq.n	8019b8c <_svfiprintf_r+0x1d8>
 8019b1a:	4b23      	ldr	r3, [pc, #140]	; (8019ba8 <_svfiprintf_r+0x1f4>)
 8019b1c:	bb1b      	cbnz	r3, 8019b66 <_svfiprintf_r+0x1b2>
 8019b1e:	9b03      	ldr	r3, [sp, #12]
 8019b20:	3307      	adds	r3, #7
 8019b22:	f023 0307 	bic.w	r3, r3, #7
 8019b26:	3308      	adds	r3, #8
 8019b28:	9303      	str	r3, [sp, #12]
 8019b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019b2c:	4433      	add	r3, r6
 8019b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8019b30:	e767      	b.n	8019a02 <_svfiprintf_r+0x4e>
 8019b32:	fb0c 3202 	mla	r2, ip, r2, r3
 8019b36:	460c      	mov	r4, r1
 8019b38:	2001      	movs	r0, #1
 8019b3a:	e7a5      	b.n	8019a88 <_svfiprintf_r+0xd4>
 8019b3c:	2300      	movs	r3, #0
 8019b3e:	3401      	adds	r4, #1
 8019b40:	9305      	str	r3, [sp, #20]
 8019b42:	4619      	mov	r1, r3
 8019b44:	f04f 0c0a 	mov.w	ip, #10
 8019b48:	4620      	mov	r0, r4
 8019b4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019b4e:	3a30      	subs	r2, #48	; 0x30
 8019b50:	2a09      	cmp	r2, #9
 8019b52:	d903      	bls.n	8019b5c <_svfiprintf_r+0x1a8>
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	d0c5      	beq.n	8019ae4 <_svfiprintf_r+0x130>
 8019b58:	9105      	str	r1, [sp, #20]
 8019b5a:	e7c3      	b.n	8019ae4 <_svfiprintf_r+0x130>
 8019b5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8019b60:	4604      	mov	r4, r0
 8019b62:	2301      	movs	r3, #1
 8019b64:	e7f0      	b.n	8019b48 <_svfiprintf_r+0x194>
 8019b66:	ab03      	add	r3, sp, #12
 8019b68:	9300      	str	r3, [sp, #0]
 8019b6a:	462a      	mov	r2, r5
 8019b6c:	4b0f      	ldr	r3, [pc, #60]	; (8019bac <_svfiprintf_r+0x1f8>)
 8019b6e:	a904      	add	r1, sp, #16
 8019b70:	4638      	mov	r0, r7
 8019b72:	f7fb fab9 	bl	80150e8 <_printf_float>
 8019b76:	1c42      	adds	r2, r0, #1
 8019b78:	4606      	mov	r6, r0
 8019b7a:	d1d6      	bne.n	8019b2a <_svfiprintf_r+0x176>
 8019b7c:	89ab      	ldrh	r3, [r5, #12]
 8019b7e:	065b      	lsls	r3, r3, #25
 8019b80:	f53f af2c 	bmi.w	80199dc <_svfiprintf_r+0x28>
 8019b84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019b86:	b01d      	add	sp, #116	; 0x74
 8019b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b8c:	ab03      	add	r3, sp, #12
 8019b8e:	9300      	str	r3, [sp, #0]
 8019b90:	462a      	mov	r2, r5
 8019b92:	4b06      	ldr	r3, [pc, #24]	; (8019bac <_svfiprintf_r+0x1f8>)
 8019b94:	a904      	add	r1, sp, #16
 8019b96:	4638      	mov	r0, r7
 8019b98:	f7fb fd4a 	bl	8015630 <_printf_i>
 8019b9c:	e7eb      	b.n	8019b76 <_svfiprintf_r+0x1c2>
 8019b9e:	bf00      	nop
 8019ba0:	0801cce4 	.word	0x0801cce4
 8019ba4:	0801ccee 	.word	0x0801ccee
 8019ba8:	080150e9 	.word	0x080150e9
 8019bac:	080198fd 	.word	0x080198fd
 8019bb0:	0801ccea 	.word	0x0801ccea

08019bb4 <_sungetc_r>:
 8019bb4:	b538      	push	{r3, r4, r5, lr}
 8019bb6:	1c4b      	adds	r3, r1, #1
 8019bb8:	4614      	mov	r4, r2
 8019bba:	d103      	bne.n	8019bc4 <_sungetc_r+0x10>
 8019bbc:	f04f 35ff 	mov.w	r5, #4294967295
 8019bc0:	4628      	mov	r0, r5
 8019bc2:	bd38      	pop	{r3, r4, r5, pc}
 8019bc4:	8993      	ldrh	r3, [r2, #12]
 8019bc6:	f023 0320 	bic.w	r3, r3, #32
 8019bca:	8193      	strh	r3, [r2, #12]
 8019bcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019bce:	6852      	ldr	r2, [r2, #4]
 8019bd0:	b2cd      	uxtb	r5, r1
 8019bd2:	b18b      	cbz	r3, 8019bf8 <_sungetc_r+0x44>
 8019bd4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019bd6:	4293      	cmp	r3, r2
 8019bd8:	dd08      	ble.n	8019bec <_sungetc_r+0x38>
 8019bda:	6823      	ldr	r3, [r4, #0]
 8019bdc:	1e5a      	subs	r2, r3, #1
 8019bde:	6022      	str	r2, [r4, #0]
 8019be0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8019be4:	6863      	ldr	r3, [r4, #4]
 8019be6:	3301      	adds	r3, #1
 8019be8:	6063      	str	r3, [r4, #4]
 8019bea:	e7e9      	b.n	8019bc0 <_sungetc_r+0xc>
 8019bec:	4621      	mov	r1, r4
 8019bee:	f000 fca5 	bl	801a53c <__submore>
 8019bf2:	2800      	cmp	r0, #0
 8019bf4:	d0f1      	beq.n	8019bda <_sungetc_r+0x26>
 8019bf6:	e7e1      	b.n	8019bbc <_sungetc_r+0x8>
 8019bf8:	6921      	ldr	r1, [r4, #16]
 8019bfa:	6823      	ldr	r3, [r4, #0]
 8019bfc:	b151      	cbz	r1, 8019c14 <_sungetc_r+0x60>
 8019bfe:	4299      	cmp	r1, r3
 8019c00:	d208      	bcs.n	8019c14 <_sungetc_r+0x60>
 8019c02:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8019c06:	42a9      	cmp	r1, r5
 8019c08:	d104      	bne.n	8019c14 <_sungetc_r+0x60>
 8019c0a:	3b01      	subs	r3, #1
 8019c0c:	3201      	adds	r2, #1
 8019c0e:	6023      	str	r3, [r4, #0]
 8019c10:	6062      	str	r2, [r4, #4]
 8019c12:	e7d5      	b.n	8019bc0 <_sungetc_r+0xc>
 8019c14:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8019c18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019c1c:	6363      	str	r3, [r4, #52]	; 0x34
 8019c1e:	2303      	movs	r3, #3
 8019c20:	63a3      	str	r3, [r4, #56]	; 0x38
 8019c22:	4623      	mov	r3, r4
 8019c24:	f803 5f46 	strb.w	r5, [r3, #70]!
 8019c28:	6023      	str	r3, [r4, #0]
 8019c2a:	2301      	movs	r3, #1
 8019c2c:	e7dc      	b.n	8019be8 <_sungetc_r+0x34>

08019c2e <__ssrefill_r>:
 8019c2e:	b510      	push	{r4, lr}
 8019c30:	460c      	mov	r4, r1
 8019c32:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019c34:	b169      	cbz	r1, 8019c52 <__ssrefill_r+0x24>
 8019c36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019c3a:	4299      	cmp	r1, r3
 8019c3c:	d001      	beq.n	8019c42 <__ssrefill_r+0x14>
 8019c3e:	f7fb f909 	bl	8014e54 <_free_r>
 8019c42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019c44:	6063      	str	r3, [r4, #4]
 8019c46:	2000      	movs	r0, #0
 8019c48:	6360      	str	r0, [r4, #52]	; 0x34
 8019c4a:	b113      	cbz	r3, 8019c52 <__ssrefill_r+0x24>
 8019c4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019c4e:	6023      	str	r3, [r4, #0]
 8019c50:	bd10      	pop	{r4, pc}
 8019c52:	6923      	ldr	r3, [r4, #16]
 8019c54:	6023      	str	r3, [r4, #0]
 8019c56:	2300      	movs	r3, #0
 8019c58:	6063      	str	r3, [r4, #4]
 8019c5a:	89a3      	ldrh	r3, [r4, #12]
 8019c5c:	f043 0320 	orr.w	r3, r3, #32
 8019c60:	81a3      	strh	r3, [r4, #12]
 8019c62:	f04f 30ff 	mov.w	r0, #4294967295
 8019c66:	e7f3      	b.n	8019c50 <__ssrefill_r+0x22>

08019c68 <__ssvfiscanf_r>:
 8019c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c6c:	460c      	mov	r4, r1
 8019c6e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8019c72:	2100      	movs	r1, #0
 8019c74:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8019c78:	49b2      	ldr	r1, [pc, #712]	; (8019f44 <__ssvfiscanf_r+0x2dc>)
 8019c7a:	91a0      	str	r1, [sp, #640]	; 0x280
 8019c7c:	f10d 0804 	add.w	r8, sp, #4
 8019c80:	49b1      	ldr	r1, [pc, #708]	; (8019f48 <__ssvfiscanf_r+0x2e0>)
 8019c82:	4fb2      	ldr	r7, [pc, #712]	; (8019f4c <__ssvfiscanf_r+0x2e4>)
 8019c84:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8019f50 <__ssvfiscanf_r+0x2e8>
 8019c88:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8019c8c:	4606      	mov	r6, r0
 8019c8e:	91a1      	str	r1, [sp, #644]	; 0x284
 8019c90:	9300      	str	r3, [sp, #0]
 8019c92:	f892 a000 	ldrb.w	sl, [r2]
 8019c96:	f1ba 0f00 	cmp.w	sl, #0
 8019c9a:	f000 8151 	beq.w	8019f40 <__ssvfiscanf_r+0x2d8>
 8019c9e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8019ca2:	f013 0308 	ands.w	r3, r3, #8
 8019ca6:	f102 0501 	add.w	r5, r2, #1
 8019caa:	d019      	beq.n	8019ce0 <__ssvfiscanf_r+0x78>
 8019cac:	6863      	ldr	r3, [r4, #4]
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	dd0f      	ble.n	8019cd2 <__ssvfiscanf_r+0x6a>
 8019cb2:	6823      	ldr	r3, [r4, #0]
 8019cb4:	781a      	ldrb	r2, [r3, #0]
 8019cb6:	5cba      	ldrb	r2, [r7, r2]
 8019cb8:	0712      	lsls	r2, r2, #28
 8019cba:	d401      	bmi.n	8019cc0 <__ssvfiscanf_r+0x58>
 8019cbc:	462a      	mov	r2, r5
 8019cbe:	e7e8      	b.n	8019c92 <__ssvfiscanf_r+0x2a>
 8019cc0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019cc2:	3201      	adds	r2, #1
 8019cc4:	9245      	str	r2, [sp, #276]	; 0x114
 8019cc6:	6862      	ldr	r2, [r4, #4]
 8019cc8:	3301      	adds	r3, #1
 8019cca:	3a01      	subs	r2, #1
 8019ccc:	6062      	str	r2, [r4, #4]
 8019cce:	6023      	str	r3, [r4, #0]
 8019cd0:	e7ec      	b.n	8019cac <__ssvfiscanf_r+0x44>
 8019cd2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019cd4:	4621      	mov	r1, r4
 8019cd6:	4630      	mov	r0, r6
 8019cd8:	4798      	blx	r3
 8019cda:	2800      	cmp	r0, #0
 8019cdc:	d0e9      	beq.n	8019cb2 <__ssvfiscanf_r+0x4a>
 8019cde:	e7ed      	b.n	8019cbc <__ssvfiscanf_r+0x54>
 8019ce0:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8019ce4:	f040 8083 	bne.w	8019dee <__ssvfiscanf_r+0x186>
 8019ce8:	9341      	str	r3, [sp, #260]	; 0x104
 8019cea:	9343      	str	r3, [sp, #268]	; 0x10c
 8019cec:	7853      	ldrb	r3, [r2, #1]
 8019cee:	2b2a      	cmp	r3, #42	; 0x2a
 8019cf0:	bf02      	ittt	eq
 8019cf2:	2310      	moveq	r3, #16
 8019cf4:	1c95      	addeq	r5, r2, #2
 8019cf6:	9341      	streq	r3, [sp, #260]	; 0x104
 8019cf8:	220a      	movs	r2, #10
 8019cfa:	46ab      	mov	fp, r5
 8019cfc:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8019d00:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8019d04:	2b09      	cmp	r3, #9
 8019d06:	d91d      	bls.n	8019d44 <__ssvfiscanf_r+0xdc>
 8019d08:	4891      	ldr	r0, [pc, #580]	; (8019f50 <__ssvfiscanf_r+0x2e8>)
 8019d0a:	2203      	movs	r2, #3
 8019d0c:	f7e6 fa88 	bl	8000220 <memchr>
 8019d10:	b140      	cbz	r0, 8019d24 <__ssvfiscanf_r+0xbc>
 8019d12:	2301      	movs	r3, #1
 8019d14:	eba0 0009 	sub.w	r0, r0, r9
 8019d18:	fa03 f000 	lsl.w	r0, r3, r0
 8019d1c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019d1e:	4318      	orrs	r0, r3
 8019d20:	9041      	str	r0, [sp, #260]	; 0x104
 8019d22:	465d      	mov	r5, fp
 8019d24:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019d28:	2b78      	cmp	r3, #120	; 0x78
 8019d2a:	d806      	bhi.n	8019d3a <__ssvfiscanf_r+0xd2>
 8019d2c:	2b57      	cmp	r3, #87	; 0x57
 8019d2e:	d810      	bhi.n	8019d52 <__ssvfiscanf_r+0xea>
 8019d30:	2b25      	cmp	r3, #37	; 0x25
 8019d32:	d05c      	beq.n	8019dee <__ssvfiscanf_r+0x186>
 8019d34:	d856      	bhi.n	8019de4 <__ssvfiscanf_r+0x17c>
 8019d36:	2b00      	cmp	r3, #0
 8019d38:	d074      	beq.n	8019e24 <__ssvfiscanf_r+0x1bc>
 8019d3a:	2303      	movs	r3, #3
 8019d3c:	9347      	str	r3, [sp, #284]	; 0x11c
 8019d3e:	230a      	movs	r3, #10
 8019d40:	9342      	str	r3, [sp, #264]	; 0x108
 8019d42:	e081      	b.n	8019e48 <__ssvfiscanf_r+0x1e0>
 8019d44:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8019d46:	fb02 1303 	mla	r3, r2, r3, r1
 8019d4a:	3b30      	subs	r3, #48	; 0x30
 8019d4c:	9343      	str	r3, [sp, #268]	; 0x10c
 8019d4e:	465d      	mov	r5, fp
 8019d50:	e7d3      	b.n	8019cfa <__ssvfiscanf_r+0x92>
 8019d52:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8019d56:	2a20      	cmp	r2, #32
 8019d58:	d8ef      	bhi.n	8019d3a <__ssvfiscanf_r+0xd2>
 8019d5a:	a101      	add	r1, pc, #4	; (adr r1, 8019d60 <__ssvfiscanf_r+0xf8>)
 8019d5c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8019d60:	08019e33 	.word	0x08019e33
 8019d64:	08019d3b 	.word	0x08019d3b
 8019d68:	08019d3b 	.word	0x08019d3b
 8019d6c:	08019e91 	.word	0x08019e91
 8019d70:	08019d3b 	.word	0x08019d3b
 8019d74:	08019d3b 	.word	0x08019d3b
 8019d78:	08019d3b 	.word	0x08019d3b
 8019d7c:	08019d3b 	.word	0x08019d3b
 8019d80:	08019d3b 	.word	0x08019d3b
 8019d84:	08019d3b 	.word	0x08019d3b
 8019d88:	08019d3b 	.word	0x08019d3b
 8019d8c:	08019ea7 	.word	0x08019ea7
 8019d90:	08019e7d 	.word	0x08019e7d
 8019d94:	08019deb 	.word	0x08019deb
 8019d98:	08019deb 	.word	0x08019deb
 8019d9c:	08019deb 	.word	0x08019deb
 8019da0:	08019d3b 	.word	0x08019d3b
 8019da4:	08019e81 	.word	0x08019e81
 8019da8:	08019d3b 	.word	0x08019d3b
 8019dac:	08019d3b 	.word	0x08019d3b
 8019db0:	08019d3b 	.word	0x08019d3b
 8019db4:	08019d3b 	.word	0x08019d3b
 8019db8:	08019eb7 	.word	0x08019eb7
 8019dbc:	08019e89 	.word	0x08019e89
 8019dc0:	08019e2b 	.word	0x08019e2b
 8019dc4:	08019d3b 	.word	0x08019d3b
 8019dc8:	08019d3b 	.word	0x08019d3b
 8019dcc:	08019eb3 	.word	0x08019eb3
 8019dd0:	08019d3b 	.word	0x08019d3b
 8019dd4:	08019e7d 	.word	0x08019e7d
 8019dd8:	08019d3b 	.word	0x08019d3b
 8019ddc:	08019d3b 	.word	0x08019d3b
 8019de0:	08019e33 	.word	0x08019e33
 8019de4:	3b45      	subs	r3, #69	; 0x45
 8019de6:	2b02      	cmp	r3, #2
 8019de8:	d8a7      	bhi.n	8019d3a <__ssvfiscanf_r+0xd2>
 8019dea:	2305      	movs	r3, #5
 8019dec:	e02b      	b.n	8019e46 <__ssvfiscanf_r+0x1de>
 8019dee:	6863      	ldr	r3, [r4, #4]
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	dd0d      	ble.n	8019e10 <__ssvfiscanf_r+0x1a8>
 8019df4:	6823      	ldr	r3, [r4, #0]
 8019df6:	781a      	ldrb	r2, [r3, #0]
 8019df8:	4552      	cmp	r2, sl
 8019dfa:	f040 80a1 	bne.w	8019f40 <__ssvfiscanf_r+0x2d8>
 8019dfe:	3301      	adds	r3, #1
 8019e00:	6862      	ldr	r2, [r4, #4]
 8019e02:	6023      	str	r3, [r4, #0]
 8019e04:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8019e06:	3a01      	subs	r2, #1
 8019e08:	3301      	adds	r3, #1
 8019e0a:	6062      	str	r2, [r4, #4]
 8019e0c:	9345      	str	r3, [sp, #276]	; 0x114
 8019e0e:	e755      	b.n	8019cbc <__ssvfiscanf_r+0x54>
 8019e10:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019e12:	4621      	mov	r1, r4
 8019e14:	4630      	mov	r0, r6
 8019e16:	4798      	blx	r3
 8019e18:	2800      	cmp	r0, #0
 8019e1a:	d0eb      	beq.n	8019df4 <__ssvfiscanf_r+0x18c>
 8019e1c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019e1e:	2800      	cmp	r0, #0
 8019e20:	f040 8084 	bne.w	8019f2c <__ssvfiscanf_r+0x2c4>
 8019e24:	f04f 30ff 	mov.w	r0, #4294967295
 8019e28:	e086      	b.n	8019f38 <__ssvfiscanf_r+0x2d0>
 8019e2a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019e2c:	f042 0220 	orr.w	r2, r2, #32
 8019e30:	9241      	str	r2, [sp, #260]	; 0x104
 8019e32:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019e38:	9241      	str	r2, [sp, #260]	; 0x104
 8019e3a:	2210      	movs	r2, #16
 8019e3c:	2b6f      	cmp	r3, #111	; 0x6f
 8019e3e:	9242      	str	r2, [sp, #264]	; 0x108
 8019e40:	bf34      	ite	cc
 8019e42:	2303      	movcc	r3, #3
 8019e44:	2304      	movcs	r3, #4
 8019e46:	9347      	str	r3, [sp, #284]	; 0x11c
 8019e48:	6863      	ldr	r3, [r4, #4]
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	dd41      	ble.n	8019ed2 <__ssvfiscanf_r+0x26a>
 8019e4e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019e50:	0659      	lsls	r1, r3, #25
 8019e52:	d404      	bmi.n	8019e5e <__ssvfiscanf_r+0x1f6>
 8019e54:	6823      	ldr	r3, [r4, #0]
 8019e56:	781a      	ldrb	r2, [r3, #0]
 8019e58:	5cba      	ldrb	r2, [r7, r2]
 8019e5a:	0712      	lsls	r2, r2, #28
 8019e5c:	d440      	bmi.n	8019ee0 <__ssvfiscanf_r+0x278>
 8019e5e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8019e60:	2b02      	cmp	r3, #2
 8019e62:	dc4f      	bgt.n	8019f04 <__ssvfiscanf_r+0x29c>
 8019e64:	466b      	mov	r3, sp
 8019e66:	4622      	mov	r2, r4
 8019e68:	a941      	add	r1, sp, #260	; 0x104
 8019e6a:	4630      	mov	r0, r6
 8019e6c:	f000 f9ce 	bl	801a20c <_scanf_chars>
 8019e70:	2801      	cmp	r0, #1
 8019e72:	d065      	beq.n	8019f40 <__ssvfiscanf_r+0x2d8>
 8019e74:	2802      	cmp	r0, #2
 8019e76:	f47f af21 	bne.w	8019cbc <__ssvfiscanf_r+0x54>
 8019e7a:	e7cf      	b.n	8019e1c <__ssvfiscanf_r+0x1b4>
 8019e7c:	220a      	movs	r2, #10
 8019e7e:	e7dd      	b.n	8019e3c <__ssvfiscanf_r+0x1d4>
 8019e80:	2300      	movs	r3, #0
 8019e82:	9342      	str	r3, [sp, #264]	; 0x108
 8019e84:	2303      	movs	r3, #3
 8019e86:	e7de      	b.n	8019e46 <__ssvfiscanf_r+0x1de>
 8019e88:	2308      	movs	r3, #8
 8019e8a:	9342      	str	r3, [sp, #264]	; 0x108
 8019e8c:	2304      	movs	r3, #4
 8019e8e:	e7da      	b.n	8019e46 <__ssvfiscanf_r+0x1de>
 8019e90:	4629      	mov	r1, r5
 8019e92:	4640      	mov	r0, r8
 8019e94:	f000 fb18 	bl	801a4c8 <__sccl>
 8019e98:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019e9e:	9341      	str	r3, [sp, #260]	; 0x104
 8019ea0:	4605      	mov	r5, r0
 8019ea2:	2301      	movs	r3, #1
 8019ea4:	e7cf      	b.n	8019e46 <__ssvfiscanf_r+0x1de>
 8019ea6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019eac:	9341      	str	r3, [sp, #260]	; 0x104
 8019eae:	2300      	movs	r3, #0
 8019eb0:	e7c9      	b.n	8019e46 <__ssvfiscanf_r+0x1de>
 8019eb2:	2302      	movs	r3, #2
 8019eb4:	e7c7      	b.n	8019e46 <__ssvfiscanf_r+0x1de>
 8019eb6:	9841      	ldr	r0, [sp, #260]	; 0x104
 8019eb8:	06c3      	lsls	r3, r0, #27
 8019eba:	f53f aeff 	bmi.w	8019cbc <__ssvfiscanf_r+0x54>
 8019ebe:	9b00      	ldr	r3, [sp, #0]
 8019ec0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019ec2:	1d19      	adds	r1, r3, #4
 8019ec4:	9100      	str	r1, [sp, #0]
 8019ec6:	681b      	ldr	r3, [r3, #0]
 8019ec8:	07c0      	lsls	r0, r0, #31
 8019eca:	bf4c      	ite	mi
 8019ecc:	801a      	strhmi	r2, [r3, #0]
 8019ece:	601a      	strpl	r2, [r3, #0]
 8019ed0:	e6f4      	b.n	8019cbc <__ssvfiscanf_r+0x54>
 8019ed2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019ed4:	4621      	mov	r1, r4
 8019ed6:	4630      	mov	r0, r6
 8019ed8:	4798      	blx	r3
 8019eda:	2800      	cmp	r0, #0
 8019edc:	d0b7      	beq.n	8019e4e <__ssvfiscanf_r+0x1e6>
 8019ede:	e79d      	b.n	8019e1c <__ssvfiscanf_r+0x1b4>
 8019ee0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019ee2:	3201      	adds	r2, #1
 8019ee4:	9245      	str	r2, [sp, #276]	; 0x114
 8019ee6:	6862      	ldr	r2, [r4, #4]
 8019ee8:	3a01      	subs	r2, #1
 8019eea:	2a00      	cmp	r2, #0
 8019eec:	6062      	str	r2, [r4, #4]
 8019eee:	dd02      	ble.n	8019ef6 <__ssvfiscanf_r+0x28e>
 8019ef0:	3301      	adds	r3, #1
 8019ef2:	6023      	str	r3, [r4, #0]
 8019ef4:	e7ae      	b.n	8019e54 <__ssvfiscanf_r+0x1ec>
 8019ef6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019ef8:	4621      	mov	r1, r4
 8019efa:	4630      	mov	r0, r6
 8019efc:	4798      	blx	r3
 8019efe:	2800      	cmp	r0, #0
 8019f00:	d0a8      	beq.n	8019e54 <__ssvfiscanf_r+0x1ec>
 8019f02:	e78b      	b.n	8019e1c <__ssvfiscanf_r+0x1b4>
 8019f04:	2b04      	cmp	r3, #4
 8019f06:	dc06      	bgt.n	8019f16 <__ssvfiscanf_r+0x2ae>
 8019f08:	466b      	mov	r3, sp
 8019f0a:	4622      	mov	r2, r4
 8019f0c:	a941      	add	r1, sp, #260	; 0x104
 8019f0e:	4630      	mov	r0, r6
 8019f10:	f000 f9d4 	bl	801a2bc <_scanf_i>
 8019f14:	e7ac      	b.n	8019e70 <__ssvfiscanf_r+0x208>
 8019f16:	4b0f      	ldr	r3, [pc, #60]	; (8019f54 <__ssvfiscanf_r+0x2ec>)
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	f43f aecf 	beq.w	8019cbc <__ssvfiscanf_r+0x54>
 8019f1e:	466b      	mov	r3, sp
 8019f20:	4622      	mov	r2, r4
 8019f22:	a941      	add	r1, sp, #260	; 0x104
 8019f24:	4630      	mov	r0, r6
 8019f26:	f7fb fca9 	bl	801587c <_scanf_float>
 8019f2a:	e7a1      	b.n	8019e70 <__ssvfiscanf_r+0x208>
 8019f2c:	89a3      	ldrh	r3, [r4, #12]
 8019f2e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019f32:	bf18      	it	ne
 8019f34:	f04f 30ff 	movne.w	r0, #4294967295
 8019f38:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8019f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f40:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019f42:	e7f9      	b.n	8019f38 <__ssvfiscanf_r+0x2d0>
 8019f44:	08019bb5 	.word	0x08019bb5
 8019f48:	08019c2f 	.word	0x08019c2f
 8019f4c:	0801c689 	.word	0x0801c689
 8019f50:	0801ccea 	.word	0x0801ccea
 8019f54:	0801587d 	.word	0x0801587d

08019f58 <__sfputc_r>:
 8019f58:	6893      	ldr	r3, [r2, #8]
 8019f5a:	3b01      	subs	r3, #1
 8019f5c:	2b00      	cmp	r3, #0
 8019f5e:	b410      	push	{r4}
 8019f60:	6093      	str	r3, [r2, #8]
 8019f62:	da08      	bge.n	8019f76 <__sfputc_r+0x1e>
 8019f64:	6994      	ldr	r4, [r2, #24]
 8019f66:	42a3      	cmp	r3, r4
 8019f68:	db01      	blt.n	8019f6e <__sfputc_r+0x16>
 8019f6a:	290a      	cmp	r1, #10
 8019f6c:	d103      	bne.n	8019f76 <__sfputc_r+0x1e>
 8019f6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019f72:	f7fd ba73 	b.w	801745c <__swbuf_r>
 8019f76:	6813      	ldr	r3, [r2, #0]
 8019f78:	1c58      	adds	r0, r3, #1
 8019f7a:	6010      	str	r0, [r2, #0]
 8019f7c:	7019      	strb	r1, [r3, #0]
 8019f7e:	4608      	mov	r0, r1
 8019f80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019f84:	4770      	bx	lr

08019f86 <__sfputs_r>:
 8019f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f88:	4606      	mov	r6, r0
 8019f8a:	460f      	mov	r7, r1
 8019f8c:	4614      	mov	r4, r2
 8019f8e:	18d5      	adds	r5, r2, r3
 8019f90:	42ac      	cmp	r4, r5
 8019f92:	d101      	bne.n	8019f98 <__sfputs_r+0x12>
 8019f94:	2000      	movs	r0, #0
 8019f96:	e007      	b.n	8019fa8 <__sfputs_r+0x22>
 8019f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f9c:	463a      	mov	r2, r7
 8019f9e:	4630      	mov	r0, r6
 8019fa0:	f7ff ffda 	bl	8019f58 <__sfputc_r>
 8019fa4:	1c43      	adds	r3, r0, #1
 8019fa6:	d1f3      	bne.n	8019f90 <__sfputs_r+0xa>
 8019fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019fac <_vfiprintf_r>:
 8019fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fb0:	460d      	mov	r5, r1
 8019fb2:	b09d      	sub	sp, #116	; 0x74
 8019fb4:	4614      	mov	r4, r2
 8019fb6:	4698      	mov	r8, r3
 8019fb8:	4606      	mov	r6, r0
 8019fba:	b118      	cbz	r0, 8019fc4 <_vfiprintf_r+0x18>
 8019fbc:	6983      	ldr	r3, [r0, #24]
 8019fbe:	b90b      	cbnz	r3, 8019fc4 <_vfiprintf_r+0x18>
 8019fc0:	f7fa faa6 	bl	8014510 <__sinit>
 8019fc4:	4b89      	ldr	r3, [pc, #548]	; (801a1ec <_vfiprintf_r+0x240>)
 8019fc6:	429d      	cmp	r5, r3
 8019fc8:	d11b      	bne.n	801a002 <_vfiprintf_r+0x56>
 8019fca:	6875      	ldr	r5, [r6, #4]
 8019fcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019fce:	07d9      	lsls	r1, r3, #31
 8019fd0:	d405      	bmi.n	8019fde <_vfiprintf_r+0x32>
 8019fd2:	89ab      	ldrh	r3, [r5, #12]
 8019fd4:	059a      	lsls	r2, r3, #22
 8019fd6:	d402      	bmi.n	8019fde <_vfiprintf_r+0x32>
 8019fd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019fda:	f7fa fc79 	bl	80148d0 <__retarget_lock_acquire_recursive>
 8019fde:	89ab      	ldrh	r3, [r5, #12]
 8019fe0:	071b      	lsls	r3, r3, #28
 8019fe2:	d501      	bpl.n	8019fe8 <_vfiprintf_r+0x3c>
 8019fe4:	692b      	ldr	r3, [r5, #16]
 8019fe6:	b9eb      	cbnz	r3, 801a024 <_vfiprintf_r+0x78>
 8019fe8:	4629      	mov	r1, r5
 8019fea:	4630      	mov	r0, r6
 8019fec:	f7fd fa9a 	bl	8017524 <__swsetup_r>
 8019ff0:	b1c0      	cbz	r0, 801a024 <_vfiprintf_r+0x78>
 8019ff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019ff4:	07dc      	lsls	r4, r3, #31
 8019ff6:	d50e      	bpl.n	801a016 <_vfiprintf_r+0x6a>
 8019ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8019ffc:	b01d      	add	sp, #116	; 0x74
 8019ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a002:	4b7b      	ldr	r3, [pc, #492]	; (801a1f0 <_vfiprintf_r+0x244>)
 801a004:	429d      	cmp	r5, r3
 801a006:	d101      	bne.n	801a00c <_vfiprintf_r+0x60>
 801a008:	68b5      	ldr	r5, [r6, #8]
 801a00a:	e7df      	b.n	8019fcc <_vfiprintf_r+0x20>
 801a00c:	4b79      	ldr	r3, [pc, #484]	; (801a1f4 <_vfiprintf_r+0x248>)
 801a00e:	429d      	cmp	r5, r3
 801a010:	bf08      	it	eq
 801a012:	68f5      	ldreq	r5, [r6, #12]
 801a014:	e7da      	b.n	8019fcc <_vfiprintf_r+0x20>
 801a016:	89ab      	ldrh	r3, [r5, #12]
 801a018:	0598      	lsls	r0, r3, #22
 801a01a:	d4ed      	bmi.n	8019ff8 <_vfiprintf_r+0x4c>
 801a01c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a01e:	f7fa fc59 	bl	80148d4 <__retarget_lock_release_recursive>
 801a022:	e7e9      	b.n	8019ff8 <_vfiprintf_r+0x4c>
 801a024:	2300      	movs	r3, #0
 801a026:	9309      	str	r3, [sp, #36]	; 0x24
 801a028:	2320      	movs	r3, #32
 801a02a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a02e:	f8cd 800c 	str.w	r8, [sp, #12]
 801a032:	2330      	movs	r3, #48	; 0x30
 801a034:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a1f8 <_vfiprintf_r+0x24c>
 801a038:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a03c:	f04f 0901 	mov.w	r9, #1
 801a040:	4623      	mov	r3, r4
 801a042:	469a      	mov	sl, r3
 801a044:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a048:	b10a      	cbz	r2, 801a04e <_vfiprintf_r+0xa2>
 801a04a:	2a25      	cmp	r2, #37	; 0x25
 801a04c:	d1f9      	bne.n	801a042 <_vfiprintf_r+0x96>
 801a04e:	ebba 0b04 	subs.w	fp, sl, r4
 801a052:	d00b      	beq.n	801a06c <_vfiprintf_r+0xc0>
 801a054:	465b      	mov	r3, fp
 801a056:	4622      	mov	r2, r4
 801a058:	4629      	mov	r1, r5
 801a05a:	4630      	mov	r0, r6
 801a05c:	f7ff ff93 	bl	8019f86 <__sfputs_r>
 801a060:	3001      	adds	r0, #1
 801a062:	f000 80aa 	beq.w	801a1ba <_vfiprintf_r+0x20e>
 801a066:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a068:	445a      	add	r2, fp
 801a06a:	9209      	str	r2, [sp, #36]	; 0x24
 801a06c:	f89a 3000 	ldrb.w	r3, [sl]
 801a070:	2b00      	cmp	r3, #0
 801a072:	f000 80a2 	beq.w	801a1ba <_vfiprintf_r+0x20e>
 801a076:	2300      	movs	r3, #0
 801a078:	f04f 32ff 	mov.w	r2, #4294967295
 801a07c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a080:	f10a 0a01 	add.w	sl, sl, #1
 801a084:	9304      	str	r3, [sp, #16]
 801a086:	9307      	str	r3, [sp, #28]
 801a088:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a08c:	931a      	str	r3, [sp, #104]	; 0x68
 801a08e:	4654      	mov	r4, sl
 801a090:	2205      	movs	r2, #5
 801a092:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a096:	4858      	ldr	r0, [pc, #352]	; (801a1f8 <_vfiprintf_r+0x24c>)
 801a098:	f7e6 f8c2 	bl	8000220 <memchr>
 801a09c:	9a04      	ldr	r2, [sp, #16]
 801a09e:	b9d8      	cbnz	r0, 801a0d8 <_vfiprintf_r+0x12c>
 801a0a0:	06d1      	lsls	r1, r2, #27
 801a0a2:	bf44      	itt	mi
 801a0a4:	2320      	movmi	r3, #32
 801a0a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a0aa:	0713      	lsls	r3, r2, #28
 801a0ac:	bf44      	itt	mi
 801a0ae:	232b      	movmi	r3, #43	; 0x2b
 801a0b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a0b4:	f89a 3000 	ldrb.w	r3, [sl]
 801a0b8:	2b2a      	cmp	r3, #42	; 0x2a
 801a0ba:	d015      	beq.n	801a0e8 <_vfiprintf_r+0x13c>
 801a0bc:	9a07      	ldr	r2, [sp, #28]
 801a0be:	4654      	mov	r4, sl
 801a0c0:	2000      	movs	r0, #0
 801a0c2:	f04f 0c0a 	mov.w	ip, #10
 801a0c6:	4621      	mov	r1, r4
 801a0c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a0cc:	3b30      	subs	r3, #48	; 0x30
 801a0ce:	2b09      	cmp	r3, #9
 801a0d0:	d94e      	bls.n	801a170 <_vfiprintf_r+0x1c4>
 801a0d2:	b1b0      	cbz	r0, 801a102 <_vfiprintf_r+0x156>
 801a0d4:	9207      	str	r2, [sp, #28]
 801a0d6:	e014      	b.n	801a102 <_vfiprintf_r+0x156>
 801a0d8:	eba0 0308 	sub.w	r3, r0, r8
 801a0dc:	fa09 f303 	lsl.w	r3, r9, r3
 801a0e0:	4313      	orrs	r3, r2
 801a0e2:	9304      	str	r3, [sp, #16]
 801a0e4:	46a2      	mov	sl, r4
 801a0e6:	e7d2      	b.n	801a08e <_vfiprintf_r+0xe2>
 801a0e8:	9b03      	ldr	r3, [sp, #12]
 801a0ea:	1d19      	adds	r1, r3, #4
 801a0ec:	681b      	ldr	r3, [r3, #0]
 801a0ee:	9103      	str	r1, [sp, #12]
 801a0f0:	2b00      	cmp	r3, #0
 801a0f2:	bfbb      	ittet	lt
 801a0f4:	425b      	neglt	r3, r3
 801a0f6:	f042 0202 	orrlt.w	r2, r2, #2
 801a0fa:	9307      	strge	r3, [sp, #28]
 801a0fc:	9307      	strlt	r3, [sp, #28]
 801a0fe:	bfb8      	it	lt
 801a100:	9204      	strlt	r2, [sp, #16]
 801a102:	7823      	ldrb	r3, [r4, #0]
 801a104:	2b2e      	cmp	r3, #46	; 0x2e
 801a106:	d10c      	bne.n	801a122 <_vfiprintf_r+0x176>
 801a108:	7863      	ldrb	r3, [r4, #1]
 801a10a:	2b2a      	cmp	r3, #42	; 0x2a
 801a10c:	d135      	bne.n	801a17a <_vfiprintf_r+0x1ce>
 801a10e:	9b03      	ldr	r3, [sp, #12]
 801a110:	1d1a      	adds	r2, r3, #4
 801a112:	681b      	ldr	r3, [r3, #0]
 801a114:	9203      	str	r2, [sp, #12]
 801a116:	2b00      	cmp	r3, #0
 801a118:	bfb8      	it	lt
 801a11a:	f04f 33ff 	movlt.w	r3, #4294967295
 801a11e:	3402      	adds	r4, #2
 801a120:	9305      	str	r3, [sp, #20]
 801a122:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a208 <_vfiprintf_r+0x25c>
 801a126:	7821      	ldrb	r1, [r4, #0]
 801a128:	2203      	movs	r2, #3
 801a12a:	4650      	mov	r0, sl
 801a12c:	f7e6 f878 	bl	8000220 <memchr>
 801a130:	b140      	cbz	r0, 801a144 <_vfiprintf_r+0x198>
 801a132:	2340      	movs	r3, #64	; 0x40
 801a134:	eba0 000a 	sub.w	r0, r0, sl
 801a138:	fa03 f000 	lsl.w	r0, r3, r0
 801a13c:	9b04      	ldr	r3, [sp, #16]
 801a13e:	4303      	orrs	r3, r0
 801a140:	3401      	adds	r4, #1
 801a142:	9304      	str	r3, [sp, #16]
 801a144:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a148:	482c      	ldr	r0, [pc, #176]	; (801a1fc <_vfiprintf_r+0x250>)
 801a14a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a14e:	2206      	movs	r2, #6
 801a150:	f7e6 f866 	bl	8000220 <memchr>
 801a154:	2800      	cmp	r0, #0
 801a156:	d03f      	beq.n	801a1d8 <_vfiprintf_r+0x22c>
 801a158:	4b29      	ldr	r3, [pc, #164]	; (801a200 <_vfiprintf_r+0x254>)
 801a15a:	bb1b      	cbnz	r3, 801a1a4 <_vfiprintf_r+0x1f8>
 801a15c:	9b03      	ldr	r3, [sp, #12]
 801a15e:	3307      	adds	r3, #7
 801a160:	f023 0307 	bic.w	r3, r3, #7
 801a164:	3308      	adds	r3, #8
 801a166:	9303      	str	r3, [sp, #12]
 801a168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a16a:	443b      	add	r3, r7
 801a16c:	9309      	str	r3, [sp, #36]	; 0x24
 801a16e:	e767      	b.n	801a040 <_vfiprintf_r+0x94>
 801a170:	fb0c 3202 	mla	r2, ip, r2, r3
 801a174:	460c      	mov	r4, r1
 801a176:	2001      	movs	r0, #1
 801a178:	e7a5      	b.n	801a0c6 <_vfiprintf_r+0x11a>
 801a17a:	2300      	movs	r3, #0
 801a17c:	3401      	adds	r4, #1
 801a17e:	9305      	str	r3, [sp, #20]
 801a180:	4619      	mov	r1, r3
 801a182:	f04f 0c0a 	mov.w	ip, #10
 801a186:	4620      	mov	r0, r4
 801a188:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a18c:	3a30      	subs	r2, #48	; 0x30
 801a18e:	2a09      	cmp	r2, #9
 801a190:	d903      	bls.n	801a19a <_vfiprintf_r+0x1ee>
 801a192:	2b00      	cmp	r3, #0
 801a194:	d0c5      	beq.n	801a122 <_vfiprintf_r+0x176>
 801a196:	9105      	str	r1, [sp, #20]
 801a198:	e7c3      	b.n	801a122 <_vfiprintf_r+0x176>
 801a19a:	fb0c 2101 	mla	r1, ip, r1, r2
 801a19e:	4604      	mov	r4, r0
 801a1a0:	2301      	movs	r3, #1
 801a1a2:	e7f0      	b.n	801a186 <_vfiprintf_r+0x1da>
 801a1a4:	ab03      	add	r3, sp, #12
 801a1a6:	9300      	str	r3, [sp, #0]
 801a1a8:	462a      	mov	r2, r5
 801a1aa:	4b16      	ldr	r3, [pc, #88]	; (801a204 <_vfiprintf_r+0x258>)
 801a1ac:	a904      	add	r1, sp, #16
 801a1ae:	4630      	mov	r0, r6
 801a1b0:	f7fa ff9a 	bl	80150e8 <_printf_float>
 801a1b4:	4607      	mov	r7, r0
 801a1b6:	1c78      	adds	r0, r7, #1
 801a1b8:	d1d6      	bne.n	801a168 <_vfiprintf_r+0x1bc>
 801a1ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a1bc:	07d9      	lsls	r1, r3, #31
 801a1be:	d405      	bmi.n	801a1cc <_vfiprintf_r+0x220>
 801a1c0:	89ab      	ldrh	r3, [r5, #12]
 801a1c2:	059a      	lsls	r2, r3, #22
 801a1c4:	d402      	bmi.n	801a1cc <_vfiprintf_r+0x220>
 801a1c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a1c8:	f7fa fb84 	bl	80148d4 <__retarget_lock_release_recursive>
 801a1cc:	89ab      	ldrh	r3, [r5, #12]
 801a1ce:	065b      	lsls	r3, r3, #25
 801a1d0:	f53f af12 	bmi.w	8019ff8 <_vfiprintf_r+0x4c>
 801a1d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a1d6:	e711      	b.n	8019ffc <_vfiprintf_r+0x50>
 801a1d8:	ab03      	add	r3, sp, #12
 801a1da:	9300      	str	r3, [sp, #0]
 801a1dc:	462a      	mov	r2, r5
 801a1de:	4b09      	ldr	r3, [pc, #36]	; (801a204 <_vfiprintf_r+0x258>)
 801a1e0:	a904      	add	r1, sp, #16
 801a1e2:	4630      	mov	r0, r6
 801a1e4:	f7fb fa24 	bl	8015630 <_printf_i>
 801a1e8:	e7e4      	b.n	801a1b4 <_vfiprintf_r+0x208>
 801a1ea:	bf00      	nop
 801a1ec:	0801c7ac 	.word	0x0801c7ac
 801a1f0:	0801c7cc 	.word	0x0801c7cc
 801a1f4:	0801c78c 	.word	0x0801c78c
 801a1f8:	0801cce4 	.word	0x0801cce4
 801a1fc:	0801ccee 	.word	0x0801ccee
 801a200:	080150e9 	.word	0x080150e9
 801a204:	08019f87 	.word	0x08019f87
 801a208:	0801ccea 	.word	0x0801ccea

0801a20c <_scanf_chars>:
 801a20c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a210:	4615      	mov	r5, r2
 801a212:	688a      	ldr	r2, [r1, #8]
 801a214:	4680      	mov	r8, r0
 801a216:	460c      	mov	r4, r1
 801a218:	b932      	cbnz	r2, 801a228 <_scanf_chars+0x1c>
 801a21a:	698a      	ldr	r2, [r1, #24]
 801a21c:	2a00      	cmp	r2, #0
 801a21e:	bf0c      	ite	eq
 801a220:	2201      	moveq	r2, #1
 801a222:	f04f 32ff 	movne.w	r2, #4294967295
 801a226:	608a      	str	r2, [r1, #8]
 801a228:	6822      	ldr	r2, [r4, #0]
 801a22a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801a2b8 <_scanf_chars+0xac>
 801a22e:	06d1      	lsls	r1, r2, #27
 801a230:	bf5f      	itttt	pl
 801a232:	681a      	ldrpl	r2, [r3, #0]
 801a234:	1d11      	addpl	r1, r2, #4
 801a236:	6019      	strpl	r1, [r3, #0]
 801a238:	6816      	ldrpl	r6, [r2, #0]
 801a23a:	2700      	movs	r7, #0
 801a23c:	69a0      	ldr	r0, [r4, #24]
 801a23e:	b188      	cbz	r0, 801a264 <_scanf_chars+0x58>
 801a240:	2801      	cmp	r0, #1
 801a242:	d107      	bne.n	801a254 <_scanf_chars+0x48>
 801a244:	682b      	ldr	r3, [r5, #0]
 801a246:	781a      	ldrb	r2, [r3, #0]
 801a248:	6963      	ldr	r3, [r4, #20]
 801a24a:	5c9b      	ldrb	r3, [r3, r2]
 801a24c:	b953      	cbnz	r3, 801a264 <_scanf_chars+0x58>
 801a24e:	bb27      	cbnz	r7, 801a29a <_scanf_chars+0x8e>
 801a250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a254:	2802      	cmp	r0, #2
 801a256:	d120      	bne.n	801a29a <_scanf_chars+0x8e>
 801a258:	682b      	ldr	r3, [r5, #0]
 801a25a:	781b      	ldrb	r3, [r3, #0]
 801a25c:	f813 3009 	ldrb.w	r3, [r3, r9]
 801a260:	071b      	lsls	r3, r3, #28
 801a262:	d41a      	bmi.n	801a29a <_scanf_chars+0x8e>
 801a264:	6823      	ldr	r3, [r4, #0]
 801a266:	06da      	lsls	r2, r3, #27
 801a268:	bf5e      	ittt	pl
 801a26a:	682b      	ldrpl	r3, [r5, #0]
 801a26c:	781b      	ldrbpl	r3, [r3, #0]
 801a26e:	f806 3b01 	strbpl.w	r3, [r6], #1
 801a272:	682a      	ldr	r2, [r5, #0]
 801a274:	686b      	ldr	r3, [r5, #4]
 801a276:	3201      	adds	r2, #1
 801a278:	602a      	str	r2, [r5, #0]
 801a27a:	68a2      	ldr	r2, [r4, #8]
 801a27c:	3b01      	subs	r3, #1
 801a27e:	3a01      	subs	r2, #1
 801a280:	606b      	str	r3, [r5, #4]
 801a282:	3701      	adds	r7, #1
 801a284:	60a2      	str	r2, [r4, #8]
 801a286:	b142      	cbz	r2, 801a29a <_scanf_chars+0x8e>
 801a288:	2b00      	cmp	r3, #0
 801a28a:	dcd7      	bgt.n	801a23c <_scanf_chars+0x30>
 801a28c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a290:	4629      	mov	r1, r5
 801a292:	4640      	mov	r0, r8
 801a294:	4798      	blx	r3
 801a296:	2800      	cmp	r0, #0
 801a298:	d0d0      	beq.n	801a23c <_scanf_chars+0x30>
 801a29a:	6823      	ldr	r3, [r4, #0]
 801a29c:	f013 0310 	ands.w	r3, r3, #16
 801a2a0:	d105      	bne.n	801a2ae <_scanf_chars+0xa2>
 801a2a2:	68e2      	ldr	r2, [r4, #12]
 801a2a4:	3201      	adds	r2, #1
 801a2a6:	60e2      	str	r2, [r4, #12]
 801a2a8:	69a2      	ldr	r2, [r4, #24]
 801a2aa:	b102      	cbz	r2, 801a2ae <_scanf_chars+0xa2>
 801a2ac:	7033      	strb	r3, [r6, #0]
 801a2ae:	6923      	ldr	r3, [r4, #16]
 801a2b0:	441f      	add	r7, r3
 801a2b2:	6127      	str	r7, [r4, #16]
 801a2b4:	2000      	movs	r0, #0
 801a2b6:	e7cb      	b.n	801a250 <_scanf_chars+0x44>
 801a2b8:	0801c689 	.word	0x0801c689

0801a2bc <_scanf_i>:
 801a2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2c0:	4698      	mov	r8, r3
 801a2c2:	4b74      	ldr	r3, [pc, #464]	; (801a494 <_scanf_i+0x1d8>)
 801a2c4:	460c      	mov	r4, r1
 801a2c6:	4682      	mov	sl, r0
 801a2c8:	4616      	mov	r6, r2
 801a2ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a2ce:	b087      	sub	sp, #28
 801a2d0:	ab03      	add	r3, sp, #12
 801a2d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801a2d6:	4b70      	ldr	r3, [pc, #448]	; (801a498 <_scanf_i+0x1dc>)
 801a2d8:	69a1      	ldr	r1, [r4, #24]
 801a2da:	4a70      	ldr	r2, [pc, #448]	; (801a49c <_scanf_i+0x1e0>)
 801a2dc:	2903      	cmp	r1, #3
 801a2de:	bf18      	it	ne
 801a2e0:	461a      	movne	r2, r3
 801a2e2:	68a3      	ldr	r3, [r4, #8]
 801a2e4:	9201      	str	r2, [sp, #4]
 801a2e6:	1e5a      	subs	r2, r3, #1
 801a2e8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a2ec:	bf88      	it	hi
 801a2ee:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a2f2:	4627      	mov	r7, r4
 801a2f4:	bf82      	ittt	hi
 801a2f6:	eb03 0905 	addhi.w	r9, r3, r5
 801a2fa:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a2fe:	60a3      	strhi	r3, [r4, #8]
 801a300:	f857 3b1c 	ldr.w	r3, [r7], #28
 801a304:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801a308:	bf98      	it	ls
 801a30a:	f04f 0900 	movls.w	r9, #0
 801a30e:	6023      	str	r3, [r4, #0]
 801a310:	463d      	mov	r5, r7
 801a312:	f04f 0b00 	mov.w	fp, #0
 801a316:	6831      	ldr	r1, [r6, #0]
 801a318:	ab03      	add	r3, sp, #12
 801a31a:	7809      	ldrb	r1, [r1, #0]
 801a31c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801a320:	2202      	movs	r2, #2
 801a322:	f7e5 ff7d 	bl	8000220 <memchr>
 801a326:	b328      	cbz	r0, 801a374 <_scanf_i+0xb8>
 801a328:	f1bb 0f01 	cmp.w	fp, #1
 801a32c:	d159      	bne.n	801a3e2 <_scanf_i+0x126>
 801a32e:	6862      	ldr	r2, [r4, #4]
 801a330:	b92a      	cbnz	r2, 801a33e <_scanf_i+0x82>
 801a332:	6822      	ldr	r2, [r4, #0]
 801a334:	2308      	movs	r3, #8
 801a336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a33a:	6063      	str	r3, [r4, #4]
 801a33c:	6022      	str	r2, [r4, #0]
 801a33e:	6822      	ldr	r2, [r4, #0]
 801a340:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801a344:	6022      	str	r2, [r4, #0]
 801a346:	68a2      	ldr	r2, [r4, #8]
 801a348:	1e51      	subs	r1, r2, #1
 801a34a:	60a1      	str	r1, [r4, #8]
 801a34c:	b192      	cbz	r2, 801a374 <_scanf_i+0xb8>
 801a34e:	6832      	ldr	r2, [r6, #0]
 801a350:	1c51      	adds	r1, r2, #1
 801a352:	6031      	str	r1, [r6, #0]
 801a354:	7812      	ldrb	r2, [r2, #0]
 801a356:	f805 2b01 	strb.w	r2, [r5], #1
 801a35a:	6872      	ldr	r2, [r6, #4]
 801a35c:	3a01      	subs	r2, #1
 801a35e:	2a00      	cmp	r2, #0
 801a360:	6072      	str	r2, [r6, #4]
 801a362:	dc07      	bgt.n	801a374 <_scanf_i+0xb8>
 801a364:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801a368:	4631      	mov	r1, r6
 801a36a:	4650      	mov	r0, sl
 801a36c:	4790      	blx	r2
 801a36e:	2800      	cmp	r0, #0
 801a370:	f040 8085 	bne.w	801a47e <_scanf_i+0x1c2>
 801a374:	f10b 0b01 	add.w	fp, fp, #1
 801a378:	f1bb 0f03 	cmp.w	fp, #3
 801a37c:	d1cb      	bne.n	801a316 <_scanf_i+0x5a>
 801a37e:	6863      	ldr	r3, [r4, #4]
 801a380:	b90b      	cbnz	r3, 801a386 <_scanf_i+0xca>
 801a382:	230a      	movs	r3, #10
 801a384:	6063      	str	r3, [r4, #4]
 801a386:	6863      	ldr	r3, [r4, #4]
 801a388:	4945      	ldr	r1, [pc, #276]	; (801a4a0 <_scanf_i+0x1e4>)
 801a38a:	6960      	ldr	r0, [r4, #20]
 801a38c:	1ac9      	subs	r1, r1, r3
 801a38e:	f000 f89b 	bl	801a4c8 <__sccl>
 801a392:	f04f 0b00 	mov.w	fp, #0
 801a396:	68a3      	ldr	r3, [r4, #8]
 801a398:	6822      	ldr	r2, [r4, #0]
 801a39a:	2b00      	cmp	r3, #0
 801a39c:	d03d      	beq.n	801a41a <_scanf_i+0x15e>
 801a39e:	6831      	ldr	r1, [r6, #0]
 801a3a0:	6960      	ldr	r0, [r4, #20]
 801a3a2:	f891 c000 	ldrb.w	ip, [r1]
 801a3a6:	f810 000c 	ldrb.w	r0, [r0, ip]
 801a3aa:	2800      	cmp	r0, #0
 801a3ac:	d035      	beq.n	801a41a <_scanf_i+0x15e>
 801a3ae:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801a3b2:	d124      	bne.n	801a3fe <_scanf_i+0x142>
 801a3b4:	0510      	lsls	r0, r2, #20
 801a3b6:	d522      	bpl.n	801a3fe <_scanf_i+0x142>
 801a3b8:	f10b 0b01 	add.w	fp, fp, #1
 801a3bc:	f1b9 0f00 	cmp.w	r9, #0
 801a3c0:	d003      	beq.n	801a3ca <_scanf_i+0x10e>
 801a3c2:	3301      	adds	r3, #1
 801a3c4:	f109 39ff 	add.w	r9, r9, #4294967295
 801a3c8:	60a3      	str	r3, [r4, #8]
 801a3ca:	6873      	ldr	r3, [r6, #4]
 801a3cc:	3b01      	subs	r3, #1
 801a3ce:	2b00      	cmp	r3, #0
 801a3d0:	6073      	str	r3, [r6, #4]
 801a3d2:	dd1b      	ble.n	801a40c <_scanf_i+0x150>
 801a3d4:	6833      	ldr	r3, [r6, #0]
 801a3d6:	3301      	adds	r3, #1
 801a3d8:	6033      	str	r3, [r6, #0]
 801a3da:	68a3      	ldr	r3, [r4, #8]
 801a3dc:	3b01      	subs	r3, #1
 801a3de:	60a3      	str	r3, [r4, #8]
 801a3e0:	e7d9      	b.n	801a396 <_scanf_i+0xda>
 801a3e2:	f1bb 0f02 	cmp.w	fp, #2
 801a3e6:	d1ae      	bne.n	801a346 <_scanf_i+0x8a>
 801a3e8:	6822      	ldr	r2, [r4, #0]
 801a3ea:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801a3ee:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801a3f2:	d1bf      	bne.n	801a374 <_scanf_i+0xb8>
 801a3f4:	2310      	movs	r3, #16
 801a3f6:	6063      	str	r3, [r4, #4]
 801a3f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801a3fc:	e7a2      	b.n	801a344 <_scanf_i+0x88>
 801a3fe:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801a402:	6022      	str	r2, [r4, #0]
 801a404:	780b      	ldrb	r3, [r1, #0]
 801a406:	f805 3b01 	strb.w	r3, [r5], #1
 801a40a:	e7de      	b.n	801a3ca <_scanf_i+0x10e>
 801a40c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a410:	4631      	mov	r1, r6
 801a412:	4650      	mov	r0, sl
 801a414:	4798      	blx	r3
 801a416:	2800      	cmp	r0, #0
 801a418:	d0df      	beq.n	801a3da <_scanf_i+0x11e>
 801a41a:	6823      	ldr	r3, [r4, #0]
 801a41c:	05d9      	lsls	r1, r3, #23
 801a41e:	d50d      	bpl.n	801a43c <_scanf_i+0x180>
 801a420:	42bd      	cmp	r5, r7
 801a422:	d909      	bls.n	801a438 <_scanf_i+0x17c>
 801a424:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801a428:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a42c:	4632      	mov	r2, r6
 801a42e:	4650      	mov	r0, sl
 801a430:	4798      	blx	r3
 801a432:	f105 39ff 	add.w	r9, r5, #4294967295
 801a436:	464d      	mov	r5, r9
 801a438:	42bd      	cmp	r5, r7
 801a43a:	d028      	beq.n	801a48e <_scanf_i+0x1d2>
 801a43c:	6822      	ldr	r2, [r4, #0]
 801a43e:	f012 0210 	ands.w	r2, r2, #16
 801a442:	d113      	bne.n	801a46c <_scanf_i+0x1b0>
 801a444:	702a      	strb	r2, [r5, #0]
 801a446:	6863      	ldr	r3, [r4, #4]
 801a448:	9e01      	ldr	r6, [sp, #4]
 801a44a:	4639      	mov	r1, r7
 801a44c:	4650      	mov	r0, sl
 801a44e:	47b0      	blx	r6
 801a450:	f8d8 3000 	ldr.w	r3, [r8]
 801a454:	6821      	ldr	r1, [r4, #0]
 801a456:	1d1a      	adds	r2, r3, #4
 801a458:	f8c8 2000 	str.w	r2, [r8]
 801a45c:	f011 0f20 	tst.w	r1, #32
 801a460:	681b      	ldr	r3, [r3, #0]
 801a462:	d00f      	beq.n	801a484 <_scanf_i+0x1c8>
 801a464:	6018      	str	r0, [r3, #0]
 801a466:	68e3      	ldr	r3, [r4, #12]
 801a468:	3301      	adds	r3, #1
 801a46a:	60e3      	str	r3, [r4, #12]
 801a46c:	1bed      	subs	r5, r5, r7
 801a46e:	44ab      	add	fp, r5
 801a470:	6925      	ldr	r5, [r4, #16]
 801a472:	445d      	add	r5, fp
 801a474:	6125      	str	r5, [r4, #16]
 801a476:	2000      	movs	r0, #0
 801a478:	b007      	add	sp, #28
 801a47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a47e:	f04f 0b00 	mov.w	fp, #0
 801a482:	e7ca      	b.n	801a41a <_scanf_i+0x15e>
 801a484:	07ca      	lsls	r2, r1, #31
 801a486:	bf4c      	ite	mi
 801a488:	8018      	strhmi	r0, [r3, #0]
 801a48a:	6018      	strpl	r0, [r3, #0]
 801a48c:	e7eb      	b.n	801a466 <_scanf_i+0x1aa>
 801a48e:	2001      	movs	r0, #1
 801a490:	e7f2      	b.n	801a478 <_scanf_i+0x1bc>
 801a492:	bf00      	nop
 801a494:	0801c4f0 	.word	0x0801c4f0
 801a498:	08016fd9 	.word	0x08016fd9
 801a49c:	08016ec9 	.word	0x08016ec9
 801a4a0:	0801cd0e 	.word	0x0801cd0e

0801a4a4 <_read_r>:
 801a4a4:	b538      	push	{r3, r4, r5, lr}
 801a4a6:	4d07      	ldr	r5, [pc, #28]	; (801a4c4 <_read_r+0x20>)
 801a4a8:	4604      	mov	r4, r0
 801a4aa:	4608      	mov	r0, r1
 801a4ac:	4611      	mov	r1, r2
 801a4ae:	2200      	movs	r2, #0
 801a4b0:	602a      	str	r2, [r5, #0]
 801a4b2:	461a      	mov	r2, r3
 801a4b4:	f000 f8f0 	bl	801a698 <_read>
 801a4b8:	1c43      	adds	r3, r0, #1
 801a4ba:	d102      	bne.n	801a4c2 <_read_r+0x1e>
 801a4bc:	682b      	ldr	r3, [r5, #0]
 801a4be:	b103      	cbz	r3, 801a4c2 <_read_r+0x1e>
 801a4c0:	6023      	str	r3, [r4, #0]
 801a4c2:	bd38      	pop	{r3, r4, r5, pc}
 801a4c4:	20006554 	.word	0x20006554

0801a4c8 <__sccl>:
 801a4c8:	b570      	push	{r4, r5, r6, lr}
 801a4ca:	780b      	ldrb	r3, [r1, #0]
 801a4cc:	4604      	mov	r4, r0
 801a4ce:	2b5e      	cmp	r3, #94	; 0x5e
 801a4d0:	bf0b      	itete	eq
 801a4d2:	784b      	ldrbeq	r3, [r1, #1]
 801a4d4:	1c48      	addne	r0, r1, #1
 801a4d6:	1c88      	addeq	r0, r1, #2
 801a4d8:	2200      	movne	r2, #0
 801a4da:	bf08      	it	eq
 801a4dc:	2201      	moveq	r2, #1
 801a4de:	1e61      	subs	r1, r4, #1
 801a4e0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801a4e4:	f801 2f01 	strb.w	r2, [r1, #1]!
 801a4e8:	42a9      	cmp	r1, r5
 801a4ea:	d1fb      	bne.n	801a4e4 <__sccl+0x1c>
 801a4ec:	b90b      	cbnz	r3, 801a4f2 <__sccl+0x2a>
 801a4ee:	3801      	subs	r0, #1
 801a4f0:	bd70      	pop	{r4, r5, r6, pc}
 801a4f2:	f082 0101 	eor.w	r1, r2, #1
 801a4f6:	54e1      	strb	r1, [r4, r3]
 801a4f8:	1c42      	adds	r2, r0, #1
 801a4fa:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801a4fe:	2d2d      	cmp	r5, #45	; 0x2d
 801a500:	f102 36ff 	add.w	r6, r2, #4294967295
 801a504:	4610      	mov	r0, r2
 801a506:	d006      	beq.n	801a516 <__sccl+0x4e>
 801a508:	2d5d      	cmp	r5, #93	; 0x5d
 801a50a:	d0f1      	beq.n	801a4f0 <__sccl+0x28>
 801a50c:	b90d      	cbnz	r5, 801a512 <__sccl+0x4a>
 801a50e:	4630      	mov	r0, r6
 801a510:	e7ee      	b.n	801a4f0 <__sccl+0x28>
 801a512:	462b      	mov	r3, r5
 801a514:	e7ef      	b.n	801a4f6 <__sccl+0x2e>
 801a516:	7816      	ldrb	r6, [r2, #0]
 801a518:	2e5d      	cmp	r6, #93	; 0x5d
 801a51a:	d0fa      	beq.n	801a512 <__sccl+0x4a>
 801a51c:	42b3      	cmp	r3, r6
 801a51e:	dcf8      	bgt.n	801a512 <__sccl+0x4a>
 801a520:	4618      	mov	r0, r3
 801a522:	3001      	adds	r0, #1
 801a524:	4286      	cmp	r6, r0
 801a526:	5421      	strb	r1, [r4, r0]
 801a528:	dcfb      	bgt.n	801a522 <__sccl+0x5a>
 801a52a:	43d8      	mvns	r0, r3
 801a52c:	4430      	add	r0, r6
 801a52e:	1c5d      	adds	r5, r3, #1
 801a530:	42b3      	cmp	r3, r6
 801a532:	bfa8      	it	ge
 801a534:	2000      	movge	r0, #0
 801a536:	182b      	adds	r3, r5, r0
 801a538:	3202      	adds	r2, #2
 801a53a:	e7de      	b.n	801a4fa <__sccl+0x32>

0801a53c <__submore>:
 801a53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a540:	460c      	mov	r4, r1
 801a542:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801a544:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a548:	4299      	cmp	r1, r3
 801a54a:	d11d      	bne.n	801a588 <__submore+0x4c>
 801a54c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801a550:	f7fa fcd0 	bl	8014ef4 <_malloc_r>
 801a554:	b918      	cbnz	r0, 801a55e <__submore+0x22>
 801a556:	f04f 30ff 	mov.w	r0, #4294967295
 801a55a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a55e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a562:	63a3      	str	r3, [r4, #56]	; 0x38
 801a564:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801a568:	6360      	str	r0, [r4, #52]	; 0x34
 801a56a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801a56e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801a572:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801a576:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a57a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801a57e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801a582:	6020      	str	r0, [r4, #0]
 801a584:	2000      	movs	r0, #0
 801a586:	e7e8      	b.n	801a55a <__submore+0x1e>
 801a588:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801a58a:	0077      	lsls	r7, r6, #1
 801a58c:	463a      	mov	r2, r7
 801a58e:	f7ff f98f 	bl	80198b0 <_realloc_r>
 801a592:	4605      	mov	r5, r0
 801a594:	2800      	cmp	r0, #0
 801a596:	d0de      	beq.n	801a556 <__submore+0x1a>
 801a598:	eb00 0806 	add.w	r8, r0, r6
 801a59c:	4601      	mov	r1, r0
 801a59e:	4632      	mov	r2, r6
 801a5a0:	4640      	mov	r0, r8
 801a5a2:	f7fa f9a9 	bl	80148f8 <memcpy>
 801a5a6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801a5aa:	f8c4 8000 	str.w	r8, [r4]
 801a5ae:	e7e9      	b.n	801a584 <__submore+0x48>

0801a5b0 <__ascii_wctomb>:
 801a5b0:	b149      	cbz	r1, 801a5c6 <__ascii_wctomb+0x16>
 801a5b2:	2aff      	cmp	r2, #255	; 0xff
 801a5b4:	bf85      	ittet	hi
 801a5b6:	238a      	movhi	r3, #138	; 0x8a
 801a5b8:	6003      	strhi	r3, [r0, #0]
 801a5ba:	700a      	strbls	r2, [r1, #0]
 801a5bc:	f04f 30ff 	movhi.w	r0, #4294967295
 801a5c0:	bf98      	it	ls
 801a5c2:	2001      	movls	r0, #1
 801a5c4:	4770      	bx	lr
 801a5c6:	4608      	mov	r0, r1
 801a5c8:	4770      	bx	lr
	...

0801a5cc <__env_lock>:
 801a5cc:	4801      	ldr	r0, [pc, #4]	; (801a5d4 <__env_lock+0x8>)
 801a5ce:	f7fa b97f 	b.w	80148d0 <__retarget_lock_acquire_recursive>
 801a5d2:	bf00      	nop
 801a5d4:	2000654a 	.word	0x2000654a

0801a5d8 <__env_unlock>:
 801a5d8:	4801      	ldr	r0, [pc, #4]	; (801a5e0 <__env_unlock+0x8>)
 801a5da:	f7fa b97b 	b.w	80148d4 <__retarget_lock_release_recursive>
 801a5de:	bf00      	nop
 801a5e0:	2000654a 	.word	0x2000654a

0801a5e4 <_fstat_r>:
 801a5e4:	b538      	push	{r3, r4, r5, lr}
 801a5e6:	4d07      	ldr	r5, [pc, #28]	; (801a604 <_fstat_r+0x20>)
 801a5e8:	2300      	movs	r3, #0
 801a5ea:	4604      	mov	r4, r0
 801a5ec:	4608      	mov	r0, r1
 801a5ee:	4611      	mov	r1, r2
 801a5f0:	602b      	str	r3, [r5, #0]
 801a5f2:	f000 f829 	bl	801a648 <_fstat>
 801a5f6:	1c43      	adds	r3, r0, #1
 801a5f8:	d102      	bne.n	801a600 <_fstat_r+0x1c>
 801a5fa:	682b      	ldr	r3, [r5, #0]
 801a5fc:	b103      	cbz	r3, 801a600 <_fstat_r+0x1c>
 801a5fe:	6023      	str	r3, [r4, #0]
 801a600:	bd38      	pop	{r3, r4, r5, pc}
 801a602:	bf00      	nop
 801a604:	20006554 	.word	0x20006554

0801a608 <_isatty_r>:
 801a608:	b538      	push	{r3, r4, r5, lr}
 801a60a:	4d06      	ldr	r5, [pc, #24]	; (801a624 <_isatty_r+0x1c>)
 801a60c:	2300      	movs	r3, #0
 801a60e:	4604      	mov	r4, r0
 801a610:	4608      	mov	r0, r1
 801a612:	602b      	str	r3, [r5, #0]
 801a614:	f000 f828 	bl	801a668 <_isatty>
 801a618:	1c43      	adds	r3, r0, #1
 801a61a:	d102      	bne.n	801a622 <_isatty_r+0x1a>
 801a61c:	682b      	ldr	r3, [r5, #0]
 801a61e:	b103      	cbz	r3, 801a622 <_isatty_r+0x1a>
 801a620:	6023      	str	r3, [r4, #0]
 801a622:	bd38      	pop	{r3, r4, r5, pc}
 801a624:	20006554 	.word	0x20006554

0801a628 <_malloc_usable_size_r>:
 801a628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a62c:	1f18      	subs	r0, r3, #4
 801a62e:	2b00      	cmp	r3, #0
 801a630:	bfbc      	itt	lt
 801a632:	580b      	ldrlt	r3, [r1, r0]
 801a634:	18c0      	addlt	r0, r0, r3
 801a636:	4770      	bx	lr

0801a638 <_close>:
 801a638:	4b02      	ldr	r3, [pc, #8]	; (801a644 <_close+0xc>)
 801a63a:	2258      	movs	r2, #88	; 0x58
 801a63c:	601a      	str	r2, [r3, #0]
 801a63e:	f04f 30ff 	mov.w	r0, #4294967295
 801a642:	4770      	bx	lr
 801a644:	20006554 	.word	0x20006554

0801a648 <_fstat>:
 801a648:	4b02      	ldr	r3, [pc, #8]	; (801a654 <_fstat+0xc>)
 801a64a:	2258      	movs	r2, #88	; 0x58
 801a64c:	601a      	str	r2, [r3, #0]
 801a64e:	f04f 30ff 	mov.w	r0, #4294967295
 801a652:	4770      	bx	lr
 801a654:	20006554 	.word	0x20006554

0801a658 <_getpid>:
 801a658:	4b02      	ldr	r3, [pc, #8]	; (801a664 <_getpid+0xc>)
 801a65a:	2258      	movs	r2, #88	; 0x58
 801a65c:	601a      	str	r2, [r3, #0]
 801a65e:	f04f 30ff 	mov.w	r0, #4294967295
 801a662:	4770      	bx	lr
 801a664:	20006554 	.word	0x20006554

0801a668 <_isatty>:
 801a668:	4b02      	ldr	r3, [pc, #8]	; (801a674 <_isatty+0xc>)
 801a66a:	2258      	movs	r2, #88	; 0x58
 801a66c:	601a      	str	r2, [r3, #0]
 801a66e:	2000      	movs	r0, #0
 801a670:	4770      	bx	lr
 801a672:	bf00      	nop
 801a674:	20006554 	.word	0x20006554

0801a678 <_kill>:
 801a678:	4b02      	ldr	r3, [pc, #8]	; (801a684 <_kill+0xc>)
 801a67a:	2258      	movs	r2, #88	; 0x58
 801a67c:	601a      	str	r2, [r3, #0]
 801a67e:	f04f 30ff 	mov.w	r0, #4294967295
 801a682:	4770      	bx	lr
 801a684:	20006554 	.word	0x20006554

0801a688 <_lseek>:
 801a688:	4b02      	ldr	r3, [pc, #8]	; (801a694 <_lseek+0xc>)
 801a68a:	2258      	movs	r2, #88	; 0x58
 801a68c:	601a      	str	r2, [r3, #0]
 801a68e:	f04f 30ff 	mov.w	r0, #4294967295
 801a692:	4770      	bx	lr
 801a694:	20006554 	.word	0x20006554

0801a698 <_read>:
 801a698:	4b02      	ldr	r3, [pc, #8]	; (801a6a4 <_read+0xc>)
 801a69a:	2258      	movs	r2, #88	; 0x58
 801a69c:	601a      	str	r2, [r3, #0]
 801a69e:	f04f 30ff 	mov.w	r0, #4294967295
 801a6a2:	4770      	bx	lr
 801a6a4:	20006554 	.word	0x20006554

0801a6a8 <_sbrk>:
 801a6a8:	4b04      	ldr	r3, [pc, #16]	; (801a6bc <_sbrk+0x14>)
 801a6aa:	6819      	ldr	r1, [r3, #0]
 801a6ac:	4602      	mov	r2, r0
 801a6ae:	b909      	cbnz	r1, 801a6b4 <_sbrk+0xc>
 801a6b0:	4903      	ldr	r1, [pc, #12]	; (801a6c0 <_sbrk+0x18>)
 801a6b2:	6019      	str	r1, [r3, #0]
 801a6b4:	6818      	ldr	r0, [r3, #0]
 801a6b6:	4402      	add	r2, r0
 801a6b8:	601a      	str	r2, [r3, #0]
 801a6ba:	4770      	bx	lr
 801a6bc:	20005ae8 	.word	0x20005ae8
 801a6c0:	20006558 	.word	0x20006558

0801a6c4 <_write>:
 801a6c4:	4b02      	ldr	r3, [pc, #8]	; (801a6d0 <_write+0xc>)
 801a6c6:	2258      	movs	r2, #88	; 0x58
 801a6c8:	601a      	str	r2, [r3, #0]
 801a6ca:	f04f 30ff 	mov.w	r0, #4294967295
 801a6ce:	4770      	bx	lr
 801a6d0:	20006554 	.word	0x20006554

0801a6d4 <_exit>:
 801a6d4:	e7fe      	b.n	801a6d4 <_exit>
	...

0801a6d8 <_init>:
 801a6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6da:	bf00      	nop
 801a6dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a6de:	bc08      	pop	{r3}
 801a6e0:	469e      	mov	lr, r3
 801a6e2:	4770      	bx	lr

0801a6e4 <_fini>:
 801a6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6e6:	bf00      	nop
 801a6e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a6ea:	bc08      	pop	{r3}
 801a6ec:	469e      	mov	lr, r3
 801a6ee:	4770      	bx	lr
